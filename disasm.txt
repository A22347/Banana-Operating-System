
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 69 9a 00 00       	call   c0009a89 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 79 11 02 00       	call   c002119e <_init>
c0000025:	c3                   	ret    
c0000026:	bb 22 1e 02 c0       	mov    ebx,0xc0021e22
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 30 1e 02 c0    	cmp    ebx,0xc0021e30
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 5e 02 c0       	mov    eax,0xc0025e78
c0000049:	3d 78 5e 02 c0       	cmp    eax,0xc0025e78
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 5e 02 c0       	push   0xc0025e78
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 5e 02 c0       	mov    eax,0xc0025e78
c0000075:	2d 78 5e 02 c0       	sub    eax,0xc0025e78
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 5e 02 c0       	push   0xc0025e78
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 00 60 02 c0 00 	cmp    BYTE PTR ds:0xc0026000,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 38 1e 02 c0       	mov    ebx,0xc0021e38
c00000bb:	81 eb 34 1e 02 c0    	sub    ebx,0xc0021e34
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 34 1e 02 c0       	mov    esi,0xc0021e34
c00000ca:	a1 04 60 02 c0       	mov    eax,ds:0xc0026004
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 04 60 02 c0       	mov    ds:0xc0026004,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 04 60 02 c0       	mov    eax,ds:0xc0026004
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 5e 02 c0       	push   0xc0025e78
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 00 60 02 c0 01 	mov    BYTE PTR ds:0xc0026000,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 08 60 02 c0       	push   0xc0026008
c000012c:	68 78 5e 02 c0       	push   0xc0025e78
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 2c 75 01 00       	call   c0017804 <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 40 c5 00 00       	call   c000c830 <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 0a 75 01 00       	call   c0017804 <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 d3 79 01 00       	call   c0017cec <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 16 80 01 00       	call   c0018338 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 50 64 02 c0 	lgdtd  ds:0xc0026450
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 ce e2 00 00       	call   c000e7e5 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 20 60 02 c0       	mov    ds:0xc0026020,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 20 60 02 c0    	mov    DWORD PTR ds:0xc0026020,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d 20 60 02 c0    	mov    ebx,DWORD PTR ds:0xc0026020
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 40 1e 02 c0 02 	test   BYTE PTR [edx-0x3ffde1c0],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 40 1e 02 c0 01 	test   BYTE PTR [edx-0x3ffde1c0],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 40 1e 02 c0 08 	test   BYTE PTR [edx-0x3ffde1c0],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 40 1e 02 c0 04 	test   BYTE PTR [ebx-0x3ffde1c0],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 40 1e 02 c0 01 	test   BYTE PTR [edx-0x3ffde1c0],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d 40 60 02 c0    	mov    ecx,DWORD PTR ds:0xc0026040
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d 40 60 02 c0    	mov    DWORD PTR ds:0xc0026040,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 44 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fbc]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 44 60 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9fbc],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d 40 60 02 c0    	mov    DWORD PTR ds:0xc0026040,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 6c 60 02 c0    	cmp    DWORD PTR ds:0xc002606c,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d 7c 60 02 c0    	mov    ecx,DWORD PTR ds:0xc002607c
c0000d6c:	c7 42 0c 74 60 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026074
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 7c 60 02 c0    	mov    DWORD PTR ds:0xc002607c,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 6c 60 02 c0    	mov    DWORD PTR ds:0xc002606c,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 40 60 02 c0 02 	test   BYTE PTR ds:0xc0026040,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 40 60 02 c0       	mov    eax,0xc0026040
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 3f 8a 00 00       	call   c000988c <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 81 89 00 00       	call   c000988c <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 6b 89 00 00       	call   c000988c <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 47 89 00 00       	call   c000988c <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d 40 60 02 c0    	mov    edi,DWORD PTR ds:0xc0026040
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 40 60 02 c0       	mov    eax,0xc0026040
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 44 60 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9fbc]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 44 60 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9fbc],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 74 60 02 c0 	lea    edx,[eax*8-0x3ffd9f8c]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 40 60 02 c0       	mov    eax,0xc0026040
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d 80 60 02 c0    	mov    ebx,DWORD PTR ds:0xc0026080
c00010ee:	81 fb 74 60 02 c0    	cmp    ebx,0xc0026074
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d 74 60 02 c0       	cmp    eax,0xc0026074
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d 70 60 02 c0    	cmp    DWORD PTR ds:0xc0026070,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 7c 60 02 c0       	mov    ds:0xc002607c,eax
c000112a:	a3 80 60 02 c0       	mov    ds:0xc0026080,eax
c000112f:	a3 70 60 02 c0       	mov    ds:0xc0026070,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 74 60 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026074
c000113d:	c7 40 0c 74 60 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026074
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 80 60 02 c0       	mov    ds:0xc0026080,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 74 60 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026074
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 38 60 02 c0 	lea    ebp,[edx*4-0x3ffd9fc8]
c000118e:	8b 14 95 40 60 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9fc0]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 40 60 02 c0 	lea    ecx,[edx*4-0x3ffd9fc0]
c00011a9:	8b 14 95 40 60 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9fc0]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd 74 63 02 c0 	or     DWORD PTR [edi*4-0x3ffd9c8c],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 74 60 02 c0 	lea    eax,[eax*8-0x3ffd9f8c]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d 7c 60 02 c0    	mov    DWORD PTR ds:0xc002607c,ecx
c0001263:	89 0d 80 60 02 c0    	mov    DWORD PTR ds:0xc0026080,ecx
c0001269:	c7 41 08 74 60 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026074
c0001270:	c7 41 0c 74 60 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026074
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd 6c 60 02 c0 	lea    edx,[ecx*8-0x3ffd9f94]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d 74 63 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9c8c]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d 74 63 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9c8c]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 6c 60 02 c0 	lea    edx,[eax*4-0x3ffd9f94]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d 74 63 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9c8c],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d 7c 60 02 c0    	mov    DWORD PTR ds:0xc002607c,edi
c0001336:	89 3d 80 60 02 c0    	mov    DWORD PTR ds:0xc0026080,edi
c000133c:	c7 47 08 74 60 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026074
c0001343:	c7 47 0c 74 60 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026074
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d 70 60 02 c0    	mov    DWORD PTR ds:0xc0026070,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 6c 60 02 c0       	mov    eax,ds:0xc002606c
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d 6c 60 02 c0    	mov    DWORD PTR ds:0xc002606c,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba 40 60 02 c0       	mov    edx,0xc0026040
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d 40 60 02 c0 00 	cmp    DWORD PTR ds:0xc0026040,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 40 60 02 c0       	mov    eax,0xc0026040
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d 94 63 02 c0    	mov    ebx,DWORD PTR ds:0xc0026394
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 94 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026394,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d 94 63 02 c0    	mov    DWORD PTR ds:0xc0026394,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 6c 60 02 c0    	cmp    DWORD PTR ds:0xc002606c,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d 6c 60 02 c0    	mov    DWORD PTR ds:0xc002606c,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d 40 60 02 c0 00 	cmp    DWORD PTR ds:0xc0026040,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 40 60 02 c0       	mov    eax,0xc0026040
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 9c 63 02 c0    	push   DWORD PTR ds:0xc002639c
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d 40 60 02 c0 00 	cmp    DWORD PTR ds:0xc0026040,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 40 60 02 c0       	mov    eax,0xc0026040
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 9c 63 02 c0       	mov    eax,ds:0xc002639c
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 40 60 02 c0       	mov    eax,0xc0026040
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d 6c 60 02 c0 00 	cmp    DWORD PTR ds:0xc002606c,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 40 60 02 c0       	mov    eax,0xc0026040
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 6c 60 02 c0       	mov    eax,ds:0xc002606c
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 44 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fbc]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 74 60 02 c0       	mov    eax,0xc0026074
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d 6c 63 02 c0       	cmp    eax,0xc002636c
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 a8 63 02 c0       	mov    eax,ds:0xc00263a8
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 90 63 02 c0    	mov    esi,DWORD PTR ds:0xc0026390
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 a4 63 02 c0    	mov    esi,DWORD PTR ds:0xc00263a4
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 b4 63 02 c0    	mov    esi,DWORD PTR ds:0xc00263b4
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 40 60 02 c0       	mov    eax,0xc0026040
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 44 1f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde0bc]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 40 60 02 c0       	mov    eax,ds:0xc0026040
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 40 60 02 c0       	mov    ds:0xc0026040,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d 84 63 02 c0    	mov    DWORD PTR ds:0xc0026384,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d 88 63 02 c0    	mov    DWORD PTR ds:0xc0026388,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d 8c 63 02 c0    	mov    DWORD PTR ds:0xc002638c,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 94 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026394,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 e0 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8520]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 16 95 01 00       	jmp    c001b03c <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 e0 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8520]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 48 95 01 00       	jmp    c001b084 <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 e0 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8520]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 71 95 01 00       	jmp    c001b0cc <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 46 f1 01 00       	call   c0020f84 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 60 20 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffddfa0]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 60 20 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffddfa0]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba 60 1f 02 c0       	mov    edx,0xc0021f60
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba 80 20 02 c0       	mov    edx,0xc0022080
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba 64 4b 02 c0       	mov    edx,0xc0024b64
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba 8c 20 02 c0       	mov    edx,0xc002208c
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba 70 20 02 c0       	mov    edx,0xc0022070
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 e0 63 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd9c20]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 c0 63 02 c0    	mov    ax,ds:0xc00263c0
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 c0 63 02 c0    	mov    ds:0xc00263c0,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 43 df 01 00       	call   c0020f84 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 92 20 02 c0       	mov    eax,0xc0022092
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad e0 1f 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffde020]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 9b 20 02 c0       	mov    eax,0xc002209b
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 60 20 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffddfa0]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 0e c9 01 00       	call   c0020f84 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba 70 20 02 c0       	mov    edx,0xc0022070
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba 60 1f 02 c0       	mov    edx,0xc0021f60
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba 70 1f 02 c0       	mov    edx,0xc0021f70
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 e0 63 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9c20]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 e0 63 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9c20],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 d5 b2 01 00       	call   c0020f84 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 bb b2 01 00       	call   c0020f84 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 b7 1f 02 c0       	mov    eax,0xc0021fb7
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 b0 1f 02 c0       	mov    eax,0xc0021fb0
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 54 9e 01 00       	call   c0020f84 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 e0 63 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9c20]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be a0 1f 02 c0       	mov    esi,0xc0021fa0
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 c8 97 01 00       	call   c0020f84 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba 80 20 02 c0       	mov    edx,0xc0022080
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba 80 1f 02 c0       	mov    edx,0xc0021f80
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba 90 1f 02 c0       	mov    edx,0xc0021f90
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba a2 20 02 c0       	mov    edx,0xc00220a2
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba ae 20 02 c0       	mov    edx,0xc00220ae
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba c2 20 02 c0       	mov    edx,0xc00220c2
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 f0 13 00 00       	call   c00099c3 <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 e8 13 00 00       	call   c00099d3 <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c e0 23 02 c0 	mov    DWORD PTR [esp+0xc],0xc00223e0
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 e0 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc00223e0
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 e0 21 02 c0       	mov    eax,0xc00221e0
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 20 21 02 c0       	mov    eax,0xc0022120
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 e0 20 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddf20]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 4a 11 00 00       	jmp    c00099c3 <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 65 11 00 00       	jmp    c00099e3 <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000888b:	48                   	dec    eax
c000888c:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00088a2:	48                   	dec    eax
c00088a3:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c00088b3:	ff 05 44 79 02 c0    	inc    DWORD PTR ds:0xc0027944
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c00088c2:	48                   	dec    eax
c00088c3:	a3 44 79 02 c0       	mov    ds:0xc0027944,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d 40 79 02 c0 00 	cmp    DWORD PTR ds:0xc0027940,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c00088dd:	e8 76 f6 00 00       	call   c0017f58 <schedule()>
c00088e2:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00088e7:	48                   	dec    eax
c00088e8:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 b0 65 02 c0       	mov    eax,ds:0xc00265b0
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 e0 24 02 c0       	push   0xc00224e0
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 48 64 02 c0       	mov    eax,0xc0026448
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 e9 24 02 c0       	push   0xc00224e9
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 84 0f 02 c0       	mov    eax,0xc0020f84
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 f3 24 02 c0       	push   0xc00224f3
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 b8 0c 02 c0       	mov    eax,0xc0020cb8
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 fc 24 02 c0       	push   0xc00224fc
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 84 10 02 c0       	mov    eax,0xc0021084
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 06 25 02 c0       	push   0xc0022506
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 04 0e 02 c0       	mov    eax,0xc0020e04
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 0f 25 02 c0       	push   0xc002250f
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 4c 64 02 c0       	mov    eax,0xc002644c
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 1c 25 02 c0       	push   0xc002251c
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 4d 64 02 c0       	mov    eax,0xc002644d
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 4f 56 00 00       	call   c000e094 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 29 25 02 c0       	push   0xc0022529
c0008a75:	e8 a3 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 40 25 02 c0 	mov    DWORD PTR [esp],0xc0022540
c0008a82:	e8 96 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 30 0f 00 00       	call   c00099c3 <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 70 79 02 c0    	push   DWORD PTR ds:0xc0027970
c0008aa2:	68 59 25 02 c0       	push   0xc0022559
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 85 f0 00 00       	call   c0017b34 <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 bd 93 00 c0       	push   0xc00093bd
c0008abe:	53                   	push   ebx
c0008abf:	e8 78 f2 00 00       	call   c0017d3c <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 80 87 01 c0       	push   0xc0018780
c0008acd:	ff 35 70 79 02 c0    	push   DWORD PTR ds:0xc0027970
c0008ad3:	e8 64 f2 00 00       	call   c0017d3c <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0008ae0:	68 00 27 02 c0       	push   0xc0022700
c0008ae5:	c6 05 4d 64 02 c0 01 	mov    BYTE PTR ds:0xc002644d,0x1
c0008aec:	e8 2c 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008af1:	e8 65 00 01 00       	call   c0018b5b <Vm::initialise8086()>
c0008af6:	e8 5f 43 00 00       	call   c000ce5a <Fs::initVFS()>
c0008afb:	c7 04 24 66 25 02 c0 	mov    DWORD PTR [esp],0xc0022566
c0008b02:	e8 16 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b07:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 00 27 02 c0       	push   0xc0022700
c0008b26:	e8 f2 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 72 d8 00 00       	call   c00163a2 <Sys::loadSyscalls()>
c0008b30:	e8 47 b7 00 00       	call   c001427c <Krnl::loadSystemEnv()>
c0008b35:	83 c4 0c             	add    esp,0xc
c0008b38:	6a 3a                	push   0x3a
c0008b3a:	68 80 25 02 c0       	push   0xc0022580
c0008b3f:	68 89 25 02 c0       	push   0xc0022589
c0008b44:	e8 1c c6 00 00       	call   c0015165 <Reg::readIntWithDefault(char*, char*, int)>
c0008b49:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b4c:	e8 fb 4d 00 00       	call   c000d94c <User::loadClockSettings(int)>
c0008b51:	c7 04 24 24 27 02 c0 	mov    DWORD PTR [esp],0xc0022724
c0008b58:	e8 c0 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b5d:	58                   	pop    eax
c0008b5e:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0008b63:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b69:	e8 e6 54 00 00       	call   c000e054 <Device::loadDriversForAll()>
c0008b6e:	c7 04 24 91 25 02 c0 	mov    DWORD PTR [esp],0xc0022591
c0008b75:	e8 a3 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b7a:	e8 65 b2 00 00       	call   c0013de4 <Krnl::startCPUs()>
c0008b7f:	c7 04 24 ab 25 02 c0 	mov    DWORD PTR [esp],0xc00225ab
c0008b86:	e8 92 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b8b:	5a                   	pop    edx
c0008b8c:	8b 1d 48 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026448
c0008b92:	59                   	pop    ecx
c0008b93:	6a 01                	push   0x1
c0008b95:	68 bc 25 02 c0       	push   0xc00225bc
c0008b9a:	e8 d3 e9 00 00       	call   c0017572 <Thr::loadDLL(char const*, bool)>
c0008b9f:	5a                   	pop    edx
c0008ba0:	59                   	pop    ecx
c0008ba1:	53                   	push   ebx
c0008ba2:	50                   	push   eax
c0008ba3:	e8 fb eb 00 00       	call   c00177a3 <Thr::executeDLL(unsigned long, void*)>
c0008ba8:	83 c4 10             	add    esp,0x10
c0008bab:	83 ec 0c             	sub    esp,0xc
c0008bae:	6a 02                	push   0x2
c0008bb0:	e8 9b f5 00 00       	call   c0018150 <blockTask(TaskState)>
c0008bb5:	83 c4 10             	add    esp,0x10
c0008bb8:	eb f1                	jmp    c0008bab <Krnl::firstTask()+0x13f>

c0008bba <Computer::Computer()>:
c0008bba:	83 ec 0c             	sub    esp,0xc
c0008bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc1:	83 ec 08             	sub    esp,0x8
c0008bc4:	68 d8 25 02 c0       	push   0xc00225d8
c0008bc9:	50                   	push   eax
c0008bca:	e8 3f 55 00 00       	call   c000e10e <Device::Device(char const*)>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	ba d4 27 02 c0       	mov    edx,0xc00227d4
c0008bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdb:	89 10                	mov    DWORD PTR [eax],edx
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bef:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c03:	83 ca 04             	or     edx,0x4
c0008c06:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c16:	0f b6 d0             	movzx  edx,al
c0008c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2e:	0f b6 d0             	movzx  edx,al
c0008c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c35:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	8d 50 01             	lea    edx,[eax+0x1]
c0008c47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c4b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c51:	0f b6 d0             	movzx  edx,al
c0008c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c58:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5c:	83 e1 3f             	and    ecx,0x3f
c0008c5f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6d:	0f b6 d0             	movzx  edx,al
c0008c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c74:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c85:	0f b6 d0             	movzx  edx,al
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca8:	0f b6 d0             	movzx  edx,al
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb3:	83 e1 3f             	and    ecx,0x3f
c0008cb6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc4:	0f b6 d0             	movzx  edx,al
c0008cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cdc:	0f b6 d0             	movzx  edx,al
c0008cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce3:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cff:	0f b6 d0             	movzx  edx,al
c0008d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d06:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d0a:	83 e1 3f             	and    ecx,0x3f
c0008d0d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d11:	90                   	nop
c0008d12:	83 c4 0c             	add    esp,0xc
c0008d15:	c3                   	ret    

c0008d16 <Computer::setBootMessage(char const*)>:
c0008d16:	c3                   	ret    
c0008d17:	90                   	nop

c0008d18 <Computer::detectFeatures()>:
c0008d18:	55                   	push   ebp
c0008d19:	57                   	push   edi
c0008d1a:	56                   	push   esi
c0008d1b:	53                   	push   ebx
c0008d1c:	83 ec 1c             	sub    esp,0x1c
c0008d1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d23:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2d:	e8 e7 74 ff ff       	call   c0000219 <detectCPUID>
c0008d32:	85 c0                	test   eax,eax
c0008d34:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d3a:	0f 95 c2             	setne  dl
c0008d3d:	83 e0 fd             	and    eax,0xfffffffd
c0008d40:	d1 e2                	shl    edx,1
c0008d42:	09 d0                	or     eax,edx
c0008d44:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d4a:	a8 02                	test   al,0x2
c0008d4c:	75 46                	jne    c0008d94 <Computer::detectFeatures()+0x7c>
c0008d4e:	f6 05 61 64 02 c0 04 	test   BYTE PTR ds:0xc0026461,0x4
c0008d55:	74 07                	je     c0008d5e <Computer::detectFeatures()+0x46>
c0008d57:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5e:	e8 e3 7e 01 00       	call   c0020c46 <x87Detect>
c0008d63:	83 e0 01             	and    eax,0x1
c0008d66:	c1 e0 04             	shl    eax,0x4
c0008d69:	88 c2                	mov    dl,al
c0008d6b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d71:	83 e0 ef             	and    eax,0xffffffef
c0008d74:	09 d0                	or     eax,edx
c0008d76:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7c:	a8 10                	test   al,0x10
c0008d7e:	0f 85 2a 01 00 00    	jne    c0008eae <Computer::detectFeatures()+0x196>
c0008d84:	84 c0                	test   al,al
c0008d86:	0f 88 45 01 00 00    	js     c0008ed1 <Computer::detectFeatures()+0x1b9>
c0008d8c:	83 c4 1c             	add    esp,0x1c
c0008d8f:	5b                   	pop    ebx
c0008d90:	5e                   	pop    esi
c0008d91:	5f                   	pop    edi
c0008d92:	5d                   	pop    ebp
c0008d93:	c3                   	ret    
c0008d94:	83 ec 0c             	sub    esp,0xc
c0008d97:	6a 20                	push   0x20
c0008d99:	e8 48 9f 00 00       	call   c0012ce6 <CPU::cpuidCheckEDX(unsigned int)>
c0008d9e:	83 e0 01             	and    eax,0x1
c0008da1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dae:	83 e0 f7             	and    eax,0xfffffff7
c0008db1:	09 d0                	or     eax,edx
c0008db3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db9:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc0:	e8 21 9f 00 00       	call   c0012ce6 <CPU::cpuidCheckEDX(unsigned int)>
c0008dc5:	83 e0 01             	and    eax,0x1
c0008dc8:	88 c2                	mov    dl,al
c0008dca:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd0:	83 e0 fe             	and    eax,0xfffffffe
c0008dd3:	09 d0                	or     eax,edx
c0008dd5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ddb:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de2:	e8 ff 9e 00 00       	call   c0012ce6 <CPU::cpuidCheckEDX(unsigned int)>
c0008de7:	c1 e0 07             	shl    eax,0x7
c0008dea:	88 c2                	mov    dl,al
c0008dec:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df2:	83 e0 7f             	and    eax,0x7f
c0008df5:	09 d0                	or     eax,edx
c0008df7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e04:	e8 dd 9e 00 00       	call   c0012ce6 <CPU::cpuidCheckEDX(unsigned int)>
c0008e09:	83 c4 10             	add    esp,0x10
c0008e0c:	83 e0 01             	and    eax,0x1
c0008e0f:	c1 e0 05             	shl    eax,0x5
c0008e12:	88 c2                	mov    dl,al
c0008e14:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e1a:	83 e0 df             	and    eax,0xffffffdf
c0008e1d:	09 d0                	or     eax,edx
c0008e1f:	f7 05 60 64 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026460,0x401
c0008e29:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2f:	0f 84 c2 00 00 00    	je     c0008ef7 <Computer::detectFeatures()+0x1df>
c0008e35:	83 e0 fe             	and    eax,0xfffffffe
c0008e38:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e44:	88 c2                	mov    dl,al
c0008e46:	83 e2 09             	and    edx,0x9
c0008e49:	fe ca                	dec    dl
c0008e4b:	75 09                	jne    c0008e56 <Computer::detectFeatures()+0x13e>
c0008e4d:	83 e0 fe             	and    eax,0xfffffffe
c0008e50:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e56:	83 ec 0c             	sub    esp,0xc
c0008e59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5d:	50                   	push   eax
c0008e5e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e62:	55                   	push   ebp
c0008e63:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e67:	57                   	push   edi
c0008e68:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6c:	56                   	push   esi
c0008e6d:	68 00 00 00 80       	push   0x80000000
c0008e72:	e8 eb 9d 00 00       	call   c0012c62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e77:	83 c4 20             	add    esp,0x20
c0008e7a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e85:	0f 86 c3 fe ff ff    	jbe    c0008d4e <Computer::detectFeatures()+0x36>
c0008e8b:	83 ec 0c             	sub    esp,0xc
c0008e8e:	50                   	push   eax
c0008e8f:	55                   	push   ebp
c0008e90:	57                   	push   edi
c0008e91:	56                   	push   esi
c0008e92:	68 01 00 00 80       	push   0x80000001
c0008e97:	e8 c6 9d 00 00       	call   c0012c62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea6:	83 c4 20             	add    esp,0x20
c0008ea9:	e9 a0 fe ff ff       	jmp    c0008d4e <Computer::detectFeatures()+0x36>
c0008eae:	e8 4d 7d 01 00       	call   c0020c00 <absolutelyNoChanceInHell>
c0008eb3:	88 c2                	mov    dl,al
c0008eb5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ebb:	c1 e2 07             	shl    edx,0x7
c0008ebe:	83 e0 7f             	and    eax,0x7f
c0008ec1:	09 d0                	or     eax,edx
c0008ec3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec9:	84 c0                	test   al,al
c0008ecb:	0f 89 bb fe ff ff    	jns    c0008d8c <Computer::detectFeatures()+0x74>
c0008ed1:	e8 0a 7d 01 00       	call   c0020be0 <avxDetect>
c0008ed6:	83 e0 01             	and    eax,0x1
c0008ed9:	c1 e0 05             	shl    eax,0x5
c0008edc:	88 c2                	mov    dl,al
c0008ede:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee4:	83 e0 df             	and    eax,0xffffffdf
c0008ee7:	09 d0                	or     eax,edx
c0008ee9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eef:	83 c4 1c             	add    esp,0x1c
c0008ef2:	5b                   	pop    ebx
c0008ef3:	5e                   	pop    esi
c0008ef4:	5f                   	pop    edi
c0008ef5:	5d                   	pop    ebp
c0008ef6:	c3                   	ret    
c0008ef7:	83 ec 0c             	sub    esp,0xc
c0008efa:	68 00 02 00 00       	push   0x200
c0008eff:	e8 e2 9d 00 00       	call   c0012ce6 <CPU::cpuidCheckEDX(unsigned int)>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	83 e0 01             	and    eax,0x1
c0008f0a:	88 c2                	mov    dl,al
c0008f0c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f12:	83 e0 fe             	and    eax,0xfffffffe
c0008f15:	09 d0                	or     eax,edx
c0008f17:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1d:	e9 1c ff ff ff       	jmp    c0008e3e <Computer::detectFeatures()+0x126>

c0008f22 <Computer::displayFeatures()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Computer::rdmsr(unsigned int)>:
c0008f24:	83 ec 0c             	sub    esp,0xc
c0008f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f32:	74 0a                	je     c0008f3e <Computer::rdmsr(unsigned int)+0x1a>
c0008f34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f38:	0f 32                	rdmsr  
c0008f3a:	83 c4 0c             	add    esp,0xc
c0008f3d:	c3                   	ret    
c0008f3e:	83 ec 0c             	sub    esp,0xc
c0008f41:	68 e1 25 02 c0       	push   0xc00225e1
c0008f46:	e8 3a b4 00 00       	call   c0014385 <Krnl::panic(char const*)>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	eb e4                	jmp    c0008f34 <Computer::rdmsr(unsigned int)+0x10>

c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f50:	57                   	push   edi
c0008f51:	56                   	push   esi
c0008f52:	52                   	push   edx
c0008f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f57:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f5f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f66:	74 0e                	je     c0008f76 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f6c:	89 f0                	mov    eax,esi
c0008f6e:	89 fa                	mov    edx,edi
c0008f70:	0f 30                	wrmsr  
c0008f72:	58                   	pop    eax
c0008f73:	5e                   	pop    esi
c0008f74:	5f                   	pop    edi
c0008f75:	c3                   	ret    
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	68 e7 25 02 c0       	push   0xc00225e7
c0008f7e:	e8 02 b4 00 00       	call   c0014385 <Krnl::panic(char const*)>
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	eb e0                	jmp    c0008f68 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f88 <Computer::nmiEnabled()>:
c0008f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f8c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008f92:	c3                   	ret    
c0008f93:	90                   	nop

c0008f94 <Computer::readCMOS(unsigned char)>:
c0008f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f98:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008f9f:	19 c0                	sbb    eax,eax
c0008fa1:	83 e0 80             	and    eax,0xffffff80
c0008fa4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008fa8:	e6 70                	out    0x70,al
c0008faa:	e4 71                	in     al,0x71
c0008fac:	c3                   	ret    
c0008fad:	90                   	nop

c0008fae <Computer::enableNMI(bool)>:
c0008fae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008fb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fb6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008fbc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008fc4:	eb ce                	jmp    c0008f94 <Computer::readCMOS(unsigned char)>

c0008fc6 <Computer::open(int, int, void*)>:
c0008fc6:	56                   	push   esi
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 10             	sub    esp,0x10
c0008fcb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008fcf:	68 44 27 02 c0       	push   0xc0022744
c0008fd4:	e8 44 0a 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008fd9:	58                   	pop    eax
c0008fda:	f6 05 60 64 02 c0 04 	test   BYTE PTR ds:0xc0026460,0x4
c0008fe1:	5a                   	pop    edx
c0008fe2:	0f 94 05 20 58 02 c0 	sete   BYTE PTR ds:0xc0025820
c0008fe9:	68 58 01 00 00       	push   0x158
c0008fee:	68 ed 25 02 c0       	push   0xc00225ed
c0008ff3:	e8 cb 3a 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0008ff8:	59                   	pop    ecx
c0008ff9:	5e                   	pop    esi
c0008ffa:	68 14 01 00 00       	push   0x114
c0008fff:	68 03 26 02 c0       	push   0xc0022603
c0009004:	e8 ba 3a 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0009009:	58                   	pop    eax
c000900a:	5a                   	pop    edx
c000900b:	6a 14                	push   0x14
c000900d:	68 17 26 02 c0       	push   0xc0022617
c0009012:	e8 ac 3a 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0009017:	59                   	pop    ecx
c0009018:	5e                   	pop    esi
c0009019:	68 1f 07 00 00       	push   0x71f
c000901e:	68 2a 26 02 c0       	push   0xc002262a
c0009023:	e8 9b 3a 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0009028:	58                   	pop    eax
c0009029:	5a                   	pop    edx
c000902a:	6a 5f                	push   0x5f
c000902c:	68 41 26 02 c0       	push   0xc0022641
c0009031:	e8 8d 3a 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0009036:	c7 04 24 57 26 02 c0 	mov    DWORD PTR [esp],0xc0022657
c000903d:	e8 81 3a 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0009042:	c7 04 24 69 26 02 c0 	mov    DWORD PTR [esp],0xc0022669
c0009049:	e8 cf 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000904e:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009055:	e8 69 09 00 00       	call   c00099c3 <malloc>
c000905a:	89 c6                	mov    esi,eax
c000905c:	89 04 24             	mov    DWORD PTR [esp],eax
c000905f:	e8 f4 8d 00 00       	call   c0011e58 <ACPI::ACPI()>
c0009064:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000906a:	c7 04 24 83 26 02 c0 	mov    DWORD PTR [esp],0xc0022683
c0009071:	e8 a7 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009076:	59                   	pop    ecx
c0009077:	5e                   	pop    esi
c0009078:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000907e:	53                   	push   ebx
c000907f:	e8 86 4e 00 00       	call   c000df0a <Device::addChild(Device*)>
c0009084:	c7 04 24 68 27 02 c0 	mov    DWORD PTR [esp],0xc0022768
c000908b:	e8 8d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009090:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009093:	e8 80 fc ff ff       	call   c0008d18 <Computer::detectFeatures()>
c0009098:	c7 04 24 88 27 02 c0 	mov    DWORD PTR [esp],0xc0022788
c000909f:	e8 79 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090a4:	c7 04 24 9d 26 02 c0 	mov    DWORD PTR [esp],0xc002269d
c00090ab:	e8 6d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090b0:	58                   	pop    eax
c00090b1:	5a                   	pop    edx
c00090b2:	6a 01                	push   0x1
c00090b4:	53                   	push   ebx
c00090b5:	e8 f4 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c00090ba:	c7 04 24 91 25 02 c0 	mov    DWORD PTR [esp],0xc0022591
c00090c1:	e8 57 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090c6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c00090cd:	e8 f1 08 00 00       	call   c00099c3 <malloc>
c00090d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00090d5:	89 c6                	mov    esi,eax
c00090d7:	e8 c2 9c 00 00       	call   c0012d9e <CPU::CPU()>
c00090dc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00090e2:	59                   	pop    ecx
c00090e3:	58                   	pop    eax
c00090e4:	56                   	push   esi
c00090e5:	53                   	push   ebx
c00090e6:	e8 1f 4e 00 00       	call   c000df0a <Device::addChild(Device*)>
c00090eb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00090f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00090f7:	6a 00                	push   0x0
c00090f9:	6a 00                	push   0x0
c00090fb:	50                   	push   eax
c00090fc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00090ff:	83 c4 14             	add    esp,0x14
c0009102:	68 a8 27 02 c0       	push   0xc00227a8
c0009107:	e8 11 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000910c:	e8 95 53 00 00       	call   c000e4a6 <setupFPU()>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000911a:	85 c0                	test   eax,eax
c000911c:	74 1f                	je     c000913d <Computer::open(int, int, void*)+0x177>
c000911e:	83 ec 08             	sub    esp,0x8
c0009121:	50                   	push   eax
c0009122:	53                   	push   ebx
c0009123:	e8 e2 4d 00 00       	call   c000df0a <Device::addChild(Device*)>
c0009128:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000912e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009130:	6a 00                	push   0x0
c0009132:	6a 00                	push   0x0
c0009134:	6a 00                	push   0x0
c0009136:	50                   	push   eax
c0009137:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000913a:	83 c4 20             	add    esp,0x20
c000913d:	83 ec 0c             	sub    esp,0xc
c0009140:	68 ae 26 02 c0       	push   0xc00226ae
c0009145:	e8 d3 08 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000914a:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c0009151:	e8 fa ec 00 00       	call   c0017e50 <setupMultitasking(void (*)())>
c0009156:	83 c4 14             	add    esp,0x14
c0009159:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000915e:	5b                   	pop    ebx
c000915f:	5e                   	pop    esi
c0009160:	c3                   	ret    
c0009161:	90                   	nop

c0009162 <Computer::disableNMI()>:
c0009162:	6a 00                	push   0x0
c0009164:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009168:	e8 41 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c000916d:	58                   	pop    eax
c000916e:	5a                   	pop    edx
c000916f:	c3                   	ret    

c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009174:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000917b:	19 c0                	sbb    eax,eax
c000917d:	83 e0 80             	and    eax,0xffffff80
c0009180:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009184:	e6 70                	out    0x70,al
c0009186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000918a:	e6 71                	out    0x71,al
c000918c:	c3                   	ret    
c000918d:	90                   	nop

c000918e <Computer::handleNMI()>:
c000918e:	56                   	push   esi
c000918f:	53                   	push   ebx
c0009190:	83 ec 10             	sub    esp,0x10
c0009193:	e4 92                	in     al,0x92
c0009195:	89 c6                	mov    esi,eax
c0009197:	e4 61                	in     al,0x61
c0009199:	68 c9 26 02 c0       	push   0xc00226c9
c000919e:	88 c3                	mov    bl,al
c00091a0:	e8 1e 39 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c00091a5:	83 c4 10             	add    esp,0x10
c00091a8:	83 e6 10             	and    esi,0x10
c00091ab:	75 0d                	jne    c00091ba <Computer::handleNMI()+0x2c>
c00091ad:	f6 c3 40             	test   bl,0x40
c00091b0:	75 1d                	jne    c00091cf <Computer::handleNMI()+0x41>
c00091b2:	84 db                	test   bl,bl
c00091b4:	78 2d                	js     c00091e3 <Computer::handleNMI()+0x55>
c00091b6:	58                   	pop    eax
c00091b7:	5b                   	pop    ebx
c00091b8:	5e                   	pop    esi
c00091b9:	c3                   	ret    
c00091ba:	83 ec 0c             	sub    esp,0xc
c00091bd:	68 da 26 02 c0       	push   0xc00226da
c00091c2:	e8 be b1 00 00       	call   c0014385 <Krnl::panic(char const*)>
c00091c7:	83 c4 10             	add    esp,0x10
c00091ca:	f6 c3 40             	test   bl,0x40
c00091cd:	74 e3                	je     c00091b2 <Computer::handleNMI()+0x24>
c00091cf:	83 ec 0c             	sub    esp,0xc
c00091d2:	68 e7 26 02 c0       	push   0xc00226e7
c00091d7:	e8 a9 b1 00 00       	call   c0014385 <Krnl::panic(char const*)>
c00091dc:	83 c4 10             	add    esp,0x10
c00091df:	84 db                	test   bl,bl
c00091e1:	79 d3                	jns    c00091b6 <Computer::handleNMI()+0x28>
c00091e3:	c7 44 24 10 f1 26 02 c0 	mov    DWORD PTR [esp+0x10],0xc00226f1
c00091eb:	5a                   	pop    edx
c00091ec:	5b                   	pop    ebx
c00091ed:	5e                   	pop    esi
c00091ee:	e9 92 b1 00 00       	jmp    c0014385 <Krnl::panic(char const*)>
c00091f3:	90                   	nop

c00091f4 <Computer::setDiskActivityLight(int, bool)>:
c00091f4:	56                   	push   esi
c00091f5:	53                   	push   ebx
c00091f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00091fa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091ff:	77 1b                	ja     c000921c <Computer::setDiskActivityLight(int, bool)+0x28>
c0009201:	e4 92                	in     al,0x92
c0009203:	bb 40 00 00 00       	mov    ebx,0x40
c0009208:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000920c:	89 da                	mov    edx,ebx
c000920e:	d3 e2                	shl    edx,cl
c0009210:	89 f1                	mov    ecx,esi
c0009212:	f7 d2                	not    edx
c0009214:	d3 e3                	shl    ebx,cl
c0009216:	21 d0                	and    eax,edx
c0009218:	09 d8                	or     eax,ebx
c000921a:	e6 92                	out    0x92,al
c000921c:	5b                   	pop    ebx
c000921d:	5e                   	pop    esi
c000921e:	c3                   	ret    
c000921f:	90                   	nop

c0009220 <GDTEntry::setBase(unsigned int)>:
c0009220:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009224:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009228:	89 c1                	mov    ecx,eax
c000922a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000922e:	c1 e9 10             	shr    ecx,0x10
c0009231:	c1 e8 18             	shr    eax,0x18
c0009234:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009237:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000923a:	c3                   	ret    
c000923b:	90                   	nop

c000923c <GDTEntry::setLimit(unsigned int)>:
c000923c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009244:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009247:	66 89 01             	mov    WORD PTR [ecx],ax
c000924a:	83 e2 f0             	and    edx,0xfffffff0
c000924d:	c1 e8 10             	shr    eax,0x10
c0009250:	83 e0 0f             	and    eax,0xf
c0009253:	09 d0                	or     eax,edx
c0009255:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009258:	c3                   	ret    
c0009259:	90                   	nop

c000925a <GDT::GDT()>:
c000925a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000925e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009268:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000926e:	90                   	nop
c000926f:	c3                   	ret    

c0009270 <GDT::addEntry(GDTEntry)>:
c0009270:	53                   	push   ebx
c0009271:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009275:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009279:	8b 02                	mov    eax,DWORD PTR [edx]
c000927b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000927f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009283:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009287:	8d 48 01             	lea    ecx,[eax+0x1]
c000928a:	c1 e0 03             	shl    eax,0x3
c000928d:	89 0a                	mov    DWORD PTR [edx],ecx
c000928f:	5b                   	pop    ebx
c0009290:	c3                   	ret    
c0009291:	90                   	nop

c0009292 <GDT::getNumberOfEntries()>:
c0009292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009296:	8b 00                	mov    eax,DWORD PTR [eax]
c0009298:	c3                   	ret    
c0009299:	90                   	nop

c000929a <GDT::flush()>:
c000929a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000929e:	8b 10                	mov    edx,DWORD PTR [eax]
c00092a0:	83 c0 04             	add    eax,0x4
c00092a3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092aa:	a3 52 64 02 c0       	mov    ds:0xc0026452,eax
c00092af:	66 89 15 50 64 02 c0 	mov    WORD PTR ds:0xc0026450,dx
c00092b6:	e9 ca 70 ff ff       	jmp    c0000385 <loadGDT>
c00092bb:	90                   	nop

c00092bc <GDT::setup()>:
c00092bc:	55                   	push   ebp
c00092bd:	57                   	push   edi
c00092be:	56                   	push   esi
c00092bf:	53                   	push   ebx
c00092c0:	83 ec 3c             	sub    esp,0x3c
c00092c3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00092c7:	6a 00                	push   0x0
c00092c9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00092cd:	53                   	push   ebx
c00092ce:	e8 4d ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092d3:	6a 00                	push   0x0
c00092d5:	53                   	push   ebx
c00092d6:	e8 61 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092db:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c00092e3:	6a 00                	push   0x0
c00092e5:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00092e9:	53                   	push   ebx
c00092ea:	e8 31 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092ef:	68 ff ff ff 00       	push   0xffffff
c00092f4:	53                   	push   ebx
c00092f5:	e8 42 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00092fe:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009303:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009308:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000930c:	83 c4 20             	add    esp,0x20
c000930f:	6a 00                	push   0x0
c0009311:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0009315:	53                   	push   ebx
c0009316:	e8 05 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000931b:	68 ff ff ff 00       	push   0xffffff
c0009320:	53                   	push   ebx
c0009321:	e8 16 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c0009326:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000932a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000932e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009332:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009336:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000933a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000933f:	0d 00 92 c0 00       	or     eax,0xc09200
c0009344:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009348:	89 d8                	mov    eax,ebx
c000934a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000934e:	80 cc 60             	or     ah,0x60
c0009351:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009355:	83 c4 0c             	add    esp,0xc
c0009358:	89 f8                	mov    eax,edi
c000935a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000935e:	80 cc 60             	or     ah,0x60
c0009361:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009365:	89 c7                	mov    edi,eax
c0009367:	55                   	push   ebp
c0009368:	e8 03 ff ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000936d:	83 c4 0c             	add    esp,0xc
c0009370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009374:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009378:	55                   	push   ebp
c0009379:	e8 f2 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000937e:	83 c4 0c             	add    esp,0xc
c0009381:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009385:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009389:	55                   	push   ebp
c000938a:	e8 e1 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000938f:	83 c4 0c             	add    esp,0xc
c0009392:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009396:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000939a:	53                   	push   ebx
c000939b:	51                   	push   ecx
c000939c:	55                   	push   ebp
c000939d:	e8 ce fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093a2:	83 c4 0c             	add    esp,0xc
c00093a5:	57                   	push   edi
c00093a6:	56                   	push   esi
c00093a7:	55                   	push   ebp
c00093a8:	e8 c3 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093b0:	e8 e5 fe ff ff       	call   c000929a <GDT::flush()>
c00093b5:	83 c4 4c             	add    esp,0x4c
c00093b8:	5b                   	pop    ebx
c00093b9:	5e                   	pop    esi
c00093ba:	5f                   	pop    edi
c00093bb:	5d                   	pop    ebp
c00093bc:	c3                   	ret    

c00093bd <idleFunction(void*)>:
c00093bd:	53                   	push   ebx
c00093be:	83 ec 08             	sub    esp,0x8
c00093c1:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00093c6:	48                   	dec    eax
c00093c7:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00093cc:	75 01                	jne    c00093cf <idleFunction(void*)+0x12>
c00093ce:	fb                   	sti    
c00093cf:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c00093d4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00093da:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c00093e1:	74 3c                	je     c000941f <idleFunction(void*)+0x62>
c00093e3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00093ea:	74 33                	je     c000941f <idleFunction(void*)+0x62>
c00093ec:	31 db                	xor    ebx,ebx
c00093ee:	52                   	push   edx
c00093ef:	52                   	push   edx
c00093f0:	68 e1 00 00 00       	push   0xe1
c00093f5:	50                   	push   eax
c00093f6:	e8 29 fb ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00093fb:	53                   	push   ebx
c00093fc:	83 e0 02             	and    eax,0x2
c00093ff:	50                   	push   eax
c0009400:	68 e1 00 00 00       	push   0xe1
c0009405:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c000940b:	e8 40 fb ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0009410:	83 c4 20             	add    esp,0x20
c0009413:	e8 9c 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009418:	e8 e9 7d 01 00       	call   c0021206 <idleCommon()>
c000941d:	eb f4                	jmp    c0009413 <idleFunction(void*)+0x56>
c000941f:	fb                   	sti    
c0009420:	f4                   	hlt    
c0009421:	e8 e0 7d 01 00       	call   c0021206 <idleCommon()>
c0009426:	eb f7                	jmp    c000941f <idleFunction(void*)+0x62>

c0009428 <IDTEntry::IDTEntry(bool)>:
c0009428:	83 ec 04             	sub    esp,0x4
c000942b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000942f:	88 04 24             	mov    BYTE PTR [esp],al
c0009432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009436:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000943c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009440:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009448:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000944b:	83 e2 f0             	and    edx,0xfffffff0
c000944e:	83 ca 0e             	or     edx,0xe
c0009451:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009458:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000945b:	83 e2 ef             	and    edx,0xffffffef
c000945e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009461:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009465:	74 05                	je     c000946c <IDTEntry::IDTEntry(bool)+0x44>
c0009467:	b2 03                	mov    dl,0x3
c0009469:	eb 05                	jmp    c0009470 <IDTEntry::IDTEntry(bool)+0x48>
c000946b:	90                   	nop
c000946c:	b2 00                	mov    dl,0x0
c000946e:	66 90                	xchg   ax,ax
c0009470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009474:	83 e2 03             	and    edx,0x3
c0009477:	88 d1                	mov    cl,dl
c0009479:	c1 e1 05             	shl    ecx,0x5
c000947c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000947f:	83 e2 9f             	and    edx,0xffffff9f
c0009482:	09 ca                	or     edx,ecx
c0009484:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009487:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000948e:	83 ca 80             	or     edx,0xffffff80
c0009491:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009494:	90                   	nop
c0009495:	83 c4 04             	add    esp,0x4
c0009498:	c3                   	ret    
c0009499:	90                   	nop

c000949a <IDTEntry::setOffset(unsigned int)>:
c000949a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000949e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a2:	66 89 02             	mov    WORD PTR [edx],ax
c00094a5:	c1 e8 10             	shr    eax,0x10
c00094a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094ac:	c3                   	ret    
c00094ad:	90                   	nop
c00094ae:	66 90                	xchg   ax,ax

c00094b0 <IDT::IDT()>:
c00094b0:	90                   	nop
c00094b1:	c3                   	ret    

c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094b6:	83 c0 30             	add    eax,0x30
c00094b9:	c3                   	ret    

c00094ba <IDT::addEntry(IDTEntry, int)>:
c00094ba:	53                   	push   ebx
c00094bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00094c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00094ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00094d2:	5b                   	pop    ebx
c00094d3:	c3                   	ret    

c00094d4 <IDT::addEntry(int, void (*)(), bool)>:
c00094d4:	53                   	push   ebx
c00094d5:	83 ec 10             	sub    esp,0x10
c00094d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00094dd:	50                   	push   eax
c00094de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00094e2:	53                   	push   ebx
c00094e3:	e8 40 ff ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c00094e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00094ec:	53                   	push   ebx
c00094ed:	e8 a8 ff ff ff       	call   c000949a <IDTEntry::setOffset(unsigned int)>
c00094f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00094f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009502:	e8 b3 ff ff ff       	call   c00094ba <IDT::addEntry(IDTEntry, int)>
c0009507:	83 c4 30             	add    esp,0x30
c000950a:	5b                   	pop    ebx
c000950b:	c3                   	ret    

c000950c <IDT::flush()>:
c000950c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009510:	66 c7 05 58 64 02 c0 ff 07 	mov    WORD PTR ds:0xc0026458,0x7ff
c0009519:	a3 5a 64 02 c0       	mov    ds:0xc002645a,eax
c000951e:	0f 01 1d 58 64 02 c0 	lidtd  ds:0xc0026458
c0009525:	c3                   	ret    

c0009526 <IDT::setup()>:
c0009526:	57                   	push   edi
c0009527:	56                   	push   esi
c0009528:	53                   	push   ebx
c0009529:	83 ec 10             	sub    esp,0x10
c000952c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009530:	6a 00                	push   0x0
c0009532:	68 a5 03 00 c0       	push   0xc00003a5
c0009537:	6a 00                	push   0x0
c0009539:	53                   	push   ebx
c000953a:	e8 95 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000953f:	6a 00                	push   0x0
c0009541:	68 b5 03 00 c0       	push   0xc00003b5
c0009546:	6a 01                	push   0x1
c0009548:	53                   	push   ebx
c0009549:	e8 86 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000954e:	83 c4 20             	add    esp,0x20
c0009551:	6a 00                	push   0x0
c0009553:	68 bf 03 00 c0       	push   0xc00003bf
c0009558:	6a 02                	push   0x2
c000955a:	53                   	push   ebx
c000955b:	e8 74 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009560:	6a 00                	push   0x0
c0009562:	68 c9 03 00 c0       	push   0xc00003c9
c0009567:	6a 03                	push   0x3
c0009569:	53                   	push   ebx
c000956a:	e8 65 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000956f:	83 c4 20             	add    esp,0x20
c0009572:	6a 00                	push   0x0
c0009574:	68 d3 03 00 c0       	push   0xc00003d3
c0009579:	6a 04                	push   0x4
c000957b:	53                   	push   ebx
c000957c:	e8 53 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009581:	6a 00                	push   0x0
c0009583:	68 dd 03 00 c0       	push   0xc00003dd
c0009588:	6a 05                	push   0x5
c000958a:	53                   	push   ebx
c000958b:	e8 44 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009590:	83 c4 20             	add    esp,0x20
c0009593:	6a 00                	push   0x0
c0009595:	68 e7 03 00 c0       	push   0xc00003e7
c000959a:	6a 06                	push   0x6
c000959c:	53                   	push   ebx
c000959d:	e8 32 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095a2:	6a 00                	push   0x0
c00095a4:	68 f1 03 00 c0       	push   0xc00003f1
c00095a9:	6a 07                	push   0x7
c00095ab:	53                   	push   ebx
c00095ac:	e8 23 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095b1:	83 c4 20             	add    esp,0x20
c00095b4:	6a 00                	push   0x0
c00095b6:	68 fb 03 00 c0       	push   0xc00003fb
c00095bb:	6a 08                	push   0x8
c00095bd:	53                   	push   ebx
c00095be:	e8 11 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095c3:	6a 00                	push   0x0
c00095c5:	68 03 04 00 c0       	push   0xc0000403
c00095ca:	6a 09                	push   0x9
c00095cc:	53                   	push   ebx
c00095cd:	e8 02 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095d2:	83 c4 20             	add    esp,0x20
c00095d5:	6a 00                	push   0x0
c00095d7:	68 0d 04 00 c0       	push   0xc000040d
c00095dc:	6a 0a                	push   0xa
c00095de:	53                   	push   ebx
c00095df:	e8 f0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095e4:	6a 00                	push   0x0
c00095e6:	68 15 04 00 c0       	push   0xc0000415
c00095eb:	6a 0b                	push   0xb
c00095ed:	53                   	push   ebx
c00095ee:	e8 e1 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095f3:	83 c4 20             	add    esp,0x20
c00095f6:	6a 00                	push   0x0
c00095f8:	68 1d 04 00 c0       	push   0xc000041d
c00095fd:	6a 0c                	push   0xc
c00095ff:	53                   	push   ebx
c0009600:	e8 cf fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009605:	6a 00                	push   0x0
c0009607:	68 25 04 00 c0       	push   0xc0000425
c000960c:	6a 0d                	push   0xd
c000960e:	53                   	push   ebx
c000960f:	e8 c0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009614:	83 c4 20             	add    esp,0x20
c0009617:	6a 00                	push   0x0
c0009619:	68 2d 04 00 c0       	push   0xc000042d
c000961e:	6a 0e                	push   0xe
c0009620:	53                   	push   ebx
c0009621:	e8 ae fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009626:	6a 00                	push   0x0
c0009628:	68 35 04 00 c0       	push   0xc0000435
c000962d:	6a 0f                	push   0xf
c000962f:	53                   	push   ebx
c0009630:	e8 9f fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009635:	83 c4 20             	add    esp,0x20
c0009638:	6a 00                	push   0x0
c000963a:	68 3f 04 00 c0       	push   0xc000043f
c000963f:	6a 10                	push   0x10
c0009641:	53                   	push   ebx
c0009642:	e8 8d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009647:	6a 00                	push   0x0
c0009649:	68 49 04 00 c0       	push   0xc0000449
c000964e:	6a 11                	push   0x11
c0009650:	53                   	push   ebx
c0009651:	e8 7e fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009656:	83 c4 20             	add    esp,0x20
c0009659:	6a 00                	push   0x0
c000965b:	68 53 04 00 c0       	push   0xc0000453
c0009660:	6a 12                	push   0x12
c0009662:	53                   	push   ebx
c0009663:	e8 6c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009668:	6a 01                	push   0x1
c000966a:	68 ed 04 00 c0       	push   0xc00004ed
c000966f:	6a 60                	push   0x60
c0009671:	53                   	push   ebx
c0009672:	e8 5d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009677:	83 c4 20             	add    esp,0x20
c000967a:	6a 00                	push   0x0
c000967c:	68 f4 04 00 c0       	push   0xc00004f4
c0009681:	6a 20                	push   0x20
c0009683:	53                   	push   ebx
c0009684:	e8 4b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009689:	6a 00                	push   0x0
c000968b:	68 df 04 00 c0       	push   0xc00004df
c0009690:	6a 21                	push   0x21
c0009692:	53                   	push   ebx
c0009693:	e8 3c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009698:	83 c4 20             	add    esp,0x20
c000969b:	6a 00                	push   0x0
c000969d:	68 e6 04 00 c0       	push   0xc00004e6
c00096a2:	6a 22                	push   0x22
c00096a4:	53                   	push   ebx
c00096a5:	e8 2a fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096aa:	6a 00                	push   0x0
c00096ac:	68 5d 04 00 c0       	push   0xc000045d
c00096b1:	6a 23                	push   0x23
c00096b3:	53                   	push   ebx
c00096b4:	e8 1b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096b9:	83 c4 20             	add    esp,0x20
c00096bc:	6a 00                	push   0x0
c00096be:	68 67 04 00 c0       	push   0xc0000467
c00096c3:	6a 24                	push   0x24
c00096c5:	53                   	push   ebx
c00096c6:	e8 09 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096cb:	6a 00                	push   0x0
c00096cd:	68 71 04 00 c0       	push   0xc0000471
c00096d2:	6a 25                	push   0x25
c00096d4:	53                   	push   ebx
c00096d5:	e8 fa fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096da:	83 c4 20             	add    esp,0x20
c00096dd:	6a 00                	push   0x0
c00096df:	68 7b 04 00 c0       	push   0xc000047b
c00096e4:	6a 26                	push   0x26
c00096e6:	53                   	push   ebx
c00096e7:	e8 e8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096ec:	6a 00                	push   0x0
c00096ee:	68 85 04 00 c0       	push   0xc0000485
c00096f3:	6a 27                	push   0x27
c00096f5:	53                   	push   ebx
c00096f6:	e8 d9 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096fb:	83 c4 20             	add    esp,0x20
c00096fe:	6a 00                	push   0x0
c0009700:	68 8f 04 00 c0       	push   0xc000048f
c0009705:	6a 28                	push   0x28
c0009707:	53                   	push   ebx
c0009708:	e8 c7 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000970d:	6a 00                	push   0x0
c000970f:	68 99 04 00 c0       	push   0xc0000499
c0009714:	6a 29                	push   0x29
c0009716:	53                   	push   ebx
c0009717:	e8 b8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000971c:	83 c4 20             	add    esp,0x20
c000971f:	6a 00                	push   0x0
c0009721:	68 a3 04 00 c0       	push   0xc00004a3
c0009726:	6a 2a                	push   0x2a
c0009728:	53                   	push   ebx
c0009729:	e8 a6 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000972e:	6a 00                	push   0x0
c0009730:	68 ad 04 00 c0       	push   0xc00004ad
c0009735:	6a 2b                	push   0x2b
c0009737:	53                   	push   ebx
c0009738:	e8 97 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000973d:	83 c4 20             	add    esp,0x20
c0009740:	6a 00                	push   0x0
c0009742:	68 b7 04 00 c0       	push   0xc00004b7
c0009747:	6a 2c                	push   0x2c
c0009749:	53                   	push   ebx
c000974a:	e8 85 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000974f:	6a 00                	push   0x0
c0009751:	68 c1 04 00 c0       	push   0xc00004c1
c0009756:	6a 2d                	push   0x2d
c0009758:	53                   	push   ebx
c0009759:	e8 76 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000975e:	83 c4 20             	add    esp,0x20
c0009761:	6a 00                	push   0x0
c0009763:	68 cb 04 00 c0       	push   0xc00004cb
c0009768:	6a 2e                	push   0x2e
c000976a:	53                   	push   ebx
c000976b:	e8 64 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009770:	6a 00                	push   0x0
c0009772:	68 d5 04 00 c0       	push   0xc00004d5
c0009777:	6a 2f                	push   0x2f
c0009779:	53                   	push   ebx
c000977a:	e8 55 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000977f:	83 c4 20             	add    esp,0x20
c0009782:	6a 00                	push   0x0
c0009784:	68 2b 05 00 c0       	push   0xc000052b
c0009789:	6a 30                	push   0x30
c000978b:	53                   	push   ebx
c000978c:	e8 43 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009791:	6a 00                	push   0x0
c0009793:	68 35 05 00 c0       	push   0xc0000535
c0009798:	6a 31                	push   0x31
c000979a:	53                   	push   ebx
c000979b:	e8 34 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097a0:	83 c4 20             	add    esp,0x20
c00097a3:	6a 00                	push   0x0
c00097a5:	68 3f 05 00 c0       	push   0xc000053f
c00097aa:	6a 32                	push   0x32
c00097ac:	53                   	push   ebx
c00097ad:	e8 22 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097b2:	6a 00                	push   0x0
c00097b4:	68 49 05 00 c0       	push   0xc0000549
c00097b9:	6a 33                	push   0x33
c00097bb:	53                   	push   ebx
c00097bc:	e8 13 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097c1:	83 c4 20             	add    esp,0x20
c00097c4:	6a 00                	push   0x0
c00097c6:	68 53 05 00 c0       	push   0xc0000553
c00097cb:	6a 34                	push   0x34
c00097cd:	53                   	push   ebx
c00097ce:	e8 01 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097d3:	6a 00                	push   0x0
c00097d5:	68 5d 05 00 c0       	push   0xc000055d
c00097da:	6a 35                	push   0x35
c00097dc:	53                   	push   ebx
c00097dd:	e8 f2 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097e2:	83 c4 20             	add    esp,0x20
c00097e5:	6a 00                	push   0x0
c00097e7:	68 67 05 00 c0       	push   0xc0000567
c00097ec:	6a 36                	push   0x36
c00097ee:	53                   	push   ebx
c00097ef:	e8 e0 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097f4:	6a 00                	push   0x0
c00097f6:	68 71 05 00 c0       	push   0xc0000571
c00097fb:	6a 37                	push   0x37
c00097fd:	53                   	push   ebx
c00097fe:	e8 d1 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009803:	83 c4 1c             	add    esp,0x1c
c0009806:	6a 03                	push   0x3
c0009808:	6a 02                	push   0x2
c000980a:	ff 35 b0 65 02 c0    	push   DWORD PTR ds:0xc00265b0
c0009810:	e8 85 26 00 00       	call   c000be9a <VAS::allocatePages(int, int)>
c0009815:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000981c:	89 c6                	mov    esi,eax
c000981e:	e8 a0 01 00 00       	call   c00099c3 <malloc>
c0009823:	81 c6 00 20 00 00    	add    esi,0x2000
c0009829:	89 04 24             	mov    DWORD PTR [esp],eax
c000982c:	89 c7                	mov    edi,eax
c000982e:	e8 01 18 00 00       	call   c000b034 <TSS::TSS()>
c0009833:	83 c4 0c             	add    esp,0xc
c0009836:	68 fb 03 00 c0       	push   0xc00003fb
c000983b:	56                   	push   esi
c000983c:	57                   	push   edi
c000983d:	e8 36 18 00 00       	call   c000b078 <TSS::setup(unsigned long, unsigned long)>
c0009842:	89 c6                	mov    esi,eax
c0009844:	58                   	pop    eax
c0009845:	5a                   	pop    edx
c0009846:	6a 00                	push   0x0
c0009848:	8d 44 24 14          	lea    eax,[esp+0x14]
c000984c:	50                   	push   eax
c000984d:	e8 d6 fb ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c0009852:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009856:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000985b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009862:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009868:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000986c:	80 ce 05             	or     dh,0x5
c000986f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009872:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009876:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000987a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000987d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009880:	e8 87 fc ff ff       	call   c000950c <IDT::flush()>
c0009885:	83 c4 20             	add    esp,0x20
c0009888:	5b                   	pop    ebx
c0009889:	5e                   	pop    esi
c000988a:	5f                   	pop    edi
c000988b:	c3                   	ret    

c000988c <sbrk>:
c000988c:	55                   	push   ebp
c000988d:	57                   	push   edi
c000988e:	56                   	push   esi
c000988f:	53                   	push   ebx
c0009890:	83 ec 24             	sub    esp,0x24
c0009893:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009897:	53                   	push   ebx
c0009898:	68 f8 27 02 c0       	push   0xc00227f8
c000989d:	e8 21 32 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c00098a2:	83 c4 10             	add    esp,0x10
c00098a5:	85 db                	test   ebx,ebx
c00098a7:	74 5f                	je     c0009908 <sbrk+0x7c>
c00098a9:	78 64                	js     c000990f <sbrk+0x83>
c00098ab:	a1 ac 56 02 c0       	mov    eax,ds:0xc00256ac
c00098b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098b4:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c00098ba:	89 dd                	mov    ebp,ebx
c00098bc:	78 69                	js     c0009927 <sbrk+0x9b>
c00098be:	c1 fd 0c             	sar    ebp,0xc
c00098c1:	bb 00 00 00 00       	mov    ebx,0x0
c00098c6:	8b 35 b0 65 02 c0    	mov    esi,DWORD PTR ds:0xc00265b0
c00098cc:	8b 3d ac 56 02 c0    	mov    edi,DWORD PTR ds:0xc00256ac
c00098d2:	e8 13 05 00 00       	call   c0009dea <Phys::allocatePage()>
c00098d7:	68 01 04 00 00       	push   0x401
c00098dc:	57                   	push   edi
c00098dd:	50                   	push   eax
c00098de:	56                   	push   esi
c00098df:	e8 b4 24 00 00       	call   c000bd98 <VAS::mapPage(unsigned long, unsigned long, int)>
c00098e4:	81 05 ac 56 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00256ac,0x1000
c00098ee:	43                   	inc    ebx
c00098ef:	83 c4 10             	add    esp,0x10
c00098f2:	39 dd                	cmp    ebp,ebx
c00098f4:	75 d0                	jne    c00098c6 <sbrk+0x3a>
c00098f6:	0f 20 d8             	mov    eax,cr3
c00098f9:	0f 22 d8             	mov    cr3,eax
c00098fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009900:	83 c4 1c             	add    esp,0x1c
c0009903:	5b                   	pop    ebx
c0009904:	5e                   	pop    esi
c0009905:	5f                   	pop    edi
c0009906:	5d                   	pop    ebp
c0009907:	c3                   	ret    
c0009908:	a1 ac 56 02 c0       	mov    eax,ds:0xc00256ac
c000990d:	eb f1                	jmp    c0009900 <sbrk+0x74>
c000990f:	83 ec 08             	sub    esp,0x8
c0009912:	53                   	push   ebx
c0009913:	68 24 28 02 c0       	push   0xc0022824
c0009918:	e8 a6 31 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009925:	eb d9                	jmp    c0009900 <sbrk+0x74>
c0009927:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c000992d:	eb 8f                	jmp    c00098be <sbrk+0x32>

c000992f <mmap>:
c000992f:	83 ec 18             	sub    esp,0x18
c0009932:	68 16 28 02 c0       	push   0xc0022816
c0009937:	e8 49 aa 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000993c:	b8 00 00 00 00       	mov    eax,0x0
c0009941:	83 c4 1c             	add    esp,0x1c
c0009944:	c3                   	ret    

c0009945 <munmap>:
c0009945:	83 ec 18             	sub    esp,0x18
c0009948:	68 1b 28 02 c0       	push   0xc002281b
c000994d:	e8 33 aa 00 00       	call   c0014385 <Krnl::panic(char const*)>
c0009952:	b8 00 00 00 00       	mov    eax,0x0
c0009957:	83 c4 1c             	add    esp,0x1c
c000995a:	c3                   	ret    

c000995b <liballoc_lock()>:
c000995b:	fa                   	cli    
c000995c:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0009962:	b8 00 00 00 00       	mov    eax,0x0
c0009967:	c3                   	ret    

c0009968 <liballoc_unlock()>:
c0009968:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000996d:	48                   	dec    eax
c000996e:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0009973:	75 01                	jne    c0009976 <liballoc_unlock()+0xe>
c0009975:	fb                   	sti    
c0009976:	b8 00 00 00 00       	mov    eax,0x0
c000997b:	c3                   	ret    

c000997c <liballoc_alloc(int)>:
c000997c:	83 ec 10             	sub    esp,0x10
c000997f:	6a 01                	push   0x1
c0009981:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009985:	ff 35 b0 65 02 c0    	push   DWORD PTR ds:0xc00265b0
c000998b:	e8 0a 25 00 00       	call   c000be9a <VAS::allocatePages(int, int)>
c0009990:	83 c4 1c             	add    esp,0x1c
c0009993:	c3                   	ret    

c0009994 <liballoc_free(void*, int)>:
c0009994:	83 ec 14             	sub    esp,0x14
c0009997:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000999b:	ff 35 b0 65 02 c0    	push   DWORD PTR ds:0xc00265b0
c00099a1:	e8 9e 21 00 00       	call   c000bb44 <VAS::freeAllocatedPages(unsigned long)>
c00099a6:	b8 00 00 00 00       	mov    eax,0x0
c00099ab:	83 c4 1c             	add    esp,0x1c
c00099ae:	c3                   	ret    

c00099af <realloc>:
c00099af:	83 ec 14             	sub    esp,0x14
c00099b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ba:	e8 a1 7b ff ff       	call   c0001560 <dlrealloc>
c00099bf:	83 c4 1c             	add    esp,0x1c
c00099c2:	c3                   	ret    

c00099c3 <malloc>:
c00099c3:	83 ec 18             	sub    esp,0x18
c00099c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ca:	e8 54 76 ff ff       	call   c0001023 <dlmalloc>
c00099cf:	83 c4 1c             	add    esp,0x1c
c00099d2:	c3                   	ret    

c00099d3 <free>:
c00099d3:	83 ec 18             	sub    esp,0x18
c00099d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099da:	e8 e9 72 ff ff       	call   c0000cc8 <dlfree>
c00099df:	83 c4 1c             	add    esp,0x1c
c00099e2:	c3                   	ret    

c00099e3 <rfree>:
c00099e3:	83 ec 18             	sub    esp,0x18
c00099e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ea:	e8 d9 72 ff ff       	call   c0000cc8 <dlfree>
c00099ef:	83 c4 1c             	add    esp,0x1c
c00099f2:	c3                   	ret    

c00099f3 <calloc>:
c00099f3:	56                   	push   esi
c00099f4:	53                   	push   ebx
c00099f5:	83 ec 10             	sub    esp,0x10
c00099f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00099fc:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a01:	53                   	push   ebx
c0009a02:	e8 bc ff ff ff       	call   c00099c3 <malloc>
c0009a07:	89 c6                	mov    esi,eax
c0009a09:	83 c4 0c             	add    esp,0xc
c0009a0c:	53                   	push   ebx
c0009a0d:	6a 00                	push   0x0
c0009a0f:	50                   	push   eax
c0009a10:	e8 6f 6c ff ff       	call   c0000684 <memset>
c0009a15:	89 f0                	mov    eax,esi
c0009a17:	83 c4 14             	add    esp,0x14
c0009a1a:	5b                   	pop    ebx
c0009a1b:	5e                   	pop    esi
c0009a1c:	c3                   	ret    

c0009a1d <Krnl::setBootMessage(char const*)>:
c0009a1d:	57                   	push   edi
c0009a1e:	56                   	push   esi
c0009a1f:	53                   	push   ebx
c0009a20:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a26:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a2d:	68 9e 00 00 00       	push   0x9e
c0009a32:	6a 00                	push   0x0
c0009a34:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a38:	56                   	push   esi
c0009a39:	e8 46 6c ff ff       	call   c0000684 <memset>
c0009a3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a41:	e8 5a 6c ff ff       	call   c00006a0 <strlen>
c0009a46:	ba 50 00 00 00       	mov    edx,0x50
c0009a4b:	83 c4 10             	add    esp,0x10
c0009a4e:	29 c2                	sub    edx,eax
c0009a50:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009a54:	d1 ea                	shr    edx,1
c0009a56:	84 c0                	test   al,al
c0009a58:	74 19                	je     c0009a73 <Krnl::setBootMessage(char const*)+0x56>
c0009a5a:	01 d2                	add    edx,edx
c0009a5c:	43                   	inc    ebx
c0009a5d:	01 f2                	add    edx,esi
c0009a5f:	80 cc 0f             	or     ah,0xf
c0009a62:	83 c2 02             	add    edx,0x2
c0009a65:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009a69:	43                   	inc    ebx
c0009a6a:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009a6f:	84 c0                	test   al,al
c0009a71:	75 ec                	jne    c0009a5f <Krnl::setBootMessage(char const*)+0x42>
c0009a73:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009a78:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009a7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009a7f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009a85:	5b                   	pop    ebx
c0009a86:	5e                   	pop    esi
c0009a87:	5f                   	pop    edi
c0009a88:	c3                   	ret    

c0009a89 <kernel_main>:
c0009a89:	57                   	push   edi
c0009a8a:	bf f9 03 00 00       	mov    edi,0x3f9
c0009a8f:	56                   	push   esi
c0009a90:	89 fa                	mov    edx,edi
c0009a92:	53                   	push   ebx
c0009a93:	31 f6                	xor    esi,esi
c0009a95:	83 ec 2c             	sub    esp,0x2c
c0009a98:	89 f0                	mov    eax,esi
c0009a9a:	ee                   	out    dx,al
c0009a9b:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009aa0:	b0 80                	mov    al,0x80
c0009aa2:	89 da                	mov    edx,ebx
c0009aa4:	ee                   	out    dx,al
c0009aa5:	b1 03                	mov    cl,0x3
c0009aa7:	ba f8 03 00 00       	mov    edx,0x3f8
c0009aac:	88 c8                	mov    al,cl
c0009aae:	ee                   	out    dx,al
c0009aaf:	89 f0                	mov    eax,esi
c0009ab1:	89 fa                	mov    edx,edi
c0009ab3:	ee                   	out    dx,al
c0009ab4:	88 c8                	mov    al,cl
c0009ab6:	89 da                	mov    edx,ebx
c0009ab8:	ee                   	out    dx,al
c0009ab9:	b0 c7                	mov    al,0xc7
c0009abb:	ba fa 03 00 00       	mov    edx,0x3fa
c0009ac0:	ee                   	out    dx,al
c0009ac1:	b0 0b                	mov    al,0xb
c0009ac3:	ba fc 03 00 00       	mov    edx,0x3fc
c0009ac8:	ee                   	out    dx,al
c0009ac9:	68 54 28 02 c0       	push   0xc0022854
c0009ace:	e8 f0 2f 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0009ad3:	e8 5a 0a 00 00       	call   c000a532 <installVgaTextImplementation()>
c0009ad8:	0f b6 05 c0 56 02 c0 	movzx  eax,BYTE PTR ds:0xc00256c0
c0009adf:	83 c4 10             	add    esp,0x10
c0009ae2:	84 c0                	test   al,al
c0009ae4:	74 6c                	je     c0009b52 <kernel_main+0xc9>
c0009ae6:	31 db                	xor    ebx,ebx
c0009ae8:	bf 0a 00 00 00       	mov    edi,0xa
c0009aed:	be 05 00 00 00       	mov    esi,0x5
c0009af2:	31 c9                	xor    ecx,ecx
c0009af4:	eb 2a                	jmp    c0009b20 <kernel_main+0x97>
c0009af6:	3c 0d                	cmp    al,0xd
c0009af8:	74 1a                	je     c0009b14 <kernel_main+0x8b>
c0009afa:	3c 0a                	cmp    al,0xa
c0009afc:	74 40                	je     c0009b3e <kernel_main+0xb5>
c0009afe:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b01:	80 cc 0e             	or     ah,0xe
c0009b04:	c1 e2 04             	shl    edx,0x4
c0009b07:	01 ca                	add    edx,ecx
c0009b09:	41                   	inc    ecx
c0009b0a:	01 fa                	add    edx,edi
c0009b0c:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b14:	43                   	inc    ebx
c0009b15:	0f b6 83 c0 56 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda940]
c0009b1c:	84 c0                	test   al,al
c0009b1e:	74 32                	je     c0009b52 <kernel_main+0xc9>
c0009b20:	80 b9 f6 56 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffda90a],0xdb
c0009b27:	75 cd                	jne    c0009af6 <kernel_main+0x6d>
c0009b29:	0f b6 91 f5 56 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffda90b]
c0009b30:	83 e2 fe             	and    edx,0xfffffffe
c0009b33:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009b39:	75 bb                	jne    c0009af6 <kernel_main+0x6d>
c0009b3b:	47                   	inc    edi
c0009b3c:	eb b8                	jmp    c0009af6 <kernel_main+0x6d>
c0009b3e:	43                   	inc    ebx
c0009b3f:	46                   	inc    esi
c0009b40:	31 c9                	xor    ecx,ecx
c0009b42:	0f b6 83 c0 56 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda940]
c0009b49:	bf 0a 00 00 00       	mov    edi,0xa
c0009b4e:	84 c0                	test   al,al
c0009b50:	75 ce                	jne    c0009b20 <kernel_main+0x97>
c0009b52:	83 ec 0c             	sub    esp,0xc
c0009b55:	68 6c 28 02 c0       	push   0xc002286c
c0009b5a:	e8 be fe ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009b5f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009b64:	a3 60 64 02 c0       	mov    ds:0xc0026460,eax
c0009b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0009b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b7b:	e8 44 04 00 00       	call   c0009fc4 <Phys::physicalMemorySetup(unsigned int)>
c0009b80:	e8 2b 1d 00 00       	call   c000b8b0 <Virt::virtualMemorySetup()>
c0009b85:	58                   	pop    eax
c0009b86:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0009b8a:	53                   	push   ebx
c0009b8b:	e8 dc 1d 00 00       	call   c000b96c <VAS::VAS()>
c0009b90:	89 1d b0 65 02 c0    	mov    DWORD PTR ds:0xc00265b0,ebx
c0009b96:	e8 85 64 ff ff       	call   c0000020 <callGlobalConstructors>
c0009b9b:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0009ba2:	e8 1c fe ff ff       	call   c00099c3 <malloc>
c0009ba7:	89 04 24             	mov    DWORD PTR [esp],eax
c0009baa:	89 c6                	mov    esi,eax
c0009bac:	e8 09 f0 ff ff       	call   c0008bba <Computer::Computer()>
c0009bb1:	6a 00                	push   0x0
c0009bb3:	89 35 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,esi
c0009bb9:	6a 00                	push   0x0
c0009bbb:	6a 00                	push   0x0
c0009bbd:	56                   	push   esi
c0009bbe:	e8 03 f4 ff ff       	call   c0008fc6 <Computer::open(int, int, void*)>
c0009bc3:	83 c4 14             	add    esp,0x14
c0009bc6:	53                   	push   ebx
c0009bc7:	e8 50 20 00 00       	call   c000bc1c <VAS::~VAS()>
c0009bcc:	83 c4 30             	add    esp,0x30
c0009bcf:	5b                   	pop    ebx
c0009bd0:	5e                   	pop    esi
c0009bd1:	5f                   	pop    edi
c0009bd2:	c3                   	ret    

c0009bd3 <Phys::allocateDMA(unsigned long)>:
c0009bd3:	55                   	push   ebp
c0009bd4:	31 ed                	xor    ebp,ebp
c0009bd6:	57                   	push   edi
c0009bd7:	56                   	push   esi
c0009bd8:	53                   	push   ebx
c0009bd9:	31 db                	xor    ebx,ebx
c0009bdb:	83 ec 18             	sub    esp,0x18
c0009bde:	68 8b 28 02 c0       	push   0xc002288b
c0009be3:	e8 db 2e 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0009be8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bec:	31 d2                	xor    edx,edx
c0009bee:	05 ff 0f 00 00       	add    eax,0xfff
c0009bf3:	83 c4 10             	add    esp,0x10
c0009bf6:	c1 e8 0c             	shr    eax,0xc
c0009bf9:	31 c9                	xor    ecx,ecx
c0009bfb:	eb 17                	jmp    c0009c14 <Phys::allocateDMA(unsigned long)+0x41>
c0009bfd:	85 c9                	test   ecx,ecx
c0009bff:	75 04                	jne    c0009c05 <Phys::allocateDMA(unsigned long)+0x32>
c0009c01:	89 d5                	mov    ebp,edx
c0009c03:	89 d3                	mov    ebx,edx
c0009c05:	8d 71 01             	lea    esi,[ecx+0x1]
c0009c08:	39 f0                	cmp    eax,esi
c0009c0a:	74 23                	je     c0009c2f <Phys::allocateDMA(unsigned long)+0x5c>
c0009c0c:	42                   	inc    edx
c0009c0d:	89 f1                	mov    ecx,esi
c0009c0f:	83 fa 2f             	cmp    edx,0x2f
c0009c12:	7f 11                	jg     c0009c25 <Phys::allocateDMA(unsigned long)+0x52>
c0009c14:	80 ba a0 64 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd9b60],0x0
c0009c1b:	74 e0                	je     c0009bfd <Phys::allocateDMA(unsigned long)+0x2a>
c0009c1d:	31 c9                	xor    ecx,ecx
c0009c1f:	42                   	inc    edx
c0009c20:	83 fa 2f             	cmp    edx,0x2f
c0009c23:	7e ef                	jle    c0009c14 <Phys::allocateDMA(unsigned long)+0x41>
c0009c25:	83 c4 0c             	add    esp,0xc
c0009c28:	31 c0                	xor    eax,eax
c0009c2a:	5b                   	pop    ebx
c0009c2b:	5e                   	pop    esi
c0009c2c:	5f                   	pop    edi
c0009c2d:	5d                   	pop    ebp
c0009c2e:	c3                   	ret    
c0009c2f:	8d 14 03             	lea    edx,[ebx+eax*1]
c0009c32:	89 d7                	mov    edi,edx
c0009c34:	4f                   	dec    edi
c0009c35:	79 03                	jns    c0009c3a <Phys::allocateDMA(unsigned long)+0x67>
c0009c37:	8d 7a 0e             	lea    edi,[edx+0xe]
c0009c3a:	c1 ff 04             	sar    edi,0x4
c0009c3d:	89 da                	mov    edx,ebx
c0009c3f:	c1 fa 04             	sar    edx,0x4
c0009c42:	39 fa                	cmp    edx,edi
c0009c44:	75 4a                	jne    c0009c90 <Phys::allocateDMA(unsigned long)+0xbd>
c0009c46:	85 f6                	test   esi,esi
c0009c48:	74 1b                	je     c0009c65 <Phys::allocateDMA(unsigned long)+0x92>
c0009c4a:	bd a0 64 02 c0       	mov    ebp,0xc00264a0
c0009c4f:	8d 93 a0 64 02 c0    	lea    edx,[ebx-0x3ffd9b60]
c0009c55:	f7 d5                	not    ebp
c0009c57:	29 dd                	sub    ebp,ebx
c0009c59:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009c5c:	42                   	inc    edx
c0009c5d:	8d 74 15 00          	lea    esi,[ebp+edx*1+0x0]
c0009c61:	39 f1                	cmp    ecx,esi
c0009c63:	7f f4                	jg     c0009c59 <Phys::allocateDMA(unsigned long)+0x86>
c0009c65:	83 ec 0c             	sub    esp,0xc
c0009c68:	01 05 90 64 02 c0    	add    DWORD PTR ds:0xc0026490,eax
c0009c6e:	68 a4 28 02 c0       	push   0xc00228a4
c0009c73:	e8 4b 2e 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	85 ff                	test   edi,edi
c0009c7d:	74 17                	je     c0009c96 <Phys::allocateDMA(unsigned long)+0xc3>
c0009c7f:	83 c4 0c             	add    esp,0xc
c0009c82:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c0009c88:	5b                   	pop    ebx
c0009c89:	c1 e0 0c             	shl    eax,0xc
c0009c8c:	5e                   	pop    esi
c0009c8d:	5f                   	pop    edi
c0009c8e:	5d                   	pop    ebp
c0009c8f:	c3                   	ret    
c0009c90:	89 ea                	mov    edx,ebp
c0009c92:	31 c9                	xor    ecx,ecx
c0009c94:	eb 89                	jmp    c0009c1f <Phys::allocateDMA(unsigned long)+0x4c>
c0009c96:	83 c4 0c             	add    esp,0xc
c0009c99:	c1 e3 0c             	shl    ebx,0xc
c0009c9c:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c0009ca2:	5b                   	pop    ebx
c0009ca3:	5e                   	pop    esi
c0009ca4:	5f                   	pop    edi
c0009ca5:	5d                   	pop    ebp
c0009ca6:	c3                   	ret    

c0009ca7 <Phys::freeDMA(unsigned long, unsigned long)>:
c0009ca7:	83 ec 18             	sub    esp,0x18
c0009caa:	68 bb 28 02 c0       	push   0xc00228bb
c0009caf:	e8 0f 2e 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0009cb4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009cb8:	83 c4 10             	add    esp,0x10
c0009cbb:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c0009cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cc5:	c1 e9 0c             	shr    ecx,0xc
c0009cc8:	29 0d 90 64 02 c0    	sub    DWORD PTR ds:0xc0026490,ecx
c0009cce:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c0009cd6:	76 29                	jbe    c0009d01 <Phys::freeDMA(unsigned long, unsigned long)+0x5a>
c0009cd8:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c0009cde:	c1 ea 0c             	shr    edx,0xc
c0009ce1:	83 c2 10             	add    edx,0x10
c0009ce4:	85 c9                	test   ecx,ecx
c0009ce6:	74 15                	je     c0009cfd <Phys::freeDMA(unsigned long, unsigned long)+0x56>
c0009ce8:	8d 82 a0 64 02 c0    	lea    eax,[edx-0x3ffd9b60]
c0009cee:	8d 94 11 a0 64 02 c0 	lea    edx,[ecx+edx*1-0x3ffd9b60]
c0009cf5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009cf8:	40                   	inc    eax
c0009cf9:	39 d0                	cmp    eax,edx
c0009cfb:	75 f8                	jne    c0009cf5 <Phys::freeDMA(unsigned long, unsigned long)+0x4e>
c0009cfd:	83 c4 0c             	add    esp,0xc
c0009d00:	c3                   	ret    
c0009d01:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c0009d07:	c1 ea 0c             	shr    edx,0xc
c0009d0a:	eb d8                	jmp    c0009ce4 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>

c0009d0c <Phys::setPageState(unsigned long, bool)>:
c0009d0c:	56                   	push   esi
c0009d0d:	ba 01 00 00 00       	mov    edx,0x1
c0009d12:	53                   	push   ebx
c0009d13:	8b 35 04 58 02 c0    	mov    esi,DWORD PTR ds:0xc0025804
c0009d19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d1d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009d21:	89 c8                	mov    eax,ecx
c0009d23:	83 e1 07             	and    ecx,0x7
c0009d26:	c1 e8 03             	shr    eax,0x3
c0009d29:	d3 e3                	shl    ebx,cl
c0009d2b:	01 c6                	add    esi,eax
c0009d2d:	d3 e2                	shl    edx,cl
c0009d2f:	f7 d2                	not    edx
c0009d31:	20 16                	and    BYTE PTR [esi],dl
c0009d33:	03 05 04 58 02 c0    	add    eax,DWORD PTR ds:0xc0025804
c0009d39:	08 18                	or     BYTE PTR [eax],bl
c0009d3b:	5b                   	pop    ebx
c0009d3c:	5e                   	pop    esi
c0009d3d:	c3                   	ret    

c0009d3e <Phys::getPageState(unsigned long)>:
c0009d3e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009d42:	8b 15 04 58 02 c0    	mov    edx,DWORD PTR ds:0xc0025804
c0009d48:	89 c8                	mov    eax,ecx
c0009d4a:	83 e1 07             	and    ecx,0x7
c0009d4d:	c1 e8 03             	shr    eax,0x3
c0009d50:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009d54:	d3 f8                	sar    eax,cl
c0009d56:	83 e0 01             	and    eax,0x1
c0009d59:	c3                   	ret    

c0009d5a <Phys::freePage(unsigned long)>:
c0009d5a:	53                   	push   ebx
c0009d5b:	83 ec 10             	sub    esp,0x10
c0009d5e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009d62:	53                   	push   ebx
c0009d63:	68 d1 28 02 c0       	push   0xc00228d1
c0009d68:	e8 56 2d 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0009d6d:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	3d ff ff 00 00       	cmp    eax,0xffff
c0009d7b:	76 39                	jbe    c0009db6 <Phys::freePage(unsigned long)+0x5c>
c0009d7d:	8d 83 00 00 fa ff    	lea    eax,[ebx-0x60000]
c0009d83:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0009d88:	76 2c                	jbe    c0009db6 <Phys::freePage(unsigned long)+0x5c>
c0009d8a:	83 ec 0c             	sub    esp,0xc
c0009d8d:	c1 eb 0c             	shr    ebx,0xc
c0009d90:	53                   	push   ebx
c0009d91:	e8 a8 ff ff ff       	call   c0009d3e <Phys::getPageState(unsigned long)>
c0009d96:	83 c4 10             	add    esp,0x10
c0009d99:	84 c0                	test   al,al
c0009d9b:	74 3c                	je     c0009dd9 <Phys::freePage(unsigned long)+0x7f>
c0009d9d:	83 ec 08             	sub    esp,0x8
c0009da0:	ff 0d 90 64 02 c0    	dec    DWORD PTR ds:0xc0026490
c0009da6:	6a 00                	push   0x0
c0009da8:	53                   	push   ebx
c0009da9:	e8 5e ff ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c0009dae:	83 c4 10             	add    esp,0x10
c0009db1:	83 c4 08             	add    esp,0x8
c0009db4:	5b                   	pop    ebx
c0009db5:	c3                   	ret    
c0009db6:	83 ec 08             	sub    esp,0x8
c0009db9:	53                   	push   ebx
c0009dba:	68 e4 28 02 c0       	push   0xc00228e4
c0009dbf:	e8 ff 2c 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0009dc4:	58                   	pop    eax
c0009dc5:	5a                   	pop    edx
c0009dc6:	68 00 10 00 00       	push   0x1000
c0009dcb:	53                   	push   ebx
c0009dcc:	e8 d6 fe ff ff       	call   c0009ca7 <Phys::freeDMA(unsigned long, unsigned long)>
c0009dd1:	83 c4 10             	add    esp,0x10
c0009dd4:	83 c4 08             	add    esp,0x8
c0009dd7:	5b                   	pop    ebx
c0009dd8:	c3                   	ret    
c0009dd9:	c7 44 24 10 fb 28 02 c0 	mov    DWORD PTR [esp+0x10],0xc00228fb
c0009de1:	83 c4 08             	add    esp,0x8
c0009de4:	5b                   	pop    ebx
c0009de5:	e9 9b a5 00 00       	jmp    c0014385 <Krnl::panic(char const*)>

c0009dea <Phys::allocatePage()>:
c0009dea:	56                   	push   esi
c0009deb:	53                   	push   ebx
c0009dec:	83 ec 14             	sub    esp,0x14
c0009def:	8b 35 84 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026484
c0009df5:	89 f3                	mov    ebx,esi
c0009df7:	eb 0a                	jmp    c0009e03 <Phys::allocatePage()+0x19>
c0009df9:	89 1d 84 64 02 c0    	mov    DWORD PTR ds:0xc0026484,ebx
c0009dff:	39 de                	cmp    esi,ebx
c0009e01:	74 24                	je     c0009e27 <Phys::allocatePage()+0x3d>
c0009e03:	53                   	push   ebx
c0009e04:	e8 35 ff ff ff       	call   c0009d3e <Phys::getPageState(unsigned long)>
c0009e09:	5a                   	pop    edx
c0009e0a:	84 c0                	test   al,al
c0009e0c:	74 73                	je     c0009e81 <Phys::allocatePage()+0x97>
c0009e0e:	43                   	inc    ebx
c0009e0f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009e15:	75 e2                	jne    c0009df9 <Phys::allocatePage()+0xf>
c0009e17:	31 db                	xor    ebx,ebx
c0009e19:	c7 05 84 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026484,0x0
c0009e23:	39 de                	cmp    esi,ebx
c0009e25:	75 dc                	jne    c0009e03 <Phys::allocatePage()+0x19>
c0009e27:	80 35 d0 64 02 c0 01 	xor    BYTE PTR ds:0xc00264d0,0x1
c0009e2e:	0f 85 8e 00 00 00    	jne    c0009ec2 <Phys::allocatePage()+0xd8>
c0009e34:	83 ec 0c             	sub    esp,0xc
c0009e37:	68 94 29 02 c0       	push   0xc0022994
c0009e3c:	e8 82 2c 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0009e41:	58                   	pop    eax
c0009e42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009e47:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e4a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0009e50:	e8 fd 28 00 00       	call   c000c752 <VAS::scanForEviction()>
c0009e55:	83 c4 10             	add    esp,0x10
c0009e58:	85 c0                	test   eax,eax
c0009e5a:	0f 85 b3 00 00 00    	jne    c0009f13 <Phys::allocatePage()+0x129>
c0009e60:	83 ec 0c             	sub    esp,0xc
c0009e63:	68 b8 29 02 c0       	push   0xc00229b8
c0009e68:	e8 18 a5 00 00       	call   c0014385 <Krnl::panic(char const*)>
c0009e6d:	83 c4 10             	add    esp,0x10
c0009e70:	8b 1d 84 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026484
c0009e76:	53                   	push   ebx
c0009e77:	e8 c2 fe ff ff       	call   c0009d3e <Phys::getPageState(unsigned long)>
c0009e7c:	5a                   	pop    edx
c0009e7d:	84 c0                	test   al,al
c0009e7f:	75 8d                	jne    c0009e0e <Phys::allocatePage()+0x24>
c0009e81:	6a 01                	push   0x1
c0009e83:	53                   	push   ebx
c0009e84:	e8 83 fe ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c0009e89:	5a                   	pop    edx
c0009e8a:	a1 90 64 02 c0       	mov    eax,ds:0xc0026490
c0009e8f:	59                   	pop    ecx
c0009e90:	40                   	inc    eax
c0009e91:	8b 15 84 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026484
c0009e97:	a3 90 64 02 c0       	mov    ds:0xc0026490,eax
c0009e9c:	c1 e2 0c             	shl    edx,0xc
c0009e9f:	52                   	push   edx
c0009ea0:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0009ea6:	50                   	push   eax
c0009ea7:	68 11 29 02 c0       	push   0xc0022911
c0009eac:	e8 12 2c 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0009eb1:	a1 84 64 02 c0       	mov    eax,ds:0xc0026484
c0009eb6:	83 c4 10             	add    esp,0x10
c0009eb9:	c1 e0 0c             	shl    eax,0xc
c0009ebc:	83 c4 14             	add    esp,0x14
c0009ebf:	5b                   	pop    ebx
c0009ec0:	5e                   	pop    esi
c0009ec1:	c3                   	ret    
c0009ec2:	83 ec 0c             	sub    esp,0xc
c0009ec5:	68 00 10 00 00       	push   0x1000
c0009eca:	e8 04 fd ff ff       	call   c0009bd3 <Phys::allocateDMA(unsigned long)>
c0009ecf:	83 c4 10             	add    esp,0x10
c0009ed2:	85 c0                	test   eax,eax
c0009ed4:	0f 84 5a ff ff ff    	je     c0009e34 <Phys::allocatePage()+0x4a>
c0009eda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ede:	83 ec 0c             	sub    esp,0xc
c0009ee1:	68 74 29 02 c0       	push   0xc0022974
c0009ee6:	e8 d8 2b 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0009eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009eef:	50                   	push   eax
c0009ef0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ef4:	ff 35 94 64 02 c0    	push   DWORD PTR ds:0xc0026494
c0009efa:	ff 35 90 64 02 c0    	push   DWORD PTR ds:0xc0026490
c0009f00:	68 11 29 02 c0       	push   0xc0022911
c0009f05:	e8 b9 2b 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0009f0a:	83 c4 20             	add    esp,0x20
c0009f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f11:	eb a9                	jmp    c0009ebc <Phys::allocatePage()+0xd2>
c0009f13:	83 ec 08             	sub    esp,0x8
c0009f16:	89 c2                	mov    edx,eax
c0009f18:	6a 01                	push   0x1
c0009f1a:	c1 ea 0c             	shr    edx,0xc
c0009f1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f21:	52                   	push   edx
c0009f22:	e8 e5 fd ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c0009f27:	83 c4 10             	add    esp,0x10
c0009f2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f2e:	eb 8c                	jmp    c0009ebc <Phys::allocatePage()+0xd2>

c0009f30 <Phys::allocateContiguousPages(int)>:
c0009f30:	57                   	push   edi
c0009f31:	56                   	push   esi
c0009f32:	53                   	push   ebx
c0009f33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009f37:	fa                   	cli    
c0009f38:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0009f3e:	31 db                	xor    ebx,ebx
c0009f40:	85 db                	test   ebx,ebx
c0009f42:	75 11                	jne    c0009f55 <Phys::allocateContiguousPages(int)+0x25>
c0009f44:	e8 a1 fe ff ff       	call   c0009dea <Phys::allocatePage()>
c0009f49:	83 fe 01             	cmp    esi,0x1
c0009f4c:	89 c7                	mov    edi,eax
c0009f4e:	74 21                	je     c0009f71 <Phys::allocateContiguousPages(int)+0x41>
c0009f50:	bb 01 00 00 00       	mov    ebx,0x1
c0009f55:	e8 90 fe ff ff       	call   c0009dea <Phys::allocatePage()>
c0009f5a:	89 da                	mov    edx,ebx
c0009f5c:	c1 e2 0c             	shl    edx,0xc
c0009f5f:	01 fa                	add    edx,edi
c0009f61:	39 c2                	cmp    edx,eax
c0009f63:	74 20                	je     c0009f85 <Phys::allocateContiguousPages(int)+0x55>
c0009f65:	bb 01 00 00 00       	mov    ebx,0x1
c0009f6a:	89 c7                	mov    edi,eax
c0009f6c:	83 fe 01             	cmp    esi,0x1
c0009f6f:	75 e4                	jne    c0009f55 <Phys::allocateContiguousPages(int)+0x25>
c0009f71:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0009f76:	48                   	dec    eax
c0009f77:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0009f7c:	75 01                	jne    c0009f7f <Phys::allocateContiguousPages(int)+0x4f>
c0009f7e:	fb                   	sti    
c0009f7f:	89 f8                	mov    eax,edi
c0009f81:	5b                   	pop    ebx
c0009f82:	5e                   	pop    esi
c0009f83:	5f                   	pop    edi
c0009f84:	c3                   	ret    
c0009f85:	43                   	inc    ebx
c0009f86:	39 f3                	cmp    ebx,esi
c0009f88:	75 b6                	jne    c0009f40 <Phys::allocateContiguousPages(int)+0x10>
c0009f8a:	eb e5                	jmp    c0009f71 <Phys::allocateContiguousPages(int)+0x41>

c0009f8c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0009f8c:	56                   	push   esi
c0009f8d:	53                   	push   ebx
c0009f8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009f92:	39 1d 88 64 02 c0    	cmp    DWORD PTR ds:0xc0026488,ebx
c0009f98:	73 06                	jae    c0009fa0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0009f9a:	89 1d 88 64 02 c0    	mov    DWORD PTR ds:0xc0026488,ebx
c0009fa0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009fa4:	c1 eb 0c             	shr    ebx,0xc
c0009fa7:	c1 e8 0c             	shr    eax,0xc
c0009faa:	39 d8                	cmp    eax,ebx
c0009fac:	73 13                	jae    c0009fc1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0009fae:	6a 00                	push   0x0
c0009fb0:	8d 70 01             	lea    esi,[eax+0x1]
c0009fb3:	50                   	push   eax
c0009fb4:	e8 53 fd ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c0009fb9:	5a                   	pop    edx
c0009fba:	89 f0                	mov    eax,esi
c0009fbc:	59                   	pop    ecx
c0009fbd:	39 f3                	cmp    ebx,esi
c0009fbf:	75 ed                	jne    c0009fae <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0009fc1:	5b                   	pop    ebx
c0009fc2:	5e                   	pop    esi
c0009fc3:	c3                   	ret    

c0009fc4 <Phys::physicalMemorySetup(unsigned int)>:
c0009fc4:	55                   	push   ebp
c0009fc5:	57                   	push   edi
c0009fc6:	56                   	push   esi
c0009fc7:	53                   	push   ebx
c0009fc8:	31 db                	xor    ebx,ebx
c0009fca:	83 ec 40             	sub    esp,0x40
c0009fcd:	6a 30                	push   0x30
c0009fcf:	6a 00                	push   0x0
c0009fd1:	68 a0 64 02 c0       	push   0xc00264a0
c0009fd6:	e8 a9 66 ff ff       	call   c0000684 <memset>
c0009fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009fdf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fe4:	05 00 10 00 00       	add    eax,0x1000
c0009fe9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009fed:	5a                   	pop    edx
c0009fee:	59                   	pop    ecx
c0009fef:	50                   	push   eax
c0009ff0:	68 2f 29 02 c0       	push   0xc002292f
c0009ff5:	e8 c9 2a 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0009ffa:	83 c4 10             	add    esp,0x10
c0009ffd:	83 ec 08             	sub    esp,0x8
c000a000:	6a 01                	push   0x1
c000a002:	53                   	push   ebx
c000a003:	43                   	inc    ebx
c000a004:	e8 03 fd ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c000a009:	83 c4 10             	add    esp,0x10
c000a00c:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a012:	75 e9                	jne    c0009ffd <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a014:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a01b:	66 85 c0             	test   ax,ax
c000a01e:	0f 84 8e 01 00 00    	je     c000a1b2 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a024:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a028:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a030:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a034:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a039:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a045:	eb 15                	jmp    c000a05c <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a047:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a04b:	83 c3 18             	add    ebx,0x18
c000a04e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a052:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a056:	0f 84 66 01 00 00    	je     c000a1c2 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a05c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a05f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a062:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a069:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a06d:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a06f:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a072:	01 f0                	add    eax,esi
c000a074:	55                   	push   ebp
c000a075:	11 fa                	adc    edx,edi
c000a077:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a07b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a07f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a083:	56                   	push   esi
c000a084:	68 e8 29 02 c0       	push   0xc00229e8
c000a089:	e8 35 2a 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000a08e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a092:	83 c4 10             	add    esp,0x10
c000a095:	09 f8                	or     eax,edi
c000a097:	0f 85 25 01 00 00    	jne    c000a1c2 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a09d:	4d                   	dec    ebp
c000a09e:	75 a7                	jne    c000a047 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a0a0:	ba 00 00 08 00       	mov    edx,0x80000
c000a0a5:	89 c1                	mov    ecx,eax
c000a0a7:	39 f2                	cmp    edx,esi
c000a0a9:	19 f9                	sbb    ecx,edi
c000a0ab:	0f 82 a7 00 00 00    	jb     c000a158 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a0b1:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a0b5:	89 c1                	mov    ecx,eax
c000a0b7:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a0bb:	0f 83 97 00 00 00    	jae    c000a158 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a0c1:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a0c6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a0ca:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a0ce:	39 fa                	cmp    edx,edi
c000a0d0:	19 e8                	sbb    eax,ebp
c000a0d2:	0f 82 3d 01 00 00    	jb     c000a215 <Phys::physicalMemorySetup(unsigned int)+0x251>
c000a0d8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a0dc:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a0e0:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a0e6:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a0eb:	83 d5 ff             	adc    ebp,0xffffffff
c000a0ee:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a0f2:	31 c0                	xor    eax,eax
c000a0f4:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a0f8:	39 fa                	cmp    edx,edi
c000a0fa:	89 c1                	mov    ecx,eax
c000a0fc:	19 e9                	sbb    ecx,ebp
c000a0fe:	0f 83 43 ff ff ff    	jae    c000a047 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a104:	be 00 00 08 00       	mov    esi,0x80000
c000a109:	57                   	push   edi
c000a10a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a10e:	57                   	push   edi
c000a10f:	56                   	push   esi
c000a110:	68 0c 2a 02 c0       	push   0xc0022a0c
c000a115:	e8 a9 29 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000a11a:	5d                   	pop    ebp
c000a11b:	58                   	pop    eax
c000a11c:	57                   	push   edi
c000a11d:	56                   	push   esi
c000a11e:	e8 69 fe ff ff       	call   c0009f8c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a123:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a127:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a12b:	83 c4 0c             	add    esp,0xc
c000a12e:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a132:	03 05 94 64 02 c0    	add    eax,DWORD PTR ds:0xc0026494
c000a138:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a13f:	a3 94 64 02 c0       	mov    ds:0xc0026494,eax
c000a144:	52                   	push   edx
c000a145:	50                   	push   eax
c000a146:	68 55 29 02 c0       	push   0xc0022955
c000a14b:	e8 73 29 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000a150:	83 c4 10             	add    esp,0x10
c000a153:	e9 ef fe ff ff       	jmp    c000a047 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a158:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a15c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a160:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a164:	39 ea                	cmp    edx,ebp
c000a166:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a16a:	0f 82 d7 fe ff ff    	jb     c000a047 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a170:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a175:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a179:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a17d:	0f 83 c4 fe ff ff    	jae    c000a047 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a183:	39 ee                	cmp    esi,ebp
c000a185:	89 f8                	mov    eax,edi
c000a187:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a18b:	0f 83 78 ff ff ff    	jae    c000a109 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a191:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a195:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a199:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a19d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a1a1:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a1a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1ad:	e9 57 ff ff ff       	jmp    c000a109 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a1b2:	83 ec 0c             	sub    esp,0xc
c000a1b5:	68 47 29 02 c0       	push   0xc0022947
c000a1ba:	e8 c6 a1 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000a1bf:	83 c4 10             	add    esp,0x10
c000a1c2:	bb 40 01 00 00       	mov    ebx,0x140
c000a1c7:	83 ec 08             	sub    esp,0x8
c000a1ca:	6a 00                	push   0x0
c000a1cc:	53                   	push   ebx
c000a1cd:	43                   	inc    ebx
c000a1ce:	e8 39 fb ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c000a1d3:	ff 05 94 64 02 c0    	inc    DWORD PTR ds:0xc0026494
c000a1d9:	83 c4 10             	add    esp,0x10
c000a1dc:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000a1e2:	75 e3                	jne    c000a1c7 <Phys::physicalMemorySetup(unsigned int)+0x203>
c000a1e4:	83 ec 08             	sub    esp,0x8
c000a1e7:	6a 00                	push   0x0
c000a1e9:	6a 05                	push   0x5
c000a1eb:	e8 1c fb ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c000a1f0:	58                   	pop    eax
c000a1f1:	5a                   	pop    edx
c000a1f2:	6a 00                	push   0x0
c000a1f4:	6a 06                	push   0x6
c000a1f6:	e8 11 fb ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c000a1fb:	59                   	pop    ecx
c000a1fc:	5b                   	pop    ebx
c000a1fd:	6a 00                	push   0x0
c000a1ff:	6a 07                	push   0x7
c000a201:	e8 06 fb ff ff       	call   c0009d0c <Phys::setPageState(unsigned long, bool)>
c000a206:	83 05 94 64 02 c0 33 	add    DWORD PTR ds:0xc0026494,0x33
c000a20d:	83 c4 4c             	add    esp,0x4c
c000a210:	5b                   	pop    ebx
c000a211:	5e                   	pop    esi
c000a212:	5f                   	pop    edi
c000a213:	5d                   	pop    ebp
c000a214:	c3                   	ret    
c000a215:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a21d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a225:	e9 ae fe ff ff       	jmp    c000a0d8 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a22a <Pipe::isAtty()>:
c000a22a:	31 c0                	xor    eax,eax
c000a22c:	c3                   	ret    
c000a22d:	90                   	nop

c000a22e <Pipe::~Pipe()>:
c000a22e:	83 ec 0c             	sub    esp,0xc
c000a231:	ba 78 2a 02 c0       	mov    edx,0xc0022a78
c000a236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a23a:	89 10                	mov    DWORD PTR [eax],edx
c000a23c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a240:	83 ec 0c             	sub    esp,0xc
c000a243:	50                   	push   eax
c000a244:	e8 47 12 00 00       	call   c000b490 <UnixFile::~UnixFile()>
c000a249:	83 c4 10             	add    esp,0x10
c000a24c:	90                   	nop
c000a24d:	83 c4 0c             	add    esp,0xc
c000a250:	c3                   	ret    
c000a251:	90                   	nop

c000a252 <Pipe::~Pipe()>:
c000a252:	83 ec 0c             	sub    esp,0xc
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a25c:	e8 cd ff ff ff       	call   c000a22e <Pipe::~Pipe()>
c000a261:	83 c4 10             	add    esp,0x10
c000a264:	83 ec 08             	sub    esp,0x8
c000a267:	6a 20                	push   0x20
c000a269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26d:	e8 70 27 00 00       	call   c000c9e2 <operator delete(void*, unsigned long)>
c000a272:	83 c4 10             	add    esp,0x10
c000a275:	83 c4 0c             	add    esp,0xc
c000a278:	c3                   	ret    
c000a279:	90                   	nop

c000a27a <Pipe::read(unsigned long long, void*, int*)>:
c000a27a:	55                   	push   ebp
c000a27b:	57                   	push   edi
c000a27c:	56                   	push   esi
c000a27d:	53                   	push   ebx
c000a27e:	83 ec 1c             	sub    esp,0x1c
c000a281:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a285:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a289:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a28d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a290:	89 c8                	mov    eax,ecx
c000a292:	99                   	cdq    
c000a293:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a297:	74 24                	je     c000a2bd <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a299:	39 f9                	cmp    ecx,edi
c000a29b:	89 d1                	mov    ecx,edx
c000a29d:	19 f1                	sbb    ecx,esi
c000a29f:	73 1c                	jae    c000a2bd <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a2a1:	fa                   	cli    
c000a2a2:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c000a2a8:	e8 ab dc 00 00       	call   c0017f58 <schedule()>
c000a2ad:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000a2b2:	48                   	dec    eax
c000a2b3:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000a2b8:	75 d3                	jne    c000a28d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a2ba:	fb                   	sti    
c000a2bb:	eb d0                	jmp    c000a28d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a2bd:	39 f8                	cmp    eax,edi
c000a2bf:	89 d1                	mov    ecx,edx
c000a2c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a2c4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a2c8:	19 f1                	sbb    ecx,esi
c000a2ca:	73 07                	jae    c000a2d3 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a2cc:	89 04 24             	mov    DWORD PTR [esp],eax
c000a2cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a2d3:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a2d6:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a2d9:	29 f7                	sub    edi,esi
c000a2db:	89 f8                	mov    eax,edi
c000a2dd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a2e1:	99                   	cdq    
c000a2e2:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a2e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a2e9:	19 d0                	sbb    eax,edx
c000a2eb:	73 07                	jae    c000a2f4 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a2ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a2f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2f4:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a2f7:	89 ea                	mov    edx,ebp
c000a2f9:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a2fd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a302:	74 0d                	je     c000a311 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a304:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a307:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a30b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a30f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a311:	85 d2                	test   edx,edx
c000a313:	74 11                	je     c000a326 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a315:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a319:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a31c:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a320:	89 d1                	mov    ecx,edx
c000a322:	89 c7                	mov    edi,eax
c000a324:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a326:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a329:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a32c:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a32f:	99                   	cdq    
c000a330:	89 f7                	mov    edi,esi
c000a332:	03 04 24             	add    eax,DWORD PTR [esp]
c000a335:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a339:	c1 ff 1f             	sar    edi,0x1f
c000a33c:	57                   	push   edi
c000a33d:	56                   	push   esi
c000a33e:	52                   	push   edx
c000a33f:	50                   	push   eax
c000a340:	e8 3f 6d 01 00       	call   c0021084 <__umoddi3>
c000a345:	83 c4 10             	add    esp,0x10
c000a348:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a34b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a350:	75 10                	jne    c000a362 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a352:	83 ec 0c             	sub    esp,0xc
c000a355:	68 35 2a 02 c0       	push   0xc0022a35
c000a35a:	e8 26 a0 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000a35f:	83 c4 10             	add    esp,0x10
c000a362:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a366:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a369:	89 10                	mov    DWORD PTR [eax],edx
c000a36b:	83 c4 1c             	add    esp,0x1c
c000a36e:	31 c0                	xor    eax,eax
c000a370:	5b                   	pop    ebx
c000a371:	5e                   	pop    esi
c000a372:	5f                   	pop    edi
c000a373:	5d                   	pop    ebp
c000a374:	c3                   	ret    
c000a375:	90                   	nop

c000a376 <Pipe::write(unsigned long long, void*, int*)>:
c000a376:	55                   	push   ebp
c000a377:	57                   	push   edi
c000a378:	56                   	push   esi
c000a379:	53                   	push   ebx
c000a37a:	83 ec 1c             	sub    esp,0x1c
c000a37d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a381:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a385:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a388:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a38c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a38f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a393:	89 d8                	mov    eax,ebx
c000a395:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a398:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a39c:	89 d6                	mov    esi,edx
c000a39e:	89 d7                	mov    edi,edx
c000a3a0:	c1 ff 1f             	sar    edi,0x1f
c000a3a3:	03 34 24             	add    esi,DWORD PTR [esp]
c000a3a6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a3aa:	c1 f8 1f             	sar    eax,0x1f
c000a3ad:	39 f3                	cmp    ebx,esi
c000a3af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a3b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a3b7:	19 f8                	sbb    eax,edi
c000a3b9:	b8 01 00 00 00       	mov    eax,0x1
c000a3be:	72 6e                	jb     c000a42e <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a3c0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a3c3:	01 d0                	add    eax,edx
c000a3c5:	99                   	cdq    
c000a3c6:	f7 fb                	idiv   ebx
c000a3c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a3cc:	29 d3                	sub    ebx,edx
c000a3ce:	89 d7                	mov    edi,edx
c000a3d0:	89 de                	mov    esi,ebx
c000a3d2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a3d5:	c1 fb 1f             	sar    ebx,0x1f
c000a3d8:	39 f2                	cmp    edx,esi
c000a3da:	19 d8                	sbb    eax,ebx
c000a3dc:	b8 00 00 00 00       	mov    eax,0x0
c000a3e1:	72 04                	jb     c000a3e7 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a3e3:	89 d0                	mov    eax,edx
c000a3e5:	29 f0                	sub    eax,esi
c000a3e7:	89 d3                	mov    ebx,edx
c000a3e9:	29 c3                	sub    ebx,eax
c000a3eb:	74 0b                	je     c000a3f8 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a3ed:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a3f0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a3f4:	89 d9                	mov    ecx,ebx
c000a3f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a3f8:	85 c0                	test   eax,eax
c000a3fa:	74 0d                	je     c000a409 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a3fc:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a400:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a403:	89 de                	mov    esi,ebx
c000a405:	89 c1                	mov    ecx,eax
c000a407:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a409:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a40c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a411:	75 10                	jne    c000a423 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a413:	83 ec 0c             	sub    esp,0xc
c000a416:	68 51 2a 02 c0       	push   0xc0022a51
c000a41b:	e8 65 9f 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000a420:	83 c4 10             	add    esp,0x10
c000a423:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a427:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a42a:	89 08                	mov    DWORD PTR [eax],ecx
c000a42c:	31 c0                	xor    eax,eax
c000a42e:	83 c4 1c             	add    esp,0x1c
c000a431:	5b                   	pop    ebx
c000a432:	5e                   	pop    esi
c000a433:	5f                   	pop    edi
c000a434:	5d                   	pop    ebp
c000a435:	c3                   	ret    

c000a436 <Pipe::Pipe(int)>:
c000a436:	83 ec 0c             	sub    esp,0xc
c000a439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a43d:	83 ec 08             	sub    esp,0x8
c000a440:	6a 00                	push   0x0
c000a442:	50                   	push   eax
c000a443:	e8 66 0e 00 00       	call   c000b2ae <UnixFile::UnixFile(int)>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	ba 78 2a 02 c0       	mov    edx,0xc0022a78
c000a450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a454:	89 10                	mov    DWORD PTR [eax],edx
c000a456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a45a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a45e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a465:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a470:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a477:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a47b:	83 ec 0c             	sub    esp,0xc
c000a47e:	50                   	push   eax
c000a47f:	e8 3f f5 ff ff       	call   c00099c3 <malloc>
c000a484:	83 c4 10             	add    esp,0x10
c000a487:	89 c2                	mov    edx,eax
c000a489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a48d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a494:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a498:	90                   	nop
c000a499:	83 c4 0c             	add    esp,0xc
c000a49c:	c3                   	ret    
c000a49d:	90                   	nop

c000a49e <VgaText::isAtty()>:
c000a49e:	b0 01                	mov    al,0x1
c000a4a0:	c3                   	ret    
c000a4a1:	90                   	nop

c000a4a2 <VgaText::~VgaText()>:
c000a4a2:	83 ec 0c             	sub    esp,0xc
c000a4a5:	ba 00 2b 02 c0       	mov    edx,0xc0022b00
c000a4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4ae:	89 10                	mov    DWORD PTR [eax],edx
c000a4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4b4:	83 ec 0c             	sub    esp,0xc
c000a4b7:	50                   	push   eax
c000a4b8:	e8 d3 0f 00 00       	call   c000b490 <UnixFile::~UnixFile()>
c000a4bd:	83 c4 10             	add    esp,0x10
c000a4c0:	90                   	nop
c000a4c1:	83 c4 0c             	add    esp,0xc
c000a4c4:	c3                   	ret    
c000a4c5:	90                   	nop

c000a4c6 <VgaText::~VgaText()>:
c000a4c6:	83 ec 0c             	sub    esp,0xc
c000a4c9:	83 ec 0c             	sub    esp,0xc
c000a4cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4d0:	e8 cd ff ff ff       	call   c000a4a2 <VgaText::~VgaText()>
c000a4d5:	83 c4 10             	add    esp,0x10
c000a4d8:	83 ec 08             	sub    esp,0x8
c000a4db:	68 c4 02 00 00       	push   0x2c4
c000a4e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4e4:	e8 f9 24 00 00       	call   c000c9e2 <operator delete(void*, unsigned long)>
c000a4e9:	83 c4 10             	add    esp,0x10
c000a4ec:	83 c4 0c             	add    esp,0xc
c000a4ef:	c3                   	ret    

c000a4f0 <VgaText::read(unsigned long long, void*, int*)>:
c000a4f0:	83 ec 10             	sub    esp,0x10
c000a4f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4ff:	e8 4e 58 00 00       	call   c000fd52 <readKeyboard(VgaText*, char*, unsigned long)>
c000a504:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a508:	89 02                	mov    DWORD PTR [edx],eax
c000a50a:	31 c0                	xor    eax,eax
c000a50c:	83 c4 1c             	add    esp,0x1c
c000a50f:	c3                   	ret    

c000a510 <setTerminalScrollLock(bool)>:
c000a510:	c3                   	ret    

c000a511 <addToTerminalCycle(VgaText*)>:
c000a511:	8b 15 00 65 02 c0    	mov    edx,DWORD PTR ds:0xc0026500
c000a517:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a51b:	85 d2                	test   edx,edx
c000a51d:	75 09                	jne    c000a528 <addToTerminalCycle(VgaText*)+0x17>
c000a51f:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a522:	a3 00 65 02 c0       	mov    ds:0xc0026500,eax
c000a527:	c3                   	ret    
c000a528:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a52b:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a52e:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a531:	c3                   	ret    

c000a532 <installVgaTextImplementation()>:
c000a532:	83 ec 10             	sub    esp,0x10
c000a535:	6a 20                	push   0x20
c000a537:	6a 00                	push   0x0
c000a539:	68 e0 64 02 c0       	push   0xc00264e0
c000a53e:	e8 41 61 ff ff       	call   c0000684 <memset>
c000a543:	83 c4 1c             	add    esp,0x1c
c000a546:	c3                   	ret    

c000a547 <scrollTerminalScrollLock(int)>:
c000a547:	c3                   	ret    

c000a548 <VgaText::updateTitle()>:
c000a548:	53                   	push   ebx
c000a549:	31 c0                	xor    eax,eax
c000a54b:	83 ec 58             	sub    esp,0x58
c000a54e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a552:	89 e1                	mov    ecx,esp
c000a554:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a558:	40                   	inc    eax
c000a559:	83 f8 50             	cmp    eax,0x50
c000a55c:	75 f6                	jne    c000a554 <VgaText::updateTitle()+0xc>
c000a55e:	31 c0                	xor    eax,eax
c000a560:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a567:	84 db                	test   bl,bl
c000a569:	74 06                	je     c000a571 <VgaText::updateTitle()+0x29>
c000a56b:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a56e:	40                   	inc    eax
c000a56f:	eb ef                	jmp    c000a560 <VgaText::updateTitle()+0x18>
c000a571:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a574:	85 c0                	test   eax,eax
c000a576:	74 09                	je     c000a581 <VgaText::updateTitle()+0x39>
c000a578:	53                   	push   ebx
c000a579:	53                   	push   ebx
c000a57a:	51                   	push   ecx
c000a57b:	52                   	push   edx
c000a57c:	ff d0                	call   eax
c000a57e:	83 c4 10             	add    esp,0x10
c000a581:	83 c4 58             	add    esp,0x58
c000a584:	5b                   	pop    ebx
c000a585:	c3                   	ret    

c000a586 <VgaText::load()>:
c000a586:	53                   	push   ebx
c000a587:	31 c0                	xor    eax,eax
c000a589:	83 ec 58             	sub    esp,0x58
c000a58c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a590:	89 e2                	mov    edx,esp
c000a592:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a596:	40                   	inc    eax
c000a597:	83 f8 50             	cmp    eax,0x50
c000a59a:	75 f6                	jne    c000a592 <VgaText::load()+0xc>
c000a59c:	31 c0                	xor    eax,eax
c000a59e:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a5a5:	84 c9                	test   cl,cl
c000a5a7:	74 06                	je     c000a5af <VgaText::load()+0x29>
c000a5a9:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a5ac:	40                   	inc    eax
c000a5ad:	eb ef                	jmp    c000a59e <VgaText::load()+0x18>
c000a5af:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a5b2:	85 c0                	test   eax,eax
c000a5b4:	74 09                	je     c000a5bf <VgaText::load()+0x39>
c000a5b6:	51                   	push   ecx
c000a5b7:	51                   	push   ecx
c000a5b8:	52                   	push   edx
c000a5b9:	53                   	push   ebx
c000a5ba:	ff d0                	call   eax
c000a5bc:	83 c4 10             	add    esp,0x10
c000a5bf:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a5c2:	85 c0                	test   eax,eax
c000a5c4:	74 09                	je     c000a5cf <VgaText::load()+0x49>
c000a5c6:	83 ec 0c             	sub    esp,0xc
c000a5c9:	53                   	push   ebx
c000a5ca:	ff d0                	call   eax
c000a5cc:	83 c4 10             	add    esp,0x10
c000a5cf:	83 c4 58             	add    esp,0x58
c000a5d2:	5b                   	pop    ebx
c000a5d3:	c3                   	ret    

c000a5d4 <VgaText::updateCursor()>:
c000a5d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5d8:	39 05 04 65 02 c0    	cmp    DWORD PTR ds:0xc0026504,eax
c000a5de:	75 09                	jne    c000a5e9 <VgaText::updateCursor()+0x15>
c000a5e0:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a5e3:	85 c0                	test   eax,eax
c000a5e5:	74 02                	je     c000a5e9 <VgaText::updateCursor()+0x15>
c000a5e7:	ff e0                	jmp    eax
c000a5e9:	c3                   	ret    

c000a5ea <VgaText::doANSI_SGR(int)>:
c000a5ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a5ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5f2:	85 d2                	test   edx,edx
c000a5f4:	75 0b                	jne    c000a601 <VgaText::doANSI_SGR(int)+0x17>
c000a5f6:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a5f9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a5fc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a5ff:	eb 59                	jmp    c000a65a <VgaText::doANSI_SGR(int)+0x70>
c000a601:	83 fa 07             	cmp    edx,0x7
c000a604:	75 0b                	jne    c000a611 <VgaText::doANSI_SGR(int)+0x27>
c000a606:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a609:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a60c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a60f:	eb 49                	jmp    c000a65a <VgaText::doANSI_SGR(int)+0x70>
c000a611:	83 fa 1b             	cmp    edx,0x1b
c000a614:	74 e0                	je     c000a5f6 <VgaText::doANSI_SGR(int)+0xc>
c000a616:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a619:	83 f9 07             	cmp    ecx,0x7
c000a61c:	77 09                	ja     c000a627 <VgaText::doANSI_SGR(int)+0x3d>
c000a61e:	8b 14 8d 40 58 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda7c0]
c000a625:	eb 20                	jmp    c000a647 <VgaText::doANSI_SGR(int)+0x5d>
c000a627:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a62a:	83 f9 07             	cmp    ecx,0x7
c000a62d:	77 09                	ja     c000a638 <VgaText::doANSI_SGR(int)+0x4e>
c000a62f:	8b 14 8d 40 58 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda7c0]
c000a636:	eb 22                	jmp    c000a65a <VgaText::doANSI_SGR(int)+0x70>
c000a638:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a63b:	83 f9 07             	cmp    ecx,0x7
c000a63e:	77 0b                	ja     c000a64b <VgaText::doANSI_SGR(int)+0x61>
c000a640:	8b 14 95 f8 56 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda908]
c000a647:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a64a:	c3                   	ret    
c000a64b:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a64e:	83 f9 07             	cmp    ecx,0x7
c000a651:	77 0a                	ja     c000a65d <VgaText::doANSI_SGR(int)+0x73>
c000a653:	8b 14 95 d0 56 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda930]
c000a65a:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a65d:	c3                   	ret    

c000a65e <VgaText::setDefaultBgColour(VgaColour)>:
c000a65e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a662:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a666:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a669:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a66c:	c3                   	ret    
c000a66d:	90                   	nop

c000a66e <VgaText::setDefaultFgColour(VgaColour)>:
c000a66e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a672:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a676:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a679:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a67c:	c3                   	ret    
c000a67d:	90                   	nop

c000a67e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a67e:	53                   	push   ebx
c000a67f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a683:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a687:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a68b:	51                   	push   ecx
c000a68c:	e8 cd ff ff ff       	call   c000a65e <VgaText::setDefaultBgColour(VgaColour)>
c000a691:	58                   	pop    eax
c000a692:	5a                   	pop    edx
c000a693:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a697:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a69b:	5b                   	pop    ebx
c000a69c:	eb d0                	jmp    c000a66e <VgaText::setDefaultFgColour(VgaColour)>

c000a69e <VgaText::setTitleTextColour(VgaColour)>:
c000a69e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6a6:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a6a9:	e9 9a fe ff ff       	jmp    c000a548 <VgaText::updateTitle()>

c000a6ae <VgaText::setTitleColour(VgaColour)>:
c000a6ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a6b9:	e9 8a fe ff ff       	jmp    c000a548 <VgaText::updateTitle()>

c000a6be <VgaText::setTitle(char*)>:
c000a6be:	53                   	push   ebx
c000a6bf:	83 ec 10             	sub    esp,0x10
c000a6c2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a6c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6ca:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a6d0:	50                   	push   eax
c000a6d1:	e8 6a 60 ff ff       	call   c0000740 <strcpy>
c000a6d6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a6da:	83 c4 18             	add    esp,0x18
c000a6dd:	5b                   	pop    ebx
c000a6de:	e9 65 fe ff ff       	jmp    c000a548 <VgaText::updateTitle()>
c000a6e3:	90                   	nop

c000a6e4 <VgaText::combineColours(unsigned char, unsigned char)>:
c000a6e4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a6e8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a6ed:	83 e0 0f             	and    eax,0xf
c000a6f0:	c1 e2 04             	shl    edx,0x4
c000a6f3:	09 d0                	or     eax,edx
c000a6f5:	c3                   	ret    

c000a6f6 <VgaText::scrollScreen()>:
c000a6f6:	55                   	push   ebp
c000a6f7:	b9 01 00 00 00       	mov    ecx,0x1
c000a6fc:	57                   	push   edi
c000a6fd:	56                   	push   esi
c000a6fe:	53                   	push   ebx
c000a6ff:	83 ec 0c             	sub    esp,0xc
c000a702:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a706:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a70c:	31 ff                	xor    edi,edi
c000a70e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a711:	83 f9 17             	cmp    ecx,0x17
c000a714:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a717:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a71e:	75 27                	jne    c000a747 <VgaText::scrollScreen()+0x51>
c000a720:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a723:	01 f5                	add    ebp,esi
c000a725:	f7 c7 01 00 00 00    	test   edi,0x1
c000a72b:	74 16                	je     c000a743 <VgaText::scrollScreen()+0x4d>
c000a72d:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a731:	50                   	push   eax
c000a732:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a736:	50                   	push   eax
c000a737:	e8 a8 ff ff ff       	call   c000a6e4 <VgaText::combineColours(unsigned char, unsigned char)>
c000a73c:	5a                   	pop    edx
c000a73d:	5a                   	pop    edx
c000a73e:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a741:	eb 04                	jmp    c000a747 <VgaText::scrollScreen()+0x51>
c000a743:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a747:	47                   	inc    edi
c000a748:	46                   	inc    esi
c000a749:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a74f:	75 bd                	jne    c000a70e <VgaText::scrollScreen()+0x18>
c000a751:	41                   	inc    ecx
c000a752:	83 f9 18             	cmp    ecx,0x18
c000a755:	75 af                	jne    c000a706 <VgaText::scrollScreen()+0x10>
c000a757:	39 1d 04 65 02 c0    	cmp    DWORD PTR ds:0xc0026504,ebx
c000a75d:	75 1b                	jne    c000a77a <VgaText::scrollScreen()+0x84>
c000a75f:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a763:	74 05                	je     c000a76a <VgaText::scrollScreen()+0x74>
c000a765:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000a768:	eb 10                	jmp    c000a77a <VgaText::scrollScreen()+0x84>
c000a76a:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000a76d:	85 c0                	test   eax,eax
c000a76f:	74 09                	je     c000a77a <VgaText::scrollScreen()+0x84>
c000a771:	83 ec 0c             	sub    esp,0xc
c000a774:	53                   	push   ebx
c000a775:	ff d0                	call   eax
c000a777:	83 c4 10             	add    esp,0x10
c000a77a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a77e:	83 c4 0c             	add    esp,0xc
c000a781:	5b                   	pop    ebx
c000a782:	5e                   	pop    esi
c000a783:	5f                   	pop    edi
c000a784:	5d                   	pop    ebp
c000a785:	e9 4a fe ff ff       	jmp    c000a5d4 <VgaText::updateCursor()>

c000a78a <VgaText::combineCharAndColour(char, unsigned char)>:
c000a78a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000a78f:	c1 e0 08             	shl    eax,0x8
c000a792:	89 c2                	mov    edx,eax
c000a794:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000a799:	09 d0                	or     eax,edx
c000a79b:	c3                   	ret    

c000a79c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000a79c:	56                   	push   esi
c000a79d:	53                   	push   ebx
c000a79e:	51                   	push   ecx
c000a79f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a7a3:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a7a8:	50                   	push   eax
c000a7a9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a7ae:	50                   	push   eax
c000a7af:	e8 30 ff ff ff       	call   c000a6e4 <VgaText::combineColours(unsigned char, unsigned char)>
c000a7b4:	5b                   	pop    ebx
c000a7b5:	0f b6 c0             	movzx  eax,al
c000a7b8:	5e                   	pop    esi
c000a7b9:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000a7be:	50                   	push   eax
c000a7bf:	53                   	push   ebx
c000a7c0:	e8 c5 ff ff ff       	call   c000a78a <VgaText::combineCharAndColour(char, unsigned char)>
c000a7c5:	5a                   	pop    edx
c000a7c6:	5e                   	pop    esi
c000a7c7:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000a7ca:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000a7d0:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000a7d4:	0f b7 d2             	movzx  edx,dx
c000a7d7:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000a7db:	39 0d 04 65 02 c0    	cmp    DWORD PTR ds:0xc0026504,ecx
c000a7e1:	75 10                	jne    c000a7f3 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a7e3:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000a7e6:	85 c0                	test   eax,eax
c000a7e8:	74 09                	je     c000a7f3 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a7ea:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000a7ee:	5a                   	pop    edx
c000a7ef:	5b                   	pop    ebx
c000a7f0:	5e                   	pop    esi
c000a7f1:	ff e0                	jmp    eax
c000a7f3:	58                   	pop    eax
c000a7f4:	5b                   	pop    ebx
c000a7f5:	5e                   	pop    esi
c000a7f6:	c3                   	ret    
c000a7f7:	90                   	nop

c000a7f8 <VgaText::getCursorX()>:
c000a7f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7fc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000a7ff:	c3                   	ret    

c000a800 <VgaText::getCursorY()>:
c000a800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a804:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000a807:	c3                   	ret    

c000a808 <VgaText::setCursor(int, int)>:
c000a808:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a80c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a810:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000a813:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a817:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a81a:	e9 b5 fd ff ff       	jmp    c000a5d4 <VgaText::updateCursor()>

c000a81f <setActiveTerminal(VgaText*)>:
c000a81f:	53                   	push   ebx
c000a820:	83 ec 08             	sub    esp,0x8
c000a823:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a827:	85 db                	test   ebx,ebx
c000a829:	75 11                	jne    c000a83c <setActiveTerminal(VgaText*)+0x1d>
c000a82b:	c7 44 24 10 8c 2a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022a8c
c000a833:	83 c4 08             	add    esp,0x8
c000a836:	5b                   	pop    ebx
c000a837:	e9 49 9b 00 00       	jmp    c0014385 <Krnl::panic(char const*)>
c000a83c:	a1 04 65 02 c0       	mov    eax,ds:0xc0026504
c000a841:	85 c0                	test   eax,eax
c000a843:	74 0c                	je     c000a851 <setActiveTerminal(VgaText*)+0x32>
c000a845:	83 ec 0c             	sub    esp,0xc
c000a848:	50                   	push   eax
c000a849:	e8 86 fd ff ff       	call   c000a5d4 <VgaText::updateCursor()>
c000a84e:	83 c4 10             	add    esp,0x10
c000a851:	89 1d 04 65 02 c0    	mov    DWORD PTR ds:0xc0026504,ebx
c000a857:	51                   	push   ecx
c000a858:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a85b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a85e:	53                   	push   ebx
c000a85f:	e8 a4 ff ff ff       	call   c000a808 <VgaText::setCursor(int, int)>
c000a864:	83 c4 10             	add    esp,0x10
c000a867:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a86b:	75 07                	jne    c000a874 <setActiveTerminal(VgaText*)+0x55>
c000a86d:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000a874:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a878:	83 c4 08             	add    esp,0x8
c000a87b:	5b                   	pop    ebx
c000a87c:	e9 05 fd ff ff       	jmp    c000a586 <VgaText::load()>

c000a881 <doTerminalCycle()>:
c000a881:	83 ec 18             	sub    esp,0x18
c000a884:	a1 00 65 02 c0       	mov    eax,ds:0xc0026500
c000a889:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000a88c:	50                   	push   eax
c000a88d:	a3 00 65 02 c0       	mov    ds:0xc0026500,eax
c000a892:	e8 88 ff ff ff       	call   c000a81f <setActiveTerminal(VgaText*)>
c000a897:	83 c4 1c             	add    esp,0x1c
c000a89a:	c3                   	ret    
c000a89b:	90                   	nop

c000a89c <VgaText::setCursorX(int)>:
c000a89c:	83 ec 10             	sub    esp,0x10
c000a89f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a8a3:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a8a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8aa:	50                   	push   eax
c000a8ab:	e8 58 ff ff ff       	call   c000a808 <VgaText::setCursor(int, int)>
c000a8b0:	83 c4 1c             	add    esp,0x1c
c000a8b3:	c3                   	ret    

c000a8b4 <VgaText::setCursorY(int)>:
c000a8b4:	83 ec 10             	sub    esp,0x10
c000a8b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a8bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a8bf:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a8c2:	50                   	push   eax
c000a8c3:	e8 40 ff ff ff       	call   c000a808 <VgaText::setCursor(int, int)>
c000a8c8:	83 c4 1c             	add    esp,0x1c
c000a8cb:	c3                   	ret    

c000a8cc <VgaText::incrementCursor(bool)>:
c000a8cc:	56                   	push   esi
c000a8cd:	53                   	push   ebx
c000a8ce:	51                   	push   ecx
c000a8cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a8d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a8d7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a8da:	40                   	inc    eax
c000a8db:	83 f8 50             	cmp    eax,0x50
c000a8de:	74 05                	je     c000a8e5 <VgaText::incrementCursor(bool)+0x19>
c000a8e0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000a8e3:	eb 24                	jmp    c000a909 <VgaText::incrementCursor(bool)+0x3d>
c000a8e5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a8e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a8ef:	8d 50 01             	lea    edx,[eax+0x1]
c000a8f2:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a8f5:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a8f8:	75 0f                	jne    c000a909 <VgaText::incrementCursor(bool)+0x3d>
c000a8fa:	83 ec 0c             	sub    esp,0xc
c000a8fd:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a900:	53                   	push   ebx
c000a901:	e8 f0 fd ff ff       	call   c000a6f6 <VgaText::scrollScreen()>
c000a906:	83 c4 10             	add    esp,0x10
c000a909:	89 f0                	mov    eax,esi
c000a90b:	84 c0                	test   al,al
c000a90d:	74 0c                	je     c000a91b <VgaText::incrementCursor(bool)+0x4f>
c000a90f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a913:	5a                   	pop    edx
c000a914:	5b                   	pop    ebx
c000a915:	5e                   	pop    esi
c000a916:	e9 b9 fc ff ff       	jmp    c000a5d4 <VgaText::updateCursor()>
c000a91b:	58                   	pop    eax
c000a91c:	5b                   	pop    ebx
c000a91d:	5e                   	pop    esi
c000a91e:	c3                   	ret    
c000a91f:	90                   	nop

c000a920 <VgaText::decrementCursor(bool)>:
c000a920:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a924:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a928:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000a92b:	85 c0                	test   eax,eax
c000a92d:	74 04                	je     c000a933 <VgaText::decrementCursor(bool)+0x13>
c000a92f:	48                   	dec    eax
c000a930:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000a933:	84 c9                	test   cl,cl
c000a935:	74 09                	je     c000a940 <VgaText::decrementCursor(bool)+0x20>
c000a937:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a93b:	e9 94 fc ff ff       	jmp    c000a5d4 <VgaText::updateCursor()>
c000a940:	c3                   	ret    
c000a941:	90                   	nop

c000a942 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000a942:	53                   	push   ebx
c000a943:	83 ec 08             	sub    esp,0x8
c000a946:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a94a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a94e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a952:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a956:	3c 07                	cmp    al,0x7
c000a958:	75 2a                	jne    c000a984 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000a95a:	a1 b8 65 02 c0       	mov    eax,ds:0xc00265b8
c000a95f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a967:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000a96f:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000a977:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a97b:	83 c4 08             	add    esp,0x8
c000a97e:	5b                   	pop    ebx
c000a97f:	e9 5a 2f 00 00       	jmp    c000d8de <Buzzer::beep(int, int, bool)>
c000a984:	3c 0d                	cmp    al,0xd
c000a986:	75 09                	jne    c000a991 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000a988:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a98f:	eb 2c                	jmp    c000a9bd <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000a991:	3c 0a                	cmp    al,0xa
c000a993:	75 31                	jne    c000a9c6 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000a995:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a998:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a99f:	8d 50 01             	lea    edx,[eax+0x1]
c000a9a2:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a9a5:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a9a8:	75 0f                	jne    c000a9b9 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000a9aa:	83 ec 0c             	sub    esp,0xc
c000a9ad:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a9b0:	53                   	push   ebx
c000a9b1:	e8 40 fd ff ff       	call   c000a6f6 <VgaText::scrollScreen()>
c000a9b6:	83 c4 10             	add    esp,0x10
c000a9b9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a9bd:	83 c4 08             	add    esp,0x8
c000a9c0:	5b                   	pop    ebx
c000a9c1:	e9 0e fc ff ff       	jmp    c000a5d4 <VgaText::updateCursor()>
c000a9c6:	3c 08                	cmp    al,0x8
c000a9c8:	75 25                	jne    c000a9ef <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000a9ca:	50                   	push   eax
c000a9cb:	50                   	push   eax
c000a9cc:	6a 01                	push   0x1
c000a9ce:	53                   	push   ebx
c000a9cf:	e8 4c ff ff ff       	call   c000a920 <VgaText::decrementCursor(bool)>
c000a9d4:	5a                   	pop    edx
c000a9d5:	59                   	pop    ecx
c000a9d6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a9d9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a9dc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a9df:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a9e2:	6a 20                	push   0x20
c000a9e4:	53                   	push   ebx
c000a9e5:	e8 b2 fd ff ff       	call   c000a79c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a9ea:	83 c4 28             	add    esp,0x28
c000a9ed:	5b                   	pop    ebx
c000a9ee:	c3                   	ret    
c000a9ef:	83 ec 08             	sub    esp,0x8
c000a9f2:	0f be c0             	movsx  eax,al
c000a9f5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a9f8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a9fb:	51                   	push   ecx
c000a9fc:	52                   	push   edx
c000a9fd:	50                   	push   eax
c000a9fe:	53                   	push   ebx
c000a9ff:	e8 98 fd ff ff       	call   c000a79c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aa04:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000aa08:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000aa10:	83 c4 28             	add    esp,0x28
c000aa13:	5b                   	pop    ebx
c000aa14:	e9 b3 fe ff ff       	jmp    c000a8cc <VgaText::incrementCursor(bool)>
c000aa19:	90                   	nop

c000aa1a <VgaText::doUpdate()>:
c000aa1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa1e:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000aa21:	85 c0                	test   eax,eax
c000aa23:	74 02                	je     c000aa27 <VgaText::doUpdate()+0xd>
c000aa25:	ff e0                	jmp    eax
c000aa27:	c3                   	ret    

c000aa28 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000aa28:	55                   	push   ebp
c000aa29:	31 ed                	xor    ebp,ebp
c000aa2b:	57                   	push   edi
c000aa2c:	56                   	push   esi
c000aa2d:	53                   	push   ebx
c000aa2e:	83 ec 1c             	sub    esp,0x1c
c000aa31:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aa35:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000aa3a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000aa41:	50                   	push   eax
c000aa42:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000aa47:	50                   	push   eax
c000aa48:	e8 97 fc ff ff       	call   c000a6e4 <VgaText::combineColours(unsigned char, unsigned char)>
c000aa4d:	59                   	pop    ecx
c000aa4e:	0f b6 c0             	movzx  eax,al
c000aa51:	5e                   	pop    esi
c000aa52:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa57:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000aa5b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aa5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa62:	0f b7 f6             	movzx  esi,si
c000aa65:	01 f6                	add    esi,esi
c000aa67:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa6a:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000aa6d:	84 c0                	test   al,al
c000aa6f:	0f 84 fd 00 00 00    	je     c000ab72 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000aa75:	3c 0d                	cmp    al,0xd
c000aa77:	75 0c                	jne    c000aa85 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000aa79:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aa80:	e9 e7 00 00 00       	jmp    c000ab6c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aa85:	3c 0a                	cmp    al,0xa
c000aa87:	75 47                	jne    c000aad0 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000aa89:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000aa8c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aa93:	8d 48 01             	lea    ecx,[eax+0x1]
c000aa96:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000aa99:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000aa9c:	75 0f                	jne    c000aaad <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000aa9e:	83 ec 0c             	sub    esp,0xc
c000aaa1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000aaa4:	53                   	push   ebx
c000aaa5:	e8 4c fc ff ff       	call   c000a6f6 <VgaText::scrollScreen()>
c000aaaa:	83 c4 10             	add    esp,0x10
c000aaad:	83 ec 0c             	sub    esp,0xc
c000aab0:	31 ed                	xor    ebp,ebp
c000aab2:	53                   	push   ebx
c000aab3:	e8 1c fb ff ff       	call   c000a5d4 <VgaText::updateCursor()>
c000aab8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aabd:	83 c4 10             	add    esp,0x10
c000aac0:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aac3:	0f b7 f6             	movzx  esi,si
c000aac6:	01 f6                	add    esi,esi
c000aac8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aacb:	e9 9c 00 00 00       	jmp    c000ab6c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aad0:	3c 08                	cmp    al,0x8
c000aad2:	75 35                	jne    c000ab09 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000aad4:	56                   	push   esi
c000aad5:	56                   	push   esi
c000aad6:	6a 01                	push   0x1
c000aad8:	53                   	push   ebx
c000aad9:	e8 42 fe ff ff       	call   c000a920 <VgaText::decrementCursor(bool)>
c000aade:	58                   	pop    eax
c000aadf:	5a                   	pop    edx
c000aae0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aae3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aae6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aae9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aaec:	6a 20                	push   0x20
c000aaee:	53                   	push   ebx
c000aaef:	e8 a8 fc ff ff       	call   c000a79c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aaf4:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aaf9:	83 c4 20             	add    esp,0x20
c000aafc:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aaff:	0f b7 f6             	movzx  esi,si
c000ab02:	01 f6                	add    esi,esi
c000ab04:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ab07:	eb 63                	jmp    c000ab6c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ab09:	51                   	push   ecx
c000ab0a:	51                   	push   ecx
c000ab0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab0f:	50                   	push   eax
c000ab10:	e8 75 fc ff ff       	call   c000a78a <VgaText::combineCharAndColour(char, unsigned char)>
c000ab15:	83 c4 10             	add    esp,0x10
c000ab18:	66 89 06             	mov    WORD PTR [esi],ax
c000ab1b:	39 1d 04 65 02 c0    	cmp    DWORD PTR ds:0xc0026504,ebx
c000ab21:	75 21                	jne    c000ab44 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ab23:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000ab26:	85 c0                	test   eax,eax
c000ab28:	74 1a                	je     c000ab44 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ab2a:	52                   	push   edx
c000ab2b:	52                   	push   edx
c000ab2c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ab2f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ab32:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab36:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3a:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000ab3d:	51                   	push   ecx
c000ab3e:	53                   	push   ebx
c000ab3f:	ff d0                	call   eax
c000ab41:	83 c4 20             	add    esp,0x20
c000ab44:	83 c6 02             	add    esi,0x2
c000ab47:	50                   	push   eax
c000ab48:	50                   	push   eax
c000ab49:	6a 00                	push   0x0
c000ab4b:	53                   	push   ebx
c000ab4c:	e8 7b fd ff ff       	call   c000a8cc <VgaText::incrementCursor(bool)>
c000ab51:	83 c4 10             	add    esp,0x10
c000ab54:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000ab58:	75 0d                	jne    c000ab67 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000ab5a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ab5f:	0f b7 f6             	movzx  esi,si
c000ab62:	01 f6                	add    esi,esi
c000ab64:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ab67:	bd 01 00 00 00       	mov    ebp,0x1
c000ab6c:	47                   	inc    edi
c000ab6d:	e9 f8 fe ff ff       	jmp    c000aa6a <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000ab72:	83 ec 0c             	sub    esp,0xc
c000ab75:	53                   	push   ebx
c000ab76:	e8 59 fa ff ff       	call   c000a5d4 <VgaText::updateCursor()>
c000ab7b:	83 c4 10             	add    esp,0x10
c000ab7e:	89 e8                	mov    eax,ebp
c000ab80:	84 c0                	test   al,al
c000ab82:	74 0c                	je     c000ab90 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000ab84:	83 ec 0c             	sub    esp,0xc
c000ab87:	53                   	push   ebx
c000ab88:	e8 8d fe ff ff       	call   c000aa1a <VgaText::doUpdate()>
c000ab8d:	83 c4 10             	add    esp,0x10
c000ab90:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ab97:	83 c4 1c             	add    esp,0x1c
c000ab9a:	5b                   	pop    ebx
c000ab9b:	5e                   	pop    esi
c000ab9c:	5f                   	pop    edi
c000ab9d:	5d                   	pop    ebp
c000ab9e:	c3                   	ret    
c000ab9f:	90                   	nop

c000aba0 <VgaText::clearScreen()>:
c000aba0:	57                   	push   edi
c000aba1:	56                   	push   esi
c000aba2:	31 f6                	xor    esi,esi
c000aba4:	53                   	push   ebx
c000aba5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aba9:	52                   	push   edx
c000abaa:	6a 00                	push   0x0
c000abac:	6a 00                	push   0x0
c000abae:	53                   	push   ebx
c000abaf:	e8 54 fc ff ff       	call   c000a808 <VgaText::setCursor(int, int)>
c000abb4:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000abbb:	83 c4 10             	add    esp,0x10
c000abbe:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000abc1:	7e 20                	jle    c000abe3 <VgaText::clearScreen()+0x43>
c000abc3:	31 ff                	xor    edi,edi
c000abc5:	50                   	push   eax
c000abc6:	50                   	push   eax
c000abc7:	56                   	push   esi
c000abc8:	57                   	push   edi
c000abc9:	47                   	inc    edi
c000abca:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000abcd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000abd0:	6a 20                	push   0x20
c000abd2:	53                   	push   ebx
c000abd3:	e8 c4 fb ff ff       	call   c000a79c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000abd8:	83 c4 20             	add    esp,0x20
c000abdb:	83 ff 50             	cmp    edi,0x50
c000abde:	75 e5                	jne    c000abc5 <VgaText::clearScreen()+0x25>
c000abe0:	46                   	inc    esi
c000abe1:	eb db                	jmp    c000abbe <VgaText::clearScreen()+0x1e>
c000abe3:	83 ec 0c             	sub    esp,0xc
c000abe6:	53                   	push   ebx
c000abe7:	e8 2e fe ff ff       	call   c000aa1a <VgaText::doUpdate()>
c000abec:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000abf3:	83 c4 10             	add    esp,0x10
c000abf6:	5b                   	pop    ebx
c000abf7:	5e                   	pop    esi
c000abf8:	5f                   	pop    edi
c000abf9:	c3                   	ret    

c000abfa <VgaText::putchar(char)>:
c000abfa:	56                   	push   esi
c000abfb:	53                   	push   ebx
c000abfc:	83 ec 14             	sub    esp,0x14
c000abff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac03:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ac07:	3c 5b                	cmp    al,0x5b
c000ac09:	75 18                	jne    c000ac23 <VgaText::putchar(char)+0x29>
c000ac0b:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000ac0f:	74 1f                	je     c000ac30 <VgaText::putchar(char)+0x36>
c000ac11:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000ac17:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000ac1e:	e9 bd 00 00 00       	jmp    c000ace0 <VgaText::putchar(char)+0xe6>
c000ac23:	3c 1b                	cmp    al,0x1b
c000ac25:	75 09                	jne    c000ac30 <VgaText::putchar(char)+0x36>
c000ac27:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000ac2b:	e9 b0 00 00 00       	jmp    c000ace0 <VgaText::putchar(char)+0xe6>
c000ac30:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000ac33:	84 c9                	test   cl,cl
c000ac35:	0f 84 92 00 00 00    	je     c000accd <VgaText::putchar(char)+0xd3>
c000ac3b:	8d 50 c0             	lea    edx,[eax-0x40]
c000ac3e:	80 fa 3e             	cmp    dl,0x3e
c000ac41:	77 76                	ja     c000acb9 <VgaText::putchar(char)+0xbf>
c000ac43:	3c 6d                	cmp    al,0x6d
c000ac45:	75 47                	jne    c000ac8e <VgaText::putchar(char)+0x94>
c000ac47:	31 f6                	xor    esi,esi
c000ac49:	31 d2                	xor    edx,edx
c000ac4b:	31 c0                	xor    eax,eax
c000ac4d:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000ac50:	7e 2d                	jle    c000ac7f <VgaText::putchar(char)+0x85>
c000ac52:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000ac57:	80 fa 3b             	cmp    dl,0x3b
c000ac5a:	75 17                	jne    c000ac73 <VgaText::putchar(char)+0x79>
c000ac5c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000ac60:	50                   	push   eax
c000ac61:	53                   	push   ebx
c000ac62:	e8 83 f9 ff ff       	call   c000a5ea <VgaText::doANSI_SGR(int)>
c000ac67:	59                   	pop    ecx
c000ac68:	31 d2                	xor    edx,edx
c000ac6a:	58                   	pop    eax
c000ac6b:	31 c0                	xor    eax,eax
c000ac6d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000ac71:	eb 09                	jmp    c000ac7c <VgaText::putchar(char)+0x82>
c000ac73:	6b c0 0a             	imul   eax,eax,0xa
c000ac76:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000ac7a:	88 ca                	mov    dl,cl
c000ac7c:	46                   	inc    esi
c000ac7d:	eb ce                	jmp    c000ac4d <VgaText::putchar(char)+0x53>
c000ac7f:	84 d2                	test   dl,dl
c000ac81:	74 2e                	je     c000acb1 <VgaText::putchar(char)+0xb7>
c000ac83:	50                   	push   eax
c000ac84:	53                   	push   ebx
c000ac85:	e8 60 f9 ff ff       	call   c000a5ea <VgaText::doANSI_SGR(int)>
c000ac8a:	58                   	pop    eax
c000ac8b:	5a                   	pop    edx
c000ac8c:	eb 23                	jmp    c000acb1 <VgaText::putchar(char)+0xb7>
c000ac8e:	3c 4a                	cmp    al,0x4a
c000ac90:	75 1f                	jne    c000acb1 <VgaText::putchar(char)+0xb7>
c000ac92:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000ac96:	75 19                	jne    c000acb1 <VgaText::putchar(char)+0xb7>
c000ac98:	83 ec 0c             	sub    esp,0xc
c000ac9b:	53                   	push   ebx
c000ac9c:	e8 ff fe ff ff       	call   c000aba0 <VgaText::clearScreen()>
c000aca1:	83 c4 0c             	add    esp,0xc
c000aca4:	6a 00                	push   0x0
c000aca6:	6a 00                	push   0x0
c000aca8:	53                   	push   ebx
c000aca9:	e8 5a fb ff ff       	call   c000a808 <VgaText::setCursor(int, int)>
c000acae:	83 c4 10             	add    esp,0x10
c000acb1:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000acb7:	eb 27                	jmp    c000ace0 <VgaText::putchar(char)+0xe6>
c000acb9:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000acbc:	83 fa 0e             	cmp    edx,0xe
c000acbf:	7f 1f                	jg     c000ace0 <VgaText::putchar(char)+0xe6>
c000acc1:	8d 4a 01             	lea    ecx,[edx+0x1]
c000acc4:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000acc7:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000accb:	eb 13                	jmp    c000ace0 <VgaText::putchar(char)+0xe6>
c000accd:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000acd0:	0f be c0             	movsx  eax,al
c000acd3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000acd6:	50                   	push   eax
c000acd7:	53                   	push   ebx
c000acd8:	e8 65 fc ff ff       	call   c000a942 <VgaText::putchar(char, VgaColour, VgaColour)>
c000acdd:	83 c4 10             	add    esp,0x10
c000ace0:	83 c4 14             	add    esp,0x14
c000ace3:	5b                   	pop    ebx
c000ace4:	5e                   	pop    esi
c000ace5:	c3                   	ret    

c000ace6 <VgaText::putx(unsigned int)>:
c000ace6:	57                   	push   edi
c000ace7:	b9 11 00 00 00       	mov    ecx,0x11
c000acec:	56                   	push   esi
c000aced:	be 9a 2a 02 c0       	mov    esi,0xc0022a9a
c000acf2:	53                   	push   ebx
c000acf3:	83 ec 20             	sub    esp,0x20
c000acf6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000acfa:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000acfe:	fc                   	cld    
c000acff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ad01:	be 08 00 00 00       	mov    esi,0x8
c000ad06:	50                   	push   eax
c000ad07:	50                   	push   eax
c000ad08:	89 d8                	mov    eax,ebx
c000ad0a:	c1 e3 04             	shl    ebx,0x4
c000ad0d:	c1 e8 1c             	shr    eax,0x1c
c000ad10:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000ad15:	50                   	push   eax
c000ad16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad1a:	e8 db fe ff ff       	call   c000abfa <VgaText::putchar(char)>
c000ad1f:	83 c4 10             	add    esp,0x10
c000ad22:	4e                   	dec    esi
c000ad23:	75 e1                	jne    c000ad06 <VgaText::putx(unsigned int)+0x20>
c000ad25:	83 c4 20             	add    esp,0x20
c000ad28:	5b                   	pop    ebx
c000ad29:	5e                   	pop    esi
c000ad2a:	5f                   	pop    edi
c000ad2b:	c3                   	ret    

c000ad2c <VgaText::puts(char const*)>:
c000ad2c:	53                   	push   ebx
c000ad2d:	83 ec 08             	sub    esp,0x8
c000ad30:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ad34:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ad37:	84 c0                	test   al,al
c000ad39:	74 12                	je     c000ad4d <VgaText::puts(char const*)+0x21>
c000ad3b:	43                   	inc    ebx
c000ad3c:	51                   	push   ecx
c000ad3d:	51                   	push   ecx
c000ad3e:	50                   	push   eax
c000ad3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad43:	e8 b2 fe ff ff       	call   c000abfa <VgaText::putchar(char)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	eb e7                	jmp    c000ad34 <VgaText::puts(char const*)+0x8>
c000ad4d:	83 c4 08             	add    esp,0x8
c000ad50:	5b                   	pop    ebx
c000ad51:	c3                   	ret    

c000ad52 <VgaText::VgaText(char const*)>:
c000ad52:	57                   	push   edi
c000ad53:	56                   	push   esi
c000ad54:	53                   	push   ebx
c000ad55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad59:	83 ec 08             	sub    esp,0x8
c000ad5c:	6a 00                	push   0x0
c000ad5e:	50                   	push   eax
c000ad5f:	e8 4a 05 00 00       	call   c000b2ae <UnixFile::UnixFile(int)>
c000ad64:	83 c4 10             	add    esp,0x10
c000ad67:	ba 00 2b 02 c0       	mov    edx,0xc0022b00
c000ad6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad70:	89 10                	mov    DWORD PTR [eax],edx
c000ad72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad76:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000ad7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad81:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000ad88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad8c:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000ad90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad94:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000ad98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad9c:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000ada3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000adae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adb2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000adb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adbd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000adc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc8:	8d 50 60             	lea    edx,[eax+0x60]
c000adcb:	bb e0 64 02 c0       	mov    ebx,0xc00264e0
c000add0:	b8 08 00 00 00       	mov    eax,0x8
c000add5:	fc                   	cld    
c000add6:	89 d7                	mov    edi,edx
c000add8:	89 de                	mov    esi,ebx
c000adda:	89 c1                	mov    ecx,eax
c000addc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000adde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade2:	05 82 00 00 00       	add    eax,0x82
c000ade7:	83 ec 08             	sub    esp,0x8
c000adea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adee:	50                   	push   eax
c000adef:	e8 4c 59 ff ff       	call   c0000740 <strcpy>
c000adf4:	83 c4 10             	add    esp,0x10
c000adf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adfb:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000ae02:	83 ec 0c             	sub    esp,0xc
c000ae05:	6a 01                	push   0x1
c000ae07:	e8 e5 08 00 00       	call   c000b6f1 <Virt::allocateKernelVirtualPages(int)>
c000ae0c:	83 c4 10             	add    esp,0x10
c000ae0f:	89 c2                	mov    edx,eax
c000ae11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae15:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ae18:	8b 1d b0 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265b0
c000ae1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae22:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae25:	89 c6                	mov    esi,eax
c000ae27:	e8 be ef ff ff       	call   c0009dea <Phys::allocatePage()>
c000ae2c:	68 05 0c 00 00       	push   0xc05
c000ae31:	56                   	push   esi
c000ae32:	50                   	push   eax
c000ae33:	53                   	push   ebx
c000ae34:	e8 5f 0f 00 00       	call   c000bd98 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ae39:	83 c4 10             	add    esp,0x10
c000ae3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae40:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae43:	83 ec 04             	sub    esp,0x4
c000ae46:	68 00 0f 00 00       	push   0xf00
c000ae4b:	6a 00                	push   0x0
c000ae4d:	50                   	push   eax
c000ae4e:	e8 31 58 ff ff       	call   c0000684 <memset>
c000ae53:	83 c4 10             	add    esp,0x10
c000ae56:	83 ec 04             	sub    esp,0x4
c000ae59:	6a 00                	push   0x0
c000ae5b:	6a 07                	push   0x7
c000ae5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae61:	e8 18 f8 ff ff       	call   c000a67e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000ae66:	83 c4 10             	add    esp,0x10
c000ae69:	83 ec 04             	sub    esp,0x4
c000ae6c:	6a 00                	push   0x0
c000ae6e:	6a 00                	push   0x0
c000ae70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae74:	e8 8f f9 ff ff       	call   c000a808 <VgaText::setCursor(int, int)>
c000ae79:	83 c4 10             	add    esp,0x10
c000ae7c:	83 ec 0c             	sub    esp,0xc
c000ae7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae83:	e8 18 fd ff ff       	call   c000aba0 <VgaText::clearScreen()>
c000ae88:	83 c4 10             	add    esp,0x10
c000ae8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae8f:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000ae93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae97:	05 02 01 00 00       	add    eax,0x102
c000ae9c:	83 ec 04             	sub    esp,0x4
c000ae9f:	68 96 00 00 00       	push   0x96
c000aea4:	6a 00                	push   0x0
c000aea6:	50                   	push   eax
c000aea7:	e8 d8 57 ff ff       	call   c0000684 <memset>
c000aeac:	83 c4 10             	add    esp,0x10
c000aeaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb3:	05 98 01 00 00       	add    eax,0x198
c000aeb8:	83 ec 04             	sub    esp,0x4
c000aebb:	68 2c 01 00 00       	push   0x12c
c000aec0:	6a 00                	push   0x0
c000aec2:	50                   	push   eax
c000aec3:	e8 bc 57 ff ff       	call   c0000684 <memset>
c000aec8:	83 c4 10             	add    esp,0x10
c000aecb:	90                   	nop
c000aecc:	5b                   	pop    ebx
c000aecd:	5e                   	pop    esi
c000aece:	5f                   	pop    edi
c000aecf:	c3                   	ret    

c000aed0 <VgaText::receiveKey(unsigned char)>:
c000aed0:	55                   	push   ebp
c000aed1:	57                   	push   edi
c000aed2:	56                   	push   esi
c000aed3:	53                   	push   ebx
c000aed4:	83 ec 1c             	sub    esp,0x1c
c000aed7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000aedb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000aedf:	84 db                	test   bl,bl
c000aee1:	0f 84 c9 00 00 00    	je     c000afb0 <VgaText::receiveKey(unsigned char)+0xe0>
c000aee7:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000aeed:	80 fb 08             	cmp    bl,0x8
c000aef0:	75 2c                	jne    c000af1e <VgaText::receiveKey(unsigned char)+0x4e>
c000aef2:	83 ec 0c             	sub    esp,0xc
c000aef5:	57                   	push   edi
c000aef6:	e8 a5 57 ff ff       	call   c00006a0 <strlen>
c000aefb:	83 c4 10             	add    esp,0x10
c000aefe:	85 c0                	test   eax,eax
c000af00:	74 41                	je     c000af43 <VgaText::receiveKey(unsigned char)+0x73>
c000af02:	50                   	push   eax
c000af03:	50                   	push   eax
c000af04:	6a 08                	push   0x8
c000af06:	56                   	push   esi
c000af07:	e8 ee fc ff ff       	call   c000abfa <VgaText::putchar(char)>
c000af0c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000af0f:	e8 8c 57 ff ff       	call   c00006a0 <strlen>
c000af14:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000af1c:	eb 22                	jmp    c000af40 <VgaText::receiveKey(unsigned char)+0x70>
c000af1e:	0f be c3             	movsx  eax,bl
c000af21:	52                   	push   edx
c000af22:	52                   	push   edx
c000af23:	50                   	push   eax
c000af24:	56                   	push   esi
c000af25:	e8 d0 fc ff ff       	call   c000abfa <VgaText::putchar(char)>
c000af2a:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000af2e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000af33:	59                   	pop    ecx
c000af34:	5d                   	pop    ebp
c000af35:	8d 44 24 16          	lea    eax,[esp+0x16]
c000af39:	50                   	push   eax
c000af3a:	57                   	push   edi
c000af3b:	e8 40 59 ff ff       	call   c0000880 <strcat>
c000af40:	83 c4 10             	add    esp,0x10
c000af43:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000af4a:	75 05                	jne    c000af51 <VgaText::receiveKey(unsigned char)+0x81>
c000af4c:	80 fb 0a             	cmp    bl,0xa
c000af4f:	75 53                	jne    c000afa4 <VgaText::receiveKey(unsigned char)+0xd4>
c000af51:	83 ec 0c             	sub    esp,0xc
c000af54:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000af5a:	53                   	push   ebx
c000af5b:	e8 40 57 ff ff       	call   c00006a0 <strlen>
c000af60:	89 3c 24             	mov    DWORD PTR [esp],edi
c000af63:	89 c5                	mov    ebp,eax
c000af65:	e8 36 57 ff ff       	call   c00006a0 <strlen>
c000af6a:	83 c4 10             	add    esp,0x10
c000af6d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000af71:	3d 2c 01 00 00       	cmp    eax,0x12c
c000af76:	76 10                	jbe    c000af88 <VgaText::receiveKey(unsigned char)+0xb8>
c000af78:	83 ec 0c             	sub    esp,0xc
c000af7b:	68 ab 2a 02 c0       	push   0xc0022aab
c000af80:	e8 00 94 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000af85:	83 c4 10             	add    esp,0x10
c000af88:	50                   	push   eax
c000af89:	50                   	push   eax
c000af8a:	57                   	push   edi
c000af8b:	53                   	push   ebx
c000af8c:	e8 ef 58 ff ff       	call   c0000880 <strcat>
c000af91:	83 c4 0c             	add    esp,0xc
c000af94:	68 96 00 00 00       	push   0x96
c000af99:	6a 00                	push   0x0
c000af9b:	57                   	push   edi
c000af9c:	e8 e3 56 ff ff       	call   c0000684 <memset>
c000afa1:	83 c4 10             	add    esp,0x10
c000afa4:	83 ec 0c             	sub    esp,0xc
c000afa7:	56                   	push   esi
c000afa8:	e8 6d fa ff ff       	call   c000aa1a <VgaText::doUpdate()>
c000afad:	83 c4 10             	add    esp,0x10
c000afb0:	83 c4 1c             	add    esp,0x1c
c000afb3:	5b                   	pop    ebx
c000afb4:	5e                   	pop    esi
c000afb5:	5f                   	pop    edi
c000afb6:	5d                   	pop    ebp
c000afb7:	c3                   	ret    

c000afb8 <VgaText::write(unsigned long long, void*, int*)>:
c000afb8:	55                   	push   ebp
c000afb9:	57                   	push   edi
c000afba:	56                   	push   esi
c000afbb:	53                   	push   ebx
c000afbc:	83 ec 0c             	sub    esp,0xc
c000afbf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000afc3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000afc7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000afcb:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000afd2:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000afd5:	39 eb                	cmp    ebx,ebp
c000afd7:	74 13                	je     c000afec <VgaText::write(unsigned long long, void*, int*)+0x34>
c000afd9:	43                   	inc    ebx
c000afda:	50                   	push   eax
c000afdb:	50                   	push   eax
c000afdc:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000afe0:	50                   	push   eax
c000afe1:	56                   	push   esi
c000afe2:	e8 13 fc ff ff       	call   c000abfa <VgaText::putchar(char)>
c000afe7:	83 c4 10             	add    esp,0x10
c000afea:	eb e9                	jmp    c000afd5 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000afec:	83 ec 0c             	sub    esp,0xc
c000afef:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000aff6:	56                   	push   esi
c000aff7:	e8 1e fa ff ff       	call   c000aa1a <VgaText::doUpdate()>
c000affc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b000:	89 38                	mov    DWORD PTR [eax],edi
c000b002:	83 c4 1c             	add    esp,0x1c
c000b005:	31 c0                	xor    eax,eax
c000b007:	5b                   	pop    ebx
c000b008:	5e                   	pop    esi
c000b009:	5f                   	pop    edi
c000b00a:	5d                   	pop    ebp
c000b00b:	c3                   	ret    

c000b00c <newTerminal(char*)>:
c000b00c:	83 ec 28             	sub    esp,0x28
c000b00f:	68 c4 02 00 00       	push   0x2c4
c000b014:	e8 aa e9 ff ff       	call   c00099c3 <malloc>
c000b019:	5a                   	pop    edx
c000b01a:	59                   	pop    ecx
c000b01b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b01f:	50                   	push   eax
c000b020:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b024:	e8 29 fd ff ff       	call   c000ad52 <VgaText::VgaText(char const*)>
c000b029:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b02d:	83 c4 2c             	add    esp,0x2c
c000b030:	c3                   	ret    
c000b031:	66 90                	xchg   ax,ax
c000b033:	90                   	nop

c000b034 <TSS::TSS()>:
c000b034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b038:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b03f:	90                   	nop
c000b040:	c3                   	ret    
c000b041:	90                   	nop
c000b042:	66 90                	xchg   ax,ax

c000b044 <TSS::setESP(unsigned long)>:
c000b044:	55                   	push   ebp
c000b045:	89 e5                	mov    ebp,esp
c000b047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b04a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b04d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b050:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b053:	90                   	nop
c000b054:	5d                   	pop    ebp
c000b055:	c3                   	ret    
c000b056:	66 90                	xchg   ax,ax

c000b058 <TSS::flush()>:
c000b058:	55                   	push   ebp
c000b059:	89 e5                	mov    ebp,esp
c000b05b:	83 ec 10             	sub    esp,0x10
c000b05e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b061:	8b 00                	mov    eax,DWORD PTR [eax]
c000b063:	83 c8 03             	or     eax,0x3
c000b066:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b06a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b06e:	66 89 d0             	mov    ax,dx
c000b071:	0f 00 d8             	ltr    ax
c000b074:	90                   	nop
c000b075:	c9                   	leave  
c000b076:	c3                   	ret    
c000b077:	90                   	nop

c000b078 <TSS::setup(unsigned long, unsigned long)>:
c000b078:	55                   	push   ebp
c000b079:	89 e5                	mov    ebp,esp
c000b07b:	83 ec 18             	sub    esp,0x18
c000b07e:	83 ec 0c             	sub    esp,0xc
c000b081:	6a 68                	push   0x68
c000b083:	e8 3b e9 ff ff       	call   c00099c3 <malloc>
c000b088:	83 c4 10             	add    esp,0x10
c000b08b:	89 c2                	mov    edx,eax
c000b08d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b090:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b093:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b096:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b099:	83 ec 04             	sub    esp,0x4
c000b09c:	6a 68                	push   0x68
c000b09e:	6a 00                	push   0x0
c000b0a0:	50                   	push   eax
c000b0a1:	e8 de 55 ff ff       	call   c0000684 <memset>
c000b0a6:	83 c4 10             	add    esp,0x10
c000b0a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0af:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b0b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0bb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b0c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0c7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b0ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b0cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0d3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b0d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0df:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b0e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0eb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b0f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0f7:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b0fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b100:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b103:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b109:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b10c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b10f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b115:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b118:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b11b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b11e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b121:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b124:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b127:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b12a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b12d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b130:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b133:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b13a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b13d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b140:	0f 20 da             	mov    edx,cr3
c000b143:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b146:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b149:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b14c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b14f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b152:	83 ec 08             	sub    esp,0x8
c000b155:	50                   	push   eax
c000b156:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b159:	50                   	push   eax
c000b15a:	e8 c1 e0 ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000b15f:	83 c4 10             	add    esp,0x10
c000b162:	83 ec 08             	sub    esp,0x8
c000b165:	6a 68                	push   0x68
c000b167:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b16a:	50                   	push   eax
c000b16b:	e8 cc e0 ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c000b170:	83 c4 10             	add    esp,0x10
c000b173:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b177:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b17a:	83 e0 0f             	and    eax,0xf
c000b17d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b180:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b183:	83 c8 40             	or     eax,0x40
c000b186:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b189:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000b18e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b194:	05 78 01 00 00       	add    eax,0x178
c000b199:	83 ec 04             	sub    esp,0x4
c000b19c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b19f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b1a2:	50                   	push   eax
c000b1a3:	e8 c8 e0 ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000b1a8:	83 c4 10             	add    esp,0x10
c000b1ab:	89 c2                	mov    edx,eax
c000b1ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b1b0:	89 10                	mov    DWORD PTR [eax],edx
c000b1b2:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000b1b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b1bd:	05 78 01 00 00       	add    eax,0x178
c000b1c2:	83 ec 0c             	sub    esp,0xc
c000b1c5:	50                   	push   eax
c000b1c6:	e8 cf e0 ff ff       	call   c000929a <GDT::flush()>
c000b1cb:	83 c4 10             	add    esp,0x10
c000b1ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b1d1:	8b 00                	mov    eax,DWORD PTR [eax]
c000b1d3:	c9                   	leave  
c000b1d4:	c3                   	ret    
c000b1d5:	90                   	nop

c000b1d6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b1d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b1de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b1e1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b1e6:	75 08                	jne    c000b1f0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b1e8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b1ee:	eb 38                	jmp    c000b228 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b1f0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b1f5:	75 17                	jne    c000b20e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b1f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b1ff:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b205:	8b 10                	mov    edx,DWORD PTR [eax]
c000b207:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b20b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b20e:	89 c1                	mov    ecx,eax
c000b210:	83 e1 fd             	and    ecx,0xfffffffd
c000b213:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b219:	74 cd                	je     c000b1e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b21b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b220:	83 e0 ef             	and    eax,0xffffffef
c000b223:	83 f8 08             	cmp    eax,0x8
c000b226:	76 c0                	jbe    c000b1e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b228:	31 c0                	xor    eax,eax
c000b22a:	c3                   	ret    
c000b22b:	90                   	nop

c000b22c <ReservedFilename::isAtty()>:
c000b22c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b230:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b233:	31 c0                	xor    eax,eax
c000b235:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b23b:	74 09                	je     c000b246 <ReservedFilename::isAtty()+0x1a>
c000b23d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b243:	0f 94 c0             	sete   al
c000b246:	c3                   	ret    
c000b247:	90                   	nop

c000b248 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b24c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b250:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b253:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b257:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b25c:	75 08                	jne    c000b266 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b25e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b264:	eb 3d                	jmp    c000b2a3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b266:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b26b:	75 17                	jne    c000b284 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b26d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b272:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b275:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b27b:	8b 10                	mov    edx,DWORD PTR [eax]
c000b27d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b281:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b284:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b289:	75 04                	jne    c000b28f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b28b:	89 0a                	mov    DWORD PTR [edx],ecx
c000b28d:	eb 14                	jmp    c000b2a3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b28f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b294:	74 c8                	je     c000b25e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b296:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b29b:	83 e0 ef             	and    eax,0xffffffef
c000b29e:	83 f8 08             	cmp    eax,0x8
c000b2a1:	76 bb                	jbe    c000b25e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b2a3:	31 c0                	xor    eax,eax
c000b2a5:	c3                   	ret    

c000b2a6 <UnixFile::getFileDescriptor()>:
c000b2a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b2ad:	c3                   	ret    

c000b2ae <UnixFile::UnixFile(int)>:
c000b2ae:	53                   	push   ebx
c000b2af:	83 ec 28             	sub    esp,0x28
c000b2b2:	ba c8 2b 02 c0       	mov    edx,0xc0022bc8
c000b2b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2bb:	89 10                	mov    DWORD PTR [eax],edx
c000b2bd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b2c5:	0f 8f 8c 01 00 00    	jg     c000b457 <UnixFile::UnixFile(int)+0x1a9>
c000b2cb:	a1 80 58 02 c0       	mov    eax,ds:0xc0025880
c000b2d0:	8d 50 01             	lea    edx,[eax+0x1]
c000b2d3:	89 15 80 58 02 c0    	mov    DWORD PTR ds:0xc0025880,edx
c000b2d9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b2dd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b2e0:	83 ec 08             	sub    esp,0x8
c000b2e3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b2e7:	68 98 65 02 c0       	push   0xc0026598
c000b2ec:	e8 7b 5f 01 00       	call   c002126c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b2f1:	83 c4 10             	add    esp,0x10
c000b2f4:	a0 94 65 02 c0       	mov    al,ds:0xc0026594
c000b2f9:	83 f0 01             	xor    eax,0x1
c000b2fc:	84 c0                	test   al,al
c000b2fe:	0f 84 54 01 00 00    	je     c000b458 <UnixFile::UnixFile(int)+0x1aa>
c000b304:	c6 05 94 65 02 c0 01 	mov    BYTE PTR ds:0xc0026594,0x1
c000b30b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b313:	83 ec 0c             	sub    esp,0xc
c000b316:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b31a:	e8 a4 e6 ff ff       	call   c00099c3 <malloc>
c000b31f:	83 c4 10             	add    esp,0x10
c000b322:	89 c3                	mov    ebx,eax
c000b324:	83 ec 08             	sub    esp,0x8
c000b327:	68 03 ff ff 0f       	push   0xfffff03
c000b32c:	53                   	push   ebx
c000b32d:	e8 2c 01 00 00       	call   c000b45e <ReservedFilename::ReservedFilename(int)>
c000b332:	83 c4 10             	add    esp,0x10
c000b335:	89 1d 8c 65 02 c0    	mov    DWORD PTR ds:0xc002658c,ebx
c000b33b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b343:	83 ec 0c             	sub    esp,0xc
c000b346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b34a:	e8 74 e6 ff ff       	call   c00099c3 <malloc>
c000b34f:	83 c4 10             	add    esp,0x10
c000b352:	89 c3                	mov    ebx,eax
c000b354:	83 ec 08             	sub    esp,0x8
c000b357:	68 01 ff ff 0f       	push   0xfffff01
c000b35c:	53                   	push   ebx
c000b35d:	e8 fc 00 00 00       	call   c000b45e <ReservedFilename::ReservedFilename(int)>
c000b362:	83 c4 10             	add    esp,0x10
c000b365:	89 1d 90 65 02 c0    	mov    DWORD PTR ds:0xc0026590,ebx
c000b36b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b373:	83 ec 0c             	sub    esp,0xc
c000b376:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b37a:	e8 44 e6 ff ff       	call   c00099c3 <malloc>
c000b37f:	83 c4 10             	add    esp,0x10
c000b382:	89 c3                	mov    ebx,eax
c000b384:	83 ec 08             	sub    esp,0x8
c000b387:	68 00 ff ff 0f       	push   0xfffff00
c000b38c:	53                   	push   ebx
c000b38d:	e8 cc 00 00 00       	call   c000b45e <ReservedFilename::ReservedFilename(int)>
c000b392:	83 c4 10             	add    esp,0x10
c000b395:	89 1d 84 65 02 c0    	mov    DWORD PTR ds:0xc0026584,ebx
c000b39b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b3a3:	83 ec 0c             	sub    esp,0xc
c000b3a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b3aa:	e8 14 e6 ff ff       	call   c00099c3 <malloc>
c000b3af:	83 c4 10             	add    esp,0x10
c000b3b2:	89 c3                	mov    ebx,eax
c000b3b4:	83 ec 08             	sub    esp,0x8
c000b3b7:	68 02 ff ff 0f       	push   0xfffff02
c000b3bc:	53                   	push   ebx
c000b3bd:	e8 9c 00 00 00       	call   c000b45e <ReservedFilename::ReservedFilename(int)>
c000b3c2:	83 c4 10             	add    esp,0x10
c000b3c5:	89 1d 88 65 02 c0    	mov    DWORD PTR ds:0xc0026588,ebx
c000b3cb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b3d3:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b3d8:	7f 7e                	jg     c000b458 <UnixFile::UnixFile(int)+0x1aa>
c000b3da:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b3e2:	83 ec 0c             	sub    esp,0xc
c000b3e5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3e9:	e8 d5 e5 ff ff       	call   c00099c3 <malloc>
c000b3ee:	83 c4 10             	add    esp,0x10
c000b3f1:	89 c3                	mov    ebx,eax
c000b3f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3f7:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b3fc:	83 ec 08             	sub    esp,0x8
c000b3ff:	50                   	push   eax
c000b400:	53                   	push   ebx
c000b401:	e8 58 00 00 00       	call   c000b45e <ReservedFilename::ReservedFilename(int)>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b40d:	89 1c 85 60 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9aa0],ebx
c000b414:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b41c:	83 ec 0c             	sub    esp,0xc
c000b41f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b423:	e8 9b e5 ff ff       	call   c00099c3 <malloc>
c000b428:	83 c4 10             	add    esp,0x10
c000b42b:	89 c3                	mov    ebx,eax
c000b42d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b431:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b436:	83 ec 08             	sub    esp,0x8
c000b439:	50                   	push   eax
c000b43a:	53                   	push   ebx
c000b43b:	e8 1e 00 00 00       	call   c000b45e <ReservedFilename::ReservedFilename(int)>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b447:	89 1c 85 20 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9ae0],ebx
c000b44e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b452:	e9 7c ff ff ff       	jmp    c000b3d3 <UnixFile::UnixFile(int)+0x125>
c000b457:	90                   	nop
c000b458:	83 c4 28             	add    esp,0x28
c000b45b:	5b                   	pop    ebx
c000b45c:	c3                   	ret    
c000b45d:	90                   	nop

c000b45e <ReservedFilename::ReservedFilename(int)>:
c000b45e:	83 ec 0c             	sub    esp,0xc
c000b461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b465:	83 ec 08             	sub    esp,0x8
c000b468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46c:	50                   	push   eax
c000b46d:	e8 3c fe ff ff       	call   c000b2ae <UnixFile::UnixFile(int)>
c000b472:	83 c4 10             	add    esp,0x10
c000b475:	ba e4 2b 02 c0       	mov    edx,0xc0022be4
c000b47a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b47e:	89 10                	mov    DWORD PTR [eax],edx
c000b480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b484:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b488:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b48b:	90                   	nop
c000b48c:	83 c4 0c             	add    esp,0xc
c000b48f:	c3                   	ret    

c000b490 <UnixFile::~UnixFile()>:
c000b490:	83 ec 1c             	sub    esp,0x1c
c000b493:	ba c8 2b 02 c0       	mov    edx,0xc0022bc8
c000b498:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b49c:	89 10                	mov    DWORD PTR [eax],edx
c000b49e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4a5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b4aa:	7f 73                	jg     c000b51f <UnixFile::~UnixFile()+0x8f>
c000b4ac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b4b4:	83 ec 0c             	sub    esp,0xc
c000b4b7:	68 98 65 02 c0       	push   0xc0026598
c000b4bc:	e8 7f 5e 01 00       	call   c0021340 <LinkedList<UnixFile>::getFirstElement()>
c000b4c1:	83 c4 10             	add    esp,0x10
c000b4c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4c8:	83 ec 0c             	sub    esp,0xc
c000b4cb:	68 98 65 02 c0       	push   0xc0026598
c000b4d0:	e8 73 5e 01 00       	call   c0021348 <LinkedList<UnixFile>::removeFirst()>
c000b4d5:	83 c4 10             	add    esp,0x10
c000b4d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4dc:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b4e0:	74 40                	je     c000b522 <UnixFile::~UnixFile()+0x92>
c000b4e2:	83 ec 08             	sub    esp,0x8
c000b4e5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b4e9:	68 98 65 02 c0       	push   0xc0026598
c000b4ee:	e8 79 5d 01 00       	call   c002126c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b4f3:	83 c4 10             	add    esp,0x10
c000b4f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b4fa:	8d 50 01             	lea    edx,[eax+0x1]
c000b4fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b501:	3d 88 13 00 00       	cmp    eax,0x1388
c000b506:	0f 94 c0             	sete   al
c000b509:	84 c0                	test   al,al
c000b50b:	74 a7                	je     c000b4b4 <UnixFile::~UnixFile()+0x24>
c000b50d:	83 ec 0c             	sub    esp,0xc
c000b510:	68 a0 2b 02 c0       	push   0xc0022ba0
c000b515:	e8 6b 8e 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000b51a:	83 c4 10             	add    esp,0x10
c000b51d:	eb 95                	jmp    c000b4b4 <UnixFile::~UnixFile()+0x24>
c000b51f:	90                   	nop
c000b520:	eb 01                	jmp    c000b523 <UnixFile::~UnixFile()+0x93>
c000b522:	90                   	nop
c000b523:	90                   	nop
c000b524:	83 c4 1c             	add    esp,0x1c
c000b527:	c3                   	ret    

c000b528 <UnixFile::~UnixFile()>:
c000b528:	83 ec 0c             	sub    esp,0xc
c000b52b:	83 ec 0c             	sub    esp,0xc
c000b52e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b532:	e8 59 ff ff ff       	call   c000b490 <UnixFile::~UnixFile()>
c000b537:	83 c4 10             	add    esp,0x10
c000b53a:	83 ec 08             	sub    esp,0x8
c000b53d:	6a 0c                	push   0xc
c000b53f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b543:	e8 9a 14 00 00       	call   c000c9e2 <operator delete(void*, unsigned long)>
c000b548:	83 c4 10             	add    esp,0x10
c000b54b:	83 c4 0c             	add    esp,0xc
c000b54e:	c3                   	ret    
c000b54f:	90                   	nop

c000b550 <ReservedFilename::~ReservedFilename()>:
c000b550:	83 ec 0c             	sub    esp,0xc
c000b553:	ba e4 2b 02 c0       	mov    edx,0xc0022be4
c000b558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b55c:	89 10                	mov    DWORD PTR [eax],edx
c000b55e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b562:	83 ec 0c             	sub    esp,0xc
c000b565:	50                   	push   eax
c000b566:	e8 25 ff ff ff       	call   c000b490 <UnixFile::~UnixFile()>
c000b56b:	83 c4 10             	add    esp,0x10
c000b56e:	90                   	nop
c000b56f:	83 c4 0c             	add    esp,0xc
c000b572:	c3                   	ret    
c000b573:	90                   	nop

c000b574 <ReservedFilename::~ReservedFilename()>:
c000b574:	83 ec 0c             	sub    esp,0xc
c000b577:	83 ec 0c             	sub    esp,0xc
c000b57a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b57e:	e8 cd ff ff ff       	call   c000b550 <ReservedFilename::~ReservedFilename()>
c000b583:	83 c4 10             	add    esp,0x10
c000b586:	83 ec 08             	sub    esp,0x8
c000b589:	6a 0c                	push   0xc
c000b58b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b58f:	e8 4e 14 00 00       	call   c000c9e2 <operator delete(void*, unsigned long)>
c000b594:	83 c4 10             	add    esp,0x10
c000b597:	83 c4 0c             	add    esp,0xc
c000b59a:	c3                   	ret    

c000b59b <getFromFileDescriptor(int)>:
c000b59b:	53                   	push   ebx
c000b59c:	83 ec 08             	sub    esp,0x8
c000b59f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b5a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b5a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b5af:	7f 2c                	jg     c000b5dd <getFromFileDescriptor(int)+0x42>
c000b5b1:	83 ec 0c             	sub    esp,0xc
c000b5b4:	68 98 65 02 c0       	push   0xc0026598
c000b5b9:	e8 82 5d 01 00       	call   c0021340 <LinkedList<UnixFile>::getFirstElement()>
c000b5be:	83 c4 10             	add    esp,0x10
c000b5c1:	85 c0                	test   eax,eax
c000b5c3:	75 04                	jne    c000b5c9 <getFromFileDescriptor(int)+0x2e>
c000b5c5:	31 c0                	xor    eax,eax
c000b5c7:	eb 6e                	jmp    c000b637 <getFromFileDescriptor(int)+0x9c>
c000b5c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b5cc:	74 69                	je     c000b637 <getFromFileDescriptor(int)+0x9c>
c000b5ce:	52                   	push   edx
c000b5cf:	52                   	push   edx
c000b5d0:	50                   	push   eax
c000b5d1:	68 98 65 02 c0       	push   0xc0026598
c000b5d6:	e8 0f 5e 01 00       	call   c00213ea <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b5db:	eb e1                	jmp    c000b5be <getFromFileDescriptor(int)+0x23>
c000b5dd:	a1 8c 65 02 c0       	mov    eax,ds:0xc002658c
c000b5e2:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b5e8:	74 4d                	je     c000b637 <getFromFileDescriptor(int)+0x9c>
c000b5ea:	a1 90 65 02 c0       	mov    eax,ds:0xc0026590
c000b5ef:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b5f5:	74 40                	je     c000b637 <getFromFileDescriptor(int)+0x9c>
c000b5f7:	a1 88 65 02 c0       	mov    eax,ds:0xc0026588
c000b5fc:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b602:	74 33                	je     c000b637 <getFromFileDescriptor(int)+0x9c>
c000b604:	a1 84 65 02 c0       	mov    eax,ds:0xc0026584
c000b609:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b60f:	74 26                	je     c000b637 <getFromFileDescriptor(int)+0x9c>
c000b611:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b617:	83 f8 08             	cmp    eax,0x8
c000b61a:	77 09                	ja     c000b625 <getFromFileDescriptor(int)+0x8a>
c000b61c:	8b 04 85 60 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9aa0]
c000b623:	eb 12                	jmp    c000b637 <getFromFileDescriptor(int)+0x9c>
c000b625:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b62b:	83 fb 08             	cmp    ebx,0x8
c000b62e:	77 95                	ja     c000b5c5 <getFromFileDescriptor(int)+0x2a>
c000b630:	8b 04 9d 20 65 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9ae0]
c000b637:	83 c4 08             	add    esp,0x8
c000b63a:	5b                   	pop    ebx
c000b63b:	c3                   	ret    

c000b63c <__static_initialization_and_destruction_0(int, int)>:
c000b63c:	83 ec 0c             	sub    esp,0xc
c000b63f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b644:	75 34                	jne    c000b67a <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b646:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b64e:	75 2a                	jne    c000b67a <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b650:	83 ec 0c             	sub    esp,0xc
c000b653:	68 98 65 02 c0       	push   0xc0026598
c000b658:	e8 cd 5b 01 00       	call   c002122a <LinkedList<UnixFile>::LinkedList()>
c000b65d:	83 c4 10             	add    esp,0x10
c000b660:	83 ec 04             	sub    esp,0x4
c000b663:	68 a8 56 02 c0       	push   0xc00256a8
c000b668:	68 98 65 02 c0       	push   0xc0026598
c000b66d:	68 28 12 02 c0       	push   0xc0021228
c000b672:	e8 e5 12 00 00       	call   c000c95c <__cxa_atexit>
c000b677:	83 c4 10             	add    esp,0x10
c000b67a:	90                   	nop
c000b67b:	83 c4 0c             	add    esp,0xc
c000b67e:	c3                   	ret    

c000b67f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b67f:	83 ec 0c             	sub    esp,0xc
c000b682:	83 ec 08             	sub    esp,0x8
c000b685:	68 ff ff 00 00       	push   0xffff
c000b68a:	6a 01                	push   0x1
c000b68c:	e8 ab ff ff ff       	call   c000b63c <__static_initialization_and_destruction_0(int, int)>
c000b691:	83 c4 10             	add    esp,0x10
c000b694:	83 c4 0c             	add    esp,0xc
c000b697:	c3                   	ret    

c000b698 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b698:	53                   	push   ebx
c000b699:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b69d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b6a1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b6a7:	89 c8                	mov    eax,ecx
c000b6a9:	d1 e8                	shr    eax,1
c000b6ab:	03 05 88 58 02 c0    	add    eax,DWORD PTR ds:0xc0025888
c000b6b1:	83 e1 01             	and    ecx,0x1
c000b6b4:	8a 10                	mov    dl,BYTE PTR [eax]
c000b6b6:	75 09                	jne    c000b6c1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b6b8:	83 e2 f0             	and    edx,0xfffffff0
c000b6bb:	09 da                	or     edx,ebx
c000b6bd:	88 10                	mov    BYTE PTR [eax],dl
c000b6bf:	5b                   	pop    ebx
c000b6c0:	c3                   	ret    
c000b6c1:	c1 e3 04             	shl    ebx,0x4
c000b6c4:	83 e2 0f             	and    edx,0xf
c000b6c7:	09 da                	or     edx,ebx
c000b6c9:	88 10                	mov    BYTE PTR [eax],dl
c000b6cb:	5b                   	pop    ebx
c000b6cc:	c3                   	ret    

c000b6cd <Virt::getPageState(unsigned long)>:
c000b6cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6d1:	8b 0d 88 58 02 c0    	mov    ecx,DWORD PTR ds:0xc0025888
c000b6d7:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b6dd:	89 d0                	mov    eax,edx
c000b6df:	d1 e8                	shr    eax,1
c000b6e1:	83 e2 01             	and    edx,0x1
c000b6e4:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b6e7:	75 04                	jne    c000b6ed <Virt::getPageState(unsigned long)+0x20>
c000b6e9:	83 e0 0f             	and    eax,0xf
c000b6ec:	c3                   	ret    
c000b6ed:	c0 e8 04             	shr    al,0x4
c000b6f0:	c3                   	ret    

c000b6f1 <Virt::allocateKernelVirtualPages(int)>:
c000b6f1:	55                   	push   ebp
c000b6f2:	31 ed                	xor    ebp,ebp
c000b6f4:	57                   	push   edi
c000b6f5:	56                   	push   esi
c000b6f6:	53                   	push   ebx
c000b6f7:	31 db                	xor    ebx,ebx
c000b6f9:	83 ec 1c             	sub    esp,0x1c
c000b6fc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b700:	8b 3d 84 58 02 c0    	mov    edi,DWORD PTR ds:0xc0025884
c000b706:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b70b:	57                   	push   edi
c000b70c:	e8 bc ff ff ff       	call   c000b6cd <Virt::getPageState(unsigned long)>
c000b711:	5a                   	pop    edx
c000b712:	84 c0                	test   al,al
c000b714:	75 3a                	jne    c000b750 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b716:	85 db                	test   ebx,ebx
c000b718:	75 02                	jne    c000b71c <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b71a:	89 fd                	mov    ebp,edi
c000b71c:	43                   	inc    ebx
c000b71d:	39 f3                	cmp    ebx,esi
c000b71f:	74 5a                	je     c000b77b <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b721:	47                   	inc    edi
c000b722:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b728:	76 31                	jbe    c000b75b <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b72a:	c7 05 84 58 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0025884,0xc8000
c000b734:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b739:	75 28                	jne    c000b763 <Virt::allocateKernelVirtualPages(int)+0x72>
c000b73b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b740:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b745:	57                   	push   edi
c000b746:	e8 82 ff ff ff       	call   c000b6cd <Virt::getPageState(unsigned long)>
c000b74b:	5a                   	pop    edx
c000b74c:	84 c0                	test   al,al
c000b74e:	74 c6                	je     c000b716 <Virt::allocateKernelVirtualPages(int)+0x25>
c000b750:	31 db                	xor    ebx,ebx
c000b752:	47                   	inc    edi
c000b753:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b759:	77 cf                	ja     c000b72a <Virt::allocateKernelVirtualPages(int)+0x39>
c000b75b:	89 3d 84 58 02 c0    	mov    DWORD PTR ds:0xc0025884,edi
c000b761:	eb a8                	jmp    c000b70b <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b763:	83 ec 0c             	sub    esp,0xc
c000b766:	68 f8 2b 02 c0       	push   0xc0022bf8
c000b76b:	e8 15 8c 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000b770:	8b 3d 84 58 02 c0    	mov    edi,DWORD PTR ds:0xc0025884
c000b776:	83 c4 10             	add    esp,0x10
c000b779:	eb 90                	jmp    c000b70b <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b77b:	89 2d 84 58 02 c0    	mov    DWORD PTR ds:0xc0025884,ebp
c000b781:	4b                   	dec    ebx
c000b782:	74 5f                	je     c000b7e3 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000b784:	85 f6                	test   esi,esi
c000b786:	74 3d                	je     c000b7c5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b788:	89 e8                	mov    eax,ebp
c000b78a:	31 db                	xor    ebx,ebx
c000b78c:	8d 7e ff             	lea    edi,[esi-0x1]
c000b78f:	eb 14                	jmp    c000b7a5 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000b791:	6a 01                	push   0x1
c000b793:	43                   	inc    ebx
c000b794:	50                   	push   eax
c000b795:	e8 fe fe ff ff       	call   c000b698 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b79a:	58                   	pop    eax
c000b79b:	39 f3                	cmp    ebx,esi
c000b79d:	5a                   	pop    edx
c000b79e:	74 25                	je     c000b7c5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b7a0:	a1 84 58 02 c0       	mov    eax,ds:0xc0025884
c000b7a5:	8d 50 01             	lea    edx,[eax+0x1]
c000b7a8:	85 db                	test   ebx,ebx
c000b7aa:	89 15 84 58 02 c0    	mov    DWORD PTR ds:0xc0025884,edx
c000b7b0:	74 20                	je     c000b7d2 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000b7b2:	39 df                	cmp    edi,ebx
c000b7b4:	75 db                	jne    c000b791 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000b7b6:	6a 03                	push   0x3
c000b7b8:	43                   	inc    ebx
c000b7b9:	50                   	push   eax
c000b7ba:	e8 d9 fe ff ff       	call   c000b698 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7bf:	59                   	pop    ecx
c000b7c0:	39 f3                	cmp    ebx,esi
c000b7c2:	58                   	pop    eax
c000b7c3:	75 db                	jne    c000b7a0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b7c5:	83 c4 1c             	add    esp,0x1c
c000b7c8:	89 e8                	mov    eax,ebp
c000b7ca:	5b                   	pop    ebx
c000b7cb:	c1 e0 0c             	shl    eax,0xc
c000b7ce:	5e                   	pop    esi
c000b7cf:	5f                   	pop    edi
c000b7d0:	5d                   	pop    ebp
c000b7d1:	c3                   	ret    
c000b7d2:	6a 02                	push   0x2
c000b7d4:	bb 01 00 00 00       	mov    ebx,0x1
c000b7d9:	50                   	push   eax
c000b7da:	e8 b9 fe ff ff       	call   c000b698 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7df:	58                   	pop    eax
c000b7e0:	5a                   	pop    edx
c000b7e1:	eb bd                	jmp    c000b7a0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b7e3:	6a 04                	push   0x4
c000b7e5:	8d 45 01             	lea    eax,[ebp+0x1]
c000b7e8:	55                   	push   ebp
c000b7e9:	a3 84 58 02 c0       	mov    ds:0xc0025884,eax
c000b7ee:	e8 a5 fe ff ff       	call   c000b698 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7f3:	59                   	pop    ecx
c000b7f4:	89 e8                	mov    eax,ebp
c000b7f6:	5b                   	pop    ebx
c000b7f7:	c1 e0 0c             	shl    eax,0xc
c000b7fa:	83 c4 1c             	add    esp,0x1c
c000b7fd:	5b                   	pop    ebx
c000b7fe:	5e                   	pop    esi
c000b7ff:	5f                   	pop    edi
c000b800:	5d                   	pop    ebp
c000b801:	c3                   	ret    

c000b802 <Virt::freeSwapfilePage(unsigned long)>:
c000b802:	53                   	push   ebx
c000b803:	8b 15 ac 65 02 c0    	mov    edx,DWORD PTR ds:0xc00265ac
c000b809:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b80d:	b8 01 00 00 00       	mov    eax,0x1
c000b812:	89 cb                	mov    ebx,ecx
c000b814:	d3 e0                	shl    eax,cl
c000b816:	c1 eb 05             	shr    ebx,0x5
c000b819:	f7 d0                	not    eax
c000b81b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000b81e:	5b                   	pop    ebx
c000b81f:	c3                   	ret    

c000b820 <Virt::swapIDToSector(unsigned long)>:
c000b820:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b824:	0f af 05 8c 58 02 c0 	imul   eax,DWORD PTR ds:0xc002588c
c000b82b:	03 05 94 58 02 c0    	add    eax,DWORD PTR ds:0xc0025894
c000b831:	c3                   	ret    

c000b832 <Virt::allocateSwapfilePage()>:
c000b832:	55                   	push   ebp
c000b833:	31 d2                	xor    edx,edx
c000b835:	57                   	push   edi
c000b836:	56                   	push   esi
c000b837:	53                   	push   ebx
c000b838:	83 ec 0c             	sub    esp,0xc
c000b83b:	8b 0d 8c 58 02 c0    	mov    ecx,DWORD PTR ds:0xc002588c
c000b841:	a1 90 58 02 c0       	mov    eax,ds:0xc0025890
c000b846:	f7 f1                	div    ecx
c000b848:	39 0d 90 58 02 c0    	cmp    DWORD PTR ds:0xc0025890,ecx
c000b84e:	72 2d                	jb     c000b87d <Virt::allocateSwapfilePage()+0x4b>
c000b850:	8b 35 ac 65 02 c0    	mov    esi,DWORD PTR ds:0xc00265ac
c000b856:	8b 16                	mov    edx,DWORD PTR [esi]
c000b858:	f6 c2 01             	test   dl,0x1
c000b85b:	74 3c                	je     c000b899 <Virt::allocateSwapfilePage()+0x67>
c000b85d:	31 c9                	xor    ecx,ecx
c000b85f:	bf 01 00 00 00       	mov    edi,0x1
c000b864:	eb 12                	jmp    c000b878 <Virt::allocateSwapfilePage()+0x46>
c000b866:	89 fd                	mov    ebp,edi
c000b868:	89 ca                	mov    edx,ecx
c000b86a:	d3 e5                	shl    ebp,cl
c000b86c:	c1 ea 05             	shr    edx,0x5
c000b86f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000b872:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b874:	85 ea                	test   edx,ebp
c000b876:	74 2a                	je     c000b8a2 <Virt::allocateSwapfilePage()+0x70>
c000b878:	41                   	inc    ecx
c000b879:	39 c8                	cmp    eax,ecx
c000b87b:	77 e9                	ja     c000b866 <Virt::allocateSwapfilePage()+0x34>
c000b87d:	83 ec 0c             	sub    esp,0xc
c000b880:	68 b0 2d 02 c0       	push   0xc0022db0
c000b885:	e8 fb 8a 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000b88a:	83 c4 10             	add    esp,0x10
c000b88d:	31 c9                	xor    ecx,ecx
c000b88f:	83 c4 0c             	add    esp,0xc
c000b892:	89 c8                	mov    eax,ecx
c000b894:	5b                   	pop    ebx
c000b895:	5e                   	pop    esi
c000b896:	5f                   	pop    edi
c000b897:	5d                   	pop    ebp
c000b898:	c3                   	ret    
c000b899:	89 f3                	mov    ebx,esi
c000b89b:	bd 01 00 00 00       	mov    ebp,0x1
c000b8a0:	31 c9                	xor    ecx,ecx
c000b8a2:	09 ea                	or     edx,ebp
c000b8a4:	89 c8                	mov    eax,ecx
c000b8a6:	89 13                	mov    DWORD PTR [ebx],edx
c000b8a8:	83 c4 0c             	add    esp,0xc
c000b8ab:	5b                   	pop    ebx
c000b8ac:	5e                   	pop    esi
c000b8ad:	5f                   	pop    edi
c000b8ae:	5d                   	pop    ebp
c000b8af:	c3                   	ret    

c000b8b0 <Virt::virtualMemorySetup()>:
c000b8b0:	53                   	push   ebx
c000b8b1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b8b6:	6a 0f                	push   0xf
c000b8b8:	53                   	push   ebx
c000b8b9:	43                   	inc    ebx
c000b8ba:	e8 d9 fd ff ff       	call   c000b698 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b8bf:	58                   	pop    eax
c000b8c0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b8c6:	5a                   	pop    edx
c000b8c7:	75 ed                	jne    c000b8b6 <Virt::virtualMemorySetup()+0x6>
c000b8c9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b8ce:	6a 00                	push   0x0
c000b8d0:	53                   	push   ebx
c000b8d1:	43                   	inc    ebx
c000b8d2:	e8 c1 fd ff ff       	call   c000b698 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b8d7:	59                   	pop    ecx
c000b8d8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b8de:	58                   	pop    eax
c000b8df:	75 ed                	jne    c000b8ce <Virt::virtualMemorySetup()+0x1e>
c000b8e1:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000b8e6:	6a 0f                	push   0xf
c000b8e8:	53                   	push   ebx
c000b8e9:	43                   	inc    ebx
c000b8ea:	e8 a9 fd ff ff       	call   c000b698 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b8ef:	58                   	pop    eax
c000b8f0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000b8f6:	5a                   	pop    edx
c000b8f7:	75 ed                	jne    c000b8e6 <Virt::virtualMemorySetup()+0x36>
c000b8f9:	5b                   	pop    ebx
c000b8fa:	c3                   	ret    

c000b8fb <Virt::setupPageSwapping(int)>:
c000b8fb:	53                   	push   ebx
c000b8fc:	83 ec 0c             	sub    esp,0xc
c000b8ff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b903:	a1 48 6a 02 c0       	mov    eax,ds:0xc0026a48
c000b908:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b90e:	8b 10                	mov    edx,DWORD PTR [eax]
c000b910:	53                   	push   ebx
c000b911:	c1 e3 0b             	shl    ebx,0xb
c000b914:	68 c7 2d 02 c0       	push   0xc0022dc7
c000b919:	50                   	push   eax
c000b91a:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000b91d:	89 1d 90 58 02 c0    	mov    DWORD PTR ds:0xc0025890,ebx
c000b923:	c6 05 98 58 02 c0 43 	mov    BYTE PTR ds:0xc0025898,0x43
c000b92a:	c1 eb 08             	shr    ebx,0x8
c000b92d:	a3 94 58 02 c0       	mov    ds:0xc0025894,eax
c000b932:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b935:	c7 05 8c 58 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002588c,0x8
c000b93f:	e8 7f e0 ff ff       	call   c00099c3 <malloc>
c000b944:	83 c4 0c             	add    esp,0xc
c000b947:	89 c1                	mov    ecx,eax
c000b949:	a3 ac 65 02 c0       	mov    ds:0xc00265ac,eax
c000b94e:	31 d2                	xor    edx,edx
c000b950:	a1 90 58 02 c0       	mov    eax,ds:0xc0025890
c000b955:	f7 35 8c 58 02 c0    	div    DWORD PTR ds:0xc002588c
c000b95b:	c1 e8 05             	shr    eax,0x5
c000b95e:	50                   	push   eax
c000b95f:	6a 00                	push   0x0
c000b961:	51                   	push   ecx
c000b962:	e8 1d 4d ff ff       	call   c0000684 <memset>
c000b967:	83 c4 18             	add    esp,0x18
c000b96a:	5b                   	pop    ebx
c000b96b:	c3                   	ret    

c000b96c <VAS::VAS()>:
c000b96c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b970:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b977:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b97b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b982:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b986:	a3 b0 65 02 c0       	mov    ds:0xc00265b0,eax
c000b98b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b98f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000b993:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b997:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000b99a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b99e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000b9a5:	90                   	nop
c000b9a6:	c3                   	ret    
c000b9a7:	90                   	nop

c000b9a8 <VAS::VAS(VAS*)>:
c000b9a8:	83 ec 0c             	sub    esp,0xc
c000b9ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9af:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9ba:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b9c1:	83 ec 0c             	sub    esp,0xc
c000b9c4:	68 18 2c 02 c0       	push   0xc0022c18
c000b9c9:	e8 b7 89 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000b9ce:	83 c4 10             	add    esp,0x10
c000b9d1:	90                   	nop
c000b9d2:	83 c4 0c             	add    esp,0xc
c000b9d5:	c3                   	ret    

c000b9d6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000b9d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9da:	89 c2                	mov    edx,eax
c000b9dc:	c1 e8 0a             	shr    eax,0xa
c000b9df:	c1 ea 16             	shr    edx,0x16
c000b9e2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000b9e7:	19 c9                	sbb    ecx,ecx
c000b9e9:	c1 e2 0c             	shl    edx,0xc
c000b9ec:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000b9f2:	25 fc 0f 00 00       	and    eax,0xffc
c000b9f7:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000b9fe:	01 d0                	add    eax,edx
c000ba00:	c3                   	ret    
c000ba01:	90                   	nop

c000ba02 <VAS::getPageTableEntry(unsigned long)>:
c000ba02:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ba06:	89 ca                	mov    edx,ecx
c000ba08:	c1 e9 0a             	shr    ecx,0xa
c000ba0b:	c1 ea 16             	shr    edx,0x16
c000ba0e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000ba14:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000ba1a:	c1 e0 0c             	shl    eax,0xc
c000ba1d:	8d 04 08             	lea    eax,[eax+ecx*1]
c000ba20:	c3                   	ret    

c000ba21 <Virt::freeKernelVirtualPages(unsigned long)>:
c000ba21:	57                   	push   edi
c000ba22:	56                   	push   esi
c000ba23:	be 01 00 00 00       	mov    esi,0x1
c000ba28:	53                   	push   ebx
c000ba29:	83 ec 10             	sub    esp,0x10
c000ba2c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba30:	c1 eb 0c             	shr    ebx,0xc
c000ba33:	eb 3f                	jmp    c000ba74 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000ba35:	83 ec 08             	sub    esp,0x8
c000ba38:	57                   	push   edi
c000ba39:	ff 35 b0 65 02 c0    	push   DWORD PTR ds:0xc00265b0
c000ba3f:	e8 be ff ff ff       	call   c000ba02 <VAS::getPageTableEntry(unsigned long)>
c000ba44:	83 c4 10             	add    esp,0x10
c000ba47:	8b 00                	mov    eax,DWORD PTR [eax]
c000ba49:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ba4d:	f6 c4 04             	test   ah,0x4
c000ba50:	75 5f                	jne    c000bab1 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000ba52:	80 fa 04             	cmp    dl,0x4
c000ba55:	74 78                	je     c000bacf <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000ba57:	80 fa 02             	cmp    dl,0x2
c000ba5a:	0f 84 88 00 00 00    	je     c000bae8 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000ba60:	80 fa 03             	cmp    dl,0x3
c000ba63:	0f 84 ad 00 00 00    	je     c000bb16 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000ba69:	fe ca                	dec    dl
c000ba6b:	0f 84 92 00 00 00    	je     c000bb03 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000ba71:	43                   	inc    ebx
c000ba72:	31 f6                	xor    esi,esi
c000ba74:	53                   	push   ebx
c000ba75:	89 df                	mov    edi,ebx
c000ba77:	e8 51 fc ff ff       	call   c000b6cd <Virt::getPageState(unsigned long)>
c000ba7c:	c1 e7 0c             	shl    edi,0xc
c000ba7f:	59                   	pop    ecx
c000ba80:	84 c0                	test   al,al
c000ba82:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ba86:	75 ad                	jne    c000ba35 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000ba88:	83 ec 0c             	sub    esp,0xc
c000ba8b:	68 de 2d 02 c0       	push   0xc0022dde
c000ba90:	e8 f0 88 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000ba95:	58                   	pop    eax
c000ba96:	5a                   	pop    edx
c000ba97:	57                   	push   edi
c000ba98:	ff 35 b0 65 02 c0    	push   DWORD PTR ds:0xc00265b0
c000ba9e:	e8 5f ff ff ff       	call   c000ba02 <VAS::getPageTableEntry(unsigned long)>
c000baa3:	83 c4 10             	add    esp,0x10
c000baa6:	8b 00                	mov    eax,DWORD PTR [eax]
c000baa8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000baac:	f6 c4 04             	test   ah,0x4
c000baaf:	74 c0                	je     c000ba71 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bab1:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bab5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000baba:	83 ec 0c             	sub    esp,0xc
c000babd:	50                   	push   eax
c000babe:	e8 97 e2 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c000bac3:	83 c4 10             	add    esp,0x10
c000bac6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000baca:	80 fa 04             	cmp    dl,0x4
c000bacd:	75 88                	jne    c000ba57 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000bacf:	89 f0                	mov    eax,esi
c000bad1:	84 c0                	test   al,al
c000bad3:	75 47                	jne    c000bb1c <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000bad5:	c7 44 24 20 3c 2c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022c3c
c000badd:	83 c4 10             	add    esp,0x10
c000bae0:	5b                   	pop    ebx
c000bae1:	5e                   	pop    esi
c000bae2:	5f                   	pop    edi
c000bae3:	e9 9d 88 00 00       	jmp    c0014385 <Krnl::panic(char const*)>
c000bae8:	89 f0                	mov    eax,esi
c000baea:	84 c0                	test   al,al
c000baec:	75 15                	jne    c000bb03 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000baee:	83 ec 0c             	sub    esp,0xc
c000baf1:	68 fa 2d 02 c0       	push   0xc0022dfa
c000baf6:	e8 8a 88 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000bafb:	83 c4 10             	add    esp,0x10
c000bafe:	e9 6e ff ff ff       	jmp    c000ba71 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bb03:	83 ec 08             	sub    esp,0x8
c000bb06:	6a 00                	push   0x0
c000bb08:	53                   	push   ebx
c000bb09:	e8 8a fb ff ff       	call   c000b698 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb0e:	83 c4 10             	add    esp,0x10
c000bb11:	e9 5b ff ff ff       	jmp    c000ba71 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bb16:	89 f0                	mov    eax,esi
c000bb18:	84 c0                	test   al,al
c000bb1a:	75 15                	jne    c000bb31 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000bb1c:	83 ec 08             	sub    esp,0x8
c000bb1f:	6a 00                	push   0x0
c000bb21:	53                   	push   ebx
c000bb22:	e8 71 fb ff ff       	call   c000b698 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb27:	83 c4 10             	add    esp,0x10
c000bb2a:	83 c4 10             	add    esp,0x10
c000bb2d:	5b                   	pop    ebx
c000bb2e:	5e                   	pop    esi
c000bb2f:	5f                   	pop    edi
c000bb30:	c3                   	ret    
c000bb31:	c7 44 24 20 16 2e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022e16
c000bb39:	83 c4 10             	add    esp,0x10
c000bb3c:	5b                   	pop    ebx
c000bb3d:	5e                   	pop    esi
c000bb3e:	5f                   	pop    edi
c000bb3f:	e9 41 88 00 00       	jmp    c0014385 <Krnl::panic(char const*)>

c000bb44 <VAS::freeAllocatedPages(unsigned long)>:
c000bb44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bb4c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000bb50:	74 09                	je     c000bb5b <VAS::freeAllocatedPages(unsigned long)+0x17>
c000bb52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bb56:	e9 c6 fe ff ff       	jmp    c000ba21 <Virt::freeKernelVirtualPages(unsigned long)>
c000bb5b:	c7 44 24 04 60 2c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022c60
c000bb63:	e9 5b 0f 00 00       	jmp    c000cac3 <Dbg::kprintf(char const*, ...)>

c000bb68 <VAS::virtualToPhysical(unsigned long)>:
c000bb68:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bb6c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bb70:	e8 8d fe ff ff       	call   c000ba02 <VAS::getPageTableEntry(unsigned long)>
c000bb75:	5a                   	pop    edx
c000bb76:	8b 00                	mov    eax,DWORD PTR [eax]
c000bb78:	59                   	pop    ecx
c000bb79:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb7e:	c3                   	ret    
c000bb7f:	90                   	nop

c000bb80 <VAS::reflagRange(unsigned long, int, int, int)>:
c000bb80:	55                   	push   ebp
c000bb81:	57                   	push   edi
c000bb82:	56                   	push   esi
c000bb83:	53                   	push   ebx
c000bb84:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb88:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000bb8c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb90:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bb94:	85 db                	test   ebx,ebx
c000bb96:	7e 22                	jle    c000bbba <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000bb98:	c1 e3 0c             	shl    ebx,0xc
c000bb9b:	01 f3                	add    ebx,esi
c000bb9d:	56                   	push   esi
c000bb9e:	81 c6 00 10 00 00    	add    esi,0x1000
c000bba4:	55                   	push   ebp
c000bba5:	e8 58 fe ff ff       	call   c000ba02 <VAS::getPageTableEntry(unsigned long)>
c000bbaa:	5a                   	pop    edx
c000bbab:	59                   	pop    ecx
c000bbac:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bbae:	21 f9                	and    ecx,edi
c000bbb0:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000bbb4:	39 f3                	cmp    ebx,esi
c000bbb6:	89 08                	mov    DWORD PTR [eax],ecx
c000bbb8:	75 e3                	jne    c000bb9d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000bbba:	5b                   	pop    ebx
c000bbbb:	5e                   	pop    esi
c000bbbc:	5f                   	pop    edi
c000bbbd:	5d                   	pop    ebp
c000bbbe:	c3                   	ret    
c000bbbf:	90                   	nop

c000bbc0 <VAS::setToWriteCombining(unsigned long, int)>:
c000bbc0:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000bbc5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bbcb:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000bbd2:	75 01                	jne    c000bbd5 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000bbd4:	c3                   	ret    
c000bbd5:	68 80 00 00 00       	push   0x80
c000bbda:	6a ff                	push   0xffffffff
c000bbdc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbe0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbe8:	e8 93 ff ff ff       	call   c000bb80 <VAS::reflagRange(unsigned long, int, int, int)>
c000bbed:	83 c4 14             	add    esp,0x14
c000bbf0:	c3                   	ret    
c000bbf1:	90                   	nop

c000bbf2 <VAS::mapOtherVASIn(bool, VAS*)>:
c000bbf2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bbf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bbfb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bbfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc02:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000bc05:	19 c0                	sbb    eax,eax
c000bc07:	83 ca 03             	or     edx,0x3
c000bc0a:	83 e0 fc             	and    eax,0xfffffffc
c000bc0d:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000bc14:	0f 20 d8             	mov    eax,cr3
c000bc17:	0f 22 d8             	mov    cr3,eax
c000bc1a:	c3                   	ret    
c000bc1b:	90                   	nop

c000bc1c <VAS::~VAS()>:
c000bc1c:	83 ec 2c             	sub    esp,0x2c
c000bc1f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bc27:	fa                   	cli    
c000bc28:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000bc2d:	40                   	inc    eax
c000bc2e:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000bc33:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bc38:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc3a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bc3d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bc43:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bc47:	6a 01                	push   0x1
c000bc49:	50                   	push   eax
c000bc4a:	e8 a3 ff ff ff       	call   c000bbf2 <VAS::mapOtherVASIn(bool, VAS*)>
c000bc4f:	83 c4 0c             	add    esp,0xc
c000bc52:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bc5a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bc62:	0f 8f d4 00 00 00    	jg     c000bd3c <VAS::~VAS()+0x120>
c000bc68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc6c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bc73:	c1 e2 02             	shl    edx,0x2
c000bc76:	01 d0                	add    eax,edx
c000bc78:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc82:	83 e0 01             	and    eax,0x1
c000bc85:	0f 84 a8 00 00 00    	je     c000bd33 <VAS::~VAS()+0x117>
c000bc8b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bc93:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bc9b:	7f 72                	jg     c000bd0f <VAS::~VAS()+0xf3>
c000bc9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bca1:	c1 e0 0a             	shl    eax,0xa
c000bca4:	89 c2                	mov    edx,eax
c000bca6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bcaa:	01 d0                	add    eax,edx
c000bcac:	c1 e0 0c             	shl    eax,0xc
c000bcaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bcb3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bcb8:	8b 00                	mov    eax,DWORD PTR [eax]
c000bcba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bcbd:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bcc3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bcc7:	6a 01                	push   0x1
c000bcc9:	50                   	push   eax
c000bcca:	e8 07 fd ff ff       	call   c000b9d6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bccf:	83 c4 0c             	add    esp,0xc
c000bcd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bcd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bcda:	8b 00                	mov    eax,DWORD PTR [eax]
c000bcdc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bce0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bce4:	25 01 04 00 00       	and    eax,0x401
c000bce9:	3d 01 04 00 00       	cmp    eax,0x401
c000bcee:	75 19                	jne    c000bd09 <VAS::~VAS()+0xed>
c000bcf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bcf4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bcf9:	83 ec 0c             	sub    esp,0xc
c000bcfc:	50                   	push   eax
c000bcfd:	e8 58 e0 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c000bd02:	83 c4 10             	add    esp,0x10
c000bd05:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bd09:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bd0d:	eb 84                	jmp    c000bc93 <VAS::~VAS()+0x77>
c000bd0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd13:	25 00 04 00 00       	and    eax,0x400
c000bd18:	74 19                	je     c000bd33 <VAS::~VAS()+0x117>
c000bd1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd1e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bd23:	83 ec 0c             	sub    esp,0xc
c000bd26:	50                   	push   eax
c000bd27:	e8 2e e0 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c000bd2c:	83 c4 10             	add    esp,0x10
c000bd2f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bd33:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bd37:	e9 1e ff ff ff       	jmp    c000bc5a <VAS::~VAS()+0x3e>
c000bd3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd40:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bd43:	83 ec 0c             	sub    esp,0xc
c000bd46:	50                   	push   eax
c000bd47:	e8 d5 fc ff ff       	call   c000ba21 <Virt::freeKernelVirtualPages(unsigned long)>
c000bd4c:	83 c4 10             	add    esp,0x10
c000bd4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd53:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bd56:	83 ec 0c             	sub    esp,0xc
c000bd59:	50                   	push   eax
c000bd5a:	e8 fb df ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c000bd5f:	83 c4 10             	add    esp,0x10
c000bd62:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bd66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bd6a:	c1 e0 02             	shl    eax,0x2
c000bd6d:	83 ec 08             	sub    esp,0x8
c000bd70:	50                   	push   eax
c000bd71:	68 84 2c 02 c0       	push   0xc0022c84
c000bd76:	e8 48 0d 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000bd7b:	83 c4 10             	add    esp,0x10
c000bd7e:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000bd83:	48                   	dec    eax
c000bd84:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000bd89:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000bd8e:	85 c0                	test   eax,eax
c000bd90:	75 01                	jne    c000bd93 <VAS::~VAS()+0x177>
c000bd92:	fb                   	sti    
c000bd93:	90                   	nop
c000bd94:	83 c4 2c             	add    esp,0x2c
c000bd97:	c3                   	ret    

c000bd98 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000bd98:	55                   	push   ebp
c000bd99:	57                   	push   edi
c000bd9a:	56                   	push   esi
c000bd9b:	53                   	push   ebx
c000bd9c:	83 ec 1c             	sub    esp,0x1c
c000bd9f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bda3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bda7:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000bdad:	77 08                	ja     c000bdb7 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000bdaf:	0f 20 d8             	mov    eax,cr3
c000bdb2:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000bdb5:	75 47                	jne    c000bdfe <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000bdb7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdbb:	09 d8                	or     eax,ebx
c000bdbd:	a9 ff 0f 00 00       	test   eax,0xfff
c000bdc2:	75 57                	jne    c000be1b <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000bdc4:	89 de                	mov    esi,ebx
c000bdc6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bdc9:	c1 ee 16             	shr    esi,0x16
c000bdcc:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000bdd3:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000bdd7:	74 54                	je     c000be2d <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000bdd9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bddd:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000bde3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000bde7:	c1 e6 0c             	shl    esi,0xc
c000bdea:	c1 eb 0a             	shr    ebx,0xa
c000bded:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000bdf3:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000bdf6:	83 c4 1c             	add    esp,0x1c
c000bdf9:	5b                   	pop    ebx
c000bdfa:	5e                   	pop    esi
c000bdfb:	5f                   	pop    edi
c000bdfc:	5d                   	pop    ebp
c000bdfd:	c3                   	ret    
c000bdfe:	83 ec 0c             	sub    esp,0xc
c000be01:	68 a4 2c 02 c0       	push   0xc0022ca4
c000be06:	e8 b8 0c 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000be0b:	83 c4 10             	add    esp,0x10
c000be0e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000be12:	09 d8                	or     eax,ebx
c000be14:	a9 ff 0f 00 00       	test   eax,0xfff
c000be19:	74 a9                	je     c000bdc4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000be1b:	83 ec 0c             	sub    esp,0xc
c000be1e:	68 0c 2d 02 c0       	push   0xc0022d0c
c000be23:	e8 5d 85 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000be28:	83 c4 10             	add    esp,0x10
c000be2b:	eb 97                	jmp    c000bdc4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000be2d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be31:	e8 b4 df ff ff       	call   c0009dea <Phys::allocatePage()>
c000be36:	83 ec 0c             	sub    esp,0xc
c000be39:	89 c5                	mov    ebp,eax
c000be3b:	8b 0d b0 65 02 c0    	mov    ecx,DWORD PTR ds:0xc00265b0
c000be41:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000be45:	6a 01                	push   0x1
c000be47:	e8 a5 f8 ff ff       	call   c000b6f1 <Virt::allocateKernelVirtualPages(int)>
c000be4c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000be53:	6a 01                	push   0x1
c000be55:	50                   	push   eax
c000be56:	55                   	push   ebp
c000be57:	81 cd 07 04 00 00    	or     ebp,0x407
c000be5d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000be61:	51                   	push   ecx
c000be62:	e8 27 02 00 00       	call   c000c08e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000be67:	83 c4 1c             	add    esp,0x1c
c000be6a:	68 00 10 00 00       	push   0x1000
c000be6f:	6a 00                	push   0x0
c000be71:	50                   	push   eax
c000be72:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be76:	e8 09 48 ff ff       	call   c0000684 <memset>
c000be7b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000be7f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000be82:	e8 9a fb ff ff       	call   c000ba21 <Virt::freeKernelVirtualPages(unsigned long)>
c000be87:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be8b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000be8e:	83 c4 10             	add    esp,0x10
c000be91:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000be94:	e9 40 ff ff ff       	jmp    c000bdd9 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000be99:	90                   	nop

c000be9a <VAS::allocatePages(int, int)>:
c000be9a:	55                   	push   ebp
c000be9b:	57                   	push   edi
c000be9c:	56                   	push   esi
c000be9d:	53                   	push   ebx
c000be9e:	83 ec 1c             	sub    esp,0x1c
c000bea1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bea5:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000beaa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000beb0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000beb6:	83 e0 01             	and    eax,0x1
c000beb9:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000bebd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000bec1:	0f 85 cc 00 00 00    	jne    c000bf93 <VAS::allocatePages(int, int)+0xf9>
c000bec7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000beca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bece:	85 c0                	test   eax,eax
c000bed0:	0f 84 a1 00 00 00    	je     c000bf77 <VAS::allocatePages(int, int)+0xdd>
c000bed6:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000beda:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bede:	c1 e6 0c             	shl    esi,0xc
c000bee1:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000bee5:	85 c0                	test   eax,eax
c000bee7:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000beea:	7e 33                	jle    c000bf1f <VAS::allocatePages(int, int)+0x85>
c000beec:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bef0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bef4:	81 cd 00 04 00 00    	or     ebp,0x400
c000befa:	e8 eb de ff ff       	call   c0009dea <Phys::allocatePage()>
c000beff:	55                   	push   ebp
c000bf00:	53                   	push   ebx
c000bf01:	50                   	push   eax
c000bf02:	57                   	push   edi
c000bf03:	e8 90 fe ff ff       	call   c000bd98 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bf08:	83 c4 10             	add    esp,0x10
c000bf0b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf10:	74 03                	je     c000bf15 <VAS::allocatePages(int, int)+0x7b>
c000bf12:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf15:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf1b:	39 de                	cmp    esi,ebx
c000bf1d:	75 db                	jne    c000befa <VAS::allocatePages(int, int)+0x60>
c000bf1f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf24:	75 12                	jne    c000bf38 <VAS::allocatePages(int, int)+0x9e>
c000bf26:	0f 20 d8             	mov    eax,cr3
c000bf29:	0f 22 d8             	mov    cr3,eax
c000bf2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf30:	83 c4 1c             	add    esp,0x1c
c000bf33:	5b                   	pop    ebx
c000bf34:	5e                   	pop    esi
c000bf35:	5f                   	pop    edi
c000bf36:	5d                   	pop    ebp
c000bf37:	c3                   	ret    
c000bf38:	c1 ee 0a             	shr    esi,0xa
c000bf3b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bf3f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000bf45:	c1 eb 0a             	shr    ebx,0xa
c000bf48:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000bf4e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bf54:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf5a:	39 c3                	cmp    ebx,eax
c000bf5c:	77 ce                	ja     c000bf2c <VAS::allocatePages(int, int)+0x92>
c000bf5e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf61:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf67:	39 d8                	cmp    eax,ebx
c000bf69:	73 f3                	jae    c000bf5e <VAS::allocatePages(int, int)+0xc4>
c000bf6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf6f:	83 c4 1c             	add    esp,0x1c
c000bf72:	5b                   	pop    ebx
c000bf73:	5e                   	pop    esi
c000bf74:	5f                   	pop    edi
c000bf75:	5d                   	pop    ebp
c000bf76:	c3                   	ret    
c000bf77:	83 ec 0c             	sub    esp,0xc
c000bf7a:	68 30 2d 02 c0       	push   0xc0022d30
c000bf7f:	e8 01 84 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000bf84:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bf87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bf8b:	83 c4 10             	add    esp,0x10
c000bf8e:	e9 43 ff ff ff       	jmp    c000bed6 <VAS::allocatePages(int, int)+0x3c>
c000bf93:	83 ec 0c             	sub    esp,0xc
c000bf96:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000bf9a:	e8 52 f7 ff ff       	call   c000b6f1 <Virt::allocateKernelVirtualPages(int)>
c000bf9f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bfa3:	83 c4 10             	add    esp,0x10
c000bfa6:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000bfab:	0f 87 9b 00 00 00    	ja     c000c04c <VAS::allocatePages(int, int)+0x1b2>
c000bfb1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bfb5:	85 d2                	test   edx,edx
c000bfb7:	7e 3c                	jle    c000bff5 <VAS::allocatePages(int, int)+0x15b>
c000bfb9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bfbd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bfc1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bfc5:	c1 e5 0c             	shl    ebp,0xc
c000bfc8:	81 ce 00 04 00 00    	or     esi,0x400
c000bfce:	01 dd                	add    ebp,ebx
c000bfd0:	e8 15 de ff ff       	call   c0009dea <Phys::allocatePage()>
c000bfd5:	56                   	push   esi
c000bfd6:	53                   	push   ebx
c000bfd7:	50                   	push   eax
c000bfd8:	57                   	push   edi
c000bfd9:	e8 ba fd ff ff       	call   c000bd98 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bfde:	83 c4 10             	add    esp,0x10
c000bfe1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bfe6:	74 03                	je     c000bfeb <VAS::allocatePages(int, int)+0x151>
c000bfe8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bfeb:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bff1:	39 dd                	cmp    ebp,ebx
c000bff3:	75 db                	jne    c000bfd0 <VAS::allocatePages(int, int)+0x136>
c000bff5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bffa:	0f 84 26 ff ff ff    	je     c000bf26 <VAS::allocatePages(int, int)+0x8c>
c000c000:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c004:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c008:	89 d3                	mov    ebx,edx
c000c00a:	c1 e0 0c             	shl    eax,0xc
c000c00d:	c1 eb 0a             	shr    ebx,0xa
c000c010:	01 d0                	add    eax,edx
c000c012:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c018:	c1 e8 0a             	shr    eax,0xa
c000c01b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c021:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c026:	2d 00 00 40 00       	sub    eax,0x400000
c000c02b:	39 c3                	cmp    ebx,eax
c000c02d:	0f 87 f9 fe ff ff    	ja     c000bf2c <VAS::allocatePages(int, int)+0x92>
c000c033:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c036:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c03c:	39 d8                	cmp    eax,ebx
c000c03e:	73 f3                	jae    c000c033 <VAS::allocatePages(int, int)+0x199>
c000c040:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c044:	83 c4 1c             	add    esp,0x1c
c000c047:	5b                   	pop    ebx
c000c048:	5e                   	pop    esi
c000c049:	5f                   	pop    edi
c000c04a:	5d                   	pop    ebp
c000c04b:	c3                   	ret    
c000c04c:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000c051:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c057:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c05e:	0f 84 4d ff ff ff    	je     c000bfb1 <VAS::allocatePages(int, int)+0x117>
c000c064:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c06c:	e9 40 ff ff ff       	jmp    c000bfb1 <VAS::allocatePages(int, int)+0x117>
c000c071:	90                   	nop

c000c072 <VAS::setCPUSpecific(unsigned long)>:
c000c072:	83 ec 0c             	sub    esp,0xc
c000c075:	6a 05                	push   0x5
c000c077:	68 00 00 40 c2       	push   0xc2400000
c000c07c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c084:	e8 0f fd ff ff       	call   c000bd98 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c089:	83 c4 1c             	add    esp,0x1c
c000c08c:	c3                   	ret    
c000c08d:	90                   	nop

c000c08e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c08e:	55                   	push   ebp
c000c08f:	57                   	push   edi
c000c090:	56                   	push   esi
c000c091:	53                   	push   ebx
c000c092:	83 ec 1c             	sub    esp,0x1c
c000c095:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000c09a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c09e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c0a4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c0a8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c0ae:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c0b2:	83 e0 01             	and    eax,0x1
c000c0b5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c0b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0bd:	85 c0                	test   eax,eax
c000c0bf:	7e 39                	jle    c000c0fa <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c0c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0c5:	89 f3                	mov    ebx,esi
c000c0c7:	c1 e0 0c             	shl    eax,0xc
c000c0ca:	01 f0                	add    eax,esi
c000c0cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c0d0:	55                   	push   ebp
c000c0d1:	53                   	push   ebx
c000c0d2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0d6:	29 f0                	sub    eax,esi
c000c0d8:	01 d8                	add    eax,ebx
c000c0da:	50                   	push   eax
c000c0db:	57                   	push   edi
c000c0dc:	e8 b7 fc ff ff       	call   c000bd98 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c0e1:	83 c4 10             	add    esp,0x10
c000c0e4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c0e9:	74 03                	je     c000c0ee <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c0eb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c0ee:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c0f4:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c0f8:	75 d6                	jne    c000c0d0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c0fa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c0ff:	75 10                	jne    c000c111 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c101:	0f 20 d8             	mov    eax,cr3
c000c104:	0f 22 d8             	mov    cr3,eax
c000c107:	83 c4 1c             	add    esp,0x1c
c000c10a:	89 f0                	mov    eax,esi
c000c10c:	5b                   	pop    ebx
c000c10d:	5e                   	pop    esi
c000c10e:	5f                   	pop    edi
c000c10f:	5d                   	pop    ebp
c000c110:	c3                   	ret    
c000c111:	89 f3                	mov    ebx,esi
c000c113:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c117:	c1 eb 0a             	shr    ebx,0xa
c000c11a:	c1 e0 0c             	shl    eax,0xc
c000c11d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c123:	01 f0                	add    eax,esi
c000c125:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c12b:	c1 e8 0a             	shr    eax,0xa
c000c12e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c133:	2d 00 00 40 00       	sub    eax,0x400000
c000c138:	39 c3                	cmp    ebx,eax
c000c13a:	77 cb                	ja     c000c107 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c13c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c13f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c145:	39 d8                	cmp    eax,ebx
c000c147:	73 f3                	jae    c000c13c <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c149:	83 c4 1c             	add    esp,0x1c
c000c14c:	89 f0                	mov    eax,esi
c000c14e:	5b                   	pop    ebx
c000c14f:	5e                   	pop    esi
c000c150:	5f                   	pop    edi
c000c151:	5d                   	pop    ebp
c000c152:	c3                   	ret    
c000c153:	90                   	nop

c000c154 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c154:	55                   	push   ebp
c000c155:	57                   	push   edi
c000c156:	56                   	push   esi
c000c157:	53                   	push   ebx
c000c158:	83 ec 1c             	sub    esp,0x1c
c000c15b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c15f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c163:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c167:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c16b:	a9 ff 0f 00 00       	test   eax,0xfff
c000c170:	75 4a                	jne    c000c1bc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c172:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c176:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c179:	c1 eb 16             	shr    ebx,0x16
c000c17c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c183:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c187:	74 4d                	je     c000c1d6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c189:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c18d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c191:	c1 e8 0a             	shr    eax,0xa
c000c194:	80 fa 01             	cmp    dl,0x1
c000c197:	19 d2                	sbb    edx,edx
c000c199:	c1 e3 0c             	shl    ebx,0xc
c000c19c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c1a0:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c1a6:	25 fc 0f 00 00       	and    eax,0xffc
c000c1ab:	01 d8                	add    eax,ebx
c000c1ad:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c1b4:	83 c4 1c             	add    esp,0x1c
c000c1b7:	5b                   	pop    ebx
c000c1b8:	5e                   	pop    esi
c000c1b9:	5f                   	pop    edi
c000c1ba:	5d                   	pop    ebp
c000c1bb:	c3                   	ret    
c000c1bc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c1c0:	83 ec 0c             	sub    esp,0xc
c000c1c3:	68 5c 2d 02 c0       	push   0xc0022d5c
c000c1c8:	e8 b8 81 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c1d4:	eb 9c                	jmp    c000c172 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c1d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1da:	e8 0b dc ff ff       	call   c0009dea <Phys::allocatePage()>
c000c1df:	83 ec 0c             	sub    esp,0xc
c000c1e2:	89 c5                	mov    ebp,eax
c000c1e4:	8b 0d b0 65 02 c0    	mov    ecx,DWORD PTR ds:0xc00265b0
c000c1ea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c1ee:	6a 01                	push   0x1
c000c1f0:	e8 fc f4 ff ff       	call   c000b6f1 <Virt::allocateKernelVirtualPages(int)>
c000c1f5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c1fc:	6a 01                	push   0x1
c000c1fe:	50                   	push   eax
c000c1ff:	55                   	push   ebp
c000c200:	81 cd 07 04 00 00    	or     ebp,0x407
c000c206:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c20a:	51                   	push   ecx
c000c20b:	e8 7e fe ff ff       	call   c000c08e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c210:	83 c4 1c             	add    esp,0x1c
c000c213:	68 00 10 00 00       	push   0x1000
c000c218:	6a 00                	push   0x0
c000c21a:	50                   	push   eax
c000c21b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c21f:	e8 60 44 ff ff       	call   c0000684 <memset>
c000c224:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c228:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c22b:	e8 f1 f7 ff ff       	call   c000ba21 <Virt::freeKernelVirtualPages(unsigned long)>
c000c230:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c233:	83 c4 10             	add    esp,0x10
c000c236:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c239:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c23d:	e9 47 ff ff ff       	jmp    c000c189 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c242 <VAS::VAS(bool)>:
c000c242:	53                   	push   ebx
c000c243:	83 ec 28             	sub    esp,0x28
c000c246:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c24a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c24e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c252:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c259:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c25d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c264:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c268:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c26c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c26f:	e8 76 db ff ff       	call   c0009dea <Phys::allocatePage()>
c000c274:	89 c2                	mov    edx,eax
c000c276:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c27a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c27d:	8b 1d b0 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265b0
c000c283:	83 ec 0c             	sub    esp,0xc
c000c286:	6a 01                	push   0x1
c000c288:	e8 64 f4 ff ff       	call   c000b6f1 <Virt::allocateKernelVirtualPages(int)>
c000c28d:	83 c4 10             	add    esp,0x10
c000c290:	89 c2                	mov    edx,eax
c000c292:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c296:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c299:	83 ec 0c             	sub    esp,0xc
c000c29c:	6a 03                	push   0x3
c000c29e:	6a 01                	push   0x1
c000c2a0:	52                   	push   edx
c000c2a1:	50                   	push   eax
c000c2a2:	53                   	push   ebx
c000c2a3:	e8 e6 fd ff ff       	call   c000c08e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2a8:	83 c4 20             	add    esp,0x20
c000c2ab:	89 c2                	mov    edx,eax
c000c2ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2b1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c2b4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c2bc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c2c4:	7f 1c                	jg     c000c2e2 <VAS::VAS(bool)+0xa0>
c000c2c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2ca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c2d1:	c1 e2 02             	shl    edx,0x2
c000c2d4:	01 d0                	add    eax,edx
c000c2d6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c2dc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c2e0:	eb da                	jmp    c000c2bc <VAS::VAS(bool)+0x7a>
c000c2e2:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c2ea:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c2f2:	7f 7a                	jg     c000c36e <VAS::VAS(bool)+0x12c>
c000c2f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c2f8:	2d 00 02 00 00       	sub    eax,0x200
c000c2fd:	c1 e0 0c             	shl    eax,0xc
c000c300:	83 c8 03             	or     eax,0x3
c000c303:	89 c2                	mov    edx,eax
c000c305:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000c30a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c310:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c316:	83 e0 10             	and    eax,0x10
c000c319:	84 c0                	test   al,al
c000c31b:	74 07                	je     c000c324 <VAS::VAS(bool)+0xe2>
c000c31d:	b8 00 01 00 00       	mov    eax,0x100
c000c322:	eb 05                	jmp    c000c329 <VAS::VAS(bool)+0xe7>
c000c324:	b8 00 00 00 00       	mov    eax,0x0
c000c329:	09 d0                	or     eax,edx
c000c32b:	89 c1                	mov    ecx,eax
c000c32d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c331:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c334:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c338:	c1 e2 02             	shl    edx,0x2
c000c33b:	01 d0                	add    eax,edx
c000c33d:	89 ca                	mov    edx,ecx
c000c33f:	89 10                	mov    DWORD PTR [eax],edx
c000c341:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c345:	2d 40 03 00 00       	sub    eax,0x340
c000c34a:	83 f8 7f             	cmp    eax,0x7f
c000c34d:	77 16                	ja     c000c365 <VAS::VAS(bool)+0x123>
c000c34f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c353:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c356:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c35a:	c1 e2 02             	shl    edx,0x2
c000c35d:	01 d0                	add    eax,edx
c000c35f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c365:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c369:	e9 7c ff ff ff       	jmp    c000c2ea <VAS::VAS(bool)+0xa8>
c000c36e:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000c373:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c379:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c37f:	83 e0 10             	and    eax,0x10
c000c382:	84 c0                	test   al,al
c000c384:	74 07                	je     c000c38d <VAS::VAS(bool)+0x14b>
c000c386:	b8 03 41 00 00       	mov    eax,0x4103
c000c38b:	eb 05                	jmp    c000c392 <VAS::VAS(bool)+0x150>
c000c38d:	b8 03 40 00 00       	mov    eax,0x4003
c000c392:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c396:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c399:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c39f:	89 02                	mov    DWORD PTR [edx],eax
c000c3a1:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000c3a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3ac:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c3b2:	83 ec 08             	sub    esp,0x8
c000c3b5:	50                   	push   eax
c000c3b6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3ba:	e8 b3 fc ff ff       	call   c000c072 <VAS::setCPUSpecific(unsigned long)>
c000c3bf:	83 c4 10             	add    esp,0x10
c000c3c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3c6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c3c9:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000c3ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3d4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c3da:	83 e0 10             	and    eax,0x10
c000c3dd:	84 c0                	test   al,al
c000c3df:	74 07                	je     c000c3e8 <VAS::VAS(bool)+0x1a6>
c000c3e1:	b8 00 01 00 00       	mov    eax,0x100
c000c3e6:	eb 05                	jmp    c000c3ed <VAS::VAS(bool)+0x1ab>
c000c3e8:	b8 00 00 00 00       	mov    eax,0x0
c000c3ed:	09 c2                	or     edx,eax
c000c3ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3f3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c3f6:	05 fc 0f 00 00       	add    eax,0xffc
c000c3fb:	83 ca 03             	or     edx,0x3
c000c3fe:	89 10                	mov    DWORD PTR [eax],edx
c000c400:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000c405:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c40b:	83 ec 0c             	sub    esp,0xc
c000c40e:	50                   	push   eax
c000c40f:	e8 f6 1d 00 00       	call   c000e20a <Device::getName()>
c000c414:	83 c4 10             	add    esp,0x10
c000c417:	83 ec 08             	sub    esp,0x8
c000c41a:	68 30 2e 02 c0       	push   0xc0022e30
c000c41f:	50                   	push   eax
c000c420:	e8 a7 43 ff ff       	call   c00007cc <strcmp>
c000c425:	83 c4 10             	add    esp,0x10
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 94 c0             	sete   al
c000c42d:	84 c0                	test   al,al
c000c42f:	0f 84 87 00 00 00    	je     c000c4bc <VAS::VAS(bool)+0x27a>
c000c435:	fa                   	cli    
c000c436:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000c43b:	40                   	inc    eax
c000c43c:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000c441:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000c446:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c44c:	05 7c 09 00 00       	add    eax,0x97c
c000c451:	83 ec 0c             	sub    esp,0xc
c000c454:	50                   	push   eax
c000c455:	e8 58 d0 ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c45a:	83 c4 10             	add    esp,0x10
c000c45d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c462:	89 c3                	mov    ebx,eax
c000c464:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000c469:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c46f:	05 7c 09 00 00       	add    eax,0x97c
c000c474:	83 ec 0c             	sub    esp,0xc
c000c477:	50                   	push   eax
c000c478:	e8 35 d0 ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c47d:	83 c4 10             	add    esp,0x10
c000c480:	83 ec 08             	sub    esp,0x8
c000c483:	50                   	push   eax
c000c484:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c488:	e8 75 f5 ff ff       	call   c000ba02 <VAS::getPageTableEntry(unsigned long)>
c000c48d:	83 c4 10             	add    esp,0x10
c000c490:	8b 00                	mov    eax,DWORD PTR [eax]
c000c492:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c497:	6a 11                	push   0x11
c000c499:	53                   	push   ebx
c000c49a:	50                   	push   eax
c000c49b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c49f:	e8 f4 f8 ff ff       	call   c000bd98 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c4a4:	83 c4 10             	add    esp,0x10
c000c4a7:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000c4ac:	48                   	dec    eax
c000c4ad:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000c4b2:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000c4b7:	85 c0                	test   eax,eax
c000c4b9:	75 01                	jne    c000c4bc <VAS::VAS(bool)+0x27a>
c000c4bb:	fb                   	sti    
c000c4bc:	90                   	nop
c000c4bd:	83 c4 28             	add    esp,0x28
c000c4c0:	5b                   	pop    ebx
c000c4c1:	c3                   	ret    

c000c4c2 <VAS::evict(unsigned long)>:
c000c4c2:	55                   	push   ebp
c000c4c3:	57                   	push   edi
c000c4c4:	56                   	push   esi
c000c4c5:	53                   	push   ebx
c000c4c6:	83 ec 28             	sub    esp,0x28
c000c4c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c4cd:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c4d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4d5:	68 3e 2e 02 c0       	push   0xc0022e3e
c000c4da:	e8 e4 05 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c4df:	e8 4e f3 ff ff       	call   c000b832 <Virt::allocateSwapfilePage()>
c000c4e4:	5a                   	pop    edx
c000c4e5:	89 c7                	mov    edi,eax
c000c4e7:	59                   	pop    ecx
c000c4e8:	50                   	push   eax
c000c4e9:	68 5b 2e 02 c0       	push   0xc0022e5b
c000c4ee:	e8 d0 05 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c4f3:	83 c4 10             	add    esp,0x10
c000c4f6:	8b 1d 8c 58 02 c0    	mov    ebx,DWORD PTR ds:0xc002588c
c000c4fc:	85 db                	test   ebx,ebx
c000c4fe:	7e 3d                	jle    c000c53d <VAS::evict(unsigned long)+0x7b>
c000c500:	89 ee                	mov    esi,ebp
c000c502:	31 db                	xor    ebx,ebx
c000c504:	83 ec 0c             	sub    esp,0xc
c000c507:	57                   	push   edi
c000c508:	e8 13 f3 ff ff       	call   c000b820 <Virt::swapIDToSector(unsigned long)>
c000c50d:	89 34 24             	mov    DWORD PTR [esp],esi
c000c510:	01 d8                	add    eax,ebx
c000c512:	6a 01                	push   0x1
c000c514:	31 d2                	xor    edx,edx
c000c516:	43                   	inc    ebx
c000c517:	52                   	push   edx
c000c518:	81 c6 00 02 00 00    	add    esi,0x200
c000c51e:	50                   	push   eax
c000c51f:	0f be 05 98 58 02 c0 	movsx  eax,BYTE PTR ds:0xc0025898
c000c526:	ff 34 85 3c 69 02 c0 	push   DWORD PTR [eax*4-0x3ffd96c4]
c000c52d:	e8 1a 3d 00 00       	call   c001024c <LogicalDisk::write(unsigned long long, int, void*)>
c000c532:	83 c4 20             	add    esp,0x20
c000c535:	39 1d 8c 58 02 c0    	cmp    DWORD PTR ds:0xc002588c,ebx
c000c53b:	7f c7                	jg     c000c504 <VAS::evict(unsigned long)+0x42>
c000c53d:	83 ec 08             	sub    esp,0x8
c000c540:	c1 e7 0b             	shl    edi,0xb
c000c543:	55                   	push   ebp
c000c544:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c548:	e8 b5 f4 ff ff       	call   c000ba02 <VAS::getPageTableEntry(unsigned long)>
c000c54d:	5a                   	pop    edx
c000c54e:	89 c6                	mov    esi,eax
c000c550:	59                   	pop    ecx
c000c551:	ff 30                	push   DWORD PTR [eax]
c000c553:	68 6b 2e 02 c0       	push   0xc0022e6b
c000c558:	e8 66 05 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c55d:	8b 16                	mov    edx,DWORD PTR [esi]
c000c55f:	89 d3                	mov    ebx,edx
c000c561:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c567:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c56d:	09 d7                	or     edi,edx
c000c56f:	89 3e                	mov    DWORD PTR [esi],edi
c000c571:	5e                   	pop    esi
c000c572:	58                   	pop    eax
c000c573:	57                   	push   edi
c000c574:	68 84 2e 02 c0       	push   0xc0022e84
c000c579:	e8 45 05 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c57e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c581:	ff 05 a8 65 02 c0    	inc    DWORD PTR ds:0xc00265a8
c000c587:	e8 ce d7 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c000c58c:	0f 20 d8             	mov    eax,cr3
c000c58f:	0f 22 d8             	mov    cr3,eax
c000c592:	ff 35 a8 65 02 c0    	push   DWORD PTR ds:0xc00265a8
c000c598:	55                   	push   ebp
c000c599:	53                   	push   ebx
c000c59a:	68 80 2d 02 c0       	push   0xc0022d80
c000c59f:	e8 1f 05 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c5a4:	a1 a4 65 02 c0       	mov    eax,ds:0xc00265a4
c000c5a9:	c7 44 24 50 9d 2e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0022e9d
c000c5b1:	8d 50 01             	lea    edx,[eax+0x1]
c000c5b4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c5b8:	89 15 a4 65 02 c0    	mov    DWORD PTR ds:0xc00265a4,edx
c000c5be:	83 c4 3c             	add    esp,0x3c
c000c5c1:	5b                   	pop    ebx
c000c5c2:	5e                   	pop    esi
c000c5c3:	5f                   	pop    edi
c000c5c4:	5d                   	pop    ebp
c000c5c5:	e9 f9 04 00 00       	jmp    c000cac3 <Dbg::kprintf(char const*, ...)>

c000c5ca <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c5ca:	55                   	push   ebp
c000c5cb:	57                   	push   edi
c000c5cc:	56                   	push   esi
c000c5cd:	53                   	push   ebx
c000c5ce:	83 ec 24             	sub    esp,0x24
c000c5d1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c5d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5d9:	68 ae 2e 02 c0       	push   0xc0022eae
c000c5de:	e8 e0 04 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c5e3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000c5e7:	58                   	pop    eax
c000c5e8:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000c5ee:	5a                   	pop    edx
c000c5ef:	57                   	push   edi
c000c5f0:	53                   	push   ebx
c000c5f1:	e8 0c f4 ff ff       	call   c000ba02 <VAS::getPageTableEntry(unsigned long)>
c000c5f6:	59                   	pop    ecx
c000c5f7:	5e                   	pop    esi
c000c5f8:	89 c6                	mov    esi,eax
c000c5fa:	ff 30                	push   DWORD PTR [eax]
c000c5fc:	68 c1 2e 02 c0       	push   0xc0022ec1
c000c601:	e8 bd 04 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c606:	83 c4 10             	add    esp,0x10
c000c609:	85 ff                	test   edi,edi
c000c60b:	74 0a                	je     c000c617 <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c000c60d:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000c60f:	f7 c5 01 00 00 00    	test   ebp,0x1
c000c615:	74 0a                	je     c000c621 <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c000c617:	83 c4 1c             	add    esp,0x1c
c000c61a:	31 c0                	xor    eax,eax
c000c61c:	5b                   	pop    ebx
c000c61d:	5e                   	pop    esi
c000c61e:	5f                   	pop    edi
c000c61f:	5d                   	pop    ebp
c000c620:	c3                   	ret    
c000c621:	83 ec 08             	sub    esp,0x8
c000c624:	c1 ed 0b             	shr    ebp,0xb
c000c627:	55                   	push   ebp
c000c628:	68 cf 2e 02 c0       	push   0xc0022ecf
c000c62d:	e8 91 04 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c632:	e8 b3 d7 ff ff       	call   c0009dea <Phys::allocatePage()>
c000c637:	59                   	pop    ecx
c000c638:	5a                   	pop    edx
c000c639:	50                   	push   eax
c000c63a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c63e:	68 da 2e 02 c0       	push   0xc0022eda
c000c643:	e8 7b 04 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c648:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c64c:	8b 16                	mov    edx,DWORD PTR [esi]
c000c64e:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c654:	09 d0                	or     eax,edx
c000c656:	0d 01 08 00 00       	or     eax,0x801
c000c65b:	89 06                	mov    DWORD PTR [esi],eax
c000c65d:	59                   	pop    ecx
c000c65e:	5e                   	pop    esi
c000c65f:	50                   	push   eax
c000c660:	68 ef 2e 02 c0       	push   0xc0022eef
c000c665:	e8 59 04 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c66a:	0f 20 d8             	mov    eax,cr3
c000c66d:	83 c4 0c             	add    esp,0xc
c000c670:	53                   	push   ebx
c000c671:	50                   	push   eax
c000c672:	68 07 2f 02 c0       	push   0xc0022f07
c000c677:	e8 47 04 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c67c:	c7 04 24 1f 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f1f
c000c683:	e8 3b 04 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c688:	83 c4 10             	add    esp,0x10
c000c68b:	a1 8c 58 02 c0       	mov    eax,ds:0xc002588c
c000c690:	85 c0                	test   eax,eax
c000c692:	7e 3d                	jle    c000c6d1 <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c000c694:	89 fe                	mov    esi,edi
c000c696:	31 db                	xor    ebx,ebx
c000c698:	83 ec 0c             	sub    esp,0xc
c000c69b:	55                   	push   ebp
c000c69c:	e8 7f f1 ff ff       	call   c000b820 <Virt::swapIDToSector(unsigned long)>
c000c6a1:	89 34 24             	mov    DWORD PTR [esp],esi
c000c6a4:	01 d8                	add    eax,ebx
c000c6a6:	6a 01                	push   0x1
c000c6a8:	31 d2                	xor    edx,edx
c000c6aa:	43                   	inc    ebx
c000c6ab:	52                   	push   edx
c000c6ac:	81 c6 00 02 00 00    	add    esi,0x200
c000c6b2:	50                   	push   eax
c000c6b3:	0f be 05 98 58 02 c0 	movsx  eax,BYTE PTR ds:0xc0025898
c000c6ba:	ff 34 85 3c 69 02 c0 	push   DWORD PTR [eax*4-0x3ffd96c4]
c000c6c1:	e8 1a 3b 00 00       	call   c00101e0 <LogicalDisk::read(unsigned long long, int, void*)>
c000c6c6:	83 c4 20             	add    esp,0x20
c000c6c9:	39 1d 8c 58 02 c0    	cmp    DWORD PTR ds:0xc002588c,ebx
c000c6cf:	7f c7                	jg     c000c698 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c000c6d1:	a1 a8 65 02 c0       	mov    eax,ds:0xc00265a8
c000c6d6:	48                   	dec    eax
c000c6d7:	52                   	push   edx
c000c6d8:	a3 a8 65 02 c0       	mov    ds:0xc00265a8,eax
c000c6dd:	50                   	push   eax
c000c6de:	57                   	push   edi
c000c6df:	68 2f 2f 02 c0       	push   0xc0022f2f
c000c6e4:	e8 da 03 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c6e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c6ec:	e8 11 f1 ff ff       	call   c000b802 <Virt::freeSwapfilePage(unsigned long)>
c000c6f1:	c7 04 24 44 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f44
c000c6f8:	e8 c6 03 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c6fd:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000c702:	83 c4 10             	add    esp,0x10
c000c705:	48                   	dec    eax
c000c706:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000c70b:	85 c0                	test   eax,eax
c000c70d:	75 01                	jne    c000c710 <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c000c70f:	fb                   	sti    
c000c710:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c714:	25 ff 0f 00 00       	and    eax,0xfff
c000c719:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c71e:	77 20                	ja     c000c740 <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c000c720:	0f 20 d8             	mov    eax,cr3
c000c723:	0f 22 d8             	mov    cr3,eax
c000c726:	83 ec 0c             	sub    esp,0xc
c000c729:	68 6a 2f 02 c0       	push   0xc0022f6a
c000c72e:	e8 90 03 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c733:	83 c4 10             	add    esp,0x10
c000c736:	b0 01                	mov    al,0x1
c000c738:	83 c4 1c             	add    esp,0x1c
c000c73b:	5b                   	pop    ebx
c000c73c:	5e                   	pop    esi
c000c73d:	5f                   	pop    edi
c000c73e:	5d                   	pop    ebp
c000c73f:	c3                   	ret    
c000c740:	83 ec 0c             	sub    esp,0xc
c000c743:	68 5a 2f 02 c0       	push   0xc0022f5a
c000c748:	e8 76 03 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c74d:	83 c4 10             	add    esp,0x10
c000c750:	eb ce                	jmp    c000c720 <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c000c752 <VAS::scanForEviction()>:
c000c752:	57                   	push   edi
c000c753:	31 ff                	xor    edi,edi
c000c755:	56                   	push   esi
c000c756:	53                   	push   ebx
c000c757:	83 ec 10             	sub    esp,0x10
c000c75a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c75e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c761:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c767:	75 0e                	jne    c000c777 <VAS::scanForEviction()+0x25>
c000c769:	89 da                	mov    edx,ebx
c000c76b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c76e:	c1 ea 16             	shr    edx,0x16
c000c771:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c775:	74 4e                	je     c000c7c5 <VAS::scanForEviction()+0x73>
c000c777:	53                   	push   ebx
c000c778:	56                   	push   esi
c000c779:	e8 84 f2 ff ff       	call   c000ba02 <VAS::getPageTableEntry(unsigned long)>
c000c77e:	5a                   	pop    edx
c000c77f:	8b 10                	mov    edx,DWORD PTR [eax]
c000c781:	59                   	pop    ecx
c000c782:	89 d1                	mov    ecx,edx
c000c784:	81 e1 01 08 00 00    	and    ecx,0x801
c000c78a:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c790:	74 3e                	je     c000c7d0 <VAS::scanForEviction()+0x7e>
c000c792:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c798:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c79e:	76 2b                	jbe    c000c7cb <VAS::scanForEviction()+0x79>
c000c7a0:	47                   	inc    edi
c000c7a1:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c7a8:	83 ff 03             	cmp    edi,0x3
c000c7ab:	74 32                	je     c000c7df <VAS::scanForEviction()+0x8d>
c000c7ad:	31 db                	xor    ebx,ebx
c000c7af:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c7b5:	75 c0                	jne    c000c777 <VAS::scanForEviction()+0x25>
c000c7b7:	89 da                	mov    edx,ebx
c000c7b9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7bc:	c1 ea 16             	shr    edx,0x16
c000c7bf:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c7c3:	75 b2                	jne    c000c777 <VAS::scanForEviction()+0x25>
c000c7c5:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c7cb:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c7ce:	eb 91                	jmp    c000c761 <VAS::scanForEviction()+0xf>
c000c7d0:	f6 c2 20             	test   dl,0x20
c000c7d3:	74 13                	je     c000c7e8 <VAS::scanForEviction()+0x96>
c000c7d5:	83 e2 df             	and    edx,0xffffffdf
c000c7d8:	89 10                	mov    DWORD PTR [eax],edx
c000c7da:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c7dd:	eb b3                	jmp    c000c792 <VAS::scanForEviction()+0x40>
c000c7df:	83 c4 10             	add    esp,0x10
c000c7e2:	31 c0                	xor    eax,eax
c000c7e4:	5b                   	pop    ebx
c000c7e5:	5e                   	pop    esi
c000c7e6:	5f                   	pop    edi
c000c7e7:	c3                   	ret    
c000c7e8:	83 ec 08             	sub    esp,0x8
c000c7eb:	89 d0                	mov    eax,edx
c000c7ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c7f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c7f6:	53                   	push   ebx
c000c7f7:	68 78 2f 02 c0       	push   0xc0022f78
c000c7fc:	e8 c2 02 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c801:	58                   	pop    eax
c000c802:	5a                   	pop    edx
c000c803:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c806:	56                   	push   esi
c000c807:	e8 b6 fc ff ff       	call   c000c4c2 <VAS::evict(unsigned long)>
c000c80c:	59                   	pop    ecx
c000c80d:	5b                   	pop    ebx
c000c80e:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c811:	68 8c 2f 02 c0       	push   0xc0022f8c
c000c816:	e8 a8 02 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c81b:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000c822:	83 c4 10             	add    esp,0x10
c000c825:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c829:	83 c4 10             	add    esp,0x10
c000c82c:	5b                   	pop    ebx
c000c82d:	5e                   	pop    esi
c000c82e:	5f                   	pop    edi
c000c82f:	c3                   	ret    

c000c830 <mapVASFirstTime>:
c000c830:	55                   	push   ebp
c000c831:	57                   	push   edi
c000c832:	56                   	push   esi
c000c833:	53                   	push   ebx
c000c834:	83 ec 0c             	sub    esp,0xc
c000c837:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c83c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000c83f:	4a                   	dec    edx
c000c840:	0f 84 fe 00 00 00    	je     c000c944 <mapVASFirstTime+0x114>
c000c846:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000c849:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000c84c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000c851:	c1 e5 15             	shl    ebp,0x15
c000c854:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000c859:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000c85f:	29 eb                	sub    ebx,ebp
c000c861:	29 ef                	sub    edi,ebp
c000c863:	83 ec 08             	sub    esp,0x8
c000c866:	53                   	push   ebx
c000c867:	68 b8 2f 02 c0       	push   0xc0022fb8
c000c86c:	e8 52 02 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c871:	e8 74 d5 ff ff       	call   c0009dea <Phys::allocatePage()>
c000c876:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000c87d:	6a 01                	push   0x1
c000c87f:	53                   	push   ebx
c000c880:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c886:	50                   	push   eax
c000c887:	56                   	push   esi
c000c888:	e8 01 f8 ff ff       	call   c000c08e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c88d:	83 c4 20             	add    esp,0x20
c000c890:	39 fb                	cmp    ebx,edi
c000c892:	75 cf                	jne    c000c863 <mapVASFirstTime+0x33>
c000c894:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000c899:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000c89e:	29 eb                	sub    ebx,ebp
c000c8a0:	29 ef                	sub    edi,ebp
c000c8a2:	83 ec 08             	sub    esp,0x8
c000c8a5:	53                   	push   ebx
c000c8a6:	68 d4 2f 02 c0       	push   0xc0022fd4
c000c8ab:	e8 13 02 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c8b0:	58                   	pop    eax
c000c8b1:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c8b5:	5a                   	pop    edx
c000c8b6:	19 c0                	sbb    eax,eax
c000c8b8:	83 e0 04             	and    eax,0x4
c000c8bb:	05 03 04 00 00       	add    eax,0x403
c000c8c0:	50                   	push   eax
c000c8c1:	68 f9 2e 02 c0       	push   0xc0022ef9
c000c8c6:	e8 f8 01 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c8cb:	e8 1a d5 ff ff       	call   c0009dea <Phys::allocatePage()>
c000c8d0:	59                   	pop    ecx
c000c8d1:	89 c5                	mov    ebp,eax
c000c8d3:	58                   	pop    eax
c000c8d4:	55                   	push   ebp
c000c8d5:	68 e8 2f 02 c0       	push   0xc0022fe8
c000c8da:	e8 e4 01 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c8df:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c8e3:	19 d2                	sbb    edx,edx
c000c8e5:	83 e2 04             	and    edx,0x4
c000c8e8:	81 c2 03 04 00 00    	add    edx,0x403
c000c8ee:	89 14 24             	mov    DWORD PTR [esp],edx
c000c8f1:	6a 01                	push   0x1
c000c8f3:	53                   	push   ebx
c000c8f4:	55                   	push   ebp
c000c8f5:	56                   	push   esi
c000c8f6:	e8 93 f7 ff ff       	call   c000c08e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c8fb:	83 c4 18             	add    esp,0x18
c000c8fe:	53                   	push   ebx
c000c8ff:	56                   	push   esi
c000c900:	e8 fd f0 ff ff       	call   c000ba02 <VAS::getPageTableEntry(unsigned long)>
c000c905:	5a                   	pop    edx
c000c906:	59                   	pop    ecx
c000c907:	ff 30                	push   DWORD PTR [eax]
c000c909:	68 04 30 02 c0       	push   0xc0023004
c000c90e:	e8 b0 01 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c913:	0f 20 d8             	mov    eax,cr3
c000c916:	83 c4 0c             	add    esp,0xc
c000c919:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c91f:	56                   	push   esi
c000c920:	50                   	push   eax
c000c921:	68 07 2f 02 c0       	push   0xc0022f07
c000c926:	e8 98 01 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c92b:	83 c4 10             	add    esp,0x10
c000c92e:	39 df                	cmp    edi,ebx
c000c930:	0f 85 6c ff ff ff    	jne    c000c8a2 <mapVASFirstTime+0x72>
c000c936:	0f 20 d8             	mov    eax,cr3
c000c939:	0f 22 d8             	mov    cr3,eax
c000c93c:	83 c4 0c             	add    esp,0xc
c000c93f:	5b                   	pop    ebx
c000c940:	5e                   	pop    esi
c000c941:	5f                   	pop    edi
c000c942:	5d                   	pop    ebp
c000c943:	c3                   	ret    
c000c944:	83 ec 0c             	sub    esp,0xc
c000c947:	68 9f 2f 02 c0       	push   0xc0022f9f
c000c94c:	e8 72 01 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c951:	83 c4 10             	add    esp,0x10
c000c954:	83 c4 0c             	add    esp,0xc
c000c957:	5b                   	pop    ebx
c000c958:	5e                   	pop    esi
c000c959:	5f                   	pop    edi
c000c95a:	5d                   	pop    ebp
c000c95b:	c3                   	ret    

c000c95c <__cxa_atexit>:
c000c95c:	31 c0                	xor    eax,eax
c000c95e:	c3                   	ret    

c000c95f <__cxa_finalize>:
c000c95f:	c3                   	ret    

c000c960 <__stack_chk_fail>:
c000c960:	55                   	push   ebp
c000c961:	89 e5                	mov    ebp,esp
c000c963:	83 ec 14             	sub    esp,0x14
c000c966:	68 0f 30 02 c0       	push   0xc002300f
c000c96b:	e8 53 01 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c970:	58                   	pop    eax
c000c971:	5a                   	pop    edx
c000c972:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c975:	68 5f 30 02 c0       	push   0xc002305f
c000c97a:	e8 44 01 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c97f:	59                   	pop    ecx
c000c980:	58                   	pop    eax
c000c981:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c984:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c987:	68 5f 30 02 c0       	push   0xc002305f
c000c98c:	e8 32 01 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c991:	5a                   	pop    edx
c000c992:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c995:	59                   	pop    ecx
c000c996:	8b 00                	mov    eax,DWORD PTR [eax]
c000c998:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c99b:	68 5f 30 02 c0       	push   0xc002305f
c000c9a0:	e8 1e 01 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c9a5:	5a                   	pop    edx
c000c9a6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9a9:	59                   	pop    ecx
c000c9aa:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9ac:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9ae:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c9b1:	68 5f 30 02 c0       	push   0xc002305f
c000c9b6:	e8 08 01 00 00       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000c9bb:	c7 04 24 67 30 02 c0 	mov    DWORD PTR [esp],0xc0023067
c000c9c2:	e8 be 79 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000c9c7:	83 c4 10             	add    esp,0x10
c000c9ca:	c9                   	leave  
c000c9cb:	c3                   	ret    

c000c9cc <__cxa_pure_virtual>:
c000c9cc:	83 ec 18             	sub    esp,0x18
c000c9cf:	68 7f 30 02 c0       	push   0xc002307f
c000c9d4:	e8 ac 79 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000c9d9:	83 c4 1c             	add    esp,0x1c
c000c9dc:	c3                   	ret    

c000c9dd <operator new[](unsigned long)>:
c000c9dd:	e9 e1 cf ff ff       	jmp    c00099c3 <malloc>

c000c9e2 <operator delete(void*, unsigned long)>:
c000c9e2:	e9 fc cf ff ff       	jmp    c00099e3 <rfree>

c000c9e7 <operator delete[](void*)>:
c000c9e7:	e9 f7 cf ff ff       	jmp    c00099e3 <rfree>

c000c9ec <operator delete[](void*, unsigned long)>:
c000c9ec:	e9 f2 cf ff ff       	jmp    c00099e3 <rfree>

c000c9f1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000c9f1:	55                   	push   ebp
c000c9f2:	b9 11 00 00 00       	mov    ecx,0x11
c000c9f7:	57                   	push   edi
c000c9f8:	56                   	push   esi
c000c9f9:	be 9a 2a 02 c0       	mov    esi,0xc0022a9a
c000c9fe:	53                   	push   ebx
c000c9ff:	83 ec 20             	sub    esp,0x20
c000ca02:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ca06:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ca0a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000ca0e:	fc                   	cld    
c000ca0f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ca11:	89 ee                	mov    esi,ebp
c000ca13:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ca17:	eb 02                	jmp    c000ca1b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000ca19:	89 c6                	mov    esi,eax
c000ca1b:	31 d2                	xor    edx,edx
c000ca1d:	41                   	inc    ecx
c000ca1e:	89 f0                	mov    eax,esi
c000ca20:	f7 f3                	div    ebx
c000ca22:	39 de                	cmp    esi,ebx
c000ca24:	73 f3                	jae    c000ca19 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000ca26:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ca29:	eb 02                	jmp    c000ca2d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000ca2b:	89 c5                	mov    ebp,eax
c000ca2d:	31 d2                	xor    edx,edx
c000ca2f:	49                   	dec    ecx
c000ca30:	89 e8                	mov    eax,ebp
c000ca32:	f7 f3                	div    ebx
c000ca34:	39 dd                	cmp    ebp,ebx
c000ca36:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000ca3a:	88 11                	mov    BYTE PTR [ecx],dl
c000ca3c:	73 ed                	jae    c000ca2b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000ca3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca42:	83 c4 20             	add    esp,0x20
c000ca45:	5b                   	pop    ebx
c000ca46:	5e                   	pop    esi
c000ca47:	5f                   	pop    edi
c000ca48:	5d                   	pop    ebp
c000ca49:	c3                   	ret    

c000ca4a <Dbg::logc(char)>:
c000ca4a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ca4e:	f6 05 60 64 02 c0 10 	test   BYTE PTR ds:0xc0026460,0x10
c000ca55:	75 12                	jne    c000ca69 <Dbg::logc(char)+0x1f>
c000ca57:	ba fd 03 00 00       	mov    edx,0x3fd
c000ca5c:	ec                   	in     al,dx
c000ca5d:	a8 20                	test   al,0x20
c000ca5f:	74 fb                	je     c000ca5c <Dbg::logc(char)+0x12>
c000ca61:	ba f8 03 00 00       	mov    edx,0x3f8
c000ca66:	88 c8                	mov    al,cl
c000ca68:	ee                   	out    dx,al
c000ca69:	c3                   	ret    

c000ca6a <Dbg::logs(char*)>:
c000ca6a:	53                   	push   ebx
c000ca6b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ca6f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca72:	84 c0                	test   al,al
c000ca74:	74 0f                	je     c000ca85 <Dbg::logs(char*)+0x1b>
c000ca76:	50                   	push   eax
c000ca77:	43                   	inc    ebx
c000ca78:	e8 cd ff ff ff       	call   c000ca4a <Dbg::logc(char)>
c000ca7d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca80:	5a                   	pop    edx
c000ca81:	84 c0                	test   al,al
c000ca83:	75 f1                	jne    c000ca76 <Dbg::logs(char*)+0xc>
c000ca85:	5b                   	pop    ebx
c000ca86:	c3                   	ret    

c000ca87 <Dbg::logWriteInt(unsigned int)>:
c000ca87:	83 ec 10             	sub    esp,0x10
c000ca8a:	6a 0a                	push   0xa
c000ca8c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ca90:	50                   	push   eax
c000ca91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca95:	e8 57 ff ff ff       	call   c000c9f1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ca9a:	50                   	push   eax
c000ca9b:	e8 ca ff ff ff       	call   c000ca6a <Dbg::logs(char*)>
c000caa0:	83 c4 20             	add    esp,0x20
c000caa3:	c3                   	ret    

c000caa4 <Dbg::logWriteIntBase(unsigned int, int)>:
c000caa4:	83 ec 10             	sub    esp,0x10
c000caa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000caab:	8d 44 24 08          	lea    eax,[esp+0x8]
c000caaf:	50                   	push   eax
c000cab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cab4:	e8 38 ff ff ff       	call   c000c9f1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cab9:	50                   	push   eax
c000caba:	e8 ab ff ff ff       	call   c000ca6a <Dbg::logs(char*)>
c000cabf:	83 c4 20             	add    esp,0x20
c000cac2:	c3                   	ret    

c000cac3 <Dbg::kprintf(char const*, ...)>:
c000cac3:	55                   	push   ebp
c000cac4:	57                   	push   edi
c000cac5:	56                   	push   esi
c000cac6:	53                   	push   ebx
c000cac7:	83 ec 0c             	sub    esp,0xc
c000caca:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cace:	f6 05 60 64 02 c0 10 	test   BYTE PTR ds:0xc0026460,0x10
c000cad5:	74 08                	je     c000cadf <Dbg::kprintf(char const*, ...)+0x1c>
c000cad7:	83 c4 0c             	add    esp,0xc
c000cada:	5b                   	pop    ebx
c000cadb:	5e                   	pop    esi
c000cadc:	5f                   	pop    edi
c000cadd:	5d                   	pop    ebp
c000cade:	c3                   	ret    
c000cadf:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cae3:	31 db                	xor    ebx,ebx
c000cae5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cae9:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000caec:	84 c0                	test   al,al
c000caee:	74 e7                	je     c000cad7 <Dbg::kprintf(char const*, ...)+0x14>
c000caf0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000caf3:	3c 25                	cmp    al,0x25
c000caf5:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000caf8:	75 44                	jne    c000cb3e <Dbg::kprintf(char const*, ...)+0x7b>
c000cafa:	83 c3 02             	add    ebx,0x2
c000cafd:	8a 07                	mov    al,BYTE PTR [edi]
c000caff:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cb02:	83 e8 25             	sub    eax,0x25
c000cb05:	3c 53                	cmp    al,0x53
c000cb07:	0f 87 c9 00 00 00    	ja     c000cbd6 <Dbg::kprintf(char const*, ...)+0x113>
c000cb0d:	0f b6 c0             	movzx  eax,al
c000cb10:	ff 24 85 94 30 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcf6c]
c000cb17:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb1b:	89 c8                	mov    eax,ecx
c000cb1d:	83 c1 04             	add    ecx,0x4
c000cb20:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb24:	ff 30                	push   DWORD PTR [eax]
c000cb26:	e8 5c ff ff ff       	call   c000ca87 <Dbg::logWriteInt(unsigned int)>
c000cb2b:	5f                   	pop    edi
c000cb2c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cb30:	84 c0                	test   al,al
c000cb32:	74 a3                	je     c000cad7 <Dbg::kprintf(char const*, ...)+0x14>
c000cb34:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cb37:	3c 25                	cmp    al,0x25
c000cb39:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cb3c:	74 bc                	je     c000cafa <Dbg::kprintf(char const*, ...)+0x37>
c000cb3e:	50                   	push   eax
c000cb3f:	89 eb                	mov    ebx,ebp
c000cb41:	e8 04 ff ff ff       	call   c000ca4a <Dbg::logc(char)>
c000cb46:	89 fd                	mov    ebp,edi
c000cb48:	58                   	pop    eax
c000cb49:	eb e1                	jmp    c000cb2c <Dbg::kprintf(char const*, ...)+0x69>
c000cb4b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb4f:	89 c8                	mov    eax,ecx
c000cb51:	83 c1 04             	add    ecx,0x4
c000cb54:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb58:	ff 30                	push   DWORD PTR [eax]
c000cb5a:	e8 0b ff ff ff       	call   c000ca6a <Dbg::logs(char*)>
c000cb5f:	58                   	pop    eax
c000cb60:	eb ca                	jmp    c000cb2c <Dbg::kprintf(char const*, ...)+0x69>
c000cb62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb66:	89 d0                	mov    eax,edx
c000cb68:	83 c2 04             	add    edx,0x4
c000cb6b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb6f:	ff 30                	push   DWORD PTR [eax]
c000cb71:	e8 11 ff ff ff       	call   c000ca87 <Dbg::logWriteInt(unsigned int)>
c000cb76:	58                   	pop    eax
c000cb77:	eb b3                	jmp    c000cb2c <Dbg::kprintf(char const*, ...)+0x69>
c000cb79:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb7d:	89 d0                	mov    eax,edx
c000cb7f:	83 c2 04             	add    edx,0x4
c000cb82:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cb85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb89:	50                   	push   eax
c000cb8a:	e8 bb fe ff ff       	call   c000ca4a <Dbg::logc(char)>
c000cb8f:	58                   	pop    eax
c000cb90:	eb 9a                	jmp    c000cb2c <Dbg::kprintf(char const*, ...)+0x69>
c000cb92:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb96:	89 c8                	mov    eax,ecx
c000cb98:	83 c1 04             	add    ecx,0x4
c000cb9b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb9f:	6a 10                	push   0x10
c000cba1:	ff 30                	push   DWORD PTR [eax]
c000cba3:	e8 fc fe ff ff       	call   c000caa4 <Dbg::logWriteIntBase(unsigned int, int)>
c000cba8:	59                   	pop    ecx
c000cba9:	5f                   	pop    edi
c000cbaa:	eb 80                	jmp    c000cb2c <Dbg::kprintf(char const*, ...)+0x69>
c000cbac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cbb0:	89 d0                	mov    eax,edx
c000cbb2:	83 c2 08             	add    edx,0x8
c000cbb5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cbb9:	6a 10                	push   0x10
c000cbbb:	ff 30                	push   DWORD PTR [eax]
c000cbbd:	e8 e2 fe ff ff       	call   c000caa4 <Dbg::logWriteIntBase(unsigned int, int)>
c000cbc2:	58                   	pop    eax
c000cbc3:	5a                   	pop    edx
c000cbc4:	e9 63 ff ff ff       	jmp    c000cb2c <Dbg::kprintf(char const*, ...)+0x69>
c000cbc9:	6a 25                	push   0x25
c000cbcb:	e8 7a fe ff ff       	call   c000ca4a <Dbg::logc(char)>
c000cbd0:	58                   	pop    eax
c000cbd1:	e9 56 ff ff ff       	jmp    c000cb2c <Dbg::kprintf(char const*, ...)+0x69>
c000cbd6:	6a 25                	push   0x25
c000cbd8:	e8 6d fe ff ff       	call   c000ca4a <Dbg::logc(char)>
c000cbdd:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cbe0:	50                   	push   eax
c000cbe1:	e8 64 fe ff ff       	call   c000ca4a <Dbg::logc(char)>
c000cbe6:	5a                   	pop    edx
c000cbe7:	59                   	pop    ecx
c000cbe8:	e9 3f ff ff ff       	jmp    c000cb2c <Dbg::kprintf(char const*, ...)+0x69>
c000cbed:	90                   	nop

c000cbee <File::read(unsigned long long, void*, int*)>:
c000cbee:	53                   	push   ebx
c000cbef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cbf3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cbf7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cbfe:	3c 19                	cmp    al,0x19
c000cc00:	77 35                	ja     c000cc37 <File::read(unsigned long long, void*, int*)+0x49>
c000cc02:	8b 04 85 40 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95c0]
c000cc09:	85 c0                	test   eax,eax
c000cc0b:	74 2a                	je     c000cc37 <File::read(unsigned long long, void*, int*)+0x49>
c000cc0d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc13:	85 c0                	test   eax,eax
c000cc15:	74 20                	je     c000cc37 <File::read(unsigned long long, void*, int*)+0x49>
c000cc17:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc1b:	74 21                	je     c000cc3e <File::read(unsigned long long, void*, int*)+0x50>
c000cc1d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc1f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc23:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc2d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc31:	5b                   	pop    ebx
c000cc32:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000cc35:	ff e0                	jmp    eax
c000cc37:	b8 0b 00 00 00       	mov    eax,0xb
c000cc3c:	eb 05                	jmp    c000cc43 <File::read(unsigned long long, void*, int*)+0x55>
c000cc3e:	b8 05 00 00 00       	mov    eax,0x5
c000cc43:	5b                   	pop    ebx
c000cc44:	c3                   	ret    
c000cc45:	90                   	nop

c000cc46 <File::write(unsigned long long, void*, int*)>:
c000cc46:	53                   	push   ebx
c000cc47:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc4b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cc4f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cc56:	3c 19                	cmp    al,0x19
c000cc58:	77 35                	ja     c000cc8f <File::write(unsigned long long, void*, int*)+0x49>
c000cc5a:	8b 04 85 40 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95c0]
c000cc61:	85 c0                	test   eax,eax
c000cc63:	74 2a                	je     c000cc8f <File::write(unsigned long long, void*, int*)+0x49>
c000cc65:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc6b:	85 c0                	test   eax,eax
c000cc6d:	74 20                	je     c000cc8f <File::write(unsigned long long, void*, int*)+0x49>
c000cc6f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc73:	74 21                	je     c000cc96 <File::write(unsigned long long, void*, int*)+0x50>
c000cc75:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc77:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc7b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc85:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc89:	5b                   	pop    ebx
c000cc8a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000cc8d:	ff e0                	jmp    eax
c000cc8f:	b8 0b 00 00 00       	mov    eax,0xb
c000cc94:	eb 05                	jmp    c000cc9b <File::write(unsigned long long, void*, int*)+0x55>
c000cc96:	b8 05 00 00 00       	mov    eax,0x5
c000cc9b:	5b                   	pop    ebx
c000cc9c:	c3                   	ret    
c000cc9d:	90                   	nop

c000cc9e <Directory::read(unsigned long long, void*, int*)>:
c000cc9e:	53                   	push   ebx
c000cc9f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cca3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cca7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ccae:	3c 19                	cmp    al,0x19
c000ccb0:	77 35                	ja     c000cce7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ccb2:	8b 04 85 40 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95c0]
c000ccb9:	85 c0                	test   eax,eax
c000ccbb:	74 2a                	je     c000cce7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ccbd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ccc3:	85 c0                	test   eax,eax
c000ccc5:	74 20                	je     c000cce7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ccc7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cccb:	74 21                	je     c000ccee <Directory::read(unsigned long long, void*, int*)+0x50>
c000cccd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cccf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ccd3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ccd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ccdd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cce1:	5b                   	pop    ebx
c000cce2:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000cce5:	ff e0                	jmp    eax
c000cce7:	b8 0b 00 00 00       	mov    eax,0xb
c000ccec:	eb 05                	jmp    c000ccf3 <Directory::read(unsigned long long, void*, int*)+0x55>
c000ccee:	b8 05 00 00 00       	mov    eax,0x5
c000ccf3:	5b                   	pop    ebx
c000ccf4:	c3                   	ret    
c000ccf5:	90                   	nop

c000ccf6 <Directory::write(unsigned long long, void*, int*)>:
c000ccf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccfa:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000cd01:	b8 0b 00 00 00       	mov    eax,0xb
c000cd06:	80 fa 19             	cmp    dl,0x19
c000cd09:	77 18                	ja     c000cd23 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cd0b:	8b 14 95 40 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95c0]
c000cd12:	85 d2                	test   edx,edx
c000cd14:	74 0d                	je     c000cd23 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cd16:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000cd1d:	19 c0                	sbb    eax,eax
c000cd1f:	83 e0 0a             	and    eax,0xa
c000cd22:	40                   	inc    eax
c000cd23:	c3                   	ret    

c000cd24 <File::isAtty()>:
c000cd24:	31 c0                	xor    eax,eax
c000cd26:	c3                   	ret    
c000cd27:	90                   	nop

c000cd28 <Directory::isAtty()>:
c000cd28:	31 c0                	xor    eax,eax
c000cd2a:	c3                   	ret    
c000cd2b:	90                   	nop

c000cd2c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000cd2c:	b8 0a 00 00 00       	mov    eax,0xa
c000cd31:	c3                   	ret    

c000cd32 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000cd32:	b8 0a 00 00 00       	mov    eax,0xa
c000cd37:	c3                   	ret    

c000cd38 <Filesystem::allocateSwapfile(char const*, int)>:
c000cd38:	31 c0                	xor    eax,eax
c000cd3a:	31 d2                	xor    edx,edx
c000cd3c:	c3                   	ret    
c000cd3d:	90                   	nop

c000cd3e <File::~File()>:
c000cd3e:	83 ec 0c             	sub    esp,0xc
c000cd41:	ba 54 32 02 c0       	mov    edx,0xc0023254
c000cd46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd4a:	89 10                	mov    DWORD PTR [eax],edx
c000cd4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd50:	83 ec 0c             	sub    esp,0xc
c000cd53:	50                   	push   eax
c000cd54:	e8 37 e7 ff ff       	call   c000b490 <UnixFile::~UnixFile()>
c000cd59:	83 c4 10             	add    esp,0x10
c000cd5c:	90                   	nop
c000cd5d:	83 c4 0c             	add    esp,0xc
c000cd60:	c3                   	ret    
c000cd61:	90                   	nop

c000cd62 <File::~File()>:
c000cd62:	83 ec 0c             	sub    esp,0xc
c000cd65:	83 ec 0c             	sub    esp,0xc
c000cd68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd6c:	e8 cd ff ff ff       	call   c000cd3e <File::~File()>
c000cd71:	83 c4 10             	add    esp,0x10
c000cd74:	83 ec 08             	sub    esp,0x8
c000cd77:	68 14 01 00 00       	push   0x114
c000cd7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd80:	e8 5d fc ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c000cd85:	83 c4 10             	add    esp,0x10
c000cd88:	83 c4 0c             	add    esp,0xc
c000cd8b:	c3                   	ret    

c000cd8c <Directory::~Directory()>:
c000cd8c:	83 ec 0c             	sub    esp,0xc
c000cd8f:	ba 70 32 02 c0       	mov    edx,0xc0023270
c000cd94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd98:	89 10                	mov    DWORD PTR [eax],edx
c000cd9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd9e:	83 ec 0c             	sub    esp,0xc
c000cda1:	50                   	push   eax
c000cda2:	e8 e9 e6 ff ff       	call   c000b490 <UnixFile::~UnixFile()>
c000cda7:	83 c4 10             	add    esp,0x10
c000cdaa:	90                   	nop
c000cdab:	83 c4 0c             	add    esp,0xc
c000cdae:	c3                   	ret    
c000cdaf:	90                   	nop

c000cdb0 <Directory::~Directory()>:
c000cdb0:	83 ec 0c             	sub    esp,0xc
c000cdb3:	83 ec 0c             	sub    esp,0xc
c000cdb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdba:	e8 cd ff ff ff       	call   c000cd8c <Directory::~Directory()>
c000cdbf:	83 c4 10             	add    esp,0x10
c000cdc2:	83 ec 08             	sub    esp,0x8
c000cdc5:	68 14 01 00 00       	push   0x114
c000cdca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdce:	e8 0f fc ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c000cdd3:	83 c4 10             	add    esp,0x10
c000cdd6:	83 c4 0c             	add    esp,0xc
c000cdd9:	c3                   	ret    

c000cdda <Filesystem::Filesystem()>:
c000cdda:	ba ec 31 02 c0       	mov    edx,0xc00231ec
c000cddf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cde3:	89 10                	mov    DWORD PTR [eax],edx
c000cde5:	8b 15 b4 65 02 c0    	mov    edx,DWORD PTR ds:0xc00265b4
c000cdeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000cdf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdf6:	a3 b4 65 02 c0       	mov    ds:0xc00265b4,eax
c000cdfb:	90                   	nop
c000cdfc:	c3                   	ret    
c000cdfd:	90                   	nop

c000cdfe <Filesystem::~Filesystem()>:
c000cdfe:	ba ec 31 02 c0       	mov    edx,0xc00231ec
c000ce03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce07:	89 10                	mov    DWORD PTR [eax],edx
c000ce09:	90                   	nop
c000ce0a:	c3                   	ret    
c000ce0b:	90                   	nop

c000ce0c <Filesystem::~Filesystem()>:
c000ce0c:	83 ec 0c             	sub    esp,0xc
c000ce0f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ce13:	e8 e6 ff ff ff       	call   c000cdfe <Filesystem::~Filesystem()>
c000ce18:	83 c4 04             	add    esp,0x4
c000ce1b:	83 ec 08             	sub    esp,0x8
c000ce1e:	6a 08                	push   0x8
c000ce20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce24:	e8 b9 fb ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c000ce29:	83 c4 10             	add    esp,0x10
c000ce2c:	83 c4 0c             	add    esp,0xc
c000ce2f:	c3                   	ret    

c000ce30 <Fs::getcwd(Process*, char*, int)>:
c000ce30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce34:	31 c0                	xor    eax,eax
c000ce36:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ce39:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ce3d:	7d 15                	jge    c000ce54 <Fs::getcwd(Process*, char*, int)+0x24>
c000ce3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ce43:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ce4a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ce4d:	84 c9                	test   cl,cl
c000ce4f:	74 06                	je     c000ce57 <Fs::getcwd(Process*, char*, int)+0x27>
c000ce51:	40                   	inc    eax
c000ce52:	eb e2                	jmp    c000ce36 <Fs::getcwd(Process*, char*, int)+0x6>
c000ce54:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ce57:	31 c0                	xor    eax,eax
c000ce59:	c3                   	ret    

c000ce5a <Fs::initVFS()>:
c000ce5a:	83 ec 18             	sub    esp,0x18
c000ce5d:	6a 08                	push   0x8
c000ce5f:	e8 5f cb ff ff       	call   c00099c3 <malloc>
c000ce64:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce67:	e8 70 e3 00 00       	call   c001b1dc <FAT::FAT()>
c000ce6c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ce73:	e8 4b cb ff ff       	call   c00099c3 <malloc>
c000ce78:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce7b:	e8 ba f5 00 00       	call   c001c43a <ISO9660::ISO9660()>
c000ce80:	83 c4 1c             	add    esp,0x1c
c000ce83:	c3                   	ret    

c000ce84 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ce84:	55                   	push   ebp
c000ce85:	57                   	push   edi
c000ce86:	56                   	push   esi
c000ce87:	53                   	push   ebx
c000ce88:	81 ec 10 04 00 00    	sub    esp,0x410
c000ce8e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ce95:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ce9c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000cea3:	68 00 04 00 00       	push   0x400
c000cea8:	6a 00                	push   0x0
c000ceaa:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ceae:	56                   	push   esi
c000ceaf:	e8 d0 37 ff ff       	call   c0000684 <memset>
c000ceb4:	83 c4 10             	add    esp,0x10
c000ceb7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000cebb:	75 0b                	jne    c000cec8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000cebd:	50                   	push   eax
c000cebe:	50                   	push   eax
c000cebf:	57                   	push   edi
c000cec0:	56                   	push   esi
c000cec1:	e8 7a 38 ff ff       	call   c0000740 <strcpy>
c000cec6:	eb 41                	jmp    c000cf09 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000cec8:	8a 07                	mov    al,BYTE PTR [edi]
c000ceca:	3c 5c                	cmp    al,0x5c
c000cecc:	74 04                	je     c000ced2 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000cece:	3c 2f                	cmp    al,0x2f
c000ced0:	75 18                	jne    c000ceea <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000ced2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ced5:	3c 60                	cmp    al,0x60
c000ced7:	7e 03                	jle    c000cedc <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000ced9:	83 e8 20             	sub    eax,0x20
c000cedc:	88 04 24             	mov    BYTE PTR [esp],al
c000cedf:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000cee6:	50                   	push   eax
c000cee7:	50                   	push   eax
c000cee8:	eb 18                	jmp    c000cf02 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000ceea:	50                   	push   eax
c000ceeb:	50                   	push   eax
c000ceec:	55                   	push   ebp
c000ceed:	56                   	push   esi
c000ceee:	e8 4d 38 ff ff       	call   c0000740 <strcpy>
c000cef3:	5a                   	pop    edx
c000cef4:	59                   	pop    ecx
c000cef5:	68 7a 48 02 c0       	push   0xc002487a
c000cefa:	56                   	push   esi
c000cefb:	e8 80 39 ff ff       	call   c0000880 <strcat>
c000cf00:	5d                   	pop    ebp
c000cf01:	58                   	pop    eax
c000cf02:	57                   	push   edi
c000cf03:	56                   	push   esi
c000cf04:	e8 77 39 ff ff       	call   c0000880 <strcat>
c000cf09:	83 c4 10             	add    esp,0x10
c000cf0c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000cf0f:	3c 60                	cmp    al,0x60
c000cf11:	7e 03                	jle    c000cf16 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000cf13:	83 e8 20             	sub    eax,0x20
c000cf16:	88 04 24             	mov    BYTE PTR [esp],al
c000cf19:	88 03                	mov    BYTE PTR [ebx],al
c000cf1b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000cf22:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000cf28:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000cf2c:	bf 03 00 00 00       	mov    edi,0x3
c000cf31:	b8 03 00 00 00       	mov    eax,0x3
c000cf36:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000cf39:	84 d2                	test   dl,dl
c000cf3b:	0f 84 91 00 00 00    	je     c000cfd2 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000cf41:	8d 4f 01             	lea    ecx,[edi+0x1]
c000cf44:	80 fa 5c             	cmp    dl,0x5c
c000cf47:	74 05                	je     c000cf4e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000cf49:	80 fa 2f             	cmp    dl,0x2f
c000cf4c:	75 12                	jne    c000cf60 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cf4e:	89 c5                	mov    ebp,eax
c000cf50:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cf55:	74 09                	je     c000cf60 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cf57:	40                   	inc    eax
c000cf58:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000cf5c:	89 cf                	mov    edi,ecx
c000cf5e:	eb d6                	jmp    c000cf36 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000cf60:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000cf65:	75 5b                	jne    c000cfc2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cf67:	80 fa 2e             	cmp    dl,0x2e
c000cf6a:	75 56                	jne    c000cfc2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cf6c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000cf70:	74 19                	je     c000cf8b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000cf72:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cf77:	74 53                	je     c000cfcc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cf79:	89 f9                	mov    ecx,edi
c000cf7b:	41                   	inc    ecx
c000cf7c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cf7f:	80 fa 2f             	cmp    dl,0x2f
c000cf82:	74 f7                	je     c000cf7b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cf84:	80 fa 5c             	cmp    dl,0x5c
c000cf87:	74 f2                	je     c000cf7b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cf89:	eb d1                	jmp    c000cf5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf8b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cf90:	74 3a                	je     c000cfcc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cf92:	83 f8 03             	cmp    eax,0x3
c000cf95:	74 c5                	je     c000cf5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf97:	41                   	inc    ecx
c000cf98:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cf9b:	80 fa 2f             	cmp    dl,0x2f
c000cf9e:	74 f7                	je     c000cf97 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cfa0:	80 fa 5c             	cmp    dl,0x5c
c000cfa3:	74 f2                	je     c000cf97 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cfa5:	48                   	dec    eax
c000cfa6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cfaa:	75 06                	jne    c000cfb2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cfac:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cfb0:	eb f3                	jmp    c000cfa5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000cfb2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cfb6:	74 07                	je     c000cfbf <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000cfb8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cfbc:	48                   	dec    eax
c000cfbd:	eb f3                	jmp    c000cfb2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cfbf:	40                   	inc    eax
c000cfc0:	eb 9a                	jmp    c000cf5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cfc2:	80 fa 2f             	cmp    dl,0x2f
c000cfc5:	74 95                	je     c000cf5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cfc7:	80 fa 5c             	cmp    dl,0x5c
c000cfca:	74 90                	je     c000cf5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cfcc:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000cfcf:	40                   	inc    eax
c000cfd0:	eb 8a                	jmp    c000cf5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cfd2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cfd6:	83 ec 0c             	sub    esp,0xc
c000cfd9:	53                   	push   ebx
c000cfda:	e8 c1 36 ff ff       	call   c00006a0 <strlen>
c000cfdf:	83 c4 10             	add    esp,0x10
c000cfe2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000cfe7:	75 26                	jne    c000d00f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000cfe9:	83 ec 0c             	sub    esp,0xc
c000cfec:	53                   	push   ebx
c000cfed:	e8 ae 36 ff ff       	call   c00006a0 <strlen>
c000cff2:	83 c4 10             	add    esp,0x10
c000cff5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000cffa:	74 26                	je     c000d022 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000cffc:	83 ec 0c             	sub    esp,0xc
c000cfff:	53                   	push   ebx
c000d000:	e8 9b 36 ff ff       	call   c00006a0 <strlen>
c000d005:	83 c4 10             	add    esp,0x10
c000d008:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d00d:	eb c7                	jmp    c000cfd6 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d00f:	83 ec 0c             	sub    esp,0xc
c000d012:	53                   	push   ebx
c000d013:	e8 88 36 ff ff       	call   c00006a0 <strlen>
c000d018:	83 c4 10             	add    esp,0x10
c000d01b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d020:	74 c7                	je     c000cfe9 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d022:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d028:	5b                   	pop    ebx
c000d029:	5e                   	pop    esi
c000d02a:	5f                   	pop    edi
c000d02b:	5d                   	pop    ebp
c000d02c:	c3                   	ret    
c000d02d:	90                   	nop

c000d02e <File::File(char const*, Process*)>:
c000d02e:	83 ec 0c             	sub    esp,0xc
c000d031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d035:	83 ec 08             	sub    esp,0x8
c000d038:	6a 00                	push   0x0
c000d03a:	50                   	push   eax
c000d03b:	e8 6e e2 ff ff       	call   c000b2ae <UnixFile::UnixFile(int)>
c000d040:	83 c4 10             	add    esp,0x10
c000d043:	ba 54 32 02 c0       	mov    edx,0xc0023254
c000d048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d04c:	89 10                	mov    DWORD PTR [eax],edx
c000d04e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d052:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d05c:	83 c0 0d             	add    eax,0xd
c000d05f:	83 ec 04             	sub    esp,0x4
c000d062:	52                   	push   edx
c000d063:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d067:	50                   	push   eax
c000d068:	e8 17 fe ff ff       	call   c000ce84 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d06d:	83 c4 10             	add    esp,0x10
c000d070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d074:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d077:	8d 50 bf             	lea    edx,[eax-0x41]
c000d07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d07e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d088:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d08c:	90                   	nop
c000d08d:	83 c4 0c             	add    esp,0xc
c000d090:	c3                   	ret    
c000d091:	90                   	nop

c000d092 <File::open(FileOpenMode)>:
c000d092:	53                   	push   ebx
c000d093:	b8 0b 00 00 00       	mov    eax,0xb
c000d098:	83 ec 08             	sub    esp,0x8
c000d09b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d09f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d0a6:	80 fa 19             	cmp    dl,0x19
c000d0a9:	77 40                	ja     c000d0eb <File::open(FileOpenMode)+0x59>
c000d0ab:	8b 14 95 40 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95c0]
c000d0b2:	85 d2                	test   edx,edx
c000d0b4:	74 35                	je     c000d0eb <File::open(FileOpenMode)+0x59>
c000d0b6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d0bc:	85 d2                	test   edx,edx
c000d0be:	74 2b                	je     c000d0eb <File::open(FileOpenMode)+0x59>
c000d0c0:	b8 06 00 00 00       	mov    eax,0x6
c000d0c5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d0c9:	75 20                	jne    c000d0eb <File::open(FileOpenMode)+0x59>
c000d0cb:	8b 02                	mov    eax,DWORD PTR [edx]
c000d0cd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d0d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d7:	51                   	push   ecx
c000d0d8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d0db:	51                   	push   ecx
c000d0dc:	52                   	push   edx
c000d0dd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d0e0:	83 c4 10             	add    esp,0x10
c000d0e3:	85 c0                	test   eax,eax
c000d0e5:	75 04                	jne    c000d0eb <File::open(FileOpenMode)+0x59>
c000d0e7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d0eb:	83 c4 08             	add    esp,0x8
c000d0ee:	5b                   	pop    ebx
c000d0ef:	c3                   	ret    

c000d0f0 <File::close()>:
c000d0f0:	53                   	push   ebx
c000d0f1:	b8 0b 00 00 00       	mov    eax,0xb
c000d0f6:	83 ec 08             	sub    esp,0x8
c000d0f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d0fd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d104:	80 fa 19             	cmp    dl,0x19
c000d107:	77 41                	ja     c000d14a <File::close()+0x5a>
c000d109:	8b 1c 95 40 6a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd95c0]
c000d110:	85 db                	test   ebx,ebx
c000d112:	74 36                	je     c000d14a <File::close()+0x5a>
c000d114:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d11b:	74 2d                	je     c000d14a <File::close()+0x5a>
c000d11d:	b8 05 00 00 00       	mov    eax,0x5
c000d122:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d126:	74 22                	je     c000d14a <File::close()+0x5a>
c000d128:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d12c:	8b 04 95 40 6a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd95c0]
c000d133:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d139:	53                   	push   ebx
c000d13a:	53                   	push   ebx
c000d13b:	8b 10                	mov    edx,DWORD PTR [eax]
c000d13d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d143:	50                   	push   eax
c000d144:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d147:	83 c4 10             	add    esp,0x10
c000d14a:	83 c4 08             	add    esp,0x8
c000d14d:	5b                   	pop    ebx
c000d14e:	c3                   	ret    
c000d14f:	90                   	nop

c000d150 <File::seek(unsigned long long)>:
c000d150:	56                   	push   esi
c000d151:	53                   	push   ebx
c000d152:	b8 0b 00 00 00       	mov    eax,0xb
c000d157:	51                   	push   ecx
c000d158:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d15c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d160:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d167:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d16b:	80 fa 19             	cmp    dl,0x19
c000d16e:	77 31                	ja     c000d1a1 <File::seek(unsigned long long)+0x51>
c000d170:	8b 14 95 40 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95c0]
c000d177:	85 d2                	test   edx,edx
c000d179:	74 26                	je     c000d1a1 <File::seek(unsigned long long)+0x51>
c000d17b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d181:	85 d2                	test   edx,edx
c000d183:	74 1c                	je     c000d1a1 <File::seek(unsigned long long)+0x51>
c000d185:	b8 05 00 00 00       	mov    eax,0x5
c000d18a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d18e:	74 11                	je     c000d1a1 <File::seek(unsigned long long)+0x51>
c000d190:	8b 02                	mov    eax,DWORD PTR [edx]
c000d192:	53                   	push   ebx
c000d193:	51                   	push   ecx
c000d194:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d19a:	52                   	push   edx
c000d19b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d19e:	83 c4 10             	add    esp,0x10
c000d1a1:	5a                   	pop    edx
c000d1a2:	5b                   	pop    ebx
c000d1a3:	5e                   	pop    esi
c000d1a4:	c3                   	ret    
c000d1a5:	90                   	nop

c000d1a6 <File::tell(unsigned long long*)>:
c000d1a6:	83 ec 0c             	sub    esp,0xc
c000d1a9:	b8 0b 00 00 00       	mov    eax,0xb
c000d1ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d1b2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d1b9:	80 fa 19             	cmp    dl,0x19
c000d1bc:	77 34                	ja     c000d1f2 <File::tell(unsigned long long*)+0x4c>
c000d1be:	8b 14 95 40 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95c0]
c000d1c5:	85 d2                	test   edx,edx
c000d1c7:	74 29                	je     c000d1f2 <File::tell(unsigned long long*)+0x4c>
c000d1c9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d1cf:	85 d2                	test   edx,edx
c000d1d1:	74 1f                	je     c000d1f2 <File::tell(unsigned long long*)+0x4c>
c000d1d3:	b8 05 00 00 00       	mov    eax,0x5
c000d1d8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d1dc:	74 14                	je     c000d1f2 <File::tell(unsigned long long*)+0x4c>
c000d1de:	50                   	push   eax
c000d1df:	8b 02                	mov    eax,DWORD PTR [edx]
c000d1e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d1e5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d1eb:	52                   	push   edx
c000d1ec:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d1ef:	83 c4 10             	add    esp,0x10
c000d1f2:	83 c4 0c             	add    esp,0xc
c000d1f5:	c3                   	ret    

c000d1f6 <File::rewind()>:
c000d1f6:	83 ec 10             	sub    esp,0x10
c000d1f9:	6a 00                	push   0x0
c000d1fb:	6a 00                	push   0x0
c000d1fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d201:	e8 4a ff ff ff       	call   c000d150 <File::seek(unsigned long long)>
c000d206:	83 c4 1c             	add    esp,0x1c
c000d209:	c3                   	ret    

c000d20a <File::unlink()>:
c000d20a:	83 ec 0c             	sub    esp,0xc
c000d20d:	b8 0b 00 00 00       	mov    eax,0xb
c000d212:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d216:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d21d:	80 f9 19             	cmp    cl,0x19
c000d220:	77 2f                	ja     c000d251 <File::unlink()+0x47>
c000d222:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c000d229:	85 c9                	test   ecx,ecx
c000d22b:	74 24                	je     c000d251 <File::unlink()+0x47>
c000d22d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d233:	85 c9                	test   ecx,ecx
c000d235:	74 1a                	je     c000d251 <File::unlink()+0x47>
c000d237:	b8 06 00 00 00       	mov    eax,0x6
c000d23c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d240:	75 0f                	jne    c000d251 <File::unlink()+0x47>
c000d242:	83 c2 0d             	add    edx,0xd
c000d245:	50                   	push   eax
c000d246:	50                   	push   eax
c000d247:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d249:	52                   	push   edx
c000d24a:	51                   	push   ecx
c000d24b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d24e:	83 c4 10             	add    esp,0x10
c000d251:	83 c4 0c             	add    esp,0xc
c000d254:	c3                   	ret    
c000d255:	90                   	nop

c000d256 <File::rename(char const*)>:
c000d256:	83 ec 0c             	sub    esp,0xc
c000d259:	b8 0b 00 00 00       	mov    eax,0xb
c000d25e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d262:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d269:	80 f9 19             	cmp    cl,0x19
c000d26c:	77 32                	ja     c000d2a0 <File::rename(char const*)+0x4a>
c000d26e:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c000d275:	85 c9                	test   ecx,ecx
c000d277:	74 27                	je     c000d2a0 <File::rename(char const*)+0x4a>
c000d279:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d27f:	85 c9                	test   ecx,ecx
c000d281:	74 1d                	je     c000d2a0 <File::rename(char const*)+0x4a>
c000d283:	b8 06 00 00 00       	mov    eax,0x6
c000d288:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d28c:	75 12                	jne    c000d2a0 <File::rename(char const*)+0x4a>
c000d28e:	83 c2 0d             	add    edx,0xd
c000d291:	50                   	push   eax
c000d292:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d294:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d298:	52                   	push   edx
c000d299:	51                   	push   ecx
c000d29a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	83 c4 0c             	add    esp,0xc
c000d2a3:	c3                   	ret    

c000d2a4 <File::chfatattr(unsigned char, unsigned char)>:
c000d2a4:	57                   	push   edi
c000d2a5:	b8 0b 00 00 00       	mov    eax,0xb
c000d2aa:	56                   	push   esi
c000d2ab:	53                   	push   ebx
c000d2ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d2b0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d2b4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d2bb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d2bf:	80 f9 19             	cmp    cl,0x19
c000d2c2:	77 37                	ja     c000d2fb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d2c4:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c000d2cb:	85 c9                	test   ecx,ecx
c000d2cd:	74 2c                	je     c000d2fb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d2cf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d2d5:	85 c9                	test   ecx,ecx
c000d2d7:	74 22                	je     c000d2fb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d2d9:	b8 06 00 00 00       	mov    eax,0x6
c000d2de:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d2e2:	75 17                	jne    c000d2fb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d2e4:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d2e6:	89 f0                	mov    eax,esi
c000d2e8:	83 c2 0d             	add    edx,0xd
c000d2eb:	0f b6 f0             	movzx  esi,al
c000d2ee:	0f b6 db             	movzx  ebx,bl
c000d2f1:	56                   	push   esi
c000d2f2:	53                   	push   ebx
c000d2f3:	52                   	push   edx
c000d2f4:	51                   	push   ecx
c000d2f5:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d2f8:	83 c4 10             	add    esp,0x10
c000d2fb:	5b                   	pop    ebx
c000d2fc:	5e                   	pop    esi
c000d2fd:	5f                   	pop    edi
c000d2fe:	c3                   	ret    
c000d2ff:	90                   	nop

c000d300 <File::exists()>:
c000d300:	83 ec 0c             	sub    esp,0xc
c000d303:	31 c0                	xor    eax,eax
c000d305:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d309:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d310:	80 f9 19             	cmp    cl,0x19
c000d313:	77 24                	ja     c000d339 <File::exists()+0x39>
c000d315:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c000d31c:	85 c9                	test   ecx,ecx
c000d31e:	74 19                	je     c000d339 <File::exists()+0x39>
c000d320:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d326:	85 c9                	test   ecx,ecx
c000d328:	74 0f                	je     c000d339 <File::exists()+0x39>
c000d32a:	83 c2 0d             	add    edx,0xd
c000d32d:	50                   	push   eax
c000d32e:	50                   	push   eax
c000d32f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d331:	52                   	push   edx
c000d332:	51                   	push   ecx
c000d333:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d336:	83 c4 10             	add    esp,0x10
c000d339:	83 c4 0c             	add    esp,0xc
c000d33c:	c3                   	ret    
c000d33d:	90                   	nop

c000d33e <File::stat(unsigned long long*, bool*)>:
c000d33e:	56                   	push   esi
c000d33f:	53                   	push   ebx
c000d340:	50                   	push   eax
c000d341:	b8 0b 00 00 00       	mov    eax,0xb
c000d346:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d34a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d34e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d355:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d359:	80 f9 19             	cmp    cl,0x19
c000d35c:	77 3d                	ja     c000d39b <File::stat(unsigned long long*, bool*)+0x5d>
c000d35e:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c000d365:	85 c9                	test   ecx,ecx
c000d367:	74 32                	je     c000d39b <File::stat(unsigned long long*, bool*)+0x5d>
c000d369:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d36f:	85 c9                	test   ecx,ecx
c000d371:	74 28                	je     c000d39b <File::stat(unsigned long long*, bool*)+0x5d>
c000d373:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d375:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d379:	74 13                	je     c000d38e <File::stat(unsigned long long*, bool*)+0x50>
c000d37b:	83 ec 04             	sub    esp,0x4
c000d37e:	56                   	push   esi
c000d37f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d385:	51                   	push   ecx
c000d386:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d389:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d38c:	eb 0a                	jmp    c000d398 <File::stat(unsigned long long*, bool*)+0x5a>
c000d38e:	53                   	push   ebx
c000d38f:	83 c2 0d             	add    edx,0xd
c000d392:	56                   	push   esi
c000d393:	52                   	push   edx
c000d394:	51                   	push   ecx
c000d395:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d398:	83 c4 10             	add    esp,0x10
c000d39b:	5a                   	pop    edx
c000d39c:	5b                   	pop    ebx
c000d39d:	5e                   	pop    esi
c000d39e:	c3                   	ret    

c000d39f <Fs::setcwd(Process*, char*)>:
c000d39f:	55                   	push   ebp
c000d3a0:	57                   	push   edi
c000d3a1:	56                   	push   esi
c000d3a2:	53                   	push   ebx
c000d3a3:	81 ec 20 02 00 00    	sub    esp,0x220
c000d3a9:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d3b0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d3b6:	57                   	push   edi
c000d3b7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d3be:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d3c2:	56                   	push   esi
c000d3c3:	e8 bc fa ff ff       	call   c000ce84 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d3c8:	89 34 24             	mov    DWORD PTR [esp],esi
c000d3cb:	e8 d0 32 ff ff       	call   c00006a0 <strlen>
c000d3d0:	83 c4 10             	add    esp,0x10
c000d3d3:	83 f8 02             	cmp    eax,0x2
c000d3d6:	77 17                	ja     c000d3ef <Fs::setcwd(Process*, char*)+0x50>
c000d3d8:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000d3dd:	83 e8 41             	sub    eax,0x41
c000d3e0:	83 f8 19             	cmp    eax,0x19
c000d3e3:	76 24                	jbe    c000d409 <Fs::setcwd(Process*, char*)+0x6a>
c000d3e5:	b8 03 00 00 00       	mov    eax,0x3
c000d3ea:	e9 e0 00 00 00       	jmp    c000d4cf <Fs::setcwd(Process*, char*)+0x130>
c000d3ef:	83 ec 0c             	sub    esp,0xc
c000d3f2:	56                   	push   esi
c000d3f3:	e8 a8 32 ff ff       	call   c00006a0 <strlen>
c000d3f8:	83 c4 10             	add    esp,0x10
c000d3fb:	83 f8 03             	cmp    eax,0x3
c000d3fe:	75 34                	jne    c000d434 <Fs::setcwd(Process*, char*)+0x95>
c000d400:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d405:	75 2d                	jne    c000d434 <Fs::setcwd(Process*, char*)+0x95>
c000d407:	eb cf                	jmp    c000d3d8 <Fs::setcwd(Process*, char*)+0x39>
c000d409:	8b 14 85 40 6a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd95c0]
c000d410:	b8 05 00 00 00       	mov    eax,0x5
c000d415:	85 d2                	test   edx,edx
c000d417:	0f 84 b2 00 00 00    	je     c000d4cf <Fs::setcwd(Process*, char*)+0x130>
c000d41d:	b8 06 00 00 00       	mov    eax,0x6
c000d422:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d429:	0f 85 92 00 00 00    	jne    c000d4c1 <Fs::setcwd(Process*, char*)+0x122>
c000d42f:	e9 9b 00 00 00       	jmp    c000d4cf <Fs::setcwd(Process*, char*)+0x130>
c000d434:	83 ec 0c             	sub    esp,0xc
c000d437:	68 14 01 00 00       	push   0x114
c000d43c:	e8 82 c5 ff ff       	call   c00099c3 <malloc>
c000d441:	83 c4 0c             	add    esp,0xc
c000d444:	89 c3                	mov    ebx,eax
c000d446:	55                   	push   ebp
c000d447:	56                   	push   esi
c000d448:	50                   	push   eax
c000d449:	e8 e0 fb ff ff       	call   c000d02e <File::File(char const*, Process*)>
c000d44e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d453:	83 c4 0c             	add    esp,0xc
c000d456:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d45a:	50                   	push   eax
c000d45b:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d45f:	50                   	push   eax
c000d460:	53                   	push   ebx
c000d461:	e8 d8 fe ff ff       	call   c000d33e <File::stat(unsigned long long*, bool*)>
c000d466:	83 c4 10             	add    esp,0x10
c000d469:	83 f8 02             	cmp    eax,0x2
c000d46c:	74 04                	je     c000d472 <Fs::setcwd(Process*, char*)+0xd3>
c000d46e:	85 c0                	test   eax,eax
c000d470:	74 1c                	je     c000d48e <Fs::setcwd(Process*, char*)+0xef>
c000d472:	b8 01 00 00 00       	mov    eax,0x1
c000d477:	85 db                	test   ebx,ebx
c000d479:	74 54                	je     c000d4cf <Fs::setcwd(Process*, char*)+0x130>
c000d47b:	83 ec 0c             	sub    esp,0xc
c000d47e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d480:	53                   	push   ebx
c000d481:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d484:	83 c4 10             	add    esp,0x10
c000d487:	b8 01 00 00 00       	mov    eax,0x1
c000d48c:	eb 41                	jmp    c000d4cf <Fs::setcwd(Process*, char*)+0x130>
c000d48e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d493:	75 1c                	jne    c000d4b1 <Fs::setcwd(Process*, char*)+0x112>
c000d495:	b8 02 00 00 00       	mov    eax,0x2
c000d49a:	85 db                	test   ebx,ebx
c000d49c:	74 31                	je     c000d4cf <Fs::setcwd(Process*, char*)+0x130>
c000d49e:	83 ec 0c             	sub    esp,0xc
c000d4a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4a3:	53                   	push   ebx
c000d4a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d4a7:	83 c4 10             	add    esp,0x10
c000d4aa:	b8 02 00 00 00       	mov    eax,0x2
c000d4af:	eb 1e                	jmp    c000d4cf <Fs::setcwd(Process*, char*)+0x130>
c000d4b1:	85 db                	test   ebx,ebx
c000d4b3:	74 0c                	je     c000d4c1 <Fs::setcwd(Process*, char*)+0x122>
c000d4b5:	83 ec 0c             	sub    esp,0xc
c000d4b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4ba:	53                   	push   ebx
c000d4bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d4be:	83 c4 10             	add    esp,0x10
c000d4c1:	50                   	push   eax
c000d4c2:	50                   	push   eax
c000d4c3:	56                   	push   esi
c000d4c4:	57                   	push   edi
c000d4c5:	e8 76 32 ff ff       	call   c0000740 <strcpy>
c000d4ca:	83 c4 10             	add    esp,0x10
c000d4cd:	31 c0                	xor    eax,eax
c000d4cf:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d4d5:	5b                   	pop    ebx
c000d4d6:	5e                   	pop    esi
c000d4d7:	5f                   	pop    edi
c000d4d8:	5d                   	pop    ebp
c000d4d9:	c3                   	ret    

c000d4da <Directory::Directory(char const*, Process*)>:
c000d4da:	83 ec 0c             	sub    esp,0xc
c000d4dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4e1:	83 ec 08             	sub    esp,0x8
c000d4e4:	6a 00                	push   0x0
c000d4e6:	50                   	push   eax
c000d4e7:	e8 c2 dd ff ff       	call   c000b2ae <UnixFile::UnixFile(int)>
c000d4ec:	83 c4 10             	add    esp,0x10
c000d4ef:	ba 70 32 02 c0       	mov    edx,0xc0023270
c000d4f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4f8:	89 10                	mov    DWORD PTR [eax],edx
c000d4fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d4fe:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d508:	83 c0 0d             	add    eax,0xd
c000d50b:	83 ec 04             	sub    esp,0x4
c000d50e:	52                   	push   edx
c000d50f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d513:	50                   	push   eax
c000d514:	e8 6b f9 ff ff       	call   c000ce84 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d519:	83 c4 10             	add    esp,0x10
c000d51c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d520:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d523:	8d 50 bf             	lea    edx,[eax-0x41]
c000d526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d52a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d534:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d538:	90                   	nop
c000d539:	83 c4 0c             	add    esp,0xc
c000d53c:	c3                   	ret    
c000d53d:	90                   	nop

c000d53e <Directory::open()>:
c000d53e:	53                   	push   ebx
c000d53f:	b8 0b 00 00 00       	mov    eax,0xb
c000d544:	83 ec 08             	sub    esp,0x8
c000d547:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d54b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d552:	80 fa 19             	cmp    dl,0x19
c000d555:	77 3d                	ja     c000d594 <Directory::open()+0x56>
c000d557:	8b 14 95 40 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95c0]
c000d55e:	85 d2                	test   edx,edx
c000d560:	74 32                	je     c000d594 <Directory::open()+0x56>
c000d562:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d568:	85 d2                	test   edx,edx
c000d56a:	74 28                	je     c000d594 <Directory::open()+0x56>
c000d56c:	b8 06 00 00 00       	mov    eax,0x6
c000d571:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d575:	75 1d                	jne    c000d594 <Directory::open()+0x56>
c000d577:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d57d:	50                   	push   eax
c000d57e:	8b 02                	mov    eax,DWORD PTR [edx]
c000d580:	51                   	push   ecx
c000d581:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d584:	51                   	push   ecx
c000d585:	52                   	push   edx
c000d586:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d589:	83 c4 10             	add    esp,0x10
c000d58c:	85 c0                	test   eax,eax
c000d58e:	75 04                	jne    c000d594 <Directory::open()+0x56>
c000d590:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d594:	83 c4 08             	add    esp,0x8
c000d597:	5b                   	pop    ebx
c000d598:	c3                   	ret    
c000d599:	90                   	nop

c000d59a <Directory::close()>:
c000d59a:	53                   	push   ebx
c000d59b:	b8 0b 00 00 00       	mov    eax,0xb
c000d5a0:	83 ec 08             	sub    esp,0x8
c000d5a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d5a7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d5ae:	80 fa 19             	cmp    dl,0x19
c000d5b1:	77 41                	ja     c000d5f4 <Directory::close()+0x5a>
c000d5b3:	8b 1c 95 40 6a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd95c0]
c000d5ba:	85 db                	test   ebx,ebx
c000d5bc:	74 36                	je     c000d5f4 <Directory::close()+0x5a>
c000d5be:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d5c5:	74 2d                	je     c000d5f4 <Directory::close()+0x5a>
c000d5c7:	b8 05 00 00 00       	mov    eax,0x5
c000d5cc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d5d0:	74 22                	je     c000d5f4 <Directory::close()+0x5a>
c000d5d2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d5d6:	8b 04 95 40 6a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd95c0]
c000d5dd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d5e3:	53                   	push   ebx
c000d5e4:	53                   	push   ebx
c000d5e5:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5e7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d5ed:	50                   	push   eax
c000d5ee:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d5f1:	83 c4 10             	add    esp,0x10
c000d5f4:	83 c4 08             	add    esp,0x8
c000d5f7:	5b                   	pop    ebx
c000d5f8:	c3                   	ret    
c000d5f9:	90                   	nop

c000d5fa <Directory::unlink()>:
c000d5fa:	83 ec 0c             	sub    esp,0xc
c000d5fd:	b8 0b 00 00 00       	mov    eax,0xb
c000d602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d606:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d60d:	80 f9 19             	cmp    cl,0x19
c000d610:	77 2f                	ja     c000d641 <Directory::unlink()+0x47>
c000d612:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c000d619:	85 c9                	test   ecx,ecx
c000d61b:	74 24                	je     c000d641 <Directory::unlink()+0x47>
c000d61d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d623:	85 c9                	test   ecx,ecx
c000d625:	74 1a                	je     c000d641 <Directory::unlink()+0x47>
c000d627:	b8 06 00 00 00       	mov    eax,0x6
c000d62c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d630:	75 0f                	jne    c000d641 <Directory::unlink()+0x47>
c000d632:	83 c2 0d             	add    edx,0xd
c000d635:	50                   	push   eax
c000d636:	50                   	push   eax
c000d637:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d639:	52                   	push   edx
c000d63a:	51                   	push   ecx
c000d63b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d63e:	83 c4 10             	add    esp,0x10
c000d641:	83 c4 0c             	add    esp,0xc
c000d644:	c3                   	ret    
c000d645:	90                   	nop

c000d646 <Directory::rename(char const*)>:
c000d646:	83 ec 0c             	sub    esp,0xc
c000d649:	b8 0b 00 00 00       	mov    eax,0xb
c000d64e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d652:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d659:	80 f9 19             	cmp    cl,0x19
c000d65c:	77 32                	ja     c000d690 <Directory::rename(char const*)+0x4a>
c000d65e:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c000d665:	85 c9                	test   ecx,ecx
c000d667:	74 27                	je     c000d690 <Directory::rename(char const*)+0x4a>
c000d669:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d66f:	85 c9                	test   ecx,ecx
c000d671:	74 1d                	je     c000d690 <Directory::rename(char const*)+0x4a>
c000d673:	b8 06 00 00 00       	mov    eax,0x6
c000d678:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d67c:	75 12                	jne    c000d690 <Directory::rename(char const*)+0x4a>
c000d67e:	83 c2 0d             	add    edx,0xd
c000d681:	50                   	push   eax
c000d682:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d684:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d688:	52                   	push   edx
c000d689:	51                   	push   ecx
c000d68a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d68d:	83 c4 10             	add    esp,0x10
c000d690:	83 c4 0c             	add    esp,0xc
c000d693:	c3                   	ret    

c000d694 <Directory::exists()>:
c000d694:	83 ec 0c             	sub    esp,0xc
c000d697:	31 c0                	xor    eax,eax
c000d699:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d69d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d6a4:	80 f9 19             	cmp    cl,0x19
c000d6a7:	77 24                	ja     c000d6cd <Directory::exists()+0x39>
c000d6a9:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c000d6b0:	85 c9                	test   ecx,ecx
c000d6b2:	74 19                	je     c000d6cd <Directory::exists()+0x39>
c000d6b4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d6ba:	85 c9                	test   ecx,ecx
c000d6bc:	74 0f                	je     c000d6cd <Directory::exists()+0x39>
c000d6be:	83 c2 0d             	add    edx,0xd
c000d6c1:	50                   	push   eax
c000d6c2:	50                   	push   eax
c000d6c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d6c5:	52                   	push   edx
c000d6c6:	51                   	push   ecx
c000d6c7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d6ca:	83 c4 10             	add    esp,0x10
c000d6cd:	83 c4 0c             	add    esp,0xc
c000d6d0:	c3                   	ret    
c000d6d1:	90                   	nop

c000d6d2 <Directory::read(dirent*)>:
c000d6d2:	83 ec 1c             	sub    esp,0x1c
c000d6d5:	b8 0b 00 00 00       	mov    eax,0xb
c000d6da:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d6de:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d6e5:	80 fa 19             	cmp    dl,0x19
c000d6e8:	77 30                	ja     c000d71a <Directory::read(dirent*)+0x48>
c000d6ea:	8b 14 95 40 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95c0]
c000d6f1:	85 d2                	test   edx,edx
c000d6f3:	74 25                	je     c000d71a <Directory::read(dirent*)+0x48>
c000d6f5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d6fc:	74 1c                	je     c000d71a <Directory::read(dirent*)+0x48>
c000d6fe:	83 ec 0c             	sub    esp,0xc
c000d701:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d703:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d707:	52                   	push   edx
c000d708:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d70c:	6a 00                	push   0x0
c000d70e:	68 10 01 00 00       	push   0x110
c000d713:	51                   	push   ecx
c000d714:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d717:	83 c4 20             	add    esp,0x20
c000d71a:	83 c4 1c             	add    esp,0x1c
c000d71d:	c3                   	ret    

c000d71e <Directory::create()>:
c000d71e:	83 ec 0c             	sub    esp,0xc
c000d721:	b8 0b 00 00 00       	mov    eax,0xb
c000d726:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d72a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d731:	80 f9 19             	cmp    cl,0x19
c000d734:	77 2f                	ja     c000d765 <Directory::create()+0x47>
c000d736:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c000d73d:	85 c9                	test   ecx,ecx
c000d73f:	74 24                	je     c000d765 <Directory::create()+0x47>
c000d741:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d747:	85 c9                	test   ecx,ecx
c000d749:	74 1a                	je     c000d765 <Directory::create()+0x47>
c000d74b:	b8 06 00 00 00       	mov    eax,0x6
c000d750:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d754:	75 0f                	jne    c000d765 <Directory::create()+0x47>
c000d756:	83 c2 0d             	add    edx,0xd
c000d759:	50                   	push   eax
c000d75a:	50                   	push   eax
c000d75b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d75d:	52                   	push   edx
c000d75e:	51                   	push   ecx
c000d75f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d762:	83 c4 10             	add    esp,0x10
c000d765:	83 c4 0c             	add    esp,0xc
c000d768:	c3                   	ret    
c000d769:	90                   	nop

c000d76a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d76a:	b8 0a 00 00 00       	mov    eax,0xa
c000d76f:	c3                   	ret    

c000d770 <Bus::Bus(char const*)>:
c000d770:	83 ec 0c             	sub    esp,0xc
c000d773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d777:	83 ec 08             	sub    esp,0x8
c000d77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d77e:	50                   	push   eax
c000d77f:	e8 8a 09 00 00       	call   c000e10e <Device::Device(char const*)>
c000d784:	83 c4 10             	add    esp,0x10
c000d787:	ba 8c 32 02 c0       	mov    edx,0xc002328c
c000d78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d790:	89 10                	mov    DWORD PTR [eax],edx
c000d792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d796:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d7a0:	90                   	nop
c000d7a1:	83 c4 0c             	add    esp,0xc
c000d7a4:	c3                   	ret    
c000d7a5:	90                   	nop
c000d7a6:	66 90                	xchg   ax,ax

c000d7a8 <Bus::~Bus()>:
c000d7a8:	83 ec 0c             	sub    esp,0xc
c000d7ab:	ba 8c 32 02 c0       	mov    edx,0xc002328c
c000d7b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b4:	89 10                	mov    DWORD PTR [eax],edx
c000d7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ba:	83 ec 0c             	sub    esp,0xc
c000d7bd:	50                   	push   eax
c000d7be:	e8 15 06 00 00       	call   c000ddd8 <Device::~Device()>
c000d7c3:	83 c4 10             	add    esp,0x10
c000d7c6:	90                   	nop
c000d7c7:	83 c4 0c             	add    esp,0xc
c000d7ca:	c3                   	ret    
c000d7cb:	90                   	nop

c000d7cc <Bus::~Bus()>:
c000d7cc:	83 ec 0c             	sub    esp,0xc
c000d7cf:	83 ec 0c             	sub    esp,0xc
c000d7d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7d6:	e8 cd ff ff ff       	call   c000d7a8 <Bus::~Bus()>
c000d7db:	83 c4 10             	add    esp,0x10
c000d7de:	83 ec 08             	sub    esp,0x8
c000d7e1:	68 58 01 00 00       	push   0x158
c000d7e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ea:	e8 f3 f1 ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	83 c4 0c             	add    esp,0xc
c000d7f5:	c3                   	ret    
c000d7f6:	66 90                	xchg   ax,ax

c000d7f8 <Buzzer::Buzzer(char const*)>:
c000d7f8:	83 ec 0c             	sub    esp,0xc
c000d7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ff:	83 ec 08             	sub    esp,0x8
c000d802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d806:	50                   	push   eax
c000d807:	e8 02 09 00 00       	call   c000e10e <Device::Device(char const*)>
c000d80c:	83 c4 10             	add    esp,0x10
c000d80f:	ba b8 32 02 c0       	mov    edx,0xc00232b8
c000d814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d818:	89 10                	mov    DWORD PTR [eax],edx
c000d81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d81e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000d828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d82c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000d836:	90                   	nop
c000d837:	83 c4 0c             	add    esp,0xc
c000d83a:	c3                   	ret    
c000d83b:	90                   	nop

c000d83c <Buzzer::~Buzzer()>:
c000d83c:	83 ec 0c             	sub    esp,0xc
c000d83f:	ba b8 32 02 c0       	mov    edx,0xc00232b8
c000d844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d848:	89 10                	mov    DWORD PTR [eax],edx
c000d84a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d84e:	83 ec 0c             	sub    esp,0xc
c000d851:	50                   	push   eax
c000d852:	e8 81 05 00 00       	call   c000ddd8 <Device::~Device()>
c000d857:	83 c4 10             	add    esp,0x10
c000d85a:	90                   	nop
c000d85b:	83 c4 0c             	add    esp,0xc
c000d85e:	c3                   	ret    
c000d85f:	90                   	nop

c000d860 <Buzzer::~Buzzer()>:
c000d860:	83 ec 0c             	sub    esp,0xc
c000d863:	83 ec 0c             	sub    esp,0xc
c000d866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d86a:	e8 cd ff ff ff       	call   c000d83c <Buzzer::~Buzzer()>
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	83 ec 08             	sub    esp,0x8
c000d875:	68 5c 01 00 00       	push   0x15c
c000d87a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d87e:	e8 5f f1 ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c000d883:	83 c4 10             	add    esp,0x10
c000d886:	83 c4 0c             	add    esp,0xc
c000d889:	c3                   	ret    

c000d88a <Buzzer::stop()>:
c000d88a:	83 ec 14             	sub    esp,0x14
c000d88d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d891:	8b 10                	mov    edx,DWORD PTR [eax]
c000d893:	6a 00                	push   0x0
c000d895:	50                   	push   eax
c000d896:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d899:	83 c4 1c             	add    esp,0x1c
c000d89c:	c3                   	ret    

c000d89d <beepThread(void*)>:
c000d89d:	53                   	push   ebx
c000d89e:	83 ec 08             	sub    esp,0x8
c000d8a1:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000d8a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d8aa:	48                   	dec    eax
c000d8ab:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000d8b0:	75 02                	jne    c000d8b4 <beepThread(void*)+0x17>
c000d8b2:	fb                   	sti    
c000d8b3:	90                   	nop
c000d8b4:	83 ec 0c             	sub    esp,0xc
c000d8b7:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000d8be:	50                   	push   eax
c000d8bf:	e8 8c a9 00 00       	call   c0018250 <milliTenthSleep(unsigned int)>
c000d8c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d8c7:	e8 be ff ff ff       	call   c000d88a <Buzzer::stop()>
c000d8cc:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000d8d4:	83 c4 18             	add    esp,0x18
c000d8d7:	5b                   	pop    ebx
c000d8d8:	e9 73 a8 00 00       	jmp    c0018150 <blockTask(TaskState)>
c000d8dd:	90                   	nop

c000d8de <Buzzer::beep(int, int, bool)>:
c000d8de:	57                   	push   edi
c000d8df:	56                   	push   esi
c000d8e0:	53                   	push   ebx
c000d8e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d8e5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d8e9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d8ed:	50                   	push   eax
c000d8ee:	50                   	push   eax
c000d8ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d8f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8f5:	53                   	push   ebx
c000d8f6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d8f9:	83 c4 10             	add    esp,0x10
c000d8fc:	89 f8                	mov    eax,edi
c000d8fe:	84 c0                	test   al,al
c000d900:	74 1e                	je     c000d920 <Buzzer::beep(int, int, bool)+0x42>
c000d902:	83 ec 0c             	sub    esp,0xc
c000d905:	6b f6 0a             	imul   esi,esi,0xa
c000d908:	56                   	push   esi
c000d909:	e8 42 a9 00 00       	call   c0018250 <milliTenthSleep(unsigned int)>
c000d90e:	83 c4 10             	add    esp,0x10
c000d911:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d915:	5b                   	pop    ebx
c000d916:	5e                   	pop    esi
c000d917:	5f                   	pop    edi
c000d918:	e9 6d ff ff ff       	jmp    c000d88a <Buzzer::stop()>
c000d91d:	8d 76 00             	lea    esi,[esi+0x0]
c000d920:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000d926:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000d92b:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000d933:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d937:	c7 44 24 14 9d d8 00 c0 	mov    DWORD PTR [esp+0x14],0xc000d89d
c000d93f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d943:	5b                   	pop    ebx
c000d944:	5e                   	pop    esi
c000d945:	5f                   	pop    edi
c000d946:	e9 f1 a3 00 00       	jmp    c0017d3c <Process::createThread(void (*)(void*), void*, int)>
c000d94b:	90                   	nop

c000d94c <User::loadClockSettings(int)>:
c000d94c:	53                   	push   ebx
c000d94d:	83 ec 14             	sub    esp,0x14
c000d950:	68 14 01 00 00       	push   0x114
c000d955:	e8 69 c0 ff ff       	call   c00099c3 <malloc>
c000d95a:	83 c4 0c             	add    esp,0xc
c000d95d:	89 c3                	mov    ebx,eax
c000d95f:	ff 35 70 79 02 c0    	push   DWORD PTR ds:0xc0027970
c000d965:	68 e0 32 02 c0       	push   0xc00232e0
c000d96a:	50                   	push   eax
c000d96b:	e8 be f6 ff ff       	call   c000d02e <File::File(char const*, Process*)>
c000d970:	58                   	pop    eax
c000d971:	5a                   	pop    edx
c000d972:	6a 01                	push   0x1
c000d974:	53                   	push   ebx
c000d975:	e8 18 f7 ff ff       	call   c000d092 <File::open(FileOpenMode)>
c000d97a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d97d:	e8 6e f7 ff ff       	call   c000d0f0 <File::close()>
c000d982:	83 c4 10             	add    esp,0x10
c000d985:	85 db                	test   ebx,ebx
c000d987:	74 0f                	je     c000d998 <User::loadClockSettings(int)+0x4c>
c000d989:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d98b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d98f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d992:	83 c4 08             	add    esp,0x8
c000d995:	5b                   	pop    ebx
c000d996:	ff e0                	jmp    eax
c000d998:	83 c4 08             	add    esp,0x8
c000d99b:	5b                   	pop    ebx
c000d99c:	c3                   	ret    
c000d99d:	90                   	nop

c000d99e <Clock::Clock(char const*)>:
c000d99e:	83 ec 0c             	sub    esp,0xc
c000d9a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9a5:	83 ec 08             	sub    esp,0x8
c000d9a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ac:	50                   	push   eax
c000d9ad:	e8 5c 07 00 00       	call   c000e10e <Device::Device(char const*)>
c000d9b2:	83 c4 10             	add    esp,0x10
c000d9b5:	ba 08 33 02 c0       	mov    edx,0xc0023308
c000d9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9be:	89 10                	mov    DWORD PTR [eax],edx
c000d9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9c4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000d9ce:	90                   	nop
c000d9cf:	83 c4 0c             	add    esp,0xc
c000d9d2:	c3                   	ret    
c000d9d3:	90                   	nop

c000d9d4 <Clock::~Clock()>:
c000d9d4:	83 ec 0c             	sub    esp,0xc
c000d9d7:	ba 08 33 02 c0       	mov    edx,0xc0023308
c000d9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9e0:	89 10                	mov    DWORD PTR [eax],edx
c000d9e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9e6:	83 ec 0c             	sub    esp,0xc
c000d9e9:	50                   	push   eax
c000d9ea:	e8 e9 03 00 00       	call   c000ddd8 <Device::~Device()>
c000d9ef:	83 c4 10             	add    esp,0x10
c000d9f2:	90                   	nop
c000d9f3:	83 c4 0c             	add    esp,0xc
c000d9f6:	c3                   	ret    
c000d9f7:	90                   	nop

c000d9f8 <Clock::~Clock()>:
c000d9f8:	83 ec 0c             	sub    esp,0xc
c000d9fb:	83 ec 0c             	sub    esp,0xc
c000d9fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da02:	e8 cd ff ff ff       	call   c000d9d4 <Clock::~Clock()>
c000da07:	83 c4 10             	add    esp,0x10
c000da0a:	83 ec 08             	sub    esp,0x8
c000da0d:	68 58 01 00 00       	push   0x158
c000da12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da16:	e8 c7 ef ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	83 c4 0c             	add    esp,0xc
c000da21:	c3                   	ret    

c000da22 <Clock::timeInSecondsLocal()>:
c000da22:	53                   	push   ebx
c000da23:	83 ec 14             	sub    esp,0x14
c000da26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da2a:	8b 10                	mov    edx,DWORD PTR [eax]
c000da2c:	50                   	push   eax
c000da2d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000da30:	0f b6 0d bc 65 02 c0 	movzx  ecx,BYTE PTR ds:0xc00265bc
c000da37:	03 0d c0 65 02 c0    	add    ecx,DWORD PTR ds:0xc00265c0
c000da3d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000da43:	89 cb                	mov    ebx,ecx
c000da45:	c1 fb 1f             	sar    ebx,0x1f
c000da48:	01 c8                	add    eax,ecx
c000da4a:	11 da                	adc    edx,ebx
c000da4c:	83 c4 10             	add    esp,0x10
c000da4f:	31 c9                	xor    ecx,ecx
c000da51:	80 3d bd 65 02 c0 00 	cmp    BYTE PTR ds:0xc00265bd,0x0
c000da58:	74 05                	je     c000da5f <Clock::timeInSecondsLocal()+0x3d>
c000da5a:	b9 08 07 00 00       	mov    ecx,0x708
c000da5f:	31 db                	xor    ebx,ebx
c000da61:	01 c8                	add    eax,ecx
c000da63:	11 da                	adc    edx,ebx
c000da65:	83 c4 08             	add    esp,0x8
c000da68:	5b                   	pop    ebx
c000da69:	c3                   	ret    

c000da6a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000da6a:	57                   	push   edi
c000da6b:	56                   	push   esi
c000da6c:	53                   	push   ebx
c000da6d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000da71:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000da75:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da77:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000da7b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000da7e:	0f b6 05 bc 65 02 c0 	movzx  eax,BYTE PTR ds:0xc00265bc
c000da85:	03 05 c0 65 02 c0    	add    eax,DWORD PTR ds:0xc00265c0
c000da8b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000da91:	99                   	cdq    
c000da92:	29 c6                	sub    esi,eax
c000da94:	19 d7                	sbb    edi,edx
c000da96:	89 f0                	mov    eax,esi
c000da98:	89 fa                	mov    edx,edi
c000da9a:	31 f6                	xor    esi,esi
c000da9c:	80 3d bd 65 02 c0 00 	cmp    BYTE PTR ds:0xc00265bd,0x0
c000daa3:	74 05                	je     c000daaa <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000daa5:	be 08 07 00 00       	mov    esi,0x708
c000daaa:	31 ff                	xor    edi,edi
c000daac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000dab0:	29 f0                	sub    eax,esi
c000dab2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dab6:	19 fa                	sbb    edx,edi
c000dab8:	89 d8                	mov    eax,ebx
c000daba:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dabe:	5b                   	pop    ebx
c000dabf:	5e                   	pop    esi
c000dac0:	5f                   	pop    edi
c000dac1:	ff e0                	jmp    eax

c000dac3 <datetimeToSeconds(datetime_t)>:
c000dac3:	55                   	push   ebp
c000dac4:	57                   	push   edi
c000dac5:	56                   	push   esi
c000dac6:	53                   	push   ebx
c000dac7:	83 ec 14             	sub    esp,0x14
c000daca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dace:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dad2:	89 d3                	mov    ebx,edx
c000dad4:	0f b6 c6             	movzx  eax,dh
c000dad7:	c1 eb 10             	shr    ebx,0x10
c000dada:	48                   	dec    eax
c000dadb:	66 81 eb 6c 07       	sub    bx,0x76c
c000dae0:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000dae4:	0f b6 f5             	movzx  esi,ch
c000dae7:	89 cf                	mov    edi,ecx
c000dae9:	6b f6 3c             	imul   esi,esi,0x3c
c000daec:	c1 ef 10             	shr    edi,0x10
c000daef:	0f b6 c9             	movzx  ecx,cl
c000daf2:	89 f8                	mov    eax,edi
c000daf4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dafa:	0f b6 f8             	movzx  edi,al
c000dafd:	0f b6 d2             	movzx  edx,dl
c000db00:	01 fe                	add    esi,edi
c000db02:	01 f1                	add    ecx,esi
c000db04:	0f b7 f3             	movzx  esi,bx
c000db07:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000db0b:	c1 f9 1f             	sar    ecx,0x1f
c000db0e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000db13:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000db17:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000db1c:	8b 0c 8d 40 33 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdccc0]
c000db23:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000db27:	76 29                	jbe    c000db52 <datetimeToSeconds(datetime_t)+0x8f>
c000db29:	f6 c3 03             	test   bl,0x3
c000db2c:	75 24                	jne    c000db52 <datetimeToSeconds(datetime_t)+0x8f>
c000db2e:	31 d2                	xor    edx,edx
c000db30:	bf 64 00 00 00       	mov    edi,0x64
c000db35:	89 d8                	mov    eax,ebx
c000db37:	66 f7 f7             	div    di
c000db3a:	66 85 d2             	test   dx,dx
c000db3d:	75 12                	jne    c000db51 <datetimeToSeconds(datetime_t)+0x8e>
c000db3f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000db45:	bf 90 01 00 00       	mov    edi,0x190
c000db4a:	99                   	cdq    
c000db4b:	f7 ff                	idiv   edi
c000db4d:	85 d2                	test   edx,edx
c000db4f:	75 01                	jne    c000db52 <datetimeToSeconds(datetime_t)+0x8f>
c000db51:	41                   	inc    ecx
c000db52:	66 83 fb 46          	cmp    bx,0x46
c000db56:	76 45                	jbe    c000db9d <datetimeToSeconds(datetime_t)+0xda>
c000db58:	bb 46 00 00 00       	mov    ebx,0x46
c000db5d:	bf 64 00 00 00       	mov    edi,0x64
c000db62:	bd 90 01 00 00       	mov    ebp,0x190
c000db67:	b8 6d 01 00 00       	mov    eax,0x16d
c000db6c:	f6 c3 03             	test   bl,0x3
c000db6f:	75 23                	jne    c000db94 <datetimeToSeconds(datetime_t)+0xd1>
c000db71:	89 d8                	mov    eax,ebx
c000db73:	99                   	cdq    
c000db74:	f7 ff                	idiv   edi
c000db76:	b8 6e 01 00 00       	mov    eax,0x16e
c000db7b:	85 d2                	test   edx,edx
c000db7d:	75 15                	jne    c000db94 <datetimeToSeconds(datetime_t)+0xd1>
c000db7f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000db85:	99                   	cdq    
c000db86:	f7 fd                	idiv   ebp
c000db88:	83 fa 01             	cmp    edx,0x1
c000db8b:	19 c0                	sbb    eax,eax
c000db8d:	f7 d0                	not    eax
c000db8f:	05 6e 01 00 00       	add    eax,0x16e
c000db94:	01 c1                	add    ecx,eax
c000db96:	43                   	inc    ebx
c000db97:	39 f3                	cmp    ebx,esi
c000db99:	7c cc                	jl     c000db67 <datetimeToSeconds(datetime_t)+0xa4>
c000db9b:	eb 35                	jmp    c000dbd2 <datetimeToSeconds(datetime_t)+0x10f>
c000db9d:	74 33                	je     c000dbd2 <datetimeToSeconds(datetime_t)+0x10f>
c000db9f:	b8 45 00 00 00       	mov    eax,0x45
c000dba4:	89 c2                	mov    edx,eax
c000dba6:	83 e2 03             	and    edx,0x3
c000dba9:	39 f0                	cmp    eax,esi
c000dbab:	7e 0f                	jle    c000dbbc <datetimeToSeconds(datetime_t)+0xf9>
c000dbad:	83 fa 01             	cmp    edx,0x1
c000dbb0:	19 d2                	sbb    edx,edx
c000dbb2:	48                   	dec    eax
c000dbb3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000dbba:	eb e8                	jmp    c000dba4 <datetimeToSeconds(datetime_t)+0xe1>
c000dbbc:	b8 6d 01 00 00       	mov    eax,0x16d
c000dbc1:	85 d2                	test   edx,edx
c000dbc3:	75 0b                	jne    c000dbd0 <datetimeToSeconds(datetime_t)+0x10d>
c000dbc5:	66 83 fb 01          	cmp    bx,0x1
c000dbc9:	19 c0                	sbb    eax,eax
c000dbcb:	05 6e 01 00 00       	add    eax,0x16e
c000dbd0:	29 c1                	sub    ecx,eax
c000dbd2:	b8 80 51 01 00       	mov    eax,0x15180
c000dbd7:	f7 e9                	imul   ecx
c000dbd9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dbdd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000dbe1:	83 c4 14             	add    esp,0x14
c000dbe4:	5b                   	pop    ebx
c000dbe5:	5e                   	pop    esi
c000dbe6:	5f                   	pop    edi
c000dbe7:	5d                   	pop    ebp
c000dbe8:	c3                   	ret    
c000dbe9:	90                   	nop

c000dbea <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000dbea:	57                   	push   edi
c000dbeb:	56                   	push   esi
c000dbec:	53                   	push   ebx
c000dbed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dbf1:	8b 06                	mov    eax,DWORD PTR [esi]
c000dbf3:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000dbf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbfa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbfe:	e8 c0 fe ff ff       	call   c000dac3 <datetimeToSeconds(datetime_t)>
c000dc03:	59                   	pop    ecx
c000dc04:	0f b6 0d bc 65 02 c0 	movzx  ecx,BYTE PTR ds:0xc00265bc
c000dc0b:	5b                   	pop    ebx
c000dc0c:	03 0d c0 65 02 c0    	add    ecx,DWORD PTR ds:0xc00265c0
c000dc12:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dc18:	89 cb                	mov    ebx,ecx
c000dc1a:	c1 fb 1f             	sar    ebx,0x1f
c000dc1d:	29 c8                	sub    eax,ecx
c000dc1f:	19 da                	sbb    edx,ebx
c000dc21:	31 c9                	xor    ecx,ecx
c000dc23:	80 3d bd 65 02 c0 00 	cmp    BYTE PTR ds:0xc00265bd,0x0
c000dc2a:	74 05                	je     c000dc31 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000dc2c:	b9 08 07 00 00       	mov    ecx,0x708
c000dc31:	31 db                	xor    ebx,ebx
c000dc33:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000dc37:	29 c8                	sub    eax,ecx
c000dc39:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dc3d:	19 da                	sbb    edx,ebx
c000dc3f:	89 f8                	mov    eax,edi
c000dc41:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dc45:	5b                   	pop    ebx
c000dc46:	5e                   	pop    esi
c000dc47:	5f                   	pop    edi
c000dc48:	ff e0                	jmp    eax

c000dc4a <secondsToDatetime(unsigned long long)>:
c000dc4a:	55                   	push   ebp
c000dc4b:	57                   	push   edi
c000dc4c:	56                   	push   esi
c000dc4d:	53                   	push   ebx
c000dc4e:	83 ec 1c             	sub    esp,0x1c
c000dc51:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dc55:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dc59:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dc5d:	6a 00                	push   0x0
c000dc5f:	68 80 51 01 00       	push   0x15180
c000dc64:	55                   	push   ebp
c000dc65:	57                   	push   edi
c000dc66:	e8 19 33 01 00       	call   c0020f84 <__udivdi3>
c000dc6b:	83 c4 10             	add    esp,0x10
c000dc6e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000dc74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc78:	6a 00                	push   0x0
c000dc7a:	68 80 51 01 00       	push   0x15180
c000dc7f:	55                   	push   ebp
c000dc80:	57                   	push   edi
c000dc81:	bf 10 0e 00 00       	mov    edi,0xe10
c000dc86:	e8 f9 33 01 00       	call   c0021084 <__umoddi3>
c000dc8b:	83 c4 10             	add    esp,0x10
c000dc8e:	99                   	cdq    
c000dc8f:	f7 ff                	idiv   edi
c000dc91:	bf 3c 00 00 00       	mov    edi,0x3c
c000dc96:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000dc99:	89 d0                	mov    eax,edx
c000dc9b:	99                   	cdq    
c000dc9c:	f7 ff                	idiv   edi
c000dc9e:	85 db                	test   ebx,ebx
c000dca0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000dca3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000dca6:	79 11                	jns    c000dcb9 <secondsToDatetime(unsigned long long)+0x6f>
c000dca8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcac:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000dcb2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dcb7:	eb 07                	jmp    c000dcc0 <secondsToDatetime(unsigned long long)+0x76>
c000dcb9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dcbe:	89 d8                	mov    eax,ebx
c000dcc0:	bf b4 05 00 00       	mov    edi,0x5b4
c000dcc5:	99                   	cdq    
c000dcc6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000dccb:	f7 f9                	idiv   ecx
c000dccd:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000dcd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcd6:	31 d2                	xor    edx,edx
c000dcd8:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000dce0:	01 c3                	add    ebx,eax
c000dce2:	89 d8                	mov    eax,ebx
c000dce4:	f7 f1                	div    ecx
c000dce6:	31 d2                	xor    edx,edx
c000dce8:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000dceb:	89 d8                	mov    eax,ebx
c000dced:	f7 f7                	div    edi
c000dcef:	31 d2                	xor    edx,edx
c000dcf1:	29 c1                	sub    ecx,eax
c000dcf3:	89 d8                	mov    eax,ebx
c000dcf5:	f7 f5                	div    ebp
c000dcf7:	bd 6d 01 00 00       	mov    ebp,0x16d
c000dcfc:	29 c1                	sub    ecx,eax
c000dcfe:	31 d2                	xor    edx,edx
c000dd00:	89 c8                	mov    eax,ecx
c000dd02:	f7 f5                	div    ebp
c000dd04:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000dd09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd0d:	31 d2                	xor    edx,edx
c000dd0f:	89 c8                	mov    eax,ecx
c000dd11:	f7 f5                	div    ebp
c000dd13:	31 d2                	xor    edx,edx
c000dd15:	01 c3                	add    ebx,eax
c000dd17:	89 c8                	mov    eax,ecx
c000dd19:	f7 f7                	div    edi
c000dd1b:	bf 99 00 00 00       	mov    edi,0x99
c000dd20:	29 c3                	sub    ebx,eax
c000dd22:	31 d2                	xor    edx,edx
c000dd24:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000dd2c:	29 c3                	sub    ebx,eax
c000dd2e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000dd31:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000dd34:	bb 05 00 00 00       	mov    ebx,0x5
c000dd39:	83 c1 02             	add    ecx,0x2
c000dd3c:	89 c8                	mov    eax,ecx
c000dd3e:	f7 f7                	div    edi
c000dd40:	31 d2                	xor    edx,edx
c000dd42:	89 c7                	mov    edi,eax
c000dd44:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000dd4a:	83 c0 02             	add    eax,0x2
c000dd4d:	f7 f3                	div    ebx
c000dd4f:	89 eb                	mov    ebx,ebp
c000dd51:	29 c3                	sub    ebx,eax
c000dd53:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000dd59:	88 1e                	mov    BYTE PTR [esi],bl
c000dd5b:	19 c0                	sbb    eax,eax
c000dd5d:	31 d2                	xor    edx,edx
c000dd5f:	83 e0 0c             	and    eax,0xc
c000dd62:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000dd66:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000dd6e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dd72:	83 f9 01             	cmp    ecx,0x1
c000dd75:	0f 96 c2             	setbe  dl
c000dd78:	41                   	inc    ecx
c000dd79:	01 d0                	add    eax,edx
c000dd7b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000dd7e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000dd82:	83 c4 1c             	add    esp,0x1c
c000dd85:	89 f0                	mov    eax,esi
c000dd87:	5b                   	pop    ebx
c000dd88:	5e                   	pop    esi
c000dd89:	5f                   	pop    edi
c000dd8a:	5d                   	pop    ebp
c000dd8b:	c2 04 00             	ret    0x4

c000dd8e <Clock::timeInDatetimeLocal()>:
c000dd8e:	53                   	push   ebx
c000dd8f:	83 ec 14             	sub    esp,0x14
c000dd92:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dd96:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dd9a:	e8 83 fc ff ff       	call   c000da22 <Clock::timeInSecondsLocal()>
c000dd9f:	83 c4 0c             	add    esp,0xc
c000dda2:	52                   	push   edx
c000dda3:	50                   	push   eax
c000dda4:	53                   	push   ebx
c000dda5:	e8 a0 fe ff ff       	call   c000dc4a <secondsToDatetime(unsigned long long)>
c000ddaa:	89 d8                	mov    eax,ebx
c000ddac:	83 c4 14             	add    esp,0x14
c000ddaf:	5b                   	pop    ebx
c000ddb0:	c2 04 00             	ret    0x4
c000ddb3:	90                   	nop

c000ddb4 <Device::hibernate()>:
c000ddb4:	c3                   	ret    
c000ddb5:	90                   	nop

c000ddb6 <Device::wake()>:
c000ddb6:	c3                   	ret    
c000ddb7:	90                   	nop

c000ddb8 <Device::detect()>:
c000ddb8:	c3                   	ret    
c000ddb9:	90                   	nop

c000ddba <Device::disableLegacy()>:
c000ddba:	c3                   	ret    
c000ddbb:	90                   	nop

c000ddbc <Device::powerSaving(PowerSavingLevel)>:
c000ddbc:	c3                   	ret    
c000ddbd:	90                   	nop

c000ddbe <DriverlessDevice::close(int, int, void*)>:
c000ddbe:	31 c0                	xor    eax,eax
c000ddc0:	c3                   	ret    
c000ddc1:	90                   	nop

c000ddc2 <DriverlessDevice::detect()>:
c000ddc2:	c3                   	ret    
c000ddc3:	90                   	nop

c000ddc4 <DriverlessDevice::open(int, int, void*)>:
c000ddc4:	83 ec 18             	sub    esp,0x18
c000ddc7:	68 70 33 02 c0       	push   0xc0023370
c000ddcc:	e8 b4 65 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000ddd1:	83 c8 ff             	or     eax,0xffffffff
c000ddd4:	83 c4 1c             	add    esp,0x1c
c000ddd7:	c3                   	ret    

c000ddd8 <Device::~Device()>:
c000ddd8:	ba d0 33 02 c0       	mov    edx,0xc00233d0
c000dddd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dde1:	89 10                	mov    DWORD PTR [eax],edx
c000dde3:	90                   	nop
c000dde4:	c3                   	ret    
c000dde5:	90                   	nop

c000dde6 <Device::~Device()>:
c000dde6:	83 ec 0c             	sub    esp,0xc
c000dde9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dded:	e8 e6 ff ff ff       	call   c000ddd8 <Device::~Device()>
c000ddf2:	83 c4 04             	add    esp,0x4
c000ddf5:	83 ec 08             	sub    esp,0x8
c000ddf8:	68 58 01 00 00       	push   0x158
c000ddfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de01:	e8 dc eb ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	83 c4 0c             	add    esp,0xc
c000de0c:	c3                   	ret    
c000de0d:	90                   	nop

c000de0e <Device::findAndLoadDriver()>:
c000de0e:	c7 44 24 04 8e 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc002338e
c000de16:	e9 a8 ec ff ff       	jmp    c000cac3 <Dbg::kprintf(char const*, ...)>
c000de1b:	90                   	nop

c000de1c <Device::preOpenPCI(PCIDeviceInfo)>:
c000de1c:	57                   	push   edi
c000de1d:	b9 09 00 00 00       	mov    ecx,0x9
c000de22:	56                   	push   esi
c000de23:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000de27:	8d 74 24 10          	lea    esi,[esp+0x10]
c000de2b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000de35:	81 c7 18 01 00 00    	add    edi,0x118
c000de3b:	fc                   	cld    
c000de3c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000de3e:	5e                   	pop    esi
c000de3f:	5f                   	pop    edi
c000de40:	c3                   	ret    
c000de41:	90                   	nop

c000de42 <Device::preOpenACPI(void*, char*, char*)>:
c000de42:	57                   	push   edi
c000de43:	b9 1e 00 00 00       	mov    ecx,0x1e
c000de48:	56                   	push   esi
c000de49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de51:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000de5b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000de61:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000de67:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000de6b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de6d:	b9 0e 00 00 00       	mov    ecx,0xe
c000de72:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000de78:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000de7c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de7e:	5e                   	pop    esi
c000de7f:	5f                   	pop    edi
c000de80:	c3                   	ret    
c000de81:	90                   	nop

c000de82 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000de82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de86:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000de8b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000de92:	75 0b                	jne    c000de9f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000de94:	8b 00                	mov    eax,DWORD PTR [eax]
c000de96:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de9a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000de9d:	eb 1e                	jmp    c000debd <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000de9f:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000dea4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000deaa:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000deb0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000deb2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000deb6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000deba:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000debd:	ff e0                	jmp    eax
c000debf:	90                   	nop

c000dec0 <Device::getParent()>:
c000dec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dec4:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000deca:	c3                   	ret    
c000decb:	90                   	nop

c000decc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000decc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ded0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000ded5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000dedc:	75 0b                	jne    c000dee9 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000dede:	8b 00                	mov    eax,DWORD PTR [eax]
c000dee0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dee4:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000dee7:	eb 1e                	jmp    c000df07 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000dee9:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000deee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000def4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000defa:	8b 08                	mov    ecx,DWORD PTR [eax]
c000defc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000df00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000df04:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000df07:	ff e0                	jmp    eax
c000df09:	90                   	nop

c000df0a <Device::addChild(Device*)>:
c000df0a:	53                   	push   ebx
c000df0b:	83 ec 08             	sub    esp,0x8
c000df0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000df12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000df16:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000df1c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000df22:	8b 13                	mov    edx,DWORD PTR [ebx]
c000df24:	85 d2                	test   edx,edx
c000df26:	74 04                	je     c000df2c <Device::addChild(Device*)+0x22>
c000df28:	89 d3                	mov    ebx,edx
c000df2a:	eb f6                	jmp    c000df22 <Device::addChild(Device*)+0x18>
c000df2c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000df2f:	83 ec 0c             	sub    esp,0xc
c000df32:	6a 08                	push   0x8
c000df34:	e8 8a ba ff ff       	call   c00099c3 <malloc>
c000df39:	89 03                	mov    DWORD PTR [ebx],eax
c000df3b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000df41:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000df48:	83 c4 18             	add    esp,0x18
c000df4b:	5b                   	pop    ebx
c000df4c:	c3                   	ret    
c000df4d:	90                   	nop

c000df4e <Device::removeAllChildren()>:
c000df4e:	56                   	push   esi
c000df4f:	53                   	push   ebx
c000df50:	52                   	push   edx
c000df51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df55:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000df5b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df5e:	74 17                	je     c000df77 <Device::removeAllChildren()+0x29>
c000df60:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000df63:	85 c0                	test   eax,eax
c000df65:	74 0c                	je     c000df73 <Device::removeAllChildren()+0x25>
c000df67:	83 ec 0c             	sub    esp,0xc
c000df6a:	8b 10                	mov    edx,DWORD PTR [eax]
c000df6c:	50                   	push   eax
c000df6d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000df70:	83 c4 10             	add    esp,0x10
c000df73:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df75:	eb e4                	jmp    c000df5b <Device::removeAllChildren()+0xd>
c000df77:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000df7d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000df83:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000df89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000df90:	58                   	pop    eax
c000df91:	5b                   	pop    ebx
c000df92:	5e                   	pop    esi
c000df93:	c3                   	ret    

c000df94 <Device::hibernateAll()>:
c000df94:	53                   	push   ebx
c000df95:	83 ec 14             	sub    esp,0x14
c000df98:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df9e:	53                   	push   ebx
c000df9f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000dfa2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfa8:	83 c4 10             	add    esp,0x10
c000dfab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfae:	74 0f                	je     c000dfbf <Device::hibernateAll()+0x2b>
c000dfb0:	83 ec 0c             	sub    esp,0xc
c000dfb3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfb6:	e8 d9 ff ff ff       	call   c000df94 <Device::hibernateAll()>
c000dfbb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dfbd:	eb e9                	jmp    c000dfa8 <Device::hibernateAll()+0x14>
c000dfbf:	83 c4 08             	add    esp,0x8
c000dfc2:	5b                   	pop    ebx
c000dfc3:	c3                   	ret    

c000dfc4 <Device::wakeAll()>:
c000dfc4:	53                   	push   ebx
c000dfc5:	83 ec 14             	sub    esp,0x14
c000dfc8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfcc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfce:	53                   	push   ebx
c000dfcf:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000dfd2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfd8:	83 c4 10             	add    esp,0x10
c000dfdb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfde:	74 0f                	je     c000dfef <Device::wakeAll()+0x2b>
c000dfe0:	83 ec 0c             	sub    esp,0xc
c000dfe3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfe6:	e8 d9 ff ff ff       	call   c000dfc4 <Device::wakeAll()>
c000dfeb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dfed:	eb e9                	jmp    c000dfd8 <Device::wakeAll()+0x14>
c000dfef:	83 c4 08             	add    esp,0x8
c000dff2:	5b                   	pop    ebx
c000dff3:	c3                   	ret    

c000dff4 <Device::detectAll()>:
c000dff4:	53                   	push   ebx
c000dff5:	83 ec 14             	sub    esp,0x14
c000dff8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dffc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dffe:	53                   	push   ebx
c000dfff:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e002:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e008:	83 c4 10             	add    esp,0x10
c000e00b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e00e:	74 0f                	je     c000e01f <Device::detectAll()+0x2b>
c000e010:	83 ec 0c             	sub    esp,0xc
c000e013:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e016:	e8 d9 ff ff ff       	call   c000dff4 <Device::detectAll()>
c000e01b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e01d:	eb e9                	jmp    c000e008 <Device::detectAll()+0x14>
c000e01f:	83 c4 08             	add    esp,0x8
c000e022:	5b                   	pop    ebx
c000e023:	c3                   	ret    

c000e024 <Device::disableLegacyAll()>:
c000e024:	53                   	push   ebx
c000e025:	83 ec 14             	sub    esp,0x14
c000e028:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e02c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e02e:	53                   	push   ebx
c000e02f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e032:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e038:	83 c4 10             	add    esp,0x10
c000e03b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e03e:	74 0f                	je     c000e04f <Device::disableLegacyAll()+0x2b>
c000e040:	83 ec 0c             	sub    esp,0xc
c000e043:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e046:	e8 d9 ff ff ff       	call   c000e024 <Device::disableLegacyAll()>
c000e04b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e04d:	eb e9                	jmp    c000e038 <Device::disableLegacyAll()+0x14>
c000e04f:	83 c4 08             	add    esp,0x8
c000e052:	5b                   	pop    ebx
c000e053:	c3                   	ret    

c000e054 <Device::loadDriversForAll()>:
c000e054:	53                   	push   ebx
c000e055:	83 ec 08             	sub    esp,0x8
c000e058:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e05c:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e063:	75 0c                	jne    c000e071 <Device::loadDriversForAll()+0x1d>
c000e065:	83 ec 0c             	sub    esp,0xc
c000e068:	53                   	push   ebx
c000e069:	e8 a0 fd ff ff       	call   c000de0e <Device::findAndLoadDriver()>
c000e06e:	83 c4 10             	add    esp,0x10
c000e071:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e077:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e07a:	74 12                	je     c000e08e <Device::loadDriversForAll()+0x3a>
c000e07c:	83 ec 0c             	sub    esp,0xc
c000e07f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e082:	e8 cd ff ff ff       	call   c000e054 <Device::loadDriversForAll()>
c000e087:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e089:	83 c4 10             	add    esp,0x10
c000e08c:	eb e9                	jmp    c000e077 <Device::loadDriversForAll()+0x23>
c000e08e:	83 c4 08             	add    esp,0x8
c000e091:	5b                   	pop    ebx
c000e092:	c3                   	ret    
c000e093:	90                   	nop

c000e094 <Device::closeAll()>:
c000e094:	53                   	push   ebx
c000e095:	83 ec 08             	sub    esp,0x8
c000e098:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e09c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e09e:	6a 00                	push   0x0
c000e0a0:	6a 00                	push   0x0
c000e0a2:	6a 00                	push   0x0
c000e0a4:	53                   	push   ebx
c000e0a5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e0a8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e0ae:	83 c4 10             	add    esp,0x10
c000e0b1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e0b4:	74 0f                	je     c000e0c5 <Device::closeAll()+0x31>
c000e0b6:	83 ec 0c             	sub    esp,0xc
c000e0b9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0bc:	e8 d3 ff ff ff       	call   c000e094 <Device::closeAll()>
c000e0c1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e0c3:	eb e9                	jmp    c000e0ae <Device::closeAll()+0x1a>
c000e0c5:	83 c4 08             	add    esp,0x8
c000e0c8:	5b                   	pop    ebx
c000e0c9:	c3                   	ret    

c000e0ca <Device::powerSavingAll(PowerSavingLevel)>:
c000e0ca:	56                   	push   esi
c000e0cb:	53                   	push   ebx
c000e0cc:	83 ec 0c             	sub    esp,0xc
c000e0cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e0d3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e0d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0d9:	56                   	push   esi
c000e0da:	53                   	push   ebx
c000e0db:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e0de:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e0e4:	83 c4 10             	add    esp,0x10
c000e0e7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e0ea:	74 0f                	je     c000e0fb <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e0ec:	52                   	push   edx
c000e0ed:	52                   	push   edx
c000e0ee:	56                   	push   esi
c000e0ef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0f2:	e8 d3 ff ff ff       	call   c000e0ca <Device::powerSavingAll(PowerSavingLevel)>
c000e0f7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e0f9:	eb e9                	jmp    c000e0e4 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e0fb:	58                   	pop    eax
c000e0fc:	5b                   	pop    ebx
c000e0fd:	5e                   	pop    esi
c000e0fe:	c3                   	ret    
c000e0ff:	90                   	nop

c000e100 <Device::setName(char const*)>:
c000e100:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e108:	e9 33 26 ff ff       	jmp    c0000740 <strcpy>
c000e10d:	90                   	nop

c000e10e <Device::Device(char const*)>:
c000e10e:	83 ec 1c             	sub    esp,0x1c
c000e111:	ba d0 33 02 c0       	mov    edx,0xc00233d0
c000e116:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e11a:	89 10                	mov    DWORD PTR [eax],edx
c000e11c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e120:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e12a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e12e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e138:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e13c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e146:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e14a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e154:	83 ec 08             	sub    esp,0x8
c000e157:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e15b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e15f:	e8 9c ff ff ff       	call   c000e100 <Device::setName(char const*)>
c000e164:	83 c4 10             	add    esp,0x10
c000e167:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e16f:	83 ec 0c             	sub    esp,0xc
c000e172:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e176:	e8 48 b8 ff ff       	call   c00099c3 <malloc>
c000e17b:	83 c4 10             	add    esp,0x10
c000e17e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e184:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e18b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e18f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e195:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e199:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e19f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e1a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1a9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e1af:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e1b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1ba:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e1c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1c5:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e1cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1d0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e1da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1de:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e1e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1ec:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e1f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1fa:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e204:	90                   	nop
c000e205:	83 c4 1c             	add    esp,0x1c
c000e208:	c3                   	ret    
c000e209:	90                   	nop

c000e20a <Device::getName()>:
c000e20a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e20e:	05 d0 00 00 00       	add    eax,0xd0
c000e213:	c3                   	ret    

c000e214 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e214:	83 ec 0c             	sub    esp,0xc
c000e217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e21b:	83 ec 08             	sub    esp,0x8
c000e21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e222:	50                   	push   eax
c000e223:	e8 e6 fe ff ff       	call   c000e10e <Device::Device(char const*)>
c000e228:	83 c4 10             	add    esp,0x10
c000e22b:	ba fc 33 02 c0       	mov    edx,0xc00233fc
c000e230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e234:	89 10                	mov    DWORD PTR [eax],edx
c000e236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e23a:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e244:	90                   	nop
c000e245:	83 c4 0c             	add    esp,0xc
c000e248:	c3                   	ret    
c000e249:	90                   	nop

c000e24a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e24a:	57                   	push   edi
c000e24b:	56                   	push   esi
c000e24c:	53                   	push   ebx
c000e24d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e251:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e255:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e259:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e25f:	75 0c                	jne    c000e26d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e261:	52                   	push   edx
c000e262:	52                   	push   edx
c000e263:	53                   	push   ebx
c000e264:	56                   	push   esi
c000e265:	e8 cc 31 01 00       	call   c0021436 <LinkedList<Device>::addElement(Device*)>
c000e26a:	83 c4 10             	add    esp,0x10
c000e26d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e273:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e276:	74 12                	je     c000e28a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e278:	50                   	push   eax
c000e279:	57                   	push   edi
c000e27a:	56                   	push   esi
c000e27b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e27e:	e8 c7 ff ff ff       	call   c000e24a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e283:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e285:	83 c4 10             	add    esp,0x10
c000e288:	eb e9                	jmp    c000e273 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e28a:	5b                   	pop    ebx
c000e28b:	5e                   	pop    esi
c000e28c:	5f                   	pop    edi
c000e28d:	c3                   	ret    

c000e28e <getDevicesOfType(DeviceType)>:
c000e28e:	53                   	push   ebx
c000e28f:	83 ec 14             	sub    esp,0x14
c000e292:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e296:	53                   	push   ebx
c000e297:	e8 76 32 01 00       	call   c0021512 <LinkedList<Device>::LinkedList()>
c000e29c:	83 c4 0c             	add    esp,0xc
c000e29f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e2a3:	53                   	push   ebx
c000e2a4:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c000e2aa:	e8 9b ff ff ff       	call   c000e24a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e2af:	89 d8                	mov    eax,ebx
c000e2b1:	83 c4 18             	add    esp,0x18
c000e2b4:	5b                   	pop    ebx
c000e2b5:	c2 04 00             	ret    0x4

c000e2b8 <HardDiskController::HardDiskController(char const*)>:
c000e2b8:	83 ec 0c             	sub    esp,0xc
c000e2bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2bf:	83 ec 08             	sub    esp,0x8
c000e2c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2c6:	50                   	push   eax
c000e2c7:	e8 42 fe ff ff       	call   c000e10e <Device::Device(char const*)>
c000e2cc:	83 c4 10             	add    esp,0x10
c000e2cf:	ba 28 34 02 c0       	mov    edx,0xc0023428
c000e2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2d8:	89 10                	mov    DWORD PTR [eax],edx
c000e2da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2de:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e2e8:	90                   	nop
c000e2e9:	83 c4 0c             	add    esp,0xc
c000e2ec:	c3                   	ret    
c000e2ed:	90                   	nop
c000e2ee:	66 90                	xchg   ax,ax

c000e2f0 <HardDiskController::~HardDiskController()>:
c000e2f0:	83 ec 0c             	sub    esp,0xc
c000e2f3:	ba 28 34 02 c0       	mov    edx,0xc0023428
c000e2f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2fc:	89 10                	mov    DWORD PTR [eax],edx
c000e2fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e302:	83 ec 0c             	sub    esp,0xc
c000e305:	50                   	push   eax
c000e306:	e8 cd fa ff ff       	call   c000ddd8 <Device::~Device()>
c000e30b:	83 c4 10             	add    esp,0x10
c000e30e:	90                   	nop
c000e30f:	83 c4 0c             	add    esp,0xc
c000e312:	c3                   	ret    
c000e313:	90                   	nop

c000e314 <HardDiskController::~HardDiskController()>:
c000e314:	83 ec 0c             	sub    esp,0xc
c000e317:	83 ec 0c             	sub    esp,0xc
c000e31a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e31e:	e8 cd ff ff ff       	call   c000e2f0 <HardDiskController::~HardDiskController()>
c000e323:	83 c4 10             	add    esp,0x10
c000e326:	83 ec 08             	sub    esp,0x8
c000e329:	68 58 01 00 00       	push   0x158
c000e32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e332:	e8 ab e6 ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c000e337:	83 c4 10             	add    esp,0x10
c000e33a:	83 c4 0c             	add    esp,0xc
c000e33d:	c3                   	ret    

c000e33e <PhysicalDisk::eject()>:
c000e33e:	83 c8 ff             	or     eax,0xffffffff
c000e341:	c3                   	ret    

c000e342 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e342:	83 ec 0c             	sub    esp,0xc
c000e345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e349:	83 ec 08             	sub    esp,0x8
c000e34c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e350:	50                   	push   eax
c000e351:	e8 b8 fd ff ff       	call   c000e10e <Device::Device(char const*)>
c000e356:	83 c4 10             	add    esp,0x10
c000e359:	ba 54 34 02 c0       	mov    edx,0xc0023454
c000e35e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e362:	89 10                	mov    DWORD PTR [eax],edx
c000e364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e368:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e36f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e373:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e37e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e38c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e390:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e39a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e3a4:	90                   	nop
c000e3a5:	83 c4 0c             	add    esp,0xc
c000e3a8:	c3                   	ret    
c000e3a9:	90                   	nop

c000e3aa <PhysicalDisk::startCache()>:
c000e3aa:	56                   	push   esi
c000e3ab:	53                   	push   ebx
c000e3ac:	83 ec 10             	sub    esp,0x10
c000e3af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e3b3:	6a 44                	push   0x44
c000e3b5:	e8 09 b6 ff ff       	call   c00099c3 <malloc>
c000e3ba:	89 c6                	mov    esi,eax
c000e3bc:	58                   	pop    eax
c000e3bd:	5a                   	pop    edx
c000e3be:	53                   	push   ebx
c000e3bf:	56                   	push   esi
c000e3c0:	e8 2f 26 00 00       	call   c00109f4 <VCache::VCache(PhysicalDisk*)>
c000e3c5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e3cb:	83 c4 14             	add    esp,0x14
c000e3ce:	5b                   	pop    ebx
c000e3cf:	5e                   	pop    esi
c000e3d0:	c3                   	ret    
c000e3d1:	90                   	nop

c000e3d2 <PhysicalDisk::~PhysicalDisk()>:
c000e3d2:	83 ec 0c             	sub    esp,0xc
c000e3d5:	ba 54 34 02 c0       	mov    edx,0xc0023454
c000e3da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3de:	89 10                	mov    DWORD PTR [eax],edx
c000e3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e4:	83 ec 0c             	sub    esp,0xc
c000e3e7:	50                   	push   eax
c000e3e8:	e8 eb f9 ff ff       	call   c000ddd8 <Device::~Device()>
c000e3ed:	83 c4 10             	add    esp,0x10
c000e3f0:	90                   	nop
c000e3f1:	83 c4 0c             	add    esp,0xc
c000e3f4:	c3                   	ret    
c000e3f5:	90                   	nop

c000e3f6 <PhysicalDisk::~PhysicalDisk()>:
c000e3f6:	83 ec 0c             	sub    esp,0xc
c000e3f9:	83 ec 0c             	sub    esp,0xc
c000e3fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e400:	e8 cd ff ff ff       	call   c000e3d2 <PhysicalDisk::~PhysicalDisk()>
c000e405:	83 c4 10             	add    esp,0x10
c000e408:	83 ec 08             	sub    esp,0x8
c000e40b:	68 6c 01 00 00       	push   0x16c
c000e410:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e414:	e8 c9 e5 ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c000e419:	83 c4 10             	add    esp,0x10
c000e41c:	83 c4 0c             	add    esp,0xc
c000e41f:	c3                   	ret    

c000e420 <FPU::FPU(char const*)>:
c000e420:	83 ec 0c             	sub    esp,0xc
c000e423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e427:	83 ec 08             	sub    esp,0x8
c000e42a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e42e:	50                   	push   eax
c000e42f:	e8 da fc ff ff       	call   c000e10e <Device::Device(char const*)>
c000e434:	83 c4 10             	add    esp,0x10
c000e437:	ba 98 34 02 c0       	mov    edx,0xc0023498
c000e43c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e440:	89 10                	mov    DWORD PTR [eax],edx
c000e442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e446:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e450:	90                   	nop
c000e451:	83 c4 0c             	add    esp,0xc
c000e454:	c3                   	ret    
c000e455:	90                   	nop
c000e456:	66 90                	xchg   ax,ax

c000e458 <FPU::~FPU()>:
c000e458:	83 ec 0c             	sub    esp,0xc
c000e45b:	ba 98 34 02 c0       	mov    edx,0xc0023498
c000e460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e464:	89 10                	mov    DWORD PTR [eax],edx
c000e466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e46a:	83 ec 0c             	sub    esp,0xc
c000e46d:	50                   	push   eax
c000e46e:	e8 65 f9 ff ff       	call   c000ddd8 <Device::~Device()>
c000e473:	83 c4 10             	add    esp,0x10
c000e476:	90                   	nop
c000e477:	83 c4 0c             	add    esp,0xc
c000e47a:	c3                   	ret    
c000e47b:	90                   	nop

c000e47c <FPU::~FPU()>:
c000e47c:	83 ec 0c             	sub    esp,0xc
c000e47f:	83 ec 0c             	sub    esp,0xc
c000e482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e486:	e8 cd ff ff ff       	call   c000e458 <FPU::~FPU()>
c000e48b:	83 c4 10             	add    esp,0x10
c000e48e:	83 ec 08             	sub    esp,0x8
c000e491:	68 58 01 00 00       	push   0x158
c000e496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e49a:	e8 43 e5 ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c000e49f:	83 c4 10             	add    esp,0x10
c000e4a2:	83 c4 0c             	add    esp,0xc
c000e4a5:	c3                   	ret    

c000e4a6 <setupFPU()>:
c000e4a6:	53                   	push   ebx
c000e4a7:	83 ec 08             	sub    esp,0x8
c000e4aa:	8b 15 48 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026448
c000e4b0:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e4b7:	74 1b                	je     c000e4d4 <setupFPU()+0x2e>
c000e4b9:	83 ec 0c             	sub    esp,0xc
c000e4bc:	68 58 01 00 00       	push   0x158
c000e4c1:	e8 fd b4 ff ff       	call   c00099c3 <malloc>
c000e4c6:	89 c3                	mov    ebx,eax
c000e4c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4cb:	e8 48 16 01 00       	call   c001fb18 <AVX::AVX()>
c000e4d0:	eb 62                	jmp    c000e534 <setupFPU()+0x8e>
c000e4d2:	66 90                	xchg   ax,ax
c000e4d4:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e4da:	84 c0                	test   al,al
c000e4dc:	79 1a                	jns    c000e4f8 <setupFPU()+0x52>
c000e4de:	83 ec 0c             	sub    esp,0xc
c000e4e1:	68 58 01 00 00       	push   0x158
c000e4e6:	e8 d8 b4 ff ff       	call   c00099c3 <malloc>
c000e4eb:	89 c3                	mov    ebx,eax
c000e4ed:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4f0:	e8 53 17 01 00       	call   c001fc48 <SSE::SSE()>
c000e4f5:	eb 3d                	jmp    c000e534 <setupFPU()+0x8e>
c000e4f7:	90                   	nop
c000e4f8:	a8 20                	test   al,0x20
c000e4fa:	74 1c                	je     c000e518 <setupFPU()+0x72>
c000e4fc:	83 ec 0c             	sub    esp,0xc
c000e4ff:	68 58 01 00 00       	push   0x158
c000e504:	e8 ba b4 ff ff       	call   c00099c3 <malloc>
c000e509:	89 c3                	mov    ebx,eax
c000e50b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e50e:	e8 99 16 01 00       	call   c001fbac <MMX::MMX()>
c000e513:	eb 1f                	jmp    c000e534 <setupFPU()+0x8e>
c000e515:	8d 76 00             	lea    esi,[esi+0x0]
c000e518:	a8 10                	test   al,0x10
c000e51a:	74 20                	je     c000e53c <setupFPU()+0x96>
c000e51c:	83 ec 0c             	sub    esp,0xc
c000e51f:	68 58 01 00 00       	push   0x158
c000e524:	e8 9a b4 ff ff       	call   c00099c3 <malloc>
c000e529:	89 c3                	mov    ebx,eax
c000e52b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e52e:	e8 a9 17 01 00       	call   c001fcdc <x87::x87()>
c000e533:	90                   	nop
c000e534:	83 c4 10             	add    esp,0x10
c000e537:	eb 27                	jmp    c000e560 <setupFPU()+0xba>
c000e539:	8d 76 00             	lea    esi,[esi+0x0]
c000e53c:	83 e0 ef             	and    eax,0xffffffef
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e548:	68 84 34 02 c0       	push   0xc0023484
c000e54d:	e8 71 e5 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000e552:	0f 20 c0             	mov    eax,cr0
c000e555:	83 c8 04             	or     eax,0x4
c000e558:	0f 22 c0             	mov    cr0,eax
c000e55b:	31 db                	xor    ebx,ebx
c000e55d:	83 c4 10             	add    esp,0x10
c000e560:	89 d8                	mov    eax,ebx
c000e562:	83 c4 08             	add    esp,0x8
c000e565:	5b                   	pop    ebx
c000e566:	c3                   	ret    
c000e567:	90                   	nop

c000e568 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e568:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e56c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e570:	c1 e0 04             	shl    eax,0x4
c000e573:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e577:	8d 50 10             	lea    edx,[eax+0x10]
c000e57a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e580:	74 08                	je     c000e58a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e582:	83 c0 04             	add    eax,0x4
c000e585:	39 d0                	cmp    eax,edx
c000e587:	75 f1                	jne    c000e57a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e589:	c3                   	ret    
c000e58a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e594:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e59e:	eb e2                	jmp    c000e582 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e5a0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e5a0:	57                   	push   edi
c000e5a1:	31 c0                	xor    eax,eax
c000e5a3:	56                   	push   esi
c000e5a4:	53                   	push   ebx
c000e5a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e5a9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e5ad:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e5b1:	89 da                	mov    edx,ebx
c000e5b3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e5b7:	c1 e2 04             	shl    edx,0x4
c000e5ba:	01 ca                	add    edx,ecx
c000e5bc:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e5c4:	74 16                	je     c000e5dc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e5c6:	40                   	inc    eax
c000e5c7:	83 f8 04             	cmp    eax,0x4
c000e5ca:	75 f0                	jne    c000e5bc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e5cc:	c7 44 24 10 c8 34 02 c0 	mov    DWORD PTR [esp+0x10],0xc00234c8
c000e5d4:	5b                   	pop    ebx
c000e5d5:	5e                   	pop    esi
c000e5d6:	5f                   	pop    edi
c000e5d7:	e9 a9 5d 00 00       	jmp    c0014385 <Krnl::panic(char const*)>
c000e5dc:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e5df:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e5e2:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e5e8:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e5ee:	5b                   	pop    ebx
c000e5ef:	5e                   	pop    esi
c000e5f0:	5f                   	pop    edi
c000e5f1:	c3                   	ret    

c000e5f2 <doubleFault(regs*, void*)>:
c000e5f2:	55                   	push   ebp
c000e5f3:	89 e5                	mov    ebp,esp
c000e5f5:	83 ec 08             	sub    esp,0x8
c000e5f8:	83 ec 0c             	sub    esp,0xc
c000e5fb:	68 d5 34 02 c0       	push   0xc00234d5
c000e600:	e8 80 5d 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000e605:	83 c4 10             	add    esp,0x10
c000e608:	90                   	nop
c000e609:	c9                   	leave  
c000e60a:	c3                   	ret    
c000e60b:	90                   	nop

c000e60c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e60c:	56                   	push   esi
c000e60d:	53                   	push   ebx
c000e60e:	50                   	push   eax
c000e60f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e613:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e617:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e61c:	75 35                	jne    c000e653 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e61e:	8d 43 20             	lea    eax,[ebx+0x20]
c000e621:	31 d2                	xor    edx,edx
c000e623:	89 c1                	mov    ecx,eax
c000e625:	c1 e1 04             	shl    ecx,0x4
c000e628:	01 f1                	add    ecx,esi
c000e62a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e632:	74 3e                	je     c000e672 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e634:	42                   	inc    edx
c000e635:	83 fa 04             	cmp    edx,0x4
c000e638:	75 f0                	jne    c000e62a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e63a:	83 ec 0c             	sub    esp,0xc
c000e63d:	68 ef 34 02 c0       	push   0xc00234ef
c000e642:	e8 3e 5d 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000e647:	83 c4 10             	add    esp,0x10
c000e64a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e64f:	5a                   	pop    edx
c000e650:	5b                   	pop    ebx
c000e651:	5e                   	pop    esi
c000e652:	c3                   	ret    
c000e653:	83 ec 0c             	sub    esp,0xc
c000e656:	56                   	push   esi
c000e657:	e8 ae fb ff ff       	call   c000e20a <Device::getName()>
c000e65c:	83 c4 10             	add    esp,0x10
c000e65f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e662:	75 ba                	jne    c000e61e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e664:	83 fb 0f             	cmp    ebx,0xf
c000e667:	7f 29                	jg     c000e692 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e669:	0f b6 9b 40 5b 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffda4c0]
c000e670:	eb ac                	jmp    c000e61e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e672:	8d 04 82             	lea    eax,[edx+eax*4]
c000e675:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e679:	8d 04 86             	lea    eax,[esi+eax*4]
c000e67c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e682:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e686:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e68c:	89 d8                	mov    eax,ebx
c000e68e:	5a                   	pop    edx
c000e68f:	5b                   	pop    ebx
c000e690:	5e                   	pop    esi
c000e691:	c3                   	ret    
c000e692:	83 ec 0c             	sub    esp,0xc
c000e695:	68 e2 34 02 c0       	push   0xc00234e2
c000e69a:	e8 e6 5c 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000e69f:	83 c4 10             	add    esp,0x10
c000e6a2:	e9 77 ff ff ff       	jmp    c000e61e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e6a7:	90                   	nop

c000e6a8 <InterruptController::clearAllHandlers(int, bool)>:
c000e6a8:	56                   	push   esi
c000e6a9:	53                   	push   ebx
c000e6aa:	52                   	push   edx
c000e6ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e6af:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e6b3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e6b8:	75 61                	jne    c000e71b <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e6ba:	8d 46 20             	lea    eax,[esi+0x20]
c000e6bd:	c1 e6 04             	shl    esi,0x4
c000e6c0:	c1 e0 04             	shl    eax,0x4
c000e6c3:	01 de                	add    esi,ebx
c000e6c5:	01 d8                	add    eax,ebx
c000e6c7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000e6d1:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000e6db:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000e6e5:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e6ef:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000e6f9:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000e703:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000e70d:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000e717:	58                   	pop    eax
c000e718:	5b                   	pop    ebx
c000e719:	5e                   	pop    esi
c000e71a:	c3                   	ret    
c000e71b:	83 ec 0c             	sub    esp,0xc
c000e71e:	53                   	push   ebx
c000e71f:	e8 e6 fa ff ff       	call   c000e20a <Device::getName()>
c000e724:	83 c4 10             	add    esp,0x10
c000e727:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e72a:	75 8e                	jne    c000e6ba <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e72c:	83 fe 0f             	cmp    esi,0xf
c000e72f:	7f 09                	jg     c000e73a <InterruptController::clearAllHandlers(int, bool)+0x92>
c000e731:	0f b6 b6 40 5b 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda4c0]
c000e738:	eb 80                	jmp    c000e6ba <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	68 fc 34 02 c0       	push   0xc00234fc
c000e742:	e8 3e 5c 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000e747:	83 c4 10             	add    esp,0x10
c000e74a:	e9 6b ff ff ff       	jmp    c000e6ba <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e74f:	90                   	nop

c000e750 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e750:	56                   	push   esi
c000e751:	53                   	push   ebx
c000e752:	52                   	push   edx
c000e753:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e757:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e75b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e760:	75 3a                	jne    c000e79c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000e762:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e766:	8d 50 20             	lea    edx,[eax+0x20]
c000e769:	c1 e2 04             	shl    edx,0x4
c000e76c:	8d 04 16             	lea    eax,[esi+edx*1]
c000e76f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000e773:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000e779:	74 0b                	je     c000e786 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000e77b:	83 c0 04             	add    eax,0x4
c000e77e:	39 d0                	cmp    eax,edx
c000e780:	75 f1                	jne    c000e773 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000e782:	58                   	pop    eax
c000e783:	5b                   	pop    ebx
c000e784:	5e                   	pop    esi
c000e785:	c3                   	ret    
c000e786:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e790:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e79a:	eb df                	jmp    c000e77b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000e79c:	83 ec 0c             	sub    esp,0xc
c000e79f:	56                   	push   esi
c000e7a0:	e8 65 fa ff ff       	call   c000e20a <Device::getName()>
c000e7a5:	83 c4 10             	add    esp,0x10
c000e7a8:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e7ab:	75 b5                	jne    c000e762 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e7ad:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000e7b2:	7f 11                	jg     c000e7c5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000e7b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e7b8:	0f b6 80 40 5b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda4c0]
c000e7bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e7c3:	eb 9d                	jmp    c000e762 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e7c5:	83 ec 0c             	sub    esp,0xc
c000e7c8:	68 09 35 02 c0       	push   0xc0023509
c000e7cd:	e8 b3 5b 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000e7d2:	83 c4 10             	add    esp,0x10
c000e7d5:	eb 8b                	jmp    c000e762 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000e7d7 <nmiHandler(regs*, void*)>:
c000e7d7:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000e7dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e7e0:	e9 a9 a9 ff ff       	jmp    c000918e <Computer::handleNMI()>

c000e7e5 <int_handler>:
c000e7e5:	55                   	push   ebp
c000e7e6:	57                   	push   edi
c000e7e7:	56                   	push   esi
c000e7e8:	53                   	push   ebx
c000e7e9:	83 ec 0c             	sub    esp,0xc
c000e7ec:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e7f0:	80 3d 64 6f 02 c0 00 	cmp    BYTE PTR ds:0xc0026f64,0x0
c000e7f7:	74 0b                	je     c000e804 <int_handler+0x1f>
c000e7f9:	fa                   	cli    
c000e7fa:	f4                   	hlt    
c000e7fb:	80 3d 64 6f 02 c0 00 	cmp    BYTE PTR ds:0xc0026f64,0x0
c000e802:	75 f5                	jne    c000e7f9 <int_handler+0x14>
c000e804:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000e809:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000e80c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e812:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000e818:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e81b:	83 f8 17             	cmp    eax,0x17
c000e81e:	77 13                	ja     c000e833 <int_handler+0x4e>
c000e820:	83 ec 08             	sub    esp,0x8
c000e823:	8b 17                	mov    edx,DWORD PTR [edi]
c000e825:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e828:	0f b6 c0             	movzx  eax,al
c000e82b:	50                   	push   eax
c000e82c:	57                   	push   edi
c000e82d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000e830:	83 c4 10             	add    esp,0x10
c000e833:	83 c3 15             	add    ebx,0x15
c000e836:	c1 e3 04             	shl    ebx,0x4
c000e839:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000e83d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000e844:	31 db                	xor    ebx,ebx
c000e846:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e84a:	85 c0                	test   eax,eax
c000e84c:	74 13                	je     c000e861 <int_handler+0x7c>
c000e84e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000e851:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000e855:	74 1c                	je     c000e873 <int_handler+0x8e>
c000e857:	83 ec 08             	sub    esp,0x8
c000e85a:	52                   	push   edx
c000e85b:	56                   	push   esi
c000e85c:	ff d0                	call   eax
c000e85e:	83 c4 10             	add    esp,0x10
c000e861:	43                   	inc    ebx
c000e862:	83 fb 04             	cmp    ebx,0x4
c000e865:	75 df                	jne    c000e846 <int_handler+0x61>
c000e867:	83 c4 0c             	add    esp,0xc
c000e86a:	31 c0                	xor    eax,eax
c000e86c:	5b                   	pop    ebx
c000e86d:	31 d2                	xor    edx,edx
c000e86f:	5e                   	pop    esi
c000e870:	5f                   	pop    edi
c000e871:	5d                   	pop    ebp
c000e872:	c3                   	ret    
c000e873:	83 ec 08             	sub    esp,0x8
c000e876:	52                   	push   edx
c000e877:	56                   	push   esi
c000e878:	ff d0                	call   eax
c000e87a:	83 c4 10             	add    esp,0x10
c000e87d:	83 c4 0c             	add    esp,0xc
c000e880:	5b                   	pop    ebx
c000e881:	5e                   	pop    esi
c000e882:	5f                   	pop    edi
c000e883:	5d                   	pop    ebp
c000e884:	c3                   	ret    
c000e885:	90                   	nop

c000e886 <InterruptController::InterruptController(char const*)>:
c000e886:	83 ec 1c             	sub    esp,0x1c
c000e889:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e88d:	83 ec 08             	sub    esp,0x8
c000e890:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e894:	50                   	push   eax
c000e895:	e8 74 f8 ff ff       	call   c000e10e <Device::Device(char const*)>
c000e89a:	83 c4 10             	add    esp,0x10
c000e89d:	ba c0 37 02 c0       	mov    edx,0xc00237c0
c000e8a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8a6:	89 10                	mov    DWORD PTR [eax],edx
c000e8a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8ac:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000e8b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e8be:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e8c6:	7f 5e                	jg     c000e926 <InterruptController::InterruptController(char const*)+0xa0>
c000e8c8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e8d0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e8d5:	7f 49                	jg     c000e920 <InterruptController::InterruptController(char const*)+0x9a>
c000e8d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e8df:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e8e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e8ea:	01 ca                	add    edx,ecx
c000e8ec:	83 c2 54             	add    edx,0x54
c000e8ef:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e8f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e8ff:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e906:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e90a:	01 ca                	add    edx,ecx
c000e90c:	81 c2 54 04 00 00    	add    edx,0x454
c000e912:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e91a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000e91e:	eb b0                	jmp    c000e8d0 <InterruptController::InterruptController(char const*)+0x4a>
c000e920:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e924:	eb 98                	jmp    c000e8be <InterruptController::InterruptController(char const*)+0x38>
c000e926:	90                   	nop
c000e927:	83 c4 1c             	add    esp,0x1c
c000e92a:	c3                   	ret    
c000e92b:	90                   	nop

c000e92c <InterruptController::~InterruptController()>:
c000e92c:	83 ec 0c             	sub    esp,0xc
c000e92f:	ba c0 37 02 c0       	mov    edx,0xc00237c0
c000e934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e938:	89 10                	mov    DWORD PTR [eax],edx
c000e93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e93e:	83 ec 0c             	sub    esp,0xc
c000e941:	50                   	push   eax
c000e942:	e8 91 f4 ff ff       	call   c000ddd8 <Device::~Device()>
c000e947:	83 c4 10             	add    esp,0x10
c000e94a:	90                   	nop
c000e94b:	83 c4 0c             	add    esp,0xc
c000e94e:	c3                   	ret    
c000e94f:	90                   	nop

c000e950 <InterruptController::~InterruptController()>:
c000e950:	83 ec 0c             	sub    esp,0xc
c000e953:	83 ec 0c             	sub    esp,0xc
c000e956:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e95a:	e8 cd ff ff ff       	call   c000e92c <InterruptController::~InterruptController()>
c000e95f:	83 c4 10             	add    esp,0x10
c000e962:	83 ec 08             	sub    esp,0x8
c000e965:	68 58 21 00 00       	push   0x2158
c000e96a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e96e:	e8 6f e0 ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c000e973:	83 c4 10             	add    esp,0x10
c000e976:	83 c4 0c             	add    esp,0xc
c000e979:	c3                   	ret    

c000e97a <displayDebugInfo(regs*)>:
c000e97a:	55                   	push   ebp
c000e97b:	57                   	push   edi
c000e97c:	56                   	push   esi
c000e97d:	53                   	push   ebx
c000e97e:	83 ec 24             	sub    esp,0x24
c000e981:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e985:	0f 20 c2             	mov    edx,cr0
c000e988:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e98c:	0f 20 d7             	mov    edi,cr2
c000e98f:	0f 20 de             	mov    esi,cr3
c000e992:	0f 20 e5             	mov    ebp,cr4
c000e995:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000e998:	68 16 35 02 c0       	push   0xc0023516
c000e99d:	e8 21 e1 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000e9a2:	59                   	pop    ecx
c000e9a3:	58                   	pop    eax
c000e9a4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e9a7:	68 21 35 02 c0       	push   0xc0023521
c000e9ac:	e8 12 e1 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000e9b1:	58                   	pop    eax
c000e9b2:	5a                   	pop    edx
c000e9b3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e9b6:	68 2c 35 02 c0       	push   0xc002352c
c000e9bb:	e8 03 e1 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000e9c0:	59                   	pop    ecx
c000e9c1:	58                   	pop    eax
c000e9c2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e9c5:	68 37 35 02 c0       	push   0xc0023537
c000e9ca:	e8 f4 e0 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000e9cf:	58                   	pop    eax
c000e9d0:	5a                   	pop    edx
c000e9d1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e9d4:	68 42 35 02 c0       	push   0xc0023542
c000e9d9:	e8 e5 e0 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000e9de:	59                   	pop    ecx
c000e9df:	58                   	pop    eax
c000e9e0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e9e3:	68 4d 35 02 c0       	push   0xc002354d
c000e9e8:	e8 d6 e0 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000e9ed:	58                   	pop    eax
c000e9ee:	5a                   	pop    edx
c000e9ef:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e9f2:	68 58 35 02 c0       	push   0xc0023558
c000e9f7:	e8 c7 e0 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000e9fc:	59                   	pop    ecx
c000e9fd:	58                   	pop    eax
c000e9fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ea01:	68 63 35 02 c0       	push   0xc0023563
c000ea06:	e8 b8 e0 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000ea0b:	58                   	pop    eax
c000ea0c:	5a                   	pop    edx
c000ea0d:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ea10:	68 6e 35 02 c0       	push   0xc002356e
c000ea15:	e8 a9 e0 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000ea1a:	59                   	pop    ecx
c000ea1b:	58                   	pop    eax
c000ea1c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ea1f:	68 7d 35 02 c0       	push   0xc002357d
c000ea24:	e8 9a e0 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000ea29:	58                   	pop    eax
c000ea2a:	5a                   	pop    edx
c000ea2b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ea2e:	68 88 35 02 c0       	push   0xc0023588
c000ea33:	e8 8b e0 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000ea38:	59                   	pop    ecx
c000ea39:	58                   	pop    eax
c000ea3a:	57                   	push   edi
c000ea3b:	68 93 35 02 c0       	push   0xc0023593
c000ea40:	e8 7e e0 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000ea45:	58                   	pop    eax
c000ea46:	5a                   	pop    edx
c000ea47:	56                   	push   esi
c000ea48:	68 9e 35 02 c0       	push   0xc002359e
c000ea4d:	e8 71 e0 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000ea52:	59                   	pop    ecx
c000ea53:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ea58:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea5e:	e8 bc bd ff ff       	call   c000a81f <setActiveTerminal(VgaText*)>
c000ea63:	58                   	pop    eax
c000ea64:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ea67:	5a                   	pop    edx
c000ea68:	c1 e0 05             	shl    eax,0x5
c000ea6b:	05 a0 58 02 c0       	add    eax,0xc00258a0
c000ea70:	50                   	push   eax
c000ea71:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ea76:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea7c:	e8 ab c2 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000ea81:	59                   	pop    ecx
c000ea82:	58                   	pop    eax
c000ea83:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ea88:	68 a9 35 02 c0       	push   0xc00235a9
c000ea8d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea93:	e8 94 c2 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000ea98:	58                   	pop    eax
c000ea99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ea9e:	5a                   	pop    edx
c000ea9f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000eaa2:	83 c0 0c             	add    eax,0xc
c000eaa5:	50                   	push   eax
c000eaa6:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eaab:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eab1:	e8 76 c2 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000eab6:	59                   	pop    ecx
c000eab7:	58                   	pop    eax
c000eab8:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eabd:	68 b2 35 02 c0       	push   0xc00235b2
c000eac2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eac8:	e8 5f c2 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000eacd:	58                   	pop    eax
c000eace:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ead3:	5a                   	pop    edx
c000ead4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ead7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eadd:	e8 04 c2 ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c000eae2:	59                   	pop    ecx
c000eae3:	58                   	pop    eax
c000eae4:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eae9:	68 ba 35 02 c0       	push   0xc00235ba
c000eaee:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eaf4:	e8 33 c2 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000eaf9:	58                   	pop    eax
c000eafa:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eaff:	5a                   	pop    edx
c000eb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000eb03:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb09:	e8 d8 c1 ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c000eb0e:	59                   	pop    ecx
c000eb0f:	58                   	pop    eax
c000eb10:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eb15:	68 c2 35 02 c0       	push   0xc00235c2
c000eb1a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb20:	e8 07 c2 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000eb25:	58                   	pop    eax
c000eb26:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eb2b:	5a                   	pop    edx
c000eb2c:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000eb2f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb35:	e8 ac c1 ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c000eb3a:	59                   	pop    ecx
c000eb3b:	58                   	pop    eax
c000eb3c:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eb41:	68 ca 35 02 c0       	push   0xc00235ca
c000eb46:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb4c:	e8 db c1 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000eb51:	58                   	pop    eax
c000eb52:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eb57:	5a                   	pop    edx
c000eb58:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000eb5b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb61:	e8 80 c1 ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c000eb66:	59                   	pop    ecx
c000eb67:	58                   	pop    eax
c000eb68:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eb6d:	68 d2 35 02 c0       	push   0xc00235d2
c000eb72:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb78:	e8 af c1 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000eb7d:	58                   	pop    eax
c000eb7e:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eb83:	5a                   	pop    edx
c000eb84:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000eb87:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb8d:	e8 54 c1 ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c000eb92:	59                   	pop    ecx
c000eb93:	58                   	pop    eax
c000eb94:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000eb99:	68 da 35 02 c0       	push   0xc00235da
c000eb9e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eba4:	e8 83 c1 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000eba9:	58                   	pop    eax
c000ebaa:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ebaf:	5a                   	pop    edx
c000ebb0:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000ebb3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebb9:	e8 28 c1 ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c000ebbe:	59                   	pop    ecx
c000ebbf:	58                   	pop    eax
c000ebc0:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ebc5:	68 e2 35 02 c0       	push   0xc00235e2
c000ebca:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebd0:	e8 57 c1 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000ebd5:	58                   	pop    eax
c000ebd6:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ebdb:	5a                   	pop    edx
c000ebdc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ebe0:	52                   	push   edx
c000ebe1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebe7:	e8 fa c0 ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c000ebec:	59                   	pop    ecx
c000ebed:	58                   	pop    eax
c000ebee:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ebf3:	68 eb 35 02 c0       	push   0xc00235eb
c000ebf8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebfe:	e8 29 c1 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000ec03:	58                   	pop    eax
c000ec04:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ec09:	5a                   	pop    edx
c000ec0a:	57                   	push   edi
c000ec0b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec11:	e8 d0 c0 ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c000ec16:	59                   	pop    ecx
c000ec17:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ec1c:	5f                   	pop    edi
c000ec1d:	68 f3 35 02 c0       	push   0xc00235f3
c000ec22:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec28:	e8 ff c0 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000ec2d:	58                   	pop    eax
c000ec2e:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ec33:	5a                   	pop    edx
c000ec34:	56                   	push   esi
c000ec35:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec3b:	e8 a6 c0 ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c000ec40:	59                   	pop    ecx
c000ec41:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ec46:	5e                   	pop    esi
c000ec47:	68 fb 35 02 c0       	push   0xc00235fb
c000ec4c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec52:	e8 d5 c0 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000ec57:	5f                   	pop    edi
c000ec58:	58                   	pop    eax
c000ec59:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ec5e:	55                   	push   ebp
c000ec5f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec65:	e8 7c c0 ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c000ec6a:	58                   	pop    eax
c000ec6b:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ec70:	5a                   	pop    edx
c000ec71:	68 03 36 02 c0       	push   0xc0023603
c000ec76:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec7c:	e8 ab c0 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000ec81:	0f 21 c0             	mov    eax,db0
c000ec84:	59                   	pop    ecx
c000ec85:	5e                   	pop    esi
c000ec86:	50                   	push   eax
c000ec87:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ec8c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec92:	e8 4f c0 ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c000ec97:	5f                   	pop    edi
c000ec98:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ec9d:	5d                   	pop    ebp
c000ec9e:	68 0c 36 02 c0       	push   0xc002360c
c000eca3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eca9:	e8 7e c0 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000ecae:	0f 21 c8             	mov    eax,db1
c000ecb1:	5a                   	pop    edx
c000ecb2:	59                   	pop    ecx
c000ecb3:	50                   	push   eax
c000ecb4:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ecb9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecbf:	e8 22 c0 ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c000ecc4:	5e                   	pop    esi
c000ecc5:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ecca:	5f                   	pop    edi
c000eccb:	68 14 36 02 c0       	push   0xc0023614
c000ecd0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecd6:	e8 51 c0 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000ecdb:	0f 21 d0             	mov    eax,db2
c000ecde:	5d                   	pop    ebp
c000ecdf:	5a                   	pop    edx
c000ece0:	50                   	push   eax
c000ece1:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ece6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecec:	e8 f5 bf ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c000ecf1:	59                   	pop    ecx
c000ecf2:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ecf7:	5e                   	pop    esi
c000ecf8:	68 1c 36 02 c0       	push   0xc002361c
c000ecfd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed03:	e8 24 c0 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000ed08:	0f 21 d8             	mov    eax,db3
c000ed0b:	5f                   	pop    edi
c000ed0c:	5d                   	pop    ebp
c000ed0d:	50                   	push   eax
c000ed0e:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ed13:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed19:	e8 c8 bf ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c000ed1e:	58                   	pop    eax
c000ed1f:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ed24:	5a                   	pop    edx
c000ed25:	68 24 36 02 c0       	push   0xc0023624
c000ed2a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed30:	e8 f7 bf ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000ed35:	0f 21 f0             	mov    eax,db6
c000ed38:	59                   	pop    ecx
c000ed39:	5e                   	pop    esi
c000ed3a:	50                   	push   eax
c000ed3b:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ed40:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed46:	e8 9b bf ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c000ed4b:	5f                   	pop    edi
c000ed4c:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ed51:	5d                   	pop    ebp
c000ed52:	68 2c 36 02 c0       	push   0xc002362c
c000ed57:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed5d:	e8 ca bf ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000ed62:	0f 21 f8             	mov    eax,db7
c000ed65:	5a                   	pop    edx
c000ed66:	59                   	pop    ecx
c000ed67:	50                   	push   eax
c000ed68:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ed6d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed73:	e8 6e bf ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c000ed78:	5e                   	pop    esi
c000ed79:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed7c:	e8 a0 87 00 00       	call   c0017521 <Thr::getDriverNameFromAddress(unsigned long)>
c000ed81:	83 c4 10             	add    esp,0x10
c000ed84:	85 c0                	test   eax,eax
c000ed86:	74 7d                	je     c000ee05 <displayDebugInfo(regs*)+0x48b>
c000ed88:	89 c6                	mov    esi,eax
c000ed8a:	50                   	push   eax
c000ed8b:	50                   	push   eax
c000ed8c:	56                   	push   esi
c000ed8d:	68 34 36 02 c0       	push   0xc0023634
c000ed92:	e8 2c dd ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000ed97:	5a                   	pop    edx
c000ed98:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000ed9d:	59                   	pop    ecx
c000ed9e:	68 42 36 02 c0       	push   0xc0023642
c000eda3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eda9:	e8 7e bf ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000edae:	5f                   	pop    edi
c000edaf:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000edb4:	5d                   	pop    ebp
c000edb5:	56                   	push   esi
c000edb6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edbc:	e8 6b bf ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000edc1:	58                   	pop    eax
c000edc2:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000edc7:	5a                   	pop    edx
c000edc8:	68 4e 36 02 c0       	push   0xc002364e
c000edcd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edd3:	e8 54 bf ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c000edd8:	59                   	pop    ecx
c000edd9:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000edde:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000ede4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ede7:	e8 6c 87 00 00       	call   c0017558 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000edec:	5b                   	pop    ebx
c000eded:	5d                   	pop    ebp
c000edee:	50                   	push   eax
c000edef:	57                   	push   edi
c000edf0:	e8 f1 be ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c000edf5:	58                   	pop    eax
c000edf6:	5a                   	pop    edx
c000edf7:	56                   	push   esi
c000edf8:	68 5a 36 02 c0       	push   0xc002365a
c000edfd:	e8 c1 dc ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000ee02:	83 c4 10             	add    esp,0x10
c000ee05:	fa                   	cli    
c000ee06:	f4                   	hlt    
c000ee07:	eb fe                	jmp    c000ee07 <displayDebugInfo(regs*)+0x48d>

c000ee09 <x87EmulHandler(regs*, void*)>:
c000ee09:	83 ec 0c             	sub    esp,0xc
c000ee0c:	0f 20 c2             	mov    edx,cr0
c000ee0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee14:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000ee18:	75 4b                	jne    c000ee65 <x87EmulHandler(regs*, void*)+0x5c>
c000ee1a:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000ee1f:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000ee25:	85 c0                	test   eax,eax
c000ee27:	74 05                	je     c000ee2e <x87EmulHandler(regs*, void*)+0x25>
c000ee29:	83 e2 08             	and    edx,0x8
c000ee2c:	75 17                	jne    c000ee45 <x87EmulHandler(regs*, void*)+0x3c>
c000ee2e:	83 ec 0c             	sub    esp,0xc
c000ee31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ee35:	e8 94 ab 00 00       	call   c00199ce <Vm::x87Handler(regs*)>
c000ee3a:	83 c4 10             	add    esp,0x10
c000ee3d:	84 c0                	test   al,al
c000ee3f:	74 24                	je     c000ee65 <x87EmulHandler(regs*, void*)+0x5c>
c000ee41:	83 c4 0c             	add    esp,0xc
c000ee44:	c3                   	ret    
c000ee45:	83 ec 0c             	sub    esp,0xc
c000ee48:	68 80 36 02 c0       	push   0xc0023680
c000ee4d:	e8 71 dc ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000ee52:	0f 06                	clts   
c000ee54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee59:	83 c4 10             	add    esp,0x10
c000ee5c:	a3 c8 65 02 c0       	mov    ds:0xc00265c8,eax
c000ee61:	83 c4 0c             	add    esp,0xc
c000ee64:	c3                   	ret    
c000ee65:	83 ec 0c             	sub    esp,0xc
c000ee68:	68 6a 36 02 c0       	push   0xc002366a
c000ee6d:	e8 51 dc ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000ee72:	5a                   	pop    edx
c000ee73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ee77:	e8 fe fa ff ff       	call   c000e97a <displayDebugInfo(regs*)>

c000ee7c <gpFault(regs*, void*)>:
c000ee7c:	53                   	push   ebx
c000ee7d:	83 ec 14             	sub    esp,0x14
c000ee80:	c7 05 c4 65 02 c0 8a 8e 01 c0 	mov    DWORD PTR ds:0xc00265c4,0xc0018e8a
c000ee8a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee8e:	53                   	push   ebx
c000ee8f:	e8 f6 9f 00 00       	call   c0018e8a <Vm::faultHandler(regs*)>
c000ee94:	83 c4 10             	add    esp,0x10
c000ee97:	84 c0                	test   al,al
c000ee99:	74 05                	je     c000eea0 <gpFault(regs*, void*)+0x24>
c000ee9b:	83 c4 08             	add    esp,0x8
c000ee9e:	5b                   	pop    ebx
c000ee9f:	c3                   	ret    
c000eea0:	83 ec 0c             	sub    esp,0xc
c000eea3:	68 8d 36 02 c0       	push   0xc002368d
c000eea8:	e8 16 dc ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000eead:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eeb0:	e8 c5 fa ff ff       	call   c000e97a <displayDebugInfo(regs*)>

c000eeb5 <pgFault(regs*, void*)>:
c000eeb5:	53                   	push   ebx
c000eeb6:	83 ec 10             	sub    esp,0x10
c000eeb9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000eebd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000eec0:	68 a8 36 02 c0       	push   0xc00236a8
c000eec5:	e8 f9 db ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000eeca:	0f 20 d0             	mov    eax,cr2
c000eecd:	5a                   	pop    edx
c000eece:	59                   	pop    ecx
c000eecf:	50                   	push   eax
c000eed0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eed5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000eed8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000eede:	e8 e7 d6 ff ff       	call   c000c5ca <VAS::tryLoadBackOffDisk(unsigned long)>
c000eee3:	83 c4 10             	add    esp,0x10
c000eee6:	84 c0                	test   al,al
c000eee8:	74 05                	je     c000eeef <pgFault(regs*, void*)+0x3a>
c000eeea:	83 c4 08             	add    esp,0x8
c000eeed:	5b                   	pop    ebx
c000eeee:	c3                   	ret    
c000eeef:	83 ec 0c             	sub    esp,0xc
c000eef2:	68 bd 36 02 c0       	push   0xc00236bd
c000eef7:	e8 c7 db ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000eefc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eeff:	e8 76 fa ff ff       	call   c000e97a <displayDebugInfo(regs*)>

c000ef04 <otherISRHandler(regs*, void*)>:
c000ef04:	53                   	push   ebx
c000ef05:	83 ec 0c             	sub    esp,0xc
c000ef08:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ef0c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ef0f:	50                   	push   eax
c000ef10:	50                   	push   eax
c000ef11:	68 ca 36 02 c0       	push   0xc00236ca
c000ef16:	e8 a8 db ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000ef1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef1e:	e8 57 fa ff ff       	call   c000e97a <displayDebugInfo(regs*)>

c000ef23 <opcodeFault(regs*, void*)>:
c000ef23:	55                   	push   ebp
c000ef24:	89 e5                	mov    ebp,esp
c000ef26:	56                   	push   esi
c000ef27:	53                   	push   ebx
c000ef28:	83 ec 30             	sub    esp,0x30
c000ef2b:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000ef30:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ef36:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000ef3c:	84 c0                	test   al,al
c000ef3e:	74 24                	je     c000ef64 <opcodeFault(regs*, void*)+0x41>
c000ef40:	83 ec 0c             	sub    esp,0xc
c000ef43:	68 e8 36 02 c0       	push   0xc00236e8
c000ef48:	e8 76 db ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000ef4d:	83 c4 10             	add    esp,0x10
c000ef50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef53:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef56:	8d 50 19             	lea    edx,[eax+0x19]
c000ef59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef5c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef5f:	e9 7b 03 00 00       	jmp    c000f2df <opcodeFault(regs*, void*)+0x3bc>
c000ef64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef67:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef6a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ef6d:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000ef71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef74:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef77:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000ef7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef7d:	8a 00                	mov    al,BYTE PTR [eax]
c000ef7f:	3c f0                	cmp    al,0xf0
c000ef81:	75 17                	jne    c000ef9a <opcodeFault(regs*, void*)+0x77>
c000ef83:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef89:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef8c:	8d 50 01             	lea    edx,[eax+0x1]
c000ef8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef92:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef95:	e9 d6 00 00 00       	jmp    c000f070 <opcodeFault(regs*, void*)+0x14d>
c000ef9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef9d:	8a 00                	mov    al,BYTE PTR [eax]
c000ef9f:	3c f2                	cmp    al,0xf2
c000efa1:	74 09                	je     c000efac <opcodeFault(regs*, void*)+0x89>
c000efa3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efa6:	8a 00                	mov    al,BYTE PTR [eax]
c000efa8:	3c f3                	cmp    al,0xf3
c000efaa:	75 1b                	jne    c000efc7 <opcodeFault(regs*, void*)+0xa4>
c000efac:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000efb0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efb6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efb9:	8d 50 01             	lea    edx,[eax+0x1]
c000efbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efbf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efc2:	e9 a9 00 00 00       	jmp    c000f070 <opcodeFault(regs*, void*)+0x14d>
c000efc7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efca:	8a 00                	mov    al,BYTE PTR [eax]
c000efcc:	3c 66                	cmp    al,0x66
c000efce:	75 1b                	jne    c000efeb <opcodeFault(regs*, void*)+0xc8>
c000efd0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000efd4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efda:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efdd:	8d 50 01             	lea    edx,[eax+0x1]
c000efe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efe3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efe6:	e9 85 00 00 00       	jmp    c000f070 <opcodeFault(regs*, void*)+0x14d>
c000efeb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efee:	8a 00                	mov    al,BYTE PTR [eax]
c000eff0:	3c 67                	cmp    al,0x67
c000eff2:	75 18                	jne    c000f00c <opcodeFault(regs*, void*)+0xe9>
c000eff4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000eff8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000effb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000effe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f001:	8d 50 01             	lea    edx,[eax+0x1]
c000f004:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f007:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f00a:	eb 64                	jmp    c000f070 <opcodeFault(regs*, void*)+0x14d>
c000f00c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f00f:	8a 00                	mov    al,BYTE PTR [eax]
c000f011:	3c 2e                	cmp    al,0x2e
c000f013:	74 09                	je     c000f01e <opcodeFault(regs*, void*)+0xfb>
c000f015:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f018:	8a 00                	mov    al,BYTE PTR [eax]
c000f01a:	3c 3e                	cmp    al,0x3e
c000f01c:	75 18                	jne    c000f036 <opcodeFault(regs*, void*)+0x113>
c000f01e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f022:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f028:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f02b:	8d 50 01             	lea    edx,[eax+0x1]
c000f02e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f031:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f034:	eb 3a                	jmp    c000f070 <opcodeFault(regs*, void*)+0x14d>
c000f036:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f039:	8a 00                	mov    al,BYTE PTR [eax]
c000f03b:	3c 36                	cmp    al,0x36
c000f03d:	74 1b                	je     c000f05a <opcodeFault(regs*, void*)+0x137>
c000f03f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f042:	8a 00                	mov    al,BYTE PTR [eax]
c000f044:	3c 26                	cmp    al,0x26
c000f046:	74 12                	je     c000f05a <opcodeFault(regs*, void*)+0x137>
c000f048:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f04b:	8a 00                	mov    al,BYTE PTR [eax]
c000f04d:	3c 64                	cmp    al,0x64
c000f04f:	74 09                	je     c000f05a <opcodeFault(regs*, void*)+0x137>
c000f051:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f054:	8a 00                	mov    al,BYTE PTR [eax]
c000f056:	3c 65                	cmp    al,0x65
c000f058:	75 16                	jne    c000f070 <opcodeFault(regs*, void*)+0x14d>
c000f05a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f05e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f061:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f064:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f067:	8d 50 01             	lea    edx,[eax+0x1]
c000f06a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f06d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f070:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f073:	8a 00                	mov    al,BYTE PTR [eax]
c000f075:	3c 0f                	cmp    al,0xf
c000f077:	0f 85 8d 01 00 00    	jne    c000f20a <opcodeFault(regs*, void*)+0x2e7>
c000f07d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f080:	40                   	inc    eax
c000f081:	8a 00                	mov    al,BYTE PTR [eax]
c000f083:	3c c7                	cmp    al,0xc7
c000f085:	0f 85 7f 01 00 00    	jne    c000f20a <opcodeFault(regs*, void*)+0x2e7>
c000f08b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f08e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f091:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f094:	8d 50 01             	lea    edx,[eax+0x1]
c000f097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f09a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f09d:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f0a0:	50                   	push   eax
c000f0a1:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f0a4:	50                   	push   eax
c000f0a5:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f0a8:	50                   	push   eax
c000f0a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f0ac:	e8 ed 49 00 00       	call   c0013a9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f0b1:	83 c4 10             	add    esp,0x10
c000f0b4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f0b7:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f0ba:	83 f0 01             	xor    eax,0x1
c000f0bd:	84 c0                	test   al,al
c000f0bf:	0f 84 45 01 00 00    	je     c000f20a <opcodeFault(regs*, void*)+0x2e7>
c000f0c5:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f0c8:	3c 01                	cmp    al,0x1
c000f0ca:	0f 85 3a 01 00 00    	jne    c000f20a <opcodeFault(regs*, void*)+0x2e7>
c000f0d0:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f0d3:	83 f0 01             	xor    eax,0x1
c000f0d6:	84 c0                	test   al,al
c000f0d8:	0f 84 2c 01 00 00    	je     c000f20a <opcodeFault(regs*, void*)+0x2e7>
c000f0de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0e1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f0e4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f0e7:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f0ee:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f0f1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f0f4:	89 c2                	mov    edx,eax
c000f0f6:	b8 00 00 00 00       	mov    eax,0x0
c000f0fb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f0fe:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f101:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f104:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f107:	ba 00 00 00 00       	mov    edx,0x0
c000f10c:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f10f:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f112:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f115:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f118:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f11b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f122:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f125:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f128:	89 c2                	mov    edx,eax
c000f12a:	b8 00 00 00 00       	mov    eax,0x0
c000f12f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f132:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f138:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f13b:	ba 00 00 00 00       	mov    edx,0x0
c000f140:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f143:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f146:	fa                   	cli    
c000f147:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000f14c:	40                   	inc    eax
c000f14d:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000f152:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f155:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f158:	8b 00                	mov    eax,DWORD PTR [eax]
c000f15a:	89 c1                	mov    ecx,eax
c000f15c:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f15f:	89 cb                	mov    ebx,ecx
c000f161:	89 d0                	mov    eax,edx
c000f163:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f166:	89 c6                	mov    esi,eax
c000f168:	89 f0                	mov    eax,esi
c000f16a:	09 d8                	or     eax,ebx
c000f16c:	85 c0                	test   eax,eax
c000f16e:	75 21                	jne    c000f191 <opcodeFault(regs*, void*)+0x26e>
c000f170:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f173:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f176:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f179:	89 01                	mov    DWORD PTR [ecx],eax
c000f17b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f17e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f181:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f184:	83 c8 40             	or     eax,0x40
c000f187:	89 c2                	mov    edx,eax
c000f189:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f18c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f18f:	eb 3e                	jmp    c000f1cf <opcodeFault(regs*, void*)+0x2ac>
c000f191:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f194:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f197:	8b 00                	mov    eax,DWORD PTR [eax]
c000f199:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f19c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f19f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f1a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1a5:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f1a8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f1ab:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f1ae:	89 d0                	mov    eax,edx
c000f1b0:	31 d2                	xor    edx,edx
c000f1b2:	89 c3                	mov    ebx,eax
c000f1b4:	89 d6                	mov    esi,edx
c000f1b6:	89 da                	mov    edx,ebx
c000f1b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1bb:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f1be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f1c4:	83 e0 bf             	and    eax,0xffffffbf
c000f1c7:	89 c2                	mov    edx,eax
c000f1c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1cc:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f1cf:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000f1d4:	48                   	dec    eax
c000f1d5:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000f1da:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000f1df:	85 c0                	test   eax,eax
c000f1e1:	75 01                	jne    c000f1e4 <opcodeFault(regs*, void*)+0x2c1>
c000f1e3:	fb                   	sti    
c000f1e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1e7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1ea:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f1ed:	01 c2                	add    edx,eax
c000f1ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1f2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f1f5:	83 ec 0c             	sub    esp,0xc
c000f1f8:	68 0b 37 02 c0       	push   0xc002370b
c000f1fd:	e8 c1 d8 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000f202:	83 c4 10             	add    esp,0x10
c000f205:	e9 d5 00 00 00       	jmp    c000f2df <opcodeFault(regs*, void*)+0x3bc>
c000f20a:	83 ec 0c             	sub    esp,0xc
c000f20d:	68 1e 37 02 c0       	push   0xc002371e
c000f212:	e8 ac d8 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000f217:	83 c4 10             	add    esp,0x10
c000f21a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f21d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f220:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f223:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f226:	c1 e0 04             	shl    eax,0x4
c000f229:	01 d0                	add    eax,edx
c000f22b:	83 c0 03             	add    eax,0x3
c000f22e:	8a 00                	mov    al,BYTE PTR [eax]
c000f230:	0f b6 d8             	movzx  ebx,al
c000f233:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f236:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f23c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f23f:	c1 e0 04             	shl    eax,0x4
c000f242:	01 d0                	add    eax,edx
c000f244:	83 c0 02             	add    eax,0x2
c000f247:	8a 00                	mov    al,BYTE PTR [eax]
c000f249:	0f b6 c8             	movzx  ecx,al
c000f24c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f24f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f252:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f255:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f258:	c1 e0 04             	shl    eax,0x4
c000f25b:	01 d0                	add    eax,edx
c000f25d:	40                   	inc    eax
c000f25e:	8a 00                	mov    al,BYTE PTR [eax]
c000f260:	0f b6 d0             	movzx  edx,al
c000f263:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f266:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f269:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f26c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f26f:	c1 e0 04             	shl    eax,0x4
c000f272:	01 f0                	add    eax,esi
c000f274:	8a 00                	mov    al,BYTE PTR [eax]
c000f276:	0f b6 c0             	movzx  eax,al
c000f279:	83 ec 0c             	sub    esp,0xc
c000f27c:	53                   	push   ebx
c000f27d:	51                   	push   ecx
c000f27e:	52                   	push   edx
c000f27f:	50                   	push   eax
c000f280:	68 30 37 02 c0       	push   0xc0023730
c000f285:	e8 39 d8 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000f28a:	83 c4 20             	add    esp,0x20
c000f28d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f290:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f293:	83 c0 03             	add    eax,0x3
c000f296:	8a 00                	mov    al,BYTE PTR [eax]
c000f298:	0f b6 d8             	movzx  ebx,al
c000f29b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f29e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2a1:	83 c0 02             	add    eax,0x2
c000f2a4:	8a 00                	mov    al,BYTE PTR [eax]
c000f2a6:	0f b6 c8             	movzx  ecx,al
c000f2a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2ac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2af:	40                   	inc    eax
c000f2b0:	8a 00                	mov    al,BYTE PTR [eax]
c000f2b2:	0f b6 d0             	movzx  edx,al
c000f2b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2b8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2bb:	8a 00                	mov    al,BYTE PTR [eax]
c000f2bd:	0f b6 c0             	movzx  eax,al
c000f2c0:	83 ec 0c             	sub    esp,0xc
c000f2c3:	53                   	push   ebx
c000f2c4:	51                   	push   ecx
c000f2c5:	52                   	push   edx
c000f2c6:	50                   	push   eax
c000f2c7:	68 58 37 02 c0       	push   0xc0023758
c000f2cc:	e8 f2 d7 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c000f2d1:	83 c4 20             	add    esp,0x20
c000f2d4:	83 ec 0c             	sub    esp,0xc
c000f2d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f2da:	e8 9b f6 ff ff       	call   c000e97a <displayDebugInfo(regs*)>
c000f2df:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f2e2:	5b                   	pop    ebx
c000f2e3:	5e                   	pop    esi
c000f2e4:	5d                   	pop    ebp
c000f2e5:	c3                   	ret    

c000f2e6 <displayProgramFault(char const*)>:
c000f2e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f2eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f2ee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f2f4:	85 c0                	test   eax,eax
c000f2f6:	74 15                	je     c000f30d <displayProgramFault(char const*)+0x27>
c000f2f8:	83 ec 0c             	sub    esp,0xc
c000f2fb:	6a 04                	push   0x4
c000f2fd:	6a 0f                	push   0xf
c000f2ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f303:	50                   	push   eax
c000f304:	e8 1f b7 ff ff       	call   c000aa28 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f309:	83 c4 1c             	add    esp,0x1c
c000f30c:	c3                   	ret    
c000f30d:	c3                   	ret    

c000f30e <setupInterruptController()>:
c000f30e:	55                   	push   ebp
c000f30f:	89 e5                	mov    ebp,esp
c000f311:	53                   	push   ebx
c000f312:	83 ec 24             	sub    esp,0x24
c000f315:	b8 00 00 00 00       	mov    eax,0x0
c000f31a:	85 c0                	test   eax,eax
c000f31c:	0f 95 c0             	setne  al
c000f31f:	84 c0                	test   al,al
c000f321:	74 5b                	je     c000f37e <setupInterruptController()+0x70>
c000f323:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f32a:	83 ec 0c             	sub    esp,0xc
c000f32d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f330:	e8 8e a6 ff ff       	call   c00099c3 <malloc>
c000f335:	83 c4 10             	add    esp,0x10
c000f338:	89 c3                	mov    ebx,eax
c000f33a:	83 ec 0c             	sub    esp,0xc
c000f33d:	53                   	push   ebx
c000f33e:	e8 d7 0b 01 00       	call   c001ff1a <APIC::APIC()>
c000f343:	83 c4 10             	add    esp,0x10
c000f346:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f349:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f34c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f34f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f351:	83 c0 08             	add    eax,0x8
c000f354:	8b 00                	mov    eax,DWORD PTR [eax]
c000f356:	6a 00                	push   0x0
c000f358:	6a 00                	push   0x0
c000f35a:	6a 00                	push   0x0
c000f35c:	52                   	push   edx
c000f35d:	ff d0                	call   eax
c000f35f:	83 c4 10             	add    esp,0x10
c000f362:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000f367:	83 ec 08             	sub    esp,0x8
c000f36a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f36d:	50                   	push   eax
c000f36e:	e8 97 eb ff ff       	call   c000df0a <Device::addChild(Device*)>
c000f373:	83 c4 10             	add    esp,0x10
c000f376:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f379:	e9 79 03 00 00       	jmp    c000f6f7 <setupInterruptController()+0x3e9>
c000f37e:	a0 a0 6d 02 c0       	mov    al,ds:0xc0026da0
c000f383:	84 c0                	test   al,al
c000f385:	75 14                	jne    c000f39b <setupInterruptController()+0x8d>
c000f387:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000f38c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f392:	83 e2 fe             	and    edx,0xfffffffe
c000f395:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f39b:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000f3a0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f3a6:	83 e0 01             	and    eax,0x1
c000f3a9:	84 c0                	test   al,al
c000f3ab:	0f 95 c0             	setne  al
c000f3ae:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f3b1:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f3b8:	83 ec 0c             	sub    esp,0xc
c000f3bb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f3be:	e8 00 a6 ff ff       	call   c00099c3 <malloc>
c000f3c3:	83 c4 10             	add    esp,0x10
c000f3c6:	89 c3                	mov    ebx,eax
c000f3c8:	83 ec 0c             	sub    esp,0xc
c000f3cb:	53                   	push   ebx
c000f3cc:	e8 a1 10 01 00       	call   c0020472 <PIC::PIC()>
c000f3d1:	83 c4 10             	add    esp,0x10
c000f3d4:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f3d7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f3da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3dd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3df:	83 c0 08             	add    eax,0x8
c000f3e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3e4:	6a 00                	push   0x0
c000f3e6:	6a 00                	push   0x0
c000f3e8:	6a 00                	push   0x0
c000f3ea:	52                   	push   edx
c000f3eb:	ff d0                	call   eax
c000f3ed:	83 c4 10             	add    esp,0x10
c000f3f0:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f3f4:	74 73                	je     c000f469 <setupInterruptController()+0x15b>
c000f3f6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f3f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3fe:	83 c0 0c             	add    eax,0xc
c000f401:	8b 00                	mov    eax,DWORD PTR [eax]
c000f403:	6a 00                	push   0x0
c000f405:	6a 00                	push   0x0
c000f407:	6a 00                	push   0x0
c000f409:	52                   	push   edx
c000f40a:	ff d0                	call   eax
c000f40c:	83 c4 10             	add    esp,0x10
c000f40f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f413:	74 15                	je     c000f42a <setupInterruptController()+0x11c>
c000f415:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f418:	8b 00                	mov    eax,DWORD PTR [eax]
c000f41a:	83 c0 04             	add    eax,0x4
c000f41d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f41f:	83 ec 0c             	sub    esp,0xc
c000f422:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f425:	ff d0                	call   eax
c000f427:	83 c4 10             	add    esp,0x10
c000f42a:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f431:	83 ec 0c             	sub    esp,0xc
c000f434:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f437:	e8 87 a5 ff ff       	call   c00099c3 <malloc>
c000f43c:	83 c4 10             	add    esp,0x10
c000f43f:	89 c3                	mov    ebx,eax
c000f441:	83 ec 0c             	sub    esp,0xc
c000f444:	53                   	push   ebx
c000f445:	e8 d0 0a 01 00       	call   c001ff1a <APIC::APIC()>
c000f44a:	83 c4 10             	add    esp,0x10
c000f44d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f450:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f453:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f456:	8b 00                	mov    eax,DWORD PTR [eax]
c000f458:	83 c0 08             	add    eax,0x8
c000f45b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f45d:	6a 00                	push   0x0
c000f45f:	6a 00                	push   0x0
c000f461:	6a 00                	push   0x0
c000f463:	52                   	push   edx
c000f464:	ff d0                	call   eax
c000f466:	83 c4 10             	add    esp,0x10
c000f469:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c000f46e:	83 ec 08             	sub    esp,0x8
c000f471:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f474:	50                   	push   eax
c000f475:	e8 90 ea ff ff       	call   c000df0a <Device::addChild(Device*)>
c000f47a:	83 c4 10             	add    esp,0x10
c000f47d:	c7 05 c8 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00265c8,0x0
c000f487:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f48a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f48c:	83 c0 24             	add    eax,0x24
c000f48f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f491:	6a 00                	push   0x0
c000f493:	68 04 ef 00 c0       	push   0xc000ef04
c000f498:	6a 00                	push   0x0
c000f49a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f49d:	ff d0                	call   eax
c000f49f:	83 c4 10             	add    esp,0x10
c000f4a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4a5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4a7:	83 c0 24             	add    eax,0x24
c000f4aa:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4ac:	6a 00                	push   0x0
c000f4ae:	68 04 ef 00 c0       	push   0xc000ef04
c000f4b3:	6a 01                	push   0x1
c000f4b5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4b8:	ff d0                	call   eax
c000f4ba:	83 c4 10             	add    esp,0x10
c000f4bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4c0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4c2:	83 c0 24             	add    eax,0x24
c000f4c5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4c7:	6a 00                	push   0x0
c000f4c9:	68 d7 e7 00 c0       	push   0xc000e7d7
c000f4ce:	6a 02                	push   0x2
c000f4d0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4d3:	ff d0                	call   eax
c000f4d5:	83 c4 10             	add    esp,0x10
c000f4d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4db:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4dd:	83 c0 24             	add    eax,0x24
c000f4e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4e2:	6a 00                	push   0x0
c000f4e4:	68 04 ef 00 c0       	push   0xc000ef04
c000f4e9:	6a 03                	push   0x3
c000f4eb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4ee:	ff d0                	call   eax
c000f4f0:	83 c4 10             	add    esp,0x10
c000f4f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4f8:	83 c0 24             	add    eax,0x24
c000f4fb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4fd:	6a 00                	push   0x0
c000f4ff:	68 04 ef 00 c0       	push   0xc000ef04
c000f504:	6a 04                	push   0x4
c000f506:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f509:	ff d0                	call   eax
c000f50b:	83 c4 10             	add    esp,0x10
c000f50e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f511:	8b 00                	mov    eax,DWORD PTR [eax]
c000f513:	83 c0 24             	add    eax,0x24
c000f516:	8b 00                	mov    eax,DWORD PTR [eax]
c000f518:	6a 00                	push   0x0
c000f51a:	68 04 ef 00 c0       	push   0xc000ef04
c000f51f:	6a 05                	push   0x5
c000f521:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f524:	ff d0                	call   eax
c000f526:	83 c4 10             	add    esp,0x10
c000f529:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f52c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f52e:	83 c0 24             	add    eax,0x24
c000f531:	8b 00                	mov    eax,DWORD PTR [eax]
c000f533:	6a 00                	push   0x0
c000f535:	68 23 ef 00 c0       	push   0xc000ef23
c000f53a:	6a 06                	push   0x6
c000f53c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f53f:	ff d0                	call   eax
c000f541:	83 c4 10             	add    esp,0x10
c000f544:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f547:	8b 00                	mov    eax,DWORD PTR [eax]
c000f549:	83 c0 24             	add    eax,0x24
c000f54c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f54e:	6a 00                	push   0x0
c000f550:	68 09 ee 00 c0       	push   0xc000ee09
c000f555:	6a 07                	push   0x7
c000f557:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f55a:	ff d0                	call   eax
c000f55c:	83 c4 10             	add    esp,0x10
c000f55f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f562:	8b 00                	mov    eax,DWORD PTR [eax]
c000f564:	83 c0 24             	add    eax,0x24
c000f567:	8b 00                	mov    eax,DWORD PTR [eax]
c000f569:	6a 00                	push   0x0
c000f56b:	68 f2 e5 00 c0       	push   0xc000e5f2
c000f570:	6a 08                	push   0x8
c000f572:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f575:	ff d0                	call   eax
c000f577:	83 c4 10             	add    esp,0x10
c000f57a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f57d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f57f:	83 c0 24             	add    eax,0x24
c000f582:	8b 00                	mov    eax,DWORD PTR [eax]
c000f584:	6a 00                	push   0x0
c000f586:	68 04 ef 00 c0       	push   0xc000ef04
c000f58b:	6a 09                	push   0x9
c000f58d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f590:	ff d0                	call   eax
c000f592:	83 c4 10             	add    esp,0x10
c000f595:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f598:	8b 00                	mov    eax,DWORD PTR [eax]
c000f59a:	83 c0 24             	add    eax,0x24
c000f59d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f59f:	6a 00                	push   0x0
c000f5a1:	68 04 ef 00 c0       	push   0xc000ef04
c000f5a6:	6a 0a                	push   0xa
c000f5a8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5ab:	ff d0                	call   eax
c000f5ad:	83 c4 10             	add    esp,0x10
c000f5b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5b5:	83 c0 24             	add    eax,0x24
c000f5b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5ba:	6a 00                	push   0x0
c000f5bc:	68 04 ef 00 c0       	push   0xc000ef04
c000f5c1:	6a 0b                	push   0xb
c000f5c3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5c6:	ff d0                	call   eax
c000f5c8:	83 c4 10             	add    esp,0x10
c000f5cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5d0:	83 c0 24             	add    eax,0x24
c000f5d3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5d5:	6a 00                	push   0x0
c000f5d7:	68 04 ef 00 c0       	push   0xc000ef04
c000f5dc:	6a 0c                	push   0xc
c000f5de:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5e1:	ff d0                	call   eax
c000f5e3:	83 c4 10             	add    esp,0x10
c000f5e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5e9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5eb:	83 c0 24             	add    eax,0x24
c000f5ee:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5f0:	6a 00                	push   0x0
c000f5f2:	68 7c ee 00 c0       	push   0xc000ee7c
c000f5f7:	6a 0d                	push   0xd
c000f5f9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5fc:	ff d0                	call   eax
c000f5fe:	83 c4 10             	add    esp,0x10
c000f601:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f604:	8b 00                	mov    eax,DWORD PTR [eax]
c000f606:	83 c0 24             	add    eax,0x24
c000f609:	8b 00                	mov    eax,DWORD PTR [eax]
c000f60b:	6a 00                	push   0x0
c000f60d:	68 b5 ee 00 c0       	push   0xc000eeb5
c000f612:	6a 0e                	push   0xe
c000f614:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f617:	ff d0                	call   eax
c000f619:	83 c4 10             	add    esp,0x10
c000f61c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f61f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f621:	83 c0 24             	add    eax,0x24
c000f624:	8b 00                	mov    eax,DWORD PTR [eax]
c000f626:	6a 00                	push   0x0
c000f628:	68 04 ef 00 c0       	push   0xc000ef04
c000f62d:	6a 0f                	push   0xf
c000f62f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f632:	ff d0                	call   eax
c000f634:	83 c4 10             	add    esp,0x10
c000f637:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f63a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f63c:	83 c0 24             	add    eax,0x24
c000f63f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f641:	6a 00                	push   0x0
c000f643:	68 04 ef 00 c0       	push   0xc000ef04
c000f648:	6a 10                	push   0x10
c000f64a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f64d:	ff d0                	call   eax
c000f64f:	83 c4 10             	add    esp,0x10
c000f652:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f655:	8b 00                	mov    eax,DWORD PTR [eax]
c000f657:	83 c0 24             	add    eax,0x24
c000f65a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f65c:	6a 00                	push   0x0
c000f65e:	68 04 ef 00 c0       	push   0xc000ef04
c000f663:	6a 11                	push   0x11
c000f665:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f668:	ff d0                	call   eax
c000f66a:	83 c4 10             	add    esp,0x10
c000f66d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f670:	8b 00                	mov    eax,DWORD PTR [eax]
c000f672:	83 c0 24             	add    eax,0x24
c000f675:	8b 00                	mov    eax,DWORD PTR [eax]
c000f677:	6a 00                	push   0x0
c000f679:	68 04 ef 00 c0       	push   0xc000ef04
c000f67e:	6a 12                	push   0x12
c000f680:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f683:	ff d0                	call   eax
c000f685:	83 c4 10             	add    esp,0x10
c000f688:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f68b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f68d:	83 c0 24             	add    eax,0x24
c000f690:	8b 00                	mov    eax,DWORD PTR [eax]
c000f692:	6a 00                	push   0x0
c000f694:	68 04 ef 00 c0       	push   0xc000ef04
c000f699:	6a 13                	push   0x13
c000f69b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f69e:	ff d0                	call   eax
c000f6a0:	83 c4 10             	add    esp,0x10
c000f6a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6a6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6a8:	83 c0 24             	add    eax,0x24
c000f6ab:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6ad:	6a 00                	push   0x0
c000f6af:	68 04 ef 00 c0       	push   0xc000ef04
c000f6b4:	6a 14                	push   0x14
c000f6b6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6b9:	ff d0                	call   eax
c000f6bb:	83 c4 10             	add    esp,0x10
c000f6be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6c1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6c3:	83 c0 24             	add    eax,0x24
c000f6c6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6c8:	6a 00                	push   0x0
c000f6ca:	68 04 ef 00 c0       	push   0xc000ef04
c000f6cf:	6a 1e                	push   0x1e
c000f6d1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6d4:	ff d0                	call   eax
c000f6d6:	83 c4 10             	add    esp,0x10
c000f6d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6de:	83 c0 24             	add    eax,0x24
c000f6e1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6e3:	6a 00                	push   0x0
c000f6e5:	68 97 65 01 c0       	push   0xc0016597
c000f6ea:	6a 60                	push   0x60
c000f6ec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6ef:	ff d0                	call   eax
c000f6f1:	83 c4 10             	add    esp,0x10
c000f6f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6f7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f6fa:	c9                   	leave  
c000f6fb:	c3                   	ret    

c000f6fc <InterruptController::convertLegacyIRQNumber(int)>:
c000f6fc:	55                   	push   ebp
c000f6fd:	89 e5                	mov    ebp,esp
c000f6ff:	83 ec 08             	sub    esp,0x8
c000f702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f705:	83 ec 0c             	sub    esp,0xc
c000f708:	50                   	push   eax
c000f709:	e8 fc ea ff ff       	call   c000e20a <Device::getName()>
c000f70e:	83 c4 10             	add    esp,0x10
c000f711:	8a 00                	mov    al,BYTE PTR [eax]
c000f713:	3c 41                	cmp    al,0x41
c000f715:	0f 94 c0             	sete   al
c000f718:	84 c0                	test   al,al
c000f71a:	74 28                	je     c000f744 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f71c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000f720:	7f 12                	jg     c000f734 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000f722:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f725:	05 40 5b 02 c0       	add    eax,0xc0025b40
c000f72a:	8a 00                	mov    al,BYTE PTR [eax]
c000f72c:	0f b6 c0             	movzx  eax,al
c000f72f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000f732:	eb 10                	jmp    c000f744 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f734:	83 ec 0c             	sub    esp,0xc
c000f737:	68 80 37 02 c0       	push   0xc0023780
c000f73c:	e8 44 4c 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000f741:	83 c4 10             	add    esp,0x10
c000f744:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f747:	c9                   	leave  
c000f748:	c3                   	ret    
c000f749:	90                   	nop

c000f74a <startGUI(void*)>:
c000f74a:	55                   	push   ebp
c000f74b:	89 e5                	mov    ebp,esp
c000f74d:	53                   	push   ebx
c000f74e:	83 ec 04             	sub    esp,0x4
c000f751:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000f756:	48                   	dec    eax
c000f757:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000f75c:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000f761:	85 c0                	test   eax,eax
c000f763:	75 01                	jne    c000f766 <startGUI(void*)+0x1c>
c000f765:	fb                   	sti    
c000f766:	8b 1d 48 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026448
c000f76c:	83 ec 08             	sub    esp,0x8
c000f76f:	6a 01                	push   0x1
c000f771:	68 00 38 02 c0       	push   0xc0023800
c000f776:	e8 f7 7d 00 00       	call   c0017572 <Thr::loadDLL(char const*, bool)>
c000f77b:	83 c4 10             	add    esp,0x10
c000f77e:	83 ec 08             	sub    esp,0x8
c000f781:	53                   	push   ebx
c000f782:	50                   	push   eax
c000f783:	e8 1b 80 00 00       	call   c00177a3 <Thr::executeDLL(unsigned long, void*)>
c000f788:	83 c4 10             	add    esp,0x10
c000f78b:	8b 1d 48 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026448
c000f791:	83 ec 08             	sub    esp,0x8
c000f794:	6a 01                	push   0x1
c000f796:	68 1a 38 02 c0       	push   0xc002381a
c000f79b:	e8 d2 7d 00 00       	call   c0017572 <Thr::loadDLL(char const*, bool)>
c000f7a0:	83 c4 10             	add    esp,0x10
c000f7a3:	83 ec 08             	sub    esp,0x8
c000f7a6:	53                   	push   ebx
c000f7a7:	50                   	push   eax
c000f7a8:	e8 f6 7f 00 00       	call   c00177a3 <Thr::executeDLL(unsigned long, void*)>
c000f7ad:	83 c4 10             	add    esp,0x10
c000f7b0:	90                   	nop
c000f7b1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f7b4:	c9                   	leave  
c000f7b5:	c3                   	ret    

c000f7b6 <startGUIVESA(void*)>:
c000f7b6:	55                   	push   ebp
c000f7b7:	89 e5                	mov    ebp,esp
c000f7b9:	53                   	push   ebx
c000f7ba:	83 ec 04             	sub    esp,0x4
c000f7bd:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000f7c2:	48                   	dec    eax
c000f7c3:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000f7c8:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000f7cd:	85 c0                	test   eax,eax
c000f7cf:	75 01                	jne    c000f7d2 <startGUIVESA(void*)+0x1c>
c000f7d1:	fb                   	sti    
c000f7d2:	8b 1d 48 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026448
c000f7d8:	83 ec 08             	sub    esp,0x8
c000f7db:	6a 01                	push   0x1
c000f7dd:	68 34 38 02 c0       	push   0xc0023834
c000f7e2:	e8 8b 7d 00 00       	call   c0017572 <Thr::loadDLL(char const*, bool)>
c000f7e7:	83 c4 10             	add    esp,0x10
c000f7ea:	83 ec 08             	sub    esp,0x8
c000f7ed:	53                   	push   ebx
c000f7ee:	50                   	push   eax
c000f7ef:	e8 af 7f 00 00       	call   c00177a3 <Thr::executeDLL(unsigned long, void*)>
c000f7f4:	83 c4 10             	add    esp,0x10
c000f7f7:	8b 1d 48 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026448
c000f7fd:	83 ec 08             	sub    esp,0x8
c000f800:	6a 01                	push   0x1
c000f802:	68 1a 38 02 c0       	push   0xc002381a
c000f807:	e8 66 7d 00 00       	call   c0017572 <Thr::loadDLL(char const*, bool)>
c000f80c:	83 c4 10             	add    esp,0x10
c000f80f:	83 ec 08             	sub    esp,0x8
c000f812:	53                   	push   ebx
c000f813:	50                   	push   eax
c000f814:	e8 8a 7f 00 00       	call   c00177a3 <Thr::executeDLL(unsigned long, void*)>
c000f819:	83 c4 10             	add    esp,0x10
c000f81c:	90                   	nop
c000f81d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f820:	c9                   	leave  
c000f821:	c3                   	ret    

c000f822 <sendKeyToTerminal(unsigned char)>:
c000f822:	55                   	push   ebp
c000f823:	89 e5                	mov    ebp,esp
c000f825:	83 ec 28             	sub    esp,0x28
c000f828:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f82b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000f82e:	a1 04 65 02 c0       	mov    eax,ds:0xc0026504
c000f833:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000f837:	83 ec 08             	sub    esp,0x8
c000f83a:	52                   	push   edx
c000f83b:	50                   	push   eax
c000f83c:	e8 8f b6 ff ff       	call   c000aed0 <VgaText::receiveKey(unsigned char)>
c000f841:	83 c4 10             	add    esp,0x10
c000f844:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000f848:	0f 85 8f 00 00 00    	jne    c000f8dd <sendKeyToTerminal(unsigned char)+0xbb>
c000f84e:	fa                   	cli    
c000f84f:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000f854:	40                   	inc    eax
c000f855:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000f85a:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c000f85f:	40                   	inc    eax
c000f860:	a3 44 79 02 c0       	mov    ds:0xc0027944,eax
c000f865:	a1 e0 65 02 c0       	mov    eax,ds:0xc00265e0
c000f86a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f86d:	c7 05 e0 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00265e0,0x0
c000f877:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f87b:	74 1f                	je     c000f89c <sendKeyToTerminal(unsigned char)+0x7a>
c000f87d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f880:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000f883:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f886:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f889:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f88c:	83 ec 0c             	sub    esp,0xc
c000f88f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f892:	e8 7d 8b 00 00       	call   c0018414 <unblockTask(ThreadControlBlock*)>
c000f897:	83 c4 10             	add    esp,0x10
c000f89a:	eb db                	jmp    c000f877 <sendKeyToTerminal(unsigned char)+0x55>
c000f89c:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c000f8a1:	48                   	dec    eax
c000f8a2:	a3 44 79 02 c0       	mov    ds:0xc0027944,eax
c000f8a7:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c000f8ac:	85 c0                	test   eax,eax
c000f8ae:	75 18                	jne    c000f8c8 <sendKeyToTerminal(unsigned char)+0xa6>
c000f8b0:	a1 40 79 02 c0       	mov    eax,ds:0xc0027940
c000f8b5:	85 c0                	test   eax,eax
c000f8b7:	74 0f                	je     c000f8c8 <sendKeyToTerminal(unsigned char)+0xa6>
c000f8b9:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c000f8c3:	e8 90 86 00 00       	call   c0017f58 <schedule()>
c000f8c8:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000f8cd:	48                   	dec    eax
c000f8ce:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000f8d3:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000f8d8:	85 c0                	test   eax,eax
c000f8da:	75 01                	jne    c000f8dd <sendKeyToTerminal(unsigned char)+0xbb>
c000f8dc:	fb                   	sti    
c000f8dd:	90                   	nop
c000f8de:	c9                   	leave  
c000f8df:	c3                   	ret    

c000f8e0 <sendKeyboardToken(KeyboardToken)>:
c000f8e0:	55                   	push   ebp
c000f8e1:	89 e5                	mov    ebp,esp
c000f8e3:	83 ec 18             	sub    esp,0x18
c000f8e6:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000f8e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8ec:	0f b7 c0             	movzx  eax,ax
c000f8ef:	83 f2 01             	xor    edx,0x1
c000f8f2:	88 90 00 66 02 c0    	mov    BYTE PTR [eax-0x3ffd9a00],dl
c000f8f8:	a1 e8 65 02 c0       	mov    eax,ds:0xc00265e8
c000f8fd:	85 c0                	test   eax,eax
c000f8ff:	74 24                	je     c000f925 <sendKeyboardToken(KeyboardToken)+0x45>
c000f901:	8b 0d e8 65 02 c0    	mov    ecx,DWORD PTR ds:0xc00265e8
c000f907:	83 ec 04             	sub    esp,0x4
c000f90a:	68 00 66 02 c0       	push   0xc0026600
c000f90f:	83 ec 08             	sub    esp,0x8
c000f912:	89 e2                	mov    edx,esp
c000f914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f917:	89 02                	mov    DWORD PTR [edx],eax
c000f919:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f91c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000f920:	ff d1                	call   ecx
c000f922:	83 c4 10             	add    esp,0x10
c000f925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f928:	66 3d 03 02          	cmp    ax,0x203
c000f92c:	75 07                	jne    c000f935 <sendKeyboardToken(KeyboardToken)+0x55>
c000f92e:	a0 00 67 02 c0       	mov    al,ds:0xc0026700
c000f933:	84 c0                	test   al,al
c000f935:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f939:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000f93c:	a0 08 6a 02 c0       	mov    al,ds:0xc0026a08
c000f941:	38 c2                	cmp    dl,al
c000f943:	74 1c                	je     c000f961 <sendKeyboardToken(KeyboardToken)+0x81>
c000f945:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000f948:	a2 08 6a 02 c0       	mov    ds:0xc0026a08,al
c000f94d:	a0 08 6a 02 c0       	mov    al,ds:0xc0026a08
c000f952:	0f b6 c0             	movzx  eax,al
c000f955:	83 ec 0c             	sub    esp,0xc
c000f958:	50                   	push   eax
c000f959:	e8 b2 ab ff ff       	call   c000a510 <setTerminalScrollLock(bool)>
c000f95e:	83 c4 10             	add    esp,0x10
c000f961:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000f964:	84 c0                	test   al,al
c000f966:	0f 84 ae 00 00 00    	je     c000fa1a <sendKeyboardToken(KeyboardToken)+0x13a>
c000f96c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f96f:	66 3d 10 03          	cmp    ax,0x310
c000f973:	75 06                	jne    c000f97b <sendKeyboardToken(KeyboardToken)+0x9b>
c000f975:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000f97b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f97e:	66 3d 11 03          	cmp    ax,0x311
c000f982:	75 06                	jne    c000f98a <sendKeyboardToken(KeyboardToken)+0xaa>
c000f984:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000f98a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f98d:	66 3d 12 03          	cmp    ax,0x312
c000f991:	75 06                	jne    c000f999 <sendKeyboardToken(KeyboardToken)+0xb9>
c000f993:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000f999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f99c:	66 3d 13 03          	cmp    ax,0x313
c000f9a0:	75 06                	jne    c000f9a8 <sendKeyboardToken(KeyboardToken)+0xc8>
c000f9a2:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000f9a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9ab:	66 3d 14 03          	cmp    ax,0x314
c000f9af:	75 06                	jne    c000f9b7 <sendKeyboardToken(KeyboardToken)+0xd7>
c000f9b1:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000f9b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9ba:	66 3d 15 03          	cmp    ax,0x315
c000f9be:	75 06                	jne    c000f9c6 <sendKeyboardToken(KeyboardToken)+0xe6>
c000f9c0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000f9c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9c9:	66 3d 16 03          	cmp    ax,0x316
c000f9cd:	75 06                	jne    c000f9d5 <sendKeyboardToken(KeyboardToken)+0xf5>
c000f9cf:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000f9d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9d8:	66 3d 17 03          	cmp    ax,0x317
c000f9dc:	75 06                	jne    c000f9e4 <sendKeyboardToken(KeyboardToken)+0x104>
c000f9de:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000f9e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9e7:	66 3d 18 03          	cmp    ax,0x318
c000f9eb:	75 06                	jne    c000f9f3 <sendKeyboardToken(KeyboardToken)+0x113>
c000f9ed:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000f9f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9f6:	66 3d 19 03          	cmp    ax,0x319
c000f9fa:	75 06                	jne    c000fa02 <sendKeyboardToken(KeyboardToken)+0x122>
c000f9fc:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000fa02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa05:	66 3d 1a 03          	cmp    ax,0x31a
c000fa09:	0f 85 c9 00 00 00    	jne    c000fad8 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fa0f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000fa15:	e9 be 00 00 00       	jmp    c000fad8 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fa1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa1d:	66 3d 10 03          	cmp    ax,0x310
c000fa21:	75 0a                	jne    c000fa2d <sendKeyboardToken(KeyboardToken)+0x14d>
c000fa23:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000fa29:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa30:	66 3d 11 03          	cmp    ax,0x311
c000fa34:	75 0a                	jne    c000fa40 <sendKeyboardToken(KeyboardToken)+0x160>
c000fa36:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000fa3c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa43:	66 3d 12 03          	cmp    ax,0x312
c000fa47:	75 0a                	jne    c000fa53 <sendKeyboardToken(KeyboardToken)+0x173>
c000fa49:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000fa4f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa56:	66 3d 13 03          	cmp    ax,0x313
c000fa5a:	75 0a                	jne    c000fa66 <sendKeyboardToken(KeyboardToken)+0x186>
c000fa5c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fa62:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa69:	66 3d 14 03          	cmp    ax,0x314
c000fa6d:	75 0a                	jne    c000fa79 <sendKeyboardToken(KeyboardToken)+0x199>
c000fa6f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fa75:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa7c:	66 3d 15 03          	cmp    ax,0x315
c000fa80:	75 0a                	jne    c000fa8c <sendKeyboardToken(KeyboardToken)+0x1ac>
c000fa82:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fa88:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa8f:	66 3d 16 03          	cmp    ax,0x316
c000fa93:	75 0a                	jne    c000fa9f <sendKeyboardToken(KeyboardToken)+0x1bf>
c000fa95:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fa9b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faa2:	66 3d 17 03          	cmp    ax,0x317
c000faa6:	75 0a                	jne    c000fab2 <sendKeyboardToken(KeyboardToken)+0x1d2>
c000faa8:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000faae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fab2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fab5:	66 3d 18 03          	cmp    ax,0x318
c000fab9:	75 0a                	jne    c000fac5 <sendKeyboardToken(KeyboardToken)+0x1e5>
c000fabb:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fac1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fac5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fac8:	66 3d 19 03          	cmp    ax,0x319
c000facc:	75 0a                	jne    c000fad8 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000face:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fad4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fad8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fadb:	66 3d 00 02          	cmp    ax,0x200
c000fadf:	75 2c                	jne    c000fb0d <sendKeyboardToken(KeyboardToken)+0x22d>
c000fae1:	a0 00 6a 02 c0       	mov    al,ds:0xc0026a00
c000fae6:	83 f0 01             	xor    eax,0x1
c000fae9:	84 c0                	test   al,al
c000faeb:	74 20                	je     c000fb0d <sendKeyboardToken(KeyboardToken)+0x22d>
c000faed:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000faf2:	6a 01                	push   0x1
c000faf4:	6a 00                	push   0x0
c000faf6:	68 4a f7 00 c0       	push   0xc000f74a
c000fafb:	50                   	push   eax
c000fafc:	e8 3b 82 00 00       	call   c0017d3c <Process::createThread(void (*)(void*), void*, int)>
c000fb01:	83 c4 10             	add    esp,0x10
c000fb04:	c6 05 00 6a 02 c0 01 	mov    BYTE PTR ds:0xc0026a00,0x1
c000fb0b:	eb 33                	jmp    c000fb40 <sendKeyboardToken(KeyboardToken)+0x260>
c000fb0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb10:	66 3d 01 02          	cmp    ax,0x201
c000fb14:	75 2a                	jne    c000fb40 <sendKeyboardToken(KeyboardToken)+0x260>
c000fb16:	a0 00 6a 02 c0       	mov    al,ds:0xc0026a00
c000fb1b:	83 f0 01             	xor    eax,0x1
c000fb1e:	84 c0                	test   al,al
c000fb20:	74 1e                	je     c000fb40 <sendKeyboardToken(KeyboardToken)+0x260>
c000fb22:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c000fb27:	6a 01                	push   0x1
c000fb29:	6a 00                	push   0x0
c000fb2b:	68 b6 f7 00 c0       	push   0xc000f7b6
c000fb30:	50                   	push   eax
c000fb31:	e8 06 82 00 00       	call   c0017d3c <Process::createThread(void (*)(void*), void*, int)>
c000fb36:	83 c4 10             	add    esp,0x10
c000fb39:	c6 05 00 6a 02 c0 01 	mov    BYTE PTR ds:0xc0026a00,0x1
c000fb40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb43:	66 3d 1d 03          	cmp    ax,0x31d
c000fb47:	75 06                	jne    c000fb4f <sendKeyboardToken(KeyboardToken)+0x26f>
c000fb49:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000fb4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb52:	66 3d 1c 03          	cmp    ax,0x31c
c000fb56:	75 06                	jne    c000fb5e <sendKeyboardToken(KeyboardToken)+0x27e>
c000fb58:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fb5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb61:	66 3d 1b 03          	cmp    ax,0x31b
c000fb65:	75 06                	jne    c000fb6d <sendKeyboardToken(KeyboardToken)+0x28d>
c000fb67:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fb6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb70:	66 3d 1e 03          	cmp    ax,0x31e
c000fb74:	75 06                	jne    c000fb7c <sendKeyboardToken(KeyboardToken)+0x29c>
c000fb76:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000fb7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb7f:	66 3d 1f 03          	cmp    ax,0x31f
c000fb83:	75 06                	jne    c000fb8b <sendKeyboardToken(KeyboardToken)+0x2ab>
c000fb85:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fb8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb8e:	66 3d 1a 03          	cmp    ax,0x31a
c000fb92:	75 06                	jne    c000fb9a <sendKeyboardToken(KeyboardToken)+0x2ba>
c000fb94:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fb9a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fb9e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fba1:	83 f0 01             	xor    eax,0x1
c000fba4:	84 c0                	test   al,al
c000fba6:	74 77                	je     c000fc1f <sendKeyboardToken(KeyboardToken)+0x33f>
c000fba8:	a0 01 67 02 c0       	mov    al,ds:0xc0026701
c000fbad:	84 c0                	test   al,al
c000fbaf:	74 41                	je     c000fbf2 <sendKeyboardToken(KeyboardToken)+0x312>
c000fbb1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fbb5:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fbb9:	74 2b                	je     c000fbe6 <sendKeyboardToken(KeyboardToken)+0x306>
c000fbbb:	8b 15 04 6a 02 c0    	mov    edx,DWORD PTR ds:0xc0026a04
c000fbc1:	89 d0                	mov    eax,edx
c000fbc3:	c1 e0 02             	shl    eax,0x2
c000fbc6:	01 d0                	add    eax,edx
c000fbc8:	01 c0                	add    eax,eax
c000fbca:	a3 04 6a 02 c0       	mov    ds:0xc0026a04,eax
c000fbcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbd2:	0f b7 c0             	movzx  eax,ax
c000fbd5:	8d 50 d0             	lea    edx,[eax-0x30]
c000fbd8:	a1 04 6a 02 c0       	mov    eax,ds:0xc0026a04
c000fbdd:	01 d0                	add    eax,edx
c000fbdf:	a3 04 6a 02 c0       	mov    ds:0xc0026a04,eax
c000fbe4:	eb 6d                	jmp    c000fc53 <sendKeyboardToken(KeyboardToken)+0x373>
c000fbe6:	c7 05 04 6a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026a04,0x0
c000fbf0:	eb 61                	jmp    c000fc53 <sendKeyboardToken(KeyboardToken)+0x373>
c000fbf2:	a1 04 6a 02 c0       	mov    eax,ds:0xc0026a04
c000fbf7:	85 c0                	test   eax,eax
c000fbf9:	74 18                	je     c000fc13 <sendKeyboardToken(KeyboardToken)+0x333>
c000fbfb:	a1 04 6a 02 c0       	mov    eax,ds:0xc0026a04
c000fc00:	0f b6 c0             	movzx  eax,al
c000fc03:	83 ec 0c             	sub    esp,0xc
c000fc06:	50                   	push   eax
c000fc07:	e8 16 fc ff ff       	call   c000f822 <sendKeyToTerminal(unsigned char)>
c000fc0c:	83 c4 10             	add    esp,0x10
c000fc0f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fc13:	c7 05 04 6a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026a04,0x0
c000fc1d:	eb 34                	jmp    c000fc53 <sendKeyboardToken(KeyboardToken)+0x373>
c000fc1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc22:	66 3d 01 01          	cmp    ax,0x101
c000fc26:	75 2b                	jne    c000fc53 <sendKeyboardToken(KeyboardToken)+0x373>
c000fc28:	a1 04 6a 02 c0       	mov    eax,ds:0xc0026a04
c000fc2d:	85 c0                	test   eax,eax
c000fc2f:	74 18                	je     c000fc49 <sendKeyboardToken(KeyboardToken)+0x369>
c000fc31:	a1 04 6a 02 c0       	mov    eax,ds:0xc0026a04
c000fc36:	0f b6 c0             	movzx  eax,al
c000fc39:	83 ec 0c             	sub    esp,0xc
c000fc3c:	50                   	push   eax
c000fc3d:	e8 e0 fb ff ff       	call   c000f822 <sendKeyToTerminal(unsigned char)>
c000fc42:	83 c4 10             	add    esp,0x10
c000fc45:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fc49:	c7 05 04 6a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026a04,0x0
c000fc53:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fc56:	83 f0 01             	xor    eax,0x1
c000fc59:	84 c0                	test   al,al
c000fc5b:	74 4c                	je     c000fca9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc5d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fc60:	83 f0 01             	xor    eax,0x1
c000fc63:	84 c0                	test   al,al
c000fc65:	74 42                	je     c000fca9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc67:	a0 00 67 02 c0       	mov    al,ds:0xc0026700
c000fc6c:	83 f0 01             	xor    eax,0x1
c000fc6f:	84 c0                	test   al,al
c000fc71:	74 36                	je     c000fca9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc76:	66 83 f8 1f          	cmp    ax,0x1f
c000fc7a:	76 09                	jbe    c000fc85 <sendKeyboardToken(KeyboardToken)+0x3a5>
c000fc7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc7f:	66 83 f8 7e          	cmp    ax,0x7e
c000fc83:	76 12                	jbe    c000fc97 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fc85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc88:	66 83 f8 0a          	cmp    ax,0xa
c000fc8c:	74 09                	je     c000fc97 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fc8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc91:	66 83 f8 08          	cmp    ax,0x8
c000fc95:	75 12                	jne    c000fca9 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc9a:	0f b6 c0             	movzx  eax,al
c000fc9d:	83 ec 0c             	sub    esp,0xc
c000fca0:	50                   	push   eax
c000fca1:	e8 7c fb ff ff       	call   c000f822 <sendKeyToTerminal(unsigned char)>
c000fca6:	83 c4 10             	add    esp,0x10
c000fca9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fcac:	83 f0 01             	xor    eax,0x1
c000fcaf:	84 c0                	test   al,al
c000fcb1:	74 4f                	je     c000fd02 <sendKeyboardToken(KeyboardToken)+0x422>
c000fcb3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fcb6:	83 f0 01             	xor    eax,0x1
c000fcb9:	84 c0                	test   al,al
c000fcbb:	74 45                	je     c000fd02 <sendKeyboardToken(KeyboardToken)+0x422>
c000fcbd:	a0 00 67 02 c0       	mov    al,ds:0xc0026700
c000fcc2:	84 c0                	test   al,al
c000fcc4:	74 3c                	je     c000fd02 <sendKeyboardToken(KeyboardToken)+0x422>
c000fcc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcc9:	66 83 f8 3f          	cmp    ax,0x3f
c000fccd:	76 33                	jbe    c000fd02 <sendKeyboardToken(KeyboardToken)+0x422>
c000fccf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcd2:	66 83 f8 7f          	cmp    ax,0x7f
c000fcd6:	77 2a                	ja     c000fd02 <sendKeyboardToken(KeyboardToken)+0x422>
c000fcd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcdb:	88 c2                	mov    dl,al
c000fcdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fce0:	66 83 f8 5f          	cmp    ax,0x5f
c000fce4:	76 04                	jbe    c000fcea <sendKeyboardToken(KeyboardToken)+0x40a>
c000fce6:	b0 20                	mov    al,0x20
c000fce8:	eb 02                	jmp    c000fcec <sendKeyboardToken(KeyboardToken)+0x40c>
c000fcea:	b0 00                	mov    al,0x0
c000fcec:	29 c2                	sub    edx,eax
c000fcee:	88 d0                	mov    al,dl
c000fcf0:	83 e8 40             	sub    eax,0x40
c000fcf3:	0f b6 c0             	movzx  eax,al
c000fcf6:	83 ec 0c             	sub    esp,0xc
c000fcf9:	50                   	push   eax
c000fcfa:	e8 23 fb ff ff       	call   c000f822 <sendKeyToTerminal(unsigned char)>
c000fcff:	83 c4 10             	add    esp,0x10
c000fd02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd05:	66 3d 00 03          	cmp    ax,0x300
c000fd09:	75 0f                	jne    c000fd1a <sendKeyboardToken(KeyboardToken)+0x43a>
c000fd0b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fd0e:	83 f0 01             	xor    eax,0x1
c000fd11:	84 c0                	test   al,al
c000fd13:	74 05                	je     c000fd1a <sendKeyboardToken(KeyboardToken)+0x43a>
c000fd15:	e8 67 ab ff ff       	call   c000a881 <doTerminalCycle()>
c000fd1a:	90                   	nop
c000fd1b:	c9                   	leave  
c000fd1c:	c3                   	ret    

c000fd1d <clearInternalKeybuffer(VgaText*)>:
c000fd1d:	55                   	push   ebp
c000fd1e:	89 e5                	mov    ebp,esp
c000fd20:	83 ec 08             	sub    esp,0x8
c000fd23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd26:	05 98 01 00 00       	add    eax,0x198
c000fd2b:	83 ec 0c             	sub    esp,0xc
c000fd2e:	50                   	push   eax
c000fd2f:	e8 6c 09 ff ff       	call   c00006a0 <strlen>
c000fd34:	83 c4 10             	add    esp,0x10
c000fd37:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fd3a:	81 c2 98 01 00 00    	add    edx,0x198
c000fd40:	83 ec 04             	sub    esp,0x4
c000fd43:	50                   	push   eax
c000fd44:	6a 00                	push   0x0
c000fd46:	52                   	push   edx
c000fd47:	e8 38 09 ff ff       	call   c0000684 <memset>
c000fd4c:	83 c4 10             	add    esp,0x10
c000fd4f:	90                   	nop
c000fd50:	c9                   	leave  
c000fd51:	c3                   	ret    

c000fd52 <readKeyboard(VgaText*, char*, unsigned long)>:
c000fd52:	55                   	push   ebp
c000fd53:	89 e5                	mov    ebp,esp
c000fd55:	83 ec 18             	sub    esp,0x18
c000fd58:	a1 e8 65 02 c0       	mov    eax,ds:0xc00265e8
c000fd5d:	85 c0                	test   eax,eax
c000fd5f:	74 2a                	je     c000fd8b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000fd61:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000fd67:	8b 0d e8 65 02 c0    	mov    ecx,DWORD PTR ds:0xc00265e8
c000fd6d:	83 ec 04             	sub    esp,0x4
c000fd70:	68 00 66 02 c0       	push   0xc0026600
c000fd75:	83 ec 08             	sub    esp,0x8
c000fd78:	89 e2                	mov    edx,esp
c000fd7a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000fd7d:	89 02                	mov    DWORD PTR [edx],eax
c000fd7f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fd82:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fd86:	ff d1                	call   ecx
c000fd88:	83 c4 10             	add    esp,0x10
c000fd8b:	fb                   	sti    
c000fd8c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000fd93:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000fd97:	0f 84 a1 00 00 00    	je     c000fe3e <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000fd9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fda0:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fda6:	84 c0                	test   al,al
c000fda8:	75 28                	jne    c000fdd2 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000fdaa:	fa                   	cli    
c000fdab:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000fdb0:	40                   	inc    eax
c000fdb1:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000fdb6:	e8 9d 81 00 00       	call   c0017f58 <schedule()>
c000fdbb:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000fdc0:	48                   	dec    eax
c000fdc1:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c000fdc6:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c000fdcb:	85 c0                	test   eax,eax
c000fdcd:	75 ce                	jne    c000fd9d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fdcf:	fb                   	sti    
c000fdd0:	eb cb                	jmp    c000fd9d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fdd2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fdd5:	8d 50 01             	lea    edx,[eax+0x1]
c000fdd8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000fddb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fdde:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c000fde4:	88 10                	mov    BYTE PTR [eax],dl
c000fde6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fde9:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fdef:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000fdf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdf5:	05 98 01 00 00       	add    eax,0x198
c000fdfa:	83 ec 0c             	sub    esp,0xc
c000fdfd:	50                   	push   eax
c000fdfe:	e8 9d 08 ff ff       	call   c00006a0 <strlen>
c000fe03:	83 c4 10             	add    esp,0x10
c000fe06:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fe09:	81 c2 98 01 00 00    	add    edx,0x198
c000fe0f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000fe12:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fe15:	81 c2 98 01 00 00    	add    edx,0x198
c000fe1b:	83 ec 04             	sub    esp,0x4
c000fe1e:	50                   	push   eax
c000fe1f:	51                   	push   ecx
c000fe20:	52                   	push   edx
c000fe21:	e8 96 07 ff ff       	call   c00005bc <memmove>
c000fe26:	83 c4 10             	add    esp,0x10
c000fe29:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000fe2c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000fe2f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000fe33:	0f 85 5a ff ff ff    	jne    c000fd93 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000fe39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe3c:	eb 03                	jmp    c000fe41 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000fe3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe41:	c9                   	leave  
c000fe42:	c3                   	ret    
c000fe43:	90                   	nop

c000fe44 <Keyboard::Keyboard(char const*)>:
c000fe44:	83 ec 0c             	sub    esp,0xc
c000fe47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe4b:	83 ec 08             	sub    esp,0x8
c000fe4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe52:	50                   	push   eax
c000fe53:	e8 b6 e2 ff ff       	call   c000e10e <Device::Device(char const*)>
c000fe58:	83 c4 10             	add    esp,0x10
c000fe5b:	ba 58 38 02 c0       	mov    edx,0xc0023858
c000fe60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe64:	89 10                	mov    DWORD PTR [eax],edx
c000fe66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe6a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000fe74:	c6 05 e4 65 02 c0 01 	mov    BYTE PTR ds:0xc00265e4,0x1
c000fe7b:	90                   	nop
c000fe7c:	83 c4 0c             	add    esp,0xc
c000fe7f:	c3                   	ret    

c000fe80 <Keyboard::~Keyboard()>:
c000fe80:	83 ec 0c             	sub    esp,0xc
c000fe83:	ba 58 38 02 c0       	mov    edx,0xc0023858
c000fe88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe8c:	89 10                	mov    DWORD PTR [eax],edx
c000fe8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe92:	83 ec 0c             	sub    esp,0xc
c000fe95:	50                   	push   eax
c000fe96:	e8 3d df ff ff       	call   c000ddd8 <Device::~Device()>
c000fe9b:	83 c4 10             	add    esp,0x10
c000fe9e:	90                   	nop
c000fe9f:	83 c4 0c             	add    esp,0xc
c000fea2:	c3                   	ret    
c000fea3:	90                   	nop

c000fea4 <Keyboard::~Keyboard()>:
c000fea4:	83 ec 0c             	sub    esp,0xc
c000fea7:	83 ec 0c             	sub    esp,0xc
c000feaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feae:	e8 cd ff ff ff       	call   c000fe80 <Keyboard::~Keyboard()>
c000feb3:	83 c4 10             	add    esp,0x10
c000feb6:	83 ec 08             	sub    esp,0x8
c000feb9:	68 5c 01 00 00       	push   0x15c
c000febe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fec2:	e8 1b cb ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c000fec7:	83 c4 10             	add    esp,0x10
c000feca:	83 c4 0c             	add    esp,0xc
c000fecd:	c3                   	ret    

c000fece <LogicalDisk::close(int, int, void*)>:
c000fece:	83 c8 ff             	or     eax,0xffffffff
c000fed1:	c3                   	ret    

c000fed2 <LogicalDisk::~LogicalDisk()>:
c000fed2:	83 ec 0c             	sub    esp,0xc
c000fed5:	ba d0 38 02 c0       	mov    edx,0xc00238d0
c000feda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fede:	89 10                	mov    DWORD PTR [eax],edx
c000fee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fee4:	83 ec 0c             	sub    esp,0xc
c000fee7:	50                   	push   eax
c000fee8:	e8 eb de ff ff       	call   c000ddd8 <Device::~Device()>
c000feed:	83 c4 10             	add    esp,0x10
c000fef0:	90                   	nop
c000fef1:	83 c4 0c             	add    esp,0xc
c000fef4:	c3                   	ret    
c000fef5:	90                   	nop

c000fef6 <LogicalDisk::~LogicalDisk()>:
c000fef6:	83 ec 0c             	sub    esp,0xc
c000fef9:	83 ec 0c             	sub    esp,0xc
c000fefc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff00:	e8 cd ff ff ff       	call   c000fed2 <LogicalDisk::~LogicalDisk()>
c000ff05:	83 c4 10             	add    esp,0x10
c000ff08:	83 ec 08             	sub    esp,0x8
c000ff0b:	68 74 01 00 00       	push   0x174
c000ff10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff14:	e8 c9 ca ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c000ff19:	83 c4 10             	add    esp,0x10
c000ff1c:	83 c4 0c             	add    esp,0xc
c000ff1f:	c3                   	ret    

c000ff20 <LogicalDisk::open(int, int, void*)>:
c000ff20:	83 ec 18             	sub    esp,0x18
c000ff23:	68 84 38 02 c0       	push   0xc0023884
c000ff28:	e8 58 44 00 00       	call   c0014385 <Krnl::panic(char const*)>
c000ff2d:	83 c8 ff             	or     eax,0xffffffff
c000ff30:	83 c4 1c             	add    esp,0x1c
c000ff33:	c3                   	ret    

c000ff34 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ff34:	53                   	push   ebx
c000ff35:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ff39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff3d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ff41:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ff47:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ff4d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ff53:	77 10                	ja     c000ff65 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ff55:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ff5b:	89 d3                	mov    ebx,edx
c000ff5d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ff63:	72 05                	jb     c000ff6a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ff65:	83 c8 ff             	or     eax,0xffffffff
c000ff68:	89 c2                	mov    edx,eax
c000ff6a:	5b                   	pop    ebx
c000ff6b:	c3                   	ret    

c000ff6c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ff6c:	56                   	push   esi
c000ff6d:	83 c8 ff             	or     eax,0xffffffff
c000ff70:	53                   	push   ebx
c000ff71:	89 c2                	mov    edx,eax
c000ff73:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ff77:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ff7b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff7f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ff85:	77 27                	ja     c000ffae <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ff87:	89 d8                	mov    eax,ebx
c000ff89:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ff8f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ff95:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ff9a:	89 c2                	mov    edx,eax
c000ff9c:	73 10                	jae    c000ffae <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ff9e:	89 c8                	mov    eax,ecx
c000ffa0:	89 da                	mov    edx,ebx
c000ffa2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ffa8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ffae:	5b                   	pop    ebx
c000ffaf:	5e                   	pop    esi
c000ffb0:	c3                   	ret    
c000ffb1:	90                   	nop

c000ffb2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ffb2:	83 ec 1c             	sub    esp,0x1c
c000ffb5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ffb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ffbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ffc5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ffc9:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffcc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ffd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ffd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffd8:	83 ec 08             	sub    esp,0x8
c000ffdb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ffdf:	50                   	push   eax
c000ffe0:	e8 29 e1 ff ff       	call   c000e10e <Device::Device(char const*)>
c000ffe5:	83 c4 10             	add    esp,0x10
c000ffe8:	ba d0 38 02 c0       	mov    edx,0xc00238d0
c000ffed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fff1:	89 10                	mov    DWORD PTR [eax],edx
c000fff3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fff7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000fffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010002:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010009:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001000d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0010017:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001001b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001001f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010023:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0010029:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001002f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010033:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010036:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001003a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0010040:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0010046:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001004a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001004e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0010054:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010058:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010062:	90                   	nop
c0010063:	83 c4 1c             	add    esp,0x1c
c0010066:	c3                   	ret    
c0010067:	90                   	nop

c0010068 <LogicalDisk::assignDriveLetter()>:
c0010068:	55                   	push   ebp
c0010069:	57                   	push   edi
c001006a:	56                   	push   esi
c001006b:	53                   	push   ebx
c001006c:	83 ec 14             	sub    esp,0x14
c001006f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010073:	8b 3d 20 6a 02 c0    	mov    edi,DWORD PTR ds:0xc0026a20
c0010079:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001007f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010083:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0010089:	8b 3d 24 6a 02 c0    	mov    edi,DWORD PTR ds:0xc0026a24
c001008f:	3c 01                	cmp    al,0x1
c0010091:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0010095:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010099:	19 c0                	sbb    eax,eax
c001009b:	83 e0 02             	and    eax,0x2
c001009e:	83 c0 41             	add    eax,0x41
c00100a1:	0f be e8             	movsx  ebp,al
c00100a4:	3c 43                	cmp    al,0x43
c00100a6:	75 10                	jne    c00100b8 <LogicalDisk::assignDriveLetter()+0x50>
c00100a8:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00100af:	75 5d                	jne    c001010e <LogicalDisk::assignDriveLetter()+0xa6>
c00100b1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00100b6:	75 56                	jne    c001010e <LogicalDisk::assignDriveLetter()+0xa6>
c00100b8:	8d 75 bf             	lea    esi,[ebp-0x41]
c00100bb:	ba 01 00 00 00       	mov    edx,0x1
c00100c0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00100c4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00100c8:	d3 e2                	shl    edx,cl
c00100ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00100ce:	89 d7                	mov    edi,edx
c00100d0:	89 d6                	mov    esi,edx
c00100d2:	c1 ff 1f             	sar    edi,0x1f
c00100d5:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00100d9:	21 f9                	and    ecx,edi
c00100db:	09 d1                	or     ecx,edx
c00100dd:	75 2f                	jne    c001010e <LogicalDisk::assignDriveLetter()+0xa6>
c00100df:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00100e3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100e7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00100ed:	09 f2                	or     edx,esi
c00100ef:	89 15 20 6a 02 c0    	mov    DWORD PTR ds:0xc0026a20,edx
c00100f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100f9:	09 fa                	or     edx,edi
c00100fb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00100ff:	89 15 24 6a 02 c0    	mov    DWORD PTR ds:0xc0026a24,edx
c0010105:	89 1c bd 40 6a 02 c0 	mov    DWORD PTR [edi*4-0x3ffd95c0],ebx
c001010c:	eb 08                	jmp    c0010116 <LogicalDisk::assignDriveLetter()+0xae>
c001010e:	45                   	inc    ebp
c001010f:	40                   	inc    eax
c0010110:	3c 5b                	cmp    al,0x5b
c0010112:	75 90                	jne    c00100a4 <LogicalDisk::assignDriveLetter()+0x3c>
c0010114:	31 c0                	xor    eax,eax
c0010116:	83 c4 14             	add    esp,0x14
c0010119:	5b                   	pop    ebx
c001011a:	5e                   	pop    esi
c001011b:	5f                   	pop    edi
c001011c:	5d                   	pop    ebp
c001011d:	c3                   	ret    

c001011e <LogicalDisk::mount()>:
c001011e:	56                   	push   esi
c001011f:	53                   	push   ebx
c0010120:	53                   	push   ebx
c0010121:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010125:	8b 1d b4 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265b4
c001012b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0010135:	85 db                	test   ebx,ebx
c0010137:	74 27                	je     c0010160 <LogicalDisk::mount()+0x42>
c0010139:	51                   	push   ecx
c001013a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0010141:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010143:	83 e8 41             	sub    eax,0x41
c0010146:	50                   	push   eax
c0010147:	56                   	push   esi
c0010148:	53                   	push   ebx
c0010149:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001014c:	83 c4 10             	add    esp,0x10
c001014f:	84 c0                	test   al,al
c0010151:	74 08                	je     c001015b <LogicalDisk::mount()+0x3d>
c0010153:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0010159:	eb 07                	jmp    c0010162 <LogicalDisk::mount()+0x44>
c001015b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001015e:	eb d5                	jmp    c0010135 <LogicalDisk::mount()+0x17>
c0010160:	31 c0                	xor    eax,eax
c0010162:	5a                   	pop    edx
c0010163:	5b                   	pop    ebx
c0010164:	5e                   	pop    esi
c0010165:	c3                   	ret    

c0010166 <LogicalDisk::unmount()>:
c0010166:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001016a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010174:	c3                   	ret    
c0010175:	90                   	nop

c0010176 <LogicalDisk::eject()>:
c0010176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001017a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0010180:	8b 10                	mov    edx,DWORD PTR [eax]
c0010182:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010186:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0010189:	90                   	nop

c001018a <LogicalDisk::unassignDriveLetter()>:
c001018a:	57                   	push   edi
c001018b:	56                   	push   esi
c001018c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010190:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0010197:	84 c9                	test   cl,cl
c0010199:	75 0f                	jne    c00101aa <LogicalDisk::unassignDriveLetter()+0x20>
c001019b:	c7 44 24 0c a8 38 02 c0 	mov    DWORD PTR [esp+0xc],0xc00238a8
c00101a3:	5e                   	pop    esi
c00101a4:	5f                   	pop    edi
c00101a5:	e9 db 41 00 00       	jmp    c0014385 <Krnl::panic(char const*)>
c00101aa:	83 e9 41             	sub    ecx,0x41
c00101ad:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00101b4:	b8 01 00 00 00       	mov    eax,0x1
c00101b9:	c7 04 8d 40 6a 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd95c0],0x0
c00101c4:	d3 e0                	shl    eax,cl
c00101c6:	89 c7                	mov    edi,eax
c00101c8:	f7 d0                	not    eax
c00101ca:	c1 ff 1f             	sar    edi,0x1f
c00101cd:	21 05 20 6a 02 c0    	and    DWORD PTR ds:0xc0026a20,eax
c00101d3:	89 fe                	mov    esi,edi
c00101d5:	f7 d6                	not    esi
c00101d7:	21 35 24 6a 02 c0    	and    DWORD PTR ds:0xc0026a24,esi
c00101dd:	5e                   	pop    esi
c00101de:	5f                   	pop    edi
c00101df:	c3                   	ret    

c00101e0 <LogicalDisk::read(unsigned long long, int, void*)>:
c00101e0:	57                   	push   edi
c00101e1:	56                   	push   esi
c00101e2:	53                   	push   ebx
c00101e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101eb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00101ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101f3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00101f9:	77 41                	ja     c001023c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00101fb:	99                   	cdq    
c00101fc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010202:	01 c8                	add    eax,ecx
c0010204:	11 da                	adc    edx,ebx
c0010206:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001020c:	19 d7                	sbb    edi,edx
c001020e:	72 33                	jb     c0010243 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0010210:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010216:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001021c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010220:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010224:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001022a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010230:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010234:	5b                   	pop    ebx
c0010235:	5e                   	pop    esi
c0010236:	5f                   	pop    edi
c0010237:	e9 3c 0b 00 00       	jmp    c0010d78 <VCache::read(unsigned long long, int, void*)>
c001023c:	b8 05 00 00 00       	mov    eax,0x5
c0010241:	eb 05                	jmp    c0010248 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0010243:	b8 07 00 00 00       	mov    eax,0x7
c0010248:	5b                   	pop    ebx
c0010249:	5e                   	pop    esi
c001024a:	5f                   	pop    edi
c001024b:	c3                   	ret    

c001024c <LogicalDisk::write(unsigned long long, int, void*)>:
c001024c:	57                   	push   edi
c001024d:	56                   	push   esi
c001024e:	53                   	push   ebx
c001024f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010253:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010257:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001025b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001025f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010265:	77 41                	ja     c00102a8 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0010267:	99                   	cdq    
c0010268:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001026e:	01 c8                	add    eax,ecx
c0010270:	11 da                	adc    edx,ebx
c0010272:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010278:	19 d7                	sbb    edi,edx
c001027a:	72 33                	jb     c00102af <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001027c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010282:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010288:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001028c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010290:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010296:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001029c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00102a0:	5b                   	pop    ebx
c00102a1:	5e                   	pop    esi
c00102a2:	5f                   	pop    edi
c00102a3:	e9 8c 09 00 00       	jmp    c0010c34 <VCache::write(unsigned long long, int, void*)>
c00102a8:	b8 05 00 00 00       	mov    eax,0x5
c00102ad:	eb 05                	jmp    c00102b4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00102af:	b8 07 00 00 00       	mov    eax,0x7
c00102b4:	5b                   	pop    ebx
c00102b5:	5e                   	pop    esi
c00102b6:	5f                   	pop    edi
c00102b7:	c3                   	ret    

c00102b8 <Mouse::Mouse(char const*)>:
c00102b8:	83 ec 0c             	sub    esp,0xc
c00102bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102bf:	83 ec 08             	sub    esp,0x8
c00102c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c6:	50                   	push   eax
c00102c7:	e8 42 de ff ff       	call   c000e10e <Device::Device(char const*)>
c00102cc:	83 c4 10             	add    esp,0x10
c00102cf:	ba fc 38 02 c0       	mov    edx,0xc00238fc
c00102d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d8:	89 10                	mov    DWORD PTR [eax],edx
c00102da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102de:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00102e8:	90                   	nop
c00102e9:	83 c4 0c             	add    esp,0xc
c00102ec:	c3                   	ret    
c00102ed:	90                   	nop
c00102ee:	66 90                	xchg   ax,ax

c00102f0 <Mouse::~Mouse()>:
c00102f0:	83 ec 0c             	sub    esp,0xc
c00102f3:	ba fc 38 02 c0       	mov    edx,0xc00238fc
c00102f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102fc:	89 10                	mov    DWORD PTR [eax],edx
c00102fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010302:	83 ec 0c             	sub    esp,0xc
c0010305:	50                   	push   eax
c0010306:	e8 cd da ff ff       	call   c000ddd8 <Device::~Device()>
c001030b:	83 c4 10             	add    esp,0x10
c001030e:	90                   	nop
c001030f:	83 c4 0c             	add    esp,0xc
c0010312:	c3                   	ret    
c0010313:	90                   	nop

c0010314 <Mouse::~Mouse()>:
c0010314:	83 ec 0c             	sub    esp,0xc
c0010317:	83 ec 0c             	sub    esp,0xc
c001031a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001031e:	e8 cd ff ff ff       	call   c00102f0 <Mouse::~Mouse()>
c0010323:	83 c4 10             	add    esp,0x10
c0010326:	83 ec 08             	sub    esp,0x8
c0010329:	68 58 01 00 00       	push   0x158
c001032e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010332:	e8 ab c6 ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c0010337:	83 c4 10             	add    esp,0x10
c001033a:	83 c4 0c             	add    esp,0xc
c001033d:	c3                   	ret    

c001033e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001033e:	55                   	push   ebp
c001033f:	57                   	push   edi
c0010340:	56                   	push   esi
c0010341:	53                   	push   ebx
c0010342:	81 ec 28 01 00 00    	sub    esp,0x128
c0010348:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001034f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0010356:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001035d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010364:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010368:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001036c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010373:	e8 92 de ff ff       	call   c000e20a <Device::getName()>
c0010378:	5a                   	pop    edx
c0010379:	59                   	pop    ecx
c001037a:	50                   	push   eax
c001037b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001037f:	55                   	push   ebp
c0010380:	e8 bb 03 ff ff       	call   c0000740 <strcpy>
c0010385:	5b                   	pop    ebx
c0010386:	58                   	pop    eax
c0010387:	68 20 39 02 c0       	push   0xc0023920
c001038c:	55                   	push   ebp
c001038d:	e8 ee 04 ff ff       	call   c0000880 <strcat>
c0010392:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010399:	e8 25 96 ff ff       	call   c00099c3 <malloc>
c001039e:	83 c4 0c             	add    esp,0xc
c00103a1:	89 c3                	mov    ebx,eax
c00103a3:	57                   	push   edi
c00103a4:	56                   	push   esi
c00103a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103ad:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00103b4:	55                   	push   ebp
c00103b5:	50                   	push   eax
c00103b6:	e8 f7 fb ff ff       	call   c000ffb2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00103bb:	83 c4 14             	add    esp,0x14
c00103be:	53                   	push   ebx
c00103bf:	e8 a4 fc ff ff       	call   c0010068 <LogicalDisk::assignDriveLetter()>
c00103c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00103c7:	e8 52 fd ff ff       	call   c001011e <LogicalDisk::mount()>
c00103cc:	58                   	pop    eax
c00103cd:	5a                   	pop    edx
c00103ce:	53                   	push   ebx
c00103cf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00103d6:	e8 2f db ff ff       	call   c000df0a <Device::addChild(Device*)>
c00103db:	81 c4 2c 01 00 00    	add    esp,0x12c
c00103e1:	5b                   	pop    ebx
c00103e2:	5e                   	pop    esi
c00103e3:	5f                   	pop    edi
c00103e4:	5d                   	pop    ebp
c00103e5:	c3                   	ret    

c00103e6 <createPartitionsForDisk(PhysicalDisk*)>:
c00103e6:	55                   	push   ebp
c00103e7:	57                   	push   edi
c00103e8:	56                   	push   esi
c00103e9:	53                   	push   ebx
c00103ea:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00103f0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00103f7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00103fd:	3d 00 02 00 00       	cmp    eax,0x200
c0010402:	74 27                	je     c001042b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010404:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001040a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010410:	83 ec 10             	sub    esp,0x10
c0010413:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010417:	99                   	cdq    
c0010418:	c1 e6 0a             	shl    esi,0xa
c001041b:	52                   	push   edx
c001041c:	89 fd                	mov    ebp,edi
c001041e:	50                   	push   eax
c001041f:	55                   	push   ebp
c0010420:	56                   	push   esi
c0010421:	e8 5e 0b 01 00       	call   c0020f84 <__udivdi3>
c0010426:	e9 b1 00 00 00       	jmp    c00104dc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001042b:	83 ec 0c             	sub    esp,0xc
c001042e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010430:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010434:	56                   	push   esi
c0010435:	6a 01                	push   0x1
c0010437:	6a 00                	push   0x0
c0010439:	6a 00                	push   0x0
c001043b:	53                   	push   ebx
c001043c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001043f:	83 c4 20             	add    esp,0x20
c0010442:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001044a:	75 0a                	jne    c0010456 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001044c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010454:	74 2c                	je     c0010482 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0010456:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001045c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010462:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010468:	83 ec 10             	sub    esp,0x10
c001046b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001046f:	89 f7                	mov    edi,esi
c0010471:	c1 e0 0a             	shl    eax,0xa
c0010474:	c1 ff 1f             	sar    edi,0x1f
c0010477:	57                   	push   edi
c0010478:	56                   	push   esi
c0010479:	52                   	push   edx
c001047a:	50                   	push   eax
c001047b:	e8 04 0b 01 00       	call   c0020f84 <__udivdi3>
c0010480:	eb 5a                	jmp    c00104dc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010482:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010489:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010490:	83 e1 7f             	and    ecx,0x7f
c0010493:	83 e0 7f             	and    eax,0x7f
c0010496:	01 c1                	add    ecx,eax
c0010498:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001049f:	83 e0 7f             	and    eax,0x7f
c00104a2:	01 c1                	add    ecx,eax
c00104a4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00104ab:	83 e0 7f             	and    eax,0x7f
c00104ae:	00 c1                	add    cl,al
c00104b0:	74 41                	je     c00104f3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00104b2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00104b8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00104be:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00104c4:	83 ec 10             	sub    esp,0x10
c00104c7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00104cb:	89 f7                	mov    edi,esi
c00104cd:	c1 e0 0a             	shl    eax,0xa
c00104d0:	c1 ff 1f             	sar    edi,0x1f
c00104d3:	57                   	push   edi
c00104d4:	56                   	push   esi
c00104d5:	52                   	push   edx
c00104d6:	50                   	push   eax
c00104d7:	e8 a8 0a 01 00       	call   c0020f84 <__udivdi3>
c00104dc:	83 c4 14             	add    esp,0x14
c00104df:	52                   	push   edx
c00104e0:	50                   	push   eax
c00104e1:	6a 00                	push   0x0
c00104e3:	6a 00                	push   0x0
c00104e5:	53                   	push   ebx
c00104e6:	e8 53 fe ff ff       	call   c001033e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00104eb:	83 c4 20             	add    esp,0x20
c00104ee:	e9 79 01 00 00       	jmp    c001066c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00104f3:	89 f0                	mov    eax,esi
c00104f5:	31 f6                	xor    esi,esi
c00104f7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00104fe:	75 02                	jne    c0010502 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010500:	89 f1                	mov    ecx,esi
c0010502:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010509:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010510:	c1 e2 08             	shl    edx,0x8
c0010513:	c1 e7 10             	shl    edi,0x10
c0010516:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001051e:	09 fa                	or     edx,edi
c0010520:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010528:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001052f:	83 c0 10             	add    eax,0x10
c0010532:	09 fa                	or     edx,edi
c0010534:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001053b:	c1 e7 18             	shl    edi,0x18
c001053e:	09 fa                	or     edx,edi
c0010540:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0010547:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001054b:	c1 e7 10             	shl    edi,0x10
c001054e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010555:	c1 e2 08             	shl    edx,0x8
c0010558:	09 fa                	or     edx,edi
c001055a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010561:	09 fa                	or     edx,edi
c0010563:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001056a:	c1 e7 18             	shl    edi,0x18
c001056d:	09 fa                	or     edx,edi
c001056f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0010573:	46                   	inc    esi
c0010574:	83 fe 04             	cmp    esi,0x4
c0010577:	0f 85 7a ff ff ff    	jne    c00104f7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001057d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010581:	83 f0 01             	xor    eax,0x1
c0010584:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010588:	75 57                	jne    c00105e1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001058a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001058e:	83 f0 01             	xor    eax,0x1
c0010591:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010595:	75 4a                	jne    c00105e1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010597:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001059b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00105a3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00105ab:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00105b1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00105b7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00105bd:	0f a4 c2 0a          	shld   edx,eax,0xa
c00105c1:	89 f7                	mov    edi,esi
c00105c3:	c1 e0 0a             	shl    eax,0xa
c00105c6:	c1 ff 1f             	sar    edi,0x1f
c00105c9:	57                   	push   edi
c00105ca:	56                   	push   esi
c00105cb:	52                   	push   edx
c00105cc:	50                   	push   eax
c00105cd:	e8 b2 09 01 00       	call   c0020f84 <__udivdi3>
c00105d2:	83 c4 10             	add    esp,0x10
c00105d5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00105d9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00105dd:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00105e1:	84 c9                	test   cl,cl
c00105e3:	74 53                	je     c0010638 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00105e5:	0f b6 c9             	movzx  ecx,cl
c00105e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00105f0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00105f4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00105f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00105fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010600:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010604:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010608:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001060c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010610:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010614:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010618:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001061c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010620:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010624:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010628:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001062c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010630:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010634:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010638:	31 ed                	xor    ebp,ebp
c001063a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001063e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0010642:	89 f8                	mov    eax,edi
c0010644:	09 f0                	or     eax,esi
c0010646:	74 1e                	je     c0010666 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010648:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001064c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010650:	89 d1                	mov    ecx,edx
c0010652:	09 c1                	or     ecx,eax
c0010654:	74 10                	je     c0010666 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010656:	83 ec 0c             	sub    esp,0xc
c0010659:	57                   	push   edi
c001065a:	56                   	push   esi
c001065b:	52                   	push   edx
c001065c:	50                   	push   eax
c001065d:	53                   	push   ebx
c001065e:	e8 db fc ff ff       	call   c001033e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010663:	83 c4 20             	add    esp,0x20
c0010666:	45                   	inc    ebp
c0010667:	83 fd 04             	cmp    ebp,0x4
c001066a:	75 ce                	jne    c001063a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001066c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010672:	5b                   	pop    ebx
c0010673:	5e                   	pop    esi
c0010674:	5f                   	pop    edi
c0010675:	5d                   	pop    ebp
c0010676:	c3                   	ret    
c0010677:	90                   	nop

c0010678 <Serial::Serial(char const*)>:
c0010678:	83 ec 0c             	sub    esp,0xc
c001067b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001067f:	83 ec 08             	sub    esp,0x8
c0010682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010686:	50                   	push   eax
c0010687:	e8 82 da ff ff       	call   c000e10e <Device::Device(char const*)>
c001068c:	83 c4 10             	add    esp,0x10
c001068f:	ba 34 39 02 c0       	mov    edx,0xc0023934
c0010694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010698:	89 10                	mov    DWORD PTR [eax],edx
c001069a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001069e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00106a8:	90                   	nop
c00106a9:	83 c4 0c             	add    esp,0xc
c00106ac:	c3                   	ret    
c00106ad:	90                   	nop
c00106ae:	66 90                	xchg   ax,ax

c00106b0 <Serial::~Serial()>:
c00106b0:	83 ec 0c             	sub    esp,0xc
c00106b3:	ba 34 39 02 c0       	mov    edx,0xc0023934
c00106b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106bc:	89 10                	mov    DWORD PTR [eax],edx
c00106be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c2:	83 ec 0c             	sub    esp,0xc
c00106c5:	50                   	push   eax
c00106c6:	e8 0d d7 ff ff       	call   c000ddd8 <Device::~Device()>
c00106cb:	83 c4 10             	add    esp,0x10
c00106ce:	90                   	nop
c00106cf:	83 c4 0c             	add    esp,0xc
c00106d2:	c3                   	ret    
c00106d3:	90                   	nop

c00106d4 <Serial::~Serial()>:
c00106d4:	83 ec 0c             	sub    esp,0xc
c00106d7:	83 ec 0c             	sub    esp,0xc
c00106da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106de:	e8 cd ff ff ff       	call   c00106b0 <Serial::~Serial()>
c00106e3:	83 c4 10             	add    esp,0x10
c00106e6:	83 ec 08             	sub    esp,0x8
c00106e9:	68 58 01 00 00       	push   0x158
c00106ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106f2:	e8 eb c2 ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c00106f7:	83 c4 10             	add    esp,0x10
c00106fa:	83 c4 0c             	add    esp,0xc
c00106fd:	c3                   	ret    
c00106fe:	66 90                	xchg   ax,ax

c0010700 <Timer::Timer(char const*)>:
c0010700:	83 ec 0c             	sub    esp,0xc
c0010703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010707:	83 ec 08             	sub    esp,0x8
c001070a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001070e:	50                   	push   eax
c001070f:	e8 fa d9 ff ff       	call   c000e10e <Device::Device(char const*)>
c0010714:	83 c4 10             	add    esp,0x10
c0010717:	ba 78 39 02 c0       	mov    edx,0xc0023978
c001071c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010720:	89 10                	mov    DWORD PTR [eax],edx
c0010722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010726:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010730:	90                   	nop
c0010731:	83 c4 0c             	add    esp,0xc
c0010734:	c3                   	ret    
c0010735:	90                   	nop
c0010736:	66 90                	xchg   ax,ax

c0010738 <Timer::~Timer()>:
c0010738:	83 ec 0c             	sub    esp,0xc
c001073b:	ba 78 39 02 c0       	mov    edx,0xc0023978
c0010740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010744:	89 10                	mov    DWORD PTR [eax],edx
c0010746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001074a:	83 ec 0c             	sub    esp,0xc
c001074d:	50                   	push   eax
c001074e:	e8 85 d6 ff ff       	call   c000ddd8 <Device::~Device()>
c0010753:	83 c4 10             	add    esp,0x10
c0010756:	90                   	nop
c0010757:	83 c4 0c             	add    esp,0xc
c001075a:	c3                   	ret    
c001075b:	90                   	nop

c001075c <Timer::~Timer()>:
c001075c:	83 ec 0c             	sub    esp,0xc
c001075f:	83 ec 0c             	sub    esp,0xc
c0010762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010766:	e8 cd ff ff ff       	call   c0010738 <Timer::~Timer()>
c001076b:	83 c4 10             	add    esp,0x10
c001076e:	83 ec 08             	sub    esp,0x8
c0010771:	68 5c 01 00 00       	push   0x15c
c0010776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001077a:	e8 63 c2 ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c001077f:	83 c4 10             	add    esp,0x10
c0010782:	83 c4 0c             	add    esp,0xc
c0010785:	c3                   	ret    

c0010786 <Timer::read()>:
c0010786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001078a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010790:	c3                   	ret    

c0010791 <timerHandler(unsigned int)>:
c0010791:	56                   	push   esi
c0010792:	53                   	push   ebx
c0010793:	51                   	push   ecx
c0010794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010798:	01 05 ac 6a 02 c0    	add    DWORD PTR ds:0xc0026aac,eax
c001079e:	80 3d 4d 64 02 c0 00 	cmp    BYTE PTR ds:0xc002644d,0x0
c00107a5:	0f 84 49 01 00 00    	je     c00108f4 <timerHandler(unsigned int)+0x163>
c00107ab:	fa                   	cli    
c00107ac:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c00107b2:	83 ec 0c             	sub    esp,0xc
c00107b5:	ff 05 44 79 02 c0    	inc    DWORD PTR ds:0xc0027944
c00107bb:	68 58 79 02 c0       	push   0xc0027958
c00107c0:	e8 8f 0d 01 00       	call   c0021554 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00107c5:	83 c4 10             	add    esp,0x10
c00107c8:	84 c0                	test   al,al
c00107ca:	0f 85 a0 00 00 00    	jne    c0010870 <timerHandler(unsigned int)+0xdf>
c00107d0:	83 ec 0c             	sub    esp,0xc
c00107d3:	68 58 79 02 c0       	push   0xc0027958
c00107d8:	e8 93 0d 01 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00107dd:	83 c4 10             	add    esp,0x10
c00107e0:	89 c6                	mov    esi,eax
c00107e2:	66 90                	xchg   ax,ax
c00107e4:	83 ec 0c             	sub    esp,0xc
c00107e7:	68 58 79 02 c0       	push   0xc0027958
c00107ec:	e8 7f 0d 01 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00107f1:	c7 04 24 58 79 02 c0 	mov    DWORD PTR [esp],0xc0027958
c00107f8:	89 c3                	mov    ebx,eax
c00107fa:	e8 79 0d 01 00       	call   c0021578 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00107ff:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010802:	83 c4 10             	add    esp,0x10
c0010805:	3b 05 ac 6a 02 c0    	cmp    eax,DWORD PTR ds:0xc0026aac
c001080b:	77 23                	ja     c0010830 <timerHandler(unsigned int)+0x9f>
c001080d:	83 ec 0c             	sub    esp,0xc
c0010810:	53                   	push   ebx
c0010811:	e8 fe 7b 00 00       	call   c0018414 <unblockTask(ThreadControlBlock*)>
c0010816:	83 c4 10             	add    esp,0x10
c0010819:	39 de                	cmp    esi,ebx
c001081b:	75 27                	jne    c0010844 <timerHandler(unsigned int)+0xb3>
c001081d:	83 ec 0c             	sub    esp,0xc
c0010820:	68 58 79 02 c0       	push   0xc0027958
c0010825:	e8 46 0d 01 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001082a:	89 c6                	mov    esi,eax
c001082c:	eb 12                	jmp    c0010840 <timerHandler(unsigned int)+0xaf>
c001082e:	66 90                	xchg   ax,ax
c0010830:	52                   	push   edx
c0010831:	52                   	push   edx
c0010832:	53                   	push   ebx
c0010833:	68 58 79 02 c0       	push   0xc0027958
c0010838:	e8 f3 0d 01 00       	call   c0021630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001083d:	8d 76 00             	lea    esi,[esi+0x0]
c0010840:	83 c4 10             	add    esp,0x10
c0010843:	90                   	nop
c0010844:	83 ec 0c             	sub    esp,0xc
c0010847:	68 58 79 02 c0       	push   0xc0027958
c001084c:	e8 03 0d 01 00       	call   c0021554 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010851:	83 c4 10             	add    esp,0x10
c0010854:	84 c0                	test   al,al
c0010856:	75 18                	jne    c0010870 <timerHandler(unsigned int)+0xdf>
c0010858:	83 ec 0c             	sub    esp,0xc
c001085b:	68 58 79 02 c0       	push   0xc0027958
c0010860:	e8 0b 0d 01 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010865:	83 c4 10             	add    esp,0x10
c0010868:	39 f0                	cmp    eax,esi
c001086a:	0f 85 74 ff ff ff    	jne    c00107e4 <timerHandler(unsigned int)+0x53>
c0010870:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010875:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010879:	74 41                	je     c00108bc <timerHandler(unsigned int)+0x12b>
c001087b:	80 3d 4c 64 02 c0 00 	cmp    BYTE PTR ds:0xc002644c,0x0
c0010882:	74 38                	je     c00108bc <timerHandler(unsigned int)+0x12b>
c0010884:	fa                   	cli    
c0010885:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c001088b:	a1 ac 6a 02 c0       	mov    eax,ds:0xc0026aac
c0010890:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010896:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010899:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001089f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c00108a2:	72 08                	jb     c00108ac <timerHandler(unsigned int)+0x11b>
c00108a4:	e8 af 76 00 00       	call   c0017f58 <schedule()>
c00108a9:	8d 76 00             	lea    esi,[esi+0x0]
c00108ac:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00108b1:	48                   	dec    eax
c00108b2:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00108b7:	75 03                	jne    c00108bc <timerHandler(unsigned int)+0x12b>
c00108b9:	fb                   	sti    
c00108ba:	66 90                	xchg   ax,ax
c00108bc:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c00108c1:	48                   	dec    eax
c00108c2:	a3 44 79 02 c0       	mov    ds:0xc0027944,eax
c00108c7:	75 1b                	jne    c00108e4 <timerHandler(unsigned int)+0x153>
c00108c9:	83 3d 40 79 02 c0 00 	cmp    DWORD PTR ds:0xc0027940,0x0
c00108d0:	74 12                	je     c00108e4 <timerHandler(unsigned int)+0x153>
c00108d2:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c00108dc:	e8 77 76 00 00       	call   c0017f58 <schedule()>
c00108e1:	8d 76 00             	lea    esi,[esi+0x0]
c00108e4:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00108e9:	48                   	dec    eax
c00108ea:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00108ef:	75 03                	jne    c00108f4 <timerHandler(unsigned int)+0x163>
c00108f1:	fb                   	sti    
c00108f2:	66 90                	xchg   ax,ax
c00108f4:	58                   	pop    eax
c00108f5:	5b                   	pop    ebx
c00108f6:	5e                   	pop    esi
c00108f7:	c3                   	ret    

c00108f8 <setupTimer(int)>:
c00108f8:	57                   	push   edi
c00108f9:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c00108fe:	56                   	push   esi
c00108ff:	53                   	push   ebx
c0010900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010904:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001090a:	83 ec 0c             	sub    esp,0xc
c001090d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010913:	e8 f2 d8 ff ff       	call   c000e20a <Device::getName()>
c0010918:	83 c4 10             	add    esp,0x10
c001091b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001091e:	0f 85 94 00 00 00    	jne    c00109b8 <setupTimer(int)+0xc0>
c0010924:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0010929:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0010930:	0f 84 82 00 00 00    	je     c00109b8 <setupTimer(int)+0xc0>
c0010936:	83 ec 0c             	sub    esp,0xc
c0010939:	68 5c 01 00 00       	push   0x15c
c001093e:	e8 80 90 ff ff       	call   c00099c3 <malloc>
c0010943:	89 04 24             	mov    DWORD PTR [esp],eax
c0010946:	89 c3                	mov    ebx,eax
c0010948:	e8 0f 02 01 00       	call   c0020b5c <PIT::PIT()>
c001094d:	59                   	pop    ecx
c001094e:	5f                   	pop    edi
c001094f:	53                   	push   ebx
c0010950:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0010956:	e8 af d5 ff ff       	call   c000df0a <Device::addChild(Device*)>
c001095b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001095d:	6a 00                	push   0x0
c001095f:	6a 00                	push   0x0
c0010961:	56                   	push   esi
c0010962:	53                   	push   ebx
c0010963:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010966:	83 c4 14             	add    esp,0x14
c0010969:	68 60 01 00 00       	push   0x160
c001096e:	e8 50 90 ff ff       	call   c00099c3 <malloc>
c0010973:	89 04 24             	mov    DWORD PTR [esp],eax
c0010976:	89 c7                	mov    edi,eax
c0010978:	e8 93 00 01 00       	call   c0020a10 <APICTimer::APICTimer()>
c001097d:	6a 00                	push   0x0
c001097f:	6a 00                	push   0x0
c0010981:	56                   	push   esi
c0010982:	57                   	push   edi
c0010983:	e8 88 ff 00 00       	call   c0020910 <APICTimer::open(int, int, void*)>
c0010988:	83 c4 20             	add    esp,0x20
c001098b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001098d:	6a 00                	push   0x0
c001098f:	6a 00                	push   0x0
c0010991:	6a 00                	push   0x0
c0010993:	53                   	push   ebx
c0010994:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010997:	58                   	pop    eax
c0010998:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001099d:	5a                   	pop    edx
c001099e:	57                   	push   edi
c001099f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00109a5:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00109ab:	e8 5a d5 ff ff       	call   c000df0a <Device::addChild(Device*)>
c00109b0:	83 c4 10             	add    esp,0x10
c00109b3:	eb 37                	jmp    c00109ec <setupTimer(int)+0xf4>
c00109b5:	8d 76 00             	lea    esi,[esi+0x0]
c00109b8:	83 ec 0c             	sub    esp,0xc
c00109bb:	68 5c 01 00 00       	push   0x15c
c00109c0:	e8 fe 8f ff ff       	call   c00099c3 <malloc>
c00109c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00109c8:	89 c3                	mov    ebx,eax
c00109ca:	e8 8d 01 01 00       	call   c0020b5c <PIT::PIT()>
c00109cf:	58                   	pop    eax
c00109d0:	5a                   	pop    edx
c00109d1:	53                   	push   ebx
c00109d2:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c00109d8:	e8 2d d5 ff ff       	call   c000df0a <Device::addChild(Device*)>
c00109dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00109df:	6a 00                	push   0x0
c00109e1:	6a 00                	push   0x0
c00109e3:	56                   	push   esi
c00109e4:	53                   	push   ebx
c00109e5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00109e8:	83 c4 20             	add    esp,0x20
c00109eb:	90                   	nop
c00109ec:	89 d8                	mov    eax,ebx
c00109ee:	5b                   	pop    ebx
c00109ef:	5e                   	pop    esi
c00109f0:	5f                   	pop    edi
c00109f1:	c3                   	ret    
c00109f2:	66 90                	xchg   ax,ax

c00109f4 <VCache::VCache(PhysicalDisk*)>:
c00109f4:	53                   	push   ebx
c00109f5:	83 ec 18             	sub    esp,0x18
c00109f8:	ba c8 3a 02 c0       	mov    edx,0xc0023ac8
c00109fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a01:	89 10                	mov    DWORD PTR [eax],edx
c0010a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a07:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010a0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a12:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0010a19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a1d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0010a24:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0010a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a2f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0010a36:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010a3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a41:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0010a48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a4c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010a50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a54:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010a5b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010a62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a66:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010a6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a6e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010a72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a76:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010a7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a7e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010a85:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010a8d:	83 ec 0c             	sub    esp,0xc
c0010a90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010a94:	e8 2a 8f ff ff       	call   c00099c3 <malloc>
c0010a99:	83 c4 10             	add    esp,0x10
c0010a9c:	89 c3                	mov    ebx,eax
c0010a9e:	83 ec 0c             	sub    esp,0xc
c0010aa1:	53                   	push   ebx
c0010aa2:	e8 81 72 00 00       	call   c0017d28 <Mutex::Mutex()>
c0010aa7:	83 c4 10             	add    esp,0x10
c0010aaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010aae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010ab1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ab5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010ab9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010abc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ac0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010ac7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010acb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010ad1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ad5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010ad8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010adc:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010ae2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ae8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010aec:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010aef:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010af2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010af6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010afa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010afe:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010b04:	05 00 01 00 00       	add    eax,0x100
c0010b09:	c1 e0 04             	shl    eax,0x4
c0010b0c:	83 ec 0c             	sub    esp,0xc
c0010b0f:	50                   	push   eax
c0010b10:	e8 ae 8e ff ff       	call   c00099c3 <malloc>
c0010b15:	83 c4 10             	add    esp,0x10
c0010b18:	89 c2                	mov    edx,eax
c0010b1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b1e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010b21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b25:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010b2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b30:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010b34:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b38:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010b3e:	c1 e0 06             	shl    eax,0x6
c0010b41:	83 ec 0c             	sub    esp,0xc
c0010b44:	50                   	push   eax
c0010b45:	e8 79 8e ff ff       	call   c00099c3 <malloc>
c0010b4a:	83 c4 10             	add    esp,0x10
c0010b4d:	89 c2                	mov    edx,eax
c0010b4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b53:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010b56:	90                   	nop
c0010b57:	83 c4 18             	add    esp,0x18
c0010b5a:	5b                   	pop    ebx
c0010b5b:	c3                   	ret    

c0010b5c <VCache::invalidateReadBuffer()>:
c0010b5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b60:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010b66:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010b6a:	c3                   	ret    
c0010b6b:	90                   	nop

c0010b6c <VCache::writeWriteBuffer()>:
c0010b6c:	53                   	push   ebx
c0010b6d:	83 ec 0c             	sub    esp,0xc
c0010b70:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010b74:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010b77:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010b7a:	68 a0 39 02 c0       	push   0xc00239a0
c0010b7f:	e8 3f bf ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0010b84:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010b87:	5a                   	pop    edx
c0010b88:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b8a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010b8d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010b90:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010b93:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010b96:	50                   	push   eax
c0010b97:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010b9a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010ba1:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010ba8:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010bac:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010bb3:	83 c4 28             	add    esp,0x28
c0010bb6:	5b                   	pop    ebx
c0010bb7:	c3                   	ret    

c0010bb8 <VCache::~VCache()>:
c0010bb8:	83 ec 0c             	sub    esp,0xc
c0010bbb:	ba c8 3a 02 c0       	mov    edx,0xc0023ac8
c0010bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bc4:	89 10                	mov    DWORD PTR [eax],edx
c0010bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bca:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010bcd:	84 c0                	test   al,al
c0010bcf:	74 0f                	je     c0010be0 <VCache::~VCache()+0x28>
c0010bd1:	83 ec 0c             	sub    esp,0xc
c0010bd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd8:	e8 8f ff ff ff       	call   c0010b6c <VCache::writeWriteBuffer()>
c0010bdd:	83 c4 10             	add    esp,0x10
c0010be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010be4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010be7:	83 ec 0c             	sub    esp,0xc
c0010bea:	50                   	push   eax
c0010beb:	e8 e3 8d ff ff       	call   c00099d3 <free>
c0010bf0:	83 c4 10             	add    esp,0x10
c0010bf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bf7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010bfa:	83 ec 0c             	sub    esp,0xc
c0010bfd:	50                   	push   eax
c0010bfe:	e8 d0 8d ff ff       	call   c00099d3 <free>
c0010c03:	83 c4 10             	add    esp,0x10
c0010c06:	90                   	nop
c0010c07:	83 c4 0c             	add    esp,0xc
c0010c0a:	c3                   	ret    
c0010c0b:	90                   	nop

c0010c0c <VCache::~VCache()>:
c0010c0c:	83 ec 0c             	sub    esp,0xc
c0010c0f:	83 ec 0c             	sub    esp,0xc
c0010c12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c16:	e8 9d ff ff ff       	call   c0010bb8 <VCache::~VCache()>
c0010c1b:	83 c4 10             	add    esp,0x10
c0010c1e:	83 ec 08             	sub    esp,0x8
c0010c21:	6a 44                	push   0x44
c0010c23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c27:	e8 b6 bd ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c0010c2c:	83 c4 10             	add    esp,0x10
c0010c2f:	83 c4 0c             	add    esp,0xc
c0010c32:	c3                   	ret    
c0010c33:	90                   	nop

c0010c34 <VCache::write(unsigned long long, int, void*)>:
c0010c34:	55                   	push   ebp
c0010c35:	31 c0                	xor    eax,eax
c0010c37:	57                   	push   edi
c0010c38:	56                   	push   esi
c0010c39:	53                   	push   ebx
c0010c3a:	83 ec 0c             	sub    esp,0xc
c0010c3d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010c41:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010c45:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
c0010c49:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0010c50:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010c54:	7d 16                	jge    c0010c6c <VCache::write(unsigned long long, int, void*)+0x38>
c0010c56:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010c59:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010c5f:	0f af c8             	imul   ecx,eax
c0010c62:	89 ca                	mov    edx,ecx
c0010c64:	01 f2                	add    edx,esi
c0010c66:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010c68:	40                   	inc    eax
c0010c69:	eb e5                	jmp    c0010c50 <VCache::write(unsigned long long, int, void*)+0x1c>
c0010c6b:	90                   	nop
c0010c6c:	83 ec 0c             	sub    esp,0xc
c0010c6f:	68 c4 39 02 c0       	push   0xc00239c4
c0010c74:	e8 4a be ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0010c79:	83 c4 10             	add    esp,0x10
c0010c7c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010c80:	74 0e                	je     c0010c90 <VCache::write(unsigned long long, int, void*)+0x5c>
c0010c82:	83 ec 0c             	sub    esp,0xc
c0010c85:	53                   	push   ebx
c0010c86:	e8 d1 fe ff ff       	call   c0010b5c <VCache::invalidateReadBuffer()>
c0010c8b:	83 c4 10             	add    esp,0x10
c0010c8e:	66 90                	xchg   ax,ax
c0010c90:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010c94:	74 66                	je     c0010cfc <VCache::write(unsigned long long, int, void*)+0xc8>
c0010c96:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c99:	99                   	cdq    
c0010c9a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010c9d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010ca0:	31 f8                	xor    eax,edi
c0010ca2:	89 d1                	mov    ecx,edx
c0010ca4:	89 ca                	mov    edx,ecx
c0010ca6:	31 ea                	xor    edx,ebp
c0010ca8:	09 d0                	or     eax,edx
c0010caa:	75 44                	jne    c0010cf0 <VCache::write(unsigned long long, int, void*)+0xbc>
c0010cac:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010cb1:	75 3d                	jne    c0010cf0 <VCache::write(unsigned long long, int, void*)+0xbc>
c0010cb3:	83 ec 0c             	sub    esp,0xc
c0010cb6:	68 eb 39 02 c0       	push   0xc00239eb
c0010cbb:	e8 03 be ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0010cc0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010cc3:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0010cc6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010ccc:	0f af f9             	imul   edi,ecx
c0010ccf:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010cd2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cd4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cd7:	83 c4 10             	add    esp,0x10
c0010cda:	40                   	inc    eax
c0010cdb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010cde:	83 f8 40             	cmp    eax,0x40
c0010ce1:	75 7d                	jne    c0010d60 <VCache::write(unsigned long long, int, void*)+0x12c>
c0010ce3:	83 ec 0c             	sub    esp,0xc
c0010ce6:	53                   	push   ebx
c0010ce7:	e8 80 fe ff ff       	call   c0010b6c <VCache::writeWriteBuffer()>
c0010cec:	eb 42                	jmp    c0010d30 <VCache::write(unsigned long long, int, void*)+0xfc>
c0010cee:	66 90                	xchg   ax,ax
c0010cf0:	83 ec 0c             	sub    esp,0xc
c0010cf3:	53                   	push   ebx
c0010cf4:	e8 73 fe ff ff       	call   c0010b6c <VCache::writeWriteBuffer()>
c0010cf9:	83 c4 10             	add    esp,0x10
c0010cfc:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0010d01:	7f 35                	jg     c0010d38 <VCache::write(unsigned long long, int, void*)+0x104>
c0010d03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010d07:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0010d0a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010d0d:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c0010d10:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0010d14:	52                   	push   edx
c0010d15:	56                   	push   esi
c0010d16:	6a 01                	push   0x1
c0010d18:	68 01 3a 02 c0       	push   0xc0023a01
c0010d1d:	e8 a1 bd ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0010d22:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d25:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010d28:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010d2e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d30:	83 c4 10             	add    esp,0x10
c0010d33:	eb 2b                	jmp    c0010d60 <VCache::write(unsigned long long, int, void*)+0x12c>
c0010d35:	8d 76 00             	lea    esi,[esi+0x0]
c0010d38:	50                   	push   eax
c0010d39:	56                   	push   esi
c0010d3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0010d3e:	68 22 3a 02 c0       	push   0xc0023a22
c0010d43:	e8 7b bd ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0010d48:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d4b:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d4d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010d54:	55                   	push   ebp
c0010d55:	57                   	push   edi
c0010d56:	50                   	push   eax
c0010d57:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010d5a:	83 c4 20             	add    esp,0x20
c0010d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0010d60:	83 ec 0c             	sub    esp,0xc
c0010d63:	68 3f 3a 02 c0       	push   0xc0023a3f
c0010d68:	e8 56 bd ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0010d6d:	83 c4 1c             	add    esp,0x1c
c0010d70:	31 c0                	xor    eax,eax
c0010d72:	5b                   	pop    ebx
c0010d73:	5e                   	pop    esi
c0010d74:	5f                   	pop    edi
c0010d75:	5d                   	pop    ebp
c0010d76:	c3                   	ret    
c0010d77:	90                   	nop

c0010d78 <VCache::read(unsigned long long, int, void*)>:
c0010d78:	55                   	push   ebp
c0010d79:	57                   	push   edi
c0010d7a:	56                   	push   esi
c0010d7b:	53                   	push   ebx
c0010d7c:	83 ec 1c             	sub    esp,0x1c
c0010d7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010d83:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010d87:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d8a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010d92:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010d96:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0010d9a:	31 c0                	xor    eax,eax
c0010d9c:	39 f0                	cmp    eax,esi
c0010d9e:	7d 18                	jge    c0010db8 <VCache::read(unsigned long long, int, void*)+0x40>
c0010da0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010da3:	8b ba 5c 01 00 00    	mov    edi,DWORD PTR [edx+0x15c]
c0010da9:	0f af f8             	imul   edi,eax
c0010dac:	89 fa                	mov    edx,edi
c0010dae:	01 ea                	add    edx,ebp
c0010db0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010db2:	40                   	inc    eax
c0010db3:	eb e7                	jmp    c0010d9c <VCache::read(unsigned long long, int, void*)+0x24>
c0010db5:	8d 76 00             	lea    esi,[esi+0x0]
c0010db8:	83 ec 0c             	sub    esp,0xc
c0010dbb:	68 5f 3a 02 c0       	push   0xc0023a5f
c0010dc0:	e8 fe bc ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0010dc5:	83 c4 10             	add    esp,0x10
c0010dc8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010dcc:	74 0e                	je     c0010ddc <VCache::read(unsigned long long, int, void*)+0x64>
c0010dce:	83 ec 0c             	sub    esp,0xc
c0010dd1:	53                   	push   ebx
c0010dd2:	e8 95 fd ff ff       	call   c0010b6c <VCache::writeWriteBuffer()>
c0010dd7:	83 c4 10             	add    esp,0x10
c0010dda:	66 90                	xchg   ax,ax
c0010ddc:	83 fe 01             	cmp    esi,0x1
c0010ddf:	75 7b                	jne    c0010e5c <VCache::read(unsigned long long, int, void*)+0xe4>
c0010de1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010de4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0010deb:	75 6f                	jne    c0010e5c <VCache::read(unsigned long long, int, void*)+0xe4>
c0010ded:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0010df0:	89 d1                	mov    ecx,edx
c0010df2:	f7 d9                	neg    ecx
c0010df4:	89 cf                	mov    edi,ecx
c0010df6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010dfa:	c1 ff 1f             	sar    edi,0x1f
c0010dfd:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0010e00:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010e04:	89 ce                	mov    esi,ecx
c0010e06:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010e0a:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0010e0e:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010e12:	89 cf                	mov    edi,ecx
c0010e14:	74 0a                	je     c0010e20 <VCache::read(unsigned long long, int, void*)+0xa8>
c0010e16:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0010e19:	75 05                	jne    c0010e20 <VCache::read(unsigned long long, int, void*)+0xa8>
c0010e1b:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0010e1e:	74 1c                	je     c0010e3c <VCache::read(unsigned long long, int, void*)+0xc4>
c0010e20:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0010e24:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0010e27:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0010e2a:	83 ec 0c             	sub    esp,0xc
c0010e2d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0010e2f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010e32:	52                   	push   edx
c0010e33:	57                   	push   edi
c0010e34:	56                   	push   esi
c0010e35:	50                   	push   eax
c0010e36:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0010e39:	83 c4 20             	add    esp,0x20
c0010e3c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010e3f:	89 ef                	mov    edi,ebp
c0010e41:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010e47:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0010e4a:	8d 70 ff             	lea    esi,[eax-0x1]
c0010e4d:	23 34 24             	and    esi,DWORD PTR [esp]
c0010e50:	0f af f1             	imul   esi,ecx
c0010e53:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0010e56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e58:	eb 32                	jmp    c0010e8c <VCache::read(unsigned long long, int, void*)+0x114>
c0010e5a:	66 90                	xchg   ax,ax
c0010e5c:	83 ec 0c             	sub    esp,0xc
c0010e5f:	53                   	push   ebx
c0010e60:	e8 f7 fc ff ff       	call   c0010b5c <VCache::invalidateReadBuffer()>
c0010e65:	83 c4 0c             	add    esp,0xc
c0010e68:	55                   	push   ebp
c0010e69:	56                   	push   esi
c0010e6a:	68 85 3a 02 c0       	push   0xc0023a85
c0010e6f:	e8 4f bc ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0010e74:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010e77:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e79:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010e7c:	56                   	push   esi
c0010e7d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e85:	50                   	push   eax
c0010e86:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0010e89:	83 c4 20             	add    esp,0x20
c0010e8c:	83 ec 0c             	sub    esp,0xc
c0010e8f:	68 a1 3a 02 c0       	push   0xc0023aa1
c0010e94:	e8 2a bc ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0010e99:	83 c4 2c             	add    esp,0x2c
c0010e9c:	31 c0                	xor    eax,eax
c0010e9e:	5b                   	pop    ebx
c0010e9f:	5e                   	pop    esi
c0010ea0:	5f                   	pop    edi
c0010ea1:	5d                   	pop    ebp
c0010ea2:	c3                   	ret    
c0010ea3:	90                   	nop

c0010ea4 <Video::putrect(int, int, int, int, unsigned int)>:
c0010ea4:	55                   	push   ebp
c0010ea5:	57                   	push   edi
c0010ea6:	56                   	push   esi
c0010ea7:	53                   	push   ebx
c0010ea8:	83 ec 1c             	sub    esp,0x1c
c0010eab:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010eaf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010eb3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0010eb7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010ebb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ebf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ec3:	01 df                	add    edi,ebx
c0010ec5:	39 fb                	cmp    ebx,edi
c0010ec7:	7d 1f                	jge    c0010ee8 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0010ec9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010ecd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0010ed1:	7d 12                	jge    c0010ee5 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0010ed3:	8b 16                	mov    edx,DWORD PTR [esi]
c0010ed5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010ed9:	53                   	push   ebx
c0010eda:	55                   	push   ebp
c0010edb:	45                   	inc    ebp
c0010edc:	56                   	push   esi
c0010edd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010ee0:	83 c4 10             	add    esp,0x10
c0010ee3:	eb e8                	jmp    c0010ecd <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0010ee5:	43                   	inc    ebx
c0010ee6:	eb dd                	jmp    c0010ec5 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0010ee8:	83 c4 1c             	add    esp,0x1c
c0010eeb:	5b                   	pop    ebx
c0010eec:	5e                   	pop    esi
c0010eed:	5f                   	pop    edi
c0010eee:	5d                   	pop    ebp
c0010eef:	c3                   	ret    

c0010ef0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0010ef0:	55                   	push   ebp
c0010ef1:	57                   	push   edi
c0010ef2:	31 ff                	xor    edi,edi
c0010ef4:	56                   	push   esi
c0010ef5:	53                   	push   ebx
c0010ef6:	83 ec 1c             	sub    esp,0x1c
c0010ef9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0010efd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010f01:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0010f08:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0010f0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f11:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010f15:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010f19:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0010f1c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010f20:	01 f9                	add    ecx,edi
c0010f22:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0010f26:	7d 2f                	jge    c0010f57 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0010f28:	31 f6                	xor    esi,esi
c0010f2a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0010f2e:	01 f2                	add    edx,esi
c0010f30:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0010f34:	7d 1a                	jge    c0010f50 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0010f36:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010f39:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0010f3c:	46                   	inc    esi
c0010f3d:	51                   	push   ecx
c0010f3e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010f42:	52                   	push   edx
c0010f43:	55                   	push   ebp
c0010f44:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010f47:	83 c4 10             	add    esp,0x10
c0010f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010f4e:	eb da                	jmp    c0010f2a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0010f50:	47                   	inc    edi
c0010f51:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0010f55:	eb c5                	jmp    c0010f1c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0010f57:	83 c4 1c             	add    esp,0x1c
c0010f5a:	5b                   	pop    ebx
c0010f5b:	5e                   	pop    esi
c0010f5c:	5f                   	pop    edi
c0010f5d:	5d                   	pop    ebp
c0010f5e:	c3                   	ret    
c0010f5f:	90                   	nop

c0010f60 <Video::blit(unsigned int*, int, int, int, int)>:
c0010f60:	55                   	push   ebp
c0010f61:	57                   	push   edi
c0010f62:	56                   	push   esi
c0010f63:	53                   	push   ebx
c0010f64:	83 ec 1c             	sub    esp,0x1c
c0010f67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f6b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f6f:	85 c0                	test   eax,eax
c0010f71:	79 02                	jns    c0010f75 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0010f73:	31 c0                	xor    eax,eax
c0010f75:	c1 e0 02             	shl    eax,0x2
c0010f78:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0010f7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f80:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010f84:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0010f88:	39 d8                	cmp    eax,ebx
c0010f8a:	7e 49                	jle    c0010fd5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010f8c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010f92:	7c 41                	jl     c0010fd5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010f94:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010f98:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010f9c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010fa0:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0010fa4:	39 f9                	cmp    ecx,edi
c0010fa6:	7e 22                	jle    c0010fca <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0010fa8:	83 c5 04             	add    ebp,0x4
c0010fab:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010fb1:	7c 14                	jl     c0010fc7 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0010fb3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0010fb5:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0010fb8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010fbc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010fc0:	56                   	push   esi
c0010fc1:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0010fc4:	83 c4 10             	add    esp,0x10
c0010fc7:	47                   	inc    edi
c0010fc8:	eb d2                	jmp    c0010f9c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0010fca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fce:	43                   	inc    ebx
c0010fcf:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0010fd3:	eb ab                	jmp    c0010f80 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0010fd5:	83 c4 1c             	add    esp,0x1c
c0010fd8:	5b                   	pop    ebx
c0010fd9:	5e                   	pop    esi
c0010fda:	5f                   	pop    edi
c0010fdb:	5d                   	pop    ebp
c0010fdc:	c3                   	ret    
c0010fdd:	90                   	nop

c0010fde <Video::clearScreen(unsigned int)>:
c0010fde:	57                   	push   edi
c0010fdf:	56                   	push   esi
c0010fe0:	53                   	push   ebx
c0010fe1:	31 db                	xor    ebx,ebx
c0010fe3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010fe7:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010fed:	7e 1f                	jle    c001100e <Video::clearScreen(unsigned int)+0x30>
c0010fef:	31 ff                	xor    edi,edi
c0010ff1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010ff7:	7e 12                	jle    c001100b <Video::clearScreen(unsigned int)+0x2d>
c0010ff9:	8b 06                	mov    eax,DWORD PTR [esi]
c0010ffb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010fff:	53                   	push   ebx
c0011000:	57                   	push   edi
c0011001:	47                   	inc    edi
c0011002:	56                   	push   esi
c0011003:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011006:	83 c4 10             	add    esp,0x10
c0011009:	eb e6                	jmp    c0010ff1 <Video::clearScreen(unsigned int)+0x13>
c001100b:	43                   	inc    ebx
c001100c:	eb d9                	jmp    c0010fe7 <Video::clearScreen(unsigned int)+0x9>
c001100e:	5b                   	pop    ebx
c001100f:	5e                   	pop    esi
c0011010:	5f                   	pop    edi
c0011011:	c3                   	ret    

c0011012 <Video::putpixel(int, int, unsigned int)>:
c0011012:	c7 44 24 04 d0 3a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023ad0
c001101a:	e9 66 33 00 00       	jmp    c0014385 <Krnl::panic(char const*)>
c001101f:	90                   	nop

c0011020 <Video::Video(char const*)>:
c0011020:	83 ec 0c             	sub    esp,0xc
c0011023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011027:	83 ec 08             	sub    esp,0x8
c001102a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001102e:	50                   	push   eax
c001102f:	e8 da d0 ff ff       	call   c000e10e <Device::Device(char const*)>
c0011034:	83 c4 10             	add    esp,0x10
c0011037:	ba 40 3b 02 c0       	mov    edx,0xc0023b40
c001103c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011040:	89 10                	mov    DWORD PTR [eax],edx
c0011042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011046:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0011050:	90                   	nop
c0011051:	83 c4 0c             	add    esp,0xc
c0011054:	c3                   	ret    
c0011055:	90                   	nop

c0011056 <Video::~Video()>:
c0011056:	83 ec 0c             	sub    esp,0xc
c0011059:	ba 40 3b 02 c0       	mov    edx,0xc0023b40
c001105e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011062:	89 10                	mov    DWORD PTR [eax],edx
c0011064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011068:	83 ec 0c             	sub    esp,0xc
c001106b:	50                   	push   eax
c001106c:	e8 67 cd ff ff       	call   c000ddd8 <Device::~Device()>
c0011071:	83 c4 10             	add    esp,0x10
c0011074:	90                   	nop
c0011075:	83 c4 0c             	add    esp,0xc
c0011078:	c3                   	ret    
c0011079:	90                   	nop

c001107a <Video::~Video()>:
c001107a:	83 ec 0c             	sub    esp,0xc
c001107d:	83 ec 0c             	sub    esp,0xc
c0011080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011084:	e8 cd ff ff ff       	call   c0011056 <Video::~Video()>
c0011089:	83 c4 10             	add    esp,0x10
c001108c:	83 ec 08             	sub    esp,0x8
c001108f:	68 64 01 00 00       	push   0x164
c0011094:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011098:	e8 45 b9 ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c001109d:	83 c4 10             	add    esp,0x10
c00110a0:	83 c4 0c             	add    esp,0xc
c00110a3:	c3                   	ret    

c00110a4 <Video::isMonochrome()>:
c00110a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110a8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00110ae:	c3                   	ret    
c00110af:	90                   	nop

c00110b0 <Video::getWidth()>:
c00110b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110b4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00110ba:	c3                   	ret    
c00110bb:	90                   	nop

c00110bc <Video::getHeight()>:
c00110bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110c0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00110c6:	c3                   	ret    
c00110c7:	90                   	nop

c00110c8 <Video::drawCursor(int, int, unsigned char*, int)>:
c00110c8:	55                   	push   ebp
c00110c9:	57                   	push   edi
c00110ca:	56                   	push   esi
c00110cb:	53                   	push   ebx
c00110cc:	83 ec 2c             	sub    esp,0x2c
c00110cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00110d3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00110d7:	83 f8 01             	cmp    eax,0x1
c00110da:	19 c9                	sbb    ecx,ecx
c00110dc:	31 db                	xor    ebx,ebx
c00110de:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00110e2:	89 cd                	mov    ebp,ecx
c00110e4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00110ec:	f7 d5                	not    ebp
c00110ee:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00110f4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00110f8:	01 d8                	add    eax,ebx
c00110fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110fe:	56                   	push   esi
c00110ff:	e8 b8 ff ff ff       	call   c00110bc <Video::getHeight()>
c0011104:	59                   	pop    ecx
c0011105:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0011109:	7e 70                	jle    c001117b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001110b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001110f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011113:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0011116:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001111a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001111e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0011125:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011129:	89 f8                	mov    eax,edi
c001112b:	83 c0 20             	add    eax,0x20
c001112e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011132:	56                   	push   esi
c0011133:	e8 78 ff ff ff       	call   c00110b0 <Video::getWidth()>
c0011138:	5a                   	pop    edx
c0011139:	39 c7                	cmp    edi,eax
c001113b:	7d 34                	jge    c0011171 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001113d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0011142:	74 05                	je     c0011149 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0011144:	8b 06                	mov    eax,DWORD PTR [esi]
c0011146:	55                   	push   ebp
c0011147:	eb 0d                	jmp    c0011156 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0011149:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001114e:	74 12                	je     c0011162 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0011150:	8b 06                	mov    eax,DWORD PTR [esi]
c0011152:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011156:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001115a:	57                   	push   edi
c001115b:	56                   	push   esi
c001115c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001115f:	83 c4 10             	add    esp,0x10
c0011162:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0011166:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001116a:	47                   	inc    edi
c001116b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001116f:	75 c1                	jne    c0011132 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0011171:	43                   	inc    ebx
c0011172:	83 fb 20             	cmp    ebx,0x20
c0011175:	0f 85 79 ff ff ff    	jne    c00110f4 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001117b:	83 c4 2c             	add    esp,0x2c
c001117e:	5b                   	pop    ebx
c001117f:	5e                   	pop    esi
c0011180:	5f                   	pop    edi
c0011181:	5d                   	pop    ebp
c0011182:	c3                   	ret    
c0011183:	90                   	nop

c0011184 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0011184:	55                   	push   ebp
c0011185:	57                   	push   edi
c0011186:	56                   	push   esi
c0011187:	53                   	push   ebx
c0011188:	83 ec 28             	sub    esp,0x28
c001118b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001118f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0011193:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0011197:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001119b:	c1 e6 08             	shl    esi,0x8
c001119e:	01 c6                	add    esi,eax
c00111a0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00111a4:	c1 e0 08             	shl    eax,0x8
c00111a7:	01 d0                	add    eax,edx
c00111a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00111ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111b1:	0f af c6             	imul   eax,esi
c00111b4:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00111bb:	50                   	push   eax
c00111bc:	e8 02 88 ff ff       	call   c00099c3 <malloc>
c00111c1:	83 c4 10             	add    esp,0x10
c00111c4:	89 c7                	mov    edi,eax
c00111c6:	85 c0                	test   eax,eax
c00111c8:	75 10                	jne    c00111da <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00111ca:	83 ec 0c             	sub    esp,0xc
c00111cd:	68 f1 3a 02 c0       	push   0xc0023af1
c00111d2:	e8 ae 31 00 00       	call   c0014385 <Krnl::panic(char const*)>
c00111d7:	83 c4 10             	add    esp,0x10
c00111da:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00111dd:	ba 12 00 00 00       	mov    edx,0x12
c00111e2:	84 c0                	test   al,al
c00111e4:	74 11                	je     c00111f7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00111e6:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00111ea:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00111ee:	c1 fa 03             	sar    edx,0x3
c00111f1:	0f af d1             	imul   edx,ecx
c00111f4:	83 c2 12             	add    edx,0x12
c00111f7:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00111fb:	74 04                	je     c0011201 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00111fd:	85 f6                	test   esi,esi
c00111ff:	75 12                	jne    c0011213 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0011201:	83 ec 0c             	sub    esp,0xc
c0011204:	68 01 3b 02 c0       	push   0xc0023b01
c0011209:	e8 b5 b8 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001120e:	e9 b8 00 00 00       	jmp    c00112cb <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011213:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0011217:	80 f9 02             	cmp    cl,0x2
c001121a:	0f 85 96 00 00 00    	jne    c00112b6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0011220:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0011225:	75 0e                	jne    c0011235 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011227:	84 c0                	test   al,al
c0011229:	75 0a                	jne    c0011235 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001122b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001122e:	83 e8 18             	sub    eax,0x18
c0011231:	a8 f7                	test   al,0xf7
c0011233:	74 0a                	je     c001123f <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0011235:	83 ec 0c             	sub    esp,0xc
c0011238:	68 16 3b 02 c0       	push   0xc0023b16
c001123d:	eb 7f                	jmp    c00112be <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c001123f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011247:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001124f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011253:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001125b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001125f:	75 0c                	jne    c001126d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011261:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0011266:	c1 e0 18             	shl    eax,0x18
c0011269:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001126d:	45                   	inc    ebp
c001126e:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011273:	c1 e1 10             	shl    ecx,0x10
c0011276:	89 c8                	mov    eax,ecx
c0011278:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c001127d:	c1 e1 08             	shl    ecx,0x8
c0011280:	09 c1                	or     ecx,eax
c0011282:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0011286:	09 c1                	or     ecx,eax
c0011288:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c001128c:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0011290:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011294:	c1 f8 03             	sar    eax,0x3
c0011297:	01 c2                	add    edx,eax
c0011299:	89 e8                	mov    eax,ebp
c001129b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001129f:	39 c6                	cmp    esi,eax
c00112a1:	7f b0                	jg     c0011253 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00112a3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00112a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00112ab:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00112ae:	7e 22                	jle    c00112d2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00112b0:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00112b4:	eb 99                	jmp    c001124f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00112b6:	50                   	push   eax
c00112b7:	50                   	push   eax
c00112b8:	51                   	push   ecx
c00112b9:	68 24 3b 02 c0       	push   0xc0023b24
c00112be:	e8 00 b8 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c00112c3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112c6:	e8 08 87 ff ff       	call   c00099d3 <free>
c00112cb:	83 c4 10             	add    esp,0x10
c00112ce:	31 ff                	xor    edi,edi
c00112d0:	eb 0f                	jmp    c00112e1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00112d2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00112d6:	89 30                	mov    DWORD PTR [eax],esi
c00112d8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00112dc:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00112df:	89 30                	mov    DWORD PTR [eax],esi
c00112e1:	83 c4 1c             	add    esp,0x1c
c00112e4:	89 f8                	mov    eax,edi
c00112e6:	5b                   	pop    ebx
c00112e7:	5e                   	pop    esi
c00112e8:	5f                   	pop    edi
c00112e9:	5d                   	pop    ebp
c00112ea:	c3                   	ret    
c00112eb:	90                   	nop

c00112ec <Video::putTGA(int, int, unsigned char*, int)>:
c00112ec:	55                   	push   ebp
c00112ed:	57                   	push   edi
c00112ee:	56                   	push   esi
c00112ef:	53                   	push   ebx
c00112f0:	83 ec 28             	sub    esp,0x28
c00112f3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00112f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00112fb:	50                   	push   eax
c00112fc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011300:	50                   	push   eax
c0011301:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011305:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011309:	56                   	push   esi
c001130a:	e8 75 fe ff ff       	call   c0011184 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001130f:	83 c4 20             	add    esp,0x20
c0011312:	85 c0                	test   eax,eax
c0011314:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011318:	74 35                	je     c001134f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001131a:	89 c7                	mov    edi,eax
c001131c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011320:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0011324:	39 d8                	cmp    eax,ebx
c0011326:	7e 27                	jle    c001134f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011328:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001132c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011330:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0011334:	39 e8                	cmp    eax,ebp
c0011336:	7e 14                	jle    c001134c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0011338:	8b 06                	mov    eax,DWORD PTR [esi]
c001133a:	83 c7 04             	add    edi,0x4
c001133d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011340:	53                   	push   ebx
c0011341:	55                   	push   ebp
c0011342:	45                   	inc    ebp
c0011343:	56                   	push   esi
c0011344:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011347:	83 c4 10             	add    esp,0x10
c001134a:	eb e0                	jmp    c001132c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001134c:	43                   	inc    ebx
c001134d:	eb cd                	jmp    c001131c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001134f:	83 c4 1c             	add    esp,0x1c
c0011352:	5b                   	pop    ebx
c0011353:	5e                   	pop    esi
c0011354:	5f                   	pop    edi
c0011355:	5d                   	pop    ebp
c0011356:	c3                   	ret    
c0011357:	90                   	nop

c0011358 <ACPI::close(int, int, void*)>:
c0011358:	83 ec 1c             	sub    esp,0x1c
c001135b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011363:	74 0b                	je     c0011370 <ACPI::close(int, int, void*)+0x18>
c0011365:	b8 00 00 00 00       	mov    eax,0x0
c001136a:	e9 99 00 00 00       	jmp    c0011408 <ACPI::close(int, int, void*)+0xb0>
c001136f:	90                   	nop
c0011370:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011375:	75 29                	jne    c00113a0 <ACPI::close(int, int, void*)+0x48>
c0011377:	a1 c8 6a 02 c0       	mov    eax,ds:0xc0026ac8
c001137c:	85 c0                	test   eax,eax
c001137e:	74 08                	je     c0011388 <ACPI::close(int, int, void*)+0x30>
c0011380:	a1 c8 6a 02 c0       	mov    eax,ds:0xc0026ac8
c0011385:	ff d0                	call   eax
c0011387:	90                   	nop
c0011388:	83 ec 0c             	sub    esp,0xc
c001138b:	68 80 3b 02 c0       	push   0xc0023b80
c0011390:	e8 f0 2f 00 00       	call   c0014385 <Krnl::panic(char const*)>
c0011395:	83 c4 10             	add    esp,0x10
c0011398:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001139d:	eb 69                	jmp    c0011408 <ACPI::close(int, int, void*)+0xb0>
c001139f:	90                   	nop
c00113a0:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00113a5:	75 59                	jne    c0011400 <ACPI::close(int, int, void*)+0xa8>
c00113a7:	a1 c4 6a 02 c0       	mov    eax,ds:0xc0026ac4
c00113ac:	85 c0                	test   eax,eax
c00113ae:	74 08                	je     c00113b8 <ACPI::close(int, int, void*)+0x60>
c00113b0:	a1 c4 6a 02 c0       	mov    eax,ds:0xc0026ac4
c00113b5:	ff d0                	call   eax
c00113b7:	90                   	nop
c00113b8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00113bd:	8d 76 00             	lea    esi,[esi+0x0]
c00113c0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00113c5:	83 e0 02             	and    eax,0x2
c00113c8:	74 1e                	je     c00113e8 <ACPI::close(int, int, void*)+0x90>
c00113ca:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00113d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113d5:	89 c2                	mov    edx,eax
c00113d7:	ec                   	in     al,dx
c00113d8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00113dc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00113e0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00113e4:	eb da                	jmp    c00113c0 <ACPI::close(int, int, void*)+0x68>
c00113e6:	66 90                	xchg   ax,ax
c00113e8:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00113ef:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00113f4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00113f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00113fc:	ee                   	out    dx,al
c00113fd:	8d 76 00             	lea    esi,[esi+0x0]
c0011400:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011405:	8d 76 00             	lea    esi,[esi+0x0]
c0011408:	83 c4 1c             	add    esp,0x1c
c001140b:	c3                   	ret    

c001140c <findRSDP()>:
c001140c:	83 ec 1c             	sub    esp,0x1c
c001140f:	83 ec 0c             	sub    esp,0xc
c0011412:	68 5b 3c 02 c0       	push   0xc0023c5b
c0011417:	e8 01 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001141c:	83 c4 10             	add    esp,0x10
c001141f:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0011424:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001142a:	83 e0 04             	and    eax,0x4
c001142d:	84 c0                	test   al,al
c001142f:	75 0b                	jne    c001143c <findRSDP()+0x30>
c0011431:	b8 00 00 00 00       	mov    eax,0x0
c0011436:	e9 a1 00 00 00       	jmp    c00114dc <findRSDP()+0xd0>
c001143b:	90                   	nop
c001143c:	a1 94 64 02 c0       	mov    eax,ds:0xc0026494
c0011441:	3d ff 07 00 00       	cmp    eax,0x7ff
c0011446:	7f 1c                	jg     c0011464 <findRSDP()+0x58>
c0011448:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001144d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011453:	83 e2 fb             	and    edx,0xfffffffb
c0011456:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001145c:	b8 00 00 00 00       	mov    eax,0x0
c0011461:	eb 79                	jmp    c00114dc <findRSDP()+0xd0>
c0011463:	90                   	nop
c0011464:	83 ec 0c             	sub    esp,0xc
c0011467:	68 6b 3c 02 c0       	push   0xc0023c6b
c001146c:	e8 ac 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011471:	83 c4 10             	add    esp,0x10
c0011474:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001147c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011484:	77 3e                	ja     c00114c4 <findRSDP()+0xb8>
c0011486:	83 ec 04             	sub    esp,0x4
c0011489:	6a 08                	push   0x8
c001148b:	68 84 3c 02 c0       	push   0xc0023c84
c0011490:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011494:	e8 e7 f0 fe ff       	call   c0000580 <memcmp>
c0011499:	83 c4 10             	add    esp,0x10
c001149c:	85 c0                	test   eax,eax
c001149e:	0f 94 c0             	sete   al
c00114a1:	84 c0                	test   al,al
c00114a3:	74 17                	je     c00114bc <findRSDP()+0xb0>
c00114a5:	83 ec 0c             	sub    esp,0xc
c00114a8:	68 8d 3c 02 c0       	push   0xc0023c8d
c00114ad:	e8 6b 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00114b2:	83 c4 10             	add    esp,0x10
c00114b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114b9:	eb 21                	jmp    c00114dc <findRSDP()+0xd0>
c00114bb:	90                   	nop
c00114bc:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00114c1:	eb b9                	jmp    c001147c <findRSDP()+0x70>
c00114c3:	90                   	nop
c00114c4:	83 ec 0c             	sub    esp,0xc
c00114c7:	68 9b 3c 02 c0       	push   0xc0023c9b
c00114cc:	e8 4c 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00114d1:	83 c4 10             	add    esp,0x10
c00114d4:	b8 00 00 00 00       	mov    eax,0x0
c00114d9:	8d 76 00             	lea    esi,[esi+0x0]
c00114dc:	83 c4 1c             	add    esp,0x1c
c00114df:	c3                   	ret    

c00114e0 <loadACPITables(unsigned char*)>:
c00114e0:	57                   	push   edi
c00114e1:	56                   	push   esi
c00114e2:	53                   	push   ebx
c00114e3:	83 ec 60             	sub    esp,0x60
c00114e6:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c00114eb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00114f1:	83 e0 04             	and    eax,0x4
c00114f4:	84 c0                	test   al,al
c00114f6:	0f 84 3c 02 00 00    	je     c0011738 <loadACPITables(unsigned char*)+0x258>
c00114fc:	a0 e0 6c 02 c0       	mov    al,ds:0xc0026ce0
c0011501:	84 c0                	test   al,al
c0011503:	74 77                	je     c001157c <loadACPITables(unsigned char*)+0x9c>
c0011505:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011509:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001150d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011511:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011514:	83 e8 24             	sub    eax,0x24
c0011517:	c1 e8 03             	shr    eax,0x3
c001151a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001151e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011526:	66 90                	xchg   ax,ax
c0011528:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001152c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011530:	0f 8d b6 00 00 00    	jge    c00115ec <loadACPITables(unsigned char*)+0x10c>
c0011536:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001153a:	83 c0 24             	add    eax,0x24
c001153d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011541:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011545:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011549:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001154d:	c1 e0 03             	shl    eax,0x3
c0011550:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011554:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011558:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001155b:	8b 00                	mov    eax,DWORD PTR [eax]
c001155d:	89 c1                	mov    ecx,eax
c001155f:	a1 cc 6a 02 c0       	mov    eax,ds:0xc0026acc
c0011564:	8d 50 01             	lea    edx,[eax+0x1]
c0011567:	89 15 cc 6a 02 c0    	mov    DWORD PTR ds:0xc0026acc,edx
c001156d:	89 ca                	mov    edx,ecx
c001156f:	89 14 c5 e4 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd951c],edx
c0011576:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001157a:	eb ac                	jmp    c0011528 <loadACPITables(unsigned char*)+0x48>
c001157c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011580:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011584:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011588:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001158b:	83 e8 24             	sub    eax,0x24
c001158e:	c1 e8 02             	shr    eax,0x2
c0011591:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011595:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001159d:	8d 76 00             	lea    esi,[esi+0x0]
c00115a0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00115a4:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00115a8:	7d 42                	jge    c00115ec <loadACPITables(unsigned char*)+0x10c>
c00115aa:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00115ae:	83 c0 24             	add    eax,0x24
c00115b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00115b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00115b9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00115bd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00115c1:	c1 e0 02             	shl    eax,0x2
c00115c4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00115c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00115cc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00115ce:	a1 cc 6a 02 c0       	mov    eax,ds:0xc0026acc
c00115d3:	8d 50 01             	lea    edx,[eax+0x1]
c00115d6:	89 15 cc 6a 02 c0    	mov    DWORD PTR ds:0xc0026acc,edx
c00115dc:	89 ca                	mov    edx,ecx
c00115de:	89 14 c5 e4 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd951c],edx
c00115e5:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00115e9:	eb b5                	jmp    c00115a0 <loadACPITables(unsigned char*)+0xc0>
c00115eb:	90                   	nop
c00115ec:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00115f4:	a1 cc 6a 02 c0       	mov    eax,ds:0xc0026acc
c00115f9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00115fd:	0f 8d 39 01 00 00    	jge    c001173c <loadACPITables(unsigned char*)+0x25c>
c0011603:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011607:	8b 04 c5 e4 6a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd951c]
c001160e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011612:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011616:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001161a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001161e:	25 ff 0f 00 00       	and    eax,0xfff
c0011623:	89 c6                	mov    esi,eax
c0011625:	8b 1d b0 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265b0
c001162b:	83 ec 0c             	sub    esp,0xc
c001162e:	6a 01                	push   0x1
c0011630:	e8 bc a0 ff ff       	call   c000b6f1 <Virt::allocateKernelVirtualPages(int)>
c0011635:	83 c4 10             	add    esp,0x10
c0011638:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001163c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011642:	83 ec 0c             	sub    esp,0xc
c0011645:	6a 01                	push   0x1
c0011647:	6a 01                	push   0x1
c0011649:	50                   	push   eax
c001164a:	52                   	push   edx
c001164b:	53                   	push   ebx
c001164c:	e8 3d aa ff ff       	call   c000c08e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011651:	83 c4 20             	add    esp,0x20
c0011654:	09 f0                	or     eax,esi
c0011656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001165a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001165e:	c1 e0 03             	shl    eax,0x3
c0011661:	05 e0 6a 02 c0       	add    eax,0xc0026ae0
c0011666:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001166a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001166e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011672:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001167a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001167e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011682:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011686:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001168a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001168e:	89 c6                	mov    esi,eax
c0011690:	89 d7                	mov    edi,edx
c0011692:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011694:	89 c8                	mov    eax,ecx
c0011696:	89 fa                	mov    edx,edi
c0011698:	89 f3                	mov    ebx,esi
c001169a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001169e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00116a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116ad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00116b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00116b5:	05 00 10 00 00       	add    eax,0x1000
c00116ba:	c1 e8 0c             	shr    eax,0xc
c00116bd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00116c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00116c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116cd:	25 ff 0f 00 00       	and    eax,0xfff
c00116d2:	89 c6                	mov    esi,eax
c00116d4:	8b 1d b0 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265b0
c00116da:	83 ec 0c             	sub    esp,0xc
c00116dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00116e1:	e8 0b a0 ff ff       	call   c000b6f1 <Virt::allocateKernelVirtualPages(int)>
c00116e6:	83 c4 10             	add    esp,0x10
c00116e9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00116ed:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00116f3:	83 ec 0c             	sub    esp,0xc
c00116f6:	6a 01                	push   0x1
c00116f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00116fc:	50                   	push   eax
c00116fd:	52                   	push   edx
c00116fe:	53                   	push   ebx
c00116ff:	e8 8a a9 ff ff       	call   c000c08e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011704:	83 c4 20             	add    esp,0x20
c0011707:	09 f0                	or     eax,esi
c0011709:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001170d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011711:	83 ec 0c             	sub    esp,0xc
c0011714:	50                   	push   eax
c0011715:	e8 07 a3 ff ff       	call   c000ba21 <Virt::freeKernelVirtualPages(unsigned long)>
c001171a:	83 c4 10             	add    esp,0x10
c001171d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011721:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011725:	89 14 c5 e4 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd951c],edx
c001172c:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011730:	e9 bf fe ff ff       	jmp    c00115f4 <loadACPITables(unsigned char*)+0x114>
c0011735:	8d 76 00             	lea    esi,[esi+0x0]
c0011738:	90                   	nop
c0011739:	8d 76 00             	lea    esi,[esi+0x0]
c001173c:	83 c4 60             	add    esp,0x60
c001173f:	5b                   	pop    ebx
c0011740:	5e                   	pop    esi
c0011741:	5f                   	pop    edi
c0011742:	c3                   	ret    
c0011743:	90                   	nop

c0011744 <findRSDT(unsigned char*)>:
c0011744:	57                   	push   edi
c0011745:	56                   	push   esi
c0011746:	53                   	push   ebx
c0011747:	83 ec 50             	sub    esp,0x50
c001174a:	83 ec 0c             	sub    esp,0xc
c001174d:	68 af 3c 02 c0       	push   0xc0023caf
c0011752:	e8 c6 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011757:	83 c4 10             	add    esp,0x10
c001175a:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001175f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011765:	83 e0 04             	and    eax,0x4
c0011768:	84 c0                	test   al,al
c001176a:	75 0c                	jne    c0011778 <findRSDT(unsigned char*)+0x34>
c001176c:	b8 00 00 00 00       	mov    eax,0x0
c0011771:	e9 86 01 00 00       	jmp    c00118fc <findRSDT(unsigned char*)+0x1b8>
c0011776:	66 90                	xchg   ax,ax
c0011778:	83 ec 0c             	sub    esp,0xc
c001177b:	68 c1 3c 02 c0       	push   0xc0023cc1
c0011780:	e8 98 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011785:	83 c4 10             	add    esp,0x10
c0011788:	89 e0                	mov    eax,esp
c001178a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001178e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011792:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011796:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001179e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00117a2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00117a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00117aa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00117ae:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00117b2:	89 c6                	mov    esi,eax
c00117b4:	89 d7                	mov    edi,edx
c00117b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00117b8:	89 c8                	mov    eax,ecx
c00117ba:	89 fa                	mov    edx,edi
c00117bc:	89 f3                	mov    ebx,esi
c00117be:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00117c2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00117c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00117ca:	83 ec 0c             	sub    esp,0xc
c00117cd:	68 d3 3c 02 c0       	push   0xc0023cd3
c00117d2:	e8 46 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00117d7:	83 c4 10             	add    esp,0x10
c00117da:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00117de:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00117e2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00117ea:	83 ec 0c             	sub    esp,0xc
c00117ed:	68 e5 3c 02 c0       	push   0xc0023ce5
c00117f2:	e8 26 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00117f7:	83 c4 10             	add    esp,0x10
c00117fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011802:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001180a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001180e:	83 ec 04             	sub    esp,0x4
c0011811:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011815:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011819:	68 a4 3b 02 c0       	push   0xc0023ba4
c001181e:	e8 a0 b2 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0011823:	83 c4 10             	add    esp,0x10
c0011826:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001182a:	25 ff 0f 00 00       	and    eax,0xfff
c001182f:	89 c6                	mov    esi,eax
c0011831:	8b 1d b0 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265b0
c0011837:	83 ec 0c             	sub    esp,0xc
c001183a:	6a 02                	push   0x2
c001183c:	e8 b0 9e ff ff       	call   c000b6f1 <Virt::allocateKernelVirtualPages(int)>
c0011841:	83 c4 10             	add    esp,0x10
c0011844:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011848:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001184e:	83 ec 0c             	sub    esp,0xc
c0011851:	6a 01                	push   0x1
c0011853:	6a 02                	push   0x2
c0011855:	50                   	push   eax
c0011856:	52                   	push   edx
c0011857:	53                   	push   ebx
c0011858:	e8 31 a8 ff ff       	call   c000c08e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001185d:	83 c4 20             	add    esp,0x20
c0011860:	09 f0                	or     eax,esi
c0011862:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011866:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001186a:	25 ff 0f 00 00       	and    eax,0xfff
c001186f:	89 c6                	mov    esi,eax
c0011871:	8b 1d b0 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265b0
c0011877:	83 ec 0c             	sub    esp,0xc
c001187a:	6a 02                	push   0x2
c001187c:	e8 70 9e ff ff       	call   c000b6f1 <Virt::allocateKernelVirtualPages(int)>
c0011881:	83 c4 10             	add    esp,0x10
c0011884:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011888:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001188e:	83 ec 0c             	sub    esp,0xc
c0011891:	6a 01                	push   0x1
c0011893:	6a 02                	push   0x2
c0011895:	50                   	push   eax
c0011896:	52                   	push   edx
c0011897:	53                   	push   ebx
c0011898:	e8 f1 a7 ff ff       	call   c000c08e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001189d:	83 c4 20             	add    esp,0x20
c00118a0:	09 f0                	or     eax,esi
c00118a2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00118a6:	83 ec 04             	sub    esp,0x4
c00118a9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00118ad:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00118b1:	68 c4 3b 02 c0       	push   0xc0023bc4
c00118b6:	e8 08 b2 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c00118bb:	83 c4 10             	add    esp,0x10
c00118be:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00118c3:	75 13                	jne    c00118d8 <findRSDT(unsigned char*)+0x194>
c00118c5:	c6 05 e0 6c 02 c0 00 	mov    BYTE PTR ds:0xc0026ce0,0x0
c00118cc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00118d0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00118d4:	eb 22                	jmp    c00118f8 <findRSDT(unsigned char*)+0x1b4>
c00118d6:	66 90                	xchg   ax,ax
c00118d8:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00118dd:	75 11                	jne    c00118f0 <findRSDT(unsigned char*)+0x1ac>
c00118df:	c6 05 e0 6c 02 c0 01 	mov    BYTE PTR ds:0xc0026ce0,0x1
c00118e6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00118ea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00118ee:	eb 08                	jmp    c00118f8 <findRSDT(unsigned char*)+0x1b4>
c00118f0:	b8 00 00 00 00       	mov    eax,0x0
c00118f5:	eb 05                	jmp    c00118fc <findRSDT(unsigned char*)+0x1b8>
c00118f7:	90                   	nop
c00118f8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00118fc:	83 c4 50             	add    esp,0x50
c00118ff:	5b                   	pop    ebx
c0011900:	5e                   	pop    esi
c0011901:	5f                   	pop    edi
c0011902:	c3                   	ret    
c0011903:	90                   	nop

c0011904 <findDataTable(unsigned char*, char*)>:
c0011904:	83 ec 1c             	sub    esp,0x1c
c0011907:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001190c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011912:	83 e0 04             	and    eax,0x4
c0011915:	84 c0                	test   al,al
c0011917:	75 07                	jne    c0011920 <findDataTable(unsigned char*, char*)+0x1c>
c0011919:	b8 00 00 00 00       	mov    eax,0x0
c001191e:	eb 58                	jmp    c0011978 <findDataTable(unsigned char*, char*)+0x74>
c0011920:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011928:	a1 cc 6a 02 c0       	mov    eax,ds:0xc0026acc
c001192d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011931:	7d 3d                	jge    c0011970 <findDataTable(unsigned char*, char*)+0x6c>
c0011933:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011937:	c1 e0 03             	shl    eax,0x3
c001193a:	05 e0 6a 02 c0       	add    eax,0xc0026ae0
c001193f:	83 ec 04             	sub    esp,0x4
c0011942:	6a 04                	push   0x4
c0011944:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011948:	50                   	push   eax
c0011949:	e8 32 ec fe ff       	call   c0000580 <memcmp>
c001194e:	83 c4 10             	add    esp,0x10
c0011951:	85 c0                	test   eax,eax
c0011953:	0f 94 c0             	sete   al
c0011956:	84 c0                	test   al,al
c0011958:	74 0e                	je     c0011968 <findDataTable(unsigned char*, char*)+0x64>
c001195a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001195e:	8b 04 c5 e4 6a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd951c]
c0011965:	eb 11                	jmp    c0011978 <findDataTable(unsigned char*, char*)+0x74>
c0011967:	90                   	nop
c0011968:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001196c:	eb ba                	jmp    c0011928 <findDataTable(unsigned char*, char*)+0x24>
c001196e:	66 90                	xchg   ax,ax
c0011970:	b8 00 00 00 00       	mov    eax,0x0
c0011975:	8d 76 00             	lea    esi,[esi+0x0]
c0011978:	83 c4 1c             	add    esp,0x1c
c001197b:	c3                   	ret    

c001197c <scanMADT()>:
c001197c:	53                   	push   ebx
c001197d:	83 ec 38             	sub    esp,0x38
c0011980:	83 ec 0c             	sub    esp,0xc
c0011983:	68 f7 3c 02 c0       	push   0xc0023cf7
c0011988:	e8 90 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001198d:	83 c4 10             	add    esp,0x10
c0011990:	a1 60 64 02 c0       	mov    eax,ds:0xc0026460
c0011995:	25 00 04 00 00       	and    eax,0x400
c001199a:	74 14                	je     c00119b0 <scanMADT()+0x34>
c001199c:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c00119a1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00119a7:	83 e2 fb             	and    edx,0xfffffffb
c00119aa:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00119b0:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c00119b5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00119bb:	83 e0 04             	and    eax,0x4
c00119be:	84 c0                	test   al,al
c00119c0:	0f 84 82 04 00 00    	je     c0011e48 <scanMADT()+0x4cc>
c00119c6:	83 ec 0c             	sub    esp,0xc
c00119c9:	68 04 3d 02 c0       	push   0xc0023d04
c00119ce:	e8 4a 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00119d3:	83 c4 10             	add    esp,0x10
c00119d6:	e8 31 fa ff ff       	call   c001140c <findRSDP()>
c00119db:	a3 ec 6c 02 c0       	mov    ds:0xc0026cec,eax
c00119e0:	a1 ec 6c 02 c0       	mov    eax,ds:0xc0026cec
c00119e5:	85 c0                	test   eax,eax
c00119e7:	75 1b                	jne    c0011a04 <scanMADT()+0x88>
c00119e9:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c00119ee:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00119f4:	83 e2 fb             	and    edx,0xfffffffb
c00119f7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00119fd:	e9 4e 04 00 00       	jmp    c0011e50 <scanMADT()+0x4d4>
c0011a02:	66 90                	xchg   ax,ax
c0011a04:	83 ec 0c             	sub    esp,0xc
c0011a07:	68 16 3d 02 c0       	push   0xc0023d16
c0011a0c:	e8 0c 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011a11:	83 c4 10             	add    esp,0x10
c0011a14:	a1 ec 6c 02 c0       	mov    eax,ds:0xc0026cec
c0011a19:	83 ec 0c             	sub    esp,0xc
c0011a1c:	50                   	push   eax
c0011a1d:	e8 22 fd ff ff       	call   c0011744 <findRSDT(unsigned char*)>
c0011a22:	83 c4 10             	add    esp,0x10
c0011a25:	a3 e8 6c 02 c0       	mov    ds:0xc0026ce8,eax
c0011a2a:	a1 e8 6c 02 c0       	mov    eax,ds:0xc0026ce8
c0011a2f:	85 c0                	test   eax,eax
c0011a31:	75 19                	jne    c0011a4c <scanMADT()+0xd0>
c0011a33:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0011a38:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011a3e:	83 e2 fb             	and    edx,0xfffffffb
c0011a41:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011a47:	e9 04 04 00 00       	jmp    c0011e50 <scanMADT()+0x4d4>
c0011a4c:	83 ec 0c             	sub    esp,0xc
c0011a4f:	68 26 3d 02 c0       	push   0xc0023d26
c0011a54:	e8 c4 7f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011a59:	83 c4 10             	add    esp,0x10
c0011a5c:	a1 e8 6c 02 c0       	mov    eax,ds:0xc0026ce8
c0011a61:	83 ec 0c             	sub    esp,0xc
c0011a64:	50                   	push   eax
c0011a65:	e8 76 fa ff ff       	call   c00114e0 <loadACPITables(unsigned char*)>
c0011a6a:	83 c4 10             	add    esp,0x10
c0011a6d:	a1 e8 6c 02 c0       	mov    eax,ds:0xc0026ce8
c0011a72:	83 ec 08             	sub    esp,0x8
c0011a75:	68 3e 3d 02 c0       	push   0xc0023d3e
c0011a7a:	50                   	push   eax
c0011a7b:	e8 84 fe ff ff       	call   c0011904 <findDataTable(unsigned char*, char*)>
c0011a80:	83 c4 10             	add    esp,0x10
c0011a83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011a87:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011a8c:	75 1a                	jne    c0011aa8 <scanMADT()+0x12c>
c0011a8e:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0011a93:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011a99:	83 e2 fe             	and    edx,0xfffffffe
c0011a9c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011aa2:	e9 a9 03 00 00       	jmp    c0011e50 <scanMADT()+0x4d4>
c0011aa7:	90                   	nop
c0011aa8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011ab0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ab4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ab7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011abb:	0f 87 8f 03 00 00    	ja     c0011e50 <scanMADT()+0x4d4>
c0011ac1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011ac9:	0f 87 81 03 00 00    	ja     c0011e50 <scanMADT()+0x4d4>
c0011acf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ad3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011ad7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011adb:	8d 50 01             	lea    edx,[eax+0x1]
c0011ade:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ae2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ae6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011aea:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011aee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011af2:	8d 50 01             	lea    edx,[eax+0x1]
c0011af5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011af9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011afd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011b01:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011b05:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011b0a:	0f 86 3c 03 00 00    	jbe    c0011e4c <scanMADT()+0x4d0>
c0011b10:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011b15:	75 59                	jne    c0011b70 <scanMADT()+0x1f4>
c0011b17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b1b:	8d 50 01             	lea    edx,[eax+0x1]
c0011b1e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011b22:	8a 15 e0 6e 02 c0    	mov    dl,BYTE PTR ds:0xc0026ee0
c0011b28:	0f b6 d2             	movzx  edx,dl
c0011b2b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011b2f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011b33:	88 82 20 6f 02 c0    	mov    BYTE PTR [edx-0x3ffd90e0],al
c0011b39:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b3d:	8d 50 01             	lea    edx,[eax+0x1]
c0011b40:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011b44:	8a 15 e0 6e 02 c0    	mov    dl,BYTE PTR ds:0xc0026ee0
c0011b4a:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011b4d:	88 0d e0 6e 02 c0    	mov    BYTE PTR ds:0xc0026ee0,cl
c0011b53:	0f b6 d2             	movzx  edx,dl
c0011b56:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011b5a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011b5e:	88 82 00 6f 02 c0    	mov    BYTE PTR [edx-0x3ffd9100],al
c0011b64:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011b69:	e9 c6 02 00 00       	jmp    c0011e34 <scanMADT()+0x4b8>
c0011b6e:	66 90                	xchg   ax,ax
c0011b70:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011b75:	0f 85 15 01 00 00    	jne    c0011c90 <scanMADT()+0x314>
c0011b7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b7f:	8d 50 01             	lea    edx,[eax+0x1]
c0011b82:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011b86:	8a 15 a0 6d 02 c0    	mov    dl,BYTE PTR ds:0xc0026da0
c0011b8c:	0f b6 d2             	movzx  edx,dl
c0011b8f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011b93:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011b97:	88 82 c0 6d 02 c0    	mov    BYTE PTR [edx-0x3ffd9240],al
c0011b9d:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011ba1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ba5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ba9:	01 d0                	add    eax,edx
c0011bab:	83 c0 2c             	add    eax,0x2c
c0011bae:	8a 00                	mov    al,BYTE PTR [eax]
c0011bb0:	0f b6 d0             	movzx  edx,al
c0011bb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bb7:	8d 48 01             	lea    ecx,[eax+0x1]
c0011bba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bbe:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011bc2:	0f b6 c0             	movzx  eax,al
c0011bc5:	c1 e0 08             	shl    eax,0x8
c0011bc8:	89 d1                	mov    ecx,edx
c0011bca:	09 c1                	or     ecx,eax
c0011bcc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bd0:	8d 50 02             	lea    edx,[eax+0x2]
c0011bd3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bd7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011bdb:	0f b6 c0             	movzx  eax,al
c0011bde:	c1 e0 10             	shl    eax,0x10
c0011be1:	09 c1                	or     ecx,eax
c0011be3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011be7:	8d 50 03             	lea    edx,[eax+0x3]
c0011bea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bee:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011bf2:	0f b6 c0             	movzx  eax,al
c0011bf5:	c1 e0 18             	shl    eax,0x18
c0011bf8:	09 c1                	or     ecx,eax
c0011bfa:	89 ca                	mov    edx,ecx
c0011bfc:	a0 a0 6d 02 c0       	mov    al,ds:0xc0026da0
c0011c01:	0f b6 c0             	movzx  eax,al
c0011c04:	89 14 85 e0 6d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9220],edx
c0011c0b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011c10:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c18:	01 d0                	add    eax,edx
c0011c1a:	83 c0 2c             	add    eax,0x2c
c0011c1d:	8a 00                	mov    al,BYTE PTR [eax]
c0011c1f:	0f b6 d0             	movzx  edx,al
c0011c22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c26:	8d 48 01             	lea    ecx,[eax+0x1]
c0011c29:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c2d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011c31:	0f b6 c0             	movzx  eax,al
c0011c34:	c1 e0 08             	shl    eax,0x8
c0011c37:	89 d1                	mov    ecx,edx
c0011c39:	09 c1                	or     ecx,eax
c0011c3b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c3f:	8d 50 02             	lea    edx,[eax+0x2]
c0011c42:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c46:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c4a:	0f b6 c0             	movzx  eax,al
c0011c4d:	c1 e0 10             	shl    eax,0x10
c0011c50:	09 c1                	or     ecx,eax
c0011c52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c56:	8d 50 03             	lea    edx,[eax+0x3]
c0011c59:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c5d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c61:	0f b6 c0             	movzx  eax,al
c0011c64:	c1 e0 18             	shl    eax,0x18
c0011c67:	09 c1                	or     ecx,eax
c0011c69:	89 ca                	mov    edx,ecx
c0011c6b:	a0 a0 6d 02 c0       	mov    al,ds:0xc0026da0
c0011c70:	0f b6 c0             	movzx  eax,al
c0011c73:	89 14 85 60 6e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd91a0],edx
c0011c7a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011c7f:	a0 a0 6d 02 c0       	mov    al,ds:0xc0026da0
c0011c84:	40                   	inc    eax
c0011c85:	a2 a0 6d 02 c0       	mov    ds:0xc0026da0,al
c0011c8a:	e9 a5 01 00 00       	jmp    c0011e34 <scanMADT()+0x4b8>
c0011c8f:	90                   	nop
c0011c90:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011c95:	0f 85 e9 00 00 00    	jne    c0011d84 <scanMADT()+0x408>
c0011c9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c9f:	8d 50 01             	lea    edx,[eax+0x1]
c0011ca2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ca6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011caa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011cae:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011cb2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cb6:	8d 50 01             	lea    edx,[eax+0x1]
c0011cb9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011cbd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cc1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011cc5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011cc9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ccd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cd1:	01 d0                	add    eax,edx
c0011cd3:	83 c0 2c             	add    eax,0x2c
c0011cd6:	8a 00                	mov    al,BYTE PTR [eax]
c0011cd8:	0f b6 d0             	movzx  edx,al
c0011cdb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cdf:	8d 48 01             	lea    ecx,[eax+0x1]
c0011ce2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ce6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011cea:	0f b6 c0             	movzx  eax,al
c0011ced:	c1 e0 08             	shl    eax,0x8
c0011cf0:	89 d1                	mov    ecx,edx
c0011cf2:	09 c1                	or     ecx,eax
c0011cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cf8:	8d 50 02             	lea    edx,[eax+0x2]
c0011cfb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011cff:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011d03:	0f b6 c0             	movzx  eax,al
c0011d06:	c1 e0 10             	shl    eax,0x10
c0011d09:	09 c1                	or     ecx,eax
c0011d0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d0f:	8d 50 03             	lea    edx,[eax+0x3]
c0011d12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d16:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011d1a:	0f b6 c0             	movzx  eax,al
c0011d1d:	c1 e0 18             	shl    eax,0x18
c0011d20:	09 c8                	or     eax,ecx
c0011d22:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d26:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011d2b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d33:	01 d0                	add    eax,edx
c0011d35:	83 c0 2c             	add    eax,0x2c
c0011d38:	8a 00                	mov    al,BYTE PTR [eax]
c0011d3a:	0f b6 c0             	movzx  eax,al
c0011d3d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011d41:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011d44:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d48:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0011d4c:	0f b6 d2             	movzx  edx,dl
c0011d4f:	c1 e2 08             	shl    edx,0x8
c0011d52:	09 d0                	or     eax,edx
c0011d54:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0011d59:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011d5e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0011d63:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011d67:	88 90 40 5b 02 c0    	mov    BYTE PTR [eax-0x3ffda4c0],dl
c0011d6d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0011d72:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011d77:	66 89 84 12 80 6d 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd9280],ax
c0011d7f:	e9 b0 00 00 00       	jmp    c0011e34 <scanMADT()+0x4b8>
c0011d84:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0011d89:	0f 85 99 00 00 00    	jne    c0011e28 <scanMADT()+0x4ac>
c0011d8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d93:	8d 50 01             	lea    edx,[eax+0x1]
c0011d96:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d9a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d9e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011da2:	0f b6 c0             	movzx  eax,al
c0011da5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011da9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011dad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011db1:	01 d0                	add    eax,edx
c0011db3:	83 c0 2c             	add    eax,0x2c
c0011db6:	8a 00                	mov    al,BYTE PTR [eax]
c0011db8:	0f b6 d0             	movzx  edx,al
c0011dbb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dbf:	8d 48 01             	lea    ecx,[eax+0x1]
c0011dc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011dc6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011dca:	0f b6 c0             	movzx  eax,al
c0011dcd:	c1 e0 08             	shl    eax,0x8
c0011dd0:	09 d0                	or     eax,edx
c0011dd2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011dd6:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011ddb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ddf:	8d 50 01             	lea    edx,[eax+0x1]
c0011de2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011de6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011dea:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011dee:	0f b6 c0             	movzx  eax,al
c0011df1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011df9:	c1 e0 08             	shl    eax,0x8
c0011dfc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011e00:	89 c1                	mov    ecx,eax
c0011e02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e06:	c1 e0 18             	shl    eax,0x18
c0011e09:	89 c3                	mov    ebx,eax
c0011e0b:	a1 f0 6c 02 c0       	mov    eax,ds:0xc0026cf0
c0011e10:	8d 50 01             	lea    edx,[eax+0x1]
c0011e13:	89 15 f0 6c 02 c0    	mov    DWORD PTR ds:0xc0026cf0,edx
c0011e19:	09 d9                	or     ecx,ebx
c0011e1b:	89 ca                	mov    edx,ecx
c0011e1d:	89 14 85 00 6d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9300],edx
c0011e24:	eb 0e                	jmp    c0011e34 <scanMADT()+0x4b8>
c0011e26:	66 90                	xchg   ax,ax
c0011e28:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0011e2d:	75 05                	jne    c0011e34 <scanMADT()+0x4b8>
c0011e2f:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0011e34:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0011e39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011e3d:	01 d0                	add    eax,edx
c0011e3f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011e43:	e9 68 fc ff ff       	jmp    c0011ab0 <scanMADT()+0x134>
c0011e48:	90                   	nop
c0011e49:	eb 05                	jmp    c0011e50 <scanMADT()+0x4d4>
c0011e4b:	90                   	nop
c0011e4c:	90                   	nop
c0011e4d:	8d 76 00             	lea    esi,[esi+0x0]
c0011e50:	83 c4 38             	add    esp,0x38
c0011e53:	5b                   	pop    ebx
c0011e54:	c3                   	ret    
c0011e55:	90                   	nop
c0011e56:	66 90                	xchg   ax,ax

c0011e58 <ACPI::ACPI()>:
c0011e58:	83 ec 0c             	sub    esp,0xc
c0011e5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e5f:	83 ec 08             	sub    esp,0x8
c0011e62:	68 43 3d 02 c0       	push   0xc0023d43
c0011e67:	50                   	push   eax
c0011e68:	e8 a1 c2 ff ff       	call   c000e10e <Device::Device(char const*)>
c0011e6d:	83 c4 10             	add    esp,0x10
c0011e70:	ba cc 3e 02 c0       	mov    edx,0xc0023ecc
c0011e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e79:	89 10                	mov    DWORD PTR [eax],edx
c0011e7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e7f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0011e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e8a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0011e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e98:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0011ea2:	83 ec 0c             	sub    esp,0xc
c0011ea5:	68 48 3d 02 c0       	push   0xc0023d48
c0011eaa:	e8 6e 7b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011eaf:	83 c4 10             	add    esp,0x10
c0011eb2:	e8 c5 fa ff ff       	call   c001197c <scanMADT()>
c0011eb7:	90                   	nop
c0011eb8:	83 c4 0c             	add    esp,0xc
c0011ebb:	c3                   	ret    

c0011ebc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0011ebc:	83 ec 2c             	sub    esp,0x2c
c0011ebf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011ec3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ec7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011ecb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0011ecf:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0011ed4:	88 d0                	mov    al,dl
c0011ed6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011eda:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011edf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011ee7:	90                   	nop
c0011ee8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011eec:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011ef2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011ef6:	0f 8d 9c 00 00 00    	jge    c0011f98 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0011efc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f04:	83 c2 2a             	add    edx,0x2a
c0011f07:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0011f0b:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0011f10:	75 7a                	jne    c0011f8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011f12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f16:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f1a:	83 c2 2a             	add    edx,0x2a
c0011f1d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0011f21:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0011f25:	75 65                	jne    c0011f8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011f27:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011f2c:	74 3a                	je     c0011f68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0011f2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f32:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f36:	83 c2 2a             	add    edx,0x2a
c0011f39:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0011f3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011f44:	39 c2                	cmp    edx,eax
c0011f46:	74 10                	je     c0011f58 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0011f48:	83 ec 0c             	sub    esp,0xc
c0011f4b:	68 e4 3b 02 c0       	push   0xc0023be4
c0011f50:	e8 30 24 00 00       	call   c0014385 <Krnl::panic(char const*)>
c0011f55:	83 c4 10             	add    esp,0x10
c0011f58:	83 ec 0c             	sub    esp,0xc
c0011f5b:	68 56 3d 02 c0       	push   0xc0023d56
c0011f60:	e8 20 24 00 00       	call   c0014385 <Krnl::panic(char const*)>
c0011f65:	83 c4 10             	add    esp,0x10
c0011f68:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011f6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f70:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f74:	83 c2 2a             	add    edx,0x2a
c0011f77:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0011f7b:	8b 02                	mov    eax,DWORD PTR [edx]
c0011f7d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011f80:	89 01                	mov    DWORD PTR [ecx],eax
c0011f82:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0011f85:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0011f8a:	66 90                	xchg   ax,ax
c0011f8c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f90:	e9 53 ff ff ff       	jmp    c0011ee8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0011f95:	8d 76 00             	lea    esi,[esi+0x0]
c0011f98:	90                   	nop
c0011f99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f9d:	83 c4 2c             	add    esp,0x2c
c0011fa0:	c2 04 00             	ret    0x4
c0011fa3:	90                   	nop

c0011fa4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0011fa4:	83 ec 1c             	sub    esp,0x1c
c0011fa7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011fab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0011faf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011fb3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011fb8:	88 c8                	mov    al,cl
c0011fba:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0011fbe:	88 d0                	mov    al,dl
c0011fc0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fc8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011fce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fd2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011fd5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0011fd9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0011fdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fe1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011fe7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0011feb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0011fee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ff2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0011ff7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ffb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012001:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0012005:	8d 48 01             	lea    ecx,[eax+0x1]
c0012008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001200c:	83 c2 2a             	add    edx,0x2a
c001200f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0012013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012017:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001201d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012021:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012024:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012028:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001202c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012030:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012036:	8d 50 01             	lea    edx,[eax+0x1]
c0012039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001203d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0012043:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012047:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001204d:	3d 00 02 00 00       	cmp    eax,0x200
c0012052:	75 10                	jne    c0012064 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0012054:	83 ec 0c             	sub    esp,0xc
c0012057:	68 65 3d 02 c0       	push   0xc0023d65
c001205c:	e8 24 23 00 00       	call   c0014385 <Krnl::panic(char const*)>
c0012061:	83 c4 10             	add    esp,0x10
c0012064:	90                   	nop
c0012065:	83 c4 1c             	add    esp,0x1c
c0012068:	c3                   	ret    
c0012069:	90                   	nop
c001206a:	66 90                	xchg   ax,ax

c001206c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001206c:	b8 00 00 00 00       	mov    eax,0x0
c0012071:	c3                   	ret    
c0012072:	66 90                	xchg   ax,ax

c0012074 <ACPI::detectPCI()>:
c0012074:	53                   	push   ebx
c0012075:	83 ec 28             	sub    esp,0x28
c0012078:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001207d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0012082:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0012087:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001208d:	83 e0 04             	and    eax,0x4
c0012090:	84 c0                	test   al,al
c0012092:	74 2c                	je     c00120c0 <ACPI::detectPCI()+0x4c>
c0012094:	a1 e8 6c 02 c0       	mov    eax,ds:0xc0026ce8
c0012099:	83 ec 08             	sub    esp,0x8
c001209c:	68 82 3d 02 c0       	push   0xc0023d82
c00120a1:	50                   	push   eax
c00120a2:	e8 5d f8 ff ff       	call   c0011904 <findDataTable(unsigned char*, char*)>
c00120a7:	83 c4 10             	add    esp,0x10
c00120aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00120ae:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00120b3:	74 0b                	je     c00120c0 <ACPI::detectPCI()+0x4c>
c00120b5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00120ba:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00120bf:	90                   	nop
c00120c0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c00120c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120cc:	8a 00                	mov    al,BYTE PTR [eax]
c00120ce:	3c 01                	cmp    al,0x1
c00120d0:	75 0e                	jne    c00120e0 <ACPI::detectPCI()+0x6c>
c00120d2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00120d7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00120dc:	eb 2a                	jmp    c0012108 <ACPI::detectPCI()+0x94>
c00120de:	66 90                	xchg   ax,ax
c00120e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120e4:	8a 00                	mov    al,BYTE PTR [eax]
c00120e6:	3c 02                	cmp    al,0x2
c00120e8:	75 1e                	jne    c0012108 <ACPI::detectPCI()+0x94>
c00120ea:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00120ef:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00120f4:	74 12                	je     c0012108 <ACPI::detectPCI()+0x94>
c00120f6:	83 ec 0c             	sub    esp,0xc
c00120f9:	68 14 3c 02 c0       	push   0xc0023c14
c00120fe:	e8 82 22 00 00       	call   c0014385 <Krnl::panic(char const*)>
c0012103:	83 c4 10             	add    esp,0x10
c0012106:	66 90                	xchg   ax,ax
c0012108:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001210c:	83 f0 01             	xor    eax,0x1
c001210f:	84 c0                	test   al,al
c0012111:	74 41                	je     c0012154 <ACPI::detectPCI()+0xe0>
c0012113:	e8 38 e0 fe ff       	call   c0000150 <manualPCIProbe>
c0012118:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001211c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0012121:	75 0d                	jne    c0012130 <ACPI::detectPCI()+0xbc>
c0012123:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012128:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001212d:	eb 25                	jmp    c0012154 <ACPI::detectPCI()+0xe0>
c001212f:	90                   	nop
c0012130:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0012135:	75 1d                	jne    c0012154 <ACPI::detectPCI()+0xe0>
c0012137:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001213c:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0012141:	74 11                	je     c0012154 <ACPI::detectPCI()+0xe0>
c0012143:	83 ec 0c             	sub    esp,0xc
c0012146:	68 14 3c 02 c0       	push   0xc0023c14
c001214b:	e8 35 22 00 00       	call   c0014385 <Krnl::panic(char const*)>
c0012150:	83 c4 10             	add    esp,0x10
c0012153:	90                   	nop
c0012154:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012159:	0f 84 85 00 00 00    	je     c00121e4 <ACPI::detectPCI()+0x170>
c001215f:	83 ec 0c             	sub    esp,0xc
c0012162:	68 87 3d 02 c0       	push   0xc0023d87
c0012167:	e8 b1 78 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001216c:	83 c4 10             	add    esp,0x10
c001216f:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0012177:	83 ec 0c             	sub    esp,0xc
c001217a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001217e:	e8 40 78 ff ff       	call   c00099c3 <malloc>
c0012183:	83 c4 10             	add    esp,0x10
c0012186:	89 c3                	mov    ebx,eax
c0012188:	83 ec 0c             	sub    esp,0xc
c001218b:	53                   	push   ebx
c001218c:	e8 dd a9 00 00       	call   c001cb6e <PCI::PCI()>
c0012191:	83 c4 10             	add    esp,0x10
c0012194:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0012198:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001219c:	83 ec 08             	sub    esp,0x8
c001219f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121a3:	50                   	push   eax
c00121a4:	e8 61 bd ff ff       	call   c000df0a <Device::addChild(Device*)>
c00121a9:	83 c4 10             	add    esp,0x10
c00121ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00121b2:	83 c0 08             	add    eax,0x8
c00121b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00121b7:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00121bc:	74 0a                	je     c00121c8 <ACPI::detectPCI()+0x154>
c00121be:	ba 01 00 00 00       	mov    edx,0x1
c00121c3:	eb 0b                	jmp    c00121d0 <ACPI::detectPCI()+0x15c>
c00121c5:	8d 76 00             	lea    esi,[esi+0x0]
c00121c8:	ba 02 00 00 00       	mov    edx,0x2
c00121cd:	8d 76 00             	lea    esi,[esi+0x0]
c00121d0:	6a 00                	push   0x0
c00121d2:	6a 00                	push   0x0
c00121d4:	52                   	push   edx
c00121d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00121d9:	ff d0                	call   eax
c00121db:	83 c4 10             	add    esp,0x10
c00121de:	e9 a1 00 00 00       	jmp    c0012284 <ACPI::detectPCI()+0x210>
c00121e3:	90                   	nop
c00121e4:	83 ec 0c             	sub    esp,0xc
c00121e7:	68 9f 3d 02 c0       	push   0xc0023d9f
c00121ec:	e8 d2 a8 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c00121f1:	83 c4 10             	add    esp,0x10
c00121f4:	83 ec 0c             	sub    esp,0xc
c00121f7:	68 aa 3d 02 c0       	push   0xc0023daa
c00121fc:	e8 1c 78 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012201:	83 c4 10             	add    esp,0x10
c0012204:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001220b:	83 ec 0c             	sub    esp,0xc
c001220e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012212:	e8 ac 77 ff ff       	call   c00099c3 <malloc>
c0012217:	83 c4 10             	add    esp,0x10
c001221a:	89 c3                	mov    ebx,eax
c001221c:	83 ec 0c             	sub    esp,0xc
c001221f:	53                   	push   ebx
c0012220:	e8 b3 b4 00 00       	call   c001d6d8 <IDE::IDE()>
c0012225:	83 c4 10             	add    esp,0x10
c0012228:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001222c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012230:	83 ec 08             	sub    esp,0x8
c0012233:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012237:	50                   	push   eax
c0012238:	e8 cd bc ff ff       	call   c000df0a <Device::addChild(Device*)>
c001223d:	83 c4 10             	add    esp,0x10
c0012240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012244:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001224e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012252:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001225b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001225f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012268:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001226c:	8b 00                	mov    eax,DWORD PTR [eax]
c001226e:	83 c0 08             	add    eax,0x8
c0012271:	8b 00                	mov    eax,DWORD PTR [eax]
c0012273:	6a 00                	push   0x0
c0012275:	6a 00                	push   0x0
c0012277:	6a 00                	push   0x0
c0012279:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001227d:	ff d0                	call   eax
c001227f:	83 c4 10             	add    esp,0x10
c0012282:	66 90                	xchg   ax,ax
c0012284:	90                   	nop
c0012285:	83 c4 28             	add    esp,0x28
c0012288:	5b                   	pop    ebx
c0012289:	c3                   	ret    
c001228a:	66 90                	xchg   ax,ax

c001228c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001228c:	83 ec 1c             	sub    esp,0x1c
c001228f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012293:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012296:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001229a:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001229f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00122a4:	83 ec 08             	sub    esp,0x8
c00122a7:	52                   	push   edx
c00122a8:	50                   	push   eax
c00122a9:	e8 e6 6c ff ff       	call   c0008f94 <Computer::readCMOS(unsigned char)>
c00122ae:	83 c4 10             	add    esp,0x10
c00122b1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00122b5:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c00122ba:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00122bf:	83 ec 04             	sub    esp,0x4
c00122c2:	6a 01                	push   0x1
c00122c4:	52                   	push   edx
c00122c5:	50                   	push   eax
c00122c6:	e8 a5 6e ff ff       	call   c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>
c00122cb:	83 c4 10             	add    esp,0x10
c00122ce:	90                   	nop
c00122cf:	83 c4 1c             	add    esp,0x1c
c00122d2:	c3                   	ret    
c00122d3:	90                   	nop

c00122d4 <ACPI::sleep()>:
c00122d4:	83 ec 0c             	sub    esp,0xc
c00122d7:	a1 c0 6a 02 c0       	mov    eax,ds:0xc0026ac0
c00122dc:	85 c0                	test   eax,eax
c00122de:	74 08                	je     c00122e8 <ACPI::sleep()+0x14>
c00122e0:	a1 c0 6a 02 c0       	mov    eax,ds:0xc0026ac0
c00122e5:	ff d0                	call   eax
c00122e7:	90                   	nop
c00122e8:	90                   	nop
c00122e9:	83 c4 0c             	add    esp,0xc
c00122ec:	c3                   	ret    
c00122ed:	90                   	nop
c00122ee:	66 90                	xchg   ax,ax

c00122f0 <ACPI::open(int, int, void*)>:
c00122f0:	57                   	push   edi
c00122f1:	56                   	push   esi
c00122f2:	53                   	push   ebx
c00122f3:	81 ec 70 01 00 00    	sub    esp,0x170
c00122f9:	83 ec 0c             	sub    esp,0xc
c00122fc:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012303:	e8 6c fd ff ff       	call   c0012074 <ACPI::detectPCI()>
c0012308:	83 c4 10             	add    esp,0x10
c001230b:	83 ec 0c             	sub    esp,0xc
c001230e:	68 3c 3c 02 c0       	push   0xc0023c3c
c0012313:	e8 05 77 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012318:	83 c4 10             	add    esp,0x10
c001231b:	83 ec 0c             	sub    esp,0xc
c001231e:	68 bf 3d 02 c0       	push   0xc0023dbf
c0012323:	e8 d3 47 00 00       	call   c0016afb <Thr::loadKernelSymbolTable(char const*)>
c0012328:	83 c4 10             	add    esp,0x10
c001232b:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0012333:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001233e:	83 ec 0c             	sub    esp,0xc
c0012341:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012348:	e8 76 76 ff ff       	call   c00099c3 <malloc>
c001234d:	83 c4 10             	add    esp,0x10
c0012350:	89 c3                	mov    ebx,eax
c0012352:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0012357:	83 ec 04             	sub    esp,0x4
c001235a:	50                   	push   eax
c001235b:	68 dd 3d 02 c0       	push   0xc0023ddd
c0012360:	53                   	push   ebx
c0012361:	e8 c8 ac ff ff       	call   c000d02e <File::File(char const*, Process*)>
c0012366:	83 c4 10             	add    esp,0x10
c0012369:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012370:	83 ec 08             	sub    esp,0x8
c0012373:	6a 01                	push   0x1
c0012375:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001237c:	e8 11 ad ff ff       	call   c000d092 <File::open(FileOpenMode)>
c0012381:	83 c4 10             	add    esp,0x10
c0012384:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001238b:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012393:	75 17                	jne    c00123ac <ACPI::open(int, int, void*)+0xbc>
c0012395:	83 ec 0c             	sub    esp,0xc
c0012398:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001239f:	e8 4c ad ff ff       	call   c000d0f0 <File::close()>
c00123a4:	83 c4 10             	add    esp,0x10
c00123a7:	eb 0b                	jmp    c00123b4 <ACPI::open(int, int, void*)+0xc4>
c00123a9:	8d 76 00             	lea    esi,[esi+0x0]
c00123ac:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c00123b4:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c00123bc:	74 1e                	je     c00123dc <ACPI::open(int, int, void*)+0xec>
c00123be:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c00123c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00123c7:	83 c0 08             	add    eax,0x8
c00123ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00123cc:	83 ec 0c             	sub    esp,0xc
c00123cf:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00123d6:	ff d0                	call   eax
c00123d8:	83 c4 10             	add    esp,0x10
c00123db:	90                   	nop
c00123dc:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c00123e3:	83 f0 01             	xor    eax,0x1
c00123e6:	84 c0                	test   al,al
c00123e8:	74 42                	je     c001242c <ACPI::open(int, int, void*)+0x13c>
c00123ea:	83 ec 0c             	sub    esp,0xc
c00123ed:	68 fb 3d 02 c0       	push   0xc0023dfb
c00123f2:	e8 26 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00123f7:	83 c4 10             	add    esp,0x10
c00123fa:	83 ec 04             	sub    esp,0x4
c00123fd:	6a 0c                	push   0xc
c00123ff:	68 16 3e 02 c0       	push   0xc0023e16
c0012404:	68 27 3e 02 c0       	push   0xc0023e27
c0012409:	e8 57 2d 00 00       	call   c0015165 <Reg::readIntWithDefault(char*, char*, int)>
c001240e:	83 c4 10             	add    esp,0x10
c0012411:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012418:	83 ec 0c             	sub    esp,0xc
c001241b:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0012422:	e8 d4 94 ff ff       	call   c000b8fb <Virt::setupPageSwapping(int)>
c0012427:	83 c4 10             	add    esp,0x10
c001242a:	66 90                	xchg   ax,ax
c001242c:	83 ec 0c             	sub    esp,0xc
c001242f:	68 66 25 02 c0       	push   0xc0022566
c0012434:	e8 e4 75 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012439:	83 c4 10             	add    esp,0x10
c001243c:	8b 1d 48 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026448
c0012442:	83 ec 08             	sub    esp,0x8
c0012445:	6a 01                	push   0x1
c0012447:	68 2e 3e 02 c0       	push   0xc0023e2e
c001244c:	e8 21 51 00 00       	call   c0017572 <Thr::loadDLL(char const*, bool)>
c0012451:	83 c4 10             	add    esp,0x10
c0012454:	83 ec 08             	sub    esp,0x8
c0012457:	53                   	push   ebx
c0012458:	50                   	push   eax
c0012459:	e8 45 53 00 00       	call   c00177a3 <Thr::executeDLL(unsigned long, void*)>
c001245e:	83 c4 10             	add    esp,0x10
c0012461:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012468:	83 ec 08             	sub    esp,0x8
c001246b:	6a 12                	push   0x12
c001246d:	50                   	push   eax
c001246e:	e8 1b be ff ff       	call   c000e28e <getDevicesOfType(DeviceType)>
c0012473:	83 c4 0c             	add    esp,0xc
c0012476:	66 90                	xchg   ax,ax
c0012478:	83 ec 0c             	sub    esp,0xc
c001247b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012482:	50                   	push   eax
c0012483:	e8 d8 f2 00 00       	call   c0021760 <LinkedList<Device>::isEmpty()>
c0012488:	83 c4 10             	add    esp,0x10
c001248b:	83 f0 01             	xor    eax,0x1
c001248e:	84 c0                	test   al,al
c0012490:	0f 84 46 01 00 00    	je     c00125dc <ACPI::open(int, int, void*)+0x2ec>
c0012496:	83 ec 0c             	sub    esp,0xc
c0012499:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00124a0:	50                   	push   eax
c00124a1:	e8 d6 f2 00 00       	call   c002177c <LinkedList<Device>::getFirstElement()>
c00124a6:	83 c4 10             	add    esp,0x10
c00124a9:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c00124b0:	83 ec 0c             	sub    esp,0xc
c00124b3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00124ba:	50                   	push   eax
c00124bb:	e8 c4 f2 00 00       	call   c0021784 <LinkedList<Device>::removeFirst()>
c00124c0:	83 c4 10             	add    esp,0x10
c00124c3:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c00124ca:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c00124d1:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c00124d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00124dc:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00124e2:	ba 09 00 00 00       	mov    edx,0x9
c00124e7:	fc                   	cld    
c00124e8:	89 c7                	mov    edi,eax
c00124ea:	89 de                	mov    esi,ebx
c00124ec:	89 d1                	mov    ecx,edx
c00124ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00124f0:	83 ec 08             	sub    esp,0x8
c00124f3:	8d 44 24 38          	lea    eax,[esp+0x38]
c00124f7:	50                   	push   eax
c00124f8:	83 ec 24             	sub    esp,0x24
c00124fb:	89 e0                	mov    eax,esp
c00124fd:	89 c3                	mov    ebx,eax
c00124ff:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012503:	ba 09 00 00 00       	mov    edx,0x9
c0012508:	89 df                	mov    edi,ebx
c001250a:	89 c6                	mov    esi,eax
c001250c:	89 d1                	mov    ecx,edx
c001250e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012510:	e8 37 ab 00 00       	call   c001d04c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012515:	83 c4 30             	add    esp,0x30
c0012518:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001251f:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0012527:	0f 84 4b ff ff ff    	je     c0012478 <ACPI::open(int, int, void*)+0x188>
c001252d:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012538:	83 ec 0c             	sub    esp,0xc
c001253b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012542:	e8 7c 74 ff ff       	call   c00099c3 <malloc>
c0012547:	83 c4 10             	add    esp,0x10
c001254a:	89 c3                	mov    ebx,eax
c001254c:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0012551:	83 ec 04             	sub    esp,0x4
c0012554:	50                   	push   eax
c0012555:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001255c:	53                   	push   ebx
c001255d:	e8 cc aa ff ff       	call   c000d02e <File::File(char const*, Process*)>
c0012562:	83 c4 10             	add    esp,0x10
c0012565:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c001256c:	83 ec 0c             	sub    esp,0xc
c001256f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012576:	e8 85 ad ff ff       	call   c000d300 <File::exists()>
c001257b:	83 c4 10             	add    esp,0x10
c001257e:	84 c0                	test   al,al
c0012580:	74 2a                	je     c00125ac <ACPI::open(int, int, void*)+0x2bc>
c0012582:	83 ec 08             	sub    esp,0x8
c0012585:	6a 01                	push   0x1
c0012587:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001258e:	e8 df 4f 00 00       	call   c0017572 <Thr::loadDLL(char const*, bool)>
c0012593:	83 c4 10             	add    esp,0x10
c0012596:	83 ec 08             	sub    esp,0x8
c0012599:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00125a0:	50                   	push   eax
c00125a1:	e8 fd 51 00 00       	call   c00177a3 <Thr::executeDLL(unsigned long, void*)>
c00125a6:	83 c4 10             	add    esp,0x10
c00125a9:	8d 76 00             	lea    esi,[esi+0x0]
c00125ac:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00125b4:	0f 84 be fe ff ff    	je     c0012478 <ACPI::open(int, int, void*)+0x188>
c00125ba:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c00125c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00125c3:	83 c0 08             	add    eax,0x8
c00125c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00125c8:	83 ec 0c             	sub    esp,0xc
c00125cb:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00125d2:	ff d0                	call   eax
c00125d4:	83 c4 10             	add    esp,0x10
c00125d7:	e9 9c fe ff ff       	jmp    c0012478 <ACPI::open(int, int, void*)+0x188>
c00125dc:	83 ec 0c             	sub    esp,0xc
c00125df:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00125e6:	50                   	push   eax
c00125e7:	e8 70 f1 00 00       	call   c002175c <LinkedList<Device>::~LinkedList()>
c00125ec:	83 c4 10             	add    esp,0x10
c00125ef:	8b 1d 48 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026448
c00125f5:	83 ec 08             	sub    esp,0x8
c00125f8:	6a 01                	push   0x1
c00125fa:	68 49 3e 02 c0       	push   0xc0023e49
c00125ff:	e8 6e 4f 00 00       	call   c0017572 <Thr::loadDLL(char const*, bool)>
c0012604:	83 c4 10             	add    esp,0x10
c0012607:	83 ec 08             	sub    esp,0x8
c001260a:	53                   	push   ebx
c001260b:	50                   	push   eax
c001260c:	e8 92 51 00 00       	call   c00177a3 <Thr::executeDLL(unsigned long, void*)>
c0012611:	83 c4 10             	add    esp,0x10
c0012614:	8b 1d 48 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026448
c001261a:	83 ec 08             	sub    esp,0x8
c001261d:	6a 01                	push   0x1
c001261f:	68 66 3e 02 c0       	push   0xc0023e66
c0012624:	e8 49 4f 00 00       	call   c0017572 <Thr::loadDLL(char const*, bool)>
c0012629:	83 c4 10             	add    esp,0x10
c001262c:	83 ec 08             	sub    esp,0x8
c001262f:	53                   	push   ebx
c0012630:	50                   	push   eax
c0012631:	e8 6d 51 00 00       	call   c00177a3 <Thr::executeDLL(unsigned long, void*)>
c0012636:	83 c4 10             	add    esp,0x10
c0012639:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001263e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012644:	83 e0 04             	and    eax,0x4
c0012647:	84 c0                	test   al,al
c0012649:	0f 84 15 01 00 00    	je     c0012764 <ACPI::open(int, int, void*)+0x474>
c001264f:	83 ec 0c             	sub    esp,0xc
c0012652:	68 83 3e 02 c0       	push   0xc0023e83
c0012657:	e8 c1 73 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001265c:	83 c4 10             	add    esp,0x10
c001265f:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001266a:	83 ec 0c             	sub    esp,0xc
c001266d:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012674:	e8 4a 73 ff ff       	call   c00099c3 <malloc>
c0012679:	83 c4 10             	add    esp,0x10
c001267c:	89 c3                	mov    ebx,eax
c001267e:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0012683:	83 ec 04             	sub    esp,0x4
c0012686:	50                   	push   eax
c0012687:	68 a0 3e 02 c0       	push   0xc0023ea0
c001268c:	53                   	push   ebx
c001268d:	e8 9c a9 ff ff       	call   c000d02e <File::File(char const*, Process*)>
c0012692:	83 c4 10             	add    esp,0x10
c0012695:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001269c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00126a4:	74 1a                	je     c00126c0 <ACPI::open(int, int, void*)+0x3d0>
c00126a6:	83 ec 0c             	sub    esp,0xc
c00126a9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00126b0:	e8 4b ac ff ff       	call   c000d300 <File::exists()>
c00126b5:	83 c4 10             	add    esp,0x10
c00126b8:	84 c0                	test   al,al
c00126ba:	74 04                	je     c00126c0 <ACPI::open(int, int, void*)+0x3d0>
c00126bc:	b0 01                	mov    al,0x1
c00126be:	eb 04                	jmp    c00126c4 <ACPI::open(int, int, void*)+0x3d4>
c00126c0:	b0 00                	mov    al,0x0
c00126c2:	66 90                	xchg   ax,ax
c00126c4:	84 c0                	test   al,al
c00126c6:	74 28                	je     c00126f0 <ACPI::open(int, int, void*)+0x400>
c00126c8:	83 ec 08             	sub    esp,0x8
c00126cb:	6a 01                	push   0x1
c00126cd:	68 a0 3e 02 c0       	push   0xc0023ea0
c00126d2:	e8 9b 4e 00 00       	call   c0017572 <Thr::loadDLL(char const*, bool)>
c00126d7:	83 c4 10             	add    esp,0x10
c00126da:	83 ec 08             	sub    esp,0x8
c00126dd:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c00126e4:	50                   	push   eax
c00126e5:	e8 b9 50 00 00       	call   c00177a3 <Thr::executeDLL(unsigned long, void*)>
c00126ea:	83 c4 10             	add    esp,0x10
c00126ed:	8d 76 00             	lea    esi,[esi+0x0]
c00126f0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00126f8:	74 2a                	je     c0012724 <ACPI::open(int, int, void*)+0x434>
c00126fa:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012702:	74 20                	je     c0012724 <ACPI::open(int, int, void*)+0x434>
c0012704:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001270b:	8b 00                	mov    eax,DWORD PTR [eax]
c001270d:	83 c0 08             	add    eax,0x8
c0012710:	8b 00                	mov    eax,DWORD PTR [eax]
c0012712:	83 ec 0c             	sub    esp,0xc
c0012715:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001271c:	ff d0                	call   eax
c001271e:	83 c4 10             	add    esp,0x10
c0012721:	8d 76 00             	lea    esi,[esi+0x0]
c0012724:	a1 e8 6c 02 c0       	mov    eax,ds:0xc0026ce8
c0012729:	83 ec 08             	sub    esp,0x8
c001272c:	68 bd 3e 02 c0       	push   0xc0023ebd
c0012731:	50                   	push   eax
c0012732:	e8 cd f1 ff ff       	call   c0011904 <findDataTable(unsigned char*, char*)>
c0012737:	83 c4 10             	add    esp,0x10
c001273a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0012741:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012749:	74 19                	je     c0012764 <ACPI::open(int, int, void*)+0x474>
c001274b:	83 ec 08             	sub    esp,0x8
c001274e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012755:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001275c:	e8 2b fb ff ff       	call   c001228c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012761:	83 c4 10             	add    esp,0x10
c0012764:	b8 00 00 00 00       	mov    eax,0x0
c0012769:	81 c4 70 01 00 00    	add    esp,0x170
c001276f:	5b                   	pop    ebx
c0012770:	5e                   	pop    esi
c0012771:	5f                   	pop    edi
c0012772:	c3                   	ret    
c0012773:	90                   	nop

c0012774 <CPU::close(int, int, void*)>:
c0012774:	31 c0                	xor    eax,eax
c0012776:	c3                   	ret    
c0012777:	90                   	nop

c0012778 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012778:	55                   	push   ebp
c0012779:	57                   	push   edi
c001277a:	56                   	push   esi
c001277b:	53                   	push   ebx
c001277c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012780:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012784:	89 ce                	mov    esi,ecx
c0012786:	89 d5                	mov    ebp,edx
c0012788:	80 f9 04             	cmp    cl,0x4
c001278b:	75 28                	jne    c00127b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001278d:	8d 42 f9             	lea    eax,[edx-0x7]
c0012790:	3c 03                	cmp    al,0x3
c0012792:	0f 86 63 01 00 00    	jbe    c00128fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012798:	80 fa 03             	cmp    dl,0x3
c001279b:	0f 84 5a 01 00 00    	je     c00128fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00127a1:	8d 7a f2             	lea    edi,[edx-0xe]
c00127a4:	b8 10 5d 02 c0       	mov    eax,0xc0025d10
c00127a9:	89 fb                	mov    ebx,edi
c00127ab:	80 fb 01             	cmp    bl,0x1
c00127ae:	77 4e                	ja     c00127fe <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00127b0:	e9 52 01 00 00       	jmp    c0012907 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127b5:	80 f9 05             	cmp    cl,0x5
c00127b8:	75 4d                	jne    c0012807 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00127ba:	b8 20 5d 02 c0       	mov    eax,0xc0025d20
c00127bf:	80 fa 03             	cmp    dl,0x3
c00127c2:	0f 86 3f 01 00 00    	jbe    c0012907 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127c8:	8d 7a fa             	lea    edi,[edx-0x6]
c00127cb:	b8 30 5d 02 c0       	mov    eax,0xc0025d30
c00127d0:	89 fb                	mov    ebx,edi
c00127d2:	80 fb 01             	cmp    bl,0x1
c00127d5:	0f 86 2c 01 00 00    	jbe    c0012907 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127db:	b8 40 5d 02 c0       	mov    eax,0xc0025d40
c00127e0:	80 fa 08             	cmp    dl,0x8
c00127e3:	0f 84 1e 01 00 00    	je     c0012907 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127e9:	89 d7                	mov    edi,edx
c00127eb:	b8 50 5d 02 c0       	mov    eax,0xc0025d50
c00127f0:	83 e7 fb             	and    edi,0xfffffffb
c00127f3:	89 fb                	mov    ebx,edi
c00127f5:	80 fb 09             	cmp    bl,0x9
c00127f8:	0f 84 09 01 00 00    	je     c0012907 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127fe:	31 c0                	xor    eax,eax
c0012800:	89 eb                	mov    ebx,ebp
c0012802:	0f b6 fb             	movzx  edi,bl
c0012805:	eb 30                	jmp    c0012837 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0012807:	31 c0                	xor    eax,eax
c0012809:	80 f9 06             	cmp    cl,0x6
c001280c:	75 f2                	jne    c0012800 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001280e:	80 fa 0a             	cmp    dl,0xa
c0012811:	77 ed                	ja     c0012800 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012813:	bf de 05 00 00       	mov    edi,0x5de
c0012818:	0f a3 d7             	bt     edi,edx
c001281b:	73 e3                	jae    c0012800 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001281d:	b8 60 5d 02 c0       	mov    eax,0xc0025d60
c0012822:	e9 e0 00 00 00       	jmp    c0012907 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012827:	39 c7                	cmp    edi,eax
c0012829:	0f 84 d3 00 00 00    	je     c0012902 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001282f:	40                   	inc    eax
c0012830:	3d d0 00 00 00       	cmp    eax,0xd0
c0012835:	74 09                	je     c0012840 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0012837:	89 f3                	mov    ebx,esi
c0012839:	80 fb 0f             	cmp    bl,0xf
c001283c:	75 f1                	jne    c001282f <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001283e:	eb e7                	jmp    c0012827 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0012840:	80 f9 10             	cmp    cl,0x10
c0012843:	75 14                	jne    c0012859 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0012845:	8d 42 fc             	lea    eax,[edx-0x4]
c0012848:	83 e0 fb             	and    eax,0xfffffffb
c001284b:	3c 02                	cmp    al,0x2
c001284d:	76 34                	jbe    c0012883 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001284f:	b8 45 40 02 c0       	mov    eax,0xc0024045
c0012854:	80 fa 02             	cmp    dl,0x2
c0012857:	eb 24                	jmp    c001287d <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012859:	80 f9 11             	cmp    cl,0x11
c001285c:	75 13                	jne    c0012871 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001285e:	b8 45 40 02 c0       	mov    eax,0xc0024045
c0012863:	80 fa 03             	cmp    dl,0x3
c0012866:	0f 85 9b 00 00 00    	jne    c0012907 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001286c:	e9 91 00 00 00       	jmp    c0012902 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012871:	80 f9 12             	cmp    cl,0x12
c0012874:	75 14                	jne    c001288a <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012876:	b8 45 40 02 c0       	mov    eax,0xc0024045
c001287b:	fe ca                	dec    dl
c001287d:	0f 85 84 00 00 00    	jne    c0012907 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012883:	b8 80 5d 02 c0       	mov    eax,0xc0025d80
c0012888:	eb 7d                	jmp    c0012907 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001288a:	80 f9 14             	cmp    cl,0x14
c001288d:	75 12                	jne    c00128a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001288f:	4a                   	dec    edx
c0012890:	b8 45 40 02 c0       	mov    eax,0xc0024045
c0012895:	80 fa 01             	cmp    dl,0x1
c0012898:	77 6d                	ja     c0012907 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001289a:	b8 90 5d 02 c0       	mov    eax,0xc0025d90
c001289f:	eb 66                	jmp    c0012907 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128a1:	80 f9 15             	cmp    cl,0x15
c00128a4:	75 31                	jne    c00128d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00128a6:	b8 a0 5d 02 c0       	mov    eax,0xc0025da0
c00128ab:	80 fa 01             	cmp    dl,0x1
c00128ae:	74 57                	je     c0012907 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128b0:	b8 45 40 02 c0       	mov    eax,0xc0024045
c00128b5:	80 fa 13             	cmp    dl,0x13
c00128b8:	76 0c                	jbe    c00128c6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00128ba:	80 fa 30             	cmp    dl,0x30
c00128bd:	75 48                	jne    c0012907 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128bf:	b8 c0 5d 02 c0       	mov    eax,0xc0025dc0
c00128c4:	eb 41                	jmp    c0012907 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128c6:	b9 04 00 09 00       	mov    ecx,0x90004
c00128cb:	0f a3 d1             	bt     ecx,edx
c00128ce:	73 37                	jae    c0012907 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128d0:	b8 b0 5d 02 c0       	mov    eax,0xc0025db0
c00128d5:	eb 30                	jmp    c0012907 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128d7:	b8 45 40 02 c0       	mov    eax,0xc0024045
c00128dc:	80 f9 16             	cmp    cl,0x16
c00128df:	75 26                	jne    c0012907 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128e1:	b8 d0 5d 02 c0       	mov    eax,0xc0025dd0
c00128e6:	84 d2                	test   dl,dl
c00128e8:	74 1d                	je     c0012907 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128ea:	b8 45 40 02 c0       	mov    eax,0xc0024045
c00128ef:	80 fa 30             	cmp    dl,0x30
c00128f2:	75 13                	jne    c0012907 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128f4:	b8 e0 5d 02 c0       	mov    eax,0xc0025de0
c00128f9:	eb 0c                	jmp    c0012907 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128fb:	b8 00 5d 02 c0       	mov    eax,0xc0025d00
c0012900:	eb 05                	jmp    c0012907 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012902:	b8 70 5d 02 c0       	mov    eax,0xc0025d70
c0012907:	5b                   	pop    ebx
c0012908:	5e                   	pop    esi
c0012909:	5f                   	pop    edi
c001290a:	5d                   	pop    ebp
c001290b:	c3                   	ret    

c001290c <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001290c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012910:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012914:	80 f9 04             	cmp    cl,0x4
c0012917:	75 6b                	jne    c0012984 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012919:	b8 60 5b 02 c0       	mov    eax,0xc0025b60
c001291e:	80 fa 01             	cmp    dl,0x1
c0012921:	0f 86 92 02 00 00    	jbe    c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012927:	b8 70 5b 02 c0       	mov    eax,0xc0025b70
c001292c:	80 fa 02             	cmp    dl,0x2
c001292f:	0f 84 84 02 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012935:	b8 80 5b 02 c0       	mov    eax,0xc0025b80
c001293a:	80 fa 03             	cmp    dl,0x3
c001293d:	0f 84 76 02 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012943:	b8 90 5b 02 c0       	mov    eax,0xc0025b90
c0012948:	80 fa 04             	cmp    dl,0x4
c001294b:	0f 84 68 02 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012951:	b8 a0 5b 02 c0       	mov    eax,0xc0025ba0
c0012956:	80 fa 05             	cmp    dl,0x5
c0012959:	0f 84 5a 02 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001295f:	b8 80 5b 02 c0       	mov    eax,0xc0025b80
c0012964:	80 fa 07             	cmp    dl,0x7
c0012967:	0f 84 4c 02 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001296d:	83 ea 08             	sub    edx,0x8
c0012970:	b8 45 40 02 c0       	mov    eax,0xc0024045
c0012975:	80 fa 01             	cmp    dl,0x1
c0012978:	0f 87 3b 02 00 00    	ja     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001297e:	b8 b0 5b 02 c0       	mov    eax,0xc0025bb0
c0012983:	c3                   	ret    
c0012984:	80 f9 05             	cmp    cl,0x5
c0012987:	75 45                	jne    c00129ce <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0012989:	8d 4a ff             	lea    ecx,[edx-0x1]
c001298c:	b8 c0 5b 02 c0       	mov    eax,0xc0025bc0
c0012991:	80 f9 02             	cmp    cl,0x2
c0012994:	0f 86 1f 02 00 00    	jbe    c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001299a:	80 fa 04             	cmp    dl,0x4
c001299d:	0f 84 f3 01 00 00    	je     c0012b96 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00129a3:	80 fa 07             	cmp    dl,0x7
c00129a6:	0f 84 0d 02 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129ac:	b8 d0 5b 02 c0       	mov    eax,0xc0025bd0
c00129b1:	80 fa 08             	cmp    dl,0x8
c00129b4:	0f 84 ff 01 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129ba:	b8 45 40 02 c0       	mov    eax,0xc0024045
c00129bf:	80 fa 09             	cmp    dl,0x9
c00129c2:	0f 85 f1 01 00 00    	jne    c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129c8:	b8 e0 5b 02 c0       	mov    eax,0xc0025be0
c00129cd:	c3                   	ret    
c00129ce:	80 f9 06             	cmp    cl,0x6
c00129d1:	0f 85 85 01 00 00    	jne    c0012b5c <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00129d7:	b8 f0 5b 02 c0       	mov    eax,0xc0025bf0
c00129dc:	80 fa 01             	cmp    dl,0x1
c00129df:	0f 84 d4 01 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129e5:	8d 42 fb             	lea    eax,[edx-0x5]
c00129e8:	3c 01                	cmp    al,0x1
c00129ea:	0f 86 ac 01 00 00    	jbe    c0012b9c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00129f0:	80 fa 03             	cmp    dl,0x3
c00129f3:	0f 84 a3 01 00 00    	je     c0012b9c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00129f9:	8d 4a f9             	lea    ecx,[edx-0x7]
c00129fc:	b8 10 5c 02 c0       	mov    eax,0xc0025c10
c0012a01:	80 f9 01             	cmp    cl,0x1
c0012a04:	0f 86 af 01 00 00    	jbe    c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a0a:	80 fa 09             	cmp    dl,0x9
c0012a0d:	0f 84 8f 01 00 00    	je     c0012ba2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0012a13:	8d 4a f6             	lea    ecx,[edx-0xa]
c0012a16:	80 f9 01             	cmp    cl,0x1
c0012a19:	0f 86 9a 01 00 00    	jbe    c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a1f:	b8 20 5c 02 c0       	mov    eax,0xc0025c20
c0012a24:	80 fa 0d             	cmp    dl,0xd
c0012a27:	0f 84 8c 01 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a2d:	b8 30 5c 02 c0       	mov    eax,0xc0025c30
c0012a32:	80 fa 0e             	cmp    dl,0xe
c0012a35:	0f 84 7e 01 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a3b:	b8 40 5c 02 c0       	mov    eax,0xc0025c40
c0012a40:	80 fa 0f             	cmp    dl,0xf
c0012a43:	0f 84 70 01 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a49:	b8 20 5c 02 c0       	mov    eax,0xc0025c20
c0012a4e:	80 fa 15             	cmp    dl,0x15
c0012a51:	0f 84 62 01 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a57:	8d 4a ea             	lea    ecx,[edx-0x16]
c0012a5a:	b8 40 5c 02 c0       	mov    eax,0xc0025c40
c0012a5f:	80 f9 01             	cmp    cl,0x1
c0012a62:	0f 86 51 01 00 00    	jbe    c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a68:	80 fa 1a             	cmp    dl,0x1a
c0012a6b:	0f 84 37 01 00 00    	je     c0012ba8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0012a71:	80 fa 1c             	cmp    dl,0x1c
c0012a74:	0f 84 34 01 00 00    	je     c0012bae <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0012a7a:	80 fa 1d             	cmp    dl,0x1d
c0012a7d:	0f 84 36 01 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a83:	b8 70 5c 02 c0       	mov    eax,0xc0025c70
c0012a88:	80 fa 25             	cmp    dl,0x25
c0012a8b:	0f 84 28 01 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a91:	8d 4a da             	lea    ecx,[edx-0x26]
c0012a94:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0012a99:	80 f9 01             	cmp    cl,0x1
c0012a9c:	0f 86 17 01 00 00    	jbe    c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012aa2:	b8 80 5c 02 c0       	mov    eax,0xc0025c80
c0012aa7:	80 fa 2a             	cmp    dl,0x2a
c0012aaa:	0f 84 09 01 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ab0:	b8 70 5c 02 c0       	mov    eax,0xc0025c70
c0012ab5:	80 fa 2c             	cmp    dl,0x2c
c0012ab8:	0f 84 fb 00 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012abe:	b8 80 5c 02 c0       	mov    eax,0xc0025c80
c0012ac3:	80 fa 2d             	cmp    dl,0x2d
c0012ac6:	0f 84 ed 00 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012acc:	b8 50 5c 02 c0       	mov    eax,0xc0025c50
c0012ad1:	80 fa 2e             	cmp    dl,0x2e
c0012ad4:	0f 84 df 00 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ada:	b8 70 5c 02 c0       	mov    eax,0xc0025c70
c0012adf:	80 fa 2f             	cmp    dl,0x2f
c0012ae2:	0f 84 d1 00 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ae8:	8d 4a cb             	lea    ecx,[edx-0x35]
c0012aeb:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0012af0:	80 f9 01             	cmp    cl,0x1
c0012af3:	0f 86 c0 00 00 00    	jbe    c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012af9:	b8 90 5c 02 c0       	mov    eax,0xc0025c90
c0012afe:	80 fa 37             	cmp    dl,0x37
c0012b01:	0f 84 b2 00 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b07:	b8 a0 5c 02 c0       	mov    eax,0xc0025ca0
c0012b0c:	80 fa 3a             	cmp    dl,0x3a
c0012b0f:	0f 84 a4 00 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b15:	b8 b0 5c 02 c0       	mov    eax,0xc0025cb0
c0012b1a:	80 fa 3c             	cmp    dl,0x3c
c0012b1d:	0f 84 96 00 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b23:	b8 c0 5c 02 c0       	mov    eax,0xc0025cc0
c0012b28:	80 fa 3d             	cmp    dl,0x3d
c0012b2b:	0f 84 88 00 00 00    	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b31:	b8 a0 5c 02 c0       	mov    eax,0xc0025ca0
c0012b36:	80 fa 3e             	cmp    dl,0x3e
c0012b39:	74 7e                	je     c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b3b:	8d 42 bb             	lea    eax,[edx-0x45]
c0012b3e:	3c 01                	cmp    al,0x1
c0012b40:	76 72                	jbe    c0012bb4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012b42:	80 fa 3f             	cmp    dl,0x3f
c0012b45:	74 6d                	je     c0012bb4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012b47:	80 fa 4a             	cmp    dl,0x4a
c0012b4a:	74 0a                	je     c0012b56 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0012b4c:	b8 45 40 02 c0       	mov    eax,0xc0024045
c0012b51:	80 fa 4d             	cmp    dl,0x4d
c0012b54:	75 63                	jne    c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b56:	b8 90 5c 02 c0       	mov    eax,0xc0025c90
c0012b5b:	c3                   	ret    
c0012b5c:	b8 45 40 02 c0       	mov    eax,0xc0024045
c0012b61:	80 f9 0b             	cmp    cl,0xb
c0012b64:	75 0a                	jne    c0012b70 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0012b66:	fe ca                	dec    dl
c0012b68:	75 4f                	jne    c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b6a:	b8 d0 5c 02 c0       	mov    eax,0xc0025cd0
c0012b6f:	c3                   	ret    
c0012b70:	80 f9 0f             	cmp    cl,0xf
c0012b73:	75 44                	jne    c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b75:	b8 e0 5c 02 c0       	mov    eax,0xc0025ce0
c0012b7a:	80 fa 02             	cmp    dl,0x2
c0012b7d:	76 3a                	jbe    c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b7f:	8d 42 fd             	lea    eax,[edx-0x3]
c0012b82:	3c 01                	cmp    al,0x1
c0012b84:	76 0a                	jbe    c0012b90 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0012b86:	b8 45 40 02 c0       	mov    eax,0xc0024045
c0012b8b:	80 fa 06             	cmp    dl,0x6
c0012b8e:	75 29                	jne    c0012bb9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b90:	b8 f0 5c 02 c0       	mov    eax,0xc0025cf0
c0012b95:	c3                   	ret    
c0012b96:	b8 d0 5b 02 c0       	mov    eax,0xc0025bd0
c0012b9b:	c3                   	ret    
c0012b9c:	b8 00 5c 02 c0       	mov    eax,0xc0025c00
c0012ba1:	c3                   	ret    
c0012ba2:	b8 20 5c 02 c0       	mov    eax,0xc0025c20
c0012ba7:	c3                   	ret    
c0012ba8:	b8 50 5c 02 c0       	mov    eax,0xc0025c50
c0012bad:	c3                   	ret    
c0012bae:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0012bb3:	c3                   	ret    
c0012bb4:	b8 b0 5c 02 c0       	mov    eax,0xc0025cb0
c0012bb9:	c3                   	ret    

c0012bba <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0012bba:	60                   	pusha  
c0012bbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012bc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012bc7:	9c                   	pushf  
c0012bc8:	fa                   	cli    
c0012bc9:	0f 09                	wbinvd 
c0012bcb:	0f 30                	wrmsr  
c0012bcd:	9d                   	popf   
c0012bce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012bd2:	89 02                	mov    DWORD PTR [edx],eax
c0012bd4:	61                   	popa   
c0012bd5:	c3                   	ret    

c0012bd6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0012bd6:	60                   	pusha  
c0012bd7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bdb:	9c                   	pushf  
c0012bdc:	fa                   	cli    
c0012bdd:	0f 09                	wbinvd 
c0012bdf:	31 c0                	xor    eax,eax
c0012be1:	31 d2                	xor    edx,edx
c0012be3:	0f 32                	rdmsr  
c0012be5:	9d                   	popf   
c0012be6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012bea:	89 02                	mov    DWORD PTR [edx],eax
c0012bec:	61                   	popa   
c0012bed:	c3                   	ret    

c0012bee <CPU::AMD_K6_writeback(int, int, int)>:
c0012bee:	56                   	push   esi
c0012bef:	53                   	push   ebx
c0012bf0:	83 ec 10             	sub    esp,0x10
c0012bf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012bf7:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0012bfc:	75 5d                	jne    c0012c5b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012bfe:	83 f8 08             	cmp    eax,0x8
c0012c01:	75 09                	jne    c0012c0c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0012c03:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0012c08:	7e 13                	jle    c0012c1d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012c0a:	eb 30                	jmp    c0012c3c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012c0c:	83 f8 06             	cmp    eax,0x6
c0012c0f:	7c 4a                	jl     c0012c5b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012c11:	83 f8 07             	cmp    eax,0x7
c0012c14:	7e 07                	jle    c0012c1d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012c16:	83 f8 09             	cmp    eax,0x9
c0012c19:	74 21                	je     c0012c3c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012c1b:	eb 3e                	jmp    c0012c5b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012c1d:	89 e6                	mov    esi,esp
c0012c1f:	8b 1d 88 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026488
c0012c25:	56                   	push   esi
c0012c26:	c1 eb 15             	shr    ebx,0x15
c0012c29:	68 82 00 00 c0       	push   0xc0000082
c0012c2e:	83 e3 7e             	and    ebx,0x7e
c0012c31:	e8 a0 ff ff ff       	call   c0012bd6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012c36:	56                   	push   esi
c0012c37:	6a 00                	push   0x0
c0012c39:	53                   	push   ebx
c0012c3a:	eb 12                	jmp    c0012c4e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0012c3c:	89 e3                	mov    ebx,esp
c0012c3e:	53                   	push   ebx
c0012c3f:	68 82 00 00 c0       	push   0xc0000082
c0012c44:	e8 8d ff ff ff       	call   c0012bd6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012c49:	53                   	push   ebx
c0012c4a:	6a 00                	push   0x0
c0012c4c:	6a 00                	push   0x0
c0012c4e:	68 82 00 00 c0       	push   0xc0000082
c0012c53:	e8 62 ff ff ff       	call   c0012bba <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0012c58:	83 c4 18             	add    esp,0x18
c0012c5b:	83 c4 10             	add    esp,0x10
c0012c5e:	5b                   	pop    ebx
c0012c5f:	5e                   	pop    esi
c0012c60:	c3                   	ret    
c0012c61:	90                   	nop

c0012c62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0012c62:	55                   	push   ebp
c0012c63:	57                   	push   edi
c0012c64:	56                   	push   esi
c0012c65:	53                   	push   ebx
c0012c66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c6a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012c6e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012c72:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0012c76:	39 05 00 5e 02 c0    	cmp    DWORD PTR ds:0xc0025e00,eax
c0012c7c:	75 23                	jne    c0012ca1 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0012c7e:	a1 4c 6f 02 c0       	mov    eax,ds:0xc0026f4c
c0012c83:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012c87:	89 06                	mov    DWORD PTR [esi],eax
c0012c89:	a1 48 6f 02 c0       	mov    eax,ds:0xc0026f48
c0012c8e:	89 07                	mov    DWORD PTR [edi],eax
c0012c90:	a1 44 6f 02 c0       	mov    eax,ds:0xc0026f44
c0012c95:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012c98:	a1 40 6f 02 c0       	mov    eax,ds:0xc0026f40
c0012c9d:	89 02                	mov    DWORD PTR [edx],eax
c0012c9f:	eb 3f                	jmp    c0012ce0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0012ca1:	31 c9                	xor    ecx,ecx
c0012ca3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012ca7:	0f a2                	cpuid  
c0012ca9:	89 06                	mov    DWORD PTR [esi],eax
c0012cab:	89 1f                	mov    DWORD PTR [edi],ebx
c0012cad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012cb1:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0012cb4:	89 10                	mov    DWORD PTR [eax],edx
c0012cb6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012cba:	a3 00 5e 02 c0       	mov    ds:0xc0025e00,eax
c0012cbf:	8b 06                	mov    eax,DWORD PTR [esi]
c0012cc1:	a3 4c 6f 02 c0       	mov    ds:0xc0026f4c,eax
c0012cc6:	8b 07                	mov    eax,DWORD PTR [edi]
c0012cc8:	a3 48 6f 02 c0       	mov    ds:0xc0026f48,eax
c0012ccd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cd0:	a3 44 6f 02 c0       	mov    ds:0xc0026f44,eax
c0012cd5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012cd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cdb:	a3 40 6f 02 c0       	mov    ds:0xc0026f40,eax
c0012ce0:	5b                   	pop    ebx
c0012ce1:	5e                   	pop    esi
c0012ce2:	5f                   	pop    edi
c0012ce3:	5d                   	pop    ebp
c0012ce4:	c3                   	ret    
c0012ce5:	90                   	nop

c0012ce6 <CPU::cpuidCheckEDX(unsigned int)>:
c0012ce6:	83 ec 10             	sub    esp,0x10
c0012ce9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ced:	50                   	push   eax
c0012cee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cf2:	50                   	push   eax
c0012cf3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cf7:	50                   	push   eax
c0012cf8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cfc:	50                   	push   eax
c0012cfd:	6a 01                	push   0x1
c0012cff:	e8 5e ff ff ff       	call   c0012c62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d08:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0012d0c:	0f 95 c0             	setne  al
c0012d0f:	83 c4 24             	add    esp,0x24
c0012d12:	c3                   	ret    
c0012d13:	90                   	nop

c0012d14 <CPU::cpuidCheckECX(unsigned int)>:
c0012d14:	83 ec 10             	sub    esp,0x10
c0012d17:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d1b:	50                   	push   eax
c0012d1c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d20:	50                   	push   eax
c0012d21:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d25:	50                   	push   eax
c0012d26:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d2a:	50                   	push   eax
c0012d2b:	6a 01                	push   0x1
c0012d2d:	e8 30 ff ff ff       	call   c0012c62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d36:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012d3a:	0f 95 c0             	setne  al
c0012d3d:	83 c4 24             	add    esp,0x24
c0012d40:	c3                   	ret    
c0012d41:	90                   	nop

c0012d42 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0012d42:	83 ec 10             	sub    esp,0x10
c0012d45:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d49:	50                   	push   eax
c0012d4a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d4e:	50                   	push   eax
c0012d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d53:	50                   	push   eax
c0012d54:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d58:	50                   	push   eax
c0012d59:	6a 07                	push   0x7
c0012d5b:	e8 02 ff ff ff       	call   c0012c62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d64:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0012d68:	0f 95 c0             	setne  al
c0012d6b:	83 c4 24             	add    esp,0x24
c0012d6e:	c3                   	ret    
c0012d6f:	90                   	nop

c0012d70 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0012d70:	83 ec 10             	sub    esp,0x10
c0012d73:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d77:	50                   	push   eax
c0012d78:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d7c:	50                   	push   eax
c0012d7d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d81:	50                   	push   eax
c0012d82:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d86:	50                   	push   eax
c0012d87:	6a 07                	push   0x7
c0012d89:	e8 d4 fe ff ff       	call   c0012c62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d8e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d92:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012d96:	0f 95 c0             	setne  al
c0012d99:	83 c4 24             	add    esp,0x24
c0012d9c:	c3                   	ret    
c0012d9d:	90                   	nop

c0012d9e <CPU::CPU()>:
c0012d9e:	83 ec 0c             	sub    esp,0xc
c0012da1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012da5:	83 ec 08             	sub    esp,0x8
c0012da8:	68 45 40 02 c0       	push   0xc0024045
c0012dad:	50                   	push   eax
c0012dae:	e8 5b b3 ff ff       	call   c000e10e <Device::Device(char const*)>
c0012db3:	83 c4 10             	add    esp,0x10
c0012db6:	ba 68 42 02 c0       	mov    edx,0xc0024268
c0012dbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dbf:	89 10                	mov    DWORD PTR [eax],edx
c0012dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dc5:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0012dcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dd3:	05 78 01 00 00       	add    eax,0x178
c0012dd8:	83 ec 0c             	sub    esp,0xc
c0012ddb:	50                   	push   eax
c0012ddc:	e8 79 64 ff ff       	call   c000925a <GDT::GDT()>
c0012de1:	83 c4 10             	add    esp,0x10
c0012de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012de8:	05 7c 09 00 00       	add    eax,0x97c
c0012ded:	83 ec 0c             	sub    esp,0xc
c0012df0:	50                   	push   eax
c0012df1:	e8 ba 66 ff ff       	call   c00094b0 <IDT::IDT()>
c0012df6:	83 c4 10             	add    esp,0x10
c0012df9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dfd:	05 7c 11 00 00       	add    eax,0x117c
c0012e02:	83 ec 0c             	sub    esp,0xc
c0012e05:	50                   	push   eax
c0012e06:	e8 29 82 ff ff       	call   c000b034 <TSS::TSS()>
c0012e0b:	83 c4 10             	add    esp,0x10
c0012e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e12:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0012e19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e1d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0012e27:	90                   	nop
c0012e28:	83 c4 0c             	add    esp,0xc
c0012e2b:	c3                   	ret    

c0012e2c <CPU::displayFeatures()>:
c0012e2c:	c3                   	ret    
c0012e2d:	90                   	nop

c0012e2e <CPU::detectFeatures()>:
c0012e2e:	55                   	push   ebp
c0012e2f:	57                   	push   edi
c0012e30:	56                   	push   esi
c0012e31:	53                   	push   ebx
c0012e32:	83 ec 50             	sub    esp,0x50
c0012e35:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0012e39:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0012e43:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0012e4a:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0012e50:	6a 0d                	push   0xd
c0012e52:	6a 00                	push   0x0
c0012e54:	55                   	push   ebp
c0012e55:	e8 2a d8 fe ff       	call   c0000684 <memset>
c0012e5a:	83 c4 10             	add    esp,0x10
c0012e5d:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0012e62:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0012e69:	0f 84 22 09 00 00    	je     c0013791 <CPU::detectFeatures()+0x963>
c0012e6f:	83 ec 0c             	sub    esp,0xc
c0012e72:	89 ef                	mov    edi,ebp
c0012e74:	6a 10                	push   0x10
c0012e76:	e8 6b fe ff ff       	call   c0012ce6 <CPU::cpuidCheckEDX(unsigned int)>
c0012e7b:	83 e0 01             	and    eax,0x1
c0012e7e:	8d 14 00             	lea    edx,[eax+eax*1]
c0012e81:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e87:	83 e0 fd             	and    eax,0xfffffffd
c0012e8a:	09 d0                	or     eax,edx
c0012e8c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e92:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0012e99:	e8 48 fe ff ff       	call   c0012ce6 <CPU::cpuidCheckEDX(unsigned int)>
c0012e9e:	83 e0 01             	and    eax,0x1
c0012ea1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0012ea8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012eae:	83 e0 fb             	and    eax,0xfffffffb
c0012eb1:	09 d0                	or     eax,edx
c0012eb3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012eb9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012ec0:	e8 21 fe ff ff       	call   c0012ce6 <CPU::cpuidCheckEDX(unsigned int)>
c0012ec5:	83 e0 01             	and    eax,0x1
c0012ec8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0012ecf:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012ed5:	83 e0 f7             	and    eax,0xfffffff7
c0012ed8:	09 d0                	or     eax,edx
c0012eda:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012ee0:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0012ee7:	e8 fa fd ff ff       	call   c0012ce6 <CPU::cpuidCheckEDX(unsigned int)>
c0012eec:	83 e0 01             	and    eax,0x1
c0012eef:	c1 e0 04             	shl    eax,0x4
c0012ef2:	88 c2                	mov    dl,al
c0012ef4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012efa:	83 e0 ef             	and    eax,0xffffffef
c0012efd:	09 d0                	or     eax,edx
c0012eff:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012f05:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0012f0c:	e8 d5 fd ff ff       	call   c0012ce6 <CPU::cpuidCheckEDX(unsigned int)>
c0012f11:	83 e0 01             	and    eax,0x1
c0012f14:	c1 e0 05             	shl    eax,0x5
c0012f17:	88 c2                	mov    dl,al
c0012f19:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012f1f:	83 e0 df             	and    eax,0xffffffdf
c0012f22:	09 d0                	or     eax,edx
c0012f24:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012f2a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0012f31:	e8 b0 fd ff ff       	call   c0012ce6 <CPU::cpuidCheckEDX(unsigned int)>
c0012f36:	83 e0 01             	and    eax,0x1
c0012f39:	8d 14 00             	lea    edx,[eax+eax*1]
c0012f3c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0012f42:	83 e0 fd             	and    eax,0xfffffffd
c0012f45:	09 d0                	or     eax,edx
c0012f47:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0012f4d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0012f54:	e8 8d fd ff ff       	call   c0012ce6 <CPU::cpuidCheckEDX(unsigned int)>
c0012f59:	83 e0 01             	and    eax,0x1
c0012f5c:	c1 e0 06             	shl    eax,0x6
c0012f5f:	88 c2                	mov    dl,al
c0012f61:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0012f67:	83 e0 bf             	and    eax,0xffffffbf
c0012f6a:	09 d0                	or     eax,edx
c0012f6c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0012f72:	58                   	pop    eax
c0012f73:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f77:	50                   	push   eax
c0012f78:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f7c:	50                   	push   eax
c0012f7d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0012f81:	56                   	push   esi
c0012f82:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f86:	50                   	push   eax
c0012f87:	6a 00                	push   0x0
c0012f89:	e8 d4 fc ff ff       	call   c0012c62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012f8e:	b8 04 00 00 00       	mov    eax,0x4
c0012f93:	89 c1                	mov    ecx,eax
c0012f95:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f97:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0012f9d:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012fa1:	89 c1                	mov    ecx,eax
c0012fa3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012fa5:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0012fab:	8d 74 24 38          	lea    esi,[esp+0x38]
c0012faf:	89 c1                	mov    ecx,eax
c0012fb1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012fb3:	83 c4 18             	add    esp,0x18
c0012fb6:	68 f0 3e 02 c0       	push   0xc0023ef0
c0012fbb:	55                   	push   ebp
c0012fbc:	e8 0b d8 fe ff       	call   c00007cc <strcmp>
c0012fc1:	83 c4 10             	add    esp,0x10
c0012fc4:	85 c0                	test   eax,eax
c0012fc6:	75 0f                	jne    c0012fd7 <CPU::detectFeatures()+0x1a9>
c0012fc8:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0012fd2:	e9 22 02 00 00       	jmp    c00131f9 <CPU::detectFeatures()+0x3cb>
c0012fd7:	50                   	push   eax
c0012fd8:	50                   	push   eax
c0012fd9:	68 fd 3e 02 c0       	push   0xc0023efd
c0012fde:	55                   	push   ebp
c0012fdf:	e8 e8 d7 fe ff       	call   c00007cc <strcmp>
c0012fe4:	83 c4 10             	add    esp,0x10
c0012fe7:	85 c0                	test   eax,eax
c0012fe9:	74 dd                	je     c0012fc8 <CPU::detectFeatures()+0x19a>
c0012feb:	50                   	push   eax
c0012fec:	50                   	push   eax
c0012fed:	68 0a 3f 02 c0       	push   0xc0023f0a
c0012ff2:	55                   	push   ebp
c0012ff3:	e8 d4 d7 fe ff       	call   c00007cc <strcmp>
c0012ff8:	83 c4 10             	add    esp,0x10
c0012ffb:	85 c0                	test   eax,eax
c0012ffd:	74 2a                	je     c0013029 <CPU::detectFeatures()+0x1fb>
c0012fff:	50                   	push   eax
c0013000:	50                   	push   eax
c0013001:	68 17 3f 02 c0       	push   0xc0023f17
c0013006:	55                   	push   ebp
c0013007:	e8 c0 d7 fe ff       	call   c00007cc <strcmp>
c001300c:	83 c4 10             	add    esp,0x10
c001300f:	85 c0                	test   eax,eax
c0013011:	74 16                	je     c0013029 <CPU::detectFeatures()+0x1fb>
c0013013:	50                   	push   eax
c0013014:	50                   	push   eax
c0013015:	68 24 3f 02 c0       	push   0xc0023f24
c001301a:	55                   	push   ebp
c001301b:	e8 ac d7 fe ff       	call   c00007cc <strcmp>
c0013020:	83 c4 10             	add    esp,0x10
c0013023:	85 c0                	test   eax,eax
c0013025:	74 48                	je     c001306f <CPU::detectFeatures()+0x241>
c0013027:	eb 0f                	jmp    c0013038 <CPU::detectFeatures()+0x20a>
c0013029:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013033:	e9 c1 01 00 00       	jmp    c00131f9 <CPU::detectFeatures()+0x3cb>
c0013038:	50                   	push   eax
c0013039:	50                   	push   eax
c001303a:	68 31 3f 02 c0       	push   0xc0023f31
c001303f:	55                   	push   ebp
c0013040:	e8 87 d7 fe ff       	call   c00007cc <strcmp>
c0013045:	83 c4 10             	add    esp,0x10
c0013048:	85 c0                	test   eax,eax
c001304a:	74 23                	je     c001306f <CPU::detectFeatures()+0x241>
c001304c:	57                   	push   edi
c001304d:	57                   	push   edi
c001304e:	68 3e 3f 02 c0       	push   0xc0023f3e
c0013053:	55                   	push   ebp
c0013054:	e8 73 d7 fe ff       	call   c00007cc <strcmp>
c0013059:	83 c4 10             	add    esp,0x10
c001305c:	85 c0                	test   eax,eax
c001305e:	75 1e                	jne    c001307e <CPU::detectFeatures()+0x250>
c0013060:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001306a:	e9 8a 01 00 00       	jmp    c00131f9 <CPU::detectFeatures()+0x3cb>
c001306f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013079:	e9 7b 01 00 00       	jmp    c00131f9 <CPU::detectFeatures()+0x3cb>
c001307e:	56                   	push   esi
c001307f:	56                   	push   esi
c0013080:	68 4b 3f 02 c0       	push   0xc0023f4b
c0013085:	55                   	push   ebp
c0013086:	e8 41 d7 fe ff       	call   c00007cc <strcmp>
c001308b:	83 c4 10             	add    esp,0x10
c001308e:	85 c0                	test   eax,eax
c0013090:	75 0f                	jne    c00130a1 <CPU::detectFeatures()+0x273>
c0013092:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001309c:	e9 58 01 00 00       	jmp    c00131f9 <CPU::detectFeatures()+0x3cb>
c00130a1:	51                   	push   ecx
c00130a2:	51                   	push   ecx
c00130a3:	68 0a 3f 02 c0       	push   0xc0023f0a
c00130a8:	55                   	push   ebp
c00130a9:	e8 1e d7 fe ff       	call   c00007cc <strcmp>
c00130ae:	83 c4 10             	add    esp,0x10
c00130b1:	85 c0                	test   eax,eax
c00130b3:	75 0f                	jne    c00130c4 <CPU::detectFeatures()+0x296>
c00130b5:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00130bf:	e9 35 01 00 00       	jmp    c00131f9 <CPU::detectFeatures()+0x3cb>
c00130c4:	52                   	push   edx
c00130c5:	52                   	push   edx
c00130c6:	68 58 3f 02 c0       	push   0xc0023f58
c00130cb:	55                   	push   ebp
c00130cc:	e8 fb d6 fe ff       	call   c00007cc <strcmp>
c00130d1:	83 c4 10             	add    esp,0x10
c00130d4:	85 c0                	test   eax,eax
c00130d6:	75 0f                	jne    c00130e7 <CPU::detectFeatures()+0x2b9>
c00130d8:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00130e2:	e9 12 01 00 00       	jmp    c00131f9 <CPU::detectFeatures()+0x3cb>
c00130e7:	50                   	push   eax
c00130e8:	50                   	push   eax
c00130e9:	68 65 3f 02 c0       	push   0xc0023f65
c00130ee:	55                   	push   ebp
c00130ef:	e8 d8 d6 fe ff       	call   c00007cc <strcmp>
c00130f4:	83 c4 10             	add    esp,0x10
c00130f7:	85 c0                	test   eax,eax
c00130f9:	75 0f                	jne    c001310a <CPU::detectFeatures()+0x2dc>
c00130fb:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013105:	e9 ef 00 00 00       	jmp    c00131f9 <CPU::detectFeatures()+0x3cb>
c001310a:	50                   	push   eax
c001310b:	50                   	push   eax
c001310c:	68 72 3f 02 c0       	push   0xc0023f72
c0013111:	55                   	push   ebp
c0013112:	e8 b5 d6 fe ff       	call   c00007cc <strcmp>
c0013117:	83 c4 10             	add    esp,0x10
c001311a:	85 c0                	test   eax,eax
c001311c:	75 0f                	jne    c001312d <CPU::detectFeatures()+0x2ff>
c001311e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013128:	e9 cc 00 00 00       	jmp    c00131f9 <CPU::detectFeatures()+0x3cb>
c001312d:	50                   	push   eax
c001312e:	50                   	push   eax
c001312f:	68 7f 3f 02 c0       	push   0xc0023f7f
c0013134:	55                   	push   ebp
c0013135:	e8 92 d6 fe ff       	call   c00007cc <strcmp>
c001313a:	83 c4 10             	add    esp,0x10
c001313d:	85 c0                	test   eax,eax
c001313f:	75 0f                	jne    c0013150 <CPU::detectFeatures()+0x322>
c0013141:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001314b:	e9 a9 00 00 00       	jmp    c00131f9 <CPU::detectFeatures()+0x3cb>
c0013150:	50                   	push   eax
c0013151:	50                   	push   eax
c0013152:	68 8c 3f 02 c0       	push   0xc0023f8c
c0013157:	55                   	push   ebp
c0013158:	e8 6f d6 fe ff       	call   c00007cc <strcmp>
c001315d:	83 c4 10             	add    esp,0x10
c0013160:	85 c0                	test   eax,eax
c0013162:	75 0f                	jne    c0013173 <CPU::detectFeatures()+0x345>
c0013164:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001316e:	e9 86 00 00 00       	jmp    c00131f9 <CPU::detectFeatures()+0x3cb>
c0013173:	50                   	push   eax
c0013174:	50                   	push   eax
c0013175:	68 99 3f 02 c0       	push   0xc0023f99
c001317a:	55                   	push   ebp
c001317b:	e8 4c d6 fe ff       	call   c00007cc <strcmp>
c0013180:	83 c4 10             	add    esp,0x10
c0013183:	85 c0                	test   eax,eax
c0013185:	75 0c                	jne    c0013193 <CPU::detectFeatures()+0x365>
c0013187:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013191:	eb 66                	jmp    c00131f9 <CPU::detectFeatures()+0x3cb>
c0013193:	50                   	push   eax
c0013194:	50                   	push   eax
c0013195:	68 a6 3f 02 c0       	push   0xc0023fa6
c001319a:	55                   	push   ebp
c001319b:	e8 2c d6 fe ff       	call   c00007cc <strcmp>
c00131a0:	83 c4 10             	add    esp,0x10
c00131a3:	85 c0                	test   eax,eax
c00131a5:	75 0c                	jne    c00131b3 <CPU::detectFeatures()+0x385>
c00131a7:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00131b1:	eb 46                	jmp    c00131f9 <CPU::detectFeatures()+0x3cb>
c00131b3:	57                   	push   edi
c00131b4:	57                   	push   edi
c00131b5:	68 b3 3f 02 c0       	push   0xc0023fb3
c00131ba:	55                   	push   ebp
c00131bb:	e8 0c d6 fe ff       	call   c00007cc <strcmp>
c00131c0:	83 c4 10             	add    esp,0x10
c00131c3:	85 c0                	test   eax,eax
c00131c5:	74 e0                	je     c00131a7 <CPU::detectFeatures()+0x379>
c00131c7:	56                   	push   esi
c00131c8:	56                   	push   esi
c00131c9:	68 c0 3f 02 c0       	push   0xc0023fc0
c00131ce:	55                   	push   ebp
c00131cf:	e8 f8 d5 fe ff       	call   c00007cc <strcmp>
c00131d4:	83 c4 10             	add    esp,0x10
c00131d7:	85 c0                	test   eax,eax
c00131d9:	74 cc                	je     c00131a7 <CPU::detectFeatures()+0x379>
c00131db:	51                   	push   ecx
c00131dc:	51                   	push   ecx
c00131dd:	68 cd 3f 02 c0       	push   0xc0023fcd
c00131e2:	55                   	push   ebp
c00131e3:	e8 e4 d5 fe ff       	call   c00007cc <strcmp>
c00131e8:	83 c4 10             	add    esp,0x10
c00131eb:	85 c0                	test   eax,eax
c00131ed:	74 b8                	je     c00131a7 <CPU::detectFeatures()+0x379>
c00131ef:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00131f9:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00131fe:	0f 86 be 00 00 00    	jbe    c00132c2 <CPU::detectFeatures()+0x494>
c0013204:	83 ec 0c             	sub    esp,0xc
c0013207:	68 80 00 00 00       	push   0x80
c001320c:	e8 31 fb ff ff       	call   c0012d42 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013211:	83 e0 01             	and    eax,0x1
c0013214:	c1 e0 06             	shl    eax,0x6
c0013217:	88 c2                	mov    dl,al
c0013219:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001321f:	83 e0 bf             	and    eax,0xffffffbf
c0013222:	09 d0                	or     eax,edx
c0013224:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001322a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013231:	e8 0c fb ff ff       	call   c0012d42 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013236:	83 e0 01             	and    eax,0x1
c0013239:	c1 e0 04             	shl    eax,0x4
c001323c:	88 c2                	mov    dl,al
c001323e:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013244:	83 e0 ef             	and    eax,0xffffffef
c0013247:	09 d0                	or     eax,edx
c0013249:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001324f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013256:	e8 e7 fa ff ff       	call   c0012d42 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001325b:	c1 e0 07             	shl    eax,0x7
c001325e:	88 c2                	mov    dl,al
c0013260:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013266:	83 e0 7f             	and    eax,0x7f
c0013269:	09 d0                	or     eax,edx
c001326b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013271:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013278:	e8 f3 fa ff ff       	call   c0012d70 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001327d:	83 e0 01             	and    eax,0x1
c0013280:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013287:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001328d:	83 e0 f7             	and    eax,0xfffffff7
c0013290:	09 d0                	or     eax,edx
c0013292:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013298:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001329f:	e8 cc fa ff ff       	call   c0012d70 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00132a4:	83 c4 10             	add    esp,0x10
c00132a7:	83 e0 01             	and    eax,0x1
c00132aa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00132b1:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00132b7:	83 e0 fb             	and    eax,0xfffffffb
c00132ba:	09 d0                	or     eax,edx
c00132bc:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00132c2:	83 ec 0c             	sub    esp,0xc
c00132c5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00132c9:	50                   	push   eax
c00132ca:	8d 44 24 28          	lea    eax,[esp+0x28]
c00132ce:	50                   	push   eax
c00132cf:	8d 74 24 28          	lea    esi,[esp+0x28]
c00132d3:	56                   	push   esi
c00132d4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00132d8:	50                   	push   eax
c00132d9:	6a 01                	push   0x1
c00132db:	e8 82 f9 ff ff       	call   c0012c62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00132e0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00132e4:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00132ea:	88 ca                	mov    dl,cl
c00132ec:	83 e0 f0             	and    eax,0xfffffff0
c00132ef:	83 e2 0f             	and    edx,0xf
c00132f2:	09 d0                	or     eax,edx
c00132f4:	88 ca                	mov    dl,cl
c00132f6:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00132fc:	c0 ea 04             	shr    dl,0x4
c00132ff:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0013303:	0f b6 c2             	movzx  eax,dl
c0013306:	83 c4 20             	add    esp,0x20
c0013309:	c1 e0 06             	shl    eax,0x6
c001330c:	89 c7                	mov    edi,eax
c001330e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013314:	66 25 3f c0          	and    ax,0xc03f
c0013318:	09 f8                	or     eax,edi
c001331a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0013321:	89 c8                	mov    eax,ecx
c0013323:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c001332a:	c1 e8 08             	shr    eax,0x8
c001332d:	83 e5 3f             	and    ebp,0x3f
c0013330:	83 e0 0f             	and    eax,0xf
c0013333:	89 c7                	mov    edi,eax
c0013335:	c1 e7 06             	shl    edi,0x6
c0013338:	09 ef                	or     edi,ebp
c001333a:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0013341:	89 fa                	mov    edx,edi
c0013343:	83 e5 c0             	and    ebp,0xffffffc0
c0013346:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001334c:	88 c2                	mov    dl,al
c001334e:	c0 ea 02             	shr    dl,0x2
c0013351:	89 d7                	mov    edi,edx
c0013353:	09 ef                	or     edi,ebp
c0013355:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001335b:	89 fa                	mov    edx,edi
c001335d:	83 e5 cf             	and    ebp,0xffffffcf
c0013360:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0013366:	89 cf                	mov    edi,ecx
c0013368:	c1 ef 0c             	shr    edi,0xc
c001336b:	83 e7 03             	and    edi,0x3
c001336e:	c1 e7 04             	shl    edi,0x4
c0013371:	09 ef                	or     edi,ebp
c0013373:	3c 06                	cmp    al,0x6
c0013375:	89 fa                	mov    edx,edi
c0013377:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001337d:	74 04                	je     c0013383 <CPU::detectFeatures()+0x555>
c001337f:	3c 0f                	cmp    al,0xf
c0013381:	75 5c                	jne    c00133df <CPU::detectFeatures()+0x5b1>
c0013383:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0013387:	89 cf                	mov    edi,ecx
c0013389:	c1 ef 10             	shr    edi,0x10
c001338c:	c1 e7 04             	shl    edi,0x4
c001338f:	09 fa                	or     edx,edi
c0013391:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0013397:	0f b6 d2             	movzx  edx,dl
c001339a:	66 81 e7 3f c0       	and    di,0xc03f
c001339f:	c1 e2 06             	shl    edx,0x6
c00133a2:	09 fa                	or     edx,edi
c00133a4:	3c 0f                	cmp    al,0xf
c00133a6:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00133ad:	75 30                	jne    c00133df <CPU::detectFeatures()+0x5b1>
c00133af:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00133b5:	c1 e9 14             	shr    ecx,0x14
c00133b8:	83 e0 3f             	and    eax,0x3f
c00133bb:	83 c1 0f             	add    ecx,0xf
c00133be:	88 ca                	mov    dl,cl
c00133c0:	c0 e9 02             	shr    cl,0x2
c00133c3:	c1 e2 06             	shl    edx,0x6
c00133c6:	09 d0                	or     eax,edx
c00133c8:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00133ce:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00133d4:	83 e0 c0             	and    eax,0xffffffc0
c00133d7:	09 c1                	or     ecx,eax
c00133d9:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00133df:	83 ec 0c             	sub    esp,0xc
c00133e2:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00133e9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00133ed:	50                   	push   eax
c00133ee:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00133f2:	55                   	push   ebp
c00133f3:	56                   	push   esi
c00133f4:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00133f8:	57                   	push   edi
c00133f9:	68 00 00 00 80       	push   0x80000000
c00133fe:	e8 5f f8 ff ff       	call   c0012c62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013403:	83 c4 20             	add    esp,0x20
c0013406:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001340e:	76 22                	jbe    c0013432 <CPU::detectFeatures()+0x604>
c0013410:	83 ec 0c             	sub    esp,0xc
c0013413:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013417:	50                   	push   eax
c0013418:	55                   	push   ebp
c0013419:	56                   	push   esi
c001341a:	57                   	push   edi
c001341b:	68 01 00 00 80       	push   0x80000001
c0013420:	e8 3d f8 ff ff       	call   c0012c62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013425:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001342f:	83 c4 20             	add    esp,0x20
c0013432:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0013438:	83 f8 01             	cmp    eax,0x1
c001343b:	75 6f                	jne    c00134ac <CPU::detectFeatures()+0x67e>
c001343d:	51                   	push   ecx
c001343e:	51                   	push   ecx
c001343f:	68 d9 3f 02 c0       	push   0xc0023fd9
c0013444:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013448:	56                   	push   esi
c0013449:	e8 f2 d2 fe ff       	call   c0000740 <strcpy>
c001344e:	5f                   	pop    edi
c001344f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013455:	5d                   	pop    ebp
c0013456:	66 c1 e8 06          	shr    ax,0x6
c001345a:	0f b6 c0             	movzx  eax,al
c001345d:	50                   	push   eax
c001345e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013464:	c1 e8 0e             	shr    eax,0xe
c0013467:	0f b6 c0             	movzx  eax,al
c001346a:	50                   	push   eax
c001346b:	e8 9c f4 ff ff       	call   c001290c <CPU::lookupIntelName(unsigned char, unsigned char)>
c0013470:	5a                   	pop    edx
c0013471:	59                   	pop    ecx
c0013472:	50                   	push   eax
c0013473:	56                   	push   esi
c0013474:	e8 07 d4 fe ff       	call   c0000880 <strcat>
c0013479:	5f                   	pop    edi
c001347a:	5d                   	pop    ebp
c001347b:	56                   	push   esi
c001347c:	53                   	push   ebx
c001347d:	e8 7e ac ff ff       	call   c000e100 <Device::setName(char const*)>
c0013482:	58                   	pop    eax
c0013483:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013489:	5a                   	pop    edx
c001348a:	68 e0 3f 02 c0       	push   0xc0023fe0
c001348f:	50                   	push   eax
c0013490:	e8 37 d3 fe ff       	call   c00007cc <strcmp>
c0013495:	83 c4 10             	add    esp,0x10
c0013498:	85 c0                	test   eax,eax
c001349a:	0f 85 71 03 00 00    	jne    c0013811 <CPU::detectFeatures()+0x9e3>
c00134a0:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00134a7:	e9 65 03 00 00       	jmp    c0013811 <CPU::detectFeatures()+0x9e3>
c00134ac:	83 f8 02             	cmp    eax,0x2
c00134af:	0f 85 b5 00 00 00    	jne    c001356a <CPU::detectFeatures()+0x73c>
c00134b5:	57                   	push   edi
c00134b6:	57                   	push   edi
c00134b7:	68 f2 3f 02 c0       	push   0xc0023ff2
c00134bc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00134c0:	56                   	push   esi
c00134c1:	e8 7a d2 fe ff       	call   c0000740 <strcpy>
c00134c6:	5d                   	pop    ebp
c00134c7:	58                   	pop    eax
c00134c8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00134ce:	66 c1 e8 06          	shr    ax,0x6
c00134d2:	0f b6 c0             	movzx  eax,al
c00134d5:	50                   	push   eax
c00134d6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00134dc:	c1 e8 0e             	shr    eax,0xe
c00134df:	0f b6 c0             	movzx  eax,al
c00134e2:	50                   	push   eax
c00134e3:	e8 90 f2 ff ff       	call   c0012778 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00134e8:	5a                   	pop    edx
c00134e9:	59                   	pop    ecx
c00134ea:	50                   	push   eax
c00134eb:	56                   	push   esi
c00134ec:	e8 8f d3 fe ff       	call   c0000880 <strcat>
c00134f1:	5f                   	pop    edi
c00134f2:	5d                   	pop    ebp
c00134f3:	56                   	push   esi
c00134f4:	53                   	push   ebx
c00134f5:	e8 06 ac ff ff       	call   c000e100 <Device::setName(char const*)>
c00134fa:	58                   	pop    eax
c00134fb:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013501:	5a                   	pop    edx
c0013502:	68 f7 3f 02 c0       	push   0xc0023ff7
c0013507:	50                   	push   eax
c0013508:	e8 bf d2 fe ff       	call   c00007cc <strcmp>
c001350d:	83 c4 10             	add    esp,0x10
c0013510:	85 c0                	test   eax,eax
c0013512:	75 20                	jne    c0013534 <CPU::detectFeatures()+0x706>
c0013514:	8b 15 48 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026448
c001351a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013520:	a8 01                	test   al,0x1
c0013522:	74 10                	je     c0013534 <CPU::detectFeatures()+0x706>
c0013524:	83 e0 fe             	and    eax,0xfffffffe
c0013527:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001352d:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0013534:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001353a:	c1 e8 0e             	shr    eax,0xe
c001353d:	3c 05                	cmp    al,0x5
c001353f:	0f 85 cc 02 00 00    	jne    c0013811 <CPU::detectFeatures()+0x9e3>
c0013545:	56                   	push   esi
c0013546:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001354c:	83 e0 0f             	and    eax,0xf
c001354f:	50                   	push   eax
c0013550:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013556:	66 c1 e8 06          	shr    ax,0x6
c001355a:	0f b6 c0             	movzx  eax,al
c001355d:	50                   	push   eax
c001355e:	6a 05                	push   0x5
c0013560:	e8 89 f6 ff ff       	call   c0012bee <CPU::AMD_K6_writeback(int, int, int)>
c0013565:	e9 1f 02 00 00       	jmp    c0013789 <CPU::detectFeatures()+0x95b>
c001356a:	8d 50 fd             	lea    edx,[eax-0x3]
c001356d:	83 fa 01             	cmp    edx,0x1
c0013570:	76 09                	jbe    c001357b <CPU::detectFeatures()+0x74d>
c0013572:	83 f8 06             	cmp    eax,0x6
c0013575:	0f 85 91 01 00 00    	jne    c001370c <CPU::detectFeatures()+0x8de>
c001357b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013581:	c1 ea 0e             	shr    edx,0xe
c0013584:	80 fa 05             	cmp    dl,0x5
c0013587:	75 7b                	jne    c0013604 <CPU::detectFeatures()+0x7d6>
c0013589:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001358f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013594:	66 81 fa 00 01       	cmp    dx,0x100
c0013599:	75 0c                	jne    c00135a7 <CPU::detectFeatures()+0x779>
c001359b:	51                   	push   ecx
c001359c:	51                   	push   ecx
c001359d:	68 fe 3f 02 c0       	push   0xc0023ffe
c00135a2:	e9 dc 01 00 00       	jmp    c0013783 <CPU::detectFeatures()+0x955>
c00135a7:	66 81 fa 00 02       	cmp    dx,0x200
c00135ac:	75 0c                	jne    c00135ba <CPU::detectFeatures()+0x78c>
c00135ae:	52                   	push   edx
c00135af:	52                   	push   edx
c00135b0:	68 11 40 02 c0       	push   0xc0024011
c00135b5:	e9 c9 01 00 00       	jmp    c0013783 <CPU::detectFeatures()+0x955>
c00135ba:	66 81 fa 40 02       	cmp    dx,0x240
c00135bf:	75 0c                	jne    c00135cd <CPU::detectFeatures()+0x79f>
c00135c1:	50                   	push   eax
c00135c2:	50                   	push   eax
c00135c3:	68 23 40 02 c0       	push   0xc0024023
c00135c8:	e9 b6 01 00 00       	jmp    c0013783 <CPU::detectFeatures()+0x955>
c00135cd:	83 f8 06             	cmp    eax,0x6
c00135d0:	75 0c                	jne    c00135de <CPU::detectFeatures()+0x7b0>
c00135d2:	50                   	push   eax
c00135d3:	50                   	push   eax
c00135d4:	68 35 40 02 c0       	push   0xc0024035
c00135d9:	e9 a5 01 00 00       	jmp    c0013783 <CPU::detectFeatures()+0x955>
c00135de:	83 f8 04             	cmp    eax,0x4
c00135e1:	75 0c                	jne    c00135ef <CPU::detectFeatures()+0x7c1>
c00135e3:	50                   	push   eax
c00135e4:	50                   	push   eax
c00135e5:	68 41 40 02 c0       	push   0xc0024041
c00135ea:	e9 94 01 00 00       	jmp    c0013783 <CPU::detectFeatures()+0x955>
c00135ef:	83 f8 03             	cmp    eax,0x3
c00135f2:	0f 85 19 02 00 00    	jne    c0013811 <CPU::detectFeatures()+0x9e3>
c00135f8:	50                   	push   eax
c00135f9:	50                   	push   eax
c00135fa:	68 49 40 02 c0       	push   0xc0024049
c00135ff:	e9 7f 01 00 00       	jmp    c0013783 <CPU::detectFeatures()+0x955>
c0013604:	80 fa 06             	cmp    dl,0x6
c0013607:	0f 85 db 00 00 00    	jne    c00136e8 <CPU::detectFeatures()+0x8ba>
c001360d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013613:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013618:	66 81 fa 80 01       	cmp    dx,0x180
c001361d:	75 0c                	jne    c001362b <CPU::detectFeatures()+0x7fd>
c001361f:	50                   	push   eax
c0013620:	50                   	push   eax
c0013621:	68 54 40 02 c0       	push   0xc0024054
c0013626:	e9 58 01 00 00       	jmp    c0013783 <CPU::detectFeatures()+0x955>
c001362b:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0013631:	66 f7 c1 80 ff       	test   cx,0xff80
c0013636:	75 0c                	jne    c0013644 <CPU::detectFeatures()+0x816>
c0013638:	50                   	push   eax
c0013639:	50                   	push   eax
c001363a:	68 64 40 02 c0       	push   0xc0024064
c001363f:	e9 3f 01 00 00       	jmp    c0013783 <CPU::detectFeatures()+0x955>
c0013644:	66 81 fa 40 02       	cmp    dx,0x240
c0013649:	75 0c                	jne    c0013657 <CPU::detectFeatures()+0x829>
c001364b:	55                   	push   ebp
c001364c:	55                   	push   ebp
c001364d:	68 6b 40 02 c0       	push   0xc002406b
c0013652:	e9 2c 01 00 00       	jmp    c0013783 <CPU::detectFeatures()+0x955>
c0013657:	66 81 fa 80 02       	cmp    dx,0x280
c001365c:	75 0c                	jne    c001366a <CPU::detectFeatures()+0x83c>
c001365e:	57                   	push   edi
c001365f:	57                   	push   edi
c0013660:	68 74 40 02 c0       	push   0xc0024074
c0013665:	e9 19 01 00 00       	jmp    c0013783 <CPU::detectFeatures()+0x955>
c001366a:	66 81 fa 40 03       	cmp    dx,0x340
c001366f:	74 ed                	je     c001365e <CPU::detectFeatures()+0x830>
c0013671:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013676:	75 0c                	jne    c0013684 <CPU::detectFeatures()+0x856>
c0013678:	56                   	push   esi
c0013679:	56                   	push   esi
c001367a:	68 7b 40 02 c0       	push   0xc002407b
c001367f:	e9 ff 00 00 00       	jmp    c0013783 <CPU::detectFeatures()+0x955>
c0013684:	83 f8 06             	cmp    eax,0x6
c0013687:	0f 84 45 ff ff ff    	je     c00135d2 <CPU::detectFeatures()+0x7a4>
c001368d:	83 f8 04             	cmp    eax,0x4
c0013690:	0f 84 4d ff ff ff    	je     c00135e3 <CPU::detectFeatures()+0x7b5>
c0013696:	83 f8 03             	cmp    eax,0x3
c0013699:	0f 85 72 01 00 00    	jne    c0013811 <CPU::detectFeatures()+0x9e3>
c001369f:	51                   	push   ecx
c00136a0:	51                   	push   ecx
c00136a1:	68 84 40 02 c0       	push   0xc0024084
c00136a6:	53                   	push   ebx
c00136a7:	e8 54 aa ff ff       	call   c000e100 <Device::setName(char const*)>
c00136ac:	b1 c1                	mov    cl,0xc1
c00136ae:	88 c8                	mov    al,cl
c00136b0:	e6 22                	out    0x22,al
c00136b2:	e4 23                	in     al,0x23
c00136b4:	88 c2                	mov    dl,al
c00136b6:	88 c8                	mov    al,cl
c00136b8:	e6 22                	out    0x22,al
c00136ba:	88 d0                	mov    al,dl
c00136bc:	83 c8 10             	or     eax,0x10
c00136bf:	e6 23                	out    0x23,al
c00136c1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00136c8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00136cb:	89 d0                	mov    eax,edx
c00136cd:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00136d3:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00136d7:	40                   	inc    eax
c00136d8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00136de:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00136e3:	e9 a1 00 00 00       	jmp    c0013789 <CPU::detectFeatures()+0x95b>
c00136e8:	83 f8 06             	cmp    eax,0x6
c00136eb:	0f 84 e1 fe ff ff    	je     c00135d2 <CPU::detectFeatures()+0x7a4>
c00136f1:	83 f8 04             	cmp    eax,0x4
c00136f4:	0f 84 e9 fe ff ff    	je     c00135e3 <CPU::detectFeatures()+0x7b5>
c00136fa:	83 f8 03             	cmp    eax,0x3
c00136fd:	0f 85 0e 01 00 00    	jne    c0013811 <CPU::detectFeatures()+0x9e3>
c0013703:	52                   	push   edx
c0013704:	52                   	push   edx
c0013705:	68 8f 40 02 c0       	push   0xc002408f
c001370a:	eb 77                	jmp    c0013783 <CPU::detectFeatures()+0x955>
c001370c:	83 f8 07             	cmp    eax,0x7
c001370f:	75 09                	jne    c001371a <CPU::detectFeatures()+0x8ec>
c0013711:	50                   	push   eax
c0013712:	50                   	push   eax
c0013713:	68 99 40 02 c0       	push   0xc0024099
c0013718:	eb 69                	jmp    c0013783 <CPU::detectFeatures()+0x955>
c001371a:	83 f8 0a             	cmp    eax,0xa
c001371d:	75 09                	jne    c0013728 <CPU::detectFeatures()+0x8fa>
c001371f:	50                   	push   eax
c0013720:	50                   	push   eax
c0013721:	68 a4 40 02 c0       	push   0xc00240a4
c0013726:	eb 5b                	jmp    c0013783 <CPU::detectFeatures()+0x955>
c0013728:	83 f8 0b             	cmp    eax,0xb
c001372b:	75 09                	jne    c0013736 <CPU::detectFeatures()+0x908>
c001372d:	50                   	push   eax
c001372e:	50                   	push   eax
c001372f:	68 ac 40 02 c0       	push   0xc00240ac
c0013734:	eb 4d                	jmp    c0013783 <CPU::detectFeatures()+0x955>
c0013736:	83 f8 08             	cmp    eax,0x8
c0013739:	75 09                	jne    c0013744 <CPU::detectFeatures()+0x916>
c001373b:	50                   	push   eax
c001373c:	50                   	push   eax
c001373d:	68 b5 40 02 c0       	push   0xc00240b5
c0013742:	eb 3f                	jmp    c0013783 <CPU::detectFeatures()+0x955>
c0013744:	83 f8 09             	cmp    eax,0x9
c0013747:	75 09                	jne    c0013752 <CPU::detectFeatures()+0x924>
c0013749:	50                   	push   eax
c001374a:	50                   	push   eax
c001374b:	68 bd 40 02 c0       	push   0xc00240bd
c0013750:	eb 31                	jmp    c0013783 <CPU::detectFeatures()+0x955>
c0013752:	83 f8 05             	cmp    eax,0x5
c0013755:	75 09                	jne    c0013760 <CPU::detectFeatures()+0x932>
c0013757:	50                   	push   eax
c0013758:	50                   	push   eax
c0013759:	68 c5 40 02 c0       	push   0xc00240c5
c001375e:	eb 23                	jmp    c0013783 <CPU::detectFeatures()+0x955>
c0013760:	83 f8 0c             	cmp    eax,0xc
c0013763:	75 09                	jne    c001376e <CPU::detectFeatures()+0x940>
c0013765:	55                   	push   ebp
c0013766:	55                   	push   ebp
c0013767:	68 d3 40 02 c0       	push   0xc00240d3
c001376c:	eb 15                	jmp    c0013783 <CPU::detectFeatures()+0x955>
c001376e:	83 f8 0d             	cmp    eax,0xd
c0013771:	75 09                	jne    c001377c <CPU::detectFeatures()+0x94e>
c0013773:	57                   	push   edi
c0013774:	57                   	push   edi
c0013775:	68 de 40 02 c0       	push   0xc00240de
c001377a:	eb 07                	jmp    c0013783 <CPU::detectFeatures()+0x955>
c001377c:	56                   	push   esi
c001377d:	56                   	push   esi
c001377e:	68 f2 40 02 c0       	push   0xc00240f2
c0013783:	53                   	push   ebx
c0013784:	e8 77 a9 ff ff       	call   c000e100 <Device::setName(char const*)>
c0013789:	83 c4 10             	add    esp,0x10
c001378c:	e9 80 00 00 00       	jmp    c0013811 <CPU::detectFeatures()+0x9e3>
c0013791:	51                   	push   ecx
c0013792:	51                   	push   ecx
c0013793:	68 3e 3f 02 c0       	push   0xc0023f3e
c0013798:	55                   	push   ebp
c0013799:	e8 a2 cf fe ff       	call   c0000740 <strcpy>
c001379e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00137a8:	e8 36 ca fe ff       	call   c00001e3 <is486>
c00137ad:	83 c4 10             	add    esp,0x10
c00137b0:	85 c0                	test   eax,eax
c00137b2:	74 2b                	je     c00137df <CPU::detectFeatures()+0x9b1>
c00137b4:	52                   	push   edx
c00137b5:	52                   	push   edx
c00137b6:	68 fe 40 02 c0       	push   0xc00240fe
c00137bb:	53                   	push   ebx
c00137bc:	e8 3f a9 ff ff       	call   c000e100 <Device::setName(char const*)>
c00137c1:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00137c8:	0f 20 c0             	mov    eax,cr0
c00137cb:	83 e0 14             	and    eax,0x14
c00137ce:	83 c4 10             	add    esp,0x10
c00137d1:	83 f8 04             	cmp    eax,0x4
c00137d4:	75 1f                	jne    c00137f5 <CPU::detectFeatures()+0x9c7>
c00137d6:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00137dd:	eb 32                	jmp    c0013811 <CPU::detectFeatures()+0x9e3>
c00137df:	50                   	push   eax
c00137e0:	50                   	push   eax
c00137e1:	68 09 41 02 c0       	push   0xc0024109
c00137e6:	53                   	push   ebx
c00137e7:	e8 14 a9 ff ff       	call   c000e100 <Device::setName(char const*)>
c00137ec:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00137f3:	eb d3                	jmp    c00137c8 <CPU::detectFeatures()+0x99a>
c00137f5:	e8 c4 c9 fe ff       	call   c00001be <hasLegacyFPU>
c00137fa:	83 e0 01             	and    eax,0x1
c00137fd:	8d 14 00             	lea    edx,[eax+eax*1]
c0013800:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013806:	83 e0 fd             	and    eax,0xfffffffd
c0013809:	09 d0                	or     eax,edx
c001380b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013811:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0013818:	83 c4 4c             	add    esp,0x4c
c001381b:	5b                   	pop    ebx
c001381c:	5e                   	pop    esi
c001381d:	5f                   	pop    edi
c001381e:	5d                   	pop    ebp
c001381f:	c3                   	ret    

c0013820 <CPU::setupSMEP()>:
c0013820:	0f 20 e0             	mov    eax,cr4
c0013823:	0d 00 00 10 00       	or     eax,0x100000
c0013828:	0f 22 e0             	mov    cr4,eax
c001382b:	c3                   	ret    

c001382c <CPU::setupUMIP()>:
c001382c:	0f 20 e0             	mov    eax,cr4
c001382f:	80 cc 08             	or     ah,0x8
c0013832:	0f 22 e0             	mov    cr4,eax
c0013835:	c3                   	ret    

c0013836 <CPU::setupTSC()>:
c0013836:	0f 20 e0             	mov    eax,cr4
c0013839:	83 c8 04             	or     eax,0x4
c001383c:	0f 22 e0             	mov    cr4,eax
c001383f:	c3                   	ret    

c0013840 <CPU::setupLargePages()>:
c0013840:	0f 20 e0             	mov    eax,cr4
c0013843:	83 c8 10             	or     eax,0x10
c0013846:	0f 22 e0             	mov    cr4,eax
c0013849:	c3                   	ret    

c001384a <CPU::setupPAT()>:
c001384a:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001384f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013856:	74 2c                	je     c0013884 <CPU::setupPAT()+0x3a>
c0013858:	53                   	push   ebx
c0013859:	83 ec 10             	sub    esp,0x10
c001385c:	68 77 02 00 00       	push   0x277
c0013861:	50                   	push   eax
c0013862:	e8 bd 56 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013867:	83 e2 f8             	and    edx,0xfffffff8
c001386a:	83 ca 01             	or     edx,0x1
c001386d:	52                   	push   edx
c001386e:	50                   	push   eax
c001386f:	68 77 02 00 00       	push   0x277
c0013874:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c001387a:	e8 d1 56 ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c001387f:	83 c4 28             	add    esp,0x28
c0013882:	5b                   	pop    ebx
c0013883:	c3                   	ret    
c0013884:	c3                   	ret    
c0013885:	90                   	nop

c0013886 <CPU::setupMTRR()>:
c0013886:	c3                   	ret    
c0013887:	90                   	nop

c0013888 <CPU::setupGlobalPages()>:
c0013888:	0f 20 e0             	mov    eax,cr4
c001388b:	0c 80                	or     al,0x80
c001388d:	0f 22 e0             	mov    cr4,eax
c0013890:	c3                   	ret    
c0013891:	90                   	nop

c0013892 <CPU::allowUsermodeDataAccess()>:
c0013892:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013896:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001389d:	74 03                	je     c00138a2 <CPU::allowUsermodeDataAccess()+0x10>
c001389f:	0f 01 cb             	stac   
c00138a2:	c3                   	ret    
c00138a3:	90                   	nop

c00138a4 <CPU::prohibitUsermodeDataAccess()>:
c00138a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138a8:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00138af:	74 03                	je     c00138b4 <CPU::prohibitUsermodeDataAccess()+0x10>
c00138b1:	0f 01 ca             	clac   
c00138b4:	c3                   	ret    
c00138b5:	90                   	nop

c00138b6 <CPU::setupSMAP()>:
c00138b6:	0f 20 e0             	mov    eax,cr4
c00138b9:	0d 00 00 20 00       	or     eax,0x200000
c00138be:	0f 22 e0             	mov    cr4,eax
c00138c1:	eb e1                	jmp    c00138a4 <CPU::prohibitUsermodeDataAccess()>
c00138c3:	90                   	nop

c00138c4 <CPU::setupFeatures()>:
c00138c4:	83 ec 0c             	sub    esp,0xc
c00138c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138cb:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00138d2:	74 07                	je     c00138db <CPU::setupFeatures()+0x17>
c00138d4:	52                   	push   edx
c00138d5:	e8 46 ff ff ff       	call   c0013820 <CPU::setupSMEP()>
c00138da:	58                   	pop    eax
c00138db:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00138e2:	74 07                	je     c00138eb <CPU::setupFeatures()+0x27>
c00138e4:	52                   	push   edx
c00138e5:	e8 cc ff ff ff       	call   c00138b6 <CPU::setupSMAP()>
c00138ea:	58                   	pop    eax
c00138eb:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00138f2:	74 07                	je     c00138fb <CPU::setupFeatures()+0x37>
c00138f4:	52                   	push   edx
c00138f5:	e8 32 ff ff ff       	call   c001382c <CPU::setupUMIP()>
c00138fa:	58                   	pop    eax
c00138fb:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0013902:	74 07                	je     c001390b <CPU::setupFeatures()+0x47>
c0013904:	52                   	push   edx
c0013905:	e8 2c ff ff ff       	call   c0013836 <CPU::setupTSC()>
c001390a:	58                   	pop    eax
c001390b:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0013912:	74 07                	je     c001391b <CPU::setupFeatures()+0x57>
c0013914:	52                   	push   edx
c0013915:	e8 26 ff ff ff       	call   c0013840 <CPU::setupLargePages()>
c001391a:	59                   	pop    ecx
c001391b:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0013922:	74 07                	je     c001392b <CPU::setupFeatures()+0x67>
c0013924:	52                   	push   edx
c0013925:	e8 5e ff ff ff       	call   c0013888 <CPU::setupGlobalPages()>
c001392a:	58                   	pop    eax
c001392b:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0013932:	74 0c                	je     c0013940 <CPU::setupFeatures()+0x7c>
c0013934:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013938:	83 c4 0c             	add    esp,0xc
c001393b:	e9 0a ff ff ff       	jmp    c001384a <CPU::setupPAT()>
c0013940:	83 c4 0c             	add    esp,0xc
c0013943:	c3                   	ret    

c0013944 <CPU::open(int, int, void*)>:
c0013944:	57                   	push   edi
c0013945:	56                   	push   esi
c0013946:	53                   	push   ebx
c0013947:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001394b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001394f:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0013955:	83 ec 0c             	sub    esp,0xc
c0013958:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001395e:	68 14 41 02 c0       	push   0xc0024114
c0013963:	e8 b5 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013968:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001396e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013971:	e8 46 59 ff ff       	call   c00092bc <GDT::setup()>
c0013976:	c7 04 24 26 41 02 c0 	mov    DWORD PTR [esp],0xc0024126
c001397d:	e8 9b 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013982:	83 c4 0c             	add    esp,0xc
c0013985:	6a 00                	push   0x0
c0013987:	68 ef be ad de       	push   0xdeadbeef
c001398c:	57                   	push   edi
c001398d:	e8 e6 76 ff ff       	call   c000b078 <TSS::setup(unsigned long, unsigned long)>
c0013992:	c7 04 24 38 41 02 c0 	mov    DWORD PTR [esp],0xc0024138
c0013999:	e8 7f 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001399e:	89 3c 24             	mov    DWORD PTR [esp],edi
c00139a1:	e8 b2 76 ff ff       	call   c000b058 <TSS::flush()>
c00139a6:	c7 04 24 4c 41 02 c0 	mov    DWORD PTR [esp],0xc002414c
c00139ad:	e8 6b 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139b2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00139b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00139bb:	e8 66 5b ff ff       	call   c0009526 <IDT::setup()>
c00139c0:	c7 04 24 5e 41 02 c0 	mov    DWORD PTR [esp],0xc002415e
c00139c7:	e8 51 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139cc:	b8 00 04 00 00       	mov    eax,0x400
c00139d1:	0f 23 f8             	mov    db7,eax
c00139d4:	c7 04 24 7c 41 02 c0 	mov    DWORD PTR [esp],0xc002417c
c00139db:	e8 3d 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139e0:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00139ea:	e8 fb 63 ff ff       	call   c0009dea <Phys::allocatePage()>
c00139ef:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00139f5:	89 30                	mov    DWORD PTR [eax],esi
c00139f7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00139fd:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0013a00:	c7 04 24 9e 41 02 c0 	mov    DWORD PTR [esp],0xc002419e
c0013a07:	e8 11 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a0c:	58                   	pop    eax
c0013a0d:	5a                   	pop    edx
c0013a0e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0013a14:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013a18:	e8 55 86 ff ff       	call   c000c072 <VAS::setCPUSpecific(unsigned long)>
c0013a1d:	c7 04 24 c6 41 02 c0 	mov    DWORD PTR [esp],0xc00241c6
c0013a24:	e8 f4 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a2c:	e8 fd f3 ff ff       	call   c0012e2e <CPU::detectFeatures()>
c0013a31:	c7 04 24 e9 41 02 c0 	mov    DWORD PTR [esp],0xc00241e9
c0013a38:	e8 e0 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a3d:	e8 cc b8 ff ff       	call   c000f30e <setupInterruptController()>
c0013a42:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0013a48:	c7 04 24 0d 42 02 c0 	mov    DWORD PTR [esp],0xc002420d
c0013a4f:	e8 c9 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a54:	a1 60 64 02 c0       	mov    eax,ds:0xc0026460
c0013a59:	83 e0 10             	and    eax,0x10
c0013a5c:	83 f8 01             	cmp    eax,0x1
c0013a5f:	19 c0                	sbb    eax,eax
c0013a61:	83 e0 46             	and    eax,0x46
c0013a64:	83 c0 1e             	add    eax,0x1e
c0013a67:	89 04 24             	mov    DWORD PTR [esp],eax
c0013a6a:	e8 89 ce ff ff       	call   c00108f8 <setupTimer(int)>
c0013a6f:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0013a75:	c7 04 24 28 42 02 c0 	mov    DWORD PTR [esp],0xc0024228
c0013a7c:	e8 9c 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a84:	e8 3b fe ff ff       	call   c00138c4 <CPU::setupFeatures()>
c0013a89:	c7 04 24 43 42 02 c0 	mov    DWORD PTR [esp],0xc0024243
c0013a90:	e8 88 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a95:	83 c4 10             	add    esp,0x10
c0013a98:	31 c0                	xor    eax,eax
c0013a9a:	5b                   	pop    ebx
c0013a9b:	5e                   	pop    esi
c0013a9c:	5f                   	pop    edi
c0013a9d:	c3                   	ret    

c0013a9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0013a9e:	57                   	push   edi
c0013a9f:	56                   	push   esi
c0013aa0:	53                   	push   ebx
c0013aa1:	51                   	push   ecx
c0013aa2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013aa6:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0013aa9:	0f 02 c0             	lar    eax,ax
c0013aac:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0013aaf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013ab3:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0013ab6:	88 ca                	mov    dl,cl
c0013ab8:	c0 ea 06             	shr    dl,0x6
c0013abb:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0013abf:	89 ca                	mov    edx,ecx
c0013ac1:	66 c1 ea 03          	shr    dx,0x3
c0013ac5:	83 e2 07             	and    edx,0x7
c0013ac8:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0013acd:	88 17                	mov    BYTE PTR [edi],dl
c0013acf:	0f 84 a6 01 00 00    	je     c0013c7b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0013ad5:	83 e1 07             	and    ecx,0x7
c0013ad8:	80 f9 04             	cmp    cl,0x4
c0013adb:	0f 84 98 00 00 00    	je     c0013b79 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0013ae1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013ae6:	0f 95 c0             	setne  al
c0013ae9:	80 f9 05             	cmp    cl,0x5
c0013aec:	0f 95 c2             	setne  dl
c0013aef:	08 c2                	or     dl,al
c0013af1:	74 79                	je     c0013b6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0013af3:	84 c9                	test   cl,cl
c0013af5:	75 05                	jne    c0013afc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0013af7:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013afa:	eb 3c                	jmp    c0013b38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013afc:	80 f9 01             	cmp    cl,0x1
c0013aff:	75 05                	jne    c0013b06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0013b01:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013b04:	eb 32                	jmp    c0013b38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b06:	80 f9 02             	cmp    cl,0x2
c0013b09:	75 05                	jne    c0013b10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0013b0b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013b0e:	eb 28                	jmp    c0013b38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b10:	31 c0                	xor    eax,eax
c0013b12:	80 f9 03             	cmp    cl,0x3
c0013b15:	75 05                	jne    c0013b1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0013b17:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013b1a:	eb 1c                	jmp    c0013b38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b1c:	80 f9 05             	cmp    cl,0x5
c0013b1f:	75 05                	jne    c0013b26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0013b21:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013b24:	eb 12                	jmp    c0013b38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b26:	80 f9 06             	cmp    cl,0x6
c0013b29:	75 05                	jne    c0013b30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0013b2b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013b2e:	eb 08                	jmp    c0013b38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b30:	80 f9 07             	cmp    cl,0x7
c0013b33:	75 03                	jne    c0013b38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b35:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013b38:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013b3d:	75 10                	jne    c0013b4f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0013b3f:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0013b43:	b9 03 00 00 00       	mov    ecx,0x3
c0013b48:	01 d0                	add    eax,edx
c0013b4a:	e9 37 01 00 00       	jmp    c0013c86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013b4f:	b9 02 00 00 00       	mov    ecx,0x2
c0013b54:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0013b59:	0f 85 27 01 00 00    	jne    c0013c86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013b5f:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0013b62:	b9 06 00 00 00       	mov    ecx,0x6
c0013b67:	e9 1a 01 00 00       	jmp    c0013c86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013b6c:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0013b6f:	b9 06 00 00 00       	mov    ecx,0x6
c0013b74:	e9 0f 01 00 00       	jmp    c0013c88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013b79:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0013b7c:	88 ca                	mov    dl,cl
c0013b7e:	c0 ea 06             	shr    dl,0x6
c0013b81:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0013b85:	89 ca                	mov    edx,ecx
c0013b87:	66 c1 ea 03          	shr    dx,0x3
c0013b8b:	83 e2 07             	and    edx,0x7
c0013b8e:	80 e1 07             	and    cl,0x7
c0013b91:	75 05                	jne    c0013b98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0013b93:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0013b96:	eb 4c                	jmp    c0013be4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b98:	80 f9 01             	cmp    cl,0x1
c0013b9b:	75 05                	jne    c0013ba2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0013b9d:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0013ba0:	eb 42                	jmp    c0013be4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013ba2:	80 f9 02             	cmp    cl,0x2
c0013ba5:	75 05                	jne    c0013bac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0013ba7:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0013baa:	eb 38                	jmp    c0013be4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013bac:	80 f9 03             	cmp    cl,0x3
c0013baf:	75 05                	jne    c0013bb6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0013bb1:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0013bb4:	eb 2e                	jmp    c0013be4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013bb6:	80 f9 04             	cmp    cl,0x4
c0013bb9:	75 12                	jne    c0013bcd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0013bbb:	f6 c4 60             	test   ah,0x60
c0013bbe:	75 08                	jne    c0013bc8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0013bc0:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0013bc3:	8d 78 14             	lea    edi,[eax+0x14]
c0013bc6:	eb 1c                	jmp    c0013be4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013bc8:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0013bcb:	eb 17                	jmp    c0013be4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013bcd:	80 f9 05             	cmp    cl,0x5
c0013bd0:	75 05                	jne    c0013bd7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0013bd2:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0013bd5:	eb 0d                	jmp    c0013be4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013bd7:	80 f9 06             	cmp    cl,0x6
c0013bda:	75 05                	jne    c0013be1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0013bdc:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0013bdf:	eb 03                	jmp    c0013be4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013be1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0013be4:	84 d2                	test   dl,dl
c0013be6:	75 05                	jne    c0013bed <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0013be8:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013beb:	eb 3c                	jmp    c0013c29 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013bed:	80 fa 01             	cmp    dl,0x1
c0013bf0:	75 05                	jne    c0013bf7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0013bf2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013bf5:	eb 32                	jmp    c0013c29 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013bf7:	80 fa 02             	cmp    dl,0x2
c0013bfa:	75 05                	jne    c0013c01 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0013bfc:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013bff:	eb 28                	jmp    c0013c29 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c01:	80 fa 03             	cmp    dl,0x3
c0013c04:	75 05                	jne    c0013c0b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0013c06:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013c09:	eb 1e                	jmp    c0013c29 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c0b:	31 c0                	xor    eax,eax
c0013c0d:	80 fa 04             	cmp    dl,0x4
c0013c10:	74 17                	je     c0013c29 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c12:	80 fa 05             	cmp    dl,0x5
c0013c15:	75 05                	jne    c0013c1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0013c17:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013c1a:	eb 0d                	jmp    c0013c29 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c1c:	80 fa 06             	cmp    dl,0x6
c0013c1f:	75 05                	jne    c0013c26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0013c21:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013c24:	eb 03                	jmp    c0013c29 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c26:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013c29:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013c2e:	0f 94 c2             	sete   dl
c0013c31:	80 f9 05             	cmp    cl,0x5
c0013c34:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0013c38:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0013c3d:	d3 e0                	shl    eax,cl
c0013c3f:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0013c43:	74 0a                	je     c0013c4f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0013c45:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013c48:	b9 07 00 00 00       	mov    ecx,0x7
c0013c4d:	eb 37                	jmp    c0013c86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013c4f:	01 f8                	add    eax,edi
c0013c51:	b9 03 00 00 00       	mov    ecx,0x3
c0013c56:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013c5b:	74 2b                	je     c0013c88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c5d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013c62:	75 0d                	jne    c0013c71 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0013c64:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0013c68:	01 c8                	add    eax,ecx
c0013c6a:	b9 04 00 00 00       	mov    ecx,0x4
c0013c6f:	eb 17                	jmp    c0013c88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c71:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013c74:	b9 07 00 00 00       	mov    ecx,0x7
c0013c79:	eb 0d                	jmp    c0013c88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c7b:	b9 02 00 00 00       	mov    ecx,0x2
c0013c80:	b2 01                	mov    dl,0x1
c0013c82:	31 c0                	xor    eax,eax
c0013c84:	eb 02                	jmp    c0013c88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c86:	31 d2                	xor    edx,edx
c0013c88:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c8c:	89 0b                	mov    DWORD PTR [ebx],ecx
c0013c8e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013c92:	88 11                	mov    BYTE PTR [ecx],dl
c0013c94:	5a                   	pop    edx
c0013c95:	5b                   	pop    ebx
c0013c96:	5e                   	pop    esi
c0013c97:	5f                   	pop    edi
c0013c98:	c3                   	ret    

c0013c99 <Krnl::smpEntry()>:
c0013c99:	eb fe                	jmp    c0013c99 <Krnl::smpEntry()>

c0013c9b <Krnl::startCPU(int)>:
c0013c9b:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0013ca0:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013ca7:	0f 84 36 01 00 00    	je     c0013de3 <Krnl::startCPU(int)+0x148>
c0013cad:	53                   	push   ebx
c0013cae:	83 ec 10             	sub    esp,0x10
c0013cb1:	fa                   	cli    
c0013cb2:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0013cb8:	6a 1b                	push   0x1b
c0013cba:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0013cc0:	e8 5f 52 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013cc5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013cca:	89 c3                	mov    ebx,eax
c0013ccc:	58                   	pop    eax
c0013ccd:	5a                   	pop    edx
c0013cce:	53                   	push   ebx
c0013ccf:	68 8c 42 02 c0       	push   0xc002428c
c0013cd4:	e8 ea 8d ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0013cd9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013ce3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ce7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013cf1:	c1 e0 18             	shl    eax,0x18
c0013cf4:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0013cfa:	83 c4 10             	add    esp,0x10
c0013cfd:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013d03:	09 c2                	or     edx,eax
c0013d05:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0013d0b:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0013d11:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013d17:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013d1d:	80 cd c5             	or     ch,0xc5
c0013d20:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013d26:	f3 90                	pause  
c0013d28:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013d2a:	0f ba e1 0c          	bt     ecx,0xc
c0013d2e:	72 f6                	jb     c0013d26 <Krnl::startCPU(int)+0x8b>
c0013d30:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013d36:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013d3c:	09 c1                	or     ecx,eax
c0013d3e:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013d44:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013d4a:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013d50:	80 cd 85             	or     ch,0x85
c0013d53:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013d59:	f3 90                	pause  
c0013d5b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013d5d:	0f ba e1 0c          	bt     ecx,0xc
c0013d61:	72 f6                	jb     c0013d59 <Krnl::startCPU(int)+0xbe>
c0013d63:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013d6d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013d73:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013d79:	09 c1                	or     ecx,eax
c0013d7b:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013d81:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013d87:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0013d8d:	81 c9 02 06 00 00    	or     ecx,0x602
c0013d93:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013d99:	f3 90                	pause  
c0013d9b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013d9d:	0f ba e1 0c          	bt     ecx,0xc
c0013da1:	72 f6                	jb     c0013d99 <Krnl::startCPU(int)+0xfe>
c0013da3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013dad:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013db3:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013db9:	09 c8                	or     eax,ecx
c0013dbb:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0013dc1:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0013dc7:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0013dcc:	0d 02 06 00 00       	or     eax,0x602
c0013dd1:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0013dd7:	f3 90                	pause  
c0013dd9:	8b 02                	mov    eax,DWORD PTR [edx]
c0013ddb:	0f ba e0 0c          	bt     eax,0xc
c0013ddf:	72 f6                	jb     c0013dd7 <Krnl::startCPU(int)+0x13c>
c0013de1:	eb fe                	jmp    c0013de1 <Krnl::startCPU(int)+0x146>
c0013de3:	c3                   	ret    

c0013de4 <Krnl::startCPUs()>:
c0013de4:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0013de9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013def:	88 c2                	mov    dl,al
c0013df1:	83 e2 0a             	and    edx,0xa
c0013df4:	80 fa 0a             	cmp    dl,0xa
c0013df7:	75 09                	jne    c0013e02 <Krnl::startCPUs()+0x1e>
c0013df9:	a8 01                	test   al,0x1
c0013dfb:	74 05                	je     c0013e02 <Krnl::startCPUs()+0x1e>
c0013dfd:	e9 99 c3 fe ff       	jmp    c000019b <prepareTramp>
c0013e02:	c3                   	ret    
c0013e03:	90                   	nop

c0013e04 <EnvVarContainer::getEnv(char const*)>:
c0013e04:	57                   	push   edi
c0013e05:	56                   	push   esi
c0013e06:	53                   	push   ebx
c0013e07:	31 db                	xor    ebx,ebx
c0013e09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e0d:	39 1e                	cmp    DWORD PTR [esi],ebx
c0013e0f:	7e 2b                	jle    c0013e3c <EnvVarContainer::getEnv(char const*)+0x38>
c0013e11:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0013e18:	50                   	push   eax
c0013e19:	50                   	push   eax
c0013e1a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013e1d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0013e20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e24:	e8 a3 c9 fe ff       	call   c00007cc <strcmp>
c0013e29:	83 c4 10             	add    esp,0x10
c0013e2c:	85 c0                	test   eax,eax
c0013e2e:	75 09                	jne    c0013e39 <EnvVarContainer::getEnv(char const*)+0x35>
c0013e30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013e33:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0013e37:	eb 05                	jmp    c0013e3e <EnvVarContainer::getEnv(char const*)+0x3a>
c0013e39:	43                   	inc    ebx
c0013e3a:	eb d1                	jmp    c0013e0d <EnvVarContainer::getEnv(char const*)+0x9>
c0013e3c:	31 c0                	xor    eax,eax
c0013e3e:	5b                   	pop    ebx
c0013e3f:	5e                   	pop    esi
c0013e40:	5f                   	pop    edi
c0013e41:	c3                   	ret    

c0013e42 <EnvVarContainer::setEnv(char const*, char const*)>:
c0013e42:	55                   	push   ebp
c0013e43:	57                   	push   edi
c0013e44:	56                   	push   esi
c0013e45:	53                   	push   ebx
c0013e46:	83 ec 28             	sub    esp,0x28
c0013e49:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013e4d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0013e51:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013e55:	56                   	push   esi
c0013e56:	e8 45 c8 fe ff       	call   c00006a0 <strlen>
c0013e5b:	40                   	inc    eax
c0013e5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e5f:	e8 5f 5b ff ff       	call   c00099c3 <malloc>
c0013e64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013e6b:	e8 30 c8 fe ff       	call   c00006a0 <strlen>
c0013e70:	40                   	inc    eax
c0013e71:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e74:	e8 4a 5b ff ff       	call   c00099c3 <malloc>
c0013e79:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e7c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e80:	e8 1b c8 fe ff       	call   c00006a0 <strlen>
c0013e85:	83 c4 0c             	add    esp,0xc
c0013e88:	40                   	inc    eax
c0013e89:	50                   	push   eax
c0013e8a:	6a 00                	push   0x0
c0013e8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013e90:	e8 ef c7 fe ff       	call   c0000684 <memset>
c0013e95:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e98:	e8 03 c8 fe ff       	call   c00006a0 <strlen>
c0013e9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ea1:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ea4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ea6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ea9:	89 de                	mov    esi,ebx
c0013eab:	e8 f0 c7 fe ff       	call   c00006a0 <strlen>
c0013eb0:	83 c4 0c             	add    esp,0xc
c0013eb3:	40                   	inc    eax
c0013eb4:	50                   	push   eax
c0013eb5:	6a 00                	push   0x0
c0013eb7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ebb:	e8 c4 c7 fe ff       	call   c0000684 <memset>
c0013ec0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ec3:	e8 d8 c7 fe ff       	call   c00006a0 <strlen>
c0013ec8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013ecc:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ecf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ed1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013ed4:	40                   	inc    eax
c0013ed5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013ed8:	c1 e0 03             	shl    eax,0x3
c0013edb:	5a                   	pop    edx
c0013edc:	59                   	pop    ecx
c0013edd:	50                   	push   eax
c0013ede:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0013ee1:	e8 c9 5a ff ff       	call   c00099af <realloc>
c0013ee6:	8d 74 24 18          	lea    esi,[esp+0x18]
c0013eea:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013eed:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0013ef0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0013ef4:	b9 08 00 00 00       	mov    ecx,0x8
c0013ef9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013efb:	83 c4 2c             	add    esp,0x2c
c0013efe:	5b                   	pop    ebx
c0013eff:	5e                   	pop    esi
c0013f00:	5f                   	pop    edi
c0013f01:	5d                   	pop    ebp
c0013f02:	c3                   	ret    
c0013f03:	90                   	nop

c0013f04 <EnvVarContainer::deleteEnv(char const*)>:
c0013f04:	c3                   	ret    
c0013f05:	90                   	nop

c0013f06 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0013f06:	55                   	push   ebp
c0013f07:	57                   	push   edi
c0013f08:	56                   	push   esi
c0013f09:	53                   	push   ebx
c0013f0a:	81 ec 38 01 00 00    	sub    esp,0x138
c0013f10:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0013f17:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0013f1e:	68 14 01 00 00       	push   0x114
c0013f23:	e8 9b 5a ff ff       	call   c00099c3 <malloc>
c0013f28:	83 c4 0c             	add    esp,0xc
c0013f2b:	89 c3                	mov    ebx,eax
c0013f2d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0013f30:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0013f37:	50                   	push   eax
c0013f38:	e8 f1 90 ff ff       	call   c000d02e <File::File(char const*, Process*)>
c0013f3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f40:	e8 bb 93 ff ff       	call   c000d300 <File::exists()>
c0013f45:	83 c4 10             	add    esp,0x10
c0013f48:	84 c0                	test   al,al
c0013f4a:	75 31                	jne    c0013f7d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0013f4c:	50                   	push   eax
c0013f4d:	50                   	push   eax
c0013f4e:	6a 12                	push   0x12
c0013f50:	53                   	push   ebx
c0013f51:	e8 3c 91 ff ff       	call   c000d092 <File::open(FileOpenMode)>
c0013f56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f58:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0013f5b:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f5e:	e8 3d c7 fe ff       	call   c00006a0 <strlen>
c0013f63:	5a                   	pop    edx
c0013f64:	31 d2                	xor    edx,edx
c0013f66:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013f6a:	51                   	push   ecx
c0013f6b:	56                   	push   esi
c0013f6c:	52                   	push   edx
c0013f6d:	50                   	push   eax
c0013f6e:	53                   	push   ebx
c0013f6f:	ff d7                	call   edi
c0013f71:	83 c4 14             	add    esp,0x14
c0013f74:	53                   	push   ebx
c0013f75:	e8 76 91 ff ff       	call   c000d0f0 <File::close()>
c0013f7a:	83 c4 10             	add    esp,0x10
c0013f7d:	56                   	push   esi
c0013f7e:	31 f6                	xor    esi,esi
c0013f80:	68 00 01 00 00       	push   0x100
c0013f85:	6a 00                	push   0x0
c0013f87:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0013f8b:	50                   	push   eax
c0013f8c:	e8 f3 c6 fe ff       	call   c0000684 <memset>
c0013f91:	5f                   	pop    edi
c0013f92:	58                   	pop    eax
c0013f93:	6a 01                	push   0x1
c0013f95:	53                   	push   ebx
c0013f96:	e8 f7 90 ff ff       	call   c000d092 <File::open(FileOpenMode)>
c0013f9b:	83 c4 10             	add    esp,0x10
c0013f9e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013fa6:	83 ec 0c             	sub    esp,0xc
c0013fa9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013faf:	51                   	push   ecx
c0013fb0:	8d 54 24 23          	lea    edx,[esp+0x23]
c0013fb4:	52                   	push   edx
c0013fb5:	6a 00                	push   0x0
c0013fb7:	6a 01                	push   0x1
c0013fb9:	53                   	push   ebx
c0013fba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013fbd:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0013fc1:	83 c4 20             	add    esp,0x20
c0013fc4:	3c 0d                	cmp    al,0xd
c0013fc6:	0f 84 09 01 00 00    	je     c00140d5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0013fcc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013fd1:	0f 84 ef 00 00 00    	je     c00140c6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013fd7:	3c 0a                	cmp    al,0xa
c0013fd9:	74 13                	je     c0013fee <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013fdb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013fe0:	74 0c                	je     c0013fee <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013fe2:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0013fe8:	0f 8e d8 00 00 00    	jle    c00140c6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013fee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013ff2:	83 ec 0c             	sub    esp,0xc
c0013ff5:	8d 78 01             	lea    edi,[eax+0x1]
c0013ff8:	57                   	push   edi
c0013ff9:	e8 c5 59 ff ff       	call   c00099c3 <malloc>
c0013ffe:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0014002:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014006:	8d 56 04             	lea    edx,[esi+0x4]
c0014009:	89 14 24             	mov    DWORD PTR [esp],edx
c001400c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014010:	e8 ae 59 ff ff       	call   c00099c3 <malloc>
c0014015:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014019:	83 c4 0c             	add    esp,0xc
c001401c:	57                   	push   edi
c001401d:	6a 00                	push   0x0
c001401f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014023:	e8 5c c6 fe ff       	call   c0000684 <memset>
c0014028:	8d 74 24 30          	lea    esi,[esp+0x30]
c001402c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014030:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014034:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014036:	83 c4 0c             	add    esp,0xc
c0014039:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001403d:	52                   	push   edx
c001403e:	6a 00                	push   0x0
c0014040:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014044:	e8 3b c6 fe ff       	call   c0000684 <memset>
c0014049:	8d 74 24 30          	lea    esi,[esp+0x30]
c001404d:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014051:	89 34 24             	mov    DWORD PTR [esp],esi
c0014054:	e8 47 c6 fe ff       	call   c00006a0 <strlen>
c0014059:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001405d:	89 c1                	mov    ecx,eax
c001405f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014061:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014064:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014067:	40                   	inc    eax
c0014068:	83 c4 10             	add    esp,0x10
c001406b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001406e:	85 d2                	test   edx,edx
c0014070:	75 0c                	jne    c001407e <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014072:	83 ec 0c             	sub    esp,0xc
c0014075:	6a 08                	push   0x8
c0014077:	e8 47 59 ff ff       	call   c00099c3 <malloc>
c001407c:	eb 0c                	jmp    c001408a <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001407e:	c1 e0 03             	shl    eax,0x3
c0014081:	51                   	push   ecx
c0014082:	51                   	push   ecx
c0014083:	50                   	push   eax
c0014084:	52                   	push   edx
c0014085:	e8 25 59 ff ff       	call   c00099af <realloc>
c001408a:	83 c4 10             	add    esp,0x10
c001408d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014090:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014093:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014096:	8d 74 24 18          	lea    esi,[esp+0x18]
c001409a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001409e:	b9 08 00 00 00       	mov    ecx,0x8
c00140a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00140a5:	31 f6                	xor    esi,esi
c00140a7:	50                   	push   eax
c00140a8:	68 00 01 00 00       	push   0x100
c00140ad:	6a 00                	push   0x0
c00140af:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00140b3:	50                   	push   eax
c00140b4:	e8 cb c5 fe ff       	call   c0000684 <memset>
c00140b9:	83 c4 10             	add    esp,0x10
c00140bc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00140c4:	eb 0f                	jmp    c00140d5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00140c6:	3c 3d                	cmp    al,0x3d
c00140c8:	74 07                	je     c00140d1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00140ca:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00140ce:	46                   	inc    esi
c00140cf:	eb 04                	jmp    c00140d5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00140d1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00140d5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00140da:	0f 85 c6 fe ff ff    	jne    c0013fa6 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00140e0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00140e6:	5b                   	pop    ebx
c00140e7:	5e                   	pop    esi
c00140e8:	5f                   	pop    edi
c00140e9:	5d                   	pop    ebp
c00140ea:	c3                   	ret    
c00140eb:	90                   	nop

c00140ec <EnvVarContainer::__loadSystem()>:
c00140ec:	83 ec 10             	sub    esp,0x10
c00140ef:	68 20 5e 02 c0       	push   0xc0025e20
c00140f4:	68 9d 42 02 c0       	push   0xc002429d
c00140f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140fd:	e8 04 fe ff ff       	call   c0013f06 <EnvVarContainer::loadFrom(char const*, char const*)>
c0014102:	83 c4 1c             	add    esp,0x1c
c0014105:	c3                   	ret    

c0014106 <EnvVarContainer::__loadUser()>:
c0014106:	c3                   	ret    
c0014107:	90                   	nop

c0014108 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001410c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014112:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014116:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001411a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001411d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014121:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014128:	90                   	nop
c0014129:	c3                   	ret    

c001412a <EnvVarContainer::~EnvVarContainer()>:
c001412a:	83 ec 0c             	sub    esp,0xc
c001412d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014131:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014134:	85 c0                	test   eax,eax
c0014136:	74 1d                	je     c0014155 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001413c:	8b 00                	mov    eax,DWORD PTR [eax]
c001413e:	85 c0                	test   eax,eax
c0014140:	74 13                	je     c0014155 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014146:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014149:	83 ec 0c             	sub    esp,0xc
c001414c:	50                   	push   eax
c001414d:	e8 81 58 ff ff       	call   c00099d3 <free>
c0014152:	83 c4 10             	add    esp,0x10
c0014155:	90                   	nop
c0014156:	83 c4 0c             	add    esp,0xc
c0014159:	c3                   	ret    

c001415a <Krnl::getEnv(Process*, char const*)>:
c001415a:	53                   	push   ebx
c001415b:	83 ec 08             	sub    esp,0x8
c001415e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014162:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014166:	39 05 70 79 02 c0    	cmp    DWORD PTR ds:0xc0027970,eax
c001416c:	74 04                	je     c0014172 <Krnl::getEnv(Process*, char const*)+0x18>
c001416e:	85 c0                	test   eax,eax
c0014170:	75 0b                	jne    c001417d <Krnl::getEnv(Process*, char const*)+0x23>
c0014172:	a1 54 6f 02 c0       	mov    eax,ds:0xc0026f54
c0014177:	85 c0                	test   eax,eax
c0014179:	75 19                	jne    c0014194 <Krnl::getEnv(Process*, char const*)+0x3a>
c001417b:	eb 27                	jmp    c00141a4 <Krnl::getEnv(Process*, char const*)+0x4a>
c001417d:	52                   	push   edx
c001417e:	52                   	push   edx
c001417f:	53                   	push   ebx
c0014180:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014186:	e8 79 fc ff ff       	call   c0013e04 <EnvVarContainer::getEnv(char const*)>
c001418b:	83 c4 10             	add    esp,0x10
c001418e:	85 c0                	test   eax,eax
c0014190:	75 28                	jne    c00141ba <Krnl::getEnv(Process*, char const*)+0x60>
c0014192:	eb de                	jmp    c0014172 <Krnl::getEnv(Process*, char const*)+0x18>
c0014194:	52                   	push   edx
c0014195:	52                   	push   edx
c0014196:	53                   	push   ebx
c0014197:	50                   	push   eax
c0014198:	e8 67 fc ff ff       	call   c0013e04 <EnvVarContainer::getEnv(char const*)>
c001419d:	83 c4 10             	add    esp,0x10
c00141a0:	85 c0                	test   eax,eax
c00141a2:	75 16                	jne    c00141ba <Krnl::getEnv(Process*, char const*)+0x60>
c00141a4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00141a8:	a1 58 6f 02 c0       	mov    eax,ds:0xc0026f58
c00141ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00141b1:	83 c4 08             	add    esp,0x8
c00141b4:	5b                   	pop    ebx
c00141b5:	e9 4a fc ff ff       	jmp    c0013e04 <EnvVarContainer::getEnv(char const*)>
c00141ba:	83 c4 08             	add    esp,0x8
c00141bd:	5b                   	pop    ebx
c00141be:	c3                   	ret    

c00141bf <Krnl::setEnvSystem(char const*, char const*)>:
c00141bf:	83 ec 10             	sub    esp,0x10
c00141c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141ca:	ff 35 58 6f 02 c0    	push   DWORD PTR ds:0xc0026f58
c00141d0:	e8 6d fc ff ff       	call   c0013e42 <EnvVarContainer::setEnv(char const*, char const*)>
c00141d5:	83 c4 1c             	add    esp,0x1c
c00141d8:	c3                   	ret    

c00141d9 <Krnl::setEnvUser(char const*, char const*)>:
c00141d9:	a1 54 6f 02 c0       	mov    eax,ds:0xc0026f54
c00141de:	85 c0                	test   eax,eax
c00141e0:	74 15                	je     c00141f7 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00141e2:	83 ec 10             	sub    esp,0x10
c00141e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141ed:	50                   	push   eax
c00141ee:	e8 4f fc ff ff       	call   c0013e42 <EnvVarContainer::setEnv(char const*, char const*)>
c00141f3:	83 c4 1c             	add    esp,0x1c
c00141f6:	c3                   	ret    
c00141f7:	c3                   	ret    

c00141f8 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00141f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141fc:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0014202:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014206:	e9 37 fc ff ff       	jmp    c0013e42 <EnvVarContainer::setEnv(char const*, char const*)>

c001420b <Krnl::deleteEnvSystem(char const*)>:
c001420b:	c3                   	ret    

c001420c <Krnl::deleteEnvUser(char const*)>:
c001420c:	c3                   	ret    

c001420d <Krnl::deleteEnvProcess(Process*, char const*)>:
c001420d:	c3                   	ret    

c001420e <Krnl::newProcessEnv(Process*)>:
c001420e:	83 ec 28             	sub    esp,0x28
c0014211:	6a 0c                	push   0xc
c0014213:	e8 ab 57 ff ff       	call   c00099c3 <malloc>
c0014218:	5a                   	pop    edx
c0014219:	59                   	pop    ecx
c001421a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001421e:	50                   	push   eax
c001421f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014223:	e8 e0 fe ff ff       	call   c0014108 <EnvVarContainer::EnvVarContainer(Process*)>
c0014228:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001422c:	83 c4 2c             	add    esp,0x2c
c001422f:	c3                   	ret    

c0014230 <Krnl::copyProcessEnv(Process*, Process*)>:
c0014230:	57                   	push   edi
c0014231:	56                   	push   esi
c0014232:	53                   	push   ebx
c0014233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014237:	83 ec 0c             	sub    esp,0xc
c001423a:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0014240:	6a 0c                	push   0xc
c0014242:	e8 7c 57 ff ff       	call   c00099c3 <malloc>
c0014247:	89 c3                	mov    ebx,eax
c0014249:	58                   	pop    eax
c001424a:	5a                   	pop    edx
c001424b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001424f:	53                   	push   ebx
c0014250:	e8 b3 fe ff ff       	call   c0014108 <EnvVarContainer::EnvVarContainer(Process*)>
c0014255:	8b 07                	mov    eax,DWORD PTR [edi]
c0014257:	89 03                	mov    DWORD PTR [ebx],eax
c0014259:	c1 e0 03             	shl    eax,0x3
c001425c:	89 04 24             	mov    DWORD PTR [esp],eax
c001425f:	e8 5f 57 ff ff       	call   c00099c3 <malloc>
c0014264:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014267:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014269:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001426c:	c1 e1 03             	shl    ecx,0x3
c001426f:	89 c7                	mov    edi,eax
c0014271:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014273:	83 c4 10             	add    esp,0x10
c0014276:	89 d8                	mov    eax,ebx
c0014278:	5b                   	pop    ebx
c0014279:	5e                   	pop    esi
c001427a:	5f                   	pop    edi
c001427b:	c3                   	ret    

c001427c <Krnl::loadSystemEnv()>:
c001427c:	53                   	push   ebx
c001427d:	83 ec 14             	sub    esp,0x14
c0014280:	6a 0c                	push   0xc
c0014282:	e8 3c 57 ff ff       	call   c00099c3 <malloc>
c0014287:	89 c3                	mov    ebx,eax
c0014289:	58                   	pop    eax
c001428a:	5a                   	pop    edx
c001428b:	ff 35 70 79 02 c0    	push   DWORD PTR ds:0xc0027970
c0014291:	53                   	push   ebx
c0014292:	e8 71 fe ff ff       	call   c0014108 <EnvVarContainer::EnvVarContainer(Process*)>
c0014297:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001429a:	89 1d 58 6f 02 c0    	mov    DWORD PTR ds:0xc0026f58,ebx
c00142a0:	e8 47 fe ff ff       	call   c00140ec <EnvVarContainer::__loadSystem()>
c00142a5:	83 c4 18             	add    esp,0x18
c00142a8:	5b                   	pop    ebx
c00142a9:	c3                   	ret    

c00142aa <Krnl::loadUserEnv()>:
c00142aa:	53                   	push   ebx
c00142ab:	83 ec 14             	sub    esp,0x14
c00142ae:	6a 0c                	push   0xc
c00142b0:	e8 0e 57 ff ff       	call   c00099c3 <malloc>
c00142b5:	89 c3                	mov    ebx,eax
c00142b7:	58                   	pop    eax
c00142b8:	5a                   	pop    edx
c00142b9:	ff 35 70 79 02 c0    	push   DWORD PTR ds:0xc0027970
c00142bf:	53                   	push   ebx
c00142c0:	e8 43 fe ff ff       	call   c0014108 <EnvVarContainer::EnvVarContainer(Process*)>
c00142c5:	89 1d 54 6f 02 c0    	mov    DWORD PTR ds:0xc0026f54,ebx
c00142cb:	83 c4 18             	add    esp,0x18
c00142ce:	5b                   	pop    ebx
c00142cf:	c3                   	ret    

c00142d0 <Krnl::flushEnv()>:
c00142d0:	c3                   	ret    

c00142d1 <Krnl::getProcessTotalEnvCount(Process*)>:
c00142d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142d5:	8b 15 54 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026f54
c00142db:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00142e1:	a1 58 6f 02 c0       	mov    eax,ds:0xc0026f58
c00142e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00142e8:	03 01                	add    eax,DWORD PTR [ecx]
c00142ea:	85 d2                	test   edx,edx
c00142ec:	74 02                	je     c00142f0 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00142ee:	03 02                	add    eax,DWORD PTR [edx]
c00142f0:	c3                   	ret    

c00142f1 <Krnl::getProcessEnvPair(Process*, int)>:
c00142f1:	57                   	push   edi
c00142f2:	56                   	push   esi
c00142f3:	8b 35 54 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026f54
c00142f9:	53                   	push   ebx
c00142fa:	85 f6                	test   esi,esi
c00142fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014300:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014304:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001430a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001430e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014310:	75 16                	jne    c0014328 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0014312:	39 c2                	cmp    edx,eax
c0014314:	7c 16                	jl     c001432c <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014316:	8b 0d 58 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026f58
c001431c:	8b 31                	mov    esi,DWORD PTR [ecx]
c001431e:	01 c6                	add    esi,eax
c0014320:	39 d6                	cmp    esi,edx
c0014322:	7e 3c                	jle    c0014360 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014324:	29 c2                	sub    edx,eax
c0014326:	eb 04                	jmp    c001432c <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014328:	39 c2                	cmp    edx,eax
c001432a:	7d 05                	jge    c0014331 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001432c:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001432f:	eb 20                	jmp    c0014351 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0014331:	8b 3e                	mov    edi,DWORD PTR [esi]
c0014333:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0014336:	39 d1                	cmp    ecx,edx
c0014338:	7e 04                	jle    c001433e <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001433a:	29 c2                	sub    edx,eax
c001433c:	eb 10                	jmp    c001434e <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001433e:	8b 35 58 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026f58
c0014344:	03 0e                	add    ecx,DWORD PTR [esi]
c0014346:	39 d1                	cmp    ecx,edx
c0014348:	7e 16                	jle    c0014360 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001434a:	29 c2                	sub    edx,eax
c001434c:	29 fa                	sub    edx,edi
c001434e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014351:	8d 14 d0             	lea    edx,[eax+edx*8]
c0014354:	8b 02                	mov    eax,DWORD PTR [edx]
c0014356:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0014359:	89 03                	mov    DWORD PTR [ebx],eax
c001435b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001435e:	eb 1d                	jmp    c001437d <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0014360:	83 ec 0c             	sub    esp,0xc
c0014363:	68 bf 42 02 c0       	push   0xc00242bf
c0014368:	e8 18 00 00 00       	call   c0014385 <Krnl::panic(char const*)>
c001436d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0014373:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001437a:	83 c4 10             	add    esp,0x10
c001437d:	89 d8                	mov    eax,ebx
c001437f:	5b                   	pop    ebx
c0014380:	5e                   	pop    esi
c0014381:	5f                   	pop    edi
c0014382:	c2 04 00             	ret    0x4

c0014385 <Krnl::panic(char const*)>:
c0014385:	55                   	push   ebp
c0014386:	89 e5                	mov    ebp,esp
c0014388:	53                   	push   ebx
c0014389:	83 ec 10             	sub    esp,0x10
c001438c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001438f:	fa                   	cli    
c0014390:	c6 05 64 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f64,0x1
c0014397:	53                   	push   ebx
c0014398:	e8 80 56 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001439d:	58                   	pop    eax
c001439e:	c6 05 20 58 02 c0 00 	mov    BYTE PTR ds:0xc0025820,0x0
c00143a5:	5a                   	pop    edx
c00143a6:	53                   	push   ebx
c00143a7:	68 d9 42 02 c0       	push   0xc00242d9
c00143ac:	e8 12 87 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c00143b1:	59                   	pop    ecx
c00143b2:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00143b7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143bd:	e8 5d 64 ff ff       	call   c000a81f <setActiveTerminal(VgaText*)>
c00143c2:	83 c4 0c             	add    esp,0xc
c00143c5:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00143ca:	6a 01                	push   0x1
c00143cc:	6a 0f                	push   0xf
c00143ce:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143d4:	e8 a5 62 ff ff       	call   c000a67e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00143d9:	58                   	pop    eax
c00143da:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00143df:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143e5:	e8 b6 67 ff ff       	call   c000aba0 <VgaText::clearScreen()>
c00143ea:	58                   	pop    eax
c00143eb:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00143f0:	5a                   	pop    edx
c00143f1:	68 f2 42 02 c0       	push   0xc00242f2
c00143f6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143fc:	e8 2b 69 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c0014401:	59                   	pop    ecx
c0014402:	58                   	pop    eax
c0014403:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014408:	68 98 43 02 c0       	push   0xc0024398
c001440d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014413:	e8 14 69 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c0014418:	58                   	pop    eax
c0014419:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c001441e:	5a                   	pop    edx
c001441f:	68 0e 43 02 c0       	push   0xc002430e
c0014424:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001442a:	e8 fd 68 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c001442f:	59                   	pop    ecx
c0014430:	58                   	pop    eax
c0014431:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014436:	53                   	push   ebx
c0014437:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001443d:	e8 ea 68 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c0014442:	58                   	pop    eax
c0014443:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014448:	5a                   	pop    edx
c0014449:	68 2e 43 02 c0       	push   0xc002432e
c001444e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014454:	e8 d3 68 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c0014459:	a1 60 6f 02 c0       	mov    eax,ds:0xc0026f60
c001445e:	83 c4 10             	add    esp,0x10
c0014461:	85 c0                	test   eax,eax
c0014463:	74 02                	je     c0014467 <Krnl::panic(char const*)+0xe2>
c0014465:	ff d0                	call   eax
c0014467:	83 ec 0c             	sub    esp,0xc
c001446a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001446d:	e8 af 30 00 00       	call   c0017521 <Thr::getDriverNameFromAddress(unsigned long)>
c0014472:	83 c4 10             	add    esp,0x10
c0014475:	89 c3                	mov    ebx,eax
c0014477:	85 c0                	test   eax,eax
c0014479:	0f 84 4e 02 00 00    	je     c00146cd <Krnl::panic(char const*)+0x348>
c001447f:	83 ec 08             	sub    esp,0x8
c0014482:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014487:	68 d4 43 02 c0       	push   0xc00243d4
c001448c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014492:	e8 95 68 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c0014497:	58                   	pop    eax
c0014498:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c001449d:	5a                   	pop    edx
c001449e:	68 0e 43 02 c0       	push   0xc002430e
c00144a3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144a9:	e8 7e 68 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c00144ae:	59                   	pop    ecx
c00144af:	58                   	pop    eax
c00144b0:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00144b5:	53                   	push   ebx
c00144b6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144bc:	e8 6b 68 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c00144c1:	83 c4 10             	add    esp,0x10
c00144c4:	83 ec 08             	sub    esp,0x8
c00144c7:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00144cc:	68 2d 43 02 c0       	push   0xc002432d
c00144d1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144d7:	e8 50 68 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c00144dc:	58                   	pop    eax
c00144dd:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00144e2:	5a                   	pop    edx
c00144e3:	68 2c 44 02 c0       	push   0xc002442c
c00144e8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144ee:	e8 39 68 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c00144f3:	59                   	pop    ecx
c00144f4:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00144f9:	5b                   	pop    ebx
c00144fa:	68 6c 44 02 c0       	push   0xc002446c
c00144ff:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014505:	e8 22 68 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c001450a:	58                   	pop    eax
c001450b:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014510:	5a                   	pop    edx
c0014511:	68 19 43 02 c0       	push   0xc0024319
c0014516:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001451c:	e8 0b 68 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c0014521:	59                   	pop    ecx
c0014522:	5b                   	pop    ebx
c0014523:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014526:	68 31 43 02 c0       	push   0xc0024331
c001452b:	e8 93 85 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0014530:	58                   	pop    eax
c0014531:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014534:	5a                   	pop    edx
c0014535:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014538:	68 3a 43 02 c0       	push   0xc002433a
c001453d:	e8 81 85 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0014542:	59                   	pop    ecx
c0014543:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014546:	5b                   	pop    ebx
c0014547:	8b 00                	mov    eax,DWORD PTR [eax]
c0014549:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001454c:	68 43 43 02 c0       	push   0xc0024343
c0014551:	e8 6d 85 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0014556:	58                   	pop    eax
c0014557:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c001455c:	5a                   	pop    edx
c001455d:	68 b0 44 02 c0       	push   0xc00244b0
c0014562:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014568:	e8 bf 67 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c001456d:	59                   	pop    ecx
c001456e:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014573:	5b                   	pop    ebx
c0014574:	68 4c 43 02 c0       	push   0xc002434c
c0014579:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001457f:	e8 a8 67 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c0014584:	0f 20 c0             	mov    eax,cr0
c0014587:	5a                   	pop    edx
c0014588:	59                   	pop    ecx
c0014589:	50                   	push   eax
c001458a:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c001458f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014595:	e8 4c 67 ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c001459a:	5b                   	pop    ebx
c001459b:	58                   	pop    eax
c001459c:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00145a1:	68 56 43 02 c0       	push   0xc0024356
c00145a6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145ac:	e8 7b 67 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c00145b1:	0f 20 d0             	mov    eax,cr2
c00145b4:	5a                   	pop    edx
c00145b5:	59                   	pop    ecx
c00145b6:	50                   	push   eax
c00145b7:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00145bc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145c2:	e8 1f 67 ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c00145c7:	5b                   	pop    ebx
c00145c8:	58                   	pop    eax
c00145c9:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00145ce:	68 60 43 02 c0       	push   0xc0024360
c00145d3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145d9:	e8 4e 67 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c00145de:	0f 20 d8             	mov    eax,cr3
c00145e1:	5a                   	pop    edx
c00145e2:	59                   	pop    ecx
c00145e3:	50                   	push   eax
c00145e4:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00145e9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145ef:	e8 f2 66 ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c00145f4:	5b                   	pop    ebx
c00145f5:	58                   	pop    eax
c00145f6:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00145fb:	68 73 43 02 c0       	push   0xc0024373
c0014600:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014606:	e8 21 67 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c001460b:	0f 20 e0             	mov    eax,cr4
c001460e:	5a                   	pop    edx
c001460f:	59                   	pop    ecx
c0014610:	50                   	push   eax
c0014611:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014616:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001461c:	e8 c5 66 ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c0014621:	5b                   	pop    ebx
c0014622:	58                   	pop    eax
c0014623:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014628:	68 7d 43 02 c0       	push   0xc002437d
c001462d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014633:	e8 f4 66 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c0014638:	5a                   	pop    edx
c0014639:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c001463e:	59                   	pop    ecx
c001463f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014645:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014648:	50                   	push   eax
c0014649:	e8 98 66 ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c001464e:	5b                   	pop    ebx
c001464f:	58                   	pop    eax
c0014650:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014655:	68 94 43 02 c0       	push   0xc0024394
c001465a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014660:	e8 c7 66 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c0014665:	5a                   	pop    edx
c0014666:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c001466b:	59                   	pop    ecx
c001466c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014672:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014675:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014678:	50                   	push   eax
c0014679:	e8 68 66 ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c001467e:	5b                   	pop    ebx
c001467f:	58                   	pop    eax
c0014680:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0014685:	68 94 43 02 c0       	push   0xc0024394
c001468a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014690:	e8 97 66 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c0014695:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c001469a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001469d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00146a3:	8b 12                	mov    edx,DWORD PTR [edx]
c00146a5:	59                   	pop    ecx
c00146a6:	5b                   	pop    ebx
c00146a7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c00146aa:	50                   	push   eax
c00146ab:	e8 36 66 ff ff       	call   c000ace6 <VgaText::putx(unsigned int)>
c00146b0:	83 c4 10             	add    esp,0x10
c00146b3:	b2 fe                	mov    dl,0xfe
c00146b5:	e4 60                	in     al,0x60
c00146b7:	3c 1c                	cmp    al,0x1c
c00146b9:	74 04                	je     c00146bf <Krnl::panic(char const*)+0x33a>
c00146bb:	3c 5a                	cmp    al,0x5a
c00146bd:	75 f6                	jne    c00146b5 <Krnl::panic(char const*)+0x330>
c00146bf:	e4 64                	in     al,0x64
c00146c1:	a8 02                	test   al,0x2
c00146c3:	75 fa                	jne    c00146bf <Krnl::panic(char const*)+0x33a>
c00146c5:	88 d0                	mov    al,dl
c00146c7:	e6 64                	out    0x64,al
c00146c9:	fa                   	cli    
c00146ca:	f4                   	hlt    
c00146cb:	eb e8                	jmp    c00146b5 <Krnl::panic(char const*)+0x330>
c00146cd:	50                   	push   eax
c00146ce:	50                   	push   eax
c00146cf:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00146d4:	68 00 44 02 c0       	push   0xc0024400
c00146d9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00146df:	e8 48 66 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c00146e4:	58                   	pop    eax
c00146e5:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c00146ea:	5a                   	pop    edx
c00146eb:	68 0e 43 02 c0       	push   0xc002430e
c00146f0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00146f6:	e8 31 66 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c00146fb:	59                   	pop    ecx
c00146fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014701:	5b                   	pop    ebx
c0014702:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014705:	83 c0 0c             	add    eax,0xc
c0014708:	50                   	push   eax
c0014709:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c001470e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014714:	e8 13 66 ff ff       	call   c000ad2c <VgaText::puts(char const*)>
c0014719:	83 c4 10             	add    esp,0x10
c001471c:	e9 a3 fd ff ff       	jmp    c00144c4 <Krnl::panic(char const*)+0x13f>
c0014721:	66 90                	xchg   ax,ax
c0014723:	90                   	nop

c0014724 <Net::switchEndian16(unsigned short)>:
c0014724:	83 ec 04             	sub    esp,0x4
c0014727:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001472b:	66 89 04 24          	mov    WORD PTR [esp],ax
c001472f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014733:	c1 f8 08             	sar    eax,0x8
c0014736:	89 c2                	mov    edx,eax
c0014738:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001473c:	c1 e0 08             	shl    eax,0x8
c001473f:	09 d0                	or     eax,edx
c0014741:	83 c4 04             	add    esp,0x4
c0014744:	c3                   	ret    
c0014745:	8d 76 00             	lea    esi,[esi+0x0]

c0014748 <Net::switchEndian32(unsigned int)>:
c0014748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001474c:	c1 e8 18             	shr    eax,0x18
c001474f:	89 c2                	mov    edx,eax
c0014751:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014755:	c1 e0 08             	shl    eax,0x8
c0014758:	25 00 00 ff 00       	and    eax,0xff0000
c001475d:	09 c2                	or     edx,eax
c001475f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014763:	c1 e8 08             	shr    eax,0x8
c0014766:	25 00 ff 00 00       	and    eax,0xff00
c001476b:	09 c2                	or     edx,eax
c001476d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014771:	c1 e0 18             	shl    eax,0x18
c0014774:	09 d0                	or     eax,edx
c0014776:	c3                   	ret    
c0014777:	90                   	nop

c0014778 <Net::crc32Calc(unsigned char*, int)>:
c0014778:	83 ec 10             	sub    esp,0x10
c001477b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014780:	75 0a                	jne    c001478c <Net::crc32Calc(unsigned char*, int)+0x14>
c0014782:	b8 00 00 00 00       	mov    eax,0x0
c0014787:	e9 8c 00 00 00       	jmp    c0014818 <Net::crc32Calc(unsigned char*, int)+0xa0>
c001478c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014791:	7f 09                	jg     c001479c <Net::crc32Calc(unsigned char*, int)+0x24>
c0014793:	b8 00 00 00 00       	mov    eax,0x0
c0014798:	eb 7e                	jmp    c0014818 <Net::crc32Calc(unsigned char*, int)+0xa0>
c001479a:	66 90                	xchg   ax,ax
c001479c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c00147a4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00147ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00147b0:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00147b4:	7d 5a                	jge    c0014810 <Net::crc32Calc(unsigned char*, int)+0x98>
c00147b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00147ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147be:	01 d0                	add    eax,edx
c00147c0:	8a 00                	mov    al,BYTE PTR [eax]
c00147c2:	0f b6 c0             	movzx  eax,al
c00147c5:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00147c9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00147d1:	8d 76 00             	lea    esi,[esi+0x0]
c00147d4:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00147d9:	7f 2d                	jg     c0014808 <Net::crc32Calc(unsigned char*, int)+0x90>
c00147db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147df:	83 e0 01             	and    eax,0x1
c00147e2:	74 10                	je     c00147f4 <Net::crc32Calc(unsigned char*, int)+0x7c>
c00147e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147e8:	d1 e8                	shr    eax,1
c00147ea:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00147ef:	eb 0b                	jmp    c00147fc <Net::crc32Calc(unsigned char*, int)+0x84>
c00147f1:	8d 76 00             	lea    esi,[esi+0x0]
c00147f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147f8:	d1 e8                	shr    eax,1
c00147fa:	66 90                	xchg   ax,ax
c00147fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014800:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014804:	eb ce                	jmp    c00147d4 <Net::crc32Calc(unsigned char*, int)+0x5c>
c0014806:	66 90                	xchg   ax,ax
c0014808:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001480c:	eb 9e                	jmp    c00147ac <Net::crc32Calc(unsigned char*, int)+0x34>
c001480e:	66 90                	xchg   ax,ax
c0014810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014814:	f7 d0                	not    eax
c0014816:	66 90                	xchg   ax,ax
c0014818:	83 c4 10             	add    esp,0x10
c001481b:	c3                   	ret    

c001481c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001481c:	57                   	push   edi
c001481d:	56                   	push   esi
c001481e:	53                   	push   ebx
c001481f:	83 ec 60             	sub    esp,0x60
c0014822:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014829:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001482d:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0014835:	8d 76 00             	lea    esi,[esi+0x0]
c0014838:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001483d:	7f 1d                	jg     c001485c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c001483f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014846:	8d 50 01             	lea    edx,[eax+0x1]
c0014849:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014850:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0014853:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0014857:	eb df                	jmp    c0014838 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c0014859:	8d 76 00             	lea    esi,[esi+0x0]
c001485c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014863:	8d 50 01             	lea    edx,[eax+0x1]
c0014866:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001486d:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0014870:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014877:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001487b:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001487f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014883:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001488b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001488f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014893:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014897:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001489b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001489f:	89 c6                	mov    esi,eax
c00148a1:	89 d7                	mov    edi,edx
c00148a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148a5:	89 c8                	mov    eax,ecx
c00148a7:	89 fa                	mov    edx,edi
c00148a9:	89 f3                	mov    ebx,esi
c00148ab:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00148af:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00148b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00148b6:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00148be:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00148c5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00148c9:	8d 44 24 78          	lea    eax,[esp+0x78]
c00148cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00148d1:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c00148d9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00148dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00148e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148e5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00148e9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00148ed:	89 c6                	mov    esi,eax
c00148ef:	89 d7                	mov    edi,edx
c00148f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148f3:	89 c8                	mov    eax,ecx
c00148f5:	89 fa                	mov    edx,edi
c00148f7:	89 f3                	mov    ebx,esi
c00148f9:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00148fd:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014901:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014905:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001490d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014914:	0f b7 c0             	movzx  eax,ax
c0014917:	c1 f8 08             	sar    eax,0x8
c001491a:	89 c1                	mov    ecx,eax
c001491c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014923:	8d 50 01             	lea    edx,[eax+0x1]
c0014926:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001492d:	88 ca                	mov    dl,cl
c001492f:	88 10                	mov    BYTE PTR [eax],dl
c0014931:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014938:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001493f:	8d 48 01             	lea    ecx,[eax+0x1]
c0014942:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c0014949:	88 10                	mov    BYTE PTR [eax],dl
c001494b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001494f:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0014953:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001495a:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001495e:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0014962:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0014966:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001496a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001496e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014972:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014976:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001497a:	89 c6                	mov    esi,eax
c001497c:	89 d7                	mov    edi,edx
c001497e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014980:	89 c8                	mov    eax,ecx
c0014982:	89 fa                	mov    edx,edi
c0014984:	89 f3                	mov    ebx,esi
c0014986:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001498a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001498e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014992:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014996:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001499d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00149a4:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c00149a8:	50                   	push   eax
c00149a9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00149ad:	e8 c6 fd ff ff       	call   c0014778 <Net::crc32Calc(unsigned char*, int)>
c00149b2:	83 c4 08             	add    esp,0x8
c00149b5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00149b9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00149bd:	c1 e8 18             	shr    eax,0x18
c00149c0:	89 c1                	mov    ecx,eax
c00149c2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00149c9:	8d 50 01             	lea    edx,[eax+0x1]
c00149cc:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00149d3:	88 ca                	mov    dl,cl
c00149d5:	88 10                	mov    BYTE PTR [eax],dl
c00149d7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00149db:	c1 e8 10             	shr    eax,0x10
c00149de:	89 c1                	mov    ecx,eax
c00149e0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00149e7:	8d 50 01             	lea    edx,[eax+0x1]
c00149ea:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00149f1:	88 ca                	mov    dl,cl
c00149f3:	88 10                	mov    BYTE PTR [eax],dl
c00149f5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00149f9:	c1 e8 08             	shr    eax,0x8
c00149fc:	89 c1                	mov    ecx,eax
c00149fe:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014a05:	8d 50 01             	lea    edx,[eax+0x1]
c0014a08:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014a0f:	88 ca                	mov    dl,cl
c0014a11:	88 10                	mov    BYTE PTR [eax],dl
c0014a13:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014a1a:	8d 50 01             	lea    edx,[eax+0x1]
c0014a1d:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014a24:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0014a28:	88 10                	mov    BYTE PTR [eax],dl
c0014a2a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014a2e:	83 c4 60             	add    esp,0x60
c0014a31:	5b                   	pop    ebx
c0014a32:	5e                   	pop    esi
c0014a33:	5f                   	pop    edi
c0014a34:	c3                   	ret    
c0014a35:	8d 76 00             	lea    esi,[esi+0x0]

c0014a38 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0014a38:	57                   	push   edi
c0014a39:	56                   	push   esi
c0014a3a:	53                   	push   ebx
c0014a3b:	83 ec 70             	sub    esp,0x70
c0014a3e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a45:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0014a49:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c0014a51:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014a58:	83 c0 0e             	add    eax,0xe
c0014a5b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014a5f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a66:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014a6a:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014a72:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014a76:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014a7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a7e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a82:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014a86:	89 c6                	mov    esi,eax
c0014a88:	89 d7                	mov    edi,edx
c0014a8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a8c:	89 c8                	mov    eax,ecx
c0014a8e:	89 fa                	mov    edx,edi
c0014a90:	89 f3                	mov    ebx,esi
c0014a92:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014a96:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014a9a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a9e:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014aa6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014aad:	83 c0 08             	add    eax,0x8
c0014ab0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0014ab4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014abb:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0014abf:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0014ac7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014acb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014acf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014ad3:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014ad7:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014adb:	89 c6                	mov    esi,eax
c0014add:	89 d7                	mov    edi,edx
c0014adf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014ae1:	89 c8                	mov    eax,ecx
c0014ae3:	89 fa                	mov    edx,edi
c0014ae5:	89 f3                	mov    ebx,esi
c0014ae7:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014aeb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014aef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014af3:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014afb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014b02:	8d 50 01             	lea    edx,[eax+0x1]
c0014b05:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014b0c:	8a 00                	mov    al,BYTE PTR [eax]
c0014b0e:	0f b6 c0             	movzx  eax,al
c0014b11:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0014b16:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014b1d:	8d 50 01             	lea    edx,[eax+0x1]
c0014b20:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014b27:	8a 00                	mov    al,BYTE PTR [eax]
c0014b29:	0f b6 c0             	movzx  eax,al
c0014b2c:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0014b31:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0014b36:	c1 e0 08             	shl    eax,0x8
c0014b39:	89 c2                	mov    edx,eax
c0014b3b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0014b3f:	09 d0                	or     eax,edx
c0014b41:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014b48:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0014b4c:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0014b54:	75 46                	jne    c0014b9c <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014b56:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b5d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014b60:	66 3d dc 05          	cmp    ax,0x5dc
c0014b64:	77 16                	ja     c0014b7c <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0014b66:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b6d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014b70:	0f b7 c0             	movzx  eax,ax
c0014b73:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0014b7a:	eb 20                	jmp    c0014b9c <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014b7c:	83 ec 0c             	sub    esp,0xc
c0014b7f:	68 d8 44 02 c0       	push   0xc00244d8
c0014b84:	e8 3a 7f ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0014b89:	83 c4 10             	add    esp,0x10
c0014b8c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b93:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0014b97:	e9 18 01 00 00       	jmp    c0014cb4 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0014b9c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014ba3:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014baa:	8b 12                	mov    edx,DWORD PTR [edx]
c0014bac:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014bb0:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014bb7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014bc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014bc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bcb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014bd3:	89 c6                	mov    esi,eax
c0014bd5:	89 d7                	mov    edi,edx
c0014bd7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014bd9:	89 c8                	mov    eax,ecx
c0014bdb:	89 fa                	mov    edx,edi
c0014bdd:	89 f3                	mov    ebx,esi
c0014bdf:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014be3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014be7:	89 04 24             	mov    DWORD PTR [esp],eax
c0014bea:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014bf1:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0014bf8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bff:	8d 50 01             	lea    edx,[eax+0x1]
c0014c02:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014c09:	8a 00                	mov    al,BYTE PTR [eax]
c0014c0b:	0f b6 c0             	movzx  eax,al
c0014c0e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0014c12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c19:	8d 50 01             	lea    edx,[eax+0x1]
c0014c1c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014c23:	8a 00                	mov    al,BYTE PTR [eax]
c0014c25:	0f b6 c0             	movzx  eax,al
c0014c28:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0014c2c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c33:	8d 50 01             	lea    edx,[eax+0x1]
c0014c36:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014c3d:	8a 00                	mov    al,BYTE PTR [eax]
c0014c3f:	0f b6 c0             	movzx  eax,al
c0014c42:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0014c46:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c4d:	8d 50 01             	lea    edx,[eax+0x1]
c0014c50:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014c57:	8a 00                	mov    al,BYTE PTR [eax]
c0014c59:	0f b6 c0             	movzx  eax,al
c0014c5c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014c60:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0014c64:	c1 e0 18             	shl    eax,0x18
c0014c67:	89 c2                	mov    edx,eax
c0014c69:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0014c6d:	c1 e0 10             	shl    eax,0x10
c0014c70:	09 c2                	or     edx,eax
c0014c72:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0014c76:	c1 e0 08             	shl    eax,0x8
c0014c79:	09 d0                	or     eax,edx
c0014c7b:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0014c7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014c83:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c8a:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0014c8e:	83 e8 04             	sub    eax,0x4
c0014c91:	83 ec 08             	sub    esp,0x8
c0014c94:	50                   	push   eax
c0014c95:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014c99:	e8 da fa ff ff       	call   c0014778 <Net::crc32Calc(unsigned char*, int)>
c0014c9e:	83 c4 10             	add    esp,0x10
c0014ca1:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0014ca5:	0f 94 c2             	sete   dl
c0014ca8:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014caf:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0014cb2:	90                   	nop
c0014cb3:	90                   	nop
c0014cb4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014cbb:	83 c4 70             	add    esp,0x70
c0014cbe:	5b                   	pop    ebx
c0014cbf:	5e                   	pop    esi
c0014cc0:	5f                   	pop    edi
c0014cc1:	c2 04 00             	ret    0x4

c0014cc4 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014cc4:	55                   	push   ebp
c0014cc5:	57                   	push   edi
c0014cc6:	56                   	push   esi
c0014cc7:	53                   	push   ebx
c0014cc8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014cce:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014cd5:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014cd7:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014cda:	80 fb 40             	cmp    bl,0x40
c0014cdd:	75 1b                	jne    c0014cfa <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014cdf:	8a 16                	mov    dl,BYTE PTR [esi]
c0014ce1:	84 d2                	test   dl,dl
c0014ce3:	0f 84 f1 00 00 00    	je     c0014dda <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014ce9:	8d 46 01             	lea    eax,[esi+0x1]
c0014cec:	80 fa 3a             	cmp    dl,0x3a
c0014cef:	74 04                	je     c0014cf5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014cf1:	89 c6                	mov    esi,eax
c0014cf3:	eb ea                	jmp    c0014cdf <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014cf5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014cf8:	89 c6                	mov    esi,eax
c0014cfa:	50                   	push   eax
c0014cfb:	6a 40                	push   0x40
c0014cfd:	6a 00                	push   0x0
c0014cff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014d03:	50                   	push   eax
c0014d04:	e8 7b b9 fe ff       	call   c0000684 <memset>
c0014d09:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014d10:	31 c0                	xor    eax,eax
c0014d12:	83 c4 10             	add    esp,0x10
c0014d15:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014d17:	84 c9                	test   cl,cl
c0014d19:	0f 84 bb 00 00 00    	je     c0014dda <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d1f:	3d c7 00 00 00       	cmp    eax,0xc7
c0014d24:	0f 8f b0 00 00 00    	jg     c0014dda <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d2a:	80 f9 0a             	cmp    cl,0xa
c0014d2d:	0f 85 98 00 00 00    	jne    c0014dcb <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014d33:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014d38:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014d3c:	a8 df                	test   al,0xdf
c0014d3e:	0f 94 c1             	sete   cl
c0014d41:	3c 23                	cmp    al,0x23
c0014d43:	0f 94 c2             	sete   dl
c0014d46:	08 d1                	or     cl,dl
c0014d48:	75 4a                	jne    c0014d94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d4a:	8d 50 f7             	lea    edx,[eax-0x9]
c0014d4d:	80 fa 01             	cmp    dl,0x1
c0014d50:	76 42                	jbe    c0014d94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d52:	3c 5b                	cmp    al,0x5b
c0014d54:	75 42                	jne    c0014d98 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014d56:	80 fb 40             	cmp    bl,0x40
c0014d59:	75 39                	jne    c0014d94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d5b:	83 ec 0c             	sub    esp,0xc
c0014d5e:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014d62:	52                   	push   edx
c0014d63:	e8 38 b9 fe ff       	call   c00006a0 <strlen>
c0014d68:	83 c4 10             	add    esp,0x10
c0014d6b:	83 f8 3f             	cmp    eax,0x3f
c0014d6e:	77 6a                	ja     c0014dda <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d70:	50                   	push   eax
c0014d71:	50                   	push   eax
c0014d72:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014d76:	52                   	push   edx
c0014d77:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014d7b:	52                   	push   edx
c0014d7c:	e8 bf b9 fe ff       	call   c0000740 <strcpy>
c0014d81:	58                   	pop    eax
c0014d82:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014d86:	52                   	push   edx
c0014d87:	e8 14 b9 fe ff       	call   c00006a0 <strlen>
c0014d8c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0014d91:	83 c4 10             	add    esp,0x10
c0014d94:	31 d2                	xor    edx,edx
c0014d96:	eb 3a                	jmp    c0014dd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014d98:	80 fb 40             	cmp    bl,0x40
c0014d9b:	74 06                	je     c0014da3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0014d9d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014da1:	eb 20                	jmp    c0014dc3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014da3:	50                   	push   eax
c0014da4:	50                   	push   eax
c0014da5:	55                   	push   ebp
c0014da6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014daa:	50                   	push   eax
c0014dab:	e8 1c ba fe ff       	call   c00007cc <strcmp>
c0014db0:	83 c4 10             	add    esp,0x10
c0014db3:	85 c0                	test   eax,eax
c0014db5:	75 dd                	jne    c0014d94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014db7:	eb e4                	jmp    c0014d9d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0014db9:	8d 50 01             	lea    edx,[eax+0x1]
c0014dbc:	80 f9 3d             	cmp    cl,0x3d
c0014dbf:	74 1d                	je     c0014dde <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0014dc1:	89 d0                	mov    eax,edx
c0014dc3:	8a 08                	mov    cl,BYTE PTR [eax]
c0014dc5:	84 c9                	test   cl,cl
c0014dc7:	75 f0                	jne    c0014db9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0014dc9:	eb 0f                	jmp    c0014dda <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014dcb:	8d 50 01             	lea    edx,[eax+0x1]
c0014dce:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0014dd2:	47                   	inc    edi
c0014dd3:	89 d0                	mov    eax,edx
c0014dd5:	e9 3b ff ff ff       	jmp    c0014d15 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0014dda:	31 c0                	xor    eax,eax
c0014ddc:	eb 33                	jmp    c0014e11 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0014dde:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014de2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014de5:	50                   	push   eax
c0014de6:	50                   	push   eax
c0014de7:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014deb:	50                   	push   eax
c0014dec:	56                   	push   esi
c0014ded:	e8 da b9 fe ff       	call   c00007cc <strcmp>
c0014df2:	83 c4 10             	add    esp,0x10
c0014df5:	85 c0                	test   eax,eax
c0014df7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014dfb:	75 97                	jne    c0014d94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014dfd:	51                   	push   ecx
c0014dfe:	51                   	push   ecx
c0014dff:	52                   	push   edx
c0014e00:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014e07:	e8 34 b9 fe ff       	call   c0000740 <strcpy>
c0014e0c:	83 c4 10             	add    esp,0x10
c0014e0f:	b0 01                	mov    al,0x1
c0014e11:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014e17:	5b                   	pop    ebx
c0014e18:	5e                   	pop    esi
c0014e19:	5f                   	pop    edi
c0014e1a:	5d                   	pop    ebp
c0014e1b:	c3                   	ret    

c0014e1c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014e1c:	57                   	push   edi
c0014e1d:	56                   	push   esi
c0014e1e:	53                   	push   ebx
c0014e1f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014e25:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0014e2c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0014e33:	53                   	push   ebx
c0014e34:	e8 67 b8 fe ff       	call   c00006a0 <strlen>
c0014e39:	89 34 24             	mov    DWORD PTR [esp],esi
c0014e3c:	89 c7                	mov    edi,eax
c0014e3e:	e8 5d b8 fe ff       	call   c00006a0 <strlen>
c0014e43:	83 c4 10             	add    esp,0x10
c0014e46:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014e4a:	3d ff 00 00 00       	cmp    eax,0xff
c0014e4f:	0f 87 d3 00 00 00    	ja     c0014f28 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014e55:	57                   	push   edi
c0014e56:	57                   	push   edi
c0014e57:	56                   	push   esi
c0014e58:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014e5c:	56                   	push   esi
c0014e5d:	e8 de b8 fe ff       	call   c0000740 <strcpy>
c0014e62:	58                   	pop    eax
c0014e63:	5a                   	pop    edx
c0014e64:	68 7a 48 02 c0       	push   0xc002487a
c0014e69:	56                   	push   esi
c0014e6a:	e8 11 ba fe ff       	call   c0000880 <strcat>
c0014e6f:	59                   	pop    ecx
c0014e70:	5f                   	pop    edi
c0014e71:	53                   	push   ebx
c0014e72:	56                   	push   esi
c0014e73:	e8 08 ba fe ff       	call   c0000880 <strcat>
c0014e78:	58                   	pop    eax
c0014e79:	5a                   	pop    edx
c0014e7a:	68 24 45 02 c0       	push   0xc0024524
c0014e7f:	56                   	push   esi
c0014e80:	e8 fb b9 fe ff       	call   c0000880 <strcat>
c0014e85:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014e8c:	e8 32 4b ff ff       	call   c00099c3 <malloc>
c0014e91:	83 c4 0c             	add    esp,0xc
c0014e94:	89 c3                	mov    ebx,eax
c0014e96:	ff 35 70 79 02 c0    	push   DWORD PTR ds:0xc0027970
c0014e9c:	56                   	push   esi
c0014e9d:	50                   	push   eax
c0014e9e:	e8 8b 81 ff ff       	call   c000d02e <File::File(char const*, Process*)>
c0014ea3:	83 c4 10             	add    esp,0x10
c0014ea6:	85 db                	test   ebx,ebx
c0014ea8:	74 7e                	je     c0014f28 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014eaa:	51                   	push   ecx
c0014eab:	51                   	push   ecx
c0014eac:	6a 01                	push   0x1
c0014eae:	53                   	push   ebx
c0014eaf:	e8 de 81 ff ff       	call   c000d092 <File::open(FileOpenMode)>
c0014eb4:	83 c4 10             	add    esp,0x10
c0014eb7:	85 c0                	test   eax,eax
c0014eb9:	74 08                	je     c0014ec3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0014ebb:	83 ec 0c             	sub    esp,0xc
c0014ebe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ec0:	53                   	push   ebx
c0014ec1:	eb 5f                	jmp    c0014f22 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0014ec3:	52                   	push   edx
c0014ec4:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014ec8:	50                   	push   eax
c0014ec9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014ecd:	50                   	push   eax
c0014ece:	53                   	push   ebx
c0014ecf:	e8 6a 84 ff ff       	call   c000d33e <File::stat(unsigned long long*, bool*)>
c0014ed4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014ed8:	83 c4 10             	add    esp,0x10
c0014edb:	89 c1                	mov    ecx,eax
c0014edd:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0014ee1:	74 31                	je     c0014f14 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014ee3:	83 ec 0c             	sub    esp,0xc
c0014ee6:	50                   	push   eax
c0014ee7:	e8 d7 4a ff ff       	call   c00099c3 <malloc>
c0014eec:	89 c6                	mov    esi,eax
c0014eee:	58                   	pop    eax
c0014eef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ef1:	8d 54 24 20          	lea    edx,[esp+0x20]
c0014ef5:	52                   	push   edx
c0014ef6:	56                   	push   esi
c0014ef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014efb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014eff:	53                   	push   ebx
c0014f00:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f03:	83 c4 20             	add    esp,0x20
c0014f06:	85 c0                	test   eax,eax
c0014f08:	75 0a                	jne    c0014f14 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014f0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f0e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0014f12:	74 18                	je     c0014f2c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0014f14:	83 ec 0c             	sub    esp,0xc
c0014f17:	53                   	push   ebx
c0014f18:	e8 d3 81 ff ff       	call   c000d0f0 <File::close()>
c0014f1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f22:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f25:	83 c4 10             	add    esp,0x10
c0014f28:	31 c0                	xor    eax,eax
c0014f2a:	eb 3b                	jmp    c0014f67 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0014f2c:	83 ec 0c             	sub    esp,0xc
c0014f2f:	53                   	push   ebx
c0014f30:	e8 bb 81 ff ff       	call   c000d0f0 <File::close()>
c0014f35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f3a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f3d:	83 c4 0c             	add    esp,0xc
c0014f40:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014f47:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014f4e:	56                   	push   esi
c0014f4f:	e8 70 fd ff ff       	call   c0014cc4 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0014f54:	89 34 24             	mov    DWORD PTR [esp],esi
c0014f57:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014f5b:	e8 73 4a ff ff       	call   c00099d3 <free>
c0014f60:	83 c4 10             	add    esp,0x10
c0014f63:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014f67:	81 c4 20 01 00 00    	add    esp,0x120
c0014f6d:	5b                   	pop    ebx
c0014f6e:	5e                   	pop    esi
c0014f6f:	5f                   	pop    edi
c0014f70:	c3                   	ret    

c0014f71 <Reg::getLine(char*, char*, char*)>:
c0014f71:	57                   	push   edi
c0014f72:	56                   	push   esi
c0014f73:	53                   	push   ebx
c0014f74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f78:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014f7c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014f80:	57                   	push   edi
c0014f81:	56                   	push   esi
c0014f82:	53                   	push   ebx
c0014f83:	68 29 45 02 c0       	push   0xc0024529
c0014f88:	e8 8f fe ff ff       	call   c0014e1c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f8d:	83 c4 10             	add    esp,0x10
c0014f90:	84 c0                	test   al,al
c0014f92:	75 10                	jne    c0014fa4 <Reg::getLine(char*, char*, char*)+0x33>
c0014f94:	57                   	push   edi
c0014f95:	56                   	push   esi
c0014f96:	53                   	push   ebx
c0014f97:	68 4e 45 02 c0       	push   0xc002454e
c0014f9c:	e8 7b fe ff ff       	call   c0014e1c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014fa1:	83 c4 10             	add    esp,0x10
c0014fa4:	5b                   	pop    ebx
c0014fa5:	5e                   	pop    esi
c0014fa6:	5f                   	pop    edi
c0014fa7:	c3                   	ret    

c0014fa8 <Reg::readInt(char*, char*, int*)>:
c0014fa8:	55                   	push   ebp
c0014fa9:	57                   	push   edi
c0014faa:	56                   	push   esi
c0014fab:	53                   	push   ebx
c0014fac:	81 ec f0 00 00 00    	sub    esp,0xf0
c0014fb2:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0014fb6:	57                   	push   edi
c0014fb7:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014fbe:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014fc5:	e8 a7 ff ff ff       	call   c0014f71 <Reg::getLine(char*, char*, char*)>
c0014fca:	83 c4 10             	add    esp,0x10
c0014fcd:	84 c0                	test   al,al
c0014fcf:	0f 84 b3 00 00 00    	je     c0015088 <Reg::readInt(char*, char*, int*)+0xe0>
c0014fd5:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0014fd9:	80 fa 2b             	cmp    dl,0x2b
c0014fdc:	74 0c                	je     c0014fea <Reg::readInt(char*, char*, int*)+0x42>
c0014fde:	80 fa 2d             	cmp    dl,0x2d
c0014fe1:	75 0e                	jne    c0014ff1 <Reg::readInt(char*, char*, int*)+0x49>
c0014fe3:	ba 01 00 00 00       	mov    edx,0x1
c0014fe8:	eb 0b                	jmp    c0014ff5 <Reg::readInt(char*, char*, int*)+0x4d>
c0014fea:	ba 01 00 00 00       	mov    edx,0x1
c0014fef:	eb 02                	jmp    c0014ff3 <Reg::readInt(char*, char*, int*)+0x4b>
c0014ff1:	31 d2                	xor    edx,edx
c0014ff3:	31 c0                	xor    eax,eax
c0014ff5:	be 0a 00 00 00       	mov    esi,0xa
c0014ffa:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0014fff:	75 20                	jne    c0015021 <Reg::readInt(char*, char*, int*)+0x79>
c0015001:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015005:	80 f9 78             	cmp    cl,0x78
c0015008:	75 0a                	jne    c0015014 <Reg::readInt(char*, char*, int*)+0x6c>
c001500a:	83 c2 02             	add    edx,0x2
c001500d:	be 10 00 00 00       	mov    esi,0x10
c0015012:	eb 0d                	jmp    c0015021 <Reg::readInt(char*, char*, int*)+0x79>
c0015014:	80 f9 62             	cmp    cl,0x62
c0015017:	75 08                	jne    c0015021 <Reg::readInt(char*, char*, int*)+0x79>
c0015019:	83 c2 02             	add    edx,0x2
c001501c:	be 02 00 00 00       	mov    esi,0x2
c0015021:	01 d7                	add    edi,edx
c0015023:	31 d2                	xor    edx,edx
c0015025:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015027:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001502b:	80 fb 0d             	cmp    bl,0xd
c001502e:	0f 94 c3             	sete   bl
c0015031:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015036:	0f 94 c1             	sete   cl
c0015039:	08 cb                	or     bl,cl
c001503b:	75 3a                	jne    c0015077 <Reg::readInt(char*, char*, int*)+0xcf>
c001503d:	0f af d6             	imul   edx,esi
c0015040:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015045:	83 fe 10             	cmp    esi,0x10
c0015048:	75 26                	jne    c0015070 <Reg::readInt(char*, char*, int*)+0xc8>
c001504a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001504e:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015051:	89 e9                	mov    ecx,ebp
c0015053:	80 f9 05             	cmp    cl,0x5
c0015056:	77 06                	ja     c001505e <Reg::readInt(char*, char*, int*)+0xb6>
c0015058:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001505c:	eb 16                	jmp    c0015074 <Reg::readInt(char*, char*, int*)+0xcc>
c001505e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015062:	83 e9 61             	sub    ecx,0x61
c0015065:	80 f9 05             	cmp    cl,0x5
c0015068:	77 06                	ja     c0015070 <Reg::readInt(char*, char*, int*)+0xc8>
c001506a:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001506e:	eb 04                	jmp    c0015074 <Reg::readInt(char*, char*, int*)+0xcc>
c0015070:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015074:	47                   	inc    edi
c0015075:	eb ae                	jmp    c0015025 <Reg::readInt(char*, char*, int*)+0x7d>
c0015077:	84 c0                	test   al,al
c0015079:	74 02                	je     c001507d <Reg::readInt(char*, char*, int*)+0xd5>
c001507b:	f7 da                	neg    edx
c001507d:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015084:	89 10                	mov    DWORD PTR [eax],edx
c0015086:	88 d8                	mov    al,bl
c0015088:	81 c4 ec 00 00 00    	add    esp,0xec
c001508e:	5b                   	pop    ebx
c001508f:	5e                   	pop    esi
c0015090:	5f                   	pop    edi
c0015091:	5d                   	pop    ebp
c0015092:	c3                   	ret    

c0015093 <Reg::readString(char*, char*, char*, int)>:
c0015093:	57                   	push   edi
c0015094:	56                   	push   esi
c0015095:	53                   	push   ebx
c0015096:	81 ec d4 00 00 00    	sub    esp,0xd4
c001509c:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00150a3:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00150a7:	57                   	push   edi
c00150a8:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00150af:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00150b6:	e8 b6 fe ff ff       	call   c0014f71 <Reg::getLine(char*, char*, char*)>
c00150bb:	83 c4 10             	add    esp,0x10
c00150be:	89 c6                	mov    esi,eax
c00150c0:	84 c0                	test   al,al
c00150c2:	74 44                	je     c0015108 <Reg::readString(char*, char*, char*, int)+0x75>
c00150c4:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00150cb:	31 c0                	xor    eax,eax
c00150cd:	4a                   	dec    edx
c00150ce:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00150d1:	84 c9                	test   cl,cl
c00150d3:	74 0f                	je     c00150e4 <Reg::readString(char*, char*, char*, int)+0x51>
c00150d5:	39 c2                	cmp    edx,eax
c00150d7:	7e 0b                	jle    c00150e4 <Reg::readString(char*, char*, char*, int)+0x51>
c00150d9:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00150dc:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00150e1:	40                   	inc    eax
c00150e2:	eb ea                	jmp    c00150ce <Reg::readString(char*, char*, char*, int)+0x3b>
c00150e4:	83 ec 0c             	sub    esp,0xc
c00150e7:	53                   	push   ebx
c00150e8:	e8 b3 b5 fe ff       	call   c00006a0 <strlen>
c00150ed:	83 c4 10             	add    esp,0x10
c00150f0:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00150f5:	75 11                	jne    c0015108 <Reg::readString(char*, char*, char*, int)+0x75>
c00150f7:	83 ec 0c             	sub    esp,0xc
c00150fa:	53                   	push   ebx
c00150fb:	e8 a0 b5 fe ff       	call   c00006a0 <strlen>
c0015100:	83 c4 10             	add    esp,0x10
c0015103:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015108:	81 c4 d0 00 00 00    	add    esp,0xd0
c001510e:	89 f0                	mov    eax,esi
c0015110:	5b                   	pop    ebx
c0015111:	5e                   	pop    esi
c0015112:	5f                   	pop    edi
c0015113:	c3                   	ret    

c0015114 <Reg::readBool(char*, char*, bool*)>:
c0015114:	83 ec 20             	sub    esp,0x20
c0015117:	8d 44 24 10          	lea    eax,[esp+0x10]
c001511b:	50                   	push   eax
c001511c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015120:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015124:	e8 7f fe ff ff       	call   c0014fa8 <Reg::readInt(char*, char*, int*)>
c0015129:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001512e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015132:	0f 95 02             	setne  BYTE PTR [edx]
c0015135:	83 c4 2c             	add    esp,0x2c
c0015138:	c3                   	ret    

c0015139 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015139:	53                   	push   ebx
c001513a:	83 ec 1c             	sub    esp,0x1c
c001513d:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015141:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015145:	50                   	push   eax
c0015146:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001514a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001514e:	e8 c1 ff ff ff       	call   c0015114 <Reg::readBool(char*, char*, bool*)>
c0015153:	83 c4 10             	add    esp,0x10
c0015156:	84 c0                	test   al,al
c0015158:	74 04                	je     c001515e <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001515a:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001515e:	88 d8                	mov    al,bl
c0015160:	83 c4 18             	add    esp,0x18
c0015163:	5b                   	pop    ebx
c0015164:	c3                   	ret    

c0015165 <Reg::readIntWithDefault(char*, char*, int)>:
c0015165:	53                   	push   ebx
c0015166:	83 ec 1c             	sub    esp,0x1c
c0015169:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001516d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015171:	50                   	push   eax
c0015172:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015176:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001517a:	e8 29 fe ff ff       	call   c0014fa8 <Reg::readInt(char*, char*, int*)>
c001517f:	83 c4 10             	add    esp,0x10
c0015182:	84 c0                	test   al,al
c0015184:	74 04                	je     c001518a <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015186:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001518a:	89 d8                	mov    eax,ebx
c001518c:	83 c4 18             	add    esp,0x18
c001518f:	5b                   	pop    ebx
c0015190:	c3                   	ret    

c0015191 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015191:	57                   	push   edi
c0015192:	56                   	push   esi
c0015193:	56                   	push   esi
c0015194:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015198:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001519c:	56                   	push   esi
c001519d:	57                   	push   edi
c001519e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151a6:	e8 e8 fe ff ff       	call   c0015093 <Reg::readString(char*, char*, char*, int)>
c00151ab:	83 c4 10             	add    esp,0x10
c00151ae:	84 c0                	test   al,al
c00151b0:	75 1a                	jne    c00151cc <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00151b2:	51                   	push   ecx
c00151b3:	56                   	push   esi
c00151b4:	6a 00                	push   0x0
c00151b6:	57                   	push   edi
c00151b7:	e8 c8 b4 fe ff       	call   c0000684 <memset>
c00151bc:	8d 4e ff             	lea    ecx,[esi-0x1]
c00151bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00151c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00151c5:	83 c4 10             	add    esp,0x10
c00151c8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00151cc:	89 f8                	mov    eax,edi
c00151ce:	5a                   	pop    edx
c00151cf:	5e                   	pop    esi
c00151d0:	5f                   	pop    edi
c00151d1:	c3                   	ret    

c00151d2 <Sys::eject(regs*)>:
c00151d2:	83 ec 0c             	sub    esp,0xc
c00151d5:	83 ca ff             	or     edx,0xffffffff
c00151d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00151dc:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00151df:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00151e4:	83 e9 41             	sub    ecx,0x41
c00151e7:	83 f9 19             	cmp    ecx,0x19
c00151ea:	77 18                	ja     c0015204 <Sys::eject(regs*)+0x32>
c00151ec:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c00151f3:	85 c9                	test   ecx,ecx
c00151f5:	74 0d                	je     c0015204 <Sys::eject(regs*)+0x32>
c00151f7:	83 ec 0c             	sub    esp,0xc
c00151fa:	51                   	push   ecx
c00151fb:	e8 76 af ff ff       	call   c0010176 <LogicalDisk::eject()>
c0015200:	83 c4 10             	add    esp,0x10
c0015203:	99                   	cdq    
c0015204:	83 c4 0c             	add    esp,0xc
c0015207:	c3                   	ret    

c0015208 <Sys::exit(regs*)>:
c0015208:	83 ec 18             	sub    esp,0x18
c001520b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001520f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015212:	e8 59 36 00 00       	call   c0018870 <terminateTask(int)>
c0015217:	83 c8 ff             	or     eax,0xffffffff
c001521a:	83 c4 1c             	add    esp,0x1c
c001521d:	89 c2                	mov    edx,eax
c001521f:	c3                   	ret    

c0015220 <Sys::getCwd(regs*)>:
c0015220:	83 ec 10             	sub    esp,0x10
c0015223:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015227:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001522a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001522d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015232:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015235:	e8 f6 7b ff ff       	call   c000ce30 <Fs::getcwd(Process*, char*, int)>
c001523a:	83 c4 1c             	add    esp,0x1c
c001523d:	99                   	cdq    
c001523e:	c3                   	ret    

c001523f <Sys::getPID(regs*)>:
c001523f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015244:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015247:	8b 00                	mov    eax,DWORD PTR [eax]
c0015249:	99                   	cdq    
c001524a:	c3                   	ret    

c001524b <Sys::getRAMData(regs*)>:
c001524b:	8b 0d 94 64 02 c0    	mov    ecx,DWORD PTR ds:0xc0026494
c0015251:	69 05 90 64 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026490,0xc8
c001525b:	99                   	cdq    
c001525c:	f7 f9                	idiv   ecx
c001525e:	c1 e0 18             	shl    eax,0x18
c0015261:	09 c8                	or     eax,ecx
c0015263:	99                   	cdq    
c0015264:	c3                   	ret    

c0015265 <Sys::getVGAPtr(regs*)>:
c0015265:	55                   	push   ebp
c0015266:	57                   	push   edi
c0015267:	56                   	push   esi
c0015268:	53                   	push   ebx
c0015269:	83 ec 18             	sub    esp,0x18
c001526c:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0015270:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0015273:	e8 fc 30 00 00       	call   c0018374 <Thr::processFromPID(int)>
c0015278:	83 c4 10             	add    esp,0x10
c001527b:	89 c1                	mov    ecx,eax
c001527d:	b8 01 00 00 00       	mov    eax,0x1
c0015282:	85 c9                	test   ecx,ecx
c0015284:	74 59                	je     c00152df <Sys::getVGAPtr(regs*)+0x7a>
c0015286:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c001528c:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0015290:	74 0c                	je     c001529e <Sys::getVGAPtr(regs*)+0x39>
c0015292:	83 ec 0c             	sub    esp,0xc
c0015295:	53                   	push   ebx
c0015296:	e8 84 55 ff ff       	call   c000a81f <setActiveTerminal(VgaText*)>
c001529b:	83 c4 10             	add    esp,0x10
c001529e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00152a1:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00152a4:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00152a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00152ab:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00152ae:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00152b1:	81 c3 82 00 00 00    	add    ebx,0x82
c00152b7:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00152bd:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00152c0:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c00152c3:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00152c9:	50                   	push   eax
c00152ca:	50                   	push   eax
c00152cb:	53                   	push   ebx
c00152cc:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00152cf:	05 a8 0f 00 00       	add    eax,0xfa8
c00152d4:	50                   	push   eax
c00152d5:	e8 66 b4 fe ff       	call   c0000740 <strcpy>
c00152da:	83 c4 10             	add    esp,0x10
c00152dd:	31 c0                	xor    eax,eax
c00152df:	83 c4 0c             	add    esp,0xc
c00152e2:	31 d2                	xor    edx,edx
c00152e4:	5b                   	pop    ebx
c00152e5:	5e                   	pop    esi
c00152e6:	5f                   	pop    edi
c00152e7:	5d                   	pop    ebp
c00152e8:	c3                   	ret    

c00152e9 <Sys::loadDLL(regs*)>:
c00152e9:	56                   	push   esi
c00152ea:	53                   	push   ebx
c00152eb:	31 d2                	xor    edx,edx
c00152ed:	51                   	push   ecx
c00152ee:	b8 01 00 00 00       	mov    eax,0x1
c00152f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00152f7:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00152fb:	0f 84 8c 00 00 00    	je     c001538d <Sys::loadDLL(regs*)+0xa4>
c0015301:	83 ec 0c             	sub    esp,0xc
c0015304:	68 14 01 00 00       	push   0x114
c0015309:	e8 b5 46 ff ff       	call   c00099c3 <malloc>
c001530e:	83 c4 0c             	add    esp,0xc
c0015311:	89 c3                	mov    ebx,eax
c0015313:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015318:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001531b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001531e:	53                   	push   ebx
c001531f:	e8 0a 7d ff ff       	call   c000d02e <File::File(char const*, Process*)>
c0015324:	83 c4 10             	add    esp,0x10
c0015327:	31 d2                	xor    edx,edx
c0015329:	b8 02 00 00 00       	mov    eax,0x2
c001532e:	85 db                	test   ebx,ebx
c0015330:	74 5b                	je     c001538d <Sys::loadDLL(regs*)+0xa4>
c0015332:	83 ec 0c             	sub    esp,0xc
c0015335:	53                   	push   ebx
c0015336:	e8 c5 7f ff ff       	call   c000d300 <File::exists()>
c001533b:	83 c4 10             	add    esp,0x10
c001533e:	84 c0                	test   al,al
c0015340:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015342:	75 11                	jne    c0015355 <Sys::loadDLL(regs*)+0x6c>
c0015344:	83 ec 0c             	sub    esp,0xc
c0015347:	53                   	push   ebx
c0015348:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001534b:	83 c4 10             	add    esp,0x10
c001534e:	b8 03 00 00 00       	mov    eax,0x3
c0015353:	eb 36                	jmp    c001538b <Sys::loadDLL(regs*)+0xa2>
c0015355:	83 ec 0c             	sub    esp,0xc
c0015358:	53                   	push   ebx
c0015359:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001535c:	58                   	pop    eax
c001535d:	5a                   	pop    edx
c001535e:	6a 00                	push   0x0
c0015360:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015363:	e8 0a 22 00 00       	call   c0017572 <Thr::loadDLL(char const*, bool)>
c0015368:	83 c4 10             	add    esp,0x10
c001536b:	89 c1                	mov    ecx,eax
c001536d:	31 d2                	xor    edx,edx
c001536f:	b8 04 00 00 00       	mov    eax,0x4
c0015374:	85 c9                	test   ecx,ecx
c0015376:	74 15                	je     c001538d <Sys::loadDLL(regs*)+0xa4>
c0015378:	53                   	push   ebx
c0015379:	53                   	push   ebx
c001537a:	ff 35 48 64 02 c0    	push   DWORD PTR ds:0xc0026448
c0015380:	51                   	push   ecx
c0015381:	e8 1d 24 00 00       	call   c00177a3 <Thr::executeDLL(unsigned long, void*)>
c0015386:	83 c4 10             	add    esp,0x10
c0015389:	31 c0                	xor    eax,eax
c001538b:	31 d2                	xor    edx,edx
c001538d:	59                   	pop    ecx
c001538e:	5b                   	pop    ebx
c001538f:	5e                   	pop    esi
c0015390:	c3                   	ret    

c0015391 <Sys::read(regs*)>:
c0015391:	57                   	push   edi
c0015392:	56                   	push   esi
c0015393:	53                   	push   ebx
c0015394:	83 ec 10             	sub    esp,0x10
c0015397:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001539b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001539e:	83 f8 02             	cmp    eax,0x2
c00153a1:	77 10                	ja     c00153b3 <Sys::read(regs*)+0x22>
c00153a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153ab:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00153b1:	eb 0e                	jmp    c00153c1 <Sys::read(regs*)+0x30>
c00153b3:	83 ec 0c             	sub    esp,0xc
c00153b6:	50                   	push   eax
c00153b7:	e8 df 61 ff ff       	call   c000b59b <getFromFileDescriptor(int)>
c00153bc:	83 c4 10             	add    esp,0x10
c00153bf:	89 c1                	mov    ecx,eax
c00153c1:	83 c8 ff             	or     eax,0xffffffff
c00153c4:	85 c9                	test   ecx,ecx
c00153c6:	89 c2                	mov    edx,eax
c00153c8:	74 28                	je     c00153f2 <Sys::read(regs*)+0x61>
c00153ca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00153d2:	31 ff                	xor    edi,edi
c00153d4:	83 ec 0c             	sub    esp,0xc
c00153d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00153d9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00153dd:	52                   	push   edx
c00153de:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00153e1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00153e4:	57                   	push   edi
c00153e5:	56                   	push   esi
c00153e6:	51                   	push   ecx
c00153e7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00153ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00153ee:	83 c4 20             	add    esp,0x20
c00153f1:	99                   	cdq    
c00153f2:	83 c4 10             	add    esp,0x10
c00153f5:	5b                   	pop    ebx
c00153f6:	5e                   	pop    esi
c00153f7:	5f                   	pop    edi
c00153f8:	c3                   	ret    

c00153f9 <Sys::sbrk(regs*)>:
c00153f9:	56                   	push   esi
c00153fa:	53                   	push   ebx
c00153fb:	50                   	push   eax
c00153fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015401:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015405:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015408:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001540b:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0015411:	85 db                	test   ebx,ebx
c0015413:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015416:	74 02                	je     c001541a <Sys::sbrk(regs*)+0x21>
c0015418:	79 06                	jns    c0015420 <Sys::sbrk(regs*)+0x27>
c001541a:	89 f0                	mov    eax,esi
c001541c:	31 d2                	xor    edx,edx
c001541e:	eb 2a                	jmp    c001544a <Sys::sbrk(regs*)+0x51>
c0015420:	83 c8 ff             	or     eax,0xffffffff
c0015423:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015429:	89 c2                	mov    edx,eax
c001542b:	77 1d                	ja     c001544a <Sys::sbrk(regs*)+0x51>
c001542d:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0015433:	50                   	push   eax
c0015434:	c1 ea 0c             	shr    edx,0xc
c0015437:	68 07 0c 00 00       	push   0xc07
c001543c:	52                   	push   edx
c001543d:	51                   	push   ecx
c001543e:	e8 57 6a ff ff       	call   c000be9a <VAS::allocatePages(int, int)>
c0015443:	89 f0                	mov    eax,esi
c0015445:	31 d2                	xor    edx,edx
c0015447:	83 c4 10             	add    esp,0x10
c001544a:	59                   	pop    ecx
c001544b:	5b                   	pop    ebx
c001544c:	5e                   	pop    esi
c001544d:	c3                   	ret    

c001544e <Sys::setCwd(regs*)>:
c001544e:	83 ec 14             	sub    esp,0x14
c0015451:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015455:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015458:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001545d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015460:	e8 3a 7f ff ff       	call   c000d39f <Fs::setcwd(Process*, char*)>
c0015465:	83 c4 1c             	add    esp,0x1c
c0015468:	99                   	cdq    
c0015469:	c3                   	ret    

c001546a <Sys::setTime(regs*)>:
c001546a:	55                   	push   ebp
c001546b:	31 c9                	xor    ecx,ecx
c001546d:	57                   	push   edi
c001546e:	bd 0c 00 00 00       	mov    ebp,0xc
c0015473:	56                   	push   esi
c0015474:	53                   	push   ebx
c0015475:	31 db                	xor    ebx,ebx
c0015477:	83 ec 10             	sub    esp,0x10
c001547a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001547e:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015481:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015484:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0015487:	89 c2                	mov    edx,eax
c0015489:	66 81 ef 6c 07       	sub    di,0x76c
c001548e:	83 e2 1f             	and    edx,0x1f
c0015491:	c1 e7 10             	shl    edi,0x10
c0015494:	42                   	inc    edx
c0015495:	c1 e8 05             	shr    eax,0x5
c0015498:	88 d1                	mov    cl,dl
c001549a:	31 d2                	xor    edx,edx
c001549c:	f7 f5                	div    ebp
c001549e:	89 dd                	mov    ebp,ebx
c00154a0:	88 d5                	mov    ch,dl
c00154a2:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00154a8:	0f b7 c1             	movzx  eax,cx
c00154ab:	31 d2                	xor    edx,edx
c00154ad:	09 f8                	or     eax,edi
c00154af:	bf 3c 00 00 00       	mov    edi,0x3c
c00154b4:	89 c1                	mov    ecx,eax
c00154b6:	89 f0                	mov    eax,esi
c00154b8:	f7 f7                	div    edi
c00154ba:	c1 e2 10             	shl    edx,0x10
c00154bd:	09 d5                	or     ebp,edx
c00154bf:	31 d2                	xor    edx,edx
c00154c1:	89 eb                	mov    ebx,ebp
c00154c3:	f7 f7                	div    edi
c00154c5:	bf 10 0e 00 00       	mov    edi,0xe10
c00154ca:	88 d7                	mov    bh,dl
c00154cc:	89 f0                	mov    eax,esi
c00154ce:	31 d2                	xor    edx,edx
c00154d0:	f7 f7                	div    edi
c00154d2:	bf 18 00 00 00       	mov    edi,0x18
c00154d7:	31 d2                	xor    edx,edx
c00154d9:	f7 f7                	div    edi
c00154db:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c00154e0:	88 d3                	mov    bl,dl
c00154e2:	53                   	push   ebx
c00154e3:	51                   	push   ecx
c00154e4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00154ea:	e8 fb 86 ff ff       	call   c000dbea <Clock::setTimeInDatetimeLocal(datetime_t)>
c00154ef:	83 c4 1c             	add    esp,0x1c
c00154f2:	83 f0 01             	xor    eax,0x1
c00154f5:	5b                   	pop    ebx
c00154f6:	0f b6 c0             	movzx  eax,al
c00154f9:	5e                   	pop    esi
c00154fa:	31 d2                	xor    edx,edx
c00154fc:	5f                   	pop    edi
c00154fd:	5d                   	pop    ebp
c00154fe:	c3                   	ret    

c00154ff <Sys::timezone(regs*)>:
c00154ff:	53                   	push   ebx
c0015500:	83 ec 08             	sub    esp,0x8
c0015503:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015507:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001550b:	75 17                	jne    c0015524 <Sys::timezone(regs*)+0x25>
c001550d:	83 ec 0c             	sub    esp,0xc
c0015510:	68 69 45 02 c0       	push   0xc0024569
c0015515:	e8 a9 75 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001551a:	83 c8 ff             	or     eax,0xffffffff
c001551d:	83 c4 10             	add    esp,0x10
c0015520:	89 c2                	mov    edx,eax
c0015522:	eb 20                	jmp    c0015544 <Sys::timezone(regs*)+0x45>
c0015524:	83 ec 0c             	sub    esp,0xc
c0015527:	68 7e 45 02 c0       	push   0xc002457e
c001552c:	e8 92 75 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0015531:	58                   	pop    eax
c0015532:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015535:	e8 12 84 ff ff       	call   c000d94c <User::loadClockSettings(int)>
c001553a:	83 c4 10             	add    esp,0x10
c001553d:	b8 01 00 00 00       	mov    eax,0x1
c0015542:	31 d2                	xor    edx,edx
c0015544:	83 c4 08             	add    esp,0x8
c0015547:	5b                   	pop    ebx
c0015548:	c3                   	ret    

c0015549 <Sys::write(regs*)>:
c0015549:	57                   	push   edi
c001554a:	56                   	push   esi
c001554b:	53                   	push   ebx
c001554c:	83 ec 10             	sub    esp,0x10
c001554f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015553:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015556:	83 f8 02             	cmp    eax,0x2
c0015559:	77 10                	ja     c001556b <Sys::write(regs*)+0x22>
c001555b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015560:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015563:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015569:	eb 0e                	jmp    c0015579 <Sys::write(regs*)+0x30>
c001556b:	83 ec 0c             	sub    esp,0xc
c001556e:	50                   	push   eax
c001556f:	e8 27 60 ff ff       	call   c000b59b <getFromFileDescriptor(int)>
c0015574:	83 c4 10             	add    esp,0x10
c0015577:	89 c1                	mov    ecx,eax
c0015579:	83 c8 ff             	or     eax,0xffffffff
c001557c:	85 c9                	test   ecx,ecx
c001557e:	89 c2                	mov    edx,eax
c0015580:	74 28                	je     c00155aa <Sys::write(regs*)+0x61>
c0015582:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001558a:	31 ff                	xor    edi,edi
c001558c:	83 ec 0c             	sub    esp,0xc
c001558f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015591:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015595:	52                   	push   edx
c0015596:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015599:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001559c:	57                   	push   edi
c001559d:	56                   	push   esi
c001559e:	51                   	push   ecx
c001559f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00155a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00155a6:	83 c4 20             	add    esp,0x20
c00155a9:	99                   	cdq    
c00155aa:	83 c4 10             	add    esp,0x10
c00155ad:	5b                   	pop    ebx
c00155ae:	5e                   	pop    esi
c00155af:	5f                   	pop    edi
c00155b0:	c3                   	ret    

c00155b1 <Sys::wsbe(regs*)>:
c00155b1:	57                   	push   edi
c00155b2:	b9 0b 00 00 00       	mov    ecx,0xb
c00155b7:	56                   	push   esi
c00155b8:	be bd 45 02 c0       	mov    esi,0xc00245bd
c00155bd:	53                   	push   ebx
c00155be:	83 ec 30             	sub    esp,0x30
c00155c1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00155c5:	fc                   	cld    
c00155c6:	83 ec 0c             	sub    esp,0xc
c00155c9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00155cb:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00155cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00155d7:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00155dd:	8b 06                	mov    eax,DWORD PTR [esi]
c00155df:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00155e2:	57                   	push   edi
c00155e3:	e8 b8 b0 fe ff       	call   c00006a0 <strlen>
c00155e8:	5a                   	pop    edx
c00155e9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00155ed:	52                   	push   edx
c00155ee:	31 d2                	xor    edx,edx
c00155f0:	57                   	push   edi
c00155f1:	52                   	push   edx
c00155f2:	50                   	push   eax
c00155f3:	56                   	push   esi
c00155f4:	ff d3                	call   ebx
c00155f6:	83 c4 14             	add    esp,0x14
c00155f9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00155fd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015600:	e8 6b 32 00 00       	call   c0018870 <terminateTask(int)>
c0015605:	83 c4 40             	add    esp,0x40
c0015608:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001560d:	5b                   	pop    ebx
c001560e:	31 d2                	xor    edx,edx
c0015610:	5e                   	pop    esi
c0015611:	5f                   	pop    edi
c0015612:	c3                   	ret    

c0015613 <Sys::yield(regs*)>:
c0015613:	83 ec 0c             	sub    esp,0xc
c0015616:	fa                   	cli    
c0015617:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c001561d:	e8 36 29 00 00       	call   c0017f58 <schedule()>
c0015622:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0015627:	48                   	dec    eax
c0015628:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c001562d:	75 01                	jne    c0015630 <Sys::yield(regs*)+0x1d>
c001562f:	fb                   	sti    
c0015630:	8b 15 ac 6a 02 c0    	mov    edx,DWORD PTR ds:0xc0026aac
c0015636:	83 c4 0c             	add    esp,0xc
c0015639:	89 d0                	mov    eax,edx
c001563b:	c1 ea 11             	shr    edx,0x11
c001563e:	c1 e0 07             	shl    eax,0x7
c0015641:	25 80 30 0f 00       	and    eax,0xf3080
c0015646:	31 d0                	xor    eax,edx
c0015648:	31 d2                	xor    edx,edx
c001564a:	c3                   	ret    

c001564b <sysCallSeekDir(regs*)>:
c001564b:	31 c0                	xor    eax,eax
c001564d:	31 d2                	xor    edx,edx
c001564f:	c3                   	ret    

c0015650 <sysCallTellDir(regs*)>:
c0015650:	31 c0                	xor    eax,eax
c0015652:	31 d2                	xor    edx,edx
c0015654:	c3                   	ret    

c0015655 <sysCallVerify(regs*)>:
c0015655:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015659:	31 d2                	xor    edx,edx
c001565b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001565e:	c3                   	ret    

c001565f <sysCallGetArgc(regs*)>:
c001565f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015664:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015667:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001566d:	99                   	cdq    
c001566e:	c3                   	ret    

c001566f <sysFormatDisk(regs*)>:
c001566f:	56                   	push   esi
c0015670:	53                   	push   ebx
c0015671:	53                   	push   ebx
c0015672:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015676:	8b 1d b4 65 02 c0    	mov    ebx,DWORD PTR ds:0xc00265b4
c001567c:	eb 25                	jmp    c00156a3 <sysFormatDisk(regs*)+0x34>
c001567e:	83 ec 0c             	sub    esp,0xc
c0015681:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015684:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015686:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015689:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001568c:	50                   	push   eax
c001568d:	ff 34 85 40 6a 02 c0 	push   DWORD PTR [eax*4-0x3ffd95c0]
c0015694:	53                   	push   ebx
c0015695:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015698:	83 c4 20             	add    esp,0x20
c001569b:	83 f8 08             	cmp    eax,0x8
c001569e:	75 12                	jne    c00156b2 <sysFormatDisk(regs*)+0x43>
c00156a0:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00156a3:	85 db                	test   ebx,ebx
c00156a5:	75 d7                	jne    c001567e <sysFormatDisk(regs*)+0xf>
c00156a7:	59                   	pop    ecx
c00156a8:	b8 03 00 00 00       	mov    eax,0x3
c00156ad:	31 d2                	xor    edx,edx
c00156af:	5b                   	pop    ebx
c00156b0:	5e                   	pop    esi
c00156b1:	c3                   	ret    
c00156b2:	85 c0                	test   eax,eax
c00156b4:	74 1b                	je     c00156d1 <sysFormatDisk(regs*)+0x62>
c00156b6:	83 f8 09             	cmp    eax,0x9
c00156b9:	74 0b                	je     c00156c6 <sysFormatDisk(regs*)+0x57>
c00156bb:	59                   	pop    ecx
c00156bc:	b8 02 00 00 00       	mov    eax,0x2
c00156c1:	31 d2                	xor    edx,edx
c00156c3:	5b                   	pop    ebx
c00156c4:	5e                   	pop    esi
c00156c5:	c3                   	ret    
c00156c6:	59                   	pop    ecx
c00156c7:	b8 01 00 00 00       	mov    eax,0x1
c00156cc:	31 d2                	xor    edx,edx
c00156ce:	5b                   	pop    ebx
c00156cf:	5e                   	pop    esi
c00156d0:	c3                   	ret    
c00156d1:	59                   	pop    ecx
c00156d2:	31 c0                	xor    eax,eax
c00156d4:	31 d2                	xor    edx,edx
c00156d6:	5b                   	pop    ebx
c00156d7:	5e                   	pop    esi
c00156d8:	c3                   	ret    

c00156d9 <sysSetDiskVolumeLabel(regs*)>:
c00156d9:	56                   	push   esi
c00156da:	53                   	push   ebx
c00156db:	53                   	push   ebx
c00156dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00156e0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00156e3:	83 f8 19             	cmp    eax,0x19
c00156e6:	77 2d                	ja     c0015715 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00156e8:	8b 0c 85 40 6a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd95c0]
c00156ef:	85 c9                	test   ecx,ecx
c00156f1:	74 22                	je     c0015715 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00156f3:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00156f6:	85 db                	test   ebx,ebx
c00156f8:	74 1b                	je     c0015715 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00156fa:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0015700:	85 d2                	test   edx,edx
c0015702:	74 11                	je     c0015715 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015704:	8b 32                	mov    esi,DWORD PTR [edx]
c0015706:	53                   	push   ebx
c0015707:	50                   	push   eax
c0015708:	51                   	push   ecx
c0015709:	52                   	push   edx
c001570a:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001570d:	83 c4 10             	add    esp,0x10
c0015710:	99                   	cdq    
c0015711:	59                   	pop    ecx
c0015712:	5b                   	pop    ebx
c0015713:	5e                   	pop    esi
c0015714:	c3                   	ret    
c0015715:	59                   	pop    ecx
c0015716:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001571b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015720:	5b                   	pop    ebx
c0015721:	5e                   	pop    esi
c0015722:	c3                   	ret    

c0015723 <sysGetDiskVolumeLabel(regs*)>:
c0015723:	57                   	push   edi
c0015724:	56                   	push   esi
c0015725:	53                   	push   ebx
c0015726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001572a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001572d:	83 fa 19             	cmp    edx,0x19
c0015730:	77 38                	ja     c001576a <sysGetDiskVolumeLabel(regs*)+0x47>
c0015732:	8b 0c 95 40 6a 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd95c0]
c0015739:	85 c9                	test   ecx,ecx
c001573b:	74 2d                	je     c001576a <sysGetDiskVolumeLabel(regs*)+0x47>
c001573d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015740:	85 db                	test   ebx,ebx
c0015742:	74 26                	je     c001576a <sysGetDiskVolumeLabel(regs*)+0x47>
c0015744:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015747:	85 f6                	test   esi,esi
c0015749:	74 1f                	je     c001576a <sysGetDiskVolumeLabel(regs*)+0x47>
c001574b:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0015751:	85 c0                	test   eax,eax
c0015753:	74 15                	je     c001576a <sysGetDiskVolumeLabel(regs*)+0x47>
c0015755:	83 ec 0c             	sub    esp,0xc
c0015758:	8b 38                	mov    edi,DWORD PTR [eax]
c001575a:	56                   	push   esi
c001575b:	53                   	push   ebx
c001575c:	52                   	push   edx
c001575d:	51                   	push   ecx
c001575e:	50                   	push   eax
c001575f:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015762:	83 c4 20             	add    esp,0x20
c0015765:	99                   	cdq    
c0015766:	5b                   	pop    ebx
c0015767:	5e                   	pop    esi
c0015768:	5f                   	pop    edi
c0015769:	c3                   	ret    
c001576a:	5b                   	pop    ebx
c001576b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015770:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015775:	5e                   	pop    esi
c0015776:	5f                   	pop    edi
c0015777:	c3                   	ret    

c0015778 <sysShutdown(regs*)>:
c0015778:	83 ec 0c             	sub    esp,0xc
c001577b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001577f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015782:	85 c0                	test   eax,eax
c0015784:	74 18                	je     c001579e <sysShutdown(regs*)+0x26>
c0015786:	83 f8 01             	cmp    eax,0x1
c0015789:	74 38                	je     c00157c3 <sysShutdown(regs*)+0x4b>
c001578b:	83 f8 02             	cmp    eax,0x2
c001578e:	74 24                	je     c00157b4 <sysShutdown(regs*)+0x3c>
c0015790:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015795:	ba ff ff ff ff       	mov    edx,0xffffffff
c001579a:	83 c4 0c             	add    esp,0xc
c001579d:	c3                   	ret    
c001579e:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c00157a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00157a5:	6a 00                	push   0x0
c00157a7:	6a 00                	push   0x0
c00157a9:	6a 00                	push   0x0
c00157ab:	50                   	push   eax
c00157ac:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00157af:	83 c4 10             	add    esp,0x10
c00157b2:	eb dc                	jmp    c0015790 <sysShutdown(regs*)+0x18>
c00157b4:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c00157b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00157bb:	6a 00                	push   0x0
c00157bd:	6a 00                	push   0x0
c00157bf:	6a 01                	push   0x1
c00157c1:	eb e8                	jmp    c00157ab <sysShutdown(regs*)+0x33>
c00157c3:	a1 c0 6a 02 c0       	mov    eax,ds:0xc0026ac0
c00157c8:	85 c0                	test   eax,eax
c00157ca:	74 02                	je     c00157ce <sysShutdown(regs*)+0x56>
c00157cc:	ff d0                	call   eax
c00157ce:	31 c0                	xor    eax,eax
c00157d0:	31 d2                	xor    edx,edx
c00157d2:	83 c4 0c             	add    esp,0xc
c00157d5:	c3                   	ret    

c00157d6 <sysCallRealpath(regs*)>:
c00157d6:	83 ec 0c             	sub    esp,0xc
c00157d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157dd:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00157e0:	85 d2                	test   edx,edx
c00157e2:	74 07                	je     c00157eb <sysCallRealpath(regs*)+0x15>
c00157e4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00157e7:	85 c0                	test   eax,eax
c00157e9:	75 0b                	jne    c00157f6 <sysCallRealpath(regs*)+0x20>
c00157eb:	b8 01 00 00 00       	mov    eax,0x1
c00157f0:	31 d2                	xor    edx,edx
c00157f2:	83 c4 0c             	add    esp,0xc
c00157f5:	c3                   	ret    
c00157f6:	51                   	push   ecx
c00157f7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00157fd:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015800:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015806:	51                   	push   ecx
c0015807:	52                   	push   edx
c0015808:	50                   	push   eax
c0015809:	e8 76 76 ff ff       	call   c000ce84 <Fs::standardiseFiles(char*, char const*, char const*)>
c001580e:	83 c4 10             	add    esp,0x10
c0015811:	31 c0                	xor    eax,eax
c0015813:	31 d2                	xor    edx,edx
c0015815:	83 c4 0c             	add    esp,0xc
c0015818:	c3                   	ret    

c0015819 <sysCallReadDir(regs*)>:
c0015819:	53                   	push   ebx
c001581a:	83 ec 18             	sub    esp,0x18
c001581d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015821:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015824:	83 f8 02             	cmp    eax,0x2
c0015827:	76 60                	jbe    c0015889 <sysCallReadDir(regs*)+0x70>
c0015829:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0015830:	77 48                	ja     c001587a <sysCallReadDir(regs*)+0x61>
c0015832:	83 ec 0c             	sub    esp,0xc
c0015835:	50                   	push   eax
c0015836:	e8 60 5d ff ff       	call   c000b59b <getFromFileDescriptor(int)>
c001583b:	83 c4 10             	add    esp,0x10
c001583e:	85 c0                	test   eax,eax
c0015840:	74 38                	je     c001587a <sysCallReadDir(regs*)+0x61>
c0015842:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001584a:	83 ec 0c             	sub    esp,0xc
c001584d:	8b 10                	mov    edx,DWORD PTR [eax]
c001584f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0015853:	51                   	push   ecx
c0015854:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015857:	6a 00                	push   0x0
c0015859:	68 10 01 00 00       	push   0x110
c001585e:	50                   	push   eax
c001585f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015862:	83 c4 20             	add    esp,0x20
c0015865:	85 c0                	test   eax,eax
c0015867:	74 29                	je     c0015892 <sysCallReadDir(regs*)+0x79>
c0015869:	83 f8 07             	cmp    eax,0x7
c001586c:	74 1b                	je     c0015889 <sysCallReadDir(regs*)+0x70>
c001586e:	b8 02 00 00 00       	mov    eax,0x2
c0015873:	31 d2                	xor    edx,edx
c0015875:	83 c4 18             	add    esp,0x18
c0015878:	5b                   	pop    ebx
c0015879:	c3                   	ret    
c001587a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001587f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015884:	83 c4 18             	add    esp,0x18
c0015887:	5b                   	pop    ebx
c0015888:	c3                   	ret    
c0015889:	b8 01 00 00 00       	mov    eax,0x1
c001588e:	31 d2                	xor    edx,edx
c0015890:	eb e3                	jmp    c0015875 <sysCallReadDir(regs*)+0x5c>
c0015892:	31 c0                	xor    eax,eax
c0015894:	31 d2                	xor    edx,edx
c0015896:	eb dd                	jmp    c0015875 <sysCallReadDir(regs*)+0x5c>

c0015898 <sysCallIsATTY(regs*)>:
c0015898:	83 ec 0c             	sub    esp,0xc
c001589b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001589f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00158a2:	83 f8 02             	cmp    eax,0x2
c00158a5:	76 07                	jbe    c00158ae <sysCallIsATTY(regs*)+0x16>
c00158a7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00158ac:	75 26                	jne    c00158d4 <sysCallIsATTY(regs*)+0x3c>
c00158ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158b6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00158bc:	85 c0                	test   eax,eax
c00158be:	74 24                	je     c00158e4 <sysCallIsATTY(regs*)+0x4c>
c00158c0:	83 ec 0c             	sub    esp,0xc
c00158c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00158c5:	50                   	push   eax
c00158c6:	ff 12                	call   DWORD PTR [edx]
c00158c8:	31 d2                	xor    edx,edx
c00158ca:	0f b6 c0             	movzx  eax,al
c00158cd:	83 c4 10             	add    esp,0x10
c00158d0:	83 c4 0c             	add    esp,0xc
c00158d3:	c3                   	ret    
c00158d4:	83 ec 0c             	sub    esp,0xc
c00158d7:	50                   	push   eax
c00158d8:	e8 be 5c ff ff       	call   c000b59b <getFromFileDescriptor(int)>
c00158dd:	83 c4 10             	add    esp,0x10
c00158e0:	85 c0                	test   eax,eax
c00158e2:	75 dc                	jne    c00158c0 <sysCallIsATTY(regs*)+0x28>
c00158e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00158e9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158ee:	83 c4 0c             	add    esp,0xc
c00158f1:	c3                   	ret    

c00158f2 <sysCallSeek(regs*)>:
c00158f2:	53                   	push   ebx
c00158f3:	83 ec 08             	sub    esp,0x8
c00158f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158fa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00158fd:	8d 50 fd             	lea    edx,[eax-0x3]
c0015900:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015906:	77 32                	ja     c001593a <sysCallSeek(regs*)+0x48>
c0015908:	83 ec 0c             	sub    esp,0xc
c001590b:	50                   	push   eax
c001590c:	e8 8a 5c ff ff       	call   c000b59b <getFromFileDescriptor(int)>
c0015911:	83 c4 0c             	add    esp,0xc
c0015914:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015917:	31 db                	xor    ebx,ebx
c0015919:	53                   	push   ebx
c001591a:	51                   	push   ecx
c001591b:	50                   	push   eax
c001591c:	e8 2f 78 ff ff       	call   c000d150 <File::seek(unsigned long long)>
c0015921:	83 c4 10             	add    esp,0x10
c0015924:	85 c0                	test   eax,eax
c0015926:	0f 95 c0             	setne  al
c0015929:	31 d2                	xor    edx,edx
c001592b:	0f b6 c0             	movzx  eax,al
c001592e:	f7 d8                	neg    eax
c0015930:	83 d2 00             	adc    edx,0x0
c0015933:	83 c4 08             	add    esp,0x8
c0015936:	f7 da                	neg    edx
c0015938:	5b                   	pop    ebx
c0015939:	c3                   	ret    
c001593a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001593f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015944:	83 c4 08             	add    esp,0x8
c0015947:	5b                   	pop    ebx
c0015948:	c3                   	ret    

c0015949 <sysCallTell(regs*)>:
c0015949:	53                   	push   ebx
c001594a:	83 ec 08             	sub    esp,0x8
c001594d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015951:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015954:	83 f8 02             	cmp    eax,0x2
c0015957:	76 4d                	jbe    c00159a6 <sysCallTell(regs*)+0x5d>
c0015959:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001595e:	76 19                	jbe    c0015979 <sysCallTell(regs*)+0x30>
c0015960:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015963:	31 d2                	xor    edx,edx
c0015965:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001596b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015972:	31 c0                	xor    eax,eax
c0015974:	83 c4 08             	add    esp,0x8
c0015977:	5b                   	pop    ebx
c0015978:	c3                   	ret    
c0015979:	83 ec 0c             	sub    esp,0xc
c001597c:	50                   	push   eax
c001597d:	e8 19 5c ff ff       	call   c000b59b <getFromFileDescriptor(int)>
c0015982:	5a                   	pop    edx
c0015983:	59                   	pop    ecx
c0015984:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015987:	50                   	push   eax
c0015988:	e8 19 78 ff ff       	call   c000d1a6 <File::tell(unsigned long long*)>
c001598d:	83 c4 10             	add    esp,0x10
c0015990:	85 c0                	test   eax,eax
c0015992:	0f 95 c0             	setne  al
c0015995:	31 d2                	xor    edx,edx
c0015997:	0f b6 c0             	movzx  eax,al
c001599a:	f7 d8                	neg    eax
c001599c:	83 d2 00             	adc    edx,0x0
c001599f:	83 c4 08             	add    esp,0x8
c00159a2:	f7 da                	neg    edx
c00159a4:	5b                   	pop    ebx
c00159a5:	c3                   	ret    
c00159a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159ab:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159b0:	83 c4 08             	add    esp,0x8
c00159b3:	5b                   	pop    ebx
c00159b4:	c3                   	ret    

c00159b5 <sysCallSize(regs*)>:
c00159b5:	53                   	push   ebx
c00159b6:	83 ec 18             	sub    esp,0x18
c00159b9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00159bd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00159c0:	83 f8 02             	cmp    eax,0x2
c00159c3:	76 53                	jbe    c0015a18 <sysCallSize(regs*)+0x63>
c00159c5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00159ca:	76 19                	jbe    c00159e5 <sysCallSize(regs*)+0x30>
c00159cc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00159cf:	31 d2                	xor    edx,edx
c00159d1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00159d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00159de:	31 c0                	xor    eax,eax
c00159e0:	83 c4 18             	add    esp,0x18
c00159e3:	5b                   	pop    ebx
c00159e4:	c3                   	ret    
c00159e5:	83 ec 0c             	sub    esp,0xc
c00159e8:	50                   	push   eax
c00159e9:	e8 ad 5b ff ff       	call   c000b59b <getFromFileDescriptor(int)>
c00159ee:	83 c4 0c             	add    esp,0xc
c00159f1:	8d 54 24 13          	lea    edx,[esp+0x13]
c00159f5:	52                   	push   edx
c00159f6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00159f9:	50                   	push   eax
c00159fa:	e8 3f 79 ff ff       	call   c000d33e <File::stat(unsigned long long*, bool*)>
c00159ff:	83 c4 10             	add    esp,0x10
c0015a02:	85 c0                	test   eax,eax
c0015a04:	0f 95 c0             	setne  al
c0015a07:	31 d2                	xor    edx,edx
c0015a09:	0f b6 c0             	movzx  eax,al
c0015a0c:	f7 d8                	neg    eax
c0015a0e:	83 d2 00             	adc    edx,0x0
c0015a11:	83 c4 18             	add    esp,0x18
c0015a14:	f7 da                	neg    edx
c0015a16:	5b                   	pop    ebx
c0015a17:	c3                   	ret    
c0015a18:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a1d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a22:	83 c4 18             	add    esp,0x18
c0015a25:	5b                   	pop    ebx
c0015a26:	c3                   	ret    

c0015a27 <sysCallSizeFromFilename(regs*)>:
c0015a27:	57                   	push   edi
c0015a28:	56                   	push   esi
c0015a29:	53                   	push   ebx
c0015a2a:	83 ec 20             	sub    esp,0x20
c0015a2d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015a31:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015a34:	83 fb 02             	cmp    ebx,0x2
c0015a37:	0f 86 88 00 00 00    	jbe    c0015ac5 <sysCallSizeFromFilename(regs*)+0x9e>
c0015a3d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0015a43:	76 1b                	jbe    c0015a60 <sysCallSizeFromFilename(regs*)+0x39>
c0015a45:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015a48:	31 d2                	xor    edx,edx
c0015a4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015a50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015a57:	83 c4 20             	add    esp,0x20
c0015a5a:	31 c0                	xor    eax,eax
c0015a5c:	5b                   	pop    ebx
c0015a5d:	5e                   	pop    esi
c0015a5e:	5f                   	pop    edi
c0015a5f:	c3                   	ret    
c0015a60:	83 ec 0c             	sub    esp,0xc
c0015a63:	68 14 01 00 00       	push   0x114
c0015a68:	e8 56 3f ff ff       	call   c00099c3 <malloc>
c0015a6d:	83 c4 0c             	add    esp,0xc
c0015a70:	89 c7                	mov    edi,eax
c0015a72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a77:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015a7a:	53                   	push   ebx
c0015a7b:	57                   	push   edi
c0015a7c:	e8 ad 75 ff ff       	call   c000d02e <File::File(char const*, Process*)>
c0015a81:	83 c4 0c             	add    esp,0xc
c0015a84:	8d 44 24 23          	lea    eax,[esp+0x23]
c0015a88:	50                   	push   eax
c0015a89:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015a8c:	57                   	push   edi
c0015a8d:	e8 ac 78 ff ff       	call   c000d33e <File::stat(unsigned long long*, bool*)>
c0015a92:	83 c4 10             	add    esp,0x10
c0015a95:	85 ff                	test   edi,edi
c0015a97:	74 14                	je     c0015aad <sysCallSizeFromFilename(regs*)+0x86>
c0015a99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a9d:	8b 17                	mov    edx,DWORD PTR [edi]
c0015a9f:	83 ec 0c             	sub    esp,0xc
c0015aa2:	57                   	push   edi
c0015aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015aa6:	83 c4 10             	add    esp,0x10
c0015aa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015aad:	85 c0                	test   eax,eax
c0015aaf:	0f 95 c0             	setne  al
c0015ab2:	31 d2                	xor    edx,edx
c0015ab4:	0f b6 c0             	movzx  eax,al
c0015ab7:	f7 d8                	neg    eax
c0015ab9:	83 d2 00             	adc    edx,0x0
c0015abc:	83 c4 20             	add    esp,0x20
c0015abf:	f7 da                	neg    edx
c0015ac1:	5b                   	pop    ebx
c0015ac2:	5e                   	pop    esi
c0015ac3:	5f                   	pop    edi
c0015ac4:	c3                   	ret    
c0015ac5:	83 c4 20             	add    esp,0x20
c0015ac8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015acd:	5b                   	pop    ebx
c0015ace:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ad3:	5e                   	pop    esi
c0015ad4:	5f                   	pop    edi
c0015ad5:	c3                   	ret    

c0015ad6 <sysCallClose(regs*)>:
c0015ad6:	53                   	push   ebx
c0015ad7:	83 ec 08             	sub    esp,0x8
c0015ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ade:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ae1:	83 f8 02             	cmp    eax,0x2
c0015ae4:	76 41                	jbe    c0015b27 <sysCallClose(regs*)+0x51>
c0015ae6:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0015aec:	83 fa 01             	cmp    edx,0x1
c0015aef:	76 2d                	jbe    c0015b1e <sysCallClose(regs*)+0x48>
c0015af1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015af6:	77 2f                	ja     c0015b27 <sysCallClose(regs*)+0x51>
c0015af8:	83 ec 0c             	sub    esp,0xc
c0015afb:	50                   	push   eax
c0015afc:	e8 9a 5a ff ff       	call   c000b59b <getFromFileDescriptor(int)>
c0015b01:	89 c3                	mov    ebx,eax
c0015b03:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b06:	e8 e5 75 ff ff       	call   c000d0f0 <File::close()>
c0015b0b:	83 c4 10             	add    esp,0x10
c0015b0e:	85 db                	test   ebx,ebx
c0015b10:	74 0c                	je     c0015b1e <sysCallClose(regs*)+0x48>
c0015b12:	83 ec 0c             	sub    esp,0xc
c0015b15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b17:	53                   	push   ebx
c0015b18:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b1b:	83 c4 10             	add    esp,0x10
c0015b1e:	31 c0                	xor    eax,eax
c0015b20:	31 d2                	xor    edx,edx
c0015b22:	83 c4 08             	add    esp,0x8
c0015b25:	5b                   	pop    ebx
c0015b26:	c3                   	ret    
c0015b27:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b2c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b31:	83 c4 08             	add    esp,0x8
c0015b34:	5b                   	pop    ebx
c0015b35:	c3                   	ret    

c0015b36 <sysCallOpenDir(regs*)>:
c0015b36:	56                   	push   esi
c0015b37:	53                   	push   ebx
c0015b38:	53                   	push   ebx
c0015b39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015b3d:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015b40:	85 f6                	test   esi,esi
c0015b42:	74 59                	je     c0015b9d <sysCallOpenDir(regs*)+0x67>
c0015b44:	83 ec 0c             	sub    esp,0xc
c0015b47:	68 14 01 00 00       	push   0x114
c0015b4c:	e8 72 3e ff ff       	call   c00099c3 <malloc>
c0015b51:	83 c4 0c             	add    esp,0xc
c0015b54:	89 c6                	mov    esi,eax
c0015b56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b5b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015b5e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015b61:	56                   	push   esi
c0015b62:	e8 73 79 ff ff       	call   c000d4da <Directory::Directory(char const*, Process*)>
c0015b67:	83 c4 10             	add    esp,0x10
c0015b6a:	85 f6                	test   esi,esi
c0015b6c:	74 2f                	je     c0015b9d <sysCallOpenDir(regs*)+0x67>
c0015b6e:	83 ec 0c             	sub    esp,0xc
c0015b71:	56                   	push   esi
c0015b72:	e8 c7 79 ff ff       	call   c000d53e <Directory::open()>
c0015b77:	83 c4 10             	add    esp,0x10
c0015b7a:	85 c0                	test   eax,eax
c0015b7c:	75 1f                	jne    c0015b9d <sysCallOpenDir(regs*)+0x67>
c0015b7e:	83 ec 0c             	sub    esp,0xc
c0015b81:	56                   	push   esi
c0015b82:	e8 1f 57 ff ff       	call   c000b2a6 <UnixFile::getFileDescriptor()>
c0015b87:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015b8a:	83 c4 10             	add    esp,0x10
c0015b8d:	89 02                	mov    DWORD PTR [edx],eax
c0015b8f:	c1 f8 1f             	sar    eax,0x1f
c0015b92:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015b95:	31 c0                	xor    eax,eax
c0015b97:	59                   	pop    ecx
c0015b98:	31 d2                	xor    edx,edx
c0015b9a:	5b                   	pop    ebx
c0015b9b:	5e                   	pop    esi
c0015b9c:	c3                   	ret    
c0015b9d:	59                   	pop    ecx
c0015b9e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ba3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ba8:	5b                   	pop    ebx
c0015ba9:	5e                   	pop    esi
c0015baa:	c3                   	ret    

c0015bab <sysCallCloseDir(regs*)>:
c0015bab:	53                   	push   ebx
c0015bac:	83 ec 08             	sub    esp,0x8
c0015baf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bb3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015bb6:	8d 50 fd             	lea    edx,[eax-0x3]
c0015bb9:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015bbf:	77 2f                	ja     c0015bf0 <sysCallCloseDir(regs*)+0x45>
c0015bc1:	83 ec 0c             	sub    esp,0xc
c0015bc4:	50                   	push   eax
c0015bc5:	e8 d1 59 ff ff       	call   c000b59b <getFromFileDescriptor(int)>
c0015bca:	89 c3                	mov    ebx,eax
c0015bcc:	89 04 24             	mov    DWORD PTR [esp],eax
c0015bcf:	e8 c6 79 ff ff       	call   c000d59a <Directory::close()>
c0015bd4:	83 c4 10             	add    esp,0x10
c0015bd7:	85 db                	test   ebx,ebx
c0015bd9:	74 0c                	je     c0015be7 <sysCallCloseDir(regs*)+0x3c>
c0015bdb:	83 ec 0c             	sub    esp,0xc
c0015bde:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015be0:	53                   	push   ebx
c0015be1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015be4:	83 c4 10             	add    esp,0x10
c0015be7:	31 c0                	xor    eax,eax
c0015be9:	31 d2                	xor    edx,edx
c0015beb:	83 c4 08             	add    esp,0x8
c0015bee:	5b                   	pop    ebx
c0015bef:	c3                   	ret    
c0015bf0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bf5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015bfa:	83 c4 08             	add    esp,0x8
c0015bfd:	5b                   	pop    ebx
c0015bfe:	c3                   	ret    

c0015bff <sysCallMakeDir(regs*)>:
c0015bff:	56                   	push   esi
c0015c00:	53                   	push   ebx
c0015c01:	83 ec 10             	sub    esp,0x10
c0015c04:	68 14 01 00 00       	push   0x114
c0015c09:	e8 b5 3d ff ff       	call   c00099c3 <malloc>
c0015c0e:	83 c4 0c             	add    esp,0xc
c0015c11:	89 c3                	mov    ebx,eax
c0015c13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c18:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015c1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015c1f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c22:	53                   	push   ebx
c0015c23:	e8 b2 78 ff ff       	call   c000d4da <Directory::Directory(char const*, Process*)>
c0015c28:	83 c4 10             	add    esp,0x10
c0015c2b:	85 db                	test   ebx,ebx
c0015c2d:	74 32                	je     c0015c61 <sysCallMakeDir(regs*)+0x62>
c0015c2f:	83 ec 0c             	sub    esp,0xc
c0015c32:	53                   	push   ebx
c0015c33:	e8 e6 7a ff ff       	call   c000d71e <Directory::create()>
c0015c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c3b:	89 c6                	mov    esi,eax
c0015c3d:	e8 58 79 ff ff       	call   c000d59a <Directory::close()>
c0015c42:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c47:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015c4a:	83 c4 10             	add    esp,0x10
c0015c4d:	31 c0                	xor    eax,eax
c0015c4f:	59                   	pop    ecx
c0015c50:	85 f6                	test   esi,esi
c0015c52:	5b                   	pop    ebx
c0015c53:	0f 95 c0             	setne  al
c0015c56:	5e                   	pop    esi
c0015c57:	31 d2                	xor    edx,edx
c0015c59:	f7 d8                	neg    eax
c0015c5b:	83 d2 00             	adc    edx,0x0
c0015c5e:	f7 da                	neg    edx
c0015c60:	c3                   	ret    
c0015c61:	59                   	pop    ecx
c0015c62:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c67:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c6c:	5b                   	pop    ebx
c0015c6d:	5e                   	pop    esi
c0015c6e:	c3                   	ret    

c0015c6f <sysCallWait(regs*)>:
c0015c6f:	83 ec 10             	sub    esp,0x10
c0015c72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c76:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015c79:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c7c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015c7f:	e8 fc 24 00 00       	call   c0018180 <waitTask(int, int*, int)>
c0015c84:	83 c4 1c             	add    esp,0x1c
c0015c87:	99                   	cdq    
c0015c88:	c3                   	ret    

c0015c89 <sysCallNotImpl(regs*)>:
c0015c89:	83 ec 18             	sub    esp,0x18
c0015c8c:	68 e9 45 02 c0       	push   0xc00245e9
c0015c91:	e8 ef e6 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0015c96:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c9b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ca0:	83 c4 1c             	add    esp,0x1c
c0015ca3:	c3                   	ret    

c0015ca4 <sysPanic(regs*)>:
c0015ca4:	83 ec 18             	sub    esp,0x18
c0015ca7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015cab:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015cae:	e8 d2 e6 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0015cb3:	b8 01 00 00 00       	mov    eax,0x1
c0015cb8:	31 d2                	xor    edx,edx
c0015cba:	83 c4 1c             	add    esp,0x1c
c0015cbd:	c3                   	ret    

c0015cbe <sysCallRmdir(regs*)>:
c0015cbe:	56                   	push   esi
c0015cbf:	53                   	push   ebx
c0015cc0:	83 ec 20             	sub    esp,0x20
c0015cc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015cc7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015cca:	68 14 01 00 00       	push   0x114
c0015ccf:	e8 ef 3c ff ff       	call   c00099c3 <malloc>
c0015cd4:	83 c4 0c             	add    esp,0xc
c0015cd7:	89 c3                	mov    ebx,eax
c0015cd9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cde:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015ce1:	56                   	push   esi
c0015ce2:	53                   	push   ebx
c0015ce3:	e8 46 73 ff ff       	call   c000d02e <File::File(char const*, Process*)>
c0015ce8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ceb:	e8 1a 75 ff ff       	call   c000d20a <File::unlink()>
c0015cf0:	83 c4 10             	add    esp,0x10
c0015cf3:	85 db                	test   ebx,ebx
c0015cf5:	74 14                	je     c0015d0b <sysCallRmdir(regs*)+0x4d>
c0015cf7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015cfb:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015cfd:	83 ec 0c             	sub    esp,0xc
c0015d00:	53                   	push   ebx
c0015d01:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015d04:	83 c4 10             	add    esp,0x10
c0015d07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d0b:	85 c0                	test   eax,eax
c0015d0d:	0f 95 c0             	setne  al
c0015d10:	31 d2                	xor    edx,edx
c0015d12:	0f b6 c0             	movzx  eax,al
c0015d15:	f7 d8                	neg    eax
c0015d17:	83 d2 00             	adc    edx,0x0
c0015d1a:	83 c4 14             	add    esp,0x14
c0015d1d:	f7 da                	neg    edx
c0015d1f:	5b                   	pop    ebx
c0015d20:	5e                   	pop    esi
c0015d21:	c3                   	ret    

c0015d22 <sysCallUnlink(regs*)>:
c0015d22:	56                   	push   esi
c0015d23:	53                   	push   ebx
c0015d24:	83 ec 20             	sub    esp,0x20
c0015d27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015d2b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015d2e:	68 14 01 00 00       	push   0x114
c0015d33:	e8 8b 3c ff ff       	call   c00099c3 <malloc>
c0015d38:	83 c4 0c             	add    esp,0xc
c0015d3b:	89 c3                	mov    ebx,eax
c0015d3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d42:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015d45:	56                   	push   esi
c0015d46:	53                   	push   ebx
c0015d47:	e8 e2 72 ff ff       	call   c000d02e <File::File(char const*, Process*)>
c0015d4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d4f:	e8 b6 74 ff ff       	call   c000d20a <File::unlink()>
c0015d54:	83 c4 10             	add    esp,0x10
c0015d57:	85 db                	test   ebx,ebx
c0015d59:	74 14                	je     c0015d6f <sysCallUnlink(regs*)+0x4d>
c0015d5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d5f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015d61:	83 ec 0c             	sub    esp,0xc
c0015d64:	53                   	push   ebx
c0015d65:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015d68:	83 c4 10             	add    esp,0x10
c0015d6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d6f:	85 c0                	test   eax,eax
c0015d71:	0f 95 c0             	setne  al
c0015d74:	31 d2                	xor    edx,edx
c0015d76:	0f b6 c0             	movzx  eax,al
c0015d79:	f7 d8                	neg    eax
c0015d7b:	83 d2 00             	adc    edx,0x0
c0015d7e:	83 c4 14             	add    esp,0x14
c0015d81:	f7 da                	neg    edx
c0015d83:	5b                   	pop    ebx
c0015d84:	5e                   	pop    esi
c0015d85:	c3                   	ret    

c0015d86 <sysCallGetArgv(regs*)>:
c0015d86:	83 ec 0c             	sub    esp,0xc
c0015d89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d8d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015d90:	85 c0                	test   eax,eax
c0015d92:	78 2b                	js     c0015dbf <sysCallGetArgv(regs*)+0x39>
c0015d94:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015d9a:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015d9d:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0015da3:	7d 1a                	jge    c0015dbf <sysCallGetArgv(regs*)+0x39>
c0015da5:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0015dac:	85 c0                	test   eax,eax
c0015dae:	74 17                	je     c0015dc7 <sysCallGetArgv(regs*)+0x41>
c0015db0:	83 ec 08             	sub    esp,0x8
c0015db3:	50                   	push   eax
c0015db4:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015db7:	e8 84 a9 fe ff       	call   c0000740 <strcpy>
c0015dbc:	83 c4 10             	add    esp,0x10
c0015dbf:	31 c0                	xor    eax,eax
c0015dc1:	31 d2                	xor    edx,edx
c0015dc3:	83 c4 0c             	add    esp,0xc
c0015dc6:	c3                   	ret    
c0015dc7:	b8 01 00 00 00       	mov    eax,0x1
c0015dcc:	31 d2                	xor    edx,edx
c0015dce:	83 c4 0c             	add    esp,0xc
c0015dd1:	c3                   	ret    

c0015dd2 <sysCallTTYName(regs*)>:
c0015dd2:	56                   	push   esi
c0015dd3:	53                   	push   ebx
c0015dd4:	53                   	push   ebx
c0015dd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015dd9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015ddc:	85 c0                	test   eax,eax
c0015dde:	74 5f                	je     c0015e3f <sysCallTTYName(regs*)+0x6d>
c0015de0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015de3:	83 f8 02             	cmp    eax,0x2
c0015de6:	77 3e                	ja     c0015e26 <sysCallTTYName(regs*)+0x54>
c0015de8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ded:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015df0:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0015df6:	85 db                	test   ebx,ebx
c0015df8:	74 45                	je     c0015e3f <sysCallTTYName(regs*)+0x6d>
c0015dfa:	83 ec 0c             	sub    esp,0xc
c0015dfd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015dff:	53                   	push   ebx
c0015e00:	ff 10                	call   DWORD PTR [eax]
c0015e02:	83 c4 10             	add    esp,0x10
c0015e05:	84 c0                	test   al,al
c0015e07:	74 41                	je     c0015e4a <sysCallTTYName(regs*)+0x78>
c0015e09:	83 ec 08             	sub    esp,0x8
c0015e0c:	81 c3 82 00 00 00    	add    ebx,0x82
c0015e12:	53                   	push   ebx
c0015e13:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015e16:	e8 25 a9 fe ff       	call   c0000740 <strcpy>
c0015e1b:	83 c4 10             	add    esp,0x10
c0015e1e:	31 c0                	xor    eax,eax
c0015e20:	59                   	pop    ecx
c0015e21:	31 d2                	xor    edx,edx
c0015e23:	5b                   	pop    ebx
c0015e24:	5e                   	pop    esi
c0015e25:	c3                   	ret    
c0015e26:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015e2b:	74 bb                	je     c0015de8 <sysCallTTYName(regs*)+0x16>
c0015e2d:	83 ec 0c             	sub    esp,0xc
c0015e30:	50                   	push   eax
c0015e31:	e8 65 57 ff ff       	call   c000b59b <getFromFileDescriptor(int)>
c0015e36:	83 c4 10             	add    esp,0x10
c0015e39:	89 c3                	mov    ebx,eax
c0015e3b:	85 db                	test   ebx,ebx
c0015e3d:	75 bb                	jne    c0015dfa <sysCallTTYName(regs*)+0x28>
c0015e3f:	59                   	pop    ecx
c0015e40:	b8 01 00 00 00       	mov    eax,0x1
c0015e45:	31 d2                	xor    edx,edx
c0015e47:	5b                   	pop    ebx
c0015e48:	5e                   	pop    esi
c0015e49:	c3                   	ret    
c0015e4a:	59                   	pop    ecx
c0015e4b:	b8 02 00 00 00       	mov    eax,0x2
c0015e50:	31 d2                	xor    edx,edx
c0015e52:	5b                   	pop    ebx
c0015e53:	5e                   	pop    esi
c0015e54:	c3                   	ret    

c0015e55 <sysCallUSleep(regs*)>:
c0015e55:	83 ec 1c             	sub    esp,0x1c
c0015e58:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e5c:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015e5f:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0015e62:	6a 00                	push   0x0
c0015e64:	6a 64                	push   0x64
c0015e66:	52                   	push   edx
c0015e67:	50                   	push   eax
c0015e68:	e8 17 b1 00 00       	call   c0020f84 <__udivdi3>
c0015e6d:	83 c4 14             	add    esp,0x14
c0015e70:	50                   	push   eax
c0015e71:	e8 da 23 00 00       	call   c0018250 <milliTenthSleep(unsigned int)>
c0015e76:	31 c0                	xor    eax,eax
c0015e78:	31 d2                	xor    edx,edx
c0015e7a:	83 c4 1c             	add    esp,0x1c
c0015e7d:	c3                   	ret    

c0015e7e <sysCallSpawn(regs*)>:
c0015e7e:	56                   	push   esi
c0015e7f:	53                   	push   ebx
c0015e80:	50                   	push   eax
c0015e81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e85:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015e88:	85 c0                	test   eax,eax
c0015e8a:	75 08                	jne    c0015e94 <sysCallSpawn(regs*)+0x16>
c0015e8c:	59                   	pop    ecx
c0015e8d:	31 c0                	xor    eax,eax
c0015e8f:	31 d2                	xor    edx,edx
c0015e91:	5b                   	pop    ebx
c0015e92:	5e                   	pop    esi
c0015e93:	c3                   	ret    
c0015e94:	83 ec 0c             	sub    esp,0xc
c0015e97:	68 1f 07 00 00       	push   0x71f
c0015e9c:	e8 22 3b ff ff       	call   c00099c3 <malloc>
c0015ea1:	83 c4 10             	add    esp,0x10
c0015ea4:	89 c6                	mov    esi,eax
c0015ea6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0015ea9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015eac:	85 c0                	test   eax,eax
c0015eae:	75 32                	jne    c0015ee2 <sysCallSpawn(regs*)+0x64>
c0015eb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eb5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015eb8:	52                   	push   edx
c0015eb9:	50                   	push   eax
c0015eba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015ebd:	56                   	push   esi
c0015ebe:	e8 85 1a 00 00       	call   c0017948 <Process::Process(char const*, Process*, char**)>
c0015ec3:	83 c4 10             	add    esp,0x10
c0015ec6:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0015ecd:	75 bd                	jne    c0015e8c <sysCallSpawn(regs*)+0xe>
c0015ecf:	83 ec 0c             	sub    esp,0xc
c0015ed2:	56                   	push   esi
c0015ed3:	e8 5c 1f 00 00       	call   c0017e34 <Process::createUserThread()>
c0015ed8:	8b 06                	mov    eax,DWORD PTR [esi]
c0015eda:	83 c4 10             	add    esp,0x10
c0015edd:	99                   	cdq    
c0015ede:	59                   	pop    ecx
c0015edf:	5b                   	pop    ebx
c0015ee0:	5e                   	pop    esi
c0015ee1:	c3                   	ret    
c0015ee2:	31 c0                	xor    eax,eax
c0015ee4:	eb d2                	jmp    c0015eb8 <sysCallSpawn(regs*)+0x3a>

c0015ee6 <sysCallGetEnv(regs*)>:
c0015ee6:	57                   	push   edi
c0015ee7:	56                   	push   esi
c0015ee8:	53                   	push   ebx
c0015ee9:	83 ec 1c             	sub    esp,0x1c
c0015eec:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015ef0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ef5:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0015ef8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015efb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015efe:	e8 ce e3 ff ff       	call   c00142d1 <Krnl::getProcessTotalEnvCount(Process*)>
c0015f03:	83 c4 10             	add    esp,0x10
c0015f06:	39 c7                	cmp    edi,eax
c0015f08:	7c 14                	jl     c0015f1e <sysCallGetEnv(regs*)+0x38>
c0015f0a:	85 f6                	test   esi,esi
c0015f0c:	75 0b                	jne    c0015f19 <sysCallGetEnv(regs*)+0x33>
c0015f0e:	83 c4 10             	add    esp,0x10
c0015f11:	31 c0                	xor    eax,eax
c0015f13:	5b                   	pop    ebx
c0015f14:	31 d2                	xor    edx,edx
c0015f16:	5e                   	pop    esi
c0015f17:	5f                   	pop    edi
c0015f18:	c3                   	ret    
c0015f19:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015f1c:	eb f0                	jmp    c0015f0e <sysCallGetEnv(regs*)+0x28>
c0015f1e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015f22:	52                   	push   edx
c0015f23:	57                   	push   edi
c0015f24:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015f2a:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0015f2d:	50                   	push   eax
c0015f2e:	e8 be e3 ff ff       	call   c00142f1 <Krnl::getProcessEnvPair(Process*, int)>
c0015f33:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015f36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f3a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015f3e:	83 c4 0c             	add    esp,0xc
c0015f41:	85 c9                	test   ecx,ecx
c0015f43:	75 23                	jne    c0015f68 <sysCallGetEnv(regs*)+0x82>
c0015f45:	83 ec 0c             	sub    esp,0xc
c0015f48:	50                   	push   eax
c0015f49:	e8 52 a7 fe ff       	call   c00006a0 <strlen>
c0015f4e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015f51:	89 c3                	mov    ebx,eax
c0015f53:	e8 48 a7 fe ff       	call   c00006a0 <strlen>
c0015f58:	83 c4 10             	add    esp,0x10
c0015f5b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0015f5f:	83 c4 10             	add    esp,0x10
c0015f62:	31 d2                	xor    edx,edx
c0015f64:	5b                   	pop    ebx
c0015f65:	5e                   	pop    esi
c0015f66:	5f                   	pop    edi
c0015f67:	c3                   	ret    
c0015f68:	83 ec 08             	sub    esp,0x8
c0015f6b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015f6e:	50                   	push   eax
c0015f6f:	56                   	push   esi
c0015f70:	e8 cb a7 fe ff       	call   c0000740 <strcpy>
c0015f75:	58                   	pop    eax
c0015f76:	5a                   	pop    edx
c0015f77:	68 03 46 02 c0       	push   0xc0024603
c0015f7c:	56                   	push   esi
c0015f7d:	e8 fe a8 fe ff       	call   c0000880 <strcat>
c0015f82:	59                   	pop    ecx
c0015f83:	5b                   	pop    ebx
c0015f84:	57                   	push   edi
c0015f85:	56                   	push   esi
c0015f86:	e8 f5 a8 fe ff       	call   c0000880 <strcat>
c0015f8b:	83 c4 10             	add    esp,0x10
c0015f8e:	e9 7b ff ff ff       	jmp    c0015f0e <sysCallGetEnv(regs*)+0x28>

c0015f93 <sysAppSettings(regs*)>:
c0015f93:	57                   	push   edi
c0015f94:	56                   	push   esi
c0015f95:	56                   	push   esi
c0015f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f9a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015f9d:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0015fa3:	25 e0 1f 00 00       	and    eax,0x1fe0
c0015fa8:	66 3d c0 09          	cmp    ax,0x9c0
c0015fac:	75 2e                	jne    c0015fdc <sysAppSettings(regs*)+0x49>
c0015fae:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0015fb4:	83 e0 1f             	and    eax,0x1f
c0015fb7:	3c 01                	cmp    al,0x1
c0015fb9:	74 2c                	je     c0015fe7 <sysAppSettings(regs*)+0x54>
c0015fbb:	3c 07                	cmp    al,0x7
c0015fbd:	0f 84 b3 00 00 00    	je     c0016076 <sysAppSettings(regs*)+0xe3>
c0015fc3:	84 c0                	test   al,al
c0015fc5:	0f 84 d2 00 00 00    	je     c001609d <sysAppSettings(regs*)+0x10a>
c0015fcb:	3c 08                	cmp    al,0x8
c0015fcd:	74 63                	je     c0016032 <sysAppSettings(regs*)+0x9f>
c0015fcf:	59                   	pop    ecx
c0015fd0:	0f b6 c0             	movzx  eax,al
c0015fd3:	5e                   	pop    esi
c0015fd4:	05 e8 03 00 00       	add    eax,0x3e8
c0015fd9:	5f                   	pop    edi
c0015fda:	99                   	cdq    
c0015fdb:	c3                   	ret    
c0015fdc:	b8 01 00 00 00       	mov    eax,0x1
c0015fe1:	59                   	pop    ecx
c0015fe2:	31 d2                	xor    edx,edx
c0015fe4:	5e                   	pop    esi
c0015fe5:	5f                   	pop    edi
c0015fe6:	c3                   	ret    
c0015fe7:	50                   	push   eax
c0015fe8:	68 00 01 00 00       	push   0x100
c0015fed:	6a 00                	push   0x0
c0015fef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ff4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015ff7:	83 c0 0c             	add    eax,0xc
c0015ffa:	50                   	push   eax
c0015ffb:	e8 84 a6 fe ff       	call   c0000684 <memset>
c0016000:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016005:	b9 ff 00 00 00       	mov    ecx,0xff
c001600a:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c001600d:	83 c7 0c             	add    edi,0xc
c0016010:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016012:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016017:	5a                   	pop    edx
c0016018:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001601b:	59                   	pop    ecx
c001601c:	8d 50 0c             	lea    edx,[eax+0xc]
c001601f:	52                   	push   edx
c0016020:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016026:	e8 93 46 ff ff       	call   c000a6be <VgaText::setTitle(char*)>
c001602b:	83 c4 10             	add    esp,0x10
c001602e:	31 c0                	xor    eax,eax
c0016030:	eb af                	jmp    c0015fe1 <sysAppSettings(regs*)+0x4e>
c0016032:	83 ec 08             	sub    esp,0x8
c0016035:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001603b:	83 e0 0f             	and    eax,0xf
c001603e:	50                   	push   eax
c001603f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016044:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016047:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001604d:	e8 5c 46 ff ff       	call   c000a6ae <VgaText::setTitleColour(VgaColour)>
c0016052:	5f                   	pop    edi
c0016053:	58                   	pop    eax
c0016054:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001605a:	c1 e8 04             	shr    eax,0x4
c001605d:	83 e0 0f             	and    eax,0xf
c0016060:	50                   	push   eax
c0016061:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016066:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016069:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001606f:	e8 2a 46 ff ff       	call   c000a69e <VgaText::setTitleTextColour(VgaColour)>
c0016074:	eb b5                	jmp    c001602b <sysAppSettings(regs*)+0x98>
c0016076:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001607b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001607e:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016084:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001608a:	c0 e8 06             	shr    al,0x6
c001608d:	83 e0 01             	and    eax,0x1
c0016090:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c0016096:	31 c0                	xor    eax,eax
c0016098:	e9 44 ff ff ff       	jmp    c0015fe1 <sysAppSettings(regs*)+0x4e>
c001609d:	b8 02 00 00 00       	mov    eax,0x2
c00160a2:	e9 3a ff ff ff       	jmp    c0015fe1 <sysAppSettings(regs*)+0x4e>

c00160a7 <sysSetFatAttrib(regs*)>:
c00160a7:	57                   	push   edi
c00160a8:	56                   	push   esi
c00160a9:	53                   	push   ebx
c00160aa:	83 ec 1c             	sub    esp,0x1c
c00160ad:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00160b1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00160b4:	68 14 01 00 00       	push   0x114
c00160b9:	e8 05 39 ff ff       	call   c00099c3 <malloc>
c00160be:	83 c4 0c             	add    esp,0xc
c00160c1:	89 c3                	mov    ebx,eax
c00160c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160c8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00160cb:	57                   	push   edi
c00160cc:	53                   	push   ebx
c00160cd:	e8 5c 6f ff ff       	call   c000d02e <File::File(char const*, Process*)>
c00160d2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00160d5:	83 c4 0c             	add    esp,0xc
c00160d8:	0f b6 d4             	movzx  edx,ah
c00160db:	0f b6 c0             	movzx  eax,al
c00160de:	52                   	push   edx
c00160df:	50                   	push   eax
c00160e0:	53                   	push   ebx
c00160e1:	e8 be 71 ff ff       	call   c000d2a4 <File::chfatattr(unsigned char, unsigned char)>
c00160e6:	83 c4 10             	add    esp,0x10
c00160e9:	85 db                	test   ebx,ebx
c00160eb:	74 14                	je     c0016101 <sysSetFatAttrib(regs*)+0x5a>
c00160ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00160f1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00160f3:	83 ec 0c             	sub    esp,0xc
c00160f6:	53                   	push   ebx
c00160f7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00160fa:	83 c4 10             	add    esp,0x10
c00160fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016101:	85 c0                	test   eax,eax
c0016103:	0f 95 c0             	setne  al
c0016106:	31 d2                	xor    edx,edx
c0016108:	0f b6 c0             	movzx  eax,al
c001610b:	f7 d8                	neg    eax
c001610d:	83 d2 00             	adc    edx,0x0
c0016110:	83 c4 10             	add    esp,0x10
c0016113:	f7 da                	neg    edx
c0016115:	5b                   	pop    ebx
c0016116:	5e                   	pop    esi
c0016117:	5f                   	pop    edi
c0016118:	c3                   	ret    

c0016119 <sysPipe(regs*)>:
c0016119:	57                   	push   edi
c001611a:	56                   	push   esi
c001611b:	53                   	push   ebx
c001611c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016120:	83 ec 0c             	sub    esp,0xc
c0016123:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016126:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016129:	6a 20                	push   0x20
c001612b:	e8 93 38 ff ff       	call   c00099c3 <malloc>
c0016130:	89 c3                	mov    ebx,eax
c0016132:	58                   	pop    eax
c0016133:	5a                   	pop    edx
c0016134:	68 00 50 00 00       	push   0x5000
c0016139:	53                   	push   ebx
c001613a:	e8 f7 42 ff ff       	call   c000a436 <Pipe::Pipe(int)>
c001613f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016142:	e8 5f 51 ff ff       	call   c000b2a6 <UnixFile::getFileDescriptor()>
c0016147:	89 07                	mov    DWORD PTR [edi],eax
c0016149:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001614c:	e8 55 51 ff ff       	call   c000b2a6 <UnixFile::getFileDescriptor()>
c0016151:	83 c4 10             	add    esp,0x10
c0016154:	89 06                	mov    DWORD PTR [esi],eax
c0016156:	31 d2                	xor    edx,edx
c0016158:	5b                   	pop    ebx
c0016159:	31 c0                	xor    eax,eax
c001615b:	5e                   	pop    esi
c001615c:	5f                   	pop    edi
c001615d:	c3                   	ret    

c001615e <sysGetUnixTime(regs*)>:
c001615e:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0016163:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016169:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001616d:	e9 b0 78 ff ff       	jmp    c000da22 <Clock::timeInSecondsLocal()>

c0016172 <string_ends_with(char const*, char const*)>:
c0016172:	57                   	push   edi
c0016173:	56                   	push   esi
c0016174:	53                   	push   ebx
c0016175:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016179:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001617d:	83 ec 0c             	sub    esp,0xc
c0016180:	53                   	push   ebx
c0016181:	e8 1a a5 fe ff       	call   c00006a0 <strlen>
c0016186:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016189:	89 c6                	mov    esi,eax
c001618b:	e8 10 a5 fe ff       	call   c00006a0 <strlen>
c0016190:	83 c4 10             	add    esp,0x10
c0016193:	39 c6                	cmp    esi,eax
c0016195:	7d 06                	jge    c001619d <string_ends_with(char const*, char const*)+0x2b>
c0016197:	5b                   	pop    ebx
c0016198:	31 c0                	xor    eax,eax
c001619a:	5e                   	pop    esi
c001619b:	5f                   	pop    edi
c001619c:	c3                   	ret    
c001619d:	83 ec 08             	sub    esp,0x8
c00161a0:	29 c6                	sub    esi,eax
c00161a2:	57                   	push   edi
c00161a3:	01 f3                	add    ebx,esi
c00161a5:	53                   	push   ebx
c00161a6:	e8 21 a6 fe ff       	call   c00007cc <strcmp>
c00161ab:	83 c4 10             	add    esp,0x10
c00161ae:	85 c0                	test   eax,eax
c00161b0:	5b                   	pop    ebx
c00161b1:	0f 94 c0             	sete   al
c00161b4:	5e                   	pop    esi
c00161b5:	0f b6 c0             	movzx  eax,al
c00161b8:	5f                   	pop    edi
c00161b9:	c3                   	ret    

c00161ba <sysCallOpen(regs*)>:
c00161ba:	56                   	push   esi
c00161bb:	53                   	push   ebx
c00161bc:	81 ec 04 01 00 00    	sub    esp,0x104
c00161c2:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00161c9:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00161cc:	85 c9                	test   ecx,ecx
c00161ce:	0f 84 ad 01 00 00    	je     c0016381 <sysCallOpen(regs*)+0x1c7>
c00161d4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00161d7:	85 c0                	test   eax,eax
c00161d9:	0f 84 a2 01 00 00    	je     c0016381 <sysCallOpen(regs*)+0x1c7>
c00161df:	52                   	push   edx
c00161e0:	68 05 46 02 c0       	push   0xc0024605
c00161e5:	50                   	push   eax
c00161e6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00161ea:	56                   	push   esi
c00161eb:	e8 94 6c ff ff       	call   c000ce84 <Fs::standardiseFiles(char*, char const*, char const*)>
c00161f0:	89 34 24             	mov    DWORD PTR [esp],esi
c00161f3:	e8 a8 a4 fe ff       	call   c00006a0 <strlen>
c00161f8:	83 c4 10             	add    esp,0x10
c00161fb:	48                   	dec    eax
c00161fc:	74 1d                	je     c001621b <sysCallOpen(regs*)+0x61>
c00161fe:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016201:	eb 0f                	jmp    c0016212 <sysCallOpen(regs*)+0x58>
c0016203:	80 fa 3a             	cmp    dl,0x3a
c0016206:	74 0f                	je     c0016217 <sysCallOpen(regs*)+0x5d>
c0016208:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001620c:	48                   	dec    eax
c001620d:	74 0c                	je     c001621b <sysCallOpen(regs*)+0x61>
c001620f:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016212:	80 fa 2e             	cmp    dl,0x2e
c0016215:	75 ec                	jne    c0016203 <sysCallOpen(regs*)+0x49>
c0016217:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001621b:	83 ec 08             	sub    esp,0x8
c001621e:	68 09 46 02 c0       	push   0xc0024609
c0016223:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016226:	e8 47 ff ff ff       	call   c0016172 <string_ends_with(char const*, char const*)>
c001622b:	83 c4 10             	add    esp,0x10
c001622e:	85 c0                	test   eax,eax
c0016230:	74 1d                	je     c001624f <sysCallOpen(regs*)+0x95>
c0016232:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016235:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001623b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016242:	81 c4 04 01 00 00    	add    esp,0x104
c0016248:	31 c0                	xor    eax,eax
c001624a:	31 d2                	xor    edx,edx
c001624c:	5b                   	pop    ebx
c001624d:	5e                   	pop    esi
c001624e:	c3                   	ret    
c001624f:	83 ec 08             	sub    esp,0x8
c0016252:	68 0e 46 02 c0       	push   0xc002460e
c0016257:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001625a:	e8 13 ff ff ff       	call   c0016172 <string_ends_with(char const*, char const*)>
c001625f:	83 c4 10             	add    esp,0x10
c0016262:	85 c0                	test   eax,eax
c0016264:	75 cc                	jne    c0016232 <sysCallOpen(regs*)+0x78>
c0016266:	83 ec 08             	sub    esp,0x8
c0016269:	68 0a 46 02 c0       	push   0xc002460a
c001626e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016271:	e8 56 a5 fe ff       	call   c00007cc <strcmp>
c0016276:	83 c4 10             	add    esp,0x10
c0016279:	85 c0                	test   eax,eax
c001627b:	74 b5                	je     c0016232 <sysCallOpen(regs*)+0x78>
c001627d:	83 ec 08             	sub    esp,0x8
c0016280:	68 09 46 02 c0       	push   0xc0024609
c0016285:	56                   	push   esi
c0016286:	e8 e7 fe ff ff       	call   c0016172 <string_ends_with(char const*, char const*)>
c001628b:	83 c4 10             	add    esp,0x10
c001628e:	85 c0                	test   eax,eax
c0016290:	75 a0                	jne    c0016232 <sysCallOpen(regs*)+0x78>
c0016292:	83 ec 08             	sub    esp,0x8
c0016295:	68 13 46 02 c0       	push   0xc0024613
c001629a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001629d:	e8 d0 fe ff ff       	call   c0016172 <string_ends_with(char const*, char const*)>
c00162a2:	83 c4 10             	add    esp,0x10
c00162a5:	85 c0                	test   eax,eax
c00162a7:	0f 85 e7 00 00 00    	jne    c0016394 <sysCallOpen(regs*)+0x1da>
c00162ad:	83 ec 08             	sub    esp,0x8
c00162b0:	68 18 46 02 c0       	push   0xc0024618
c00162b5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162b8:	e8 b5 fe ff ff       	call   c0016172 <string_ends_with(char const*, char const*)>
c00162bd:	83 c4 10             	add    esp,0x10
c00162c0:	85 c0                	test   eax,eax
c00162c2:	0f 85 cc 00 00 00    	jne    c0016394 <sysCallOpen(regs*)+0x1da>
c00162c8:	83 ec 08             	sub    esp,0x8
c00162cb:	68 14 46 02 c0       	push   0xc0024614
c00162d0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162d3:	e8 f4 a4 fe ff       	call   c00007cc <strcmp>
c00162d8:	83 c4 10             	add    esp,0x10
c00162db:	85 c0                	test   eax,eax
c00162dd:	0f 84 b1 00 00 00    	je     c0016394 <sysCallOpen(regs*)+0x1da>
c00162e3:	83 ec 08             	sub    esp,0x8
c00162e6:	68 13 46 02 c0       	push   0xc0024613
c00162eb:	56                   	push   esi
c00162ec:	e8 81 fe ff ff       	call   c0016172 <string_ends_with(char const*, char const*)>
c00162f1:	83 c4 10             	add    esp,0x10
c00162f4:	85 c0                	test   eax,eax
c00162f6:	0f 85 98 00 00 00    	jne    c0016394 <sysCallOpen(regs*)+0x1da>
c00162fc:	83 ec 0c             	sub    esp,0xc
c00162ff:	68 14 01 00 00       	push   0x114
c0016304:	e8 ba 36 ff ff       	call   c00099c3 <malloc>
c0016309:	83 c4 0c             	add    esp,0xc
c001630c:	89 c6                	mov    esi,eax
c001630e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016313:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016316:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016319:	56                   	push   esi
c001631a:	e8 0f 6d ff ff       	call   c000d02e <File::File(char const*, Process*)>
c001631f:	83 c4 10             	add    esp,0x10
c0016322:	85 f6                	test   esi,esi
c0016324:	74 5b                	je     c0016381 <sysCallOpen(regs*)+0x1c7>
c0016326:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016329:	0f b6 c2             	movzx  eax,dl
c001632c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001632f:	89 d0                	mov    eax,edx
c0016331:	83 e0 01             	and    eax,0x1
c0016334:	f6 c2 02             	test   dl,0x2
c0016337:	74 03                	je     c001633c <sysCallOpen(regs*)+0x182>
c0016339:	83 c8 02             	or     eax,0x2
c001633c:	f6 c2 04             	test   dl,0x4
c001633f:	74 03                	je     c0016344 <sysCallOpen(regs*)+0x18a>
c0016341:	83 c8 04             	or     eax,0x4
c0016344:	f6 c2 08             	test   dl,0x8
c0016347:	74 03                	je     c001634c <sysCallOpen(regs*)+0x192>
c0016349:	83 c8 0a             	or     eax,0xa
c001634c:	83 e2 10             	and    edx,0x10
c001634f:	74 03                	je     c0016354 <sysCallOpen(regs*)+0x19a>
c0016351:	83 c8 12             	or     eax,0x12
c0016354:	83 ec 08             	sub    esp,0x8
c0016357:	50                   	push   eax
c0016358:	56                   	push   esi
c0016359:	e8 34 6d ff ff       	call   c000d092 <File::open(FileOpenMode)>
c001635e:	83 c4 10             	add    esp,0x10
c0016361:	85 c0                	test   eax,eax
c0016363:	75 1c                	jne    c0016381 <sysCallOpen(regs*)+0x1c7>
c0016365:	83 ec 0c             	sub    esp,0xc
c0016368:	56                   	push   esi
c0016369:	e8 38 4f ff ff       	call   c000b2a6 <UnixFile::getFileDescriptor()>
c001636e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016371:	83 c4 10             	add    esp,0x10
c0016374:	89 02                	mov    DWORD PTR [edx],eax
c0016376:	c1 f8 1f             	sar    eax,0x1f
c0016379:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001637c:	e9 c1 fe ff ff       	jmp    c0016242 <sysCallOpen(regs*)+0x88>
c0016381:	81 c4 04 01 00 00    	add    esp,0x104
c0016387:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001638c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016391:	5b                   	pop    ebx
c0016392:	5e                   	pop    esi
c0016393:	c3                   	ret    
c0016394:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016397:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001639d:	e9 99 fe ff ff       	jmp    c001623b <sysCallOpen(regs*)+0x81>

c00163a2 <Sys::loadSyscalls()>:
c00163a2:	c7 05 80 6f 02 c0 13 56 01 c0 	mov    DWORD PTR ds:0xc0026f80,0xc0015613
c00163ac:	c7 05 84 6f 02 c0 08 52 01 c0 	mov    DWORD PTR ds:0xc0026f84,0xc0015208
c00163b6:	c7 05 88 6f 02 c0 f9 53 01 c0 	mov    DWORD PTR ds:0xc0026f88,0xc00153f9
c00163c0:	c7 05 8c 6f 02 c0 49 55 01 c0 	mov    DWORD PTR ds:0xc0026f8c,0xc0015549
c00163ca:	c7 05 90 6f 02 c0 91 53 01 c0 	mov    DWORD PTR ds:0xc0026f90,0xc0015391
c00163d4:	c7 05 94 6f 02 c0 3f 52 01 c0 	mov    DWORD PTR ds:0xc0026f94,0xc001523f
c00163de:	c7 05 98 6f 02 c0 20 52 01 c0 	mov    DWORD PTR ds:0xc0026f98,0xc0015220
c00163e8:	c7 05 9c 6f 02 c0 4e 54 01 c0 	mov    DWORD PTR ds:0xc0026f9c,0xc001544e
c00163f2:	c7 05 a4 6f 02 c0 d6 5a 01 c0 	mov    DWORD PTR ds:0xc0026fa4,0xc0015ad6
c00163fc:	c7 05 a0 6f 02 c0 ba 61 01 c0 	mov    DWORD PTR ds:0xc0026fa0,0xc00161ba
c0016406:	c7 05 a8 6f 02 c0 36 5b 01 c0 	mov    DWORD PTR ds:0xc0026fa8,0xc0015b36
c0016410:	c7 05 ac 6f 02 c0 19 58 01 c0 	mov    DWORD PTR ds:0xc0026fac,0xc0015819
c001641a:	c7 05 b0 6f 02 c0 4b 56 01 c0 	mov    DWORD PTR ds:0xc0026fb0,0xc001564b
c0016424:	c7 05 b4 6f 02 c0 50 56 01 c0 	mov    DWORD PTR ds:0xc0026fb4,0xc0015650
c001642e:	c7 05 b8 6f 02 c0 ff 5b 01 c0 	mov    DWORD PTR ds:0xc0026fb8,0xc0015bff
c0016438:	c7 05 bc 6f 02 c0 ab 5b 01 c0 	mov    DWORD PTR ds:0xc0026fbc,0xc0015bab
c0016442:	c7 05 c0 6f 02 c0 f2 58 01 c0 	mov    DWORD PTR ds:0xc0026fc0,0xc00158f2
c001644c:	c7 05 c4 6f 02 c0 49 59 01 c0 	mov    DWORD PTR ds:0xc0026fc4,0xc0015949
c0016456:	c7 05 c8 6f 02 c0 b5 59 01 c0 	mov    DWORD PTR ds:0xc0026fc8,0xc00159b5
c0016460:	c7 05 cc 6f 02 c0 55 56 01 c0 	mov    DWORD PTR ds:0xc0026fcc,0xc0015655
c001646a:	c7 05 d0 6f 02 c0 6f 5c 01 c0 	mov    DWORD PTR ds:0xc0026fd0,0xc0015c6f
c0016474:	c7 05 d4 6f 02 c0 89 5c 01 c0 	mov    DWORD PTR ds:0xc0026fd4,0xc0015c89
c001647e:	c7 05 d8 6f 02 c0 89 5c 01 c0 	mov    DWORD PTR ds:0xc0026fd8,0xc0015c89
c0016488:	c7 05 dc 6f 02 c0 be 5c 01 c0 	mov    DWORD PTR ds:0xc0026fdc,0xc0015cbe
c0016492:	c7 05 e0 6f 02 c0 22 5d 01 c0 	mov    DWORD PTR ds:0xc0026fe0,0xc0015d22
c001649c:	c7 05 e4 6f 02 c0 5f 56 01 c0 	mov    DWORD PTR ds:0xc0026fe4,0xc001565f
c00164a6:	c7 05 e8 6f 02 c0 86 5d 01 c0 	mov    DWORD PTR ds:0xc0026fe8,0xc0015d86
c00164b0:	c7 05 ec 6f 02 c0 d6 57 01 c0 	mov    DWORD PTR ds:0xc0026fec,0xc00157d6
c00164ba:	c7 05 f0 6f 02 c0 d2 5d 01 c0 	mov    DWORD PTR ds:0xc0026ff0,0xc0015dd2
c00164c4:	c7 05 f4 6f 02 c0 98 58 01 c0 	mov    DWORD PTR ds:0xc0026ff4,0xc0015898
c00164ce:	c7 05 f8 6f 02 c0 55 5e 01 c0 	mov    DWORD PTR ds:0xc0026ff8,0xc0015e55
c00164d8:	c7 05 fc 6f 02 c0 27 5a 01 c0 	mov    DWORD PTR ds:0xc0026ffc,0xc0015a27
c00164e2:	c7 05 00 70 02 c0 7e 5e 01 c0 	mov    DWORD PTR ds:0xc0027000,0xc0015e7e
c00164ec:	c7 05 04 70 02 c0 e6 5e 01 c0 	mov    DWORD PTR ds:0xc0027004,0xc0015ee6
c00164f6:	c7 05 08 70 02 c0 93 5f 01 c0 	mov    DWORD PTR ds:0xc0027008,0xc0015f93
c0016500:	c7 05 0c 70 02 c0 6f 56 01 c0 	mov    DWORD PTR ds:0xc002700c,0xc001566f
c001650a:	c7 05 10 70 02 c0 d9 56 01 c0 	mov    DWORD PTR ds:0xc0027010,0xc00156d9
c0016514:	c7 05 14 70 02 c0 23 57 01 c0 	mov    DWORD PTR ds:0xc0027014,0xc0015723
c001651e:	c7 05 18 70 02 c0 a7 60 01 c0 	mov    DWORD PTR ds:0xc0027018,0xc00160a7
c0016528:	c7 05 1c 70 02 c0 a4 5c 01 c0 	mov    DWORD PTR ds:0xc002701c,0xc0015ca4
c0016532:	c7 05 20 70 02 c0 78 57 01 c0 	mov    DWORD PTR ds:0xc0027020,0xc0015778
c001653c:	c7 05 24 70 02 c0 19 61 01 c0 	mov    DWORD PTR ds:0xc0027024,0xc0016119
c0016546:	c7 05 28 70 02 c0 5e 61 01 c0 	mov    DWORD PTR ds:0xc0027028,0xc001615e
c0016550:	c7 05 2c 70 02 c0 e9 52 01 c0 	mov    DWORD PTR ds:0xc002702c,0xc00152e9
c001655a:	c7 05 30 70 02 c0 6a 54 01 c0 	mov    DWORD PTR ds:0xc0027030,0xc001546a
c0016564:	c7 05 34 70 02 c0 ff 54 01 c0 	mov    DWORD PTR ds:0xc0027034,0xc00154ff
c001656e:	c7 05 38 70 02 c0 d2 51 01 c0 	mov    DWORD PTR ds:0xc0027038,0xc00151d2
c0016578:	c7 05 3c 70 02 c0 b1 55 01 c0 	mov    DWORD PTR ds:0xc002703c,0xc00155b1
c0016582:	c7 05 40 70 02 c0 4b 52 01 c0 	mov    DWORD PTR ds:0xc0027040,0xc001524b
c001658c:	c7 05 44 70 02 c0 65 52 01 c0 	mov    DWORD PTR ds:0xc0027044,0xc0015265
c0016596:	c3                   	ret    

c0016597 <Sys::systemCall(regs*, void*)>:
c0016597:	53                   	push   ebx
c0016598:	83 ec 08             	sub    esp,0x8
c001659b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001659f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00165a2:	83 f8 7f             	cmp    eax,0x7f
c00165a5:	77 16                	ja     c00165bd <Sys::systemCall(regs*, void*)+0x26>
c00165a7:	8b 14 85 80 6f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9080]
c00165ae:	85 d2                	test   edx,edx
c00165b0:	74 0b                	je     c00165bd <Sys::systemCall(regs*, void*)+0x26>
c00165b2:	83 ec 0c             	sub    esp,0xc
c00165b5:	53                   	push   ebx
c00165b6:	ff d2                	call   edx
c00165b8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00165bb:	eb 0d                	jmp    c00165ca <Sys::systemCall(regs*, void*)+0x33>
c00165bd:	52                   	push   edx
c00165be:	52                   	push   edx
c00165bf:	50                   	push   eax
c00165c0:	68 1d 46 02 c0       	push   0xc002461d
c00165c5:	e8 f9 64 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c00165ca:	83 c4 10             	add    esp,0x10
c00165cd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00165d2:	31 d2                	xor    edx,edx
c00165d4:	83 c4 08             	add    esp,0x8
c00165d7:	5b                   	pop    ebx
c00165d8:	c3                   	ret    

c00165d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00165d9:	55                   	push   ebp
c00165da:	57                   	push   edi
c00165db:	56                   	push   esi
c00165dc:	53                   	push   ebx
c00165dd:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00165e3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00165ea:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c00165f1:	85 c0                	test   eax,eax
c00165f3:	0f 95 c1             	setne  cl
c00165f6:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00165fe:	0f 94 c2             	sete   dl
c0016601:	84 d1                	test   cl,dl
c0016603:	74 23                	je     c0016628 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016605:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001660b:	74 1b                	je     c0016628 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001660d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016613:	89 da                	mov    edx,ebx
c0016615:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001661b:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0016621:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0016628:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001662f:	05 ff 0f 00 00       	add    eax,0xfff
c0016634:	83 ec 0c             	sub    esp,0xc
c0016637:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001663b:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0016641:	c1 e8 0c             	shr    eax,0xc
c0016644:	89 fe                	mov    esi,edi
c0016646:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001664a:	c1 ee 0c             	shr    esi,0xc
c001664d:	6a 01                	push   0x1
c001664f:	e8 9d 50 ff ff       	call   c000b6f1 <Virt::allocateKernelVirtualPages(int)>
c0016654:	89 c5                	mov    ebp,eax
c0016656:	58                   	pop    eax
c0016657:	5a                   	pop    edx
c0016658:	56                   	push   esi
c0016659:	68 31 46 02 c0       	push   0xc0024631
c001665e:	e8 60 64 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0016663:	59                   	pop    ecx
c0016664:	58                   	pop    eax
c0016665:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016669:	68 43 46 02 c0       	push   0xc0024643
c001666e:	e8 50 64 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0016673:	83 c4 10             	add    esp,0x10
c0016676:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001667c:	0f 86 31 01 00 00    	jbe    c00167b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016682:	c1 e6 0c             	shl    esi,0xc
c0016685:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016688:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001668b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001668f:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0016696:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016699:	01 df                	add    edi,ebx
c001669b:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001669e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00166a2:	0f 84 08 01 00 00    	je     c00167b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c00166a8:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00166ae:	76 05                	jbe    c00166b5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c00166b0:	bf 00 10 00 00       	mov    edi,0x1000
c00166b5:	83 ec 0c             	sub    esp,0xc
c00166b8:	31 d2                	xor    edx,edx
c00166ba:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00166c1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00166c3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00166c7:	50                   	push   eax
c00166c8:	8d 74 24 30          	lea    esi,[esp+0x30]
c00166cc:	56                   	push   esi
c00166cd:	52                   	push   edx
c00166ce:	57                   	push   edi
c00166cf:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00166d6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00166d9:	83 c4 20             	add    esp,0x20
c00166dc:	85 c0                	test   eax,eax
c00166de:	74 0a                	je     c00166ea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c00166e0:	53                   	push   ebx
c00166e1:	53                   	push   ebx
c00166e2:	50                   	push   eax
c00166e3:	68 55 46 02 c0       	push   0xc0024655
c00166e8:	eb 0f                	jmp    c00166f9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c00166ea:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00166ee:	74 20                	je     c0016710 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c00166f0:	51                   	push   ecx
c00166f1:	51                   	push   ecx
c00166f2:	6a 00                	push   0x0
c00166f4:	68 80 46 02 c0       	push   0xc0024680
c00166f9:	e8 c5 63 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c00166fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016701:	e8 1b 53 ff ff       	call   c000ba21 <Virt::freeKernelVirtualPages(unsigned long)>
c0016706:	83 c4 10             	add    esp,0x10
c0016709:	31 c0                	xor    eax,eax
c001670b:	e9 68 01 00 00       	jmp    c0016878 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0016710:	fa                   	cli    
c0016711:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0016717:	e8 ce 36 ff ff       	call   c0009dea <Phys::allocatePage()>
c001671c:	6a 07                	push   0x7
c001671e:	89 c7                	mov    edi,eax
c0016720:	55                   	push   ebp
c0016721:	50                   	push   eax
c0016722:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016727:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001672a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016730:	e8 63 56 ff ff       	call   c000bd98 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016735:	83 c4 0c             	add    esp,0xc
c0016738:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001673f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016745:	6a 00                	push   0x0
c0016747:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001674c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001674f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016755:	e8 98 54 ff ff       	call   c000bbf2 <VAS::mapOtherVASIn(bool, VAS*)>
c001675a:	58                   	pop    eax
c001675b:	5a                   	pop    edx
c001675c:	68 07 0c 00 00       	push   0xc07
c0016761:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016765:	57                   	push   edi
c0016766:	89 ef                	mov    edi,ebp
c0016768:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001676f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016775:	6a 00                	push   0x0
c0016777:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001677c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001677f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016785:	e8 ca 59 ff ff       	call   c000c154 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001678a:	b9 00 10 00 00       	mov    ecx,0x1000
c001678f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016791:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0016796:	83 c4 20             	add    esp,0x20
c0016799:	48                   	dec    eax
c001679a:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c001679f:	85 c0                	test   eax,eax
c00167a1:	75 01                	jne    c00167a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c00167a3:	fb                   	sti    
c00167a4:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c00167ab:	e9 df fe ff ff       	jmp    c001668f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c00167b0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00167b3:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c00167bb:	0f 86 a9 00 00 00    	jbe    c001686a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c00167c1:	fa                   	cli    
c00167c2:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c00167c8:	51                   	push   ecx
c00167c9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00167d0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167d6:	6a 00                	push   0x0
c00167d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167e0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167e6:	e8 07 54 ff ff       	call   c000bbf2 <VAS::mapOtherVASIn(bool, VAS*)>
c00167eb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00167ef:	c1 e6 0c             	shl    esi,0xc
c00167f2:	01 de                	add    esi,ebx
c00167f4:	83 c4 10             	add    esp,0x10
c00167f7:	39 de                	cmp    esi,ebx
c00167f9:	74 61                	je     c001685c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00167fb:	e8 ea 35 ff ff       	call   c0009dea <Phys::allocatePage()>
c0016800:	6a 07                	push   0x7
c0016802:	89 c7                	mov    edi,eax
c0016804:	55                   	push   ebp
c0016805:	50                   	push   eax
c0016806:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001680b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001680e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016814:	e8 7f 55 ff ff       	call   c000bd98 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016819:	58                   	pop    eax
c001681a:	5a                   	pop    edx
c001681b:	68 07 0c 00 00       	push   0xc07
c0016820:	53                   	push   ebx
c0016821:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016827:	57                   	push   edi
c0016828:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001682f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016835:	6a 00                	push   0x0
c0016837:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001683c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001683f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016845:	e8 0a 59 ff ff       	call   c000c154 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001684a:	83 c4 1c             	add    esp,0x1c
c001684d:	68 00 10 00 00       	push   0x1000
c0016852:	6a 00                	push   0x0
c0016854:	55                   	push   ebp
c0016855:	e8 2a 9e fe ff       	call   c0000684 <memset>
c001685a:	eb 98                	jmp    c00167f4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001685c:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0016861:	48                   	dec    eax
c0016862:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0016867:	75 01                	jne    c001686a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016869:	fb                   	sti    
c001686a:	83 ec 0c             	sub    esp,0xc
c001686d:	55                   	push   ebp
c001686e:	e8 ae 51 ff ff       	call   c000ba21 <Virt::freeKernelVirtualPages(unsigned long)>
c0016873:	83 c4 10             	add    esp,0x10
c0016876:	b0 01                	mov    al,0x1
c0016878:	81 c4 2c 10 00 00    	add    esp,0x102c
c001687e:	5b                   	pop    ebx
c001687f:	5e                   	pop    esi
c0016880:	5f                   	pop    edi
c0016881:	5d                   	pop    ebp
c0016882:	c3                   	ret    

c0016883 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016883:	55                   	push   ebp
c0016884:	57                   	push   edi
c0016885:	56                   	push   esi
c0016886:	53                   	push   ebx
c0016887:	83 ec 48             	sub    esp,0x48
c001688a:	68 14 01 00 00       	push   0x114
c001688f:	e8 2f 31 ff ff       	call   c00099c3 <malloc>
c0016894:	83 c4 0c             	add    esp,0xc
c0016897:	89 c6                	mov    esi,eax
c0016899:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001689d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00168a1:	50                   	push   eax
c00168a2:	e8 87 67 ff ff       	call   c000d02e <File::File(char const*, Process*)>
c00168a7:	58                   	pop    eax
c00168a8:	5a                   	pop    edx
c00168a9:	6a 01                	push   0x1
c00168ab:	56                   	push   esi
c00168ac:	e8 e1 67 ff ff       	call   c000d092 <File::open(FileOpenMode)>
c00168b1:	83 c4 10             	add    esp,0x10
c00168b4:	85 c0                	test   eax,eax
c00168b6:	0f 85 47 01 00 00    	jne    c0016a03 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168bc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00168c4:	83 ec 0c             	sub    esp,0xc
c00168c7:	6a 34                	push   0x34
c00168c9:	e8 f5 30 ff ff       	call   c00099c3 <malloc>
c00168ce:	89 c3                	mov    ebx,eax
c00168d0:	58                   	pop    eax
c00168d1:	8b 06                	mov    eax,DWORD PTR [esi]
c00168d3:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00168d7:	57                   	push   edi
c00168d8:	53                   	push   ebx
c00168d9:	6a 00                	push   0x0
c00168db:	6a 34                	push   0x34
c00168dd:	56                   	push   esi
c00168de:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00168e1:	83 c4 20             	add    esp,0x20
c00168e4:	85 c0                	test   eax,eax
c00168e6:	0f 85 17 01 00 00    	jne    c0016a03 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168ec:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00168f2:	0f 85 0b 01 00 00    	jne    c0016a03 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168f8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00168fb:	85 c0                	test   eax,eax
c00168fd:	0f 84 00 01 00 00    	je     c0016a03 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016903:	31 d2                	xor    edx,edx
c0016905:	55                   	push   ebp
c0016906:	52                   	push   edx
c0016907:	50                   	push   eax
c0016908:	56                   	push   esi
c0016909:	e8 42 68 ff ff       	call   c000d150 <File::seek(unsigned long long)>
c001690e:	83 c4 10             	add    esp,0x10
c0016911:	85 c0                	test   eax,eax
c0016913:	0f 85 ea 00 00 00    	jne    c0016a03 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016919:	83 ec 0c             	sub    esp,0xc
c001691c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001691f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016923:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016927:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001692b:	0f af c2             	imul   eax,edx
c001692e:	50                   	push   eax
c001692f:	e8 8f 30 ff ff       	call   c00099c3 <malloc>
c0016934:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016936:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001693a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001693d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016941:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016945:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016949:	0f af c2             	imul   eax,edx
c001694c:	99                   	cdq    
c001694d:	52                   	push   edx
c001694e:	50                   	push   eax
c001694f:	56                   	push   esi
c0016950:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016953:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016956:	83 c4 20             	add    esp,0x20
c0016959:	85 c0                	test   eax,eax
c001695b:	0f 84 a2 00 00 00    	je     c0016a03 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016961:	31 d2                	xor    edx,edx
c0016963:	51                   	push   ecx
c0016964:	52                   	push   edx
c0016965:	50                   	push   eax
c0016966:	56                   	push   esi
c0016967:	e8 e4 67 ff ff       	call   c000d150 <File::seek(unsigned long long)>
c001696c:	83 c4 10             	add    esp,0x10
c001696f:	85 c0                	test   eax,eax
c0016971:	0f 85 8c 00 00 00    	jne    c0016a03 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016977:	83 ec 0c             	sub    esp,0xc
c001697a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001697e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016982:	31 ed                	xor    ebp,ebp
c0016984:	0f af c2             	imul   eax,edx
c0016987:	50                   	push   eax
c0016988:	e8 36 30 ff ff       	call   c00099c3 <malloc>
c001698d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001698f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016993:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001699a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001699e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00169a2:	0f af c2             	imul   eax,edx
c00169a5:	99                   	cdq    
c00169a6:	52                   	push   edx
c00169a7:	50                   	push   eax
c00169a8:	56                   	push   esi
c00169a9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00169ac:	83 c4 20             	add    esp,0x20
c00169af:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00169b7:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00169bb:	0f 86 80 00 00 00    	jbe    c0016a41 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00169c1:	0f b7 fd             	movzx  edi,bp
c00169c4:	c1 e7 05             	shl    edi,0x5
c00169c7:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00169cb:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00169ce:	75 6b                	jne    c0016a3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00169d0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00169d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00169d7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00169da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00169de:	52                   	push   edx
c00169df:	31 d2                	xor    edx,edx
c00169e1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00169e4:	52                   	push   edx
c00169e5:	50                   	push   eax
c00169e6:	56                   	push   esi
c00169e7:	e8 64 67 ff ff       	call   c000d150 <File::seek(unsigned long long)>
c00169ec:	83 c4 10             	add    esp,0x10
c00169ef:	85 c0                	test   eax,eax
c00169f1:	74 17                	je     c0016a0a <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00169f3:	83 ec 0c             	sub    esp,0xc
c00169f6:	68 ac 46 02 c0       	push   0xc00246ac
c00169fb:	e8 c3 60 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0016a00:	83 c4 10             	add    esp,0x10
c0016a03:	31 c0                	xor    eax,eax
c0016a05:	e9 87 00 00 00       	jmp    c0016a91 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016a0a:	83 ec 0c             	sub    esp,0xc
c0016a0d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016a10:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016a13:	50                   	push   eax
c0016a14:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016a18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a1c:	56                   	push   esi
c0016a1d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016a21:	e8 b3 fb ff ff       	call   c00165d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016a26:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016a2a:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016a2e:	83 c4 20             	add    esp,0x20
c0016a31:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016a35:	73 04                	jae    c0016a3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016a37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a3b:	45                   	inc    ebp
c0016a3c:	e9 76 ff ff ff       	jmp    c00169b7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016a41:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016a45:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016a49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a4d:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0016a53:	83 ec 0c             	sub    esp,0xc
c0016a56:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0016a5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016a61:	05 00 10 00 00       	add    eax,0x1000
c0016a66:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016a69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a6d:	e8 61 2f ff ff       	call   c00099d3 <free>
c0016a72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a75:	e8 59 2f ff ff       	call   c00099d3 <free>
c0016a7a:	58                   	pop    eax
c0016a7b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a7f:	e8 4f 2f ff ff       	call   c00099d3 <free>
c0016a84:	89 34 24             	mov    DWORD PTR [esp],esi
c0016a87:	e8 64 66 ff ff       	call   c000d0f0 <File::close()>
c0016a8c:	83 c4 10             	add    esp,0x10
c0016a8f:	b0 01                	mov    al,0x1
c0016a91:	83 c4 3c             	add    esp,0x3c
c0016a94:	5b                   	pop    ebx
c0016a95:	5e                   	pop    esi
c0016a96:	5f                   	pop    edi
c0016a97:	5d                   	pop    ebp
c0016a98:	c3                   	ret    

c0016a99 <Thr::runtimeReferenceHelper()>:
c0016a99:	83 ec 18             	sub    esp,0x18
c0016a9c:	68 b4 46 02 c0       	push   0xc00246b4
c0016aa1:	e8 1d 60 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0016aa6:	fa                   	cli    
c0016aa7:	83 c4 10             	add    esp,0x10
c0016aaa:	eb fe                	jmp    c0016aaa <Thr::runtimeReferenceHelper()+0x11>

c0016aac <Thr::getAddressOfKernelSymbol(char const*)>:
c0016aac:	57                   	push   edi
c0016aad:	56                   	push   esi
c0016aae:	53                   	push   ebx
c0016aaf:	31 db                	xor    ebx,ebx
c0016ab1:	39 1d 20 79 02 c0    	cmp    DWORD PTR ds:0xc0027920,ebx
c0016ab7:	7e 3c                	jle    c0016af5 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016ab9:	8b 34 9d a0 78 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd8760]
c0016ac0:	31 ff                	xor    edi,edi
c0016ac2:	39 3c 9d a0 77 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8860],edi
c0016ac9:	7e 27                	jle    c0016af2 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016acb:	50                   	push   eax
c0016acc:	50                   	push   eax
c0016acd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ad1:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ad3:	03 04 9d 20 78 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd87e0]
c0016ada:	50                   	push   eax
c0016adb:	e8 ec 9c fe ff       	call   c00007cc <strcmp>
c0016ae0:	83 c4 10             	add    esp,0x10
c0016ae3:	85 c0                	test   eax,eax
c0016ae5:	75 05                	jne    c0016aec <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016ae7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016aea:	eb 0b                	jmp    c0016af7 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016aec:	83 c6 10             	add    esi,0x10
c0016aef:	47                   	inc    edi
c0016af0:	eb d0                	jmp    c0016ac2 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016af2:	43                   	inc    ebx
c0016af3:	eb bc                	jmp    c0016ab1 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016af5:	31 c0                	xor    eax,eax
c0016af7:	5b                   	pop    ebx
c0016af8:	5e                   	pop    esi
c0016af9:	5f                   	pop    edi
c0016afa:	c3                   	ret    

c0016afb <Thr::loadKernelSymbolTable(char const*)>:
c0016afb:	55                   	push   ebp
c0016afc:	57                   	push   edi
c0016afd:	56                   	push   esi
c0016afe:	53                   	push   ebx
c0016aff:	83 ec 68             	sub    esp,0x68
c0016b02:	8b 35 70 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027970
c0016b08:	68 14 01 00 00       	push   0x114
c0016b0d:	e8 b1 2e ff ff       	call   c00099c3 <malloc>
c0016b12:	83 c4 0c             	add    esp,0xc
c0016b15:	89 c3                	mov    ebx,eax
c0016b17:	56                   	push   esi
c0016b18:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016b1c:	50                   	push   eax
c0016b1d:	e8 0c 65 ff ff       	call   c000d02e <File::File(char const*, Process*)>
c0016b22:	5e                   	pop    esi
c0016b23:	5f                   	pop    edi
c0016b24:	6a 01                	push   0x1
c0016b26:	53                   	push   ebx
c0016b27:	e8 66 65 ff ff       	call   c000d092 <File::open(FileOpenMode)>
c0016b2c:	83 c4 10             	add    esp,0x10
c0016b2f:	85 c0                	test   eax,eax
c0016b31:	74 0a                	je     c0016b3d <Thr::loadKernelSymbolTable(char const*)+0x42>
c0016b33:	83 ec 0c             	sub    esp,0xc
c0016b36:	68 d6 46 02 c0       	push   0xc00246d6
c0016b3b:	eb 34                	jmp    c0016b71 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0016b3d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016b45:	83 ec 0c             	sub    esp,0xc
c0016b48:	6a 34                	push   0x34
c0016b4a:	e8 74 2e ff ff       	call   c00099c3 <malloc>
c0016b4f:	59                   	pop    ecx
c0016b50:	89 c7                	mov    edi,eax
c0016b52:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016b56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b58:	56                   	push   esi
c0016b59:	57                   	push   edi
c0016b5a:	6a 00                	push   0x0
c0016b5c:	6a 34                	push   0x34
c0016b5e:	53                   	push   ebx
c0016b5f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b62:	83 c4 20             	add    esp,0x20
c0016b65:	85 c0                	test   eax,eax
c0016b67:	74 17                	je     c0016b80 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016b69:	83 ec 0c             	sub    esp,0xc
c0016b6c:	68 ed 46 02 c0       	push   0xc00246ed
c0016b71:	e8 0f d8 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0016b76:	83 c4 10             	add    esp,0x10
c0016b79:	31 c0                	xor    eax,eax
c0016b7b:	e9 31 02 00 00       	jmp    c0016db1 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0016b80:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016b86:	75 e1                	jne    c0016b69 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b88:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016b8b:	85 c0                	test   eax,eax
c0016b8d:	74 da                	je     c0016b69 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b8f:	52                   	push   edx
c0016b90:	31 d2                	xor    edx,edx
c0016b92:	52                   	push   edx
c0016b93:	50                   	push   eax
c0016b94:	53                   	push   ebx
c0016b95:	e8 b6 65 ff ff       	call   c000d150 <File::seek(unsigned long long)>
c0016b9a:	83 c4 10             	add    esp,0x10
c0016b9d:	85 c0                	test   eax,eax
c0016b9f:	75 c8                	jne    c0016b69 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016ba1:	83 ec 0c             	sub    esp,0xc
c0016ba4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016ba8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016bac:	31 ed                	xor    ebp,ebp
c0016bae:	0f af c2             	imul   eax,edx
c0016bb1:	50                   	push   eax
c0016bb2:	e8 0c 2e ff ff       	call   c00099c3 <malloc>
c0016bb7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016bb9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016bbd:	89 34 24             	mov    DWORD PTR [esp],esi
c0016bc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016bc4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016bc8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016bcc:	0f af c2             	imul   eax,edx
c0016bcf:	99                   	cdq    
c0016bd0:	52                   	push   edx
c0016bd1:	50                   	push   eax
c0016bd2:	53                   	push   ebx
c0016bd3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016bd6:	83 c4 20             	add    esp,0x20
c0016bd9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016be1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016be9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016bf1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016bf9:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016bfd:	0f 86 aa 00 00 00    	jbe    c0016cad <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0016c03:	0f b7 f5             	movzx  esi,bp
c0016c06:	6b f6 28             	imul   esi,esi,0x28
c0016c09:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016c0d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016c10:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c14:	50                   	push   eax
c0016c15:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c19:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016c1d:	8b 16                	mov    edx,DWORD PTR [esi]
c0016c1f:	6b c0 28             	imul   eax,eax,0x28
c0016c22:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016c26:	89 d0                	mov    eax,edx
c0016c28:	31 d2                	xor    edx,edx
c0016c2a:	52                   	push   edx
c0016c2b:	50                   	push   eax
c0016c2c:	53                   	push   ebx
c0016c2d:	e8 1e 65 ff ff       	call   c000d150 <File::seek(unsigned long long)>
c0016c32:	83 c4 0c             	add    esp,0xc
c0016c35:	6a 20                	push   0x20
c0016c37:	6a 00                	push   0x0
c0016c39:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016c3d:	52                   	push   edx
c0016c3e:	e8 41 9a fe ff       	call   c0000684 <memset>
c0016c43:	58                   	pop    eax
c0016c44:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c46:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016c4a:	51                   	push   ecx
c0016c4b:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016c4f:	52                   	push   edx
c0016c50:	6a 00                	push   0x0
c0016c52:	6a 1f                	push   0x1f
c0016c54:	53                   	push   ebx
c0016c55:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c58:	83 c4 18             	add    esp,0x18
c0016c5b:	68 04 47 02 c0       	push   0xc0024704
c0016c60:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016c64:	52                   	push   edx
c0016c65:	e8 62 9b fe ff       	call   c00007cc <strcmp>
c0016c6a:	83 c4 10             	add    esp,0x10
c0016c6d:	85 c0                	test   eax,eax
c0016c6f:	75 0f                	jne    c0016c80 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0016c71:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c80:	50                   	push   eax
c0016c81:	50                   	push   eax
c0016c82:	68 0c 47 02 c0       	push   0xc002470c
c0016c87:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016c8b:	50                   	push   eax
c0016c8c:	e8 3b 9b fe ff       	call   c00007cc <strcmp>
c0016c91:	83 c4 10             	add    esp,0x10
c0016c94:	85 c0                	test   eax,eax
c0016c96:	75 0f                	jne    c0016ca7 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0016c98:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016c9b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016ca3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ca7:	45                   	inc    ebp
c0016ca8:	e9 4c ff ff ff       	jmp    c0016bf9 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0016cad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016cb2:	75 10                	jne    c0016cc4 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0016cb4:	83 ec 0c             	sub    esp,0xc
c0016cb7:	68 14 47 02 c0       	push   0xc0024714
c0016cbc:	e8 c4 d6 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0016cc1:	83 c4 10             	add    esp,0x10
c0016cc4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0016cc9:	75 10                	jne    c0016cdb <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0016ccb:	83 ec 0c             	sub    esp,0xc
c0016cce:	68 14 47 02 c0       	push   0xc0024714
c0016cd3:	e8 ad d6 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0016cd8:	83 c4 10             	add    esp,0x10
c0016cdb:	31 d2                	xor    edx,edx
c0016cdd:	50                   	push   eax
c0016cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ce2:	52                   	push   edx
c0016ce3:	50                   	push   eax
c0016ce4:	53                   	push   ebx
c0016ce5:	e8 66 64 ff ff       	call   c000d150 <File::seek(unsigned long long)>
c0016cea:	5a                   	pop    edx
c0016ceb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016cef:	e8 cf 2c ff ff       	call   c00099c3 <malloc>
c0016cf4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016cf8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016cfc:	31 c9                	xor    ecx,ecx
c0016cfe:	5e                   	pop    esi
c0016cff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d01:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016d05:	55                   	push   ebp
c0016d06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d0a:	51                   	push   ecx
c0016d0b:	52                   	push   edx
c0016d0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016d10:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0016d14:	53                   	push   ebx
c0016d15:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d18:	83 c4 14             	add    esp,0x14
c0016d1b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016d1f:	e8 9f 2c ff ff       	call   c00099c3 <malloc>
c0016d24:	89 c6                	mov    esi,eax
c0016d26:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d28:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d2b:	56                   	push   esi
c0016d2c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016d30:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016d34:	51                   	push   ecx
c0016d35:	52                   	push   edx
c0016d36:	53                   	push   ebx
c0016d37:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d3a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016d3e:	8b 15 20 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027920
c0016d44:	83 c4 1c             	add    esp,0x1c
c0016d47:	c1 e8 04             	shr    eax,0x4
c0016d4a:	89 04 95 a0 77 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8860],eax
c0016d51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d55:	31 d2                	xor    edx,edx
c0016d57:	52                   	push   edx
c0016d58:	50                   	push   eax
c0016d59:	53                   	push   ebx
c0016d5a:	e8 f1 63 ff ff       	call   c000d150 <File::seek(unsigned long long)>
c0016d5f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016d61:	31 d2                	xor    edx,edx
c0016d63:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d66:	56                   	push   esi
c0016d67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016d6b:	52                   	push   edx
c0016d6c:	50                   	push   eax
c0016d6d:	53                   	push   ebx
c0016d6e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016d71:	83 c4 14             	add    esp,0x14
c0016d74:	53                   	push   ebx
c0016d75:	e8 76 63 ff ff       	call   c000d0f0 <File::close()>
c0016d7a:	5d                   	pop    ebp
c0016d7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016d7f:	e8 4f 2c ff ff       	call   c00099d3 <free>
c0016d84:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016d87:	e8 47 2c ff ff       	call   c00099d3 <free>
c0016d8c:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c0016d91:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016d95:	8d 50 01             	lea    edx,[eax+0x1]
c0016d98:	89 0c 85 a0 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8760],ecx
c0016d9f:	89 34 85 20 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87e0],esi
c0016da6:	89 15 20 79 02 c0    	mov    DWORD PTR ds:0xc0027920,edx
c0016dac:	83 c4 10             	add    esp,0x10
c0016daf:	b0 01                	mov    al,0x1
c0016db1:	83 c4 5c             	add    esp,0x5c
c0016db4:	5b                   	pop    ebx
c0016db5:	5e                   	pop    esi
c0016db6:	5f                   	pop    edi
c0016db7:	5d                   	pop    ebp
c0016db8:	c3                   	ret    

c0016db9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016db9:	55                   	push   ebp
c0016dba:	57                   	push   edi
c0016dbb:	56                   	push   esi
c0016dbc:	53                   	push   ebx
c0016dbd:	81 ec 68 03 00 00    	sub    esp,0x368
c0016dc3:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016dca:	8b 1d 70 79 02 c0    	mov    ebx,DWORD PTR ds:0xc0027970
c0016dd0:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016dd4:	68 14 01 00 00       	push   0x114
c0016dd9:	e8 e5 2b ff ff       	call   c00099c3 <malloc>
c0016dde:	83 c4 0c             	add    esp,0xc
c0016de1:	89 c5                	mov    ebp,eax
c0016de3:	53                   	push   ebx
c0016de4:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016deb:	50                   	push   eax
c0016dec:	e8 3d 62 ff ff       	call   c000d02e <File::File(char const*, Process*)>
c0016df1:	5e                   	pop    esi
c0016df2:	5f                   	pop    edi
c0016df3:	6a 01                	push   0x1
c0016df5:	55                   	push   ebp
c0016df6:	e8 97 62 ff ff       	call   c000d092 <File::open(FileOpenMode)>
c0016dfb:	83 c4 10             	add    esp,0x10
c0016dfe:	85 c0                	test   eax,eax
c0016e00:	0f 85 a7 06 00 00    	jne    c00174ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e06:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016e0e:	83 ec 0c             	sub    esp,0xc
c0016e11:	6a 34                	push   0x34
c0016e13:	e8 ab 2b ff ff       	call   c00099c3 <malloc>
c0016e18:	5b                   	pop    ebx
c0016e19:	89 c7                	mov    edi,eax
c0016e1b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016e1f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016e22:	53                   	push   ebx
c0016e23:	57                   	push   edi
c0016e24:	6a 00                	push   0x0
c0016e26:	6a 34                	push   0x34
c0016e28:	55                   	push   ebp
c0016e29:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e2c:	83 c4 20             	add    esp,0x20
c0016e2f:	85 c0                	test   eax,eax
c0016e31:	0f 85 76 06 00 00    	jne    c00174ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e37:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016e3d:	0f 85 6a 06 00 00    	jne    c00174ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e43:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016e46:	85 c0                	test   eax,eax
c0016e48:	0f 84 5f 06 00 00    	je     c00174ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e4e:	31 d2                	xor    edx,edx
c0016e50:	51                   	push   ecx
c0016e51:	52                   	push   edx
c0016e52:	50                   	push   eax
c0016e53:	55                   	push   ebp
c0016e54:	e8 f7 62 ff ff       	call   c000d150 <File::seek(unsigned long long)>
c0016e59:	83 c4 10             	add    esp,0x10
c0016e5c:	85 c0                	test   eax,eax
c0016e5e:	0f 85 49 06 00 00    	jne    c00174ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e64:	83 ec 0c             	sub    esp,0xc
c0016e67:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016e6a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016e6e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016e72:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016e76:	0f af c2             	imul   eax,edx
c0016e79:	50                   	push   eax
c0016e7a:	e8 44 2b ff ff       	call   c00099c3 <malloc>
c0016e7f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016e82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016e86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e8d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016e91:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016e95:	0f af c2             	imul   eax,edx
c0016e98:	99                   	cdq    
c0016e99:	52                   	push   edx
c0016e9a:	50                   	push   eax
c0016e9b:	55                   	push   ebp
c0016e9c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e9f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016ea2:	83 c4 20             	add    esp,0x20
c0016ea5:	85 c0                	test   eax,eax
c0016ea7:	0f 84 00 06 00 00    	je     c00174ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016ead:	52                   	push   edx
c0016eae:	31 d2                	xor    edx,edx
c0016eb0:	52                   	push   edx
c0016eb1:	50                   	push   eax
c0016eb2:	55                   	push   ebp
c0016eb3:	e8 98 62 ff ff       	call   c000d150 <File::seek(unsigned long long)>
c0016eb8:	83 c4 10             	add    esp,0x10
c0016ebb:	85 c0                	test   eax,eax
c0016ebd:	0f 85 ea 05 00 00    	jne    c00174ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016ec3:	83 ec 0c             	sub    esp,0xc
c0016ec6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016eca:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016ece:	31 f6                	xor    esi,esi
c0016ed0:	0f af c2             	imul   eax,edx
c0016ed3:	50                   	push   eax
c0016ed4:	e8 ea 2a ff ff       	call   c00099c3 <malloc>
c0016ed9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016edc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016ee0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ee3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016ee7:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016eeb:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016eef:	0f af c2             	imul   eax,edx
c0016ef2:	99                   	cdq    
c0016ef3:	52                   	push   edx
c0016ef4:	50                   	push   eax
c0016ef5:	55                   	push   ebp
c0016ef6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ef9:	83 c4 20             	add    esp,0x20
c0016efc:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016f00:	0f 86 8a 00 00 00    	jbe    c0016f90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016f06:	0f b7 de             	movzx  ebx,si
c0016f09:	c1 e3 05             	shl    ebx,0x5
c0016f0c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0016f10:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016f13:	75 75                	jne    c0016f8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016f15:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f18:	31 d2                	xor    edx,edx
c0016f1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f1e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f25:	50                   	push   eax
c0016f26:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016f29:	52                   	push   edx
c0016f2a:	50                   	push   eax
c0016f2b:	55                   	push   ebp
c0016f2c:	e8 1f 62 ff ff       	call   c000d150 <File::seek(unsigned long long)>
c0016f31:	83 c4 10             	add    esp,0x10
c0016f34:	85 c0                	test   eax,eax
c0016f36:	0f 85 71 05 00 00    	jne    c00174ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016f3c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016f43:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f46:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016f4a:	31 d2                	xor    edx,edx
c0016f4c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016f50:	83 ec 0c             	sub    esp,0xc
c0016f53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016f57:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016f5e:	50                   	push   eax
c0016f5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016f63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f67:	52                   	push   edx
c0016f68:	50                   	push   eax
c0016f69:	55                   	push   ebp
c0016f6a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f6d:	83 c4 1c             	add    esp,0x1c
c0016f70:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016f73:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016f76:	50                   	push   eax
c0016f77:	6a 00                	push   0x0
c0016f79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f7d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0016f81:	50                   	push   eax
c0016f82:	e8 fd 96 fe ff       	call   c0000684 <memset>
c0016f87:	83 c4 10             	add    esp,0x10
c0016f8a:	46                   	inc    esi
c0016f8b:	e9 6c ff ff ff       	jmp    c0016efc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016f90:	53                   	push   ebx
c0016f91:	31 db                	xor    ebx,ebx
c0016f93:	68 00 01 00 00       	push   0x100
c0016f98:	6a 00                	push   0x0
c0016f9a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016f9e:	50                   	push   eax
c0016f9f:	e8 e0 96 fe ff       	call   c0000684 <memset>
c0016fa4:	83 c4 0c             	add    esp,0xc
c0016fa7:	68 00 01 00 00       	push   0x100
c0016fac:	6a 00                	push   0x0
c0016fae:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0016fb5:	50                   	push   eax
c0016fb6:	e8 c9 96 fe ff       	call   c0000684 <memset>
c0016fbb:	83 c4 10             	add    esp,0x10
c0016fbe:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016fc6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016fce:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0016fd6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016fde:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016fe6:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0016fea:	0f 86 30 01 00 00    	jbe    c0017120 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0016ff0:	0f b7 f3             	movzx  esi,bx
c0016ff3:	6b f6 28             	imul   esi,esi,0x28
c0016ff6:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016ffa:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016ffd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017001:	52                   	push   edx
c0017002:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017006:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001700a:	8b 06                	mov    eax,DWORD PTR [esi]
c001700c:	6b d2 28             	imul   edx,edx,0x28
c001700f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017013:	31 d2                	xor    edx,edx
c0017015:	52                   	push   edx
c0017016:	50                   	push   eax
c0017017:	55                   	push   ebp
c0017018:	e8 33 61 ff ff       	call   c000d150 <File::seek(unsigned long long)>
c001701d:	83 c4 0c             	add    esp,0xc
c0017020:	6a 20                	push   0x20
c0017022:	6a 00                	push   0x0
c0017024:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001702b:	51                   	push   ecx
c001702c:	e8 53 96 fe ff       	call   c0000684 <memset>
c0017031:	59                   	pop    ecx
c0017032:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017035:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017039:	52                   	push   edx
c001703a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017041:	51                   	push   ecx
c0017042:	6a 00                	push   0x0
c0017044:	6a 1f                	push   0x1f
c0017046:	55                   	push   ebp
c0017047:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001704a:	83 c4 1c             	add    esp,0x1c
c001704d:	6a 09                	push   0x9
c001704f:	68 2e 47 02 c0       	push   0xc002472e
c0017054:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001705b:	51                   	push   ecx
c001705c:	e8 1f 95 fe ff       	call   c0000580 <memcmp>
c0017061:	83 c4 10             	add    esp,0x10
c0017064:	85 c0                	test   eax,eax
c0017066:	75 21                	jne    c0017089 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001706c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017070:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017074:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017078:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001707b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017082:	89 d0                	mov    eax,edx
c0017084:	40                   	inc    eax
c0017085:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017089:	50                   	push   eax
c001708a:	6a 09                	push   0x9
c001708c:	68 38 47 02 c0       	push   0xc0024738
c0017091:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017098:	50                   	push   eax
c0017099:	e8 e2 94 fe ff       	call   c0000580 <memcmp>
c001709e:	83 c4 10             	add    esp,0x10
c00170a1:	85 c0                	test   eax,eax
c00170a3:	75 21                	jne    c00170c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00170a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00170ad:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00170b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00170b5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00170b8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00170bf:	89 d0                	mov    eax,edx
c00170c1:	40                   	inc    eax
c00170c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00170c6:	50                   	push   eax
c00170c7:	50                   	push   eax
c00170c8:	68 04 47 02 c0       	push   0xc0024704
c00170cd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00170d4:	50                   	push   eax
c00170d5:	e8 f2 96 fe ff       	call   c00007cc <strcmp>
c00170da:	83 c4 10             	add    esp,0x10
c00170dd:	85 c0                	test   eax,eax
c00170df:	75 0f                	jne    c00170f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00170e1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00170e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00170e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00170f0:	50                   	push   eax
c00170f1:	50                   	push   eax
c00170f2:	68 0c 47 02 c0       	push   0xc002470c
c00170f7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00170fe:	50                   	push   eax
c00170ff:	e8 c8 96 fe ff       	call   c00007cc <strcmp>
c0017104:	83 c4 10             	add    esp,0x10
c0017107:	85 c0                	test   eax,eax
c0017109:	75 0f                	jne    c001711a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001710b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001710e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017112:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017116:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001711a:	43                   	inc    ebx
c001711b:	e9 c6 fe ff ff       	jmp    c0016fe6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0017120:	31 d2                	xor    edx,edx
c0017122:	50                   	push   eax
c0017123:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017127:	52                   	push   edx
c0017128:	50                   	push   eax
c0017129:	55                   	push   ebp
c001712a:	e8 21 60 ff ff       	call   c000d150 <File::seek(unsigned long long)>
c001712f:	58                   	pop    eax
c0017130:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017134:	e8 8a 28 ff ff       	call   c00099c3 <malloc>
c0017139:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001713c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017140:	31 d2                	xor    edx,edx
c0017142:	58                   	pop    eax
c0017143:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017147:	53                   	push   ebx
c0017148:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001714c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017150:	52                   	push   edx
c0017151:	50                   	push   eax
c0017152:	55                   	push   ebp
c0017153:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017156:	83 c4 14             	add    esp,0x14
c0017159:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001715d:	e8 61 28 ff ff       	call   c00099c3 <malloc>
c0017162:	31 d2                	xor    edx,edx
c0017164:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017168:	83 c4 0c             	add    esp,0xc
c001716b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001716f:	52                   	push   edx
c0017170:	50                   	push   eax
c0017171:	55                   	push   ebp
c0017172:	e8 d9 5f ff ff       	call   c000d150 <File::seek(unsigned long long)>
c0017177:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001717a:	31 d2                	xor    edx,edx
c001717c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001717f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017183:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017187:	52                   	push   edx
c0017188:	50                   	push   eax
c0017189:	55                   	push   ebp
c001718a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001718d:	83 c4 20             	add    esp,0x20
c0017190:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017198:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001719c:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00171a0:	0f 84 0b 03 00 00    	je     c00174b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00171a6:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00171ad:	31 d2                	xor    edx,edx
c00171af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171b3:	c1 e8 03             	shr    eax,0x3
c00171b6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00171ba:	51                   	push   ecx
c00171bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171bf:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00171c3:	52                   	push   edx
c00171c4:	50                   	push   eax
c00171c5:	55                   	push   ebp
c00171c6:	e8 85 5f ff ff       	call   c000d150 <File::seek(unsigned long long)>
c00171cb:	5b                   	pop    ebx
c00171cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171d0:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00171d7:	e8 e7 27 ff ff       	call   c00099c3 <malloc>
c00171dc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00171df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171e3:	31 d2                	xor    edx,edx
c00171e5:	5e                   	pop    esi
c00171e6:	8d 44 24 58          	lea    eax,[esp+0x58]
c00171ea:	50                   	push   eax
c00171eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00171f3:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00171fa:	52                   	push   edx
c00171fb:	50                   	push   eax
c00171fc:	55                   	push   ebp
c00171fd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017200:	83 c4 20             	add    esp,0x20
c0017203:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001720b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001720f:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0017213:	0f 8d 7c 02 00 00    	jge    c0017495 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0017219:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001721d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017221:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0017226:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0017229:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001722d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017231:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0017235:	89 d8                	mov    eax,ebx
c0017237:	c1 e8 08             	shr    eax,0x8
c001723a:	89 c6                	mov    esi,eax
c001723c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017240:	c1 e6 04             	shl    esi,0x4
c0017243:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0017247:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001724a:	85 d2                	test   edx,edx
c001724c:	0f 85 bf 00 00 00    	jne    c0017311 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017252:	83 ec 0c             	sub    esp,0xc
c0017255:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017259:	03 06                	add    eax,DWORD PTR [esi]
c001725b:	50                   	push   eax
c001725c:	e8 4b f8 ff ff       	call   c0016aac <Thr::getAddressOfKernelSymbol(char const*)>
c0017261:	83 c4 10             	add    esp,0x10
c0017264:	89 c2                	mov    edx,eax
c0017266:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001726b:	85 c0                	test   eax,eax
c001726d:	0f 85 9e 00 00 00    	jne    c0017311 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017273:	83 ec 0c             	sub    esp,0xc
c0017276:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001727a:	03 06                	add    eax,DWORD PTR [esi]
c001727c:	50                   	push   eax
c001727d:	e8 8e 16 ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c0017282:	83 c4 10             	add    esp,0x10
c0017285:	89 c2                	mov    edx,eax
c0017287:	85 c0                	test   eax,eax
c0017289:	0f 85 82 00 00 00    	jne    c0017311 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001728f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017293:	50                   	push   eax
c0017294:	50                   	push   eax
c0017295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017299:	03 06                	add    eax,DWORD PTR [esi]
c001729b:	50                   	push   eax
c001729c:	68 42 47 02 c0       	push   0xc0024742
c00172a1:	e8 1d 58 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c00172a6:	58                   	pop    eax
c00172a7:	5a                   	pop    edx
c00172a8:	68 5c 47 02 c0       	push   0xc002475c
c00172ad:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00172b4:	50                   	push   eax
c00172b5:	e8 86 94 fe ff       	call   c0000740 <strcpy>
c00172ba:	59                   	pop    ecx
c00172bb:	58                   	pop    eax
c00172bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172c0:	03 06                	add    eax,DWORD PTR [esi]
c00172c2:	50                   	push   eax
c00172c3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00172ca:	50                   	push   eax
c00172cb:	e8 b0 95 fe ff       	call   c0000880 <strcat>
c00172d0:	58                   	pop    eax
c00172d1:	5a                   	pop    edx
c00172d2:	68 f2 47 02 c0       	push   0xc00247f2
c00172d7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00172de:	50                   	push   eax
c00172df:	e8 9c 95 fe ff       	call   c0000880 <strcat>
c00172e4:	83 c4 10             	add    esp,0x10
c00172e7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00172ec:	0f 84 5d 01 00 00    	je     c001744f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00172f2:	83 ec 0c             	sub    esp,0xc
c00172f5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00172fc:	50                   	push   eax
c00172fd:	e8 83 d0 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0017302:	83 c4 10             	add    esp,0x10
c0017305:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017309:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001730d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017311:	80 fb 01             	cmp    bl,0x1
c0017314:	0f 85 88 00 00 00    	jne    c00173a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001731a:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017321:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017325:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0017329:	01 ce                	add    esi,ecx
c001732b:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017331:	0f 94 c0             	sete   al
c0017334:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001733a:	0f 94 c3             	sete   bl
c001733d:	09 c3                	or     ebx,eax
c001733f:	8b 06                	mov    eax,DWORD PTR [esi]
c0017341:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017346:	74 41                	je     c0017389 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0017348:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001734b:	84 db                	test   bl,bl
c001734d:	75 15                	jne    c0017364 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001734f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017353:	66 83 f8 0c          	cmp    ax,0xc
c0017357:	76 05                	jbe    c001735e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0017359:	b8 0c 00 00 00       	mov    eax,0xc
c001735e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017362:	76 37                	jbe    c001739b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017364:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0017368:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001736d:	0f 84 dc 00 00 00    	je     c001744f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017373:	83 ec 0c             	sub    esp,0xc
c0017376:	68 73 47 02 c0       	push   0xc0024773
c001737b:	e8 05 d0 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0017380:	83 c4 10             	add    esp,0x10
c0017383:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0017387:	eb 12                	jmp    c001739b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017389:	01 c1                	add    ecx,eax
c001738b:	84 db                	test   bl,bl
c001738d:	75 0c                	jne    c001739b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001738f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017393:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017397:	77 02                	ja     c001739b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017399:	01 d1                	add    ecx,edx
c001739b:	89 0e                	mov    DWORD PTR [esi],ecx
c001739d:	e9 ea 00 00 00       	jmp    c001748c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00173a2:	80 fb 02             	cmp    bl,0x2
c00173a5:	75 7c                	jne    c0017423 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00173a7:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00173ae:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c00173b2:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c00173b6:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00173bc:	74 20                	je     c00173de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00173be:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00173c4:	74 18                	je     c00173de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00173c6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00173ca:	b9 0a 00 00 00       	mov    ecx,0xa
c00173cf:	66 83 f8 0e          	cmp    ax,0xe
c00173d3:	77 03                	ja     c00173d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c00173d5:	8d 48 fc             	lea    ecx,[eax-0x4]
c00173d8:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c00173dc:	76 1f                	jbe    c00173fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c00173de:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00173e2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00173e7:	74 66                	je     c001744f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00173e9:	83 ec 0c             	sub    esp,0xc
c00173ec:	68 8f 47 02 c0       	push   0xc002478f
c00173f1:	e8 8f cf ff ff       	call   c0014385 <Krnl::panic(char const*)>
c00173f6:	83 c4 10             	add    esp,0x10
c00173f9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00173fd:	8b 06                	mov    eax,DWORD PTR [esi]
c00173ff:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017404:	74 13                	je     c0017419 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0017406:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001740a:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0017411:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017415:	01 c8                	add    eax,ecx
c0017417:	eb 04                	jmp    c001741d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0017419:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001741d:	01 c2                	add    edx,eax
c001741f:	89 16                	mov    DWORD PTR [esi],edx
c0017421:	eb 69                	jmp    c001748c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017423:	0f b6 db             	movzx  ebx,bl
c0017426:	50                   	push   eax
c0017427:	50                   	push   eax
c0017428:	53                   	push   ebx
c0017429:	68 ab 47 02 c0       	push   0xc00247ab
c001742e:	e8 90 56 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0017433:	83 c4 10             	add    esp,0x10
c0017436:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001743b:	74 12                	je     c001744f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001743d:	83 ec 0c             	sub    esp,0xc
c0017440:	68 b6 47 02 c0       	push   0xc00247b6
c0017445:	e8 3b cf ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001744a:	83 c4 10             	add    esp,0x10
c001744d:	eb 3d                	jmp    c001748c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001744f:	83 ec 0c             	sub    esp,0xc
c0017452:	55                   	push   ebp
c0017453:	e8 98 5c ff ff       	call   c000d0f0 <File::close()>
c0017458:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001745b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001745e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017461:	59                   	pop    ecx
c0017462:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017466:	e8 68 25 ff ff       	call   c00099d3 <free>
c001746b:	5b                   	pop    ebx
c001746c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017470:	e8 5e 25 ff ff       	call   c00099d3 <free>
c0017475:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017478:	e8 56 25 ff ff       	call   c00099d3 <free>
c001747d:	5e                   	pop    esi
c001747e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017482:	e8 4c 25 ff ff       	call   c00099d3 <free>
c0017487:	83 c4 10             	add    esp,0x10
c001748a:	eb 21                	jmp    c00174ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001748c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0017490:	e9 76 fd ff ff       	jmp    c001720b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0017495:	83 ec 0c             	sub    esp,0xc
c0017498:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001749c:	e8 32 25 ff ff       	call   c00099d3 <free>
c00174a1:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00174a5:	83 c4 10             	add    esp,0x10
c00174a8:	e9 eb fc ff ff       	jmp    c0017198 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00174ad:	31 c0                	xor    eax,eax
c00174af:	eb 33                	jmp    c00174e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c00174b1:	83 ec 0c             	sub    esp,0xc
c00174b4:	55                   	push   ebp
c00174b5:	e8 36 5c ff ff       	call   c000d0f0 <File::close()>
c00174ba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00174bd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00174c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00174c3:	58                   	pop    eax
c00174c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174c8:	e8 06 25 ff ff       	call   c00099d3 <free>
c00174cd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00174d0:	e8 fe 24 ff ff       	call   c00099d3 <free>
c00174d5:	5a                   	pop    edx
c00174d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174da:	e8 f4 24 ff ff       	call   c00099d3 <free>
c00174df:	83 c4 10             	add    esp,0x10
c00174e2:	b0 01                	mov    al,0x1
c00174e4:	81 c4 5c 03 00 00    	add    esp,0x35c
c00174ea:	5b                   	pop    ebx
c00174eb:	5e                   	pop    esi
c00174ec:	5f                   	pop    edi
c00174ed:	5d                   	pop    ebp
c00174ee:	c3                   	ret    

c00174ef <Thr::getDriverBaseFromAddress(unsigned long)>:
c00174ef:	56                   	push   esi
c00174f0:	31 d2                	xor    edx,edx
c00174f2:	53                   	push   ebx
c00174f3:	8b 1d 80 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027180
c00174f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174fd:	39 d3                	cmp    ebx,edx
c00174ff:	7e 1b                	jle    c001751c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017501:	8b 04 95 a0 73 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8c60]
c0017508:	39 c8                	cmp    eax,ecx
c001750a:	77 0d                	ja     c0017519 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001750c:	8b 34 95 a0 71 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8e60]
c0017513:	01 c6                	add    esi,eax
c0017515:	39 ce                	cmp    esi,ecx
c0017517:	77 05                	ja     c001751e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017519:	42                   	inc    edx
c001751a:	eb e1                	jmp    c00174fd <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001751c:	31 c0                	xor    eax,eax
c001751e:	5b                   	pop    ebx
c001751f:	5e                   	pop    esi
c0017520:	c3                   	ret    

c0017521 <Thr::getDriverNameFromAddress(unsigned long)>:
c0017521:	53                   	push   ebx
c0017522:	31 c0                	xor    eax,eax
c0017524:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017528:	8b 1d 80 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027180
c001752e:	39 c3                	cmp    ebx,eax
c0017530:	7e 22                	jle    c0017554 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017532:	8b 14 85 a0 73 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8c60]
c0017539:	39 ca                	cmp    edx,ecx
c001753b:	77 14                	ja     c0017551 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001753d:	03 14 85 a0 71 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8e60]
c0017544:	39 ca                	cmp    edx,ecx
c0017546:	76 09                	jbe    c0017551 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017548:	8b 04 85 a0 75 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8a60]
c001754f:	eb 05                	jmp    c0017556 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017551:	40                   	inc    eax
c0017552:	eb da                	jmp    c001752e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017554:	31 c0                	xor    eax,eax
c0017556:	5b                   	pop    ebx
c0017557:	c3                   	ret    

c0017558 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017558:	53                   	push   ebx
c0017559:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001755d:	53                   	push   ebx
c001755e:	e8 8c ff ff ff       	call   c00174ef <Thr::getDriverBaseFromAddress(unsigned long)>
c0017563:	5a                   	pop    edx
c0017564:	31 d2                	xor    edx,edx
c0017566:	85 c0                	test   eax,eax
c0017568:	74 04                	je     c001756e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001756a:	89 da                	mov    edx,ebx
c001756c:	29 c2                	sub    edx,eax
c001756e:	89 d0                	mov    eax,edx
c0017570:	5b                   	pop    ebx
c0017571:	c3                   	ret    

c0017572 <Thr::loadDLL(char const*, bool)>:
c0017572:	55                   	push   ebp
c0017573:	57                   	push   edi
c0017574:	56                   	push   esi
c0017575:	53                   	push   ebx
c0017576:	81 ec 34 01 00 00    	sub    esp,0x134
c001757c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017583:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001758a:	56                   	push   esi
c001758b:	68 ce 47 02 c0       	push   0xc00247ce
c0017590:	e8 2e 55 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0017595:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001759c:	e8 22 24 ff ff       	call   c00099c3 <malloc>
c00175a1:	83 c4 0c             	add    esp,0xc
c00175a4:	89 c3                	mov    ebx,eax
c00175a6:	ff 35 70 79 02 c0    	push   DWORD PTR ds:0xc0027970
c00175ac:	56                   	push   esi
c00175ad:	50                   	push   eax
c00175ae:	e8 7b 5a ff ff       	call   c000d02e <File::File(char const*, Process*)>
c00175b3:	83 c4 10             	add    esp,0x10
c00175b6:	85 db                	test   ebx,ebx
c00175b8:	75 3c                	jne    c00175f6 <Thr::loadDLL(char const*, bool)+0x84>
c00175ba:	89 f8                	mov    eax,edi
c00175bc:	84 c0                	test   al,al
c00175be:	0f 84 d2 01 00 00    	je     c0017796 <Thr::loadDLL(char const*, bool)+0x224>
c00175c4:	55                   	push   ebp
c00175c5:	55                   	push   ebp
c00175c6:	68 df 47 02 c0       	push   0xc00247df
c00175cb:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00175cf:	55                   	push   ebp
c00175d0:	e8 6b 91 fe ff       	call   c0000740 <strcpy>
c00175d5:	58                   	pop    eax
c00175d6:	5a                   	pop    edx
c00175d7:	56                   	push   esi
c00175d8:	55                   	push   ebp
c00175d9:	e8 a2 92 fe ff       	call   c0000880 <strcat>
c00175de:	59                   	pop    ecx
c00175df:	58                   	pop    eax
c00175e0:	68 f2 47 02 c0       	push   0xc00247f2
c00175e5:	55                   	push   ebp
c00175e6:	e8 95 92 fe ff       	call   c0000880 <strcat>
c00175eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00175ee:	e8 92 cd ff ff       	call   c0014385 <Krnl::panic(char const*)>
c00175f3:	83 c4 10             	add    esp,0x10
c00175f6:	51                   	push   ecx
c00175f7:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00175fb:	50                   	push   eax
c00175fc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017600:	50                   	push   eax
c0017601:	53                   	push   ebx
c0017602:	e8 37 5d ff ff       	call   c000d33e <File::stat(unsigned long long*, bool*)>
c0017607:	83 c4 10             	add    esp,0x10
c001760a:	85 db                	test   ebx,ebx
c001760c:	74 0c                	je     c001761a <Thr::loadDLL(char const*, bool)+0xa8>
c001760e:	83 ec 0c             	sub    esp,0xc
c0017611:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017613:	53                   	push   ebx
c0017614:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017617:	83 c4 10             	add    esp,0x10
c001761a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001761f:	75 0a                	jne    c001762b <Thr::loadDLL(char const*, bool)+0xb9>
c0017621:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017625:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017629:	75 3c                	jne    c0017667 <Thr::loadDLL(char const*, bool)+0xf5>
c001762b:	89 f8                	mov    eax,edi
c001762d:	84 c0                	test   al,al
c001762f:	0f 84 49 01 00 00    	je     c001777e <Thr::loadDLL(char const*, bool)+0x20c>
c0017635:	51                   	push   ecx
c0017636:	51                   	push   ecx
c0017637:	68 df 47 02 c0       	push   0xc00247df
c001763c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017640:	53                   	push   ebx
c0017641:	e8 fa 90 fe ff       	call   c0000740 <strcpy>
c0017646:	5d                   	pop    ebp
c0017647:	58                   	pop    eax
c0017648:	56                   	push   esi
c0017649:	53                   	push   ebx
c001764a:	e8 31 92 fe ff       	call   c0000880 <strcat>
c001764f:	58                   	pop    eax
c0017650:	5a                   	pop    edx
c0017651:	68 f2 47 02 c0       	push   0xc00247f2
c0017656:	53                   	push   ebx
c0017657:	e8 24 92 fe ff       	call   c0000880 <strcat>
c001765c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001765f:	e8 21 cd ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0017664:	83 c4 10             	add    esp,0x10
c0017667:	52                   	push   edx
c0017668:	6a 03                	push   0x3
c001766a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001766e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017672:	05 ff 0f 00 00       	add    eax,0xfff
c0017677:	83 d2 00             	adc    edx,0x0
c001767a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001767e:	50                   	push   eax
c001767f:	ff 35 b0 65 02 c0    	push   DWORD PTR ds:0xc00265b0
c0017685:	e8 10 48 ff ff       	call   c000be9a <VAS::allocatePages(int, int)>
c001768a:	59                   	pop    ecx
c001768b:	89 c3                	mov    ebx,eax
c001768d:	5d                   	pop    ebp
c001768e:	50                   	push   eax
c001768f:	68 3a 29 02 c0       	push   0xc002293a
c0017694:	e8 2a 54 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0017699:	89 34 24             	mov    DWORD PTR [esp],esi
c001769c:	e8 ff 8f fe ff       	call   c00006a0 <strlen>
c00176a1:	8b 2d 80 71 02 c0    	mov    ebp,DWORD PTR ds:0xc0027180
c00176a7:	40                   	inc    eax
c00176a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00176ab:	e8 13 23 ff ff       	call   c00099c3 <malloc>
c00176b0:	89 04 ad a0 75 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8a60],eax
c00176b7:	58                   	pop    eax
c00176b8:	a1 80 71 02 c0       	mov    eax,ds:0xc0027180
c00176bd:	5a                   	pop    edx
c00176be:	56                   	push   esi
c00176bf:	ff 34 85 a0 75 02 c0 	push   DWORD PTR [eax*4-0x3ffd8a60]
c00176c6:	e8 75 90 fe ff       	call   c0000740 <strcpy>
c00176cb:	a1 80 71 02 c0       	mov    eax,ds:0xc0027180
c00176d0:	8d 50 01             	lea    edx,[eax+0x1]
c00176d3:	89 1c 85 a0 73 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8c60],ebx
c00176da:	89 15 80 71 02 c0    	mov    DWORD PTR ds:0xc0027180,edx
c00176e0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176e4:	83 c4 0c             	add    esp,0xc
c00176e7:	89 14 85 a0 71 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8e60],edx
c00176ee:	6a 01                	push   0x1
c00176f0:	53                   	push   ebx
c00176f1:	56                   	push   esi
c00176f2:	e8 c2 f6 ff ff       	call   c0016db9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00176f7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00176fb:	83 c4 10             	add    esp,0x10
c00176fe:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017703:	0f 85 89 00 00 00    	jne    c0017792 <Thr::loadDLL(char const*, bool)+0x220>
c0017709:	89 f8                	mov    eax,edi
c001770b:	84 c0                	test   al,al
c001770d:	74 73                	je     c0017782 <Thr::loadDLL(char const*, bool)+0x210>
c001770f:	83 ec 0c             	sub    esp,0xc
c0017712:	68 f4 47 02 c0       	push   0xc00247f4
c0017717:	e8 69 cc ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001771c:	83 c4 10             	add    esp,0x10
c001771f:	eb 61                	jmp    c0017782 <Thr::loadDLL(char const*, bool)+0x210>
c0017721:	50                   	push   eax
c0017722:	50                   	push   eax
c0017723:	89 e8                	mov    eax,ebp
c0017725:	c1 e0 0c             	shl    eax,0xc
c0017728:	01 d8                	add    eax,ebx
c001772a:	50                   	push   eax
c001772b:	ff 35 b0 65 02 c0    	push   DWORD PTR ds:0xc00265b0
c0017731:	e8 cc 42 ff ff       	call   c000ba02 <VAS::getPageTableEntry(unsigned long)>
c0017736:	83 c4 10             	add    esp,0x10
c0017739:	8b 00                	mov    eax,DWORD PTR [eax]
c001773b:	a8 60                	test   al,0x60
c001773d:	75 11                	jne    c0017750 <Thr::loadDLL(char const*, bool)+0x1de>
c001773f:	83 ec 0c             	sub    esp,0xc
c0017742:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017747:	50                   	push   eax
c0017748:	e8 0d 26 ff ff       	call   c0009d5a <Phys::freePage(unsigned long)>
c001774d:	83 c4 10             	add    esp,0x10
c0017750:	45                   	inc    ebp
c0017751:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017755:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017759:	05 ff 0f 00 00       	add    eax,0xfff
c001775e:	bf 00 00 00 00       	mov    edi,0x0
c0017763:	83 d2 00             	adc    edx,0x0
c0017766:	0f ac d0 0c          	shrd   eax,edx,0xc
c001776a:	c1 ea 0c             	shr    edx,0xc
c001776d:	39 c5                	cmp    ebp,eax
c001776f:	89 d1                	mov    ecx,edx
c0017771:	89 f8                	mov    eax,edi
c0017773:	19 c8                	sbb    eax,ecx
c0017775:	72 aa                	jb     c0017721 <Thr::loadDLL(char const*, bool)+0x1af>
c0017777:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001777c:	75 18                	jne    c0017796 <Thr::loadDLL(char const*, bool)+0x224>
c001777e:	31 db                	xor    ebx,ebx
c0017780:	eb 14                	jmp    c0017796 <Thr::loadDLL(char const*, bool)+0x224>
c0017782:	83 ec 0c             	sub    esp,0xc
c0017785:	68 13 48 02 c0       	push   0xc0024813
c001778a:	e8 f6 cb ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001778f:	83 c4 10             	add    esp,0x10
c0017792:	31 ed                	xor    ebp,ebp
c0017794:	eb bb                	jmp    c0017751 <Thr::loadDLL(char const*, bool)+0x1df>
c0017796:	81 c4 2c 01 00 00    	add    esp,0x12c
c001779c:	89 d8                	mov    eax,ebx
c001779e:	5b                   	pop    ebx
c001779f:	5e                   	pop    esi
c00177a0:	5f                   	pop    edi
c00177a1:	5d                   	pop    ebp
c00177a2:	c3                   	ret    

c00177a3 <Thr::executeDLL(unsigned long, void*)>:
c00177a3:	56                   	push   esi
c00177a4:	53                   	push   ebx
c00177a5:	52                   	push   edx
c00177a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00177aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00177ae:	85 db                	test   ebx,ebx
c00177b0:	75 10                	jne    c00177c2 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00177b2:	83 ec 0c             	sub    esp,0xc
c00177b5:	68 2f 48 02 c0       	push   0xc002482f
c00177ba:	e8 c6 cb ff ff       	call   c0014385 <Krnl::panic(char const*)>
c00177bf:	83 c4 10             	add    esp,0x10
c00177c2:	50                   	push   eax
c00177c3:	50                   	push   eax
c00177c4:	53                   	push   ebx
c00177c5:	68 59 48 02 c0       	push   0xc0024859
c00177ca:	e8 f4 52 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c00177cf:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00177d3:	89 d8                	mov    eax,ebx
c00177d5:	83 c4 14             	add    esp,0x14
c00177d8:	5b                   	pop    ebx
c00177d9:	5e                   	pop    esi
c00177da:	ff e0                	jmp    eax

c00177dc <userModeEntryPoint(void*)>:
c00177dc:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00177e1:	48                   	dec    eax
c00177e2:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00177e7:	75 03                	jne    c00177ec <userModeEntryPoint(void*)+0x10>
c00177e9:	fb                   	sti    
c00177ea:	66 90                	xchg   ax,ax
c00177ec:	fb                   	sti    
c00177ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177f2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177f5:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00177fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00177ff:	e9 5b 8a fe ff       	jmp    c000025f <goToUsermode>

c0017804 <changeTSS>:
c0017804:	83 ec 14             	sub    esp,0x14
c0017807:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001780c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001780f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0017814:	c1 e2 15             	shl    edx,0x15
c0017817:	29 d0                	sub    eax,edx
c0017819:	50                   	push   eax
c001781a:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001781f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017825:	05 7c 11 00 00       	add    eax,0x117c
c001782a:	50                   	push   eax
c001782b:	e8 14 38 ff ff       	call   c000b044 <TSS::setESP(unsigned long)>
c0017830:	83 c4 1c             	add    esp,0x1c
c0017833:	c3                   	ret    

c0017834 <switchToThread(ThreadControlBlock*)>:
c0017834:	57                   	push   edi
c0017835:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c001783a:	56                   	push   esi
c001783b:	85 c0                	test   eax,eax
c001783d:	53                   	push   ebx
c001783e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017842:	0f 85 90 00 00 00    	jne    c00178d8 <switchToThread(ThreadControlBlock*)+0xa4>
c0017848:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c001784b:	3c ff                	cmp    al,0xff
c001784d:	0f 84 81 00 00 00    	je     c00178d4 <switchToThread(ThreadControlBlock*)+0xa0>
c0017853:	0f b6 d0             	movzx  edx,al
c0017856:	b8 00 04 00 00       	mov    eax,0x400
c001785b:	29 d0                	sub    eax,edx
c001785d:	d1 f8                	sar    eax,1
c001785f:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c0017862:	66 90                	xchg   ax,ax
c0017864:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c0017867:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001786c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017872:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017879:	74 4d                	je     c00178c8 <switchToThread(ThreadControlBlock*)+0x94>
c001787b:	0f 31                	rdtsc  
c001787d:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0017882:	89 c6                	mov    esi,eax
c0017884:	89 d7                	mov    edi,edx
c0017886:	2b 35 78 79 02 c0    	sub    esi,DWORD PTR ds:0xc0027978
c001788c:	89 15 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,edx
c0017892:	1b 3d 7c 79 02 c0    	sbb    edi,DWORD PTR ds:0xc002797c
c0017898:	89 35 80 79 02 c0    	mov    DWORD PTR ds:0xc0027980,esi
c001789e:	a3 78 79 02 c0       	mov    ds:0xc0027978,eax
c00178a3:	89 3d 84 79 02 c0    	mov    DWORD PTR ds:0xc0027984,edi
c00178a9:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00178af:	89 15 7c 79 02 c0    	mov    DWORD PTR ds:0xc002797c,edx
c00178b5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00178b8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00178bb:	01 c6                	add    esi,eax
c00178bd:	11 d7                	adc    edi,edx
c00178bf:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00178c2:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c00178c5:	8d 76 00             	lea    esi,[esi+0x0]
c00178c8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00178cc:	5b                   	pop    ebx
c00178cd:	5e                   	pop    esi
c00178ce:	5f                   	pop    edi
c00178cf:	e9 c3 89 fe ff       	jmp    c0000297 <switchToThreadASM>
c00178d4:	31 c0                	xor    eax,eax
c00178d6:	eb 8c                	jmp    c0017864 <switchToThread(ThreadControlBlock*)+0x30>
c00178d8:	5b                   	pop    ebx
c00178d9:	c7 05 40 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x1
c00178e3:	5e                   	pop    esi
c00178e4:	5f                   	pop    edi
c00178e5:	c3                   	ret    
c00178e6:	66 90                	xchg   ax,ax

c00178e8 <Process::addArgs(char**)>:
c00178e8:	57                   	push   edi
c00178e9:	56                   	push   esi
c00178ea:	53                   	push   ebx
c00178eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00178ef:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00178f3:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00178fd:	85 ff                	test   edi,edi
c00178ff:	74 43                	je     c0017944 <Process::addArgs(char**)+0x5c>
c0017901:	8b 07                	mov    eax,DWORD PTR [edi]
c0017903:	85 c0                	test   eax,eax
c0017905:	74 3d                	je     c0017944 <Process::addArgs(char**)+0x5c>
c0017907:	31 db                	xor    ebx,ebx
c0017909:	8d 76 00             	lea    esi,[esi+0x0]
c001790c:	83 ec 0c             	sub    esp,0xc
c001790f:	50                   	push   eax
c0017910:	e8 8b 8d fe ff       	call   c00006a0 <strlen>
c0017915:	40                   	inc    eax
c0017916:	89 04 24             	mov    DWORD PTR [esp],eax
c0017919:	e8 a5 20 ff ff       	call   c00099c3 <malloc>
c001791e:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0017925:	5a                   	pop    edx
c0017926:	59                   	pop    ecx
c0017927:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001792a:	43                   	inc    ebx
c001792b:	50                   	push   eax
c001792c:	e8 0f 8e fe ff       	call   c0000740 <strcpy>
c0017931:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0017937:	83 c4 10             	add    esp,0x10
c001793a:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001793d:	85 c0                	test   eax,eax
c001793f:	75 cb                	jne    c001790c <Process::addArgs(char**)+0x24>
c0017941:	8d 76 00             	lea    esi,[esi+0x0]
c0017944:	5b                   	pop    ebx
c0017945:	5e                   	pop    esi
c0017946:	5f                   	pop    edi
c0017947:	c3                   	ret    

c0017948 <Process::Process(char const*, Process*, char**)>:
c0017948:	56                   	push   esi
c0017949:	53                   	push   ebx
c001794a:	83 ec 14             	sub    esp,0x14
c001794d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017951:	05 0c 02 00 00       	add    eax,0x20c
c0017956:	bb 07 00 00 00       	mov    ebx,0x7
c001795b:	89 c6                	mov    esi,eax
c001795d:	8d 76 00             	lea    esi,[esi+0x0]
c0017960:	85 db                	test   ebx,ebx
c0017962:	78 14                	js     c0017978 <Process::Process(char const*, Process*, char**)+0x30>
c0017964:	83 ec 0c             	sub    esp,0xc
c0017967:	56                   	push   esi
c0017968:	e8 23 9f 00 00       	call   c0021890 <ThreadControlBlock::ThreadControlBlock()>
c001796d:	83 c4 10             	add    esp,0x10
c0017970:	83 c6 5f             	add    esi,0x5f
c0017973:	4b                   	dec    ebx
c0017974:	eb ea                	jmp    c0017960 <Process::Process(char const*, Process*, char**)+0x18>
c0017976:	66 90                	xchg   ax,ax
c0017978:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001797c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017983:	83 ec 0c             	sub    esp,0xc
c0017986:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001798a:	e8 7f c8 ff ff       	call   c001420e <Krnl::newProcessEnv(Process*)>
c001798f:	83 c4 10             	add    esp,0x10
c0017992:	89 c2                	mov    edx,eax
c0017994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017998:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001799e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179a2:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00179ab:	a1 70 5e 02 c0       	mov    eax,ds:0xc0025e70
c00179b0:	8d 50 01             	lea    edx,[eax+0x1]
c00179b3:	89 15 70 5e 02 c0    	mov    DWORD PTR ds:0xc0025e70,edx
c00179b9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00179bd:	89 02                	mov    DWORD PTR [edx],eax
c00179bf:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00179c7:	83 ec 0c             	sub    esp,0xc
c00179ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00179ce:	e8 f0 1f ff ff       	call   c00099c3 <malloc>
c00179d3:	83 c4 10             	add    esp,0x10
c00179d6:	89 c3                	mov    ebx,eax
c00179d8:	83 ec 08             	sub    esp,0x8
c00179db:	6a 00                	push   0x0
c00179dd:	53                   	push   ebx
c00179de:	e8 5f 48 ff ff       	call   c000c242 <VAS::VAS(bool)>
c00179e3:	83 c4 10             	add    esp,0x10
c00179e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179ea:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00179f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179f4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00179fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a02:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a06:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017a0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a10:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017a16:	85 c0                	test   eax,eax
c0017a18:	74 42                	je     c0017a5c <Process::Process(char const*, Process*, char**)+0x114>
c0017a1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a1e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017a24:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017a2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a2e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017a34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a38:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017a3e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017a44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a48:	05 0c 01 00 00       	add    eax,0x10c
c0017a4d:	83 ec 08             	sub    esp,0x8
c0017a50:	52                   	push   edx
c0017a51:	50                   	push   eax
c0017a52:	e8 e9 8c fe ff       	call   c0000740 <strcpy>
c0017a57:	83 c4 10             	add    esp,0x10
c0017a5a:	eb 64                	jmp    c0017ac0 <Process::Process(char const*, Process*, char**)+0x178>
c0017a5c:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c0017a64:	83 ec 0c             	sub    esp,0xc
c0017a67:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a6b:	e8 53 1f ff ff       	call   c00099c3 <malloc>
c0017a70:	83 c4 10             	add    esp,0x10
c0017a73:	89 c3                	mov    ebx,eax
c0017a75:	83 ec 08             	sub    esp,0x8
c0017a78:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a7c:	53                   	push   ebx
c0017a7d:	e8 d0 32 ff ff       	call   c000ad52 <VgaText::VgaText(char const*)>
c0017a82:	83 c4 10             	add    esp,0x10
c0017a85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a89:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017a8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a99:	83 ec 0c             	sub    esp,0xc
c0017a9c:	50                   	push   eax
c0017a9d:	e8 6f 2a ff ff       	call   c000a511 <addToTerminalCycle(VgaText*)>
c0017aa2:	83 c4 10             	add    esp,0x10
c0017aa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aa9:	05 0c 01 00 00       	add    eax,0x10c
c0017aae:	83 ec 08             	sub    esp,0x8
c0017ab1:	68 78 48 02 c0       	push   0xc0024878
c0017ab6:	50                   	push   eax
c0017ab7:	e8 84 8c fe ff       	call   c0000740 <strcpy>
c0017abc:	83 c4 10             	add    esp,0x10
c0017abf:	90                   	nop
c0017ac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ac4:	83 c0 0c             	add    eax,0xc
c0017ac7:	83 ec 08             	sub    esp,0x8
c0017aca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ace:	50                   	push   eax
c0017acf:	e8 6c 8c fe ff       	call   c0000740 <strcpy>
c0017ad4:	83 c4 10             	add    esp,0x10
c0017ad7:	83 ec 08             	sub    esp,0x8
c0017ada:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017ade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ae2:	e8 01 fe ff ff       	call   c00178e8 <Process::addArgs(char**)>
c0017ae7:	83 c4 10             	add    esp,0x10
c0017aea:	83 ec 08             	sub    esp,0x8
c0017aed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017af1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017af5:	e8 89 ed ff ff       	call   c0016883 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017afa:	83 c4 10             	add    esp,0x10
c0017afd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017b01:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017b05:	83 f0 01             	xor    eax,0x1
c0017b08:	88 c2                	mov    dl,al
c0017b0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b0e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0017b14:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017b19:	83 ec 08             	sub    esp,0x8
c0017b1c:	50                   	push   eax
c0017b1d:	68 d0 48 02 c0       	push   0xc00248d0
c0017b22:	e8 9c 4f ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0017b27:	83 c4 10             	add    esp,0x10
c0017b2a:	90                   	nop
c0017b2b:	83 c4 14             	add    esp,0x14
c0017b2e:	5b                   	pop    ebx
c0017b2f:	5e                   	pop    esi
c0017b30:	c3                   	ret    
c0017b31:	90                   	nop
c0017b32:	66 90                	xchg   ax,ax

c0017b34 <Process::Process(bool, char const*, Process*, char**)>:
c0017b34:	56                   	push   esi
c0017b35:	53                   	push   ebx
c0017b36:	83 ec 24             	sub    esp,0x24
c0017b39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b3d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017b41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b45:	05 0c 02 00 00       	add    eax,0x20c
c0017b4a:	bb 07 00 00 00       	mov    ebx,0x7
c0017b4f:	89 c6                	mov    esi,eax
c0017b51:	8d 76 00             	lea    esi,[esi+0x0]
c0017b54:	85 db                	test   ebx,ebx
c0017b56:	78 14                	js     c0017b6c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0017b58:	83 ec 0c             	sub    esp,0xc
c0017b5b:	56                   	push   esi
c0017b5c:	e8 2f 9d 00 00       	call   c0021890 <ThreadControlBlock::ThreadControlBlock()>
c0017b61:	83 c4 10             	add    esp,0x10
c0017b64:	83 c6 5f             	add    esi,0x5f
c0017b67:	4b                   	dec    ebx
c0017b68:	eb ea                	jmp    c0017b54 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0017b6a:	66 90                	xchg   ax,ax
c0017b6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b70:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017b77:	83 ec 0c             	sub    esp,0xc
c0017b7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017b7e:	e8 8b c6 ff ff       	call   c001420e <Krnl::newProcessEnv(Process*)>
c0017b83:	83 c4 10             	add    esp,0x10
c0017b86:	89 c2                	mov    edx,eax
c0017b88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b8c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017b92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b96:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017b9f:	a1 70 5e 02 c0       	mov    eax,ds:0xc0025e70
c0017ba4:	8d 50 01             	lea    edx,[eax+0x1]
c0017ba7:	89 15 70 5e 02 c0    	mov    DWORD PTR ds:0xc0025e70,edx
c0017bad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017bb1:	89 02                	mov    DWORD PTR [edx],eax
c0017bb3:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0017bbb:	83 ec 0c             	sub    esp,0xc
c0017bbe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017bc2:	e8 fc 1d ff ff       	call   c00099c3 <malloc>
c0017bc7:	83 c4 10             	add    esp,0x10
c0017bca:	89 c3                	mov    ebx,eax
c0017bcc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017bd1:	83 ec 08             	sub    esp,0x8
c0017bd4:	50                   	push   eax
c0017bd5:	53                   	push   ebx
c0017bd6:	e8 67 46 ff ff       	call   c000c242 <VAS::VAS(bool)>
c0017bdb:	83 c4 10             	add    esp,0x10
c0017bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017be2:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017be8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bec:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017bf6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bfa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017bfe:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017c04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c08:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017c0e:	85 c0                	test   eax,eax
c0017c10:	74 42                	je     c0017c54 <Process::Process(bool, char const*, Process*, char**)+0x120>
c0017c12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c16:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017c1c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017c22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c26:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017c2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c30:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017c36:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017c3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c40:	05 0c 01 00 00       	add    eax,0x10c
c0017c45:	83 ec 08             	sub    esp,0x8
c0017c48:	52                   	push   edx
c0017c49:	50                   	push   eax
c0017c4a:	e8 f1 8a fe ff       	call   c0000740 <strcpy>
c0017c4f:	83 c4 10             	add    esp,0x10
c0017c52:	eb 64                	jmp    c0017cb8 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0017c54:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c0017c5c:	83 ec 0c             	sub    esp,0xc
c0017c5f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017c63:	e8 5b 1d ff ff       	call   c00099c3 <malloc>
c0017c68:	83 c4 10             	add    esp,0x10
c0017c6b:	89 c3                	mov    ebx,eax
c0017c6d:	83 ec 08             	sub    esp,0x8
c0017c70:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017c74:	53                   	push   ebx
c0017c75:	e8 d8 30 ff ff       	call   c000ad52 <VgaText::VgaText(char const*)>
c0017c7a:	83 c4 10             	add    esp,0x10
c0017c7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c81:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017c87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c8b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c91:	83 ec 0c             	sub    esp,0xc
c0017c94:	50                   	push   eax
c0017c95:	e8 77 28 ff ff       	call   c000a511 <addToTerminalCycle(VgaText*)>
c0017c9a:	83 c4 10             	add    esp,0x10
c0017c9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ca1:	05 0c 01 00 00       	add    eax,0x10c
c0017ca6:	83 ec 08             	sub    esp,0x8
c0017ca9:	68 78 48 02 c0       	push   0xc0024878
c0017cae:	50                   	push   eax
c0017caf:	e8 8c 8a fe ff       	call   c0000740 <strcpy>
c0017cb4:	83 c4 10             	add    esp,0x10
c0017cb7:	90                   	nop
c0017cb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cbc:	83 c0 0c             	add    eax,0xc
c0017cbf:	83 ec 08             	sub    esp,0x8
c0017cc2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017cc6:	50                   	push   eax
c0017cc7:	e8 74 8a fe ff       	call   c0000740 <strcpy>
c0017ccc:	83 c4 10             	add    esp,0x10
c0017ccf:	83 ec 08             	sub    esp,0x8
c0017cd2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017cd6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017cda:	e8 09 fc ff ff       	call   c00178e8 <Process::addArgs(char**)>
c0017cdf:	83 c4 10             	add    esp,0x10
c0017ce2:	90                   	nop
c0017ce3:	83 c4 24             	add    esp,0x24
c0017ce6:	5b                   	pop    ebx
c0017ce7:	5e                   	pop    esi
c0017ce8:	c3                   	ret    
c0017ce9:	8d 76 00             	lea    esi,[esi+0x0]

c0017cec <taskStartupFunction>:
c0017cec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017cf1:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0017cf4:	c3                   	ret    
c0017cf5:	90                   	nop
c0017cf6:	66 90                	xchg   ax,ax

c0017cf8 <Semaphore::Semaphore(int)>:
c0017cf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d00:	89 10                	mov    DWORD PTR [eax],edx
c0017d02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d06:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017d0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d11:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017d18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d1c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017d23:	90                   	nop
c0017d24:	c3                   	ret    
c0017d25:	90                   	nop
c0017d26:	66 90                	xchg   ax,ax

c0017d28 <Mutex::Mutex()>:
c0017d28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d2c:	6a 01                	push   0x1
c0017d2e:	50                   	push   eax
c0017d2f:	e8 c4 ff ff ff       	call   c0017cf8 <Semaphore::Semaphore(int)>
c0017d34:	83 c4 08             	add    esp,0x8
c0017d37:	90                   	nop
c0017d38:	c3                   	ret    
c0017d39:	90                   	nop
c0017d3a:	66 90                	xchg   ax,ax

c0017d3c <Process::createThread(void (*)(void*), void*, int)>:
c0017d3c:	57                   	push   edi
c0017d3d:	31 c9                	xor    ecx,ecx
c0017d3f:	56                   	push   esi
c0017d40:	53                   	push   ebx
c0017d41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017d45:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0017d4c:	89 f2                	mov    edx,esi
c0017d4e:	66 90                	xchg   ax,ax
c0017d50:	0f b7 c2             	movzx  eax,dx
c0017d53:	83 e2 01             	and    edx,0x1
c0017d56:	74 14                	je     c0017d6c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0017d58:	d1 f8                	sar    eax,1
c0017d5a:	41                   	inc    ecx
c0017d5b:	89 c2                	mov    edx,eax
c0017d5d:	83 f9 10             	cmp    ecx,0x10
c0017d60:	75 ee                	jne    c0017d50 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0017d62:	31 db                	xor    ebx,ebx
c0017d64:	89 d8                	mov    eax,ebx
c0017d66:	5b                   	pop    ebx
c0017d67:	5e                   	pop    esi
c0017d68:	5f                   	pop    edi
c0017d69:	c3                   	ret    
c0017d6a:	66 90                	xchg   ax,ax
c0017d6c:	b8 01 00 00 00       	mov    eax,0x1
c0017d71:	d3 e0                	shl    eax,cl
c0017d73:	09 c6                	or     esi,eax
c0017d75:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017d78:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0017d7f:	01 c0                	add    eax,eax
c0017d81:	01 c8                	add    eax,ecx
c0017d83:	8d 04 80             	lea    eax,[eax+eax*4]
c0017d86:	01 d8                	add    eax,ebx
c0017d88:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0017d8f:	75 0b                	jne    c0017d9c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0017d91:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0017d9b:	90                   	nop
c0017d9c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017da2:	83 ec 08             	sub    esp,0x8
c0017da5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0017da8:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017dab:	01 c0                	add    eax,eax
c0017dad:	01 c8                	add    eax,ecx
c0017daf:	8d 3c 80             	lea    edi,[eax+eax*4]
c0017db2:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0017db5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017dbb:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0017dc1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017dc5:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0017dcb:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0017dd1:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0017dd8:	89 ca                	mov    edx,ecx
c0017dda:	f7 da                	neg    edx
c0017ddc:	c1 e2 15             	shl    edx,0x15
c0017ddf:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017de5:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017deb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017def:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017df9:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0017dff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e03:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017e09:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017e13:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017e1d:	53                   	push   ebx
c0017e1e:	68 64 79 02 c0       	push   0xc0027964
c0017e23:	e8 08 98 00 00       	call   c0021630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017e28:	83 c4 10             	add    esp,0x10
c0017e2b:	89 d8                	mov    eax,ebx
c0017e2d:	5b                   	pop    ebx
c0017e2e:	5e                   	pop    esi
c0017e2f:	5f                   	pop    edi
c0017e30:	c3                   	ret    
c0017e31:	90                   	nop
c0017e32:	66 90                	xchg   ax,ax

c0017e34 <Process::createUserThread()>:
c0017e34:	83 ec 0c             	sub    esp,0xc
c0017e37:	68 80 00 00 00       	push   0x80
c0017e3c:	6a 00                	push   0x0
c0017e3e:	68 dc 77 01 c0       	push   0xc00177dc
c0017e43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e47:	e8 f0 fe ff ff       	call   c0017d3c <Process::createThread(void (*)(void*), void*, int)>
c0017e4c:	83 c4 1c             	add    esp,0x1c
c0017e4f:	c3                   	ret    

c0017e50 <setupMultitasking(void (*)())>:
c0017e50:	56                   	push   esi
c0017e51:	53                   	push   ebx
c0017e52:	51                   	push   ecx
c0017e53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e57:	eb 13                	jmp    c0017e6c <setupMultitasking(void (*)())+0x1c>
c0017e59:	8d 76 00             	lea    esi,[esi+0x0]
c0017e5c:	83 ec 0c             	sub    esp,0xc
c0017e5f:	68 64 79 02 c0       	push   0xc0027964
c0017e64:	e8 0f 97 00 00       	call   c0021578 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017e69:	83 c4 10             	add    esp,0x10
c0017e6c:	83 ec 0c             	sub    esp,0xc
c0017e6f:	68 64 79 02 c0       	push   0xc0027964
c0017e74:	e8 db 96 00 00       	call   c0021554 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017e79:	83 c4 10             	add    esp,0x10
c0017e7c:	84 c0                	test   al,al
c0017e7e:	74 dc                	je     c0017e5c <setupMultitasking(void (*)())+0xc>
c0017e80:	83 ec 0c             	sub    esp,0xc
c0017e83:	68 1f 07 00 00       	push   0x71f
c0017e88:	e8 36 1b ff ff       	call   c00099c3 <malloc>
c0017e8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017e94:	89 c3                	mov    ebx,eax
c0017e96:	6a 00                	push   0x0
c0017e98:	68 7c 48 02 c0       	push   0xc002487c
c0017e9d:	6a 01                	push   0x1
c0017e9f:	50                   	push   eax
c0017ea0:	e8 8f fc ff ff       	call   c0017b34 <Process::Process(bool, char const*, Process*, char**)>
c0017ea5:	83 c4 14             	add    esp,0x14
c0017ea8:	89 1d 70 79 02 c0    	mov    DWORD PTR ds:0xc0027970,ebx
c0017eae:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0017eb4:	e8 66 29 ff ff       	call   c000a81f <setActiveTerminal(VgaText*)>
c0017eb9:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0017ec1:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0017ecb:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017ed1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017ed4:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0017ede:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017ee4:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0017eea:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017ef4:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0017efe:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017f08:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017f0e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017f18:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017f1e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017f28:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017f2e:	58                   	pop    eax
c0017f2f:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017f35:	5a                   	pop    edx
c0017f36:	68 78 48 02 c0       	push   0xc0024878
c0017f3b:	50                   	push   eax
c0017f3c:	e8 ff 87 fe ff       	call   c0000740 <strcpy>
c0017f41:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0017f48:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017f4c:	83 c4 14             	add    esp,0x14
c0017f4f:	5b                   	pop    ebx
c0017f50:	5e                   	pop    esi
c0017f51:	e9 33 83 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0017f56:	66 90                	xchg   ax,ax

c0017f58 <schedule()>:
c0017f58:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c0017f5d:	85 c0                	test   eax,eax
c0017f5f:	74 0b                	je     c0017f6c <schedule()+0x14>
c0017f61:	c7 05 40 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x1
c0017f6b:	c3                   	ret    
c0017f6c:	53                   	push   ebx
c0017f6d:	83 ec 14             	sub    esp,0x14
c0017f70:	68 64 79 02 c0       	push   0xc0027964
c0017f75:	e8 da 95 00 00       	call   c0021554 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017f7a:	83 c4 10             	add    esp,0x10
c0017f7d:	84 c0                	test   al,al
c0017f7f:	75 3b                	jne    c0017fbc <schedule()+0x64>
c0017f81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f86:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017f89:	4a                   	dec    edx
c0017f8a:	74 38                	je     c0017fc4 <schedule()+0x6c>
c0017f8c:	83 ec 0c             	sub    esp,0xc
c0017f8f:	68 64 79 02 c0       	push   0xc0027964
c0017f94:	e8 d7 95 00 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017f99:	c7 04 24 64 79 02 c0 	mov    DWORD PTR [esp],0xc0027964
c0017fa0:	89 c3                	mov    ebx,eax
c0017fa2:	e8 d1 95 00 00       	call   c0021578 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017fa7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017fae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017fb1:	e8 7e f8 ff ff       	call   c0017834 <switchToThread(ThreadControlBlock*)>
c0017fb6:	83 c4 10             	add    esp,0x10
c0017fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0017fbc:	83 c4 08             	add    esp,0x8
c0017fbf:	5b                   	pop    ebx
c0017fc0:	c3                   	ret    
c0017fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0017fc4:	83 ec 08             	sub    esp,0x8
c0017fc7:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017fce:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017fd4:	68 64 79 02 c0       	push   0xc0027964
c0017fd9:	e8 52 96 00 00       	call   c0021630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017fde:	83 c4 10             	add    esp,0x10
c0017fe1:	eb a9                	jmp    c0017f8c <schedule()+0x34>
c0017fe3:	90                   	nop

c0017fe4 <Semaphore::tryAcquire()>:
c0017fe4:	53                   	push   ebx
c0017fe5:	83 ec 08             	sub    esp,0x8
c0017fe8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017fec:	fa                   	cli    
c0017fed:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0017ff2:	8d 50 01             	lea    edx,[eax+0x1]
c0017ff5:	89 15 48 79 02 c0    	mov    DWORD PTR ds:0xc0027948,edx
c0017ffb:	8b 15 44 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027944
c0018001:	8d 5a 01             	lea    ebx,[edx+0x1]
c0018004:	89 1d 44 79 02 c0    	mov    DWORD PTR ds:0xc0027944,ebx
c001800a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001800d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001800f:	7c 33                	jl     c0018044 <Semaphore::tryAcquire()+0x60>
c0018011:	89 15 44 79 02 c0    	mov    DWORD PTR ds:0xc0027944,edx
c0018017:	85 d2                	test   edx,edx
c0018019:	75 0d                	jne    c0018028 <Semaphore::tryAcquire()+0x44>
c001801b:	8b 15 40 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027940
c0018021:	85 d2                	test   edx,edx
c0018023:	75 6b                	jne    c0018090 <Semaphore::tryAcquire()+0xac>
c0018025:	8d 76 00             	lea    esi,[esi+0x0]
c0018028:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c001802d:	85 c0                	test   eax,eax
c001802f:	74 0b                	je     c001803c <Semaphore::tryAcquire()+0x58>
c0018031:	8d 76 00             	lea    esi,[esi+0x0]
c0018034:	31 c0                	xor    eax,eax
c0018036:	83 c4 08             	add    esp,0x8
c0018039:	5b                   	pop    ebx
c001803a:	c3                   	ret    
c001803b:	90                   	nop
c001803c:	fb                   	sti    
c001803d:	83 c4 08             	add    esp,0x8
c0018040:	5b                   	pop    ebx
c0018041:	c3                   	ret    
c0018042:	66 90                	xchg   ax,ax
c0018044:	43                   	inc    ebx
c0018045:	89 15 44 79 02 c0    	mov    DWORD PTR ds:0xc0027944,edx
c001804b:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001804e:	85 d2                	test   edx,edx
c0018050:	75 22                	jne    c0018074 <Semaphore::tryAcquire()+0x90>
c0018052:	8b 0d 40 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027940
c0018058:	85 c9                	test   ecx,ecx
c001805a:	74 18                	je     c0018074 <Semaphore::tryAcquire()+0x90>
c001805c:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c0018066:	e8 ed fe ff ff       	call   c0017f58 <schedule()>
c001806b:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018070:	48                   	dec    eax
c0018071:	8d 76 00             	lea    esi,[esi+0x0]
c0018074:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018079:	85 c0                	test   eax,eax
c001807b:	75 0b                	jne    c0018088 <Semaphore::tryAcquire()+0xa4>
c001807d:	fb                   	sti    
c001807e:	b0 01                	mov    al,0x1
c0018080:	83 c4 08             	add    esp,0x8
c0018083:	5b                   	pop    ebx
c0018084:	c3                   	ret    
c0018085:	8d 76 00             	lea    esi,[esi+0x0]
c0018088:	b0 01                	mov    al,0x1
c001808a:	83 c4 08             	add    esp,0x8
c001808d:	5b                   	pop    ebx
c001808e:	c3                   	ret    
c001808f:	90                   	nop
c0018090:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c001809a:	e8 b9 fe ff ff       	call   c0017f58 <schedule()>
c001809f:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00180a4:	48                   	dec    eax
c00180a5:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00180aa:	85 c0                	test   eax,eax
c00180ac:	75 86                	jne    c0018034 <Semaphore::tryAcquire()+0x50>
c00180ae:	eb 8c                	jmp    c001803c <Semaphore::tryAcquire()+0x58>

c00180b0 <Semaphore::assertLocked(char const*)>:
c00180b0:	83 ec 0c             	sub    esp,0xc
c00180b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180b7:	fa                   	cli    
c00180b8:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c00180be:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c00180c3:	8d 48 01             	lea    ecx,[eax+0x1]
c00180c6:	89 0d 44 79 02 c0    	mov    DWORD PTR ds:0xc0027944,ecx
c00180cc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00180ce:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00180d1:	7c 29                	jl     c00180fc <Semaphore::assertLocked(char const*)+0x4c>
c00180d3:	90                   	nop
c00180d4:	a3 44 79 02 c0       	mov    ds:0xc0027944,eax
c00180d9:	85 c0                	test   eax,eax
c00180db:	75 0b                	jne    c00180e8 <Semaphore::assertLocked(char const*)+0x38>
c00180dd:	a1 40 79 02 c0       	mov    eax,ds:0xc0027940
c00180e2:	85 c0                	test   eax,eax
c00180e4:	75 2e                	jne    c0018114 <Semaphore::assertLocked(char const*)+0x64>
c00180e6:	66 90                	xchg   ax,ax
c00180e8:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00180ed:	48                   	dec    eax
c00180ee:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00180f3:	75 03                	jne    c00180f8 <Semaphore::assertLocked(char const*)+0x48>
c00180f5:	fb                   	sti    
c00180f6:	66 90                	xchg   ax,ax
c00180f8:	83 c4 0c             	add    esp,0xc
c00180fb:	c3                   	ret    
c00180fc:	83 ec 0c             	sub    esp,0xc
c00180ff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018103:	e8 7d c2 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0018108:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c001810d:	83 c4 10             	add    esp,0x10
c0018110:	48                   	dec    eax
c0018111:	eb c1                	jmp    c00180d4 <Semaphore::assertLocked(char const*)+0x24>
c0018113:	90                   	nop
c0018114:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c001811e:	e8 35 fe ff ff       	call   c0017f58 <schedule()>
c0018123:	eb c3                	jmp    c00180e8 <Semaphore::assertLocked(char const*)+0x38>
c0018125:	8d 76 00             	lea    esi,[esi+0x0]

c0018128 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018128:	83 ec 0c             	sub    esp,0xc
c001812b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018130:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018134:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018137:	e8 1c fe ff ff       	call   c0017f58 <schedule()>
c001813c:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018141:	48                   	dec    eax
c0018142:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018147:	75 03                	jne    c001814c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0018149:	fb                   	sti    
c001814a:	66 90                	xchg   ax,ax
c001814c:	83 c4 0c             	add    esp,0xc
c001814f:	c3                   	ret    

c0018150 <blockTask(TaskState)>:
c0018150:	83 ec 0c             	sub    esp,0xc
c0018153:	fa                   	cli    
c0018154:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c001815a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001815e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018163:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018166:	e8 ed fd ff ff       	call   c0017f58 <schedule()>
c001816b:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018170:	48                   	dec    eax
c0018171:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018176:	75 04                	jne    c001817c <blockTask(TaskState)+0x2c>
c0018178:	fb                   	sti    
c0018179:	8d 76 00             	lea    esi,[esi+0x0]
c001817c:	83 c4 0c             	add    esp,0xc
c001817f:	c3                   	ret    

c0018180 <waitTask(int, int*, int)>:
c0018180:	83 ec 18             	sub    esp,0x18
c0018183:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018188:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001818c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001818f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018193:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018198:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001819b:	6a 07                	push   0x7
c001819d:	e8 ae ff ff ff       	call   c0018150 <blockTask(TaskState)>
c00181a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181a7:	83 c4 10             	add    esp,0x10
c00181aa:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00181ad:	85 d2                	test   edx,edx
c00181af:	74 0b                	je     c00181bc <waitTask(int, int*, int)+0x3c>
c00181b1:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00181b4:	89 02                	mov    DWORD PTR [edx],eax
c00181b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181bb:	90                   	nop
c00181bc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00181bf:	83 c4 0c             	add    esp,0xc
c00181c2:	c3                   	ret    
c00181c3:	90                   	nop

c00181c4 <milliTenthSleepUntil(unsigned int)>:
c00181c4:	83 ec 0c             	sub    esp,0xc
c00181c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181cb:	39 05 ac 6a 02 c0    	cmp    DWORD PTR ds:0xc0026aac,eax
c00181d1:	76 05                	jbe    c00181d8 <milliTenthSleepUntil(unsigned int)+0x14>
c00181d3:	90                   	nop
c00181d4:	83 c4 0c             	add    esp,0xc
c00181d7:	c3                   	ret    
c00181d8:	fa                   	cli    
c00181d9:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c00181df:	83 ec 08             	sub    esp,0x8
c00181e2:	ff 05 44 79 02 c0    	inc    DWORD PTR ds:0xc0027944
c00181e8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00181ee:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00181f1:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00181f7:	68 58 79 02 c0       	push   0xc0027958
c00181fc:	e8 2f 94 00 00       	call   c0021630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018201:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018208:	e8 43 ff ff ff       	call   c0018150 <blockTask(TaskState)>
c001820d:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c0018212:	83 c4 10             	add    esp,0x10
c0018215:	48                   	dec    eax
c0018216:	a3 44 79 02 c0       	mov    ds:0xc0027944,eax
c001821b:	85 c0                	test   eax,eax
c001821d:	75 09                	jne    c0018228 <milliTenthSleepUntil(unsigned int)+0x64>
c001821f:	a1 40 79 02 c0       	mov    eax,ds:0xc0027940
c0018224:	85 c0                	test   eax,eax
c0018226:	75 14                	jne    c001823c <milliTenthSleepUntil(unsigned int)+0x78>
c0018228:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c001822d:	48                   	dec    eax
c001822e:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018233:	75 9f                	jne    c00181d4 <milliTenthSleepUntil(unsigned int)+0x10>
c0018235:	fb                   	sti    
c0018236:	83 c4 0c             	add    esp,0xc
c0018239:	c3                   	ret    
c001823a:	66 90                	xchg   ax,ax
c001823c:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c0018246:	e8 0d fd ff ff       	call   c0017f58 <schedule()>
c001824b:	eb db                	jmp    c0018228 <milliTenthSleepUntil(unsigned int)+0x64>
c001824d:	8d 76 00             	lea    esi,[esi+0x0]

c0018250 <milliTenthSleep(unsigned int)>:
c0018250:	a1 ac 6a 02 c0       	mov    eax,ds:0xc0026aac
c0018255:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018259:	e9 66 ff ff ff       	jmp    c00181c4 <milliTenthSleepUntil(unsigned int)>
c001825e:	66 90                	xchg   ax,ax

c0018260 <sleep(unsigned int)>:
c0018260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018264:	8d 04 80             	lea    eax,[eax+eax*4]
c0018267:	8d 04 80             	lea    eax,[eax+eax*4]
c001826a:	8d 04 80             	lea    eax,[eax+eax*4]
c001826d:	8d 04 80             	lea    eax,[eax+eax*4]
c0018270:	c1 e0 04             	shl    eax,0x4
c0018273:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018277:	eb d7                	jmp    c0018250 <milliTenthSleep(unsigned int)>
c0018279:	90                   	nop
c001827a:	66 90                	xchg   ax,ax

c001827c <Semaphore::acquire()>:
c001827c:	83 ec 0c             	sub    esp,0xc
c001827f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018283:	fa                   	cli    
c0018284:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c0018289:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c001828f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018292:	89 0d 44 79 02 c0    	mov    DWORD PTR ds:0xc0027944,ecx
c0018298:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001829b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001829d:	7d 2d                	jge    c00182cc <Semaphore::acquire()+0x50>
c001829f:	41                   	inc    ecx
c00182a0:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00182a3:	90                   	nop
c00182a4:	a3 44 79 02 c0       	mov    ds:0xc0027944,eax
c00182a9:	85 c0                	test   eax,eax
c00182ab:	75 0b                	jne    c00182b8 <Semaphore::acquire()+0x3c>
c00182ad:	a1 40 79 02 c0       	mov    eax,ds:0xc0027940
c00182b2:	85 c0                	test   eax,eax
c00182b4:	75 62                	jne    c0018318 <Semaphore::acquire()+0x9c>
c00182b6:	66 90                	xchg   ax,ax
c00182b8:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00182bd:	48                   	dec    eax
c00182be:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00182c3:	75 03                	jne    c00182c8 <Semaphore::acquire()+0x4c>
c00182c5:	fb                   	sti    
c00182c6:	66 90                	xchg   ax,ax
c00182c8:	83 c4 0c             	add    esp,0xc
c00182cb:	c3                   	ret    
c00182cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182d1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00182d8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00182db:	85 c9                	test   ecx,ecx
c00182dd:	74 4d                	je     c001832c <Semaphore::acquire()+0xb0>
c00182df:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00182e2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00182e8:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00182eb:	90                   	nop
c00182ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182f1:	83 ec 0c             	sub    esp,0xc
c00182f4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00182f7:	68 f8 48 02 c0       	push   0xc00248f8
c00182fc:	e8 c2 47 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0018301:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0018308:	e8 43 fe ff ff       	call   c0018150 <blockTask(TaskState)>
c001830d:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c0018312:	83 c4 10             	add    esp,0x10
c0018315:	48                   	dec    eax
c0018316:	eb 8c                	jmp    c00182a4 <Semaphore::acquire()+0x28>
c0018318:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c0018322:	e8 31 fc ff ff       	call   c0017f58 <schedule()>
c0018327:	eb 8f                	jmp    c00182b8 <Semaphore::acquire()+0x3c>
c0018329:	8d 76 00             	lea    esi,[esi+0x0]
c001832c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018331:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018334:	eb b6                	jmp    c00182ec <Semaphore::acquire()+0x70>
c0018336:	66 90                	xchg   ax,ax

c0018338 <taskReturned>:
c0018338:	83 ec 18             	sub    esp,0x18
c001833b:	68 18 49 02 c0       	push   0xc0024918
c0018340:	e8 40 c0 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0018345:	83 c4 10             	add    esp,0x10
c0018348:	83 ec 0c             	sub    esp,0xc
c001834b:	6a 02                	push   0x2
c001834d:	e8 fe fd ff ff       	call   c0018150 <blockTask(TaskState)>
c0018352:	fa                   	cli    
c0018353:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0018359:	e8 fa fb ff ff       	call   c0017f58 <schedule()>
c001835e:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018363:	83 c4 10             	add    esp,0x10
c0018366:	48                   	dec    eax
c0018367:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c001836c:	85 c0                	test   eax,eax
c001836e:	75 d8                	jne    c0018348 <taskReturned+0x10>
c0018370:	fb                   	sti    
c0018371:	eb d5                	jmp    c0018348 <taskReturned+0x10>
c0018373:	90                   	nop

c0018374 <Thr::processFromPID(int)>:
c0018374:	57                   	push   edi
c0018375:	56                   	push   esi
c0018376:	53                   	push   ebx
c0018377:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001837b:	fa                   	cli    
c001837c:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0018382:	83 ec 0c             	sub    esp,0xc
c0018385:	68 64 79 02 c0       	push   0xc0027964
c001838a:	e8 e1 91 00 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001838f:	83 c4 10             	add    esp,0x10
c0018392:	89 c7                	mov    edi,eax
c0018394:	eb 16                	jmp    c00183ac <Thr::processFromPID(int)+0x38>
c0018396:	66 90                	xchg   ax,ax
c0018398:	83 ec 0c             	sub    esp,0xc
c001839b:	68 64 79 02 c0       	push   0xc0027964
c00183a0:	e8 cb 91 00 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183a5:	83 c4 10             	add    esp,0x10
c00183a8:	39 f8                	cmp    eax,edi
c00183aa:	74 4c                	je     c00183f8 <Thr::processFromPID(int)+0x84>
c00183ac:	83 ec 0c             	sub    esp,0xc
c00183af:	68 64 79 02 c0       	push   0xc0027964
c00183b4:	e8 b7 91 00 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183b9:	c7 04 24 64 79 02 c0 	mov    DWORD PTR [esp],0xc0027964
c00183c0:	89 c3                	mov    ebx,eax
c00183c2:	e8 b1 91 00 00       	call   c0021578 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00183c7:	58                   	pop    eax
c00183c8:	5a                   	pop    edx
c00183c9:	53                   	push   ebx
c00183ca:	68 64 79 02 c0       	push   0xc0027964
c00183cf:	e8 5c 92 00 00       	call   c0021630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00183d4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00183d7:	83 c4 10             	add    esp,0x10
c00183da:	39 30                	cmp    DWORD PTR [eax],esi
c00183dc:	75 ba                	jne    c0018398 <Thr::processFromPID(int)+0x24>
c00183de:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00183e3:	48                   	dec    eax
c00183e4:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00183e9:	74 09                	je     c00183f4 <Thr::processFromPID(int)+0x80>
c00183eb:	90                   	nop
c00183ec:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00183ef:	5b                   	pop    ebx
c00183f0:	5e                   	pop    esi
c00183f1:	5f                   	pop    edi
c00183f2:	c3                   	ret    
c00183f3:	90                   	nop
c00183f4:	fb                   	sti    
c00183f5:	eb f5                	jmp    c00183ec <Thr::processFromPID(int)+0x78>
c00183f7:	90                   	nop
c00183f8:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00183fd:	48                   	dec    eax
c00183fe:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018403:	75 07                	jne    c001840c <Thr::processFromPID(int)+0x98>
c0018405:	fb                   	sti    
c0018406:	5b                   	pop    ebx
c0018407:	5e                   	pop    esi
c0018408:	5f                   	pop    edi
c0018409:	c3                   	ret    
c001840a:	66 90                	xchg   ax,ax
c001840c:	5b                   	pop    ebx
c001840d:	31 c0                	xor    eax,eax
c001840f:	5e                   	pop    esi
c0018410:	5f                   	pop    edi
c0018411:	c3                   	ret    
c0018412:	66 90                	xchg   ax,ax

c0018414 <unblockTask(ThreadControlBlock*)>:
c0018414:	53                   	push   ebx
c0018415:	83 ec 08             	sub    esp,0x8
c0018418:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001841c:	fa                   	cli    
c001841d:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0018423:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018426:	85 c0                	test   eax,eax
c0018428:	74 66                	je     c0018490 <unblockTask(ThreadControlBlock*)+0x7c>
c001842a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001842d:	48                   	dec    eax
c001842e:	74 38                	je     c0018468 <unblockTask(ThreadControlBlock*)+0x54>
c0018430:	83 ec 0c             	sub    esp,0xc
c0018433:	68 64 79 02 c0       	push   0xc0027964
c0018438:	e8 33 91 00 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001843d:	83 c4 10             	add    esp,0x10
c0018440:	85 c0                	test   eax,eax
c0018442:	75 1c                	jne    c0018460 <unblockTask(ThreadControlBlock*)+0x4c>
c0018444:	eb 5e                	jmp    c00184a4 <unblockTask(ThreadControlBlock*)+0x90>
c0018446:	66 90                	xchg   ax,ax
c0018448:	83 ec 08             	sub    esp,0x8
c001844b:	50                   	push   eax
c001844c:	68 64 79 02 c0       	push   0xc0027964
c0018451:	e8 ca 94 00 00       	call   c0021920 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018456:	83 c4 10             	add    esp,0x10
c0018459:	85 c0                	test   eax,eax
c001845b:	74 47                	je     c00184a4 <unblockTask(ThreadControlBlock*)+0x90>
c001845d:	8d 76 00             	lea    esi,[esi+0x0]
c0018460:	39 c3                	cmp    ebx,eax
c0018462:	75 e4                	jne    c0018448 <unblockTask(ThreadControlBlock*)+0x34>
c0018464:	eb 12                	jmp    c0018478 <unblockTask(ThreadControlBlock*)+0x64>
c0018466:	66 90                	xchg   ax,ax
c0018468:	83 ec 0c             	sub    esp,0xc
c001846b:	68 9a 48 02 c0       	push   0xc002489a
c0018470:	e8 4e 46 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0018475:	83 c4 10             	add    esp,0x10
c0018478:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c001847d:	48                   	dec    eax
c001847e:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018483:	75 03                	jne    c0018488 <unblockTask(ThreadControlBlock*)+0x74>
c0018485:	fb                   	sti    
c0018486:	66 90                	xchg   ax,ax
c0018488:	83 c4 08             	add    esp,0x8
c001848b:	5b                   	pop    ebx
c001848c:	c3                   	ret    
c001848d:	8d 76 00             	lea    esi,[esi+0x0]
c0018490:	83 ec 0c             	sub    esp,0xc
c0018493:	68 83 48 02 c0       	push   0xc0024883
c0018498:	e8 26 46 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001849d:	83 c4 10             	add    esp,0x10
c00184a0:	eb d6                	jmp    c0018478 <unblockTask(ThreadControlBlock*)+0x64>
c00184a2:	66 90                	xchg   ax,ax
c00184a4:	83 ec 08             	sub    esp,0x8
c00184a7:	53                   	push   ebx
c00184a8:	68 64 79 02 c0       	push   0xc0027964
c00184ad:	e8 7e 91 00 00       	call   c0021630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00184b2:	83 c4 10             	add    esp,0x10
c00184b5:	eb c1                	jmp    c0018478 <unblockTask(ThreadControlBlock*)+0x64>
c00184b7:	90                   	nop

c00184b8 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00184b8:	55                   	push   ebp
c00184b9:	57                   	push   edi
c00184ba:	56                   	push   esi
c00184bb:	53                   	push   ebx
c00184bc:	83 ec 1c             	sub    esp,0x1c
c00184bf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00184c3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00184c6:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c00184cc:	85 ff                	test   edi,edi
c00184ce:	7e 24                	jle    c00184f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c00184d0:	31 f6                	xor    esi,esi
c00184d2:	66 90                	xchg   ax,ax
c00184d4:	83 ec 0c             	sub    esp,0xc
c00184d7:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c00184de:	46                   	inc    esi
c00184df:	e8 ef 14 ff ff       	call   c00099d3 <free>
c00184e4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00184e7:	83 c4 10             	add    esp,0x10
c00184ea:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00184f0:	7f e2                	jg     c00184d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00184f2:	66 90                	xchg   ax,ax
c00184f4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00184fe:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018503:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018506:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0018509:	d3 c0                	rol    eax,cl
c001850b:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0018512:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018515:	89 f7                	mov    edi,esi
c0018517:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001851f:	0f 85 73 01 00 00    	jne    c0018698 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018525:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001852b:	85 ed                	test   ebp,ebp
c001852d:	74 1d                	je     c001854c <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c001852f:	83 ec 0c             	sub    esp,0xc
c0018532:	55                   	push   ebp
c0018533:	e8 f2 bb ff ff       	call   c001412a <EnvVarContainer::~EnvVarContainer()>
c0018538:	59                   	pop    ecx
c0018539:	5e                   	pop    esi
c001853a:	6a 0c                	push   0xc
c001853c:	55                   	push   ebp
c001853d:	e8 a0 44 ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c0018542:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018545:	83 c4 10             	add    esp,0x10
c0018548:	89 f7                	mov    edi,esi
c001854a:	66 90                	xchg   ax,ax
c001854c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018552:	85 c0                	test   eax,eax
c0018554:	0f 84 b2 00 00 00    	je     c001860c <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001855a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c001855d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018561:	31 c9                	xor    ecx,ecx
c0018563:	eb 17                	jmp    c001857c <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0018565:	8d 76 00             	lea    esi,[esi+0x0]
c0018568:	41                   	inc    ecx
c0018569:	83 f9 10             	cmp    ecx,0x10
c001856c:	0f 84 9a 00 00 00    	je     c001860c <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018572:	66 90                	xchg   ax,ax
c0018574:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001857a:	66 90                	xchg   ax,ax
c001857c:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0018583:	d3 fa                	sar    edx,cl
c0018585:	83 e2 01             	and    edx,0x1
c0018588:	74 de                	je     c0018568 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001858a:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c001858d:	01 d2                	add    edx,edx
c001858f:	01 ca                	add    edx,ecx
c0018591:	8d 14 92             	lea    edx,[edx+edx*4]
c0018594:	01 d0                	add    eax,edx
c0018596:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001859c:	83 fd 07             	cmp    ebp,0x7
c001859f:	75 c7                	jne    c0018568 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00185a1:	05 40 02 00 00       	add    eax,0x240
c00185a6:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00185a9:	83 fd ff             	cmp    ebp,0xffffffff
c00185ac:	0f 8c ee 00 00 00    	jl     c00186a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c00185b2:	0f 84 ac 01 00 00    	je     c0018764 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c00185b8:	85 ed                	test   ebp,ebp
c00185ba:	0f 84 90 01 00 00    	je     c0018750 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c00185c0:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00185c2:	75 a4                	jne    c0018568 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00185c4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00185ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00185ce:	01 d0                	add    eax,edx
c00185d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00185d4:	83 ec 0c             	sub    esp,0xc
c00185d7:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00185dd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00185e0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00185e6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00185ed:	50                   	push   eax
c00185ee:	e8 21 fe ff ff       	call   c0018414 <unblockTask(ThreadControlBlock*)>
c00185f3:	83 c4 10             	add    esp,0x10
c00185f6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00185f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00185fd:	89 f7                	mov    edi,esi
c00185ff:	41                   	inc    ecx
c0018600:	83 f9 10             	cmp    ecx,0x10
c0018603:	0f 85 6b ff ff ff    	jne    c0018574 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0018609:	8d 76 00             	lea    esi,[esi+0x0]
c001860c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0018612:	85 c0                	test   eax,eax
c0018614:	74 62                	je     c0018678 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018616:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c001861c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0018622:	74 54                	je     c0018678 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018624:	83 ec 0c             	sub    esp,0xc
c0018627:	68 64 79 02 c0       	push   0xc0027964
c001862c:	e8 3f 8f 00 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018631:	c7 04 24 64 79 02 c0 	mov    DWORD PTR [esp],0xc0027964
c0018638:	89 c7                	mov    edi,eax
c001863a:	e8 15 8f 00 00       	call   c0021554 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001863f:	83 c4 10             	add    esp,0x10
c0018642:	84 c0                	test   al,al
c0018644:	0f 84 ce 00 00 00    	je     c0018718 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c001864a:	66 90                	xchg   ax,ax
c001864c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001864f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018655:	85 d2                	test   edx,edx
c0018657:	74 0f                	je     c0018668 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0018659:	83 ec 0c             	sub    esp,0xc
c001865c:	8b 02                	mov    eax,DWORD PTR [edx]
c001865e:	52                   	push   edx
c001865f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018662:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018665:	83 c4 10             	add    esp,0x10
c0018668:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0018672:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0018675:	8d 76 00             	lea    esi,[esi+0x0]
c0018678:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001867e:	85 db                	test   ebx,ebx
c0018680:	74 16                	je     c0018698 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018682:	83 ec 0c             	sub    esp,0xc
c0018685:	53                   	push   ebx
c0018686:	e8 91 35 ff ff       	call   c000bc1c <VAS::~VAS()>
c001868b:	58                   	pop    eax
c001868c:	5a                   	pop    edx
c001868d:	6a 14                	push   0x14
c001868f:	53                   	push   ebx
c0018690:	e8 4d 43 ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c0018695:	83 c4 10             	add    esp,0x10
c0018698:	83 c4 1c             	add    esp,0x1c
c001869b:	5b                   	pop    ebx
c001869c:	5e                   	pop    esi
c001869d:	5f                   	pop    edi
c001869e:	5d                   	pop    ebp
c001869f:	c3                   	ret    
c00186a0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00186a4:	83 ec 0c             	sub    esp,0xc
c00186a7:	68 4c 49 02 c0       	push   0xc002494c
c00186ac:	e8 d4 bc ff ff       	call   c0014385 <Krnl::panic(char const*)>
c00186b1:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00186b4:	83 c4 10             	add    esp,0x10
c00186b7:	89 f7                	mov    edi,esi
c00186b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00186bd:	e9 a6 fe ff ff       	jmp    c0018568 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00186c2:	66 90                	xchg   ax,ax
c00186c4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00186ca:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00186d0:	75 1e                	jne    c00186f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00186d2:	83 ec 0c             	sub    esp,0xc
c00186d5:	68 b4 49 02 c0       	push   0xc00249b4
c00186da:	e8 e4 43 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c00186df:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00186e6:	e8 65 fa ff ff       	call   c0018150 <blockTask(TaskState)>
c00186eb:	83 c4 10             	add    esp,0x10
c00186ee:	66 90                	xchg   ax,ax
c00186f0:	83 ec 08             	sub    esp,0x8
c00186f3:	56                   	push   esi
c00186f4:	68 64 79 02 c0       	push   0xc0027964
c00186f9:	e8 32 8f 00 00       	call   c0021630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00186fe:	c7 04 24 64 79 02 c0 	mov    DWORD PTR [esp],0xc0027964
c0018705:	e8 66 8e 00 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001870a:	83 c4 10             	add    esp,0x10
c001870d:	39 f8                	cmp    eax,edi
c001870f:	0f 84 37 ff ff ff    	je     c001864c <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0018715:	8d 76 00             	lea    esi,[esi+0x0]
c0018718:	83 ec 0c             	sub    esp,0xc
c001871b:	68 64 79 02 c0       	push   0xc0027964
c0018720:	e8 4b 8e 00 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018725:	c7 04 24 64 79 02 c0 	mov    DWORD PTR [esp],0xc0027964
c001872c:	89 c6                	mov    esi,eax
c001872e:	e8 45 8e 00 00       	call   c0021578 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018733:	83 c4 10             	add    esp,0x10
c0018736:	39 f3                	cmp    ebx,esi
c0018738:	74 b6                	je     c00186f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c001873a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001873d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018740:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0018746:	75 a8                	jne    c00186f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018748:	e9 77 ff ff ff       	jmp    c00186c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c001874d:	8d 76 00             	lea    esi,[esi+0x0]
c0018750:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018754:	83 ec 0c             	sub    esp,0xc
c0018757:	68 80 49 02 c0       	push   0xc0024980
c001875c:	e9 4b ff ff ff       	jmp    c00186ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018761:	8d 76 00             	lea    esi,[esi+0x0]
c0018764:	8b 36                	mov    esi,DWORD PTR [esi]
c0018766:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001876a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001876d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018770:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0018776:	01 d7                	add    edi,edx
c0018778:	89 f8                	mov    eax,edi
c001877a:	e9 51 fe ff ff       	jmp    c00185d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c001877f:	90                   	nop

c0018780 <cleanerTaskFunction(void*)>:
c0018780:	53                   	push   ebx
c0018781:	83 ec 08             	sub    esp,0x8
c0018784:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018789:	48                   	dec    eax
c001878a:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c001878f:	75 03                	jne    c0018794 <cleanerTaskFunction(void*)+0x14>
c0018791:	fb                   	sti    
c0018792:	66 90                	xchg   ax,ax
c0018794:	fa                   	cli    
c0018795:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c001879a:	80 3d 2c 79 02 c0 00 	cmp    BYTE PTR ds:0xc002792c,0x0
c00187a1:	8d 50 01             	lea    edx,[eax+0x1]
c00187a4:	89 15 48 79 02 c0    	mov    DWORD PTR ds:0xc0027948,edx
c00187aa:	0f 84 ac 00 00 00    	je     c001885c <cleanerTaskFunction(void*)+0xdc>
c00187b0:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00187b5:	85 c0                	test   eax,eax
c00187b7:	75 03                	jne    c00187bc <cleanerTaskFunction(void*)+0x3c>
c00187b9:	fb                   	sti    
c00187ba:	66 90                	xchg   ax,ax
c00187bc:	c6 05 2c 79 02 c0 00 	mov    BYTE PTR ds:0xc002792c,0x0
c00187c3:	fa                   	cli    
c00187c4:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c00187ca:	ff 05 44 79 02 c0    	inc    DWORD PTR ds:0xc0027944
c00187d0:	fa                   	cli    
c00187d1:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c00187d7:	eb 2b                	jmp    c0018804 <cleanerTaskFunction(void*)+0x84>
c00187d9:	8d 76 00             	lea    esi,[esi+0x0]
c00187dc:	83 ec 0c             	sub    esp,0xc
c00187df:	68 4c 79 02 c0       	push   0xc002794c
c00187e4:	e8 87 8d 00 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00187e9:	c7 04 24 4c 79 02 c0 	mov    DWORD PTR [esp],0xc002794c
c00187f0:	89 c3                	mov    ebx,eax
c00187f2:	e8 81 8d 00 00       	call   c0021578 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00187f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187fa:	e8 b9 fc ff ff       	call   c00184b8 <cleanupTerminatedTask(ThreadControlBlock*)>
c00187ff:	83 c4 10             	add    esp,0x10
c0018802:	66 90                	xchg   ax,ax
c0018804:	83 ec 0c             	sub    esp,0xc
c0018807:	68 4c 79 02 c0       	push   0xc002794c
c001880c:	e8 43 8d 00 00       	call   c0021554 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018811:	83 c4 10             	add    esp,0x10
c0018814:	84 c0                	test   al,al
c0018816:	74 c4                	je     c00187dc <cleanerTaskFunction(void*)+0x5c>
c0018818:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c001881d:	48                   	dec    eax
c001881e:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018823:	75 03                	jne    c0018828 <cleanerTaskFunction(void*)+0xa8>
c0018825:	fb                   	sti    
c0018826:	66 90                	xchg   ax,ax
c0018828:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c001882d:	48                   	dec    eax
c001882e:	a3 44 79 02 c0       	mov    ds:0xc0027944,eax
c0018833:	0f 85 4b ff ff ff    	jne    c0018784 <cleanerTaskFunction(void*)+0x4>
c0018839:	a1 40 79 02 c0       	mov    eax,ds:0xc0027940
c001883e:	85 c0                	test   eax,eax
c0018840:	0f 84 3e ff ff ff    	je     c0018784 <cleanerTaskFunction(void*)+0x4>
c0018846:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c0018850:	e8 03 f7 ff ff       	call   c0017f58 <schedule()>
c0018855:	e9 2a ff ff ff       	jmp    c0018784 <cleanerTaskFunction(void*)+0x4>
c001885a:	66 90                	xchg   ax,ax
c001885c:	83 ec 0c             	sub    esp,0xc
c001885f:	6a 02                	push   0x2
c0018861:	e8 c2 f8 ff ff       	call   c0018128 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018866:	83 c4 10             	add    esp,0x10
c0018869:	e9 4e ff ff ff       	jmp    c00187bc <cleanerTaskFunction(void*)+0x3c>
c001886e:	66 90                	xchg   ax,ax

c0018870 <terminateTask(int)>:
c0018870:	83 ec 14             	sub    esp,0x14
c0018873:	fa                   	cli    
c0018874:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c001887a:	ff 05 44 79 02 c0    	inc    DWORD PTR ds:0xc0027944
c0018880:	fa                   	cli    
c0018881:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0018887:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001888b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018890:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0018893:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018898:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001889b:	50                   	push   eax
c001889c:	68 4c 79 02 c0       	push   0xc002794c
c00188a1:	e8 8a 8d 00 00       	call   c0021630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00188a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188ab:	83 c4 10             	add    esp,0x10
c00188ae:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00188b5:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00188ba:	85 c0                	test   eax,eax
c00188bc:	74 5e                	je     c001891c <terminateTask(int)+0xac>
c00188be:	83 ec 0c             	sub    esp,0xc
c00188c1:	c6 05 2c 79 02 c0 01 	mov    BYTE PTR ds:0xc002792c,0x1
c00188c8:	50                   	push   eax
c00188c9:	e8 46 fb ff ff       	call   c0018414 <unblockTask(ThreadControlBlock*)>
c00188ce:	83 c4 10             	add    esp,0x10
c00188d1:	8d 76 00             	lea    esi,[esi+0x0]
c00188d4:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c00188d9:	48                   	dec    eax
c00188da:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00188df:	75 03                	jne    c00188e4 <terminateTask(int)+0x74>
c00188e1:	fb                   	sti    
c00188e2:	66 90                	xchg   ax,ax
c00188e4:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c00188e9:	48                   	dec    eax
c00188ea:	a3 44 79 02 c0       	mov    ds:0xc0027944,eax
c00188ef:	75 0b                	jne    c00188fc <terminateTask(int)+0x8c>
c00188f1:	83 3d 40 79 02 c0 00 	cmp    DWORD PTR ds:0xc0027940,0x0
c00188f8:	75 36                	jne    c0018930 <terminateTask(int)+0xc0>
c00188fa:	66 90                	xchg   ax,ax
c00188fc:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018901:	48                   	dec    eax
c0018902:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018907:	75 03                	jne    c001890c <terminateTask(int)+0x9c>
c0018909:	fb                   	sti    
c001890a:	66 90                	xchg   ax,ax
c001890c:	fa                   	cli    
c001890d:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0018913:	90                   	nop
c0018914:	e8 3f f6 ff ff       	call   c0017f58 <schedule()>
c0018919:	eb e1                	jmp    c00188fc <terminateTask(int)+0x8c>
c001891b:	90                   	nop
c001891c:	83 ec 0c             	sub    esp,0xc
c001891f:	68 b1 48 02 c0       	push   0xc00248b1
c0018924:	e8 9a 41 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0018929:	83 c4 10             	add    esp,0x10
c001892c:	eb a6                	jmp    c00188d4 <terminateTask(int)+0x64>
c001892e:	66 90                	xchg   ax,ax
c0018930:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c001893a:	eb d8                	jmp    c0018914 <terminateTask(int)+0xa4>

c001893c <Thr::terminateFromIRQ(int)>:
c001893c:	83 ec 18             	sub    esp,0x18
c001893f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018943:	e8 28 ff ff ff       	call   c0018870 <terminateTask(int)>

c0018948 <Semaphore::release()>:
c0018948:	83 ec 0c             	sub    esp,0xc
c001894b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001894f:	fa                   	cli    
c0018950:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c0018955:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c001895b:	8d 48 01             	lea    ecx,[eax+0x1]
c001895e:	89 0d 44 79 02 c0    	mov    DWORD PTR ds:0xc0027944,ecx
c0018964:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018967:	85 c9                	test   ecx,ecx
c0018969:	74 41                	je     c00189ac <Semaphore::release()+0x64>
c001896b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001896e:	83 ec 0c             	sub    esp,0xc
c0018971:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018974:	51                   	push   ecx
c0018975:	e8 9a fa ff ff       	call   c0018414 <unblockTask(ThreadControlBlock*)>
c001897a:	a1 44 79 02 c0       	mov    eax,ds:0xc0027944
c001897f:	83 c4 10             	add    esp,0x10
c0018982:	48                   	dec    eax
c0018983:	90                   	nop
c0018984:	a3 44 79 02 c0       	mov    ds:0xc0027944,eax
c0018989:	85 c0                	test   eax,eax
c001898b:	75 0b                	jne    c0018998 <Semaphore::release()+0x50>
c001898d:	a1 40 79 02 c0       	mov    eax,ds:0xc0027940
c0018992:	85 c0                	test   eax,eax
c0018994:	75 1e                	jne    c00189b4 <Semaphore::release()+0x6c>
c0018996:	66 90                	xchg   ax,ax
c0018998:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c001899d:	48                   	dec    eax
c001899e:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c00189a3:	75 03                	jne    c00189a8 <Semaphore::release()+0x60>
c00189a5:	fb                   	sti    
c00189a6:	66 90                	xchg   ax,ax
c00189a8:	83 c4 0c             	add    esp,0xc
c00189ab:	c3                   	ret    
c00189ac:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00189af:	eb d3                	jmp    c0018984 <Semaphore::release()+0x3c>
c00189b1:	8d 76 00             	lea    esi,[esi+0x0]
c00189b4:	c7 05 40 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027940,0x0
c00189be:	e8 95 f5 ff ff       	call   c0017f58 <schedule()>
c00189c3:	eb d3                	jmp    c0018998 <Semaphore::release()+0x50>
c00189c5:	8d 76 00             	lea    esi,[esi+0x0]

c00189c8 <__static_initialization_and_destruction_0(int, int)>:
c00189c8:	83 ec 0c             	sub    esp,0xc
c00189cb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00189d0:	0f 85 8e 00 00 00    	jne    c0018a64 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00189d6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00189de:	0f 85 80 00 00 00    	jne    c0018a64 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00189e4:	83 ec 0c             	sub    esp,0xc
c00189e7:	68 64 79 02 c0       	push   0xc0027964
c00189ec:	e8 eb 8e 00 00       	call   c00218dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00189f1:	83 c4 10             	add    esp,0x10
c00189f4:	83 ec 04             	sub    esp,0x4
c00189f7:	68 a8 56 02 c0       	push   0xc00256a8
c00189fc:	68 64 79 02 c0       	push   0xc0027964
c0018a01:	68 8c 18 02 c0       	push   0xc002188c
c0018a06:	e8 51 3f ff ff       	call   c000c95c <__cxa_atexit>
c0018a0b:	83 c4 10             	add    esp,0x10
c0018a0e:	83 ec 0c             	sub    esp,0xc
c0018a11:	68 58 79 02 c0       	push   0xc0027958
c0018a16:	e8 c1 8e 00 00       	call   c00218dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018a1b:	83 c4 10             	add    esp,0x10
c0018a1e:	83 ec 04             	sub    esp,0x4
c0018a21:	68 a8 56 02 c0       	push   0xc00256a8
c0018a26:	68 58 79 02 c0       	push   0xc0027958
c0018a2b:	68 8c 18 02 c0       	push   0xc002188c
c0018a30:	e8 27 3f ff ff       	call   c000c95c <__cxa_atexit>
c0018a35:	83 c4 10             	add    esp,0x10
c0018a38:	83 ec 0c             	sub    esp,0xc
c0018a3b:	68 4c 79 02 c0       	push   0xc002794c
c0018a40:	e8 97 8e 00 00       	call   c00218dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018a45:	83 c4 10             	add    esp,0x10
c0018a48:	83 ec 04             	sub    esp,0x4
c0018a4b:	68 a8 56 02 c0       	push   0xc00256a8
c0018a50:	68 4c 79 02 c0       	push   0xc002794c
c0018a55:	68 8c 18 02 c0       	push   0xc002188c
c0018a5a:	e8 fd 3e ff ff       	call   c000c95c <__cxa_atexit>
c0018a5f:	83 c4 10             	add    esp,0x10
c0018a62:	66 90                	xchg   ax,ax
c0018a64:	90                   	nop
c0018a65:	83 c4 0c             	add    esp,0xc
c0018a68:	c3                   	ret    
c0018a69:	8d 76 00             	lea    esi,[esi+0x0]

c0018a6c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0018a6c:	83 ec 0c             	sub    esp,0xc
c0018a6f:	83 ec 08             	sub    esp,0x8
c0018a72:	68 ff ff 00 00       	push   0xffff
c0018a77:	6a 01                	push   0x1
c0018a79:	e8 4a ff ff ff       	call   c00189c8 <__static_initialization_and_destruction_0(int, int)>
c0018a7e:	83 c4 10             	add    esp,0x10
c0018a81:	83 c4 0c             	add    esp,0xc
c0018a84:	c3                   	ret    

c0018a85 <Vm::inbv(unsigned short)>:
c0018a85:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a89:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018a8e:	75 06                	jne    c0018a96 <Vm::inbv(unsigned short)+0x11>
c0018a90:	a0 ac 79 02 c0       	mov    al,ds:0xc00279ac
c0018a95:	c3                   	ret    
c0018a96:	ec                   	in     al,dx
c0018a97:	c3                   	ret    

c0018a98 <Vm::outbv(unsigned short, unsigned char)>:
c0018a98:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018aa0:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018aa5:	75 25                	jne    c0018acc <Vm::outbv(unsigned short, unsigned char)+0x34>
c0018aa7:	8b 0d ac 79 02 c0    	mov    ecx,DWORD PTR ds:0xc00279ac
c0018aad:	8d 51 01             	lea    edx,[ecx+0x1]
c0018ab0:	88 81 c0 79 02 c0    	mov    BYTE PTR [ecx-0x3ffd8640],al
c0018ab6:	89 15 ac 79 02 c0    	mov    DWORD PTR ds:0xc00279ac,edx
c0018abc:	83 fa 20             	cmp    edx,0x20
c0018abf:	75 0c                	jne    c0018acd <Vm::outbv(unsigned short, unsigned char)+0x35>
c0018ac1:	c7 05 ac 79 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00279ac,0x1f
c0018acb:	c3                   	ret    
c0018acc:	ee                   	out    dx,al
c0018acd:	c3                   	ret    

c0018ace <Vm::realToLinear(unsigned short, unsigned short)>:
c0018ace:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018ad3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018ad8:	c1 e0 04             	shl    eax,0x4
c0018adb:	01 d0                	add    eax,edx
c0018add:	c3                   	ret    

c0018ade <Vm::getSegment(unsigned int)>:
c0018ade:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ae2:	c1 e8 10             	shr    eax,0x10
c0018ae5:	c3                   	ret    

c0018ae6 <Vm::getOffset(unsigned int)>:
c0018ae6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018aea:	c3                   	ret    

c0018aeb <Vm::mainloop2()>:
c0018aeb:	83 ec 18             	sub    esp,0x18
c0018aee:	fa                   	cli    
c0018aef:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0018af5:	6a 02                	push   0x2
c0018af7:	c6 05 a5 79 02 c0 01 	mov    BYTE PTR ds:0xc00279a5,0x1
c0018afe:	e8 25 f6 ff ff       	call   c0018128 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018b03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018b08:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018b0c:	52                   	push   edx
c0018b0d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0018b11:	52                   	push   edx
c0018b12:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0018b16:	52                   	push   edx
c0018b17:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0018b1b:	50                   	push   eax
c0018b1c:	e8 0e 77 fe ff       	call   c000022f <goToVM86>
c0018b21:	83 c4 2c             	add    esp,0x2c
c0018b24:	c3                   	ret    

c0018b25 <Vm::mainVm8086Loop(void*)>:
c0018b25:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018b2a:	48                   	dec    eax
c0018b2b:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018b30:	75 01                	jne    c0018b33 <Vm::mainVm8086Loop(void*)+0xe>
c0018b32:	fb                   	sti    
c0018b33:	eb b6                	jmp    c0018aeb <Vm::mainloop2()>

c0018b35 <Vm::mainloop3(unsigned long)>:
c0018b35:	83 ec 18             	sub    esp,0x18
c0018b38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b3c:	fa                   	cli    
c0018b3d:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0018b43:	6a 02                	push   0x2
c0018b45:	c6 05 a4 79 02 c0 01 	mov    BYTE PTR ds:0xc00279a4,0x1
c0018b4c:	a3 a0 79 02 c0       	mov    ds:0xc00279a0,eax
c0018b51:	e8 d2 f5 ff ff       	call   c0018128 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018b56:	83 c4 1c             	add    esp,0x1c
c0018b59:	eb 90                	jmp    c0018aeb <Vm::mainloop2()>

c0018b5b <Vm::initialise8086()>:
c0018b5b:	83 ec 0c             	sub    esp,0xc
c0018b5e:	68 80 00 00 00       	push   0x80
c0018b63:	6a 00                	push   0x0
c0018b65:	68 25 8b 01 c0       	push   0xc0018b25
c0018b6a:	ff 35 70 79 02 c0    	push   DWORD PTR ds:0xc0027970
c0018b70:	e8 c7 f1 ff ff       	call   c0017d3c <Process::createThread(void (*)(void*), void*, int)>
c0018b75:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018b7c:	a3 a8 79 02 c0       	mov    ds:0xc00279a8,eax
c0018b81:	68 00 01 00 00       	push   0x100
c0018b86:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c0018b8b:	6a 00                	push   0x0
c0018b8d:	6a 00                	push   0x0
c0018b8f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0018b95:	e8 f4 34 ff ff       	call   c000c08e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018b9a:	83 c4 2c             	add    esp,0x2c
c0018b9d:	c3                   	ret    

c0018b9e <Vm::finish8086()>:
c0018b9e:	53                   	push   ebx
c0018b9f:	83 ec 08             	sub    esp,0x8
c0018ba2:	fa                   	cli    
c0018ba3:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0018ba9:	80 3d a4 79 02 c0 00 	cmp    BYTE PTR ds:0xc00279a4,0x0
c0018bb0:	75 15                	jne    c0018bc7 <Vm::finish8086()+0x29>
c0018bb2:	e8 a1 f3 ff ff       	call   c0017f58 <schedule()>
c0018bb7:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018bbc:	48                   	dec    eax
c0018bbd:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018bc2:	75 de                	jne    c0018ba2 <Vm::finish8086()+0x4>
c0018bc4:	fb                   	sti    
c0018bc5:	eb db                	jmp    c0018ba2 <Vm::finish8086()+0x4>
c0018bc7:	83 ec 0c             	sub    esp,0xc
c0018bca:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0018bd0:	ff 35 a8 79 02 c0    	push   DWORD PTR ds:0xc00279a8
c0018bd6:	c6 05 a4 79 02 c0 00 	mov    BYTE PTR ds:0xc00279a4,0x0
c0018bdd:	e8 32 f8 ff ff       	call   c0018414 <unblockTask(ThreadControlBlock*)>
c0018be2:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018be7:	83 c4 10             	add    esp,0x10
c0018bea:	8d 50 ff             	lea    edx,[eax-0x1]
c0018bed:	89 15 48 79 02 c0    	mov    DWORD PTR ds:0xc0027948,edx
c0018bf3:	85 d2                	test   edx,edx
c0018bf5:	75 01                	jne    c0018bf8 <Vm::finish8086()+0x5a>
c0018bf7:	fb                   	sti    
c0018bf8:	89 d8                	mov    eax,ebx
c0018bfa:	83 c4 08             	add    esp,0x8
c0018bfd:	5b                   	pop    ebx
c0018bfe:	c3                   	ret    

c0018bff <Vm::getOutput8086(unsigned char*)>:
c0018bff:	57                   	push   edi
c0018c00:	8b 0d ac 79 02 c0    	mov    ecx,DWORD PTR ds:0xc00279ac
c0018c06:	56                   	push   esi
c0018c07:	be c0 79 02 c0       	mov    esi,0xc00279c0
c0018c0c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018c10:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018c12:	a1 ac 79 02 c0       	mov    eax,ds:0xc00279ac
c0018c17:	5e                   	pop    esi
c0018c18:	c7 05 ac 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00279ac,0x0
c0018c22:	5f                   	pop    edi
c0018c23:	c3                   	ret    

c0018c24 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018c24:	55                   	push   ebp
c0018c25:	57                   	push   edi
c0018c26:	56                   	push   esi
c0018c27:	53                   	push   ebx
c0018c28:	83 ec 2c             	sub    esp,0x2c
c0018c2b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0018c2f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018c33:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0018c37:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0018c3b:	fa                   	cli    
c0018c3c:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0018c42:	0f b6 35 a5 79 02 c0 	movzx  esi,BYTE PTR ds:0xc00279a5
c0018c49:	89 f0                	mov    eax,esi
c0018c4b:	84 c0                	test   al,al
c0018c4d:	75 1d                	jne    c0018c6c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0018c4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c53:	e8 00 f3 ff ff       	call   c0017f58 <schedule()>
c0018c58:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018c5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c61:	48                   	dec    eax
c0018c62:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018c67:	75 d2                	jne    c0018c3b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018c69:	fb                   	sti    
c0018c6a:	eb cf                	jmp    c0018c3b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018c6c:	a1 a8 79 02 c0       	mov    eax,ds:0xc00279a8
c0018c71:	c7 05 ac 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00279ac,0x0
c0018c7b:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0018c7f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0018c83:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0018c87:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0018c8b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0018c8f:	50                   	push   eax
c0018c90:	6a 20                	push   0x20
c0018c92:	6a 00                	push   0x0
c0018c94:	68 c0 79 02 c0       	push   0xc00279c0
c0018c99:	e8 e6 79 fe ff       	call   c0000684 <memset>
c0018c9e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018ca5:	e8 19 0d ff ff       	call   c00099c3 <malloc>
c0018caa:	83 c4 0c             	add    esp,0xc
c0018cad:	89 c3                	mov    ebx,eax
c0018caf:	ff 35 70 79 02 c0    	push   DWORD PTR ds:0xc0027970
c0018cb5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018cb9:	50                   	push   eax
c0018cba:	e8 6f 43 ff ff       	call   c000d02e <File::File(char const*, Process*)>
c0018cbf:	83 c4 10             	add    esp,0x10
c0018cc2:	85 db                	test   ebx,ebx
c0018cc4:	75 0a                	jne    c0018cd0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0018cc6:	83 ec 0c             	sub    esp,0xc
c0018cc9:	68 dc 49 02 c0       	push   0xc00249dc
c0018cce:	eb 3e                	jmp    c0018d0e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018cd0:	50                   	push   eax
c0018cd1:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018cd5:	50                   	push   eax
c0018cd6:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018cda:	50                   	push   eax
c0018cdb:	53                   	push   ebx
c0018cdc:	e8 5d 46 ff ff       	call   c000d33e <File::stat(unsigned long long*, bool*)>
c0018ce1:	83 c4 10             	add    esp,0x10
c0018ce4:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0018ce9:	74 0a                	je     c0018cf5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0018ceb:	83 ec 0c             	sub    esp,0xc
c0018cee:	68 f0 49 02 c0       	push   0xc00249f0
c0018cf3:	eb 19                	jmp    c0018d0e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018cf5:	51                   	push   ecx
c0018cf6:	51                   	push   ecx
c0018cf7:	6a 01                	push   0x1
c0018cf9:	53                   	push   ebx
c0018cfa:	e8 93 43 ff ff       	call   c000d092 <File::open(FileOpenMode)>
c0018cff:	83 c4 10             	add    esp,0x10
c0018d02:	85 c0                	test   eax,eax
c0018d04:	74 24                	je     c0018d2a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0018d06:	83 ec 0c             	sub    esp,0xc
c0018d09:	68 09 4a 02 c0       	push   0xc0024a09
c0018d0e:	e8 72 b6 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0018d13:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018d18:	83 c4 10             	add    esp,0x10
c0018d1b:	48                   	dec    eax
c0018d1c:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018d21:	85 c0                	test   eax,eax
c0018d23:	75 01                	jne    c0018d26 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0018d25:	fb                   	sti    
c0018d26:	31 f6                	xor    esi,esi
c0018d28:	eb 58                	jmp    c0018d82 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0018d2a:	0f b7 ed             	movzx  ebp,bp
c0018d2d:	50                   	push   eax
c0018d2e:	0f b7 ff             	movzx  edi,di
c0018d31:	50                   	push   eax
c0018d32:	55                   	push   ebp
c0018d33:	57                   	push   edi
c0018d34:	e8 95 fd ff ff       	call   c0018ace <Vm::realToLinear(unsigned short, unsigned short)>
c0018d39:	5a                   	pop    edx
c0018d3a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018d3c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018d40:	51                   	push   ecx
c0018d41:	50                   	push   eax
c0018d42:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d46:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d4a:	53                   	push   ebx
c0018d4b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018d4e:	83 c4 14             	add    esp,0x14
c0018d51:	53                   	push   ebx
c0018d52:	e8 99 43 ff ff       	call   c000d0f0 <File::close()>
c0018d57:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c0018d5c:	83 c4 10             	add    esp,0x10
c0018d5f:	48                   	dec    eax
c0018d60:	c6 05 a5 79 02 c0 00 	mov    BYTE PTR ds:0xc00279a5,0x0
c0018d67:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0018d6c:	85 c0                	test   eax,eax
c0018d6e:	75 01                	jne    c0018d71 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0018d70:	fb                   	sti    
c0018d71:	83 ec 0c             	sub    esp,0xc
c0018d74:	ff 35 a8 79 02 c0    	push   DWORD PTR ds:0xc00279a8
c0018d7a:	e8 95 f6 ff ff       	call   c0018414 <unblockTask(ThreadControlBlock*)>
c0018d7f:	83 c4 10             	add    esp,0x10
c0018d82:	83 c4 2c             	add    esp,0x2c
c0018d85:	89 f0                	mov    eax,esi
c0018d87:	5b                   	pop    ebx
c0018d88:	5e                   	pop    esi
c0018d89:	5f                   	pop    edi
c0018d8a:	5d                   	pop    ebp
c0018d8b:	c3                   	ret    

c0018d8c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018d8c:	57                   	push   edi
c0018d8d:	56                   	push   esi
c0018d8e:	53                   	push   ebx
c0018d8f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018d93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d97:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018d9b:	83 e8 06             	sub    eax,0x6
c0018d9e:	0f b7 c0             	movzx  eax,ax
c0018da1:	50                   	push   eax
c0018da2:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018da7:	50                   	push   eax
c0018da8:	e8 21 fd ff ff       	call   c0018ace <Vm::realToLinear(unsigned short, unsigned short)>
c0018dad:	5a                   	pop    edx
c0018dae:	5e                   	pop    esi
c0018daf:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018db2:	8d 56 fa             	lea    edx,[esi-0x6]
c0018db5:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018dbb:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018dbe:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018dc1:	83 c2 02             	add    edx,0x2
c0018dc4:	66 89 10             	mov    WORD PTR [eax],dx
c0018dc7:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018dca:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018dce:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018dd1:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018dd5:	89 d6                	mov    esi,edx
c0018dd7:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018ddd:	66 81 e6 ff fd       	and    si,0xfdff
c0018de2:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0018de6:	74 07                	je     c0018def <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018de8:	89 d6                	mov    esi,edx
c0018dea:	66 81 ce 00 02       	or     si,0x200
c0018def:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018df3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018df8:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0018dfc:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018e04:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018e07:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018e0f:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018e12:	5b                   	pop    ebx
c0018e13:	5e                   	pop    esi
c0018e14:	5f                   	pop    edi
c0018e15:	c3                   	ret    

c0018e16 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018e16:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e1b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e20:	c1 e0 04             	shl    eax,0x4
c0018e23:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018e26:	c3                   	ret    

c0018e27 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018e27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e2c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e31:	c1 e0 04             	shl    eax,0x4
c0018e34:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018e38:	c3                   	ret    

c0018e39 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018e39:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e3e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e43:	c1 e0 04             	shl    eax,0x4
c0018e46:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018e49:	c3                   	ret    

c0018e4a <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018e4a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e4f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e54:	c1 e0 04             	shl    eax,0x4
c0018e57:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e5b:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018e5e:	c3                   	ret    

c0018e5f <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018e5f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e64:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e69:	c1 e0 04             	shl    eax,0x4
c0018e6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e70:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018e74:	c3                   	ret    

c0018e75 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018e75:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e7a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e7f:	c1 e0 04             	shl    eax,0x4
c0018e82:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e86:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018e89:	c3                   	ret    

c0018e8a <Vm::faultHandler(regs*)>:
c0018e8a:	55                   	push   ebp
c0018e8b:	57                   	push   edi
c0018e8c:	56                   	push   esi
c0018e8d:	53                   	push   ebx
c0018e8e:	83 ec 1c             	sub    esp,0x1c
c0018e91:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018e95:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018e98:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018e9c:	0f b7 f8             	movzx  edi,ax
c0018e9f:	52                   	push   edx
c0018ea0:	0f b7 c0             	movzx  eax,ax
c0018ea3:	50                   	push   eax
c0018ea4:	e8 25 fc ff ff       	call   c0018ace <Vm::realToLinear(unsigned short, unsigned short)>
c0018ea9:	5a                   	pop    edx
c0018eaa:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018ead:	59                   	pop    ecx
c0018eae:	89 c1                	mov    ecx,eax
c0018eb0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018eb3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018eb7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018ebc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018ec0:	0f b7 c5             	movzx  eax,bp
c0018ec3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ec7:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018ecb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018ecf:	e8 fa fb ff ff       	call   c0018ace <Vm::realToLinear(unsigned short, unsigned short)>
c0018ed4:	5e                   	pop    esi
c0018ed5:	be 06 00 00 00       	mov    esi,0x6
c0018eda:	5a                   	pop    edx
c0018edb:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018ee0:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018ee5:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0018ee8:	80 fa 9d             	cmp    dl,0x9d
c0018eeb:	0f 84 2c 02 00 00    	je     c001911d <Vm::faultHandler(regs*)+0x293>
c0018ef1:	0f 87 91 00 00 00    	ja     c0018f88 <Vm::faultHandler(regs*)+0xfe>
c0018ef7:	80 fa 66             	cmp    dl,0x66
c0018efa:	0f 84 98 01 00 00    	je     c0019098 <Vm::faultHandler(regs*)+0x20e>
c0018f00:	77 47                	ja     c0018f49 <Vm::faultHandler(regs*)+0xbf>
c0018f02:	80 fa 36             	cmp    dl,0x36
c0018f05:	0f 84 80 01 00 00    	je     c001908b <Vm::faultHandler(regs*)+0x201>
c0018f0b:	77 1a                	ja     c0018f27 <Vm::faultHandler(regs*)+0x9d>
c0018f0d:	80 fa 26             	cmp    dl,0x26
c0018f10:	0f 84 4e 01 00 00    	je     c0019064 <Vm::faultHandler(regs*)+0x1da>
c0018f16:	80 fa 2e             	cmp    dl,0x2e
c0018f19:	0f 85 e2 05 00 00    	jne    c0019501 <Vm::faultHandler(regs*)+0x677>
c0018f1f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018f22:	31 f6                	xor    esi,esi
c0018f24:	41                   	inc    ecx
c0018f25:	eb be                	jmp    c0018ee5 <Vm::faultHandler(regs*)+0x5b>
c0018f27:	80 fa 64             	cmp    dl,0x64
c0018f2a:	0f 84 41 01 00 00    	je     c0019071 <Vm::faultHandler(regs*)+0x1e7>
c0018f30:	0f 87 48 01 00 00    	ja     c001907e <Vm::faultHandler(regs*)+0x1f4>
c0018f36:	80 fa 3e             	cmp    dl,0x3e
c0018f39:	0f 85 c2 05 00 00    	jne    c0019501 <Vm::faultHandler(regs*)+0x677>
c0018f3f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018f42:	be 01 00 00 00       	mov    esi,0x1
c0018f47:	eb db                	jmp    c0018f24 <Vm::faultHandler(regs*)+0x9a>
c0018f49:	80 fa 6d             	cmp    dl,0x6d
c0018f4c:	0f 84 ec 02 00 00    	je     c001923e <Vm::faultHandler(regs*)+0x3b4>
c0018f52:	77 17                	ja     c0018f6b <Vm::faultHandler(regs*)+0xe1>
c0018f54:	80 fa 67             	cmp    dl,0x67
c0018f57:	0f 84 48 01 00 00    	je     c00190a5 <Vm::faultHandler(regs*)+0x21b>
c0018f5d:	80 fa 6c             	cmp    dl,0x6c
c0018f60:	0f 84 69 02 00 00    	je     c00191cf <Vm::faultHandler(regs*)+0x345>
c0018f66:	e9 96 05 00 00       	jmp    c0019501 <Vm::faultHandler(regs*)+0x677>
c0018f6b:	80 fa 6f             	cmp    dl,0x6f
c0018f6e:	0f 84 f4 03 00 00    	je     c0019368 <Vm::faultHandler(regs*)+0x4de>
c0018f74:	0f 82 59 03 00 00    	jb     c00192d3 <Vm::faultHandler(regs*)+0x449>
c0018f7a:	80 fa 9c             	cmp    dl,0x9c
c0018f7d:	0f 84 2f 01 00 00    	je     c00190b2 <Vm::faultHandler(regs*)+0x228>
c0018f83:	e9 79 05 00 00       	jmp    c0019501 <Vm::faultHandler(regs*)+0x677>
c0018f88:	80 fa ec             	cmp    dl,0xec
c0018f8b:	0f 84 14 05 00 00    	je     c00194a5 <Vm::faultHandler(regs*)+0x61b>
c0018f91:	77 7b                	ja     c001900e <Vm::faultHandler(regs*)+0x184>
c0018f93:	80 fa e4             	cmp    dl,0xe4
c0018f96:	0f 84 93 04 00 00    	je     c001942f <Vm::faultHandler(regs*)+0x5a5>
c0018f9c:	77 53                	ja     c0018ff1 <Vm::faultHandler(regs*)+0x167>
c0018f9e:	80 fa cd             	cmp    dl,0xcd
c0018fa1:	0f 84 d9 01 00 00    	je     c0019180 <Vm::faultHandler(regs*)+0x2f6>
c0018fa7:	80 fa cf             	cmp    dl,0xcf
c0018faa:	0f 85 51 05 00 00    	jne    c0019501 <Vm::faultHandler(regs*)+0x677>
c0018fb0:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018fb3:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018fb6:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018fba:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018fbd:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018fc1:	81 ca 00 02 02 00    	or     edx,0x20200
c0018fc7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018fca:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018fce:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018fd4:	66 c1 e8 09          	shr    ax,0x9
c0018fd8:	83 e0 01             	and    eax,0x1
c0018fdb:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0018fde:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018fe1:	83 c0 06             	add    eax,0x6
c0018fe4:	25 ff ff 00 00       	and    eax,0xffff
c0018fe9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018fec:	e9 0c 05 00 00       	jmp    c00194fd <Vm::faultHandler(regs*)+0x673>
c0018ff1:	80 fa e6             	cmp    dl,0xe6
c0018ff4:	0f 84 7f 04 00 00    	je     c0019479 <Vm::faultHandler(regs*)+0x5ef>
c0018ffa:	0f 82 4b 04 00 00    	jb     c001944b <Vm::faultHandler(regs*)+0x5c1>
c0019000:	80 fa e7             	cmp    dl,0xe7
c0019003:	0f 84 87 04 00 00    	je     c0019490 <Vm::faultHandler(regs*)+0x606>
c0019009:	e9 f3 04 00 00       	jmp    c0019501 <Vm::faultHandler(regs*)+0x677>
c001900e:	80 fa ef             	cmp    dl,0xef
c0019011:	0f 84 d1 04 00 00    	je     c00194e8 <Vm::faultHandler(regs*)+0x65e>
c0019017:	77 28                	ja     c0019041 <Vm::faultHandler(regs*)+0x1b7>
c0019019:	80 fa ed             	cmp    dl,0xed
c001901c:	0f 84 9f 04 00 00    	je     c00194c1 <Vm::faultHandler(regs*)+0x637>
c0019022:	80 fa ee             	cmp    dl,0xee
c0019025:	0f 85 d6 04 00 00    	jne    c0019501 <Vm::faultHandler(regs*)+0x677>
c001902b:	50                   	push   eax
c001902c:	50                   	push   eax
c001902d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019031:	50                   	push   eax
c0019032:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019036:	50                   	push   eax
c0019037:	e8 5c fa ff ff       	call   c0018a98 <Vm::outbv(unsigned short, unsigned char)>
c001903c:	e9 9f 04 00 00       	jmp    c00194e0 <Vm::faultHandler(regs*)+0x656>
c0019041:	80 fa fa             	cmp    dl,0xfa
c0019044:	0f 84 69 01 00 00    	je     c00191b3 <Vm::faultHandler(regs*)+0x329>
c001904a:	80 fa fb             	cmp    dl,0xfb
c001904d:	0f 84 6e 01 00 00    	je     c00191c1 <Vm::faultHandler(regs*)+0x337>
c0019053:	80 fa f3             	cmp    dl,0xf3
c0019056:	0f 85 a5 04 00 00    	jne    c0019501 <Vm::faultHandler(regs*)+0x677>
c001905c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001905f:	e9 c0 fe ff ff       	jmp    c0018f24 <Vm::faultHandler(regs*)+0x9a>
c0019064:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019067:	be 02 00 00 00       	mov    esi,0x2
c001906c:	e9 b3 fe ff ff       	jmp    c0018f24 <Vm::faultHandler(regs*)+0x9a>
c0019071:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019074:	be 03 00 00 00       	mov    esi,0x3
c0019079:	e9 a6 fe ff ff       	jmp    c0018f24 <Vm::faultHandler(regs*)+0x9a>
c001907e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019081:	be 04 00 00 00       	mov    esi,0x4
c0019086:	e9 99 fe ff ff       	jmp    c0018f24 <Vm::faultHandler(regs*)+0x9a>
c001908b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001908e:	be 05 00 00 00       	mov    esi,0x5
c0019093:	e9 8c fe ff ff       	jmp    c0018f24 <Vm::faultHandler(regs*)+0x9a>
c0019098:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001909b:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00190a0:	e9 7f fe ff ff       	jmp    c0018f24 <Vm::faultHandler(regs*)+0x9a>
c00190a5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00190a8:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00190ad:	e9 72 fe ff ff       	jmp    c0018f24 <Vm::faultHandler(regs*)+0x9a>
c00190b2:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00190b5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00190b9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00190be:	74 30                	je     c00190f0 <Vm::faultHandler(regs*)+0x266>
c00190c0:	83 e9 04             	sub    ecx,0x4
c00190c3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00190c9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00190cf:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00190d2:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00190d5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00190db:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00190df:	0f 84 15 04 00 00    	je     c00194fa <Vm::faultHandler(regs*)+0x670>
c00190e5:	80 ce 02             	or     dh,0x2
c00190e8:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00190eb:	e9 0a 04 00 00       	jmp    c00194fa <Vm::faultHandler(regs*)+0x670>
c00190f0:	83 e9 02             	sub    ecx,0x2
c00190f3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00190f9:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00190fc:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019100:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019106:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001910a:	74 05                	je     c0019111 <Vm::faultHandler(regs*)+0x287>
c001910c:	80 ce 02             	or     dh,0x2
c001910f:	eb 03                	jmp    c0019114 <Vm::faultHandler(regs*)+0x28a>
c0019111:	80 e6 fd             	and    dh,0xfd
c0019114:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019118:	e9 dd 03 00 00       	jmp    c00194fa <Vm::faultHandler(regs*)+0x670>
c001911d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019122:	74 2a                	je     c001914e <Vm::faultHandler(regs*)+0x2c4>
c0019124:	8b 10                	mov    edx,DWORD PTR [eax]
c0019126:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001912c:	81 ca 00 02 02 00    	or     edx,0x20200
c0019132:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019135:	8b 00                	mov    eax,DWORD PTR [eax]
c0019137:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001913d:	c1 e8 09             	shr    eax,0x9
c0019140:	83 e0 01             	and    eax,0x1
c0019143:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019146:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019149:	83 c0 04             	add    eax,0x4
c001914c:	eb 25                	jmp    c0019173 <Vm::faultHandler(regs*)+0x2e9>
c001914e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019151:	81 ca 00 02 02 00    	or     edx,0x20200
c0019157:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001915a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001915d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019163:	66 c1 e8 09          	shr    ax,0x9
c0019167:	83 e0 01             	and    eax,0x1
c001916a:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001916d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019170:	83 c0 02             	add    eax,0x2
c0019173:	25 ff ff 00 00       	and    eax,0xffff
c0019178:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001917b:	e9 7a 03 00 00       	jmp    c00194fa <Vm::faultHandler(regs*)+0x670>
c0019180:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019184:	3c ee                	cmp    al,0xee
c0019186:	75 10                	jne    c0019198 <Vm::faultHandler(regs*)+0x30e>
c0019188:	83 ec 0c             	sub    esp,0xc
c001918b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001918e:	e8 a2 f9 ff ff       	call   c0018b35 <Vm::mainloop3(unsigned long)>
c0019193:	e9 4b 03 00 00       	jmp    c00194e3 <Vm::faultHandler(regs*)+0x659>
c0019198:	83 ec 0c             	sub    esp,0xc
c001919b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001919f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00191a3:	51                   	push   ecx
c00191a4:	50                   	push   eax
c00191a5:	53                   	push   ebx
c00191a6:	e8 e1 fb ff ff       	call   c0018d8c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00191ab:	83 c4 20             	add    esp,0x20
c00191ae:	e9 4a 03 00 00       	jmp    c00194fd <Vm::faultHandler(regs*)+0x673>
c00191b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191b8:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00191bc:	e9 39 03 00 00       	jmp    c00194fa <Vm::faultHandler(regs*)+0x670>
c00191c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191c6:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00191ca:	e9 2b 03 00 00       	jmp    c00194fa <Vm::faultHandler(regs*)+0x670>
c00191cf:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00191d2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00191d7:	74 2b                	je     c0019204 <Vm::faultHandler(regs*)+0x37a>
c00191d9:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00191e0:	76 22                	jbe    c0019204 <Vm::faultHandler(regs*)+0x37a>
c00191e2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00191e6:	50                   	push   eax
c00191e7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00191eb:	50                   	push   eax
c00191ec:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00191f0:	50                   	push   eax
c00191f1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00191f5:	50                   	push   eax
c00191f6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00191fa:	50                   	push   eax
c00191fb:	6a 6c                	push   0x6c
c00191fd:	6a 6c                	push   0x6c
c00191ff:	e9 b9 01 00 00       	jmp    c00193bd <Vm::faultHandler(regs*)+0x533>
c0019204:	83 ec 0c             	sub    esp,0xc
c0019207:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001920b:	0f b7 f6             	movzx  esi,si
c001920e:	50                   	push   eax
c001920f:	e8 71 f8 ff ff       	call   c0018a85 <Vm::inbv(unsigned short)>
c0019214:	83 c4 0c             	add    esp,0xc
c0019217:	0f b6 c0             	movzx  eax,al
c001921a:	50                   	push   eax
c001921b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001921f:	50                   	push   eax
c0019220:	56                   	push   esi
c0019221:	e8 24 fc ff ff       	call   c0018e4a <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019226:	83 c4 10             	add    esp,0x10
c0019229:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001922c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019230:	74 03                	je     c0019235 <Vm::faultHandler(regs*)+0x3ab>
c0019232:	48                   	dec    eax
c0019233:	eb 01                	jmp    c0019236 <Vm::faultHandler(regs*)+0x3ac>
c0019235:	40                   	inc    eax
c0019236:	0f b7 c0             	movzx  eax,ax
c0019239:	e9 8d 00 00 00       	jmp    c00192cb <Vm::faultHandler(regs*)+0x441>
c001923e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019241:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019244:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019249:	74 29                	je     c0019274 <Vm::faultHandler(regs*)+0x3ea>
c001924b:	3d ff ff 00 00       	cmp    eax,0xffff
c0019250:	76 22                	jbe    c0019274 <Vm::faultHandler(regs*)+0x3ea>
c0019252:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019256:	50                   	push   eax
c0019257:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001925b:	50                   	push   eax
c001925c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019260:	50                   	push   eax
c0019261:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019265:	50                   	push   eax
c0019266:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001926a:	50                   	push   eax
c001926b:	6a 6d                	push   0x6d
c001926d:	6a 6d                	push   0x6d
c001926f:	e9 49 01 00 00       	jmp    c00193bd <Vm::faultHandler(regs*)+0x533>
c0019274:	0f b7 c8             	movzx  ecx,ax
c0019277:	0f b7 f6             	movzx  esi,si
c001927a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001927d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019282:	74 20                	je     c00192a4 <Vm::faultHandler(regs*)+0x41a>
c0019284:	ed                   	in     eax,dx
c0019285:	55                   	push   ebp
c0019286:	50                   	push   eax
c0019287:	51                   	push   ecx
c0019288:	56                   	push   esi
c0019289:	e8 e7 fb ff ff       	call   c0018e75 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001928e:	83 c4 10             	add    esp,0x10
c0019291:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019294:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019298:	74 05                	je     c001929f <Vm::faultHandler(regs*)+0x415>
c001929a:	83 e8 04             	sub    eax,0x4
c001929d:	eb 27                	jmp    c00192c6 <Vm::faultHandler(regs*)+0x43c>
c001929f:	83 c0 04             	add    eax,0x4
c00192a2:	eb 22                	jmp    c00192c6 <Vm::faultHandler(regs*)+0x43c>
c00192a4:	66 ed                	in     ax,dx
c00192a6:	0f b7 c0             	movzx  eax,ax
c00192a9:	57                   	push   edi
c00192aa:	50                   	push   eax
c00192ab:	51                   	push   ecx
c00192ac:	56                   	push   esi
c00192ad:	e8 ad fb ff ff       	call   c0018e5f <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00192b2:	83 c4 10             	add    esp,0x10
c00192b5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00192b8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00192bc:	74 05                	je     c00192c3 <Vm::faultHandler(regs*)+0x439>
c00192be:	83 e8 02             	sub    eax,0x2
c00192c1:	eb 03                	jmp    c00192c6 <Vm::faultHandler(regs*)+0x43c>
c00192c3:	83 c0 02             	add    eax,0x2
c00192c6:	25 ff ff 00 00       	and    eax,0xffff
c00192cb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00192ce:	e9 27 02 00 00       	jmp    c00194fa <Vm::faultHandler(regs*)+0x670>
c00192d3:	8d 46 ff             	lea    eax,[esi-0x1]
c00192d6:	3c 05                	cmp    al,0x5
c00192d8:	77 24                	ja     c00192fe <Vm::faultHandler(regs*)+0x474>
c00192da:	0f b6 c0             	movzx  eax,al
c00192dd:	ff 24 85 7c 4a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb584]
c00192e4:	0f b7 fd             	movzx  edi,bp
c00192e7:	eb 15                	jmp    c00192fe <Vm::faultHandler(regs*)+0x474>
c00192e9:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00192ed:	eb 0f                	jmp    c00192fe <Vm::faultHandler(regs*)+0x474>
c00192ef:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00192f3:	eb 09                	jmp    c00192fe <Vm::faultHandler(regs*)+0x474>
c00192f5:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00192f9:	eb 03                	jmp    c00192fe <Vm::faultHandler(regs*)+0x474>
c00192fb:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00192fe:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019301:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019306:	74 29                	je     c0019331 <Vm::faultHandler(regs*)+0x4a7>
c0019308:	3d ff ff 00 00       	cmp    eax,0xffff
c001930d:	76 22                	jbe    c0019331 <Vm::faultHandler(regs*)+0x4a7>
c001930f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019313:	50                   	push   eax
c0019314:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019318:	50                   	push   eax
c0019319:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001931d:	50                   	push   eax
c001931e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019322:	50                   	push   eax
c0019323:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019327:	50                   	push   eax
c0019328:	6a 6e                	push   0x6e
c001932a:	6a 6e                	push   0x6e
c001932c:	e9 8c 00 00 00       	jmp    c00193bd <Vm::faultHandler(regs*)+0x533>
c0019331:	0f b7 c0             	movzx  eax,ax
c0019334:	52                   	push   edx
c0019335:	52                   	push   edx
c0019336:	50                   	push   eax
c0019337:	57                   	push   edi
c0019338:	e8 d9 fa ff ff       	call   c0018e16 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001933d:	59                   	pop    ecx
c001933e:	0f b6 c0             	movzx  eax,al
c0019341:	5e                   	pop    esi
c0019342:	50                   	push   eax
c0019343:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019347:	50                   	push   eax
c0019348:	e8 4b f7 ff ff       	call   c0018a98 <Vm::outbv(unsigned short, unsigned char)>
c001934d:	83 c4 10             	add    esp,0x10
c0019350:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019353:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019357:	74 03                	je     c001935c <Vm::faultHandler(regs*)+0x4d2>
c0019359:	48                   	dec    eax
c001935a:	eb 01                	jmp    c001935d <Vm::faultHandler(regs*)+0x4d3>
c001935c:	40                   	inc    eax
c001935d:	0f b7 c0             	movzx  eax,ax
c0019360:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019363:	e9 92 01 00 00       	jmp    c00194fa <Vm::faultHandler(regs*)+0x670>
c0019368:	8d 46 ff             	lea    eax,[esi-0x1]
c001936b:	3c 05                	cmp    al,0x5
c001936d:	77 1f                	ja     c001938e <Vm::faultHandler(regs*)+0x504>
c001936f:	0f b6 c0             	movzx  eax,al
c0019372:	ff 24 85 94 4a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb56c]
c0019379:	89 ef                	mov    edi,ebp
c001937b:	eb 11                	jmp    c001938e <Vm::faultHandler(regs*)+0x504>
c001937d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0019380:	eb 0c                	jmp    c001938e <Vm::faultHandler(regs*)+0x504>
c0019382:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0019385:	eb 07                	jmp    c001938e <Vm::faultHandler(regs*)+0x504>
c0019387:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001938a:	eb 02                	jmp    c001938e <Vm::faultHandler(regs*)+0x504>
c001938c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001938e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019391:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019396:	74 37                	je     c00193cf <Vm::faultHandler(regs*)+0x545>
c0019398:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001939e:	76 2f                	jbe    c00193cf <Vm::faultHandler(regs*)+0x545>
c00193a0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00193a4:	50                   	push   eax
c00193a5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00193a9:	50                   	push   eax
c00193aa:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00193ae:	50                   	push   eax
c00193af:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00193b3:	50                   	push   eax
c00193b4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00193b8:	50                   	push   eax
c00193b9:	6a 6f                	push   0x6f
c00193bb:	6a 6f                	push   0x6f
c00193bd:	68 22 4a 02 c0       	push   0xc0024a22
c00193c2:	e8 fc 36 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c00193c7:	83 c4 20             	add    esp,0x20
c00193ca:	e9 86 01 00 00       	jmp    c0019555 <Vm::faultHandler(regs*)+0x6cb>
c00193cf:	0f b7 d7             	movzx  edx,di
c00193d2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00193d5:	0f b7 c6             	movzx  eax,si
c00193d8:	81 e1 00 04 00 00    	and    ecx,0x400
c00193de:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00193e1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00193e6:	74 1d                	je     c0019405 <Vm::faultHandler(regs*)+0x57b>
c00193e8:	55                   	push   ebp
c00193e9:	55                   	push   ebp
c00193ea:	50                   	push   eax
c00193eb:	52                   	push   edx
c00193ec:	e8 48 fa ff ff       	call   c0018e39 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00193f1:	83 c4 10             	add    esp,0x10
c00193f4:	89 fa                	mov    edx,edi
c00193f6:	ef                   	out    dx,eax
c00193f7:	85 c9                	test   ecx,ecx
c00193f9:	74 05                	je     c0019400 <Vm::faultHandler(regs*)+0x576>
c00193fb:	83 ee 04             	sub    esi,0x4
c00193fe:	eb 21                	jmp    c0019421 <Vm::faultHandler(regs*)+0x597>
c0019400:	83 c6 04             	add    esi,0x4
c0019403:	eb 1c                	jmp    c0019421 <Vm::faultHandler(regs*)+0x597>
c0019405:	55                   	push   ebp
c0019406:	55                   	push   ebp
c0019407:	50                   	push   eax
c0019408:	52                   	push   edx
c0019409:	e8 19 fa ff ff       	call   c0018e27 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001940e:	83 c4 10             	add    esp,0x10
c0019411:	89 fa                	mov    edx,edi
c0019413:	66 ef                	out    dx,ax
c0019415:	85 c9                	test   ecx,ecx
c0019417:	74 05                	je     c001941e <Vm::faultHandler(regs*)+0x594>
c0019419:	83 ee 02             	sub    esi,0x2
c001941c:	eb 03                	jmp    c0019421 <Vm::faultHandler(regs*)+0x597>
c001941e:	83 c6 02             	add    esi,0x2
c0019421:	81 e6 ff ff 00 00    	and    esi,0xffff
c0019427:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001942a:	e9 cb 00 00 00       	jmp    c00194fa <Vm::faultHandler(regs*)+0x670>
c001942f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019436:	83 ec 0c             	sub    esp,0xc
c0019439:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001943d:	50                   	push   eax
c001943e:	e8 42 f6 ff ff       	call   c0018a85 <Vm::inbv(unsigned short)>
c0019443:	0f b6 c0             	movzx  eax,al
c0019446:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019449:	eb 3f                	jmp    c001948a <Vm::faultHandler(regs*)+0x600>
c001944b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019450:	74 07                	je     c0019459 <Vm::faultHandler(regs*)+0x5cf>
c0019452:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019456:	ed                   	in     eax,dx
c0019457:	eb 14                	jmp    c001946d <Vm::faultHandler(regs*)+0x5e3>
c0019459:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001945c:	66 31 f6             	xor    si,si
c001945f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0019462:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019466:	66 ed                	in     ax,dx
c0019468:	0f b7 c0             	movzx  eax,ax
c001946b:	09 f0                	or     eax,esi
c001946d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019470:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019474:	e9 84 00 00 00       	jmp    c00194fd <Vm::faultHandler(regs*)+0x673>
c0019479:	52                   	push   edx
c001947a:	52                   	push   edx
c001947b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001947f:	50                   	push   eax
c0019480:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019484:	50                   	push   eax
c0019485:	e8 0e f6 ff ff       	call   c0018a98 <Vm::outbv(unsigned short, unsigned char)>
c001948a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001948e:	eb 53                	jmp    c00194e3 <Vm::faultHandler(regs*)+0x659>
c0019490:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019493:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019497:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001949c:	74 03                	je     c00194a1 <Vm::faultHandler(regs*)+0x617>
c001949e:	ef                   	out    dx,eax
c001949f:	eb cf                	jmp    c0019470 <Vm::faultHandler(regs*)+0x5e6>
c00194a1:	66 ef                	out    dx,ax
c00194a3:	eb cb                	jmp    c0019470 <Vm::faultHandler(regs*)+0x5e6>
c00194a5:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00194ac:	83 ec 0c             	sub    esp,0xc
c00194af:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00194b3:	50                   	push   eax
c00194b4:	e8 cc f5 ff ff       	call   c0018a85 <Vm::inbv(unsigned short)>
c00194b9:	0f b6 c0             	movzx  eax,al
c00194bc:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00194bf:	eb 1f                	jmp    c00194e0 <Vm::faultHandler(regs*)+0x656>
c00194c1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00194c4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00194c9:	74 03                	je     c00194ce <Vm::faultHandler(regs*)+0x644>
c00194cb:	ed                   	in     eax,dx
c00194cc:	eb 0d                	jmp    c00194db <Vm::faultHandler(regs*)+0x651>
c00194ce:	66 ed                	in     ax,dx
c00194d0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00194d3:	0f b7 c0             	movzx  eax,ax
c00194d6:	66 31 d2             	xor    dx,dx
c00194d9:	09 d0                	or     eax,edx
c00194db:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00194de:	eb 1a                	jmp    c00194fa <Vm::faultHandler(regs*)+0x670>
c00194e0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00194e3:	83 c4 10             	add    esp,0x10
c00194e6:	eb 15                	jmp    c00194fd <Vm::faultHandler(regs*)+0x673>
c00194e8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00194eb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00194ee:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00194f3:	74 03                	je     c00194f8 <Vm::faultHandler(regs*)+0x66e>
c00194f5:	ef                   	out    dx,eax
c00194f6:	eb 02                	jmp    c00194fa <Vm::faultHandler(regs*)+0x670>
c00194f8:	66 ef                	out    dx,ax
c00194fa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00194fd:	b0 01                	mov    al,0x1
c00194ff:	eb 56                	jmp    c0019557 <Vm::faultHandler(regs*)+0x6cd>
c0019501:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019505:	50                   	push   eax
c0019506:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001950a:	50                   	push   eax
c001950b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001950f:	50                   	push   eax
c0019510:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019514:	50                   	push   eax
c0019515:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019519:	50                   	push   eax
c001951a:	52                   	push   edx
c001951b:	52                   	push   edx
c001951c:	68 4f 4a 02 c0       	push   0xc0024a4f
c0019521:	e8 9d 35 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0019526:	83 c4 20             	add    esp,0x20
c0019529:	83 ec 0c             	sub    esp,0xc
c001952c:	6a 60                	push   0x60
c001952e:	e8 52 f5 ff ff       	call   c0018a85 <Vm::inbv(unsigned short)>
c0019533:	83 c4 10             	add    esp,0x10
c0019536:	3c 1c                	cmp    al,0x1c
c0019538:	74 04                	je     c001953e <Vm::faultHandler(regs*)+0x6b4>
c001953a:	3c 5a                	cmp    al,0x5a
c001953c:	75 eb                	jne    c0019529 <Vm::faultHandler(regs*)+0x69f>
c001953e:	3c 5a                	cmp    al,0x5a
c0019540:	74 04                	je     c0019546 <Vm::faultHandler(regs*)+0x6bc>
c0019542:	3c 1c                	cmp    al,0x1c
c0019544:	75 0f                	jne    c0019555 <Vm::faultHandler(regs*)+0x6cb>
c0019546:	83 ec 0c             	sub    esp,0xc
c0019549:	6a 60                	push   0x60
c001954b:	e8 35 f5 ff ff       	call   c0018a85 <Vm::inbv(unsigned short)>
c0019550:	83 c4 10             	add    esp,0x10
c0019553:	eb e9                	jmp    c001953e <Vm::faultHandler(regs*)+0x6b4>
c0019555:	31 c0                	xor    eax,eax
c0019557:	83 c4 1c             	add    esp,0x1c
c001955a:	5b                   	pop    ebx
c001955b:	5e                   	pop    esi
c001955c:	5f                   	pop    edi
c001955d:	5d                   	pop    ebp
c001955e:	c3                   	ret    
c001955f:	90                   	nop

c0019560 <Vm::fpuInternalTo32(unsigned long long)>:
c0019560:	57                   	push   edi
c0019561:	56                   	push   esi
c0019562:	53                   	push   ebx
c0019563:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001956b:	89 d6                	mov    esi,edx
c001956d:	89 d7                	mov    edi,edx
c001956f:	89 c1                	mov    ecx,eax
c0019571:	c1 ef 14             	shr    edi,0x14
c0019574:	89 d3                	mov    ebx,edx
c0019576:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001957c:	31 d2                	xor    edx,edx
c001957e:	89 f8                	mov    eax,edi
c0019580:	81 e6 00 00 00 80    	and    esi,0x80000000
c0019586:	bf ff 00 00 00       	mov    edi,0xff
c001958b:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019590:	83 d2 ff             	adc    edx,0xffffffff
c0019593:	39 c7                	cmp    edi,eax
c0019595:	bf 00 00 00 00       	mov    edi,0x0
c001959a:	19 d7                	sbb    edi,edx
c001959c:	72 16                	jb     c00195b4 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c001959e:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c00195a2:	c1 e0 17             	shl    eax,0x17
c00195a5:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c00195ab:	09 f1                	or     ecx,esi
c00195ad:	09 c1                	or     ecx,eax
c00195af:	89 cf                	mov    edi,ecx
c00195b1:	eb 05                	jmp    c00195b8 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c00195b3:	90                   	nop
c00195b4:	31 ff                	xor    edi,edi
c00195b6:	66 90                	xchg   ax,ax
c00195b8:	89 f8                	mov    eax,edi
c00195ba:	5b                   	pop    ebx
c00195bb:	5e                   	pop    esi
c00195bc:	5f                   	pop    edi
c00195bd:	c3                   	ret    

c00195be <Vm::fpuInternalTo64(unsigned long long)>:
c00195be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00195c6:	c3                   	ret    

c00195c7 <Vm::fpu32ToInternal(unsigned int)>:
c00195c7:	57                   	push   edi
c00195c8:	31 ff                	xor    edi,edi
c00195ca:	56                   	push   esi
c00195cb:	53                   	push   ebx
c00195cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00195d0:	89 cb                	mov    ebx,ecx
c00195d2:	89 ce                	mov    esi,ecx
c00195d4:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00195da:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c00195e0:	c1 e9 17             	shr    ecx,0x17
c00195e3:	89 f0                	mov    eax,esi
c00195e5:	0f b6 d1             	movzx  edx,cl
c00195e8:	81 c2 80 03 00 00    	add    edx,0x380
c00195ee:	89 d1                	mov    ecx,edx
c00195f0:	89 fa                	mov    edx,edi
c00195f2:	c1 e1 14             	shl    ecx,0x14
c00195f5:	0f a4 c2 1d          	shld   edx,eax,0x1d
c00195f9:	c1 e0 1d             	shl    eax,0x1d
c00195fc:	89 d7                	mov    edi,edx
c00195fe:	89 c6                	mov    esi,eax
c0019600:	89 ca                	mov    edx,ecx
c0019602:	89 f0                	mov    eax,esi
c0019604:	09 fa                	or     edx,edi
c0019606:	09 da                	or     edx,ebx
c0019608:	5b                   	pop    ebx
c0019609:	5e                   	pop    esi
c001960a:	5f                   	pop    edi
c001960b:	c3                   	ret    

c001960c <Vm::fpu64ToInternal(unsigned long long)>:
c001960c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019610:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019614:	c3                   	ret    

c0019615 <Vm::fpuFloatToLong(unsigned long long)>:
c0019615:	57                   	push   edi
c0019616:	31 c0                	xor    eax,eax
c0019618:	56                   	push   esi
c0019619:	31 d2                	xor    edx,edx
c001961b:	53                   	push   ebx
c001961c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019620:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019624:	89 d9                	mov    ecx,ebx
c0019626:	c1 e9 14             	shr    ecx,0x14
c0019629:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001962f:	89 cf                	mov    edi,ecx
c0019631:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0019637:	78 37                	js     c0019670 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019639:	89 d9                	mov    ecx,ebx
c001963b:	89 f0                	mov    eax,esi
c001963d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019643:	81 c9 00 00 10 00    	or     ecx,0x100000
c0019649:	89 ca                	mov    edx,ecx
c001964b:	b9 34 00 00 00       	mov    ecx,0x34
c0019650:	29 f9                	sub    ecx,edi
c0019652:	0f ad d0             	shrd   eax,edx,cl
c0019655:	d3 fa                	sar    edx,cl
c0019657:	f6 c1 20             	test   cl,0x20
c001965a:	74 08                	je     c0019664 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c001965c:	89 d0                	mov    eax,edx
c001965e:	c1 fa 1f             	sar    edx,0x1f
c0019661:	8d 76 00             	lea    esi,[esi+0x0]
c0019664:	85 db                	test   ebx,ebx
c0019666:	79 08                	jns    c0019670 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019668:	f7 d8                	neg    eax
c001966a:	83 d2 00             	adc    edx,0x0
c001966d:	f7 da                	neg    edx
c001966f:	90                   	nop
c0019670:	5b                   	pop    ebx
c0019671:	5e                   	pop    esi
c0019672:	5f                   	pop    edi
c0019673:	c3                   	ret    

c0019674 <Vm::fpuULongToFloat(unsigned long long)>:
c0019674:	57                   	push   edi
c0019675:	31 c9                	xor    ecx,ecx
c0019677:	56                   	push   esi
c0019678:	53                   	push   ebx
c0019679:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001967d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019681:	8d 76 00             	lea    esi,[esi+0x0]
c0019684:	0f ba e7 14          	bt     edi,0x14
c0019688:	72 0a                	jb     c0019694 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c001968a:	01 f6                	add    esi,esi
c001968c:	11 ff                	adc    edi,edi
c001968e:	41                   	inc    ecx
c001968f:	eb f3                	jmp    c0019684 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019691:	8d 76 00             	lea    esi,[esi+0x0]
c0019694:	89 fa                	mov    edx,edi
c0019696:	89 f0                	mov    eax,esi
c0019698:	bb 33 04 00 00       	mov    ebx,0x433
c001969d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c00196a3:	29 cb                	sub    ebx,ecx
c00196a5:	89 d9                	mov    ecx,ebx
c00196a7:	5b                   	pop    ebx
c00196a8:	c1 e1 14             	shl    ecx,0x14
c00196ab:	5e                   	pop    esi
c00196ac:	09 ca                	or     edx,ecx
c00196ae:	5f                   	pop    edi
c00196af:	c3                   	ret    

c00196b0 <Vm::fpuLongToFloat(long long)>:
c00196b0:	56                   	push   esi
c00196b1:	31 c0                	xor    eax,eax
c00196b3:	53                   	push   ebx
c00196b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00196b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00196bc:	39 c8                	cmp    eax,ecx
c00196be:	19 d8                	sbb    eax,ebx
c00196c0:	7d 06                	jge    c00196c8 <Vm::fpuLongToFloat(long long)+0x18>
c00196c2:	31 f6                	xor    esi,esi
c00196c4:	eb 0e                	jmp    c00196d4 <Vm::fpuLongToFloat(long long)+0x24>
c00196c6:	66 90                	xchg   ax,ax
c00196c8:	f7 d9                	neg    ecx
c00196ca:	be 01 00 00 00       	mov    esi,0x1
c00196cf:	83 d3 00             	adc    ebx,0x0
c00196d2:	f7 db                	neg    ebx
c00196d4:	31 c0                	xor    eax,eax
c00196d6:	66 90                	xchg   ax,ax
c00196d8:	0f ba e3 14          	bt     ebx,0x14
c00196dc:	72 0a                	jb     c00196e8 <Vm::fpuLongToFloat(long long)+0x38>
c00196de:	01 c9                	add    ecx,ecx
c00196e0:	11 db                	adc    ebx,ebx
c00196e2:	40                   	inc    eax
c00196e3:	eb f3                	jmp    c00196d8 <Vm::fpuLongToFloat(long long)+0x28>
c00196e5:	8d 76 00             	lea    esi,[esi+0x0]
c00196e8:	ba 33 04 00 00       	mov    edx,0x433
c00196ed:	29 c2                	sub    edx,eax
c00196ef:	89 c8                	mov    eax,ecx
c00196f1:	c1 e2 14             	shl    edx,0x14
c00196f4:	89 d9                	mov    ecx,ebx
c00196f6:	89 f3                	mov    ebx,esi
c00196f8:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00196fe:	09 ca                	or     edx,ecx
c0019700:	84 db                	test   bl,bl
c0019702:	74 08                	je     c001970c <Vm::fpuLongToFloat(long long)+0x5c>
c0019704:	81 ca 00 00 00 80    	or     edx,0x80000000
c001970a:	66 90                	xchg   ax,ax
c001970c:	5b                   	pop    ebx
c001970d:	5e                   	pop    esi
c001970e:	c3                   	ret    

c001970f <Vm::fpuGet0()>:
c001970f:	31 c0                	xor    eax,eax
c0019711:	31 d2                	xor    edx,edx
c0019713:	c3                   	ret    

c0019714 <Vm::fpuGet1()>:
c0019714:	b8 01 00 00 00       	mov    eax,0x1
c0019719:	31 d2                	xor    edx,edx
c001971b:	c3                   	ret    

c001971c <Vm::fpuGetPi()>:
c001971c:	b8 03 00 00 00       	mov    eax,0x3
c0019721:	31 d2                	xor    edx,edx
c0019723:	c3                   	ret    

c0019724 <Vm::fpuGetLog2E()>:
c0019724:	83 ec 18             	sub    esp,0x18
c0019727:	68 ac 4a 02 c0       	push   0xc0024aac
c001972c:	e8 54 ac ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0019731:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019736:	31 d2                	xor    edx,edx
c0019738:	83 c4 1c             	add    esp,0x1c
c001973b:	c3                   	ret    

c001973c <Vm::fpuGetLogE2()>:
c001973c:	83 ec 18             	sub    esp,0x18
c001973f:	68 b8 4a 02 c0       	push   0xc0024ab8
c0019744:	e8 3c ac ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0019749:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001974e:	31 d2                	xor    edx,edx
c0019750:	83 c4 1c             	add    esp,0x1c
c0019753:	c3                   	ret    

c0019754 <Vm::fpuGetLog210()>:
c0019754:	83 ec 18             	sub    esp,0x18
c0019757:	68 c4 4a 02 c0       	push   0xc0024ac4
c001975c:	e8 24 ac ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0019761:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019766:	31 d2                	xor    edx,edx
c0019768:	83 c4 1c             	add    esp,0x1c
c001976b:	c3                   	ret    

c001976c <Vm::fpuGetLog102()>:
c001976c:	83 ec 18             	sub    esp,0x18
c001976f:	68 d1 4a 02 c0       	push   0xc0024ad1
c0019774:	e8 0c ac ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0019779:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001977e:	31 d2                	xor    edx,edx
c0019780:	83 c4 1c             	add    esp,0x1c
c0019783:	c3                   	ret    

c0019784 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019784:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019788:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001978c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019790:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019794:	0f 92 c0             	setb   al
c0019797:	c3                   	ret    

c0019798 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019798:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001979c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00197a0:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c00197a4:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c00197a8:	09 c2                	or     edx,eax
c00197aa:	0f 94 c0             	sete   al
c00197ad:	c3                   	ret    

c00197ae <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c00197ae:	57                   	push   edi
c00197af:	56                   	push   esi
c00197b0:	53                   	push   ebx
c00197b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00197b5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197b9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00197bd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00197c1:	57                   	push   edi
c00197c2:	56                   	push   esi
c00197c3:	53                   	push   ebx
c00197c4:	51                   	push   ecx
c00197c5:	e8 ce ff ff ff       	call   c0019798 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c00197ca:	83 c4 10             	add    esp,0x10
c00197cd:	88 c2                	mov    dl,al
c00197cf:	31 c0                	xor    eax,eax
c00197d1:	84 d2                	test   dl,dl
c00197d3:	75 0f                	jne    c00197e4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c00197d5:	57                   	push   edi
c00197d6:	56                   	push   esi
c00197d7:	53                   	push   ebx
c00197d8:	51                   	push   ecx
c00197d9:	e8 a6 ff ff ff       	call   c0019784 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c00197de:	83 c4 10             	add    esp,0x10
c00197e1:	8d 76 00             	lea    esi,[esi+0x0]
c00197e4:	83 e0 01             	and    eax,0x1
c00197e7:	5b                   	pop    ebx
c00197e8:	88 c1                	mov    cl,al
c00197ea:	83 e2 01             	and    edx,0x1
c00197ed:	a0 e1 79 02 c0       	mov    al,ds:0xc00279e1
c00197f2:	c1 e2 06             	shl    edx,0x6
c00197f5:	83 e0 ba             	and    eax,0xffffffba
c00197f8:	5e                   	pop    esi
c00197f9:	09 c8                	or     eax,ecx
c00197fb:	5f                   	pop    edi
c00197fc:	09 d0                	or     eax,edx
c00197fe:	a2 e1 79 02 c0       	mov    ds:0xc00279e1,al
c0019803:	c3                   	ret    

c0019804 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0019804:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019808:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001980c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0019810:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0019814:	c3                   	ret    

c0019815 <Vm::fpuAbs(unsigned long long)>:
c0019815:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019819:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001981d:	c3                   	ret    

c001981e <Vm::fpuChs(unsigned long long)>:
c001981e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019822:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019826:	f7 d8                	neg    eax
c0019828:	83 d2 00             	adc    edx,0x0
c001982b:	f7 da                	neg    edx
c001982d:	c3                   	ret    

c001982e <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001982e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0019832:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0019837:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001983b:	eb c7                	jmp    c0019804 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001983d <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001983d:	53                   	push   ebx
c001983e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019842:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019846:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001984a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001984e:	0f af ca             	imul   ecx,edx
c0019851:	0f af d8             	imul   ebx,eax
c0019854:	f7 e2                	mul    edx
c0019856:	01 d9                	add    ecx,ebx
c0019858:	5b                   	pop    ebx
c0019859:	01 ca                	add    edx,ecx
c001985b:	c3                   	ret    

c001985c <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001985c:	83 ec 0c             	sub    esp,0xc
c001985f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019867:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001986b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001986f:	e8 10 77 00 00       	call   c0020f84 <__udivdi3>
c0019874:	83 c4 1c             	add    esp,0x1c
c0019877:	c3                   	ret    

c0019878 <Vm::fpuSquare(unsigned long long)>:
c0019878:	50                   	push   eax
c0019879:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001987d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019881:	52                   	push   edx
c0019882:	50                   	push   eax
c0019883:	52                   	push   edx
c0019884:	50                   	push   eax
c0019885:	e8 b3 ff ff ff       	call   c001983d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001988a:	83 c4 14             	add    esp,0x14
c001988d:	c3                   	ret    

c001988e <Vm::fpuGetReg(int)>:
c001988e:	83 ec 0c             	sub    esp,0xc
c0019891:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019896:	76 10                	jbe    c00198a8 <Vm::fpuGetReg(int)+0x1a>
c0019898:	83 ec 0c             	sub    esp,0xc
c001989b:	68 de 4a 02 c0       	push   0xc0024ade
c00198a0:	e8 e0 aa ff ff       	call   c0014385 <Krnl::panic(char const*)>
c00198a5:	83 c4 10             	add    esp,0x10
c00198a8:	a0 e1 79 02 c0       	mov    al,ds:0xc00279e1
c00198ad:	b9 08 00 00 00       	mov    ecx,0x8
c00198b2:	c0 e8 03             	shr    al,0x3
c00198b5:	83 e0 07             	and    eax,0x7
c00198b8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00198bc:	99                   	cdq    
c00198bd:	f7 f9                	idiv   ecx
c00198bf:	8b 04 d5 e4 79 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd861c]
c00198c6:	8b 14 d5 e8 79 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd8618]
c00198cd:	83 c4 0c             	add    esp,0xc
c00198d0:	c3                   	ret    

c00198d1 <Vm::fpuSetReg(int, unsigned long long)>:
c00198d1:	57                   	push   edi
c00198d2:	56                   	push   esi
c00198d3:	52                   	push   edx
c00198d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00198d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00198dc:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00198e1:	76 11                	jbe    c00198f4 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c00198e3:	83 ec 0c             	sub    esp,0xc
c00198e6:	68 f1 4a 02 c0       	push   0xc0024af1
c00198eb:	e8 95 aa ff ff       	call   c0014385 <Krnl::panic(char const*)>
c00198f0:	83 c4 10             	add    esp,0x10
c00198f3:	90                   	nop
c00198f4:	a0 e1 79 02 c0       	mov    al,ds:0xc00279e1
c00198f9:	b9 08 00 00 00       	mov    ecx,0x8
c00198fe:	c0 e8 03             	shr    al,0x3
c0019901:	83 e0 07             	and    eax,0x7
c0019904:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019908:	99                   	cdq    
c0019909:	f7 f9                	idiv   ecx
c001990b:	89 34 d5 e4 79 02 c0 	mov    DWORD PTR [edx*8-0x3ffd861c],esi
c0019912:	89 3c d5 e8 79 02 c0 	mov    DWORD PTR [edx*8-0x3ffd8618],edi
c0019919:	58                   	pop    eax
c001991a:	5e                   	pop    esi
c001991b:	5f                   	pop    edi
c001991c:	c3                   	ret    

c001991d <Vm::fpuPush(unsigned long long)>:
c001991d:	a0 e1 79 02 c0       	mov    al,ds:0xc00279e1
c0019922:	c0 e8 03             	shr    al,0x3
c0019925:	83 e0 07             	and    eax,0x7
c0019928:	83 c0 07             	add    eax,0x7
c001992b:	88 c2                	mov    dl,al
c001992d:	83 e0 07             	and    eax,0x7
c0019930:	83 e2 07             	and    edx,0x7
c0019933:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001993a:	8a 15 e1 79 02 c0    	mov    dl,BYTE PTR ds:0xc00279e1
c0019940:	83 e2 c7             	and    edx,0xffffffc7
c0019943:	09 ca                	or     edx,ecx
c0019945:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019949:	88 15 e1 79 02 c0    	mov    BYTE PTR ds:0xc00279e1,dl
c001994f:	89 0c c5 e8 79 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8618],ecx
c0019956:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001995a:	89 14 c5 e4 79 02 c0 	mov    DWORD PTR [eax*8-0x3ffd861c],edx
c0019961:	a1 24 7a 02 c0       	mov    eax,ds:0xc0027a24
c0019966:	83 f8 08             	cmp    eax,0x8
c0019969:	75 09                	jne    c0019974 <Vm::fpuPush(unsigned long long)+0x57>
c001996b:	80 0d e0 79 02 c0 40 	or     BYTE PTR ds:0xc00279e0,0x40
c0019972:	c3                   	ret    
c0019973:	90                   	nop
c0019974:	40                   	inc    eax
c0019975:	a3 24 7a 02 c0       	mov    ds:0xc0027a24,eax
c001997a:	c3                   	ret    

c001997b <Vm::fpuPop()>:
c001997b:	8a 0d e1 79 02 c0    	mov    cl,BYTE PTR ds:0xc00279e1
c0019981:	53                   	push   ebx
c0019982:	c0 e9 03             	shr    cl,0x3
c0019985:	8a 1d e1 79 02 c0    	mov    bl,BYTE PTR ds:0xc00279e1
c001998b:	83 e1 07             	and    ecx,0x7
c001998e:	83 e3 c7             	and    ebx,0xffffffc7
c0019991:	8b 04 cd e4 79 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd861c]
c0019998:	8b 14 cd e8 79 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd8618]
c001999f:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c00199a6:	83 e1 38             	and    ecx,0x38
c00199a9:	09 d9                	or     ecx,ebx
c00199ab:	88 0d e1 79 02 c0    	mov    BYTE PTR ds:0xc00279e1,cl
c00199b1:	8b 0d 24 7a 02 c0    	mov    ecx,DWORD PTR ds:0xc0027a24
c00199b7:	85 c9                	test   ecx,ecx
c00199b9:	74 09                	je     c00199c4 <Vm::fpuPop()+0x49>
c00199bb:	49                   	dec    ecx
c00199bc:	89 0d 24 7a 02 c0    	mov    DWORD PTR ds:0xc0027a24,ecx
c00199c2:	eb 08                	jmp    c00199cc <Vm::fpuPop()+0x51>
c00199c4:	80 0d e0 79 02 c0 40 	or     BYTE PTR ds:0xc00279e0,0x40
c00199cb:	90                   	nop
c00199cc:	5b                   	pop    ebx
c00199cd:	c3                   	ret    

c00199ce <Vm::x87Handler(regs*)>:
c00199ce:	55                   	push   ebp
c00199cf:	57                   	push   edi
c00199d0:	56                   	push   esi
c00199d1:	53                   	push   ebx
c00199d2:	83 ec 1c             	sub    esp,0x1c
c00199d5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00199d9:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c00199de:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00199e1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00199e9:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00199ed:	50                   	push   eax
c00199ee:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00199f2:	50                   	push   eax
c00199f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00199f7:	50                   	push   eax
c00199f8:	53                   	push   ebx
c00199f9:	e8 a0 a0 ff ff       	call   c0013a9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00199fe:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0019a01:	83 c4 10             	add    esp,0x10
c0019a04:	89 c6                	mov    esi,eax
c0019a06:	80 fa d9             	cmp    dl,0xd9
c0019a09:	0f 85 79 01 00 00    	jne    c0019b88 <Vm::x87Handler(regs*)+0x1ba>
c0019a0f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019a13:	8d 50 20             	lea    edx,[eax+0x20]
c0019a16:	80 fa 0e             	cmp    dl,0xe
c0019a19:	0f 87 a5 00 00 00    	ja     c0019ac4 <Vm::x87Handler(regs*)+0xf6>
c0019a1f:	0f b6 d2             	movzx  edx,dl
c0019a22:	ff 24 95 04 4b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb4fc]
c0019a29:	8d 76 00             	lea    esi,[esi+0x0]
c0019a2c:	e8 de fc ff ff       	call   c001970f <Vm::fpuGet0()>
c0019a31:	eb 09                	jmp    c0019a3c <Vm::x87Handler(regs*)+0x6e>
c0019a33:	90                   	nop
c0019a34:	e8 db fc ff ff       	call   c0019714 <Vm::fpuGet1()>
c0019a39:	8d 76 00             	lea    esi,[esi+0x0]
c0019a3c:	57                   	push   edi
c0019a3d:	57                   	push   edi
c0019a3e:	66 90                	xchg   ax,ax
c0019a40:	52                   	push   edx
c0019a41:	50                   	push   eax
c0019a42:	e8 d6 fe ff ff       	call   c001991d <Vm::fpuPush(unsigned long long)>
c0019a47:	90                   	nop
c0019a48:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019a4c:	83 c4 10             	add    esp,0x10
c0019a4f:	90                   	nop
c0019a50:	b0 01                	mov    al,0x1
c0019a52:	e9 89 0a 00 00       	jmp    c001a4e0 <Vm::x87Handler(regs*)+0xb12>
c0019a57:	90                   	nop
c0019a58:	83 ec 0c             	sub    esp,0xc
c0019a5b:	6a 00                	push   0x0
c0019a5d:	e8 2c fe ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019a62:	59                   	pop    ecx
c0019a63:	5e                   	pop    esi
c0019a64:	52                   	push   edx
c0019a65:	50                   	push   eax
c0019a66:	e8 b3 fd ff ff       	call   c001981e <Vm::fpuChs(unsigned long long)>
c0019a6b:	eb 17                	jmp    c0019a84 <Vm::x87Handler(regs*)+0xb6>
c0019a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a70:	83 ec 0c             	sub    esp,0xc
c0019a73:	6a 00                	push   0x0
c0019a75:	e8 14 fe ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019a7a:	5f                   	pop    edi
c0019a7b:	5d                   	pop    ebp
c0019a7c:	52                   	push   edx
c0019a7d:	50                   	push   eax
c0019a7e:	e8 92 fd ff ff       	call   c0019815 <Vm::fpuAbs(unsigned long long)>
c0019a83:	90                   	nop
c0019a84:	83 c4 0c             	add    esp,0xc
c0019a87:	90                   	nop
c0019a88:	52                   	push   edx
c0019a89:	50                   	push   eax
c0019a8a:	66 90                	xchg   ax,ax
c0019a8c:	6a 00                	push   0x0
c0019a8e:	66 90                	xchg   ax,ax
c0019a90:	e8 3c fe ff ff       	call   c00198d1 <Vm::fpuSetReg(int, unsigned long long)>
c0019a95:	eb b1                	jmp    c0019a48 <Vm::x87Handler(regs*)+0x7a>
c0019a97:	90                   	nop
c0019a98:	e8 b7 fc ff ff       	call   c0019754 <Vm::fpuGetLog210()>
c0019a9d:	eb 9d                	jmp    c0019a3c <Vm::x87Handler(regs*)+0x6e>
c0019a9f:	90                   	nop
c0019aa0:	e8 7f fc ff ff       	call   c0019724 <Vm::fpuGetLog2E()>
c0019aa5:	eb 95                	jmp    c0019a3c <Vm::x87Handler(regs*)+0x6e>
c0019aa7:	90                   	nop
c0019aa8:	e8 6f fc ff ff       	call   c001971c <Vm::fpuGetPi()>
c0019aad:	eb 8d                	jmp    c0019a3c <Vm::x87Handler(regs*)+0x6e>
c0019aaf:	90                   	nop
c0019ab0:	e8 b7 fc ff ff       	call   c001976c <Vm::fpuGetLog102()>
c0019ab5:	eb 85                	jmp    c0019a3c <Vm::x87Handler(regs*)+0x6e>
c0019ab7:	90                   	nop
c0019ab8:	e8 7f fc ff ff       	call   c001973c <Vm::fpuGetLogE2()>
c0019abd:	e9 7a ff ff ff       	jmp    c0019a3c <Vm::x87Handler(regs*)+0x6e>
c0019ac2:	66 90                	xchg   ax,ax
c0019ac4:	8d 50 40             	lea    edx,[eax+0x40]
c0019ac7:	80 fa 07             	cmp    dl,0x7
c0019aca:	77 18                	ja     c0019ae4 <Vm::x87Handler(regs*)+0x116>
c0019acc:	83 ec 0c             	sub    esp,0xc
c0019acf:	2d c0 00 00 00       	sub    eax,0xc0
c0019ad4:	50                   	push   eax
c0019ad5:	e8 b4 fd ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019ada:	59                   	pop    ecx
c0019adb:	5e                   	pop    esi
c0019adc:	e9 5f ff ff ff       	jmp    c0019a40 <Vm::x87Handler(regs*)+0x72>
c0019ae1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ae4:	8d 50 38             	lea    edx,[eax+0x38]
c0019ae7:	80 fa 07             	cmp    dl,0x7
c0019aea:	77 3c                	ja     c0019b28 <Vm::x87Handler(regs*)+0x15a>
c0019aec:	83 ec 0c             	sub    esp,0xc
c0019aef:	2d c8 00 00 00       	sub    eax,0xc8
c0019af4:	50                   	push   eax
c0019af5:	e8 94 fd ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019afa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019b01:	89 c6                	mov    esi,eax
c0019b03:	89 d7                	mov    edi,edx
c0019b05:	e8 84 fd ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019b0a:	83 c4 0c             	add    esp,0xc
c0019b0d:	52                   	push   edx
c0019b0e:	50                   	push   eax
c0019b0f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019b13:	2d c8 00 00 00       	sub    eax,0xc8
c0019b18:	50                   	push   eax
c0019b19:	e8 b3 fd ff ff       	call   c00198d1 <Vm::fpuSetReg(int, unsigned long long)>
c0019b1e:	83 c4 0c             	add    esp,0xc
c0019b21:	57                   	push   edi
c0019b22:	56                   	push   esi
c0019b23:	e9 64 ff ff ff       	jmp    c0019a8c <Vm::x87Handler(regs*)+0xbe>
c0019b28:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019b2c:	84 d2                	test   dl,dl
c0019b2e:	75 10                	jne    c0019b40 <Vm::x87Handler(regs*)+0x172>
c0019b30:	83 ec 0c             	sub    esp,0xc
c0019b33:	ff 36                	push   DWORD PTR [esi]
c0019b35:	e8 8d fa ff ff       	call   c00195c7 <Vm::fpu32ToInternal(unsigned int)>
c0019b3a:	e9 c9 00 00 00       	jmp    c0019c08 <Vm::x87Handler(regs*)+0x23a>
c0019b3f:	90                   	nop
c0019b40:	80 fa 03             	cmp    dl,0x3
c0019b43:	75 13                	jne    c0019b58 <Vm::x87Handler(regs*)+0x18a>
c0019b45:	e8 31 fe ff ff       	call   c001997b <Vm::fpuPop()>
c0019b4a:	55                   	push   ebp
c0019b4b:	55                   	push   ebp
c0019b4c:	52                   	push   edx
c0019b4d:	50                   	push   eax
c0019b4e:	e8 0d fa ff ff       	call   c0019560 <Vm::fpuInternalTo32(unsigned long long)>
c0019b53:	e9 90 00 00 00       	jmp    c0019be8 <Vm::x87Handler(regs*)+0x21a>
c0019b58:	80 fa 05             	cmp    dl,0x5
c0019b5b:	75 0f                	jne    c0019b6c <Vm::x87Handler(regs*)+0x19e>
c0019b5d:	66 8b 06             	mov    ax,WORD PTR [esi]
c0019b60:	66 a3 e2 79 02 c0    	mov    ds:0xc00279e2,ax
c0019b66:	e9 ed 00 00 00       	jmp    c0019c58 <Vm::x87Handler(regs*)+0x28a>
c0019b6b:	90                   	nop
c0019b6c:	31 c0                	xor    eax,eax
c0019b6e:	80 fa 07             	cmp    dl,0x7
c0019b71:	0f 85 69 09 00 00    	jne    c001a4e0 <Vm::x87Handler(regs*)+0xb12>
c0019b77:	66 a1 e2 79 02 c0    	mov    ax,ds:0xc00279e2
c0019b7d:	66 89 06             	mov    WORD PTR [esi],ax
c0019b80:	e9 d3 00 00 00       	jmp    c0019c58 <Vm::x87Handler(regs*)+0x28a>
c0019b85:	8d 76 00             	lea    esi,[esi+0x0]
c0019b88:	80 fa d8             	cmp    dl,0xd8
c0019b8b:	0f 84 d3 00 00 00    	je     c0019c64 <Vm::x87Handler(regs*)+0x296>
c0019b91:	80 fa dc             	cmp    dl,0xdc
c0019b94:	0f 84 2a 02 00 00    	je     c0019dc4 <Vm::x87Handler(regs*)+0x3f6>
c0019b9a:	80 fa de             	cmp    dl,0xde
c0019b9d:	0f 84 f1 02 00 00    	je     c0019e94 <Vm::x87Handler(regs*)+0x4c6>
c0019ba3:	80 fa dd             	cmp    dl,0xdd
c0019ba6:	0f 84 94 04 00 00    	je     c001a040 <Vm::x87Handler(regs*)+0x672>
c0019bac:	80 fa da             	cmp    dl,0xda
c0019baf:	0f 84 5f 05 00 00    	je     c001a114 <Vm::x87Handler(regs*)+0x746>
c0019bb5:	80 fa df             	cmp    dl,0xdf
c0019bb8:	0f 84 aa 05 00 00    	je     c001a168 <Vm::x87Handler(regs*)+0x79a>
c0019bbe:	31 c0                	xor    eax,eax
c0019bc0:	80 fa db             	cmp    dl,0xdb
c0019bc3:	0f 85 17 09 00 00    	jne    c001a4e0 <Vm::x87Handler(regs*)+0xb12>
c0019bc9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019bcd:	80 fa 03             	cmp    dl,0x3
c0019bd0:	0f 85 c2 06 00 00    	jne    c001a298 <Vm::x87Handler(regs*)+0x8ca>
c0019bd6:	e8 a0 fd ff ff       	call   c001997b <Vm::fpuPop()>
c0019bdb:	55                   	push   ebp
c0019bdc:	55                   	push   ebp
c0019bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0019be0:	52                   	push   edx
c0019be1:	50                   	push   eax
c0019be2:	e8 2e fa ff ff       	call   c0019615 <Vm::fpuFloatToLong(unsigned long long)>
c0019be7:	90                   	nop
c0019be8:	83 c4 10             	add    esp,0x10
c0019beb:	89 06                	mov    DWORD PTR [esi],eax
c0019bed:	eb 69                	jmp    c0019c58 <Vm::x87Handler(regs*)+0x28a>
c0019bef:	90                   	nop
c0019bf0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019bf4:	84 d2                	test   dl,dl
c0019bf6:	0f 85 2c 06 00 00    	jne    c001a228 <Vm::x87Handler(regs*)+0x85a>
c0019bfc:	57                   	push   edi
c0019bfd:	57                   	push   edi
c0019bfe:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019c01:	ff 36                	push   DWORD PTR [esi]
c0019c03:	e8 04 fa ff ff       	call   c001960c <Vm::fpu64ToInternal(unsigned long long)>
c0019c08:	5e                   	pop    esi
c0019c09:	5f                   	pop    edi
c0019c0a:	52                   	push   edx
c0019c0b:	50                   	push   eax
c0019c0c:	e8 0c fd ff ff       	call   c001991d <Vm::fpuPush(unsigned long long)>
c0019c11:	8d 76 00             	lea    esi,[esi+0x0]
c0019c14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c18:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019c1b:	e9 2c fe ff ff       	jmp    c0019a4c <Vm::x87Handler(regs*)+0x7e>
c0019c20:	80 fa 03             	cmp    dl,0x3
c0019c23:	0f 85 2b 07 00 00    	jne    c001a354 <Vm::x87Handler(regs*)+0x986>
c0019c29:	57                   	push   edi
c0019c2a:	57                   	push   edi
c0019c2b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019c2e:	ff 36                	push   DWORD PTR [esi]
c0019c30:	e8 d7 f9 ff ff       	call   c001960c <Vm::fpu64ToInternal(unsigned long long)>
c0019c35:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c3c:	89 c6                	mov    esi,eax
c0019c3e:	89 d7                	mov    edi,edx
c0019c40:	e8 49 fc ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019c45:	57                   	push   edi
c0019c46:	56                   	push   esi
c0019c47:	52                   	push   edx
c0019c48:	50                   	push   eax
c0019c49:	e8 60 fb ff ff       	call   c00197ae <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0019c4e:	83 c4 20             	add    esp,0x20
c0019c51:	e8 25 fd ff ff       	call   c001997b <Vm::fpuPop()>
c0019c56:	66 90                	xchg   ax,ax
c0019c58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c5c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019c5f:	e9 ec fd ff ff       	jmp    c0019a50 <Vm::x87Handler(regs*)+0x82>
c0019c64:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019c68:	8d 50 40             	lea    edx,[eax+0x40]
c0019c6b:	80 fa 07             	cmp    dl,0x7
c0019c6e:	77 2c                	ja     c0019c9c <Vm::x87Handler(regs*)+0x2ce>
c0019c70:	83 ec 0c             	sub    esp,0xc
c0019c73:	2d c0 00 00 00       	sub    eax,0xc0
c0019c78:	50                   	push   eax
c0019c79:	e8 10 fc ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019c7e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c85:	89 c6                	mov    esi,eax
c0019c87:	89 d7                	mov    edi,edx
c0019c89:	e8 00 fc ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019c8e:	57                   	push   edi
c0019c8f:	56                   	push   esi
c0019c90:	52                   	push   edx
c0019c91:	50                   	push   eax
c0019c92:	e8 6d fb ff ff       	call   c0019804 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019c97:	eb 33                	jmp    c0019ccc <Vm::x87Handler(regs*)+0x2fe>
c0019c99:	8d 76 00             	lea    esi,[esi+0x0]
c0019c9c:	8d 50 38             	lea    edx,[eax+0x38]
c0019c9f:	80 fa 07             	cmp    dl,0x7
c0019ca2:	77 30                	ja     c0019cd4 <Vm::x87Handler(regs*)+0x306>
c0019ca4:	83 ec 0c             	sub    esp,0xc
c0019ca7:	2d c8 00 00 00       	sub    eax,0xc8
c0019cac:	50                   	push   eax
c0019cad:	e8 dc fb ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019cb2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019cb9:	89 c6                	mov    esi,eax
c0019cbb:	89 d7                	mov    edi,edx
c0019cbd:	e8 cc fb ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019cc2:	57                   	push   edi
c0019cc3:	56                   	push   esi
c0019cc4:	52                   	push   edx
c0019cc5:	50                   	push   eax
c0019cc6:	e8 72 fb ff ff       	call   c001983d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019ccb:	90                   	nop
c0019ccc:	83 c4 1c             	add    esp,0x1c
c0019ccf:	e9 b4 fd ff ff       	jmp    c0019a88 <Vm::x87Handler(regs*)+0xba>
c0019cd4:	8d 50 30             	lea    edx,[eax+0x30]
c0019cd7:	80 fa 07             	cmp    dl,0x7
c0019cda:	77 10                	ja     c0019cec <Vm::x87Handler(regs*)+0x31e>
c0019cdc:	83 ec 0c             	sub    esp,0xc
c0019cdf:	2d d0 00 00 00       	sub    eax,0xd0
c0019ce4:	e9 c3 03 00 00       	jmp    c001a0ac <Vm::x87Handler(regs*)+0x6de>
c0019ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0019cec:	8d 50 28             	lea    edx,[eax+0x28]
c0019cef:	80 fa 07             	cmp    dl,0x7
c0019cf2:	77 10                	ja     c0019d04 <Vm::x87Handler(regs*)+0x336>
c0019cf4:	83 ec 0c             	sub    esp,0xc
c0019cf7:	2d d8 00 00 00       	sub    eax,0xd8
c0019cfc:	e9 e7 03 00 00       	jmp    c001a0e8 <Vm::x87Handler(regs*)+0x71a>
c0019d01:	8d 76 00             	lea    esi,[esi+0x0]
c0019d04:	8d 50 20             	lea    edx,[eax+0x20]
c0019d07:	80 fa 07             	cmp    dl,0x7
c0019d0a:	77 1c                	ja     c0019d28 <Vm::x87Handler(regs*)+0x35a>
c0019d0c:	83 ec 0c             	sub    esp,0xc
c0019d0f:	2d e0 00 00 00       	sub    eax,0xe0
c0019d14:	50                   	push   eax
c0019d15:	e8 74 fb ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019d1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d21:	89 c6                	mov    esi,eax
c0019d23:	89 d7                	mov    edi,edx
c0019d25:	eb 25                	jmp    c0019d4c <Vm::x87Handler(regs*)+0x37e>
c0019d27:	90                   	nop
c0019d28:	8d 50 18             	lea    edx,[eax+0x18]
c0019d2b:	80 fa 07             	cmp    dl,0x7
c0019d2e:	77 30                	ja     c0019d60 <Vm::x87Handler(regs*)+0x392>
c0019d30:	83 ec 0c             	sub    esp,0xc
c0019d33:	6a 00                	push   0x0
c0019d35:	e8 54 fb ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019d3a:	89 c6                	mov    esi,eax
c0019d3c:	89 d7                	mov    edi,edx
c0019d3e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d42:	2d e8 00 00 00       	sub    eax,0xe8
c0019d47:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d4a:	66 90                	xchg   ax,ax
c0019d4c:	e8 3d fb ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019d51:	57                   	push   edi
c0019d52:	56                   	push   esi
c0019d53:	52                   	push   edx
c0019d54:	50                   	push   eax
c0019d55:	e8 d4 fa ff ff       	call   c001982e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019d5a:	e9 6d ff ff ff       	jmp    c0019ccc <Vm::x87Handler(regs*)+0x2fe>
c0019d5f:	90                   	nop
c0019d60:	8d 50 10             	lea    edx,[eax+0x10]
c0019d63:	80 fa 07             	cmp    dl,0x7
c0019d66:	77 1c                	ja     c0019d84 <Vm::x87Handler(regs*)+0x3b6>
c0019d68:	83 ec 0c             	sub    esp,0xc
c0019d6b:	2d f0 00 00 00       	sub    eax,0xf0
c0019d70:	50                   	push   eax
c0019d71:	e8 18 fb ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019d76:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d7d:	89 c6                	mov    esi,eax
c0019d7f:	89 d7                	mov    edi,edx
c0019d81:	eb 25                	jmp    c0019da8 <Vm::x87Handler(regs*)+0x3da>
c0019d83:	90                   	nop
c0019d84:	3c f7                	cmp    al,0xf7
c0019d86:	0f 86 00 04 00 00    	jbe    c001a18c <Vm::x87Handler(regs*)+0x7be>
c0019d8c:	83 ec 0c             	sub    esp,0xc
c0019d8f:	6a 00                	push   0x0
c0019d91:	e8 f8 fa ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019d96:	89 c6                	mov    esi,eax
c0019d98:	89 d7                	mov    edi,edx
c0019d9a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d9e:	2d f8 00 00 00       	sub    eax,0xf8
c0019da3:	89 04 24             	mov    DWORD PTR [esp],eax
c0019da6:	66 90                	xchg   ax,ax
c0019da8:	e8 e1 fa ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019dad:	57                   	push   edi
c0019dae:	56                   	push   esi
c0019daf:	52                   	push   edx
c0019db0:	50                   	push   eax
c0019db1:	e8 a6 fa ff ff       	call   c001985c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019db6:	83 c4 1c             	add    esp,0x1c
c0019db9:	52                   	push   edx
c0019dba:	50                   	push   eax
c0019dbb:	6a 00                	push   0x0
c0019dbd:	e9 6a 02 00 00       	jmp    c001a02c <Vm::x87Handler(regs*)+0x65e>
c0019dc2:	66 90                	xchg   ax,ax
c0019dc4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019dc8:	8d 50 40             	lea    edx,[eax+0x40]
c0019dcb:	80 fa 07             	cmp    dl,0x7
c0019dce:	77 38                	ja     c0019e08 <Vm::x87Handler(regs*)+0x43a>
c0019dd0:	83 ec 0c             	sub    esp,0xc
c0019dd3:	2d c0 00 00 00       	sub    eax,0xc0
c0019dd8:	50                   	push   eax
c0019dd9:	e8 b0 fa ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019dde:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019de5:	89 c6                	mov    esi,eax
c0019de7:	89 d7                	mov    edi,edx
c0019de9:	e8 a0 fa ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019dee:	57                   	push   edi
c0019def:	56                   	push   esi
c0019df0:	52                   	push   edx
c0019df1:	50                   	push   eax
c0019df2:	e8 0d fa ff ff       	call   c0019804 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019df7:	83 c4 1c             	add    esp,0x1c
c0019dfa:	52                   	push   edx
c0019dfb:	50                   	push   eax
c0019dfc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e00:	2d c0 00 00 00       	sub    eax,0xc0
c0019e05:	eb 41                	jmp    c0019e48 <Vm::x87Handler(regs*)+0x47a>
c0019e07:	90                   	nop
c0019e08:	8d 50 38             	lea    edx,[eax+0x38]
c0019e0b:	80 fa 07             	cmp    dl,0x7
c0019e0e:	77 40                	ja     c0019e50 <Vm::x87Handler(regs*)+0x482>
c0019e10:	83 ec 0c             	sub    esp,0xc
c0019e13:	2d c8 00 00 00       	sub    eax,0xc8
c0019e18:	50                   	push   eax
c0019e19:	e8 70 fa ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019e1e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019e25:	89 c6                	mov    esi,eax
c0019e27:	89 d7                	mov    edi,edx
c0019e29:	e8 60 fa ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019e2e:	57                   	push   edi
c0019e2f:	56                   	push   esi
c0019e30:	52                   	push   edx
c0019e31:	50                   	push   eax
c0019e32:	e8 06 fa ff ff       	call   c001983d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019e37:	83 c4 1c             	add    esp,0x1c
c0019e3a:	52                   	push   edx
c0019e3b:	50                   	push   eax
c0019e3c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e40:	2d c8 00 00 00       	sub    eax,0xc8
c0019e45:	8d 76 00             	lea    esi,[esi+0x0]
c0019e48:	50                   	push   eax
c0019e49:	e9 42 fc ff ff       	jmp    c0019a90 <Vm::x87Handler(regs*)+0xc2>
c0019e4e:	66 90                	xchg   ax,ax
c0019e50:	83 c0 18             	add    eax,0x18
c0019e53:	3c 07                	cmp    al,0x7
c0019e55:	0f 87 6d 04 00 00    	ja     c001a2c8 <Vm::x87Handler(regs*)+0x8fa>
c0019e5b:	83 ec 0c             	sub    esp,0xc
c0019e5e:	6a 00                	push   0x0
c0019e60:	e8 29 fa ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019e65:	89 c6                	mov    esi,eax
c0019e67:	89 d7                	mov    edi,edx
c0019e69:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e6d:	2d e8 00 00 00       	sub    eax,0xe8
c0019e72:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e75:	e8 14 fa ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019e7a:	57                   	push   edi
c0019e7b:	56                   	push   esi
c0019e7c:	52                   	push   edx
c0019e7d:	50                   	push   eax
c0019e7e:	e8 ab f9 ff ff       	call   c001982e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019e83:	83 c4 1c             	add    esp,0x1c
c0019e86:	52                   	push   edx
c0019e87:	50                   	push   eax
c0019e88:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e8c:	2d e8 00 00 00       	sub    eax,0xe8
c0019e91:	eb b5                	jmp    c0019e48 <Vm::x87Handler(regs*)+0x47a>
c0019e93:	90                   	nop
c0019e94:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e98:	8d 50 40             	lea    edx,[eax+0x40]
c0019e9b:	80 fa 07             	cmp    dl,0x7
c0019e9e:	77 3c                	ja     c0019edc <Vm::x87Handler(regs*)+0x50e>
c0019ea0:	83 ec 0c             	sub    esp,0xc
c0019ea3:	2d c0 00 00 00       	sub    eax,0xc0
c0019ea8:	50                   	push   eax
c0019ea9:	e8 e0 f9 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019eae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019eb5:	89 c6                	mov    esi,eax
c0019eb7:	89 d7                	mov    edi,edx
c0019eb9:	e8 d0 f9 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019ebe:	57                   	push   edi
c0019ebf:	56                   	push   esi
c0019ec0:	52                   	push   edx
c0019ec1:	50                   	push   eax
c0019ec2:	e8 3d f9 ff ff       	call   c0019804 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019ec7:	83 c4 1c             	add    esp,0x1c
c0019eca:	52                   	push   edx
c0019ecb:	50                   	push   eax
c0019ecc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ed0:	2d c0 00 00 00       	sub    eax,0xc0
c0019ed5:	e9 b2 01 00 00       	jmp    c001a08c <Vm::x87Handler(regs*)+0x6be>
c0019eda:	66 90                	xchg   ax,ax
c0019edc:	8d 50 20             	lea    edx,[eax+0x20]
c0019edf:	80 fa 07             	cmp    dl,0x7
c0019ee2:	77 3c                	ja     c0019f20 <Vm::x87Handler(regs*)+0x552>
c0019ee4:	83 ec 0c             	sub    esp,0xc
c0019ee7:	2d e0 00 00 00       	sub    eax,0xe0
c0019eec:	50                   	push   eax
c0019eed:	e8 9c f9 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019ef2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019ef9:	89 c6                	mov    esi,eax
c0019efb:	89 d7                	mov    edi,edx
c0019efd:	e8 8c f9 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019f02:	57                   	push   edi
c0019f03:	56                   	push   esi
c0019f04:	52                   	push   edx
c0019f05:	50                   	push   eax
c0019f06:	e8 23 f9 ff ff       	call   c001982e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019f0b:	83 c4 1c             	add    esp,0x1c
c0019f0e:	52                   	push   edx
c0019f0f:	50                   	push   eax
c0019f10:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f14:	2d e0 00 00 00       	sub    eax,0xe0
c0019f19:	e9 6e 01 00 00       	jmp    c001a08c <Vm::x87Handler(regs*)+0x6be>
c0019f1e:	66 90                	xchg   ax,ax
c0019f20:	8d 50 18             	lea    edx,[eax+0x18]
c0019f23:	80 fa 07             	cmp    dl,0x7
c0019f26:	77 3c                	ja     c0019f64 <Vm::x87Handler(regs*)+0x596>
c0019f28:	83 ec 0c             	sub    esp,0xc
c0019f2b:	6a 00                	push   0x0
c0019f2d:	e8 5c f9 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019f32:	89 c6                	mov    esi,eax
c0019f34:	89 d7                	mov    edi,edx
c0019f36:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f3a:	2d e8 00 00 00       	sub    eax,0xe8
c0019f3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f42:	e8 47 f9 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019f47:	57                   	push   edi
c0019f48:	56                   	push   esi
c0019f49:	52                   	push   edx
c0019f4a:	50                   	push   eax
c0019f4b:	e8 de f8 ff ff       	call   c001982e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019f50:	83 c4 1c             	add    esp,0x1c
c0019f53:	52                   	push   edx
c0019f54:	50                   	push   eax
c0019f55:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f59:	2d e8 00 00 00       	sub    eax,0xe8
c0019f5e:	e9 29 01 00 00       	jmp    c001a08c <Vm::x87Handler(regs*)+0x6be>
c0019f63:	90                   	nop
c0019f64:	8d 50 38             	lea    edx,[eax+0x38]
c0019f67:	80 fa 07             	cmp    dl,0x7
c0019f6a:	77 3c                	ja     c0019fa8 <Vm::x87Handler(regs*)+0x5da>
c0019f6c:	83 ec 0c             	sub    esp,0xc
c0019f6f:	2d c8 00 00 00       	sub    eax,0xc8
c0019f74:	50                   	push   eax
c0019f75:	e8 14 f9 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019f7a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019f81:	89 c6                	mov    esi,eax
c0019f83:	89 d7                	mov    edi,edx
c0019f85:	e8 04 f9 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019f8a:	57                   	push   edi
c0019f8b:	56                   	push   esi
c0019f8c:	52                   	push   edx
c0019f8d:	50                   	push   eax
c0019f8e:	e8 aa f8 ff ff       	call   c001983d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019f93:	83 c4 1c             	add    esp,0x1c
c0019f96:	52                   	push   edx
c0019f97:	50                   	push   eax
c0019f98:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f9c:	2d c8 00 00 00       	sub    eax,0xc8
c0019fa1:	e9 82 00 00 00       	jmp    c001a028 <Vm::x87Handler(regs*)+0x65a>
c0019fa6:	66 90                	xchg   ax,ax
c0019fa8:	3c f7                	cmp    al,0xf7
c0019faa:	76 38                	jbe    c0019fe4 <Vm::x87Handler(regs*)+0x616>
c0019fac:	83 ec 0c             	sub    esp,0xc
c0019faf:	6a 00                	push   0x0
c0019fb1:	e8 d8 f8 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019fb6:	89 c6                	mov    esi,eax
c0019fb8:	89 d7                	mov    edi,edx
c0019fba:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fbe:	2d f8 00 00 00       	sub    eax,0xf8
c0019fc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0019fc6:	e8 c3 f8 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019fcb:	57                   	push   edi
c0019fcc:	56                   	push   esi
c0019fcd:	52                   	push   edx
c0019fce:	50                   	push   eax
c0019fcf:	e8 88 f8 ff ff       	call   c001985c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019fd4:	83 c4 1c             	add    esp,0x1c
c0019fd7:	52                   	push   edx
c0019fd8:	50                   	push   eax
c0019fd9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fdd:	2d f8 00 00 00       	sub    eax,0xf8
c0019fe2:	eb 44                	jmp    c001a028 <Vm::x87Handler(regs*)+0x65a>
c0019fe4:	8d 50 10             	lea    edx,[eax+0x10]
c0019fe7:	80 fa 07             	cmp    dl,0x7
c0019fea:	0f 87 6c 01 00 00    	ja     c001a15c <Vm::x87Handler(regs*)+0x78e>
c0019ff0:	83 ec 0c             	sub    esp,0xc
c0019ff3:	2d f0 00 00 00       	sub    eax,0xf0
c0019ff8:	50                   	push   eax
c0019ff9:	e8 90 f8 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c0019ffe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a005:	89 c6                	mov    esi,eax
c001a007:	89 d7                	mov    edi,edx
c001a009:	e8 80 f8 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c001a00e:	57                   	push   edi
c001a00f:	56                   	push   esi
c001a010:	52                   	push   edx
c001a011:	50                   	push   eax
c001a012:	e8 45 f8 ff ff       	call   c001985c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a017:	83 c4 1c             	add    esp,0x1c
c001a01a:	52                   	push   edx
c001a01b:	50                   	push   eax
c001a01c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a020:	2d f0 00 00 00       	sub    eax,0xf0
c001a025:	8d 76 00             	lea    esi,[esi+0x0]
c001a028:	50                   	push   eax
c001a029:	8d 76 00             	lea    esi,[esi+0x0]
c001a02c:	e8 a0 f8 ff ff       	call   c00198d1 <Vm::fpuSetReg(int, unsigned long long)>
c001a031:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a035:	e8 41 f9 ff ff       	call   c001997b <Vm::fpuPop()>
c001a03a:	e9 0d fa ff ff       	jmp    c0019a4c <Vm::x87Handler(regs*)+0x7e>
c001a03f:	90                   	nop
c001a040:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a044:	8d 50 30             	lea    edx,[eax+0x30]
c001a047:	80 fa 07             	cmp    dl,0x7
c001a04a:	77 20                	ja     c001a06c <Vm::x87Handler(regs*)+0x69e>
c001a04c:	83 ec 0c             	sub    esp,0xc
c001a04f:	6a 00                	push   0x0
c001a051:	e8 38 f8 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c001a056:	83 c4 0c             	add    esp,0xc
c001a059:	52                   	push   edx
c001a05a:	50                   	push   eax
c001a05b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a05f:	2d d0 00 00 00       	sub    eax,0xd0
c001a064:	e9 df fd ff ff       	jmp    c0019e48 <Vm::x87Handler(regs*)+0x47a>
c001a069:	8d 76 00             	lea    esi,[esi+0x0]
c001a06c:	8d 50 28             	lea    edx,[eax+0x28]
c001a06f:	80 fa 07             	cmp    dl,0x7
c001a072:	77 28                	ja     c001a09c <Vm::x87Handler(regs*)+0x6ce>
c001a074:	83 ec 0c             	sub    esp,0xc
c001a077:	6a 00                	push   0x0
c001a079:	e8 10 f8 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c001a07e:	83 c4 0c             	add    esp,0xc
c001a081:	52                   	push   edx
c001a082:	50                   	push   eax
c001a083:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a087:	2d d8 00 00 00       	sub    eax,0xd8
c001a08c:	50                   	push   eax
c001a08d:	e8 3f f8 ff ff       	call   c00198d1 <Vm::fpuSetReg(int, unsigned long long)>
c001a092:	e8 e4 f8 ff ff       	call   c001997b <Vm::fpuPop()>
c001a097:	e9 ac f9 ff ff       	jmp    c0019a48 <Vm::x87Handler(regs*)+0x7a>
c001a09c:	8d 50 20             	lea    edx,[eax+0x20]
c001a09f:	80 fa 07             	cmp    dl,0x7
c001a0a2:	77 30                	ja     c001a0d4 <Vm::x87Handler(regs*)+0x706>
c001a0a4:	83 ec 0c             	sub    esp,0xc
c001a0a7:	2d e0 00 00 00       	sub    eax,0xe0
c001a0ac:	50                   	push   eax
c001a0ad:	e8 dc f7 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c001a0b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a0b9:	89 c6                	mov    esi,eax
c001a0bb:	89 d7                	mov    edi,edx
c001a0bd:	e8 cc f7 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c001a0c2:	57                   	push   edi
c001a0c3:	56                   	push   esi
c001a0c4:	52                   	push   edx
c001a0c5:	50                   	push   eax
c001a0c6:	e8 e3 f6 ff ff       	call   c00197ae <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a0cb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a0cf:	e9 78 02 00 00       	jmp    c001a34c <Vm::x87Handler(regs*)+0x97e>
c001a0d4:	8d 50 18             	lea    edx,[eax+0x18]
c001a0d7:	80 fa 07             	cmp    dl,0x7
c001a0da:	0f 87 10 fb ff ff    	ja     c0019bf0 <Vm::x87Handler(regs*)+0x222>
c001a0e0:	83 ec 0c             	sub    esp,0xc
c001a0e3:	2d e8 00 00 00       	sub    eax,0xe8
c001a0e8:	50                   	push   eax
c001a0e9:	e8 a0 f7 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c001a0ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a0f5:	89 c6                	mov    esi,eax
c001a0f7:	89 d7                	mov    edi,edx
c001a0f9:	e8 90 f7 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c001a0fe:	57                   	push   edi
c001a0ff:	56                   	push   esi
c001a100:	52                   	push   edx
c001a101:	50                   	push   eax
c001a102:	e8 a7 f6 ff ff       	call   c00197ae <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a107:	83 c4 20             	add    esp,0x20
c001a10a:	e8 6c f8 ff ff       	call   c001997b <Vm::fpuPop()>
c001a10f:	eb 6f                	jmp    c001a180 <Vm::x87Handler(regs*)+0x7b2>
c001a111:	8d 76 00             	lea    esi,[esi+0x0]
c001a114:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a118:	0f 85 22 01 00 00    	jne    c001a240 <Vm::x87Handler(regs*)+0x872>
c001a11e:	66 90                	xchg   ax,ax
c001a120:	83 ec 0c             	sub    esp,0xc
c001a123:	6a 01                	push   0x1
c001a125:	e8 64 f7 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c001a12a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a131:	89 c6                	mov    esi,eax
c001a133:	89 d7                	mov    edi,edx
c001a135:	e8 54 f7 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c001a13a:	57                   	push   edi
c001a13b:	56                   	push   esi
c001a13c:	52                   	push   edx
c001a13d:	50                   	push   eax
c001a13e:	e8 6b f6 ff ff       	call   c00197ae <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a143:	83 c4 20             	add    esp,0x20
c001a146:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a14a:	e8 2c f8 ff ff       	call   c001997b <Vm::fpuPop()>
c001a14f:	e8 27 f8 ff ff       	call   c001997b <Vm::fpuPop()>
c001a154:	e9 f7 f8 ff ff       	jmp    c0019a50 <Vm::x87Handler(regs*)+0x82>
c001a159:	8d 76 00             	lea    esi,[esi+0x0]
c001a15c:	3c d9                	cmp    al,0xd9
c001a15e:	0f 85 e8 02 00 00    	jne    c001a44c <Vm::x87Handler(regs*)+0xa7e>
c001a164:	eb ba                	jmp    c001a120 <Vm::x87Handler(regs*)+0x752>
c001a166:	66 90                	xchg   ax,ax
c001a168:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a16c:	0f 85 2a 03 00 00    	jne    c001a49c <Vm::x87Handler(regs*)+0xace>
c001a172:	0f b7 05 e0 79 02 c0 	movzx  eax,WORD PTR ds:0xc00279e0
c001a179:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a17d:	8d 76 00             	lea    esi,[esi+0x0]
c001a180:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a184:	e9 c7 f8 ff ff       	jmp    c0019a50 <Vm::x87Handler(regs*)+0x82>
c001a189:	8d 76 00             	lea    esi,[esi+0x0]
c001a18c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a190:	84 d2                	test   dl,dl
c001a192:	75 10                	jne    c001a1a4 <Vm::x87Handler(regs*)+0x7d6>
c001a194:	83 ec 0c             	sub    esp,0xc
c001a197:	ff 36                	push   DWORD PTR [esi]
c001a199:	e8 29 f4 ff ff       	call   c00195c7 <Vm::fpu32ToInternal(unsigned int)>
c001a19e:	e9 39 01 00 00       	jmp    c001a2dc <Vm::x87Handler(regs*)+0x90e>
c001a1a3:	90                   	nop
c001a1a4:	80 fa 01             	cmp    dl,0x1
c001a1a7:	75 0f                	jne    c001a1b8 <Vm::x87Handler(regs*)+0x7ea>
c001a1a9:	83 ec 0c             	sub    esp,0xc
c001a1ac:	ff 36                	push   DWORD PTR [esi]
c001a1ae:	e8 14 f4 ff ff       	call   c00195c7 <Vm::fpu32ToInternal(unsigned int)>
c001a1b3:	e9 b4 02 00 00       	jmp    c001a46c <Vm::x87Handler(regs*)+0xa9e>
c001a1b8:	80 fa 04             	cmp    dl,0x4
c001a1bb:	75 0f                	jne    c001a1cc <Vm::x87Handler(regs*)+0x7fe>
c001a1bd:	83 ec 0c             	sub    esp,0xc
c001a1c0:	ff 36                	push   DWORD PTR [esi]
c001a1c2:	e8 00 f4 ff ff       	call   c00195c7 <Vm::fpu32ToInternal(unsigned int)>
c001a1c7:	e9 9c 01 00 00       	jmp    c001a368 <Vm::x87Handler(regs*)+0x99a>
c001a1cc:	80 fa 05             	cmp    dl,0x5
c001a1cf:	75 1b                	jne    c001a1ec <Vm::x87Handler(regs*)+0x81e>
c001a1d1:	83 ec 0c             	sub    esp,0xc
c001a1d4:	6a 00                	push   0x0
c001a1d6:	e8 b3 f6 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c001a1db:	89 c7                	mov    edi,eax
c001a1dd:	89 d5                	mov    ebp,edx
c001a1df:	58                   	pop    eax
c001a1e0:	ff 36                	push   DWORD PTR [esi]
c001a1e2:	e8 e0 f3 ff ff       	call   c00195c7 <Vm::fpu32ToInternal(unsigned int)>
c001a1e7:	e9 bc 01 00 00       	jmp    c001a3a8 <Vm::x87Handler(regs*)+0x9da>
c001a1ec:	80 fa 06             	cmp    dl,0x6
c001a1ef:	75 0f                	jne    c001a200 <Vm::x87Handler(regs*)+0x832>
c001a1f1:	83 ec 0c             	sub    esp,0xc
c001a1f4:	ff 36                	push   DWORD PTR [esi]
c001a1f6:	e8 cc f3 ff ff       	call   c00195c7 <Vm::fpu32ToInternal(unsigned int)>
c001a1fb:	e9 cc 01 00 00       	jmp    c001a3cc <Vm::x87Handler(regs*)+0x9fe>
c001a200:	31 c0                	xor    eax,eax
c001a202:	80 fa 07             	cmp    dl,0x7
c001a205:	0f 85 d5 02 00 00    	jne    c001a4e0 <Vm::x87Handler(regs*)+0xb12>
c001a20b:	83 ec 0c             	sub    esp,0xc
c001a20e:	6a 00                	push   0x0
c001a210:	e8 79 f6 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c001a215:	89 c7                	mov    edi,eax
c001a217:	89 d5                	mov    ebp,edx
c001a219:	58                   	pop    eax
c001a21a:	ff 36                	push   DWORD PTR [esi]
c001a21c:	e8 a6 f3 ff ff       	call   c00195c7 <Vm::fpu32ToInternal(unsigned int)>
c001a221:	e9 ee 01 00 00       	jmp    c001a414 <Vm::x87Handler(regs*)+0xa46>
c001a226:	66 90                	xchg   ax,ax
c001a228:	80 fa 03             	cmp    dl,0x3
c001a22b:	0f 85 f7 01 00 00    	jne    c001a428 <Vm::x87Handler(regs*)+0xa5a>
c001a231:	e8 45 f7 ff ff       	call   c001997b <Vm::fpuPop()>
c001a236:	51                   	push   ecx
c001a237:	51                   	push   ecx
c001a238:	e9 03 02 00 00       	jmp    c001a440 <Vm::x87Handler(regs*)+0xa72>
c001a23d:	8d 76 00             	lea    esi,[esi+0x0]
c001a240:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a244:	80 fa 01             	cmp    dl,0x1
c001a247:	75 0b                	jne    c001a254 <Vm::x87Handler(regs*)+0x886>
c001a249:	57                   	push   edi
c001a24a:	57                   	push   edi
c001a24b:	8b 06                	mov    eax,DWORD PTR [esi]
c001a24d:	e9 0e 02 00 00       	jmp    c001a460 <Vm::x87Handler(regs*)+0xa92>
c001a252:	66 90                	xchg   ax,ax
c001a254:	80 fa 04             	cmp    dl,0x4
c001a257:	75 13                	jne    c001a26c <Vm::x87Handler(regs*)+0x89e>
c001a259:	31 d2                	xor    edx,edx
c001a25b:	51                   	push   ecx
c001a25c:	51                   	push   ecx
c001a25d:	8b 06                	mov    eax,DWORD PTR [esi]
c001a25f:	52                   	push   edx
c001a260:	50                   	push   eax
c001a261:	e8 4a f4 ff ff       	call   c00196b0 <Vm::fpuLongToFloat(long long)>
c001a266:	e9 fd 00 00 00       	jmp    c001a368 <Vm::x87Handler(regs*)+0x99a>
c001a26b:	90                   	nop
c001a26c:	31 c0                	xor    eax,eax
c001a26e:	80 fa 07             	cmp    dl,0x7
c001a271:	0f 85 69 02 00 00    	jne    c001a4e0 <Vm::x87Handler(regs*)+0xb12>
c001a277:	83 ec 0c             	sub    esp,0xc
c001a27a:	6a 00                	push   0x0
c001a27c:	e8 0d f6 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c001a281:	89 c7                	mov    edi,eax
c001a283:	89 d5                	mov    ebp,edx
c001a285:	58                   	pop    eax
c001a286:	8b 06                	mov    eax,DWORD PTR [esi]
c001a288:	5a                   	pop    edx
c001a289:	31 d2                	xor    edx,edx
c001a28b:	52                   	push   edx
c001a28c:	50                   	push   eax
c001a28d:	e8 1e f4 ff ff       	call   c00196b0 <Vm::fpuLongToFloat(long long)>
c001a292:	e9 7d 01 00 00       	jmp    c001a414 <Vm::x87Handler(regs*)+0xa46>
c001a297:	90                   	nop
c001a298:	84 d2                	test   dl,dl
c001a29a:	75 10                	jne    c001a2ac <Vm::x87Handler(regs*)+0x8de>
c001a29c:	31 d2                	xor    edx,edx
c001a29e:	55                   	push   ebp
c001a29f:	55                   	push   ebp
c001a2a0:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2a2:	52                   	push   edx
c001a2a3:	50                   	push   eax
c001a2a4:	e9 03 02 00 00       	jmp    c001a4ac <Vm::x87Handler(regs*)+0xade>
c001a2a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a2ac:	31 c0                	xor    eax,eax
c001a2ae:	80 fa 02             	cmp    dl,0x2
c001a2b1:	0f 85 29 02 00 00    	jne    c001a4e0 <Vm::x87Handler(regs*)+0xb12>
c001a2b7:	83 ec 0c             	sub    esp,0xc
c001a2ba:	6a 00                	push   0x0
c001a2bc:	e8 cd f5 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c001a2c1:	59                   	pop    ecx
c001a2c2:	5f                   	pop    edi
c001a2c3:	e9 18 f9 ff ff       	jmp    c0019be0 <Vm::x87Handler(regs*)+0x212>
c001a2c8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a2cc:	84 d2                	test   dl,dl
c001a2ce:	75 2c                	jne    c001a2fc <Vm::x87Handler(regs*)+0x92e>
c001a2d0:	50                   	push   eax
c001a2d1:	50                   	push   eax
c001a2d2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2d5:	ff 36                	push   DWORD PTR [esi]
c001a2d7:	e8 30 f3 ff ff       	call   c001960c <Vm::fpu64ToInternal(unsigned long long)>
c001a2dc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2e3:	89 c6                	mov    esi,eax
c001a2e5:	89 d7                	mov    edi,edx
c001a2e7:	e8 a2 f5 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c001a2ec:	57                   	push   edi
c001a2ed:	56                   	push   esi
c001a2ee:	52                   	push   edx
c001a2ef:	50                   	push   eax
c001a2f0:	e8 0f f5 ff ff       	call   c0019804 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a2f5:	e9 8e 01 00 00       	jmp    c001a488 <Vm::x87Handler(regs*)+0xaba>
c001a2fa:	66 90                	xchg   ax,ax
c001a2fc:	80 fa 01             	cmp    dl,0x1
c001a2ff:	75 13                	jne    c001a314 <Vm::x87Handler(regs*)+0x946>
c001a301:	50                   	push   eax
c001a302:	50                   	push   eax
c001a303:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a306:	ff 36                	push   DWORD PTR [esi]
c001a308:	e8 ff f2 ff ff       	call   c001960c <Vm::fpu64ToInternal(unsigned long long)>
c001a30d:	e9 5a 01 00 00       	jmp    c001a46c <Vm::x87Handler(regs*)+0xa9e>
c001a312:	66 90                	xchg   ax,ax
c001a314:	80 fa 02             	cmp    dl,0x2
c001a317:	0f 85 03 f9 ff ff    	jne    c0019c20 <Vm::x87Handler(regs*)+0x252>
c001a31d:	55                   	push   ebp
c001a31e:	55                   	push   ebp
c001a31f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a322:	ff 36                	push   DWORD PTR [esi]
c001a324:	e8 e3 f2 ff ff       	call   c001960c <Vm::fpu64ToInternal(unsigned long long)>
c001a329:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a330:	89 c6                	mov    esi,eax
c001a332:	89 d7                	mov    edi,edx
c001a334:	e8 55 f5 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c001a339:	57                   	push   edi
c001a33a:	56                   	push   esi
c001a33b:	52                   	push   edx
c001a33c:	50                   	push   eax
c001a33d:	e8 6c f4 ff ff       	call   c00197ae <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a342:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a346:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a349:	8d 76 00             	lea    esi,[esi+0x0]
c001a34c:	83 c4 20             	add    esp,0x20
c001a34f:	e9 fc f6 ff ff       	jmp    c0019a50 <Vm::x87Handler(regs*)+0x82>
c001a354:	80 fa 04             	cmp    dl,0x4
c001a357:	75 2f                	jne    c001a388 <Vm::x87Handler(regs*)+0x9ba>
c001a359:	51                   	push   ecx
c001a35a:	51                   	push   ecx
c001a35b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a35e:	ff 36                	push   DWORD PTR [esi]
c001a360:	e8 a7 f2 ff ff       	call   c001960c <Vm::fpu64ToInternal(unsigned long long)>
c001a365:	8d 76 00             	lea    esi,[esi+0x0]
c001a368:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a36f:	89 c6                	mov    esi,eax
c001a371:	89 d7                	mov    edi,edx
c001a373:	e8 16 f5 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c001a378:	57                   	push   edi
c001a379:	56                   	push   esi
c001a37a:	52                   	push   edx
c001a37b:	50                   	push   eax
c001a37c:	e8 ad f4 ff ff       	call   c001982e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a381:	e9 02 01 00 00       	jmp    c001a488 <Vm::x87Handler(regs*)+0xaba>
c001a386:	66 90                	xchg   ax,ax
c001a388:	80 fa 05             	cmp    dl,0x5
c001a38b:	75 2b                	jne    c001a3b8 <Vm::x87Handler(regs*)+0x9ea>
c001a38d:	83 ec 0c             	sub    esp,0xc
c001a390:	6a 00                	push   0x0
c001a392:	e8 f7 f4 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c001a397:	89 c7                	mov    edi,eax
c001a399:	89 d5                	mov    ebp,edx
c001a39b:	58                   	pop    eax
c001a39c:	5a                   	pop    edx
c001a39d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a3a0:	ff 36                	push   DWORD PTR [esi]
c001a3a2:	e8 65 f2 ff ff       	call   c001960c <Vm::fpu64ToInternal(unsigned long long)>
c001a3a7:	90                   	nop
c001a3a8:	83 c4 10             	add    esp,0x10
c001a3ab:	55                   	push   ebp
c001a3ac:	57                   	push   edi
c001a3ad:	52                   	push   edx
c001a3ae:	50                   	push   eax
c001a3af:	e8 7a f4 ff ff       	call   c001982e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a3b4:	eb 6a                	jmp    c001a420 <Vm::x87Handler(regs*)+0xa52>
c001a3b6:	66 90                	xchg   ax,ax
c001a3b8:	80 fa 06             	cmp    dl,0x6
c001a3bb:	75 2f                	jne    c001a3ec <Vm::x87Handler(regs*)+0xa1e>
c001a3bd:	51                   	push   ecx
c001a3be:	51                   	push   ecx
c001a3bf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a3c2:	ff 36                	push   DWORD PTR [esi]
c001a3c4:	e8 43 f2 ff ff       	call   c001960c <Vm::fpu64ToInternal(unsigned long long)>
c001a3c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a3cc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a3d3:	89 c6                	mov    esi,eax
c001a3d5:	89 d7                	mov    edi,edx
c001a3d7:	e8 b2 f4 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c001a3dc:	57                   	push   edi
c001a3dd:	56                   	push   esi
c001a3de:	52                   	push   edx
c001a3df:	50                   	push   eax
c001a3e0:	e8 77 f4 ff ff       	call   c001985c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a3e5:	e9 9e 00 00 00       	jmp    c001a488 <Vm::x87Handler(regs*)+0xaba>
c001a3ea:	66 90                	xchg   ax,ax
c001a3ec:	31 c0                	xor    eax,eax
c001a3ee:	80 fa 07             	cmp    dl,0x7
c001a3f1:	0f 85 e9 00 00 00    	jne    c001a4e0 <Vm::x87Handler(regs*)+0xb12>
c001a3f7:	83 ec 0c             	sub    esp,0xc
c001a3fa:	6a 00                	push   0x0
c001a3fc:	e8 8d f4 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c001a401:	89 c7                	mov    edi,eax
c001a403:	89 d5                	mov    ebp,edx
c001a405:	58                   	pop    eax
c001a406:	5a                   	pop    edx
c001a407:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a40a:	ff 36                	push   DWORD PTR [esi]
c001a40c:	e8 fb f1 ff ff       	call   c001960c <Vm::fpu64ToInternal(unsigned long long)>
c001a411:	8d 76 00             	lea    esi,[esi+0x0]
c001a414:	83 c4 10             	add    esp,0x10
c001a417:	55                   	push   ebp
c001a418:	57                   	push   edi
c001a419:	52                   	push   edx
c001a41a:	50                   	push   eax
c001a41b:	e8 3c f4 ff ff       	call   c001985c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a420:	83 c4 0c             	add    esp,0xc
c001a423:	eb 67                	jmp    c001a48c <Vm::x87Handler(regs*)+0xabe>
c001a425:	8d 76 00             	lea    esi,[esi+0x0]
c001a428:	31 c0                	xor    eax,eax
c001a42a:	80 fa 02             	cmp    dl,0x2
c001a42d:	0f 85 ad 00 00 00    	jne    c001a4e0 <Vm::x87Handler(regs*)+0xb12>
c001a433:	83 ec 0c             	sub    esp,0xc
c001a436:	6a 00                	push   0x0
c001a438:	e8 51 f4 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c001a43d:	59                   	pop    ecx
c001a43e:	5f                   	pop    edi
c001a43f:	90                   	nop
c001a440:	52                   	push   edx
c001a441:	50                   	push   eax
c001a442:	e8 77 f1 ff ff       	call   c00195be <Vm::fpuInternalTo64(unsigned long long)>
c001a447:	e9 84 00 00 00       	jmp    c001a4d0 <Vm::x87Handler(regs*)+0xb02>
c001a44c:	31 c0                	xor    eax,eax
c001a44e:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001a453:	0f 85 87 00 00 00    	jne    c001a4e0 <Vm::x87Handler(regs*)+0xb12>
c001a459:	50                   	push   eax
c001a45a:	50                   	push   eax
c001a45b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001a45e:	66 90                	xchg   ax,ax
c001a460:	31 d2                	xor    edx,edx
c001a462:	52                   	push   edx
c001a463:	50                   	push   eax
c001a464:	e8 47 f2 ff ff       	call   c00196b0 <Vm::fpuLongToFloat(long long)>
c001a469:	8d 76 00             	lea    esi,[esi+0x0]
c001a46c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a473:	89 c6                	mov    esi,eax
c001a475:	89 d7                	mov    edi,edx
c001a477:	e8 12 f4 ff ff       	call   c001988e <Vm::fpuGetReg(int)>
c001a47c:	57                   	push   edi
c001a47d:	56                   	push   esi
c001a47e:	52                   	push   edx
c001a47f:	50                   	push   eax
c001a480:	e8 b8 f3 ff ff       	call   c001983d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a485:	8d 76 00             	lea    esi,[esi+0x0]
c001a488:	83 c4 1c             	add    esp,0x1c
c001a48b:	90                   	nop
c001a48c:	52                   	push   edx
c001a48d:	50                   	push   eax
c001a48e:	6a 00                	push   0x0
c001a490:	e8 3c f4 ff ff       	call   c00198d1 <Vm::fpuSetReg(int, unsigned long long)>
c001a495:	e9 7a f7 ff ff       	jmp    c0019c14 <Vm::x87Handler(regs*)+0x246>
c001a49a:	66 90                	xchg   ax,ax
c001a49c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a4a0:	80 fa 05             	cmp    dl,0x5
c001a4a3:	75 13                	jne    c001a4b8 <Vm::x87Handler(regs*)+0xaea>
c001a4a5:	55                   	push   ebp
c001a4a6:	55                   	push   ebp
c001a4a7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a4aa:	ff 36                	push   DWORD PTR [esi]
c001a4ac:	e8 c3 f1 ff ff       	call   c0019674 <Vm::fpuULongToFloat(unsigned long long)>
c001a4b1:	e9 52 f7 ff ff       	jmp    c0019c08 <Vm::x87Handler(regs*)+0x23a>
c001a4b6:	66 90                	xchg   ax,ax
c001a4b8:	31 c0                	xor    eax,eax
c001a4ba:	80 fa 07             	cmp    dl,0x7
c001a4bd:	75 21                	jne    c001a4e0 <Vm::x87Handler(regs*)+0xb12>
c001a4bf:	e8 b7 f4 ff ff       	call   c001997b <Vm::fpuPop()>
c001a4c4:	51                   	push   ecx
c001a4c5:	51                   	push   ecx
c001a4c6:	52                   	push   edx
c001a4c7:	50                   	push   eax
c001a4c8:	e8 48 f1 ff ff       	call   c0019615 <Vm::fpuFloatToLong(unsigned long long)>
c001a4cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a4d0:	83 c4 10             	add    esp,0x10
c001a4d3:	89 06                	mov    DWORD PTR [esi],eax
c001a4d5:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a4d8:	e9 7b f7 ff ff       	jmp    c0019c58 <Vm::x87Handler(regs*)+0x28a>
c001a4dd:	8d 76 00             	lea    esi,[esi+0x0]
c001a4e0:	83 c4 1c             	add    esp,0x1c
c001a4e3:	5b                   	pop    ebx
c001a4e4:	5e                   	pop    esi
c001a4e5:	5f                   	pop    edi
c001a4e6:	5d                   	pop    ebp
c001a4e7:	c3                   	ret    

c001a4e8 <__static_initialization_and_destruction_0(int, int)>:
c001a4e8:	83 ec 0c             	sub    esp,0xc
c001a4eb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001a4f0:	75 1a                	jne    c001a50c <__static_initialization_and_destruction_0(int, int)+0x24>
c001a4f2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001a4fa:	75 10                	jne    c001a50c <__static_initialization_and_destruction_0(int, int)+0x24>
c001a4fc:	83 ec 0c             	sub    esp,0xc
c001a4ff:	68 e0 79 02 c0       	push   0xc00279e0
c001a504:	e8 1f 74 00 00       	call   c0021928 <Vm::_FPUState::_FPUState()>
c001a509:	83 c4 10             	add    esp,0x10
c001a50c:	90                   	nop
c001a50d:	83 c4 0c             	add    esp,0xc
c001a510:	c3                   	ret    
c001a511:	8d 76 00             	lea    esi,[esi+0x0]

c001a514 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001a514:	83 ec 0c             	sub    esp,0xc
c001a517:	83 ec 08             	sub    esp,0x8
c001a51a:	68 ff ff 00 00       	push   0xffff
c001a51f:	6a 01                	push   0x1
c001a521:	e8 c2 ff ff ff       	call   c001a4e8 <__static_initialization_and_destruction_0(int, int)>
c001a526:	83 c4 10             	add    esp,0x10
c001a529:	83 c4 0c             	add    esp,0xc
c001a52c:	c3                   	ret    
c001a52d:	66 90                	xchg   ax,ax
c001a52f:	90                   	nop

c001a530 <FAT::getName()>:
c001a530:	b8 40 4b 02 c0       	mov    eax,0xc0024b40
c001a535:	c3                   	ret    
c001a536:	66 90                	xchg   ax,ax

c001a538 <FAT::tell(void*, unsigned long long*)>:
c001a538:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a53d:	75 09                	jne    c001a548 <FAT::tell(void*, unsigned long long*)+0x10>
c001a53f:	b8 04 00 00 00       	mov    eax,0x4
c001a544:	c3                   	ret    
c001a545:	8d 76 00             	lea    esi,[esi+0x0]
c001a548:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a54d:	75 09                	jne    c001a558 <FAT::tell(void*, unsigned long long*)+0x20>
c001a54f:	b8 04 00 00 00       	mov    eax,0x4
c001a554:	c3                   	ret    
c001a555:	8d 76 00             	lea    esi,[esi+0x0]
c001a558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a55c:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a55f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a562:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a566:	89 01                	mov    DWORD PTR [ecx],eax
c001a568:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a56b:	b8 00 00 00 00       	mov    eax,0x0
c001a570:	c3                   	ret    
c001a571:	90                   	nop
c001a572:	66 90                	xchg   ax,ax

c001a574 <FAT::stat(void*, unsigned long long*)>:
c001a574:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a579:	75 09                	jne    c001a584 <FAT::stat(void*, unsigned long long*)+0x10>
c001a57b:	b8 04 00 00 00       	mov    eax,0x4
c001a580:	c3                   	ret    
c001a581:	8d 76 00             	lea    esi,[esi+0x0]
c001a584:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a589:	75 09                	jne    c001a594 <FAT::stat(void*, unsigned long long*)+0x20>
c001a58b:	b8 04 00 00 00       	mov    eax,0x4
c001a590:	c3                   	ret    
c001a591:	8d 76 00             	lea    esi,[esi+0x0]
c001a594:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a598:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a59b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a59e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a5a2:	89 01                	mov    DWORD PTR [ecx],eax
c001a5a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a5a7:	b8 00 00 00 00       	mov    eax,0x0
c001a5ac:	c3                   	ret    
c001a5ad:	90                   	nop
c001a5ae:	66 90                	xchg   ax,ax

c001a5b0 <FAT::~FAT()>:
c001a5b0:	83 ec 0c             	sub    esp,0xc
c001a5b3:	ba 8c 4b 02 c0       	mov    edx,0xc0024b8c
c001a5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5bc:	89 10                	mov    DWORD PTR [eax],edx
c001a5be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5c2:	83 ec 0c             	sub    esp,0xc
c001a5c5:	50                   	push   eax
c001a5c6:	e8 33 28 ff ff       	call   c000cdfe <Filesystem::~Filesystem()>
c001a5cb:	83 c4 10             	add    esp,0x10
c001a5ce:	90                   	nop
c001a5cf:	83 c4 0c             	add    esp,0xc
c001a5d2:	c3                   	ret    
c001a5d3:	90                   	nop

c001a5d4 <FAT::~FAT()>:
c001a5d4:	83 ec 0c             	sub    esp,0xc
c001a5d7:	83 ec 0c             	sub    esp,0xc
c001a5da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5de:	e8 cd ff ff ff       	call   c001a5b0 <FAT::~FAT()>
c001a5e3:	83 c4 10             	add    esp,0x10
c001a5e6:	83 ec 08             	sub    esp,0x8
c001a5e9:	6a 08                	push   0x8
c001a5eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5ef:	e8 ee 23 ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c001a5f4:	83 c4 10             	add    esp,0x10
c001a5f7:	83 c4 0c             	add    esp,0xc
c001a5fa:	c3                   	ret    
c001a5fb:	90                   	nop

c001a5fc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a5fc:	83 ec 1c             	sub    esp,0x1c
c001a5ff:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a606:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a60b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a60f:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c001a616:	83 f8 ff             	cmp    eax,0xffffffff
c001a619:	75 35                	jne    c001a650 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a61b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a61f:	88 c2                	mov    dl,al
c001a621:	a1 40 7a 02 c0       	mov    eax,ds:0xc0027a40
c001a626:	01 d0                	add    eax,edx
c001a628:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a62c:	8b 15 40 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027a40
c001a632:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a636:	89 14 85 60 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85a0],edx
c001a63d:	a1 40 7a 02 c0       	mov    eax,ds:0xc0027a40
c001a642:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a646:	89 14 85 e0 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8520],edx
c001a64d:	eb 19                	jmp    c001a668 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a64f:	90                   	nop
c001a650:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a654:	88 c2                	mov    dl,al
c001a656:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a65a:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c001a661:	01 d0                	add    eax,edx
c001a663:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a667:	90                   	nop
c001a668:	83 ec 04             	sub    esp,0x4
c001a66b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a66f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a673:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a677:	50                   	push   eax
c001a678:	e8 b5 c5 fe ff       	call   c0006c32 <f_getlabel>
c001a67d:	83 c4 10             	add    esp,0x10
c001a680:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a684:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a689:	75 09                	jne    c001a694 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001a68b:	b8 00 00 00 00       	mov    eax,0x0
c001a690:	eb 0a                	jmp    c001a69c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001a692:	66 90                	xchg   ax,ax
c001a694:	b8 01 00 00 00       	mov    eax,0x1
c001a699:	8d 76 00             	lea    esi,[esi+0x0]
c001a69c:	83 c4 1c             	add    esp,0x1c
c001a69f:	c3                   	ret    

c001a6a0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a6a0:	57                   	push   edi
c001a6a1:	83 ec 58             	sub    esp,0x58
c001a6a4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a6ac:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a6b0:	b9 0f 00 00 00       	mov    ecx,0xf
c001a6b5:	b8 00 00 00 00       	mov    eax,0x0
c001a6ba:	fc                   	cld    
c001a6bb:	89 d7                	mov    edi,edx
c001a6bd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a6bf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a6c3:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c001a6ca:	83 f8 ff             	cmp    eax,0xffffffff
c001a6cd:	75 35                	jne    c001a704 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001a6cf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6d3:	88 c2                	mov    dl,al
c001a6d5:	a1 40 7a 02 c0       	mov    eax,ds:0xc0027a40
c001a6da:	01 d0                	add    eax,edx
c001a6dc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a6e0:	8b 15 40 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027a40
c001a6e6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a6ea:	89 14 85 60 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85a0],edx
c001a6f1:	a1 40 7a 02 c0       	mov    eax,ds:0xc0027a40
c001a6f6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a6fa:	89 14 85 e0 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8520],edx
c001a701:	eb 19                	jmp    c001a71c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001a703:	90                   	nop
c001a704:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a708:	88 c2                	mov    dl,al
c001a70a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a70e:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c001a715:	01 d0                	add    eax,edx
c001a717:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a71b:	90                   	nop
c001a71c:	83 ec 08             	sub    esp,0x8
c001a71f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a723:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a727:	50                   	push   eax
c001a728:	e8 53 61 fe ff       	call   c0000880 <strcat>
c001a72d:	83 c4 10             	add    esp,0x10
c001a730:	83 ec 0c             	sub    esp,0xc
c001a733:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a737:	50                   	push   eax
c001a738:	e8 e3 c6 fe ff       	call   c0006e20 <f_setlabel>
c001a73d:	83 c4 10             	add    esp,0x10
c001a740:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a744:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a749:	75 09                	jne    c001a754 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001a74b:	b8 00 00 00 00       	mov    eax,0x0
c001a750:	eb 0a                	jmp    c001a75c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001a752:	66 90                	xchg   ax,ax
c001a754:	b8 01 00 00 00       	mov    eax,0x1
c001a759:	8d 76 00             	lea    esi,[esi+0x0]
c001a75c:	83 c4 58             	add    esp,0x58
c001a75f:	5f                   	pop    edi
c001a760:	c3                   	ret    
c001a761:	90                   	nop
c001a762:	66 90                	xchg   ax,ax

c001a764 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a764:	83 ec 2c             	sub    esp,0x2c
c001a767:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a76f:	83 ec 08             	sub    esp,0x8
c001a772:	68 64 4b 02 c0       	push   0xc0024b64
c001a777:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a77b:	e8 4c 60 fe ff       	call   c00007cc <strcmp>
c001a780:	83 c4 10             	add    esp,0x10
c001a783:	85 c0                	test   eax,eax
c001a785:	0f 94 c0             	sete   al
c001a788:	84 c0                	test   al,al
c001a78a:	74 10                	je     c001a79c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001a78c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a794:	e9 b3 00 00 00       	jmp    c001a84c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a799:	8d 76 00             	lea    esi,[esi+0x0]
c001a79c:	83 ec 08             	sub    esp,0x8
c001a79f:	68 56 4b 02 c0       	push   0xc0024b56
c001a7a4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7a8:	e8 1f 60 fe ff       	call   c00007cc <strcmp>
c001a7ad:	83 c4 10             	add    esp,0x10
c001a7b0:	85 c0                	test   eax,eax
c001a7b2:	0f 94 c0             	sete   al
c001a7b5:	84 c0                	test   al,al
c001a7b7:	74 0f                	je     c001a7c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001a7b9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a7c1:	e9 86 00 00 00       	jmp    c001a84c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a7c6:	66 90                	xchg   ax,ax
c001a7c8:	83 ec 08             	sub    esp,0x8
c001a7cb:	68 5c 4b 02 c0       	push   0xc0024b5c
c001a7d0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7d4:	e8 f3 5f fe ff       	call   c00007cc <strcmp>
c001a7d9:	83 c4 10             	add    esp,0x10
c001a7dc:	85 c0                	test   eax,eax
c001a7de:	0f 94 c0             	sete   al
c001a7e1:	84 c0                	test   al,al
c001a7e3:	74 0b                	je     c001a7f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001a7e5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a7ed:	eb 5d                	jmp    c001a84c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a7ef:	90                   	nop
c001a7f0:	83 ec 08             	sub    esp,0x8
c001a7f3:	68 8c 20 02 c0       	push   0xc002208c
c001a7f8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7fc:	e8 cb 5f fe ff       	call   c00007cc <strcmp>
c001a801:	83 c4 10             	add    esp,0x10
c001a804:	85 c0                	test   eax,eax
c001a806:	0f 94 c0             	sete   al
c001a809:	84 c0                	test   al,al
c001a80b:	74 0b                	je     c001a818 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001a80d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a815:	eb 35                	jmp    c001a84c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a817:	90                   	nop
c001a818:	83 ec 08             	sub    esp,0x8
c001a81b:	68 62 4b 02 c0       	push   0xc0024b62
c001a820:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a824:	e8 a3 5f fe ff       	call   c00007cc <strcmp>
c001a829:	83 c4 10             	add    esp,0x10
c001a82c:	85 c0                	test   eax,eax
c001a82e:	0f 94 c0             	sete   al
c001a831:	84 c0                	test   al,al
c001a833:	74 0b                	je     c001a840 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001a835:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a83d:	eb 0d                	jmp    c001a84c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a83f:	90                   	nop
c001a840:	b8 08 00 00 00       	mov    eax,0x8
c001a845:	e9 ea 00 00 00       	jmp    c001a934 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a84a:	66 90                	xchg   ax,ax
c001a84c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a853:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a858:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a85c:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c001a863:	83 f8 ff             	cmp    eax,0xffffffff
c001a866:	75 34                	jne    c001a89c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001a868:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a86c:	88 c2                	mov    dl,al
c001a86e:	a1 40 7a 02 c0       	mov    eax,ds:0xc0027a40
c001a873:	01 d0                	add    eax,edx
c001a875:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a879:	8b 15 40 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027a40
c001a87f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a883:	89 14 85 60 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85a0],edx
c001a88a:	a1 40 7a 02 c0       	mov    eax,ds:0xc0027a40
c001a88f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a893:	89 14 85 e0 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8520],edx
c001a89a:	eb 18                	jmp    c001a8b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001a89c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a8a0:	88 c2                	mov    dl,al
c001a8a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8a6:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c001a8ad:	01 d0                	add    eax,edx
c001a8af:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a8b3:	90                   	nop
c001a8b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a8b8:	88 04 24             	mov    BYTE PTR [esp],al
c001a8bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a8bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a8c3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a8cb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a8d0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a8d8:	83 ec 0c             	sub    esp,0xc
c001a8db:	68 00 20 00 00       	push   0x2000
c001a8e0:	e8 de f0 fe ff       	call   c00099c3 <malloc>
c001a8e5:	83 c4 10             	add    esp,0x10
c001a8e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a8ec:	68 00 20 00 00       	push   0x2000
c001a8f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a8f9:	50                   	push   eax
c001a8fa:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a8fe:	50                   	push   eax
c001a8ff:	e8 9d cb fe ff       	call   c00074a1 <f_mkfs>
c001a904:	83 c4 10             	add    esp,0x10
c001a907:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a90b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a910:	75 0a                	jne    c001a91c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001a912:	b8 00 00 00 00       	mov    eax,0x0
c001a917:	eb 1b                	jmp    c001a934 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a919:	8d 76 00             	lea    esi,[esi+0x0]
c001a91c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a921:	75 09                	jne    c001a92c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001a923:	b8 09 00 00 00       	mov    eax,0x9
c001a928:	eb 0a                	jmp    c001a934 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a92a:	66 90                	xchg   ax,ax
c001a92c:	b8 01 00 00 00       	mov    eax,0x1
c001a931:	8d 76 00             	lea    esi,[esi+0x0]
c001a934:	83 c4 2c             	add    esp,0x2c
c001a937:	c3                   	ret    

c001a938 <FAT::tryMount(LogicalDisk*, int)>:
c001a938:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a93e:	a1 40 7a 02 c0       	mov    eax,ds:0xc0027a40
c001a943:	83 f8 14             	cmp    eax,0x14
c001a946:	75 18                	jne    c001a960 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a948:	83 ec 0c             	sub    esp,0xc
c001a94b:	68 68 4b 02 c0       	push   0xc0024b68
c001a950:	e8 30 9a ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001a955:	83 c4 10             	add    esp,0x10
c001a958:	b0 00                	mov    al,0x0
c001a95a:	e9 e9 01 00 00       	jmp    c001ab48 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a95f:	90                   	nop
c001a960:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a967:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a96d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a973:	3d 00 02 00 00       	cmp    eax,0x200
c001a978:	74 0a                	je     c001a984 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001a97a:	b0 00                	mov    al,0x0
c001a97c:	e9 c7 01 00 00       	jmp    c001ab48 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a981:	8d 76 00             	lea    esi,[esi+0x0]
c001a984:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a98c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a993:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c001a99a:	83 f8 ff             	cmp    eax,0xffffffff
c001a99d:	74 09                	je     c001a9a8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001a99f:	b0 01                	mov    al,0x1
c001a9a1:	e9 a2 01 00 00       	jmp    c001ab48 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a9a6:	66 90                	xchg   ax,ax
c001a9a8:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a9b2:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a9ba:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a9c1:	88 c2                	mov    dl,al
c001a9c3:	a1 40 7a 02 c0       	mov    eax,ds:0xc0027a40
c001a9c8:	01 d0                	add    eax,edx
c001a9ca:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a9d1:	8b 15 40 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027a40
c001a9d7:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a9de:	89 14 85 60 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85a0],edx
c001a9e5:	a1 40 7a 02 c0       	mov    eax,ds:0xc0027a40
c001a9ea:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a9f1:	89 14 85 e0 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8520],edx
c001a9f8:	83 ec 0c             	sub    esp,0xc
c001a9fb:	68 54 02 00 00       	push   0x254
c001aa00:	e8 be ef fe ff       	call   c00099c3 <malloc>
c001aa05:	83 c4 10             	add    esp,0x10
c001aa08:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001aa0f:	83 ec 04             	sub    esp,0x4
c001aa12:	6a 00                	push   0x0
c001aa14:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aa1b:	50                   	push   eax
c001aa1c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aa23:	e8 01 a4 fe ff       	call   c0004e29 <f_mount>
c001aa28:	83 c4 10             	add    esp,0x10
c001aa2b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001aa32:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001aa3a:	74 1c                	je     c001aa58 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001aa3c:	83 ec 0c             	sub    esp,0xc
c001aa3f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aa46:	e8 98 ef fe ff       	call   c00099e3 <rfree>
c001aa4b:	83 c4 10             	add    esp,0x10
c001aa4e:	b0 00                	mov    al,0x0
c001aa50:	e9 f3 00 00 00       	jmp    c001ab48 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001aa55:	8d 76 00             	lea    esi,[esi+0x0]
c001aa58:	83 ec 04             	sub    esp,0x4
c001aa5b:	68 00 01 00 00       	push   0x100
c001aa60:	6a 00                	push   0x0
c001aa62:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa69:	50                   	push   eax
c001aa6a:	e8 15 5c fe ff       	call   c0000684 <memset>
c001aa6f:	83 c4 10             	add    esp,0x10
c001aa72:	83 ec 08             	sub    esp,0x8
c001aa75:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aa7c:	50                   	push   eax
c001aa7d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa84:	50                   	push   eax
c001aa85:	e8 f6 5d fe ff       	call   c0000880 <strcat>
c001aa8a:	83 c4 10             	add    esp,0x10
c001aa8d:	83 ec 08             	sub    esp,0x8
c001aa90:	68 76 4b 02 c0       	push   0xc0024b76
c001aa95:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa9c:	50                   	push   eax
c001aa9d:	e8 de 5d fe ff       	call   c0000880 <strcat>
c001aaa2:	83 c4 10             	add    esp,0x10
c001aaa5:	83 ec 04             	sub    esp,0x4
c001aaa8:	6a 01                	push   0x1
c001aaaa:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001aab1:	50                   	push   eax
c001aab2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aab6:	50                   	push   eax
c001aab7:	e8 cf a3 fe ff       	call   c0004e8b <f_open>
c001aabc:	83 c4 10             	add    esp,0x10
c001aabf:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001aac6:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001aacd:	85 c0                	test   eax,eax
c001aacf:	74 0b                	je     c001aadc <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001aad1:	78 31                	js     c001ab04 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aad3:	83 e8 04             	sub    eax,0x4
c001aad6:	83 f8 01             	cmp    eax,0x1
c001aad9:	77 29                	ja     c001ab04 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aadb:	90                   	nop
c001aadc:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001aae4:	83 ec 0c             	sub    esp,0xc
c001aae7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aaeb:	50                   	push   eax
c001aaec:	e8 ec ae fe ff       	call   c00059dd <f_close>
c001aaf1:	83 c4 10             	add    esp,0x10
c001aaf4:	90                   	nop
c001aaf5:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001aafd:	74 41                	je     c001ab40 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001aaff:	eb 33                	jmp    c001ab34 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001ab01:	8d 76 00             	lea    esi,[esi+0x0]
c001ab04:	83 ec 0c             	sub    esp,0xc
c001ab07:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001ab0e:	e8 d0 ee fe ff       	call   c00099e3 <rfree>
c001ab13:	83 c4 10             	add    esp,0x10
c001ab16:	83 ec 04             	sub    esp,0x4
c001ab19:	6a 00                	push   0x0
c001ab1b:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001ab22:	50                   	push   eax
c001ab23:	6a 00                	push   0x0
c001ab25:	e8 ff a2 fe ff       	call   c0004e29 <f_mount>
c001ab2a:	83 c4 10             	add    esp,0x10
c001ab2d:	b0 00                	mov    al,0x0
c001ab2f:	eb 17                	jmp    c001ab48 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ab31:	8d 76 00             	lea    esi,[esi+0x0]
c001ab34:	a1 40 7a 02 c0       	mov    eax,ds:0xc0027a40
c001ab39:	40                   	inc    eax
c001ab3a:	a3 40 7a 02 c0       	mov    ds:0xc0027a40,eax
c001ab3f:	90                   	nop
c001ab40:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001ab47:	90                   	nop
c001ab48:	81 c4 6c 03 00 00    	add    esp,0x36c
c001ab4e:	c3                   	ret    
c001ab4f:	90                   	nop

c001ab50 <FAT::allocateSwapfile(char const*, int)>:
c001ab50:	55                   	push   ebp
c001ab51:	57                   	push   edi
c001ab52:	56                   	push   esi
c001ab53:	53                   	push   ebx
c001ab54:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001ab5a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001ab65:	83 ec 0c             	sub    esp,0xc
c001ab68:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001ab6f:	e8 4f ee fe ff       	call   c00099c3 <malloc>
c001ab74:	83 c4 10             	add    esp,0x10
c001ab77:	89 c7                	mov    edi,eax
c001ab79:	a1 70 79 02 c0       	mov    eax,ds:0xc0027970
c001ab7e:	83 ec 04             	sub    esp,0x4
c001ab81:	50                   	push   eax
c001ab82:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001ab89:	57                   	push   edi
c001ab8a:	e8 9f 24 ff ff       	call   c000d02e <File::File(char const*, Process*)>
c001ab8f:	83 c4 10             	add    esp,0x10
c001ab92:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001ab99:	83 ec 04             	sub    esp,0x4
c001ab9c:	8d 44 24 13          	lea    eax,[esp+0x13]
c001aba0:	50                   	push   eax
c001aba1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aba5:	50                   	push   eax
c001aba6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001abad:	e8 8c 27 ff ff       	call   c000d33e <File::stat(unsigned long long*, bool*)>
c001abb2:	83 c4 10             	add    esp,0x10
c001abb5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001abbc:	c1 e0 14             	shl    eax,0x14
c001abbf:	89 c7                	mov    edi,eax
c001abc1:	89 c5                	mov    ebp,eax
c001abc3:	c1 fd 1f             	sar    ebp,0x1f
c001abc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001abce:	89 f9                	mov    ecx,edi
c001abd0:	31 c1                	xor    ecx,eax
c001abd2:	89 cb                	mov    ebx,ecx
c001abd4:	89 e9                	mov    ecx,ebp
c001abd6:	31 d1                	xor    ecx,edx
c001abd8:	89 ce                	mov    esi,ecx
c001abda:	89 f0                	mov    eax,esi
c001abdc:	09 d8                	or     eax,ebx
c001abde:	0f 84 98 00 00 00    	je     c001ac7c <FAT::allocateSwapfile(char const*, int)+0x12c>
c001abe4:	83 ec 0c             	sub    esp,0xc
c001abe7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001abee:	e8 17 26 ff ff       	call   c000d20a <File::unlink()>
c001abf3:	83 c4 10             	add    esp,0x10
c001abf6:	83 ec 08             	sub    esp,0x8
c001abf9:	6a 12                	push   0x12
c001abfb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac02:	e8 8b 24 ff ff       	call   c000d092 <File::open(FileOpenMode)>
c001ac07:	83 c4 10             	add    esp,0x10
c001ac0a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac11:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ac17:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ac1e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ac25:	c1 e0 14             	shl    eax,0x14
c001ac28:	99                   	cdq    
c001ac29:	6a 01                	push   0x1
c001ac2b:	52                   	push   edx
c001ac2c:	50                   	push   eax
c001ac2d:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001ac34:	e8 54 c4 fe ff       	call   c000708d <f_expand>
c001ac39:	83 c4 10             	add    esp,0x10
c001ac3c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac43:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac45:	83 c0 10             	add    eax,0x10
c001ac48:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac4a:	83 ec 0c             	sub    esp,0xc
c001ac4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac51:	52                   	push   edx
c001ac52:	8d 54 24 30          	lea    edx,[esp+0x30]
c001ac56:	52                   	push   edx
c001ac57:	6a 00                	push   0x0
c001ac59:	68 00 04 00 00       	push   0x400
c001ac5e:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ac65:	ff d0                	call   eax
c001ac67:	83 c4 20             	add    esp,0x20
c001ac6a:	83 ec 0c             	sub    esp,0xc
c001ac6d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac74:	e8 77 24 ff ff       	call   c000d0f0 <File::close()>
c001ac79:	83 c4 10             	add    esp,0x10
c001ac7c:	83 ec 08             	sub    esp,0x8
c001ac7f:	6a 01                	push   0x1
c001ac81:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac88:	e8 05 24 ff ff       	call   c000d092 <File::open(FileOpenMode)>
c001ac8d:	83 c4 10             	add    esp,0x10
c001ac90:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac97:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac99:	83 c0 0c             	add    eax,0xc
c001ac9c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac9e:	83 ec 0c             	sub    esp,0xc
c001aca1:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aca5:	52                   	push   edx
c001aca6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001acaa:	52                   	push   edx
c001acab:	6a 00                	push   0x0
c001acad:	6a 04                	push   0x4
c001acaf:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001acb6:	ff d0                	call   eax
c001acb8:	83 c4 20             	add    esp,0x20
c001acbb:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001acc2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001acc8:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001accf:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001acd6:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001acd9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001acdc:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001ace3:	83 ec 0c             	sub    esp,0xc
c001ace6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aced:	e8 fe 23 ff ff       	call   c000d0f0 <File::close()>
c001acf2:	83 c4 10             	add    esp,0x10
c001acf5:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001acfc:	ba 00 00 00 00       	mov    edx,0x0
c001ad01:	81 c4 3c 04 00 00    	add    esp,0x43c
c001ad07:	5b                   	pop    ebx
c001ad08:	5e                   	pop    esi
c001ad09:	5f                   	pop    edi
c001ad0a:	5d                   	pop    ebp
c001ad0b:	c3                   	ret    

c001ad0c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001ad0c:	57                   	push   edi
c001ad0d:	56                   	push   esi
c001ad0e:	53                   	push   ebx
c001ad0f:	81 ec 50 02 00 00    	sub    esp,0x250
c001ad15:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001ad1d:	74 0d                	je     c001ad2c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001ad1f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001ad27:	75 0f                	jne    c001ad38 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001ad29:	8d 76 00             	lea    esi,[esi+0x0]
c001ad2c:	b8 04 00 00 00       	mov    eax,0x4
c001ad31:	e9 36 01 00 00       	jmp    c001ae6c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ad36:	66 90                	xchg   ax,ax
c001ad38:	83 ec 08             	sub    esp,0x8
c001ad3b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ad42:	50                   	push   eax
c001ad43:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001ad4a:	e8 98 b2 fe ff       	call   c0005fe7 <f_readdir>
c001ad4f:	83 c4 10             	add    esp,0x10
c001ad52:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001ad59:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001ad60:	83 ec 0c             	sub    esp,0xc
c001ad63:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001ad6a:	83 c0 1a             	add    eax,0x1a
c001ad6d:	50                   	push   eax
c001ad6e:	e8 2d 59 fe ff       	call   c00006a0 <strlen>
c001ad73:	83 c4 10             	add    esp,0x10
c001ad76:	ba 00 00 00 00       	mov    edx,0x0
c001ad7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad83:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001ad8a:	0f b6 c0             	movzx  eax,al
c001ad8d:	83 e0 10             	and    eax,0x10
c001ad90:	74 0a                	je     c001ad9c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001ad92:	b8 02 00 00 00       	mov    eax,0x2
c001ad97:	eb 0b                	jmp    c001ada4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001ad99:	8d 76 00             	lea    esi,[esi+0x0]
c001ad9c:	b8 01 00 00 00       	mov    eax,0x1
c001ada1:	8d 76 00             	lea    esi,[esi+0x0]
c001ada4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ada8:	83 ec 08             	sub    esp,0x8
c001adab:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001adb2:	83 c0 1a             	add    eax,0x1a
c001adb5:	50                   	push   eax
c001adb6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001adba:	83 c0 10             	add    eax,0x10
c001adbd:	50                   	push   eax
c001adbe:	e8 7d 59 fe ff       	call   c0000740 <strcpy>
c001adc3:	83 c4 10             	add    esp,0x10
c001adc6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001adcd:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001add4:	8d 44 24 04          	lea    eax,[esp+0x4]
c001add8:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001addf:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001ade6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001aded:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001adf4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001adfb:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001ae02:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001ae09:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001ae10:	89 c6                	mov    esi,eax
c001ae12:	89 d7                	mov    edi,edx
c001ae14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae16:	89 c8                	mov    eax,ecx
c001ae18:	89 fa                	mov    edx,edi
c001ae1a:	89 f3                	mov    ebx,esi
c001ae1c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001ae23:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001ae2a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001ae31:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001ae38:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ae3e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001ae45:	84 c0                	test   al,al
c001ae47:	75 07                	jne    c001ae50 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001ae49:	b8 07 00 00 00       	mov    eax,0x7
c001ae4e:	eb 1c                	jmp    c001ae6c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ae50:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001ae57:	85 c0                	test   eax,eax
c001ae59:	75 09                	jne    c001ae64 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001ae5b:	b8 00 00 00 00       	mov    eax,0x0
c001ae60:	eb 0a                	jmp    c001ae6c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ae62:	66 90                	xchg   ax,ax
c001ae64:	b8 01 00 00 00       	mov    eax,0x1
c001ae69:	8d 76 00             	lea    esi,[esi+0x0]
c001ae6c:	81 c4 50 02 00 00    	add    esp,0x250
c001ae72:	5b                   	pop    ebx
c001ae73:	5e                   	pop    esi
c001ae74:	5f                   	pop    edi
c001ae75:	c3                   	ret    
c001ae76:	66 90                	xchg   ax,ax

c001ae78 <FAT::read(void*, unsigned long, void*, int*)>:
c001ae78:	83 ec 1c             	sub    esp,0x1c
c001ae7b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae80:	74 0a                	je     c001ae8c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001ae82:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ae87:	75 0b                	jne    c001ae94 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001ae89:	8d 76 00             	lea    esi,[esi+0x0]
c001ae8c:	b8 04 00 00 00       	mov    eax,0x4
c001ae91:	eb 41                	jmp    c001aed4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ae93:	90                   	nop
c001ae94:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ae98:	50                   	push   eax
c001ae99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001aea1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aea5:	e8 1d a4 fe ff       	call   c00052c7 <f_read>
c001aeaa:	83 c4 10             	add    esp,0x10
c001aead:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aeb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aeb5:	89 c2                	mov    edx,eax
c001aeb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aebb:	89 10                	mov    DWORD PTR [eax],edx
c001aebd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aec1:	85 c0                	test   eax,eax
c001aec3:	75 07                	jne    c001aecc <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001aec5:	b8 00 00 00 00       	mov    eax,0x0
c001aeca:	eb 08                	jmp    c001aed4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001aecc:	b8 01 00 00 00       	mov    eax,0x1
c001aed1:	8d 76 00             	lea    esi,[esi+0x0]
c001aed4:	83 c4 1c             	add    esp,0x1c
c001aed7:	c3                   	ret    

c001aed8 <FAT::write(void*, unsigned long, void*, int*)>:
c001aed8:	83 ec 1c             	sub    esp,0x1c
c001aedb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001aee0:	74 0a                	je     c001aeec <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001aee2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001aee7:	75 0b                	jne    c001aef4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001aee9:	8d 76 00             	lea    esi,[esi+0x0]
c001aeec:	b8 04 00 00 00       	mov    eax,0x4
c001aef1:	eb 41                	jmp    c001af34 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001aef3:	90                   	nop
c001aef4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aef8:	50                   	push   eax
c001aef9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aefd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001af01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af05:	e8 3d a6 fe ff       	call   c0005547 <f_write>
c001af0a:	83 c4 10             	add    esp,0x10
c001af0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af15:	89 c2                	mov    edx,eax
c001af17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af1b:	89 10                	mov    DWORD PTR [eax],edx
c001af1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af21:	85 c0                	test   eax,eax
c001af23:	75 07                	jne    c001af2c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001af25:	b8 00 00 00 00       	mov    eax,0x0
c001af2a:	eb 08                	jmp    c001af34 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001af2c:	b8 01 00 00 00       	mov    eax,0x1
c001af31:	8d 76 00             	lea    esi,[esi+0x0]
c001af34:	83 c4 1c             	add    esp,0x1c
c001af37:	c3                   	ret    

c001af38 <FAT::close(void*)>:
c001af38:	83 ec 1c             	sub    esp,0x1c
c001af3b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001af40:	75 0a                	jne    c001af4c <FAT::close(void*)+0x14>
c001af42:	b8 04 00 00 00       	mov    eax,0x4
c001af47:	eb 3f                	jmp    c001af88 <FAT::close(void*)+0x50>
c001af49:	8d 76 00             	lea    esi,[esi+0x0]
c001af4c:	83 ec 0c             	sub    esp,0xc
c001af4f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af53:	e8 85 aa fe ff       	call   c00059dd <f_close>
c001af58:	83 c4 10             	add    esp,0x10
c001af5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af5f:	83 ec 0c             	sub    esp,0xc
c001af62:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af66:	e8 68 ea fe ff       	call   c00099d3 <free>
c001af6b:	83 c4 10             	add    esp,0x10
c001af6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af72:	85 c0                	test   eax,eax
c001af74:	75 0a                	jne    c001af80 <FAT::close(void*)+0x48>
c001af76:	b8 00 00 00 00       	mov    eax,0x0
c001af7b:	eb 0b                	jmp    c001af88 <FAT::close(void*)+0x50>
c001af7d:	8d 76 00             	lea    esi,[esi+0x0]
c001af80:	b8 01 00 00 00       	mov    eax,0x1
c001af85:	8d 76 00             	lea    esi,[esi+0x0]
c001af88:	83 c4 1c             	add    esp,0x1c
c001af8b:	c3                   	ret    

c001af8c <FAT::closeDir(void*)>:
c001af8c:	83 ec 1c             	sub    esp,0x1c
c001af8f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001af94:	75 0a                	jne    c001afa0 <FAT::closeDir(void*)+0x14>
c001af96:	b8 04 00 00 00       	mov    eax,0x4
c001af9b:	eb 3f                	jmp    c001afdc <FAT::closeDir(void*)+0x50>
c001af9d:	8d 76 00             	lea    esi,[esi+0x0]
c001afa0:	83 ec 0c             	sub    esp,0xc
c001afa3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afa7:	e8 19 b0 fe ff       	call   c0005fc5 <f_closedir>
c001afac:	83 c4 10             	add    esp,0x10
c001afaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001afb3:	83 ec 0c             	sub    esp,0xc
c001afb6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afba:	e8 14 ea fe ff       	call   c00099d3 <free>
c001afbf:	83 c4 10             	add    esp,0x10
c001afc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001afc6:	85 c0                	test   eax,eax
c001afc8:	75 0a                	jne    c001afd4 <FAT::closeDir(void*)+0x48>
c001afca:	b8 00 00 00 00       	mov    eax,0x0
c001afcf:	eb 0b                	jmp    c001afdc <FAT::closeDir(void*)+0x50>
c001afd1:	8d 76 00             	lea    esi,[esi+0x0]
c001afd4:	b8 01 00 00 00       	mov    eax,0x1
c001afd9:	8d 76 00             	lea    esi,[esi+0x0]
c001afdc:	83 c4 1c             	add    esp,0x1c
c001afdf:	c3                   	ret    

c001afe0 <FAT::seek(void*, unsigned long long)>:
c001afe0:	83 ec 2c             	sub    esp,0x2c
c001afe3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001afe7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001afeb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001afef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aff3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001aff8:	75 0a                	jne    c001b004 <FAT::seek(void*, unsigned long long)+0x24>
c001affa:	b8 04 00 00 00       	mov    eax,0x4
c001afff:	eb 37                	jmp    c001b038 <FAT::seek(void*, unsigned long long)+0x58>
c001b001:	8d 76 00             	lea    esi,[esi+0x0]
c001b004:	83 ec 04             	sub    esp,0x4
c001b007:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b00b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b00f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b013:	e8 f4 a9 fe ff       	call   c0005a0c <f_lseek>
c001b018:	83 c4 10             	add    esp,0x10
c001b01b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b01f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b023:	85 c0                	test   eax,eax
c001b025:	75 09                	jne    c001b030 <FAT::seek(void*, unsigned long long)+0x50>
c001b027:	b8 00 00 00 00       	mov    eax,0x0
c001b02c:	eb 0a                	jmp    c001b038 <FAT::seek(void*, unsigned long long)+0x58>
c001b02e:	66 90                	xchg   ax,ax
c001b030:	b8 01 00 00 00       	mov    eax,0x1
c001b035:	8d 76 00             	lea    esi,[esi+0x0]
c001b038:	83 c4 2c             	add    esp,0x2c
c001b03b:	c3                   	ret    

c001b03c <fatWrapperReadDisk>:
c001b03c:	83 ec 1c             	sub    esp,0x1c
c001b03f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b043:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b047:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b04b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b04e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b052:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b056:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b05b:	8b 04 85 40 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95c0]
c001b062:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b066:	83 ec 0c             	sub    esp,0xc
c001b069:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b06d:	52                   	push   edx
c001b06e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b072:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b076:	50                   	push   eax
c001b077:	e8 64 51 ff ff       	call   c00101e0 <LogicalDisk::read(unsigned long long, int, void*)>
c001b07c:	83 c4 20             	add    esp,0x20
c001b07f:	83 c4 1c             	add    esp,0x1c
c001b082:	c3                   	ret    
c001b083:	90                   	nop

c001b084 <fatWrapperWriteDisk>:
c001b084:	83 ec 1c             	sub    esp,0x1c
c001b087:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b08b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b08f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b093:	89 04 24             	mov    DWORD PTR [esp],eax
c001b096:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b09a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b09e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b0a3:	8b 04 85 40 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95c0]
c001b0aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b0ae:	83 ec 0c             	sub    esp,0xc
c001b0b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b0b5:	52                   	push   edx
c001b0b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b0ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b0be:	50                   	push   eax
c001b0bf:	e8 88 51 ff ff       	call   c001024c <LogicalDisk::write(unsigned long long, int, void*)>
c001b0c4:	83 c4 20             	add    esp,0x20
c001b0c7:	83 c4 1c             	add    esp,0x1c
c001b0ca:	c3                   	ret    
c001b0cb:	90                   	nop

c001b0cc <fatWrapperIoctl>:
c001b0cc:	53                   	push   ebx
c001b0cd:	83 ec 28             	sub    esp,0x28
c001b0d0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b0d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b0d8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b0dc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b0e0:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b0e5:	75 31                	jne    c001b118 <fatWrapperIoctl+0x4c>
c001b0e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b0eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b0ef:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b0f4:	8b 04 85 40 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95c0]
c001b0fb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b101:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b107:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b10b:	66 89 02             	mov    WORD PTR [edx],ax
c001b10e:	b8 00 00 00 00       	mov    eax,0x0
c001b113:	e9 bc 00 00 00       	jmp    c001b1d4 <fatWrapperIoctl+0x108>
c001b118:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b11d:	75 6d                	jne    c001b18c <fatWrapperIoctl+0xc0>
c001b11f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b123:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b127:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b12c:	8b 04 85 40 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95c0]
c001b133:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b139:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b13f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b145:	89 c8                	mov    eax,ecx
c001b147:	89 da                	mov    edx,ebx
c001b149:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b14d:	c1 e0 0a             	shl    eax,0xa
c001b150:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b155:	8b 0c 8d 40 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95c0]
c001b15c:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b162:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b168:	89 cb                	mov    ebx,ecx
c001b16a:	c1 fb 1f             	sar    ebx,0x1f
c001b16d:	53                   	push   ebx
c001b16e:	51                   	push   ecx
c001b16f:	52                   	push   edx
c001b170:	50                   	push   eax
c001b171:	e8 0e 5e 00 00       	call   c0020f84 <__udivdi3>
c001b176:	83 c4 10             	add    esp,0x10
c001b179:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b17d:	89 01                	mov    DWORD PTR [ecx],eax
c001b17f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b182:	b8 00 00 00 00       	mov    eax,0x0
c001b187:	eb 4b                	jmp    c001b1d4 <fatWrapperIoctl+0x108>
c001b189:	8d 76 00             	lea    esi,[esi+0x0]
c001b18c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b191:	75 09                	jne    c001b19c <fatWrapperIoctl+0xd0>
c001b193:	b8 00 00 00 00       	mov    eax,0x0
c001b198:	eb 3a                	jmp    c001b1d4 <fatWrapperIoctl+0x108>
c001b19a:	66 90                	xchg   ax,ax
c001b19c:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b1a1:	75 19                	jne    c001b1bc <fatWrapperIoctl+0xf0>
c001b1a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b1a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b1ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1af:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b1b5:	b8 00 00 00 00       	mov    eax,0x0
c001b1ba:	eb 18                	jmp    c001b1d4 <fatWrapperIoctl+0x108>
c001b1bc:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b1c1:	75 09                	jne    c001b1cc <fatWrapperIoctl+0x100>
c001b1c3:	b8 00 00 00 00       	mov    eax,0x0
c001b1c8:	eb 0a                	jmp    c001b1d4 <fatWrapperIoctl+0x108>
c001b1ca:	66 90                	xchg   ax,ax
c001b1cc:	b8 04 00 00 00       	mov    eax,0x4
c001b1d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b1d4:	83 c4 28             	add    esp,0x28
c001b1d7:	5b                   	pop    ebx
c001b1d8:	c3                   	ret    
c001b1d9:	90                   	nop
c001b1da:	66 90                	xchg   ax,ax

c001b1dc <FAT::FAT()>:
c001b1dc:	83 ec 1c             	sub    esp,0x1c
c001b1df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1e3:	83 ec 0c             	sub    esp,0xc
c001b1e6:	50                   	push   eax
c001b1e7:	e8 ee 1b ff ff       	call   c000cdda <Filesystem::Filesystem()>
c001b1ec:	83 c4 10             	add    esp,0x10
c001b1ef:	ba 8c 4b 02 c0       	mov    edx,0xc0024b8c
c001b1f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1f8:	89 10                	mov    DWORD PTR [eax],edx
c001b1fa:	c7 05 40 7a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027a40,0x0
c001b204:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b20c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b211:	7f 15                	jg     c001b228 <FAT::FAT()+0x4c>
c001b213:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b217:	c7 04 85 60 7a 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd85a0],0xffffffff
c001b222:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b226:	eb e4                	jmp    c001b20c <FAT::FAT()+0x30>
c001b228:	90                   	nop
c001b229:	83 c4 1c             	add    esp,0x1c
c001b22c:	c3                   	ret    
c001b22d:	90                   	nop
c001b22e:	66 90                	xchg   ax,ax

c001b230 <FAT::fixFilepath(char*)>:
c001b230:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b234:	8a 00                	mov    al,BYTE PTR [eax]
c001b236:	3c 40                	cmp    al,0x40
c001b238:	7e 2e                	jle    c001b268 <FAT::fixFilepath(char*)+0x38>
c001b23a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b23e:	8a 00                	mov    al,BYTE PTR [eax]
c001b240:	83 e8 41             	sub    eax,0x41
c001b243:	88 c2                	mov    dl,al
c001b245:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b249:	88 10                	mov    BYTE PTR [eax],dl
c001b24b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b24f:	8a 00                	mov    al,BYTE PTR [eax]
c001b251:	0f be c0             	movsx  eax,al
c001b254:	8b 04 85 60 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85a0]
c001b25b:	83 c0 30             	add    eax,0x30
c001b25e:	88 c2                	mov    dl,al
c001b260:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b264:	88 10                	mov    BYTE PTR [eax],dl
c001b266:	66 90                	xchg   ax,ax
c001b268:	90                   	nop
c001b269:	c3                   	ret    
c001b26a:	66 90                	xchg   ax,ax

c001b26c <FAT::open(char const*, void**, FileOpenMode)>:
c001b26c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b272:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b27a:	74 0c                	je     c001b288 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b27c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b284:	75 0e                	jne    c001b294 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b286:	66 90                	xchg   ax,ax
c001b288:	b8 04 00 00 00       	mov    eax,0x4
c001b28d:	e9 06 01 00 00       	jmp    c001b398 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b292:	66 90                	xchg   ax,ax
c001b294:	83 ec 08             	sub    esp,0x8
c001b297:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b29e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b2a2:	50                   	push   eax
c001b2a3:	e8 98 54 fe ff       	call   c0000740 <strcpy>
c001b2a8:	83 c4 10             	add    esp,0x10
c001b2ab:	83 ec 08             	sub    esp,0x8
c001b2ae:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b2b2:	50                   	push   eax
c001b2b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b2ba:	e8 71 ff ff ff       	call   c001b230 <FAT::fixFilepath(char*)>
c001b2bf:	83 c4 10             	add    esp,0x10
c001b2c2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b2ca:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2d1:	83 e0 01             	and    eax,0x1
c001b2d4:	74 0a                	je     c001b2e0 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b2d6:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b2de:	66 90                	xchg   ax,ax
c001b2e0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2e7:	83 e0 04             	and    eax,0x4
c001b2ea:	74 10                	je     c001b2fc <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b2ec:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b2f4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b2fc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b303:	83 e0 02             	and    eax,0x2
c001b306:	74 08                	je     c001b310 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b308:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b310:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b317:	83 e0 08             	and    eax,0x8
c001b31a:	74 08                	je     c001b324 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b31c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b324:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b32b:	83 e0 10             	and    eax,0x10
c001b32e:	74 08                	je     c001b338 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b330:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b338:	83 ec 0c             	sub    esp,0xc
c001b33b:	68 50 02 00 00       	push   0x250
c001b340:	e8 7e e6 fe ff       	call   c00099c3 <malloc>
c001b345:	83 c4 10             	add    esp,0x10
c001b348:	89 c2                	mov    edx,eax
c001b34a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b351:	89 10                	mov    DWORD PTR [eax],edx
c001b353:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b35b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b362:	8b 00                	mov    eax,DWORD PTR [eax]
c001b364:	83 ec 04             	sub    esp,0x4
c001b367:	52                   	push   edx
c001b368:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b36c:	52                   	push   edx
c001b36d:	50                   	push   eax
c001b36e:	e8 18 9b fe ff       	call   c0004e8b <f_open>
c001b373:	83 c4 10             	add    esp,0x10
c001b376:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b37d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b385:	74 09                	je     c001b390 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001b387:	b8 01 00 00 00       	mov    eax,0x1
c001b38c:	eb 0a                	jmp    c001b398 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b38e:	66 90                	xchg   ax,ax
c001b390:	b8 00 00 00 00       	mov    eax,0x0
c001b395:	8d 76 00             	lea    esi,[esi+0x0]
c001b398:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b39e:	c3                   	ret    
c001b39f:	90                   	nop

c001b3a0 <FAT::openDir(char const*, void**)>:
c001b3a0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b3a6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b3ae:	74 0c                	je     c001b3bc <FAT::openDir(char const*, void**)+0x1c>
c001b3b0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b3b8:	75 0e                	jne    c001b3c8 <FAT::openDir(char const*, void**)+0x28>
c001b3ba:	66 90                	xchg   ax,ax
c001b3bc:	b8 04 00 00 00       	mov    eax,0x4
c001b3c1:	e9 82 00 00 00       	jmp    c001b448 <FAT::openDir(char const*, void**)+0xa8>
c001b3c6:	66 90                	xchg   ax,ax
c001b3c8:	83 ec 08             	sub    esp,0x8
c001b3cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b3d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b3d6:	50                   	push   eax
c001b3d7:	e8 64 53 fe ff       	call   c0000740 <strcpy>
c001b3dc:	83 c4 10             	add    esp,0x10
c001b3df:	83 ec 08             	sub    esp,0x8
c001b3e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b3e6:	50                   	push   eax
c001b3e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b3ee:	e8 3d fe ff ff       	call   c001b230 <FAT::fixFilepath(char*)>
c001b3f3:	83 c4 10             	add    esp,0x10
c001b3f6:	83 ec 0c             	sub    esp,0xc
c001b3f9:	6a 4c                	push   0x4c
c001b3fb:	e8 c3 e5 fe ff       	call   c00099c3 <malloc>
c001b400:	83 c4 10             	add    esp,0x10
c001b403:	89 c2                	mov    edx,eax
c001b405:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b40c:	89 10                	mov    DWORD PTR [eax],edx
c001b40e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b415:	8b 00                	mov    eax,DWORD PTR [eax]
c001b417:	83 ec 08             	sub    esp,0x8
c001b41a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b41e:	52                   	push   edx
c001b41f:	50                   	push   eax
c001b420:	e8 9e aa fe ff       	call   c0005ec3 <f_opendir>
c001b425:	83 c4 10             	add    esp,0x10
c001b428:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b42f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b437:	74 07                	je     c001b440 <FAT::openDir(char const*, void**)+0xa0>
c001b439:	b8 01 00 00 00       	mov    eax,0x1
c001b43e:	eb 08                	jmp    c001b448 <FAT::openDir(char const*, void**)+0xa8>
c001b440:	b8 00 00 00 00       	mov    eax,0x0
c001b445:	8d 76 00             	lea    esi,[esi+0x0]
c001b448:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b44e:	c3                   	ret    
c001b44f:	90                   	nop

c001b450 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b450:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b456:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b45e:	75 0c                	jne    c001b46c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b460:	b8 04 00 00 00       	mov    eax,0x4
c001b465:	e9 d2 00 00 00       	jmp    c001b53c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b46a:	66 90                	xchg   ax,ax
c001b46c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b474:	75 0a                	jne    c001b480 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b476:	b8 04 00 00 00       	mov    eax,0x4
c001b47b:	e9 bc 00 00 00       	jmp    c001b53c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b480:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b488:	75 0a                	jne    c001b494 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b48a:	b8 04 00 00 00       	mov    eax,0x4
c001b48f:	e9 a8 00 00 00       	jmp    c001b53c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b494:	83 ec 08             	sub    esp,0x8
c001b497:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b49e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b4a5:	50                   	push   eax
c001b4a6:	e8 95 52 fe ff       	call   c0000740 <strcpy>
c001b4ab:	83 c4 10             	add    esp,0x10
c001b4ae:	83 ec 08             	sub    esp,0x8
c001b4b1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b4b8:	50                   	push   eax
c001b4b9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b4c0:	e8 6b fd ff ff       	call   c001b230 <FAT::fixFilepath(char*)>
c001b4c5:	83 c4 10             	add    esp,0x10
c001b4c8:	83 ec 08             	sub    esp,0x8
c001b4cb:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b4cf:	50                   	push   eax
c001b4d0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b4d7:	50                   	push   eax
c001b4d8:	e8 a5 ab fe ff       	call   c0006082 <f_stat>
c001b4dd:	83 c4 10             	add    esp,0x10
c001b4e0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b4e7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b4ee:	85 c0                	test   eax,eax
c001b4f0:	74 0a                	je     c001b4fc <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b4f2:	83 f8 04             	cmp    eax,0x4
c001b4f5:	74 35                	je     c001b52c <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001b4f7:	eb 3b                	jmp    c001b534 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001b4f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b4fc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b500:	0f b6 c0             	movzx  eax,al
c001b503:	83 e0 10             	and    eax,0x10
c001b506:	0f 95 c2             	setne  dl
c001b509:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b510:	88 10                	mov    BYTE PTR [eax],dl
c001b512:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b515:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b519:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b520:	89 01                	mov    DWORD PTR [ecx],eax
c001b522:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b525:	b8 00 00 00 00       	mov    eax,0x0
c001b52a:	eb 10                	jmp    c001b53c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b52c:	b8 02 00 00 00       	mov    eax,0x2
c001b531:	eb 09                	jmp    c001b53c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b533:	90                   	nop
c001b534:	b8 01 00 00 00       	mov    eax,0x1
c001b539:	8d 76 00             	lea    esi,[esi+0x0]
c001b53c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b542:	c3                   	ret    
c001b543:	90                   	nop

c001b544 <FAT::unlink(char const*)>:
c001b544:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b54a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b552:	75 08                	jne    c001b55c <FAT::unlink(char const*)+0x18>
c001b554:	b8 04 00 00 00       	mov    eax,0x4
c001b559:	eb 61                	jmp    c001b5bc <FAT::unlink(char const*)+0x78>
c001b55b:	90                   	nop
c001b55c:	83 ec 08             	sub    esp,0x8
c001b55f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b566:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b56a:	50                   	push   eax
c001b56b:	e8 d0 51 fe ff       	call   c0000740 <strcpy>
c001b570:	83 c4 10             	add    esp,0x10
c001b573:	83 ec 08             	sub    esp,0x8
c001b576:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b57a:	50                   	push   eax
c001b57b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b582:	e8 a9 fc ff ff       	call   c001b230 <FAT::fixFilepath(char*)>
c001b587:	83 c4 10             	add    esp,0x10
c001b58a:	83 ec 0c             	sub    esp,0xc
c001b58d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b591:	50                   	push   eax
c001b592:	e8 3d ae fe ff       	call   c00063d4 <f_unlink>
c001b597:	83 c4 10             	add    esp,0x10
c001b59a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b5a1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b5a8:	85 c0                	test   eax,eax
c001b5aa:	75 08                	jne    c001b5b4 <FAT::unlink(char const*)+0x70>
c001b5ac:	b8 00 00 00 00       	mov    eax,0x0
c001b5b1:	eb 09                	jmp    c001b5bc <FAT::unlink(char const*)+0x78>
c001b5b3:	90                   	nop
c001b5b4:	b8 01 00 00 00       	mov    eax,0x1
c001b5b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b5bc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b5c2:	c3                   	ret    
c001b5c3:	90                   	nop

c001b5c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b5c4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b5ca:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b5d1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b5d8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b5dc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b5e0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b5e8:	75 0a                	jne    c001b5f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b5ea:	b8 04 00 00 00       	mov    eax,0x4
c001b5ef:	e9 30 01 00 00       	jmp    c001b724 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b5f4:	83 ec 08             	sub    esp,0x8
c001b5f7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b5fe:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b602:	50                   	push   eax
c001b603:	e8 38 51 fe ff       	call   c0000740 <strcpy>
c001b608:	83 c4 10             	add    esp,0x10
c001b60b:	83 ec 08             	sub    esp,0x8
c001b60e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b612:	50                   	push   eax
c001b613:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b61a:	e8 11 fc ff ff       	call   c001b230 <FAT::fixFilepath(char*)>
c001b61f:	83 c4 10             	add    esp,0x10
c001b622:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b62a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b632:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b637:	83 e0 01             	and    eax,0x1
c001b63a:	74 08                	je     c001b644 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001b63c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001b644:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b649:	83 e0 02             	and    eax,0x2
c001b64c:	74 0a                	je     c001b658 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001b64e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001b656:	66 90                	xchg   ax,ax
c001b658:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b65d:	83 e0 04             	and    eax,0x4
c001b660:	74 0a                	je     c001b66c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001b662:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001b66a:	66 90                	xchg   ax,ax
c001b66c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b671:	83 e0 08             	and    eax,0x8
c001b674:	74 0a                	je     c001b680 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001b676:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001b67e:	66 90                	xchg   ax,ax
c001b680:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b685:	83 e0 01             	and    eax,0x1
c001b688:	74 0a                	je     c001b694 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001b68a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001b692:	66 90                	xchg   ax,ax
c001b694:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b699:	83 e0 02             	and    eax,0x2
c001b69c:	74 0a                	je     c001b6a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001b69e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001b6a6:	66 90                	xchg   ax,ax
c001b6a8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b6ad:	83 e0 04             	and    eax,0x4
c001b6b0:	74 0a                	je     c001b6bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001b6b2:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001b6ba:	66 90                	xchg   ax,ax
c001b6bc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b6c1:	83 e0 08             	and    eax,0x8
c001b6c4:	74 0a                	je     c001b6d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001b6c6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001b6ce:	66 90                	xchg   ax,ax
c001b6d0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b6d7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001b6de:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b6e6:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b6ee:	83 ec 04             	sub    esp,0x4
c001b6f1:	52                   	push   edx
c001b6f2:	50                   	push   eax
c001b6f3:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b6f7:	50                   	push   eax
c001b6f8:	e8 79 b3 fe ff       	call   c0006a76 <f_chmod>
c001b6fd:	83 c4 10             	add    esp,0x10
c001b700:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b707:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b70e:	85 c0                	test   eax,eax
c001b710:	75 0a                	jne    c001b71c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001b712:	b8 00 00 00 00       	mov    eax,0x0
c001b717:	eb 0b                	jmp    c001b724 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b719:	8d 76 00             	lea    esi,[esi+0x0]
c001b71c:	b8 01 00 00 00       	mov    eax,0x1
c001b721:	8d 76 00             	lea    esi,[esi+0x0]
c001b724:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b72a:	c3                   	ret    
c001b72b:	90                   	nop

c001b72c <FAT::rename(char const*, char const*)>:
c001b72c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b732:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b73a:	74 0c                	je     c001b748 <FAT::rename(char const*, char const*)+0x1c>
c001b73c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b744:	75 0e                	jne    c001b754 <FAT::rename(char const*, char const*)+0x28>
c001b746:	66 90                	xchg   ax,ax
c001b748:	b8 04 00 00 00       	mov    eax,0x4
c001b74d:	e9 9e 00 00 00       	jmp    c001b7f0 <FAT::rename(char const*, char const*)+0xc4>
c001b752:	66 90                	xchg   ax,ax
c001b754:	83 ec 08             	sub    esp,0x8
c001b757:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b75e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b765:	50                   	push   eax
c001b766:	e8 d5 4f fe ff       	call   c0000740 <strcpy>
c001b76b:	83 c4 10             	add    esp,0x10
c001b76e:	83 ec 08             	sub    esp,0x8
c001b771:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b778:	50                   	push   eax
c001b779:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b780:	e8 ab fa ff ff       	call   c001b230 <FAT::fixFilepath(char*)>
c001b785:	83 c4 10             	add    esp,0x10
c001b788:	83 ec 08             	sub    esp,0x8
c001b78b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b792:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b796:	50                   	push   eax
c001b797:	e8 a4 4f fe ff       	call   c0000740 <strcpy>
c001b79c:	83 c4 10             	add    esp,0x10
c001b79f:	83 ec 08             	sub    esp,0x8
c001b7a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7a6:	50                   	push   eax
c001b7a7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b7ae:	e8 7d fa ff ff       	call   c001b230 <FAT::fixFilepath(char*)>
c001b7b3:	83 c4 10             	add    esp,0x10
c001b7b6:	83 ec 08             	sub    esp,0x8
c001b7b9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7bd:	50                   	push   eax
c001b7be:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b7c5:	50                   	push   eax
c001b7c6:	e8 b8 af fe ff       	call   c0006783 <f_rename>
c001b7cb:	83 c4 10             	add    esp,0x10
c001b7ce:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b7d5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b7dc:	85 c0                	test   eax,eax
c001b7de:	75 08                	jne    c001b7e8 <FAT::rename(char const*, char const*)+0xbc>
c001b7e0:	b8 00 00 00 00       	mov    eax,0x0
c001b7e5:	eb 09                	jmp    c001b7f0 <FAT::rename(char const*, char const*)+0xc4>
c001b7e7:	90                   	nop
c001b7e8:	b8 01 00 00 00       	mov    eax,0x1
c001b7ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b7f0:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b7f6:	c3                   	ret    
c001b7f7:	90                   	nop

c001b7f8 <FAT::mkdir(char const*)>:
c001b7f8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b7fe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b806:	75 08                	jne    c001b810 <FAT::mkdir(char const*)+0x18>
c001b808:	b8 04 00 00 00       	mov    eax,0x4
c001b80d:	eb 61                	jmp    c001b870 <FAT::mkdir(char const*)+0x78>
c001b80f:	90                   	nop
c001b810:	83 ec 08             	sub    esp,0x8
c001b813:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b81a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b81e:	50                   	push   eax
c001b81f:	e8 1c 4f fe ff       	call   c0000740 <strcpy>
c001b824:	83 c4 10             	add    esp,0x10
c001b827:	83 ec 08             	sub    esp,0x8
c001b82a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b82e:	50                   	push   eax
c001b82f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b836:	e8 f5 f9 ff ff       	call   c001b230 <FAT::fixFilepath(char*)>
c001b83b:	83 c4 10             	add    esp,0x10
c001b83e:	83 ec 0c             	sub    esp,0xc
c001b841:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b845:	50                   	push   eax
c001b846:	e8 0c ad fe ff       	call   c0006557 <f_mkdir>
c001b84b:	83 c4 10             	add    esp,0x10
c001b84e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b855:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b85c:	85 c0                	test   eax,eax
c001b85e:	75 08                	jne    c001b868 <FAT::mkdir(char const*)+0x70>
c001b860:	b8 00 00 00 00       	mov    eax,0x0
c001b865:	eb 09                	jmp    c001b870 <FAT::mkdir(char const*)+0x78>
c001b867:	90                   	nop
c001b868:	b8 01 00 00 00       	mov    eax,0x1
c001b86d:	8d 76 00             	lea    esi,[esi+0x0]
c001b870:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b876:	c3                   	ret    
c001b877:	90                   	nop

c001b878 <FAT::exists(char const*)>:
c001b878:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b87e:	83 ec 08             	sub    esp,0x8
c001b881:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b888:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b88c:	50                   	push   eax
c001b88d:	e8 ae 4e fe ff       	call   c0000740 <strcpy>
c001b892:	83 c4 10             	add    esp,0x10
c001b895:	83 ec 08             	sub    esp,0x8
c001b898:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b89c:	50                   	push   eax
c001b89d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b8a4:	e8 87 f9 ff ff       	call   c001b230 <FAT::fixFilepath(char*)>
c001b8a9:	83 c4 10             	add    esp,0x10
c001b8ac:	83 ec 08             	sub    esp,0x8
c001b8af:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b8b6:	50                   	push   eax
c001b8b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b8bb:	50                   	push   eax
c001b8bc:	e8 c1 a7 fe ff       	call   c0006082 <f_stat>
c001b8c1:	83 c4 10             	add    esp,0x10
c001b8c4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b8cb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b8d2:	85 c0                	test   eax,eax
c001b8d4:	75 06                	jne    c001b8dc <FAT::exists(char const*)+0x64>
c001b8d6:	b0 01                	mov    al,0x1
c001b8d8:	eb 06                	jmp    c001b8e0 <FAT::exists(char const*)+0x68>
c001b8da:	66 90                	xchg   ax,ax
c001b8dc:	b0 00                	mov    al,0x0
c001b8de:	66 90                	xchg   ax,ax
c001b8e0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b8e6:	c3                   	ret    
c001b8e7:	90                   	nop

c001b8e8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b8e8:	b8 08 00 00 00       	mov    eax,0x8
c001b8ed:	c3                   	ret    

c001b8ee <ISO9660::seek(void*, unsigned long long)>:
c001b8ee:	53                   	push   ebx
c001b8ef:	b8 04 00 00 00       	mov    eax,0x4
c001b8f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b8f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b900:	85 d2                	test   edx,edx
c001b902:	74 17                	je     c001b91b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b904:	89 c8                	mov    eax,ecx
c001b906:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b909:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b90c:	b8 01 00 00 00       	mov    eax,0x1
c001b911:	73 08                	jae    c001b91b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b913:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b916:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b919:	31 c0                	xor    eax,eax
c001b91b:	5b                   	pop    ebx
c001b91c:	c3                   	ret    
c001b91d:	90                   	nop

c001b91e <ISO9660::tell(void*, unsigned long long*)>:
c001b91e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b922:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b926:	85 d2                	test   edx,edx
c001b928:	74 12                	je     c001b93c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b92a:	85 c0                	test   eax,eax
c001b92c:	74 0e                	je     c001b93c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b92e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b931:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b934:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b937:	89 10                	mov    DWORD PTR [eax],edx
c001b939:	31 c0                	xor    eax,eax
c001b93b:	c3                   	ret    
c001b93c:	b8 04 00 00 00       	mov    eax,0x4
c001b941:	c3                   	ret    

c001b942 <ISO9660::getName()>:
c001b942:	b8 ec 4b 02 c0       	mov    eax,0xc0024bec
c001b947:	c3                   	ret    

c001b948 <ISO9660::stat(void*, unsigned long long*)>:
c001b948:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b94c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b950:	85 d2                	test   edx,edx
c001b952:	74 12                	je     c001b966 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b954:	85 c0                	test   eax,eax
c001b956:	74 0e                	je     c001b966 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b958:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b95b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b95e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b961:	89 10                	mov    DWORD PTR [eax],edx
c001b963:	31 c0                	xor    eax,eax
c001b965:	c3                   	ret    
c001b966:	b8 04 00 00 00       	mov    eax,0x4
c001b96b:	c3                   	ret    

c001b96c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b96c:	b8 01 00 00 00       	mov    eax,0x1
c001b971:	c3                   	ret    

c001b972 <ISO9660::unlink(char const*)>:
c001b972:	b8 01 00 00 00       	mov    eax,0x1
c001b977:	c3                   	ret    

c001b978 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b978:	b8 01 00 00 00       	mov    eax,0x1
c001b97d:	c3                   	ret    

c001b97e <ISO9660::rename(char const*, char const*)>:
c001b97e:	b8 01 00 00 00       	mov    eax,0x1
c001b983:	c3                   	ret    

c001b984 <ISO9660::mkdir(char const*)>:
c001b984:	b8 01 00 00 00       	mov    eax,0x1
c001b989:	c3                   	ret    

c001b98a <ISO9660::close(void*)>:
c001b98a:	83 ec 0c             	sub    esp,0xc
c001b98d:	b8 04 00 00 00       	mov    eax,0x4
c001b992:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b996:	85 d2                	test   edx,edx
c001b998:	74 0e                	je     c001b9a8 <ISO9660::close(void*)+0x1e>
c001b99a:	83 ec 0c             	sub    esp,0xc
c001b99d:	52                   	push   edx
c001b99e:	e8 30 e0 fe ff       	call   c00099d3 <free>
c001b9a3:	83 c4 10             	add    esp,0x10
c001b9a6:	31 c0                	xor    eax,eax
c001b9a8:	83 c4 0c             	add    esp,0xc
c001b9ab:	c3                   	ret    

c001b9ac <ISO9660::closeDir(void*)>:
c001b9ac:	83 ec 0c             	sub    esp,0xc
c001b9af:	b8 04 00 00 00       	mov    eax,0x4
c001b9b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9b8:	85 d2                	test   edx,edx
c001b9ba:	74 0e                	je     c001b9ca <ISO9660::closeDir(void*)+0x1e>
c001b9bc:	83 ec 0c             	sub    esp,0xc
c001b9bf:	52                   	push   edx
c001b9c0:	e8 0e e0 fe ff       	call   c00099d3 <free>
c001b9c5:	83 c4 10             	add    esp,0x10
c001b9c8:	31 c0                	xor    eax,eax
c001b9ca:	83 c4 0c             	add    esp,0xc
c001b9cd:	c3                   	ret    

c001b9ce <ISO9660::~ISO9660()>:
c001b9ce:	83 ec 0c             	sub    esp,0xc
c001b9d1:	ba 10 4c 02 c0       	mov    edx,0xc0024c10
c001b9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9da:	89 10                	mov    DWORD PTR [eax],edx
c001b9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9e0:	83 ec 0c             	sub    esp,0xc
c001b9e3:	50                   	push   eax
c001b9e4:	e8 15 14 ff ff       	call   c000cdfe <Filesystem::~Filesystem()>
c001b9e9:	83 c4 10             	add    esp,0x10
c001b9ec:	90                   	nop
c001b9ed:	83 c4 0c             	add    esp,0xc
c001b9f0:	c3                   	ret    
c001b9f1:	90                   	nop

c001b9f2 <ISO9660::~ISO9660()>:
c001b9f2:	83 ec 0c             	sub    esp,0xc
c001b9f5:	83 ec 0c             	sub    esp,0xc
c001b9f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9fc:	e8 cd ff ff ff       	call   c001b9ce <ISO9660::~ISO9660()>
c001ba01:	83 c4 10             	add    esp,0x10
c001ba04:	83 ec 08             	sub    esp,0x8
c001ba07:	6a 08                	push   0x8
c001ba09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba0d:	e8 d0 0f ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c001ba12:	83 c4 10             	add    esp,0x10
c001ba15:	83 c4 0c             	add    esp,0xc
c001ba18:	c3                   	ret    

c001ba19 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001ba19:	55                   	push   ebp
c001ba1a:	31 c9                	xor    ecx,ecx
c001ba1c:	57                   	push   edi
c001ba1d:	56                   	push   esi
c001ba1e:	53                   	push   ebx
c001ba1f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001ba23:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ba27:	89 eb                	mov    ebx,ebp
c001ba29:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001ba2d:	39 ce                	cmp    esi,ecx
c001ba2f:	7e 17                	jle    c001ba48 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001ba31:	31 d2                	xor    edx,edx
c001ba33:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001ba37:	7d 13                	jge    c001ba4c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001ba39:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ba3d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ba40:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001ba43:	75 0d                	jne    c001ba52 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001ba45:	42                   	inc    edx
c001ba46:	eb eb                	jmp    c001ba33 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001ba48:	31 c0                	xor    eax,eax
c001ba4a:	eb 0a                	jmp    c001ba56 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ba4c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001ba50:	eb 04                	jmp    c001ba56 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ba52:	41                   	inc    ecx
c001ba53:	43                   	inc    ebx
c001ba54:	eb d7                	jmp    c001ba2d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001ba56:	5b                   	pop    ebx
c001ba57:	5e                   	pop    esi
c001ba58:	5f                   	pop    edi
c001ba59:	5d                   	pop    ebp
c001ba5a:	c3                   	ret    

c001ba5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ba5b:	57                   	push   edi
c001ba5c:	56                   	push   esi
c001ba5d:	53                   	push   ebx
c001ba5e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba66:	39 0d 40 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b40,ecx
c001ba6c:	75 08                	jne    c001ba76 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001ba6e:	38 05 74 5e 02 c0    	cmp    BYTE PTR ds:0xc0025e74,al
c001ba74:	74 2b                	je     c001baa1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001ba76:	83 ec 0c             	sub    esp,0xc
c001ba79:	a2 74 5e 02 c0       	mov    ds:0xc0025e74,al
c001ba7e:	68 60 7b 02 c0       	push   0xc0027b60
c001ba83:	0f be c0             	movsx  eax,al
c001ba86:	6a 01                	push   0x1
c001ba88:	89 0d 40 7b 02 c0    	mov    DWORD PTR ds:0xc0027b40,ecx
c001ba8e:	31 db                	xor    ebx,ebx
c001ba90:	53                   	push   ebx
c001ba91:	51                   	push   ecx
c001ba92:	ff 34 85 3c 69 02 c0 	push   DWORD PTR [eax*4-0x3ffd96c4]
c001ba99:	e8 42 47 ff ff       	call   c00101e0 <LogicalDisk::read(unsigned long long, int, void*)>
c001ba9e:	83 c4 20             	add    esp,0x20
c001baa1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001baa5:	be 60 7b 02 c0       	mov    esi,0xc0027b60
c001baaa:	b9 00 08 00 00       	mov    ecx,0x800
c001baaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bab1:	5b                   	pop    ebx
c001bab2:	5e                   	pop    esi
c001bab3:	5f                   	pop    edi
c001bab4:	c3                   	ret    
c001bab5:	90                   	nop

c001bab6 <ISO9660::tryMount(LogicalDisk*, int)>:
c001bab6:	81 ec 10 08 00 00    	sub    esp,0x810
c001babc:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001bac3:	83 c0 41             	add    eax,0x41
c001bac6:	0f be c0             	movsx  eax,al
c001bac9:	50                   	push   eax
c001baca:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bace:	50                   	push   eax
c001bacf:	6a 10                	push   0x10
c001bad1:	e8 85 ff ff ff       	call   c001ba5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bad6:	83 c4 10             	add    esp,0x10
c001bad9:	31 c0                	xor    eax,eax
c001badb:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001bae0:	75 1d                	jne    c001baff <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bae2:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001bae7:	75 16                	jne    c001baff <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bae9:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001baee:	75 0f                	jne    c001baff <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001baf0:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001baf5:	75 08                	jne    c001baff <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001baf7:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001bafc:	0f 94 c0             	sete   al
c001baff:	81 c4 0c 08 00 00    	add    esp,0x80c
c001bb05:	c3                   	ret    

c001bb06 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001bb06:	55                   	push   ebp
c001bb07:	57                   	push   edi
c001bb08:	56                   	push   esi
c001bb09:	53                   	push   ebx
c001bb0a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001bb10:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001bb17:	85 ed                	test   ebp,ebp
c001bb19:	0f 84 da 01 00 00    	je     c001bcf9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bb1f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001bb27:	0f 84 cc 01 00 00    	je     c001bcf9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bb2d:	b8 01 00 00 00       	mov    eax,0x1
c001bb32:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001bb36:	0f 85 c2 01 00 00    	jne    c001bcfe <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bb3c:	31 d2                	xor    edx,edx
c001bb3e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001bb45:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bb48:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001bb4b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bb4e:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb51:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bb55:	01 c8                	add    eax,ecx
c001bb57:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bb5a:	11 da                	adc    edx,ebx
c001bb5c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001bb60:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bb64:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bb68:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb6c:	19 d7                	sbb    edi,edx
c001bb6e:	72 11                	jb     c001bb81 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001bb70:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001bb73:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001bb77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bb7f:	eb 0c                	jmp    c001bb8d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001bb81:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001bb85:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb89:	29 ce                	sub    esi,ecx
c001bb8b:	19 df                	sbb    edi,ebx
c001bb8d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bb90:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001bb93:	0f a4 c2 0b          	shld   edx,eax,0xb
c001bb97:	c1 e0 0b             	shl    eax,0xb
c001bb9a:	01 c8                	add    eax,ecx
c001bb9c:	11 da                	adc    edx,ebx
c001bb9e:	89 04 24             	mov    DWORD PTR [esp],eax
c001bba1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bba5:	51                   	push   ecx
c001bba6:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bbaa:	50                   	push   eax
c001bbab:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001bbaf:	53                   	push   ebx
c001bbb0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bbb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbb8:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bbbc:	50                   	push   eax
c001bbbd:	e8 99 fe ff ff       	call   c001ba5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bbc2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001bbc5:	b8 00 08 00 00       	mov    eax,0x800
c001bbca:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001bbd0:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001bbd4:	29 d0                	sub    eax,edx
c001bbd6:	83 c4 10             	add    esp,0x10
c001bbd9:	89 f9                	mov    ecx,edi
c001bbdb:	39 c6                	cmp    esi,eax
c001bbdd:	83 d9 00             	sbb    ecx,0x0
c001bbe0:	7d 1b                	jge    c001bbfd <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001bbe2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001bbe7:	75 12                	jne    c001bbfb <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001bbe9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bbf0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbf6:	e9 fa 00 00 00       	jmp    c001bcf5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001bbfb:	89 f0                	mov    eax,esi
c001bbfd:	01 d3                	add    ebx,edx
c001bbff:	31 d2                	xor    edx,edx
c001bc01:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001bc05:	39 c2                	cmp    edx,eax
c001bc07:	7d 14                	jge    c001bc1d <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001bc09:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001bc10:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bc14:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001bc17:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001bc1a:	42                   	inc    edx
c001bc1b:	eb e8                	jmp    c001bc05 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001bc1d:	89 c2                	mov    edx,eax
c001bc1f:	85 c0                	test   eax,eax
c001bc21:	79 02                	jns    c001bc25 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001bc23:	31 d2                	xor    edx,edx
c001bc25:	01 c2                	add    edx,eax
c001bc27:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001bc2a:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001bc31:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001bc35:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001bc39:	99                   	cdq    
c001bc3a:	01 c1                	add    ecx,eax
c001bc3c:	11 d3                	adc    ebx,edx
c001bc3e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001bc42:	29 c6                	sub    esi,eax
c001bc44:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001bc48:	19 d7                	sbb    edi,edx
c001bc4a:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc4d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001bc51:	b8 ff 07 00 00       	mov    eax,0x7ff
c001bc56:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001bc59:	b8 00 00 00 00       	mov    eax,0x0
c001bc5e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001bc62:	7d 43                	jge    c001bca7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001bc64:	52                   	push   edx
c001bc65:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bc69:	50                   	push   eax
c001bc6a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bc6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bc76:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bc7a:	50                   	push   eax
c001bc7b:	e8 db fd ff ff       	call   c001ba5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bc80:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001bc88:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001bc8d:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001bc95:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001bc9d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001bca2:	83 c4 10             	add    esp,0x10
c001bca5:	eb aa                	jmp    c001bc51 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001bca7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcab:	0b 04 24             	or     eax,DWORD PTR [esp]
c001bcae:	74 2a                	je     c001bcda <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001bcb0:	50                   	push   eax
c001bcb1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bcb5:	50                   	push   eax
c001bcb6:	8d 74 24 28          	lea    esi,[esp+0x28]
c001bcba:	56                   	push   esi
c001bcbb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bcbf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bcc3:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001bcc7:	51                   	push   ecx
c001bcc8:	e8 8e fd ff ff       	call   c001ba5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bccd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bcd1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bcd5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bcd7:	83 c4 10             	add    esp,0x10
c001bcda:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bce1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bce5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bce9:	89 18                	mov    DWORD PTR [eax],ebx
c001bceb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bcef:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bcf2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bcf5:	31 c0                	xor    eax,eax
c001bcf7:	eb 05                	jmp    c001bcfe <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bcf9:	b8 04 00 00 00       	mov    eax,0x4
c001bcfe:	81 c4 2c 08 00 00    	add    esp,0x82c
c001bd04:	5b                   	pop    ebx
c001bd05:	5e                   	pop    esi
c001bd06:	5f                   	pop    edi
c001bd07:	5d                   	pop    ebp
c001bd08:	c3                   	ret    
c001bd09:	90                   	nop

c001bd0a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001bd0a:	55                   	push   ebp
c001bd0b:	57                   	push   edi
c001bd0c:	56                   	push   esi
c001bd0d:	53                   	push   ebx
c001bd0e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001bd14:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001bd1b:	85 ed                	test   ebp,ebp
c001bd1d:	0f 84 51 02 00 00    	je     c001bf74 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bd23:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001bd2b:	0f 84 43 02 00 00    	je     c001bf74 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bd31:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bd34:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001bd37:	75 0a                	jne    c001bd43 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001bd39:	b8 07 00 00 00       	mov    eax,0x7
c001bd3e:	e9 36 02 00 00       	jmp    c001bf79 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bd43:	50                   	push   eax
c001bd44:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bd48:	50                   	push   eax
c001bd49:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bd50:	53                   	push   ebx
c001bd51:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bd54:	c1 e0 0b             	shl    eax,0xb
c001bd57:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001bd5a:	c1 e8 0b             	shr    eax,0xb
c001bd5d:	50                   	push   eax
c001bd5e:	e8 f8 fc ff ff       	call   c001ba5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bd63:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bd66:	83 c4 10             	add    esp,0x10
c001bd69:	89 c1                	mov    ecx,eax
c001bd6b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001bd6e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001bd74:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001bd77:	84 db                	test   bl,bl
c001bd79:	0f 85 8b 00 00 00    	jne    c001be0a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001bd7f:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001bd85:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bd88:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001bd8e:	29 c6                	sub    esi,eax
c001bd90:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001bd94:	89 f3                	mov    ebx,esi
c001bd96:	89 f1                	mov    ecx,esi
c001bd98:	c1 fb 1f             	sar    ebx,0x1f
c001bd9b:	01 f0                	add    eax,esi
c001bd9d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bda0:	11 da                	adc    edx,ebx
c001bda2:	89 04 24             	mov    DWORD PTR [esp],eax
c001bda5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bda9:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bdac:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bdaf:	89 d8                	mov    eax,ebx
c001bdb1:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001bdb5:	ba 00 00 00 00       	mov    edx,0x0
c001bdba:	19 f8                	sbb    eax,edi
c001bdbc:	b8 00 00 00 00       	mov    eax,0x0
c001bdc1:	73 08                	jae    c001bdcb <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001bdc3:	89 f0                	mov    eax,esi
c001bdc5:	89 fa                	mov    edx,edi
c001bdc7:	29 c8                	sub    eax,ecx
c001bdc9:	19 da                	sbb    edx,ebx
c001bdcb:	89 d7                	mov    edi,edx
c001bdcd:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bdd0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bdd3:	09 c7                	or     edi,eax
c001bdd5:	0f 84 5e ff ff ff    	je     c001bd39 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001bddb:	57                   	push   edi
c001bddc:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bde0:	50                   	push   eax
c001bde1:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bde8:	53                   	push   ebx
c001bde9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bdec:	c1 e0 0b             	shl    eax,0xb
c001bdef:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001bdf3:	c1 e8 0b             	shr    eax,0xb
c001bdf6:	50                   	push   eax
c001bdf7:	e8 5f fc ff ff       	call   c001ba5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bdfc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bdff:	83 c4 10             	add    esp,0x10
c001be02:	25 ff 07 00 00       	and    eax,0x7ff
c001be07:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001be0a:	31 ff                	xor    edi,edi
c001be0c:	56                   	push   esi
c001be0d:	6a 28                	push   0x28
c001be0f:	6a 00                	push   0x0
c001be11:	8d 44 24 24          	lea    eax,[esp+0x24]
c001be15:	50                   	push   eax
c001be16:	e8 69 48 fe ff       	call   c0000684 <memset>
c001be1b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001be1e:	25 ff 07 00 00       	and    eax,0x7ff
c001be23:	89 c6                	mov    esi,eax
c001be25:	83 c6 21             	add    esi,0x21
c001be28:	83 d7 00             	adc    edi,0x0
c001be2b:	83 c4 10             	add    esp,0x10
c001be2e:	31 c9                	xor    ecx,ecx
c001be30:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001be37:	83 f9 28             	cmp    ecx,0x28
c001be3a:	88 04 24             	mov    BYTE PTR [esp],al
c001be3d:	0f 94 c2             	sete   dl
c001be40:	88 d0                	mov    al,dl
c001be42:	ba ff 07 00 00       	mov    edx,0x7ff
c001be47:	39 f2                	cmp    edx,esi
c001be49:	ba 00 00 00 00       	mov    edx,0x0
c001be4e:	19 fa                	sbb    edx,edi
c001be50:	0f 92 c2             	setb   dl
c001be53:	09 c2                	or     edx,eax
c001be55:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001be59:	0f 94 c0             	sete   al
c001be5c:	08 d0                	or     al,dl
c001be5e:	75 16                	jne    c001be76 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001be60:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001be64:	74 10                	je     c001be76 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001be66:	8a 04 24             	mov    al,BYTE PTR [esp]
c001be69:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001be6d:	41                   	inc    ecx
c001be6e:	83 c6 01             	add    esi,0x1
c001be71:	83 d7 00             	adc    edi,0x0
c001be74:	eb ba                	jmp    c001be30 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001be76:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001be7d:	83 ec 0c             	sub    esp,0xc
c001be80:	8d 74 24 24          	lea    esi,[esp+0x24]
c001be84:	56                   	push   esi
c001be85:	e8 16 48 fe ff       	call   c00006a0 <strlen>
c001be8a:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001be91:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001be95:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001be9d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bea0:	5a                   	pop    edx
c001bea1:	25 ff 07 00 00       	and    eax,0x7ff
c001bea6:	59                   	pop    ecx
c001bea7:	01 f8                	add    eax,edi
c001bea9:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001beaf:	83 e0 02             	and    eax,0x2
c001beb2:	3c 01                	cmp    al,0x1
c001beb4:	19 c0                	sbb    eax,eax
c001beb6:	83 c0 02             	add    eax,0x2
c001beb9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001bebd:	56                   	push   esi
c001bebe:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001bec2:	50                   	push   eax
c001bec3:	e8 78 48 fe ff       	call   c0000740 <strcpy>
c001bec8:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001becc:	83 c4 10             	add    esp,0x10
c001becf:	84 c0                	test   al,al
c001bed1:	75 21                	jne    c001bef4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001bed3:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001bedb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bee3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001beeb:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001bef2:	eb 28                	jmp    c001bf1c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bef4:	fe c8                	dec    al
c001bef6:	75 24                	jne    c001bf1c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bef8:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001bf00:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bf08:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001bf10:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001bf17:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001bf1c:	8d 74 24 40          	lea    esi,[esp+0x40]
c001bf20:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001bf27:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001bf2e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bf30:	0f b6 f3             	movzx  esi,bl
c001bf33:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001bf3a:	31 db                	xor    ebx,ebx
c001bf3c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bf42:	89 df                	mov    edi,ebx
c001bf44:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001bf47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf4a:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001bf4d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001bf50:	39 c6                	cmp    esi,eax
c001bf52:	19 d7                	sbb    edi,edx
c001bf54:	72 10                	jb     c001bf66 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001bf56:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001bf5d:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001bf64:	eb 0a                	jmp    c001bf70 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001bf66:	29 f0                	sub    eax,esi
c001bf68:	19 da                	sbb    edx,ebx
c001bf6a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bf6d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bf70:	31 c0                	xor    eax,eax
c001bf72:	eb 05                	jmp    c001bf79 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bf74:	b8 04 00 00 00       	mov    eax,0x4
c001bf79:	81 c4 5c 09 00 00    	add    esp,0x95c
c001bf7f:	5b                   	pop    ebx
c001bf80:	5e                   	pop    esi
c001bf81:	5f                   	pop    edi
c001bf82:	5d                   	pop    ebp
c001bf83:	c3                   	ret    

c001bf84 <readRoot(unsigned int*, unsigned int*, char)>:
c001bf84:	57                   	push   edi
c001bf85:	56                   	push   esi
c001bf86:	81 ec 38 08 00 00    	sub    esp,0x838
c001bf8c:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001bf94:	50                   	push   eax
c001bf95:	8d 44 24 38          	lea    eax,[esp+0x38]
c001bf99:	50                   	push   eax
c001bf9a:	6a 10                	push   0x10
c001bf9c:	e8 ba fa ff ff       	call   c001ba5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bfa1:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001bfa8:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001bfac:	b9 22 00 00 00       	mov    ecx,0x22
c001bfb1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bfb3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bfba:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bfbe:	89 10                	mov    DWORD PTR [eax],edx
c001bfc0:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001bfc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bfcb:	89 10                	mov    DWORD PTR [eax],edx
c001bfcd:	81 c4 44 08 00 00    	add    esp,0x844
c001bfd3:	b0 01                	mov    al,0x1
c001bfd5:	5e                   	pop    esi
c001bfd6:	5f                   	pop    edi
c001bfd7:	c3                   	ret    

c001bfd8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001bfd8:	55                   	push   ebp
c001bfd9:	57                   	push   edi
c001bfda:	56                   	push   esi
c001bfdb:	53                   	push   ebx
c001bfdc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bfe2:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001bfe9:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001bff0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bff4:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001bff8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bffc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c000:	75 03                	jne    c001c005 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c002:	83 c3 02             	add    ebx,0x2
c001c005:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001c008:	75 03                	jne    c001c00d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001c00a:	43                   	inc    ebx
c001c00b:	eb f8                	jmp    c001c005 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c00d:	51                   	push   ecx
c001c00e:	68 00 01 00 00       	push   0x100
c001c013:	6a 00                	push   0x0
c001c015:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c019:	50                   	push   eax
c001c01a:	e8 65 46 fe ff       	call   c0000684 <memset>
c001c01f:	83 c4 10             	add    esp,0x10
c001c022:	31 d2                	xor    edx,edx
c001c024:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c027:	84 c0                	test   al,al
c001c029:	74 21                	je     c001c04c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001c02b:	3c 2f                	cmp    al,0x2f
c001c02d:	75 0b                	jne    c001c03a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001c02f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001c033:	bd 01 00 00 00       	mov    ebp,0x1
c001c038:	eb 14                	jmp    c001c04e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001c03a:	8d 48 9f             	lea    ecx,[eax-0x61]
c001c03d:	80 f9 19             	cmp    cl,0x19
c001c040:	77 03                	ja     c001c045 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c042:	83 e8 20             	sub    eax,0x20
c001c045:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001c049:	42                   	inc    edx
c001c04a:	eb d8                	jmp    c001c024 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001c04c:	31 ed                	xor    ebp,ebp
c001c04e:	83 ec 0c             	sub    esp,0xc
c001c051:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c058:	e8 66 d9 fe ff       	call   c00099c3 <malloc>
c001c05d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c064:	89 c6                	mov    esi,eax
c001c066:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001c06c:	c1 ef 0b             	shr    edi,0xb
c001c06f:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c076:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c07a:	83 c4 10             	add    esp,0x10
c001c07d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c082:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c086:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001c08d:	74 28                	je     c001c0b7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001c08f:	52                   	push   edx
c001c090:	57                   	push   edi
c001c091:	50                   	push   eax
c001c092:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c096:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c09d:	e8 b9 f9 ff ff       	call   c001ba5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c0a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c0a6:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c0ad:	05 00 08 00 00       	add    eax,0x800
c001c0b2:	83 c4 10             	add    esp,0x10
c001c0b5:	eb cb                	jmp    c001c082 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001c0b7:	83 ec 0c             	sub    esp,0xc
c001c0ba:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c0be:	57                   	push   edi
c001c0bf:	e8 dc 45 fe ff       	call   c00006a0 <strlen>
c001c0c4:	50                   	push   eax
c001c0c5:	57                   	push   edi
c001c0c6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c0cd:	56                   	push   esi
c001c0ce:	e8 46 f9 ff ff       	call   c001ba19 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c0d3:	83 c4 20             	add    esp,0x20
c001c0d6:	85 c0                	test   eax,eax
c001c0d8:	75 13                	jne    c001c0ed <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001c0da:	83 ec 0c             	sub    esp,0xc
c001c0dd:	56                   	push   esi
c001c0de:	e8 f0 d8 fe ff       	call   c00099d3 <free>
c001c0e3:	83 c4 10             	add    esp,0x10
c001c0e6:	31 c0                	xor    eax,eax
c001c0e8:	e9 b3 00 00 00       	jmp    c001c1a0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c0ed:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c0f1:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c0f5:	c1 e7 08             	shl    edi,0x8
c001c0f8:	c1 e2 10             	shl    edx,0x10
c001c0fb:	09 d7                	or     edi,edx
c001c0fd:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c101:	09 d7                	or     edi,edx
c001c103:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c107:	c1 e2 18             	shl    edx,0x18
c001c10a:	09 d7                	or     edi,edx
c001c10c:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c110:	89 d1                	mov    ecx,edx
c001c112:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c116:	c1 e1 08             	shl    ecx,0x8
c001c119:	c1 e2 10             	shl    edx,0x10
c001c11c:	09 ca                	or     edx,ecx
c001c11e:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c122:	09 ca                	or     edx,ecx
c001c124:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c128:	c1 e1 18             	shl    ecx,0x18
c001c12b:	09 ca                	or     edx,ecx
c001c12d:	89 e9                	mov    ecx,ebp
c001c12f:	84 c9                	test   cl,cl
c001c131:	74 3c                	je     c001c16f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001c133:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c137:	83 ec 0c             	sub    esp,0xc
c001c13a:	56                   	push   esi
c001c13b:	e8 93 d8 fe ff       	call   c00099d3 <free>
c001c140:	83 c4 0c             	add    esp,0xc
c001c143:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c14a:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c14f:	50                   	push   eax
c001c150:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c157:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c15e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c162:	52                   	push   edx
c001c163:	57                   	push   edi
c001c164:	53                   	push   ebx
c001c165:	e8 6e fe ff ff       	call   c001bfd8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c16a:	83 c4 20             	add    esp,0x20
c001c16d:	eb 31                	jmp    c001c1a0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c16f:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c172:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c179:	d0 e8                	shr    al,1
c001c17b:	89 3b                	mov    DWORD PTR [ebx],edi
c001c17d:	83 e0 01             	and    eax,0x1
c001c180:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c187:	83 ec 0c             	sub    esp,0xc
c001c18a:	89 13                	mov    DWORD PTR [ebx],edx
c001c18c:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c193:	89 03                	mov    DWORD PTR [ebx],eax
c001c195:	56                   	push   esi
c001c196:	e8 38 d8 fe ff       	call   c00099d3 <free>
c001c19b:	83 c4 10             	add    esp,0x10
c001c19e:	b0 01                	mov    al,0x1
c001c1a0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c1a6:	5b                   	pop    ebx
c001c1a7:	5e                   	pop    esi
c001c1a8:	5f                   	pop    edi
c001c1a9:	5d                   	pop    ebp
c001c1aa:	c3                   	ret    

c001c1ab <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c1ab:	55                   	push   ebp
c001c1ac:	57                   	push   edi
c001c1ad:	56                   	push   esi
c001c1ae:	53                   	push   ebx
c001c1af:	83 ec 20             	sub    esp,0x20
c001c1b2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c1b6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c1ba:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c1be:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c1c6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c1ce:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c1d3:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c1d9:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c1df:	57                   	push   edi
c001c1e0:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c1e4:	50                   	push   eax
c001c1e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c1e9:	50                   	push   eax
c001c1ea:	e8 95 fd ff ff       	call   c001bf84 <readRoot(unsigned int*, unsigned int*, char)>
c001c1ef:	5a                   	pop    edx
c001c1f0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c1f4:	e8 a7 44 fe ff       	call   c00006a0 <strlen>
c001c1f9:	83 c4 10             	add    esp,0x10
c001c1fc:	83 f8 03             	cmp    eax,0x3
c001c1ff:	77 17                	ja     c001c218 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c201:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c205:	89 03                	mov    DWORD PTR [ebx],eax
c001c207:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c20b:	89 06                	mov    DWORD PTR [esi],eax
c001c20d:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c214:	b0 01                	mov    al,0x1
c001c216:	eb 19                	jmp    c001c231 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c218:	50                   	push   eax
c001c219:	55                   	push   ebp
c001c21a:	57                   	push   edi
c001c21b:	56                   	push   esi
c001c21c:	53                   	push   ebx
c001c21d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c221:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c225:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c229:	e8 aa fd ff ff       	call   c001bfd8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c22e:	83 c4 20             	add    esp,0x20
c001c231:	83 c4 1c             	add    esp,0x1c
c001c234:	5b                   	pop    ebx
c001c235:	5e                   	pop    esi
c001c236:	5f                   	pop    edi
c001c237:	5d                   	pop    ebp
c001c238:	c3                   	ret    
c001c239:	90                   	nop

c001c23a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c23a:	57                   	push   edi
c001c23b:	56                   	push   esi
c001c23c:	53                   	push   ebx
c001c23d:	83 ec 10             	sub    esp,0x10
c001c240:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c244:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c248:	85 ff                	test   edi,edi
c001c24a:	0f 84 8b 00 00 00    	je     c001c2db <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c250:	85 f6                	test   esi,esi
c001c252:	0f 84 83 00 00 00    	je     c001c2db <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c258:	b8 03 00 00 00       	mov    eax,0x3
c001c25d:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c262:	75 7c                	jne    c001c2e0 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c264:	83 ec 0c             	sub    esp,0xc
c001c267:	6a 1c                	push   0x1c
c001c269:	e8 55 d7 fe ff       	call   c00099c3 <malloc>
c001c26e:	89 07                	mov    DWORD PTR [edi],eax
c001c270:	89 c3                	mov    ebx,eax
c001c272:	58                   	pop    eax
c001c273:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c277:	50                   	push   eax
c001c278:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c27b:	50                   	push   eax
c001c27c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c280:	50                   	push   eax
c001c281:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c285:	50                   	push   eax
c001c286:	56                   	push   esi
c001c287:	e8 1f ff ff ff       	call   c001c1ab <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c28c:	83 c4 20             	add    esp,0x20
c001c28f:	84 c0                	test   al,al
c001c291:	74 07                	je     c001c29a <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c293:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c298:	74 0b                	je     c001c2a5 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c29a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c29e:	b8 01 00 00 00       	mov    eax,0x1
c001c2a3:	eb 3b                	jmp    c001c2e0 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c2a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2a9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c2ad:	89 03                	mov    DWORD PTR [ebx],eax
c001c2af:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c2b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2ba:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c2c1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c2c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c2cb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c2d2:	8a 06                	mov    al,BYTE PTR [esi]
c001c2d4:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c2d7:	31 c0                	xor    eax,eax
c001c2d9:	eb 05                	jmp    c001c2e0 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c2db:	b8 04 00 00 00       	mov    eax,0x4
c001c2e0:	83 c4 10             	add    esp,0x10
c001c2e3:	5b                   	pop    ebx
c001c2e4:	5e                   	pop    esi
c001c2e5:	5f                   	pop    edi
c001c2e6:	c3                   	ret    
c001c2e7:	90                   	nop

c001c2e8 <ISO9660::exists(char const*)>:
c001c2e8:	83 ec 28             	sub    esp,0x28
c001c2eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c2ef:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c2f3:	52                   	push   edx
c001c2f4:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c2f7:	52                   	push   edx
c001c2f8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c2fc:	52                   	push   edx
c001c2fd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c301:	52                   	push   edx
c001c302:	50                   	push   eax
c001c303:	e8 a3 fe ff ff       	call   c001c1ab <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c308:	83 c4 3c             	add    esp,0x3c
c001c30b:	c3                   	ret    

c001c30c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c30c:	56                   	push   esi
c001c30d:	53                   	push   ebx
c001c30e:	83 ec 14             	sub    esp,0x14
c001c311:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c315:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c319:	85 db                	test   ebx,ebx
c001c31b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c31f:	0f 94 c2             	sete   dl
c001c322:	85 f6                	test   esi,esi
c001c324:	0f 94 c0             	sete   al
c001c327:	08 c2                	or     dl,al
c001c329:	75 68                	jne    c001c393 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c32b:	85 c9                	test   ecx,ecx
c001c32d:	74 64                	je     c001c393 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c32f:	83 ec 0c             	sub    esp,0xc
c001c332:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c335:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c339:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c33f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c346:	50                   	push   eax
c001c347:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c34a:	50                   	push   eax
c001c34b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c34f:	50                   	push   eax
c001c350:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c354:	50                   	push   eax
c001c355:	51                   	push   ecx
c001c356:	e8 50 fe ff ff       	call   c001c1ab <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c35b:	83 c4 20             	add    esp,0x20
c001c35e:	ba 01 00 00 00       	mov    edx,0x1
c001c363:	84 c0                	test   al,al
c001c365:	74 31                	je     c001c398 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c367:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c36b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c372:	89 03                	mov    DWORD PTR [ebx],eax
c001c374:	ba 00 00 00 00       	mov    edx,0x0
c001c379:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c37d:	85 c0                	test   eax,eax
c001c37f:	0f 95 06             	setne  BYTE PTR [esi]
c001c382:	74 14                	je     c001c398 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c384:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c38a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c391:	eb 05                	jmp    c001c398 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c393:	ba 04 00 00 00       	mov    edx,0x4
c001c398:	83 c4 14             	add    esp,0x14
c001c39b:	89 d0                	mov    eax,edx
c001c39d:	5b                   	pop    ebx
c001c39e:	5e                   	pop    esi
c001c39f:	c3                   	ret    

c001c3a0 <ISO9660::openDir(char const*, void**)>:
c001c3a0:	57                   	push   edi
c001c3a1:	56                   	push   esi
c001c3a2:	53                   	push   ebx
c001c3a3:	83 ec 10             	sub    esp,0x10
c001c3a6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c3aa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c3ae:	85 ff                	test   edi,edi
c001c3b0:	74 7b                	je     c001c42d <ISO9660::openDir(char const*, void**)+0x8d>
c001c3b2:	85 f6                	test   esi,esi
c001c3b4:	74 77                	je     c001c42d <ISO9660::openDir(char const*, void**)+0x8d>
c001c3b6:	83 ec 0c             	sub    esp,0xc
c001c3b9:	6a 1c                	push   0x1c
c001c3bb:	e8 03 d6 fe ff       	call   c00099c3 <malloc>
c001c3c0:	89 07                	mov    DWORD PTR [edi],eax
c001c3c2:	89 c3                	mov    ebx,eax
c001c3c4:	58                   	pop    eax
c001c3c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c3c9:	50                   	push   eax
c001c3ca:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c3cd:	50                   	push   eax
c001c3ce:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c3d2:	50                   	push   eax
c001c3d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c3d7:	50                   	push   eax
c001c3d8:	56                   	push   esi
c001c3d9:	e8 cd fd ff ff       	call   c001c1ab <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c3de:	83 c4 20             	add    esp,0x20
c001c3e1:	84 c0                	test   al,al
c001c3e3:	74 07                	je     c001c3ec <ISO9660::openDir(char const*, void**)+0x4c>
c001c3e5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c3ea:	75 0b                	jne    c001c3f7 <ISO9660::openDir(char const*, void**)+0x57>
c001c3ec:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c3f0:	b8 01 00 00 00       	mov    eax,0x1
c001c3f5:	eb 3b                	jmp    c001c432 <ISO9660::openDir(char const*, void**)+0x92>
c001c3f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3fb:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c3ff:	89 03                	mov    DWORD PTR [ebx],eax
c001c401:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c408:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c40c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c413:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c41a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c41d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c424:	8a 06                	mov    al,BYTE PTR [esi]
c001c426:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c429:	31 c0                	xor    eax,eax
c001c42b:	eb 05                	jmp    c001c432 <ISO9660::openDir(char const*, void**)+0x92>
c001c42d:	b8 04 00 00 00       	mov    eax,0x4
c001c432:	83 c4 10             	add    esp,0x10
c001c435:	5b                   	pop    ebx
c001c436:	5e                   	pop    esi
c001c437:	5f                   	pop    edi
c001c438:	c3                   	ret    
c001c439:	90                   	nop

c001c43a <ISO9660::ISO9660()>:
c001c43a:	83 ec 0c             	sub    esp,0xc
c001c43d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c441:	83 ec 0c             	sub    esp,0xc
c001c444:	50                   	push   eax
c001c445:	e8 90 09 ff ff       	call   c000cdda <Filesystem::Filesystem()>
c001c44a:	83 c4 10             	add    esp,0x10
c001c44d:	ba 10 4c 02 c0       	mov    edx,0xc0024c10
c001c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c456:	89 10                	mov    DWORD PTR [eax],edx
c001c458:	90                   	nop
c001c459:	83 c4 0c             	add    esp,0xc
c001c45c:	c3                   	ret    
c001c45d:	90                   	nop

c001c45e <SoundCard::beginPlayback()>:
c001c45e:	c7 44 24 04 70 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024c70
c001c466:	e9 1a 7f ff ff       	jmp    c0014385 <Krnl::panic(char const*)>
c001c46b:	90                   	nop

c001c46c <SoundCard::stopPlayback()>:
c001c46c:	c7 44 24 04 a4 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024ca4
c001c474:	e9 0c 7f ff ff       	jmp    c0014385 <Krnl::panic(char const*)>
c001c479:	90                   	nop

c001c47a <SoundCard::SoundCard(char const*)>:
c001c47a:	83 ec 1c             	sub    esp,0x1c
c001c47d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c481:	83 ec 08             	sub    esp,0x8
c001c484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c488:	50                   	push   eax
c001c489:	e8 80 1c ff ff       	call   c000e10e <Device::Device(char const*)>
c001c48e:	83 c4 10             	add    esp,0x10
c001c491:	ba b0 4d 02 c0       	mov    edx,0xc0024db0
c001c496:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c49a:	89 10                	mov    DWORD PTR [eax],edx
c001c49c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4a0:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c4a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4ab:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c4b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4b9:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c4c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4c7:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c4d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4d5:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c4df:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c4e7:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c4ec:	7f 19                	jg     c001c507 <SoundCard::SoundCard(char const*)+0x8d>
c001c4ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c4f6:	83 c2 54             	add    edx,0x54
c001c4f9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c501:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c505:	eb e0                	jmp    c001c4e7 <SoundCard::SoundCard(char const*)+0x6d>
c001c507:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c50b:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c512:	90                   	nop
c001c513:	83 c4 1c             	add    esp,0x1c
c001c516:	c3                   	ret    
c001c517:	90                   	nop

c001c518 <SoundCard::~SoundCard()>:
c001c518:	83 ec 0c             	sub    esp,0xc
c001c51b:	ba b0 4d 02 c0       	mov    edx,0xc0024db0
c001c520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c524:	89 10                	mov    DWORD PTR [eax],edx
c001c526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c52a:	83 ec 0c             	sub    esp,0xc
c001c52d:	50                   	push   eax
c001c52e:	e8 a5 18 ff ff       	call   c000ddd8 <Device::~Device()>
c001c533:	83 c4 10             	add    esp,0x10
c001c536:	90                   	nop
c001c537:	83 c4 0c             	add    esp,0xc
c001c53a:	c3                   	ret    
c001c53b:	90                   	nop

c001c53c <SoundCard::~SoundCard()>:
c001c53c:	83 ec 0c             	sub    esp,0xc
c001c53f:	83 ec 0c             	sub    esp,0xc
c001c542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c546:	e8 cd ff ff ff       	call   c001c518 <SoundCard::~SoundCard()>
c001c54b:	83 c4 10             	add    esp,0x10
c001c54e:	83 ec 08             	sub    esp,0x8
c001c551:	68 e8 01 00 00       	push   0x1e8
c001c556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c55a:	e8 83 04 ff ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c001c55f:	83 c4 10             	add    esp,0x10
c001c562:	83 c4 0c             	add    esp,0xc
c001c565:	c3                   	ret    

c001c566 <SoundCard::configureRates(int, int, int)>:
c001c566:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c56a:	31 c0                	xor    eax,eax
c001c56c:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c573:	75 20                	jne    c001c595 <SoundCard::configureRates(int, int, int)+0x2f>
c001c575:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c579:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c57f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c583:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c58d:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c593:	b0 01                	mov    al,0x1
c001c595:	c3                   	ret    

c001c596 <SoundCard::getSamples16(int, short*)>:
c001c596:	55                   	push   ebp
c001c597:	57                   	push   edi
c001c598:	31 ff                	xor    edi,edi
c001c59a:	56                   	push   esi
c001c59b:	53                   	push   ebx
c001c59c:	83 ec 28             	sub    esp,0x28
c001c59f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c5a3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c5a7:	8d 5c 2d 00          	lea    ebx,[ebp+ebp*1+0x0]
c001c5ab:	68 d7 4c 02 c0       	push   0xc0024cd7
c001c5b0:	e8 0e 05 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001c5b5:	83 c4 0c             	add    esp,0xc
c001c5b8:	53                   	push   ebx
c001c5b9:	6a 00                	push   0x0
c001c5bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c5bf:	e8 c0 40 fe ff       	call   c0000684 <memset>
c001c5c4:	58                   	pop    eax
c001c5c5:	5a                   	pop    edx
c001c5c6:	53                   	push   ebx
c001c5c7:	31 db                	xor    ebx,ebx
c001c5c9:	68 f6 4c 02 c0       	push   0xc0024cf6
c001c5ce:	e8 f0 04 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001c5d3:	83 c4 10             	add    esp,0x10
c001c5d6:	52                   	push   edx
c001c5d7:	52                   	push   edx
c001c5d8:	53                   	push   ebx
c001c5d9:	68 09 4d 02 c0       	push   0xc0024d09
c001c5de:	e8 e0 04 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001c5e3:	59                   	pop    ecx
c001c5e4:	58                   	pop    eax
c001c5e5:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c5ec:	68 21 4d 02 c0       	push   0xc0024d21
c001c5f1:	e8 cd 04 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001c5f6:	8b 84 9e 58 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x158]
c001c5fd:	83 c4 10             	add    esp,0x10
c001c600:	85 c0                	test   eax,eax
c001c602:	74 44                	je     c001c648 <SoundCard::getSamples16(int, short*)+0xb2>
c001c604:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c608:	75 3e                	jne    c001c648 <SoundCard::getSamples16(int, short*)+0xb2>
c001c60a:	50                   	push   eax
c001c60b:	50                   	push   eax
c001c60c:	53                   	push   ebx
c001c60d:	68 33 4d 02 c0       	push   0xc0024d33
c001c612:	e8 ac 04 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001c617:	56                   	push   esi
c001c618:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c61c:	55                   	push   ebp
c001c61d:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c624:	e8 6f 03 00 00       	call   c001c998 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c629:	83 c4 18             	add    esp,0x18
c001c62c:	50                   	push   eax
c001c62d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c631:	68 4a 4d 02 c0       	push   0xc0024d4a
c001c636:	e8 88 04 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001c63b:	83 c4 10             	add    esp,0x10
c001c63e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c642:	39 c7                	cmp    edi,eax
c001c644:	7d 02                	jge    c001c648 <SoundCard::getSamples16(int, short*)+0xb2>
c001c646:	89 c7                	mov    edi,eax
c001c648:	43                   	inc    ebx
c001c649:	83 fb 20             	cmp    ebx,0x20
c001c64c:	75 88                	jne    c001c5d6 <SoundCard::getSamples16(int, short*)+0x40>
c001c64e:	83 c4 1c             	add    esp,0x1c
c001c651:	89 f8                	mov    eax,edi
c001c653:	5b                   	pop    ebx
c001c654:	5e                   	pop    esi
c001c655:	5f                   	pop    edi
c001c656:	5d                   	pop    ebp
c001c657:	c3                   	ret    

c001c658 <SoundCard::getSamples32(int, int*)>:
c001c658:	55                   	push   ebp
c001c659:	57                   	push   edi
c001c65a:	31 ff                	xor    edi,edi
c001c65c:	56                   	push   esi
c001c65d:	31 f6                	xor    esi,esi
c001c65f:	53                   	push   ebx
c001c660:	83 ec 10             	sub    esp,0x10
c001c663:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c667:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c66b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c66f:	c1 e0 02             	shl    eax,0x2
c001c672:	50                   	push   eax
c001c673:	6a 00                	push   0x0
c001c675:	55                   	push   ebp
c001c676:	e8 09 40 fe ff       	call   c0000684 <memset>
c001c67b:	83 c4 10             	add    esp,0x10
c001c67e:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c685:	85 c0                	test   eax,eax
c001c687:	74 1b                	je     c001c6a4 <SoundCard::getSamples32(int, int*)+0x4c>
c001c689:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c68d:	75 15                	jne    c001c6a4 <SoundCard::getSamples32(int, int*)+0x4c>
c001c68f:	53                   	push   ebx
c001c690:	55                   	push   ebp
c001c691:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c695:	50                   	push   eax
c001c696:	e8 f9 03 00 00       	call   c001ca94 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c69b:	83 c4 10             	add    esp,0x10
c001c69e:	39 c6                	cmp    esi,eax
c001c6a0:	7d 02                	jge    c001c6a4 <SoundCard::getSamples32(int, int*)+0x4c>
c001c6a2:	89 c6                	mov    esi,eax
c001c6a4:	47                   	inc    edi
c001c6a5:	83 ff 20             	cmp    edi,0x20
c001c6a8:	75 d4                	jne    c001c67e <SoundCard::getSamples32(int, int*)+0x26>
c001c6aa:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001c6b0:	85 f6                	test   esi,esi
c001c6b2:	75 0f                	jne    c001c6c3 <SoundCard::getSamples32(int, int*)+0x6b>
c001c6b4:	84 c0                	test   al,al
c001c6b6:	74 1b                	je     c001c6d3 <SoundCard::getSamples32(int, int*)+0x7b>
c001c6b8:	83 ec 0c             	sub    esp,0xc
c001c6bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6bd:	53                   	push   ebx
c001c6be:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c6c1:	eb 0d                	jmp    c001c6d0 <SoundCard::getSamples32(int, int*)+0x78>
c001c6c3:	84 c0                	test   al,al
c001c6c5:	75 0c                	jne    c001c6d3 <SoundCard::getSamples32(int, int*)+0x7b>
c001c6c7:	83 ec 0c             	sub    esp,0xc
c001c6ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6cc:	53                   	push   ebx
c001c6cd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c6d0:	83 c4 10             	add    esp,0x10
c001c6d3:	83 c4 0c             	add    esp,0xc
c001c6d6:	89 f0                	mov    eax,esi
c001c6d8:	5b                   	pop    ebx
c001c6d9:	5e                   	pop    esi
c001c6da:	5f                   	pop    edi
c001c6db:	5d                   	pop    ebp
c001c6dc:	c3                   	ret    
c001c6dd:	90                   	nop

c001c6de <SoundCard::addChannel(SoundPort*)>:
c001c6de:	56                   	push   esi
c001c6df:	53                   	push   ebx
c001c6e0:	53                   	push   ebx
c001c6e1:	31 db                	xor    ebx,ebx
c001c6e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c6e7:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001c6ef:	74 27                	je     c001c718 <SoundCard::addChannel(SoundPort*)+0x3a>
c001c6f1:	43                   	inc    ebx
c001c6f2:	83 fb 20             	cmp    ebx,0x20
c001c6f5:	75 f0                	jne    c001c6e7 <SoundCard::addChannel(SoundPort*)+0x9>
c001c6f7:	83 ec 0c             	sub    esp,0xc
c001c6fa:	83 cb ff             	or     ebx,0xffffffff
c001c6fd:	68 6f 4d 02 c0       	push   0xc0024d6f
c001c702:	e8 bc 03 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001c707:	c7 04 24 68 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d68
c001c70e:	e8 72 7c ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001c713:	83 c4 10             	add    esp,0x10
c001c716:	eb 1b                	jmp    c001c733 <SoundCard::addChannel(SoundPort*)+0x55>
c001c718:	51                   	push   ecx
c001c719:	51                   	push   ecx
c001c71a:	53                   	push   ebx
c001c71b:	68 87 4d 02 c0       	push   0xc0024d87
c001c720:	e8 9e 03 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001c725:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c729:	83 c4 10             	add    esp,0x10
c001c72c:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001c733:	89 d8                	mov    eax,ebx
c001c735:	5a                   	pop    edx
c001c736:	5b                   	pop    ebx
c001c737:	5e                   	pop    esi
c001c738:	c3                   	ret    
c001c739:	90                   	nop

c001c73a <SoundCard::removeChannel(int)>:
c001c73a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c73e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c742:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c74d:	c3                   	ret    
c001c74e:	66 90                	xchg   ax,ax

c001c750 <SoundPort::SoundPort(int, int, int, int)>:
c001c750:	83 ec 0c             	sub    esp,0xc
c001c753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c757:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c762:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c76a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c76e:	89 10                	mov    DWORD PTR [eax],edx
c001c770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c774:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c778:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c77b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c77f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c783:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c786:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c78b:	75 13                	jne    c001c7a0 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001c78d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c791:	8b 00                	mov    eax,DWORD PTR [eax]
c001c793:	05 a0 0f 00 00       	add    eax,0xfa0
c001c798:	01 c0                	add    eax,eax
c001c79a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c79e:	66 90                	xchg   ax,ax
c001c7a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c7a8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c7ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7af:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ba:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c7bd:	c1 e0 02             	shl    eax,0x2
c001c7c0:	83 ec 0c             	sub    esp,0xc
c001c7c3:	50                   	push   eax
c001c7c4:	e8 fa d1 fe ff       	call   c00099c3 <malloc>
c001c7c9:	83 c4 10             	add    esp,0x10
c001c7cc:	89 c2                	mov    edx,eax
c001c7ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c7d5:	90                   	nop
c001c7d6:	83 c4 0c             	add    esp,0xc
c001c7d9:	c3                   	ret    
c001c7da:	66 90                	xchg   ax,ax

c001c7dc <SoundPort::~SoundPort()>:
c001c7dc:	83 ec 0c             	sub    esp,0xc
c001c7df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c7e6:	85 c0                	test   eax,eax
c001c7e8:	74 1e                	je     c001c808 <SoundPort::~SoundPort()+0x2c>
c001c7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ee:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c7f1:	83 ec 0c             	sub    esp,0xc
c001c7f4:	50                   	push   eax
c001c7f5:	e8 d9 d1 fe ff       	call   c00099d3 <free>
c001c7fa:	83 c4 10             	add    esp,0x10
c001c7fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c801:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c808:	90                   	nop
c001c809:	83 c4 0c             	add    esp,0xc
c001c80c:	c3                   	ret    
c001c80d:	90                   	nop
c001c80e:	66 90                	xchg   ax,ax

c001c810 <SoundPort::unpause()>:
c001c810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c814:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c818:	c3                   	ret    
c001c819:	90                   	nop
c001c81a:	66 90                	xchg   ax,ax

c001c81c <SoundPort::pause()>:
c001c81c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c820:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c824:	c3                   	ret    
c001c825:	90                   	nop
c001c826:	66 90                	xchg   ax,ax

c001c828 <SoundPort::getBufferUsed()>:
c001c828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c82c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c82f:	c3                   	ret    

c001c830 <SoundPort::getBufferSize()>:
c001c830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c834:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c837:	c3                   	ret    

c001c838 <SoundPort::buffer16(short*, int)>:
c001c838:	55                   	push   ebp
c001c839:	57                   	push   edi
c001c83a:	56                   	push   esi
c001c83b:	53                   	push   ebx
c001c83c:	83 ec 1c             	sub    esp,0x1c
c001c83f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c843:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c847:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c84a:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c84d:	0f 84 85 00 00 00    	je     c001c8d8 <SoundPort::buffer16(short*, int)+0xa0>
c001c853:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c857:	85 c9                	test   ecx,ecx
c001c859:	7e 7d                	jle    c001c8d8 <SoundPort::buffer16(short*, int)+0xa0>
c001c85b:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001c85f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c862:	c1 e1 0f             	shl    ecx,0xf
c001c865:	8d 70 01             	lea    esi,[eax+0x1]
c001c868:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c86b:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c86e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c871:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c874:	74 6e                	je     c001c8e4 <SoundPort::buffer16(short*, int)+0xac>
c001c876:	31 f6                	xor    esi,esi
c001c878:	eb 22                	jmp    c001c89c <SoundPort::buffer16(short*, int)+0x64>
c001c87a:	66 90                	xchg   ax,ax
c001c87c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001c881:	8d 79 01             	lea    edi,[ecx+0x1]
c001c884:	c1 e3 0f             	shl    ebx,0xf
c001c887:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001c88a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001c88d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001c890:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c893:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c896:	74 1c                	je     c001c8b4 <SoundPort::buffer16(short*, int)+0x7c>
c001c898:	89 c6                	mov    esi,eax
c001c89a:	66 90                	xchg   ax,ax
c001c89c:	8d 46 01             	lea    eax,[esi+0x1]
c001c89f:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001c8a3:	75 d7                	jne    c001c87c <SoundPort::buffer16(short*, int)+0x44>
c001c8a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c8a9:	83 c4 1c             	add    esp,0x1c
c001c8ac:	5b                   	pop    ebx
c001c8ad:	5e                   	pop    esi
c001c8ae:	5f                   	pop    edi
c001c8af:	5d                   	pop    ebp
c001c8b0:	c3                   	ret    
c001c8b1:	8d 76 00             	lea    esi,[esi+0x0]
c001c8b4:	8d 46 02             	lea    eax,[esi+0x2]
c001c8b7:	90                   	nop
c001c8b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8bc:	83 ec 0c             	sub    esp,0xc
c001c8bf:	68 dc 4d 02 c0       	push   0xc0024ddc
c001c8c4:	e8 fa 01 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001c8c9:	83 c4 10             	add    esp,0x10
c001c8cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8d0:	83 c4 1c             	add    esp,0x1c
c001c8d3:	5b                   	pop    ebx
c001c8d4:	5e                   	pop    esi
c001c8d5:	5f                   	pop    edi
c001c8d6:	5d                   	pop    ebp
c001c8d7:	c3                   	ret    
c001c8d8:	83 c4 1c             	add    esp,0x1c
c001c8db:	31 c0                	xor    eax,eax
c001c8dd:	5b                   	pop    ebx
c001c8de:	5e                   	pop    esi
c001c8df:	5f                   	pop    edi
c001c8e0:	5d                   	pop    ebp
c001c8e1:	c3                   	ret    
c001c8e2:	66 90                	xchg   ax,ax
c001c8e4:	b8 01 00 00 00       	mov    eax,0x1
c001c8e9:	eb cd                	jmp    c001c8b8 <SoundPort::buffer16(short*, int)+0x80>
c001c8eb:	90                   	nop

c001c8ec <SoundPort::buffer32(int*, int)>:
c001c8ec:	55                   	push   ebp
c001c8ed:	57                   	push   edi
c001c8ee:	56                   	push   esi
c001c8ef:	53                   	push   ebx
c001c8f0:	83 ec 1c             	sub    esp,0x1c
c001c8f3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c8f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c8fb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c8fe:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c902:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c906:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c909:	74 79                	je     c001c984 <SoundPort::buffer32(int*, int)+0x98>
c001c90b:	85 c0                	test   eax,eax
c001c90d:	7e 75                	jle    c001c984 <SoundPort::buffer32(int*, int)+0x98>
c001c90f:	8d 71 01             	lea    esi,[ecx+0x1]
c001c912:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c915:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c918:	8b 37                	mov    esi,DWORD PTR [edi]
c001c91a:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c91d:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c920:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c923:	74 6b                	je     c001c990 <SoundPort::buffer32(int*, int)+0xa4>
c001c925:	31 f6                	xor    esi,esi
c001c927:	eb 1f                	jmp    c001c948 <SoundPort::buffer32(int*, int)+0x5c>
c001c929:	8d 76 00             	lea    esi,[esi+0x0]
c001c92c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c92f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c932:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c935:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c938:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c93c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c93f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c942:	74 1c                	je     c001c960 <SoundPort::buffer32(int*, int)+0x74>
c001c944:	89 de                	mov    esi,ebx
c001c946:	66 90                	xchg   ax,ax
c001c948:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c94b:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001c94f:	75 db                	jne    c001c92c <SoundPort::buffer32(int*, int)+0x40>
c001c951:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c955:	83 c4 1c             	add    esp,0x1c
c001c958:	5b                   	pop    ebx
c001c959:	5e                   	pop    esi
c001c95a:	5f                   	pop    edi
c001c95b:	5d                   	pop    ebp
c001c95c:	c3                   	ret    
c001c95d:	8d 76 00             	lea    esi,[esi+0x0]
c001c960:	8d 46 02             	lea    eax,[esi+0x2]
c001c963:	90                   	nop
c001c964:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c968:	83 ec 0c             	sub    esp,0xc
c001c96b:	68 f7 4d 02 c0       	push   0xc0024df7
c001c970:	e8 4e 01 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001c975:	83 c4 10             	add    esp,0x10
c001c978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c97c:	83 c4 1c             	add    esp,0x1c
c001c97f:	5b                   	pop    ebx
c001c980:	5e                   	pop    esi
c001c981:	5f                   	pop    edi
c001c982:	5d                   	pop    ebp
c001c983:	c3                   	ret    
c001c984:	83 c4 1c             	add    esp,0x1c
c001c987:	31 c0                	xor    eax,eax
c001c989:	5b                   	pop    ebx
c001c98a:	5e                   	pop    esi
c001c98b:	5f                   	pop    edi
c001c98c:	5d                   	pop    ebp
c001c98d:	c3                   	ret    
c001c98e:	66 90                	xchg   ax,ax
c001c990:	b8 01 00 00 00       	mov    eax,0x1
c001c995:	eb cd                	jmp    c001c964 <SoundPort::buffer32(int*, int)+0x78>
c001c997:	90                   	nop

c001c998 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c998:	57                   	push   edi
c001c999:	56                   	push   esi
c001c99a:	53                   	push   ebx
c001c99b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c99f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001c9a3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001c9a9:	39 03                	cmp    DWORD PTR [ebx],eax
c001c9ab:	74 13                	je     c001c9c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001c9ad:	83 ec 0c             	sub    esp,0xc
c001c9b0:	68 4c 4e 02 c0       	push   0xc0024e4c
c001c9b5:	e8 cb 79 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001c9ba:	83 c4 10             	add    esp,0x10
c001c9bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c9c0:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001c9c6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c9c9:	74 11                	je     c001c9dc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001c9cb:	83 ec 0c             	sub    esp,0xc
c001c9ce:	68 12 4e 02 c0       	push   0xc0024e12
c001c9d3:	e8 ad 79 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001c9d8:	83 c4 10             	add    esp,0x10
c001c9db:	90                   	nop
c001c9dc:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001c9e2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c9e5:	74 11                	je     c001c9f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001c9e7:	83 ec 0c             	sub    esp,0xc
c001c9ea:	68 12 4e 02 c0       	push   0xc0024e12
c001c9ef:	e8 91 79 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001c9f4:	83 c4 10             	add    esp,0x10
c001c9f7:	90                   	nop
c001c9f8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c9fb:	89 c6                	mov    esi,eax
c001c9fd:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001ca01:	7e 05                	jle    c001ca08 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001ca03:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ca07:	90                   	nop
c001ca08:	85 f6                	test   esi,esi
c001ca0a:	7e 30                	jle    c001ca3c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001ca0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ca10:	8d 3c 36             	lea    edi,[esi+esi*1]
c001ca13:	31 c9                	xor    ecx,ecx
c001ca15:	01 d7                	add    edi,edx
c001ca17:	90                   	nop
c001ca18:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001ca1b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001ca1e:	85 c0                	test   eax,eax
c001ca20:	79 06                	jns    c001ca28 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001ca22:	05 ff 7f 00 00       	add    eax,0x7fff
c001ca27:	90                   	nop
c001ca28:	c1 f8 0f             	sar    eax,0xf
c001ca2b:	83 c1 04             	add    ecx,0x4
c001ca2e:	66 01 02             	add    WORD PTR [edx],ax
c001ca31:	83 c2 02             	add    edx,0x2
c001ca34:	39 d7                	cmp    edi,edx
c001ca36:	75 e0                	jne    c001ca18 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001ca38:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ca3b:	90                   	nop
c001ca3c:	56                   	push   esi
c001ca3d:	89 c2                	mov    edx,eax
c001ca3f:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001ca46:	29 f2                	sub    edx,esi
c001ca48:	52                   	push   edx
c001ca49:	50                   	push   eax
c001ca4a:	68 6c 4e 02 c0       	push   0xc0024e6c
c001ca4f:	e8 6f 00 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001ca54:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001ca57:	50                   	push   eax
c001ca58:	01 f8                	add    eax,edi
c001ca5a:	50                   	push   eax
c001ca5b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ca5e:	29 f0                	sub    eax,esi
c001ca60:	c1 e0 02             	shl    eax,0x2
c001ca63:	50                   	push   eax
c001ca64:	68 9c 4e 02 c0       	push   0xc0024e9c
c001ca69:	e8 55 00 ff ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001ca6e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ca71:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ca74:	83 c4 1c             	add    esp,0x1c
c001ca77:	01 d7                	add    edi,edx
c001ca79:	29 f0                	sub    eax,esi
c001ca7b:	c1 e0 02             	shl    eax,0x2
c001ca7e:	50                   	push   eax
c001ca7f:	57                   	push   edi
c001ca80:	52                   	push   edx
c001ca81:	e8 36 3b fe ff       	call   c00005bc <memmove>
c001ca86:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001ca89:	83 c4 10             	add    esp,0x10
c001ca8c:	89 f0                	mov    eax,esi
c001ca8e:	5b                   	pop    ebx
c001ca8f:	5e                   	pop    esi
c001ca90:	5f                   	pop    edi
c001ca91:	c3                   	ret    
c001ca92:	66 90                	xchg   ax,ax

c001ca94 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ca94:	57                   	push   edi
c001ca95:	56                   	push   esi
c001ca96:	53                   	push   ebx
c001ca97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ca9b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ca9f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001caa3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001caa9:	39 06                	cmp    DWORD PTR [esi],eax
c001caab:	74 13                	je     c001cac0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001caad:	83 ec 0c             	sub    esp,0xc
c001cab0:	68 c0 4e 02 c0       	push   0xc0024ec0
c001cab5:	e8 cb 78 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001caba:	83 c4 10             	add    esp,0x10
c001cabd:	8d 76 00             	lea    esi,[esi+0x0]
c001cac0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001cac6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001cac9:	74 11                	je     c001cadc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001cacb:	83 ec 0c             	sub    esp,0xc
c001cace:	68 2e 4e 02 c0       	push   0xc0024e2e
c001cad3:	e8 ad 78 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001cad8:	83 c4 10             	add    esp,0x10
c001cadb:	90                   	nop
c001cadc:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001cae2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001cae5:	74 11                	je     c001caf8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001cae7:	83 ec 0c             	sub    esp,0xc
c001caea:	68 2e 4e 02 c0       	push   0xc0024e2e
c001caef:	e8 91 78 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001caf4:	83 c4 10             	add    esp,0x10
c001caf7:	90                   	nop
c001caf8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001cafb:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001caff:	7e 07                	jle    c001cb08 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001cb01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cb05:	8d 76 00             	lea    esi,[esi+0x0]
c001cb08:	85 ff                	test   edi,edi
c001cb0a:	7e 1c                	jle    c001cb28 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001cb0c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001cb13:	31 c0                	xor    eax,eax
c001cb15:	8d 76 00             	lea    esi,[esi+0x0]
c001cb18:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cb1b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001cb1e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001cb21:	83 c0 04             	add    eax,0x4
c001cb24:	39 c1                	cmp    ecx,eax
c001cb26:	75 f0                	jne    c001cb18 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001cb28:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cb2b:	50                   	push   eax
c001cb2c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cb2f:	29 f8                	sub    eax,edi
c001cb31:	c1 e0 02             	shl    eax,0x2
c001cb34:	50                   	push   eax
c001cb35:	8d 04 ba             	lea    eax,[edx+edi*4]
c001cb38:	50                   	push   eax
c001cb39:	52                   	push   edx
c001cb3a:	e8 7d 3a fe ff       	call   c00005bc <memmove>
c001cb3f:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001cb42:	83 c4 10             	add    esp,0x10
c001cb45:	89 f8                	mov    eax,edi
c001cb47:	5b                   	pop    ebx
c001cb48:	5e                   	pop    esi
c001cb49:	5f                   	pop    edi
c001cb4a:	c3                   	ret    
c001cb4b:	90                   	nop

c001cb4c <PCI::open(int, int, void*)>:
c001cb4c:	83 ec 18             	sub    esp,0x18
c001cb4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cb57:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001cb5d:	8b 10                	mov    edx,DWORD PTR [eax]
c001cb5f:	50                   	push   eax
c001cb60:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001cb63:	31 c0                	xor    eax,eax
c001cb65:	83 c4 1c             	add    esp,0x1c
c001cb68:	c3                   	ret    
c001cb69:	90                   	nop

c001cb6a <PCI::close(int, int, void*)>:
c001cb6a:	31 c0                	xor    eax,eax
c001cb6c:	c3                   	ret    
c001cb6d:	90                   	nop

c001cb6e <PCI::PCI()>:
c001cb6e:	83 ec 0c             	sub    esp,0xc
c001cb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb75:	83 ec 08             	sub    esp,0x8
c001cb78:	68 df 4e 02 c0       	push   0xc0024edf
c001cb7d:	50                   	push   eax
c001cb7e:	e8 ed 0b ff ff       	call   c000d770 <Bus::Bus(char const*)>
c001cb83:	83 c4 10             	add    esp,0x10
c001cb86:	ba c8 4f 02 c0       	mov    edx,0xc0024fc8
c001cb8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb8f:	89 10                	mov    DWORD PTR [eax],edx
c001cb91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb95:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001cb9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba3:	a3 60 83 02 c0       	mov    ds:0xc0028360,eax
c001cba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cbb2:	0f b6 d0             	movzx  edx,al
c001cbb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb9:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001cbc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbc4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cbca:	0f b6 d0             	movzx  edx,al
c001cbcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbd1:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001cbd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbda:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cbe0:	8d 50 01             	lea    edx,[eax+0x1]
c001cbe3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cbe7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001cbed:	0f b6 d0             	movzx  edx,al
c001cbf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001cbf8:	83 c9 c0             	or     ecx,0xffffffc0
c001cbfb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001cbff:	90                   	nop
c001cc00:	83 c4 0c             	add    esp,0xc
c001cc03:	c3                   	ret    

c001cc04 <PCI::readBAR8(unsigned int, int)>:
c001cc04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc0c:	f6 c2 01             	test   dl,0x1
c001cc0f:	74 07                	je     c001cc18 <PCI::readBAR8(unsigned int, int)+0x14>
c001cc11:	83 e2 fc             	and    edx,0xfffffffc
c001cc14:	01 c2                	add    edx,eax
c001cc16:	ec                   	in     al,dx
c001cc17:	c3                   	ret    
c001cc18:	83 e2 f0             	and    edx,0xfffffff0
c001cc1b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001cc1e:	c3                   	ret    
c001cc1f:	90                   	nop

c001cc20 <PCI::readBAR16(unsigned int, int)>:
c001cc20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc28:	f6 c2 01             	test   dl,0x1
c001cc2b:	74 08                	je     c001cc35 <PCI::readBAR16(unsigned int, int)+0x15>
c001cc2d:	83 e2 fc             	and    edx,0xfffffffc
c001cc30:	01 c2                	add    edx,eax
c001cc32:	66 ed                	in     ax,dx
c001cc34:	c3                   	ret    
c001cc35:	83 e2 f0             	and    edx,0xfffffff0
c001cc38:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001cc3c:	c3                   	ret    
c001cc3d:	90                   	nop

c001cc3e <PCI::readBAR32(unsigned int, int)>:
c001cc3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc46:	f6 c2 01             	test   dl,0x1
c001cc49:	74 07                	je     c001cc52 <PCI::readBAR32(unsigned int, int)+0x14>
c001cc4b:	83 e2 fc             	and    edx,0xfffffffc
c001cc4e:	01 c2                	add    edx,eax
c001cc50:	ed                   	in     eax,dx
c001cc51:	c3                   	ret    
c001cc52:	83 e2 f0             	and    edx,0xfffffff0
c001cc55:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001cc58:	c3                   	ret    
c001cc59:	90                   	nop

c001cc5a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001cc5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc62:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc66:	f6 c2 01             	test   dl,0x1
c001cc69:	74 07                	je     c001cc72 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001cc6b:	83 e2 fc             	and    edx,0xfffffffc
c001cc6e:	01 ca                	add    edx,ecx
c001cc70:	ee                   	out    dx,al
c001cc71:	c3                   	ret    
c001cc72:	83 e2 f0             	and    edx,0xfffffff0
c001cc75:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001cc78:	c3                   	ret    
c001cc79:	90                   	nop

c001cc7a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001cc7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc82:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc86:	f6 c2 01             	test   dl,0x1
c001cc89:	74 08                	je     c001cc93 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001cc8b:	83 e2 fc             	and    edx,0xfffffffc
c001cc8e:	01 ca                	add    edx,ecx
c001cc90:	66 ef                	out    dx,ax
c001cc92:	c3                   	ret    
c001cc93:	83 e2 f0             	and    edx,0xfffffff0
c001cc96:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001cc9a:	c3                   	ret    
c001cc9b:	90                   	nop

c001cc9c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001cc9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cca0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cca4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cca8:	f6 c2 01             	test   dl,0x1
c001ccab:	74 07                	je     c001ccb4 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001ccad:	83 e2 fc             	and    edx,0xfffffffc
c001ccb0:	01 ca                	add    edx,ecx
c001ccb2:	ef                   	out    dx,eax
c001ccb3:	c3                   	ret    
c001ccb4:	83 e2 f0             	and    edx,0xfffffff0
c001ccb7:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ccba:	c3                   	ret    
c001ccbb:	90                   	nop

c001ccbc <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ccbc:	55                   	push   ebp
c001ccbd:	57                   	push   edi
c001ccbe:	56                   	push   esi
c001ccbf:	53                   	push   ebx
c001ccc0:	83 ec 0c             	sub    esp,0xc
c001ccc3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ccc7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001cccb:	89 f0                	mov    eax,esi
c001cccd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ccd1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ccd5:	3c 07                	cmp    al,0x7
c001ccd7:	76 10                	jbe    c001cce9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ccd9:	83 ec 0c             	sub    esp,0xc
c001ccdc:	68 e7 4e 02 c0       	push   0xc0024ee7
c001cce1:	e8 9f 76 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001cce6:	83 c4 10             	add    esp,0x10
c001cce9:	80 fb 0f             	cmp    bl,0xf
c001ccec:	76 10                	jbe    c001ccfe <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001ccee:	83 ec 0c             	sub    esp,0xc
c001ccf1:	68 17 4f 02 c0       	push   0xc0024f17
c001ccf6:	e8 8a 76 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001ccfb:	83 c4 10             	add    esp,0x10
c001ccfe:	8d 04 36             	lea    eax,[esi+esi*1]
c001cd01:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cd06:	83 c8 f0             	or     eax,0xfffffff0
c001cd09:	ee                   	out    dx,al
c001cd0a:	ba fa 0c 00 00       	mov    edx,0xcfa
c001cd0f:	89 e8                	mov    eax,ebp
c001cd11:	ee                   	out    dx,al
c001cd12:	83 c4 0c             	add    esp,0xc
c001cd15:	89 d8                	mov    eax,ebx
c001cd17:	66 81 e7 fc 00       	and    di,0xfc
c001cd1c:	5b                   	pop    ebx
c001cd1d:	c1 e0 08             	shl    eax,0x8
c001cd20:	5e                   	pop    esi
c001cd21:	09 f8                	or     eax,edi
c001cd23:	5f                   	pop    edi
c001cd24:	66 0d 00 c0          	or     ax,0xc000
c001cd28:	5d                   	pop    ebp
c001cd29:	c3                   	ret    

c001cd2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cd2a:	57                   	push   edi
c001cd2b:	56                   	push   esi
c001cd2c:	53                   	push   ebx
c001cd2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd35:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001cd3b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cd3f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cd43:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cd47:	83 ff 01             	cmp    edi,0x1
c001cd4a:	75 3e                	jne    c001cd8a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001cd4c:	89 de                	mov    esi,ebx
c001cd4e:	0f b6 c0             	movzx  eax,al
c001cd51:	81 e6 fc 00 00 00    	and    esi,0xfc
c001cd57:	c1 e0 10             	shl    eax,0x10
c001cd5a:	0f b6 c9             	movzx  ecx,cl
c001cd5d:	09 f0                	or     eax,esi
c001cd5f:	c1 e1 08             	shl    ecx,0x8
c001cd62:	0f b6 d2             	movzx  edx,dl
c001cd65:	09 c8                	or     eax,ecx
c001cd67:	c1 e2 0b             	shl    edx,0xb
c001cd6a:	09 d0                	or     eax,edx
c001cd6c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cd71:	0d 00 00 00 80       	or     eax,0x80000000
c001cd76:	ef                   	out    dx,eax
c001cd77:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cd7c:	ed                   	in     eax,dx
c001cd7d:	83 e3 02             	and    ebx,0x2
c001cd80:	0f b6 cb             	movzx  ecx,bl
c001cd83:	c1 e1 03             	shl    ecx,0x3
c001cd86:	d3 e8                	shr    eax,cl
c001cd88:	eb 43                	jmp    c001cdcd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cd8a:	83 ff 02             	cmp    edi,0x2
c001cd8d:	75 2c                	jne    c001cdbb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001cd8f:	83 ec 0c             	sub    esp,0xc
c001cd92:	0f b6 c9             	movzx  ecx,cl
c001cd95:	0f b6 d2             	movzx  edx,dl
c001cd98:	0f b6 fb             	movzx  edi,bl
c001cd9b:	0f b6 c0             	movzx  eax,al
c001cd9e:	57                   	push   edi
c001cd9f:	51                   	push   ecx
c001cda0:	52                   	push   edx
c001cda1:	50                   	push   eax
c001cda2:	56                   	push   esi
c001cda3:	e8 14 ff ff ff       	call   c001ccbc <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cda8:	89 c2                	mov    edx,eax
c001cdaa:	ed                   	in     eax,dx
c001cdab:	83 e3 02             	and    ebx,0x2
c001cdae:	83 c4 20             	add    esp,0x20
c001cdb1:	0f b6 cb             	movzx  ecx,bl
c001cdb4:	c1 e1 03             	shl    ecx,0x3
c001cdb7:	d3 e8                	shr    eax,cl
c001cdb9:	eb 12                	jmp    c001cdcd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cdbb:	83 ec 0c             	sub    esp,0xc
c001cdbe:	68 47 4f 02 c0       	push   0xc0024f47
c001cdc3:	e8 bd 75 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001cdc8:	83 c4 10             	add    esp,0x10
c001cdcb:	31 c0                	xor    eax,eax
c001cdcd:	5b                   	pop    ebx
c001cdce:	5e                   	pop    esi
c001cdcf:	5f                   	pop    edi
c001cdd0:	c3                   	ret    
c001cdd1:	90                   	nop

c001cdd2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001cdd2:	83 ec 18             	sub    esp,0x18
c001cdd5:	6a 00                	push   0x0
c001cdd7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cddc:	50                   	push   eax
c001cddd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cde2:	50                   	push   eax
c001cde3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cde8:	50                   	push   eax
c001cde9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cded:	e8 38 ff ff ff       	call   c001cd2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdf2:	83 c4 2c             	add    esp,0x2c
c001cdf5:	c3                   	ret    

c001cdf6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001cdf6:	83 ec 18             	sub    esp,0x18
c001cdf9:	6a 0e                	push   0xe
c001cdfb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce00:	50                   	push   eax
c001ce01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce06:	50                   	push   eax
c001ce07:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce0c:	50                   	push   eax
c001ce0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce11:	e8 14 ff ff ff       	call   c001cd2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce16:	83 c4 2c             	add    esp,0x2c
c001ce19:	0f b6 c0             	movzx  eax,al
c001ce1c:	c3                   	ret    
c001ce1d:	90                   	nop

c001ce1e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001ce1e:	55                   	push   ebp
c001ce1f:	57                   	push   edi
c001ce20:	56                   	push   esi
c001ce21:	53                   	push   ebx
c001ce22:	83 ec 18             	sub    esp,0x18
c001ce25:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001ce2a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001ce2f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001ce34:	6a 0a                	push   0xa
c001ce36:	56                   	push   esi
c001ce37:	55                   	push   ebp
c001ce38:	57                   	push   edi
c001ce39:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce3d:	e8 e8 fe ff ff       	call   c001cd2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce42:	83 c4 14             	add    esp,0x14
c001ce45:	89 c3                	mov    ebx,eax
c001ce47:	6a 0a                	push   0xa
c001ce49:	0f b6 db             	movzx  ebx,bl
c001ce4c:	56                   	push   esi
c001ce4d:	55                   	push   ebp
c001ce4e:	57                   	push   edi
c001ce4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce53:	e8 d2 fe ff ff       	call   c001cd2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce58:	83 c4 2c             	add    esp,0x2c
c001ce5b:	25 00 ff 00 00       	and    eax,0xff00
c001ce60:	09 d8                	or     eax,ebx
c001ce62:	5b                   	pop    ebx
c001ce63:	5e                   	pop    esi
c001ce64:	5f                   	pop    edi
c001ce65:	5d                   	pop    ebp
c001ce66:	c3                   	ret    
c001ce67:	90                   	nop

c001ce68 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001ce68:	83 ec 18             	sub    esp,0x18
c001ce6b:	6a 08                	push   0x8
c001ce6d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce72:	50                   	push   eax
c001ce73:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce78:	50                   	push   eax
c001ce79:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce7e:	50                   	push   eax
c001ce7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce83:	e8 a2 fe ff ff       	call   c001cd2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce88:	83 c4 2c             	add    esp,0x2c
c001ce8b:	0f b6 c4             	movzx  eax,ah
c001ce8e:	c3                   	ret    
c001ce8f:	90                   	nop

c001ce90 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001ce90:	83 ec 18             	sub    esp,0x18
c001ce93:	6a 08                	push   0x8
c001ce95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce9a:	50                   	push   eax
c001ce9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cea0:	50                   	push   eax
c001cea1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cea6:	50                   	push   eax
c001cea7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ceab:	e8 7a fe ff ff       	call   c001cd2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ceb0:	83 c4 2c             	add    esp,0x2c
c001ceb3:	c3                   	ret    

c001ceb4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001ceb4:	83 ec 18             	sub    esp,0x18
c001ceb7:	6a 3c                	push   0x3c
c001ceb9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cebe:	50                   	push   eax
c001cebf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cec4:	50                   	push   eax
c001cec5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ceca:	50                   	push   eax
c001cecb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cecf:	e8 56 fe ff ff       	call   c001cd2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ced4:	83 c4 2c             	add    esp,0x2c
c001ced7:	c3                   	ret    

c001ced8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001ced8:	83 ec 18             	sub    esp,0x18
c001cedb:	6a 18                	push   0x18
c001cedd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cee2:	50                   	push   eax
c001cee3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cee8:	50                   	push   eax
c001cee9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ceee:	50                   	push   eax
c001ceef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cef3:	e8 32 fe ff ff       	call   c001cd2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cef8:	83 c4 2c             	add    esp,0x2c
c001cefb:	0f b6 c4             	movzx  eax,ah
c001cefe:	c3                   	ret    
c001ceff:	90                   	nop

c001cf00 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cf00:	55                   	push   ebp
c001cf01:	57                   	push   edi
c001cf02:	56                   	push   esi
c001cf03:	53                   	push   ebx
c001cf04:	83 ec 28             	sub    esp,0x28
c001cf07:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cf0b:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001cf10:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001cf15:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001cf1a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001cf21:	8d 43 12             	lea    eax,[ebx+0x12]
c001cf24:	83 c3 10             	add    ebx,0x10
c001cf27:	0f b6 c0             	movzx  eax,al
c001cf2a:	0f b6 db             	movzx  ebx,bl
c001cf2d:	50                   	push   eax
c001cf2e:	51                   	push   ecx
c001cf2f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001cf33:	57                   	push   edi
c001cf34:	55                   	push   ebp
c001cf35:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cf39:	e8 ec fd ff ff       	call   c001cd2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cf3e:	83 c4 14             	add    esp,0x14
c001cf41:	89 c6                	mov    esi,eax
c001cf43:	53                   	push   ebx
c001cf44:	c1 e6 10             	shl    esi,0x10
c001cf47:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf4b:	51                   	push   ecx
c001cf4c:	57                   	push   edi
c001cf4d:	55                   	push   ebp
c001cf4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cf52:	e8 d3 fd ff ff       	call   c001cd2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cf57:	83 c4 3c             	add    esp,0x3c
c001cf5a:	0f b7 c0             	movzx  eax,ax
c001cf5d:	5b                   	pop    ebx
c001cf5e:	09 f0                	or     eax,esi
c001cf60:	5e                   	pop    esi
c001cf61:	5f                   	pop    edi
c001cf62:	5d                   	pop    ebp
c001cf63:	c3                   	ret    

c001cf64 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001cf64:	55                   	push   ebp
c001cf65:	57                   	push   edi
c001cf66:	56                   	push   esi
c001cf67:	53                   	push   ebx
c001cf68:	83 ec 0c             	sub    esp,0xc
c001cf6b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cf6f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001cf73:	89 f5                	mov    ebp,esi
c001cf75:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001cf7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf7f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cf83:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cf87:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cf8b:	83 f9 01             	cmp    ecx,0x1
c001cf8e:	75 5d                	jne    c001cfed <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001cf90:	0f b6 c8             	movzx  ecx,al
c001cf93:	0f b6 d2             	movzx  edx,dl
c001cf96:	c1 e1 10             	shl    ecx,0x10
c001cf99:	c1 e2 0b             	shl    edx,0xb
c001cf9c:	89 f0                	mov    eax,esi
c001cf9e:	25 fc 00 00 00       	and    eax,0xfc
c001cfa3:	09 c1                	or     ecx,eax
c001cfa5:	89 e8                	mov    eax,ebp
c001cfa7:	0f b6 c0             	movzx  eax,al
c001cfaa:	c1 e0 08             	shl    eax,0x8
c001cfad:	09 c1                	or     ecx,eax
c001cfaf:	09 d1                	or     ecx,edx
c001cfb1:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cfb6:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001cfbc:	89 c8                	mov    eax,ecx
c001cfbe:	ef                   	out    dx,eax
c001cfbf:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cfc4:	ed                   	in     eax,dx
c001cfc5:	0f b7 db             	movzx  ebx,bx
c001cfc8:	83 e6 02             	and    esi,0x2
c001cfcb:	74 0a                	je     c001cfd7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001cfcd:	0f b7 d0             	movzx  edx,ax
c001cfd0:	c1 e3 10             	shl    ebx,0x10
c001cfd3:	09 d3                	or     ebx,edx
c001cfd5:	eb 05                	jmp    c001cfdc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001cfd7:	66 31 c0             	xor    ax,ax
c001cfda:	09 c3                	or     ebx,eax
c001cfdc:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cfe1:	89 c8                	mov    eax,ecx
c001cfe3:	ef                   	out    dx,eax
c001cfe4:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cfe9:	89 d8                	mov    eax,ebx
c001cfeb:	eb 41                	jmp    c001d02e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cfed:	83 f9 02             	cmp    ecx,0x2
c001cff0:	75 45                	jne    c001d037 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001cff2:	83 ec 0c             	sub    esp,0xc
c001cff5:	0f b6 d2             	movzx  edx,dl
c001cff8:	89 f1                	mov    ecx,esi
c001cffa:	0f b6 c0             	movzx  eax,al
c001cffd:	0f b6 f1             	movzx  esi,cl
c001d000:	89 e9                	mov    ecx,ebp
c001d002:	56                   	push   esi
c001d003:	0f b6 c9             	movzx  ecx,cl
c001d006:	51                   	push   ecx
c001d007:	52                   	push   edx
c001d008:	50                   	push   eax
c001d009:	57                   	push   edi
c001d00a:	e8 ad fc ff ff       	call   c001ccbc <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d00f:	89 c2                	mov    edx,eax
c001d011:	ed                   	in     eax,dx
c001d012:	83 c4 20             	add    esp,0x20
c001d015:	0f b7 db             	movzx  ebx,bx
c001d018:	f6 c2 02             	test   dl,0x2
c001d01b:	74 0c                	je     c001d029 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001d01d:	0f b7 c8             	movzx  ecx,ax
c001d020:	89 d8                	mov    eax,ebx
c001d022:	c1 e0 10             	shl    eax,0x10
c001d025:	09 c8                	or     eax,ecx
c001d027:	eb 05                	jmp    c001d02e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d029:	66 31 c0             	xor    ax,ax
c001d02c:	09 d8                	or     eax,ebx
c001d02e:	ef                   	out    dx,eax
c001d02f:	83 c4 0c             	add    esp,0xc
c001d032:	5b                   	pop    ebx
c001d033:	5e                   	pop    esi
c001d034:	5f                   	pop    edi
c001d035:	5d                   	pop    ebp
c001d036:	c3                   	ret    
c001d037:	c7 44 24 20 47 4f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024f47
c001d03f:	83 c4 0c             	add    esp,0xc
c001d042:	5b                   	pop    ebx
c001d043:	5e                   	pop    esi
c001d044:	5f                   	pop    edi
c001d045:	5d                   	pop    ebp
c001d046:	e9 3a 73 ff ff       	jmp    c0014385 <Krnl::panic(char const*)>
c001d04b:	90                   	nop

c001d04c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d04c:	55                   	push   ebp
c001d04d:	57                   	push   edi
c001d04e:	56                   	push   esi
c001d04f:	53                   	push   ebx
c001d050:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d056:	80 3d 6c 83 02 c0 00 	cmp    BYTE PTR ds:0xc002836c,0x0
c001d05d:	0f 85 84 00 00 00    	jne    c001d0e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001d063:	83 ec 0c             	sub    esp,0xc
c001d066:	68 14 01 00 00       	push   0x114
c001d06b:	e8 53 c9 fe ff       	call   c00099c3 <malloc>
c001d070:	83 c4 0c             	add    esp,0xc
c001d073:	89 c3                	mov    ebx,eax
c001d075:	ff 35 70 79 02 c0    	push   DWORD PTR ds:0xc0027970
c001d07b:	68 4d 4f 02 c0       	push   0xc0024f4d
c001d080:	50                   	push   eax
c001d081:	e8 a8 ff fe ff       	call   c000d02e <File::File(char const*, Process*)>
c001d086:	5a                   	pop    edx
c001d087:	59                   	pop    ecx
c001d088:	6a 01                	push   0x1
c001d08a:	53                   	push   ebx
c001d08b:	e8 02 00 ff ff       	call   c000d092 <File::open(FileOpenMode)>
c001d090:	83 c4 0c             	add    esp,0xc
c001d093:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d097:	50                   	push   eax
c001d098:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d09c:	50                   	push   eax
c001d09d:	53                   	push   ebx
c001d09e:	e8 9b 02 ff ff       	call   c000d33e <File::stat(unsigned long long*, bool*)>
c001d0a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d0a7:	40                   	inc    eax
c001d0a8:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0ab:	e8 13 c9 fe ff       	call   c00099c3 <malloc>
c001d0b0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d0b4:	a3 68 83 02 c0       	mov    ds:0xc0028368,eax
c001d0b9:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d0bd:	5e                   	pop    esi
c001d0be:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d0c0:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d0c4:	51                   	push   ecx
c001d0c5:	50                   	push   eax
c001d0c6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d0ca:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d0ce:	53                   	push   ebx
c001d0cf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d0d2:	83 c4 14             	add    esp,0x14
c001d0d5:	53                   	push   ebx
c001d0d6:	e8 15 00 ff ff       	call   c000d0f0 <File::close()>
c001d0db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d0df:	83 c4 10             	add    esp,0x10
c001d0e2:	a3 64 83 02 c0       	mov    ds:0xc0028364,eax
c001d0e7:	a1 64 83 02 c0       	mov    eax,ds:0xc0028364
c001d0ec:	8b 15 68 83 02 c0    	mov    edx,DWORD PTR ds:0xc0028368
c001d0f2:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0f5:	31 ff                	xor    edi,edi
c001d0f7:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c001d0ff:	31 f6                	xor    esi,esi
c001d101:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001d106:	31 db                	xor    ebx,ebx
c001d108:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001d110:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001d115:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c001d11c:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001d120:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001d127:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d12b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d12e:	0f 8e 6b 01 00 00    	jle    c001d29f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c001d134:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d137:	d4 40                	aam    0x40
c001d139:	d5 39                	aad    0x39
c001d13b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d13f:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c001d143:	d4 40                	aam    0x40
c001d145:	d5 39                	aad    0x39
c001d147:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d14b:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c001d14f:	d4 40                	aam    0x40
c001d151:	d5 39                	aad    0x39
c001d153:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d157:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001d15b:	d4 40                	aam    0x40
c001d15d:	d5 39                	aad    0x39
c001d15f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d163:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001d167:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d16b:	3c 56                	cmp    al,0x56
c001d16d:	74 45                	je     c001d1b4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c001d16f:	d4 40                	aam    0x40
c001d171:	d5 39                	aad    0x39
c001d173:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d176:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001d17a:	0f b6 c9             	movzx  ecx,cl
c001d17d:	c1 e1 04             	shl    ecx,0x4
c001d180:	d4 40                	aam    0x40
c001d182:	d5 39                	aad    0x39
c001d184:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d187:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001d18b:	0f b6 db             	movzx  ebx,bl
c001d18e:	09 cb                	or     ebx,ecx
c001d190:	c1 e3 04             	shl    ebx,0x4
c001d193:	d4 40                	aam    0x40
c001d195:	d5 39                	aad    0x39
c001d197:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d19a:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001d19e:	0f b6 c9             	movzx  ecx,cl
c001d1a1:	09 cb                	or     ebx,ecx
c001d1a3:	c1 e3 04             	shl    ebx,0x4
c001d1a6:	89 d9                	mov    ecx,ebx
c001d1a8:	d4 40                	aam    0x40
c001d1aa:	d5 39                	aad    0x39
c001d1ac:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d1af:	0f b6 db             	movzx  ebx,bl
c001d1b2:	09 cb                	or     ebx,ecx
c001d1b4:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c001d1b8:	80 f9 44             	cmp    cl,0x44
c001d1bb:	74 47                	je     c001d204 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c001d1bd:	88 c8                	mov    al,cl
c001d1bf:	d4 40                	aam    0x40
c001d1c1:	d5 39                	aad    0x39
c001d1c3:	83 e8 30             	sub    eax,0x30
c001d1c6:	0f b6 e8             	movzx  ebp,al
c001d1c9:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c001d1cd:	c1 e5 04             	shl    ebp,0x4
c001d1d0:	d4 40                	aam    0x40
c001d1d2:	d5 39                	aad    0x39
c001d1d4:	83 e8 30             	sub    eax,0x30
c001d1d7:	0f b6 f0             	movzx  esi,al
c001d1da:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c001d1de:	09 ee                	or     esi,ebp
c001d1e0:	c1 e6 04             	shl    esi,0x4
c001d1e3:	d4 40                	aam    0x40
c001d1e5:	d5 39                	aad    0x39
c001d1e7:	83 e8 30             	sub    eax,0x30
c001d1ea:	0f b6 e8             	movzx  ebp,al
c001d1ed:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c001d1f1:	09 ee                	or     esi,ebp
c001d1f3:	c1 e6 04             	shl    esi,0x4
c001d1f6:	89 f5                	mov    ebp,esi
c001d1f8:	d4 40                	aam    0x40
c001d1fa:	d5 39                	aad    0x39
c001d1fc:	83 e8 30             	sub    eax,0x30
c001d1ff:	0f b6 f0             	movzx  esi,al
c001d202:	09 ee                	or     esi,ebp
c001d204:	83 c7 10             	add    edi,0x10
c001d207:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001d20b:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d20e:	3c 0a                	cmp    al,0xa
c001d210:	74 09                	je     c001d21b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c001d212:	45                   	inc    ebp
c001d213:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d216:	75 16                	jne    c001d22e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c001d218:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001d21b:	3c 0a                	cmp    al,0xa
c001d21d:	0f 94 c0             	sete   al
c001d220:	0f b6 c0             	movzx  eax,al
c001d223:	01 c7                	add    edi,eax
c001d225:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001d22a:	75 0c                	jne    c001d238 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c001d22c:	eb 15                	jmp    c001d243 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c001d22e:	47                   	inc    edi
c001d22f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001d232:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001d236:	eb d3                	jmp    c001d20b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c001d238:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001d23d:	0f 85 e8 fe ff ff    	jne    c001d12b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d243:	80 f9 44             	cmp    cl,0x44
c001d246:	74 0b                	je     c001d253 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c001d248:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001d24d:	0f 85 d8 fe ff ff    	jne    c001d12b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d253:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d257:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001d25b:	c1 e1 04             	shl    ecx,0x4
c001d25e:	83 e8 30             	sub    eax,0x30
c001d261:	09 c8                	or     eax,ecx
c001d263:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001d267:	0f 85 be fe ff ff    	jne    c001d12b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d26d:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c001d271:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d275:	c1 e1 04             	shl    ecx,0x4
c001d278:	83 e8 30             	sub    eax,0x30
c001d27b:	09 c8                	or     eax,ecx
c001d27d:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001d281:	0f 85 a4 fe ff ff    	jne    c001d12b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d287:	50                   	push   eax
c001d288:	50                   	push   eax
c001d289:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d28d:	50                   	push   eax
c001d28e:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d295:	e8 a6 34 fe ff       	call   c0000740 <strcpy>
c001d29a:	83 c4 10             	add    esp,0x10
c001d29d:	eb 15                	jmp    c001d2b4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001d29f:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d2a6:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d2b1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d2b4:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d2bb:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d2c1:	5b                   	pop    ebx
c001d2c2:	5e                   	pop    esi
c001d2c3:	5f                   	pop    edi
c001d2c4:	5d                   	pop    ebp
c001d2c5:	c3                   	ret    

c001d2c6 <PCI::checkBus(unsigned char)>:
c001d2c6:	56                   	push   esi
c001d2c7:	53                   	push   ebx
c001d2c8:	31 db                	xor    ebx,ebx
c001d2ca:	51                   	push   ecx
c001d2cb:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d2d0:	52                   	push   edx
c001d2d1:	53                   	push   ebx
c001d2d2:	43                   	inc    ebx
c001d2d3:	56                   	push   esi
c001d2d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2d8:	e8 37 03 00 00       	call   c001d614 <PCI::checkDevice(unsigned char, unsigned char)>
c001d2dd:	83 c4 10             	add    esp,0x10
c001d2e0:	83 fb 20             	cmp    ebx,0x20
c001d2e3:	75 eb                	jne    c001d2d0 <PCI::checkBus(unsigned char)+0xa>
c001d2e5:	58                   	pop    eax
c001d2e6:	5b                   	pop    ebx
c001d2e7:	5e                   	pop    esi
c001d2e8:	c3                   	ret    
c001d2e9:	90                   	nop

c001d2ea <PCI::foundDevice(PCIDeviceInfo)>:
c001d2ea:	55                   	push   ebp
c001d2eb:	57                   	push   edi
c001d2ec:	56                   	push   esi
c001d2ed:	53                   	push   ebx
c001d2ee:	83 ec 1c             	sub    esp,0x1c
c001d2f1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d2f5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d2fb:	0f 84 52 01 00 00    	je     c001d453 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d301:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d305:	66 81 f9 06 04       	cmp    cx,0x406
c001d30a:	75 2c                	jne    c001d338 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001d30c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001d311:	50                   	push   eax
c001d312:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001d317:	50                   	push   eax
c001d318:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001d31d:	50                   	push   eax
c001d31e:	56                   	push   esi
c001d31f:	e8 b4 fb ff ff       	call   c001ced8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d324:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001d328:	0f b6 c0             	movzx  eax,al
c001d32b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d32f:	83 c4 2c             	add    esp,0x2c
c001d332:	5b                   	pop    ebx
c001d333:	5e                   	pop    esi
c001d334:	5f                   	pop    edi
c001d335:	5d                   	pop    ebp
c001d336:	eb 8e                	jmp    c001d2c6 <PCI::checkBus(unsigned char)>
c001d338:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d33c:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001d342:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d346:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d34a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001d34e:	88 d3                	mov    bl,dl
c001d350:	85 c0                	test   eax,eax
c001d352:	74 33                	je     c001d387 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001d354:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d357:	85 d2                	test   edx,edx
c001d359:	74 28                	je     c001d383 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d35b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d361:	31 ef                	xor    edi,ebp
c001d363:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d369:	75 18                	jne    c001d383 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d36b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d36f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001d375:	75 0c                	jne    c001d383 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d377:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001d37d:	0f 84 d0 00 00 00    	je     c001d453 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d383:	8b 00                	mov    eax,DWORD PTR [eax]
c001d385:	eb c9                	jmp    c001d350 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001d387:	66 81 f9 01 06       	cmp    cx,0x601
c001d38c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001d390:	75 19                	jne    c001d3ab <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001d392:	83 ec 0c             	sub    esp,0xc
c001d395:	68 64 01 00 00       	push   0x164
c001d39a:	e8 24 c6 fe ff       	call   c00099c3 <malloc>
c001d39f:	89 c5                	mov    ebp,eax
c001d3a1:	89 04 24             	mov    DWORD PTR [esp],eax
c001d3a4:	e8 7b 0e 00 00       	call   c001e224 <SATABus::SATABus()>
c001d3a9:	eb 1e                	jmp    c001d3c9 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001d3ab:	66 81 f9 01 01       	cmp    cx,0x101
c001d3b0:	75 60                	jne    c001d412 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001d3b2:	83 ec 0c             	sub    esp,0xc
c001d3b5:	68 70 02 00 00       	push   0x270
c001d3ba:	e8 04 c6 fe ff       	call   c00099c3 <malloc>
c001d3bf:	89 c5                	mov    ebp,eax
c001d3c1:	89 04 24             	mov    DWORD PTR [esp],eax
c001d3c4:	e8 0f 03 00 00       	call   c001d6d8 <IDE::IDE()>
c001d3c9:	58                   	pop    eax
c001d3ca:	5a                   	pop    edx
c001d3cb:	55                   	push   ebp
c001d3cc:	56                   	push   esi
c001d3cd:	e8 38 0b ff ff       	call   c000df0a <Device::addChild(Device*)>
c001d3d2:	83 ec 1c             	sub    esp,0x1c
c001d3d5:	b9 09 00 00 00       	mov    ecx,0x9
c001d3da:	fc                   	cld    
c001d3db:	89 e7                	mov    edi,esp
c001d3dd:	89 de                	mov    esi,ebx
c001d3df:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d3e1:	55                   	push   ebp
c001d3e2:	e8 35 0a ff ff       	call   c000de1c <Device::preOpenPCI(PCIDeviceInfo)>
c001d3e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d3ea:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001d3ee:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001d3f6:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001d3fe:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001d406:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d409:	83 c4 4c             	add    esp,0x4c
c001d40c:	5b                   	pop    ebx
c001d40d:	5e                   	pop    esi
c001d40e:	5f                   	pop    edi
c001d40f:	5d                   	pop    ebp
c001d410:	ff e0                	jmp    eax
c001d412:	83 ec 0c             	sub    esp,0xc
c001d415:	68 58 01 00 00       	push   0x158
c001d41a:	e8 a4 c5 fe ff       	call   c00099c3 <malloc>
c001d41f:	89 c5                	mov    ebp,eax
c001d421:	58                   	pop    eax
c001d422:	5a                   	pop    edx
c001d423:	68 66 4f 02 c0       	push   0xc0024f66
c001d428:	55                   	push   ebp
c001d429:	e8 e6 0d ff ff       	call   c000e214 <DriverlessDevice::DriverlessDevice(char const*)>
c001d42e:	59                   	pop    ecx
c001d42f:	5f                   	pop    edi
c001d430:	55                   	push   ebp
c001d431:	56                   	push   esi
c001d432:	e8 d3 0a ff ff       	call   c000df0a <Device::addChild(Device*)>
c001d437:	b9 09 00 00 00       	mov    ecx,0x9
c001d43c:	fc                   	cld    
c001d43d:	89 df                	mov    edi,ebx
c001d43f:	89 de                	mov    esi,ebx
c001d441:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d443:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001d447:	83 c4 2c             	add    esp,0x2c
c001d44a:	5b                   	pop    ebx
c001d44b:	5e                   	pop    esi
c001d44c:	5f                   	pop    edi
c001d44d:	5d                   	pop    ebp
c001d44e:	e9 c9 09 ff ff       	jmp    c000de1c <Device::preOpenPCI(PCIDeviceInfo)>
c001d453:	83 c4 1c             	add    esp,0x1c
c001d456:	5b                   	pop    ebx
c001d457:	5e                   	pop    esi
c001d458:	5f                   	pop    edi
c001d459:	5d                   	pop    ebp
c001d45a:	c3                   	ret    
c001d45b:	90                   	nop

c001d45c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d45c:	55                   	push   ebp
c001d45d:	57                   	push   edi
c001d45e:	56                   	push   esi
c001d45f:	53                   	push   ebx
c001d460:	83 ec 68             	sub    esp,0x68
c001d463:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001d467:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001d46e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d472:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001d479:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c001d47e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d482:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001d489:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001d48e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d492:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c001d497:	6a 0c                	push   0xc
c001d499:	57                   	push   edi
c001d49a:	53                   	push   ebx
c001d49b:	56                   	push   esi
c001d49c:	55                   	push   ebp
c001d49d:	e8 88 f8 ff ff       	call   c001cd2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d4a2:	83 c4 20             	add    esp,0x20
c001d4a5:	57                   	push   edi
c001d4a6:	53                   	push   ebx
c001d4a7:	56                   	push   esi
c001d4a8:	55                   	push   ebp
c001d4a9:	e8 70 f9 ff ff       	call   c001ce1e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d4ae:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c001d4b3:	57                   	push   edi
c001d4b4:	53                   	push   ebx
c001d4b5:	56                   	push   esi
c001d4b6:	55                   	push   ebp
c001d4b7:	e8 f8 f9 ff ff       	call   c001ceb4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d4bc:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d4c0:	83 c4 14             	add    esp,0x14
c001d4c3:	6a 3c                	push   0x3c
c001d4c5:	57                   	push   edi
c001d4c6:	53                   	push   ebx
c001d4c7:	56                   	push   esi
c001d4c8:	55                   	push   ebp
c001d4c9:	e8 5c f8 ff ff       	call   c001cd2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d4ce:	0f b6 c4             	movzx  eax,ah
c001d4d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d4d5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d4d9:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d4dd:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001d4e2:	83 c4 20             	add    esp,0x20
c001d4e5:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d4eb:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001d4f2:	74 7c                	je     c001d570 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d4f4:	31 c0                	xor    eax,eax
c001d4f6:	8b 15 48 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026448
c001d4fc:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d502:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c001d508:	7e 66                	jle    c001d570 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d50a:	8d 14 c2             	lea    edx,[edx+eax*8]
c001d50d:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001d514:	39 cb                	cmp    ebx,ecx
c001d516:	75 55                	jne    c001d56d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d518:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001d51f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001d523:	75 48                	jne    c001d56d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d525:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d529:	83 ec 0c             	sub    esp,0xc
c001d52c:	68 80 4f 02 c0       	push   0xc0024f80
c001d531:	e8 8d f5 fe ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001d536:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d53a:	8b 15 48 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026448
c001d540:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d544:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d54a:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c001d552:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c001d556:	52                   	push   edx
c001d557:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d55b:	53                   	push   ebx
c001d55c:	68 a5 4f 02 c0       	push   0xc0024fa5
c001d561:	e8 5d f5 fe ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001d566:	83 c4 20             	add    esp,0x20
c001d569:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d56d:	40                   	inc    eax
c001d56e:	eb 86                	jmp    c001d4f6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c001d570:	31 d2                	xor    edx,edx
c001d572:	83 ec 0c             	sub    esp,0xc
c001d575:	57                   	push   edi
c001d576:	53                   	push   ebx
c001d577:	56                   	push   esi
c001d578:	52                   	push   edx
c001d579:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d57d:	55                   	push   ebp
c001d57e:	e8 7d f9 ff ff       	call   c001cf00 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d583:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d587:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001d58b:	42                   	inc    edx
c001d58c:	83 c4 20             	add    esp,0x20
c001d58f:	83 fa 06             	cmp    edx,0x6
c001d592:	75 de                	jne    c001d572 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c001d594:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d599:	83 ec 0c             	sub    esp,0xc
c001d59c:	86 e0                	xchg   al,ah
c001d59e:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001d5a3:	6a 02                	push   0x2
c001d5a5:	57                   	push   edi
c001d5a6:	53                   	push   ebx
c001d5a7:	56                   	push   esi
c001d5a8:	55                   	push   ebp
c001d5a9:	e8 7c f7 ff ff       	call   c001cd2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d5ae:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001d5b3:	83 c4 20             	add    esp,0x20
c001d5b6:	57                   	push   edi
c001d5b7:	53                   	push   ebx
c001d5b8:	56                   	push   esi
c001d5b9:	55                   	push   ebp
c001d5ba:	e8 a9 f8 ff ff       	call   c001ce68 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001d5bf:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d5c3:	57                   	push   edi
c001d5c4:	53                   	push   ebx
c001d5c5:	56                   	push   esi
c001d5c6:	55                   	push   ebp
c001d5c7:	e8 06 f8 ff ff       	call   c001cdd2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d5cc:	b9 09 00 00 00       	mov    ecx,0x9
c001d5d1:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001d5d6:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001d5da:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d5de:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001d5e2:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001d5e6:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d5ea:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001d5ee:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d5f2:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001d5f6:	83 ec 0c             	sub    esp,0xc
c001d5f9:	fc                   	cld    
c001d5fa:	89 e7                	mov    edi,esp
c001d5fc:	8d 74 24 58          	lea    esi,[esp+0x58]
c001d600:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d602:	55                   	push   ebp
c001d603:	e8 e2 fc ff ff       	call   c001d2ea <PCI::foundDevice(PCIDeviceInfo)>
c001d608:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d60e:	5b                   	pop    ebx
c001d60f:	5e                   	pop    esi
c001d610:	5f                   	pop    edi
c001d611:	5d                   	pop    ebp
c001d612:	c3                   	ret    
c001d613:	90                   	nop

c001d614 <PCI::checkDevice(unsigned char, unsigned char)>:
c001d614:	55                   	push   ebp
c001d615:	57                   	push   edi
c001d616:	56                   	push   esi
c001d617:	53                   	push   ebx
c001d618:	83 ec 0c             	sub    esp,0xc
c001d61b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d61f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001d624:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001d629:	6a 00                	push   0x0
c001d62b:	56                   	push   esi
c001d62c:	57                   	push   edi
c001d62d:	55                   	push   ebp
c001d62e:	e8 9f f7 ff ff       	call   c001cdd2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d633:	6a 00                	push   0x0
c001d635:	56                   	push   esi
c001d636:	57                   	push   edi
c001d637:	55                   	push   ebp
c001d638:	e8 1f fe ff ff       	call   c001d45c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d63d:	83 c4 20             	add    esp,0x20
c001d640:	6a 00                	push   0x0
c001d642:	56                   	push   esi
c001d643:	57                   	push   edi
c001d644:	55                   	push   ebp
c001d645:	e8 ac f7 ff ff       	call   c001cdf6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d64a:	83 c4 10             	add    esp,0x10
c001d64d:	84 c0                	test   al,al
c001d64f:	79 27                	jns    c001d678 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001d651:	bb 01 00 00 00       	mov    ebx,0x1
c001d656:	53                   	push   ebx
c001d657:	56                   	push   esi
c001d658:	57                   	push   edi
c001d659:	55                   	push   ebp
c001d65a:	e8 73 f7 ff ff       	call   c001cdd2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d65f:	83 c4 10             	add    esp,0x10
c001d662:	66 40                	inc    ax
c001d664:	74 0c                	je     c001d672 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001d666:	53                   	push   ebx
c001d667:	56                   	push   esi
c001d668:	57                   	push   edi
c001d669:	55                   	push   ebp
c001d66a:	e8 ed fd ff ff       	call   c001d45c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d66f:	83 c4 10             	add    esp,0x10
c001d672:	43                   	inc    ebx
c001d673:	83 fb 08             	cmp    ebx,0x8
c001d676:	75 de                	jne    c001d656 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001d678:	83 c4 0c             	add    esp,0xc
c001d67b:	5b                   	pop    ebx
c001d67c:	5e                   	pop    esi
c001d67d:	5f                   	pop    edi
c001d67e:	5d                   	pop    ebp
c001d67f:	c3                   	ret    

c001d680 <PCI::detect()>:
c001d680:	56                   	push   esi
c001d681:	53                   	push   ebx
c001d682:	53                   	push   ebx
c001d683:	31 db                	xor    ebx,ebx
c001d685:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d689:	6a 00                	push   0x0
c001d68b:	6a 00                	push   0x0
c001d68d:	6a 00                	push   0x0
c001d68f:	56                   	push   esi
c001d690:	e8 61 f7 ff ff       	call   c001cdf6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d695:	83 c4 10             	add    esp,0x10
c001d698:	a8 80                	test   al,0x80
c001d69a:	75 21                	jne    c001d6bd <PCI::detect()+0x3d>
c001d69c:	51                   	push   ecx
c001d69d:	51                   	push   ecx
c001d69e:	6a 00                	push   0x0
c001d6a0:	56                   	push   esi
c001d6a1:	e8 20 fc ff ff       	call   c001d2c6 <PCI::checkBus(unsigned char)>
c001d6a6:	83 c4 10             	add    esp,0x10
c001d6a9:	eb 24                	jmp    c001d6cf <PCI::detect()+0x4f>
c001d6ab:	52                   	push   edx
c001d6ac:	52                   	push   edx
c001d6ad:	53                   	push   ebx
c001d6ae:	43                   	inc    ebx
c001d6af:	56                   	push   esi
c001d6b0:	e8 11 fc ff ff       	call   c001d2c6 <PCI::checkBus(unsigned char)>
c001d6b5:	83 c4 10             	add    esp,0x10
c001d6b8:	83 fb 08             	cmp    ebx,0x8
c001d6bb:	74 12                	je     c001d6cf <PCI::detect()+0x4f>
c001d6bd:	53                   	push   ebx
c001d6be:	6a 00                	push   0x0
c001d6c0:	6a 00                	push   0x0
c001d6c2:	56                   	push   esi
c001d6c3:	e8 0a f7 ff ff       	call   c001cdd2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d6c8:	83 c4 10             	add    esp,0x10
c001d6cb:	66 40                	inc    ax
c001d6cd:	74 dc                	je     c001d6ab <PCI::detect()+0x2b>
c001d6cf:	58                   	pop    eax
c001d6d0:	5b                   	pop    ebx
c001d6d1:	5e                   	pop    esi
c001d6d2:	c3                   	ret    
c001d6d3:	90                   	nop

c001d6d4 <IDE::close(int, int, void*)>:
c001d6d4:	83 c8 ff             	or     eax,0xffffffff
c001d6d7:	c3                   	ret    

c001d6d8 <IDE::IDE()>:
c001d6d8:	83 ec 0c             	sub    esp,0xc
c001d6db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6df:	83 ec 08             	sub    esp,0x8
c001d6e2:	68 ec 4f 02 c0       	push   0xc0024fec
c001d6e7:	50                   	push   eax
c001d6e8:	e8 cb 0b ff ff       	call   c000e2b8 <HardDiskController::HardDiskController(char const*)>
c001d6ed:	83 c4 10             	add    esp,0x10
c001d6f0:	ba 7c 50 02 c0       	mov    edx,0xc002507c
c001d6f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6f9:	89 10                	mov    DWORD PTR [eax],edx
c001d6fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6ff:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001d706:	90                   	nop
c001d707:	83 c4 0c             	add    esp,0xc
c001d70a:	c3                   	ret    
c001d70b:	90                   	nop

c001d70c <IDE::prepareInterrupt(unsigned char)>:
c001d70c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d711:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d715:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001d71d:	c3                   	ret    

c001d71e <selectDrive(unsigned char, unsigned char)>:
c001d71e:	c3                   	ret    
c001d71f:	90                   	nop

c001d720 <IDE::getBase(unsigned char)>:
c001d720:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001d725:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d729:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001d731:	c3                   	ret    

c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001d732:	55                   	push   ebp
c001d733:	57                   	push   edi
c001d734:	56                   	push   esi
c001d735:	53                   	push   ebx
c001d736:	83 ec 1c             	sub    esp,0x1c
c001d739:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d73d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d741:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001d744:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d748:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d74c:	80 f9 03             	cmp    cl,0x3
c001d74f:	77 51                	ja     c001d7a2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001d751:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d755:	0f b6 f2             	movzx  esi,dl
c001d758:	0f b6 db             	movzx  ebx,bl
c001d75b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d75e:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001d762:	83 ca 80             	or     edx,0xffffff80
c001d765:	0f b6 d2             	movzx  edx,dl
c001d768:	52                   	push   edx
c001d769:	6a 0c                	push   0xc
c001d76b:	56                   	push   esi
c001d76c:	57                   	push   edi
c001d76d:	e8 c0 ff ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d772:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001d777:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d77b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001d77f:	ee                   	out    dx,al
c001d780:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001d785:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001d789:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001d78d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d791:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d799:	83 c4 2c             	add    esp,0x2c
c001d79c:	5b                   	pop    ebx
c001d79d:	5e                   	pop    esi
c001d79e:	5f                   	pop    edi
c001d79f:	5d                   	pop    ebp
c001d7a0:	eb 90                	jmp    c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7a2:	80 fb 07             	cmp    bl,0x7
c001d7a5:	77 12                	ja     c001d7b9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001d7a7:	0f b6 d2             	movzx  edx,dl
c001d7aa:	0f b6 db             	movzx  ebx,bl
c001d7ad:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001d7b5:	89 da                	mov    edx,ebx
c001d7b7:	eb 2f                	jmp    c001d7e8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d7b9:	80 fb 0d             	cmp    bl,0xd
c001d7bc:	77 13                	ja     c001d7d1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001d7be:	0f b6 d2             	movzx  edx,dl
c001d7c1:	0f b6 db             	movzx  ebx,bl
c001d7c4:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001d7cb:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001d7cf:	eb 17                	jmp    c001d7e8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d7d1:	80 fb 15             	cmp    bl,0x15
c001d7d4:	77 13                	ja     c001d7e9 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d7d6:	0f b6 d2             	movzx  edx,dl
c001d7d9:	0f b6 db             	movzx  ebx,bl
c001d7dc:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001d7e4:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001d7e8:	ee                   	out    dx,al
c001d7e9:	83 c4 1c             	add    esp,0x1c
c001d7ec:	5b                   	pop    ebx
c001d7ed:	5e                   	pop    esi
c001d7ee:	5f                   	pop    edi
c001d7ef:	5d                   	pop    ebp
c001d7f0:	c3                   	ret    
c001d7f1:	90                   	nop

c001d7f2 <IDE::read(unsigned char, unsigned char)>:
c001d7f2:	55                   	push   ebp
c001d7f3:	57                   	push   edi
c001d7f4:	56                   	push   esi
c001d7f5:	53                   	push   ebx
c001d7f6:	83 ec 1c             	sub    esp,0x1c
c001d7f9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d7fd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d801:	8d 43 f8             	lea    eax,[ebx-0x8]
c001d804:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d808:	3c 03                	cmp    al,0x3
c001d80a:	77 43                	ja     c001d84f <IDE::read(unsigned char, unsigned char)+0x5d>
c001d80c:	0f b6 f2             	movzx  esi,dl
c001d80f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d812:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001d816:	83 c8 80             	or     eax,0xffffff80
c001d819:	0f b6 c0             	movzx  eax,al
c001d81c:	50                   	push   eax
c001d81d:	6a 0c                	push   0xc
c001d81f:	56                   	push   esi
c001d820:	57                   	push   edi
c001d821:	e8 0c ff ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d826:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001d82b:	0f b6 c3             	movzx  eax,bl
c001d82e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001d832:	ec                   	in     al,dx
c001d833:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d837:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001d83c:	52                   	push   edx
c001d83d:	6a 0c                	push   0xc
c001d83f:	56                   	push   esi
c001d840:	57                   	push   edi
c001d841:	e8 ec fe ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d846:	83 c4 20             	add    esp,0x20
c001d849:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d84d:	eb 49                	jmp    c001d898 <IDE::read(unsigned char, unsigned char)+0xa6>
c001d84f:	80 fb 07             	cmp    bl,0x7
c001d852:	77 12                	ja     c001d866 <IDE::read(unsigned char, unsigned char)+0x74>
c001d854:	0f b6 d2             	movzx  edx,dl
c001d857:	0f b6 c3             	movzx  eax,bl
c001d85a:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001d862:	89 c2                	mov    edx,eax
c001d864:	eb 31                	jmp    c001d897 <IDE::read(unsigned char, unsigned char)+0xa5>
c001d866:	80 fb 0d             	cmp    bl,0xd
c001d869:	77 13                	ja     c001d87e <IDE::read(unsigned char, unsigned char)+0x8c>
c001d86b:	0f b6 d2             	movzx  edx,dl
c001d86e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001d875:	0f b6 d3             	movzx  edx,bl
c001d878:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d87c:	eb 19                	jmp    c001d897 <IDE::read(unsigned char, unsigned char)+0xa5>
c001d87e:	31 c0                	xor    eax,eax
c001d880:	80 fb 15             	cmp    bl,0x15
c001d883:	77 13                	ja     c001d898 <IDE::read(unsigned char, unsigned char)+0xa6>
c001d885:	0f b6 d2             	movzx  edx,dl
c001d888:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001d890:	0f b6 d3             	movzx  edx,bl
c001d893:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d897:	ec                   	in     al,dx
c001d898:	83 c4 1c             	add    esp,0x1c
c001d89b:	5b                   	pop    ebx
c001d89c:	5e                   	pop    esi
c001d89d:	5f                   	pop    edi
c001d89e:	5d                   	pop    ebp
c001d89f:	c3                   	ret    

c001d8a0 <IDE::waitInterrupt(unsigned char)>:
c001d8a0:	55                   	push   ebp
c001d8a1:	57                   	push   edi
c001d8a2:	56                   	push   esi
c001d8a3:	53                   	push   ebx
c001d8a4:	31 db                	xor    ebx,ebx
c001d8a6:	83 ec 0c             	sub    esp,0xc
c001d8a9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d8ad:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001d8b2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001d8ba:	89 e8                	mov    eax,ebp
c001d8bc:	84 c0                	test   al,al
c001d8be:	75 30                	jne    c001d8f0 <IDE::waitInterrupt(unsigned char)+0x50>
c001d8c0:	50                   	push   eax
c001d8c1:	6a 0c                	push   0xc
c001d8c3:	56                   	push   esi
c001d8c4:	57                   	push   edi
c001d8c5:	e8 28 ff ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001d8ca:	83 c4 10             	add    esp,0x10
c001d8cd:	a8 01                	test   al,0x1
c001d8cf:	75 27                	jne    c001d8f8 <IDE::waitInterrupt(unsigned char)+0x58>
c001d8d1:	f6 c3 04             	test   bl,0x4
c001d8d4:	75 12                	jne    c001d8e8 <IDE::waitInterrupt(unsigned char)+0x48>
c001d8d6:	83 fb 32             	cmp    ebx,0x32
c001d8d9:	7e 0d                	jle    c001d8e8 <IDE::waitInterrupt(unsigned char)+0x48>
c001d8db:	83 ec 0c             	sub    esp,0xc
c001d8de:	6a 64                	push   0x64
c001d8e0:	e8 6b a9 ff ff       	call   c0018250 <milliTenthSleep(unsigned int)>
c001d8e5:	83 c4 10             	add    esp,0x10
c001d8e8:	83 fb 3c             	cmp    ebx,0x3c
c001d8eb:	74 0b                	je     c001d8f8 <IDE::waitInterrupt(unsigned char)+0x58>
c001d8ed:	43                   	inc    ebx
c001d8ee:	eb c2                	jmp    c001d8b2 <IDE::waitInterrupt(unsigned char)+0x12>
c001d8f0:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001d8f8:	83 c4 0c             	add    esp,0xc
c001d8fb:	89 e8                	mov    eax,ebp
c001d8fd:	5b                   	pop    ebx
c001d8fe:	5e                   	pop    esi
c001d8ff:	5f                   	pop    edi
c001d900:	5d                   	pop    ebp
c001d901:	c3                   	ret    

c001d902 <ideChannel0IRQHandler(regs*, void*)>:
c001d902:	83 ec 10             	sub    esp,0x10
c001d905:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d909:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001d910:	6a 07                	push   0x7
c001d912:	6a 00                	push   0x0
c001d914:	50                   	push   eax
c001d915:	e8 d8 fe ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001d91a:	83 c4 1c             	add    esp,0x1c
c001d91d:	c3                   	ret    

c001d91e <ideChannel1IRQHandler(regs*, void*)>:
c001d91e:	83 ec 10             	sub    esp,0x10
c001d921:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d925:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001d92c:	6a 07                	push   0x7
c001d92e:	6a 01                	push   0x1
c001d930:	50                   	push   eax
c001d931:	e8 bc fe ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001d936:	83 c4 1c             	add    esp,0x1c
c001d939:	c3                   	ret    

c001d93a <IDE::enableIRQs(unsigned char, bool)>:
c001d93a:	57                   	push   edi
c001d93b:	56                   	push   esi
c001d93c:	be 04 00 00 00       	mov    esi,0x4
c001d941:	53                   	push   ebx
c001d942:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001d947:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d94b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001d950:	0f 94 c0             	sete   al
c001d953:	d1 e0                	shl    eax,1
c001d955:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001d95c:	0f b6 c0             	movzx  eax,al
c001d95f:	50                   	push   eax
c001d960:	6a 0c                	push   0xc
c001d962:	57                   	push   edi
c001d963:	53                   	push   ebx
c001d964:	e8 c9 fd ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d969:	83 c4 10             	add    esp,0x10
c001d96c:	50                   	push   eax
c001d96d:	6a 0c                	push   0xc
c001d96f:	57                   	push   edi
c001d970:	53                   	push   ebx
c001d971:	e8 7c fe ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001d976:	83 c4 10             	add    esp,0x10
c001d979:	4e                   	dec    esi
c001d97a:	75 f0                	jne    c001d96c <IDE::enableIRQs(unsigned char, bool)+0x32>
c001d97c:	5b                   	pop    ebx
c001d97d:	5e                   	pop    esi
c001d97e:	5f                   	pop    edi
c001d97f:	c3                   	ret    

c001d980 <IDE::open(int, int, void*)>:
c001d980:	55                   	push   ebp
c001d981:	57                   	push   edi
c001d982:	56                   	push   esi
c001d983:	53                   	push   ebx
c001d984:	83 ec 1c             	sub    esp,0x1c
c001d987:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d98b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001d994:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001d99d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001d9a4:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001d9ab:	0f 85 b0 02 00 00    	jne    c001dc61 <IDE::open(int, int, void*)+0x2e1>
c001d9b1:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001d9b7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001d9bb:	83 e0 7f             	and    eax,0x7f
c001d9be:	3c 05                	cmp    al,0x5
c001d9c0:	74 04                	je     c001d9c6 <IDE::open(int, int, void*)+0x46>
c001d9c2:	3c 0f                	cmp    al,0xf
c001d9c4:	75 32                	jne    c001d9f8 <IDE::open(int, int, void*)+0x78>
c001d9c6:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001d9cc:	83 e0 fc             	and    eax,0xfffffffc
c001d9cf:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d9d6:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001d9dc:	83 e0 fc             	and    eax,0xfffffffc
c001d9df:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001d9e6:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001d9ec:	83 e0 fc             	and    eax,0xfffffffc
c001d9ef:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d9f6:	eb 14                	jmp    c001da0c <IDE::open(int, int, void*)+0x8c>
c001d9f8:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001da02:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001da0c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001da13:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001da1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001da1e:	89 c6                	mov    esi,eax
c001da20:	bf f8 0c 00 00       	mov    edi,0xcf8
c001da25:	c1 e6 10             	shl    esi,0x10
c001da28:	89 e8                	mov    eax,ebp
c001da2a:	89 fa                	mov    edx,edi
c001da2c:	c1 e0 0b             	shl    eax,0xb
c001da2f:	09 f0                	or     eax,esi
c001da31:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001da38:	c1 e6 08             	shl    esi,0x8
c001da3b:	09 c6                	or     esi,eax
c001da3d:	89 f0                	mov    eax,esi
c001da3f:	0d 08 00 00 80       	or     eax,0x80000008
c001da44:	ef                   	out    dx,eax
c001da45:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001da4a:	89 ca                	mov    edx,ecx
c001da4c:	ed                   	in     eax,dx
c001da4d:	c1 e8 10             	shr    eax,0x10
c001da50:	3d ff ff 00 00       	cmp    eax,0xffff
c001da55:	0f 84 f5 00 00 00    	je     c001db50 <IDE::open(int, int, void*)+0x1d0>
c001da5b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001da61:	89 fa                	mov    edx,edi
c001da63:	89 f0                	mov    eax,esi
c001da65:	ef                   	out    dx,eax
c001da66:	b0 fe                	mov    al,0xfe
c001da68:	89 ca                	mov    edx,ecx
c001da6a:	ee                   	out    dx,al
c001da6b:	89 f0                	mov    eax,esi
c001da6d:	89 fa                	mov    edx,edi
c001da6f:	ef                   	out    dx,eax
c001da70:	89 ca                	mov    edx,ecx
c001da72:	ed                   	in     eax,dx
c001da73:	3c fe                	cmp    al,0xfe
c001da75:	0f 85 a9 00 00 00    	jne    c001db24 <IDE::open(int, int, void*)+0x1a4>
c001da7b:	8b 15 48 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026448
c001da81:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001da88:	74 33                	je     c001dabd <IDE::open(int, int, void*)+0x13d>
c001da8a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001da90:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001da94:	40                   	inc    eax
c001da95:	83 ec 0c             	sub    esp,0xc
c001da98:	0f b6 c0             	movzx  eax,al
c001da9b:	50                   	push   eax
c001da9c:	55                   	push   ebp
c001da9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001daa1:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001daa7:	51                   	push   ecx
c001daa8:	e8 0f 44 ff ff       	call   c0011ebc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001daad:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001dab2:	83 c4 1c             	add    esp,0x1c
c001dab5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001dabb:	eb 0a                	jmp    c001dac7 <IDE::open(int, int, void*)+0x147>
c001dabd:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001dac7:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001dace:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001dad5:	c1 e1 10             	shl    ecx,0x10
c001dad8:	c1 e0 08             	shl    eax,0x8
c001dadb:	bf f8 0c 00 00       	mov    edi,0xcf8
c001dae0:	09 c1                	or     ecx,eax
c001dae2:	89 fa                	mov    edx,edi
c001dae4:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001daeb:	c1 e0 0b             	shl    eax,0xb
c001daee:	09 c1                	or     ecx,eax
c001daf0:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001daf6:	89 c8                	mov    eax,ecx
c001daf8:	ef                   	out    dx,eax
c001daf9:	be fc 0c 00 00       	mov    esi,0xcfc
c001dafe:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001db04:	89 f2                	mov    edx,esi
c001db06:	ee                   	out    dx,al
c001db07:	89 c8                	mov    eax,ecx
c001db09:	89 fa                	mov    edx,edi
c001db0b:	ef                   	out    dx,eax
c001db0c:	89 f2                	mov    edx,esi
c001db0e:	ed                   	in     eax,dx
c001db0f:	0f b6 c0             	movzx  eax,al
c001db12:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001db18:	74 46                	je     c001db60 <IDE::open(int, int, void*)+0x1e0>
c001db1a:	83 ec 0c             	sub    esp,0xc
c001db1d:	68 04 50 02 c0       	push   0xc0025004
c001db22:	eb 34                	jmp    c001db58 <IDE::open(int, int, void*)+0x1d8>
c001db24:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001db2d:	75 17                	jne    c001db46 <IDE::open(int, int, void*)+0x1c6>
c001db2f:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001db34:	74 07                	je     c001db3d <IDE::open(int, int, void*)+0x1bd>
c001db36:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001db3b:	75 09                	jne    c001db46 <IDE::open(int, int, void*)+0x1c6>
c001db3d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001db44:	eb 1a                	jmp    c001db60 <IDE::open(int, int, void*)+0x1e0>
c001db46:	83 ec 0c             	sub    esp,0xc
c001db49:	68 0c 50 02 c0       	push   0xc002500c
c001db4e:	eb 08                	jmp    c001db58 <IDE::open(int, int, void*)+0x1d8>
c001db50:	83 ec 0c             	sub    esp,0xc
c001db53:	68 3d 50 02 c0       	push   0xc002503d
c001db58:	e8 28 68 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001db5d:	83 c4 10             	add    esp,0x10
c001db60:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001db67:	79 1a                	jns    c001db83 <IDE::open(int, int, void*)+0x203>
c001db69:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001db6f:	83 e0 fc             	and    eax,0xfffffffc
c001db72:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001db79:	83 c0 08             	add    eax,0x8
c001db7c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001db83:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001db89:	89 c2                	mov    edx,eax
c001db8b:	83 e2 0f             	and    edx,0xf
c001db8e:	66 83 fa 08          	cmp    dx,0x8
c001db92:	75 0a                	jne    c001db9e <IDE::open(int, int, void*)+0x21e>
c001db94:	83 e8 02             	sub    eax,0x2
c001db97:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001db9e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001dba4:	89 c2                	mov    edx,eax
c001dba6:	83 e2 0f             	and    edx,0xf
c001dba9:	66 83 fa 08          	cmp    dx,0x8
c001dbad:	75 0a                	jne    c001dbb9 <IDE::open(int, int, void*)+0x239>
c001dbaf:	83 e8 02             	sub    eax,0x2
c001dbb2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dbb9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001dbc0:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001dbc7:	89 d0                	mov    eax,edx
c001dbc9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dbcc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dbd0:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001dbd4:	8d 4a 01             	lea    ecx,[edx+0x1]
c001dbd7:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dbdc:	0f b6 c9             	movzx  ecx,cl
c001dbdf:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001dbe6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001dbe9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001dbed:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001dbf1:	8d 50 02             	lea    edx,[eax+0x2]
c001dbf4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001dbf9:	0f b6 d2             	movzx  edx,dl
c001dbfc:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001dc02:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dc05:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dc09:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001dc0d:	8d 48 03             	lea    ecx,[eax+0x3]
c001dc10:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dc15:	0f b6 c9             	movzx  ecx,cl
c001dc18:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001dc1e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001dc21:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001dc25:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001dc29:	8d 50 04             	lea    edx,[eax+0x4]
c001dc2c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001dc32:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001dc37:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001dc3e:	66 85 f6             	test   si,si
c001dc41:	74 5b                	je     c001dc9e <IDE::open(int, int, void*)+0x31e>
c001dc43:	0f b6 d2             	movzx  edx,dl
c001dc46:	83 c0 05             	add    eax,0x5
c001dc49:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dc4c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dc50:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001dc54:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001dc5a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dc5f:	eb 3d                	jmp    c001dc9e <IDE::open(int, int, void*)+0x31e>
c001dc61:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001dc67:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001dc6e:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001dc75:	66 05 06 02          	add    ax,0x206
c001dc79:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dc80:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001dc87:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001dc8e:	66 05 06 02          	add    ax,0x206
c001dc92:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dc99:	e9 e5 fe ff ff       	jmp    c001db83 <IDE::open(int, int, void*)+0x203>
c001dc9e:	50                   	push   eax
c001dc9f:	50                   	push   eax
c001dca0:	6a 00                	push   0x0
c001dca2:	53                   	push   ebx
c001dca3:	e8 64 fa ff ff       	call   c001d70c <IDE::prepareInterrupt(unsigned char)>
c001dca8:	5a                   	pop    edx
c001dca9:	59                   	pop    ecx
c001dcaa:	6a 01                	push   0x1
c001dcac:	53                   	push   ebx
c001dcad:	e8 5a fa ff ff       	call   c001d70c <IDE::prepareInterrupt(unsigned char)>
c001dcb2:	83 c4 0c             	add    esp,0xc
c001dcb5:	6a 00                	push   0x0
c001dcb7:	6a 00                	push   0x0
c001dcb9:	53                   	push   ebx
c001dcba:	e8 7b fc ff ff       	call   c001d93a <IDE::enableIRQs(unsigned char, bool)>
c001dcbf:	83 c4 0c             	add    esp,0xc
c001dcc2:	6a 00                	push   0x0
c001dcc4:	6a 01                	push   0x1
c001dcc6:	53                   	push   ebx
c001dcc7:	e8 6e fc ff ff       	call   c001d93a <IDE::enableIRQs(unsigned char, bool)>
c001dccc:	83 c4 10             	add    esp,0x10
c001dccf:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001dcd6:	74 34                	je     c001dd0c <IDE::open(int, int, void*)+0x38c>
c001dcd8:	83 ec 0c             	sub    esp,0xc
c001dcdb:	53                   	push   ebx
c001dcdc:	6a 01                	push   0x1
c001dcde:	68 02 d9 01 c0       	push   0xc001d902
c001dce3:	6a 0e                	push   0xe
c001dce5:	53                   	push   ebx
c001dce6:	e8 97 01 ff ff       	call   c000de82 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dceb:	83 c4 14             	add    esp,0x14
c001dcee:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001dcf4:	53                   	push   ebx
c001dcf5:	6a 01                	push   0x1
c001dcf7:	68 1e d9 01 c0       	push   0xc001d91e
c001dcfc:	6a 0f                	push   0xf
c001dcfe:	53                   	push   ebx
c001dcff:	e8 7e 01 ff ff       	call   c000de82 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd04:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001dd0a:	eb 38                	jmp    c001dd44 <IDE::open(int, int, void*)+0x3c4>
c001dd0c:	83 ec 0c             	sub    esp,0xc
c001dd0f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001dd19:	53                   	push   ebx
c001dd1a:	6a 00                	push   0x0
c001dd1c:	68 02 d9 01 c0       	push   0xc001d902
c001dd21:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001dd27:	53                   	push   ebx
c001dd28:	e8 55 01 ff ff       	call   c000de82 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd2d:	83 c4 14             	add    esp,0x14
c001dd30:	53                   	push   ebx
c001dd31:	6a 00                	push   0x0
c001dd33:	68 1e d9 01 c0       	push   0xc001d91e
c001dd38:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001dd3e:	53                   	push   ebx
c001dd3f:	e8 3e 01 ff ff       	call   c000de82 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd44:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dd46:	83 c4 20             	add    esp,0x20
c001dd49:	83 ec 0c             	sub    esp,0xc
c001dd4c:	53                   	push   ebx
c001dd4d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001dd50:	83 c4 0c             	add    esp,0xc
c001dd53:	6a 07                	push   0x7
c001dd55:	6a 00                	push   0x0
c001dd57:	53                   	push   ebx
c001dd58:	e8 95 fa ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001dd5d:	83 c4 0c             	add    esp,0xc
c001dd60:	6a 07                	push   0x7
c001dd62:	6a 01                	push   0x1
c001dd64:	53                   	push   ebx
c001dd65:	e8 88 fa ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001dd6a:	83 c4 0c             	add    esp,0xc
c001dd6d:	6a 01                	push   0x1
c001dd6f:	6a 00                	push   0x0
c001dd71:	53                   	push   ebx
c001dd72:	e8 c3 fb ff ff       	call   c001d93a <IDE::enableIRQs(unsigned char, bool)>
c001dd77:	83 c4 0c             	add    esp,0xc
c001dd7a:	6a 01                	push   0x1
c001dd7c:	6a 01                	push   0x1
c001dd7e:	53                   	push   ebx
c001dd7f:	e8 b6 fb ff ff       	call   c001d93a <IDE::enableIRQs(unsigned char, bool)>
c001dd84:	83 c4 2c             	add    esp,0x2c
c001dd87:	31 c0                	xor    eax,eax
c001dd89:	5b                   	pop    ebx
c001dd8a:	5e                   	pop    esi
c001dd8b:	5f                   	pop    edi
c001dd8c:	5d                   	pop    ebp
c001dd8d:	c3                   	ret    

c001dd8e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001dd8e:	55                   	push   ebp
c001dd8f:	57                   	push   edi
c001dd90:	56                   	push   esi
c001dd91:	53                   	push   ebx
c001dd92:	83 ec 1c             	sub    esp,0x1c
c001dd95:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dd99:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dd9d:	8d 50 f8             	lea    edx,[eax-0x8]
c001dda0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dda4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001dda8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ddac:	80 fa 03             	cmp    dl,0x3
c001ddaf:	77 5d                	ja     c001de0e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ddb1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ddb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ddb9:	0f b6 db             	movzx  ebx,bl
c001ddbc:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ddbf:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001ddc3:	83 ca 80             	or     edx,0xffffff80
c001ddc6:	0f b6 d2             	movzx  edx,dl
c001ddc9:	52                   	push   edx
c001ddca:	6a 0c                	push   0xc
c001ddcc:	53                   	push   ebx
c001ddcd:	56                   	push   esi
c001ddce:	e8 5f f9 ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddd3:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ddd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dddc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dde0:	0f b6 c0             	movzx  eax,al
c001dde3:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001dde7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001dde9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ddee:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ddf2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ddf6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ddfa:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001de02:	83 c4 2c             	add    esp,0x2c
c001de05:	5b                   	pop    ebx
c001de06:	5e                   	pop    esi
c001de07:	5f                   	pop    edi
c001de08:	5d                   	pop    ebp
c001de09:	e9 24 f9 ff ff       	jmp    c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de0e:	3c 07                	cmp    al,0x7
c001de10:	77 10                	ja     c001de22 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001de12:	0f b6 db             	movzx  ebx,bl
c001de15:	0f b6 d0             	movzx  edx,al
c001de18:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001de20:	eb 2d                	jmp    c001de4f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001de22:	3c 0d                	cmp    al,0xd
c001de24:	77 13                	ja     c001de39 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001de26:	0f b6 db             	movzx  ebx,bl
c001de29:	0f b6 c0             	movzx  eax,al
c001de2c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001de33:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001de37:	eb 16                	jmp    c001de4f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001de39:	3c 15                	cmp    al,0x15
c001de3b:	77 14                	ja     c001de51 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001de3d:	0f b6 db             	movzx  ebx,bl
c001de40:	0f b6 c0             	movzx  eax,al
c001de43:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001de4b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001de4f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001de51:	83 c4 1c             	add    esp,0x1c
c001de54:	5b                   	pop    ebx
c001de55:	5e                   	pop    esi
c001de56:	5f                   	pop    edi
c001de57:	5d                   	pop    ebp
c001de58:	c3                   	ret    
c001de59:	90                   	nop

c001de5a <IDE::detect()>:
c001de5a:	55                   	push   ebp
c001de5b:	57                   	push   edi
c001de5c:	56                   	push   esi
c001de5d:	53                   	push   ebx
c001de5e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001de64:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001de6b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001de72:	0f 85 97 02 00 00    	jne    c001e10f <IDE::detect()+0x2b5>
c001de78:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001de7f:	31 f6                	xor    esi,esi
c001de81:	31 ed                	xor    ebp,ebp
c001de83:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001de8b:	89 e8                	mov    eax,ebp
c001de8d:	c1 e0 06             	shl    eax,0x6
c001de90:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001de98:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001de9c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001dea0:	c1 e0 04             	shl    eax,0x4
c001dea3:	83 c8 a0             	or     eax,0xffffffa0
c001dea6:	0f b6 c0             	movzx  eax,al
c001dea9:	50                   	push   eax
c001deaa:	6a 06                	push   0x6
c001deac:	56                   	push   esi
c001dead:	53                   	push   ebx
c001deae:	e8 7f f8 ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001deb3:	83 c4 0c             	add    esp,0xc
c001deb6:	6a 0c                	push   0xc
c001deb8:	56                   	push   esi
c001deb9:	53                   	push   ebx
c001deba:	e8 33 f9 ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001debf:	83 c4 0c             	add    esp,0xc
c001dec2:	6a 0c                	push   0xc
c001dec4:	56                   	push   esi
c001dec5:	53                   	push   ebx
c001dec6:	e8 27 f9 ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001decb:	83 c4 0c             	add    esp,0xc
c001dece:	6a 0c                	push   0xc
c001ded0:	56                   	push   esi
c001ded1:	53                   	push   ebx
c001ded2:	e8 1b f9 ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001ded7:	83 c4 0c             	add    esp,0xc
c001deda:	6a 0c                	push   0xc
c001dedc:	56                   	push   esi
c001dedd:	53                   	push   ebx
c001dede:	e8 0f f9 ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001dee3:	68 ec 00 00 00       	push   0xec
c001dee8:	6a 07                	push   0x7
c001deea:	56                   	push   esi
c001deeb:	53                   	push   ebx
c001deec:	e8 41 f8 ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001def1:	83 c4 1c             	add    esp,0x1c
c001def4:	6a 0c                	push   0xc
c001def6:	56                   	push   esi
c001def7:	53                   	push   ebx
c001def8:	e8 f5 f8 ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001defd:	83 c4 0c             	add    esp,0xc
c001df00:	6a 0c                	push   0xc
c001df02:	56                   	push   esi
c001df03:	53                   	push   ebx
c001df04:	e8 e9 f8 ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001df09:	83 c4 0c             	add    esp,0xc
c001df0c:	6a 0c                	push   0xc
c001df0e:	56                   	push   esi
c001df0f:	53                   	push   ebx
c001df10:	e8 dd f8 ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001df15:	83 c4 0c             	add    esp,0xc
c001df18:	6a 0c                	push   0xc
c001df1a:	56                   	push   esi
c001df1b:	53                   	push   ebx
c001df1c:	e8 d1 f8 ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001df21:	83 c4 0c             	add    esp,0xc
c001df24:	6a 0c                	push   0xc
c001df26:	56                   	push   esi
c001df27:	53                   	push   ebx
c001df28:	e8 c5 f8 ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001df2d:	83 c4 10             	add    esp,0x10
c001df30:	84 c0                	test   al,al
c001df32:	0f 84 5f 01 00 00    	je     c001e097 <IDE::detect()+0x23d>
c001df38:	31 ff                	xor    edi,edi
c001df3a:	50                   	push   eax
c001df3b:	6a 0c                	push   0xc
c001df3d:	56                   	push   esi
c001df3e:	53                   	push   ebx
c001df3f:	e8 ae f8 ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001df44:	83 c4 10             	add    esp,0x10
c001df47:	a8 01                	test   al,0x1
c001df49:	0f 85 69 01 00 00    	jne    c001e0b8 <IDE::detect()+0x25e>
c001df4f:	84 c0                	test   al,al
c001df51:	78 04                	js     c001df57 <IDE::detect()+0xfd>
c001df53:	a8 08                	test   al,0x8
c001df55:	75 23                	jne    c001df7a <IDE::detect()+0x120>
c001df57:	47                   	inc    edi
c001df58:	81 ff 17 01 00 00    	cmp    edi,0x117
c001df5e:	7e da                	jle    c001df3a <IDE::detect()+0xe0>
c001df60:	83 ec 0c             	sub    esp,0xc
c001df63:	6a 32                	push   0x32
c001df65:	e8 e6 a2 ff ff       	call   c0018250 <milliTenthSleep(unsigned int)>
c001df6a:	83 c4 10             	add    esp,0x10
c001df6d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001df73:	75 c5                	jne    c001df3a <IDE::detect()+0xe0>
c001df75:	e9 3e 01 00 00       	jmp    c001e0b8 <IDE::detect()+0x25e>
c001df7a:	31 c9                	xor    ecx,ecx
c001df7c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001df80:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001df84:	83 ec 0c             	sub    esp,0xc
c001df87:	68 80 00 00 00       	push   0x80
c001df8c:	57                   	push   edi
c001df8d:	6a 00                	push   0x0
c001df8f:	56                   	push   esi
c001df90:	53                   	push   ebx
c001df91:	e8 f8 fd ff ff       	call   c001dd8e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001df96:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001df9b:	89 e8                	mov    eax,ebp
c001df9d:	89 d1                	mov    ecx,edx
c001df9f:	c1 e0 06             	shl    eax,0x6
c001dfa2:	01 d8                	add    eax,ebx
c001dfa4:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001dfab:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001dfb2:	89 f2                	mov    edx,esi
c001dfb4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001dfba:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001dfbe:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001dfc4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dfc8:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001dfcf:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001dfd7:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001dfde:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001dfe6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001dfec:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001dff3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001dff9:	8d 54 24 58          	lea    edx,[esp+0x58]
c001dffd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e001:	83 c4 20             	add    esp,0x20
c001e004:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001e007:	83 c0 02             	add    eax,0x2
c001e00a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001e010:	83 c7 02             	add    edi,0x2
c001e013:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001e016:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001e01c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001e020:	75 e2                	jne    c001e004 <IDE::detect()+0x1aa>
c001e022:	89 e8                	mov    eax,ebp
c001e024:	c1 e0 06             	shl    eax,0x6
c001e027:	01 d8                	add    eax,ebx
c001e029:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001e02f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001e036:	66 c1 ea 09          	shr    dx,0x9
c001e03a:	83 e2 01             	and    edx,0x1
c001e03d:	84 c9                	test   cl,cl
c001e03f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001e045:	75 22                	jne    c001e069 <IDE::detect()+0x20f>
c001e047:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001e04e:	74 46                	je     c001e096 <IDE::detect()+0x23c>
c001e050:	83 ec 0c             	sub    esp,0xc
c001e053:	68 7c 01 00 00       	push   0x17c
c001e058:	e8 66 b9 fe ff       	call   c00099c3 <malloc>
c001e05d:	89 c7                	mov    edi,eax
c001e05f:	89 04 24             	mov    DWORD PTR [esp],eax
c001e062:	e8 13 05 00 00       	call   c001e57a <ATA::ATA()>
c001e067:	eb 17                	jmp    c001e080 <IDE::detect()+0x226>
c001e069:	83 ec 0c             	sub    esp,0xc
c001e06c:	68 80 01 00 00       	push   0x180
c001e071:	e8 4d b9 fe ff       	call   c00099c3 <malloc>
c001e076:	89 c7                	mov    edi,eax
c001e078:	89 04 24             	mov    DWORD PTR [esp],eax
c001e07b:	e8 82 0b 00 00       	call   c001ec02 <ATAPI::ATAPI()>
c001e080:	5a                   	pop    edx
c001e081:	59                   	pop    ecx
c001e082:	57                   	push   edi
c001e083:	53                   	push   ebx
c001e084:	e8 81 fe fe ff       	call   c000df0a <Device::addChild(Device*)>
c001e089:	8b 07                	mov    eax,DWORD PTR [edi]
c001e08b:	53                   	push   ebx
c001e08c:	55                   	push   ebp
c001e08d:	6a 00                	push   0x0
c001e08f:	57                   	push   edi
c001e090:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e093:	83 c4 20             	add    esp,0x20
c001e096:	45                   	inc    ebp
c001e097:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001e09c:	74 0d                	je     c001e0ab <IDE::detect()+0x251>
c001e09e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001e0a6:	e9 e0 fd ff ff       	jmp    c001de8b <IDE::detect()+0x31>
c001e0ab:	4e                   	dec    esi
c001e0ac:	74 61                	je     c001e10f <IDE::detect()+0x2b5>
c001e0ae:	be 01 00 00 00       	mov    esi,0x1
c001e0b3:	e9 cb fd ff ff       	jmp    c001de83 <IDE::detect()+0x29>
c001e0b8:	50                   	push   eax
c001e0b9:	6a 04                	push   0x4
c001e0bb:	56                   	push   esi
c001e0bc:	53                   	push   ebx
c001e0bd:	e8 30 f7 ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001e0c2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e0c6:	83 c4 0c             	add    esp,0xc
c001e0c9:	6a 05                	push   0x5
c001e0cb:	56                   	push   esi
c001e0cc:	53                   	push   ebx
c001e0cd:	e8 20 f7 ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001e0d2:	83 c4 10             	add    esp,0x10
c001e0d5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001e0d9:	80 fa 14             	cmp    dl,0x14
c001e0dc:	75 04                	jne    c001e0e2 <IDE::detect()+0x288>
c001e0de:	3c eb                	cmp    al,0xeb
c001e0e0:	eb 07                	jmp    c001e0e9 <IDE::detect()+0x28f>
c001e0e2:	3c 96                	cmp    al,0x96
c001e0e4:	75 b1                	jne    c001e097 <IDE::detect()+0x23d>
c001e0e6:	80 fa 69             	cmp    dl,0x69
c001e0e9:	75 ac                	jne    c001e097 <IDE::detect()+0x23d>
c001e0eb:	68 a1 00 00 00       	push   0xa1
c001e0f0:	6a 07                	push   0x7
c001e0f2:	56                   	push   esi
c001e0f3:	53                   	push   ebx
c001e0f4:	e8 39 f6 ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e0f9:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001e100:	e8 4b a1 ff ff       	call   c0018250 <milliTenthSleep(unsigned int)>
c001e105:	83 c4 10             	add    esp,0x10
c001e108:	b1 01                	mov    cl,0x1
c001e10a:	e9 6d fe ff ff       	jmp    c001df7c <IDE::detect()+0x122>
c001e10f:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e115:	5b                   	pop    ebx
c001e116:	5e                   	pop    esi
c001e117:	5f                   	pop    edi
c001e118:	5d                   	pop    ebp
c001e119:	c3                   	ret    

c001e11a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e11a:	55                   	push   ebp
c001e11b:	57                   	push   edi
c001e11c:	56                   	push   esi
c001e11d:	53                   	push   ebx
c001e11e:	83 ec 1c             	sub    esp,0x1c
c001e121:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e125:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e129:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e12d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e131:	88 c3                	mov    bl,al
c001e133:	84 c0                	test   al,al
c001e135:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e139:	0f 84 81 00 00 00    	je     c001e1c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e13f:	83 ec 0c             	sub    esp,0xc
c001e142:	68 67 50 02 c0       	push   0xc0025067
c001e147:	e8 77 e9 fe ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001e14c:	83 c4 10             	add    esp,0x10
c001e14f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e153:	3c 01                	cmp    al,0x1
c001e155:	74 63                	je     c001e1ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001e157:	3c 02                	cmp    al,0x2
c001e159:	75 53                	jne    c001e1ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e15b:	d1 e6                	shl    esi,1
c001e15d:	09 ee                	or     esi,ebp
c001e15f:	50                   	push   eax
c001e160:	89 f0                	mov    eax,esi
c001e162:	6a 01                	push   0x1
c001e164:	0f b6 f0             	movzx  esi,al
c001e167:	c1 e6 06             	shl    esi,0x6
c001e16a:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001e172:	50                   	push   eax
c001e173:	57                   	push   edi
c001e174:	e8 79 f6 ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001e179:	83 c4 10             	add    esp,0x10
c001e17c:	a8 01                	test   al,0x1
c001e17e:	74 02                	je     c001e182 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001e180:	b3 07                	mov    bl,0x7
c001e182:	a8 02                	test   al,0x2
c001e184:	74 02                	je     c001e188 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001e186:	b3 03                	mov    bl,0x3
c001e188:	a8 04                	test   al,0x4
c001e18a:	74 02                	je     c001e18e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001e18c:	b3 14                	mov    bl,0x14
c001e18e:	a8 08                	test   al,0x8
c001e190:	74 02                	je     c001e194 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001e192:	b3 03                	mov    bl,0x3
c001e194:	a8 10                	test   al,0x10
c001e196:	74 02                	je     c001e19a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001e198:	b3 15                	mov    bl,0x15
c001e19a:	a8 20                	test   al,0x20
c001e19c:	74 02                	je     c001e1a0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001e19e:	b3 03                	mov    bl,0x3
c001e1a0:	a8 40                	test   al,0x40
c001e1a2:	74 02                	je     c001e1a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001e1a4:	b3 16                	mov    bl,0x16
c001e1a6:	84 c0                	test   al,al
c001e1a8:	79 16                	jns    c001e1c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e1aa:	b3 0d                	mov    bl,0xd
c001e1ac:	eb 12                	jmp    c001e1c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e1ae:	3c 03                	cmp    al,0x3
c001e1b0:	74 0c                	je     c001e1be <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001e1b2:	3c 04                	cmp    al,0x4
c001e1b4:	75 0a                	jne    c001e1c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e1b6:	b3 08                	mov    bl,0x8
c001e1b8:	eb 06                	jmp    c001e1c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e1ba:	b3 13                	mov    bl,0x13
c001e1bc:	eb 02                	jmp    c001e1c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e1be:	b3 17                	mov    bl,0x17
c001e1c0:	83 c4 1c             	add    esp,0x1c
c001e1c3:	88 d8                	mov    al,bl
c001e1c5:	5b                   	pop    ebx
c001e1c6:	5e                   	pop    esi
c001e1c7:	5f                   	pop    edi
c001e1c8:	5d                   	pop    ebp
c001e1c9:	c3                   	ret    

c001e1ca <IDE::polling(unsigned char, unsigned int)>:
c001e1ca:	57                   	push   edi
c001e1cb:	56                   	push   esi
c001e1cc:	53                   	push   ebx
c001e1cd:	bb 04 00 00 00       	mov    ebx,0x4
c001e1d2:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e1d6:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e1db:	52                   	push   edx
c001e1dc:	6a 0c                	push   0xc
c001e1de:	56                   	push   esi
c001e1df:	57                   	push   edi
c001e1e0:	e8 0d f6 ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001e1e5:	83 c4 10             	add    esp,0x10
c001e1e8:	4b                   	dec    ebx
c001e1e9:	75 f0                	jne    c001e1db <IDE::polling(unsigned char, unsigned int)+0x11>
c001e1eb:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e1f0:	50                   	push   eax
c001e1f1:	6a 0c                	push   0xc
c001e1f3:	56                   	push   esi
c001e1f4:	57                   	push   edi
c001e1f5:	e8 f8 f5 ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001e1fa:	83 c4 10             	add    esp,0x10
c001e1fd:	a8 01                	test   al,0x1
c001e1ff:	75 17                	jne    c001e218 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e201:	a8 20                	test   al,0x20
c001e203:	75 0f                	jne    c001e214 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001e205:	4b                   	dec    ebx
c001e206:	74 10                	je     c001e218 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e208:	84 c0                	test   al,al
c001e20a:	78 e4                	js     c001e1f0 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e20c:	a8 08                	test   al,0x8
c001e20e:	74 e0                	je     c001e1f0 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e210:	31 c0                	xor    eax,eax
c001e212:	eb 06                	jmp    c001e21a <IDE::polling(unsigned char, unsigned int)+0x50>
c001e214:	b0 01                	mov    al,0x1
c001e216:	eb 02                	jmp    c001e21a <IDE::polling(unsigned char, unsigned int)+0x50>
c001e218:	b0 02                	mov    al,0x2
c001e21a:	5b                   	pop    ebx
c001e21b:	5e                   	pop    esi
c001e21c:	5f                   	pop    edi
c001e21d:	c3                   	ret    

c001e21e <SATABus::close(int, int, void*)>:
c001e21e:	31 c0                	xor    eax,eax
c001e220:	c3                   	ret    
c001e221:	90                   	nop

c001e222 <SATABus::detect()>:
c001e222:	c3                   	ret    
c001e223:	90                   	nop

c001e224 <SATABus::SATABus()>:
c001e224:	83 ec 0c             	sub    esp,0xc
c001e227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e22b:	83 ec 08             	sub    esp,0x8
c001e22e:	68 a0 50 02 c0       	push   0xc00250a0
c001e233:	50                   	push   eax
c001e234:	e8 7f 00 ff ff       	call   c000e2b8 <HardDiskController::HardDiskController(char const*)>
c001e239:	83 c4 10             	add    esp,0x10
c001e23c:	ba f4 50 02 c0       	mov    edx,0xc00250f4
c001e241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e245:	89 10                	mov    DWORD PTR [eax],edx
c001e247:	83 ec 0c             	sub    esp,0xc
c001e24a:	6a 50                	push   0x50
c001e24c:	e8 df bc fe ff       	call   c0009f30 <Phys::allocateContiguousPages(int)>
c001e251:	83 c4 10             	add    esp,0x10
c001e254:	89 c2                	mov    edx,eax
c001e256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e25a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e260:	83 ec 0c             	sub    esp,0xc
c001e263:	6a 50                	push   0x50
c001e265:	e8 87 d4 fe ff       	call   c000b6f1 <Virt::allocateKernelVirtualPages(int)>
c001e26a:	83 c4 10             	add    esp,0x10
c001e26d:	89 c2                	mov    edx,eax
c001e26f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e273:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e279:	a1 b0 65 02 c0       	mov    eax,ds:0xc00265b0
c001e27e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e282:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001e288:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e28c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e292:	83 ec 0c             	sub    esp,0xc
c001e295:	6a 03                	push   0x3
c001e297:	6a 50                	push   0x50
c001e299:	51                   	push   ecx
c001e29a:	52                   	push   edx
c001e29b:	50                   	push   eax
c001e29c:	e8 ed dd fe ff       	call   c000c08e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e2a1:	83 c4 20             	add    esp,0x20
c001e2a4:	90                   	nop
c001e2a5:	83 c4 0c             	add    esp,0xc
c001e2a8:	c3                   	ret    
c001e2a9:	90                   	nop

c001e2aa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001e2aa:	83 ec 0c             	sub    esp,0xc
c001e2ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2b1:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001e2b4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001e2b7:	09 c2                	or     edx,eax
c001e2b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2bd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e2c3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e2c5:	31 c0                	xor    eax,eax
c001e2c7:	c1 e9 08             	shr    ecx,0x8
c001e2ca:	83 e1 0f             	and    ecx,0xf
c001e2cd:	39 c8                	cmp    eax,ecx
c001e2cf:	74 0a                	je     c001e2db <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001e2d1:	f6 c2 01             	test   dl,0x1
c001e2d4:	74 18                	je     c001e2ee <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c001e2d6:	d1 ea                	shr    edx,1
c001e2d8:	40                   	inc    eax
c001e2d9:	eb f2                	jmp    c001e2cd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c001e2db:	83 ec 0c             	sub    esp,0xc
c001e2de:	68 c4 50 02 c0       	push   0xc00250c4
c001e2e3:	e8 9d 60 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001e2e8:	83 c4 10             	add    esp,0x10
c001e2eb:	83 c8 ff             	or     eax,0xffffffff
c001e2ee:	83 c4 0c             	add    esp,0xc
c001e2f1:	c3                   	ret    

c001e2f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001e2f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e2f6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001e2f9:	89 c2                	mov    edx,eax
c001e2fb:	c1 ea 08             	shr    edx,0x8
c001e2fe:	83 e2 0f             	and    edx,0xf
c001e301:	fe ca                	dec    dl
c001e303:	75 31                	jne    c001e336 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e305:	83 e0 0f             	and    eax,0xf
c001e308:	3c 03                	cmp    al,0x3
c001e30a:	75 2a                	jne    c001e336 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e30c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001e30f:	b8 02 00 00 00       	mov    eax,0x2
c001e314:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001e31a:	74 1c                	je     c001e338 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e31c:	b8 04 00 00 00       	mov    eax,0x4
c001e321:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001e327:	74 0f                	je     c001e338 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e329:	31 c0                	xor    eax,eax
c001e32b:	83 fa 03             	cmp    edx,0x3
c001e32e:	0f 94 c0             	sete   al
c001e331:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001e335:	c3                   	ret    
c001e336:	31 c0                	xor    eax,eax
c001e338:	c3                   	ret    
c001e339:	90                   	nop

c001e33a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001e33a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e33e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e341:	0f ba e2 0f          	bt     edx,0xf
c001e345:	72 f7                	jb     c001e33e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001e347:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e34a:	83 ca 10             	or     edx,0x10
c001e34d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e350:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e353:	83 ca 01             	or     edx,0x1
c001e356:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e359:	c3                   	ret    

c001e35a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e35a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e35e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e361:	83 e2 fe             	and    edx,0xfffffffe
c001e364:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e367:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e36a:	83 e2 ef             	and    edx,0xffffffef
c001e36d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e370:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e373:	0f ba e2 0e          	bt     edx,0xe
c001e377:	72 f7                	jb     c001e370 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e379:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e37c:	0f ba e2 0f          	bt     edx,0xf
c001e380:	72 ee                	jb     c001e370 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e382:	c3                   	ret    
c001e383:	90                   	nop

c001e384 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e384:	55                   	push   ebp
c001e385:	57                   	push   edi
c001e386:	56                   	push   esi
c001e387:	53                   	push   ebx
c001e388:	83 ec 1c             	sub    esp,0x1c
c001e38b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e38f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e393:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e397:	53                   	push   ebx
c001e398:	89 fd                	mov    ebp,edi
c001e39a:	56                   	push   esi
c001e39b:	c1 e5 0a             	shl    ebp,0xa
c001e39e:	e8 b7 ff ff ff       	call   c001e35a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e3a3:	83 ec 0c             	sub    esp,0xc
c001e3a6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e3ac:	01 e8                	add    eax,ebp
c001e3ae:	89 03                	mov    DWORD PTR [ebx],eax
c001e3b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e3b2:	68 00 04 00 00       	push   0x400
c001e3b7:	6a 00                	push   0x0
c001e3b9:	50                   	push   eax
c001e3ba:	e8 c5 22 fe ff       	call   c0000684 <memset>
c001e3bf:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001e3c5:	89 fa                	mov    edx,edi
c001e3c7:	01 e8                	add    eax,ebp
c001e3c9:	c1 e7 0d             	shl    edi,0xd
c001e3cc:	89 03                	mov    DWORD PTR [ebx],eax
c001e3ce:	c1 e2 08             	shl    edx,0x8
c001e3d1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e3d8:	81 c2 00 80 00 00    	add    edx,0x8000
c001e3de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e3e2:	89 d0                	mov    eax,edx
c001e3e4:	83 c4 1c             	add    esp,0x1c
c001e3e7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e3ed:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e3f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e3f3:	68 00 01 00 00       	push   0x100
c001e3f8:	6a 00                	push   0x0
c001e3fa:	50                   	push   eax
c001e3fb:	e8 84 22 fe ff       	call   c0000684 <memset>
c001e400:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e404:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001e40a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001e410:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e414:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001e417:	83 c4 10             	add    esp,0x10
c001e41a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e421:	31 ff                	xor    edi,edi
c001e423:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001e429:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001e42f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e433:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e439:	83 c5 20             	add    ebp,0x20
c001e43c:	01 f8                	add    eax,edi
c001e43e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e441:	52                   	push   edx
c001e442:	68 00 01 00 00       	push   0x100
c001e447:	6a 00                	push   0x0
c001e449:	50                   	push   eax
c001e44a:	e8 35 22 fe ff       	call   c0000684 <memset>
c001e44f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e453:	83 c4 10             	add    esp,0x10
c001e456:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001e45c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e463:	01 f8                	add    eax,edi
c001e465:	81 c7 00 01 00 00    	add    edi,0x100
c001e46b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e46e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001e474:	75 b3                	jne    c001e429 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001e476:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001e47a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001e47e:	83 c4 1c             	add    esp,0x1c
c001e481:	5b                   	pop    ebx
c001e482:	5e                   	pop    esi
c001e483:	5f                   	pop    edi
c001e484:	5d                   	pop    ebp
c001e485:	e9 b0 fe ff ff       	jmp    c001e33a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001e48a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e48a:	55                   	push   ebp
c001e48b:	57                   	push   edi
c001e48c:	56                   	push   esi
c001e48d:	53                   	push   ebx
c001e48e:	31 db                	xor    ebx,ebx
c001e490:	83 ec 0c             	sub    esp,0xc
c001e493:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e497:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e49b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001e49e:	f7 c7 01 00 00 00    	test   edi,0x1
c001e4a4:	74 7a                	je     c001e520 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e4a6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e4aa:	89 d8                	mov    eax,ebx
c001e4ac:	c1 e0 07             	shl    eax,0x7
c001e4af:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001e4b6:	55                   	push   ebp
c001e4b7:	56                   	push   esi
c001e4b8:	e8 35 fe ff ff       	call   c001e2f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e4bd:	5a                   	pop    edx
c001e4be:	83 f8 01             	cmp    eax,0x1
c001e4c1:	59                   	pop    ecx
c001e4c2:	75 21                	jne    c001e4e5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001e4c4:	50                   	push   eax
c001e4c5:	53                   	push   ebx
c001e4c6:	55                   	push   ebp
c001e4c7:	56                   	push   esi
c001e4c8:	e8 b7 fe ff ff       	call   c001e384 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e4cd:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001e4d4:	e8 ea b4 fe ff       	call   c00099c3 <malloc>
c001e4d9:	89 c5                	mov    ebp,eax
c001e4db:	89 04 24             	mov    DWORD PTR [esp],eax
c001e4de:	e8 7f 0d 00 00       	call   c001f262 <SATA::SATA()>
c001e4e3:	eb 24                	jmp    c001e509 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001e4e5:	83 f8 04             	cmp    eax,0x4
c001e4e8:	75 36                	jne    c001e520 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e4ea:	51                   	push   ecx
c001e4eb:	53                   	push   ebx
c001e4ec:	55                   	push   ebp
c001e4ed:	56                   	push   esi
c001e4ee:	e8 91 fe ff ff       	call   c001e384 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e4f3:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001e4fa:	e8 c4 b4 fe ff       	call   c00099c3 <malloc>
c001e4ff:	89 c5                	mov    ebp,eax
c001e501:	89 04 24             	mov    DWORD PTR [esp],eax
c001e504:	e8 cf 10 00 00       	call   c001f5d8 <SATAPI::SATAPI()>
c001e509:	58                   	pop    eax
c001e50a:	5a                   	pop    edx
c001e50b:	55                   	push   ebp
c001e50c:	56                   	push   esi
c001e50d:	e8 f8 f9 fe ff       	call   c000df0a <Device::addChild(Device*)>
c001e512:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001e515:	56                   	push   esi
c001e516:	6a 00                	push   0x0
c001e518:	53                   	push   ebx
c001e519:	55                   	push   ebp
c001e51a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001e51d:	83 c4 20             	add    esp,0x20
c001e520:	d1 ef                	shr    edi,1
c001e522:	43                   	inc    ebx
c001e523:	83 fb 20             	cmp    ebx,0x20
c001e526:	0f 85 72 ff ff ff    	jne    c001e49e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001e52c:	83 c4 0c             	add    esp,0xc
c001e52f:	5b                   	pop    ebx
c001e530:	5e                   	pop    esi
c001e531:	5f                   	pop    edi
c001e532:	5d                   	pop    ebp
c001e533:	c3                   	ret    

c001e534 <SATABus::open(int, int, void*)>:
c001e534:	83 ec 14             	sub    esp,0x14
c001e537:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e53b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001e541:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e547:	52                   	push   edx
c001e548:	50                   	push   eax
c001e549:	e8 3c ff ff ff       	call   c001e48a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001e54e:	31 c0                	xor    eax,eax
c001e550:	83 c4 1c             	add    esp,0x1c
c001e553:	c3                   	ret    

c001e554 <ATA::close(int, int, void*)>:
c001e554:	83 ec 0c             	sub    esp,0xc
c001e557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e55b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e561:	85 c0                	test   eax,eax
c001e563:	74 0c                	je     c001e571 <ATA::close(int, int, void*)+0x1d>
c001e565:	83 ec 0c             	sub    esp,0xc
c001e568:	8b 10                	mov    edx,DWORD PTR [eax]
c001e56a:	50                   	push   eax
c001e56b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e56e:	83 c4 10             	add    esp,0x10
c001e571:	31 c0                	xor    eax,eax
c001e573:	83 c4 0c             	add    esp,0xc
c001e576:	c3                   	ret    
c001e577:	90                   	nop

c001e578 <ATA::powerSaving(PowerSavingLevel)>:
c001e578:	c3                   	ret    
c001e579:	90                   	nop

c001e57a <ATA::ATA()>:
c001e57a:	83 ec 0c             	sub    esp,0xc
c001e57d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e581:	83 ec 04             	sub    esp,0x4
c001e584:	68 00 02 00 00       	push   0x200
c001e589:	68 e9 51 02 c0       	push   0xc00251e9
c001e58e:	50                   	push   eax
c001e58f:	e8 ae fd fe ff       	call   c000e342 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e594:	83 c4 10             	add    esp,0x10
c001e597:	ba 6c 51 02 c0       	mov    edx,0xc002516c
c001e59c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5a0:	89 10                	mov    DWORD PTR [eax],edx
c001e5a2:	90                   	nop
c001e5a3:	83 c4 0c             	add    esp,0xc
c001e5a6:	c3                   	ret    
c001e5a7:	90                   	nop

c001e5a8 <ATA::flush(bool)>:
c001e5a8:	53                   	push   ebx
c001e5a9:	83 ec 08             	sub    esp,0x8
c001e5ac:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001e5b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e5b5:	19 c0                	sbb    eax,eax
c001e5b7:	83 e0 fd             	and    eax,0xfffffffd
c001e5ba:	05 ea 00 00 00       	add    eax,0xea
c001e5bf:	50                   	push   eax
c001e5c0:	6a 07                	push   0x7
c001e5c2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e5c9:	50                   	push   eax
c001e5ca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e5d0:	e8 5d f1 ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e5d5:	83 c4 0c             	add    esp,0xc
c001e5d8:	6a 00                	push   0x0
c001e5da:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e5e1:	50                   	push   eax
c001e5e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e5e8:	e8 dd fb ff ff       	call   c001e1ca <IDE::polling(unsigned char, unsigned int)>
c001e5ed:	83 c4 18             	add    esp,0x18
c001e5f0:	5b                   	pop    ebx
c001e5f1:	c3                   	ret    

c001e5f2 <ATA::readyForCommand()>:
c001e5f2:	56                   	push   esi
c001e5f3:	53                   	push   ebx
c001e5f4:	53                   	push   ebx
c001e5f5:	31 db                	xor    ebx,ebx
c001e5f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e5fb:	51                   	push   ecx
c001e5fc:	6a 0c                	push   0xc
c001e5fe:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e605:	50                   	push   eax
c001e606:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e60c:	e8 e1 f1 ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001e611:	83 c4 10             	add    esp,0x10
c001e614:	a8 88                	test   al,0x88
c001e616:	74 1f                	je     c001e637 <ATA::readyForCommand()+0x45>
c001e618:	43                   	inc    ebx
c001e619:	83 fb 63             	cmp    ebx,0x63
c001e61c:	7e dd                	jle    c001e5fb <ATA::readyForCommand()+0x9>
c001e61e:	83 ec 0c             	sub    esp,0xc
c001e621:	6a 0a                	push   0xa
c001e623:	e8 28 9c ff ff       	call   c0018250 <milliTenthSleep(unsigned int)>
c001e628:	83 c4 10             	add    esp,0x10
c001e62b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001e631:	75 c8                	jne    c001e5fb <ATA::readyForCommand()+0x9>
c001e633:	31 c0                	xor    eax,eax
c001e635:	eb 02                	jmp    c001e639 <ATA::readyForCommand()+0x47>
c001e637:	b0 01                	mov    al,0x1
c001e639:	5a                   	pop    edx
c001e63a:	5b                   	pop    ebx
c001e63b:	5e                   	pop    esi
c001e63c:	c3                   	ret    
c001e63d:	90                   	nop

c001e63e <ATA::access(unsigned long long, int, void*, bool)>:
c001e63e:	55                   	push   ebp
c001e63f:	57                   	push   edi
c001e640:	56                   	push   esi
c001e641:	53                   	push   ebx
c001e642:	83 ec 38             	sub    esp,0x38
c001e645:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001e649:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e64d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e651:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e655:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e659:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e65d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001e661:	68 18 51 02 c0       	push   0xc0025118
c001e666:	e8 58 e4 fe ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001e66b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e671:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e675:	83 c4 10             	add    esp,0x10
c001e678:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e67e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e682:	c1 e0 06             	shl    eax,0x6
c001e685:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001e68d:	74 5d                	je     c001e6ec <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001e68f:	89 fa                	mov    edx,edi
c001e691:	89 f0                	mov    eax,esi
c001e693:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001e697:	c1 ea 1c             	shr    edx,0x1c
c001e69a:	89 d1                	mov    ecx,edx
c001e69c:	09 c1                	or     ecx,eax
c001e69e:	74 25                	je     c001e6c5 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001e6a0:	31 ed                	xor    ebp,ebp
c001e6a2:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001e6a9:	89 fa                	mov    edx,edi
c001e6ab:	89 f0                	mov    eax,esi
c001e6ad:	0f ad d0             	shrd   eax,edx,cl
c001e6b0:	d3 ea                	shr    edx,cl
c001e6b2:	f6 c1 20             	test   cl,0x20
c001e6b5:	74 02                	je     c001e6b9 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001e6b7:	89 d0                	mov    eax,edx
c001e6b9:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001e6bd:	45                   	inc    ebp
c001e6be:	83 fd 06             	cmp    ebp,0x6
c001e6c1:	75 df                	jne    c001e6a2 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001e6c3:	eb 76                	jmp    c001e73b <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001e6c5:	89 f0                	mov    eax,esi
c001e6c7:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001e6cc:	89 fa                	mov    edx,edi
c001e6ce:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e6d5:	0f ac d0 10          	shrd   eax,edx,0x10
c001e6d9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e6de:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e6e2:	c1 ee 18             	shr    esi,0x18
c001e6e5:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e6ea:	eb 56                	jmp    c001e742 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e6ec:	6a 00                	push   0x0
c001e6ee:	6a 3f                	push   0x3f
c001e6f0:	57                   	push   edi
c001e6f1:	56                   	push   esi
c001e6f2:	e8 8d 29 00 00       	call   c0021084 <__umoddi3>
c001e6f7:	83 c4 10             	add    esp,0x10
c001e6fa:	40                   	inc    eax
c001e6fb:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001e6ff:	6a 00                	push   0x0
c001e701:	68 f0 03 00 00       	push   0x3f0
c001e706:	57                   	push   edi
c001e707:	56                   	push   esi
c001e708:	e8 77 28 00 00       	call   c0020f84 <__udivdi3>
c001e70d:	83 c4 10             	add    esp,0x10
c001e710:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001e715:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e71c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e721:	6a 00                	push   0x0
c001e723:	6a 3f                	push   0x3f
c001e725:	57                   	push   edi
c001e726:	56                   	push   esi
c001e727:	e8 58 28 00 00       	call   c0020f84 <__udivdi3>
c001e72c:	83 c4 10             	add    esp,0x10
c001e72f:	89 c6                	mov    esi,eax
c001e731:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e736:	83 e6 0f             	and    esi,0xf
c001e739:	eb 07                	jmp    c001e742 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e73b:	31 f6                	xor    esi,esi
c001e73d:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001e742:	bf 01 00 00 00       	mov    edi,0x1
c001e747:	50                   	push   eax
c001e748:	6a 00                	push   0x0
c001e74a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e751:	50                   	push   eax
c001e752:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e756:	e8 df f1 ff ff       	call   c001d93a <IDE::enableIRQs(unsigned char, bool)>
c001e75b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e75e:	e8 8f fe ff ff       	call   c001e5f2 <ATA::readyForCommand()>
c001e763:	83 c4 10             	add    esp,0x10
c001e766:	84 c0                	test   al,al
c001e768:	0f 84 bc 02 00 00    	je     c001ea2a <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e76e:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e774:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e77a:	c1 e0 04             	shl    eax,0x4
c001e77d:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001e784:	09 c6                	or     esi,eax
c001e786:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e78b:	75 05                	jne    c001e792 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001e78d:	83 ce a0             	or     esi,0xffffffa0
c001e790:	eb 03                	jmp    c001e795 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001e792:	83 ce e0             	or     esi,0xffffffe0
c001e795:	89 f0                	mov    eax,esi
c001e797:	0f b6 f0             	movzx  esi,al
c001e79a:	56                   	push   esi
c001e79b:	6a 06                	push   0x6
c001e79d:	51                   	push   ecx
c001e79e:	52                   	push   edx
c001e79f:	e8 8e ef ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7a4:	83 c4 10             	add    esp,0x10
c001e7a7:	6a 00                	push   0x0
c001e7a9:	6a 01                	push   0x1
c001e7ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7b2:	50                   	push   eax
c001e7b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7b9:	e8 74 ef ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7be:	83 c4 10             	add    esp,0x10
c001e7c1:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e7c6:	75 6e                	jne    c001e836 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001e7c8:	6a 00                	push   0x0
c001e7ca:	6a 08                	push   0x8
c001e7cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7d3:	50                   	push   eax
c001e7d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7da:	e8 53 ef ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7df:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001e7e4:	50                   	push   eax
c001e7e5:	6a 09                	push   0x9
c001e7e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7ee:	50                   	push   eax
c001e7ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7f5:	e8 38 ef ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7fa:	83 c4 20             	add    esp,0x20
c001e7fd:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e802:	50                   	push   eax
c001e803:	6a 0a                	push   0xa
c001e805:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e80c:	50                   	push   eax
c001e80d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e813:	e8 1a ef ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e818:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001e81d:	50                   	push   eax
c001e81e:	6a 0b                	push   0xb
c001e820:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e827:	50                   	push   eax
c001e828:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e82e:	e8 ff ee ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e833:	83 c4 20             	add    esp,0x20
c001e836:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001e83b:	50                   	push   eax
c001e83c:	6a 02                	push   0x2
c001e83e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e845:	50                   	push   eax
c001e846:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e84c:	e8 e1 ee ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e851:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001e856:	50                   	push   eax
c001e857:	6a 03                	push   0x3
c001e859:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e860:	50                   	push   eax
c001e861:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e867:	e8 c6 ee ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e86c:	83 c4 20             	add    esp,0x20
c001e86f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001e874:	50                   	push   eax
c001e875:	6a 04                	push   0x4
c001e877:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e87e:	50                   	push   eax
c001e87f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e885:	e8 a8 ee ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e88a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e88f:	50                   	push   eax
c001e890:	6a 05                	push   0x5
c001e892:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e899:	50                   	push   eax
c001e89a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8a0:	e8 8d ee ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e8a5:	83 c4 20             	add    esp,0x20
c001e8a8:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e8ad:	0f 94 c0             	sete   al
c001e8b0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e8b5:	74 09                	je     c001e8c0 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001e8b7:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001e8be:	eb 07                	jmp    c001e8c7 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001e8c0:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001e8c7:	0f b6 c0             	movzx  eax,al
c001e8ca:	50                   	push   eax
c001e8cb:	6a 07                	push   0x7
c001e8cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8d4:	50                   	push   eax
c001e8d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8db:	e8 52 ee ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e8e0:	c7 04 24 25 51 02 c0 	mov    DWORD PTR [esp],0xc0025125
c001e8e7:	e8 d7 e1 fe ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001e8ec:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001e8f0:	83 c4 10             	add    esp,0x10
c001e8f3:	85 f6                	test   esi,esi
c001e8f5:	0f 84 f7 00 00 00    	je     c001e9f2 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001e8fb:	83 ec 0c             	sub    esp,0xc
c001e8fe:	68 28 51 02 c0       	push   0xc0025128
c001e903:	e8 bb e1 fe ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001e908:	83 c4 0c             	add    esp,0xc
c001e90b:	6a 01                	push   0x1
c001e90d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e914:	50                   	push   eax
c001e915:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e91b:	e8 aa f8 ff ff       	call   c001e1ca <IDE::polling(unsigned char, unsigned int)>
c001e920:	c7 04 24 2b 51 02 c0 	mov    DWORD PTR [esp],0xc002512b
c001e927:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e92b:	e8 93 e1 fe ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001e930:	83 c4 10             	add    esp,0x10
c001e933:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e937:	84 c0                	test   al,al
c001e939:	74 2b                	je     c001e966 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001e93b:	0f b6 f8             	movzx  edi,al
c001e93e:	57                   	push   edi
c001e93f:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001e946:	50                   	push   eax
c001e947:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e94e:	50                   	push   eax
c001e94f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e955:	e8 c0 f7 ff ff       	call   c001e11a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e95a:	c7 04 24 2e 51 02 c0 	mov    DWORD PTR [esp],0xc002512e
c001e961:	e9 bc 00 00 00       	jmp    c001ea22 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001e966:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e96b:	74 50                	je     c001e9bd <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001e96d:	83 ec 0c             	sub    esp,0xc
c001e970:	31 ed                	xor    ebp,ebp
c001e972:	68 39 51 02 c0       	push   0xc0025139
c001e977:	e8 47 e1 fe ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001e97c:	83 c4 10             	add    esp,0x10
c001e97f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e983:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001e987:	50                   	push   eax
c001e988:	50                   	push   eax
c001e989:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e990:	50                   	push   eax
c001e991:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e997:	e8 84 ed ff ff       	call   c001d720 <IDE::getBase(unsigned char)>
c001e99c:	89 c2                	mov    edx,eax
c001e99e:	89 f8                	mov    eax,edi
c001e9a0:	66 ef                	out    dx,ax
c001e9a2:	45                   	inc    ebp
c001e9a3:	83 c4 10             	add    esp,0x10
c001e9a6:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001e9ac:	75 d1                	jne    c001e97f <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001e9ae:	83 ec 0c             	sub    esp,0xc
c001e9b1:	68 3c 51 02 c0       	push   0xc002513c
c001e9b6:	e8 08 e1 fe ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001e9bb:	eb 24                	jmp    c001e9e1 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001e9bd:	51                   	push   ecx
c001e9be:	51                   	push   ecx
c001e9bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e9c6:	50                   	push   eax
c001e9c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e9cd:	e8 4e ed ff ff       	call   c001d720 <IDE::getBase(unsigned char)>
c001e9d2:	b9 00 01 00 00       	mov    ecx,0x100
c001e9d7:	89 c2                	mov    edx,eax
c001e9d9:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001e9dd:	fc                   	cld    
c001e9de:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001e9e1:	83 c4 10             	add    esp,0x10
c001e9e4:	4e                   	dec    esi
c001e9e5:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001e9ed:	e9 01 ff ff ff       	jmp    c001e8f3 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001e9f2:	31 ff                	xor    edi,edi
c001e9f4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e9f9:	74 2f                	je     c001ea2a <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e9fb:	83 ec 0c             	sub    esp,0xc
c001e9fe:	68 3f 51 02 c0       	push   0xc002513f
c001ea03:	e8 bb e0 fe ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001ea08:	58                   	pop    eax
c001ea09:	31 c0                	xor    eax,eax
c001ea0b:	5a                   	pop    edx
c001ea0c:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001ea11:	0f 94 c0             	sete   al
c001ea14:	50                   	push   eax
c001ea15:	53                   	push   ebx
c001ea16:	e8 8d fb ff ff       	call   c001e5a8 <ATA::flush(bool)>
c001ea1b:	c7 04 24 42 51 02 c0 	mov    DWORD PTR [esp],0xc0025142
c001ea22:	e8 9c e0 fe ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001ea27:	83 c4 10             	add    esp,0x10
c001ea2a:	83 c4 2c             	add    esp,0x2c
c001ea2d:	89 f8                	mov    eax,edi
c001ea2f:	5b                   	pop    ebx
c001ea30:	5e                   	pop    esi
c001ea31:	5f                   	pop    edi
c001ea32:	5d                   	pop    ebp
c001ea33:	c3                   	ret    

c001ea34 <ATA::read(unsigned long long, int, void*)>:
c001ea34:	57                   	push   edi
c001ea35:	b8 04 00 00 00       	mov    eax,0x4
c001ea3a:	56                   	push   esi
c001ea3b:	53                   	push   ebx
c001ea3c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ea40:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ea44:	8d 7a ff             	lea    edi,[edx-0x1]
c001ea47:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ea4b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ea4f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ea55:	77 25                	ja     c001ea7c <ATA::read(unsigned long long, int, void*)+0x48>
c001ea57:	b8 06 00 00 00       	mov    eax,0x6
c001ea5c:	85 f6                	test   esi,esi
c001ea5e:	74 1c                	je     c001ea7c <ATA::read(unsigned long long, int, void*)+0x48>
c001ea60:	50                   	push   eax
c001ea61:	50                   	push   eax
c001ea62:	6a 00                	push   0x0
c001ea64:	56                   	push   esi
c001ea65:	52                   	push   edx
c001ea66:	53                   	push   ebx
c001ea67:	51                   	push   ecx
c001ea68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ea6c:	e8 cd fb ff ff       	call   c001e63e <ATA::access(unsigned long long, int, void*, bool)>
c001ea71:	83 c4 20             	add    esp,0x20
c001ea74:	85 c0                	test   eax,eax
c001ea76:	0f 95 c0             	setne  al
c001ea79:	0f b6 c0             	movzx  eax,al
c001ea7c:	5b                   	pop    ebx
c001ea7d:	5e                   	pop    esi
c001ea7e:	5f                   	pop    edi
c001ea7f:	c3                   	ret    

c001ea80 <ATA::write(unsigned long long, int, void*)>:
c001ea80:	55                   	push   ebp
c001ea81:	57                   	push   edi
c001ea82:	56                   	push   esi
c001ea83:	53                   	push   ebx
c001ea84:	83 ec 18             	sub    esp,0x18
c001ea87:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ea8b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ea8f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ea93:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001ea97:	68 45 51 02 c0       	push   0xc0025145
c001ea9c:	e8 22 e0 fe ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001eaa1:	8d 53 ff             	lea    edx,[ebx-0x1]
c001eaa4:	83 c4 10             	add    esp,0x10
c001eaa7:	b8 04 00 00 00       	mov    eax,0x4
c001eaac:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001eab2:	77 25                	ja     c001ead9 <ATA::write(unsigned long long, int, void*)+0x59>
c001eab4:	b8 06 00 00 00       	mov    eax,0x6
c001eab9:	85 f6                	test   esi,esi
c001eabb:	74 1c                	je     c001ead9 <ATA::write(unsigned long long, int, void*)+0x59>
c001eabd:	50                   	push   eax
c001eabe:	50                   	push   eax
c001eabf:	6a 01                	push   0x1
c001eac1:	56                   	push   esi
c001eac2:	53                   	push   ebx
c001eac3:	55                   	push   ebp
c001eac4:	57                   	push   edi
c001eac5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001eac9:	e8 70 fb ff ff       	call   c001e63e <ATA::access(unsigned long long, int, void*, bool)>
c001eace:	83 c4 20             	add    esp,0x20
c001ead1:	85 c0                	test   eax,eax
c001ead3:	0f 95 c0             	setne  al
c001ead6:	0f b6 c0             	movzx  eax,al
c001ead9:	83 c4 0c             	add    esp,0xc
c001eadc:	5b                   	pop    ebx
c001eadd:	5e                   	pop    esi
c001eade:	5f                   	pop    edi
c001eadf:	5d                   	pop    ebp
c001eae0:	c3                   	ret    
c001eae1:	90                   	nop

c001eae2 <ATA::detectCHS()>:
c001eae2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eae6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001eaec:	c1 e0 06             	shl    eax,0x6
c001eaef:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001eaf5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001eaff:	c7 44 24 04 51 51 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025151
c001eb07:	e9 79 58 ff ff       	jmp    c0014385 <Krnl::panic(char const*)>

c001eb0c <ATA::open(int, int, void*)>:
c001eb0c:	53                   	push   ebx
c001eb0d:	83 ec 08             	sub    esp,0x8
c001eb10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb14:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eb18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eb1c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001eb22:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001eb28:	c1 e0 06             	shl    eax,0x6
c001eb2b:	01 d0                	add    eax,edx
c001eb2d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001eb34:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001eb3a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001eb41:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001eb4b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001eb51:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001eb58:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001eb5f:	75 0c                	jne    c001eb6d <ATA::open(int, int, void*)+0x61>
c001eb61:	83 ec 0c             	sub    esp,0xc
c001eb64:	53                   	push   ebx
c001eb65:	e8 78 ff ff ff       	call   c001eae2 <ATA::detectCHS()>
c001eb6a:	83 c4 10             	add    esp,0x10
c001eb6d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001eb73:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001eb79:	c1 e0 06             	shl    eax,0x6
c001eb7c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001eb83:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001eb8d:	d1 e8                	shr    eax,1
c001eb8f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001eb95:	6a 04                	push   0x4
c001eb97:	6a 0c                	push   0xc
c001eb99:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eba0:	50                   	push   eax
c001eba1:	52                   	push   edx
c001eba2:	e8 8b eb ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eba7:	90                   	nop
c001eba8:	90                   	nop
c001eba9:	6a 00                	push   0x0
c001ebab:	6a 0c                	push   0xc
c001ebad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ebb4:	50                   	push   eax
c001ebb5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ebbb:	e8 72 eb ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebc0:	83 c4 14             	add    esp,0x14
c001ebc3:	53                   	push   ebx
c001ebc4:	e8 e1 f7 fe ff       	call   c000e3aa <PhysicalDisk::startCache()>
c001ebc9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ebcc:	e8 15 18 ff ff       	call   c00103e6 <createPartitionsForDisk(PhysicalDisk*)>
c001ebd1:	31 c0                	xor    eax,eax
c001ebd3:	83 c4 18             	add    esp,0x18
c001ebd6:	5b                   	pop    ebx
c001ebd7:	c3                   	ret    

c001ebd8 <ATAPI::write(unsigned long long, int, void*)>:
c001ebd8:	b8 03 00 00 00       	mov    eax,0x3
c001ebdd:	c3                   	ret    

c001ebde <ATAPI::close(int, int, void*)>:
c001ebde:	83 ec 0c             	sub    esp,0xc
c001ebe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebe5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ebeb:	85 c0                	test   eax,eax
c001ebed:	74 0c                	je     c001ebfb <ATAPI::close(int, int, void*)+0x1d>
c001ebef:	83 ec 0c             	sub    esp,0xc
c001ebf2:	8b 10                	mov    edx,DWORD PTR [eax]
c001ebf4:	50                   	push   eax
c001ebf5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ebf8:	83 c4 10             	add    esp,0x10
c001ebfb:	31 c0                	xor    eax,eax
c001ebfd:	83 c4 0c             	add    esp,0xc
c001ec00:	c3                   	ret    
c001ec01:	90                   	nop

c001ec02 <ATAPI::ATAPI()>:
c001ec02:	83 ec 0c             	sub    esp,0xc
c001ec05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec09:	83 ec 04             	sub    esp,0x4
c001ec0c:	68 00 08 00 00       	push   0x800
c001ec11:	68 89 52 02 c0       	push   0xc0025289
c001ec16:	50                   	push   eax
c001ec17:	e8 26 f7 fe ff       	call   c000e342 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ec1c:	83 c4 10             	add    esp,0x10
c001ec1f:	ba a4 51 02 c0       	mov    edx,0xc00251a4
c001ec24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec28:	89 10                	mov    DWORD PTR [eax],edx
c001ec2a:	90                   	nop
c001ec2b:	83 c4 0c             	add    esp,0xc
c001ec2e:	c3                   	ret    
c001ec2f:	90                   	nop

c001ec30 <ATAPI::readyForCommand()>:
c001ec30:	56                   	push   esi
c001ec31:	53                   	push   ebx
c001ec32:	53                   	push   ebx
c001ec33:	31 db                	xor    ebx,ebx
c001ec35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ec39:	51                   	push   ecx
c001ec3a:	6a 0c                	push   0xc
c001ec3c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ec43:	50                   	push   eax
c001ec44:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ec4a:	e8 a3 eb ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001ec4f:	83 c4 10             	add    esp,0x10
c001ec52:	a8 88                	test   al,0x88
c001ec54:	74 1f                	je     c001ec75 <ATAPI::readyForCommand()+0x45>
c001ec56:	43                   	inc    ebx
c001ec57:	83 fb 63             	cmp    ebx,0x63
c001ec5a:	7e dd                	jle    c001ec39 <ATAPI::readyForCommand()+0x9>
c001ec5c:	83 ec 0c             	sub    esp,0xc
c001ec5f:	6a 0a                	push   0xa
c001ec61:	e8 ea 95 ff ff       	call   c0018250 <milliTenthSleep(unsigned int)>
c001ec66:	83 c4 10             	add    esp,0x10
c001ec69:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ec6f:	75 c8                	jne    c001ec39 <ATAPI::readyForCommand()+0x9>
c001ec71:	31 c0                	xor    eax,eax
c001ec73:	eb 02                	jmp    c001ec77 <ATAPI::readyForCommand()+0x47>
c001ec75:	b0 01                	mov    al,0x1
c001ec77:	5a                   	pop    edx
c001ec78:	5b                   	pop    ebx
c001ec79:	5e                   	pop    esi
c001ec7a:	c3                   	ret    
c001ec7b:	90                   	nop

c001ec7c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ec7c:	55                   	push   ebp
c001ec7d:	57                   	push   edi
c001ec7e:	56                   	push   esi
c001ec7f:	53                   	push   ebx
c001ec80:	83 ec 20             	sub    esp,0x20
c001ec83:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ec87:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ec8b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ec8f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec93:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ec97:	6a 01                	push   0x1
c001ec99:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eca0:	50                   	push   eax
c001eca1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eca7:	e8 8e ec ff ff       	call   c001d93a <IDE::enableIRQs(unsigned char, bool)>
c001ecac:	5e                   	pop    esi
c001ecad:	58                   	pop    eax
c001ecae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecb5:	50                   	push   eax
c001ecb6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ecbc:	e8 4b ea ff ff       	call   c001d70c <IDE::prepareInterrupt(unsigned char)>
c001ecc1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ecc4:	e8 67 ff ff ff       	call   c001ec30 <ATAPI::readyForCommand()>
c001ecc9:	83 c4 10             	add    esp,0x10
c001eccc:	84 c0                	test   al,al
c001ecce:	75 0a                	jne    c001ecda <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001ecd0:	bb 01 00 00 00       	mov    ebx,0x1
c001ecd5:	e9 57 02 00 00       	jmp    c001ef31 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ecda:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001ece0:	c1 e0 04             	shl    eax,0x4
c001ece3:	0f b6 c0             	movzx  eax,al
c001ece6:	50                   	push   eax
c001ece7:	6a 06                	push   0x6
c001ece9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecf0:	50                   	push   eax
c001ecf1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ecf7:	e8 36 ea ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecfc:	6a 00                	push   0x0
c001ecfe:	6a 01                	push   0x1
c001ed00:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed07:	50                   	push   eax
c001ed08:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed0e:	e8 1f ea ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed13:	83 c4 20             	add    esp,0x20
c001ed16:	0f b6 c3             	movzx  eax,bl
c001ed19:	0f b6 df             	movzx  ebx,bh
c001ed1c:	50                   	push   eax
c001ed1d:	6a 04                	push   0x4
c001ed1f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed26:	50                   	push   eax
c001ed27:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed2d:	e8 00 ea ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed32:	53                   	push   ebx
c001ed33:	6a 05                	push   0x5
c001ed35:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed3c:	50                   	push   eax
c001ed3d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed43:	e8 ea e9 ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed48:	83 c4 20             	add    esp,0x20
c001ed4b:	68 a0 00 00 00       	push   0xa0
c001ed50:	6a 07                	push   0x7
c001ed52:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed59:	50                   	push   eax
c001ed5a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed60:	e8 cd e9 ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed65:	83 c4 0c             	add    esp,0xc
c001ed68:	6a 01                	push   0x1
c001ed6a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed71:	50                   	push   eax
c001ed72:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed78:	e8 4d f4 ff ff       	call   c001e1ca <IDE::polling(unsigned char, unsigned int)>
c001ed7d:	83 c4 10             	add    esp,0x10
c001ed80:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001ed86:	84 c0                	test   al,al
c001ed88:	74 23                	je     c001edad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ed8a:	0f b6 d8             	movzx  ebx,al
c001ed8d:	0f b6 d2             	movzx  edx,dl
c001ed90:	53                   	push   ebx
c001ed91:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001ed98:	50                   	push   eax
c001ed99:	52                   	push   edx
c001ed9a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eda0:	e8 75 f3 ff ff       	call   c001e11a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001eda5:	83 c4 10             	add    esp,0x10
c001eda8:	e9 84 01 00 00       	jmp    c001ef31 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001edad:	0f b6 d2             	movzx  edx,dl
c001edb0:	53                   	push   ebx
c001edb1:	53                   	push   ebx
c001edb2:	52                   	push   edx
c001edb3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001edb9:	e8 62 e9 ff ff       	call   c001d720 <IDE::getBase(unsigned char)>
c001edbe:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001edc2:	b9 06 00 00 00       	mov    ecx,0x6
c001edc7:	89 c2                	mov    edx,eax
c001edc9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001edcc:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001edd0:	83 c4 10             	add    esp,0x10
c001edd3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001edd9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ede0:	85 db                	test   ebx,ebx
c001ede2:	0f 84 ec 00 00 00    	je     c001eed4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001ede8:	51                   	push   ecx
c001ede9:	51                   	push   ecx
c001edea:	52                   	push   edx
c001edeb:	50                   	push   eax
c001edec:	e8 af ea ff ff       	call   c001d8a0 <IDE::waitInterrupt(unsigned char)>
c001edf1:	83 c4 10             	add    esp,0x10
c001edf4:	84 c0                	test   al,al
c001edf6:	0f 84 d4 fe ff ff    	je     c001ecd0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001edfc:	56                   	push   esi
c001edfd:	56                   	push   esi
c001edfe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee05:	50                   	push   eax
c001ee06:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee0c:	e8 fb e8 ff ff       	call   c001d70c <IDE::prepareInterrupt(unsigned char)>
c001ee11:	83 c4 0c             	add    esp,0xc
c001ee14:	6a 04                	push   0x4
c001ee16:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee1d:	50                   	push   eax
c001ee1e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee24:	e8 c9 e9 ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001ee29:	83 c4 0c             	add    esp,0xc
c001ee2c:	89 c6                	mov    esi,eax
c001ee2e:	6a 05                	push   0x5
c001ee30:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee37:	50                   	push   eax
c001ee38:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee3e:	e8 af e9 ff ff       	call   c001d7f2 <IDE::read(unsigned char, unsigned char)>
c001ee43:	89 f1                	mov    ecx,esi
c001ee45:	0f b6 c0             	movzx  eax,al
c001ee48:	0f b6 f1             	movzx  esi,cl
c001ee4b:	c1 e0 08             	shl    eax,0x8
c001ee4e:	09 c6                	or     esi,eax
c001ee50:	d1 fe                	sar    esi,1
c001ee52:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ee56:	83 c4 10             	add    esp,0x10
c001ee59:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ee5e:	74 41                	je     c001eea1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ee60:	31 c9                	xor    ecx,ecx
c001ee62:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ee68:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ee6f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ee73:	75 0a                	jne    c001ee7f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ee75:	01 c9                	add    ecx,ecx
c001ee77:	01 cd                	add    ebp,ecx
c001ee79:	4b                   	dec    ebx
c001ee7a:	e9 54 ff ff ff       	jmp    c001edd3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ee7f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ee84:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ee88:	51                   	push   ecx
c001ee89:	51                   	push   ecx
c001ee8a:	52                   	push   edx
c001ee8b:	50                   	push   eax
c001ee8c:	e8 8f e8 ff ff       	call   c001d720 <IDE::getBase(unsigned char)>
c001ee91:	89 c2                	mov    edx,eax
c001ee93:	89 f0                	mov    eax,esi
c001ee95:	66 ef                	out    dx,ax
c001ee97:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ee9b:	83 c4 10             	add    esp,0x10
c001ee9e:	41                   	inc    ecx
c001ee9f:	eb c1                	jmp    c001ee62 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001eea1:	31 f6                	xor    esi,esi
c001eea3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001eea9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001eeb0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001eeb4:	75 06                	jne    c001eebc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001eeb6:	01 f6                	add    esi,esi
c001eeb8:	01 f5                	add    ebp,esi
c001eeba:	eb bd                	jmp    c001ee79 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001eebc:	51                   	push   ecx
c001eebd:	51                   	push   ecx
c001eebe:	52                   	push   edx
c001eebf:	50                   	push   eax
c001eec0:	e8 5b e8 ff ff       	call   c001d720 <IDE::getBase(unsigned char)>
c001eec5:	89 c2                	mov    edx,eax
c001eec7:	66 ed                	in     ax,dx
c001eec9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001eece:	83 c4 10             	add    esp,0x10
c001eed1:	46                   	inc    esi
c001eed2:	eb cf                	jmp    c001eea3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001eed4:	51                   	push   ecx
c001eed5:	51                   	push   ecx
c001eed6:	52                   	push   edx
c001eed7:	50                   	push   eax
c001eed8:	e8 c3 e9 ff ff       	call   c001d8a0 <IDE::waitInterrupt(unsigned char)>
c001eedd:	83 c4 10             	add    esp,0x10
c001eee0:	84 c0                	test   al,al
c001eee2:	0f 84 e8 fd ff ff    	je     c001ecd0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001eee8:	bb a0 86 01 00       	mov    ebx,0x186a0
c001eeed:	52                   	push   edx
c001eeee:	52                   	push   edx
c001eeef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eef6:	50                   	push   eax
c001eef7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eefd:	e8 0a e8 ff ff       	call   c001d70c <IDE::prepareInterrupt(unsigned char)>
c001ef02:	83 c4 10             	add    esp,0x10
c001ef05:	50                   	push   eax
c001ef06:	50                   	push   eax
c001ef07:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ef0e:	50                   	push   eax
c001ef0f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ef15:	e8 06 e8 ff ff       	call   c001d720 <IDE::getBase(unsigned char)>
c001ef1a:	8d 50 07             	lea    edx,[eax+0x7]
c001ef1d:	ec                   	in     al,dx
c001ef1e:	83 c4 10             	add    esp,0x10
c001ef21:	a8 88                	test   al,0x88
c001ef23:	74 0a                	je     c001ef2f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001ef25:	4b                   	dec    ebx
c001ef26:	75 dd                	jne    c001ef05 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001ef28:	bb 02 00 00 00       	mov    ebx,0x2
c001ef2d:	eb 02                	jmp    c001ef31 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ef2f:	31 db                	xor    ebx,ebx
c001ef31:	83 c4 1c             	add    esp,0x1c
c001ef34:	89 d8                	mov    eax,ebx
c001ef36:	5b                   	pop    ebx
c001ef37:	5e                   	pop    esi
c001ef38:	5f                   	pop    edi
c001ef39:	5d                   	pop    ebp
c001ef3a:	c3                   	ret    
c001ef3b:	90                   	nop

c001ef3c <ATAPI::diskRemoved()>:
c001ef3c:	83 ec 18             	sub    esp,0x18
c001ef3f:	68 95 52 02 c0       	push   0xc0025295
c001ef44:	e8 7a db fe ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001ef49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef4d:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001ef54:	83 c4 1c             	add    esp,0x1c
c001ef57:	c3                   	ret    

c001ef58 <ATAPI::eject()>:
c001ef58:	57                   	push   edi
c001ef59:	b9 03 00 00 00       	mov    ecx,0x3
c001ef5e:	53                   	push   ebx
c001ef5f:	83 ec 14             	sub    esp,0x14
c001ef62:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ef66:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ef6a:	fc                   	cld    
c001ef6b:	31 c0                	xor    eax,eax
c001ef6d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ef6f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ef74:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ef79:	50                   	push   eax
c001ef7a:	50                   	push   eax
c001ef7b:	6a 00                	push   0x0
c001ef7d:	6a 00                	push   0x0
c001ef7f:	6a 00                	push   0x0
c001ef81:	6a 02                	push   0x2
c001ef83:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ef87:	50                   	push   eax
c001ef88:	53                   	push   ebx
c001ef89:	e8 ee fc ff ff       	call   c001ec7c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ef8e:	83 c4 14             	add    esp,0x14
c001ef91:	53                   	push   ebx
c001ef92:	e8 a5 ff ff ff       	call   c001ef3c <ATAPI::diskRemoved()>
c001ef97:	83 c4 24             	add    esp,0x24
c001ef9a:	31 c0                	xor    eax,eax
c001ef9c:	5b                   	pop    ebx
c001ef9d:	5f                   	pop    edi
c001ef9e:	c3                   	ret    
c001ef9f:	90                   	nop

c001efa0 <ATAPI::diskInserted()>:
c001efa0:	53                   	push   ebx
c001efa1:	83 ec 14             	sub    esp,0x14
c001efa4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001efa8:	68 ac 52 02 c0       	push   0xc00252ac
c001efad:	e8 11 db fe ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001efb2:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001efb9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001efbc:	e8 e9 f3 fe ff       	call   c000e3aa <PhysicalDisk::startCache()>
c001efc1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001efc5:	83 c4 18             	add    esp,0x18
c001efc8:	5b                   	pop    ebx
c001efc9:	e9 18 14 ff ff       	jmp    c00103e6 <createPartitionsForDisk(PhysicalDisk*)>

c001efce <ATAPI::detectMedia()>:
c001efce:	56                   	push   esi
c001efcf:	53                   	push   ebx
c001efd0:	83 ec 28             	sub    esp,0x28
c001efd3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001efd7:	6a 0c                	push   0xc
c001efd9:	6a 00                	push   0x0
c001efdb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001efdf:	56                   	push   esi
c001efe0:	e8 9f 16 fe ff       	call   c0000684 <memset>
c001efe5:	58                   	pop    eax
c001efe6:	5a                   	pop    edx
c001efe7:	6a 00                	push   0x0
c001efe9:	6a 00                	push   0x0
c001efeb:	6a 00                	push   0x0
c001efed:	6a 00                	push   0x0
c001efef:	56                   	push   esi
c001eff0:	53                   	push   ebx
c001eff1:	e8 86 fc ff ff       	call   c001ec7c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001eff6:	83 c4 1c             	add    esp,0x1c
c001eff9:	6a 0c                	push   0xc
c001effb:	6a 00                	push   0x0
c001effd:	56                   	push   esi
c001effe:	e8 81 16 fe ff       	call   c0000684 <memset>
c001f003:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f008:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f00d:	59                   	pop    ecx
c001f00e:	58                   	pop    eax
c001f00f:	6a 01                	push   0x1
c001f011:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f015:	50                   	push   eax
c001f016:	6a 00                	push   0x0
c001f018:	6a 12                	push   0x12
c001f01a:	56                   	push   esi
c001f01b:	53                   	push   ebx
c001f01c:	e8 5b fc ff ff       	call   c001ec7c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f021:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f025:	83 c4 20             	add    esp,0x20
c001f028:	83 e0 7f             	and    eax,0x7f
c001f02b:	3c 70                	cmp    al,0x70
c001f02d:	74 15                	je     c001f044 <ATAPI::detectMedia()+0x76>
c001f02f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f036:	75 0c                	jne    c001f044 <ATAPI::detectMedia()+0x76>
c001f038:	83 ec 0c             	sub    esp,0xc
c001f03b:	53                   	push   ebx
c001f03c:	e8 5f ff ff ff       	call   c001efa0 <ATAPI::diskInserted()>
c001f041:	83 c4 10             	add    esp,0x10
c001f044:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f048:	83 e0 0f             	and    eax,0xf
c001f04b:	3c 02                	cmp    al,0x2
c001f04d:	75 1b                	jne    c001f06a <ATAPI::detectMedia()+0x9c>
c001f04f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f054:	75 2d                	jne    c001f083 <ATAPI::detectMedia()+0xb5>
c001f056:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f05d:	74 24                	je     c001f083 <ATAPI::detectMedia()+0xb5>
c001f05f:	83 ec 0c             	sub    esp,0xc
c001f062:	53                   	push   ebx
c001f063:	e8 d4 fe ff ff       	call   c001ef3c <ATAPI::diskRemoved()>
c001f068:	eb 16                	jmp    c001f080 <ATAPI::detectMedia()+0xb2>
c001f06a:	84 c0                	test   al,al
c001f06c:	75 15                	jne    c001f083 <ATAPI::detectMedia()+0xb5>
c001f06e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f075:	75 0c                	jne    c001f083 <ATAPI::detectMedia()+0xb5>
c001f077:	83 ec 0c             	sub    esp,0xc
c001f07a:	53                   	push   ebx
c001f07b:	e8 20 ff ff ff       	call   c001efa0 <ATAPI::diskInserted()>
c001f080:	83 c4 10             	add    esp,0x10
c001f083:	83 c4 24             	add    esp,0x24
c001f086:	5b                   	pop    ebx
c001f087:	5e                   	pop    esi
c001f088:	c3                   	ret    
c001f089:	90                   	nop

c001f08a <ATAPI::open(int, int, void*)>:
c001f08a:	53                   	push   ebx
c001f08b:	83 ec 08             	sub    esp,0x8
c001f08e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f096:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f09a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f0a0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f0a6:	c1 e0 06             	shl    eax,0x6
c001f0a9:	01 d0                	add    eax,edx
c001f0ab:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001f0b2:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001f0b8:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001f0bf:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f0c9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f0cf:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f0d6:	6a 04                	push   0x4
c001f0d8:	6a 0c                	push   0xc
c001f0da:	51                   	push   ecx
c001f0db:	52                   	push   edx
c001f0dc:	e8 51 e6 ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f0e1:	90                   	nop
c001f0e2:	90                   	nop
c001f0e3:	6a 00                	push   0x0
c001f0e5:	6a 0c                	push   0xc
c001f0e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f0ee:	50                   	push   eax
c001f0ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f0f5:	e8 38 e6 ff ff       	call   c001d732 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f0fa:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f101:	83 c4 14             	add    esp,0x14
c001f104:	53                   	push   ebx
c001f105:	e8 c4 fe ff ff       	call   c001efce <ATAPI::detectMedia()>
c001f10a:	31 c0                	xor    eax,eax
c001f10c:	83 c4 18             	add    esp,0x18
c001f10f:	5b                   	pop    ebx
c001f110:	c3                   	ret    
c001f111:	90                   	nop

c001f112 <ATAPI::read(unsigned long long, int, void*)>:
c001f112:	55                   	push   ebp
c001f113:	57                   	push   edi
c001f114:	56                   	push   esi
c001f115:	53                   	push   ebx
c001f116:	83 ec 1c             	sub    esp,0x1c
c001f119:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f11d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f121:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001f125:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f12c:	74 41                	je     c001f16f <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001f12e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f132:	b9 03 00 00 00       	mov    ecx,0x3
c001f137:	fc                   	cld    
c001f138:	31 c0                	xor    eax,eax
c001f13a:	86 fb                	xchg   bl,bh
c001f13c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f13e:	c1 c3 10             	rol    ebx,0x10
c001f141:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f146:	89 e8                	mov    eax,ebp
c001f148:	86 fb                	xchg   bl,bh
c001f14a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f14e:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001f152:	50                   	push   eax
c001f153:	50                   	push   eax
c001f154:	55                   	push   ebp
c001f155:	c1 e5 0b             	shl    ebp,0xb
c001f158:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f15c:	6a 00                	push   0x0
c001f15e:	55                   	push   ebp
c001f15f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f163:	50                   	push   eax
c001f164:	56                   	push   esi
c001f165:	e8 12 fb ff ff       	call   c001ec7c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f16a:	83 c4 20             	add    esp,0x20
c001f16d:	eb 1a                	jmp    c001f189 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001f16f:	83 ec 0c             	sub    esp,0xc
c001f172:	56                   	push   esi
c001f173:	e8 56 fe ff ff       	call   c001efce <ATAPI::detectMedia()>
c001f178:	83 c4 10             	add    esp,0x10
c001f17b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f182:	75 aa                	jne    c001f12e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001f184:	b8 02 00 00 00       	mov    eax,0x2
c001f189:	83 c4 1c             	add    esp,0x1c
c001f18c:	5b                   	pop    ebx
c001f18d:	5e                   	pop    esi
c001f18e:	5f                   	pop    edi
c001f18f:	5d                   	pop    ebp
c001f190:	c3                   	ret    
c001f191:	90                   	nop

c001f192 <SATA::close(int, int, void*)>:
c001f192:	83 ec 0c             	sub    esp,0xc
c001f195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f199:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f19f:	85 c0                	test   eax,eax
c001f1a1:	74 0c                	je     c001f1af <SATA::close(int, int, void*)+0x1d>
c001f1a3:	83 ec 0c             	sub    esp,0xc
c001f1a6:	8b 10                	mov    edx,DWORD PTR [eax]
c001f1a8:	50                   	push   eax
c001f1a9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f1ac:	83 c4 10             	add    esp,0x10
c001f1af:	31 c0                	xor    eax,eax
c001f1b1:	83 c4 0c             	add    esp,0xc
c001f1b4:	c3                   	ret    
c001f1b5:	90                   	nop

c001f1b6 <SATA::powerSaving(PowerSavingLevel)>:
c001f1b6:	c3                   	ret    
c001f1b7:	90                   	nop

c001f1b8 <SATA::open(int, int, void*)>:
c001f1b8:	56                   	push   esi
c001f1b9:	53                   	push   ebx
c001f1ba:	50                   	push   eax
c001f1bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f1bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f1c3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f1cd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f1d3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f1dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f1e1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f1eb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f1f1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f1f8:	e8 ed ab fe ff       	call   c0009dea <Phys::allocatePage()>
c001f1fd:	89 c6                	mov    esi,eax
c001f1ff:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f205:	81 c6 00 10 00 00    	add    esi,0x1000
c001f20b:	e8 da ab fe ff       	call   c0009dea <Phys::allocatePage()>
c001f210:	39 c6                	cmp    esi,eax
c001f212:	74 10                	je     c001f224 <SATA::open(int, int, void*)+0x6c>
c001f214:	83 ec 0c             	sub    esp,0xc
c001f217:	68 d4 51 02 c0       	push   0xc00251d4
c001f21c:	e8 64 51 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001f221:	83 c4 10             	add    esp,0x10
c001f224:	83 ec 0c             	sub    esp,0xc
c001f227:	6a 02                	push   0x2
c001f229:	e8 c3 c4 fe ff       	call   c000b6f1 <Virt::allocateKernelVirtualPages(int)>
c001f22e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f234:	6a 03                	push   0x3
c001f236:	50                   	push   eax
c001f237:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001f23d:	ff 35 b0 65 02 c0    	push   DWORD PTR ds:0xc00265b0
c001f243:	e8 50 cb fe ff       	call   c000bd98 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f248:	83 c4 14             	add    esp,0x14
c001f24b:	53                   	push   ebx
c001f24c:	e8 59 f1 fe ff       	call   c000e3aa <PhysicalDisk::startCache()>
c001f251:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f254:	e8 8d 11 ff ff       	call   c00103e6 <createPartitionsForDisk(PhysicalDisk*)>
c001f259:	83 c4 14             	add    esp,0x14
c001f25c:	31 c0                	xor    eax,eax
c001f25e:	5b                   	pop    ebx
c001f25f:	5e                   	pop    esi
c001f260:	c3                   	ret    
c001f261:	90                   	nop

c001f262 <SATA::SATA()>:
c001f262:	83 ec 0c             	sub    esp,0xc
c001f265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f269:	83 ec 04             	sub    esp,0x4
c001f26c:	68 00 02 00 00       	push   0x200
c001f271:	68 e8 51 02 c0       	push   0xc00251e8
c001f276:	50                   	push   eax
c001f277:	e8 c6 f0 fe ff       	call   c000e342 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f27c:	83 c4 10             	add    esp,0x10
c001f27f:	ba 58 52 02 c0       	mov    edx,0xc0025258
c001f284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f288:	89 10                	mov    DWORD PTR [eax],edx
c001f28a:	90                   	nop
c001f28b:	83 c4 0c             	add    esp,0xc
c001f28e:	c3                   	ret    
c001f28f:	90                   	nop

c001f290 <SATA::access(unsigned long long, int, void*, bool)>:
c001f290:	55                   	push   ebp
c001f291:	57                   	push   edi
c001f292:	56                   	push   esi
c001f293:	53                   	push   ebx
c001f294:	83 ec 2c             	sub    esp,0x2c
c001f297:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f29b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f29f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f2a3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f2a7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f2ab:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001f2b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f2b4:	7e 10                	jle    c001f2c6 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001f2b6:	83 ec 0c             	sub    esp,0xc
c001f2b9:	68 f8 51 02 c0       	push   0xc00251f8
c001f2be:	e8 c2 50 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001f2c3:	83 c4 10             	add    esp,0x10
c001f2c6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f2cc:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001f2d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f2d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f2dc:	89 d0                	mov    eax,edx
c001f2de:	c1 e0 07             	shl    eax,0x7
c001f2e1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f2e5:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f2ef:	51                   	push   ecx
c001f2f0:	8d 42 02             	lea    eax,[edx+0x2]
c001f2f3:	51                   	push   ecx
c001f2f4:	c1 e0 07             	shl    eax,0x7
c001f2f7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f2fb:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f2ff:	50                   	push   eax
c001f300:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001f306:	e8 9f ef ff ff       	call   c001e2aa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f30b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f30f:	83 c4 10             	add    esp,0x10
c001f312:	b8 01 00 00 00       	mov    eax,0x1
c001f317:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f31c:	0f 84 cb 01 00 00    	je     c001f4ed <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f322:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f326:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f32a:	c1 e0 09             	shl    eax,0x9
c001f32d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f332:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f336:	74 0e                	je     c001f346 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c001f338:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001f33e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f342:	89 c1                	mov    ecx,eax
c001f344:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f346:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f34a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f350:	8d 42 02             	lea    eax,[edx+0x2]
c001f353:	c1 e0 07             	shl    eax,0x7
c001f356:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f35a:	8b 00                	mov    eax,DWORD PTR [eax]
c001f35c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f362:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f368:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f36c:	c1 e1 05             	shl    ecx,0x5
c001f36f:	01 c8                	add    eax,ecx
c001f371:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001f375:	83 e1 01             	and    ecx,0x1
c001f378:	89 ce                	mov    esi,ecx
c001f37a:	8a 08                	mov    cl,BYTE PTR [eax]
c001f37c:	c1 e6 06             	shl    esi,0x6
c001f37f:	83 e1 bf             	and    ecx,0xffffffbf
c001f382:	09 f1                	or     ecx,esi
c001f384:	88 08                	mov    BYTE PTR [eax],cl
c001f386:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f388:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001f38e:	81 c9 05 00 01 00    	or     ecx,0x10005
c001f394:	89 08                	mov    DWORD PTR [eax],ecx
c001f396:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f39c:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001f3a2:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001f3a8:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001f3ab:	50                   	push   eax
c001f3ac:	68 90 00 00 00       	push   0x90
c001f3b1:	6a 00                	push   0x0
c001f3b3:	56                   	push   esi
c001f3b4:	e8 cb 12 fe ff       	call   c0000684 <memset>
c001f3b9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f3bf:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001f3c3:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001f3c9:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001f3cd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f3d1:	83 c4 10             	add    esp,0x10
c001f3d4:	48                   	dec    eax
c001f3d5:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f3da:	89 c1                	mov    ecx,eax
c001f3dc:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001f3e2:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f3e7:	09 c8                	or     eax,ecx
c001f3e9:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001f3ef:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f3f2:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001f3f9:	66 25 00 7f          	and    ax,0x7f00
c001f3fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f401:	66 0d 27 80          	or     ax,0x8027
c001f405:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001f40a:	66 89 06             	mov    WORD PTR [esi],ax
c001f40d:	19 c0                	sbb    eax,eax
c001f40f:	83 e0 f0             	and    eax,0xfffffff0
c001f412:	83 c0 35             	add    eax,0x35
c001f415:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001f418:	89 e8                	mov    eax,ebp
c001f41a:	c1 e8 10             	shr    eax,0x10
c001f41d:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001f420:	89 e8                	mov    eax,ebp
c001f422:	c1 e8 18             	shr    eax,0x18
c001f425:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001f428:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f42c:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001f42f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f433:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001f436:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f43a:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001f43e:	89 d6                	mov    esi,edx
c001f440:	31 c0                	xor    eax,eax
c001f442:	c1 e6 07             	shl    esi,0x7
c001f445:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001f449:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001f44f:	80 e1 88             	and    cl,0x88
c001f452:	74 0a                	je     c001f45e <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c001f454:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f459:	74 0a                	je     c001f465 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c001f45b:	40                   	inc    eax
c001f45c:	eb eb                	jmp    c001f449 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c001f45e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f463:	75 0a                	jne    c001f46f <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001f465:	83 ec 0c             	sub    esp,0xc
c001f468:	68 31 52 02 c0       	push   0xc0025231
c001f46d:	eb 56                	jmp    c001f4c5 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c001f46f:	b8 01 00 00 00       	mov    eax,0x1
c001f474:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f478:	c1 e2 07             	shl    edx,0x7
c001f47b:	d3 e0                	shl    eax,cl
c001f47d:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001f481:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001f487:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001f48d:	85 c8                	test   eax,ecx
c001f48f:	74 20                	je     c001f4b1 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c001f491:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001f497:	0f ba e1 1e          	bt     ecx,0x1e
c001f49b:	73 ea                	jae    c001f487 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c001f49d:	83 ec 0c             	sub    esp,0xc
c001f4a0:	68 3f 52 02 c0       	push   0xc002523f
c001f4a5:	e8 db 4e ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001f4aa:	83 c4 10             	add    esp,0x10
c001f4ad:	31 c0                	xor    eax,eax
c001f4af:	eb 3c                	jmp    c001f4ed <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f4b1:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001f4b7:	0f ba e0 1e          	bt     eax,0x1e
c001f4bb:	73 17                	jae    c001f4d4 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001f4bd:	83 ec 0c             	sub    esp,0xc
c001f4c0:	68 3f 52 02 c0       	push   0xc002523f
c001f4c5:	e8 bb 4e ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001f4ca:	83 c4 10             	add    esp,0x10
c001f4cd:	b8 01 00 00 00       	mov    eax,0x1
c001f4d2:	eb 19                	jmp    c001f4ed <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f4d4:	31 c0                	xor    eax,eax
c001f4d6:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f4db:	75 10                	jne    c001f4ed <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f4dd:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001f4e3:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001f4e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f4eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f4ed:	83 c4 2c             	add    esp,0x2c
c001f4f0:	5b                   	pop    ebx
c001f4f1:	5e                   	pop    esi
c001f4f2:	5f                   	pop    edi
c001f4f3:	5d                   	pop    ebp
c001f4f4:	c3                   	ret    
c001f4f5:	90                   	nop

c001f4f6 <SATA::read(unsigned long long, int, void*)>:
c001f4f6:	57                   	push   edi
c001f4f7:	b8 04 00 00 00       	mov    eax,0x4
c001f4fc:	56                   	push   esi
c001f4fd:	53                   	push   ebx
c001f4fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f502:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f506:	8d 7a ff             	lea    edi,[edx-0x1]
c001f509:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f50d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f511:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f517:	77 25                	ja     c001f53e <SATA::read(unsigned long long, int, void*)+0x48>
c001f519:	b8 06 00 00 00       	mov    eax,0x6
c001f51e:	85 f6                	test   esi,esi
c001f520:	74 1c                	je     c001f53e <SATA::read(unsigned long long, int, void*)+0x48>
c001f522:	50                   	push   eax
c001f523:	50                   	push   eax
c001f524:	6a 00                	push   0x0
c001f526:	56                   	push   esi
c001f527:	52                   	push   edx
c001f528:	53                   	push   ebx
c001f529:	51                   	push   ecx
c001f52a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f52e:	e8 5d fd ff ff       	call   c001f290 <SATA::access(unsigned long long, int, void*, bool)>
c001f533:	83 c4 20             	add    esp,0x20
c001f536:	85 c0                	test   eax,eax
c001f538:	0f 95 c0             	setne  al
c001f53b:	0f b6 c0             	movzx  eax,al
c001f53e:	5b                   	pop    ebx
c001f53f:	5e                   	pop    esi
c001f540:	5f                   	pop    edi
c001f541:	c3                   	ret    

c001f542 <SATA::write(unsigned long long, int, void*)>:
c001f542:	55                   	push   ebp
c001f543:	b8 04 00 00 00       	mov    eax,0x4
c001f548:	57                   	push   edi
c001f549:	56                   	push   esi
c001f54a:	53                   	push   ebx
c001f54b:	83 ec 0c             	sub    esp,0xc
c001f54e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f552:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f556:	8d 73 ff             	lea    esi,[ebx-0x1]
c001f559:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001f55d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f561:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001f567:	77 3d                	ja     c001f5a6 <SATA::write(unsigned long long, int, void*)+0x64>
c001f569:	b8 06 00 00 00       	mov    eax,0x6
c001f56e:	85 ed                	test   ebp,ebp
c001f570:	74 34                	je     c001f5a6 <SATA::write(unsigned long long, int, void*)+0x64>
c001f572:	c1 e3 09             	shl    ebx,0x9
c001f575:	01 eb                	add    ebx,ebp
c001f577:	89 d6                	mov    esi,edx
c001f579:	89 cf                	mov    edi,ecx
c001f57b:	83 c6 01             	add    esi,0x1
c001f57e:	83 d7 00             	adc    edi,0x0
c001f581:	50                   	push   eax
c001f582:	50                   	push   eax
c001f583:	6a 01                	push   0x1
c001f585:	55                   	push   ebp
c001f586:	81 c5 00 02 00 00    	add    ebp,0x200
c001f58c:	6a 01                	push   0x1
c001f58e:	51                   	push   ecx
c001f58f:	52                   	push   edx
c001f590:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f594:	e8 f7 fc ff ff       	call   c001f290 <SATA::access(unsigned long long, int, void*, bool)>
c001f599:	83 c4 20             	add    esp,0x20
c001f59c:	89 f2                	mov    edx,esi
c001f59e:	89 f9                	mov    ecx,edi
c001f5a0:	39 dd                	cmp    ebp,ebx
c001f5a2:	75 d3                	jne    c001f577 <SATA::write(unsigned long long, int, void*)+0x35>
c001f5a4:	31 c0                	xor    eax,eax
c001f5a6:	83 c4 0c             	add    esp,0xc
c001f5a9:	5b                   	pop    ebx
c001f5aa:	5e                   	pop    esi
c001f5ab:	5f                   	pop    edi
c001f5ac:	5d                   	pop    ebp
c001f5ad:	c3                   	ret    

c001f5ae <SATAPI::write(unsigned long long, int, void*)>:
c001f5ae:	b8 03 00 00 00       	mov    eax,0x3
c001f5b3:	c3                   	ret    

c001f5b4 <SATAPI::close(int, int, void*)>:
c001f5b4:	83 ec 0c             	sub    esp,0xc
c001f5b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5bb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f5c1:	85 c0                	test   eax,eax
c001f5c3:	74 0c                	je     c001f5d1 <SATAPI::close(int, int, void*)+0x1d>
c001f5c5:	83 ec 0c             	sub    esp,0xc
c001f5c8:	8b 10                	mov    edx,DWORD PTR [eax]
c001f5ca:	50                   	push   eax
c001f5cb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f5ce:	83 c4 10             	add    esp,0x10
c001f5d1:	31 c0                	xor    eax,eax
c001f5d3:	83 c4 0c             	add    esp,0xc
c001f5d6:	c3                   	ret    
c001f5d7:	90                   	nop

c001f5d8 <SATAPI::SATAPI()>:
c001f5d8:	83 ec 0c             	sub    esp,0xc
c001f5db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5df:	83 ec 04             	sub    esp,0x4
c001f5e2:	68 00 08 00 00       	push   0x800
c001f5e7:	68 88 52 02 c0       	push   0xc0025288
c001f5ec:	50                   	push   eax
c001f5ed:	e8 50 ed fe ff       	call   c000e342 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f5f2:	83 c4 10             	add    esp,0x10
c001f5f5:	ba 34 53 02 c0       	mov    edx,0xc0025334
c001f5fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5fe:	89 10                	mov    DWORD PTR [eax],edx
c001f600:	90                   	nop
c001f601:	83 c4 0c             	add    esp,0xc
c001f604:	c3                   	ret    
c001f605:	90                   	nop

c001f606 <SATAPI::diskRemoved()>:
c001f606:	83 ec 18             	sub    esp,0x18
c001f609:	68 94 52 02 c0       	push   0xc0025294
c001f60e:	e8 b0 d4 fe ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001f613:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f617:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c001f61e:	83 c4 1c             	add    esp,0x1c
c001f621:	c3                   	ret    

c001f622 <SATAPI::diskInserted()>:
c001f622:	53                   	push   ebx
c001f623:	83 ec 14             	sub    esp,0x14
c001f626:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f62a:	68 ab 52 02 c0       	push   0xc00252ab
c001f62f:	e8 8f d4 fe ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001f634:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c001f63b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f63e:	e8 67 ed fe ff       	call   c000e3aa <PhysicalDisk::startCache()>
c001f643:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001f647:	83 c4 18             	add    esp,0x18
c001f64a:	5b                   	pop    ebx
c001f64b:	e9 96 0d ff ff       	jmp    c00103e6 <createPartitionsForDisk(PhysicalDisk*)>

c001f650 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001f650:	55                   	push   ebp
c001f651:	57                   	push   edi
c001f652:	56                   	push   esi
c001f653:	53                   	push   ebx
c001f654:	83 ec 34             	sub    esp,0x34
c001f657:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f65b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f65f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001f663:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f667:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f66b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001f671:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f67b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001f681:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f685:	c1 e0 07             	shl    eax,0x7
c001f688:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f68c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f690:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f69a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f69e:	8d 58 02             	lea    ebx,[eax+0x2]
c001f6a1:	c1 e3 07             	shl    ebx,0x7
c001f6a4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001f6a8:	53                   	push   ebx
c001f6a9:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f6af:	e8 f6 eb ff ff       	call   c001e2aa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f6b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f6b8:	83 c4 10             	add    esp,0x10
c001f6bb:	b8 01 00 00 00       	mov    eax,0x1
c001f6c0:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f6c5:	0f 84 85 01 00 00    	je     c001f850 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f6cb:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f6d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f6d3:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f6d9:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f6df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6e3:	c1 e1 05             	shl    ecx,0x5
c001f6e6:	01 c8                	add    eax,ecx
c001f6e8:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f6ea:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001f6f0:	81 c9 25 00 01 00    	or     ecx,0x10025
c001f6f6:	89 08                	mov    DWORD PTR [eax],ecx
c001f6f8:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f6fe:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001f704:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001f70a:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001f70d:	8d 7b 40             	lea    edi,[ebx+0x40]
c001f710:	50                   	push   eax
c001f711:	68 90 00 00 00       	push   0x90
c001f716:	6a 00                	push   0x0
c001f718:	53                   	push   ebx
c001f719:	e8 66 0f fe ff       	call   c0000684 <memset>
c001f71e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001f722:	b9 0c 00 00 00       	mov    ecx,0xc
c001f727:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f729:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c001f72f:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001f733:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001f739:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001f73d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f741:	48                   	dec    eax
c001f742:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f747:	89 c1                	mov    ecx,eax
c001f749:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001f74f:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f754:	09 c8                	or     eax,ecx
c001f756:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001f75c:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001f75f:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001f766:	66 25 00 7f          	and    ax,0x7f00
c001f76a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001f76e:	66 0d 27 80          	or     ax,0x8027
c001f772:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001f776:	66 89 03             	mov    WORD PTR [ebx],ax
c001f779:	89 d0                	mov    eax,edx
c001f77b:	c1 ea 18             	shr    edx,0x18
c001f77e:	c1 e8 10             	shr    eax,0x10
c001f781:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001f784:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001f787:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001f78b:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001f78e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f792:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001f795:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f799:	83 c4 10             	add    esp,0x10
c001f79c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001f7a0:	31 c0                	xor    eax,eax
c001f7a2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f7a6:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c001f7ac:	80 e2 88             	and    dl,0x88
c001f7af:	74 0a                	je     c001f7bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001f7b1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f7b6:	74 0a                	je     c001f7c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c001f7b8:	40                   	inc    eax
c001f7b9:	eb eb                	jmp    c001f7a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c001f7bb:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f7c0:	75 0f                	jne    c001f7d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c001f7c2:	83 ec 0c             	sub    esp,0xc
c001f7c5:	68 31 52 02 c0       	push   0xc0025231
c001f7ca:	e8 b6 4b ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001f7cf:	eb 3f                	jmp    c001f810 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001f7d1:	ba 01 00 00 00       	mov    edx,0x1
c001f7d6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f7da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7de:	d3 e2                	shl    edx,cl
c001f7e0:	c1 e0 07             	shl    eax,0x7
c001f7e3:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c001f7e9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f7ed:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c001f7f3:	85 ca                	test   edx,ecx
c001f7f5:	74 23                	je     c001f81a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001f7f7:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c001f7fd:	0f ba e1 1e          	bt     ecx,0x1e
c001f801:	73 ea                	jae    c001f7ed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c001f803:	83 ec 0c             	sub    esp,0xc
c001f806:	68 c3 52 02 c0       	push   0xc00252c3
c001f80b:	e8 b3 d2 fe ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c001f810:	83 c4 10             	add    esp,0x10
c001f813:	b8 01 00 00 00       	mov    eax,0x1
c001f818:	eb 36                	jmp    c001f850 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f81a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001f820:	0f ba e0 1e          	bt     eax,0x1e
c001f824:	73 0a                	jae    c001f830 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c001f826:	83 ec 0c             	sub    esp,0xc
c001f829:	68 d6 52 02 c0       	push   0xc00252d6
c001f82e:	eb db                	jmp    c001f80b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c001f830:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001f835:	74 17                	je     c001f84e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f837:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001f83c:	74 10                	je     c001f84e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f83e:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c001f844:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f848:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001f84c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f84e:	31 c0                	xor    eax,eax
c001f850:	83 c4 2c             	add    esp,0x2c
c001f853:	5b                   	pop    ebx
c001f854:	5e                   	pop    esi
c001f855:	5f                   	pop    edi
c001f856:	5d                   	pop    ebp
c001f857:	c3                   	ret    

c001f858 <SATAPI::eject()>:
c001f858:	57                   	push   edi
c001f859:	b9 03 00 00 00       	mov    ecx,0x3
c001f85e:	53                   	push   ebx
c001f85f:	83 ec 14             	sub    esp,0x14
c001f862:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f866:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f86a:	fc                   	cld    
c001f86b:	31 c0                	xor    eax,eax
c001f86d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f86f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f874:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f879:	50                   	push   eax
c001f87a:	6a 00                	push   0x0
c001f87c:	6a 00                	push   0x0
c001f87e:	6a 00                	push   0x0
c001f880:	6a 00                	push   0x0
c001f882:	6a 02                	push   0x2
c001f884:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f888:	50                   	push   eax
c001f889:	53                   	push   ebx
c001f88a:	e8 c1 fd ff ff       	call   c001f650 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f88f:	83 c4 14             	add    esp,0x14
c001f892:	53                   	push   ebx
c001f893:	e8 6e fd ff ff       	call   c001f606 <SATAPI::diskRemoved()>
c001f898:	83 c4 24             	add    esp,0x24
c001f89b:	31 c0                	xor    eax,eax
c001f89d:	5b                   	pop    ebx
c001f89e:	5f                   	pop    edi
c001f89f:	c3                   	ret    

c001f8a0 <SATAPI::detectMedia()>:
c001f8a0:	56                   	push   esi
c001f8a1:	53                   	push   ebx
c001f8a2:	83 ec 28             	sub    esp,0x28
c001f8a5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f8a9:	6a 0c                	push   0xc
c001f8ab:	6a 00                	push   0x0
c001f8ad:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f8b1:	56                   	push   esi
c001f8b2:	e8 cd 0d fe ff       	call   c0000684 <memset>
c001f8b7:	83 c4 0c             	add    esp,0xc
c001f8ba:	6a 00                	push   0x0
c001f8bc:	6a 00                	push   0x0
c001f8be:	6a 00                	push   0x0
c001f8c0:	6a 00                	push   0x0
c001f8c2:	6a 00                	push   0x0
c001f8c4:	56                   	push   esi
c001f8c5:	53                   	push   ebx
c001f8c6:	e8 85 fd ff ff       	call   c001f650 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f8cb:	83 c4 1c             	add    esp,0x1c
c001f8ce:	6a 0c                	push   0xc
c001f8d0:	6a 00                	push   0x0
c001f8d2:	56                   	push   esi
c001f8d3:	e8 ac 0d fe ff       	call   c0000684 <memset>
c001f8d8:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f8dd:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f8e2:	83 c4 0c             	add    esp,0xc
c001f8e5:	6a 01                	push   0x1
c001f8e7:	8d 44 24 16          	lea    eax,[esp+0x16]
c001f8eb:	50                   	push   eax
c001f8ec:	6a 00                	push   0x0
c001f8ee:	6a 00                	push   0x0
c001f8f0:	6a 12                	push   0x12
c001f8f2:	56                   	push   esi
c001f8f3:	53                   	push   ebx
c001f8f4:	e8 57 fd ff ff       	call   c001f650 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f8f9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f8fd:	83 c4 20             	add    esp,0x20
c001f900:	83 e0 7f             	and    eax,0x7f
c001f903:	3c 70                	cmp    al,0x70
c001f905:	74 15                	je     c001f91c <SATAPI::detectMedia()+0x7c>
c001f907:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f90e:	75 0c                	jne    c001f91c <SATAPI::detectMedia()+0x7c>
c001f910:	83 ec 0c             	sub    esp,0xc
c001f913:	53                   	push   ebx
c001f914:	e8 09 fd ff ff       	call   c001f622 <SATAPI::diskInserted()>
c001f919:	83 c4 10             	add    esp,0x10
c001f91c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f920:	83 e0 0f             	and    eax,0xf
c001f923:	3c 02                	cmp    al,0x2
c001f925:	75 1b                	jne    c001f942 <SATAPI::detectMedia()+0xa2>
c001f927:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f92c:	75 2d                	jne    c001f95b <SATAPI::detectMedia()+0xbb>
c001f92e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f935:	74 24                	je     c001f95b <SATAPI::detectMedia()+0xbb>
c001f937:	83 ec 0c             	sub    esp,0xc
c001f93a:	53                   	push   ebx
c001f93b:	e8 c6 fc ff ff       	call   c001f606 <SATAPI::diskRemoved()>
c001f940:	eb 16                	jmp    c001f958 <SATAPI::detectMedia()+0xb8>
c001f942:	84 c0                	test   al,al
c001f944:	75 15                	jne    c001f95b <SATAPI::detectMedia()+0xbb>
c001f946:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f94d:	75 0c                	jne    c001f95b <SATAPI::detectMedia()+0xbb>
c001f94f:	83 ec 0c             	sub    esp,0xc
c001f952:	53                   	push   ebx
c001f953:	e8 ca fc ff ff       	call   c001f622 <SATAPI::diskInserted()>
c001f958:	83 c4 10             	add    esp,0x10
c001f95b:	83 c4 24             	add    esp,0x24
c001f95e:	5b                   	pop    ebx
c001f95f:	5e                   	pop    esi
c001f960:	c3                   	ret    
c001f961:	90                   	nop

c001f962 <SATAPI::open(int, int, void*)>:
c001f962:	56                   	push   esi
c001f963:	53                   	push   ebx
c001f964:	50                   	push   eax
c001f965:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f969:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f96d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f977:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f97d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f987:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f98b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f995:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f99b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f9a2:	e8 43 a4 fe ff       	call   c0009dea <Phys::allocatePage()>
c001f9a7:	89 c6                	mov    esi,eax
c001f9a9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f9af:	81 c6 00 10 00 00    	add    esi,0x1000
c001f9b5:	e8 30 a4 fe ff       	call   c0009dea <Phys::allocatePage()>
c001f9ba:	39 c6                	cmp    esi,eax
c001f9bc:	74 10                	je     c001f9ce <SATAPI::open(int, int, void*)+0x6c>
c001f9be:	83 ec 0c             	sub    esp,0xc
c001f9c1:	68 eb 52 02 c0       	push   0xc00252eb
c001f9c6:	e8 ba 49 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001f9cb:	83 c4 10             	add    esp,0x10
c001f9ce:	83 ec 0c             	sub    esp,0xc
c001f9d1:	6a 02                	push   0x2
c001f9d3:	e8 19 bd fe ff       	call   c000b6f1 <Virt::allocateKernelVirtualPages(int)>
c001f9d8:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f9de:	6a 03                	push   0x3
c001f9e0:	50                   	push   eax
c001f9e1:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c001f9e7:	ff 35 b0 65 02 c0    	push   DWORD PTR ds:0xc00265b0
c001f9ed:	e8 a6 c3 fe ff       	call   c000bd98 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f9f2:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001f9f9:	83 c4 14             	add    esp,0x14
c001f9fc:	53                   	push   ebx
c001f9fd:	e8 9e fe ff ff       	call   c001f8a0 <SATAPI::detectMedia()>
c001fa02:	83 c4 14             	add    esp,0x14
c001fa05:	31 c0                	xor    eax,eax
c001fa07:	5b                   	pop    ebx
c001fa08:	5e                   	pop    esi
c001fa09:	c3                   	ret    

c001fa0a <SATAPI::read(unsigned long long, int, void*)>:
c001fa0a:	55                   	push   ebp
c001fa0b:	57                   	push   edi
c001fa0c:	56                   	push   esi
c001fa0d:	53                   	push   ebx
c001fa0e:	83 ec 1c             	sub    esp,0x1c
c001fa11:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001fa15:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fa19:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001fa1d:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001fa24:	74 19                	je     c001fa3f <SATAPI::read(unsigned long long, int, void*)+0x35>
c001fa26:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c001fa2b:	7e 2e                	jle    c001fa5b <SATAPI::read(unsigned long long, int, void*)+0x51>
c001fa2d:	83 ec 0c             	sub    esp,0xc
c001fa30:	68 01 53 02 c0       	push   0xc0025301
c001fa35:	e8 4b 49 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c001fa3a:	83 c4 10             	add    esp,0x10
c001fa3d:	eb 1c                	jmp    c001fa5b <SATAPI::read(unsigned long long, int, void*)+0x51>
c001fa3f:	83 ec 0c             	sub    esp,0xc
c001fa42:	55                   	push   ebp
c001fa43:	e8 58 fe ff ff       	call   c001f8a0 <SATAPI::detectMedia()>
c001fa48:	83 c4 10             	add    esp,0x10
c001fa4b:	b8 02 00 00 00       	mov    eax,0x2
c001fa50:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001fa57:	75 cd                	jne    c001fa26 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c001fa59:	eb 49                	jmp    c001faa4 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c001fa5b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fa5f:	b9 03 00 00 00       	mov    ecx,0x3
c001fa64:	fc                   	cld    
c001fa65:	31 c0                	xor    eax,eax
c001fa67:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fa69:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001fa6e:	89 d8                	mov    eax,ebx
c001fa70:	86 e0                	xchg   al,ah
c001fa72:	c1 c0 10             	rol    eax,0x10
c001fa75:	86 e0                	xchg   al,ah
c001fa77:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c001fa7b:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001fa7f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001fa83:	50                   	push   eax
c001fa84:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001fa88:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fa8c:	56                   	push   esi
c001fa8d:	53                   	push   ebx
c001fa8e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fa92:	c1 e0 0b             	shl    eax,0xb
c001fa95:	50                   	push   eax
c001fa96:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fa9a:	50                   	push   eax
c001fa9b:	55                   	push   ebp
c001fa9c:	e8 af fb ff ff       	call   c001f650 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001faa1:	83 c4 20             	add    esp,0x20
c001faa4:	83 c4 1c             	add    esp,0x1c
c001faa7:	5b                   	pop    ebx
c001faa8:	5e                   	pop    esi
c001faa9:	5f                   	pop    edi
c001faaa:	5d                   	pop    ebp
c001faab:	c3                   	ret    

c001faac <AVX::open(int, int, void*)>:
c001faac:	83 ec 0c             	sub    esp,0xc
c001faaf:	e8 34 11 00 00       	call   c0020be8 <avxInit>
c001fab4:	b8 00 00 00 00       	mov    eax,0x0
c001fab9:	83 c4 0c             	add    esp,0xc
c001fabc:	c3                   	ret    
c001fabd:	90                   	nop
c001fabe:	66 90                	xchg   ax,ax

c001fac0 <AVX::close(int, int, void*)>:
c001fac0:	83 ec 0c             	sub    esp,0xc
c001fac3:	e8 21 11 00 00       	call   c0020be9 <avxClose>
c001fac8:	b8 00 00 00 00       	mov    eax,0x0
c001facd:	83 c4 0c             	add    esp,0xc
c001fad0:	c3                   	ret    
c001fad1:	90                   	nop
c001fad2:	66 90                	xchg   ax,ax

c001fad4 <AVX::available()>:
c001fad4:	83 ec 0c             	sub    esp,0xc
c001fad7:	e8 04 11 00 00       	call   c0020be0 <avxDetect>
c001fadc:	85 c0                	test   eax,eax
c001fade:	0f 95 c0             	setne  al
c001fae1:	83 c4 0c             	add    esp,0xc
c001fae4:	c3                   	ret    
c001fae5:	90                   	nop
c001fae6:	66 90                	xchg   ax,ax

c001fae8 <AVX::save(void*)>:
c001fae8:	83 ec 0c             	sub    esp,0xc
c001faeb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001faef:	83 ec 0c             	sub    esp,0xc
c001faf2:	50                   	push   eax
c001faf3:	e8 ee 10 00 00       	call   c0020be6 <avxSave>
c001faf8:	83 c4 10             	add    esp,0x10
c001fafb:	90                   	nop
c001fafc:	83 c4 0c             	add    esp,0xc
c001faff:	c3                   	ret    

c001fb00 <AVX::load(void*)>:
c001fb00:	83 ec 0c             	sub    esp,0xc
c001fb03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb07:	83 ec 0c             	sub    esp,0xc
c001fb0a:	50                   	push   eax
c001fb0b:	e8 d7 10 00 00       	call   c0020be7 <avxLoad>
c001fb10:	83 c4 10             	add    esp,0x10
c001fb13:	90                   	nop
c001fb14:	83 c4 0c             	add    esp,0xc
c001fb17:	c3                   	ret    

c001fb18 <AVX::AVX()>:
c001fb18:	83 ec 0c             	sub    esp,0xc
c001fb1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1f:	83 ec 08             	sub    esp,0x8
c001fb22:	68 64 53 02 c0       	push   0xc0025364
c001fb27:	50                   	push   eax
c001fb28:	e8 f3 e8 fe ff       	call   c000e420 <FPU::FPU(char const*)>
c001fb2d:	83 c4 10             	add    esp,0x10
c001fb30:	ba 74 53 02 c0       	mov    edx,0xc0025374
c001fb35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb39:	89 10                	mov    DWORD PTR [eax],edx
c001fb3b:	90                   	nop
c001fb3c:	83 c4 0c             	add    esp,0xc
c001fb3f:	c3                   	ret    

c001fb40 <MMX::available()>:
c001fb40:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001fb45:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001fb4b:	83 e0 20             	and    eax,0x20
c001fb4e:	84 c0                	test   al,al
c001fb50:	0f 95 c0             	setne  al
c001fb53:	c3                   	ret    

c001fb54 <MMX::open(int, int, void*)>:
c001fb54:	83 ec 0c             	sub    esp,0xc
c001fb57:	e8 16 11 00 00       	call   c0020c72 <x87Init>
c001fb5c:	b8 00 00 00 00       	mov    eax,0x0
c001fb61:	83 c4 0c             	add    esp,0xc
c001fb64:	c3                   	ret    
c001fb65:	90                   	nop
c001fb66:	66 90                	xchg   ax,ax

c001fb68 <MMX::close(int, int, void*)>:
c001fb68:	83 ec 0c             	sub    esp,0xc
c001fb6b:	e8 1c 11 00 00       	call   c0020c8c <x87Close>
c001fb70:	b8 00 00 00 00       	mov    eax,0x0
c001fb75:	83 c4 0c             	add    esp,0xc
c001fb78:	c3                   	ret    
c001fb79:	90                   	nop
c001fb7a:	66 90                	xchg   ax,ax

c001fb7c <MMX::save(void*)>:
c001fb7c:	83 ec 0c             	sub    esp,0xc
c001fb7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb83:	83 ec 0c             	sub    esp,0xc
c001fb86:	50                   	push   eax
c001fb87:	e8 d5 10 00 00       	call   c0020c61 <x87Save>
c001fb8c:	83 c4 10             	add    esp,0x10
c001fb8f:	90                   	nop
c001fb90:	83 c4 0c             	add    esp,0xc
c001fb93:	c3                   	ret    

c001fb94 <MMX::load(void*)>:
c001fb94:	83 ec 0c             	sub    esp,0xc
c001fb97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb9b:	83 ec 0c             	sub    esp,0xc
c001fb9e:	50                   	push   eax
c001fb9f:	e8 c6 10 00 00       	call   c0020c6a <x87Load>
c001fba4:	83 c4 10             	add    esp,0x10
c001fba7:	90                   	nop
c001fba8:	83 c4 0c             	add    esp,0xc
c001fbab:	c3                   	ret    

c001fbac <MMX::MMX()>:
c001fbac:	83 ec 0c             	sub    esp,0xc
c001fbaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb3:	83 ec 08             	sub    esp,0x8
c001fbb6:	68 a4 53 02 c0       	push   0xc00253a4
c001fbbb:	50                   	push   eax
c001fbbc:	e8 5f e8 fe ff       	call   c000e420 <FPU::FPU(char const*)>
c001fbc1:	83 c4 10             	add    esp,0x10
c001fbc4:	ba b4 53 02 c0       	mov    edx,0xc00253b4
c001fbc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbcd:	89 10                	mov    DWORD PTR [eax],edx
c001fbcf:	90                   	nop
c001fbd0:	83 c4 0c             	add    esp,0xc
c001fbd3:	c3                   	ret    

c001fbd4 <SSE::open(int, int, void*)>:
c001fbd4:	83 ec 0c             	sub    esp,0xc
c001fbd7:	e8 48 10 00 00       	call   c0020c24 <sseInit>
c001fbdc:	b8 00 00 00 00       	mov    eax,0x0
c001fbe1:	83 c4 0c             	add    esp,0xc
c001fbe4:	c3                   	ret    
c001fbe5:	90                   	nop
c001fbe6:	66 90                	xchg   ax,ax

c001fbe8 <SSE::close(int, int, void*)>:
c001fbe8:	83 ec 0c             	sub    esp,0xc
c001fbeb:	e8 44 10 00 00       	call   c0020c34 <sseClose>
c001fbf0:	b8 00 00 00 00       	mov    eax,0x0
c001fbf5:	83 c4 0c             	add    esp,0xc
c001fbf8:	c3                   	ret    
c001fbf9:	90                   	nop
c001fbfa:	66 90                	xchg   ax,ax

c001fbfc <SSE::available()>:
c001fbfc:	83 ec 1c             	sub    esp,0x1c
c001fbff:	e8 fc 0f 00 00       	call   c0020c00 <absolutelyNoChanceInHell>
c001fc04:	85 c0                	test   eax,eax
c001fc06:	0f 95 c0             	setne  al
c001fc09:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fc0d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001fc11:	83 c4 1c             	add    esp,0x1c
c001fc14:	c3                   	ret    
c001fc15:	90                   	nop
c001fc16:	66 90                	xchg   ax,ax

c001fc18 <SSE::save(void*)>:
c001fc18:	83 ec 0c             	sub    esp,0xc
c001fc1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc1f:	83 ec 0c             	sub    esp,0xc
c001fc22:	50                   	push   eax
c001fc23:	e8 f0 0f 00 00       	call   c0020c18 <sseSave>
c001fc28:	83 c4 10             	add    esp,0x10
c001fc2b:	90                   	nop
c001fc2c:	83 c4 0c             	add    esp,0xc
c001fc2f:	c3                   	ret    

c001fc30 <SSE::load(void*)>:
c001fc30:	83 ec 0c             	sub    esp,0xc
c001fc33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc37:	83 ec 0c             	sub    esp,0xc
c001fc3a:	50                   	push   eax
c001fc3b:	e8 de 0f 00 00       	call   c0020c1e <sseLoad>
c001fc40:	83 c4 10             	add    esp,0x10
c001fc43:	90                   	nop
c001fc44:	83 c4 0c             	add    esp,0xc
c001fc47:	c3                   	ret    

c001fc48 <SSE::SSE()>:
c001fc48:	83 ec 0c             	sub    esp,0xc
c001fc4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4f:	83 ec 08             	sub    esp,0x8
c001fc52:	68 e4 53 02 c0       	push   0xc00253e4
c001fc57:	50                   	push   eax
c001fc58:	e8 c3 e7 fe ff       	call   c000e420 <FPU::FPU(char const*)>
c001fc5d:	83 c4 10             	add    esp,0x10
c001fc60:	ba f4 53 02 c0       	mov    edx,0xc00253f4
c001fc65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc69:	89 10                	mov    DWORD PTR [eax],edx
c001fc6b:	90                   	nop
c001fc6c:	83 c4 0c             	add    esp,0xc
c001fc6f:	c3                   	ret    

c001fc70 <x87::open(int, int, void*)>:
c001fc70:	83 ec 0c             	sub    esp,0xc
c001fc73:	e8 fa 0f 00 00       	call   c0020c72 <x87Init>
c001fc78:	b8 00 00 00 00       	mov    eax,0x0
c001fc7d:	83 c4 0c             	add    esp,0xc
c001fc80:	c3                   	ret    
c001fc81:	90                   	nop
c001fc82:	66 90                	xchg   ax,ax

c001fc84 <x87::close(int, int, void*)>:
c001fc84:	83 ec 0c             	sub    esp,0xc
c001fc87:	e8 00 10 00 00       	call   c0020c8c <x87Close>
c001fc8c:	b8 00 00 00 00       	mov    eax,0x0
c001fc91:	83 c4 0c             	add    esp,0xc
c001fc94:	c3                   	ret    
c001fc95:	90                   	nop
c001fc96:	66 90                	xchg   ax,ax

c001fc98 <x87::available()>:
c001fc98:	83 ec 0c             	sub    esp,0xc
c001fc9b:	e8 a6 0f 00 00       	call   c0020c46 <x87Detect>
c001fca0:	85 c0                	test   eax,eax
c001fca2:	0f 95 c0             	setne  al
c001fca5:	83 c4 0c             	add    esp,0xc
c001fca8:	c3                   	ret    
c001fca9:	90                   	nop
c001fcaa:	66 90                	xchg   ax,ax

c001fcac <x87::save(void*)>:
c001fcac:	83 ec 0c             	sub    esp,0xc
c001fcaf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fcb3:	83 ec 0c             	sub    esp,0xc
c001fcb6:	50                   	push   eax
c001fcb7:	e8 a5 0f 00 00       	call   c0020c61 <x87Save>
c001fcbc:	83 c4 10             	add    esp,0x10
c001fcbf:	90                   	nop
c001fcc0:	83 c4 0c             	add    esp,0xc
c001fcc3:	c3                   	ret    

c001fcc4 <x87::load(void*)>:
c001fcc4:	83 ec 0c             	sub    esp,0xc
c001fcc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fccb:	83 ec 0c             	sub    esp,0xc
c001fcce:	50                   	push   eax
c001fccf:	e8 96 0f 00 00       	call   c0020c6a <x87Load>
c001fcd4:	83 c4 10             	add    esp,0x10
c001fcd7:	90                   	nop
c001fcd8:	83 c4 0c             	add    esp,0xc
c001fcdb:	c3                   	ret    

c001fcdc <x87::x87()>:
c001fcdc:	83 ec 0c             	sub    esp,0xc
c001fcdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce3:	83 ec 08             	sub    esp,0x8
c001fce6:	68 24 54 02 c0       	push   0xc0025424
c001fceb:	50                   	push   eax
c001fcec:	e8 2f e7 fe ff       	call   c000e420 <FPU::FPU(char const*)>
c001fcf1:	83 c4 10             	add    esp,0x10
c001fcf4:	ba 34 54 02 c0       	mov    edx,0xc0025434
c001fcf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfd:	89 10                	mov    DWORD PTR [eax],edx
c001fcff:	90                   	nop
c001fd00:	83 c4 0c             	add    esp,0xc
c001fd03:	c3                   	ret    

c001fd04 <APIC::disable()>:
c001fd04:	90                   	nop
c001fd05:	c3                   	ret    

c001fd06 <APIC::close(int, int, void*)>:
c001fd06:	55                   	push   ebp
c001fd07:	89 e5                	mov    ebp,esp
c001fd09:	83 ec 08             	sub    esp,0x8
c001fd0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd0f:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd11:	83 c0 3c             	add    eax,0x3c
c001fd14:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd16:	83 ec 0c             	sub    esp,0xc
c001fd19:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd1c:	ff d0                	call   eax
c001fd1e:	83 c4 10             	add    esp,0x10
c001fd21:	b8 00 00 00 00       	mov    eax,0x0
c001fd26:	c9                   	leave  
c001fd27:	c3                   	ret    

c001fd28 <IOAPIC::close(int, int, void*)>:
c001fd28:	b8 00 00 00 00       	mov    eax,0x0
c001fd2d:	c3                   	ret    

c001fd2e <APIC::io_wait()>:
c001fd2e:	eb 00                	jmp    c001fd30 <APIC::io_wait()+0x2>
c001fd30:	eb 00                	jmp    c001fd32 <APIC::io_wait()+0x4>
c001fd32:	90                   	nop
c001fd33:	c3                   	ret    

c001fd34 <APIC::getBase()>:
c001fd34:	55                   	push   ebp
c001fd35:	89 e5                	mov    ebp,esp
c001fd37:	83 ec 18             	sub    esp,0x18
c001fd3a:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001fd3f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001fd45:	83 e0 08             	and    eax,0x8
c001fd48:	84 c0                	test   al,al
c001fd4a:	75 07                	jne    c001fd53 <APIC::getBase()+0x1f>
c001fd4c:	b8 00 00 00 00       	mov    eax,0x0
c001fd51:	eb 21                	jmp    c001fd74 <APIC::getBase()+0x40>
c001fd53:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001fd58:	83 ec 08             	sub    esp,0x8
c001fd5b:	6a 1b                	push   0x1b
c001fd5d:	50                   	push   eax
c001fd5e:	e8 c1 91 fe ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c001fd63:	83 c4 10             	add    esp,0x10
c001fd66:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001fd69:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001fd6c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001fd6f:	25 00 f0 ff ff       	and    eax,0xfffff000
c001fd74:	c9                   	leave  
c001fd75:	c3                   	ret    

c001fd76 <APIC::eoi(unsigned char)>:
c001fd76:	55                   	push   ebp
c001fd77:	89 e5                	mov    ebp,esp
c001fd79:	83 ec 28             	sub    esp,0x28
c001fd7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fd7f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001fd82:	83 ec 0c             	sub    esp,0xc
c001fd85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd88:	e8 a7 ff ff ff       	call   c001fd34 <APIC::getBase()>
c001fd8d:	83 c4 10             	add    esp,0x10
c001fd90:	05 b0 00 00 00       	add    eax,0xb0
c001fd95:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001fd98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001fd9b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fda1:	90                   	nop
c001fda2:	c9                   	leave  
c001fda3:	c3                   	ret    

c001fda4 <APIC::open(int, int, void*)>:
c001fda4:	55                   	push   ebp
c001fda5:	89 e5                	mov    ebp,esp
c001fda7:	57                   	push   edi
c001fda8:	56                   	push   esi
c001fda9:	53                   	push   ebx
c001fdaa:	83 ec 2c             	sub    esp,0x2c
c001fdad:	83 ec 0c             	sub    esp,0xc
c001fdb0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fdb3:	e8 7c ff ff ff       	call   c001fd34 <APIC::getBase()>
c001fdb8:	83 c4 10             	add    esp,0x10
c001fdbb:	89 c2                	mov    edx,eax
c001fdbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fdc0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fdc6:	0f b6 f8             	movzx  edi,al
c001fdc9:	89 d0                	mov    eax,edx
c001fdcb:	ba 00 00 00 00       	mov    edx,0x0
c001fdd0:	89 c1                	mov    ecx,eax
c001fdd2:	80 e5 ff             	and    ch,0xff
c001fdd5:	89 cb                	mov    ebx,ecx
c001fdd7:	0f b6 f2             	movzx  esi,dl
c001fdda:	89 d8                	mov    eax,ebx
c001fddc:	89 f2                	mov    edx,esi
c001fdde:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fde1:	8d 5f 08             	lea    ebx,[edi+0x8]
c001fde4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001fde8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001fdec:	83 e0 00             	and    eax,0x0
c001fdef:	09 d0                	or     eax,edx
c001fdf1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001fdf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fdf8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fdfe:	8d 50 01             	lea    edx,[eax+0x1]
c001fe01:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fe04:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001fe0a:	0f b6 d0             	movzx  edx,al
c001fe0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fe10:	83 c2 08             	add    edx,0x8
c001fe13:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001fe17:	0f b6 c9             	movzx  ecx,cl
c001fe1a:	81 c9 00 00 01 00    	or     ecx,0x10000
c001fe20:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001fe24:	83 ec 0c             	sub    esp,0xc
c001fe27:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fe2a:	e8 05 ff ff ff       	call   c001fd34 <APIC::getBase()>
c001fe2f:	83 c4 10             	add    esp,0x10
c001fe32:	05 f0 00 00 00       	add    eax,0xf0
c001fe37:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001fe3a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fe3d:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe3f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001fe42:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c001fe49:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c001fe50:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fe53:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001fe56:	89 10                	mov    DWORD PTR [eax],edx
c001fe58:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c001fe5f:	a1 f0 6c 02 c0       	mov    eax,ds:0xc0026cf0
c001fe64:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c001fe67:	7d 7c                	jge    c001fee5 <APIC::open(int, int, void*)+0x141>
c001fe69:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe6c:	8b 04 85 00 6d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9300]
c001fe73:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c001fe76:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe79:	8b 04 85 00 6d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9300]
c001fe80:	c1 e8 08             	shr    eax,0x8
c001fe83:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c001fe87:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe8a:	8b 04 85 00 6d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9300]
c001fe91:	c1 e8 18             	shr    eax,0x18
c001fe94:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c001fe97:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c001fe9b:	75 40                	jne    c001fedd <APIC::open(int, int, void*)+0x139>
c001fe9d:	83 ec 0c             	sub    esp,0xc
c001fea0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fea3:	e8 8c fe ff ff       	call   c001fd34 <APIC::getBase()>
c001fea8:	83 c4 10             	add    esp,0x10
c001feab:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c001feaf:	75 07                	jne    c001feb8 <APIC::open(int, int, void*)+0x114>
c001feb1:	ba 60 03 00 00       	mov    edx,0x360
c001feb6:	eb 05                	jmp    c001febd <APIC::open(int, int, void*)+0x119>
c001feb8:	ba 50 03 00 00       	mov    edx,0x350
c001febd:	01 d0                	add    eax,edx
c001febf:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001fec2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fec5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fec7:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c001feca:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c001fed1:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c001fed5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fed8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001fedb:	89 10                	mov    DWORD PTR [eax],edx
c001fedd:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c001fee0:	e9 7a ff ff ff       	jmp    c001fe5f <APIC::open(int, int, void*)+0xbb>
c001fee5:	b8 00 00 00 00       	mov    eax,0x0
c001feea:	8d 65 f4             	lea    esp,[ebp-0xc]
c001feed:	5b                   	pop    ebx
c001feee:	5e                   	pop    esi
c001feef:	5f                   	pop    edi
c001fef0:	5d                   	pop    ebp
c001fef1:	c3                   	ret    

c001fef2 <IOAPIC::IOAPIC()>:
c001fef2:	83 ec 0c             	sub    esp,0xc
c001fef5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef9:	83 ec 08             	sub    esp,0x8
c001fefc:	68 64 54 02 c0       	push   0xc0025464
c001ff01:	50                   	push   eax
c001ff02:	e8 07 e2 fe ff       	call   c000e10e <Device::Device(char const*)>
c001ff07:	83 c4 10             	add    esp,0x10
c001ff0a:	ba 8c 55 02 c0       	mov    edx,0xc002558c
c001ff0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff13:	89 10                	mov    DWORD PTR [eax],edx
c001ff15:	90                   	nop
c001ff16:	83 c4 0c             	add    esp,0xc
c001ff19:	c3                   	ret    

c001ff1a <APIC::APIC()>:
c001ff1a:	53                   	push   ebx
c001ff1b:	83 ec 18             	sub    esp,0x18
c001ff1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff22:	83 ec 08             	sub    esp,0x8
c001ff25:	68 6c 54 02 c0       	push   0xc002546c
c001ff2a:	50                   	push   eax
c001ff2b:	e8 56 e9 fe ff       	call   c000e886 <InterruptController::InterruptController(char const*)>
c001ff30:	83 c4 10             	add    esp,0x10
c001ff33:	ba 44 55 02 c0       	mov    edx,0xc0025544
c001ff38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff3c:	89 10                	mov    DWORD PTR [eax],edx
c001ff3e:	a0 c0 83 02 c0       	mov    al,ds:0xc00283c0
c001ff43:	83 f0 01             	xor    eax,0x1
c001ff46:	84 c0                	test   al,al
c001ff48:	0f 84 a1 00 00 00    	je     c001ffef <APIC::APIC()+0xd5>
c001ff4e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ff53:	a0 a0 6d 02 c0       	mov    al,ds:0xc0026da0
c001ff58:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001ff5c:	0f 83 86 00 00 00    	jae    c001ffe8 <APIC::APIC()+0xce>
c001ff62:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c001ff6a:	83 ec 0c             	sub    esp,0xc
c001ff6d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ff71:	e8 4d 9a fe ff       	call   c00099c3 <malloc>
c001ff76:	83 c4 10             	add    esp,0x10
c001ff79:	89 c3                	mov    ebx,eax
c001ff7b:	83 ec 0c             	sub    esp,0xc
c001ff7e:	53                   	push   ebx
c001ff7f:	e8 6e ff ff ff       	call   c001fef2 <IOAPIC::IOAPIC()>
c001ff84:	83 c4 10             	add    esp,0x10
c001ff87:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ff8b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ff90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff94:	89 14 85 a0 83 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7c60],edx
c001ff9b:	a1 80 83 02 c0       	mov    eax,ds:0xc0028380
c001ffa0:	40                   	inc    eax
c001ffa1:	a3 80 83 02 c0       	mov    ds:0xc0028380,eax
c001ffa6:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c001ffab:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ffb1:	83 ec 08             	sub    esp,0x8
c001ffb4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ffb8:	50                   	push   eax
c001ffb9:	e8 4c df fe ff       	call   c000df0a <Device::addChild(Device*)>
c001ffbe:	83 c4 10             	add    esp,0x10
c001ffc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffc5:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffc7:	83 c0 08             	add    eax,0x8
c001ffca:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffcc:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001ffd1:	6a 00                	push   0x0
c001ffd3:	6a 00                	push   0x0
c001ffd5:	52                   	push   edx
c001ffd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ffda:	ff d0                	call   eax
c001ffdc:	83 c4 10             	add    esp,0x10
c001ffdf:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001ffe3:	e9 6b ff ff ff       	jmp    c001ff53 <APIC::APIC()+0x39>
c001ffe8:	c6 05 c0 83 02 c0 01 	mov    BYTE PTR ds:0xc00283c0,0x1
c001ffef:	90                   	nop
c001fff0:	83 c4 18             	add    esp,0x18
c001fff3:	5b                   	pop    ebx
c001fff4:	c3                   	ret    
c001fff5:	90                   	nop

c001fff6 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001fff6:	55                   	push   ebp
c001fff7:	89 e5                	mov    ebp,esp
c001fff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fffc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020002:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020005:	72 1d                	jb     c0020024 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020007:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002000a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0020010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020013:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0020019:	01 d0                	add    eax,edx
c002001b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002001e:	73 04                	jae    c0020024 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020020:	b0 01                	mov    al,0x1
c0020022:	eb 02                	jmp    c0020026 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0020024:	b0 00                	mov    al,0x0
c0020026:	5d                   	pop    ebp
c0020027:	c3                   	ret    

c0020028 <IOAPIC::read(int)>:
c0020028:	55                   	push   ebp
c0020029:	89 e5                	mov    ebp,esp
c002002b:	83 ec 10             	sub    esp,0x10
c002002e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020031:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020037:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002003a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002003d:	0f b6 d0             	movzx  edx,al
c0020040:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020043:	89 10                	mov    DWORD PTR [eax],edx
c0020045:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020048:	83 c0 10             	add    eax,0x10
c002004b:	8b 00                	mov    eax,DWORD PTR [eax]
c002004d:	c9                   	leave  
c002004e:	c3                   	ret    
c002004f:	90                   	nop

c0020050 <IOAPIC::open(int, int, void*)>:
c0020050:	55                   	push   ebp
c0020051:	89 e5                	mov    ebp,esp
c0020053:	57                   	push   edi
c0020054:	56                   	push   esi
c0020055:	53                   	push   ebx
c0020056:	83 ec 0c             	sub    esp,0xc
c0020059:	83 ec 0c             	sub    esp,0xc
c002005c:	68 97 54 02 c0       	push   0xc0025497
c0020061:	e8 5d ca fe ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c0020066:	83 c4 10             	add    esp,0x10
c0020069:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002006c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002006f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020075:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020078:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002007e:	8b 14 85 e0 6d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9220]
c0020085:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020088:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002008e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020091:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020097:	8b 14 85 60 6e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd91a0]
c002009e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200a1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00200a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200aa:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00200b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200b3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00200b9:	0f b6 f8             	movzx  edi,al
c00200bc:	89 d0                	mov    eax,edx
c00200be:	ba 00 00 00 00       	mov    edx,0x0
c00200c3:	89 c1                	mov    ecx,eax
c00200c5:	80 e5 ff             	and    ch,0xff
c00200c8:	89 cb                	mov    ebx,ecx
c00200ca:	0f b6 f2             	movzx  esi,dl
c00200cd:	89 d8                	mov    eax,ebx
c00200cf:	89 f2                	mov    edx,esi
c00200d1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00200d4:	8d 5f 08             	lea    ebx,[edi+0x8]
c00200d7:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00200db:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00200df:	83 e0 00             	and    eax,0x0
c00200e2:	09 d0                	or     eax,edx
c00200e4:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00200e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200eb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00200f1:	8d 50 01             	lea    edx,[eax+0x1]
c00200f4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00200f7:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00200fd:	0f b6 d0             	movzx  edx,al
c0020100:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020103:	83 c2 08             	add    edx,0x8
c0020106:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002010a:	0f b6 c9             	movzx  ecx,cl
c002010d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0020113:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0020117:	83 ec 08             	sub    esp,0x8
c002011a:	6a 01                	push   0x1
c002011c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002011f:	e8 04 ff ff ff       	call   c0020028 <IOAPIC::read(int)>
c0020124:	83 c4 10             	add    esp,0x10
c0020127:	c1 f8 10             	sar    eax,0x10
c002012a:	0f b6 c0             	movzx  eax,al
c002012d:	8d 50 01             	lea    edx,[eax+0x1]
c0020130:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020133:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0020139:	b8 00 00 00 00       	mov    eax,0x0
c002013e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0020141:	5b                   	pop    ebx
c0020142:	5e                   	pop    esi
c0020143:	5f                   	pop    edi
c0020144:	5d                   	pop    ebp
c0020145:	c3                   	ret    

c0020146 <IOAPIC::write(int, int)>:
c0020146:	55                   	push   ebp
c0020147:	89 e5                	mov    ebp,esp
c0020149:	83 ec 10             	sub    esp,0x10
c002014c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002014f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020155:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020158:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002015b:	0f b6 d0             	movzx  edx,al
c002015e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020161:	89 10                	mov    DWORD PTR [eax],edx
c0020163:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020166:	8d 50 10             	lea    edx,[eax+0x10]
c0020169:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002016c:	89 02                	mov    DWORD PTR [edx],eax
c002016e:	90                   	nop
c002016f:	c9                   	leave  
c0020170:	c3                   	ret    
c0020171:	90                   	nop

c0020172 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0020172:	55                   	push   ebp
c0020173:	89 e5                	mov    ebp,esp
c0020175:	53                   	push   ebx
c0020176:	83 ec 2c             	sub    esp,0x2c
c0020179:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002017c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002017f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0020182:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0020185:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0020188:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002018b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002018e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020191:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0020194:	88 d8                	mov    al,bl
c0020196:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0020199:	88 c8                	mov    al,cl
c002019b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002019e:	88 d0                	mov    al,dl
c00201a0:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00201a3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00201a7:	83 c0 08             	add    eax,0x8
c00201aa:	01 c0                	add    eax,eax
c00201ac:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00201af:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00201b3:	83 c0 08             	add    eax,0x8
c00201b6:	01 c0                	add    eax,eax
c00201b8:	40                   	inc    eax
c00201b9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00201bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00201bf:	50                   	push   eax
c00201c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00201c3:	e8 60 fe ff ff       	call   c0020028 <IOAPIC::read(int)>
c00201c8:	83 c4 08             	add    esp,0x8
c00201cb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00201ce:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00201d5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00201d8:	c1 e0 18             	shl    eax,0x18
c00201db:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00201de:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00201e1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00201e4:	52                   	push   edx
c00201e5:	50                   	push   eax
c00201e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00201e9:	e8 58 ff ff ff       	call   c0020146 <IOAPIC::write(int, int)>
c00201ee:	83 c4 0c             	add    esp,0xc
c00201f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00201f4:	50                   	push   eax
c00201f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00201f8:	e8 2b fe ff ff       	call   c0020028 <IOAPIC::read(int)>
c00201fd:	83 c4 08             	add    esp,0x8
c0020200:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0020203:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002020a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0020211:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0020218:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002021c:	74 09                	je     c0020227 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002021e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0020225:	eb 07                	jmp    c002022e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0020227:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002022e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0020232:	74 09                	je     c002023d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0020234:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002023b:	eb 07                	jmp    c0020244 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002023d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0020244:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002024b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002024f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0020252:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0020255:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020258:	52                   	push   edx
c0020259:	50                   	push   eax
c002025a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002025d:	e8 e4 fe ff ff       	call   c0020146 <IOAPIC::write(int, int)>
c0020262:	83 c4 0c             	add    esp,0xc
c0020265:	90                   	nop
c0020266:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020269:	c9                   	leave  
c002026a:	c3                   	ret    
c002026b:	90                   	nop

c002026c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002026c:	55                   	push   ebp
c002026d:	89 e5                	mov    ebp,esp
c002026f:	57                   	push   edi
c0020270:	56                   	push   esi
c0020271:	53                   	push   ebx
c0020272:	83 ec 2c             	sub    esp,0x2c
c0020275:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020278:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002027b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002027f:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0020283:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0020287:	74 5a                	je     c00202e3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0020289:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002028d:	7f 44                	jg     c00202d3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002028f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020292:	05 40 5b 02 c0       	add    eax,0xc0025b40
c0020297:	8a 00                	mov    al,BYTE PTR [eax]
c0020299:	0f b6 c0             	movzx  eax,al
c002029c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002029f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00202a2:	66 8b 84 00 80 6d 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd9280]
c00202aa:	0f b7 c0             	movzx  eax,ax
c00202ad:	83 e0 02             	and    eax,0x2
c00202b0:	85 c0                	test   eax,eax
c00202b2:	74 04                	je     c00202b8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00202b4:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00202b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00202bb:	66 8b 84 00 80 6d 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd9280]
c00202c3:	0f b7 c0             	movzx  eax,ax
c00202c6:	83 e0 08             	and    eax,0x8
c00202c9:	85 c0                	test   eax,eax
c00202cb:	74 16                	je     c00202e3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00202cd:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00202d1:	eb 10                	jmp    c00202e3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00202d3:	83 ec 0c             	sub    esp,0xc
c00202d6:	68 a8 54 02 c0       	push   0xc00254a8
c00202db:	e8 a5 40 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c00202e0:	83 c4 10             	add    esp,0x10
c00202e3:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00202e7:	a1 80 83 02 c0       	mov    eax,ds:0xc0028380
c00202ec:	83 ec 08             	sub    esp,0x8
c00202ef:	50                   	push   eax
c00202f0:	68 e0 54 02 c0       	push   0xc00254e0
c00202f5:	e8 c9 c7 fe ff       	call   c000cac3 <Dbg::kprintf(char const*, ...)>
c00202fa:	83 c4 10             	add    esp,0x10
c00202fd:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0020304:	a1 80 83 02 c0       	mov    eax,ds:0xc0028380
c0020309:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002030c:	7d 67                	jge    c0020375 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002030e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0020311:	8b 04 85 a0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c60]
c0020318:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002031b:	83 ec 08             	sub    esp,0x8
c002031e:	52                   	push   edx
c002031f:	50                   	push   eax
c0020320:	e8 d1 fc ff ff       	call   c001fff6 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0020325:	83 c4 10             	add    esp,0x10
c0020328:	84 c0                	test   al,al
c002032a:	74 44                	je     c0020370 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002032c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002032f:	8b 1c 85 a0 83 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7c60]
c0020336:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002033a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002033d:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0020341:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020344:	83 c0 20             	add    eax,0x20
c0020347:	0f b6 f0             	movzx  esi,al
c002034a:	b8 00 00 00 00       	mov    eax,0x0
c002034f:	99                   	cdq    
c0020350:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0020353:	0f b6 c9             	movzx  ecx,cl
c0020356:	83 ec 04             	sub    esp,0x4
c0020359:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002035c:	57                   	push   edi
c002035d:	56                   	push   esi
c002035e:	52                   	push   edx
c002035f:	50                   	push   eax
c0020360:	51                   	push   ecx
c0020361:	53                   	push   ebx
c0020362:	e8 0b fe ff ff       	call   c0020172 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0020367:	83 c4 20             	add    esp,0x20
c002036a:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002036e:	eb 05                	jmp    c0020375 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0020370:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0020373:	eb 8f                	jmp    c0020304 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0020375:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0020378:	83 f0 01             	xor    eax,0x1
c002037b:	84 c0                	test   al,al
c002037d:	74 10                	je     c002038f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002037f:	83 ec 0c             	sub    esp,0xc
c0020382:	68 f7 54 02 c0       	push   0xc00254f7
c0020387:	e8 f9 3f ff ff       	call   c0014385 <Krnl::panic(char const*)>
c002038c:	83 c4 10             	add    esp,0x10
c002038f:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0020393:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002039a:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002039e:	7f 65                	jg     c0020405 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00203a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00203a3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00203a6:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00203ad:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00203b0:	01 ca                	add    edx,ecx
c00203b2:	83 c2 54             	add    edx,0x54
c00203b5:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00203b9:	85 c0                	test   eax,eax
c00203bb:	75 43                	jne    c0020400 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00203bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00203c0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00203c3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00203ca:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00203cd:	01 ca                	add    edx,ecx
c00203cf:	8d 4a 54             	lea    ecx,[edx+0x54]
c00203d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00203d5:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00203d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00203dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00203df:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00203e6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00203e9:	01 ca                	add    edx,ecx
c00203eb:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00203f1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00203f4:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00203f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00203fb:	83 e8 20             	sub    eax,0x20
c00203fe:	eb 1a                	jmp    c002041a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0020400:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0020403:	eb 95                	jmp    c002039a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0020405:	83 ec 0c             	sub    esp,0xc
c0020408:	68 04 55 02 c0       	push   0xc0025504
c002040d:	e8 73 3f ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0020412:	83 c4 10             	add    esp,0x10
c0020415:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002041a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002041d:	5b                   	pop    ebx
c002041e:	5e                   	pop    esi
c002041f:	5f                   	pop    edi
c0020420:	5d                   	pop    ebp
c0020421:	c3                   	ret    

c0020422 <PIC::disable()>:
c0020422:	55                   	push   ebp
c0020423:	89 e5                	mov    ebp,esp
c0020425:	83 ec 10             	sub    esp,0x10
c0020428:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002042e:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0020432:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0020435:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0020439:	ee                   	out    dx,al
c002043a:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0020440:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0020444:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0020447:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002044b:	ee                   	out    dx,al
c002044c:	90                   	nop
c002044d:	c9                   	leave  
c002044e:	c3                   	ret    
c002044f:	90                   	nop

c0020450 <PIC::close(int, int, void*)>:
c0020450:	55                   	push   ebp
c0020451:	89 e5                	mov    ebp,esp
c0020453:	83 ec 08             	sub    esp,0x8
c0020456:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020459:	8b 00                	mov    eax,DWORD PTR [eax]
c002045b:	83 c0 3c             	add    eax,0x3c
c002045e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020460:	83 ec 0c             	sub    esp,0xc
c0020463:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020466:	ff d0                	call   eax
c0020468:	83 c4 10             	add    esp,0x10
c002046b:	b8 00 00 00 00       	mov    eax,0x0
c0020470:	c9                   	leave  
c0020471:	c3                   	ret    

c0020472 <PIC::PIC()>:
c0020472:	83 ec 0c             	sub    esp,0xc
c0020475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020479:	83 ec 08             	sub    esp,0x8
c002047c:	68 b0 55 02 c0       	push   0xc00255b0
c0020481:	50                   	push   eax
c0020482:	e8 ff e3 fe ff       	call   c000e886 <InterruptController::InterruptController(char const*)>
c0020487:	83 c4 10             	add    esp,0x10
c002048a:	ba dc 55 02 c0       	mov    edx,0xc00255dc
c002048f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020493:	89 10                	mov    DWORD PTR [eax],edx
c0020495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020499:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002049f:	0f b6 d0             	movzx  edx,al
c00204a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204a6:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00204ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204b7:	0f b6 d0             	movzx  edx,al
c00204ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204be:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00204c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204c7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204cd:	8d 50 01             	lea    edx,[eax+0x1]
c00204d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00204d4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00204da:	0f b6 d0             	movzx  edx,al
c00204dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204e1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00204e5:	83 e1 3f             	and    ecx,0x3f
c00204e8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00204ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204f0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204f6:	0f b6 d0             	movzx  edx,al
c00204f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204fd:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0020504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020508:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002050e:	0f b6 d0             	movzx  edx,al
c0020511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020515:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002051a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002051e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020524:	8d 50 01             	lea    edx,[eax+0x1]
c0020527:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002052b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020531:	0f b6 d0             	movzx  edx,al
c0020534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020538:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002053c:	83 e1 3f             	and    ecx,0x3f
c002053f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020543:	90                   	nop
c0020544:	83 c4 0c             	add    esp,0xc
c0020547:	c3                   	ret    

c0020548 <PIC::ioWait()>:
c0020548:	eb 00                	jmp    c002054a <PIC::ioWait()+0x2>
c002054a:	eb 00                	jmp    c002054c <PIC::ioWait()+0x4>
c002054c:	90                   	nop
c002054d:	c3                   	ret    

c002054e <PIC::getIRQReg(int)>:
c002054e:	55                   	push   ebp
c002054f:	89 e5                	mov    ebp,esp
c0020551:	83 ec 10             	sub    esp,0x10
c0020554:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020557:	0f b6 c0             	movzx  eax,al
c002055a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0020560:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0020563:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0020566:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002056a:	ee                   	out    dx,al
c002056b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002056e:	0f b6 c0             	movzx  eax,al
c0020571:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0020577:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002057a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002057d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0020581:	ee                   	out    dx,al
c0020582:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0020588:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002058c:	89 c2                	mov    edx,eax
c002058e:	ec                   	in     al,dx
c002058f:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0020592:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0020595:	0f b6 c0             	movzx  eax,al
c0020598:	c1 e0 08             	shl    eax,0x8
c002059b:	89 c1                	mov    ecx,eax
c002059d:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00205a3:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00205a7:	89 c2                	mov    edx,eax
c00205a9:	ec                   	in     al,dx
c00205aa:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00205ad:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00205b0:	0f b6 c0             	movzx  eax,al
c00205b3:	09 c8                	or     eax,ecx
c00205b5:	c9                   	leave  
c00205b6:	c3                   	ret    
c00205b7:	90                   	nop

c00205b8 <PIC::eoi(unsigned char)>:
c00205b8:	55                   	push   ebp
c00205b9:	89 e5                	mov    ebp,esp
c00205bb:	83 ec 14             	sub    esp,0x14
c00205be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00205c1:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00205c4:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00205c8:	75 1e                	jne    c00205e8 <PIC::eoi(unsigned char)+0x30>
c00205ca:	6a 0b                	push   0xb
c00205cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00205cf:	e8 7a ff ff ff       	call   c002054e <PIC::getIRQReg(int)>
c00205d4:	83 c4 08             	add    esp,0x8
c00205d7:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00205db:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00205df:	25 80 00 00 00       	and    eax,0x80
c00205e4:	85 c0                	test   eax,eax
c00205e6:	74 5f                	je     c0020647 <PIC::eoi(unsigned char)+0x8f>
c00205e8:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00205ec:	75 2d                	jne    c002061b <PIC::eoi(unsigned char)+0x63>
c00205ee:	6a 0b                	push   0xb
c00205f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00205f3:	e8 56 ff ff ff       	call   c002054e <PIC::getIRQReg(int)>
c00205f8:	83 c4 08             	add    esp,0x8
c00205fb:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00205ff:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020602:	66 85 c0             	test   ax,ax
c0020605:	78 14                	js     c002061b <PIC::eoi(unsigned char)+0x63>
c0020607:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002060d:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0020611:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0020614:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0020618:	ee                   	out    dx,al
c0020619:	eb 2d                	jmp    c0020648 <PIC::eoi(unsigned char)+0x90>
c002061b:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002061f:	76 12                	jbe    c0020633 <PIC::eoi(unsigned char)+0x7b>
c0020621:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0020627:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002062b:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002062e:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0020632:	ee                   	out    dx,al
c0020633:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0020639:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002063d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0020640:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0020644:	ee                   	out    dx,al
c0020645:	eb 01                	jmp    c0020648 <PIC::eoi(unsigned char)+0x90>
c0020647:	90                   	nop
c0020648:	c9                   	leave  
c0020649:	c3                   	ret    

c002064a <PIC::remap()>:
c002064a:	55                   	push   ebp
c002064b:	89 e5                	mov    ebp,esp
c002064d:	83 ec 48             	sub    esp,0x48
c0020650:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0020657:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002065e:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0020664:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0020667:	89 c2                	mov    edx,eax
c0020669:	ec                   	in     al,dx
c002066a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002066d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0020670:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0020673:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0020679:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002067c:	89 c2                	mov    edx,eax
c002067e:	ec                   	in     al,dx
c002067f:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0020682:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0020685:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0020688:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002068e:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0020692:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0020695:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0020698:	ee                   	out    dx,al
c0020699:	83 ec 0c             	sub    esp,0xc
c002069c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002069f:	e8 a4 fe ff ff       	call   c0020548 <PIC::ioWait()>
c00206a4:	83 c4 10             	add    esp,0x10
c00206a7:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00206ad:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00206b1:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00206b4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00206b7:	ee                   	out    dx,al
c00206b8:	83 ec 0c             	sub    esp,0xc
c00206bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206be:	e8 85 fe ff ff       	call   c0020548 <PIC::ioWait()>
c00206c3:	83 c4 10             	add    esp,0x10
c00206c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00206c9:	0f b6 c0             	movzx  eax,al
c00206cc:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00206d2:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00206d5:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00206d8:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00206db:	ee                   	out    dx,al
c00206dc:	83 ec 0c             	sub    esp,0xc
c00206df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206e2:	e8 61 fe ff ff       	call   c0020548 <PIC::ioWait()>
c00206e7:	83 c4 10             	add    esp,0x10
c00206ea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00206ed:	0f b6 c0             	movzx  eax,al
c00206f0:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00206f6:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00206f9:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00206fc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00206ff:	ee                   	out    dx,al
c0020700:	83 ec 0c             	sub    esp,0xc
c0020703:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020706:	e8 3d fe ff ff       	call   c0020548 <PIC::ioWait()>
c002070b:	83 c4 10             	add    esp,0x10
c002070e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0020714:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0020718:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002071b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002071e:	ee                   	out    dx,al
c002071f:	83 ec 0c             	sub    esp,0xc
c0020722:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020725:	e8 1e fe ff ff       	call   c0020548 <PIC::ioWait()>
c002072a:	83 c4 10             	add    esp,0x10
c002072d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0020733:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0020737:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002073a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002073d:	ee                   	out    dx,al
c002073e:	83 ec 0c             	sub    esp,0xc
c0020741:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020744:	e8 ff fd ff ff       	call   c0020548 <PIC::ioWait()>
c0020749:	83 c4 10             	add    esp,0x10
c002074c:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0020752:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0020756:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0020759:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002075c:	ee                   	out    dx,al
c002075d:	83 ec 0c             	sub    esp,0xc
c0020760:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020763:	e8 e0 fd ff ff       	call   c0020548 <PIC::ioWait()>
c0020768:	83 c4 10             	add    esp,0x10
c002076b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0020771:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0020775:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0020778:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002077b:	ee                   	out    dx,al
c002077c:	83 ec 0c             	sub    esp,0xc
c002077f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020782:	e8 c1 fd ff ff       	call   c0020548 <PIC::ioWait()>
c0020787:	83 c4 10             	add    esp,0x10
c002078a:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002078e:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0020794:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0020797:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002079a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002079d:	ee                   	out    dx,al
c002079e:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00207a2:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00207a8:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00207ab:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00207ae:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00207b1:	ee                   	out    dx,al
c00207b2:	90                   	nop
c00207b3:	c9                   	leave  
c00207b4:	c3                   	ret    
c00207b5:	90                   	nop

c00207b6 <PIC::open(int, int, void*)>:
c00207b6:	55                   	push   ebp
c00207b7:	89 e5                	mov    ebp,esp
c00207b9:	83 ec 18             	sub    esp,0x18
c00207bc:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00207c2:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00207c6:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00207c9:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00207cd:	ee                   	out    dx,al
c00207ce:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00207d4:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00207d8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00207db:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00207df:	ee                   	out    dx,al
c00207e0:	83 ec 0c             	sub    esp,0xc
c00207e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00207e6:	e8 5f fe ff ff       	call   c002064a <PIC::remap()>
c00207eb:	83 c4 10             	add    esp,0x10
c00207ee:	b8 00 00 00 00       	mov    eax,0x0
c00207f3:	c9                   	leave  
c00207f4:	c3                   	ret    
c00207f5:	66 90                	xchg   ax,ax
c00207f7:	90                   	nop

c00207f8 <APICTimer::close(int, int, void*)>:
c00207f8:	b8 00 00 00 00       	mov    eax,0x0
c00207fd:	c3                   	ret    
c00207fe:	66 90                	xchg   ax,ax

c0020800 <apicTimerHandler(regs*, void*)>:
c0020800:	83 ec 0c             	sub    esp,0xc
c0020803:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020807:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020809:	b8 10 27 00 00       	mov    eax,0x2710
c002080e:	ba 00 00 00 00       	mov    edx,0x0
c0020813:	f7 f1                	div    ecx
c0020815:	83 ec 0c             	sub    esp,0xc
c0020818:	50                   	push   eax
c0020819:	e8 73 ff fe ff       	call   c0010791 <timerHandler(unsigned int)>
c002081e:	83 c4 10             	add    esp,0x10
c0020821:	90                   	nop
c0020822:	83 c4 0c             	add    esp,0xc
c0020825:	c3                   	ret    
c0020826:	66 90                	xchg   ax,ax

c0020828 <APICTimer::write(int)>:
c0020828:	83 ec 1c             	sub    esp,0x1c
c002082b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002082f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020833:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020839:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c002083e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020844:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002084a:	83 ec 0c             	sub    esp,0xc
c002084d:	50                   	push   eax
c002084e:	e8 e1 f4 ff ff       	call   c001fd34 <APIC::getBase()>
c0020853:	83 c4 10             	add    esp,0x10
c0020856:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002085a:	a1 ac 6a 02 c0       	mov    eax,ds:0xc0026aac
c002085f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020863:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020867:	05 e0 03 00 00       	add    eax,0x3e0
c002086c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0020872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020876:	05 80 03 00 00       	add    eax,0x380
c002087b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0020881:	fb                   	sti    
c0020882:	66 90                	xchg   ax,ax
c0020884:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020888:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c002088e:	a1 ac 6a 02 c0       	mov    eax,ds:0xc0026aac
c0020893:	39 c2                	cmp    edx,eax
c0020895:	76 05                	jbe    c002089c <APICTimer::write(int)+0x74>
c0020897:	eb eb                	jmp    c0020884 <APICTimer::write(int)+0x5c>
c0020899:	8d 76 00             	lea    esi,[esi+0x0]
c002089c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208a0:	05 20 03 00 00       	add    eax,0x320
c00208a5:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00208ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208af:	05 90 03 00 00       	add    eax,0x390
c00208b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00208b6:	f7 d0                	not    eax
c00208b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00208bc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00208c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208c4:	ba 00 00 00 00       	mov    edx,0x0
c00208c9:	f7 f1                	div    ecx
c00208cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00208ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208d2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00208d8:	0d 00 00 02 00       	or     eax,0x20000
c00208dd:	89 c2                	mov    edx,eax
c00208df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208e3:	05 20 03 00 00       	add    eax,0x320
c00208e8:	89 10                	mov    DWORD PTR [eax],edx
c00208ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208ee:	05 e0 03 00 00       	add    eax,0x3e0
c00208f3:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00208f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208fd:	05 80 03 00 00       	add    eax,0x380
c0020902:	89 c2                	mov    edx,eax
c0020904:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020907:	89 02                	mov    DWORD PTR [edx],eax
c0020909:	90                   	nop
c002090a:	83 c4 1c             	add    esp,0x1c
c002090d:	c3                   	ret    
c002090e:	66 90                	xchg   ax,ax

c0020910 <APICTimer::open(int, int, void*)>:
c0020910:	57                   	push   edi
c0020911:	56                   	push   esi
c0020912:	53                   	push   ebx
c0020913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020917:	8b 00                	mov    eax,DWORD PTR [eax]
c0020919:	83 c0 24             	add    eax,0x24
c002091c:	8b 00                	mov    eax,DWORD PTR [eax]
c002091e:	83 ec 08             	sub    esp,0x8
c0020921:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020925:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020929:	ff d0                	call   eax
c002092b:	83 c4 10             	add    esp,0x10
c002092e:	a1 48 64 02 c0       	mov    eax,ds:0xc0026448
c0020933:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020939:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002093f:	83 ec 0c             	sub    esp,0xc
c0020942:	50                   	push   eax
c0020943:	e8 ec f3 ff ff       	call   c001fd34 <APIC::getBase()>
c0020948:	83 c4 10             	add    esp,0x10
c002094b:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0020951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020955:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002095b:	0f b6 f8             	movzx  edi,al
c002095e:	89 d0                	mov    eax,edx
c0020960:	ba 00 00 00 00       	mov    edx,0x0
c0020965:	89 c1                	mov    ecx,eax
c0020967:	80 e5 ff             	and    ch,0xff
c002096a:	89 cb                	mov    ebx,ecx
c002096c:	0f b6 f2             	movzx  esi,dl
c002096f:	89 d8                	mov    eax,ebx
c0020971:	89 f2                	mov    edx,esi
c0020973:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020977:	8d 5f 08             	lea    ebx,[edi+0x8]
c002097a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002097e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020982:	83 e0 00             	and    eax,0x0
c0020985:	09 d0                	or     eax,edx
c0020987:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002098b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002098f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020995:	8d 50 01             	lea    edx,[eax+0x1]
c0020998:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002099c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00209a2:	0f b6 d0             	movzx  edx,al
c00209a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209a9:	83 c2 08             	add    edx,0x8
c00209ac:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00209b0:	0f b6 c9             	movzx  ecx,cl
c00209b3:	81 c9 00 00 01 00    	or     ecx,0x10000
c00209b9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00209bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00209c5:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00209cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00209d3:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00209d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00209dd:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00209e3:	83 ec 0c             	sub    esp,0xc
c00209e6:	51                   	push   ecx
c00209e7:	6a 01                	push   0x1
c00209e9:	68 00 08 02 c0       	push   0xc0020800
c00209ee:	52                   	push   edx
c00209ef:	50                   	push   eax
c00209f0:	e8 8d d4 fe ff       	call   c000de82 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00209f5:	83 c4 20             	add    esp,0x20
c00209f8:	89 c2                	mov    edx,eax
c00209fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209fe:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020a04:	b8 00 00 00 00       	mov    eax,0x0
c0020a09:	5b                   	pop    ebx
c0020a0a:	5e                   	pop    esi
c0020a0b:	5f                   	pop    edi
c0020a0c:	c3                   	ret    
c0020a0d:	90                   	nop
c0020a0e:	66 90                	xchg   ax,ax

c0020a10 <APICTimer::APICTimer()>:
c0020a10:	83 ec 0c             	sub    esp,0xc
c0020a13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a17:	83 ec 08             	sub    esp,0x8
c0020a1a:	68 1c 56 02 c0       	push   0xc002561c
c0020a1f:	50                   	push   eax
c0020a20:	e8 db fc fe ff       	call   c0010700 <Timer::Timer(char const*)>
c0020a25:	83 c4 10             	add    esp,0x10
c0020a28:	ba 30 56 02 c0       	mov    edx,0xc0025630
c0020a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a31:	89 10                	mov    DWORD PTR [eax],edx
c0020a33:	90                   	nop
c0020a34:	83 c4 0c             	add    esp,0xc
c0020a37:	c3                   	ret    

c0020a38 <PIT::write(int)>:
c0020a38:	83 ec 10             	sub    esp,0x10
c0020a3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020a3f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020a43:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020a49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020a4d:	a3 c4 83 02 c0       	mov    ds:0xc00283c4,eax
c0020a52:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0020a57:	99                   	cdq    
c0020a58:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0020a5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a60:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0020a67:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020a6c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020a70:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0020a75:	ee                   	out    dx,al
c0020a76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a7a:	0f b6 c0             	movzx  eax,al
c0020a7d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0020a84:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0020a88:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020a8c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020a91:	ee                   	out    dx,al
c0020a92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a96:	c1 f8 08             	sar    eax,0x8
c0020a99:	0f b6 c0             	movzx  eax,al
c0020a9c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0020aa3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020aa7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020aab:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020ab0:	ee                   	out    dx,al
c0020ab1:	90                   	nop
c0020ab2:	83 c4 10             	add    esp,0x10
c0020ab5:	c3                   	ret    
c0020ab6:	66 90                	xchg   ax,ax

c0020ab8 <pitHandler(regs*, void*)>:
c0020ab8:	83 ec 0c             	sub    esp,0xc
c0020abb:	8b 0d c4 83 02 c0    	mov    ecx,DWORD PTR ds:0xc00283c4
c0020ac1:	b8 a0 86 01 00       	mov    eax,0x186a0
c0020ac6:	99                   	cdq    
c0020ac7:	f7 f9                	idiv   ecx
c0020ac9:	83 ec 0c             	sub    esp,0xc
c0020acc:	50                   	push   eax
c0020acd:	e8 bf fc fe ff       	call   c0010791 <timerHandler(unsigned int)>
c0020ad2:	83 c4 10             	add    esp,0x10
c0020ad5:	90                   	nop
c0020ad6:	83 c4 0c             	add    esp,0xc
c0020ad9:	c3                   	ret    
c0020ada:	66 90                	xchg   ax,ax

c0020adc <PIT::open(int, int, void*)>:
c0020adc:	83 ec 0c             	sub    esp,0xc
c0020adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ae3:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ae5:	83 c0 24             	add    eax,0x24
c0020ae8:	8b 00                	mov    eax,DWORD PTR [eax]
c0020aea:	83 ec 08             	sub    esp,0x8
c0020aed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020af1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020af5:	ff d0                	call   eax
c0020af7:	83 c4 10             	add    esp,0x10
c0020afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020afe:	83 ec 0c             	sub    esp,0xc
c0020b01:	6a 00                	push   0x0
c0020b03:	6a 01                	push   0x1
c0020b05:	68 b8 0a 02 c0       	push   0xc0020ab8
c0020b0a:	6a 00                	push   0x0
c0020b0c:	50                   	push   eax
c0020b0d:	e8 70 d3 fe ff       	call   c000de82 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020b12:	83 c4 20             	add    esp,0x20
c0020b15:	89 c2                	mov    edx,eax
c0020b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b1b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020b21:	b8 00 00 00 00       	mov    eax,0x0
c0020b26:	83 c4 0c             	add    esp,0xc
c0020b29:	c3                   	ret    
c0020b2a:	66 90                	xchg   ax,ax

c0020b2c <PIT::close(int, int, void*)>:
c0020b2c:	83 ec 0c             	sub    esp,0xc
c0020b2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b33:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020b3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b41:	6a 01                	push   0x1
c0020b43:	68 b8 0a 02 c0       	push   0xc0020ab8
c0020b48:	6a 00                	push   0x0
c0020b4a:	50                   	push   eax
c0020b4b:	e8 7c d3 fe ff       	call   c000decc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0020b50:	83 c4 10             	add    esp,0x10
c0020b53:	b8 00 00 00 00       	mov    eax,0x0
c0020b58:	83 c4 0c             	add    esp,0xc
c0020b5b:	c3                   	ret    

c0020b5c <PIT::PIT()>:
c0020b5c:	83 ec 0c             	sub    esp,0xc
c0020b5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b63:	83 ec 08             	sub    esp,0x8
c0020b66:	68 58 56 02 c0       	push   0xc0025658
c0020b6b:	50                   	push   eax
c0020b6c:	e8 8f fb fe ff       	call   c0010700 <Timer::Timer(char const*)>
c0020b71:	83 c4 10             	add    esp,0x10
c0020b74:	ba 80 56 02 c0       	mov    edx,0xc0025680
c0020b79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b7d:	89 10                	mov    DWORD PTR [eax],edx
c0020b7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b83:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020b89:	0f b6 d0             	movzx  edx,al
c0020b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b90:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020ba1:	0f b6 d0             	movzx  edx,al
c0020ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ba8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bb1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020bb7:	8d 50 01             	lea    edx,[eax+0x1]
c0020bba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020bbe:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020bc4:	0f b6 d0             	movzx  edx,al
c0020bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bcb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020bcf:	83 e1 3f             	and    ecx,0x3f
c0020bd2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020bd6:	90                   	nop
c0020bd7:	83 c4 0c             	add    esp,0xc
c0020bda:	c3                   	ret    
c0020bdb:	66 90                	xchg   ax,ax
c0020bdd:	66 90                	xchg   ax,ax
c0020bdf:	90                   	nop

c0020be0 <avxDetect>:
c0020be0:	b8 00 00 00 00       	mov    eax,0x0
c0020be5:	c3                   	ret    

c0020be6 <avxSave>:
c0020be6:	c3                   	ret    

c0020be7 <avxLoad>:
c0020be7:	c3                   	ret    

c0020be8 <avxInit>:
c0020be8:	c3                   	ret    

c0020be9 <avxClose>:
c0020be9:	c3                   	ret    

c0020bea <wouldSheSayYes>:
c0020bea:	c3                   	ret    
c0020beb:	49                   	dec    ecx
c0020bec:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0020bf0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0020bf4:	75 20                	jne    c0020c16 <sseDetect.noSSE+0x1>
c0020bf6:	4e                   	dec    esi
c0020bf7:	79 61                	jns    c0020c5a <x87Detect+0x14>
c0020bf9:	68 2e 2e 2e 00       	push   0x2e2e2e
c0020bfe:	66 90                	xchg   ax,ax

c0020c00 <absolutelyNoChanceInHell>:
c0020c00:	b8 01 00 00 00       	mov    eax,0x1
c0020c05:	0f a2                	cpuid  
c0020c07:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0020c0d:	74 06                	je     c0020c15 <sseDetect.noSSE>
c0020c0f:	b8 01 00 00 00       	mov    eax,0x1
c0020c14:	c3                   	ret    

c0020c15 <sseDetect.noSSE>:
c0020c15:	31 c0                	xor    eax,eax
c0020c17:	c3                   	ret    

c0020c18 <sseSave>:
c0020c18:	0f ae 44 24 04       	fxsave [esp+0x4]
c0020c1d:	c3                   	ret    

c0020c1e <sseLoad>:
c0020c1e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0020c23:	c3                   	ret    

c0020c24 <sseInit>:
c0020c24:	e8 49 00 00 00       	call   c0020c72 <x87Init>
c0020c29:	0f 20 e0             	mov    eax,cr4
c0020c2c:	66 0d 00 06          	or     ax,0x600
c0020c30:	0f 22 e0             	mov    cr4,eax
c0020c33:	c3                   	ret    

c0020c34 <sseClose>:
c0020c34:	c3                   	ret    
c0020c35:	66 90                	xchg   ax,ax
c0020c37:	66 90                	xchg   ax,ax
c0020c39:	66 90                	xchg   ax,ax
c0020c3b:	66 90                	xchg   ax,ax
c0020c3d:	66 90                	xchg   ax,ax
c0020c3f:	90                   	nop

c0020c40 <value_37F>:
c0020c40:	7f 03                	jg     c0020c45 <value_37A+0x1>

c0020c42 <value_37E>:
c0020c42:	7e 03                	jle    c0020c47 <x87Detect+0x1>

c0020c44 <value_37A>:
c0020c44:	7a 03                	jp     c0020c49 <x87Detect+0x3>

c0020c46 <x87Detect>:
c0020c46:	b8 01 00 00 00       	mov    eax,0x1
c0020c4b:	0f a2                	cpuid  
c0020c4d:	f7 c2 01 00 00 00    	test   edx,0x1
c0020c53:	74 06                	je     c0020c5b <x87Detect.nox87>
c0020c55:	b8 01 00 00 00       	mov    eax,0x1
c0020c5a:	c3                   	ret    

c0020c5b <x87Detect.nox87>:
c0020c5b:	b8 00 00 00 00       	mov    eax,0x0
c0020c60:	c3                   	ret    

c0020c61 <x87Save>:
c0020c61:	55                   	push   ebp
c0020c62:	89 e5                	mov    ebp,esp
c0020c64:	9b dd 75 08          	fsave  [ebp+0x8]
c0020c68:	c9                   	leave  
c0020c69:	c3                   	ret    

c0020c6a <x87Load>:
c0020c6a:	55                   	push   ebp
c0020c6b:	89 e5                	mov    ebp,esp
c0020c6d:	dd 65 08             	frstor [ebp+0x8]
c0020c70:	c9                   	leave  
c0020c71:	c3                   	ret    

c0020c72 <x87Init>:
c0020c72:	9b db e3             	finit  
c0020c75:	0f 20 c0             	mov    eax,cr0
c0020c78:	66 25 fb ff          	and    ax,0xfffb
c0020c7c:	66 0d 22 00          	or     ax,0x22
c0020c80:	0f 22 c0             	mov    cr0,eax
c0020c83:	0f 06                	clts   
c0020c85:	d9 2d 44 0c 02 c0    	fldcw  WORD PTR ds:0xc0020c44
c0020c8b:	c3                   	ret    

c0020c8c <x87Close>:
c0020c8c:	c3                   	ret    
c0020c8d:	66 90                	xchg   ax,ax
c0020c8f:	90                   	nop

c0020c90 <__do_global_ctors_aux>:
c0020c90:	a1 2c 1e 02 c0       	mov    eax,ds:0xc0021e2c
c0020c95:	83 f8 ff             	cmp    eax,0xffffffff
c0020c98:	74 1a                	je     c0020cb4 <__do_global_ctors_aux+0x24>
c0020c9a:	55                   	push   ebp
c0020c9b:	89 e5                	mov    ebp,esp
c0020c9d:	53                   	push   ebx
c0020c9e:	52                   	push   edx
c0020c9f:	bb 2c 1e 02 c0       	mov    ebx,0xc0021e2c
c0020ca4:	ff d0                	call   eax
c0020ca6:	83 eb 04             	sub    ebx,0x4
c0020ca9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020cab:	83 f8 ff             	cmp    eax,0xffffffff
c0020cae:	75 f4                	jne    c0020ca4 <__do_global_ctors_aux+0x14>
c0020cb0:	58                   	pop    eax
c0020cb1:	5b                   	pop    ebx
c0020cb2:	5d                   	pop    ebp
c0020cb3:	c3                   	ret    
c0020cb4:	c3                   	ret    
c0020cb5:	66 90                	xchg   ax,ax
c0020cb7:	90                   	nop

c0020cb8 <__divdi3>:
c0020cb8:	55                   	push   ebp
c0020cb9:	57                   	push   edi
c0020cba:	56                   	push   esi
c0020cbb:	53                   	push   ebx
c0020cbc:	83 ec 1c             	sub    esp,0x1c
c0020cbf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0020cc3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020cc7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020cca:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020cce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020cd2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020cd6:	85 db                	test   ebx,ebx
c0020cd8:	0f 88 8e 00 00 00    	js     c0020d6c <__divdi3+0xb4>
c0020cde:	89 dd                	mov    ebp,ebx
c0020ce0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020ce8:	89 d3                	mov    ebx,edx
c0020cea:	85 d2                	test   edx,edx
c0020cec:	79 0d                	jns    c0020cfb <__divdi3+0x43>
c0020cee:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0020cf2:	f7 d8                	neg    eax
c0020cf4:	83 d2 00             	adc    edx,0x0
c0020cf7:	f7 da                	neg    edx
c0020cf9:	89 d3                	mov    ebx,edx
c0020cfb:	89 c7                	mov    edi,eax
c0020cfd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020d00:	85 db                	test   ebx,ebx
c0020d02:	75 48                	jne    c0020d4c <__divdi3+0x94>
c0020d04:	39 ef                	cmp    edi,ebp
c0020d06:	76 24                	jbe    c0020d2c <__divdi3+0x74>
c0020d08:	89 ea                	mov    edx,ebp
c0020d0a:	f7 f7                	div    edi
c0020d0c:	89 c1                	mov    ecx,eax
c0020d0e:	31 f6                	xor    esi,esi
c0020d10:	89 c8                	mov    eax,ecx
c0020d12:	89 f2                	mov    edx,esi
c0020d14:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020d18:	85 c9                	test   ecx,ecx
c0020d1a:	74 07                	je     c0020d23 <__divdi3+0x6b>
c0020d1c:	f7 d8                	neg    eax
c0020d1e:	83 d2 00             	adc    edx,0x0
c0020d21:	f7 da                	neg    edx
c0020d23:	83 c4 1c             	add    esp,0x1c
c0020d26:	5b                   	pop    ebx
c0020d27:	5e                   	pop    esi
c0020d28:	5f                   	pop    edi
c0020d29:	5d                   	pop    ebp
c0020d2a:	c3                   	ret    
c0020d2b:	90                   	nop
c0020d2c:	85 ff                	test   edi,edi
c0020d2e:	75 0b                	jne    c0020d3b <__divdi3+0x83>
c0020d30:	b8 01 00 00 00       	mov    eax,0x1
c0020d35:	31 d2                	xor    edx,edx
c0020d37:	f7 f3                	div    ebx
c0020d39:	89 c7                	mov    edi,eax
c0020d3b:	31 d2                	xor    edx,edx
c0020d3d:	89 e8                	mov    eax,ebp
c0020d3f:	f7 f7                	div    edi
c0020d41:	89 c6                	mov    esi,eax
c0020d43:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020d46:	f7 f7                	div    edi
c0020d48:	89 c1                	mov    ecx,eax
c0020d4a:	eb c4                	jmp    c0020d10 <__divdi3+0x58>
c0020d4c:	39 eb                	cmp    ebx,ebp
c0020d4e:	77 3c                	ja     c0020d8c <__divdi3+0xd4>
c0020d50:	0f bd f3             	bsr    esi,ebx
c0020d53:	83 f6 1f             	xor    esi,0x1f
c0020d56:	75 40                	jne    c0020d98 <__divdi3+0xe0>
c0020d58:	39 eb                	cmp    ebx,ebp
c0020d5a:	72 09                	jb     c0020d65 <__divdi3+0xad>
c0020d5c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020d5f:	0f 87 97 00 00 00    	ja     c0020dfc <__divdi3+0x144>
c0020d65:	b9 01 00 00 00       	mov    ecx,0x1
c0020d6a:	eb a4                	jmp    c0020d10 <__divdi3+0x58>
c0020d6c:	f7 d9                	neg    ecx
c0020d6e:	83 d3 00             	adc    ebx,0x0
c0020d71:	f7 db                	neg    ebx
c0020d73:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020d76:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020d7a:	89 dd                	mov    ebp,ebx
c0020d7c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0020d84:	e9 5f ff ff ff       	jmp    c0020ce8 <__divdi3+0x30>
c0020d89:	8d 76 00             	lea    esi,[esi+0x0]
c0020d8c:	31 f6                	xor    esi,esi
c0020d8e:	31 c9                	xor    ecx,ecx
c0020d90:	e9 7b ff ff ff       	jmp    c0020d10 <__divdi3+0x58>
c0020d95:	8d 76 00             	lea    esi,[esi+0x0]
c0020d98:	b8 20 00 00 00       	mov    eax,0x20
c0020d9d:	29 f0                	sub    eax,esi
c0020d9f:	89 f1                	mov    ecx,esi
c0020da1:	d3 e3                	shl    ebx,cl
c0020da3:	89 fa                	mov    edx,edi
c0020da5:	88 c1                	mov    cl,al
c0020da7:	d3 ea                	shr    edx,cl
c0020da9:	09 da                	or     edx,ebx
c0020dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020daf:	89 f1                	mov    ecx,esi
c0020db1:	d3 e7                	shl    edi,cl
c0020db3:	89 eb                	mov    ebx,ebp
c0020db5:	88 c1                	mov    cl,al
c0020db7:	d3 eb                	shr    ebx,cl
c0020db9:	89 f1                	mov    ecx,esi
c0020dbb:	d3 e5                	shl    ebp,cl
c0020dbd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0020dc0:	88 c1                	mov    cl,al
c0020dc2:	d3 ea                	shr    edx,cl
c0020dc4:	09 d5                	or     ebp,edx
c0020dc6:	89 e8                	mov    eax,ebp
c0020dc8:	89 da                	mov    edx,ebx
c0020dca:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0020dce:	89 d3                	mov    ebx,edx
c0020dd0:	89 c5                	mov    ebp,eax
c0020dd2:	f7 e7                	mul    edi
c0020dd4:	39 d3                	cmp    ebx,edx
c0020dd6:	72 18                	jb     c0020df0 <__divdi3+0x138>
c0020dd8:	74 0a                	je     c0020de4 <__divdi3+0x12c>
c0020dda:	89 e9                	mov    ecx,ebp
c0020ddc:	31 f6                	xor    esi,esi
c0020dde:	e9 2d ff ff ff       	jmp    c0020d10 <__divdi3+0x58>
c0020de3:	90                   	nop
c0020de4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0020de7:	89 f1                	mov    ecx,esi
c0020de9:	d3 e7                	shl    edi,cl
c0020deb:	39 c7                	cmp    edi,eax
c0020ded:	73 eb                	jae    c0020dda <__divdi3+0x122>
c0020def:	90                   	nop
c0020df0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0020df3:	31 f6                	xor    esi,esi
c0020df5:	e9 16 ff ff ff       	jmp    c0020d10 <__divdi3+0x58>
c0020dfa:	66 90                	xchg   ax,ax
c0020dfc:	31 c9                	xor    ecx,ecx
c0020dfe:	e9 0d ff ff ff       	jmp    c0020d10 <__divdi3+0x58>
c0020e03:	90                   	nop

c0020e04 <__moddi3>:
c0020e04:	55                   	push   ebp
c0020e05:	57                   	push   edi
c0020e06:	56                   	push   esi
c0020e07:	53                   	push   ebx
c0020e08:	83 ec 2c             	sub    esp,0x2c
c0020e0b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020e0f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0020e13:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020e17:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0020e1b:	85 db                	test   ebx,ebx
c0020e1d:	0f 88 85 00 00 00    	js     c0020ea8 <__moddi3+0xa4>
c0020e23:	89 de                	mov    esi,ebx
c0020e25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020e2d:	89 d7                	mov    edi,edx
c0020e2f:	85 d2                	test   edx,edx
c0020e31:	79 09                	jns    c0020e3c <__moddi3+0x38>
c0020e33:	f7 d8                	neg    eax
c0020e35:	83 d2 00             	adc    edx,0x0
c0020e38:	f7 da                	neg    edx
c0020e3a:	89 d7                	mov    edi,edx
c0020e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e40:	89 cd                	mov    ebp,ecx
c0020e42:	85 ff                	test   edi,edi
c0020e44:	75 52                	jne    c0020e98 <__moddi3+0x94>
c0020e46:	89 c3                	mov    ebx,eax
c0020e48:	39 f0                	cmp    eax,esi
c0020e4a:	76 24                	jbe    c0020e70 <__moddi3+0x6c>
c0020e4c:	89 c8                	mov    eax,ecx
c0020e4e:	89 f2                	mov    edx,esi
c0020e50:	f7 f3                	div    ebx
c0020e52:	89 d6                	mov    esi,edx
c0020e54:	89 f0                	mov    eax,esi
c0020e56:	31 d2                	xor    edx,edx
c0020e58:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020e5c:	85 c9                	test   ecx,ecx
c0020e5e:	74 07                	je     c0020e67 <__moddi3+0x63>
c0020e60:	f7 d8                	neg    eax
c0020e62:	83 d2 00             	adc    edx,0x0
c0020e65:	f7 da                	neg    edx
c0020e67:	83 c4 2c             	add    esp,0x2c
c0020e6a:	5b                   	pop    ebx
c0020e6b:	5e                   	pop    esi
c0020e6c:	5f                   	pop    edi
c0020e6d:	5d                   	pop    ebp
c0020e6e:	c3                   	ret    
c0020e6f:	90                   	nop
c0020e70:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020e74:	85 db                	test   ebx,ebx
c0020e76:	75 0d                	jne    c0020e85 <__moddi3+0x81>
c0020e78:	b8 01 00 00 00       	mov    eax,0x1
c0020e7d:	31 d2                	xor    edx,edx
c0020e7f:	f7 f7                	div    edi
c0020e81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e85:	89 f0                	mov    eax,esi
c0020e87:	31 d2                	xor    edx,edx
c0020e89:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020e8d:	f7 f7                	div    edi
c0020e8f:	89 e8                	mov    eax,ebp
c0020e91:	f7 f7                	div    edi
c0020e93:	89 d6                	mov    esi,edx
c0020e95:	eb bd                	jmp    c0020e54 <__moddi3+0x50>
c0020e97:	90                   	nop
c0020e98:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020e9c:	39 f7                	cmp    edi,esi
c0020e9e:	76 20                	jbe    c0020ec0 <__moddi3+0xbc>
c0020ea0:	89 c8                	mov    eax,ecx
c0020ea2:	89 f2                	mov    edx,esi
c0020ea4:	eb b2                	jmp    c0020e58 <__moddi3+0x54>
c0020ea6:	66 90                	xchg   ax,ax
c0020ea8:	f7 d9                	neg    ecx
c0020eaa:	83 d3 00             	adc    ebx,0x0
c0020ead:	f7 db                	neg    ebx
c0020eaf:	89 de                	mov    esi,ebx
c0020eb1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0020eb9:	e9 6f ff ff ff       	jmp    c0020e2d <__moddi3+0x29>
c0020ebe:	66 90                	xchg   ax,ax
c0020ec0:	0f bd c7             	bsr    eax,edi
c0020ec3:	83 f0 1f             	xor    eax,0x1f
c0020ec6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020eca:	75 24                	jne    c0020ef0 <__moddi3+0xec>
c0020ecc:	39 f7                	cmp    edi,esi
c0020ece:	72 06                	jb     c0020ed6 <__moddi3+0xd2>
c0020ed0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0020ed4:	77 0c                	ja     c0020ee2 <__moddi3+0xde>
c0020ed6:	89 e9                	mov    ecx,ebp
c0020ed8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0020edc:	19 fe                	sbb    esi,edi
c0020ede:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020ee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ee6:	89 f2                	mov    edx,esi
c0020ee8:	e9 6b ff ff ff       	jmp    c0020e58 <__moddi3+0x54>
c0020eed:	8d 76 00             	lea    esi,[esi+0x0]
c0020ef0:	b8 20 00 00 00       	mov    eax,0x20
c0020ef5:	89 c2                	mov    edx,eax
c0020ef7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020efb:	29 da                	sub    edx,ebx
c0020efd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020f01:	88 d9                	mov    cl,bl
c0020f03:	d3 e7                	shl    edi,cl
c0020f05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f09:	88 d1                	mov    cl,dl
c0020f0b:	d3 e8                	shr    eax,cl
c0020f0d:	09 c7                	or     edi,eax
c0020f0f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020f13:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020f17:	89 d8                	mov    eax,ebx
c0020f19:	88 d9                	mov    cl,bl
c0020f1b:	d3 e7                	shl    edi,cl
c0020f1d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020f21:	89 f3                	mov    ebx,esi
c0020f23:	88 d1                	mov    cl,dl
c0020f25:	d3 eb                	shr    ebx,cl
c0020f27:	89 c7                	mov    edi,eax
c0020f29:	88 c1                	mov    cl,al
c0020f2b:	d3 e6                	shl    esi,cl
c0020f2d:	89 e8                	mov    eax,ebp
c0020f2f:	88 d1                	mov    cl,dl
c0020f31:	d3 e8                	shr    eax,cl
c0020f33:	09 f0                	or     eax,esi
c0020f35:	89 f9                	mov    ecx,edi
c0020f37:	d3 e5                	shl    ebp,cl
c0020f39:	89 da                	mov    edx,ebx
c0020f3b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0020f3f:	89 d3                	mov    ebx,edx
c0020f41:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020f45:	89 c6                	mov    esi,eax
c0020f47:	89 d1                	mov    ecx,edx
c0020f49:	39 d3                	cmp    ebx,edx
c0020f4b:	72 27                	jb     c0020f74 <__moddi3+0x170>
c0020f4d:	74 21                	je     c0020f70 <__moddi3+0x16c>
c0020f4f:	29 f5                	sub    ebp,esi
c0020f51:	19 cb                	sbb    ebx,ecx
c0020f53:	89 de                	mov    esi,ebx
c0020f55:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020f59:	d3 e6                	shl    esi,cl
c0020f5b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020f5f:	89 f9                	mov    ecx,edi
c0020f61:	d3 ed                	shr    ebp,cl
c0020f63:	09 ee                	or     esi,ebp
c0020f65:	89 f0                	mov    eax,esi
c0020f67:	d3 eb                	shr    ebx,cl
c0020f69:	89 da                	mov    edx,ebx
c0020f6b:	e9 e8 fe ff ff       	jmp    c0020e58 <__moddi3+0x54>
c0020f70:	39 c5                	cmp    ebp,eax
c0020f72:	73 db                	jae    c0020f4f <__moddi3+0x14b>
c0020f74:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020f78:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0020f7c:	89 d1                	mov    ecx,edx
c0020f7e:	89 c6                	mov    esi,eax
c0020f80:	eb cd                	jmp    c0020f4f <__moddi3+0x14b>
c0020f82:	66 90                	xchg   ax,ax

c0020f84 <__udivdi3>:
c0020f84:	55                   	push   ebp
c0020f85:	57                   	push   edi
c0020f86:	56                   	push   esi
c0020f87:	53                   	push   ebx
c0020f88:	83 ec 1c             	sub    esp,0x1c
c0020f8b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020f8f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020f93:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020f97:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020f9b:	85 d2                	test   edx,edx
c0020f9d:	75 41                	jne    c0020fe0 <__udivdi3+0x5c>
c0020f9f:	39 f7                	cmp    edi,esi
c0020fa1:	76 15                	jbe    c0020fb8 <__udivdi3+0x34>
c0020fa3:	89 e8                	mov    eax,ebp
c0020fa5:	89 f2                	mov    edx,esi
c0020fa7:	f7 f7                	div    edi
c0020fa9:	31 db                	xor    ebx,ebx
c0020fab:	89 da                	mov    edx,ebx
c0020fad:	83 c4 1c             	add    esp,0x1c
c0020fb0:	5b                   	pop    ebx
c0020fb1:	5e                   	pop    esi
c0020fb2:	5f                   	pop    edi
c0020fb3:	5d                   	pop    ebp
c0020fb4:	c3                   	ret    
c0020fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0020fb8:	89 f9                	mov    ecx,edi
c0020fba:	85 ff                	test   edi,edi
c0020fbc:	75 0b                	jne    c0020fc9 <__udivdi3+0x45>
c0020fbe:	b8 01 00 00 00       	mov    eax,0x1
c0020fc3:	31 d2                	xor    edx,edx
c0020fc5:	f7 f7                	div    edi
c0020fc7:	89 c1                	mov    ecx,eax
c0020fc9:	31 d2                	xor    edx,edx
c0020fcb:	89 f0                	mov    eax,esi
c0020fcd:	f7 f1                	div    ecx
c0020fcf:	89 c3                	mov    ebx,eax
c0020fd1:	89 e8                	mov    eax,ebp
c0020fd3:	f7 f1                	div    ecx
c0020fd5:	89 da                	mov    edx,ebx
c0020fd7:	83 c4 1c             	add    esp,0x1c
c0020fda:	5b                   	pop    ebx
c0020fdb:	5e                   	pop    esi
c0020fdc:	5f                   	pop    edi
c0020fdd:	5d                   	pop    ebp
c0020fde:	c3                   	ret    
c0020fdf:	90                   	nop
c0020fe0:	39 f2                	cmp    edx,esi
c0020fe2:	77 1c                	ja     c0021000 <__udivdi3+0x7c>
c0020fe4:	0f bd da             	bsr    ebx,edx
c0020fe7:	83 f3 1f             	xor    ebx,0x1f
c0020fea:	75 24                	jne    c0021010 <__udivdi3+0x8c>
c0020fec:	39 f2                	cmp    edx,esi
c0020fee:	72 08                	jb     c0020ff8 <__udivdi3+0x74>
c0020ff0:	39 ef                	cmp    edi,ebp
c0020ff2:	0f 87 84 00 00 00    	ja     c002107c <__udivdi3+0xf8>
c0020ff8:	b8 01 00 00 00       	mov    eax,0x1
c0020ffd:	eb ac                	jmp    c0020fab <__udivdi3+0x27>
c0020fff:	90                   	nop
c0021000:	31 db                	xor    ebx,ebx
c0021002:	31 c0                	xor    eax,eax
c0021004:	89 da                	mov    edx,ebx
c0021006:	83 c4 1c             	add    esp,0x1c
c0021009:	5b                   	pop    ebx
c002100a:	5e                   	pop    esi
c002100b:	5f                   	pop    edi
c002100c:	5d                   	pop    ebp
c002100d:	c3                   	ret    
c002100e:	66 90                	xchg   ax,ax
c0021010:	b8 20 00 00 00       	mov    eax,0x20
c0021015:	29 d8                	sub    eax,ebx
c0021017:	88 d9                	mov    cl,bl
c0021019:	d3 e2                	shl    edx,cl
c002101b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002101f:	89 fa                	mov    edx,edi
c0021021:	88 c1                	mov    cl,al
c0021023:	d3 ea                	shr    edx,cl
c0021025:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021029:	09 d1                	or     ecx,edx
c002102b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002102f:	88 d9                	mov    cl,bl
c0021031:	d3 e7                	shl    edi,cl
c0021033:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021037:	89 f7                	mov    edi,esi
c0021039:	88 c1                	mov    cl,al
c002103b:	d3 ef                	shr    edi,cl
c002103d:	88 d9                	mov    cl,bl
c002103f:	d3 e6                	shl    esi,cl
c0021041:	89 ea                	mov    edx,ebp
c0021043:	88 c1                	mov    cl,al
c0021045:	d3 ea                	shr    edx,cl
c0021047:	09 d6                	or     esi,edx
c0021049:	89 f0                	mov    eax,esi
c002104b:	89 fa                	mov    edx,edi
c002104d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021051:	89 d7                	mov    edi,edx
c0021053:	89 c6                	mov    esi,eax
c0021055:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021059:	39 d7                	cmp    edi,edx
c002105b:	72 13                	jb     c0021070 <__udivdi3+0xec>
c002105d:	74 09                	je     c0021068 <__udivdi3+0xe4>
c002105f:	89 f0                	mov    eax,esi
c0021061:	31 db                	xor    ebx,ebx
c0021063:	e9 43 ff ff ff       	jmp    c0020fab <__udivdi3+0x27>
c0021068:	88 d9                	mov    cl,bl
c002106a:	d3 e5                	shl    ebp,cl
c002106c:	39 c5                	cmp    ebp,eax
c002106e:	73 ef                	jae    c002105f <__udivdi3+0xdb>
c0021070:	8d 46 ff             	lea    eax,[esi-0x1]
c0021073:	31 db                	xor    ebx,ebx
c0021075:	e9 31 ff ff ff       	jmp    c0020fab <__udivdi3+0x27>
c002107a:	66 90                	xchg   ax,ax
c002107c:	31 c0                	xor    eax,eax
c002107e:	e9 28 ff ff ff       	jmp    c0020fab <__udivdi3+0x27>
c0021083:	90                   	nop

c0021084 <__umoddi3>:
c0021084:	55                   	push   ebp
c0021085:	57                   	push   edi
c0021086:	56                   	push   esi
c0021087:	53                   	push   ebx
c0021088:	83 ec 1c             	sub    esp,0x1c
c002108b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002108f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021093:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021097:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002109b:	89 da                	mov    edx,ebx
c002109d:	85 c0                	test   eax,eax
c002109f:	75 37                	jne    c00210d8 <__umoddi3+0x54>
c00210a1:	39 df                	cmp    edi,ebx
c00210a3:	76 13                	jbe    c00210b8 <__umoddi3+0x34>
c00210a5:	89 f0                	mov    eax,esi
c00210a7:	f7 f7                	div    edi
c00210a9:	89 d0                	mov    eax,edx
c00210ab:	31 d2                	xor    edx,edx
c00210ad:	83 c4 1c             	add    esp,0x1c
c00210b0:	5b                   	pop    ebx
c00210b1:	5e                   	pop    esi
c00210b2:	5f                   	pop    edi
c00210b3:	5d                   	pop    ebp
c00210b4:	c3                   	ret    
c00210b5:	8d 76 00             	lea    esi,[esi+0x0]
c00210b8:	89 fd                	mov    ebp,edi
c00210ba:	85 ff                	test   edi,edi
c00210bc:	75 0b                	jne    c00210c9 <__umoddi3+0x45>
c00210be:	b8 01 00 00 00       	mov    eax,0x1
c00210c3:	31 d2                	xor    edx,edx
c00210c5:	f7 f7                	div    edi
c00210c7:	89 c5                	mov    ebp,eax
c00210c9:	89 d8                	mov    eax,ebx
c00210cb:	31 d2                	xor    edx,edx
c00210cd:	f7 f5                	div    ebp
c00210cf:	89 f0                	mov    eax,esi
c00210d1:	f7 f5                	div    ebp
c00210d3:	89 d0                	mov    eax,edx
c00210d5:	eb d4                	jmp    c00210ab <__umoddi3+0x27>
c00210d7:	90                   	nop
c00210d8:	89 f1                	mov    ecx,esi
c00210da:	39 d8                	cmp    eax,ebx
c00210dc:	76 0a                	jbe    c00210e8 <__umoddi3+0x64>
c00210de:	89 f0                	mov    eax,esi
c00210e0:	83 c4 1c             	add    esp,0x1c
c00210e3:	5b                   	pop    ebx
c00210e4:	5e                   	pop    esi
c00210e5:	5f                   	pop    edi
c00210e6:	5d                   	pop    ebp
c00210e7:	c3                   	ret    
c00210e8:	0f bd e8             	bsr    ebp,eax
c00210eb:	83 f5 1f             	xor    ebp,0x1f
c00210ee:	75 1c                	jne    c002110c <__umoddi3+0x88>
c00210f0:	39 d8                	cmp    eax,ebx
c00210f2:	72 04                	jb     c00210f8 <__umoddi3+0x74>
c00210f4:	39 f7                	cmp    edi,esi
c00210f6:	77 08                	ja     c0021100 <__umoddi3+0x7c>
c00210f8:	89 da                	mov    edx,ebx
c00210fa:	29 fe                	sub    esi,edi
c00210fc:	19 c2                	sbb    edx,eax
c00210fe:	89 f1                	mov    ecx,esi
c0021100:	89 c8                	mov    eax,ecx
c0021102:	83 c4 1c             	add    esp,0x1c
c0021105:	5b                   	pop    ebx
c0021106:	5e                   	pop    esi
c0021107:	5f                   	pop    edi
c0021108:	5d                   	pop    ebp
c0021109:	c3                   	ret    
c002110a:	66 90                	xchg   ax,ax
c002110c:	ba 20 00 00 00       	mov    edx,0x20
c0021111:	29 ea                	sub    edx,ebp
c0021113:	89 e9                	mov    ecx,ebp
c0021115:	d3 e0                	shl    eax,cl
c0021117:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002111b:	89 f8                	mov    eax,edi
c002111d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021121:	88 d1                	mov    cl,dl
c0021123:	d3 e8                	shr    eax,cl
c0021125:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021129:	09 c1                	or     ecx,eax
c002112b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002112f:	89 e9                	mov    ecx,ebp
c0021131:	d3 e7                	shl    edi,cl
c0021133:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021137:	89 d8                	mov    eax,ebx
c0021139:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002113d:	88 d1                	mov    cl,dl
c002113f:	d3 e8                	shr    eax,cl
c0021141:	89 c7                	mov    edi,eax
c0021143:	89 e9                	mov    ecx,ebp
c0021145:	d3 e3                	shl    ebx,cl
c0021147:	89 f0                	mov    eax,esi
c0021149:	88 d1                	mov    cl,dl
c002114b:	d3 e8                	shr    eax,cl
c002114d:	09 d8                	or     eax,ebx
c002114f:	89 e9                	mov    ecx,ebp
c0021151:	d3 e6                	shl    esi,cl
c0021153:	89 f3                	mov    ebx,esi
c0021155:	89 fa                	mov    edx,edi
c0021157:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002115b:	89 d1                	mov    ecx,edx
c002115d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021161:	89 c6                	mov    esi,eax
c0021163:	89 d7                	mov    edi,edx
c0021165:	39 d1                	cmp    ecx,edx
c0021167:	72 27                	jb     c0021190 <__umoddi3+0x10c>
c0021169:	74 21                	je     c002118c <__umoddi3+0x108>
c002116b:	89 ca                	mov    edx,ecx
c002116d:	29 f3                	sub    ebx,esi
c002116f:	19 fa                	sbb    edx,edi
c0021171:	89 d0                	mov    eax,edx
c0021173:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021177:	d3 e0                	shl    eax,cl
c0021179:	89 e9                	mov    ecx,ebp
c002117b:	d3 eb                	shr    ebx,cl
c002117d:	09 d8                	or     eax,ebx
c002117f:	d3 ea                	shr    edx,cl
c0021181:	83 c4 1c             	add    esp,0x1c
c0021184:	5b                   	pop    ebx
c0021185:	5e                   	pop    esi
c0021186:	5f                   	pop    edi
c0021187:	5d                   	pop    ebp
c0021188:	c3                   	ret    
c0021189:	8d 76 00             	lea    esi,[esi+0x0]
c002118c:	39 c3                	cmp    ebx,eax
c002118e:	73 db                	jae    c002116b <__umoddi3+0xe7>
c0021190:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021194:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021198:	89 d7                	mov    edi,edx
c002119a:	89 c6                	mov    esi,eax
c002119c:	eb cd                	jmp    c002116b <__umoddi3+0xe7>

Disassembly of section .init:

c002119e <_init>:
c002119e:	55                   	push   ebp
c002119f:	89 e5                	mov    ebp,esp
c00211a1:	e8 72 ef fd ff       	call   c0000118 <frame_dummy>
c00211a6:	e8 e5 fa ff ff       	call   c0020c90 <__do_global_ctors_aux>
c00211ab:	5d                   	pop    ebp
c00211ac:	c3                   	ret    

Disassembly of section .fini:

c00211ad <_fini>:
c00211ad:	55                   	push   ebp
c00211ae:	89 e5                	mov    ebp,esp
c00211b0:	e8 f3 ee fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00211b5:	5d                   	pop    ebp
c00211b6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00211b8 <Computer::~Computer()>:
c00211b8:	83 ec 0c             	sub    esp,0xc
c00211bb:	ba d4 27 02 c0       	mov    edx,0xc00227d4
c00211c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211c4:	89 10                	mov    DWORD PTR [eax],edx
c00211c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211ca:	83 ec 0c             	sub    esp,0xc
c00211cd:	50                   	push   eax
c00211ce:	e8 05 cc fe ff       	call   c000ddd8 <Device::~Device()>
c00211d3:	83 c4 10             	add    esp,0x10
c00211d6:	90                   	nop
c00211d7:	83 c4 0c             	add    esp,0xc
c00211da:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00211dc <Computer::~Computer()>:
c00211dc:	83 ec 0c             	sub    esp,0xc
c00211df:	83 ec 0c             	sub    esp,0xc
c00211e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00211e6:	e8 cd ff ff ff       	call   c00211b8 <Computer::~Computer()>
c00211eb:	83 c4 10             	add    esp,0x10
c00211ee:	83 ec 08             	sub    esp,0x8
c00211f1:	68 ec 01 00 00       	push   0x1ec
c00211f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00211fa:	e8 e3 b7 fe ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c00211ff:	83 c4 10             	add    esp,0x10
c0021202:	83 c4 0c             	add    esp,0xc
c0021205:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021206 <idleCommon()>:
c0021206:	83 ec 0c             	sub    esp,0xc
c0021209:	fa                   	cli    
c002120a:	ff 05 48 79 02 c0    	inc    DWORD PTR ds:0xc0027948
c0021210:	e8 43 6d ff ff       	call   c0017f58 <schedule()>
c0021215:	a1 48 79 02 c0       	mov    eax,ds:0xc0027948
c002121a:	48                   	dec    eax
c002121b:	a3 48 79 02 c0       	mov    ds:0xc0027948,eax
c0021220:	75 01                	jne    c0021223 <idleCommon()+0x1d>
c0021222:	fb                   	sti    
c0021223:	83 c4 0c             	add    esp,0xc
c0021226:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0021228 <LinkedList<UnixFile>::~LinkedList()>:
c0021228:	90                   	nop
c0021229:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002122a <LinkedList<UnixFile>::LinkedList()>:
c002122a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002122e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021238:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002123f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021243:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002124a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002124e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021258:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002125f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021263:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002126a:	90                   	nop
c002126b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002126c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002126c:	83 ec 0c             	sub    esp,0xc
c002126f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021274:	75 10                	jne    c0021286 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0021276:	83 ec 0c             	sub    esp,0xc
c0021279:	68 14 2b 02 c0       	push   0xc0022b14
c002127e:	e8 02 31 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0021283:	83 c4 10             	add    esp,0x10
c0021286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002128a:	8b 00                	mov    eax,DWORD PTR [eax]
c002128c:	85 c0                	test   eax,eax
c002128e:	74 34                	je     c00212c4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021294:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021297:	85 c0                	test   eax,eax
c0021299:	74 29                	je     c00212c4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002129b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002129f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00212a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212b1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00212b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212bb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00212c2:	eb 65                	jmp    c0021329 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00212c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00212ca:	85 c0                	test   eax,eax
c00212cc:	75 4b                	jne    c0021319 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00212ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212d5:	85 c0                	test   eax,eax
c00212d7:	75 40                	jne    c0021319 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00212d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212e1:	89 10                	mov    DWORD PTR [eax],edx
c00212e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212eb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00212ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212f5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00212fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021300:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021303:	85 c0                	test   eax,eax
c0021305:	74 22                	je     c0021329 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021307:	83 ec 0c             	sub    esp,0xc
c002130a:	68 36 2b 02 c0       	push   0xc0022b36
c002130f:	e8 71 30 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0021314:	83 c4 10             	add    esp,0x10
c0021317:	eb 10                	jmp    c0021329 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021319:	83 ec 0c             	sub    esp,0xc
c002131c:	68 40 2b 02 c0       	push   0xc0022b40
c0021321:	e8 5f 30 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0021326:	83 c4 10             	add    esp,0x10
c0021329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002132d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021330:	8d 50 01             	lea    edx,[eax+0x1]
c0021333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021337:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002133a:	90                   	nop
c002133b:	83 c4 0c             	add    esp,0xc
c002133e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0021340 <LinkedList<UnixFile>::getFirstElement()>:
c0021340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021344:	8b 00                	mov    eax,DWORD PTR [eax]
c0021346:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0021348 <LinkedList<UnixFile>::removeFirst()>:
c0021348:	83 ec 0c             	sub    esp,0xc
c002134b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002134f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021351:	85 c0                	test   eax,eax
c0021353:	75 12                	jne    c0021367 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0021355:	83 ec 0c             	sub    esp,0xc
c0021358:	68 4c 2b 02 c0       	push   0xc0022b4c
c002135d:	e8 23 30 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0021362:	83 c4 10             	add    esp,0x10
c0021365:	eb 7e                	jmp    c00213e5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0021367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002136b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002136e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021371:	85 c0                	test   eax,eax
c0021373:	74 10                	je     c0021385 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0021375:	83 ec 0c             	sub    esp,0xc
c0021378:	68 97 2b 02 c0       	push   0xc0022b97
c002137d:	e8 03 30 ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0021382:	83 c4 10             	add    esp,0x10
c0021385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021389:	8b 00                	mov    eax,DWORD PTR [eax]
c002138b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002138e:	85 c0                	test   eax,eax
c0021390:	75 33                	jne    c00213c5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0021392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021396:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002139c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00213a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00213ae:	83 f8 01             	cmp    eax,0x1
c00213b1:	74 21                	je     c00213d4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00213b3:	83 ec 0c             	sub    esp,0xc
c00213b6:	68 70 2b 02 c0       	push   0xc0022b70
c00213bb:	e8 c5 2f ff ff       	call   c0014385 <Krnl::panic(char const*)>
c00213c0:	83 c4 10             	add    esp,0x10
c00213c3:	eb 0f                	jmp    c00213d4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00213c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00213cb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00213ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213d2:	89 10                	mov    DWORD PTR [eax],edx
c00213d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00213db:	8d 50 ff             	lea    edx,[eax-0x1]
c00213de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00213e5:	83 c4 0c             	add    esp,0xc
c00213e8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00213ea <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00213ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00213f1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00213f2 <DriverlessDevice::~DriverlessDevice()>:
c00213f2:	ba fc 33 02 c0       	mov    edx,0xc00233fc
c00213f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213fb:	89 10                	mov    DWORD PTR [eax],edx
c00213fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021401:	50                   	push   eax
c0021402:	e8 d1 c9 fe ff       	call   c000ddd8 <Device::~Device()>
c0021407:	83 c4 04             	add    esp,0x4
c002140a:	90                   	nop
c002140b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002140c <DriverlessDevice::~DriverlessDevice()>:
c002140c:	83 ec 0c             	sub    esp,0xc
c002140f:	83 ec 0c             	sub    esp,0xc
c0021412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021416:	e8 d7 ff ff ff       	call   c00213f2 <DriverlessDevice::~DriverlessDevice()>
c002141b:	83 c4 10             	add    esp,0x10
c002141e:	83 ec 08             	sub    esp,0x8
c0021421:	68 58 01 00 00       	push   0x158
c0021426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002142a:	e8 b3 b5 fe ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c002142f:	83 c4 10             	add    esp,0x10
c0021432:	83 c4 0c             	add    esp,0xc
c0021435:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021436 <LinkedList<Device>::addElement(Device*)>:
c0021436:	83 ec 0c             	sub    esp,0xc
c0021439:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002143e:	75 10                	jne    c0021450 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021440:	83 ec 0c             	sub    esp,0xc
c0021443:	68 14 2b 02 c0       	push   0xc0022b14
c0021448:	e8 38 2f ff ff       	call   c0014385 <Krnl::panic(char const*)>
c002144d:	83 c4 10             	add    esp,0x10
c0021450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021454:	8b 00                	mov    eax,DWORD PTR [eax]
c0021456:	85 c0                	test   eax,eax
c0021458:	74 3a                	je     c0021494 <LinkedList<Device>::addElement(Device*)+0x5e>
c002145a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002145e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021461:	85 c0                	test   eax,eax
c0021463:	74 2f                	je     c0021494 <LinkedList<Device>::addElement(Device*)+0x5e>
c0021465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021469:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002146c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021470:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002147a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002147e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021485:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021488:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021492:	eb 68                	jmp    c00214fc <LinkedList<Device>::addElement(Device*)+0xc6>
c0021494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021498:	8b 00                	mov    eax,DWORD PTR [eax]
c002149a:	85 c0                	test   eax,eax
c002149c:	75 4e                	jne    c00214ec <LinkedList<Device>::addElement(Device*)+0xb6>
c002149e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00214a5:	85 c0                	test   eax,eax
c00214a7:	75 43                	jne    c00214ec <LinkedList<Device>::addElement(Device*)+0xb6>
c00214a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00214b1:	89 10                	mov    DWORD PTR [eax],edx
c00214b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00214bb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00214be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00214c5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00214cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214d3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00214d6:	85 c0                	test   eax,eax
c00214d8:	74 22                	je     c00214fc <LinkedList<Device>::addElement(Device*)+0xc6>
c00214da:	83 ec 0c             	sub    esp,0xc
c00214dd:	68 36 2b 02 c0       	push   0xc0022b36
c00214e2:	e8 9e 2e ff ff       	call   c0014385 <Krnl::panic(char const*)>
c00214e7:	83 c4 10             	add    esp,0x10
c00214ea:	eb 10                	jmp    c00214fc <LinkedList<Device>::addElement(Device*)+0xc6>
c00214ec:	83 ec 0c             	sub    esp,0xc
c00214ef:	68 40 2b 02 c0       	push   0xc0022b40
c00214f4:	e8 8c 2e ff ff       	call   c0014385 <Krnl::panic(char const*)>
c00214f9:	83 c4 10             	add    esp,0x10
c00214fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021500:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021503:	8d 50 01             	lea    edx,[eax+0x1]
c0021506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002150a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002150d:	90                   	nop
c002150e:	83 c4 0c             	add    esp,0xc
c0021511:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021512 <LinkedList<Device>::LinkedList()>:
c0021512:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021516:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002151c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021520:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021527:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002152b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021536:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002153c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021540:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021547:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002154b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021552:	90                   	nop
c0021553:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021554 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021554:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021558:	8b 00                	mov    eax,DWORD PTR [eax]
c002155a:	85 c0                	test   eax,eax
c002155c:	75 0e                	jne    c002156c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002155e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021562:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021565:	85 c0                	test   eax,eax
c0021567:	75 03                	jne    c002156c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021569:	b0 01                	mov    al,0x1
c002156b:	c3                   	ret    
c002156c:	b0 00                	mov    al,0x0
c002156e:	90                   	nop
c002156f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021574:	8b 00                	mov    eax,DWORD PTR [eax]
c0021576:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021578 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021578:	83 ec 0c             	sub    esp,0xc
c002157b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002157f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021581:	85 c0                	test   eax,eax
c0021583:	75 17                	jne    c002159c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021585:	83 ec 0c             	sub    esp,0xc
c0021588:	68 4c 2b 02 c0       	push   0xc0022b4c
c002158d:	e8 f3 2d ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0021592:	83 c4 10             	add    esp,0x10
c0021595:	e9 92 00 00 00       	jmp    c002162c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c002159a:	66 90                	xchg   ax,ax
c002159c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215a3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00215a6:	85 c0                	test   eax,eax
c00215a8:	0f 95 c0             	setne  al
c00215ab:	84 c0                	test   al,al
c00215ad:	74 11                	je     c00215c0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c00215af:	83 ec 0c             	sub    esp,0xc
c00215b2:	68 97 2b 02 c0       	push   0xc0022b97
c00215b7:	e8 c9 2d ff ff       	call   c0014385 <Krnl::panic(char const*)>
c00215bc:	83 c4 10             	add    esp,0x10
c00215bf:	90                   	nop
c00215c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00215c6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00215c9:	85 c0                	test   eax,eax
c00215cb:	0f 94 c0             	sete   al
c00215ce:	84 c0                	test   al,al
c00215d0:	74 36                	je     c0021608 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c00215d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00215dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00215e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00215ee:	83 f8 01             	cmp    eax,0x1
c00215f1:	74 25                	je     c0021618 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c00215f3:	83 ec 0c             	sub    esp,0xc
c00215f6:	68 70 2b 02 c0       	push   0xc0022b70
c00215fb:	e8 85 2d ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0021600:	83 c4 10             	add    esp,0x10
c0021603:	eb 13                	jmp    c0021618 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021605:	8d 76 00             	lea    esi,[esi+0x0]
c0021608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002160c:	8b 00                	mov    eax,DWORD PTR [eax]
c002160e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021615:	89 10                	mov    DWORD PTR [eax],edx
c0021617:	90                   	nop
c0021618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002161c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002161f:	8d 50 ff             	lea    edx,[eax-0x1]
c0021622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021626:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021629:	8d 76 00             	lea    esi,[esi+0x0]
c002162c:	83 c4 0c             	add    esp,0xc
c002162f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021630:	83 ec 0c             	sub    esp,0xc
c0021633:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021638:	75 12                	jne    c002164c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002163a:	83 ec 0c             	sub    esp,0xc
c002163d:	68 14 2b 02 c0       	push   0xc0022b14
c0021642:	e8 3e 2d ff ff       	call   c0014385 <Krnl::panic(char const*)>
c0021647:	83 c4 10             	add    esp,0x10
c002164a:	66 90                	xchg   ax,ax
c002164c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021650:	8b 00                	mov    eax,DWORD PTR [eax]
c0021652:	85 c0                	test   eax,eax
c0021654:	74 36                	je     c002168c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002165a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002165d:	85 c0                	test   eax,eax
c002165f:	74 2b                	je     c002168c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021665:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021668:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002166c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002166f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021673:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021677:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002167a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002167e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021681:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021688:	eb 6a                	jmp    c00216f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002168a:	66 90                	xchg   ax,ax
c002168c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021690:	8b 00                	mov    eax,DWORD PTR [eax]
c0021692:	85 c0                	test   eax,eax
c0021694:	75 4e                	jne    c00216e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002169a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002169d:	85 c0                	test   eax,eax
c002169f:	75 43                	jne    c00216e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00216a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216a9:	89 10                	mov    DWORD PTR [eax],edx
c00216ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00216b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00216bd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00216c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00216cb:	85 c0                	test   eax,eax
c00216cd:	74 25                	je     c00216f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00216cf:	83 ec 0c             	sub    esp,0xc
c00216d2:	68 36 2b 02 c0       	push   0xc0022b36
c00216d7:	e8 a9 2c ff ff       	call   c0014385 <Krnl::panic(char const*)>
c00216dc:	83 c4 10             	add    esp,0x10
c00216df:	eb 13                	jmp    c00216f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00216e1:	8d 76 00             	lea    esi,[esi+0x0]
c00216e4:	83 ec 0c             	sub    esp,0xc
c00216e7:	68 40 2b 02 c0       	push   0xc0022b40
c00216ec:	e8 94 2c ff ff       	call   c0014385 <Krnl::panic(char const*)>
c00216f1:	83 c4 10             	add    esp,0x10
c00216f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00216fb:	8d 50 01             	lea    edx,[eax+0x1]
c00216fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021702:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021705:	90                   	nop
c0021706:	83 c4 0c             	add    esp,0xc
c0021709:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002170c <ACPI::~ACPI()>:
c002170c:	83 ec 0c             	sub    esp,0xc
c002170f:	ba cc 3e 02 c0       	mov    edx,0xc0023ecc
c0021714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021718:	89 10                	mov    DWORD PTR [eax],edx
c002171a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002171e:	83 ec 0c             	sub    esp,0xc
c0021721:	50                   	push   eax
c0021722:	e8 b1 c6 fe ff       	call   c000ddd8 <Device::~Device()>
c0021727:	83 c4 10             	add    esp,0x10
c002172a:	90                   	nop
c002172b:	83 c4 0c             	add    esp,0xc
c002172e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021730 <ACPI::~ACPI()>:
c0021730:	83 ec 0c             	sub    esp,0xc
c0021733:	83 ec 0c             	sub    esp,0xc
c0021736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002173a:	e8 cd ff ff ff       	call   c002170c <ACPI::~ACPI()>
c002173f:	83 c4 10             	add    esp,0x10
c0021742:	83 ec 08             	sub    esp,0x8
c0021745:	68 64 12 00 00       	push   0x1264
c002174a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002174e:	e8 8f b2 fe ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c0021753:	83 c4 10             	add    esp,0x10
c0021756:	83 c4 0c             	add    esp,0xc
c0021759:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002175c <LinkedList<Device>::~LinkedList()>:
c002175c:	90                   	nop
c002175d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021760 <LinkedList<Device>::isEmpty()>:
c0021760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021764:	8b 00                	mov    eax,DWORD PTR [eax]
c0021766:	85 c0                	test   eax,eax
c0021768:	75 0e                	jne    c0021778 <LinkedList<Device>::isEmpty()+0x18>
c002176a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002176e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021771:	85 c0                	test   eax,eax
c0021773:	75 03                	jne    c0021778 <LinkedList<Device>::isEmpty()+0x18>
c0021775:	b0 01                	mov    al,0x1
c0021777:	c3                   	ret    
c0021778:	b0 00                	mov    al,0x0
c002177a:	90                   	nop
c002177b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002177c <LinkedList<Device>::getFirstElement()>:
c002177c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021780:	8b 00                	mov    eax,DWORD PTR [eax]
c0021782:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021784 <LinkedList<Device>::removeFirst()>:
c0021784:	83 ec 0c             	sub    esp,0xc
c0021787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002178b:	8b 00                	mov    eax,DWORD PTR [eax]
c002178d:	85 c0                	test   eax,eax
c002178f:	75 17                	jne    c00217a8 <LinkedList<Device>::removeFirst()+0x24>
c0021791:	83 ec 0c             	sub    esp,0xc
c0021794:	68 4c 2b 02 c0       	push   0xc0022b4c
c0021799:	e8 e7 2b ff ff       	call   c0014385 <Krnl::panic(char const*)>
c002179e:	83 c4 10             	add    esp,0x10
c00217a1:	e9 92 00 00 00       	jmp    c0021838 <LinkedList<Device>::removeFirst()+0xb4>
c00217a6:	66 90                	xchg   ax,ax
c00217a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00217af:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00217b5:	85 c0                	test   eax,eax
c00217b7:	74 13                	je     c00217cc <LinkedList<Device>::removeFirst()+0x48>
c00217b9:	83 ec 0c             	sub    esp,0xc
c00217bc:	68 97 2b 02 c0       	push   0xc0022b97
c00217c1:	e8 bf 2b ff ff       	call   c0014385 <Krnl::panic(char const*)>
c00217c6:	83 c4 10             	add    esp,0x10
c00217c9:	8d 76 00             	lea    esi,[esi+0x0]
c00217cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00217d2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00217d8:	85 c0                	test   eax,eax
c00217da:	75 34                	jne    c0021810 <LinkedList<Device>::removeFirst()+0x8c>
c00217dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00217e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00217f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217f5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00217f8:	83 f8 01             	cmp    eax,0x1
c00217fb:	74 27                	je     c0021824 <LinkedList<Device>::removeFirst()+0xa0>
c00217fd:	83 ec 0c             	sub    esp,0xc
c0021800:	68 70 2b 02 c0       	push   0xc0022b70
c0021805:	e8 7b 2b ff ff       	call   c0014385 <Krnl::panic(char const*)>
c002180a:	83 c4 10             	add    esp,0x10
c002180d:	eb 15                	jmp    c0021824 <LinkedList<Device>::removeFirst()+0xa0>
c002180f:	90                   	nop
c0021810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021814:	8b 00                	mov    eax,DWORD PTR [eax]
c0021816:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002181c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021820:	89 10                	mov    DWORD PTR [eax],edx
c0021822:	66 90                	xchg   ax,ax
c0021824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021828:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002182b:	8d 50 ff             	lea    edx,[eax-0x1]
c002182e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021832:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021835:	8d 76 00             	lea    esi,[esi+0x0]
c0021838:	83 c4 0c             	add    esp,0xc
c002183b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002183c <CPU::~CPU()>:
c002183c:	83 ec 0c             	sub    esp,0xc
c002183f:	ba 68 42 02 c0       	mov    edx,0xc0024268
c0021844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021848:	89 10                	mov    DWORD PTR [eax],edx
c002184a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002184e:	83 ec 0c             	sub    esp,0xc
c0021851:	50                   	push   eax
c0021852:	e8 81 c5 fe ff       	call   c000ddd8 <Device::~Device()>
c0021857:	83 c4 10             	add    esp,0x10
c002185a:	90                   	nop
c002185b:	83 c4 0c             	add    esp,0xc
c002185e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0021860 <CPU::~CPU()>:
c0021860:	83 ec 0c             	sub    esp,0xc
c0021863:	83 ec 0c             	sub    esp,0xc
c0021866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002186a:	e8 cd ff ff ff       	call   c002183c <CPU::~CPU()>
c002186f:	83 c4 10             	add    esp,0x10
c0021872:	83 ec 08             	sub    esp,0x8
c0021875:	68 98 11 00 00       	push   0x1198
c002187a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002187e:	e8 5f b1 fe ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c0021883:	83 c4 10             	add    esp,0x10
c0021886:	83 c4 0c             	add    esp,0xc
c0021889:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002188c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002188c:	90                   	nop
c002188d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0021890 <ThreadControlBlock::ThreadControlBlock()>:
c0021890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021894:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002189b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002189f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00218a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218aa:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00218b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218b5:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00218bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218c0:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00218c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218cb:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00218cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218d3:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00218d7:	90                   	nop
c00218d8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00218dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00218dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00218e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00218f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218f5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00218fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021900:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002190a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021911:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021915:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002191c:	90                   	nop
c002191d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0021920 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0021920:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021924:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021927:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0021928 <Vm::_FPUState::_FPUState()>:
c0021928:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002192c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0021933:	90                   	nop
c0021934:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0021936 <PCI::~PCI()>:
c0021936:	83 ec 0c             	sub    esp,0xc
c0021939:	ba c8 4f 02 c0       	mov    edx,0xc0024fc8
c002193e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021942:	89 10                	mov    DWORD PTR [eax],edx
c0021944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021948:	83 ec 0c             	sub    esp,0xc
c002194b:	50                   	push   eax
c002194c:	e8 57 be fe ff       	call   c000d7a8 <Bus::~Bus()>
c0021951:	83 c4 10             	add    esp,0x10
c0021954:	90                   	nop
c0021955:	83 c4 0c             	add    esp,0xc
c0021958:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002195a <PCI::~PCI()>:
c002195a:	83 ec 0c             	sub    esp,0xc
c002195d:	83 ec 0c             	sub    esp,0xc
c0021960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021964:	e8 cd ff ff ff       	call   c0021936 <PCI::~PCI()>
c0021969:	83 c4 10             	add    esp,0x10
c002196c:	83 ec 08             	sub    esp,0x8
c002196f:	68 5c 01 00 00       	push   0x15c
c0021974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021978:	e8 65 b0 fe ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c002197d:	83 c4 10             	add    esp,0x10
c0021980:	83 c4 0c             	add    esp,0xc
c0021983:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0021984 <IDE::~IDE()>:
c0021984:	83 ec 0c             	sub    esp,0xc
c0021987:	ba 7c 50 02 c0       	mov    edx,0xc002507c
c002198c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021990:	89 10                	mov    DWORD PTR [eax],edx
c0021992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021996:	83 ec 0c             	sub    esp,0xc
c0021999:	50                   	push   eax
c002199a:	e8 51 c9 fe ff       	call   c000e2f0 <HardDiskController::~HardDiskController()>
c002199f:	83 c4 10             	add    esp,0x10
c00219a2:	90                   	nop
c00219a3:	83 c4 0c             	add    esp,0xc
c00219a6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00219a8 <IDE::~IDE()>:
c00219a8:	83 ec 0c             	sub    esp,0xc
c00219ab:	83 ec 0c             	sub    esp,0xc
c00219ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219b2:	e8 cd ff ff ff       	call   c0021984 <IDE::~IDE()>
c00219b7:	83 c4 10             	add    esp,0x10
c00219ba:	83 ec 08             	sub    esp,0x8
c00219bd:	68 70 02 00 00       	push   0x270
c00219c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219c6:	e8 17 b0 fe ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c00219cb:	83 c4 10             	add    esp,0x10
c00219ce:	83 c4 0c             	add    esp,0xc
c00219d1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00219d2 <SATABus::~SATABus()>:
c00219d2:	83 ec 0c             	sub    esp,0xc
c00219d5:	ba f4 50 02 c0       	mov    edx,0xc00250f4
c00219da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219de:	89 10                	mov    DWORD PTR [eax],edx
c00219e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219e4:	83 ec 0c             	sub    esp,0xc
c00219e7:	50                   	push   eax
c00219e8:	e8 03 c9 fe ff       	call   c000e2f0 <HardDiskController::~HardDiskController()>
c00219ed:	83 c4 10             	add    esp,0x10
c00219f0:	90                   	nop
c00219f1:	83 c4 0c             	add    esp,0xc
c00219f4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00219f6 <SATABus::~SATABus()>:
c00219f6:	83 ec 0c             	sub    esp,0xc
c00219f9:	83 ec 0c             	sub    esp,0xc
c00219fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a00:	e8 cd ff ff ff       	call   c00219d2 <SATABus::~SATABus()>
c0021a05:	83 c4 10             	add    esp,0x10
c0021a08:	83 ec 08             	sub    esp,0x8
c0021a0b:	68 64 01 00 00       	push   0x164
c0021a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a14:	e8 c9 af fe ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c0021a19:	83 c4 10             	add    esp,0x10
c0021a1c:	83 c4 0c             	add    esp,0xc
c0021a1f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0021a20 <ATA::~ATA()>:
c0021a20:	83 ec 0c             	sub    esp,0xc
c0021a23:	ba 6c 51 02 c0       	mov    edx,0xc002516c
c0021a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a2c:	89 10                	mov    DWORD PTR [eax],edx
c0021a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a32:	83 ec 0c             	sub    esp,0xc
c0021a35:	50                   	push   eax
c0021a36:	e8 97 c9 fe ff       	call   c000e3d2 <PhysicalDisk::~PhysicalDisk()>
c0021a3b:	83 c4 10             	add    esp,0x10
c0021a3e:	90                   	nop
c0021a3f:	83 c4 0c             	add    esp,0xc
c0021a42:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0021a44 <ATA::~ATA()>:
c0021a44:	83 ec 0c             	sub    esp,0xc
c0021a47:	83 ec 0c             	sub    esp,0xc
c0021a4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a4e:	e8 cd ff ff ff       	call   c0021a20 <ATA::~ATA()>
c0021a53:	83 c4 10             	add    esp,0x10
c0021a56:	83 ec 08             	sub    esp,0x8
c0021a59:	68 7c 01 00 00       	push   0x17c
c0021a5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a62:	e8 7b af fe ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c0021a67:	83 c4 10             	add    esp,0x10
c0021a6a:	83 c4 0c             	add    esp,0xc
c0021a6d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0021a6e <ATAPI::~ATAPI()>:
c0021a6e:	83 ec 0c             	sub    esp,0xc
c0021a71:	ba a4 51 02 c0       	mov    edx,0xc00251a4
c0021a76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a7a:	89 10                	mov    DWORD PTR [eax],edx
c0021a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a80:	83 ec 0c             	sub    esp,0xc
c0021a83:	50                   	push   eax
c0021a84:	e8 49 c9 fe ff       	call   c000e3d2 <PhysicalDisk::~PhysicalDisk()>
c0021a89:	83 c4 10             	add    esp,0x10
c0021a8c:	90                   	nop
c0021a8d:	83 c4 0c             	add    esp,0xc
c0021a90:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0021a92 <ATAPI::~ATAPI()>:
c0021a92:	83 ec 0c             	sub    esp,0xc
c0021a95:	83 ec 0c             	sub    esp,0xc
c0021a98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a9c:	e8 cd ff ff ff       	call   c0021a6e <ATAPI::~ATAPI()>
c0021aa1:	83 c4 10             	add    esp,0x10
c0021aa4:	83 ec 08             	sub    esp,0x8
c0021aa7:	68 80 01 00 00       	push   0x180
c0021aac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ab0:	e8 2d af fe ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c0021ab5:	83 c4 10             	add    esp,0x10
c0021ab8:	83 c4 0c             	add    esp,0xc
c0021abb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0021abc <SATA::~SATA()>:
c0021abc:	83 ec 0c             	sub    esp,0xc
c0021abf:	ba 58 52 02 c0       	mov    edx,0xc0025258
c0021ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ac8:	89 10                	mov    DWORD PTR [eax],edx
c0021aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ace:	83 ec 0c             	sub    esp,0xc
c0021ad1:	50                   	push   eax
c0021ad2:	e8 fb c8 fe ff       	call   c000e3d2 <PhysicalDisk::~PhysicalDisk()>
c0021ad7:	83 c4 10             	add    esp,0x10
c0021ada:	90                   	nop
c0021adb:	83 c4 0c             	add    esp,0xc
c0021ade:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0021ae0 <SATA::~SATA()>:
c0021ae0:	83 ec 0c             	sub    esp,0xc
c0021ae3:	83 ec 0c             	sub    esp,0xc
c0021ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021aea:	e8 cd ff ff ff       	call   c0021abc <SATA::~SATA()>
c0021aef:	83 c4 10             	add    esp,0x10
c0021af2:	83 ec 08             	sub    esp,0x8
c0021af5:	68 7c 01 00 00       	push   0x17c
c0021afa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021afe:	e8 df ae fe ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c0021b03:	83 c4 10             	add    esp,0x10
c0021b06:	83 c4 0c             	add    esp,0xc
c0021b09:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0021b0a <SATAPI::~SATAPI()>:
c0021b0a:	83 ec 0c             	sub    esp,0xc
c0021b0d:	ba 34 53 02 c0       	mov    edx,0xc0025334
c0021b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b16:	89 10                	mov    DWORD PTR [eax],edx
c0021b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b1c:	83 ec 0c             	sub    esp,0xc
c0021b1f:	50                   	push   eax
c0021b20:	e8 ad c8 fe ff       	call   c000e3d2 <PhysicalDisk::~PhysicalDisk()>
c0021b25:	83 c4 10             	add    esp,0x10
c0021b28:	90                   	nop
c0021b29:	83 c4 0c             	add    esp,0xc
c0021b2c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0021b2e <SATAPI::~SATAPI()>:
c0021b2e:	83 ec 0c             	sub    esp,0xc
c0021b31:	83 ec 0c             	sub    esp,0xc
c0021b34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b38:	e8 cd ff ff ff       	call   c0021b0a <SATAPI::~SATAPI()>
c0021b3d:	83 c4 10             	add    esp,0x10
c0021b40:	83 ec 08             	sub    esp,0x8
c0021b43:	68 80 01 00 00       	push   0x180
c0021b48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b4c:	e8 91 ae fe ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c0021b51:	83 c4 10             	add    esp,0x10
c0021b54:	83 c4 0c             	add    esp,0xc
c0021b57:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0021b58 <AVX::~AVX()>:
c0021b58:	83 ec 0c             	sub    esp,0xc
c0021b5b:	ba 74 53 02 c0       	mov    edx,0xc0025374
c0021b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b64:	89 10                	mov    DWORD PTR [eax],edx
c0021b66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b6a:	83 ec 0c             	sub    esp,0xc
c0021b6d:	50                   	push   eax
c0021b6e:	e8 e5 c8 fe ff       	call   c000e458 <FPU::~FPU()>
c0021b73:	83 c4 10             	add    esp,0x10
c0021b76:	90                   	nop
c0021b77:	83 c4 0c             	add    esp,0xc
c0021b7a:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0021b7c <AVX::~AVX()>:
c0021b7c:	83 ec 0c             	sub    esp,0xc
c0021b7f:	83 ec 0c             	sub    esp,0xc
c0021b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b86:	e8 cd ff ff ff       	call   c0021b58 <AVX::~AVX()>
c0021b8b:	83 c4 10             	add    esp,0x10
c0021b8e:	83 ec 08             	sub    esp,0x8
c0021b91:	68 58 01 00 00       	push   0x158
c0021b96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b9a:	e8 43 ae fe ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c0021b9f:	83 c4 10             	add    esp,0x10
c0021ba2:	83 c4 0c             	add    esp,0xc
c0021ba5:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0021ba8 <MMX::~MMX()>:
c0021ba8:	83 ec 0c             	sub    esp,0xc
c0021bab:	ba b4 53 02 c0       	mov    edx,0xc00253b4
c0021bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bb4:	89 10                	mov    DWORD PTR [eax],edx
c0021bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bba:	83 ec 0c             	sub    esp,0xc
c0021bbd:	50                   	push   eax
c0021bbe:	e8 95 c8 fe ff       	call   c000e458 <FPU::~FPU()>
c0021bc3:	83 c4 10             	add    esp,0x10
c0021bc6:	90                   	nop
c0021bc7:	83 c4 0c             	add    esp,0xc
c0021bca:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0021bcc <MMX::~MMX()>:
c0021bcc:	83 ec 0c             	sub    esp,0xc
c0021bcf:	83 ec 0c             	sub    esp,0xc
c0021bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bd6:	e8 cd ff ff ff       	call   c0021ba8 <MMX::~MMX()>
c0021bdb:	83 c4 10             	add    esp,0x10
c0021bde:	83 ec 08             	sub    esp,0x8
c0021be1:	68 58 01 00 00       	push   0x158
c0021be6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bea:	e8 f3 ad fe ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c0021bef:	83 c4 10             	add    esp,0x10
c0021bf2:	83 c4 0c             	add    esp,0xc
c0021bf5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0021bf8 <SSE::~SSE()>:
c0021bf8:	83 ec 0c             	sub    esp,0xc
c0021bfb:	ba f4 53 02 c0       	mov    edx,0xc00253f4
c0021c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c04:	89 10                	mov    DWORD PTR [eax],edx
c0021c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c0a:	83 ec 0c             	sub    esp,0xc
c0021c0d:	50                   	push   eax
c0021c0e:	e8 45 c8 fe ff       	call   c000e458 <FPU::~FPU()>
c0021c13:	83 c4 10             	add    esp,0x10
c0021c16:	90                   	nop
c0021c17:	83 c4 0c             	add    esp,0xc
c0021c1a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0021c1c <SSE::~SSE()>:
c0021c1c:	83 ec 0c             	sub    esp,0xc
c0021c1f:	83 ec 0c             	sub    esp,0xc
c0021c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c26:	e8 cd ff ff ff       	call   c0021bf8 <SSE::~SSE()>
c0021c2b:	83 c4 10             	add    esp,0x10
c0021c2e:	83 ec 08             	sub    esp,0x8
c0021c31:	68 58 01 00 00       	push   0x158
c0021c36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c3a:	e8 a3 ad fe ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c0021c3f:	83 c4 10             	add    esp,0x10
c0021c42:	83 c4 0c             	add    esp,0xc
c0021c45:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0021c48 <x87::~x87()>:
c0021c48:	83 ec 0c             	sub    esp,0xc
c0021c4b:	ba 34 54 02 c0       	mov    edx,0xc0025434
c0021c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c54:	89 10                	mov    DWORD PTR [eax],edx
c0021c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c5a:	83 ec 0c             	sub    esp,0xc
c0021c5d:	50                   	push   eax
c0021c5e:	e8 f5 c7 fe ff       	call   c000e458 <FPU::~FPU()>
c0021c63:	83 c4 10             	add    esp,0x10
c0021c66:	90                   	nop
c0021c67:	83 c4 0c             	add    esp,0xc
c0021c6a:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0021c6c <x87::~x87()>:
c0021c6c:	83 ec 0c             	sub    esp,0xc
c0021c6f:	83 ec 0c             	sub    esp,0xc
c0021c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c76:	e8 cd ff ff ff       	call   c0021c48 <x87::~x87()>
c0021c7b:	83 c4 10             	add    esp,0x10
c0021c7e:	83 ec 08             	sub    esp,0x8
c0021c81:	68 58 01 00 00       	push   0x158
c0021c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c8a:	e8 53 ad fe ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c0021c8f:	83 c4 10             	add    esp,0x10
c0021c92:	83 c4 0c             	add    esp,0xc
c0021c95:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0021c96 <IOAPIC::~IOAPIC()>:
c0021c96:	83 ec 0c             	sub    esp,0xc
c0021c99:	ba 8c 55 02 c0       	mov    edx,0xc002558c
c0021c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca2:	89 10                	mov    DWORD PTR [eax],edx
c0021ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca8:	83 ec 0c             	sub    esp,0xc
c0021cab:	50                   	push   eax
c0021cac:	e8 27 c1 fe ff       	call   c000ddd8 <Device::~Device()>
c0021cb1:	83 c4 10             	add    esp,0x10
c0021cb4:	90                   	nop
c0021cb5:	83 c4 0c             	add    esp,0xc
c0021cb8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0021cba <IOAPIC::~IOAPIC()>:
c0021cba:	83 ec 0c             	sub    esp,0xc
c0021cbd:	83 ec 0c             	sub    esp,0xc
c0021cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cc4:	e8 cd ff ff ff       	call   c0021c96 <IOAPIC::~IOAPIC()>
c0021cc9:	83 c4 10             	add    esp,0x10
c0021ccc:	83 ec 08             	sub    esp,0x8
c0021ccf:	68 68 01 00 00       	push   0x168
c0021cd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cd8:	e8 05 ad fe ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c0021cdd:	83 c4 10             	add    esp,0x10
c0021ce0:	83 c4 0c             	add    esp,0xc
c0021ce3:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0021ce4 <APIC::~APIC()>:
c0021ce4:	83 ec 0c             	sub    esp,0xc
c0021ce7:	ba 44 55 02 c0       	mov    edx,0xc0025544
c0021cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf0:	89 10                	mov    DWORD PTR [eax],edx
c0021cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf6:	83 ec 0c             	sub    esp,0xc
c0021cf9:	50                   	push   eax
c0021cfa:	e8 2d cc fe ff       	call   c000e92c <InterruptController::~InterruptController()>
c0021cff:	83 c4 10             	add    esp,0x10
c0021d02:	90                   	nop
c0021d03:	83 c4 0c             	add    esp,0xc
c0021d06:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0021d08 <APIC::~APIC()>:
c0021d08:	83 ec 0c             	sub    esp,0xc
c0021d0b:	83 ec 0c             	sub    esp,0xc
c0021d0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d12:	e8 cd ff ff ff       	call   c0021ce4 <APIC::~APIC()>
c0021d17:	83 c4 10             	add    esp,0x10
c0021d1a:	83 ec 08             	sub    esp,0x8
c0021d1d:	68 58 21 00 00       	push   0x2158
c0021d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d26:	e8 b7 ac fe ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c0021d2b:	83 c4 10             	add    esp,0x10
c0021d2e:	83 c4 0c             	add    esp,0xc
c0021d31:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0021d32 <PIC::~PIC()>:
c0021d32:	83 ec 0c             	sub    esp,0xc
c0021d35:	ba dc 55 02 c0       	mov    edx,0xc00255dc
c0021d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d3e:	89 10                	mov    DWORD PTR [eax],edx
c0021d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d44:	83 ec 0c             	sub    esp,0xc
c0021d47:	50                   	push   eax
c0021d48:	e8 df cb fe ff       	call   c000e92c <InterruptController::~InterruptController()>
c0021d4d:	83 c4 10             	add    esp,0x10
c0021d50:	90                   	nop
c0021d51:	83 c4 0c             	add    esp,0xc
c0021d54:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0021d56 <PIC::~PIC()>:
c0021d56:	83 ec 0c             	sub    esp,0xc
c0021d59:	83 ec 0c             	sub    esp,0xc
c0021d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d60:	e8 cd ff ff ff       	call   c0021d32 <PIC::~PIC()>
c0021d65:	83 c4 10             	add    esp,0x10
c0021d68:	83 ec 08             	sub    esp,0x8
c0021d6b:	68 58 21 00 00       	push   0x2158
c0021d70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d74:	e8 69 ac fe ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c0021d79:	83 c4 10             	add    esp,0x10
c0021d7c:	83 c4 0c             	add    esp,0xc
c0021d7f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0021d80 <APICTimer::~APICTimer()>:
c0021d80:	83 ec 0c             	sub    esp,0xc
c0021d83:	ba 30 56 02 c0       	mov    edx,0xc0025630
c0021d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d8c:	89 10                	mov    DWORD PTR [eax],edx
c0021d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d92:	83 ec 0c             	sub    esp,0xc
c0021d95:	50                   	push   eax
c0021d96:	e8 9d e9 fe ff       	call   c0010738 <Timer::~Timer()>
c0021d9b:	83 c4 10             	add    esp,0x10
c0021d9e:	90                   	nop
c0021d9f:	83 c4 0c             	add    esp,0xc
c0021da2:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0021da4 <APICTimer::~APICTimer()>:
c0021da4:	83 ec 0c             	sub    esp,0xc
c0021da7:	83 ec 0c             	sub    esp,0xc
c0021daa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021dae:	e8 cd ff ff ff       	call   c0021d80 <APICTimer::~APICTimer()>
c0021db3:	83 c4 10             	add    esp,0x10
c0021db6:	83 ec 08             	sub    esp,0x8
c0021db9:	68 60 01 00 00       	push   0x160
c0021dbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021dc2:	e8 1b ac fe ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c0021dc7:	83 c4 10             	add    esp,0x10
c0021dca:	83 c4 0c             	add    esp,0xc
c0021dcd:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0021dd0 <PIT::~PIT()>:
c0021dd0:	83 ec 0c             	sub    esp,0xc
c0021dd3:	ba 80 56 02 c0       	mov    edx,0xc0025680
c0021dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ddc:	89 10                	mov    DWORD PTR [eax],edx
c0021dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021de2:	83 ec 0c             	sub    esp,0xc
c0021de5:	50                   	push   eax
c0021de6:	e8 4d e9 fe ff       	call   c0010738 <Timer::~Timer()>
c0021deb:	83 c4 10             	add    esp,0x10
c0021dee:	90                   	nop
c0021def:	83 c4 0c             	add    esp,0xc
c0021df2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0021df4 <PIT::~PIT()>:
c0021df4:	83 ec 0c             	sub    esp,0xc
c0021df7:	83 ec 0c             	sub    esp,0xc
c0021dfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021dfe:	e8 cd ff ff ff       	call   c0021dd0 <PIT::~PIT()>
c0021e03:	83 c4 10             	add    esp,0x10
c0021e06:	83 ec 08             	sub    esp,0x8
c0021e09:	68 5c 01 00 00       	push   0x15c
c0021e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e12:	e8 cb ab fe ff       	call   c000c9e2 <operator delete(void*, unsigned long)>
c0021e17:	83 c4 10             	add    esp,0x10
c0021e1a:	83 c4 0c             	add    esp,0xc
c0021e1d:	c3                   	ret    
