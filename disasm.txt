
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ce f9 00 00       	call   c000f9ee <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 43 74 02 00       	call   c0027468 <_init>
c0000025:	c3                   	ret    
c0000026:	bb c4 7f 02 c0       	mov    ebx,0xc0027fc4
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb d0 7f 02 c0    	cmp    ebx,0xc0027fd0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 c4 02 c0       	mov    eax,0xc002c458
c0000049:	3d 58 c4 02 c0       	cmp    eax,0xc002c458
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 c4 02 c0       	push   0xc002c458
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 c4 02 c0       	mov    eax,0xc002c458
c0000075:	2d 58 c4 02 c0       	sub    eax,0xc002c458
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 c4 02 c0       	push   0xc002c458
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca88,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb d8 7f 02 c0       	mov    ebx,0xc0027fd8
c00000bb:	81 eb d4 7f 02 c0    	sub    ebx,0xc0027fd4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be d4 7f 02 c0       	mov    esi,0xc0027fd4
c00000ca:	a1 8c ca 02 c0       	mov    eax,ds:0xc002ca8c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c ca 02 c0       	mov    ds:0xc002ca8c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c ca 02 c0       	mov    eax,ds:0xc002ca8c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 c4 02 c0       	push   0xc002c458
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 ca 02 c0 01 	mov    BYTE PTR ds:0xc002ca88,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 ca 02 c0       	push   0xc002ca90
c000012c:	68 58 c4 02 c0       	push   0xc002c458
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 85 c9 01 00       	call   c001cd20 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 06 23 01 00       	call   c00126b9 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 63 c9 01 00       	call   c001cd20 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 b1 cd 01 00       	call   c001d18d <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 5f d3 01 00       	call   c001d744 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 d0 ce 02 c0 	lgdtd  ds:0xc002ced0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 d0 3f 01 00       	call   c00145a9 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>

c000063d <memcmp>:
c000063d:	56                   	push   esi
c000063e:	53                   	push   ebx
c000063f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000643:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000647:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000064b:	01 d6                	add    esi,edx
c000064d:	39 f2                	cmp    edx,esi
c000064f:	74 0e                	je     c000065f <memcmp+0x22>
c0000651:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000654:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000657:	38 c8                	cmp    al,cl
c0000659:	75 08                	jne    c0000663 <memcmp+0x26>
c000065b:	42                   	inc    edx
c000065c:	43                   	inc    ebx
c000065d:	eb ee                	jmp    c000064d <memcmp+0x10>
c000065f:	31 c0                	xor    eax,eax
c0000661:	eb 02                	jmp    c0000665 <memcmp+0x28>
c0000663:	29 c8                	sub    eax,ecx
c0000665:	5b                   	pop    ebx
c0000666:	5e                   	pop    esi
c0000667:	c3                   	ret    

c0000668 <memmove>:
c0000668:	56                   	push   esi
c0000669:	53                   	push   ebx
c000066a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000066e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000672:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000676:	39 c8                	cmp    eax,ecx
c0000678:	73 12                	jae    c000068c <memmove+0x24>
c000067a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000067d:	89 c3                	mov    ebx,eax
c000067f:	39 f1                	cmp    ecx,esi
c0000681:	74 1a                	je     c000069d <memmove+0x35>
c0000683:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000685:	43                   	inc    ebx
c0000686:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000689:	41                   	inc    ecx
c000068a:	eb f3                	jmp    c000067f <memmove+0x17>
c000068c:	76 0f                	jbe    c000069d <memmove+0x35>
c000068e:	85 d2                	test   edx,edx
c0000690:	74 0b                	je     c000069d <memmove+0x35>
c0000692:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c0000696:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000069a:	4a                   	dec    edx
c000069b:	eb f1                	jmp    c000068e <memmove+0x26>
c000069d:	5b                   	pop    ebx
c000069e:	5e                   	pop    esi
c000069f:	c3                   	ret    

c00006a0 <memcpy>:
c00006a0:	57                   	push   edi
c00006a1:	56                   	push   esi
c00006a2:	53                   	push   ebx
c00006a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00006ab:	89 da                	mov    edx,ebx
c00006ad:	89 d9                	mov    ecx,ebx
c00006af:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006b3:	83 e2 fc             	and    edx,0xfffffffc
c00006b6:	c1 e9 02             	shr    ecx,0x2
c00006b9:	89 c7                	mov    edi,eax
c00006bb:	fc                   	cld    
c00006bc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006be:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006c1:	01 c2                	add    edx,eax
c00006c3:	01 de                	add    esi,ebx
c00006c5:	39 f1                	cmp    ecx,esi
c00006c7:	74 09                	je     c00006d2 <memcpy+0x32>
c00006c9:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006cb:	42                   	inc    edx
c00006cc:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006cf:	41                   	inc    ecx
c00006d0:	eb f3                	jmp    c00006c5 <memcpy+0x25>
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    

c00006d6 <memset>:
c00006d6:	53                   	push   ebx
c00006d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006df:	89 c2                	mov    edx,eax
c00006e1:	01 c1                	add    ecx,eax
c00006e3:	39 ca                	cmp    edx,ecx
c00006e5:	74 0a                	je     c00006f1 <memset+0x1b>
c00006e7:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006eb:	42                   	inc    edx
c00006ec:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006ef:	eb f2                	jmp    c00006e3 <memset+0xd>
c00006f1:	5b                   	pop    ebx
c00006f2:	c3                   	ret    

c00006f3 <strlen>:
c00006f3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006f7:	31 c0                	xor    eax,eax
c00006f9:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006fd:	74 03                	je     c0000702 <strlen+0xf>
c00006ff:	40                   	inc    eax
c0000700:	eb f7                	jmp    c00006f9 <strlen+0x6>
c0000702:	c3                   	ret    

c0000703 <strpbrk>:
c0000703:	53                   	push   ebx
c0000704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000708:	8a 08                	mov    cl,BYTE PTR [eax]
c000070a:	84 c9                	test   cl,cl
c000070c:	74 14                	je     c0000722 <strpbrk+0x1f>
c000070e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000712:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000714:	84 db                	test   bl,bl
c0000716:	74 07                	je     c000071f <strpbrk+0x1c>
c0000718:	38 cb                	cmp    bl,cl
c000071a:	74 08                	je     c0000724 <strpbrk+0x21>
c000071c:	42                   	inc    edx
c000071d:	eb f3                	jmp    c0000712 <strpbrk+0xf>
c000071f:	40                   	inc    eax
c0000720:	eb e6                	jmp    c0000708 <strpbrk+0x5>
c0000722:	31 c0                	xor    eax,eax
c0000724:	5b                   	pop    ebx
c0000725:	c3                   	ret    

c0000726 <strtok>:
c0000726:	56                   	push   esi
c0000727:	53                   	push   ebx
c0000728:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000072c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000730:	85 db                	test   ebx,ebx
c0000732:	75 0e                	jne    c0000742 <strtok+0x1c>
c0000734:	8b 1d a8 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002caa8
c000073a:	85 db                	test   ebx,ebx
c000073c:	75 04                	jne    c0000742 <strtok+0x1c>
c000073e:	31 db                	xor    ebx,ebx
c0000740:	eb 2e                	jmp    c0000770 <strtok+0x4a>
c0000742:	56                   	push   esi
c0000743:	53                   	push   ebx
c0000744:	e8 ba ff ff ff       	call   c0000703 <strpbrk>
c0000749:	5a                   	pop    edx
c000074a:	a3 a8 ca 02 c0       	mov    ds:0xc002caa8,eax
c000074f:	59                   	pop    ecx
c0000750:	a1 a8 ca 02 c0       	mov    eax,ds:0xc002caa8
c0000755:	39 d8                	cmp    eax,ebx
c0000757:	75 07                	jne    c0000760 <strtok+0x3a>
c0000759:	43                   	inc    ebx
c000075a:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000075e:	eb e2                	jmp    c0000742 <strtok+0x1c>
c0000760:	85 c0                	test   eax,eax
c0000762:	74 da                	je     c000073e <strtok+0x18>
c0000764:	8d 50 01             	lea    edx,[eax+0x1]
c0000767:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000076a:	89 15 a8 ca 02 c0    	mov    DWORD PTR ds:0xc002caa8,edx
c0000770:	89 d8                	mov    eax,ebx
c0000772:	5b                   	pop    ebx
c0000773:	5e                   	pop    esi
c0000774:	c3                   	ret    

c0000775 <strcpy>:
c0000775:	53                   	push   ebx
c0000776:	31 d2                	xor    edx,edx
c0000778:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000077c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000780:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000783:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000786:	84 c9                	test   cl,cl
c0000788:	74 06                	je     c0000790 <strcpy+0x1b>
c000078a:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c000078d:	42                   	inc    edx
c000078e:	eb ec                	jmp    c000077c <strcpy+0x7>
c0000790:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000793:	5b                   	pop    ebx
c0000794:	c3                   	ret    

c0000795 <strncpy>:
c0000795:	56                   	push   esi
c0000796:	53                   	push   ebx
c0000797:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000079b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000079f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00007a3:	89 c3                	mov    ebx,eax
c00007a5:	85 c9                	test   ecx,ecx
c00007a7:	74 1a                	je     c00007c3 <strncpy+0x2e>
c00007a9:	46                   	inc    esi
c00007aa:	43                   	inc    ebx
c00007ab:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00007ae:	49                   	dec    ecx
c00007af:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007b2:	84 d2                	test   dl,dl
c00007b4:	75 ef                	jne    c00007a5 <strncpy+0x10>
c00007b6:	31 d2                	xor    edx,edx
c00007b8:	39 d1                	cmp    ecx,edx
c00007ba:	74 07                	je     c00007c3 <strncpy+0x2e>
c00007bc:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007c0:	42                   	inc    edx
c00007c1:	eb f5                	jmp    c00007b8 <strncpy+0x23>
c00007c3:	5b                   	pop    ebx
c00007c4:	5e                   	pop    esi
c00007c5:	c3                   	ret    

c00007c6 <strcmp>:
c00007c6:	31 c9                	xor    ecx,ecx
c00007c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007d0:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007d4:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007d8:	38 d0                	cmp    al,dl
c00007da:	75 08                	jne    c00007e4 <strcmp+0x1e>
c00007dc:	41                   	inc    ecx
c00007dd:	84 c0                	test   al,al
c00007df:	75 e7                	jne    c00007c8 <strcmp+0x2>
c00007e1:	31 c0                	xor    eax,eax
c00007e3:	c3                   	ret    
c00007e4:	29 d0                	sub    eax,edx
c00007e6:	c3                   	ret    

c00007e7 <strchr>:
c00007e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007eb:	8a 10                	mov    dl,BYTE PTR [eax]
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 09                	je     c00007fa <strchr+0x13>
c00007f1:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007f5:	74 05                	je     c00007fc <strchr+0x15>
c00007f7:	40                   	inc    eax
c00007f8:	eb f1                	jmp    c00007eb <strchr+0x4>
c00007fa:	31 c0                	xor    eax,eax
c00007fc:	c3                   	ret    

c00007fd <strncmp>:
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000803:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000807:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000080b:	01 d6                	add    esi,edx
c000080d:	39 f2                	cmp    edx,esi
c000080f:	74 12                	je     c0000823 <strncmp+0x26>
c0000811:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000814:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000817:	38 c8                	cmp    al,cl
c0000819:	75 0c                	jne    c0000827 <strncmp+0x2a>
c000081b:	42                   	inc    edx
c000081c:	84 c0                	test   al,al
c000081e:	74 03                	je     c0000823 <strncmp+0x26>
c0000820:	43                   	inc    ebx
c0000821:	eb ea                	jmp    c000080d <strncmp+0x10>
c0000823:	31 c0                	xor    eax,eax
c0000825:	eb 02                	jmp    c0000829 <strncmp+0x2c>
c0000827:	29 c8                	sub    eax,ecx
c0000829:	5b                   	pop    ebx
c000082a:	5e                   	pop    esi
c000082b:	c3                   	ret    

c000082c <strcat>:
c000082c:	53                   	push   ebx
c000082d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000831:	89 c1                	mov    ecx,eax
c0000833:	8d 51 01             	lea    edx,[ecx+0x1]
c0000836:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000083a:	74 04                	je     c0000840 <strcat+0x14>
c000083c:	89 d1                	mov    ecx,edx
c000083e:	eb f3                	jmp    c0000833 <strcat+0x7>
c0000840:	31 d2                	xor    edx,edx
c0000842:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000846:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000849:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000084c:	42                   	inc    edx
c000084d:	84 db                	test   bl,bl
c000084f:	75 f1                	jne    c0000842 <strcat+0x16>
c0000851:	5b                   	pop    ebx
c0000852:	c3                   	ret    

c0000853 <strncat>:
c0000853:	56                   	push   esi
c0000854:	53                   	push   ebx
c0000855:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000859:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000085d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000861:	89 c2                	mov    edx,eax
c0000863:	85 db                	test   ebx,ebx
c0000865:	74 23                	je     c000088a <strncat+0x37>
c0000867:	8d 72 01             	lea    esi,[edx+0x1]
c000086a:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c000086e:	74 04                	je     c0000874 <strncat+0x21>
c0000870:	89 f2                	mov    edx,esi
c0000872:	eb f3                	jmp    c0000867 <strncat+0x14>
c0000874:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000877:	41                   	inc    ecx
c0000878:	42                   	inc    edx
c0000879:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c000087c:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000087f:	84 db                	test   bl,bl
c0000881:	74 07                	je     c000088a <strncat+0x37>
c0000883:	39 f1                	cmp    ecx,esi
c0000885:	75 f0                	jne    c0000877 <strncat+0x24>
c0000887:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000088a:	5b                   	pop    ebx
c000088b:	5e                   	pop    esi
c000088c:	c3                   	ret    

c000088d <strstr>:
c000088d:	57                   	push   edi
c000088e:	56                   	push   esi
c000088f:	53                   	push   ebx
c0000890:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000894:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000898:	57                   	push   edi
c0000899:	e8 55 fe ff ff       	call   c00006f3 <strlen>
c000089e:	59                   	pop    ecx
c000089f:	89 c6                	mov    esi,eax
c00008a1:	85 c0                	test   eax,eax
c00008a3:	74 1f                	je     c00008c4 <strstr+0x37>
c00008a5:	53                   	push   ebx
c00008a6:	e8 48 fe ff ff       	call   c00006f3 <strlen>
c00008ab:	5a                   	pop    edx
c00008ac:	39 f0                	cmp    eax,esi
c00008ae:	72 12                	jb     c00008c2 <strstr+0x35>
c00008b0:	56                   	push   esi
c00008b1:	57                   	push   edi
c00008b2:	53                   	push   ebx
c00008b3:	e8 85 fd ff ff       	call   c000063d <memcmp>
c00008b8:	83 c4 0c             	add    esp,0xc
c00008bb:	85 c0                	test   eax,eax
c00008bd:	74 05                	je     c00008c4 <strstr+0x37>
c00008bf:	43                   	inc    ebx
c00008c0:	eb e3                	jmp    c00008a5 <strstr+0x18>
c00008c2:	31 db                	xor    ebx,ebx
c00008c4:	89 d8                	mov    eax,ebx
c00008c6:	5b                   	pop    ebx
c00008c7:	5e                   	pop    esi
c00008c8:	5f                   	pop    edi
c00008c9:	c3                   	ret    

c00008ca <toupper>:
c00008ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008ce:	0f b6 d0             	movzx  edx,al
c00008d1:	f6 82 e0 7f 02 c0 02 	test   BYTE PTR [edx-0x3ffd8020],0x2
c00008d8:	74 03                	je     c00008dd <toupper+0x13>
c00008da:	83 e8 20             	sub    eax,0x20
c00008dd:	c3                   	ret    

c00008de <tolower>:
c00008de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008e2:	0f b6 d0             	movzx  edx,al
c00008e5:	f6 82 e0 7f 02 c0 01 	test   BYTE PTR [edx-0x3ffd8020],0x1
c00008ec:	74 03                	je     c00008f1 <tolower+0x13>
c00008ee:	83 c0 20             	add    eax,0x20
c00008f1:	c3                   	ret    

c00008f2 <simple_strtoul>:
c00008f2:	55                   	push   ebp
c00008f3:	57                   	push   edi
c00008f4:	56                   	push   esi
c00008f5:	53                   	push   ebx
c00008f6:	83 ec 08             	sub    esp,0x8
c00008f9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000901:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000904:	f6 82 e0 7f 02 c0 08 	test   BYTE PTR [edx-0x3ffd8020],0x8
c000090b:	74 03                	je     c0000910 <simple_strtoul+0x1e>
c000090d:	41                   	inc    ecx
c000090e:	eb f1                	jmp    c0000901 <simple_strtoul+0xf>
c0000910:	80 fa 09             	cmp    dl,0x9
c0000913:	74 f8                	je     c000090d <simple_strtoul+0x1b>
c0000915:	80 fa 2d             	cmp    dl,0x2d
c0000918:	75 0b                	jne    c0000925 <simple_strtoul+0x33>
c000091a:	41                   	inc    ecx
c000091b:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000923:	eb 0e                	jmp    c0000933 <simple_strtoul+0x41>
c0000925:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000092d:	80 fa 2b             	cmp    dl,0x2b
c0000930:	75 01                	jne    c0000933 <simple_strtoul+0x41>
c0000932:	41                   	inc    ecx
c0000933:	85 f6                	test   esi,esi
c0000935:	75 22                	jne    c0000959 <simple_strtoul+0x67>
c0000937:	be 0a 00 00 00       	mov    esi,0xa
c000093c:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000093f:	75 5a                	jne    c000099b <simple_strtoul+0xa9>
c0000941:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000945:	50                   	push   eax
c0000946:	e8 93 ff ff ff       	call   c00008de <tolower>
c000094b:	5a                   	pop    edx
c000094c:	83 f8 78             	cmp    eax,0x78
c000094f:	74 03                	je     c0000954 <simple_strtoul+0x62>
c0000951:	41                   	inc    ecx
c0000952:	eb 16                	jmp    c000096a <simple_strtoul+0x78>
c0000954:	83 c1 02             	add    ecx,0x2
c0000957:	eb 22                	jmp    c000097b <simple_strtoul+0x89>
c0000959:	8d 46 fe             	lea    eax,[esi-0x2]
c000095c:	83 f8 22             	cmp    eax,0x22
c000095f:	0f 87 b7 00 00 00    	ja     c0000a1c <simple_strtoul+0x12a>
c0000965:	83 fe 08             	cmp    esi,0x8
c0000968:	75 0c                	jne    c0000976 <simple_strtoul+0x84>
c000096a:	be 08 00 00 00       	mov    esi,0x8
c000096f:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000972:	75 27                	jne    c000099b <simple_strtoul+0xa9>
c0000974:	eb 1f                	jmp    c0000995 <simple_strtoul+0xa3>
c0000976:	83 fe 10             	cmp    esi,0x10
c0000979:	75 20                	jne    c000099b <simple_strtoul+0xa9>
c000097b:	be 10 00 00 00       	mov    esi,0x10
c0000980:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000983:	75 16                	jne    c000099b <simple_strtoul+0xa9>
c0000985:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000989:	50                   	push   eax
c000098a:	e8 4f ff ff ff       	call   c00008de <tolower>
c000098f:	5d                   	pop    ebp
c0000990:	83 f8 78             	cmp    eax,0x78
c0000993:	74 03                	je     c0000998 <simple_strtoul+0xa6>
c0000995:	41                   	inc    ecx
c0000996:	eb 03                	jmp    c000099b <simple_strtoul+0xa9>
c0000998:	83 c1 02             	add    ecx,0x2
c000099b:	31 ed                	xor    ebp,ebp
c000099d:	31 db                	xor    ebx,ebx
c000099f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009a6:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a8:	84 d2                	test   dl,dl
c00009aa:	74 27                	je     c00009d3 <simple_strtoul+0xe1>
c00009ac:	0f b6 fa             	movzx  edi,dl
c00009af:	f6 87 e0 7f 02 c0 04 	test   BYTE PTR [edi-0x3ffd8020],0x4
c00009b6:	74 05                	je     c00009bd <simple_strtoul+0xcb>
c00009b8:	83 ef 30             	sub    edi,0x30
c00009bb:	eb 22                	jmp    c00009df <simple_strtoul+0xed>
c00009bd:	0f be d2             	movsx  edx,dl
c00009c0:	52                   	push   edx
c00009c1:	e8 04 ff ff ff       	call   c00008ca <toupper>
c00009c6:	5f                   	pop    edi
c00009c7:	0f b6 d0             	movzx  edx,al
c00009ca:	f6 82 e0 7f 02 c0 01 	test   BYTE PTR [edx-0x3ffd8020],0x1
c00009d1:	75 09                	jne    c00009dc <simple_strtoul+0xea>
c00009d3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009d8:	75 2d                	jne    c0000a07 <simple_strtoul+0x115>
c00009da:	eb 57                	jmp    c0000a33 <simple_strtoul+0x141>
c00009dc:	8d 78 c9             	lea    edi,[eax-0x37]
c00009df:	39 f7                	cmp    edi,esi
c00009e1:	73 f0                	jae    c00009d3 <simple_strtoul+0xe1>
c00009e3:	31 d2                	xor    edx,edx
c00009e5:	89 f8                	mov    eax,edi
c00009e7:	f7 d0                	not    eax
c00009e9:	f7 f6                	div    esi
c00009eb:	39 d8                	cmp    eax,ebx
c00009ed:	72 0e                	jb     c00009fd <simple_strtoul+0x10b>
c00009ef:	0f af de             	imul   ebx,esi
c00009f2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009f9:	01 fb                	add    ebx,edi
c00009fb:	eb 07                	jmp    c0000a04 <simple_strtoul+0x112>
c00009fd:	bd 01 00 00 00       	mov    ebp,0x1
c0000a02:	31 db                	xor    ebx,ebx
c0000a04:	41                   	inc    ecx
c0000a05:	eb 9f                	jmp    c00009a6 <simple_strtoul+0xb4>
c0000a07:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a0a:	09 d8                	or     eax,ebx
c0000a0c:	75 1f                	jne    c0000a2d <simple_strtoul+0x13b>
c0000a0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a12:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a16:	31 db                	xor    ebx,ebx
c0000a18:	89 38                	mov    DWORD PTR [eax],edi
c0000a1a:	eb 17                	jmp    c0000a33 <simple_strtoul+0x141>
c0000a1c:	31 db                	xor    ebx,ebx
c0000a1e:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a23:	74 14                	je     c0000a39 <simple_strtoul+0x147>
c0000a25:	31 ed                	xor    ebp,ebp
c0000a27:	85 c9                	test   ecx,ecx
c0000a29:	75 e3                	jne    c0000a0e <simple_strtoul+0x11c>
c0000a2b:	31 db                	xor    ebx,ebx
c0000a2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a31:	89 08                	mov    DWORD PTR [eax],ecx
c0000a33:	4d                   	dec    ebp
c0000a34:	75 03                	jne    c0000a39 <simple_strtoul+0x147>
c0000a36:	83 cb ff             	or     ebx,0xffffffff
c0000a39:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a3e:	75 02                	jne    c0000a42 <simple_strtoul+0x150>
c0000a40:	f7 db                	neg    ebx
c0000a42:	83 c4 08             	add    esp,0x8
c0000a45:	89 d8                	mov    eax,ebx
c0000a47:	5b                   	pop    ebx
c0000a48:	5e                   	pop    esi
c0000a49:	5f                   	pop    edi
c0000a4a:	5d                   	pop    ebp
c0000a4b:	c3                   	ret    

c0000a4c <largebin_index>:
c0000a4c:	89 c2                	mov    edx,eax
c0000a4e:	c1 ea 08             	shr    edx,0x8
c0000a51:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a57:	77 10                	ja     c0000a69 <largebin_index+0x1d>
c0000a59:	0f bd d2             	bsr    edx,edx
c0000a5c:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a5f:	d3 e8                	shr    eax,cl
c0000a61:	83 e0 03             	and    eax,0x3
c0000a64:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a68:	c3                   	ret    
c0000a69:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a6e:	c3                   	ret    

c0000a6f <malloc_init_state>:
c0000a6f:	53                   	push   ebx
c0000a70:	8d 50 34             	lea    edx,[eax+0x34]
c0000a73:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a79:	89 d1                	mov    ecx,edx
c0000a7b:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a7e:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a81:	83 c2 08             	add    edx,0x8
c0000a84:	39 da                	cmp    edx,ebx
c0000a86:	75 f3                	jne    c0000a7b <malloc_init_state+0xc>
c0000a88:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a8a:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a94:	83 e2 03             	and    edx,0x3
c0000a97:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000aa1:	83 ca 48             	or     edx,0x48
c0000aa4:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000aae:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000ab8:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000abf:	89 10                	mov    DWORD PTR [eax],edx
c0000ac1:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ac4:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ace:	5b                   	pop    ebx
c0000acf:	c3                   	ret    

c0000ad0 <malloc_consolidate>:
c0000ad0:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ad2:	85 d2                	test   edx,edx
c0000ad4:	0f 84 d8 00 00 00    	je     c0000bb2 <malloc_consolidate+0xe2>
c0000ada:	55                   	push   ebp
c0000adb:	83 e2 fd             	and    edx,0xfffffffd
c0000ade:	57                   	push   edi
c0000adf:	89 c5                	mov    ebp,eax
c0000ae1:	56                   	push   esi
c0000ae2:	8d 78 34             	lea    edi,[eax+0x34]
c0000ae5:	53                   	push   ebx
c0000ae6:	83 ec 10             	sub    esp,0x10
c0000ae9:	89 10                	mov    DWORD PTR [eax],edx
c0000aeb:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000aef:	c1 ea 03             	shr    edx,0x3
c0000af2:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000af6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000afa:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000afd:	85 d2                	test   edx,edx
c0000aff:	0f 84 98 00 00 00    	je     c0000b9d <malloc_consolidate+0xcd>
c0000b05:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000b0c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000b0f:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b12:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b16:	89 f9                	mov    ecx,edi
c0000b18:	83 e1 fe             	and    ecx,0xfffffffe
c0000b1b:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b1e:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b21:	83 e3 fc             	and    ebx,0xfffffffc
c0000b24:	83 e7 01             	and    edi,0x1
c0000b27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b2a:	75 14                	jne    c0000b40 <malloc_consolidate+0x70>
c0000b2c:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b2e:	29 fa                	sub    edx,edi
c0000b30:	01 f9                	add    ecx,edi
c0000b32:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b35:	89 fb                	mov    ebx,edi
c0000b37:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b3a:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b3d:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b40:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b43:	74 40                	je     c0000b85 <malloc_consolidate+0xb5>
c0000b45:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b48:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b4b:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b4f:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b52:	83 e7 01             	and    edi,0x1
c0000b55:	75 0e                	jne    c0000b65 <malloc_consolidate+0x95>
c0000b57:	01 d9                	add    ecx,ebx
c0000b59:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b5c:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b5f:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b62:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b65:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b68:	89 ce                	mov    esi,ecx
c0000b6a:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b6d:	83 ce 01             	or     esi,0x1
c0000b70:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b73:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b76:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b79:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b7d:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b80:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b83:	eb 0c                	jmp    c0000b91 <malloc_consolidate+0xc1>
c0000b85:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b88:	83 c9 01             	or     ecx,0x1
c0000b8b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b8e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b95:	85 d2                	test   edx,edx
c0000b97:	0f 85 6f ff ff ff    	jne    c0000b0c <malloc_consolidate+0x3c>
c0000b9d:	83 c5 04             	add    ebp,0x4
c0000ba0:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ba4:	0f 85 50 ff ff ff    	jne    c0000afa <malloc_consolidate+0x2a>
c0000baa:	83 c4 10             	add    esp,0x10
c0000bad:	5b                   	pop    ebx
c0000bae:	5e                   	pop    esi
c0000baf:	5f                   	pop    edi
c0000bb0:	5d                   	pop    ebp
c0000bb1:	c3                   	ret    
c0000bb2:	e9 b8 fe ff ff       	jmp    c0000a6f <malloc_init_state>

c0000bb7 <dlfree>:
c0000bb7:	57                   	push   edi
c0000bb8:	56                   	push   esi
c0000bb9:	53                   	push   ebx
c0000bba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bbe:	85 db                	test   ebx,ebx
c0000bc0:	0f 84 e2 00 00 00    	je     c0000ca8 <dlfree+0xf1>
c0000bc6:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bc9:	8b 0d c0 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002cac0
c0000bcf:	89 f0                	mov    eax,esi
c0000bd1:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bd4:	83 e0 fc             	and    eax,0xfffffffc
c0000bd7:	39 c1                	cmp    ecx,eax
c0000bd9:	72 24                	jb     c0000bff <dlfree+0x48>
c0000bdb:	83 c9 03             	or     ecx,0x3
c0000bde:	c1 e8 03             	shr    eax,0x3
c0000be1:	89 0d c0 ca 02 c0    	mov    DWORD PTR ds:0xc002cac0,ecx
c0000be7:	83 e8 02             	sub    eax,0x2
c0000bea:	8b 0c 85 c4 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd353c]
c0000bf1:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000bf3:	89 14 85 c4 ca 02 c0 	mov    DWORD PTR [eax*4-0x3ffd353c],edx
c0000bfa:	e9 a9 00 00 00       	jmp    c0000ca8 <dlfree+0xf1>
c0000bff:	83 e6 02             	and    esi,0x2
c0000c02:	0f 85 a0 00 00 00    	jne    c0000ca8 <dlfree+0xf1>
c0000c08:	83 c9 01             	or     ecx,0x1
c0000c0b:	8d 34 02             	lea    esi,[edx+eax*1]
c0000c0e:	89 0d c0 ca 02 c0    	mov    DWORD PTR ds:0xc002cac0,ecx
c0000c14:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c17:	83 e1 fc             	and    ecx,0xfffffffc
c0000c1a:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c1e:	75 13                	jne    c0000c33 <dlfree+0x7c>
c0000c20:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c23:	29 da                	sub    edx,ebx
c0000c25:	01 d8                	add    eax,ebx
c0000c27:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c2a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c2d:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c30:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c33:	39 35 ec ca 02 c0    	cmp    DWORD PTR ds:0xc002caec,esi
c0000c39:	74 40                	je     c0000c7b <dlfree+0xc4>
c0000c3b:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c3f:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c42:	80 e3 01             	and    bl,0x1
c0000c45:	75 0e                	jne    c0000c55 <dlfree+0x9e>
c0000c47:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c4a:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c4d:	01 c8                	add    eax,ecx
c0000c4f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c52:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c55:	8b 0d fc ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002cafc
c0000c5b:	c7 42 0c f4 ca 02 c0 	mov    DWORD PTR [edx+0xc],0xc002caf4
c0000c62:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c65:	89 15 fc ca 02 c0    	mov    DWORD PTR ds:0xc002cafc,edx
c0000c6b:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c6e:	89 c1                	mov    ecx,eax
c0000c70:	83 c9 01             	or     ecx,0x1
c0000c73:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c76:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c79:	eb 10                	jmp    c0000c8b <dlfree+0xd4>
c0000c7b:	01 c8                	add    eax,ecx
c0000c7d:	89 c1                	mov    ecx,eax
c0000c7f:	83 c9 01             	or     ecx,0x1
c0000c82:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c85:	89 15 ec ca 02 c0    	mov    DWORD PTR ds:0xc002caec,edx
c0000c8b:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c90:	76 16                	jbe    c0000ca8 <dlfree+0xf1>
c0000c92:	f6 05 c0 ca 02 c0 02 	test   BYTE PTR ds:0xc002cac0,0x2
c0000c99:	74 0d                	je     c0000ca8 <dlfree+0xf1>
c0000c9b:	5b                   	pop    ebx
c0000c9c:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c0000ca1:	5e                   	pop    esi
c0000ca2:	5f                   	pop    edi
c0000ca3:	e9 28 fe ff ff       	jmp    c0000ad0 <malloc_consolidate>
c0000ca8:	5b                   	pop    ebx
c0000ca9:	5e                   	pop    esi
c0000caa:	5f                   	pop    edi
c0000cab:	c3                   	ret    

c0000cac <sYSMALLOc>:
c0000cac:	55                   	push   ebp
c0000cad:	57                   	push   edi
c0000cae:	56                   	push   esi
c0000caf:	53                   	push   ebx
c0000cb0:	89 d3                	mov    ebx,edx
c0000cb2:	83 ec 2c             	sub    esp,0x2c
c0000cb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000cb9:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000cbf:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000cc2:	8d 42 ff             	lea    eax,[edx-0x1]
c0000cc5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cc9:	74 1f                	je     c0000cea <sYSMALLOc+0x3e>
c0000ccb:	89 d8                	mov    eax,ebx
c0000ccd:	e8 fe fd ff ff       	call   c0000ad0 <malloc_consolidate>
c0000cd2:	83 ec 0c             	sub    esp,0xc
c0000cd5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000cd9:	83 e8 07             	sub    eax,0x7
c0000cdc:	50                   	push   eax
c0000cdd:	e8 30 02 00 00       	call   c0000f12 <dlmalloc>
c0000ce2:	83 c4 10             	add    esp,0x10
c0000ce5:	e9 20 02 00 00       	jmp    c0000f0a <sYSMALLOc+0x25e>
c0000cea:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ced:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000cf3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cf6:	83 e0 fc             	and    eax,0xfffffffc
c0000cf9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000d01:	83 c0 10             	add    eax,0x10
c0000d04:	01 c1                	add    ecx,eax
c0000d06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000d0a:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000d11:	74 04                	je     c0000d17 <sYSMALLOc+0x6b>
c0000d13:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000d17:	f7 da                	neg    edx
c0000d19:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d21:	21 d1                	and    ecx,edx
c0000d23:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d27:	7f 07                	jg     c0000d30 <sYSMALLOc+0x84>
c0000d29:	31 c0                	xor    eax,eax
c0000d2b:	e9 da 01 00 00       	jmp    c0000f0a <sYSMALLOc+0x25e>
c0000d30:	83 ec 0c             	sub    esp,0xc
c0000d33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d37:	e8 51 e7 00 00       	call   c000f48d <sbrk>
c0000d3c:	83 c4 10             	add    esp,0x10
c0000d3f:	89 c6                	mov    esi,eax
c0000d41:	83 f8 ff             	cmp    eax,0xffffffff
c0000d44:	74 e3                	je     c0000d29 <sYSMALLOc+0x7d>
c0000d46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d4a:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d4e:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d51:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d57:	39 f1                	cmp    ecx,esi
c0000d59:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d5f:	75 13                	jne    c0000d74 <sYSMALLOc+0xc8>
c0000d61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d65:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d69:	83 c8 01             	or     eax,0x1
c0000d6c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d6f:	e9 3e 01 00 00       	jmp    c0000eb2 <sYSMALLOc+0x206>
c0000d74:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d7a:	88 d0                	mov    al,dl
c0000d7c:	83 e0 01             	and    eax,0x1
c0000d7f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d84:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d88:	0f 95 c0             	setne  al
c0000d8b:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d8f:	39 f1                	cmp    ecx,esi
c0000d91:	76 12                	jbe    c0000da5 <sYSMALLOc+0xf9>
c0000d93:	84 c0                	test   al,al
c0000d95:	74 0e                	je     c0000da5 <sYSMALLOc+0xf9>
c0000d97:	83 e2 fe             	and    edx,0xfffffffe
c0000d9a:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000da0:	e9 83 00 00 00       	jmp    c0000e28 <sYSMALLOc+0x17c>
c0000da5:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000daa:	74 7c                	je     c0000e28 <sYSMALLOc+0x17c>
c0000dac:	84 c0                	test   al,al
c0000dae:	74 0c                	je     c0000dbc <sYSMALLOc+0x110>
c0000db0:	89 f0                	mov    eax,esi
c0000db2:	29 c8                	sub    eax,ecx
c0000db4:	01 e8                	add    eax,ebp
c0000db6:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000dbc:	89 f2                	mov    edx,esi
c0000dbe:	83 e2 07             	and    edx,0x7
c0000dc1:	74 0c                	je     c0000dcf <sYSMALLOc+0x123>
c0000dc3:	b8 08 00 00 00       	mov    eax,0x8
c0000dc8:	29 d0                	sub    eax,edx
c0000dca:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000dcd:	eb 04                	jmp    c0000dd3 <sYSMALLOc+0x127>
c0000dcf:	89 f5                	mov    ebp,esi
c0000dd1:	31 c0                	xor    eax,eax
c0000dd3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000dd7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ddb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ddf:	01 c1                	add    ecx,eax
c0000de1:	83 ec 0c             	sub    esp,0xc
c0000de4:	01 f1                	add    ecx,esi
c0000de6:	01 ca                	add    edx,ecx
c0000de8:	29 c8                	sub    eax,ecx
c0000dea:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000dee:	01 c2                	add    edx,eax
c0000df0:	52                   	push   edx
c0000df1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000df5:	e8 93 e6 00 00       	call   c000f48d <sbrk>
c0000dfa:	83 c4 10             	add    esp,0x10
c0000dfd:	83 f8 ff             	cmp    eax,0xffffffff
c0000e00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000e04:	75 0f                	jne    c0000e15 <sYSMALLOc+0x169>
c0000e06:	83 ec 0c             	sub    esp,0xc
c0000e09:	6a 00                	push   0x0
c0000e0b:	e8 7d e6 00 00       	call   c000f48d <sbrk>
c0000e10:	83 c4 10             	add    esp,0x10
c0000e13:	eb 30                	jmp    c0000e45 <sYSMALLOc+0x199>
c0000e15:	39 c6                	cmp    esi,eax
c0000e17:	76 33                	jbe    c0000e4c <sYSMALLOc+0x1a0>
c0000e19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e1d:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e24:	01 f0                	add    eax,esi
c0000e26:	eb 1d                	jmp    c0000e45 <sYSMALLOc+0x199>
c0000e28:	83 ec 0c             	sub    esp,0xc
c0000e2b:	89 f5                	mov    ebp,esi
c0000e2d:	6a 00                	push   0x0
c0000e2f:	e8 59 e6 00 00       	call   c000f48d <sbrk>
c0000e34:	89 c2                	mov    edx,eax
c0000e36:	29 f2                	sub    edx,esi
c0000e38:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e3c:	83 c4 10             	add    esp,0x10
c0000e3f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e45:	31 d2                	xor    edx,edx
c0000e47:	83 f8 ff             	cmp    eax,0xffffffff
c0000e4a:	74 66                	je     c0000eb2 <sYSMALLOc+0x206>
c0000e4c:	29 e8                	sub    eax,ebp
c0000e4e:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e51:	01 d0                	add    eax,edx
c0000e53:	83 c8 01             	or     eax,0x1
c0000e56:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e59:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e5f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e64:	74 4c                	je     c0000eb2 <sYSMALLOc+0x206>
c0000e66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e6a:	83 e8 0c             	sub    eax,0xc
c0000e6d:	83 e0 f8             	and    eax,0xfffffff8
c0000e70:	89 c2                	mov    edx,eax
c0000e72:	83 ca 01             	or     edx,0x1
c0000e75:	83 f8 0f             	cmp    eax,0xf
c0000e78:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e7b:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e83:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e8b:	76 25                	jbe    c0000eb2 <sYSMALLOc+0x206>
c0000e8d:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e93:	83 ec 0c             	sub    esp,0xc
c0000e96:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000ea0:	83 c7 08             	add    edi,0x8
c0000ea3:	57                   	push   edi
c0000ea4:	e8 0e fd ff ff       	call   c0000bb7 <dlfree>
c0000ea9:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000eaf:	83 c4 10             	add    esp,0x10
c0000eb2:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000eb8:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ebe:	73 06                	jae    c0000ec6 <sYSMALLOc+0x21a>
c0000ec0:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000ec6:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000ecc:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ed2:	73 06                	jae    c0000eda <sYSMALLOc+0x22e>
c0000ed4:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000eda:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000edd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ee0:	83 e2 fc             	and    edx,0xfffffffc
c0000ee3:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ee7:	0f 82 3c fe ff ff    	jb     c0000d29 <sYSMALLOc+0x7d>
c0000eed:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ef1:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ef4:	29 fa                	sub    edx,edi
c0000ef6:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ef9:	83 ca 01             	or     edx,0x1
c0000efc:	89 fb                	mov    ebx,edi
c0000efe:	83 c0 08             	add    eax,0x8
c0000f01:	83 cb 01             	or     ebx,0x1
c0000f04:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000f07:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000f0a:	83 c4 2c             	add    esp,0x2c
c0000f0d:	5b                   	pop    ebx
c0000f0e:	5e                   	pop    esi
c0000f0f:	5f                   	pop    edi
c0000f10:	5d                   	pop    ebp
c0000f11:	c3                   	ret    

c0000f12 <dlmalloc>:
c0000f12:	55                   	push   ebp
c0000f13:	57                   	push   edi
c0000f14:	56                   	push   esi
c0000f15:	53                   	push   ebx
c0000f16:	83 ec 1c             	sub    esp,0x1c
c0000f19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f1d:	83 f8 df             	cmp    eax,0xffffffdf
c0000f20:	0f 87 70 03 00 00    	ja     c0001296 <dlmalloc+0x384>
c0000f26:	83 c0 0b             	add    eax,0xb
c0000f29:	be 10 00 00 00       	mov    esi,0x10
c0000f2e:	83 f8 0f             	cmp    eax,0xf
c0000f31:	76 05                	jbe    c0000f38 <dlmalloc+0x26>
c0000f33:	83 e0 f8             	and    eax,0xfffffff8
c0000f36:	89 c6                	mov    esi,eax
c0000f38:	8b 3d c0 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002cac0
c0000f3e:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f44:	75 17                	jne    c0000f5d <dlmalloc+0x4b>
c0000f46:	85 ff                	test   edi,edi
c0000f48:	0f 85 05 03 00 00    	jne    c0001253 <dlmalloc+0x341>
c0000f4e:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c0000f53:	e8 78 fb ff ff       	call   c0000ad0 <malloc_consolidate>
c0000f58:	e9 f6 02 00 00       	jmp    c0001253 <dlmalloc+0x341>
c0000f5d:	39 f7                	cmp    edi,esi
c0000f5f:	72 1f                	jb     c0000f80 <dlmalloc+0x6e>
c0000f61:	89 f2                	mov    edx,esi
c0000f63:	c1 ea 03             	shr    edx,0x3
c0000f66:	83 ea 02             	sub    edx,0x2
c0000f69:	8b 04 95 c4 ca 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd353c]
c0000f70:	85 c0                	test   eax,eax
c0000f72:	74 0c                	je     c0000f80 <dlmalloc+0x6e>
c0000f74:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f77:	89 0c 95 c4 ca 02 c0 	mov    DWORD PTR [edx*4-0x3ffd353c],ecx
c0000f7e:	eb 30                	jmp    c0000fb0 <dlmalloc+0x9e>
c0000f80:	89 f0                	mov    eax,esi
c0000f82:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f88:	77 2e                	ja     c0000fb8 <dlmalloc+0xa6>
c0000f8a:	c1 e8 03             	shr    eax,0x3
c0000f8d:	8d 14 c5 f4 ca 02 c0 	lea    edx,[eax*8-0x3ffd350c]
c0000f94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f98:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f9b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f9e:	39 c3                	cmp    ebx,eax
c0000fa0:	74 2e                	je     c0000fd0 <dlmalloc+0xbe>
c0000fa2:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000fa5:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000faa:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fad:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000fb0:	83 c0 08             	add    eax,0x8
c0000fb3:	e9 e0 02 00 00       	jmp    c0001298 <dlmalloc+0x386>
c0000fb8:	e8 8f fa ff ff       	call   c0000a4c <largebin_index>
c0000fbd:	83 e7 02             	and    edi,0x2
c0000fc0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc4:	74 0a                	je     c0000fd0 <dlmalloc+0xbe>
c0000fc6:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c0000fcb:	e8 00 fb ff ff       	call   c0000ad0 <malloc_consolidate>
c0000fd0:	8d 46 10             	lea    eax,[esi+0x10]
c0000fd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fd7:	8b 1d 00 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb00
c0000fdd:	81 fb f4 ca 02 c0    	cmp    ebx,0xc002caf4
c0000fe3:	0f 84 13 01 00 00    	je     c00010fc <dlmalloc+0x1ea>
c0000fe9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fef:	83 e7 fc             	and    edi,0xfffffffc
c0000ff2:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000ff8:	77 4c                	ja     c0001046 <dlmalloc+0x134>
c0000ffa:	3d f4 ca 02 c0       	cmp    eax,0xc002caf4
c0000fff:	75 45                	jne    c0001046 <dlmalloc+0x134>
c0001001:	39 1d f0 ca 02 c0    	cmp    DWORD PTR ds:0xc002caf0,ebx
c0001007:	75 3d                	jne    c0001046 <dlmalloc+0x134>
c0001009:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000100d:	73 37                	jae    c0001046 <dlmalloc+0x134>
c000100f:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001012:	89 fa                	mov    edx,edi
c0001014:	a3 fc ca 02 c0       	mov    ds:0xc002cafc,eax
c0001019:	a3 00 cb 02 c0       	mov    ds:0xc002cb00,eax
c000101e:	a3 f0 ca 02 c0       	mov    ds:0xc002caf0,eax
c0001023:	29 f2                	sub    edx,esi
c0001025:	c7 40 08 f4 ca 02 c0 	mov    DWORD PTR [eax+0x8],0xc002caf4
c000102c:	c7 40 0c f4 ca 02 c0 	mov    DWORD PTR [eax+0xc],0xc002caf4
c0001033:	83 ce 01             	or     esi,0x1
c0001036:	89 d1                	mov    ecx,edx
c0001038:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000103b:	83 c9 01             	or     ecx,0x1
c000103e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001041:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001044:	eb 15                	jmp    c000105b <dlmalloc+0x149>
c0001046:	a3 00 cb 02 c0       	mov    ds:0xc002cb00,eax
c000104b:	39 fe                	cmp    esi,edi
c000104d:	c7 40 08 f4 ca 02 c0 	mov    DWORD PTR [eax+0x8],0xc002caf4
c0001054:	75 0d                	jne    c0001063 <dlmalloc+0x151>
c0001056:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000105b:	8d 43 08             	lea    eax,[ebx+0x8]
c000105e:	e9 35 02 00 00       	jmp    c0001298 <dlmalloc+0x386>
c0001063:	89 f8                	mov    eax,edi
c0001065:	81 ff ff 00 00 00    	cmp    edi,0xff
c000106b:	77 19                	ja     c0001086 <dlmalloc+0x174>
c000106d:	c1 e8 03             	shr    eax,0x3
c0001070:	8d 14 00             	lea    edx,[eax+eax*1]
c0001073:	83 c2 0d             	add    edx,0xd
c0001076:	8d 2c 95 b8 ca 02 c0 	lea    ebp,[edx*4-0x3ffd3548]
c000107d:	8b 14 95 c0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3540]
c0001084:	eb 46                	jmp    c00010cc <dlmalloc+0x1ba>
c0001086:	e8 c1 f9 ff ff       	call   c0000a4c <largebin_index>
c000108b:	8d 14 00             	lea    edx,[eax+eax*1]
c000108e:	83 c2 0d             	add    edx,0xd
c0001091:	8d 0c 95 c0 ca 02 c0 	lea    ecx,[edx*4-0x3ffd3540]
c0001098:	8b 14 95 c0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3540]
c000109f:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00010a2:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00010a6:	89 d5                	mov    ebp,edx
c00010a8:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00010ac:	74 1e                	je     c00010cc <dlmalloc+0x1ba>
c00010ae:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00010b1:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010b4:	77 12                	ja     c00010c8 <dlmalloc+0x1b6>
c00010b6:	83 cf 01             	or     edi,0x1
c00010b9:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010bc:	76 05                	jbe    c00010c3 <dlmalloc+0x1b1>
c00010be:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010c1:	eb f6                	jmp    c00010b9 <dlmalloc+0x1a7>
c00010c3:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010c6:	eb 04                	jmp    c00010cc <dlmalloc+0x1ba>
c00010c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010cc:	89 c7                	mov    edi,eax
c00010ce:	88 c1                	mov    cl,al
c00010d0:	c1 ff 05             	sar    edi,0x5
c00010d3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010d7:	bf 01 00 00 00       	mov    edi,0x1
c00010dc:	d3 e7                	shl    edi,cl
c00010de:	89 f8                	mov    eax,edi
c00010e0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010e4:	09 04 bd f4 cd 02 c0 	or     DWORD PTR [edi*4-0x3ffd320c],eax
c00010eb:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010ee:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010f1:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010f4:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010f7:	e9 db fe ff ff       	jmp    c0000fd7 <dlmalloc+0xc5>
c00010fc:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001102:	76 78                	jbe    c000117c <dlmalloc+0x26a>
c0001104:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001108:	8d 04 c5 f4 ca 02 c0 	lea    eax,[eax*8-0x3ffd350c]
c000110f:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001112:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001115:	39 ca                	cmp    edx,ecx
c0001117:	74 63                	je     c000117c <dlmalloc+0x26a>
c0001119:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000111c:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000111f:	83 e3 fc             	and    ebx,0xfffffffc
c0001122:	39 de                	cmp    esi,ebx
c0001124:	77 52                	ja     c0001178 <dlmalloc+0x266>
c0001126:	89 df                	mov    edi,ebx
c0001128:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000112b:	29 f7                	sub    edi,esi
c000112d:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001130:	01 d3                	add    ebx,edx
c0001132:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001135:	83 ff 0f             	cmp    edi,0xf
c0001138:	8d 42 08             	lea    eax,[edx+0x8]
c000113b:	77 09                	ja     c0001146 <dlmalloc+0x234>
c000113d:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001141:	e9 52 01 00 00       	jmp    c0001298 <dlmalloc+0x386>
c0001146:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001149:	83 ce 01             	or     esi,0x1
c000114c:	89 0d fc ca 02 c0    	mov    DWORD PTR ds:0xc002cafc,ecx
c0001152:	89 0d 00 cb 02 c0    	mov    DWORD PTR ds:0xc002cb00,ecx
c0001158:	c7 41 08 f4 ca 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002caf4
c000115f:	c7 41 0c f4 ca 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002caf4
c0001166:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001169:	89 fa                	mov    edx,edi
c000116b:	83 ca 01             	or     edx,0x1
c000116e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001171:	89 3b                	mov    DWORD PTR [ebx],edi
c0001173:	e9 20 01 00 00       	jmp    c0001298 <dlmalloc+0x386>
c0001178:	89 c2                	mov    edx,eax
c000117a:	eb 99                	jmp    c0001115 <dlmalloc+0x203>
c000117c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001180:	b8 01 00 00 00       	mov    eax,0x1
c0001185:	41                   	inc    ecx
c0001186:	89 cb                	mov    ebx,ecx
c0001188:	8d 14 cd ec ca 02 c0 	lea    edx,[ecx*8-0x3ffd3514]
c000118f:	c1 eb 05             	shr    ebx,0x5
c0001192:	d3 e0                	shl    eax,cl
c0001194:	8b 3c 9d f4 cd 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd320c]
c000119b:	39 f8                	cmp    eax,edi
c000119d:	77 04                	ja     c00011a3 <dlmalloc+0x291>
c000119f:	85 c0                	test   eax,eax
c00011a1:	75 26                	jne    c00011c9 <dlmalloc+0x2b7>
c00011a3:	43                   	inc    ebx
c00011a4:	83 fb 02             	cmp    ebx,0x2
c00011a7:	0f 87 a6 00 00 00    	ja     c0001253 <dlmalloc+0x341>
c00011ad:	8b 3c 9d f4 cd 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd320c]
c00011b4:	85 ff                	test   edi,edi
c00011b6:	74 eb                	je     c00011a3 <dlmalloc+0x291>
c00011b8:	89 d8                	mov    eax,ebx
c00011ba:	c1 e0 06             	shl    eax,0x6
c00011bd:	8d 14 85 ec ca 02 c0 	lea    edx,[eax*4-0x3ffd3514]
c00011c4:	b8 01 00 00 00       	mov    eax,0x1
c00011c9:	85 f8                	test   eax,edi
c00011cb:	75 07                	jne    c00011d4 <dlmalloc+0x2c2>
c00011cd:	83 c2 08             	add    edx,0x8
c00011d0:	01 c0                	add    eax,eax
c00011d2:	eb f5                	jmp    c00011c9 <dlmalloc+0x2b7>
c00011d4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011d7:	39 ca                	cmp    edx,ecx
c00011d9:	75 14                	jne    c00011ef <dlmalloc+0x2dd>
c00011db:	89 c1                	mov    ecx,eax
c00011dd:	83 c2 08             	add    edx,0x8
c00011e0:	f7 d1                	not    ecx
c00011e2:	01 c0                	add    eax,eax
c00011e4:	21 cf                	and    edi,ecx
c00011e6:	89 3c 9d f4 cd 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd320c],edi
c00011ed:	eb ac                	jmp    c000119b <dlmalloc+0x289>
c00011ef:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011f2:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011f5:	83 e0 fc             	and    eax,0xfffffffc
c00011f8:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011fb:	89 c3                	mov    ebx,eax
c00011fd:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001200:	29 f3                	sub    ebx,esi
c0001202:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001205:	83 fb 0f             	cmp    ebx,0xf
c0001208:	8d 41 08             	lea    eax,[ecx+0x8]
c000120b:	77 09                	ja     c0001216 <dlmalloc+0x304>
c000120d:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001211:	e9 82 00 00 00       	jmp    c0001298 <dlmalloc+0x386>
c0001216:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001219:	81 fe ff 00 00 00    	cmp    esi,0xff
c000121f:	89 3d fc ca 02 c0    	mov    DWORD PTR ds:0xc002cafc,edi
c0001225:	89 3d 00 cb 02 c0    	mov    DWORD PTR ds:0xc002cb00,edi
c000122b:	c7 47 08 f4 ca 02 c0 	mov    DWORD PTR [edi+0x8],0xc002caf4
c0001232:	c7 47 0c f4 ca 02 c0 	mov    DWORD PTR [edi+0xc],0xc002caf4
c0001239:	77 06                	ja     c0001241 <dlmalloc+0x32f>
c000123b:	89 3d f0 ca 02 c0    	mov    DWORD PTR ds:0xc002caf0,edi
c0001241:	83 ce 01             	or     esi,0x1
c0001244:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001247:	89 d9                	mov    ecx,ebx
c0001249:	83 c9 01             	or     ecx,0x1
c000124c:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000124f:	89 1a                	mov    DWORD PTR [edx],ebx
c0001251:	eb 45                	jmp    c0001298 <dlmalloc+0x386>
c0001253:	a1 ec ca 02 c0       	mov    eax,ds:0xc002caec
c0001258:	8d 4e 10             	lea    ecx,[esi+0x10]
c000125b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000125e:	83 e2 fc             	and    edx,0xfffffffc
c0001261:	39 d1                	cmp    ecx,edx
c0001263:	77 1e                	ja     c0001283 <dlmalloc+0x371>
c0001265:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001268:	89 f3                	mov    ebx,esi
c000126a:	89 0d ec ca 02 c0    	mov    DWORD PTR ds:0xc002caec,ecx
c0001270:	83 cb 01             	or     ebx,0x1
c0001273:	29 f2                	sub    edx,esi
c0001275:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001278:	83 ca 01             	or     edx,0x1
c000127b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000127e:	e9 2d fd ff ff       	jmp    c0000fb0 <dlmalloc+0x9e>
c0001283:	83 c4 1c             	add    esp,0x1c
c0001286:	89 f0                	mov    eax,esi
c0001288:	5b                   	pop    ebx
c0001289:	ba c0 ca 02 c0       	mov    edx,0xc002cac0
c000128e:	5e                   	pop    esi
c000128f:	5f                   	pop    edi
c0001290:	5d                   	pop    ebp
c0001291:	e9 16 fa ff ff       	jmp    c0000cac <sYSMALLOc>
c0001296:	31 c0                	xor    eax,eax
c0001298:	83 c4 1c             	add    esp,0x1c
c000129b:	5b                   	pop    ebx
c000129c:	5e                   	pop    esi
c000129d:	5f                   	pop    edi
c000129e:	5d                   	pop    ebp
c000129f:	c3                   	ret    

c00012a0 <iALLOc>:
c00012a0:	55                   	push   ebp
c00012a1:	89 c5                	mov    ebp,eax
c00012a3:	57                   	push   edi
c00012a4:	56                   	push   esi
c00012a5:	53                   	push   ebx
c00012a6:	83 ec 2c             	sub    esp,0x2c
c00012a9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00012ad:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012b5:	83 3d c0 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002cac0,0x0
c00012bc:	75 12                	jne    c00012d0 <iALLOc+0x30>
c00012be:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012c2:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c00012c7:	e8 04 f8 ff ff       	call   c0000ad0 <malloc_consolidate>
c00012cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012d5:	74 12                	je     c00012e9 <iALLOc+0x49>
c00012d7:	85 ed                	test   ebp,ebp
c00012d9:	0f 84 64 01 00 00    	je     c0001443 <iALLOc+0x1a3>
c00012df:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012e7:	eb 33                	jmp    c000131c <iALLOc+0x7c>
c00012e9:	85 ed                	test   ebp,ebp
c00012eb:	75 14                	jne    c0001301 <iALLOc+0x61>
c00012ed:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012f5:	83 c4 2c             	add    esp,0x2c
c00012f8:	5b                   	pop    ebx
c00012f9:	5e                   	pop    esi
c00012fa:	5f                   	pop    edi
c00012fb:	5d                   	pop    ebp
c00012fc:	e9 11 fc ff ff       	jmp    c0000f12 <dlmalloc>
c0001301:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001308:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001310:	83 f8 0f             	cmp    eax,0xf
c0001313:	76 07                	jbe    c000131c <iALLOc+0x7c>
c0001315:	83 e0 f8             	and    eax,0xfffffff8
c0001318:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000131c:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001321:	75 09                	jne    c000132c <iALLOc+0x8c>
c0001323:	89 d0                	mov    eax,edx
c0001325:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001328:	31 f6                	xor    esi,esi
c000132a:	eb 3b                	jmp    c0001367 <iALLOc+0xc7>
c000132c:	8b 02                	mov    eax,DWORD PTR [edx]
c000132e:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001336:	83 c0 0b             	add    eax,0xb
c0001339:	83 f8 0f             	cmp    eax,0xf
c000133c:	76 07                	jbe    c0001345 <iALLOc+0xa5>
c000133e:	83 e0 f8             	and    eax,0xfffffff8
c0001341:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001345:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001349:	0f af f5             	imul   esi,ebp
c000134c:	eb 25                	jmp    c0001373 <iALLOc+0xd3>
c000134e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001350:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001353:	bb 10 00 00 00       	mov    ebx,0x10
c0001358:	83 f9 0f             	cmp    ecx,0xf
c000135b:	76 05                	jbe    c0001362 <iALLOc+0xc2>
c000135d:	83 e1 f8             	and    ecx,0xfffffff8
c0001360:	89 cb                	mov    ebx,ecx
c0001362:	01 de                	add    esi,ebx
c0001364:	83 c0 04             	add    eax,0x4
c0001367:	39 c7                	cmp    edi,eax
c0001369:	75 e3                	jne    c000134e <iALLOc+0xae>
c000136b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001373:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001377:	8b 1d 14 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ce14
c000137d:	83 ec 0c             	sub    esp,0xc
c0001380:	c7 05 14 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce14,0x0
c000138a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000138e:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001392:	50                   	push   eax
c0001393:	e8 7a fb ff ff       	call   c0000f12 <dlmalloc>
c0001398:	83 c4 10             	add    esp,0x10
c000139b:	89 1d 14 ce 02 c0    	mov    DWORD PTR ds:0xc002ce14,ebx
c00013a1:	85 c0                	test   eax,eax
c00013a3:	0f 84 92 00 00 00    	je     c000143b <iALLOc+0x19b>
c00013a9:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00013ac:	8d 78 f8             	lea    edi,[eax-0x8]
c00013af:	83 e3 fc             	and    ebx,0xfffffffc
c00013b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013b6:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013bb:	74 1e                	je     c00013db <iALLOc+0x13b>
c00013bd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013c1:	89 d9                	mov    ecx,ebx
c00013c3:	52                   	push   edx
c00013c4:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013c8:	83 e9 04             	sub    ecx,0x4
c00013cb:	51                   	push   ecx
c00013cc:	6a 00                	push   0x0
c00013ce:	50                   	push   eax
c00013cf:	e8 02 f3 ff ff       	call   c00006d6 <memset>
c00013d4:	83 c4 10             	add    esp,0x10
c00013d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013db:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e0:	75 14                	jne    c00013f6 <iALLOc+0x156>
c00013e2:	8d 04 37             	lea    eax,[edi+esi*1]
c00013e5:	29 f3                	sub    ebx,esi
c00013e7:	8d 48 08             	lea    ecx,[eax+0x8]
c00013ea:	83 cb 01             	or     ebx,0x1
c00013ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013f4:	89 f3                	mov    ebx,esi
c00013f6:	31 c0                	xor    eax,eax
c00013f8:	4d                   	dec    ebp
c00013f9:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013fc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001400:	39 c5                	cmp    ebp,eax
c0001402:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001405:	74 2c                	je     c0001433 <iALLOc+0x193>
c0001407:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000140b:	85 c9                	test   ecx,ecx
c000140d:	75 15                	jne    c0001424 <iALLOc+0x184>
c000140f:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001412:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001415:	b9 10 00 00 00       	mov    ecx,0x10
c000141a:	83 fe 0f             	cmp    esi,0xf
c000141d:	76 05                	jbe    c0001424 <iALLOc+0x184>
c000141f:	83 e6 f8             	and    esi,0xfffffff8
c0001422:	89 f1                	mov    ecx,esi
c0001424:	89 ce                	mov    esi,ecx
c0001426:	29 cb                	sub    ebx,ecx
c0001428:	83 ce 01             	or     esi,0x1
c000142b:	40                   	inc    eax
c000142c:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000142f:	01 cf                	add    edi,ecx
c0001431:	eb c6                	jmp    c00013f9 <iALLOc+0x159>
c0001433:	83 cb 01             	or     ebx,0x1
c0001436:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001439:	eb 08                	jmp    c0001443 <iALLOc+0x1a3>
c000143b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001443:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001447:	83 c4 2c             	add    esp,0x2c
c000144a:	5b                   	pop    ebx
c000144b:	5e                   	pop    esi
c000144c:	5f                   	pop    edi
c000144d:	5d                   	pop    ebp
c000144e:	c3                   	ret    

c000144f <dlrealloc>:
c000144f:	55                   	push   ebp
c0001450:	57                   	push   edi
c0001451:	56                   	push   esi
c0001452:	53                   	push   ebx
c0001453:	83 ec 1c             	sub    esp,0x1c
c0001456:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000145a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000145e:	85 db                	test   ebx,ebx
c0001460:	75 10                	jne    c0001472 <dlrealloc+0x23>
c0001462:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001466:	83 c4 1c             	add    esp,0x1c
c0001469:	5b                   	pop    ebx
c000146a:	5e                   	pop    esi
c000146b:	5f                   	pop    edi
c000146c:	5d                   	pop    ebp
c000146d:	e9 a0 fa ff ff       	jmp    c0000f12 <dlmalloc>
c0001472:	83 f8 df             	cmp    eax,0xffffffdf
c0001475:	76 07                	jbe    c000147e <dlrealloc+0x2f>
c0001477:	31 db                	xor    ebx,ebx
c0001479:	e9 7c 01 00 00       	jmp    c00015fa <dlrealloc+0x1ab>
c000147e:	83 c0 0b             	add    eax,0xb
c0001481:	bf 10 00 00 00       	mov    edi,0x10
c0001486:	83 f8 0f             	cmp    eax,0xf
c0001489:	76 05                	jbe    c0001490 <dlrealloc+0x41>
c000148b:	83 e0 f8             	and    eax,0xfffffff8
c000148e:	89 c7                	mov    edi,eax
c0001490:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001493:	8d 6b f8             	lea    ebp,[ebx-0x8]
c0001496:	89 c6                	mov    esi,eax
c0001498:	83 e6 fc             	and    esi,0xfffffffc
c000149b:	a8 02                	test   al,0x2
c000149d:	75 d8                	jne    c0001477 <dlrealloc+0x28>
c000149f:	39 f7                	cmp    edi,esi
c00014a1:	0f 86 15 01 00 00    	jbe    c00015bc <dlrealloc+0x16d>
c00014a7:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00014ab:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00014ae:	39 15 ec ca 02 c0    	cmp    DWORD PTR ds:0xc002caec,edx
c00014b4:	75 33                	jne    c00014e9 <dlrealloc+0x9a>
c00014b6:	83 e1 fc             	and    ecx,0xfffffffc
c00014b9:	01 f1                	add    ecx,esi
c00014bb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014bf:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014c2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014c6:	77 49                	ja     c0001511 <dlrealloc+0xc2>
c00014c8:	01 fd                	add    ebp,edi
c00014ca:	83 e0 01             	and    eax,0x1
c00014cd:	09 f8                	or     eax,edi
c00014cf:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014d2:	89 2d ec ca 02 c0    	mov    DWORD PTR ds:0xc002caec,ebp
c00014d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014dc:	29 f8                	sub    eax,edi
c00014de:	83 c8 01             	or     eax,0x1
c00014e1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014e4:	e9 11 01 00 00       	jmp    c00015fa <dlrealloc+0x1ab>
c00014e9:	89 c8                	mov    eax,ecx
c00014eb:	83 e0 fe             	and    eax,0xfffffffe
c00014ee:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014f3:	75 1c                	jne    c0001511 <dlrealloc+0xc2>
c00014f5:	83 e1 fc             	and    ecx,0xfffffffc
c00014f8:	01 f1                	add    ecx,esi
c00014fa:	39 cf                	cmp    edi,ecx
c00014fc:	77 13                	ja     c0001511 <dlrealloc+0xc2>
c00014fe:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001501:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001504:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001507:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000150a:	89 ce                	mov    esi,ecx
c000150c:	e9 ab 00 00 00       	jmp    c00015bc <dlrealloc+0x16d>
c0001511:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001515:	8d 47 f9             	lea    eax,[edi-0x7]
c0001518:	83 ec 0c             	sub    esp,0xc
c000151b:	50                   	push   eax
c000151c:	e8 f1 f9 ff ff       	call   c0000f12 <dlmalloc>
c0001521:	83 c4 10             	add    esp,0x10
c0001524:	89 c1                	mov    ecx,eax
c0001526:	85 c0                	test   eax,eax
c0001528:	0f 84 49 ff ff ff    	je     c0001477 <dlrealloc+0x28>
c000152e:	8d 40 f8             	lea    eax,[eax-0x8]
c0001531:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001535:	39 c2                	cmp    edx,eax
c0001537:	75 0a                	jne    c0001543 <dlrealloc+0xf4>
c0001539:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000153c:	83 e0 fc             	and    eax,0xfffffffc
c000153f:	01 c6                	add    esi,eax
c0001541:	eb 79                	jmp    c00015bc <dlrealloc+0x16d>
c0001543:	83 ee 04             	sub    esi,0x4
c0001546:	83 fe 27             	cmp    esi,0x27
c0001549:	76 16                	jbe    c0001561 <dlrealloc+0x112>
c000154b:	50                   	push   eax
c000154c:	56                   	push   esi
c000154d:	53                   	push   ebx
c000154e:	51                   	push   ecx
c000154f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001553:	e8 48 f1 ff ff       	call   c00006a0 <memcpy>
c0001558:	83 c4 10             	add    esp,0x10
c000155b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000155f:	eb 43                	jmp    c00015a4 <dlrealloc+0x155>
c0001561:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001563:	83 fe 13             	cmp    esi,0x13
c0001566:	89 01                	mov    DWORD PTR [ecx],eax
c0001568:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000156b:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000156e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001571:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001574:	76 2e                	jbe    c00015a4 <dlrealloc+0x155>
c0001576:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001579:	83 fe 1b             	cmp    esi,0x1b
c000157c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000157f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001582:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001585:	76 1d                	jbe    c00015a4 <dlrealloc+0x155>
c0001587:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000158a:	83 fe 23             	cmp    esi,0x23
c000158d:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001590:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001593:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c0001596:	76 0c                	jbe    c00015a4 <dlrealloc+0x155>
c0001598:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000159b:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c000159e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00015a1:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00015a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a8:	83 ec 0c             	sub    esp,0xc
c00015ab:	53                   	push   ebx
c00015ac:	e8 06 f6 ff ff       	call   c0000bb7 <dlfree>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015b8:	89 cb                	mov    ebx,ecx
c00015ba:	eb 3e                	jmp    c00015fa <dlrealloc+0x1ab>
c00015bc:	89 f2                	mov    edx,esi
c00015be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015c1:	29 fa                	sub    edx,edi
c00015c3:	83 e1 01             	and    ecx,0x1
c00015c6:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015ca:	83 fa 0f             	cmp    edx,0xf
c00015cd:	77 0b                	ja     c00015da <dlrealloc+0x18b>
c00015cf:	09 ce                	or     esi,ecx
c00015d1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015d4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015d8:	eb 20                	jmp    c00015fa <dlrealloc+0x1ab>
c00015da:	01 fd                	add    ebp,edi
c00015dc:	83 ec 0c             	sub    esp,0xc
c00015df:	09 cf                	or     edi,ecx
c00015e1:	83 ca 01             	or     edx,0x1
c00015e4:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015e7:	83 c5 08             	add    ebp,0x8
c00015ea:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015ed:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015f1:	55                   	push   ebp
c00015f2:	e8 c0 f5 ff ff       	call   c0000bb7 <dlfree>
c00015f7:	83 c4 10             	add    esp,0x10
c00015fa:	83 c4 1c             	add    esp,0x1c
c00015fd:	89 d8                	mov    eax,ebx
c00015ff:	5b                   	pop    ebx
c0001600:	5e                   	pop    esi
c0001601:	5f                   	pop    edi
c0001602:	5d                   	pop    ebp
c0001603:	c3                   	ret    

c0001604 <dlmemalign>:
c0001604:	55                   	push   ebp
c0001605:	57                   	push   edi
c0001606:	56                   	push   esi
c0001607:	53                   	push   ebx
c0001608:	83 ec 0c             	sub    esp,0xc
c000160b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000160f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001613:	83 fa 08             	cmp    edx,0x8
c0001616:	77 10                	ja     c0001628 <dlmemalign+0x24>
c0001618:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000161c:	83 c4 0c             	add    esp,0xc
c000161f:	5b                   	pop    ebx
c0001620:	5e                   	pop    esi
c0001621:	5f                   	pop    edi
c0001622:	5d                   	pop    ebp
c0001623:	e9 ea f8 ff ff       	jmp    c0000f12 <dlmalloc>
c0001628:	bf 10 00 00 00       	mov    edi,0x10
c000162d:	83 fa 0f             	cmp    edx,0xf
c0001630:	76 13                	jbe    c0001645 <dlmemalign+0x41>
c0001632:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001635:	85 d1                	test   ecx,edx
c0001637:	75 04                	jne    c000163d <dlmemalign+0x39>
c0001639:	89 d7                	mov    edi,edx
c000163b:	eb 08                	jmp    c0001645 <dlmemalign+0x41>
c000163d:	39 d7                	cmp    edi,edx
c000163f:	73 04                	jae    c0001645 <dlmemalign+0x41>
c0001641:	01 ff                	add    edi,edi
c0001643:	eb f8                	jmp    c000163d <dlmemalign+0x39>
c0001645:	83 f8 df             	cmp    eax,0xffffffdf
c0001648:	76 07                	jbe    c0001651 <dlmemalign+0x4d>
c000164a:	31 c0                	xor    eax,eax
c000164c:	e9 ce 00 00 00       	jmp    c000171f <dlmemalign+0x11b>
c0001651:	83 c0 0b             	add    eax,0xb
c0001654:	bd 10 00 00 00       	mov    ebp,0x10
c0001659:	83 f8 0f             	cmp    eax,0xf
c000165c:	76 05                	jbe    c0001663 <dlmemalign+0x5f>
c000165e:	83 e0 f8             	and    eax,0xfffffff8
c0001661:	89 c5                	mov    ebp,eax
c0001663:	83 ec 0c             	sub    esp,0xc
c0001666:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000166a:	50                   	push   eax
c000166b:	e8 a2 f8 ff ff       	call   c0000f12 <dlmalloc>
c0001670:	83 c4 10             	add    esp,0x10
c0001673:	89 c1                	mov    ecx,eax
c0001675:	85 c0                	test   eax,eax
c0001677:	74 d1                	je     c000164a <dlmemalign+0x46>
c0001679:	31 d2                	xor    edx,edx
c000167b:	8d 70 f8             	lea    esi,[eax-0x8]
c000167e:	f7 f7                	div    edi
c0001680:	85 d2                	test   edx,edx
c0001682:	74 62                	je     c00016e6 <dlmemalign+0xe2>
c0001684:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001688:	89 f8                	mov    eax,edi
c000168a:	f7 d8                	neg    eax
c000168c:	21 c3                	and    ebx,eax
c000168e:	83 eb 08             	sub    ebx,0x8
c0001691:	89 d8                	mov    eax,ebx
c0001693:	29 f0                	sub    eax,esi
c0001695:	83 f8 0f             	cmp    eax,0xf
c0001698:	77 02                	ja     c000169c <dlmemalign+0x98>
c000169a:	01 fb                	add    ebx,edi
c000169c:	89 d8                	mov    eax,ebx
c000169e:	29 f0                	sub    eax,esi
c00016a0:	89 c6                	mov    esi,eax
c00016a2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016a5:	89 c2                	mov    edx,eax
c00016a7:	83 e2 fc             	and    edx,0xfffffffc
c00016aa:	29 f2                	sub    edx,esi
c00016ac:	a8 02                	test   al,0x2
c00016ae:	74 10                	je     c00016c0 <dlmemalign+0xbc>
c00016b0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016b3:	83 ca 02             	or     edx,0x2
c00016b6:	8d 43 08             	lea    eax,[ebx+0x8]
c00016b9:	89 33                	mov    DWORD PTR [ebx],esi
c00016bb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016be:	eb 5f                	jmp    c000171f <dlmemalign+0x11b>
c00016c0:	83 ec 0c             	sub    esp,0xc
c00016c3:	89 d0                	mov    eax,edx
c00016c5:	83 c8 01             	or     eax,0x1
c00016c8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016cb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016d0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016d3:	83 e0 01             	and    eax,0x1
c00016d6:	09 f0                	or     eax,esi
c00016d8:	89 de                	mov    esi,ebx
c00016da:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016dd:	51                   	push   ecx
c00016de:	e8 d4 f4 ff ff       	call   c0000bb7 <dlfree>
c00016e3:	83 c4 10             	add    esp,0x10
c00016e6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016e9:	a8 02                	test   al,0x2
c00016eb:	75 2f                	jne    c000171c <dlmemalign+0x118>
c00016ed:	83 e0 fc             	and    eax,0xfffffffc
c00016f0:	8d 55 10             	lea    edx,[ebp+0x10]
c00016f3:	39 c2                	cmp    edx,eax
c00016f5:	73 25                	jae    c000171c <dlmemalign+0x118>
c00016f7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016fa:	83 ec 0c             	sub    esp,0xc
c00016fd:	29 e8                	sub    eax,ebp
c00016ff:	83 c2 08             	add    edx,0x8
c0001702:	83 c8 01             	or     eax,0x1
c0001705:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001708:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000170b:	83 e0 01             	and    eax,0x1
c000170e:	09 c5                	or     ebp,eax
c0001710:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001713:	52                   	push   edx
c0001714:	e8 9e f4 ff ff       	call   c0000bb7 <dlfree>
c0001719:	83 c4 10             	add    esp,0x10
c000171c:	8d 46 08             	lea    eax,[esi+0x8]
c000171f:	83 c4 0c             	add    esp,0xc
c0001722:	5b                   	pop    ebx
c0001723:	5e                   	pop    esi
c0001724:	5f                   	pop    edi
c0001725:	5d                   	pop    ebp
c0001726:	c3                   	ret    

c0001727 <dlcalloc>:
c0001727:	53                   	push   ebx
c0001728:	83 ec 14             	sub    esp,0x14
c000172b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000172f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001734:	50                   	push   eax
c0001735:	e8 d8 f7 ff ff       	call   c0000f12 <dlmalloc>
c000173a:	83 c4 10             	add    esp,0x10
c000173d:	89 c3                	mov    ebx,eax
c000173f:	85 c0                	test   eax,eax
c0001741:	74 77                	je     c00017ba <dlcalloc+0x93>
c0001743:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001746:	89 d0                	mov    eax,edx
c0001748:	83 e0 fc             	and    eax,0xfffffffc
c000174b:	80 e2 02             	and    dl,0x2
c000174e:	75 5a                	jne    c00017aa <dlcalloc+0x83>
c0001750:	83 e8 04             	sub    eax,0x4
c0001753:	83 f8 27             	cmp    eax,0x27
c0001756:	76 03                	jbe    c000175b <dlcalloc+0x34>
c0001758:	51                   	push   ecx
c0001759:	eb 53                	jmp    c00017ae <dlcalloc+0x87>
c000175b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001761:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001768:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000176f:	83 f8 13             	cmp    eax,0x13
c0001772:	76 46                	jbe    c00017ba <dlcalloc+0x93>
c0001774:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000177b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001782:	83 f8 1b             	cmp    eax,0x1b
c0001785:	76 33                	jbe    c00017ba <dlcalloc+0x93>
c0001787:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000178e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001795:	83 f8 23             	cmp    eax,0x23
c0001798:	76 20                	jbe    c00017ba <dlcalloc+0x93>
c000179a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00017a1:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00017a8:	eb 10                	jmp    c00017ba <dlcalloc+0x93>
c00017aa:	83 e8 08             	sub    eax,0x8
c00017ad:	52                   	push   edx
c00017ae:	50                   	push   eax
c00017af:	6a 00                	push   0x0
c00017b1:	53                   	push   ebx
c00017b2:	e8 1f ef ff ff       	call   c00006d6 <memset>
c00017b7:	83 c4 10             	add    esp,0x10
c00017ba:	89 d8                	mov    eax,ebx
c00017bc:	83 c4 08             	add    esp,0x8
c00017bf:	5b                   	pop    ebx
c00017c0:	c3                   	ret    

c00017c1 <dlcfree>:
c00017c1:	e9 f1 f3 ff ff       	jmp    c0000bb7 <dlfree>

c00017c6 <dlindependent_calloc>:
c00017c6:	83 ec 28             	sub    esp,0x28
c00017c9:	b9 03 00 00 00       	mov    ecx,0x3
c00017ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017da:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017e2:	e8 b9 fa ff ff       	call   c00012a0 <iALLOc>
c00017e7:	83 c4 2c             	add    esp,0x2c
c00017ea:	c3                   	ret    

c00017eb <dlindependent_comalloc>:
c00017eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017f3:	31 c9                	xor    ecx,ecx
c00017f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017fd:	e9 9e fa ff ff       	jmp    c00012a0 <iALLOc>

c0001802 <dlvalloc>:
c0001802:	83 ec 0c             	sub    esp,0xc
c0001805:	83 3d c0 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002cac0,0x0
c000180c:	75 0a                	jne    c0001818 <dlvalloc+0x16>
c000180e:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c0001813:	e8 b8 f2 ff ff       	call   c0000ad0 <malloc_consolidate>
c0001818:	50                   	push   eax
c0001819:	50                   	push   eax
c000181a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000181e:	ff 35 1c ce 02 c0    	push   DWORD PTR ds:0xc002ce1c
c0001824:	e8 db fd ff ff       	call   c0001604 <dlmemalign>
c0001829:	83 c4 1c             	add    esp,0x1c
c000182c:	c3                   	ret    

c000182d <dlpvalloc>:
c000182d:	83 ec 0c             	sub    esp,0xc
c0001830:	83 3d c0 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002cac0,0x0
c0001837:	75 0a                	jne    c0001843 <dlpvalloc+0x16>
c0001839:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c000183e:	e8 8d f2 ff ff       	call   c0000ad0 <malloc_consolidate>
c0001843:	a1 1c ce 02 c0       	mov    eax,ds:0xc002ce1c
c0001848:	89 c1                	mov    ecx,eax
c000184a:	52                   	push   edx
c000184b:	f7 d9                	neg    ecx
c000184d:	52                   	push   edx
c000184e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001852:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001856:	21 ca                	and    edx,ecx
c0001858:	52                   	push   edx
c0001859:	50                   	push   eax
c000185a:	e8 a5 fd ff ff       	call   c0001604 <dlmemalign>
c000185f:	83 c4 1c             	add    esp,0x1c
c0001862:	c3                   	ret    

c0001863 <dlmalloc_trim>:
c0001863:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c0001868:	e8 63 f2 ff ff       	call   c0000ad0 <malloc_consolidate>
c000186d:	31 c0                	xor    eax,eax
c000186f:	c3                   	ret    

c0001870 <dlmalloc_usable_size>:
c0001870:	53                   	push   ebx
c0001871:	31 c0                	xor    eax,eax
c0001873:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001877:	85 c9                	test   ecx,ecx
c0001879:	74 24                	je     c000189f <dlmalloc_usable_size+0x2f>
c000187b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000187e:	f6 c2 02             	test   dl,0x2
c0001881:	74 08                	je     c000188b <dlmalloc_usable_size+0x1b>
c0001883:	83 e2 fc             	and    edx,0xfffffffc
c0001886:	8d 42 f8             	lea    eax,[edx-0x8]
c0001889:	eb 14                	jmp    c000189f <dlmalloc_usable_size+0x2f>
c000188b:	89 d3                	mov    ebx,edx
c000188d:	31 c0                	xor    eax,eax
c000188f:	83 e3 fe             	and    ebx,0xfffffffe
c0001892:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001897:	74 06                	je     c000189f <dlmalloc_usable_size+0x2f>
c0001899:	83 e2 fc             	and    edx,0xfffffffc
c000189c:	8d 42 fc             	lea    eax,[edx-0x4]
c000189f:	5b                   	pop    ebx
c00018a0:	c3                   	ret    

c00018a1 <dlmallinfo>:
c00018a1:	55                   	push   ebp
c00018a2:	57                   	push   edi
c00018a3:	56                   	push   esi
c00018a4:	53                   	push   ebx
c00018a5:	83 ec 08             	sub    esp,0x8
c00018a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00018ac:	83 3d ec ca 02 c0 00 	cmp    DWORD PTR ds:0xc002caec,0x0
c00018b3:	75 0a                	jne    c00018bf <dlmallinfo+0x1e>
c00018b5:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c00018ba:	e8 11 f2 ff ff       	call   c0000ad0 <malloc_consolidate>
c00018bf:	a1 ec ca 02 c0       	mov    eax,ds:0xc002caec
c00018c4:	31 ed                	xor    ebp,ebp
c00018c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018c9:	31 c9                	xor    ecx,ecx
c00018cb:	83 e0 fc             	and    eax,0xfffffffc
c00018ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018d2:	31 c0                	xor    eax,eax
c00018d4:	8b 14 85 c4 ca 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd353c]
c00018db:	85 d2                	test   edx,edx
c00018dd:	74 0e                	je     c00018ed <dlmallinfo+0x4c>
c00018df:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018e2:	45                   	inc    ebp
c00018e3:	83 e6 fc             	and    esi,0xfffffffc
c00018e6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018e9:	01 f1                	add    ecx,esi
c00018eb:	eb ee                	jmp    c00018db <dlmallinfo+0x3a>
c00018ed:	40                   	inc    eax
c00018ee:	83 f8 0a             	cmp    eax,0xa
c00018f1:	75 e1                	jne    c00018d4 <dlmallinfo+0x33>
c00018f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018fe:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001901:	b8 f4 ca 02 c0       	mov    eax,0xc002caf4
c0001906:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001909:	39 f0                	cmp    eax,esi
c000190b:	74 10                	je     c000191d <dlmallinfo+0x7c>
c000190d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001910:	ff 04 24             	inc    DWORD PTR [esp]
c0001913:	83 e7 fc             	and    edi,0xfffffffc
c0001916:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001919:	01 fa                	add    edx,edi
c000191b:	eb ec                	jmp    c0001909 <dlmallinfo+0x68>
c000191d:	83 c0 08             	add    eax,0x8
c0001920:	3d ec cd 02 c0       	cmp    eax,0xc002cdec
c0001925:	75 df                	jne    c0001906 <dlmallinfo+0x65>
c0001927:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000192a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000192d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001930:	a1 28 ce 02 c0       	mov    eax,ds:0xc002ce28
c0001935:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001938:	89 03                	mov    DWORD PTR [ebx],eax
c000193a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000193d:	8b 35 10 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ce10
c0001943:	29 d0                	sub    eax,edx
c0001945:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001948:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000194b:	8b 35 24 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ce24
c0001951:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001955:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001958:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000195b:	8b 35 34 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ce34
c0001961:	89 d8                	mov    eax,ebx
c0001963:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001966:	83 c4 08             	add    esp,0x8
c0001969:	5b                   	pop    ebx
c000196a:	5e                   	pop    esi
c000196b:	5f                   	pop    edi
c000196c:	5d                   	pop    ebp
c000196d:	c2 04 00             	ret    0x4

c0001970 <dlmalloc_stats>:
c0001970:	83 ec 30             	sub    esp,0x30
c0001973:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001977:	50                   	push   eax
c0001978:	e8 24 ff ff ff       	call   c00018a1 <dlmallinfo>
c000197d:	83 c4 30             	add    esp,0x30
c0001980:	c3                   	ret    

c0001981 <dlmallopt>:
c0001981:	56                   	push   esi
c0001982:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c0001987:	53                   	push   ebx
c0001988:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000198c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001990:	e8 3b f1 ff ff       	call   c0000ad0 <malloc_consolidate>
c0001995:	8d 46 04             	lea    eax,[esi+0x4]
c0001998:	83 f8 05             	cmp    eax,0x5
c000199b:	77 67                	ja     c0001a04 <dlmallopt+0x83>
c000199d:	ff 24 85 e4 80 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd7f1c]
c00019a4:	83 fb 50             	cmp    ebx,0x50
c00019a7:	77 5b                	ja     c0001a04 <dlmallopt+0x83>
c00019a9:	ba 08 00 00 00       	mov    edx,0x8
c00019ae:	85 db                	test   ebx,ebx
c00019b0:	74 12                	je     c00019c4 <dlmallopt+0x43>
c00019b2:	83 c3 0b             	add    ebx,0xb
c00019b5:	ba 10 00 00 00       	mov    edx,0x10
c00019ba:	83 fb 0f             	cmp    ebx,0xf
c00019bd:	76 05                	jbe    c00019c4 <dlmallopt+0x43>
c00019bf:	89 da                	mov    edx,ebx
c00019c1:	83 e2 f8             	and    edx,0xfffffff8
c00019c4:	a1 c0 ca 02 c0       	mov    eax,ds:0xc002cac0
c00019c9:	83 e0 03             	and    eax,0x3
c00019cc:	09 d0                	or     eax,edx
c00019ce:	a3 c0 ca 02 c0       	mov    ds:0xc002cac0,eax
c00019d3:	eb 31                	jmp    c0001a06 <dlmallopt+0x85>
c00019d5:	89 1d 04 ce 02 c0    	mov    DWORD PTR ds:0xc002ce04,ebx
c00019db:	eb 06                	jmp    c00019e3 <dlmallopt+0x62>
c00019dd:	89 1d 08 ce 02 c0    	mov    DWORD PTR ds:0xc002ce08,ebx
c00019e3:	be 01 00 00 00       	mov    esi,0x1
c00019e8:	eb 1c                	jmp    c0001a06 <dlmallopt+0x85>
c00019ea:	89 1d 0c ce 02 c0    	mov    DWORD PTR ds:0xc002ce0c,ebx
c00019f0:	eb f1                	jmp    c00019e3 <dlmallopt+0x62>
c00019f2:	31 f6                	xor    esi,esi
c00019f4:	85 db                	test   ebx,ebx
c00019f6:	75 0e                	jne    c0001a06 <dlmallopt+0x85>
c00019f8:	c7 05 14 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce14,0x0
c0001a02:	eb df                	jmp    c00019e3 <dlmallopt+0x62>
c0001a04:	31 f6                	xor    esi,esi
c0001a06:	89 f0                	mov    eax,esi
c0001a08:	5b                   	pop    ebx
c0001a09:	5e                   	pop    esi
c0001a0a:	c3                   	ret    

c0001a0b <disk_status>:
c0001a0b:	31 c0                	xor    eax,eax
c0001a0d:	c3                   	ret    

c0001a0e <disk_initialize>:
c0001a0e:	31 c0                	xor    eax,eax
c0001a10:	c3                   	ret    

c0001a11 <disk_read>:
c0001a11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a16:	0f b6 04 85 80 e5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1a80]
c0001a1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a22:	e9 15 e7 01 00       	jmp    c002013c <fatWrapperReadDisk>

c0001a27 <disk_write>:
c0001a27:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a2c:	0f b6 04 85 80 e5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1a80]
c0001a34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a38:	e9 46 e7 01 00       	jmp    c0020183 <fatWrapperWriteDisk>

c0001a3d <disk_ioctl>:
c0001a3d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a46:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a4b:	0f b6 04 85 80 e5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1a80]
c0001a53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a57:	e9 6e e7 01 00       	jmp    c00201ca <fatWrapperIoctl>

c0001a5c <ld_word>:
c0001a5c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a60:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a63:	c1 e2 08             	shl    edx,0x8
c0001a66:	09 d0                	or     eax,edx
c0001a68:	c3                   	ret    

c0001a69 <ld_dword>:
c0001a69:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a6d:	89 d1                	mov    ecx,edx
c0001a6f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a73:	c1 e1 08             	shl    ecx,0x8
c0001a76:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a79:	09 ca                	or     edx,ecx
c0001a7b:	c1 e2 08             	shl    edx,0x8
c0001a7e:	09 d0                	or     eax,edx
c0001a80:	c3                   	ret    

c0001a81 <ld_qword>:
c0001a81:	57                   	push   edi
c0001a82:	56                   	push   esi
c0001a83:	53                   	push   ebx
c0001a84:	31 db                	xor    ebx,ebx
c0001a86:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a89:	89 df                	mov    edi,ebx
c0001a8b:	89 ce                	mov    esi,ecx
c0001a8d:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a91:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a95:	c1 e6 08             	shl    esi,0x8
c0001a98:	09 f2                	or     edx,esi
c0001a9a:	89 d6                	mov    esi,edx
c0001a9c:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001aa0:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aa4:	c1 e6 08             	shl    esi,0x8
c0001aa7:	09 f2                	or     edx,esi
c0001aa9:	89 d6                	mov    esi,edx
c0001aab:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001aaf:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ab3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ab6:	c1 e6 08             	shl    esi,0x8
c0001ab9:	89 fb                	mov    ebx,edi
c0001abb:	09 f2                	or     edx,esi
c0001abd:	89 d1                	mov    ecx,edx
c0001abf:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ac3:	c1 e1 08             	shl    ecx,0x8
c0001ac6:	89 da                	mov    edx,ebx
c0001ac8:	09 c8                	or     eax,ecx
c0001aca:	5b                   	pop    ebx
c0001acb:	5e                   	pop    esi
c0001acc:	5f                   	pop    edi
c0001acd:	c3                   	ret    

c0001ace <st_word>:
c0001ace:	66 89 10             	mov    WORD PTR [eax],dx
c0001ad1:	c3                   	ret    

c0001ad2 <st_dword>:
c0001ad2:	89 10                	mov    DWORD PTR [eax],edx
c0001ad4:	c3                   	ret    

c0001ad5 <st_qword>:
c0001ad5:	89 10                	mov    DWORD PTR [eax],edx
c0001ad7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ada:	c3                   	ret    

c0001adb <mem_cpy>:
c0001adb:	85 c9                	test   ecx,ecx
c0001add:	74 10                	je     c0001aef <mem_cpy+0x14>
c0001adf:	57                   	push   edi
c0001ae0:	01 c1                	add    ecx,eax
c0001ae2:	56                   	push   esi
c0001ae3:	89 c7                	mov    edi,eax
c0001ae5:	89 d6                	mov    esi,edx
c0001ae7:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ae8:	39 f9                	cmp    ecx,edi
c0001aea:	75 fb                	jne    c0001ae7 <mem_cpy+0xc>
c0001aec:	5e                   	pop    esi
c0001aed:	5f                   	pop    edi
c0001aee:	c3                   	ret    
c0001aef:	c3                   	ret    

c0001af0 <mem_set>:
c0001af0:	01 c1                	add    ecx,eax
c0001af2:	40                   	inc    eax
c0001af3:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001af6:	39 c8                	cmp    eax,ecx
c0001af8:	75 f8                	jne    c0001af2 <mem_set+0x2>
c0001afa:	c3                   	ret    

c0001afb <mem_cmp>:
c0001afb:	57                   	push   edi
c0001afc:	56                   	push   esi
c0001afd:	89 c6                	mov    esi,eax
c0001aff:	53                   	push   ebx
c0001b00:	46                   	inc    esi
c0001b01:	42                   	inc    edx
c0001b02:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001b06:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001b0a:	29 fb                	sub    ebx,edi
c0001b0c:	89 cf                	mov    edi,ecx
c0001b0e:	29 f7                	sub    edi,esi
c0001b10:	01 c7                	add    edi,eax
c0001b12:	74 04                	je     c0001b18 <mem_cmp+0x1d>
c0001b14:	85 db                	test   ebx,ebx
c0001b16:	74 e8                	je     c0001b00 <mem_cmp+0x5>
c0001b18:	89 d8                	mov    eax,ebx
c0001b1a:	5b                   	pop    ebx
c0001b1b:	5e                   	pop    esi
c0001b1c:	5f                   	pop    edi
c0001b1d:	c3                   	ret    

c0001b1e <chk_chr>:
c0001b1e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b21:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b24:	74 07                	je     c0001b2d <chk_chr+0xf>
c0001b26:	39 d1                	cmp    ecx,edx
c0001b28:	74 03                	je     c0001b2d <chk_chr+0xf>
c0001b2a:	40                   	inc    eax
c0001b2b:	eb f1                	jmp    c0001b1e <chk_chr>
c0001b2d:	89 c8                	mov    eax,ecx
c0001b2f:	c3                   	ret    

c0001b30 <dbc_1st>:
c0001b30:	31 c0                	xor    eax,eax
c0001b32:	c3                   	ret    

c0001b33 <dbc_2nd>:
c0001b33:	31 c0                	xor    eax,eax
c0001b35:	c3                   	ret    

c0001b36 <tchar2uni>:
c0001b36:	57                   	push   edi
c0001b37:	89 c7                	mov    edi,eax
c0001b39:	56                   	push   esi
c0001b3a:	53                   	push   ebx
c0001b3b:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b3d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b3f:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b42:	84 c9                	test   cl,cl
c0001b44:	78 0a                	js     c0001b50 <tchar2uni+0x1a>
c0001b46:	0f b6 d1             	movzx  edx,cl
c0001b49:	89 f3                	mov    ebx,esi
c0001b4b:	e9 9f 00 00 00       	jmp    c0001bef <tchar2uni+0xb9>
c0001b50:	88 ca                	mov    dl,cl
c0001b52:	83 e2 e0             	and    edx,0xffffffe0
c0001b55:	80 fa c0             	cmp    dl,0xc0
c0001b58:	75 0c                	jne    c0001b66 <tchar2uni+0x30>
c0001b5a:	89 ca                	mov    edx,ecx
c0001b5c:	b9 01 00 00 00       	mov    ecx,0x1
c0001b61:	83 e2 1f             	and    edx,0x1f
c0001b64:	eb 2e                	jmp    c0001b94 <tchar2uni+0x5e>
c0001b66:	88 ca                	mov    dl,cl
c0001b68:	83 e2 f0             	and    edx,0xfffffff0
c0001b6b:	80 fa e0             	cmp    dl,0xe0
c0001b6e:	75 0c                	jne    c0001b7c <tchar2uni+0x46>
c0001b70:	89 ca                	mov    edx,ecx
c0001b72:	b9 02 00 00 00       	mov    ecx,0x2
c0001b77:	83 e2 0f             	and    edx,0xf
c0001b7a:	eb 18                	jmp    c0001b94 <tchar2uni+0x5e>
c0001b7c:	88 ca                	mov    dl,cl
c0001b7e:	83 e2 f8             	and    edx,0xfffffff8
c0001b81:	88 d0                	mov    al,dl
c0001b83:	83 ca ff             	or     edx,0xffffffff
c0001b86:	3c f0                	cmp    al,0xf0
c0001b88:	75 6c                	jne    c0001bf6 <tchar2uni+0xc0>
c0001b8a:	89 ca                	mov    edx,ecx
c0001b8c:	b9 03 00 00 00       	mov    ecx,0x3
c0001b91:	83 e2 07             	and    edx,0x7
c0001b94:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b98:	46                   	inc    esi
c0001b99:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b9c:	88 c8                	mov    al,cl
c0001b9e:	83 e0 c0             	and    eax,0xffffffc0
c0001ba1:	3c 80                	cmp    al,0x80
c0001ba3:	75 4e                	jne    c0001bf3 <tchar2uni+0xbd>
c0001ba5:	c1 e2 06             	shl    edx,0x6
c0001ba8:	83 e1 3f             	and    ecx,0x3f
c0001bab:	09 ca                	or     edx,ecx
c0001bad:	39 de                	cmp    esi,ebx
c0001baf:	75 e7                	jne    c0001b98 <tchar2uni+0x62>
c0001bb1:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001bb4:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bba:	77 37                	ja     c0001bf3 <tchar2uni+0xbd>
c0001bbc:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bc2:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bc8:	76 29                	jbe    c0001bf3 <tchar2uni+0xbd>
c0001bca:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bd0:	76 1d                	jbe    c0001bef <tchar2uni+0xb9>
c0001bd2:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bd8:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bde:	c1 e1 06             	shl    ecx,0x6
c0001be1:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001be7:	09 ca                	or     edx,ecx
c0001be9:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bef:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bf1:	eb 03                	jmp    c0001bf6 <tchar2uni+0xc0>
c0001bf3:	83 ca ff             	or     edx,0xffffffff
c0001bf6:	5b                   	pop    ebx
c0001bf7:	89 d0                	mov    eax,edx
c0001bf9:	5e                   	pop    esi
c0001bfa:	5f                   	pop    edi
c0001bfb:	c3                   	ret    

c0001bfc <put_utf>:
c0001bfc:	53                   	push   ebx
c0001bfd:	83 f8 7f             	cmp    eax,0x7f
c0001c00:	89 c3                	mov    ebx,eax
c0001c02:	b0 00                	mov    al,0x0
c0001c04:	77 11                	ja     c0001c17 <put_utf+0x1b>
c0001c06:	85 c9                	test   ecx,ecx
c0001c08:	0f 84 e5 00 00 00    	je     c0001cf3 <put_utf+0xf7>
c0001c0e:	88 1a                	mov    BYTE PTR [edx],bl
c0001c10:	b0 01                	mov    al,0x1
c0001c12:	e9 dc 00 00 00       	jmp    c0001cf3 <put_utf+0xf7>
c0001c17:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c1d:	77 23                	ja     c0001c42 <put_utf+0x46>
c0001c1f:	83 f9 01             	cmp    ecx,0x1
c0001c22:	0f 86 cb 00 00 00    	jbe    c0001cf3 <put_utf+0xf7>
c0001c28:	89 d8                	mov    eax,ebx
c0001c2a:	83 e3 3f             	and    ebx,0x3f
c0001c2d:	c1 e8 06             	shr    eax,0x6
c0001c30:	83 cb 80             	or     ebx,0xffffff80
c0001c33:	83 c8 c0             	or     eax,0xffffffc0
c0001c36:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c39:	88 02                	mov    BYTE PTR [edx],al
c0001c3b:	b0 02                	mov    al,0x2
c0001c3d:	e9 b1 00 00 00       	jmp    c0001cf3 <put_utf+0xf7>
c0001c42:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c48:	77 40                	ja     c0001c8a <put_utf+0x8e>
c0001c4a:	83 f9 02             	cmp    ecx,0x2
c0001c4d:	0f 86 a0 00 00 00    	jbe    c0001cf3 <put_utf+0xf7>
c0001c53:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c59:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c5f:	0f 86 8e 00 00 00    	jbe    c0001cf3 <put_utf+0xf7>
c0001c65:	89 d8                	mov    eax,ebx
c0001c67:	c1 e8 0c             	shr    eax,0xc
c0001c6a:	83 c8 e0             	or     eax,0xffffffe0
c0001c6d:	88 02                	mov    BYTE PTR [edx],al
c0001c6f:	89 d8                	mov    eax,ebx
c0001c71:	83 e3 3f             	and    ebx,0x3f
c0001c74:	c1 e8 06             	shr    eax,0x6
c0001c77:	83 cb 80             	or     ebx,0xffffff80
c0001c7a:	83 e0 3f             	and    eax,0x3f
c0001c7d:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c80:	83 c8 80             	or     eax,0xffffff80
c0001c83:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c86:	b0 03                	mov    al,0x3
c0001c88:	eb 69                	jmp    c0001cf3 <put_utf+0xf7>
c0001c8a:	83 f9 03             	cmp    ecx,0x3
c0001c8d:	76 64                	jbe    c0001cf3 <put_utf+0xf7>
c0001c8f:	89 d9                	mov    ecx,ebx
c0001c91:	0f b7 c3             	movzx  eax,bx
c0001c94:	66 31 c9             	xor    cx,cx
c0001c97:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c9d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ca3:	c1 e9 06             	shr    ecx,0x6
c0001ca6:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001cac:	77 43                	ja     c0001cf1 <put_utf+0xf5>
c0001cae:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001cb4:	77 3b                	ja     c0001cf1 <put_utf+0xf5>
c0001cb6:	09 cb                	or     ebx,ecx
c0001cb8:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cbe:	89 d8                	mov    eax,ebx
c0001cc0:	c1 e8 12             	shr    eax,0x12
c0001cc3:	83 c8 f0             	or     eax,0xfffffff0
c0001cc6:	88 02                	mov    BYTE PTR [edx],al
c0001cc8:	89 d8                	mov    eax,ebx
c0001cca:	c1 e8 0c             	shr    eax,0xc
c0001ccd:	83 e0 3f             	and    eax,0x3f
c0001cd0:	83 c8 80             	or     eax,0xffffff80
c0001cd3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cd6:	89 d8                	mov    eax,ebx
c0001cd8:	83 e3 3f             	and    ebx,0x3f
c0001cdb:	c1 e8 06             	shr    eax,0x6
c0001cde:	83 cb 80             	or     ebx,0xffffff80
c0001ce1:	83 e0 3f             	and    eax,0x3f
c0001ce4:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ce7:	83 c8 80             	or     eax,0xffffff80
c0001cea:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ced:	b0 04                	mov    al,0x4
c0001cef:	eb 02                	jmp    c0001cf3 <put_utf+0xf7>
c0001cf1:	31 c0                	xor    eax,eax
c0001cf3:	5b                   	pop    ebx
c0001cf4:	c3                   	ret    

c0001cf5 <clst2sect>:
c0001cf5:	89 c1                	mov    ecx,eax
c0001cf7:	83 ea 02             	sub    edx,0x2
c0001cfa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cfd:	83 e8 02             	sub    eax,0x2
c0001d00:	39 d0                	cmp    eax,edx
c0001d02:	76 0d                	jbe    c0001d11 <clst2sect+0x1c>
c0001d04:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001d08:	f7 e2                	mul    edx
c0001d0a:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001d0d:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001d10:	c3                   	ret    
c0001d11:	31 c0                	xor    eax,eax
c0001d13:	31 d2                	xor    edx,edx
c0001d15:	c3                   	ret    

c0001d16 <clmt_clust>:
c0001d16:	57                   	push   edi
c0001d17:	89 cf                	mov    edi,ecx
c0001d19:	56                   	push   esi
c0001d1a:	89 d6                	mov    esi,edx
c0001d1c:	53                   	push   ebx
c0001d1d:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d21:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d24:	89 f2                	mov    edx,esi
c0001d26:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d28:	c1 ef 09             	shr    edi,0x9
c0001d2b:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d2f:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d32:	89 f9                	mov    ecx,edi
c0001d34:	31 ff                	xor    edi,edi
c0001d36:	57                   	push   edi
c0001d37:	56                   	push   esi
c0001d38:	51                   	push   ecx
c0001d39:	52                   	push   edx
c0001d3a:	e8 8d 3a 02 00       	call   c00257cc <__udivdi3>
c0001d3f:	83 c4 10             	add    esp,0x10
c0001d42:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d44:	85 d2                	test   edx,edx
c0001d46:	74 10                	je     c0001d58 <clmt_clust+0x42>
c0001d48:	39 d0                	cmp    eax,edx
c0001d4a:	72 07                	jb     c0001d53 <clmt_clust+0x3d>
c0001d4c:	29 d0                	sub    eax,edx
c0001d4e:	83 c3 08             	add    ebx,0x8
c0001d51:	eb ef                	jmp    c0001d42 <clmt_clust+0x2c>
c0001d53:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d56:	89 c2                	mov    edx,eax
c0001d58:	5b                   	pop    ebx
c0001d59:	89 d0                	mov    eax,edx
c0001d5b:	5e                   	pop    esi
c0001d5c:	5f                   	pop    edi
c0001d5d:	c3                   	ret    

c0001d5e <pick_lfn>:
c0001d5e:	55                   	push   ebp
c0001d5f:	57                   	push   edi
c0001d60:	56                   	push   esi
c0001d61:	89 d6                	mov    esi,edx
c0001d63:	53                   	push   ebx
c0001d64:	89 c3                	mov    ebx,eax
c0001d66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d69:	e8 ee fc ff ff       	call   c0001a5c <ld_word>
c0001d6e:	66 85 c0             	test   ax,ax
c0001d71:	74 04                	je     c0001d77 <pick_lfn+0x19>
c0001d73:	31 c0                	xor    eax,eax
c0001d75:	eb 5c                	jmp    c0001dd3 <pick_lfn+0x75>
c0001d77:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d7a:	bd 01 00 00 00       	mov    ebp,0x1
c0001d7f:	83 e1 bf             	and    ecx,0xffffffbf
c0001d82:	31 ff                	xor    edi,edi
c0001d84:	49                   	dec    ecx
c0001d85:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d88:	0f b6 87 00 82 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd7e00]
c0001d8f:	01 f0                	add    eax,esi
c0001d91:	e8 c6 fc ff ff       	call   c0001a5c <ld_word>
c0001d96:	66 85 ed             	test   bp,bp
c0001d99:	74 11                	je     c0001dac <pick_lfn+0x4e>
c0001d9b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001da1:	77 d0                	ja     c0001d73 <pick_lfn+0x15>
c0001da3:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001da7:	89 c5                	mov    ebp,eax
c0001da9:	41                   	inc    ecx
c0001daa:	eb 04                	jmp    c0001db0 <pick_lfn+0x52>
c0001dac:	66 40                	inc    ax
c0001dae:	75 c3                	jne    c0001d73 <pick_lfn+0x15>
c0001db0:	47                   	inc    edi
c0001db1:	83 ff 0d             	cmp    edi,0xd
c0001db4:	75 d2                	jne    c0001d88 <pick_lfn+0x2a>
c0001db6:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001db9:	74 13                	je     c0001dce <pick_lfn+0x70>
c0001dbb:	66 85 ed             	test   bp,bp
c0001dbe:	74 0e                	je     c0001dce <pick_lfn+0x70>
c0001dc0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001dc6:	77 ab                	ja     c0001d73 <pick_lfn+0x15>
c0001dc8:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dce:	b8 01 00 00 00       	mov    eax,0x1
c0001dd3:	5b                   	pop    ebx
c0001dd4:	5e                   	pop    esi
c0001dd5:	5f                   	pop    edi
c0001dd6:	5d                   	pop    ebp
c0001dd7:	c3                   	ret    

c0001dd8 <put_lfn>:
c0001dd8:	55                   	push   ebp
c0001dd9:	31 ed                	xor    ebp,ebp
c0001ddb:	57                   	push   edi
c0001ddc:	89 d7                	mov    edi,edx
c0001dde:	56                   	push   esi
c0001ddf:	31 f6                	xor    esi,esi
c0001de1:	53                   	push   ebx
c0001de2:	83 ec 08             	sub    esp,0x8
c0001de5:	89 04 24             	mov    DWORD PTR [esp],eax
c0001de8:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001df0:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001df6:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001df9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001dfc:	31 d2                	xor    edx,edx
c0001dfe:	e8 cb fc ff ff       	call   c0001ace <st_word>
c0001e03:	0f b6 d9             	movzx  ebx,cl
c0001e06:	4b                   	dec    ebx
c0001e07:	6b db 0d             	imul   ebx,ebx,0xd
c0001e0a:	66 83 fe ff          	cmp    si,0xffff
c0001e0e:	74 08                	je     c0001e18 <put_lfn+0x40>
c0001e10:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e13:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e17:	43                   	inc    ebx
c0001e18:	0f b6 85 00 82 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd7e00]
c0001e1f:	0f b7 d6             	movzx  edx,si
c0001e22:	01 f8                	add    eax,edi
c0001e24:	e8 a5 fc ff ff       	call   c0001ace <st_word>
c0001e29:	66 85 f6             	test   si,si
c0001e2c:	75 03                	jne    c0001e31 <put_lfn+0x59>
c0001e2e:	83 ce ff             	or     esi,0xffffffff
c0001e31:	45                   	inc    ebp
c0001e32:	83 fd 0d             	cmp    ebp,0xd
c0001e35:	75 d3                	jne    c0001e0a <put_lfn+0x32>
c0001e37:	66 46                	inc    si
c0001e39:	74 0a                	je     c0001e45 <put_lfn+0x6d>
c0001e3b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e3e:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e43:	75 09                	jne    c0001e4e <put_lfn+0x76>
c0001e45:	88 c8                	mov    al,cl
c0001e47:	83 c8 40             	or     eax,0x40
c0001e4a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e4e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e52:	88 07                	mov    BYTE PTR [edi],al
c0001e54:	83 c4 08             	add    esp,0x8
c0001e57:	5b                   	pop    ebx
c0001e58:	5e                   	pop    esi
c0001e59:	5f                   	pop    edi
c0001e5a:	5d                   	pop    ebp
c0001e5b:	c3                   	ret    

c0001e5c <gen_numname>:
c0001e5c:	57                   	push   edi
c0001e5d:	89 cf                	mov    edi,ecx
c0001e5f:	56                   	push   esi
c0001e60:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e65:	53                   	push   ebx
c0001e66:	89 c6                	mov    esi,eax
c0001e68:	83 ec 10             	sub    esp,0x10
c0001e6b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e6f:	e8 67 fc ff ff       	call   c0001adb <mem_cpy>
c0001e74:	83 fb 05             	cmp    ebx,0x5
c0001e77:	76 2d                	jbe    c0001ea6 <gen_numname+0x4a>
c0001e79:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e7c:	66 85 c0             	test   ax,ax
c0001e7f:	74 25                	je     c0001ea6 <gen_numname+0x4a>
c0001e81:	83 c7 02             	add    edi,0x2
c0001e84:	ba 10 00 00 00       	mov    edx,0x10
c0001e89:	01 db                	add    ebx,ebx
c0001e8b:	89 c1                	mov    ecx,eax
c0001e8d:	66 d1 e8             	shr    ax,1
c0001e90:	83 e1 01             	and    ecx,0x1
c0001e93:	01 cb                	add    ebx,ecx
c0001e95:	0f ba e3 10          	bt     ebx,0x10
c0001e99:	73 06                	jae    c0001ea1 <gen_numname+0x45>
c0001e9b:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001ea1:	4a                   	dec    edx
c0001ea2:	75 e5                	jne    c0001e89 <gen_numname+0x2d>
c0001ea4:	eb d3                	jmp    c0001e79 <gen_numname+0x1d>
c0001ea6:	b8 07 00 00 00       	mov    eax,0x7
c0001eab:	88 d9                	mov    cl,bl
c0001ead:	83 e1 0f             	and    ecx,0xf
c0001eb0:	8d 51 30             	lea    edx,[ecx+0x30]
c0001eb3:	80 fa 39             	cmp    dl,0x39
c0001eb6:	76 03                	jbe    c0001ebb <gen_numname+0x5f>
c0001eb8:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ebb:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ebe:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001ec2:	89 da                	mov    edx,ebx
c0001ec4:	c1 ea 04             	shr    edx,0x4
c0001ec7:	83 fb 0f             	cmp    ebx,0xf
c0001eca:	76 06                	jbe    c0001ed2 <gen_numname+0x76>
c0001ecc:	89 c8                	mov    eax,ecx
c0001ece:	89 d3                	mov    ebx,edx
c0001ed0:	eb d9                	jmp    c0001eab <gen_numname+0x4f>
c0001ed2:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ed7:	31 d2                	xor    edx,edx
c0001ed9:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001edc:	8d 04 16             	lea    eax,[esi+edx*1]
c0001edf:	39 ca                	cmp    edx,ecx
c0001ee1:	73 18                	jae    c0001efb <gen_numname+0x9f>
c0001ee3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ee6:	3c 20                	cmp    al,0x20
c0001ee8:	74 11                	je     c0001efb <gen_numname+0x9f>
c0001eea:	e8 41 fc ff ff       	call   c0001b30 <dbc_1st>
c0001eef:	85 c0                	test   eax,eax
c0001ef1:	74 05                	je     c0001ef8 <gen_numname+0x9c>
c0001ef3:	39 d3                	cmp    ebx,edx
c0001ef5:	74 04                	je     c0001efb <gen_numname+0x9f>
c0001ef7:	42                   	inc    edx
c0001ef8:	42                   	inc    edx
c0001ef9:	eb e1                	jmp    c0001edc <gen_numname+0x80>
c0001efb:	b0 20                	mov    al,0x20
c0001efd:	83 f9 07             	cmp    ecx,0x7
c0001f00:	77 05                	ja     c0001f07 <gen_numname+0xab>
c0001f02:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001f06:	41                   	inc    ecx
c0001f07:	42                   	inc    edx
c0001f08:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001f0c:	83 fa 07             	cmp    edx,0x7
c0001f0f:	76 ea                	jbe    c0001efb <gen_numname+0x9f>
c0001f11:	83 c4 10             	add    esp,0x10
c0001f14:	5b                   	pop    ebx
c0001f15:	5e                   	pop    esi
c0001f16:	5f                   	pop    edi
c0001f17:	c3                   	ret    

c0001f18 <sum_sfn>:
c0001f18:	31 c9                	xor    ecx,ecx
c0001f1a:	31 d2                	xor    edx,edx
c0001f1c:	d0 ca                	ror    dl,1
c0001f1e:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f21:	41                   	inc    ecx
c0001f22:	83 f9 0b             	cmp    ecx,0xb
c0001f25:	75 f5                	jne    c0001f1c <sum_sfn+0x4>
c0001f27:	88 d0                	mov    al,dl
c0001f29:	c3                   	ret    

c0001f2a <xdir_sum>:
c0001f2a:	56                   	push   esi
c0001f2b:	31 c9                	xor    ecx,ecx
c0001f2d:	53                   	push   ebx
c0001f2e:	31 d2                	xor    edx,edx
c0001f30:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f34:	43                   	inc    ebx
c0001f35:	c1 e3 05             	shl    ebx,0x5
c0001f38:	83 fa 02             	cmp    edx,0x2
c0001f3b:	74 0b                	je     c0001f48 <xdir_sum+0x1e>
c0001f3d:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f41:	66 d1 c9             	ror    cx,1
c0001f44:	01 f1                	add    ecx,esi
c0001f46:	eb 05                	jmp    c0001f4d <xdir_sum+0x23>
c0001f48:	ba 03 00 00 00       	mov    edx,0x3
c0001f4d:	42                   	inc    edx
c0001f4e:	39 d3                	cmp    ebx,edx
c0001f50:	77 e6                	ja     c0001f38 <xdir_sum+0xe>
c0001f52:	89 c8                	mov    eax,ecx
c0001f54:	5b                   	pop    ebx
c0001f55:	5e                   	pop    esi
c0001f56:	c3                   	ret    

c0001f57 <xsum32>:
c0001f57:	d1 ca                	ror    edx,1
c0001f59:	0f b6 c0             	movzx  eax,al
c0001f5c:	01 d0                	add    eax,edx
c0001f5e:	c3                   	ret    

c0001f5f <get_xfileinfo>:
c0001f5f:	55                   	push   ebp
c0001f60:	31 c9                	xor    ecx,ecx
c0001f62:	57                   	push   edi
c0001f63:	bd 40 00 00 00       	mov    ebp,0x40
c0001f68:	56                   	push   esi
c0001f69:	31 ff                	xor    edi,edi
c0001f6b:	53                   	push   ebx
c0001f6c:	89 c6                	mov    esi,eax
c0001f6e:	83 ec 0c             	sub    esp,0xc
c0001f71:	89 d3                	mov    ebx,edx
c0001f73:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f7a:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f81:	76 6d                	jbe    c0001ff0 <get_xfileinfo+0x91>
c0001f83:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f89:	76 0b                	jbe    c0001f96 <get_xfileinfo+0x37>
c0001f8b:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f8f:	bf 01 00 00 00       	mov    edi,0x1
c0001f94:	eb 63                	jmp    c0001ff9 <get_xfileinfo+0x9a>
c0001f96:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f9c:	75 03                	jne    c0001fa1 <get_xfileinfo+0x42>
c0001f9e:	83 c5 02             	add    ebp,0x2
c0001fa1:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001fa4:	83 c5 02             	add    ebp,0x2
c0001fa7:	e8 b0 fa ff ff       	call   c0001a5c <ld_word>
c0001fac:	ff 04 24             	inc    DWORD PTR [esp]
c0001faf:	66 85 c9             	test   cx,cx
c0001fb2:	75 0d                	jne    c0001fc1 <get_xfileinfo+0x62>
c0001fb4:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fba:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fbf:	76 2b                	jbe    c0001fec <get_xfileinfo+0x8d>
c0001fc1:	c1 e1 10             	shl    ecx,0x10
c0001fc4:	ba ff 00 00 00       	mov    edx,0xff
c0001fc9:	0f b7 c0             	movzx  eax,ax
c0001fcc:	29 fa                	sub    edx,edi
c0001fce:	09 c8                	or     eax,ecx
c0001fd0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fd4:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fd8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fdc:	e8 1b fc ff ff       	call   c0001bfc <put_utf>
c0001fe1:	84 c0                	test   al,al
c0001fe3:	74 a6                	je     c0001f8b <get_xfileinfo+0x2c>
c0001fe5:	0f b6 c0             	movzx  eax,al
c0001fe8:	01 c7                	add    edi,eax
c0001fea:	31 c0                	xor    eax,eax
c0001fec:	89 c1                	mov    ecx,eax
c0001fee:	eb 8a                	jmp    c0001f7a <get_xfileinfo+0x1b>
c0001ff0:	85 ff                	test   edi,edi
c0001ff2:	74 97                	je     c0001f8b <get_xfileinfo+0x2c>
c0001ff4:	66 85 c9             	test   cx,cx
c0001ff7:	75 92                	jne    c0001f8b <get_xfileinfo+0x2c>
c0001ff9:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001ffe:	31 c0                	xor    eax,eax
c0002000:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002004:	31 d2                	xor    edx,edx
c0002006:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002009:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000200c:	80 e1 10             	and    cl,0x10
c000200f:	75 08                	jne    c0002019 <get_xfileinfo+0xba>
c0002011:	8d 46 38             	lea    eax,[esi+0x38]
c0002014:	e8 68 fa ff ff       	call   c0001a81 <ld_qword>
c0002019:	89 03                	mov    DWORD PTR [ebx],eax
c000201b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000201e:	8d 46 0c             	lea    eax,[esi+0xc]
c0002021:	e8 36 fa ff ff       	call   c0001a5c <ld_word>
c0002026:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000202a:	8d 46 0e             	lea    eax,[esi+0xe]
c000202d:	e8 2a fa ff ff       	call   c0001a5c <ld_word>
c0002032:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002036:	83 c4 0c             	add    esp,0xc
c0002039:	5b                   	pop    ebx
c000203a:	5e                   	pop    esi
c000203b:	5f                   	pop    edi
c000203c:	5d                   	pop    ebp
c000203d:	c3                   	ret    

c000203e <get_ldnumber>:
c000203e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002040:	85 d2                	test   edx,edx
c0002042:	74 14                	je     c0002058 <get_ldnumber+0x1a>
c0002044:	56                   	push   esi
c0002045:	53                   	push   ebx
c0002046:	89 d3                	mov    ebx,edx
c0002048:	43                   	inc    ebx
c0002049:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000204c:	80 f9 1f             	cmp    cl,0x1f
c000204f:	76 0d                	jbe    c000205e <get_ldnumber+0x20>
c0002051:	80 f9 3a             	cmp    cl,0x3a
c0002054:	75 f2                	jne    c0002048 <get_ldnumber+0xa>
c0002056:	eb 0a                	jmp    c0002062 <get_ldnumber+0x24>
c0002058:	83 c9 ff             	or     ecx,0xffffffff
c000205b:	89 c8                	mov    eax,ecx
c000205d:	c3                   	ret    
c000205e:	31 c9                	xor    ecx,ecx
c0002060:	eb 24                	jmp    c0002086 <get_ldnumber+0x48>
c0002062:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002065:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002068:	80 f9 09             	cmp    cl,0x9
c000206b:	77 16                	ja     c0002083 <get_ldnumber+0x45>
c000206d:	83 c2 02             	add    edx,0x2
c0002070:	83 c9 ff             	or     ecx,0xffffffff
c0002073:	39 d3                	cmp    ebx,edx
c0002075:	75 0f                	jne    c0002086 <get_ldnumber+0x48>
c0002077:	89 f2                	mov    edx,esi
c0002079:	89 18                	mov    DWORD PTR [eax],ebx
c000207b:	0f be ca             	movsx  ecx,dl
c000207e:	83 e9 30             	sub    ecx,0x30
c0002081:	eb 03                	jmp    c0002086 <get_ldnumber+0x48>
c0002083:	83 c9 ff             	or     ecx,0xffffffff
c0002086:	89 c8                	mov    eax,ecx
c0002088:	5b                   	pop    ebx
c0002089:	5e                   	pop    esi
c000208a:	c3                   	ret    

c000208b <crc32>:
c000208b:	56                   	push   esi
c000208c:	89 d6                	mov    esi,edx
c000208e:	53                   	push   ebx
c000208f:	b2 01                	mov    dl,0x1
c0002091:	bb 08 00 00 00       	mov    ebx,0x8
c0002096:	89 f1                	mov    ecx,esi
c0002098:	84 d1                	test   cl,dl
c000209a:	0f 95 c1             	setne  cl
c000209d:	0f b6 c9             	movzx  ecx,cl
c00020a0:	31 c1                	xor    ecx,eax
c00020a2:	89 c8                	mov    eax,ecx
c00020a4:	d1 e8                	shr    eax,1
c00020a6:	80 e1 01             	and    cl,0x1
c00020a9:	74 05                	je     c00020b0 <crc32+0x25>
c00020ab:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00020b0:	d1 e2                	shl    edx,1
c00020b2:	4b                   	dec    ebx
c00020b3:	75 e1                	jne    c0002096 <crc32+0xb>
c00020b5:	5b                   	pop    ebx
c00020b6:	5e                   	pop    esi
c00020b7:	c3                   	ret    

c00020b8 <test_gpt_header>:
c00020b8:	55                   	push   ebp
c00020b9:	b9 10 00 00 00       	mov    ecx,0x10
c00020be:	57                   	push   edi
c00020bf:	ba 00 81 02 c0       	mov    edx,0xc0028100
c00020c4:	56                   	push   esi
c00020c5:	31 ff                	xor    edi,edi
c00020c7:	53                   	push   ebx
c00020c8:	89 c3                	mov    ebx,eax
c00020ca:	e8 2c fa ff ff       	call   c0001afb <mem_cmp>
c00020cf:	85 c0                	test   eax,eax
c00020d1:	75 55                	jne    c0002128 <test_gpt_header+0x70>
c00020d3:	89 c7                	mov    edi,eax
c00020d5:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020da:	83 ce ff             	or     esi,0xffffffff
c00020dd:	31 d2                	xor    edx,edx
c00020df:	83 fd 03             	cmp    ebp,0x3
c00020e2:	76 05                	jbe    c00020e9 <test_gpt_header+0x31>
c00020e4:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020e9:	89 f0                	mov    eax,esi
c00020eb:	45                   	inc    ebp
c00020ec:	e8 9a ff ff ff       	call   c000208b <crc32>
c00020f1:	83 fd 4c             	cmp    ebp,0x4c
c00020f4:	89 c6                	mov    esi,eax
c00020f6:	75 e5                	jne    c00020dd <test_gpt_header+0x25>
c00020f8:	8d 43 10             	lea    eax,[ebx+0x10]
c00020fb:	f7 d6                	not    esi
c00020fd:	e8 67 f9 ff ff       	call   c0001a69 <ld_dword>
c0002102:	39 c6                	cmp    esi,eax
c0002104:	75 22                	jne    c0002128 <test_gpt_header+0x70>
c0002106:	8d 43 54             	lea    eax,[ebx+0x54]
c0002109:	e8 5b f9 ff ff       	call   c0001a69 <ld_dword>
c000210e:	83 c0 80             	add    eax,0xffffff80
c0002111:	75 15                	jne    c0002128 <test_gpt_header+0x70>
c0002113:	8d 43 50             	lea    eax,[ebx+0x50]
c0002116:	e8 4e f9 ff ff       	call   c0001a69 <ld_dword>
c000211b:	3d 80 00 00 00       	cmp    eax,0x80
c0002120:	0f 96 c0             	setbe  al
c0002123:	0f b6 c0             	movzx  eax,al
c0002126:	89 c7                	mov    edi,eax
c0002128:	5b                   	pop    ebx
c0002129:	89 f8                	mov    eax,edi
c000212b:	5e                   	pop    esi
c000212c:	5f                   	pop    edi
c000212d:	5d                   	pop    ebp
c000212e:	c3                   	ret    

c000212f <make_rand>:
c000212f:	56                   	push   esi
c0002130:	85 c0                	test   eax,eax
c0002132:	53                   	push   ebx
c0002133:	75 05                	jne    c000213a <make_rand+0xb>
c0002135:	b8 01 00 00 00       	mov    eax,0x1
c000213a:	01 d1                	add    ecx,edx
c000213c:	bb 08 00 00 00       	mov    ebx,0x8
c0002141:	89 c6                	mov    esi,eax
c0002143:	d1 e8                	shr    eax,1
c0002145:	83 e6 01             	and    esi,0x1
c0002148:	85 f6                	test   esi,esi
c000214a:	74 05                	je     c0002151 <make_rand+0x22>
c000214c:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002151:	4b                   	dec    ebx
c0002152:	75 ed                	jne    c0002141 <make_rand+0x12>
c0002154:	42                   	inc    edx
c0002155:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002158:	39 ca                	cmp    edx,ecx
c000215a:	75 e0                	jne    c000213c <make_rand+0xd>
c000215c:	5b                   	pop    ebx
c000215d:	5e                   	pop    esi
c000215e:	c3                   	ret    

c000215f <validate>:
c000215f:	56                   	push   esi
c0002160:	53                   	push   ebx
c0002161:	89 d6                	mov    esi,edx
c0002163:	51                   	push   ecx
c0002164:	85 c0                	test   eax,eax
c0002166:	75 09                	jne    c0002171 <validate+0x12>
c0002168:	b8 09 00 00 00       	mov    eax,0x9
c000216d:	31 c9                	xor    ecx,ecx
c000216f:	eb 2f                	jmp    c00021a0 <validate+0x41>
c0002171:	89 c3                	mov    ebx,eax
c0002173:	8b 00                	mov    eax,DWORD PTR [eax]
c0002175:	85 c0                	test   eax,eax
c0002177:	74 ef                	je     c0002168 <validate+0x9>
c0002179:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000217c:	74 ea                	je     c0002168 <validate+0x9>
c000217e:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002182:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002186:	75 e0                	jne    c0002168 <validate+0x9>
c0002188:	83 ec 0c             	sub    esp,0xc
c000218b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000218f:	50                   	push   eax
c0002190:	e8 76 f8 ff ff       	call   c0001a0b <disk_status>
c0002195:	83 c4 10             	add    esp,0x10
c0002198:	a8 01                	test   al,0x1
c000219a:	75 cc                	jne    c0002168 <validate+0x9>
c000219c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000219e:	31 c0                	xor    eax,eax
c00021a0:	89 0e                	mov    DWORD PTR [esi],ecx
c00021a2:	5a                   	pop    edx
c00021a3:	5b                   	pop    ebx
c00021a4:	5e                   	pop    esi
c00021a5:	c3                   	ret    

c00021a6 <sync_window>:
c00021a6:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021aa:	0f 84 85 00 00 00    	je     c0002235 <sync_window+0x8f>
c00021b0:	55                   	push   ebp
c00021b1:	8d 68 54             	lea    ebp,[eax+0x54]
c00021b4:	57                   	push   edi
c00021b5:	56                   	push   esi
c00021b6:	53                   	push   ebx
c00021b7:	89 c3                	mov    ebx,eax
c00021b9:	83 ec 28             	sub    esp,0x28
c00021bc:	6a 01                	push   0x1
c00021be:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021c1:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021c4:	55                   	push   ebp
c00021c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021c9:	50                   	push   eax
c00021ca:	e8 58 f8 ff ff       	call   c0001a27 <disk_write>
c00021cf:	83 c4 20             	add    esp,0x20
c00021d2:	ba 01 00 00 00       	mov    edx,0x1
c00021d7:	85 c0                	test   eax,eax
c00021d9:	75 50                	jne    c000222b <sync_window+0x85>
c00021db:	31 ff                	xor    edi,edi
c00021dd:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021e0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021e4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021e8:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021eb:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021ee:	89 c6                	mov    esi,eax
c00021f0:	89 d7                	mov    edi,edx
c00021f2:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021f5:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021f9:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021fc:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002200:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002204:	73 23                	jae    c0002229 <sync_window+0x83>
c0002206:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000220a:	75 1d                	jne    c0002229 <sync_window+0x83>
c000220c:	83 ec 0c             	sub    esp,0xc
c000220f:	6a 01                	push   0x1
c0002211:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002215:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002219:	52                   	push   edx
c000221a:	50                   	push   eax
c000221b:	55                   	push   ebp
c000221c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002220:	50                   	push   eax
c0002221:	e8 01 f8 ff ff       	call   c0001a27 <disk_write>
c0002226:	83 c4 20             	add    esp,0x20
c0002229:	31 d2                	xor    edx,edx
c000222b:	83 c4 1c             	add    esp,0x1c
c000222e:	89 d0                	mov    eax,edx
c0002230:	5b                   	pop    ebx
c0002231:	5e                   	pop    esi
c0002232:	5f                   	pop    edi
c0002233:	5d                   	pop    ebp
c0002234:	c3                   	ret    
c0002235:	31 d2                	xor    edx,edx
c0002237:	89 d0                	mov    eax,edx
c0002239:	c3                   	ret    

c000223a <move_window>:
c000223a:	56                   	push   esi
c000223b:	53                   	push   ebx
c000223c:	89 c3                	mov    ebx,eax
c000223e:	83 ec 14             	sub    esp,0x14
c0002241:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002244:	75 07                	jne    c000224d <move_window+0x13>
c0002246:	31 f6                	xor    esi,esi
c0002248:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000224b:	74 59                	je     c00022a6 <move_window+0x6c>
c000224d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002251:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002255:	89 d8                	mov    eax,ebx
c0002257:	e8 4a ff ff ff       	call   c00021a6 <sync_window>
c000225c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002260:	89 c6                	mov    esi,eax
c0002262:	85 c0                	test   eax,eax
c0002264:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002268:	75 3c                	jne    c00022a6 <move_window+0x6c>
c000226a:	83 ec 0c             	sub    esp,0xc
c000226d:	8d 43 54             	lea    eax,[ebx+0x54]
c0002270:	6a 01                	push   0x1
c0002272:	51                   	push   ecx
c0002273:	52                   	push   edx
c0002274:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002278:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000227c:	50                   	push   eax
c000227d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002281:	50                   	push   eax
c0002282:	e8 8a f7 ff ff       	call   c0001a11 <disk_read>
c0002287:	83 c4 20             	add    esp,0x20
c000228a:	85 c0                	test   eax,eax
c000228c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002290:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002294:	74 0a                	je     c00022a0 <move_window+0x66>
c0002296:	83 ca ff             	or     edx,0xffffffff
c0002299:	be 01 00 00 00       	mov    esi,0x1
c000229e:	89 d1                	mov    ecx,edx
c00022a0:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00022a3:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00022a6:	89 f0                	mov    eax,esi
c00022a8:	83 c4 14             	add    esp,0x14
c00022ab:	5b                   	pop    ebx
c00022ac:	5e                   	pop    esi
c00022ad:	c3                   	ret    

c00022ae <check_fs>:
c00022ae:	53                   	push   ebx
c00022af:	89 c3                	mov    ebx,eax
c00022b1:	83 ec 08             	sub    esp,0x8
c00022b4:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022b8:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022bf:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022c6:	e8 6f ff ff ff       	call   c000223a <move_window>
c00022cb:	ba 04 00 00 00       	mov    edx,0x4
c00022d0:	85 c0                	test   eax,eax
c00022d2:	0f 85 89 00 00 00    	jne    c0002361 <check_fs+0xb3>
c00022d8:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022de:	e8 79 f7 ff ff       	call   c0001a5c <ld_word>
c00022e3:	ba 03 00 00 00       	mov    edx,0x3
c00022e8:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ec:	75 73                	jne    c0002361 <check_fs+0xb3>
c00022ee:	ba 20 82 02 c0       	mov    edx,0xc0028220
c00022f3:	8d 43 54             	lea    eax,[ebx+0x54]
c00022f6:	b9 0b 00 00 00       	mov    ecx,0xb
c00022fb:	e8 fb f7 ff ff       	call   c0001afb <mem_cmp>
c0002300:	ba 01 00 00 00       	mov    edx,0x1
c0002305:	85 c0                	test   eax,eax
c0002307:	74 58                	je     c0002361 <check_fs+0xb3>
c0002309:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000230c:	8d 50 18             	lea    edx,[eax+0x18]
c000230f:	80 fa 01             	cmp    dl,0x1
c0002312:	76 09                	jbe    c000231d <check_fs+0x6f>
c0002314:	ba 02 00 00 00       	mov    edx,0x2
c0002319:	3c eb                	cmp    al,0xeb
c000231b:	75 44                	jne    c0002361 <check_fs+0xb3>
c000231d:	ba 28 b3 02 c0       	mov    edx,0xc002b328
c0002322:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002328:	b9 03 00 00 00       	mov    ecx,0x3
c000232d:	e8 c9 f7 ff ff       	call   c0001afb <mem_cmp>
c0002332:	31 d2                	xor    edx,edx
c0002334:	85 c0                	test   eax,eax
c0002336:	74 29                	je     c0002361 <check_fs+0xb3>
c0002338:	ba 2c 82 02 c0       	mov    edx,0xc002822c
c000233d:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002343:	b9 05 00 00 00       	mov    ecx,0x5
c0002348:	e8 ae f7 ff ff       	call   c0001afb <mem_cmp>
c000234d:	31 d2                	xor    edx,edx
c000234f:	85 c0                	test   eax,eax
c0002351:	74 0e                	je     c0002361 <check_fs+0xb3>
c0002353:	31 d2                	xor    edx,edx
c0002355:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000235c:	0f 95 c2             	setne  dl
c000235f:	01 d2                	add    edx,edx
c0002361:	89 d0                	mov    eax,edx
c0002363:	83 c4 08             	add    esp,0x8
c0002366:	5b                   	pop    ebx
c0002367:	c3                   	ret    

c0002368 <find_volume>:
c0002368:	55                   	push   ebp
c0002369:	31 c9                	xor    ecx,ecx
c000236b:	57                   	push   edi
c000236c:	56                   	push   esi
c000236d:	89 d6                	mov    esi,edx
c000236f:	53                   	push   ebx
c0002370:	31 d2                	xor    edx,edx
c0002372:	83 ec 3c             	sub    esp,0x3c
c0002375:	89 c3                	mov    ebx,eax
c0002377:	e8 32 ff ff ff       	call   c00022ae <check_fs>
c000237c:	83 f8 02             	cmp    eax,0x2
c000237f:	74 0e                	je     c000238f <find_volume+0x27>
c0002381:	0f 87 5d 01 00 00    	ja     c00024e4 <find_volume+0x17c>
c0002387:	85 f6                	test   esi,esi
c0002389:	0f 84 55 01 00 00    	je     c00024e4 <find_volume+0x17c>
c000238f:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002396:	0f 85 dd 00 00 00    	jne    c0002479 <find_volume+0x111>
c000239c:	31 c9                	xor    ecx,ecx
c000239e:	ba 01 00 00 00       	mov    edx,0x1
c00023a3:	89 d8                	mov    eax,ebx
c00023a5:	e8 90 fe ff ff       	call   c000223a <move_window>
c00023aa:	85 c0                	test   eax,eax
c00023ac:	74 0a                	je     c00023b8 <find_volume+0x50>
c00023ae:	b8 04 00 00 00       	mov    eax,0x4
c00023b3:	e9 2c 01 00 00       	jmp    c00024e4 <find_volume+0x17c>
c00023b8:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023bb:	89 e8                	mov    eax,ebp
c00023bd:	e8 f6 fc ff ff       	call   c00020b8 <test_gpt_header>
c00023c2:	85 c0                	test   eax,eax
c00023c4:	75 0a                	jne    c00023d0 <find_volume+0x68>
c00023c6:	b8 03 00 00 00       	mov    eax,0x3
c00023cb:	e9 14 01 00 00       	jmp    c00024e4 <find_volume+0x17c>
c00023d0:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023d6:	e8 8e f6 ff ff       	call   c0001a69 <ld_dword>
c00023db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023df:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023e5:	e8 97 f6 ff ff       	call   c0001a81 <ld_qword>
c00023ea:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023f6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002402:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002406:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000240a:	74 ba                	je     c00023c6 <find_volume+0x5e>
c000240c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002410:	31 c9                	xor    ecx,ecx
c0002412:	c1 e7 07             	shl    edi,0x7
c0002415:	89 d8                	mov    eax,ebx
c0002417:	89 fa                	mov    edx,edi
c0002419:	c1 ea 09             	shr    edx,0x9
c000241c:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002420:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002424:	e8 11 fe ff ff       	call   c000223a <move_window>
c0002429:	85 c0                	test   eax,eax
c000242b:	75 81                	jne    c00023ae <find_volume+0x46>
c000242d:	81 e7 80 01 00 00    	and    edi,0x180
c0002433:	b9 10 00 00 00       	mov    ecx,0x10
c0002438:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000243c:	ba 10 82 02 c0       	mov    edx,0xc0028210
c0002441:	e8 b5 f6 ff ff       	call   c0001afb <mem_cmp>
c0002446:	85 c0                	test   eax,eax
c0002448:	75 29                	jne    c0002473 <find_volume+0x10b>
c000244a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000244e:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002452:	e8 2a f6 ff ff       	call   c0001a81 <ld_qword>
c0002457:	89 d1                	mov    ecx,edx
c0002459:	89 c2                	mov    edx,eax
c000245b:	89 d8                	mov    eax,ebx
c000245d:	e8 4c fe ff ff       	call   c00022ae <check_fs>
c0002462:	85 f6                	test   esi,esi
c0002464:	75 07                	jne    c000246d <find_volume+0x105>
c0002466:	83 f8 01             	cmp    eax,0x1
c0002469:	77 08                	ja     c0002473 <find_volume+0x10b>
c000246b:	eb 77                	jmp    c00024e4 <find_volume+0x17c>
c000246d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002471:	74 71                	je     c00024e4 <find_volume+0x17c>
c0002473:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002477:	eb 89                	jmp    c0002402 <find_volume+0x9a>
c0002479:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000247d:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002483:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002489:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000248d:	89 cd                	mov    ebp,ecx
c000248f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002493:	89 f8                	mov    eax,edi
c0002495:	83 c7 10             	add    edi,0x10
c0002498:	e8 cc f5 ff ff       	call   c0001a69 <ld_dword>
c000249d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00024a1:	89 01                	mov    DWORD PTR [ecx],eax
c00024a3:	83 c1 04             	add    ecx,0x4
c00024a6:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00024aa:	75 e3                	jne    c000248f <find_volume+0x127>
c00024ac:	31 ff                	xor    edi,edi
c00024ae:	85 f6                	test   esi,esi
c00024b0:	74 03                	je     c00024b5 <find_volume+0x14d>
c00024b2:	8d 7e ff             	lea    edi,[esi-0x1]
c00024b5:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024b9:	85 d2                	test   edx,edx
c00024bb:	74 14                	je     c00024d1 <find_volume+0x169>
c00024bd:	31 c9                	xor    ecx,ecx
c00024bf:	89 d8                	mov    eax,ebx
c00024c1:	e8 e8 fd ff ff       	call   c00022ae <check_fs>
c00024c6:	83 f8 01             	cmp    eax,0x1
c00024c9:	76 19                	jbe    c00024e4 <find_volume+0x17c>
c00024cb:	85 f6                	test   esi,esi
c00024cd:	74 0f                	je     c00024de <find_volume+0x176>
c00024cf:	eb 13                	jmp    c00024e4 <find_volume+0x17c>
c00024d1:	85 f6                	test   esi,esi
c00024d3:	0f 85 ed fe ff ff    	jne    c00023c6 <find_volume+0x5e>
c00024d9:	b8 03 00 00 00       	mov    eax,0x3
c00024de:	47                   	inc    edi
c00024df:	83 ff 03             	cmp    edi,0x3
c00024e2:	76 d1                	jbe    c00024b5 <find_volume+0x14d>
c00024e4:	83 c4 3c             	add    esp,0x3c
c00024e7:	5b                   	pop    ebx
c00024e8:	5e                   	pop    esi
c00024e9:	5f                   	pop    edi
c00024ea:	5d                   	pop    ebp
c00024eb:	c3                   	ret    

c00024ec <mount_volume>:
c00024ec:	55                   	push   ebp
c00024ed:	57                   	push   edi
c00024ee:	89 cf                	mov    edi,ecx
c00024f0:	56                   	push   esi
c00024f1:	53                   	push   ebx
c00024f2:	bb 0b 00 00 00       	mov    ebx,0xb
c00024f7:	83 ec 3c             	sub    esp,0x3c
c00024fa:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002500:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002504:	e8 35 fb ff ff       	call   c000203e <get_ldnumber>
c0002509:	85 c0                	test   eax,eax
c000250b:	0f 88 3a 05 00 00    	js     c0002a4b <mount_volume+0x55f>
c0002511:	8b 2c 85 60 ce 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd31a0]
c0002518:	89 c6                	mov    esi,eax
c000251a:	bb 0c 00 00 00       	mov    ebx,0xc
c000251f:	85 ed                	test   ebp,ebp
c0002521:	0f 84 24 05 00 00    	je     c0002a4b <mount_volume+0x55f>
c0002527:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000252b:	83 e7 fe             	and    edi,0xfffffffe
c000252e:	89 2a                	mov    DWORD PTR [edx],ebp
c0002530:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002534:	74 32                	je     c0002568 <mount_volume+0x7c>
c0002536:	83 ec 0c             	sub    esp,0xc
c0002539:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000253d:	50                   	push   eax
c000253e:	e8 c8 f4 ff ff       	call   c0001a0b <disk_status>
c0002543:	83 c4 10             	add    esp,0x10
c0002546:	a8 01                	test   al,0x1
c0002548:	75 1e                	jne    c0002568 <mount_volume+0x7c>
c000254a:	31 db                	xor    ebx,ebx
c000254c:	89 f9                	mov    ecx,edi
c000254e:	84 c9                	test   cl,cl
c0002550:	0f 84 f5 04 00 00    	je     c0002a4b <mount_volume+0x55f>
c0002556:	a8 04                	test   al,0x4
c0002558:	0f 84 ed 04 00 00    	je     c0002a4b <mount_volume+0x55f>
c000255e:	bb 0a 00 00 00       	mov    ebx,0xa
c0002563:	e9 e3 04 00 00       	jmp    c0002a4b <mount_volume+0x55f>
c0002568:	83 ec 0c             	sub    esp,0xc
c000256b:	89 f0                	mov    eax,esi
c000256d:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002571:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002574:	0f b6 f0             	movzx  esi,al
c0002577:	bb 03 00 00 00       	mov    ebx,0x3
c000257c:	56                   	push   esi
c000257d:	e8 8c f4 ff ff       	call   c0001a0e <disk_initialize>
c0002582:	83 c4 10             	add    esp,0x10
c0002585:	a8 01                	test   al,0x1
c0002587:	0f 85 be 04 00 00    	jne    c0002a4b <mount_volume+0x55f>
c000258d:	89 f9                	mov    ecx,edi
c000258f:	84 c9                	test   cl,cl
c0002591:	74 04                	je     c0002597 <mount_volume+0xab>
c0002593:	a8 04                	test   al,0x4
c0002595:	75 c7                	jne    c000255e <mount_volume+0x72>
c0002597:	31 d2                	xor    edx,edx
c0002599:	89 e8                	mov    eax,ebp
c000259b:	e8 c8 fd ff ff       	call   c0002368 <find_volume>
c00025a0:	83 f8 04             	cmp    eax,0x4
c00025a3:	75 0a                	jne    c00025af <mount_volume+0xc3>
c00025a5:	bb 01 00 00 00       	mov    ebx,0x1
c00025aa:	e9 9c 04 00 00       	jmp    c0002a4b <mount_volume+0x55f>
c00025af:	83 f8 01             	cmp    eax,0x1
c00025b2:	76 0a                	jbe    c00025be <mount_volume+0xd2>
c00025b4:	bb 0d 00 00 00       	mov    ebx,0xd
c00025b9:	e9 8d 04 00 00       	jmp    c0002a4b <mount_volume+0x55f>
c00025be:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025c1:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025cc:	75 17                	jne    c00025e5 <mount_volume+0xf9>
c00025ce:	b8 0b 00 00 00       	mov    eax,0xb
c00025d3:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025d8:	75 da                	jne    c00025b4 <mount_volume+0xc8>
c00025da:	40                   	inc    eax
c00025db:	83 f8 40             	cmp    eax,0x40
c00025de:	75 f3                	jne    c00025d3 <mount_volume+0xe7>
c00025e0:	e9 5a 02 00 00       	jmp    c000283f <mount_volume+0x353>
c00025e5:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025e8:	e8 6f f4 ff ff       	call   c0001a5c <ld_word>
c00025ed:	66 3d 00 02          	cmp    ax,0x200
c00025f1:	75 c1                	jne    c00025b4 <mount_volume+0xc8>
c00025f3:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025f6:	e8 61 f4 ff ff       	call   c0001a5c <ld_word>
c00025fb:	0f b7 c0             	movzx  eax,ax
c00025fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002602:	85 c0                	test   eax,eax
c0002604:	75 0c                	jne    c0002612 <mount_volume+0x126>
c0002606:	8d 45 78             	lea    eax,[ebp+0x78]
c0002609:	e8 5b f4 ff ff       	call   c0001a69 <ld_dword>
c000260e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002616:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002619:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000261c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002620:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002623:	48                   	dec    eax
c0002624:	3c 01                	cmp    al,0x1
c0002626:	77 8c                	ja     c00025b4 <mount_volume+0xc8>
c0002628:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000262c:	89 c3                	mov    ebx,eax
c000262e:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002632:	66 85 c0             	test   ax,ax
c0002635:	0f 84 79 ff ff ff    	je     c00025b4 <mount_volume+0xc8>
c000263b:	8d 40 ff             	lea    eax,[eax-0x1]
c000263e:	85 d8                	test   eax,ebx
c0002640:	0f 85 6e ff ff ff    	jne    c00025b4 <mount_volume+0xc8>
c0002646:	8d 45 65             	lea    eax,[ebp+0x65]
c0002649:	e8 0e f4 ff ff       	call   c0001a5c <ld_word>
c000264e:	89 c7                	mov    edi,eax
c0002650:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002654:	a8 0f                	test   al,0xf
c0002656:	0f 85 58 ff ff ff    	jne    c00025b4 <mount_volume+0xc8>
c000265c:	8d 45 67             	lea    eax,[ebp+0x67]
c000265f:	e8 f8 f3 ff ff       	call   c0001a5c <ld_word>
c0002664:	0f b7 f0             	movzx  esi,ax
c0002667:	85 f6                	test   esi,esi
c0002669:	75 0a                	jne    c0002675 <mount_volume+0x189>
c000266b:	8d 45 74             	lea    eax,[ebp+0x74]
c000266e:	e8 f6 f3 ff ff       	call   c0001a69 <ld_dword>
c0002673:	89 c6                	mov    esi,eax
c0002675:	8d 45 62             	lea    eax,[ebp+0x62]
c0002678:	e8 df f3 ff ff       	call   c0001a5c <ld_word>
c000267d:	66 85 c0             	test   ax,ax
c0002680:	0f 84 2e ff ff ff    	je     c00025b4 <mount_volume+0xc8>
c0002686:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000268b:	0f b7 c8             	movzx  ecx,ax
c000268e:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002693:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002697:	89 fa                	mov    edx,edi
c0002699:	66 c1 ea 04          	shr    dx,0x4
c000269d:	0f b7 d2             	movzx  edx,dx
c00026a0:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00026a4:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00026a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00026ab:	39 c6                	cmp    esi,eax
c00026ad:	0f 82 01 ff ff ff    	jb     c00025b4 <mount_volume+0xc8>
c00026b3:	29 c6                	sub    esi,eax
c00026b5:	31 d2                	xor    edx,edx
c00026b7:	89 f0                	mov    eax,esi
c00026b9:	f7 f3                	div    ebx
c00026bb:	39 de                	cmp    esi,ebx
c00026bd:	0f 82 f1 fe ff ff    	jb     c00025b4 <mount_volume+0xc8>
c00026c3:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026c8:	0f 87 e6 fe ff ff    	ja     c00025b4 <mount_volume+0xc8>
c00026ce:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026d3:	0f 86 63 03 00 00    	jbe    c0002a3c <mount_volume+0x550>
c00026d9:	bb 03 00 00 00       	mov    ebx,0x3
c00026de:	8d 70 02             	lea    esi,[eax+0x2]
c00026e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026e9:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026ec:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026ef:	31 d2                	xor    edx,edx
c00026f1:	89 c8                	mov    eax,ecx
c00026f3:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026f6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026fa:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002706:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002709:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000270c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002710:	31 d2                	xor    edx,edx
c0002712:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002716:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000271a:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000271d:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	75 2b                	jne    c0002750 <mount_volume+0x264>
c0002725:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002728:	e8 2f f3 ff ff       	call   c0001a5c <ld_word>
c000272d:	66 09 c7             	or     di,ax
c0002730:	0f 85 7e fe ff ff    	jne    c00025b4 <mount_volume+0xc8>
c0002736:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000273c:	c1 e6 02             	shl    esi,0x2
c000273f:	e8 25 f3 ff ff       	call   c0001a69 <ld_dword>
c0002744:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000274b:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000274e:	eb 30                	jmp    c0002780 <mount_volume+0x294>
c0002750:	66 85 ff             	test   di,di
c0002753:	0f 84 5b fe ff ff    	je     c00025b4 <mount_volume+0xc8>
c0002759:	31 d2                	xor    edx,edx
c000275b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000275f:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002763:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002767:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000276a:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000276d:	83 fb 02             	cmp    ebx,0x2
c0002770:	75 04                	jne    c0002776 <mount_volume+0x28a>
c0002772:	01 f6                	add    esi,esi
c0002774:	eb 0a                	jmp    c0002780 <mount_volume+0x294>
c0002776:	8d 04 76             	lea    eax,[esi+esi*2]
c0002779:	83 e6 01             	and    esi,0x1
c000277c:	d1 e8                	shr    eax,1
c000277e:	01 c6                	add    esi,eax
c0002780:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002786:	c1 ee 09             	shr    esi,0x9
c0002789:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000278d:	0f 87 21 fe ff ff    	ja     c00025b4 <mount_volume+0xc8>
c0002793:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000279a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00027a1:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00027a5:	83 fb 03             	cmp    ebx,0x3
c00027a8:	75 7a                	jne    c0002824 <mount_volume+0x338>
c00027aa:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00027b0:	e8 a7 f2 ff ff       	call   c0001a5c <ld_word>
c00027b5:	66 48                	dec    ax
c00027b7:	75 6b                	jne    c0002824 <mount_volume+0x338>
c00027b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027c1:	83 c2 01             	add    edx,0x1
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	83 d1 00             	adc    ecx,0x0
c00027c9:	e8 6c fa ff ff       	call   c000223a <move_window>
c00027ce:	85 c0                	test   eax,eax
c00027d0:	75 52                	jne    c0002824 <mount_volume+0x338>
c00027d2:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027d6:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027dc:	e8 7b f2 ff ff       	call   c0001a5c <ld_word>
c00027e1:	66 3d 55 aa          	cmp    ax,0xaa55
c00027e5:	75 3d                	jne    c0002824 <mount_volume+0x338>
c00027e7:	8d 45 54             	lea    eax,[ebp+0x54]
c00027ea:	e8 7a f2 ff ff       	call   c0001a69 <ld_dword>
c00027ef:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027f4:	75 2e                	jne    c0002824 <mount_volume+0x338>
c00027f6:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027fc:	e8 68 f2 ff ff       	call   c0001a69 <ld_dword>
c0002801:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002806:	75 1c                	jne    c0002824 <mount_volume+0x338>
c0002808:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000280e:	e8 56 f2 ff ff       	call   c0001a69 <ld_dword>
c0002813:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002816:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000281c:	e8 48 f2 ff ff       	call   c0001a69 <ld_dword>
c0002821:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002824:	66 a1 40 ce 02 c0    	mov    ax,ds:0xc002ce40
c000282a:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000282d:	40                   	inc    eax
c000282e:	31 db                	xor    ebx,ebx
c0002830:	66 a3 40 ce 02 c0    	mov    ds:0xc002ce40,ax
c0002836:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000283a:	e9 0c 02 00 00       	jmp    c0002a4b <mount_volume+0x55f>
c000283f:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002845:	e8 12 f2 ff ff       	call   c0001a5c <ld_word>
c000284a:	66 3d 00 01          	cmp    ax,0x100
c000284e:	0f 85 60 fd ff ff    	jne    c00025b4 <mount_volume+0xc8>
c0002854:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000285b:	0f 85 53 fd ff ff    	jne    c00025b4 <mount_volume+0xc8>
c0002861:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002867:	e8 15 f2 ff ff       	call   c0001a81 <ld_qword>
c000286c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002870:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002874:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000287a:	e8 ea f1 ff ff       	call   c0001a69 <ld_dword>
c000287f:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002882:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002888:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000288b:	fe c8                	dec    al
c000288d:	0f 85 21 fd ff ff    	jne    c00025b4 <mount_volume+0xc8>
c0002893:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000289a:	bb 01 00 00 00       	mov    ebx,0x1
c000289f:	d3 e3                	shl    ebx,cl
c00028a1:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00028a5:	66 85 db             	test   bx,bx
c00028a8:	0f 84 06 fd ff ff    	je     c00025b4 <mount_volume+0xc8>
c00028ae:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028b4:	e8 b0 f1 ff ff       	call   c0001a69 <ld_dword>
c00028b9:	89 c6                	mov    esi,eax
c00028bb:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028c0:	0f 87 ee fc ff ff    	ja     c00025b4 <mount_volume+0xc8>
c00028c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ca:	8d 40 02             	lea    eax,[eax+0x2]
c00028cd:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028d0:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028d7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028da:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028e0:	e8 84 f1 ff ff       	call   c0001a69 <ld_dword>
c00028e5:	31 d2                	xor    edx,edx
c00028e7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028eb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028f3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028f7:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028fa:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028fd:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002903:	e8 61 f1 ff ff       	call   c0001a69 <ld_dword>
c0002908:	31 d2                	xor    edx,edx
c000290a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000290e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002912:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002916:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002919:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000291c:	0f b7 c3             	movzx  eax,bx
c000291f:	31 d2                	xor    edx,edx
c0002921:	0f af f0             	imul   esi,eax
c0002924:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002928:	89 f0                	mov    eax,esi
c000292a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000292e:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002932:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002936:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000293a:	39 c1                	cmp    ecx,eax
c000293c:	89 df                	mov    edi,ebx
c000293e:	19 d7                	sbb    edi,edx
c0002940:	0f 82 6e fc ff ff    	jb     c00025b4 <mount_volume+0xc8>
c0002946:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000294c:	31 db                	xor    ebx,ebx
c000294e:	e8 16 f1 ff ff       	call   c0001a69 <ld_dword>
c0002953:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000295a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000295d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002965:	85 db                	test   ebx,ebx
c0002967:	75 39                	jne    c00029a2 <mount_volume+0x4b6>
c0002969:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000296d:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002971:	0f 86 3d fc ff ff    	jbe    c00025b4 <mount_volume+0xc8>
c0002977:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000297a:	31 ff                	xor    edi,edi
c000297c:	89 e8                	mov    eax,ebp
c000297e:	e8 72 f3 ff ff       	call   c0001cf5 <clst2sect>
c0002983:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002987:	01 c6                	add    esi,eax
c0002989:	89 e8                	mov    eax,ebp
c000298b:	11 d7                	adc    edi,edx
c000298d:	89 f2                	mov    edx,esi
c000298f:	89 f9                	mov    ecx,edi
c0002991:	e8 a4 f8 ff ff       	call   c000223a <move_window>
c0002996:	85 c0                	test   eax,eax
c0002998:	0f 85 07 fc ff ff    	jne    c00025a5 <mount_volume+0xb9>
c000299e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00029a2:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00029a7:	74 0b                	je     c00029b4 <mount_volume+0x4c8>
c00029a9:	83 c3 20             	add    ebx,0x20
c00029ac:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00029b2:	eb b1                	jmp    c0002965 <mount_volume+0x479>
c00029b4:	8d 75 54             	lea    esi,[ebp+0x54]
c00029b7:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029bb:	e8 a9 f0 ff ff       	call   c0001a69 <ld_dword>
c00029c0:	89 c3                	mov    ebx,eax
c00029c2:	83 f8 01             	cmp    eax,0x1
c00029c5:	0f 86 e9 fb ff ff    	jbe    c00025b4 <mount_volume+0xc8>
c00029cb:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029ce:	0f 86 e0 fb ff ff    	jbe    c00025b4 <mount_volume+0xc8>
c00029d4:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029d7:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029db:	0f af c2             	imul   eax,edx
c00029de:	31 d2                	xor    edx,edx
c00029e0:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029e3:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029e6:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029e9:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029ec:	31 c9                	xor    ecx,ecx
c00029ee:	89 da                	mov    edx,ebx
c00029f0:	89 e8                	mov    eax,ebp
c00029f2:	c1 ea 07             	shr    edx,0x7
c00029f5:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029f8:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029fb:	e8 3a f8 ff ff       	call   c000223a <move_window>
c0002a00:	85 c0                	test   eax,eax
c0002a02:	0f 85 9d fb ff ff    	jne    c00025a5 <mount_volume+0xb9>
c0002a08:	89 d8                	mov    eax,ebx
c0002a0a:	83 e0 7f             	and    eax,0x7f
c0002a0d:	8d 04 86             	lea    eax,[esi+eax*4]
c0002a10:	e8 54 f0 ff ff       	call   c0001a69 <ld_dword>
c0002a15:	83 f8 ff             	cmp    eax,0xffffffff
c0002a18:	74 0a                	je     c0002a24 <mount_volume+0x538>
c0002a1a:	43                   	inc    ebx
c0002a1b:	39 d8                	cmp    eax,ebx
c0002a1d:	74 cd                	je     c00029ec <mount_volume+0x500>
c0002a1f:	e9 90 fb ff ff       	jmp    c00025b4 <mount_volume+0xc8>
c0002a24:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a2b:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a32:	bb 04 00 00 00       	mov    ebx,0x4
c0002a37:	e9 e8 fd ff ff       	jmp    c0002824 <mount_volume+0x338>
c0002a3c:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a41:	19 db                	sbb    ebx,ebx
c0002a43:	83 c3 02             	add    ebx,0x2
c0002a46:	e9 93 fc ff ff       	jmp    c00026de <mount_volume+0x1f2>
c0002a4b:	83 c4 3c             	add    esp,0x3c
c0002a4e:	89 d8                	mov    eax,ebx
c0002a50:	5b                   	pop    ebx
c0002a51:	5e                   	pop    esi
c0002a52:	5f                   	pop    edi
c0002a53:	5d                   	pop    ebp
c0002a54:	c3                   	ret    

c0002a55 <find_bitmap>:
c0002a55:	55                   	push   ebp
c0002a56:	57                   	push   edi
c0002a57:	89 c7                	mov    edi,eax
c0002a59:	56                   	push   esi
c0002a5a:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a5d:	53                   	push   ebx
c0002a5e:	83 ec 1c             	sub    esp,0x1c
c0002a61:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a64:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a68:	83 e8 02             	sub    eax,0x2
c0002a6b:	39 f0                	cmp    eax,esi
c0002a6d:	77 02                	ja     c0002a71 <find_bitmap+0x1c>
c0002a6f:	31 f6                	xor    esi,esi
c0002a71:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a75:	89 f3                	mov    ebx,esi
c0002a77:	31 ed                	xor    ebp,ebp
c0002a79:	31 c9                	xor    ecx,ecx
c0002a7b:	89 da                	mov    edx,ebx
c0002a7d:	89 f8                	mov    eax,edi
c0002a7f:	c1 ea 0c             	shr    edx,0xc
c0002a82:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a85:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a88:	e8 ad f7 ff ff       	call   c000223a <move_window>
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	75 68                	jne    c0002af9 <find_bitmap+0xa4>
c0002a91:	89 da                	mov    edx,ebx
c0002a93:	89 d9                	mov    ecx,ebx
c0002a95:	c1 ea 03             	shr    edx,0x3
c0002a98:	83 e1 07             	and    ecx,0x7
c0002a9b:	b8 01 00 00 00       	mov    eax,0x1
c0002aa0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002aa6:	d3 e0                	shl    eax,cl
c0002aa8:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002aab:	83 e9 02             	sub    ecx,0x2
c0002aae:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ab2:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002ab6:	43                   	inc    ebx
c0002ab7:	21 c1                	and    ecx,eax
c0002ab9:	d1 e0                	shl    eax,1
c0002abb:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002abf:	77 09                	ja     c0002aca <find_bitmap+0x75>
c0002ac1:	31 db                	xor    ebx,ebx
c0002ac3:	ba 00 02 00 00       	mov    edx,0x200
c0002ac8:	31 c0                	xor    eax,eax
c0002aca:	84 c9                	test   cl,cl
c0002acc:	75 10                	jne    c0002ade <find_bitmap+0x89>
c0002ace:	45                   	inc    ebp
c0002acf:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ad3:	75 0f                	jne    c0002ae4 <find_bitmap+0x8f>
c0002ad5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ad9:	83 c0 02             	add    eax,0x2
c0002adc:	eb 22                	jmp    c0002b00 <find_bitmap+0xab>
c0002ade:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ae2:	31 ed                	xor    ebp,ebp
c0002ae4:	39 de                	cmp    esi,ebx
c0002ae6:	74 16                	je     c0002afe <find_bitmap+0xa9>
c0002ae8:	84 c0                	test   al,al
c0002aea:	75 c6                	jne    c0002ab2 <find_bitmap+0x5d>
c0002aec:	42                   	inc    edx
c0002aed:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002af3:	77 84                	ja     c0002a79 <find_bitmap+0x24>
c0002af5:	b0 01                	mov    al,0x1
c0002af7:	eb b9                	jmp    c0002ab2 <find_bitmap+0x5d>
c0002af9:	83 c8 ff             	or     eax,0xffffffff
c0002afc:	eb 02                	jmp    c0002b00 <find_bitmap+0xab>
c0002afe:	31 c0                	xor    eax,eax
c0002b00:	83 c4 1c             	add    esp,0x1c
c0002b03:	5b                   	pop    ebx
c0002b04:	5e                   	pop    esi
c0002b05:	5f                   	pop    edi
c0002b06:	5d                   	pop    ebp
c0002b07:	c3                   	ret    

c0002b08 <change_bitmap>:
c0002b08:	55                   	push   ebp
c0002b09:	89 cd                	mov    ebp,ecx
c0002b0b:	57                   	push   edi
c0002b0c:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002b0f:	56                   	push   esi
c0002b10:	89 c7                	mov    edi,eax
c0002b12:	53                   	push   ebx
c0002b13:	89 c8                	mov    eax,ecx
c0002b15:	83 ec 1c             	sub    esp,0x1c
c0002b18:	31 d2                	xor    edx,edx
c0002b1a:	89 ce                	mov    esi,ecx
c0002b1c:	c1 e8 0c             	shr    eax,0xc
c0002b1f:	bb 01 00 00 00       	mov    ebx,0x1
c0002b24:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b27:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b2a:	c1 ee 03             	shr    esi,0x3
c0002b2d:	83 e1 07             	and    ecx,0x7
c0002b30:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b36:	d3 e3                	shl    ebx,cl
c0002b38:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b3c:	89 c1                	mov    ecx,eax
c0002b3e:	89 d3                	mov    ebx,edx
c0002b40:	83 c1 01             	add    ecx,0x1
c0002b43:	83 d3 00             	adc    ebx,0x0
c0002b46:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b4a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b4e:	89 d1                	mov    ecx,edx
c0002b50:	89 c2                	mov    edx,eax
c0002b52:	89 f8                	mov    eax,edi
c0002b54:	e8 e1 f6 ff ff       	call   c000223a <move_window>
c0002b59:	89 c1                	mov    ecx,eax
c0002b5b:	85 c0                	test   eax,eax
c0002b5d:	75 48                	jne    c0002ba7 <change_bitmap+0x9f>
c0002b5f:	31 d2                	xor    edx,edx
c0002b61:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b65:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b69:	0f 95 c2             	setne  dl
c0002b6c:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b70:	74 3c                	je     c0002bae <change_bitmap+0xa6>
c0002b72:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b76:	4d                   	dec    ebp
c0002b77:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b7b:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b7f:	74 32                	je     c0002bb3 <change_bitmap+0xab>
c0002b81:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b85:	75 d8                	jne    c0002b5f <change_bitmap+0x57>
c0002b87:	8d 46 01             	lea    eax,[esi+0x1]
c0002b8a:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b8f:	89 c3                	mov    ebx,eax
c0002b91:	31 f6                	xor    esi,esi
c0002b93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b9b:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ba1:	74 99                	je     c0002b3c <change_bitmap+0x34>
c0002ba3:	89 de                	mov    esi,ebx
c0002ba5:	eb b8                	jmp    c0002b5f <change_bitmap+0x57>
c0002ba7:	b9 01 00 00 00       	mov    ecx,0x1
c0002bac:	eb 05                	jmp    c0002bb3 <change_bitmap+0xab>
c0002bae:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb3:	83 c4 1c             	add    esp,0x1c
c0002bb6:	89 c8                	mov    eax,ecx
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <put_fat>:
c0002bbd:	83 fa 01             	cmp    edx,0x1
c0002bc0:	0f 86 7b 01 00 00    	jbe    c0002d41 <put_fat+0x184>
c0002bc6:	55                   	push   ebp
c0002bc7:	57                   	push   edi
c0002bc8:	89 cf                	mov    edi,ecx
c0002bca:	56                   	push   esi
c0002bcb:	b9 02 00 00 00       	mov    ecx,0x2
c0002bd0:	53                   	push   ebx
c0002bd1:	89 c6                	mov    esi,eax
c0002bd3:	83 ec 1c             	sub    esp,0x1c
c0002bd6:	89 d3                	mov    ebx,edx
c0002bd8:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bdb:	0f 86 68 01 00 00    	jbe    c0002d49 <put_fat+0x18c>
c0002be1:	8a 00                	mov    al,BYTE PTR [eax]
c0002be3:	3c 02                	cmp    al,0x2
c0002be5:	0f 84 c7 00 00 00    	je     c0002cb2 <put_fat+0xf5>
c0002beb:	77 09                	ja     c0002bf6 <put_fat+0x39>
c0002bed:	fe c8                	dec    al
c0002bef:	74 17                	je     c0002c08 <put_fat+0x4b>
c0002bf1:	e9 53 01 00 00       	jmp    c0002d49 <put_fat+0x18c>
c0002bf6:	b9 02 00 00 00       	mov    ecx,0x2
c0002bfb:	3c 04                	cmp    al,0x4
c0002bfd:	0f 86 e1 00 00 00    	jbe    c0002ce4 <put_fat+0x127>
c0002c03:	e9 41 01 00 00       	jmp    c0002d49 <put_fat+0x18c>
c0002c08:	89 d5                	mov    ebp,edx
c0002c0a:	31 c9                	xor    ecx,ecx
c0002c0c:	d1 ed                	shr    ebp,1
c0002c0e:	89 f0                	mov    eax,esi
c0002c10:	01 d5                	add    ebp,edx
c0002c12:	89 ea                	mov    edx,ebp
c0002c14:	c1 ea 09             	shr    edx,0x9
c0002c17:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c1a:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c1d:	e8 18 f6 ff ff       	call   c000223a <move_window>
c0002c22:	89 c1                	mov    ecx,eax
c0002c24:	85 c0                	test   eax,eax
c0002c26:	0f 85 1d 01 00 00    	jne    c0002d49 <put_fat+0x18c>
c0002c2c:	8d 46 54             	lea    eax,[esi+0x54]
c0002c2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c33:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c36:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c40:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c44:	89 f8                	mov    eax,edi
c0002c46:	83 e3 01             	and    ebx,0x1
c0002c49:	74 0d                	je     c0002c58 <put_fat+0x9b>
c0002c4b:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c4e:	89 fa                	mov    edx,edi
c0002c50:	83 e0 0f             	and    eax,0xf
c0002c53:	c1 e2 04             	shl    edx,0x4
c0002c56:	09 d0                	or     eax,edx
c0002c58:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c5b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c5f:	31 c9                	xor    ecx,ecx
c0002c61:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c65:	c1 ea 09             	shr    edx,0x9
c0002c68:	89 f0                	mov    eax,esi
c0002c6a:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c6d:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c70:	e8 c5 f5 ff ff       	call   c000223a <move_window>
c0002c75:	89 c1                	mov    ecx,eax
c0002c77:	85 c0                	test   eax,eax
c0002c79:	0f 85 ca 00 00 00    	jne    c0002d49 <put_fat+0x18c>
c0002c7f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c83:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c89:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c8d:	85 db                	test   ebx,ebx
c0002c8f:	74 07                	je     c0002c98 <put_fat+0xdb>
c0002c91:	c1 ef 04             	shr    edi,0x4
c0002c94:	89 fa                	mov    edx,edi
c0002c96:	eb 0e                	jmp    c0002ca6 <put_fat+0xe9>
c0002c98:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c9b:	c1 ef 08             	shr    edi,0x8
c0002c9e:	83 e2 f0             	and    edx,0xfffffff0
c0002ca1:	83 e7 0f             	and    edi,0xf
c0002ca4:	09 fa                	or     edx,edi
c0002ca6:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002ca9:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002cad:	e9 97 00 00 00       	jmp    c0002d49 <put_fat+0x18c>
c0002cb2:	31 c9                	xor    ecx,ecx
c0002cb4:	c1 ea 08             	shr    edx,0x8
c0002cb7:	89 f0                	mov    eax,esi
c0002cb9:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cbc:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cbf:	e8 76 f5 ff ff       	call   c000223a <move_window>
c0002cc4:	89 c1                	mov    ecx,eax
c0002cc6:	85 c0                	test   eax,eax
c0002cc8:	75 7f                	jne    c0002d49 <put_fat+0x18c>
c0002cca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cce:	01 db                	add    ebx,ebx
c0002cd0:	0f b7 d7             	movzx  edx,di
c0002cd3:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cd9:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cdd:	e8 ec ed ff ff       	call   c0001ace <st_word>
c0002ce2:	eb 53                	jmp    c0002d37 <put_fat+0x17a>
c0002ce4:	31 c9                	xor    ecx,ecx
c0002ce6:	c1 ea 07             	shr    edx,0x7
c0002ce9:	89 f0                	mov    eax,esi
c0002ceb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cee:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cf1:	e8 44 f5 ff ff       	call   c000223a <move_window>
c0002cf6:	89 c1                	mov    ecx,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	75 4d                	jne    c0002d49 <put_fat+0x18c>
c0002cfc:	c1 e3 02             	shl    ebx,0x2
c0002cff:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002d05:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002d08:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002d0c:	74 1c                	je     c0002d2a <put_fat+0x16d>
c0002d0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d12:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d18:	89 d8                	mov    eax,ebx
c0002d1a:	e8 4a ed ff ff       	call   c0001a69 <ld_dword>
c0002d1f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d23:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d28:	09 c7                	or     edi,eax
c0002d2a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d2e:	89 fa                	mov    edx,edi
c0002d30:	89 d8                	mov    eax,ebx
c0002d32:	e8 9b ed ff ff       	call   c0001ad2 <st_dword>
c0002d37:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d3b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d3f:	eb 08                	jmp    c0002d49 <put_fat+0x18c>
c0002d41:	b9 02 00 00 00       	mov    ecx,0x2
c0002d46:	89 c8                	mov    eax,ecx
c0002d48:	c3                   	ret    
c0002d49:	83 c4 1c             	add    esp,0x1c
c0002d4c:	89 c8                	mov    eax,ecx
c0002d4e:	5b                   	pop    ebx
c0002d4f:	5e                   	pop    esi
c0002d50:	5f                   	pop    edi
c0002d51:	5d                   	pop    ebp
c0002d52:	c3                   	ret    

c0002d53 <fill_last_frag>:
c0002d53:	57                   	push   edi
c0002d54:	89 cf                	mov    edi,ecx
c0002d56:	56                   	push   esi
c0002d57:	89 d6                	mov    esi,edx
c0002d59:	53                   	push   ebx
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d5f:	85 c0                	test   eax,eax
c0002d61:	74 21                	je     c0002d84 <fill_last_frag+0x31>
c0002d63:	89 f9                	mov    ecx,edi
c0002d65:	83 f8 01             	cmp    eax,0x1
c0002d68:	76 05                	jbe    c0002d6f <fill_last_frag+0x1c>
c0002d6a:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d6d:	29 c1                	sub    ecx,eax
c0002d6f:	8d 56 01             	lea    edx,[esi+0x1]
c0002d72:	29 c2                	sub    edx,eax
c0002d74:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d76:	e8 42 fe ff ff       	call   c0002bbd <put_fat>
c0002d7b:	85 c0                	test   eax,eax
c0002d7d:	75 05                	jne    c0002d84 <fill_last_frag+0x31>
c0002d7f:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d82:	eb d8                	jmp    c0002d5c <fill_last_frag+0x9>
c0002d84:	5b                   	pop    ebx
c0002d85:	5e                   	pop    esi
c0002d86:	5f                   	pop    edi
c0002d87:	c3                   	ret    

c0002d88 <fill_first_frag>:
c0002d88:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d8c:	75 2d                	jne    c0002dbb <fill_first_frag+0x33>
c0002d8e:	57                   	push   edi
c0002d8f:	56                   	push   esi
c0002d90:	53                   	push   ebx
c0002d91:	89 c3                	mov    ebx,eax
c0002d93:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d96:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d99:	01 d7                	add    edi,edx
c0002d9b:	39 fa                	cmp    edx,edi
c0002d9d:	74 14                	je     c0002db3 <fill_first_frag+0x2b>
c0002d9f:	8d 72 01             	lea    esi,[edx+0x1]
c0002da2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002da4:	89 f1                	mov    ecx,esi
c0002da6:	e8 12 fe ff ff       	call   c0002bbd <put_fat>
c0002dab:	89 f2                	mov    edx,esi
c0002dad:	85 c0                	test   eax,eax
c0002daf:	74 ea                	je     c0002d9b <fill_first_frag+0x13>
c0002db1:	eb 0b                	jmp    c0002dbe <fill_first_frag+0x36>
c0002db3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002db7:	31 c0                	xor    eax,eax
c0002db9:	eb 03                	jmp    c0002dbe <fill_first_frag+0x36>
c0002dbb:	31 c0                	xor    eax,eax
c0002dbd:	c3                   	ret    
c0002dbe:	5b                   	pop    ebx
c0002dbf:	5e                   	pop    esi
c0002dc0:	5f                   	pop    edi
c0002dc1:	c3                   	ret    

c0002dc2 <get_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 db 01 00 00    	jbe    c0002fa6 <get_fat+0x1e4>
c0002dcb:	55                   	push   ebp
c0002dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0002dd1:	57                   	push   edi
c0002dd2:	56                   	push   esi
c0002dd3:	53                   	push   ebx
c0002dd4:	83 ec 1c             	sub    esp,0x1c
c0002dd7:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dd9:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002ddc:	0f 86 cc 01 00 00    	jbe    c0002fae <get_fat+0x1ec>
c0002de2:	89 c3                	mov    ebx,eax
c0002de4:	89 d6                	mov    esi,edx
c0002de6:	8a 07                	mov    al,BYTE PTR [edi]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 99 00 00 00    	je     c0002e89 <get_fat+0xc7>
c0002df0:	77 09                	ja     c0002dfb <get_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 1a                	je     c0002e10 <get_fat+0x4e>
c0002df6:	e9 b3 01 00 00       	jmp    c0002fae <get_fat+0x1ec>
c0002dfb:	3c 03                	cmp    al,0x3
c0002dfd:	0f 84 b5 00 00 00    	je     c0002eb8 <get_fat+0xf6>
c0002e03:	3c 04                	cmp    al,0x4
c0002e05:	0f 84 e3 00 00 00    	je     c0002eee <get_fat+0x12c>
c0002e0b:	e9 9e 01 00 00       	jmp    c0002fae <get_fat+0x1ec>
c0002e10:	89 d3                	mov    ebx,edx
c0002e12:	31 c9                	xor    ecx,ecx
c0002e14:	d1 eb                	shr    ebx,1
c0002e16:	89 f8                	mov    eax,edi
c0002e18:	01 d3                	add    ebx,edx
c0002e1a:	89 da                	mov    edx,ebx
c0002e1c:	c1 ea 09             	shr    edx,0x9
c0002e1f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e22:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e25:	e8 10 f4 ff ff       	call   c000223a <move_window>
c0002e2a:	85 c0                	test   eax,eax
c0002e2c:	74 08                	je     c0002e36 <get_fat+0x74>
c0002e2e:	83 c9 ff             	or     ecx,0xffffffff
c0002e31:	e9 78 01 00 00       	jmp    c0002fae <get_fat+0x1ec>
c0002e36:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e39:	31 c9                	xor    ecx,ecx
c0002e3b:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e41:	89 ea                	mov    edx,ebp
c0002e43:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e47:	c1 ea 09             	shr    edx,0x9
c0002e4a:	89 f8                	mov    eax,edi
c0002e4c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e4f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e52:	e8 e3 f3 ff ff       	call   c000223a <move_window>
c0002e57:	85 c0                	test   eax,eax
c0002e59:	75 d3                	jne    c0002e2e <get_fat+0x6c>
c0002e5b:	0f b6 c3             	movzx  eax,bl
c0002e5e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e64:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e69:	c1 e3 08             	shl    ebx,0x8
c0002e6c:	09 c3                	or     ebx,eax
c0002e6e:	89 d9                	mov    ecx,ebx
c0002e70:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e76:	83 e6 01             	and    esi,0x1
c0002e79:	0f 84 2f 01 00 00    	je     c0002fae <get_fat+0x1ec>
c0002e7f:	89 d9                	mov    ecx,ebx
c0002e81:	c1 e9 04             	shr    ecx,0x4
c0002e84:	e9 25 01 00 00       	jmp    c0002fae <get_fat+0x1ec>
c0002e89:	31 c9                	xor    ecx,ecx
c0002e8b:	c1 ea 08             	shr    edx,0x8
c0002e8e:	89 f8                	mov    eax,edi
c0002e90:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e93:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e96:	e8 9f f3 ff ff       	call   c000223a <move_window>
c0002e9b:	85 c0                	test   eax,eax
c0002e9d:	75 8f                	jne    c0002e2e <get_fat+0x6c>
c0002e9f:	01 f6                	add    esi,esi
c0002ea1:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002ea7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002eab:	e8 ac eb ff ff       	call   c0001a5c <ld_word>
c0002eb0:	0f b7 c8             	movzx  ecx,ax
c0002eb3:	e9 f6 00 00 00       	jmp    c0002fae <get_fat+0x1ec>
c0002eb8:	31 c9                	xor    ecx,ecx
c0002eba:	c1 ea 07             	shr    edx,0x7
c0002ebd:	89 f8                	mov    eax,edi
c0002ebf:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ec2:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ec5:	e8 70 f3 ff ff       	call   c000223a <move_window>
c0002eca:	85 c0                	test   eax,eax
c0002ecc:	0f 85 5c ff ff ff    	jne    c0002e2e <get_fat+0x6c>
c0002ed2:	c1 e6 02             	shl    esi,0x2
c0002ed5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002edb:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002edf:	e8 85 eb ff ff       	call   c0001a69 <ld_dword>
c0002ee4:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ee9:	e9 b4 00 00 00       	jmp    c0002fa2 <get_fat+0x1e0>
c0002eee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ef1:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ef4:	89 d1                	mov    ecx,edx
c0002ef6:	09 c1                	or     ecx,eax
c0002ef8:	74 06                	je     c0002f00 <get_fat+0x13e>
c0002efa:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002efe:	75 0f                	jne    c0002f0f <get_fat+0x14d>
c0002f00:	b9 01 00 00 00       	mov    ecx,0x1
c0002f05:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002f09:	0f 85 9f 00 00 00    	jne    c0002fae <get_fat+0x1ec>
c0002f0f:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002f13:	89 f5                	mov    ebp,esi
c0002f15:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f1a:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f1d:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f20:	80 f9 02             	cmp    cl,0x2
c0002f23:	75 35                	jne    c0002f5a <get_fat+0x198>
c0002f25:	83 c0 ff             	add    eax,0xffffffff
c0002f28:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f2d:	83 d2 ff             	adc    edx,0xffffffff
c0002f30:	31 db                	xor    ebx,ebx
c0002f32:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f36:	53                   	push   ebx
c0002f37:	c1 ea 09             	shr    edx,0x9
c0002f3a:	51                   	push   ecx
c0002f3b:	52                   	push   edx
c0002f3c:	50                   	push   eax
c0002f3d:	e8 8a 28 02 00       	call   c00257cc <__udivdi3>
c0002f42:	83 c4 10             	add    esp,0x10
c0002f45:	b9 01 00 00 00       	mov    ecx,0x1
c0002f4a:	39 c5                	cmp    ebp,eax
c0002f4c:	77 60                	ja     c0002fae <get_fat+0x1ec>
c0002f4e:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f53:	74 59                	je     c0002fae <get_fat+0x1ec>
c0002f55:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f58:	eb 54                	jmp    c0002fae <get_fat+0x1ec>
c0002f5a:	80 f9 03             	cmp    cl,0x3
c0002f5d:	75 05                	jne    c0002f64 <get_fat+0x1a2>
c0002f5f:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f62:	77 f1                	ja     c0002f55 <get_fat+0x193>
c0002f64:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f69:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f6d:	75 3f                	jne    c0002fae <get_fat+0x1ec>
c0002f6f:	31 c9                	xor    ecx,ecx
c0002f71:	89 f2                	mov    edx,esi
c0002f73:	89 f8                	mov    eax,edi
c0002f75:	c1 ea 07             	shr    edx,0x7
c0002f78:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f7b:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f7e:	e8 b7 f2 ff ff       	call   c000223a <move_window>
c0002f83:	85 c0                	test   eax,eax
c0002f85:	0f 85 a3 fe ff ff    	jne    c0002e2e <get_fat+0x6c>
c0002f8b:	c1 e6 02             	shl    esi,0x2
c0002f8e:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f94:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f98:	e8 cc ea ff ff       	call   c0001a69 <ld_dword>
c0002f9d:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002fa2:	89 c1                	mov    ecx,eax
c0002fa4:	eb 08                	jmp    c0002fae <get_fat+0x1ec>
c0002fa6:	b9 01 00 00 00       	mov    ecx,0x1
c0002fab:	89 c8                	mov    eax,ecx
c0002fad:	c3                   	ret    
c0002fae:	83 c4 1c             	add    esp,0x1c
c0002fb1:	89 c8                	mov    eax,ecx
c0002fb3:	5b                   	pop    ebx
c0002fb4:	5e                   	pop    esi
c0002fb5:	5f                   	pop    edi
c0002fb6:	5d                   	pop    ebp
c0002fb7:	c3                   	ret    

c0002fb8 <dir_sdi>:
c0002fb8:	55                   	push   ebp
c0002fb9:	57                   	push   edi
c0002fba:	56                   	push   esi
c0002fbb:	53                   	push   ebx
c0002fbc:	89 c3                	mov    ebx,eax
c0002fbe:	83 ec 1c             	sub    esp,0x1c
c0002fc1:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fc3:	31 c0                	xor    eax,eax
c0002fc5:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fc8:	0f 94 c0             	sete   al
c0002fcb:	48                   	dec    eax
c0002fcc:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fd1:	05 00 00 00 10       	add    eax,0x10000000
c0002fd6:	39 d0                	cmp    eax,edx
c0002fd8:	77 0a                	ja     c0002fe4 <dir_sdi+0x2c>
c0002fda:	b8 02 00 00 00       	mov    eax,0x2
c0002fdf:	e9 c4 00 00 00       	jmp    c00030a8 <dir_sdi+0xf0>
c0002fe4:	89 d6                	mov    esi,edx
c0002fe6:	f6 c2 1f             	test   dl,0x1f
c0002fe9:	75 ef                	jne    c0002fda <dir_sdi+0x22>
c0002feb:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fee:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002ff1:	85 c9                	test   ecx,ecx
c0002ff3:	75 2d                	jne    c0003022 <dir_sdi+0x6a>
c0002ff5:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002ff8:	77 1b                	ja     c0003015 <dir_sdi+0x5d>
c0002ffa:	89 f2                	mov    edx,esi
c0002ffc:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003000:	c1 ea 05             	shr    edx,0x5
c0003003:	39 c2                	cmp    edx,eax
c0003005:	73 d3                	jae    c0002fda <dir_sdi+0x22>
c0003007:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000300a:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000300d:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003010:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003013:	eb 4b                	jmp    c0003060 <dir_sdi+0xa8>
c0003015:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003018:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000301c:	85 c0                	test   eax,eax
c000301e:	74 da                	je     c0002ffa <dir_sdi+0x42>
c0003020:	89 c1                	mov    ecx,eax
c0003022:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003026:	c1 e5 09             	shl    ebp,0x9
c0003029:	89 ca                	mov    edx,ecx
c000302b:	39 ee                	cmp    esi,ebp
c000302d:	72 1c                	jb     c000304b <dir_sdi+0x93>
c000302f:	89 d8                	mov    eax,ebx
c0003031:	e8 8c fd ff ff       	call   c0002dc2 <get_fat>
c0003036:	89 c1                	mov    ecx,eax
c0003038:	83 f8 ff             	cmp    eax,0xffffffff
c000303b:	74 66                	je     c00030a3 <dir_sdi+0xeb>
c000303d:	83 f8 01             	cmp    eax,0x1
c0003040:	76 98                	jbe    c0002fda <dir_sdi+0x22>
c0003042:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003045:	76 93                	jbe    c0002fda <dir_sdi+0x22>
c0003047:	29 ee                	sub    esi,ebp
c0003049:	eb de                	jmp    c0003029 <dir_sdi+0x71>
c000304b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000304f:	89 f8                	mov    eax,edi
c0003051:	e8 9f ec ff ff       	call   c0001cf5 <clst2sect>
c0003056:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000305a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000305d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003060:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003063:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003066:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003069:	89 d1                	mov    ecx,edx
c000306b:	09 c1                	or     ecx,eax
c000306d:	0f 84 67 ff ff ff    	je     c0002fda <dir_sdi+0x22>
c0003073:	89 f1                	mov    ecx,esi
c0003075:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000307d:	c1 e9 09             	shr    ecx,0x9
c0003080:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003084:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003088:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000308c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000308f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003095:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003098:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000309c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000309f:	31 c0                	xor    eax,eax
c00030a1:	eb 05                	jmp    c00030a8 <dir_sdi+0xf0>
c00030a3:	b8 01 00 00 00       	mov    eax,0x1
c00030a8:	83 c4 1c             	add    esp,0x1c
c00030ab:	5b                   	pop    ebx
c00030ac:	5e                   	pop    esi
c00030ad:	5f                   	pop    edi
c00030ae:	5d                   	pop    ebp
c00030af:	c3                   	ret    

c00030b0 <create_chain>:
c00030b0:	55                   	push   ebp
c00030b1:	89 c5                	mov    ebp,eax
c00030b3:	57                   	push   edi
c00030b4:	56                   	push   esi
c00030b5:	53                   	push   ebx
c00030b6:	83 ec 1c             	sub    esp,0x1c
c00030b9:	85 d2                	test   edx,edx
c00030bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00030c1:	75 0e                	jne    c00030d1 <create_chain+0x21>
c00030c3:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030c6:	85 ff                	test   edi,edi
c00030c8:	74 39                	je     c0003103 <create_chain+0x53>
c00030ca:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030cd:	77 39                	ja     c0003108 <create_chain+0x58>
c00030cf:	eb 32                	jmp    c0003103 <create_chain+0x53>
c00030d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030d5:	e8 e8 fc ff ff       	call   c0002dc2 <get_fat>
c00030da:	89 c3                	mov    ebx,eax
c00030dc:	83 f8 01             	cmp    eax,0x1
c00030df:	77 0a                	ja     c00030eb <create_chain+0x3b>
c00030e1:	bb 01 00 00 00       	mov    ebx,0x1
c00030e6:	e9 ba 01 00 00       	jmp    c00032a5 <create_chain+0x1f5>
c00030eb:	83 f8 ff             	cmp    eax,0xffffffff
c00030ee:	0f 84 62 01 00 00    	je     c0003256 <create_chain+0x1a6>
c00030f4:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030f7:	0f 87 a8 01 00 00    	ja     c00032a5 <create_chain+0x1f5>
c00030fd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003101:	eb 05                	jmp    c0003108 <create_chain+0x58>
c0003103:	bf 01 00 00 00       	mov    edi,0x1
c0003108:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000310c:	75 07                	jne    c0003115 <create_chain+0x65>
c000310e:	31 db                	xor    ebx,ebx
c0003110:	e9 90 01 00 00       	jmp    c00032a5 <create_chain+0x1f5>
c0003115:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003118:	75 74                	jne    c000318e <create_chain+0xde>
c000311a:	b9 01 00 00 00       	mov    ecx,0x1
c000311f:	89 fa                	mov    edx,edi
c0003121:	89 f0                	mov    eax,esi
c0003123:	e8 2d f9 ff ff       	call   c0002a55 <find_bitmap>
c0003128:	89 c3                	mov    ebx,eax
c000312a:	8d 40 ff             	lea    eax,[eax-0x1]
c000312d:	83 f8 fd             	cmp    eax,0xfffffffd
c0003130:	0f 87 6f 01 00 00    	ja     c00032a5 <create_chain+0x1f5>
c0003136:	83 ec 0c             	sub    esp,0xc
c0003139:	b9 01 00 00 00       	mov    ecx,0x1
c000313e:	6a 01                	push   0x1
c0003140:	89 da                	mov    edx,ebx
c0003142:	89 f0                	mov    eax,esi
c0003144:	e8 bf f9 ff ff       	call   c0002b08 <change_bitmap>
c0003149:	83 c4 10             	add    esp,0x10
c000314c:	83 f8 02             	cmp    eax,0x2
c000314f:	74 90                	je     c00030e1 <create_chain+0x31>
c0003151:	83 f8 01             	cmp    eax,0x1
c0003154:	0f 84 fc 00 00 00    	je     c0003256 <create_chain+0x1a6>
c000315a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000315f:	75 09                	jne    c000316a <create_chain+0xba>
c0003161:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003165:	e9 0c 01 00 00       	jmp    c0003276 <create_chain+0x1c6>
c000316a:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000316e:	0f 85 e7 00 00 00    	jne    c000325b <create_chain+0x1ab>
c0003174:	8d 57 01             	lea    edx,[edi+0x1]
c0003177:	39 da                	cmp    edx,ebx
c0003179:	0f 84 f7 00 00 00    	je     c0003276 <create_chain+0x1c6>
c000317f:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003182:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003186:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003189:	e9 cd 00 00 00       	jmp    c000325b <create_chain+0x1ab>
c000318e:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003192:	75 41                	jne    c00031d5 <create_chain+0x125>
c0003194:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003197:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000319a:	77 05                	ja     c00031a1 <create_chain+0xf1>
c000319c:	bb 02 00 00 00       	mov    ebx,0x2
c00031a1:	89 da                	mov    edx,ebx
c00031a3:	89 e8                	mov    eax,ebp
c00031a5:	e8 18 fc ff ff       	call   c0002dc2 <get_fat>
c00031aa:	83 f8 01             	cmp    eax,0x1
c00031ad:	0f 84 2e ff ff ff    	je     c00030e1 <create_chain+0x31>
c00031b3:	83 f8 ff             	cmp    eax,0xffffffff
c00031b6:	0f 84 9a 00 00 00    	je     c0003256 <create_chain+0x1a6>
c00031bc:	85 c0                	test   eax,eax
c00031be:	74 11                	je     c00031d1 <create_chain+0x121>
c00031c0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031c3:	83 f8 01             	cmp    eax,0x1
c00031c6:	76 0d                	jbe    c00031d5 <create_chain+0x125>
c00031c8:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031cb:	76 08                	jbe    c00031d5 <create_chain+0x125>
c00031cd:	89 c7                	mov    edi,eax
c00031cf:	eb 04                	jmp    c00031d5 <create_chain+0x125>
c00031d1:	85 db                	test   ebx,ebx
c00031d3:	75 38                	jne    c000320d <create_chain+0x15d>
c00031d5:	89 fb                	mov    ebx,edi
c00031d7:	43                   	inc    ebx
c00031d8:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031db:	77 0e                	ja     c00031eb <create_chain+0x13b>
c00031dd:	83 ff 01             	cmp    edi,0x1
c00031e0:	0f 86 28 ff ff ff    	jbe    c000310e <create_chain+0x5e>
c00031e6:	bb 02 00 00 00       	mov    ebx,0x2
c00031eb:	89 da                	mov    edx,ebx
c00031ed:	89 e8                	mov    eax,ebp
c00031ef:	e8 ce fb ff ff       	call   c0002dc2 <get_fat>
c00031f4:	85 c0                	test   eax,eax
c00031f6:	74 15                	je     c000320d <create_chain+0x15d>
c00031f8:	83 f8 01             	cmp    eax,0x1
c00031fb:	0f 84 e0 fe ff ff    	je     c00030e1 <create_chain+0x31>
c0003201:	40                   	inc    eax
c0003202:	74 52                	je     c0003256 <create_chain+0x1a6>
c0003204:	39 fb                	cmp    ebx,edi
c0003206:	75 cf                	jne    c00031d7 <create_chain+0x127>
c0003208:	e9 01 ff ff ff       	jmp    c000310e <create_chain+0x5e>
c000320d:	83 c9 ff             	or     ecx,0xffffffff
c0003210:	89 da                	mov    edx,ebx
c0003212:	89 f0                	mov    eax,esi
c0003214:	e8 a4 f9 ff ff       	call   c0002bbd <put_fat>
c0003219:	85 c0                	test   eax,eax
c000321b:	75 32                	jne    c000324f <create_chain+0x19f>
c000321d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003222:	74 11                	je     c0003235 <create_chain+0x185>
c0003224:	89 d9                	mov    ecx,ebx
c0003226:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000322a:	89 f0                	mov    eax,esi
c000322c:	e8 8c f9 ff ff       	call   c0002bbd <put_fat>
c0003231:	85 c0                	test   eax,eax
c0003233:	75 1a                	jne    c000324f <create_chain+0x19f>
c0003235:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003238:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000323b:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000323e:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003241:	39 d0                	cmp    eax,edx
c0003243:	77 04                	ja     c0003249 <create_chain+0x199>
c0003245:	48                   	dec    eax
c0003246:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003249:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000324d:	eb 56                	jmp    c00032a5 <create_chain+0x1f5>
c000324f:	48                   	dec    eax
c0003250:	0f 85 8b fe ff ff    	jne    c00030e1 <create_chain+0x31>
c0003256:	83 cb ff             	or     ebx,0xffffffff
c0003259:	eb 4a                	jmp    c00032a5 <create_chain+0x1f5>
c000325b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000325f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003262:	41                   	inc    ecx
c0003263:	39 d9                	cmp    ecx,ebx
c0003265:	75 19                	jne    c0003280 <create_chain+0x1d0>
c0003267:	b9 02 00 00 00       	mov    ecx,0x2
c000326c:	85 d2                	test   edx,edx
c000326e:	74 03                	je     c0003273 <create_chain+0x1c3>
c0003270:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003273:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003276:	85 c0                	test   eax,eax
c0003278:	0f 85 63 fe ff ff    	jne    c00030e1 <create_chain+0x31>
c000327e:	eb b5                	jmp    c0003235 <create_chain+0x185>
c0003280:	85 d2                	test   edx,edx
c0003282:	75 07                	jne    c000328b <create_chain+0x1db>
c0003284:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000328b:	89 d9                	mov    ecx,ebx
c000328d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003291:	89 e8                	mov    eax,ebp
c0003293:	e8 bb fa ff ff       	call   c0002d53 <fill_last_frag>
c0003298:	85 c0                	test   eax,eax
c000329a:	75 b3                	jne    c000324f <create_chain+0x19f>
c000329c:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00032a3:	eb 90                	jmp    c0003235 <create_chain+0x185>
c00032a5:	83 c4 1c             	add    esp,0x1c
c00032a8:	89 d8                	mov    eax,ebx
c00032aa:	5b                   	pop    ebx
c00032ab:	5e                   	pop    esi
c00032ac:	5f                   	pop    edi
c00032ad:	5d                   	pop    ebp
c00032ae:	c3                   	ret    

c00032af <remove_chain>:
c00032af:	55                   	push   ebp
c00032b0:	57                   	push   edi
c00032b1:	56                   	push   esi
c00032b2:	53                   	push   ebx
c00032b3:	83 ec 1c             	sub    esp,0x1c
c00032b6:	83 fa 01             	cmp    edx,0x1
c00032b9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032bd:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032bf:	77 0a                	ja     c00032cb <remove_chain+0x1c>
c00032c1:	b8 02 00 00 00       	mov    eax,0x2
c00032c6:	e9 24 01 00 00       	jmp    c00033ef <remove_chain+0x140>
c00032cb:	89 d6                	mov    esi,edx
c00032cd:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032d0:	76 ef                	jbe    c00032c1 <remove_chain+0x12>
c00032d2:	89 c7                	mov    edi,eax
c00032d4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032d9:	75 06                	jne    c00032e1 <remove_chain+0x32>
c00032db:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032df:	eb 54                	jmp    c0003335 <remove_chain+0x86>
c00032e1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032e4:	75 06                	jne    c00032ec <remove_chain+0x3d>
c00032e6:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032ea:	74 ef                	je     c00032db <remove_chain+0x2c>
c00032ec:	83 c9 ff             	or     ecx,0xffffffff
c00032ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032f3:	89 d8                	mov    eax,ebx
c00032f5:	e8 c3 f8 ff ff       	call   c0002bbd <put_fat>
c00032fa:	85 c0                	test   eax,eax
c00032fc:	74 dd                	je     c00032db <remove_chain+0x2c>
c00032fe:	e9 ec 00 00 00       	jmp    c00033ef <remove_chain+0x140>
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	74 b9                	je     c00032c1 <remove_chain+0x12>
c0003308:	83 f8 ff             	cmp    eax,0xffffffff
c000330b:	74 6d                	je     c000337a <remove_chain+0xcb>
c000330d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003310:	75 6f                	jne    c0003381 <remove_chain+0xd2>
c0003312:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003315:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003318:	8d 51 fe             	lea    edx,[ecx-0x2]
c000331b:	39 d0                	cmp    eax,edx
c000331d:	73 08                	jae    c0003327 <remove_chain+0x78>
c000331f:	40                   	inc    eax
c0003320:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003324:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003327:	8d 4e 01             	lea    ecx,[esi+0x1]
c000332a:	39 e9                	cmp    ecx,ebp
c000332c:	75 64                	jne    c0003392 <remove_chain+0xe3>
c000332e:	89 ee                	mov    esi,ebp
c0003330:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003333:	76 0f                	jbe    c0003344 <remove_chain+0x95>
c0003335:	89 f2                	mov    edx,esi
c0003337:	89 f8                	mov    eax,edi
c0003339:	e8 84 fa ff ff       	call   c0002dc2 <get_fat>
c000333e:	89 c5                	mov    ebp,eax
c0003340:	85 c0                	test   eax,eax
c0003342:	75 bf                	jne    c0003303 <remove_chain+0x54>
c0003344:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003347:	0f 85 a0 00 00 00    	jne    c00033ed <remove_chain+0x13e>
c000334d:	eb 6c                	jmp    c00033bb <remove_chain+0x10c>
c000334f:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003352:	84 c0                	test   al,al
c0003354:	75 7d                	jne    c00033d3 <remove_chain+0x124>
c0003356:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003359:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000335d:	0f 84 86 00 00 00    	je     c00033e9 <remove_chain+0x13a>
c0003363:	89 da                	mov    edx,ebx
c0003365:	89 f8                	mov    eax,edi
c0003367:	e8 56 fa ff ff       	call   c0002dc2 <get_fat>
c000336c:	83 f8 01             	cmp    eax,0x1
c000336f:	0f 86 4c ff ff ff    	jbe    c00032c1 <remove_chain+0x12>
c0003375:	83 f8 ff             	cmp    eax,0xffffffff
c0003378:	75 4e                	jne    c00033c8 <remove_chain+0x119>
c000337a:	b8 01 00 00 00       	mov    eax,0x1
c000337f:	eb 6e                	jmp    c00033ef <remove_chain+0x140>
c0003381:	31 c9                	xor    ecx,ecx
c0003383:	89 f2                	mov    edx,esi
c0003385:	89 d8                	mov    eax,ebx
c0003387:	e8 31 f8 ff ff       	call   c0002bbd <put_fat>
c000338c:	85 c0                	test   eax,eax
c000338e:	74 82                	je     c0003312 <remove_chain+0x63>
c0003390:	eb 5d                	jmp    c00033ef <remove_chain+0x140>
c0003392:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003395:	75 1b                	jne    c00033b2 <remove_chain+0x103>
c0003397:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000339b:	89 d8                	mov    eax,ebx
c000339d:	83 ec 0c             	sub    esp,0xc
c00033a0:	6a 00                	push   0x0
c00033a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00033a6:	e8 5d f7 ff ff       	call   c0002b08 <change_bitmap>
c00033ab:	83 c4 10             	add    esp,0x10
c00033ae:	85 c0                	test   eax,eax
c00033b0:	75 3d                	jne    c00033ef <remove_chain+0x140>
c00033b2:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033b6:	e9 73 ff ff ff       	jmp    c000332e <remove_chain+0x7f>
c00033bb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033c0:	75 8d                	jne    c000334f <remove_chain+0xa0>
c00033c2:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033c6:	eb 25                	jmp    c00033ed <remove_chain+0x13e>
c00033c8:	8d 53 01             	lea    edx,[ebx+0x1]
c00033cb:	89 c3                	mov    ebx,eax
c00033cd:	39 c2                	cmp    edx,eax
c00033cf:	74 88                	je     c0003359 <remove_chain+0xaa>
c00033d1:	eb 1a                	jmp    c00033ed <remove_chain+0x13e>
c00033d3:	3c 03                	cmp    al,0x3
c00033d5:	75 16                	jne    c00033ed <remove_chain+0x13e>
c00033d7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033da:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033de:	77 0d                	ja     c00033ed <remove_chain+0x13e>
c00033e0:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033e3:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033e7:	72 04                	jb     c00033ed <remove_chain+0x13e>
c00033e9:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033ed:	31 c0                	xor    eax,eax
c00033ef:	83 c4 1c             	add    esp,0x1c
c00033f2:	5b                   	pop    ebx
c00033f3:	5e                   	pop    esi
c00033f4:	5f                   	pop    edi
c00033f5:	5d                   	pop    ebp
c00033f6:	c3                   	ret    

c00033f7 <dir_clear>:
c00033f7:	55                   	push   ebp
c00033f8:	57                   	push   edi
c00033f9:	56                   	push   esi
c00033fa:	89 c6                	mov    esi,eax
c00033fc:	53                   	push   ebx
c00033fd:	83 ec 1c             	sub    esp,0x1c
c0003400:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003404:	e8 9d ed ff ff       	call   c00021a6 <sync_window>
c0003409:	85 c0                	test   eax,eax
c000340b:	0f 85 de 00 00 00    	jne    c00034ef <dir_clear+0xf8>
c0003411:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003415:	89 f0                	mov    eax,esi
c0003417:	8d 6e 54             	lea    ebp,[esi+0x54]
c000341a:	e8 d6 e8 ff ff       	call   c0001cf5 <clst2sect>
c000341f:	b9 00 02 00 00       	mov    ecx,0x200
c0003424:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003428:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000342c:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000342f:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003432:	89 e8                	mov    eax,ebp
c0003434:	31 d2                	xor    edx,edx
c0003436:	e8 b5 e6 ff ff       	call   c0001af0 <mem_set>
c000343b:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000343f:	c1 e3 09             	shl    ebx,0x9
c0003442:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003448:	76 1f                	jbe    c0003469 <dir_clear+0x72>
c000344a:	bb 00 80 00 00       	mov    ebx,0x8000
c000344f:	eb 18                	jmp    c0003469 <dir_clear+0x72>
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	53                   	push   ebx
c0003455:	e8 35 4e 00 00       	call   c000828f <ff_memalloc>
c000345a:	83 c4 10             	add    esp,0x10
c000345d:	89 c7                	mov    edi,eax
c000345f:	85 c0                	test   eax,eax
c0003461:	0f 85 8f 00 00 00    	jne    c00034f6 <dir_clear+0xff>
c0003467:	d1 eb                	shr    ebx,1
c0003469:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000346f:	77 e0                	ja     c0003451 <dir_clear+0x5a>
c0003471:	31 db                	xor    ebx,ebx
c0003473:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003477:	39 d8                	cmp    eax,ebx
c0003479:	76 66                	jbe    c00034e1 <dir_clear+0xea>
c000347b:	83 ec 0c             	sub    esp,0xc
c000347e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003482:	6a 01                	push   0x1
c0003484:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000348c:	55                   	push   ebp
c000348d:	50                   	push   eax
c000348e:	e8 94 e5 ff ff       	call   c0001a27 <disk_write>
c0003493:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003498:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000349d:	83 c4 20             	add    esp,0x20
c00034a0:	85 c0                	test   eax,eax
c00034a2:	75 3d                	jne    c00034e1 <dir_clear+0xea>
c00034a4:	43                   	inc    ebx
c00034a5:	eb cc                	jmp    c0003473 <dir_clear+0x7c>
c00034a7:	83 ec 0c             	sub    esp,0xc
c00034aa:	31 d2                	xor    edx,edx
c00034ac:	55                   	push   ebp
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00034b3:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034b7:	52                   	push   edx
c00034b8:	50                   	push   eax
c00034b9:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034bd:	57                   	push   edi
c00034be:	50                   	push   eax
c00034bf:	e8 63 e5 ff ff       	call   c0001a27 <disk_write>
c00034c4:	83 c4 20             	add    esp,0x20
c00034c7:	85 c0                	test   eax,eax
c00034c9:	75 0a                	jne    c00034d5 <dir_clear+0xde>
c00034cb:	01 eb                	add    ebx,ebp
c00034cd:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034d1:	39 d8                	cmp    eax,ebx
c00034d3:	77 d2                	ja     c00034a7 <dir_clear+0xb0>
c00034d5:	83 ec 0c             	sub    esp,0xc
c00034d8:	57                   	push   edi
c00034d9:	e8 c7 4d 00 00       	call   c00082a5 <ff_memfree>
c00034de:	83 c4 10             	add    esp,0x10
c00034e1:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034e5:	39 d8                	cmp    eax,ebx
c00034e7:	0f 95 c0             	setne  al
c00034ea:	0f b6 c0             	movzx  eax,al
c00034ed:	eb 19                	jmp    c0003508 <dir_clear+0x111>
c00034ef:	b8 01 00 00 00       	mov    eax,0x1
c00034f4:	eb 12                	jmp    c0003508 <dir_clear+0x111>
c00034f6:	89 d9                	mov    ecx,ebx
c00034f8:	31 d2                	xor    edx,edx
c00034fa:	c1 eb 09             	shr    ebx,0x9
c00034fd:	e8 ee e5 ff ff       	call   c0001af0 <mem_set>
c0003502:	89 dd                	mov    ebp,ebx
c0003504:	31 db                	xor    ebx,ebx
c0003506:	eb c5                	jmp    c00034cd <dir_clear+0xd6>
c0003508:	83 c4 1c             	add    esp,0x1c
c000350b:	5b                   	pop    ebx
c000350c:	5e                   	pop    esi
c000350d:	5f                   	pop    edi
c000350e:	5d                   	pop    ebp
c000350f:	c3                   	ret    

c0003510 <dir_next>:
c0003510:	55                   	push   ebp
c0003511:	57                   	push   edi
c0003512:	56                   	push   esi
c0003513:	53                   	push   ebx
c0003514:	89 c3                	mov    ebx,eax
c0003516:	83 ec 1c             	sub    esp,0x1c
c0003519:	8b 28                	mov    ebp,DWORD PTR [eax]
c000351b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000351f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003522:	8d 78 20             	lea    edi,[eax+0x20]
c0003525:	31 c0                	xor    eax,eax
c0003527:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000352b:	0f 94 c0             	sete   al
c000352e:	48                   	dec    eax
c000352f:	25 00 00 20 f0       	and    eax,0xf0200000
c0003534:	05 00 00 00 10       	add    eax,0x10000000
c0003539:	39 f8                	cmp    eax,edi
c000353b:	77 0e                	ja     c000354b <dir_next+0x3b>
c000353d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003544:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000354b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000354e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003551:	b8 04 00 00 00       	mov    eax,0x4
c0003556:	89 ce                	mov    esi,ecx
c0003558:	09 d6                	or     esi,edx
c000355a:	0f 84 da 00 00 00    	je     c000363a <dir_next+0x12a>
c0003560:	89 f8                	mov    eax,edi
c0003562:	25 ff 01 00 00       	and    eax,0x1ff
c0003567:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000356b:	0f 85 b9 00 00 00    	jne    c000362a <dir_next+0x11a>
c0003571:	83 c2 01             	add    edx,0x1
c0003574:	83 d1 00             	adc    ecx,0x0
c0003577:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000357a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000357d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003580:	85 d2                	test   edx,edx
c0003582:	75 29                	jne    c00035ad <dir_next+0x9d>
c0003584:	89 fa                	mov    edx,edi
c0003586:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000358a:	c1 ea 05             	shr    edx,0x5
c000358d:	39 c2                	cmp    edx,eax
c000358f:	0f 82 95 00 00 00    	jb     c000362a <dir_next+0x11a>
c0003595:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000359c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00035a3:	b8 04 00 00 00       	mov    eax,0x4
c00035a8:	e9 8d 00 00 00       	jmp    c000363a <dir_next+0x12a>
c00035ad:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00035b1:	89 f9                	mov    ecx,edi
c00035b3:	48                   	dec    eax
c00035b4:	c1 e9 09             	shr    ecx,0x9
c00035b7:	85 c8                	test   eax,ecx
c00035b9:	75 6f                	jne    c000362a <dir_next+0x11a>
c00035bb:	89 d8                	mov    eax,ebx
c00035bd:	e8 00 f8 ff ff       	call   c0002dc2 <get_fat>
c00035c2:	89 c6                	mov    esi,eax
c00035c4:	83 f8 01             	cmp    eax,0x1
c00035c7:	77 07                	ja     c00035d0 <dir_next+0xc0>
c00035c9:	b8 02 00 00 00       	mov    eax,0x2
c00035ce:	eb 6a                	jmp    c000363a <dir_next+0x12a>
c00035d0:	83 f8 ff             	cmp    eax,0xffffffff
c00035d3:	75 07                	jne    c00035dc <dir_next+0xcc>
c00035d5:	b8 01 00 00 00       	mov    eax,0x1
c00035da:	eb 5e                	jmp    c000363a <dir_next+0x12a>
c00035dc:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035df:	77 37                	ja     c0003618 <dir_next+0x108>
c00035e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035e6:	74 ad                	je     c0003595 <dir_next+0x85>
c00035e8:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035eb:	89 d8                	mov    eax,ebx
c00035ed:	e8 be fa ff ff       	call   c00030b0 <create_chain>
c00035f2:	89 c6                	mov    esi,eax
c00035f4:	b8 07 00 00 00       	mov    eax,0x7
c00035f9:	85 f6                	test   esi,esi
c00035fb:	74 3d                	je     c000363a <dir_next+0x12a>
c00035fd:	83 fe 01             	cmp    esi,0x1
c0003600:	74 c7                	je     c00035c9 <dir_next+0xb9>
c0003602:	83 fe ff             	cmp    esi,0xffffffff
c0003605:	74 ce                	je     c00035d5 <dir_next+0xc5>
c0003607:	89 f2                	mov    edx,esi
c0003609:	89 e8                	mov    eax,ebp
c000360b:	e8 e7 fd ff ff       	call   c00033f7 <dir_clear>
c0003610:	85 c0                	test   eax,eax
c0003612:	75 c1                	jne    c00035d5 <dir_next+0xc5>
c0003614:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003618:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000361b:	89 f2                	mov    edx,esi
c000361d:	89 e8                	mov    eax,ebp
c000361f:	e8 d1 e6 ff ff       	call   c0001cf5 <clst2sect>
c0003624:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003627:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000362a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000362e:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003631:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003635:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003638:	31 c0                	xor    eax,eax
c000363a:	83 c4 1c             	add    esp,0x1c
c000363d:	5b                   	pop    ebx
c000363e:	5e                   	pop    esi
c000363f:	5f                   	pop    edi
c0003640:	5d                   	pop    ebp
c0003641:	c3                   	ret    

c0003642 <load_xdir>:
c0003642:	55                   	push   ebp
c0003643:	57                   	push   edi
c0003644:	56                   	push   esi
c0003645:	89 c6                	mov    esi,eax
c0003647:	53                   	push   ebx
c0003648:	83 ec 1c             	sub    esp,0x1c
c000364b:	8b 00                	mov    eax,DWORD PTR [eax]
c000364d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003650:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003653:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003656:	e8 df eb ff ff       	call   c000223a <move_window>
c000365b:	89 c3                	mov    ebx,eax
c000365d:	85 c0                	test   eax,eax
c000365f:	0f 85 0c 01 00 00    	jne    c0003771 <load_xdir+0x12f>
c0003665:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003668:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000366b:	0f 85 fb 00 00 00    	jne    c000376c <load_xdir+0x12a>
c0003671:	89 f8                	mov    eax,edi
c0003673:	b9 20 00 00 00       	mov    ecx,0x20
c0003678:	e8 5e e4 ff ff       	call   c0001adb <mem_cpy>
c000367d:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003681:	40                   	inc    eax
c0003682:	c1 e0 05             	shl    eax,0x5
c0003685:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003689:	83 e8 60             	sub    eax,0x60
c000368c:	3d 00 02 00 00       	cmp    eax,0x200
c0003691:	0f 87 d5 00 00 00    	ja     c000376c <load_xdir+0x12a>
c0003697:	31 d2                	xor    edx,edx
c0003699:	89 f0                	mov    eax,esi
c000369b:	e8 70 fe ff ff       	call   c0003510 <dir_next>
c00036a0:	89 c3                	mov    ebx,eax
c00036a2:	83 f8 04             	cmp    eax,0x4
c00036a5:	0f 84 c1 00 00 00    	je     c000376c <load_xdir+0x12a>
c00036ab:	85 c0                	test   eax,eax
c00036ad:	0f 85 be 00 00 00    	jne    c0003771 <load_xdir+0x12f>
c00036b3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036b6:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036b9:	8b 06                	mov    eax,DWORD PTR [esi]
c00036bb:	e8 7a eb ff ff       	call   c000223a <move_window>
c00036c0:	89 c3                	mov    ebx,eax
c00036c2:	85 c0                	test   eax,eax
c00036c4:	0f 85 a7 00 00 00    	jne    c0003771 <load_xdir+0x12f>
c00036ca:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036cd:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036d0:	0f 85 96 00 00 00    	jne    c000376c <load_xdir+0x12a>
c00036d6:	8d 47 20             	lea    eax,[edi+0x20]
c00036d9:	b9 20 00 00 00       	mov    ecx,0x20
c00036de:	e8 f8 e3 ff ff       	call   c0001adb <mem_cpy>
c00036e3:	31 d2                	xor    edx,edx
c00036e5:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036e9:	b9 0f 00 00 00       	mov    ecx,0xf
c00036ee:	83 c0 2c             	add    eax,0x2c
c00036f1:	f7 f1                	div    ecx
c00036f3:	c1 e0 05             	shl    eax,0x5
c00036f6:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036fa:	77 70                	ja     c000376c <load_xdir+0x12a>
c00036fc:	bd 40 00 00 00       	mov    ebp,0x40
c0003701:	31 d2                	xor    edx,edx
c0003703:	89 f0                	mov    eax,esi
c0003705:	e8 06 fe ff ff       	call   c0003510 <dir_next>
c000370a:	89 c3                	mov    ebx,eax
c000370c:	83 f8 04             	cmp    eax,0x4
c000370f:	74 5b                	je     c000376c <load_xdir+0x12a>
c0003711:	85 c0                	test   eax,eax
c0003713:	75 5c                	jne    c0003771 <load_xdir+0x12f>
c0003715:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003718:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000371b:	8b 06                	mov    eax,DWORD PTR [esi]
c000371d:	e8 18 eb ff ff       	call   c000223a <move_window>
c0003722:	89 c3                	mov    ebx,eax
c0003724:	85 c0                	test   eax,eax
c0003726:	75 49                	jne    c0003771 <load_xdir+0x12f>
c0003728:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000372b:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000372e:	75 3c                	jne    c000376c <load_xdir+0x12a>
c0003730:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003736:	77 0d                	ja     c0003745 <load_xdir+0x103>
c0003738:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000373b:	b9 20 00 00 00       	mov    ecx,0x20
c0003740:	e8 96 e3 ff ff       	call   c0001adb <mem_cpy>
c0003745:	83 c5 20             	add    ebp,0x20
c0003748:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000374c:	77 b3                	ja     c0003701 <load_xdir+0xbf>
c000374e:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003754:	77 1b                	ja     c0003771 <load_xdir+0x12f>
c0003756:	89 f8                	mov    eax,edi
c0003758:	e8 cd e7 ff ff       	call   c0001f2a <xdir_sum>
c000375d:	89 c1                	mov    ecx,eax
c000375f:	8d 47 02             	lea    eax,[edi+0x2]
c0003762:	e8 f5 e2 ff ff       	call   c0001a5c <ld_word>
c0003767:	66 39 c1             	cmp    cx,ax
c000376a:	74 05                	je     c0003771 <load_xdir+0x12f>
c000376c:	bb 02 00 00 00       	mov    ebx,0x2
c0003771:	83 c4 1c             	add    esp,0x1c
c0003774:	89 d8                	mov    eax,ebx
c0003776:	5b                   	pop    ebx
c0003777:	5e                   	pop    esi
c0003778:	5f                   	pop    edi
c0003779:	5d                   	pop    ebp
c000377a:	c3                   	ret    

c000377b <load_obj_xdir>:
c000377b:	53                   	push   ebx
c000377c:	89 c3                	mov    ebx,eax
c000377e:	83 ec 08             	sub    esp,0x8
c0003781:	8b 02                	mov    eax,DWORD PTR [edx]
c0003783:	89 03                	mov    DWORD PTR [ebx],eax
c0003785:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003788:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000378b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000378e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003791:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003794:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000379b:	30 c0                	xor    al,al
c000379d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037a4:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00037a7:	89 d8                	mov    eax,ebx
c00037a9:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00037ac:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00037af:	e8 04 f8 ff ff       	call   c0002fb8 <dir_sdi>
c00037b4:	85 c0                	test   eax,eax
c00037b6:	75 0b                	jne    c00037c3 <load_obj_xdir+0x48>
c00037b8:	89 d8                	mov    eax,ebx
c00037ba:	83 c4 08             	add    esp,0x8
c00037bd:	5b                   	pop    ebx
c00037be:	e9 7f fe ff ff       	jmp    c0003642 <load_xdir>
c00037c3:	83 c4 08             	add    esp,0x8
c00037c6:	5b                   	pop    ebx
c00037c7:	c3                   	ret    

c00037c8 <dir_read>:
c00037c8:	55                   	push   ebp
c00037c9:	bd 04 00 00 00       	mov    ebp,0x4
c00037ce:	57                   	push   edi
c00037cf:	56                   	push   esi
c00037d0:	be ff ff ff ff       	mov    esi,0xffffffff
c00037d5:	53                   	push   ebx
c00037d6:	89 c3                	mov    ebx,eax
c00037d8:	83 ec 1c             	sub    esp,0x1c
c00037db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037df:	8b 38                	mov    edi,DWORD PTR [eax]
c00037e1:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037ec:	89 c8                	mov    eax,ecx
c00037ee:	09 d0                	or     eax,edx
c00037f0:	0f 84 25 01 00 00    	je     c000391b <dir_read+0x153>
c00037f6:	89 f8                	mov    eax,edi
c00037f8:	e8 3d ea ff ff       	call   c000223a <move_window>
c00037fd:	89 c5                	mov    ebp,eax
c00037ff:	85 c0                	test   eax,eax
c0003801:	0f 85 23 01 00 00    	jne    c000392a <dir_read+0x162>
c0003807:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000380a:	8a 0a                	mov    cl,BYTE PTR [edx]
c000380c:	84 c9                	test   cl,cl
c000380e:	0f 84 11 01 00 00    	je     c0003925 <dir_read+0x15d>
c0003814:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003817:	75 48                	jne    c0003861 <dir_read+0x99>
c0003819:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000381e:	74 10                	je     c0003830 <dir_read+0x68>
c0003820:	80 f9 83             	cmp    cl,0x83
c0003823:	0f 85 dd 00 00 00    	jne    c0003906 <dir_read+0x13e>
c0003829:	31 ed                	xor    ebp,ebp
c000382b:	e9 08 01 00 00       	jmp    c0003938 <dir_read+0x170>
c0003830:	80 f9 85             	cmp    cl,0x85
c0003833:	0f 85 cd 00 00 00    	jne    c0003906 <dir_read+0x13e>
c0003839:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000383c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000383f:	89 d8                	mov    eax,ebx
c0003841:	e8 fc fd ff ff       	call   c0003642 <load_xdir>
c0003846:	89 c5                	mov    ebp,eax
c0003848:	85 c0                	test   eax,eax
c000384a:	0f 85 da 00 00 00    	jne    c000392a <dir_read+0x162>
c0003850:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003853:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003856:	83 e0 3f             	and    eax,0x3f
c0003859:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000385c:	e9 d7 00 00 00       	jmp    c0003938 <dir_read+0x170>
c0003861:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003864:	83 e0 3f             	and    eax,0x3f
c0003867:	80 f9 2e             	cmp    cl,0x2e
c000386a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000386e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003871:	0f 84 8a 00 00 00    	je     c0003901 <dir_read+0x139>
c0003877:	80 f9 e5             	cmp    cl,0xe5
c000387a:	0f 84 81 00 00 00    	je     c0003901 <dir_read+0x139>
c0003880:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003884:	83 e0 1f             	and    eax,0x1f
c0003887:	83 f8 08             	cmp    eax,0x8
c000388a:	0f 94 c0             	sete   al
c000388d:	0f b6 c0             	movzx  eax,al
c0003890:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003894:	75 6b                	jne    c0003901 <dir_read+0x139>
c0003896:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000389b:	75 44                	jne    c00038e1 <dir_read+0x119>
c000389d:	f6 c1 40             	test   cl,0x40
c00038a0:	74 12                	je     c00038b4 <dir_read+0xec>
c00038a2:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00038a5:	83 e1 bf             	and    ecx,0xffffffbf
c00038a8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00038ac:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00038af:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00038b2:	eb 06                	jmp    c00038ba <dir_read+0xf2>
c00038b4:	89 f0                	mov    eax,esi
c00038b6:	38 c8                	cmp    al,cl
c00038b8:	75 47                	jne    c0003901 <dir_read+0x139>
c00038ba:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038be:	be ff ff ff ff       	mov    esi,0xffffffff
c00038c3:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038c6:	75 3e                	jne    c0003906 <dir_read+0x13e>
c00038c8:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038cc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038cf:	e8 8a e4 ff ff       	call   c0001d5e <pick_lfn>
c00038d4:	85 c0                	test   eax,eax
c00038d6:	74 2e                	je     c0003906 <dir_read+0x13e>
c00038d8:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038dc:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038df:	eb 25                	jmp    c0003906 <dir_read+0x13e>
c00038e1:	89 f0                	mov    eax,esi
c00038e3:	84 c0                	test   al,al
c00038e5:	75 11                	jne    c00038f8 <dir_read+0x130>
c00038e7:	89 d0                	mov    eax,edx
c00038e9:	e8 2a e6 ff ff       	call   c0001f18 <sum_sfn>
c00038ee:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038f2:	0f 84 31 ff ff ff    	je     c0003829 <dir_read+0x61>
c00038f8:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038ff:	eb 37                	jmp    c0003938 <dir_read+0x170>
c0003901:	be ff ff ff ff       	mov    esi,0xffffffff
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 d8                	mov    eax,ebx
c000390a:	e8 01 fc ff ff       	call   c0003510 <dir_next>
c000390f:	89 c5                	mov    ebp,eax
c0003911:	85 c0                	test   eax,eax
c0003913:	0f 84 cd fe ff ff    	je     c00037e6 <dir_read+0x1e>
c0003919:	eb 0f                	jmp    c000392a <dir_read+0x162>
c000391b:	85 ed                	test   ebp,ebp
c000391d:	0f 84 06 ff ff ff    	je     c0003829 <dir_read+0x61>
c0003923:	eb 05                	jmp    c000392a <dir_read+0x162>
c0003925:	bd 04 00 00 00       	mov    ebp,0x4
c000392a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003931:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003938:	83 c4 1c             	add    esp,0x1c
c000393b:	89 e8                	mov    eax,ebp
c000393d:	5b                   	pop    ebx
c000393e:	5e                   	pop    esi
c000393f:	5f                   	pop    edi
c0003940:	5d                   	pop    ebp
c0003941:	c3                   	ret    

c0003942 <dir_alloc>:
c0003942:	55                   	push   ebp
c0003943:	89 d5                	mov    ebp,edx
c0003945:	57                   	push   edi
c0003946:	31 d2                	xor    edx,edx
c0003948:	56                   	push   esi
c0003949:	53                   	push   ebx
c000394a:	89 c3                	mov    ebx,eax
c000394c:	83 ec 0c             	sub    esp,0xc
c000394f:	8b 38                	mov    edi,DWORD PTR [eax]
c0003951:	e8 62 f6 ff ff       	call   c0002fb8 <dir_sdi>
c0003956:	85 c0                	test   eax,eax
c0003958:	75 4e                	jne    c00039a8 <dir_alloc+0x66>
c000395a:	31 f6                	xor    esi,esi
c000395c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000395f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003962:	89 f8                	mov    eax,edi
c0003964:	e8 d1 e8 ff ff       	call   c000223a <move_window>
c0003969:	85 c0                	test   eax,eax
c000396b:	75 3b                	jne    c00039a8 <dir_alloc+0x66>
c000396d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003970:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003973:	8a 12                	mov    dl,BYTE PTR [edx]
c0003975:	75 07                	jne    c000397e <dir_alloc+0x3c>
c0003977:	f7 d2                	not    edx
c0003979:	c0 ea 07             	shr    dl,0x7
c000397c:	eb 0d                	jmp    c000398b <dir_alloc+0x49>
c000397e:	84 d2                	test   dl,dl
c0003980:	0f 94 c1             	sete   cl
c0003983:	80 fa e5             	cmp    dl,0xe5
c0003986:	0f 94 c2             	sete   dl
c0003989:	09 ca                	or     edx,ecx
c000398b:	84 d2                	test   dl,dl
c000398d:	74 07                	je     c0003996 <dir_alloc+0x54>
c000398f:	46                   	inc    esi
c0003990:	39 ee                	cmp    esi,ebp
c0003992:	75 04                	jne    c0003998 <dir_alloc+0x56>
c0003994:	eb 1c                	jmp    c00039b2 <dir_alloc+0x70>
c0003996:	31 f6                	xor    esi,esi
c0003998:	ba 01 00 00 00       	mov    edx,0x1
c000399d:	89 d8                	mov    eax,ebx
c000399f:	e8 6c fb ff ff       	call   c0003510 <dir_next>
c00039a4:	85 c0                	test   eax,eax
c00039a6:	74 b4                	je     c000395c <dir_alloc+0x1a>
c00039a8:	83 f8 04             	cmp    eax,0x4
c00039ab:	75 05                	jne    c00039b2 <dir_alloc+0x70>
c00039ad:	b8 07 00 00 00       	mov    eax,0x7
c00039b2:	83 c4 0c             	add    esp,0xc
c00039b5:	5b                   	pop    ebx
c00039b6:	5e                   	pop    esi
c00039b7:	5f                   	pop    edi
c00039b8:	5d                   	pop    ebp
c00039b9:	c3                   	ret    

c00039ba <store_xdir>:
c00039ba:	55                   	push   ebp
c00039bb:	57                   	push   edi
c00039bc:	89 c7                	mov    edi,eax
c00039be:	56                   	push   esi
c00039bf:	53                   	push   ebx
c00039c0:	83 ec 0c             	sub    esp,0xc
c00039c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00039c5:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039c8:	89 e8                	mov    eax,ebp
c00039ca:	e8 5b e5 ff ff       	call   c0001f2a <xdir_sum>
c00039cf:	0f b7 d0             	movzx  edx,ax
c00039d2:	8d 45 02             	lea    eax,[ebp+0x2]
c00039d5:	e8 f4 e0 ff ff       	call   c0001ace <st_word>
c00039da:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039de:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039e1:	89 f8                	mov    eax,edi
c00039e3:	e8 d0 f5 ff ff       	call   c0002fb8 <dir_sdi>
c00039e8:	89 c6                	mov    esi,eax
c00039ea:	85 f6                	test   esi,esi
c00039ec:	75 3d                	jne    c0003a2b <store_xdir+0x71>
c00039ee:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039f1:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039f4:	8b 07                	mov    eax,DWORD PTR [edi]
c00039f6:	e8 3f e8 ff ff       	call   c000223a <move_window>
c00039fb:	89 c6                	mov    esi,eax
c00039fd:	85 c0                	test   eax,eax
c00039ff:	75 2a                	jne    c0003a2b <store_xdir+0x71>
c0003a01:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003a04:	b9 20 00 00 00       	mov    ecx,0x20
c0003a09:	89 ea                	mov    edx,ebp
c0003a0b:	e8 cb e0 ff ff       	call   c0001adb <mem_cpy>
c0003a10:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a12:	85 db                	test   ebx,ebx
c0003a14:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a18:	74 11                	je     c0003a2b <store_xdir+0x71>
c0003a1a:	31 d2                	xor    edx,edx
c0003a1c:	89 f8                	mov    eax,edi
c0003a1e:	83 c5 20             	add    ebp,0x20
c0003a21:	e8 ea fa ff ff       	call   c0003510 <dir_next>
c0003a26:	4b                   	dec    ebx
c0003a27:	89 c6                	mov    esi,eax
c0003a29:	eb bf                	jmp    c00039ea <store_xdir+0x30>
c0003a2b:	89 f0                	mov    eax,esi
c0003a2d:	83 fe 02             	cmp    esi,0x2
c0003a30:	76 05                	jbe    c0003a37 <store_xdir+0x7d>
c0003a32:	b8 02 00 00 00       	mov    eax,0x2
c0003a37:	83 c4 0c             	add    esp,0xc
c0003a3a:	5b                   	pop    ebx
c0003a3b:	5e                   	pop    esi
c0003a3c:	5f                   	pop    edi
c0003a3d:	5d                   	pop    ebp
c0003a3e:	c3                   	ret    

c0003a3f <dir_remove>:
c0003a3f:	57                   	push   edi
c0003a40:	56                   	push   esi
c0003a41:	53                   	push   ebx
c0003a42:	89 c3                	mov    ebx,eax
c0003a44:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a47:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a49:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a4c:	83 fa ff             	cmp    edx,0xffffffff
c0003a4f:	74 09                	je     c0003a5a <dir_remove+0x1b>
c0003a51:	e8 62 f5 ff ff       	call   c0002fb8 <dir_sdi>
c0003a56:	85 c0                	test   eax,eax
c0003a58:	75 41                	jne    c0003a9b <dir_remove+0x5c>
c0003a5a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a60:	89 f0                	mov    eax,esi
c0003a62:	e8 d3 e7 ff ff       	call   c000223a <move_window>
c0003a67:	85 c0                	test   eax,eax
c0003a69:	75 26                	jne    c0003a91 <dir_remove+0x52>
c0003a6b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6e:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a71:	75 05                	jne    c0003a78 <dir_remove+0x39>
c0003a73:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a76:	eb 03                	jmp    c0003a7b <dir_remove+0x3c>
c0003a78:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a7b:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a7f:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a82:	73 17                	jae    c0003a9b <dir_remove+0x5c>
c0003a84:	31 d2                	xor    edx,edx
c0003a86:	89 d8                	mov    eax,ebx
c0003a88:	e8 83 fa ff ff       	call   c0003510 <dir_next>
c0003a8d:	85 c0                	test   eax,eax
c0003a8f:	74 c9                	je     c0003a5a <dir_remove+0x1b>
c0003a91:	83 f8 04             	cmp    eax,0x4
c0003a94:	75 05                	jne    c0003a9b <dir_remove+0x5c>
c0003a96:	b8 02 00 00 00       	mov    eax,0x2
c0003a9b:	5b                   	pop    ebx
c0003a9c:	5e                   	pop    esi
c0003a9d:	5f                   	pop    edi
c0003a9e:	c3                   	ret    

c0003a9f <create_name>:
c0003a9f:	55                   	push   ebp
c0003aa0:	89 d5                	mov    ebp,edx
c0003aa2:	57                   	push   edi
c0003aa3:	89 c7                	mov    edi,eax
c0003aa5:	56                   	push   esi
c0003aa6:	31 f6                	xor    esi,esi
c0003aa8:	53                   	push   ebx
c0003aa9:	83 ec 3c             	sub    esp,0x3c
c0003aac:	8b 02                	mov    eax,DWORD PTR [edx]
c0003aae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ab2:	8b 07                	mov    eax,DWORD PTR [edi]
c0003ab4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003ab7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003abb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003abf:	e8 72 e0 ff ff       	call   c0001b36 <tchar2uni>
c0003ac4:	89 c3                	mov    ebx,eax
c0003ac6:	83 f8 ff             	cmp    eax,0xffffffff
c0003ac9:	75 0a                	jne    c0003ad5 <create_name+0x36>
c0003acb:	b8 06 00 00 00       	mov    eax,0x6
c0003ad0:	e9 9e 02 00 00       	jmp    c0003d73 <create_name+0x2d4>
c0003ad5:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ada:	76 0c                	jbe    c0003ae8 <create_name+0x49>
c0003adc:	c1 e8 10             	shr    eax,0x10
c0003adf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ae3:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ae7:	46                   	inc    esi
c0003ae8:	66 83 fb 1f          	cmp    bx,0x1f
c0003aec:	76 4f                	jbe    c0003b3d <create_name+0x9e>
c0003aee:	66 83 fb 5c          	cmp    bx,0x5c
c0003af2:	74 35                	je     c0003b29 <create_name+0x8a>
c0003af4:	66 83 fb 2f          	cmp    bx,0x2f
c0003af8:	74 2f                	je     c0003b29 <create_name+0x8a>
c0003afa:	66 83 fb 7f          	cmp    bx,0x7f
c0003afe:	77 11                	ja     c0003b11 <create_name+0x72>
c0003b00:	0f b7 d3             	movzx  edx,bx
c0003b03:	b8 32 82 02 c0       	mov    eax,0xc0028232
c0003b08:	e8 11 e0 ff ff       	call   c0001b1e <chk_chr>
c0003b0d:	85 c0                	test   eax,eax
c0003b0f:	75 ba                	jne    c0003acb <create_name+0x2c>
c0003b11:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b17:	77 b2                	ja     c0003acb <create_name+0x2c>
c0003b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b1d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b21:	46                   	inc    esi
c0003b22:	eb 97                	jmp    c0003abb <create_name+0x1c>
c0003b24:	40                   	inc    eax
c0003b25:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b29:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b2d:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b2f:	80 fa 2f             	cmp    dl,0x2f
c0003b32:	74 f0                	je     c0003b24 <create_name+0x85>
c0003b34:	80 fa 5c             	cmp    dl,0x5c
c0003b37:	74 eb                	je     c0003b24 <create_name+0x85>
c0003b39:	31 db                	xor    ebx,ebx
c0003b3b:	eb 02                	jmp    c0003b3f <create_name+0xa0>
c0003b3d:	b3 04                	mov    bl,0x4
c0003b3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b43:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b46:	85 f6                	test   esi,esi
c0003b48:	74 18                	je     c0003b62 <create_name+0xc3>
c0003b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b4e:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b53:	66 83 f8 20          	cmp    ax,0x20
c0003b57:	74 06                	je     c0003b5f <create_name+0xc0>
c0003b59:	66 83 f8 2e          	cmp    ax,0x2e
c0003b5d:	75 03                	jne    c0003b62 <create_name+0xc3>
c0003b5f:	4e                   	dec    esi
c0003b60:	eb e4                	jmp    c0003b46 <create_name+0xa7>
c0003b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b66:	31 ed                	xor    ebp,ebp
c0003b68:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b6e:	85 f6                	test   esi,esi
c0003b70:	0f 84 55 ff ff ff    	je     c0003acb <create_name+0x2c>
c0003b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b7a:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b7d:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b81:	66 83 f8 20          	cmp    ax,0x20
c0003b85:	75 04                	jne    c0003b8b <create_name+0xec>
c0003b87:	89 d5                	mov    ebp,edx
c0003b89:	eb eb                	jmp    c0003b76 <create_name+0xd7>
c0003b8b:	85 ed                	test   ebp,ebp
c0003b8d:	75 06                	jne    c0003b95 <create_name+0xf6>
c0003b8f:	66 83 f8 2e          	cmp    ax,0x2e
c0003b93:	75 08                	jne    c0003b9d <create_name+0xfe>
c0003b95:	83 cb 03             	or     ebx,0x3
c0003b98:	eb 03                	jmp    c0003b9d <create_name+0xfe>
c0003b9a:	4e                   	dec    esi
c0003b9b:	74 0c                	je     c0003ba9 <create_name+0x10a>
c0003b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ba1:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ba7:	75 f1                	jne    c0003b9a <create_name+0xfb>
c0003ba9:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bae:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003bb1:	ba 20 00 00 00       	mov    edx,0x20
c0003bb6:	e8 35 df ff ff       	call   c0001af0 <mem_set>
c0003bbb:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003bc3:	31 c9                	xor    ecx,ecx
c0003bc5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003bca:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bcd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003bd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bd5:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bd9:	66 85 ed             	test   bp,bp
c0003bdc:	0f 84 30 01 00 00    	je     c0003d12 <create_name+0x273>
c0003be2:	66 83 fd 20          	cmp    bp,0x20
c0003be6:	74 10                	je     c0003bf8 <create_name+0x159>
c0003be8:	66 83 fd 2e          	cmp    bp,0x2e
c0003bec:	75 13                	jne    c0003c01 <create_name+0x162>
c0003bee:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bf2:	0f 84 6b 01 00 00    	je     c0003d63 <create_name+0x2c4>
c0003bf8:	83 cb 03             	or     ebx,0x3
c0003bfb:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bff:	eb c9                	jmp    c0003bca <create_name+0x12b>
c0003c01:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003c05:	73 0b                	jae    c0003c12 <create_name+0x173>
c0003c07:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c0b:	75 47                	jne    c0003c54 <create_name+0x1b5>
c0003c0d:	e9 51 01 00 00       	jmp    c0003d63 <create_name+0x2c4>
c0003c12:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c17:	75 10                	jne    c0003c29 <create_name+0x18a>
c0003c19:	83 cb 03             	or     ebx,0x3
c0003c1c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c24:	e9 e9 00 00 00       	jmp    c0003d12 <create_name+0x273>
c0003c29:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c2d:	74 0d                	je     c0003c3c <create_name+0x19d>
c0003c2f:	83 cb 03             	or     ebx,0x3
c0003c32:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c36:	0f 87 d6 00 00 00    	ja     c0003d12 <create_name+0x273>
c0003c3c:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c41:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c45:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c4d:	b9 08 00 00 00       	mov    ecx,0x8
c0003c52:	eb a7                	jmp    c0003bfb <create_name+0x15c>
c0003c54:	66 83 fd 7f          	cmp    bp,0x7f
c0003c58:	76 68                	jbe    c0003cc2 <create_name+0x223>
c0003c5a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c5e:	88 da                	mov    dl,bl
c0003c60:	83 ca 02             	or     edx,0x2
c0003c63:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c67:	50                   	push   eax
c0003c68:	50                   	push   eax
c0003c69:	68 b5 01 00 00       	push   0x1b5
c0003c6e:	55                   	push   ebp
c0003c6f:	e8 48 46 00 00       	call   c00082bc <ff_uni2oem>
c0003c74:	83 c4 10             	add    esp,0x10
c0003c77:	89 c5                	mov    ebp,eax
c0003c79:	a8 80                	test   al,0x80
c0003c7b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c7f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c83:	74 0c                	je     c0003c91 <create_name+0x1f2>
c0003c85:	83 e5 7f             	and    ebp,0x7f
c0003c88:	0f b6 ad 80 81 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd7e80]
c0003c8f:	eb 2a                	jmp    c0003cbb <create_name+0x21c>
c0003c91:	66 3d ff 00          	cmp    ax,0xff
c0003c95:	76 24                	jbe    c0003cbb <create_name+0x21c>
c0003c97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c9b:	48                   	dec    eax
c0003c9c:	39 c8                	cmp    eax,ecx
c0003c9e:	77 0c                	ja     c0003cac <create_name+0x20d>
c0003ca0:	83 cb 03             	or     ebx,0x3
c0003ca3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ca7:	e9 4f ff ff ff       	jmp    c0003bfb <create_name+0x15c>
c0003cac:	89 e8                	mov    eax,ebp
c0003cae:	88 d3                	mov    bl,dl
c0003cb0:	66 c1 e8 08          	shr    ax,0x8
c0003cb4:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cb8:	41                   	inc    ecx
c0003cb9:	eb 4b                	jmp    c0003d06 <create_name+0x267>
c0003cbb:	88 d3                	mov    bl,dl
c0003cbd:	66 85 ed             	test   bp,bp
c0003cc0:	74 19                	je     c0003cdb <create_name+0x23c>
c0003cc2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cc6:	0f b7 d5             	movzx  edx,bp
c0003cc9:	b8 3b 82 02 c0       	mov    eax,0xc002823b
c0003cce:	e8 4b de ff ff       	call   c0001b1e <chk_chr>
c0003cd3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cd7:	85 c0                	test   eax,eax
c0003cd9:	74 0a                	je     c0003ce5 <create_name+0x246>
c0003cdb:	83 cb 03             	or     ebx,0x3
c0003cde:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ce3:	eb 21                	jmp    c0003d06 <create_name+0x267>
c0003ce5:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ce8:	66 83 f8 19          	cmp    ax,0x19
c0003cec:	77 07                	ja     c0003cf5 <create_name+0x256>
c0003cee:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003cf3:	eb 11                	jmp    c0003d06 <create_name+0x267>
c0003cf5:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cf8:	66 83 f8 19          	cmp    ax,0x19
c0003cfc:	77 08                	ja     c0003d06 <create_name+0x267>
c0003cfe:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003d03:	83 ed 20             	sub    ebp,0x20
c0003d06:	89 e8                	mov    eax,ebp
c0003d08:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003d0c:	41                   	inc    ecx
c0003d0d:	e9 e9 fe ff ff       	jmp    c0003bfb <create_name+0x15c>
c0003d12:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003d16:	75 04                	jne    c0003d1c <create_name+0x27d>
c0003d18:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d1c:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d21:	75 05                	jne    c0003d28 <create_name+0x289>
c0003d23:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d28:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d2c:	83 e0 0c             	and    eax,0xc
c0003d2f:	3c 0c                	cmp    al,0xc
c0003d31:	74 0b                	je     c0003d3e <create_name+0x29f>
c0003d33:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d37:	83 e0 03             	and    eax,0x3
c0003d3a:	3c 03                	cmp    al,0x3
c0003d3c:	75 05                	jne    c0003d43 <create_name+0x2a4>
c0003d3e:	83 cb 02             	or     ebx,0x2
c0003d41:	eb 19                	jmp    c0003d5c <create_name+0x2bd>
c0003d43:	f6 c3 02             	test   bl,0x2
c0003d46:	75 14                	jne    c0003d5c <create_name+0x2bd>
c0003d48:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d4d:	74 03                	je     c0003d52 <create_name+0x2b3>
c0003d4f:	83 cb 10             	or     ebx,0x10
c0003d52:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d57:	74 03                	je     c0003d5c <create_name+0x2bd>
c0003d59:	83 cb 08             	or     ebx,0x8
c0003d5c:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d5f:	31 c0                	xor    eax,eax
c0003d61:	eb 10                	jmp    c0003d73 <create_name+0x2d4>
c0003d63:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d68:	0f 85 ce fe ff ff    	jne    c0003c3c <create_name+0x19d>
c0003d6e:	e9 a6 fe ff ff       	jmp    c0003c19 <create_name+0x17a>
c0003d73:	83 c4 3c             	add    esp,0x3c
c0003d76:	5b                   	pop    ebx
c0003d77:	5e                   	pop    esi
c0003d78:	5f                   	pop    edi
c0003d79:	5d                   	pop    ebp
c0003d7a:	c3                   	ret    

c0003d7b <xname_sum>:
c0003d7b:	56                   	push   esi
c0003d7c:	53                   	push   ebx
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	51                   	push   ecx
c0003d80:	31 db                	xor    ebx,ebx
c0003d82:	83 c6 02             	add    esi,0x2
c0003d85:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d89:	66 85 c0             	test   ax,ax
c0003d8c:	74 1f                	je     c0003dad <xname_sum+0x32>
c0003d8e:	83 ec 0c             	sub    esp,0xc
c0003d91:	66 d1 cb             	ror    bx,1
c0003d94:	50                   	push   eax
c0003d95:	e8 1e 46 00 00       	call   c00083b8 <ff_wtoupper>
c0003d9a:	83 c4 10             	add    esp,0x10
c0003d9d:	0f b6 d0             	movzx  edx,al
c0003da0:	66 c1 e8 08          	shr    ax,0x8
c0003da4:	01 d3                	add    ebx,edx
c0003da6:	66 d1 cb             	ror    bx,1
c0003da9:	01 c3                	add    ebx,eax
c0003dab:	eb d5                	jmp    c0003d82 <xname_sum+0x7>
c0003dad:	89 d8                	mov    eax,ebx
c0003daf:	5a                   	pop    edx
c0003db0:	5b                   	pop    ebx
c0003db1:	5e                   	pop    esi
c0003db2:	c3                   	ret    

c0003db3 <create_xdir>:
c0003db3:	55                   	push   ebp
c0003db4:	b9 40 00 00 00       	mov    ecx,0x40
c0003db9:	57                   	push   edi
c0003dba:	bd 01 00 00 00       	mov    ebp,0x1
c0003dbf:	56                   	push   esi
c0003dc0:	31 ff                	xor    edi,edi
c0003dc2:	53                   	push   ebx
c0003dc3:	be 40 00 00 00       	mov    esi,0x40
c0003dc8:	89 c3                	mov    ebx,eax
c0003dca:	83 ec 1c             	sub    esp,0x1c
c0003dcd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003dd1:	31 d2                	xor    edx,edx
c0003dd3:	e8 18 dd ff ff       	call   c0001af0 <mem_set>
c0003dd8:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003ddb:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ddf:	31 c9                	xor    ecx,ecx
c0003de1:	8d 46 01             	lea    eax,[esi+0x1]
c0003de4:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003de8:	83 c6 02             	add    esi,0x2
c0003deb:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003def:	66 85 ed             	test   bp,bp
c0003df2:	74 12                	je     c0003e06 <create_xdir+0x53>
c0003df4:	0f b6 c1             	movzx  eax,cl
c0003df7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dfb:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003dff:	66 83 fd 01          	cmp    bp,0x1
c0003e03:	80 d9 ff             	sbb    cl,0xff
c0003e06:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003e09:	0f b7 d5             	movzx  edx,bp
c0003e0c:	83 c6 02             	add    esi,0x2
c0003e0f:	e8 ba dc ff ff       	call   c0001ace <st_word>
c0003e14:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003e1a:	75 d3                	jne    c0003def <create_xdir+0x3c>
c0003e1c:	8d 47 01             	lea    eax,[edi+0x1]
c0003e1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e23:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e27:	0f b6 c1             	movzx  eax,cl
c0003e2a:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e2f:	74 07                	je     c0003e38 <create_xdir+0x85>
c0003e31:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e36:	eb a9                	jmp    c0003de1 <create_xdir+0x2e>
c0003e38:	8d 47 02             	lea    eax,[edi+0x2]
c0003e3b:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e3e:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e41:	89 d0                	mov    eax,edx
c0003e43:	e8 33 ff ff ff       	call   c0003d7b <xname_sum>
c0003e48:	83 c4 1c             	add    esp,0x1c
c0003e4b:	0f b7 d0             	movzx  edx,ax
c0003e4e:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e51:	5b                   	pop    ebx
c0003e52:	5e                   	pop    esi
c0003e53:	5f                   	pop    edi
c0003e54:	5d                   	pop    ebp
c0003e55:	e9 74 dc ff ff       	jmp    c0001ace <st_word>

c0003e5a <cmp_lfn>:
c0003e5a:	55                   	push   ebp
c0003e5b:	57                   	push   edi
c0003e5c:	89 d7                	mov    edi,edx
c0003e5e:	56                   	push   esi
c0003e5f:	53                   	push   ebx
c0003e60:	83 ec 1c             	sub    esp,0x1c
c0003e63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e67:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e6a:	e8 ed db ff ff       	call   c0001a5c <ld_word>
c0003e6f:	66 85 c0             	test   ax,ax
c0003e72:	74 07                	je     c0003e7b <cmp_lfn+0x21>
c0003e74:	31 c0                	xor    eax,eax
c0003e76:	e9 9a 00 00 00       	jmp    c0003f15 <cmp_lfn+0xbb>
c0003e7b:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e7d:	bd 01 00 00 00       	mov    ebp,0x1
c0003e82:	83 e3 3f             	and    ebx,0x3f
c0003e85:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e8d:	4b                   	dec    ebx
c0003e8e:	6b db 0d             	imul   ebx,ebx,0xd
c0003e91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e95:	0f b6 80 00 82 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7e00]
c0003e9c:	01 f8                	add    eax,edi
c0003e9e:	e8 b9 db ff ff       	call   c0001a5c <ld_word>
c0003ea3:	66 85 ed             	test   bp,bp
c0003ea6:	89 c6                	mov    esi,eax
c0003ea8:	74 3c                	je     c0003ee6 <cmp_lfn+0x8c>
c0003eaa:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003eb0:	77 c2                	ja     c0003e74 <cmp_lfn+0x1a>
c0003eb2:	83 ec 0c             	sub    esp,0xc
c0003eb5:	0f b7 c0             	movzx  eax,ax
c0003eb8:	50                   	push   eax
c0003eb9:	e8 fa 44 00 00       	call   c00083b8 <ff_wtoupper>
c0003ebe:	89 c5                	mov    ebp,eax
c0003ec0:	8d 43 01             	lea    eax,[ebx+0x1]
c0003ec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003ec7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003ecb:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003ecf:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ed2:	e8 e1 44 00 00       	call   c00083b8 <ff_wtoupper>
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	39 c5                	cmp    ebp,eax
c0003edc:	75 96                	jne    c0003e74 <cmp_lfn+0x1a>
c0003ede:	89 f5                	mov    ebp,esi
c0003ee0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ee4:	eb 04                	jmp    c0003eea <cmp_lfn+0x90>
c0003ee6:	66 46                	inc    si
c0003ee8:	75 8a                	jne    c0003e74 <cmp_lfn+0x1a>
c0003eea:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003eee:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ef3:	75 9c                	jne    c0003e91 <cmp_lfn+0x37>
c0003ef5:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ef8:	74 16                	je     c0003f10 <cmp_lfn+0xb6>
c0003efa:	66 85 ed             	test   bp,bp
c0003efd:	74 11                	je     c0003f10 <cmp_lfn+0xb6>
c0003eff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003f03:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003f08:	0f 94 c0             	sete   al
c0003f0b:	0f b6 c0             	movzx  eax,al
c0003f0e:	eb 05                	jmp    c0003f15 <cmp_lfn+0xbb>
c0003f10:	b8 01 00 00 00       	mov    eax,0x1
c0003f15:	83 c4 1c             	add    esp,0x1c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <dir_find>:
c0003f1d:	55                   	push   ebp
c0003f1e:	31 d2                	xor    edx,edx
c0003f20:	57                   	push   edi
c0003f21:	56                   	push   esi
c0003f22:	53                   	push   ebx
c0003f23:	89 c3                	mov    ebx,eax
c0003f25:	83 ec 1c             	sub    esp,0x1c
c0003f28:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f2a:	e8 89 f0 ff ff       	call   c0002fb8 <dir_sdi>
c0003f2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 85 9e 01 00 00    	jne    c00040d8 <dir_find+0x1bb>
c0003f3a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f3d:	0f 85 8d 00 00 00    	jne    c0003fd0 <dir_find+0xb3>
c0003f43:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f46:	e8 30 fe ff ff       	call   c0003d7b <xname_sum>
c0003f4b:	89 c7                	mov    edi,eax
c0003f4d:	31 d2                	xor    edx,edx
c0003f4f:	89 d8                	mov    eax,ebx
c0003f51:	e8 72 f8 ff ff       	call   c00037c8 <dir_read>
c0003f56:	85 c0                	test   eax,eax
c0003f58:	0f 85 5e 01 00 00    	jne    c00040bc <dir_find+0x19f>
c0003f5e:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f61:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f64:	e8 f3 da ff ff       	call   c0001a5c <ld_word>
c0003f69:	66 39 f8             	cmp    ax,di
c0003f6c:	75 df                	jne    c0003f4d <dir_find+0x30>
c0003f6e:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f71:	31 ed                	xor    ebp,ebp
c0003f73:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f77:	ba 40 00 00 00       	mov    edx,0x40
c0003f7c:	89 e9                	mov    ecx,ebp
c0003f7e:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f82:	0f 84 42 01 00 00    	je     c00040ca <dir_find+0x1ad>
c0003f88:	f6 c2 1f             	test   dl,0x1f
c0003f8b:	75 03                	jne    c0003f90 <dir_find+0x73>
c0003f8d:	83 c2 02             	add    edx,0x2
c0003f90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f94:	89 d0                	mov    eax,edx
c0003f96:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f99:	e8 be da ff ff       	call   c0001a5c <ld_word>
c0003f9e:	83 ec 0c             	sub    esp,0xc
c0003fa1:	0f b7 c0             	movzx  eax,ax
c0003fa4:	50                   	push   eax
c0003fa5:	e8 0e 44 00 00       	call   c00083b8 <ff_wtoupper>
c0003faa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003fae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fb1:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003fb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fb8:	e8 fb 43 00 00       	call   c00083b8 <ff_wtoupper>
c0003fbd:	83 c4 10             	add    esp,0x10
c0003fc0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fc4:	75 87                	jne    c0003f4d <dir_find+0x30>
c0003fc6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fca:	45                   	inc    ebp
c0003fcb:	83 c2 02             	add    edx,0x2
c0003fce:	eb ac                	jmp    c0003f7c <dir_find+0x5f>
c0003fd0:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fd7:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fdc:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fe1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fe4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fe7:	89 f0                	mov    eax,esi
c0003fe9:	e8 4c e2 ff ff       	call   c000223a <move_window>
c0003fee:	85 c0                	test   eax,eax
c0003ff0:	0f 85 c6 00 00 00    	jne    c00040bc <dir_find+0x19f>
c0003ff6:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003ff9:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003ffc:	84 c9                	test   cl,cl
c0003ffe:	0f 84 bd 00 00 00    	je     c00040c1 <dir_find+0x1a4>
c0004004:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004007:	88 d0                	mov    al,dl
c0004009:	83 e0 3f             	and    eax,0x3f
c000400c:	80 f9 e5             	cmp    cl,0xe5
c000400f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004012:	0f 84 87 00 00 00    	je     c000409f <dir_find+0x182>
c0004018:	80 e2 08             	and    dl,0x8
c000401b:	74 06                	je     c0004023 <dir_find+0x106>
c000401d:	3c 0f                	cmp    al,0xf
c000401f:	75 7e                	jne    c000409f <dir_find+0x182>
c0004021:	eb 04                	jmp    c0004027 <dir_find+0x10a>
c0004023:	3c 0f                	cmp    al,0xf
c0004025:	75 4c                	jne    c0004073 <dir_find+0x156>
c0004027:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000402b:	75 7e                	jne    c00040ab <dir_find+0x18e>
c000402d:	f6 c1 40             	test   cl,0x40
c0004030:	74 12                	je     c0004044 <dir_find+0x127>
c0004032:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004035:	83 e1 bf             	and    ecx,0xffffffbf
c0004038:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000403c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000403f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004042:	eb 06                	jmp    c000404a <dir_find+0x12d>
c0004044:	89 f8                	mov    eax,edi
c0004046:	38 c8                	cmp    al,cl
c0004048:	75 5c                	jne    c00040a6 <dir_find+0x189>
c000404a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000404e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004053:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004056:	75 53                	jne    c00040ab <dir_find+0x18e>
c0004058:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000405c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000405f:	89 ea                	mov    edx,ebp
c0004061:	e8 f4 fd ff ff       	call   c0003e5a <cmp_lfn>
c0004066:	85 c0                	test   eax,eax
c0004068:	74 41                	je     c00040ab <dir_find+0x18e>
c000406a:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000406e:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004071:	eb 38                	jmp    c00040ab <dir_find+0x18e>
c0004073:	89 f8                	mov    eax,edi
c0004075:	84 c0                	test   al,al
c0004077:	75 0d                	jne    c0004086 <dir_find+0x169>
c0004079:	89 e8                	mov    eax,ebp
c000407b:	e8 98 de ff ff       	call   c0001f18 <sum_sfn>
c0004080:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004084:	74 52                	je     c00040d8 <dir_find+0x1bb>
c0004086:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000408a:	75 13                	jne    c000409f <dir_find+0x182>
c000408c:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000408f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004094:	89 e8                	mov    eax,ebp
c0004096:	e8 60 da ff ff       	call   c0001afb <mem_cmp>
c000409b:	85 c0                	test   eax,eax
c000409d:	74 39                	je     c00040d8 <dir_find+0x1bb>
c000409f:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040ab:	31 d2                	xor    edx,edx
c00040ad:	89 d8                	mov    eax,ebx
c00040af:	e8 5c f4 ff ff       	call   c0003510 <dir_next>
c00040b4:	85 c0                	test   eax,eax
c00040b6:	0f 84 25 ff ff ff    	je     c0003fe1 <dir_find+0xc4>
c00040bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00040bf:	eb 17                	jmp    c00040d8 <dir_find+0x1bb>
c00040c1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040c8:	eb 0e                	jmp    c00040d8 <dir_find+0x1bb>
c00040ca:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040cd:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040d2:	0f 85 75 fe ff ff    	jne    c0003f4d <dir_find+0x30>
c00040d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040db:	83 c4 1c             	add    esp,0x1c
c00040de:	5b                   	pop    ebx
c00040df:	5e                   	pop    esi
c00040e0:	5f                   	pop    edi
c00040e1:	5d                   	pop    ebp
c00040e2:	c3                   	ret    

c00040e3 <dir_register>:
c00040e3:	55                   	push   ebp
c00040e4:	57                   	push   edi
c00040e5:	56                   	push   esi
c00040e6:	be 06 00 00 00       	mov    esi,0x6
c00040eb:	53                   	push   ebx
c00040ec:	83 ec 6c             	sub    esp,0x6c
c00040ef:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040f3:	0f 85 62 02 00 00    	jne    c000435b <dir_register+0x278>
c00040f9:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040fb:	31 ff                	xor    edi,edi
c00040fd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004100:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004105:	74 03                	je     c000410a <dir_register+0x27>
c0004107:	47                   	inc    edi
c0004108:	eb f6                	jmp    c0004100 <dir_register+0x1d>
c000410a:	89 c3                	mov    ebx,eax
c000410c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004110:	0f 85 e1 00 00 00    	jne    c00041f7 <dir_register+0x114>
c0004116:	83 c7 0e             	add    edi,0xe
c0004119:	b9 0f 00 00 00       	mov    ecx,0xf
c000411e:	89 f8                	mov    eax,edi
c0004120:	31 d2                	xor    edx,edx
c0004122:	f7 f1                	div    ecx
c0004124:	8d 50 02             	lea    edx,[eax+0x2]
c0004127:	89 c7                	mov    edi,eax
c0004129:	89 d8                	mov    eax,ebx
c000412b:	e8 12 f8 ff ff       	call   c0003942 <dir_alloc>
c0004130:	89 c6                	mov    esi,eax
c0004132:	85 c0                	test   eax,eax
c0004134:	0f 85 21 02 00 00    	jne    c000435b <dir_register+0x278>
c000413a:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004140:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004143:	c1 e7 05             	shl    edi,0x5
c0004146:	29 f8                	sub    eax,edi
c0004148:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000414b:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000414e:	a8 04                	test   al,0x4
c0004150:	0f 84 91 00 00 00    	je     c00041e7 <dir_register+0x104>
c0004156:	83 e0 fb             	and    eax,0xfffffffb
c0004159:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000415c:	89 d8                	mov    eax,ebx
c000415e:	e8 25 ec ff ff       	call   c0002d88 <fill_first_frag>
c0004163:	85 c0                	test   eax,eax
c0004165:	0f 85 ee 01 00 00    	jne    c0004359 <dir_register+0x276>
c000416b:	83 c9 ff             	or     ecx,0xffffffff
c000416e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004171:	89 d8                	mov    eax,ebx
c0004173:	e8 db eb ff ff       	call   c0002d53 <fill_last_frag>
c0004178:	85 c0                	test   eax,eax
c000417a:	0f 85 d9 01 00 00    	jne    c0004359 <dir_register+0x276>
c0004180:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004184:	74 61                	je     c00041e7 <dir_register+0x104>
c0004186:	89 da                	mov    edx,ebx
c0004188:	8d 44 24 14          	lea    eax,[esp+0x14]
c000418c:	e8 ea f5 ff ff       	call   c000377b <load_obj_xdir>
c0004191:	85 c0                	test   eax,eax
c0004193:	0f 85 c0 01 00 00    	jne    c0004359 <dir_register+0x276>
c0004199:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000419d:	31 c9                	xor    ecx,ecx
c000419f:	c1 e2 09             	shl    edx,0x9
c00041a2:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00041a5:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00041a8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00041ab:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00041ae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041b1:	83 c0 38             	add    eax,0x38
c00041b4:	e8 1c d9 ff ff       	call   c0001ad5 <st_qword>
c00041b9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041bc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041bf:	83 c0 28             	add    eax,0x28
c00041c2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041c5:	e8 0b d9 ff ff       	call   c0001ad5 <st_qword>
c00041ca:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041cd:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041d0:	83 c8 01             	or     eax,0x1
c00041d3:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041da:	e8 db f7 ff ff       	call   c00039ba <store_xdir>
c00041df:	85 c0                	test   eax,eax
c00041e1:	0f 85 72 01 00 00    	jne    c0004359 <dir_register+0x276>
c00041e7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041ed:	e8 c1 fb ff ff       	call   c0003db3 <create_xdir>
c00041f2:	e9 64 01 00 00       	jmp    c000435b <dir_register+0x278>
c00041f7:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041fa:	b9 0c 00 00 00       	mov    ecx,0xc
c00041ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004203:	89 c2                	mov    edx,eax
c0004205:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004209:	e8 cd d8 ff ff       	call   c0001adb <mem_cpy>
c000420e:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004213:	74 58                	je     c000426d <dir_register+0x18a>
c0004215:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004219:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004221:	83 ec 0c             	sub    esp,0xc
c0004224:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004227:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000422b:	8d 54 24 24          	lea    edx,[esp+0x24]
c000422f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004233:	e8 24 dc ff ff       	call   c0001e5c <gen_numname>
c0004238:	89 d8                	mov    eax,ebx
c000423a:	e8 de fc ff ff       	call   c0003f1d <dir_find>
c000423f:	83 c4 10             	add    esp,0x10
c0004242:	89 c6                	mov    esi,eax
c0004244:	85 c0                	test   eax,eax
c0004246:	75 15                	jne    c000425d <dir_register+0x17a>
c0004248:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000424c:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004251:	75 ce                	jne    c0004221 <dir_register+0x13e>
c0004253:	be 07 00 00 00       	mov    esi,0x7
c0004258:	e9 fe 00 00 00       	jmp    c000435b <dir_register+0x278>
c000425d:	83 f8 04             	cmp    eax,0x4
c0004260:	0f 85 f5 00 00 00    	jne    c000435b <dir_register+0x278>
c0004266:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000426a:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000426d:	b9 01 00 00 00       	mov    ecx,0x1
c0004272:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004277:	74 0f                	je     c0004288 <dir_register+0x1a5>
c0004279:	b9 0d 00 00 00       	mov    ecx,0xd
c000427e:	8d 47 0c             	lea    eax,[edi+0xc]
c0004281:	31 d2                	xor    edx,edx
c0004283:	f7 f1                	div    ecx
c0004285:	8d 48 01             	lea    ecx,[eax+0x1]
c0004288:	89 ca                	mov    edx,ecx
c000428a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000428e:	89 d8                	mov    eax,ebx
c0004290:	e8 ad f6 ff ff       	call   c0003942 <dir_alloc>
c0004295:	89 c6                	mov    esi,eax
c0004297:	85 c0                	test   eax,eax
c0004299:	0f 85 bc 00 00 00    	jne    c000435b <dir_register+0x278>
c000429f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00042a3:	49                   	dec    ecx
c00042a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00042a8:	74 6a                	je     c0004314 <dir_register+0x231>
c00042aa:	89 c8                	mov    eax,ecx
c00042ac:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00042af:	c1 e0 05             	shl    eax,0x5
c00042b2:	29 c2                	sub    edx,eax
c00042b4:	89 d8                	mov    eax,ebx
c00042b6:	e8 fd ec ff ff       	call   c0002fb8 <dir_sdi>
c00042bb:	89 c6                	mov    esi,eax
c00042bd:	85 c0                	test   eax,eax
c00042bf:	0f 85 96 00 00 00    	jne    c000435b <dir_register+0x278>
c00042c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042c9:	e8 4a dc ff ff       	call   c0001f18 <sum_sfn>
c00042ce:	0f b6 f8             	movzx  edi,al
c00042d1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042d4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042d7:	89 e8                	mov    eax,ebp
c00042d9:	e8 5c df ff ff       	call   c000223a <move_window>
c00042de:	89 c6                	mov    esi,eax
c00042e0:	85 c0                	test   eax,eax
c00042e2:	75 77                	jne    c000435b <dir_register+0x278>
c00042e4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042e9:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042ec:	83 ec 0c             	sub    esp,0xc
c00042ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042f2:	57                   	push   edi
c00042f3:	e8 e0 da ff ff       	call   c0001dd8 <put_lfn>
c00042f8:	31 d2                	xor    edx,edx
c00042fa:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042fe:	89 d8                	mov    eax,ebx
c0004300:	e8 0b f2 ff ff       	call   c0003510 <dir_next>
c0004305:	83 c4 10             	add    esp,0x10
c0004308:	89 c6                	mov    esi,eax
c000430a:	85 c0                	test   eax,eax
c000430c:	75 4d                	jne    c000435b <dir_register+0x278>
c000430e:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004312:	75 bd                	jne    c00042d1 <dir_register+0x1ee>
c0004314:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004317:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000431a:	89 e8                	mov    eax,ebp
c000431c:	e8 19 df ff ff       	call   c000223a <move_window>
c0004321:	89 c6                	mov    esi,eax
c0004323:	85 c0                	test   eax,eax
c0004325:	75 34                	jne    c000435b <dir_register+0x278>
c0004327:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000432a:	b9 20 00 00 00       	mov    ecx,0x20
c000432f:	31 d2                	xor    edx,edx
c0004331:	e8 ba d7 ff ff       	call   c0001af0 <mem_set>
c0004336:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004339:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000433d:	b9 0b 00 00 00       	mov    ecx,0xb
c0004342:	e8 94 d7 ff ff       	call   c0001adb <mem_cpy>
c0004347:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000434a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000434d:	83 e0 18             	and    eax,0x18
c0004350:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004353:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004357:	eb 02                	jmp    c000435b <dir_register+0x278>
c0004359:	89 c6                	mov    esi,eax
c000435b:	83 c4 6c             	add    esp,0x6c
c000435e:	89 f0                	mov    eax,esi
c0004360:	5b                   	pop    ebx
c0004361:	5e                   	pop    esi
c0004362:	5f                   	pop    edi
c0004363:	5d                   	pop    ebp
c0004364:	c3                   	ret    

c0004365 <sync_fs>:
c0004365:	56                   	push   esi
c0004366:	53                   	push   ebx
c0004367:	53                   	push   ebx
c0004368:	89 c3                	mov    ebx,eax
c000436a:	e8 37 de ff ff       	call   c00021a6 <sync_window>
c000436f:	85 c0                	test   eax,eax
c0004371:	0f 85 b1 00 00 00    	jne    c0004428 <sync_fs+0xc3>
c0004377:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000437a:	0f 85 8e 00 00 00    	jne    c000440e <sync_fs+0xa9>
c0004380:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004384:	0f 85 84 00 00 00    	jne    c000440e <sync_fs+0xa9>
c000438a:	b9 00 02 00 00       	mov    ecx,0x200
c000438f:	8d 73 54             	lea    esi,[ebx+0x54]
c0004392:	31 d2                	xor    edx,edx
c0004394:	89 f0                	mov    eax,esi
c0004396:	e8 55 d7 ff ff       	call   c0001af0 <mem_set>
c000439b:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00043a1:	ba 55 aa 00 00       	mov    edx,0xaa55
c00043a6:	e8 23 d7 ff ff       	call   c0001ace <st_word>
c00043ab:	ba 52 52 61 41       	mov    edx,0x41615252
c00043b0:	89 f0                	mov    eax,esi
c00043b2:	e8 1b d7 ff ff       	call   c0001ad2 <st_dword>
c00043b7:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043bd:	ba 72 72 41 61       	mov    edx,0x61417272
c00043c2:	e8 0b d7 ff ff       	call   c0001ad2 <st_dword>
c00043c7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043ca:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043d0:	e8 fd d6 ff ff       	call   c0001ad2 <st_dword>
c00043d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043d8:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043de:	e8 ef d6 ff ff       	call   c0001ad2 <st_dword>
c00043e3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043e6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043e9:	83 c0 01             	add    eax,0x1
c00043ec:	83 d2 00             	adc    edx,0x0
c00043ef:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043f2:	83 ec 0c             	sub    esp,0xc
c00043f5:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043f8:	6a 01                	push   0x1
c00043fa:	52                   	push   edx
c00043fb:	50                   	push   eax
c00043fc:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004400:	56                   	push   esi
c0004401:	50                   	push   eax
c0004402:	e8 20 d6 ff ff       	call   c0001a27 <disk_write>
c0004407:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000440b:	83 c4 20             	add    esp,0x20
c000440e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004412:	51                   	push   ecx
c0004413:	6a 00                	push   0x0
c0004415:	6a 00                	push   0x0
c0004417:	50                   	push   eax
c0004418:	e8 20 d6 ff ff       	call   c0001a3d <disk_ioctl>
c000441d:	83 c4 10             	add    esp,0x10
c0004420:	85 c0                	test   eax,eax
c0004422:	0f 95 c0             	setne  al
c0004425:	0f b6 c0             	movzx  eax,al
c0004428:	5a                   	pop    edx
c0004429:	5b                   	pop    ebx
c000442a:	5e                   	pop    esi
c000442b:	c3                   	ret    

c000442c <create_partition>:
c000442c:	55                   	push   ebp
c000442d:	0f b6 c0             	movzx  eax,al
c0004430:	57                   	push   edi
c0004431:	56                   	push   esi
c0004432:	53                   	push   ebx
c0004433:	83 ec 60             	sub    esp,0x60
c0004436:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000443a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000443e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004442:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004446:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000444a:	50                   	push   eax
c000444b:	6a 01                	push   0x1
c000444d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004451:	e8 e7 d5 ff ff       	call   c0001a3d <disk_ioctl>
c0004456:	83 c4 10             	add    esp,0x10
c0004459:	85 c0                	test   eax,eax
c000445b:	74 0a                	je     c0004467 <create_partition+0x3b>
c000445d:	b8 01 00 00 00       	mov    eax,0x1
c0004462:	e9 67 05 00 00       	jmp    c00049ce <create_partition+0x5a2>
c0004467:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000446b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000446f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004473:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004477:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000447c:	0f 86 ed 03 00 00    	jbe    c000486f <create_partition+0x443>
c0004482:	83 c0 df             	add    eax,0xffffffdf
c0004485:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000448d:	83 d2 ff             	adc    edx,0xffffffff
c0004490:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004494:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004498:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000449c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00044a0:	83 c0 bd             	add    eax,0xffffffbd
c00044a3:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00044aa:	83 d2 ff             	adc    edx,0xffffffff
c00044ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00044b1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00044b5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044bd:	be 22 00 00 00       	mov    esi,0x22
c00044c2:	31 ff                	xor    edi,edi
c00044c4:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044cc:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044d4:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044dc:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044e0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044e6:	75 0e                	jne    c00044f6 <create_partition+0xca>
c00044e8:	b9 00 02 00 00       	mov    ecx,0x200
c00044ed:	31 d2                	xor    edx,edx
c00044ef:	89 d8                	mov    eax,ebx
c00044f1:	e8 fa d5 ff ff       	call   c0001af0 <mem_set>
c00044f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044fa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004502:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004505:	0f 84 23 01 00 00    	je     c000462e <create_partition+0x202>
c000450b:	89 f0                	mov    eax,esi
c000450d:	89 fa                	mov    edx,edi
c000450f:	05 ff 07 00 00       	add    eax,0x7ff
c0004514:	83 d2 00             	adc    edx,0x0
c0004517:	89 c1                	mov    ecx,eax
c0004519:	89 d7                	mov    edi,edx
c000451b:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004521:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004525:	89 ce                	mov    esi,ecx
c0004527:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000452b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000452f:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004533:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004536:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000453a:	89 04 24             	mov    DWORD PTR [esp],eax
c000453d:	b8 64 00 00 00       	mov    eax,0x64
c0004542:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004545:	b8 00 00 00 00       	mov    eax,0x0
c000454a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000454e:	72 41                	jb     c0004591 <create_partition+0x165>
c0004550:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004554:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004558:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000455c:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004561:	01 c1                	add    ecx,eax
c0004563:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004567:	f7 24 24             	mul    DWORD PTR [esp]
c000456a:	6a 00                	push   0x0
c000456c:	01 ca                	add    edx,ecx
c000456e:	6a 64                	push   0x64
c0004570:	52                   	push   edx
c0004571:	50                   	push   eax
c0004572:	e8 55 12 02 00       	call   c00257cc <__udivdi3>
c0004577:	83 c4 10             	add    esp,0x10
c000457a:	05 ff 07 00 00       	add    eax,0x7ff
c000457f:	83 d2 00             	adc    edx,0x0
c0004582:	89 c1                	mov    ecx,eax
c0004584:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004588:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000458e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004591:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004594:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004598:	01 f0                	add    eax,esi
c000459a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000459e:	11 fa                	adc    edx,edi
c00045a0:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00045a4:	19 d1                	sbb    ecx,edx
c00045a6:	73 2e                	jae    c00045d6 <create_partition+0x1aa>
c00045a8:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00045ac:	89 f8                	mov    eax,edi
c00045ae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00045b5:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00045b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045c1:	73 6b                	jae    c000462e <create_partition+0x202>
c00045c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045cb:	29 f0                	sub    eax,esi
c00045cd:	19 fa                	sbb    edx,edi
c00045cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00045d2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045da:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045dd:	74 4f                	je     c000462e <create_partition+0x202>
c00045df:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045e2:	b9 10 00 00 00       	mov    ecx,0x10
c00045e7:	ba 10 82 02 c0       	mov    edx,0xc0028210
c00045ec:	e8 ea d4 ff ff       	call   c0001adb <mem_cpy>
c00045f1:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045f5:	b9 10 00 00 00       	mov    ecx,0x10
c00045fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045fe:	e8 2c db ff ff       	call   c000212f <make_rand>
c0004603:	89 f2                	mov    edx,esi
c0004605:	89 f9                	mov    ecx,edi
c0004607:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000460b:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000460f:	e8 c1 d4 ff ff       	call   c0001ad5 <st_qword>
c0004614:	03 34 24             	add    esi,DWORD PTR [esp]
c0004617:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000461b:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000461f:	89 f2                	mov    edx,esi
c0004621:	89 f9                	mov    ecx,edi
c0004623:	83 c2 ff             	add    edx,0xffffffff
c0004626:	83 d1 ff             	adc    ecx,0xffffffff
c0004629:	e8 a7 d4 ff ff       	call   c0001ad5 <st_qword>
c000462e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004632:	83 e8 80             	sub    eax,0xffffff80
c0004635:	89 c5                	mov    ebp,eax
c0004637:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000463b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004641:	75 6b                	jne    c00046ae <create_partition+0x282>
c0004643:	45                   	inc    ebp
c0004644:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004648:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000464d:	e8 39 da ff ff       	call   c000208b <crc32>
c0004652:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004658:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000465c:	75 e5                	jne    c0004643 <create_partition+0x217>
c000465e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004662:	31 d2                	xor    edx,edx
c0004664:	83 ec 0c             	sub    esp,0xc
c0004667:	c1 ed 09             	shr    ebp,0x9
c000466a:	6a 01                	push   0x1
c000466c:	8d 45 02             	lea    eax,[ebp+0x2]
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	53                   	push   ebx
c0004672:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004676:	e8 ac d3 ff ff       	call   c0001a27 <disk_write>
c000467b:	83 c4 20             	add    esp,0x20
c000467e:	85 c0                	test   eax,eax
c0004680:	0f 85 d7 fd ff ff    	jne    c000445d <create_partition+0x31>
c0004686:	83 ec 0c             	sub    esp,0xc
c0004689:	31 d2                	xor    edx,edx
c000468b:	6a 01                	push   0x1
c000468d:	89 e8                	mov    eax,ebp
c000468f:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004693:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004697:	52                   	push   edx
c0004698:	50                   	push   eax
c0004699:	53                   	push   ebx
c000469a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000469e:	e8 84 d3 ff ff       	call   c0001a27 <disk_write>
c00046a3:	83 c4 20             	add    esp,0x20
c00046a6:	85 c0                	test   eax,eax
c00046a8:	0f 85 af fd ff ff    	jne    c000445d <create_partition+0x31>
c00046ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046b2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00046b6:	3d 00 40 00 00       	cmp    eax,0x4000
c00046bb:	74 0d                	je     c00046ca <create_partition+0x29e>
c00046bd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046c1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046c5:	e9 12 fe ff ff       	jmp    c00044dc <create_partition+0xb0>
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	b9 00 02 00 00       	mov    ecx,0x200
c00046d1:	89 d8                	mov    eax,ebx
c00046d3:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046d6:	e8 15 d4 ff ff       	call   c0001af0 <mem_set>
c00046db:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046de:	b9 10 00 00 00       	mov    ecx,0x10
c00046e3:	ba 00 81 02 c0       	mov    edx,0xc0028100
c00046e8:	89 d8                	mov    eax,ebx
c00046ea:	e8 ec d3 ff ff       	call   c0001adb <mem_cpy>
c00046ef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046f3:	8d 43 58             	lea    eax,[ebx+0x58]
c00046f6:	f7 d2                	not    edx
c00046f8:	e8 d5 d3 ff ff       	call   c0001ad2 <st_dword>
c00046fd:	8d 43 18             	lea    eax,[ebx+0x18]
c0004700:	31 c9                	xor    ecx,ecx
c0004702:	89 04 24             	mov    DWORD PTR [esp],eax
c0004705:	ba 01 00 00 00       	mov    edx,0x1
c000470a:	e8 c6 d3 ff ff       	call   c0001ad5 <st_qword>
c000470f:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004713:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004717:	83 c2 ff             	add    edx,0xffffffff
c000471a:	89 e8                	mov    eax,ebp
c000471c:	83 d1 ff             	adc    ecx,0xffffffff
c000471f:	e8 b1 d3 ff ff       	call   c0001ad5 <st_qword>
c0004724:	31 c9                	xor    ecx,ecx
c0004726:	8d 43 28             	lea    eax,[ebx+0x28]
c0004729:	ba 22 00 00 00       	mov    edx,0x22
c000472e:	e8 a2 d3 ff ff       	call   c0001ad5 <st_qword>
c0004733:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	83 c2 de             	add    edx,0xffffffde
c000473e:	8d 43 30             	lea    eax,[ebx+0x30]
c0004741:	83 d1 ff             	adc    ecx,0xffffffff
c0004744:	31 f6                	xor    esi,esi
c0004746:	e8 8a d3 ff ff       	call   c0001ad5 <st_qword>
c000474b:	8d 43 54             	lea    eax,[ebx+0x54]
c000474e:	ba 80 00 00 00       	mov    edx,0x80
c0004753:	e8 7a d3 ff ff       	call   c0001ad2 <st_dword>
c0004758:	8d 43 50             	lea    eax,[ebx+0x50]
c000475b:	ba 80 00 00 00       	mov    edx,0x80
c0004760:	e8 6d d3 ff ff       	call   c0001ad2 <st_dword>
c0004765:	ba 02 00 00 00       	mov    edx,0x2
c000476a:	89 f8                	mov    eax,edi
c000476c:	e8 61 d3 ff ff       	call   c0001ad2 <st_dword>
c0004771:	8d 53 38             	lea    edx,[ebx+0x38]
c0004774:	b9 10 00 00 00       	mov    ecx,0x10
c0004779:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000477d:	e8 ad d9 ff ff       	call   c000212f <make_rand>
c0004782:	83 c8 ff             	or     eax,0xffffffff
c0004785:	46                   	inc    esi
c0004786:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000478b:	e8 fb d8 ff ff       	call   c000208b <crc32>
c0004790:	83 fe 5c             	cmp    esi,0x5c
c0004793:	75 f0                	jne    c0004785 <create_partition+0x359>
c0004795:	f7 d0                	not    eax
c0004797:	8d 73 10             	lea    esi,[ebx+0x10]
c000479a:	89 c2                	mov    edx,eax
c000479c:	89 f0                	mov    eax,esi
c000479e:	e8 2f d3 ff ff       	call   c0001ad2 <st_dword>
c00047a3:	83 ec 0c             	sub    esp,0xc
c00047a6:	6a 01                	push   0x1
c00047a8:	6a 00                	push   0x0
c00047aa:	6a 01                	push   0x1
c00047ac:	53                   	push   ebx
c00047ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047b1:	e8 71 d2 ff ff       	call   c0001a27 <disk_write>
c00047b6:	83 c4 20             	add    esp,0x20
c00047b9:	85 c0                	test   eax,eax
c00047bb:	0f 85 9c fc ff ff    	jne    c000445d <create_partition+0x31>
c00047c1:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047c5:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047c9:	83 c2 ff             	add    edx,0xffffffff
c00047cc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047cf:	83 d1 ff             	adc    ecx,0xffffffff
c00047d2:	e8 fe d2 ff ff       	call   c0001ad5 <st_qword>
c00047d7:	ba 01 00 00 00       	mov    edx,0x1
c00047dc:	31 c9                	xor    ecx,ecx
c00047de:	89 e8                	mov    eax,ebp
c00047e0:	e8 f0 d2 ff ff       	call   c0001ad5 <st_qword>
c00047e5:	89 f8                	mov    eax,edi
c00047e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047eb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047ef:	31 ff                	xor    edi,edi
c00047f1:	e8 df d2 ff ff       	call   c0001ad5 <st_qword>
c00047f6:	89 f0                	mov    eax,esi
c00047f8:	31 d2                	xor    edx,edx
c00047fa:	e8 d3 d2 ff ff       	call   c0001ad2 <st_dword>
c00047ff:	83 c8 ff             	or     eax,0xffffffff
c0004802:	47                   	inc    edi
c0004803:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004808:	e8 7e d8 ff ff       	call   c000208b <crc32>
c000480d:	83 ff 5c             	cmp    edi,0x5c
c0004810:	75 f0                	jne    c0004802 <create_partition+0x3d6>
c0004812:	f7 d0                	not    eax
c0004814:	89 c2                	mov    edx,eax
c0004816:	89 f0                	mov    eax,esi
c0004818:	e8 b5 d2 ff ff       	call   c0001ad2 <st_dword>
c000481d:	83 ec 0c             	sub    esp,0xc
c0004820:	6a 01                	push   0x1
c0004822:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004826:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000482a:	83 c0 ff             	add    eax,0xffffffff
c000482d:	83 d2 ff             	adc    edx,0xffffffff
c0004830:	52                   	push   edx
c0004831:	50                   	push   eax
c0004832:	53                   	push   ebx
c0004833:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004837:	e8 eb d1 ff ff       	call   c0001a27 <disk_write>
c000483c:	83 c4 20             	add    esp,0x20
c000483f:	85 c0                	test   eax,eax
c0004841:	0f 85 16 fc ff ff    	jne    c000445d <create_partition+0x31>
c0004847:	31 d2                	xor    edx,edx
c0004849:	89 d8                	mov    eax,ebx
c000484b:	b9 00 02 00 00       	mov    ecx,0x200
c0004850:	e8 9b d2 ff ff       	call   c0001af0 <mem_set>
c0004855:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000485b:	b9 10 00 00 00       	mov    ecx,0x10
c0004860:	ba 10 81 02 c0       	mov    edx,0xc0028110
c0004865:	e8 71 d2 ff ff       	call   c0001adb <mem_cpy>
c000486a:	e9 21 01 00 00       	jmp    c0004990 <create_partition+0x564>
c000486f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004873:	b9 05 00 00 00       	mov    ecx,0x5
c0004878:	89 04 24             	mov    DWORD PTR [esp],eax
c000487b:	bf 08 00 00 00       	mov    edi,0x8
c0004880:	89 f8                	mov    eax,edi
c0004882:	31 d2                	xor    edx,edx
c0004884:	0f b6 f0             	movzx  esi,al
c0004887:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000488a:	f7 f6                	div    esi
c000488c:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004891:	76 0a                	jbe    c000489d <create_partition+0x471>
c0004893:	d1 e7                	shl    edi,1
c0004895:	49                   	dec    ecx
c0004896:	75 e8                	jne    c0004880 <create_partition+0x454>
c0004898:	bf ff ff ff ff       	mov    edi,0xffffffff
c000489d:	b9 00 02 00 00       	mov    ecx,0x200
c00048a2:	31 d2                	xor    edx,edx
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00048ac:	e8 3f d2 ff ff       	call   c0001af0 <mem_set>
c00048b1:	b9 64 00 00 00       	mov    ecx,0x64
c00048b6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048b9:	31 d2                	xor    edx,edx
c00048bb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048c3:	f7 f1                	div    ecx
c00048c5:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048ca:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ce:	89 f8                	mov    eax,edi
c00048d0:	0f b6 c0             	movzx  eax,al
c00048d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048d7:	e9 80 00 00 00       	jmp    c000495c <create_partition+0x530>
c00048dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048df:	29 cf                	sub    edi,ecx
c00048e1:	89 ca                	mov    edx,ecx
c00048e3:	89 f0                	mov    eax,esi
c00048e5:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048ea:	e8 e3 d1 ff ff       	call   c0001ad2 <st_dword>
c00048ef:	8d 46 04             	lea    eax,[esi+0x4]
c00048f2:	89 fa                	mov    edx,edi
c00048f4:	83 c6 10             	add    esi,0x10
c00048f7:	e8 d6 d1 ff ff       	call   c0001ad2 <st_dword>
c00048fc:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004900:	31 d2                	xor    edx,edx
c0004902:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004905:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004909:	89 c8                	mov    eax,ecx
c000490b:	01 f9                	add    ecx,edi
c000490d:	f7 f5                	div    ebp
c000490f:	89 d5                	mov    ebp,edx
c0004911:	31 d2                	xor    edx,edx
c0004913:	45                   	inc    ebp
c0004914:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004918:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000491b:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c000491e:	89 c2                	mov    edx,eax
c0004920:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004923:	c1 ea 02             	shr    edx,0x2
c0004926:	83 e2 c0             	and    edx,0xffffffc0
c0004929:	09 ea                	or     edx,ebp
c000492b:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004930:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004933:	31 d2                	xor    edx,edx
c0004935:	f7 f5                	div    ebp
c0004937:	89 d7                	mov    edi,edx
c0004939:	31 d2                	xor    edx,edx
c000493b:	47                   	inc    edi
c000493c:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004940:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004943:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004946:	89 c5                	mov    ebp,eax
c0004948:	c1 ed 02             	shr    ebp,0x2
c000494b:	83 e5 c0             	and    ebp,0xffffffc0
c000494e:	09 ef                	or     edi,ebp
c0004950:	89 fa                	mov    edx,edi
c0004952:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004955:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000495a:	74 34                	je     c0004990 <create_partition+0x564>
c000495c:	85 c9                	test   ecx,ecx
c000495e:	74 30                	je     c0004990 <create_partition+0x564>
c0004960:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004963:	76 2b                	jbe    c0004990 <create_partition+0x564>
c0004965:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004969:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000496d:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004970:	83 ff 64             	cmp    edi,0x64
c0004973:	76 4b                	jbe    c00049c0 <create_partition+0x594>
c0004975:	89 f8                	mov    eax,edi
c0004977:	01 c8                	add    eax,ecx
c0004979:	0f 82 5d ff ff ff    	jb     c00048dc <create_partition+0x4b0>
c000497f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004982:	0f 87 54 ff ff ff    	ja     c00048dc <create_partition+0x4b0>
c0004988:	85 ff                	test   edi,edi
c000498a:	0f 85 51 ff ff ff    	jne    c00048e1 <create_partition+0x4b5>
c0004990:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004996:	ba 55 aa 00 00       	mov    edx,0xaa55
c000499b:	e8 2e d1 ff ff       	call   c0001ace <st_word>
c00049a0:	83 ec 0c             	sub    esp,0xc
c00049a3:	6a 01                	push   0x1
c00049a5:	6a 00                	push   0x0
c00049a7:	6a 00                	push   0x0
c00049a9:	53                   	push   ebx
c00049aa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049ae:	e8 74 d0 ff ff       	call   c0001a27 <disk_write>
c00049b3:	83 c4 20             	add    esp,0x20
c00049b6:	85 c0                	test   eax,eax
c00049b8:	0f 95 c0             	setne  al
c00049bb:	0f b6 c0             	movzx  eax,al
c00049be:	eb 0e                	jmp    c00049ce <create_partition+0x5a2>
c00049c0:	74 07                	je     c00049c9 <create_partition+0x59d>
c00049c2:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049c7:	eb ac                	jmp    c0004975 <create_partition+0x549>
c00049c9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049cc:	eb a7                	jmp    c0004975 <create_partition+0x549>
c00049ce:	83 c4 5c             	add    esp,0x5c
c00049d1:	5b                   	pop    ebx
c00049d2:	5e                   	pop    esi
c00049d3:	5f                   	pop    edi
c00049d4:	5d                   	pop    ebp
c00049d5:	c3                   	ret    

c00049d6 <get_fileinfo>:
c00049d6:	55                   	push   ebp
c00049d7:	57                   	push   edi
c00049d8:	56                   	push   esi
c00049d9:	53                   	push   ebx
c00049da:	83 ec 1c             	sub    esp,0x1c
c00049dd:	8b 30                	mov    esi,DWORD PTR [eax]
c00049df:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049e7:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049ea:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049ed:	0f 84 dc 01 00 00    	je     c0004bcf <get_fileinfo+0x1f9>
c00049f3:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049f6:	75 0f                	jne    c0004a07 <get_fileinfo+0x31>
c00049f8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049fb:	83 c4 1c             	add    esp,0x1c
c00049fe:	5b                   	pop    ebx
c00049ff:	5e                   	pop    esi
c0004a00:	5f                   	pop    edi
c0004a01:	5d                   	pop    ebp
c0004a02:	e9 58 d5 ff ff       	jmp    c0001f5f <get_xfileinfo>
c0004a07:	89 d3                	mov    ebx,edx
c0004a09:	89 c6                	mov    esi,eax
c0004a0b:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004a0f:	74 6a                	je     c0004a7b <get_fileinfo+0xa5>
c0004a11:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004a19:	31 ed                	xor    ebp,ebp
c0004a1b:	31 ff                	xor    edi,edi
c0004a1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a21:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a25:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a28:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a2c:	66 85 d2             	test   dx,dx
c0004a2f:	74 3e                	je     c0004a6f <get_fileinfo+0x99>
c0004a31:	66 85 ed             	test   bp,bp
c0004a34:	75 0c                	jne    c0004a42 <get_fileinfo+0x6c>
c0004a36:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a3c:	66 3d ff 07          	cmp    ax,0x7ff
c0004a40:	76 22                	jbe    c0004a64 <get_fileinfo+0x8e>
c0004a42:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a47:	89 e8                	mov    eax,ebp
c0004a49:	29 f9                	sub    ecx,edi
c0004a4b:	c1 e0 10             	shl    eax,0x10
c0004a4e:	09 d0                	or     eax,edx
c0004a50:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a54:	e8 a3 d1 ff ff       	call   c0001bfc <put_utf>
c0004a59:	84 c0                	test   al,al
c0004a5b:	74 10                	je     c0004a6d <get_fileinfo+0x97>
c0004a5d:	0f b6 c0             	movzx  eax,al
c0004a60:	31 d2                	xor    edx,edx
c0004a62:	01 c7                	add    edi,eax
c0004a64:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a69:	89 d5                	mov    ebp,edx
c0004a6b:	eb b0                	jmp    c0004a1d <get_fileinfo+0x47>
c0004a6d:	31 ff                	xor    edi,edi
c0004a6f:	66 85 ed             	test   bp,bp
c0004a72:	74 02                	je     c0004a76 <get_fileinfo+0xa0>
c0004a74:	31 ff                	xor    edi,edi
c0004a76:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a7b:	31 ff                	xor    edi,edi
c0004a7d:	31 c9                	xor    ecx,ecx
c0004a7f:	83 f9 0a             	cmp    ecx,0xa
c0004a82:	0f 87 ad 00 00 00    	ja     c0004b35 <get_fileinfo+0x15f>
c0004a88:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a8b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a8e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a92:	66 83 fa 20          	cmp    dx,0x20
c0004a96:	0f 84 92 00 00 00    	je     c0004b2e <get_fileinfo+0x158>
c0004a9c:	66 83 fa 05          	cmp    dx,0x5
c0004aa0:	75 05                	jne    c0004aa7 <get_fileinfo+0xd1>
c0004aa2:	ba e5 00 00 00       	mov    edx,0xe5
c0004aa7:	83 ff 0b             	cmp    edi,0xb
c0004aaa:	77 0b                	ja     c0004ab7 <get_fileinfo+0xe1>
c0004aac:	83 fd 09             	cmp    ebp,0x9
c0004aaf:	75 06                	jne    c0004ab7 <get_fileinfo+0xe1>
c0004ab1:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004ab6:	47                   	inc    edi
c0004ab7:	0f b7 c2             	movzx  eax,dx
c0004aba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004abe:	e8 6d d0 ff ff       	call   c0001b30 <dbc_1st>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	74 2f                	je     c0004af6 <get_fileinfo+0x120>
c0004ac7:	83 fd 08             	cmp    ebp,0x8
c0004aca:	74 2a                	je     c0004af6 <get_fileinfo+0x120>
c0004acc:	83 fd 0b             	cmp    ebp,0xb
c0004acf:	74 25                	je     c0004af6 <get_fileinfo+0x120>
c0004ad1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ad8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004adc:	e8 52 d0 ff ff       	call   c0001b33 <dbc_2nd>
c0004ae1:	85 c0                	test   eax,eax
c0004ae3:	74 11                	je     c0004af6 <get_fileinfo+0x120>
c0004ae5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004aee:	c1 e2 08             	shl    edx,0x8
c0004af1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004af4:	09 c2                	or     edx,eax
c0004af6:	0f b7 d2             	movzx  edx,dx
c0004af9:	50                   	push   eax
c0004afa:	50                   	push   eax
c0004afb:	68 b5 01 00 00       	push   0x1b5
c0004b00:	52                   	push   edx
c0004b01:	e8 46 38 00 00       	call   c000834c <ff_oem2uni>
c0004b06:	83 c4 10             	add    esp,0x10
c0004b09:	66 85 c0             	test   ax,ax
c0004b0c:	75 04                	jne    c0004b12 <get_fileinfo+0x13c>
c0004b0e:	31 ff                	xor    edi,edi
c0004b10:	eb 23                	jmp    c0004b35 <get_fileinfo+0x15f>
c0004b12:	b9 0c 00 00 00       	mov    ecx,0xc
c0004b17:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b1b:	29 f9                	sub    ecx,edi
c0004b1d:	0f b7 c0             	movzx  eax,ax
c0004b20:	e8 d7 d0 ff ff       	call   c0001bfc <put_utf>
c0004b25:	84 c0                	test   al,al
c0004b27:	74 e5                	je     c0004b0e <get_fileinfo+0x138>
c0004b29:	0f b6 c0             	movzx  eax,al
c0004b2c:	01 c7                	add    edi,eax
c0004b2e:	89 e9                	mov    ecx,ebp
c0004b30:	e9 4a ff ff ff       	jmp    c0004a7f <get_fileinfo+0xa9>
c0004b35:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b3a:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b3e:	75 54                	jne    c0004b94 <get_fileinfo+0x1be>
c0004b40:	85 ff                	test   edi,edi
c0004b42:	75 0b                	jne    c0004b4f <get_fileinfo+0x179>
c0004b44:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b48:	ba 01 00 00 00       	mov    edx,0x1
c0004b4d:	eb 33                	jmp    c0004b82 <get_fileinfo+0x1ac>
c0004b4f:	b1 08                	mov    cl,0x8
c0004b51:	31 d2                	xor    edx,edx
c0004b53:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b59:	84 c0                	test   al,al
c0004b5b:	74 25                	je     c0004b82 <get_fileinfo+0x1ac>
c0004b5d:	66 83 f8 2e          	cmp    ax,0x2e
c0004b61:	74 16                	je     c0004b79 <get_fileinfo+0x1a3>
c0004b63:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b66:	66 83 ff 19          	cmp    di,0x19
c0004b6a:	77 0f                	ja     c0004b7b <get_fileinfo+0x1a5>
c0004b6c:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b6f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b72:	74 07                	je     c0004b7b <get_fileinfo+0x1a5>
c0004b74:	83 c0 20             	add    eax,0x20
c0004b77:	eb 02                	jmp    c0004b7b <get_fileinfo+0x1a5>
c0004b79:	b1 10                	mov    cl,0x10
c0004b7b:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b7f:	42                   	inc    edx
c0004b80:	eb d1                	jmp    c0004b53 <get_fileinfo+0x17d>
c0004b82:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b8e:	75 04                	jne    c0004b94 <get_fileinfo+0x1be>
c0004b90:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b94:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b97:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b9a:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b9d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba0:	83 c0 1c             	add    eax,0x1c
c0004ba3:	e8 c1 ce ff ff       	call   c0001a69 <ld_dword>
c0004ba8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004baf:	89 03                	mov    DWORD PTR [ebx],eax
c0004bb1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bb4:	83 c0 16             	add    eax,0x16
c0004bb7:	e8 a0 ce ff ff       	call   c0001a5c <ld_word>
c0004bbc:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004bc0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bc3:	83 c0 18             	add    eax,0x18
c0004bc6:	e8 91 ce ff ff       	call   c0001a5c <ld_word>
c0004bcb:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bcf:	83 c4 1c             	add    esp,0x1c
c0004bd2:	5b                   	pop    ebx
c0004bd3:	5e                   	pop    esi
c0004bd4:	5f                   	pop    edi
c0004bd5:	5d                   	pop    ebp
c0004bd6:	c3                   	ret    

c0004bd7 <ld_clust.isra.0>:
c0004bd7:	56                   	push   esi
c0004bd8:	89 c6                	mov    esi,eax
c0004bda:	53                   	push   ebx
c0004bdb:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bde:	89 d3                	mov    ebx,edx
c0004be0:	e8 77 ce ff ff       	call   c0001a5c <ld_word>
c0004be5:	0f b7 c8             	movzx  ecx,ax
c0004be8:	89 f0                	mov    eax,esi
c0004bea:	3c 03                	cmp    al,0x3
c0004bec:	75 0d                	jne    c0004bfb <ld_clust.isra.0+0x24>
c0004bee:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bf1:	e8 66 ce ff ff       	call   c0001a5c <ld_word>
c0004bf6:	c1 e0 10             	shl    eax,0x10
c0004bf9:	09 c1                	or     ecx,eax
c0004bfb:	89 c8                	mov    eax,ecx
c0004bfd:	5b                   	pop    ebx
c0004bfe:	5e                   	pop    esi
c0004bff:	c3                   	ret    

c0004c00 <st_clust.isra.1>:
c0004c00:	56                   	push   esi
c0004c01:	89 c6                	mov    esi,eax
c0004c03:	53                   	push   ebx
c0004c04:	89 d3                	mov    ebx,edx
c0004c06:	0f b7 d1             	movzx  edx,cx
c0004c09:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004c0c:	e8 bd ce ff ff       	call   c0001ace <st_word>
c0004c11:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004c14:	75 0f                	jne    c0004c25 <st_clust.isra.1+0x25>
c0004c16:	c1 e9 10             	shr    ecx,0x10
c0004c19:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c1c:	89 ca                	mov    edx,ecx
c0004c1e:	5b                   	pop    ebx
c0004c1f:	5e                   	pop    esi
c0004c20:	e9 a9 ce ff ff       	jmp    c0001ace <st_word>
c0004c25:	5b                   	pop    ebx
c0004c26:	5e                   	pop    esi
c0004c27:	c3                   	ret    

c0004c28 <init_alloc_info.isra.2>:
c0004c28:	56                   	push   esi
c0004c29:	53                   	push   ebx
c0004c2a:	89 c6                	mov    esi,eax
c0004c2c:	89 d3                	mov    ebx,edx
c0004c2e:	51                   	push   ecx
c0004c2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c31:	83 c0 34             	add    eax,0x34
c0004c34:	e8 30 ce ff ff       	call   c0001a69 <ld_dword>
c0004c39:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c3c:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c3e:	83 c0 38             	add    eax,0x38
c0004c41:	e8 3b ce ff ff       	call   c0001a81 <ld_qword>
c0004c46:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c49:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c4c:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c4e:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c51:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c58:	83 e0 02             	and    eax,0x2
c0004c5b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c5e:	5b                   	pop    ebx
c0004c5f:	5b                   	pop    ebx
c0004c60:	5e                   	pop    esi
c0004c61:	c3                   	ret    

c0004c62 <follow_path>:
c0004c62:	56                   	push   esi
c0004c63:	53                   	push   ebx
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	83 ec 14             	sub    esp,0x14
c0004c69:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c6d:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c73:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c75:	80 fa 5c             	cmp    dl,0x5c
c0004c78:	75 07                	jne    c0004c81 <follow_path+0x1f>
c0004c7a:	40                   	inc    eax
c0004c7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c7f:	eb ee                	jmp    c0004c6f <follow_path+0xd>
c0004c81:	80 fa 2f             	cmp    dl,0x2f
c0004c84:	74 f4                	je     c0004c7a <follow_path+0x18>
c0004c86:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c8d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c94:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c97:	77 52                	ja     c0004ceb <follow_path+0x89>
c0004c99:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 d8                	mov    eax,ebx
c0004ca1:	e8 12 e3 ff ff       	call   c0002fb8 <dir_sdi>
c0004ca6:	eb 7c                	jmp    c0004d24 <follow_path+0xc2>
c0004ca8:	89 d8                	mov    eax,ebx
c0004caa:	e8 6e f2 ff ff       	call   c0003f1d <dir_find>
c0004caf:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004cb2:	85 c0                	test   eax,eax
c0004cb4:	75 46                	jne    c0004cfc <follow_path+0x9a>
c0004cb6:	80 e2 04             	and    dl,0x4
c0004cb9:	75 69                	jne    c0004d24 <follow_path+0xc2>
c0004cbb:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004cbf:	74 5e                	je     c0004d1f <follow_path+0xbd>
c0004cc1:	8a 06                	mov    al,BYTE PTR [esi]
c0004cc3:	3c 04                	cmp    al,0x4
c0004cc5:	75 41                	jne    c0004d08 <follow_path+0xa6>
c0004cc7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cca:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cce:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cd1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cd4:	30 c0                	xor    al,al
c0004cd6:	09 d0                	or     eax,edx
c0004cd8:	89 da                	mov    edx,ebx
c0004cda:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cdd:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ce0:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ce3:	8d 46 10             	lea    eax,[esi+0x10]
c0004ce6:	e8 3d ff ff ff       	call   c0004c28 <init_alloc_info.isra.2>
c0004ceb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cef:	89 d8                	mov    eax,ebx
c0004cf1:	e8 a9 ed ff ff       	call   c0003a9f <create_name>
c0004cf6:	85 c0                	test   eax,eax
c0004cf8:	74 ae                	je     c0004ca8 <follow_path+0x46>
c0004cfa:	eb 28                	jmp    c0004d24 <follow_path+0xc2>
c0004cfc:	83 f8 04             	cmp    eax,0x4
c0004cff:	75 23                	jne    c0004d24 <follow_path+0xc2>
c0004d01:	80 e2 04             	and    dl,0x4
c0004d04:	74 19                	je     c0004d1f <follow_path+0xbd>
c0004d06:	eb 1c                	jmp    c0004d24 <follow_path+0xc2>
c0004d08:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004d0b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004d11:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004d15:	e8 bd fe ff ff       	call   c0004bd7 <ld_clust.isra.0>
c0004d1a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d1d:	eb cc                	jmp    c0004ceb <follow_path+0x89>
c0004d1f:	b8 05 00 00 00       	mov    eax,0x5
c0004d24:	83 c4 14             	add    esp,0x14
c0004d27:	5b                   	pop    ebx
c0004d28:	5e                   	pop    esi
c0004d29:	c3                   	ret    

c0004d2a <f_mount>:
c0004d2a:	53                   	push   ebx
c0004d2b:	83 ec 18             	sub    esp,0x18
c0004d2e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d32:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d3a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d3e:	e8 fb d2 ff ff       	call   c000203e <get_ldnumber>
c0004d43:	89 c2                	mov    edx,eax
c0004d45:	b8 0b 00 00 00       	mov    eax,0xb
c0004d4a:	85 d2                	test   edx,edx
c0004d4c:	78 39                	js     c0004d87 <f_mount+0x5d>
c0004d4e:	8b 04 95 60 ce 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd31a0]
c0004d55:	85 c0                	test   eax,eax
c0004d57:	74 03                	je     c0004d5c <f_mount+0x32>
c0004d59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d60:	85 c0                	test   eax,eax
c0004d62:	74 03                	je     c0004d67 <f_mount+0x3d>
c0004d64:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d6b:	89 04 95 60 ce 02 c0 	mov    DWORD PTR [edx*4-0x3ffd31a0],eax
c0004d72:	31 c0                	xor    eax,eax
c0004d74:	84 db                	test   bl,bl
c0004d76:	74 0f                	je     c0004d87 <f_mount+0x5d>
c0004d78:	31 c9                	xor    ecx,ecx
c0004d7a:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d7e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d82:	e8 65 d7 ff ff       	call   c00024ec <mount_volume>
c0004d87:	83 c4 18             	add    esp,0x18
c0004d8a:	5b                   	pop    ebx
c0004d8b:	c3                   	ret    

c0004d8c <f_open>:
c0004d8c:	55                   	push   ebp
c0004d8d:	bd 09 00 00 00       	mov    ebp,0x9
c0004d92:	57                   	push   edi
c0004d93:	56                   	push   esi
c0004d94:	53                   	push   ebx
c0004d95:	83 ec 7c             	sub    esp,0x7c
c0004d98:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d9f:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004da6:	85 db                	test   ebx,ebx
c0004da8:	0f 84 10 04 00 00    	je     c00051be <f_open+0x432>
c0004dae:	89 fe                	mov    esi,edi
c0004db0:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004db4:	83 e6 3f             	and    esi,0x3f
c0004db7:	89 f0                	mov    eax,esi
c0004db9:	0f b6 c8             	movzx  ecx,al
c0004dbc:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004dc3:	e8 24 d7 ff ff       	call   c00024ec <mount_volume>
c0004dc8:	89 c5                	mov    ebp,eax
c0004dca:	85 c0                	test   eax,eax
c0004dcc:	0f 85 e6 03 00 00    	jne    c00051b8 <f_open+0x42c>
c0004dd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dd6:	bd 11 00 00 00       	mov    ebp,0x11
c0004ddb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ddf:	83 ec 0c             	sub    esp,0xc
c0004de2:	68 60 04 00 00       	push   0x460
c0004de7:	e8 a3 34 00 00       	call   c000828f <ff_memalloc>
c0004dec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004df0:	83 c4 10             	add    esp,0x10
c0004df3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004df8:	0f 84 c0 03 00 00    	je     c00051be <f_open+0x432>
c0004dfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004e06:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004e0c:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004e0f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004e12:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004e19:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e1d:	e8 40 fe ff ff       	call   c0004c62 <follow_path>
c0004e22:	89 c5                	mov    ebp,eax
c0004e24:	85 c0                	test   eax,eax
c0004e26:	75 0c                	jne    c0004e34 <f_open+0xa8>
c0004e28:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e2d:	79 05                	jns    c0004e34 <f_open+0xa8>
c0004e2f:	bd 06 00 00 00       	mov    ebp,0x6
c0004e34:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e3a:	0f 84 84 01 00 00    	je     c0004fc4 <f_open+0x238>
c0004e40:	85 ed                	test   ebp,ebp
c0004e42:	74 20                	je     c0004e64 <f_open+0xd8>
c0004e44:	83 fd 04             	cmp    ebp,0x4
c0004e47:	0f 85 58 03 00 00    	jne    c00051a5 <f_open+0x419>
c0004e4d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e51:	83 ce 08             	or     esi,0x8
c0004e54:	e8 8a f2 ff ff       	call   c00040e3 <dir_register>
c0004e59:	89 c5                	mov    ebp,eax
c0004e5b:	85 c0                	test   eax,eax
c0004e5d:	74 2f                	je     c0004e8e <f_open+0x102>
c0004e5f:	e9 41 03 00 00       	jmp    c00051a5 <f_open+0x419>
c0004e64:	bd 07 00 00 00       	mov    ebp,0x7
c0004e69:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e6e:	0f 85 31 03 00 00    	jne    c00051a5 <f_open+0x419>
c0004e74:	bd 08 00 00 00       	mov    ebp,0x8
c0004e79:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e7f:	0f 85 20 03 00 00    	jne    c00051a5 <f_open+0x419>
c0004e85:	83 e7 08             	and    edi,0x8
c0004e88:	0f 84 65 01 00 00    	je     c0004ff3 <f_open+0x267>
c0004e8e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e92:	8a 02                	mov    al,BYTE PTR [edx]
c0004e94:	3c 04                	cmp    al,0x4
c0004e96:	0f 85 97 00 00 00    	jne    c0004f33 <f_open+0x1a7>
c0004e9c:	8d 42 10             	lea    eax,[edx+0x10]
c0004e9f:	89 13                	mov    DWORD PTR [ebx],edx
c0004ea1:	89 da                	mov    edx,ebx
c0004ea3:	e8 80 fd ff ff       	call   c0004c28 <init_alloc_info.isra.2>
c0004ea8:	31 d2                	xor    edx,edx
c0004eaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eae:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004eb3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eb6:	83 c0 02             	add    eax,0x2
c0004eb9:	e8 32 cc ff ff       	call   c0001af0 <mem_set>
c0004ebe:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004ec3:	31 d2                	xor    edx,edx
c0004ec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ecc:	83 c0 26             	add    eax,0x26
c0004ecf:	e8 1c cc ff ff       	call   c0001af0 <mem_set>
c0004ed4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004edb:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004edf:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ee4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ee7:	83 c0 08             	add    eax,0x8
c0004eea:	e8 e3 cb ff ff       	call   c0001ad2 <st_dword>
c0004eef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ef6:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004efa:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004efe:	e8 b7 ea ff ff       	call   c00039ba <store_xdir>
c0004f03:	89 c5                	mov    ebp,eax
c0004f05:	85 c0                	test   eax,eax
c0004f07:	0f 85 98 02 00 00    	jne    c00051a5 <f_open+0x419>
c0004f0d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004f10:	85 d2                	test   edx,edx
c0004f12:	0f 84 db 00 00 00    	je     c0004ff3 <f_open+0x267>
c0004f18:	31 c9                	xor    ecx,ecx
c0004f1a:	89 d8                	mov    eax,ebx
c0004f1c:	e8 8e e3 ff ff       	call   c00032af <remove_chain>
c0004f21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f25:	89 c5                	mov    ebp,eax
c0004f27:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f2a:	48                   	dec    eax
c0004f2b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f2e:	e9 b8 00 00 00       	jmp    c0004feb <f_open+0x25f>
c0004f33:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f37:	89 ea                	mov    edx,ebp
c0004f39:	e8 99 fc ff ff       	call   c0004bd7 <ld_clust.isra.0>
c0004f3e:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f43:	89 c7                	mov    edi,eax
c0004f45:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f48:	e8 85 cb ff ff       	call   c0001ad2 <st_dword>
c0004f4d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f51:	31 c9                	xor    ecx,ecx
c0004f53:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f5b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f5f:	e8 9c fc ff ff       	call   c0004c00 <st_clust.isra.1>
c0004f64:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f68:	31 d2                	xor    edx,edx
c0004f6a:	83 c0 1c             	add    eax,0x1c
c0004f6d:	e8 60 cb ff ff       	call   c0001ad2 <st_dword>
c0004f72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f76:	85 ff                	test   edi,edi
c0004f78:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f7c:	74 75                	je     c0004ff3 <f_open+0x267>
c0004f7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f82:	31 c9                	xor    ecx,ecx
c0004f84:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f87:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f92:	89 fa                	mov    edx,edi
c0004f94:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f98:	e8 12 e3 ff ff       	call   c00032af <remove_chain>
c0004f9d:	89 c5                	mov    ebp,eax
c0004f9f:	85 c0                	test   eax,eax
c0004fa1:	0f 85 fe 01 00 00    	jne    c00051a5 <f_open+0x419>
c0004fa7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004fab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004faf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fb3:	4f                   	dec    edi
c0004fb4:	e8 81 d2 ff ff       	call   c000223a <move_window>
c0004fb9:	89 c5                	mov    ebp,eax
c0004fbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fbf:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fc2:	eb 27                	jmp    c0004feb <f_open+0x25f>
c0004fc4:	85 ed                	test   ebp,ebp
c0004fc6:	0f 85 d9 01 00 00    	jne    c00051a5 <f_open+0x419>
c0004fcc:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fd0:	bd 04 00 00 00       	mov    ebp,0x4
c0004fd5:	a8 10                	test   al,0x10
c0004fd7:	0f 85 c8 01 00 00    	jne    c00051a5 <f_open+0x419>
c0004fdd:	83 e7 02             	and    edi,0x2
c0004fe0:	74 11                	je     c0004ff3 <f_open+0x267>
c0004fe2:	bd 07 00 00 00       	mov    ebp,0x7
c0004fe7:	a8 01                	test   al,0x1
c0004fe9:	eb 02                	jmp    c0004fed <f_open+0x261>
c0004feb:	85 ed                	test   ebp,ebp
c0004fed:	0f 85 b2 01 00 00    	jne    c00051a5 <f_open+0x419>
c0004ff3:	f7 c6 08 00 00 00    	test   esi,0x8
c0004ff9:	74 03                	je     c0004ffe <f_open+0x272>
c0004ffb:	83 ce 40             	or     esi,0x40
c0004ffe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005002:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005005:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005008:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000500b:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000500e:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005012:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005015:	8a 02                	mov    al,BYTE PTR [edx]
c0005017:	3c 04                	cmp    al,0x4
c0005019:	75 2a                	jne    c0005045 <f_open+0x2b9>
c000501b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000501f:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005024:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005027:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000502b:	30 c0                	xor    al,al
c000502d:	09 c8                	or     eax,ecx
c000502f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005032:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005036:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005039:	8d 42 10             	lea    eax,[edx+0x10]
c000503c:	89 da                	mov    edx,ebx
c000503e:	e8 e5 fb ff ff       	call   c0004c28 <init_alloc_info.isra.2>
c0005043:	eb 1c                	jmp    c0005061 <f_open+0x2d5>
c0005045:	89 fa                	mov    edx,edi
c0005047:	e8 8b fb ff ff       	call   c0004bd7 <ld_clust.isra.0>
c000504c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000504f:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005052:	e8 12 ca ff ff       	call   c0001a69 <ld_dword>
c0005057:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000505e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005061:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005065:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000506c:	89 03                	mov    DWORD PTR [ebx],eax
c000506e:	31 d2                	xor    edx,edx
c0005070:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005074:	b9 00 02 00 00       	mov    ecx,0x200
c0005079:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000507d:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005081:	89 f0                	mov    eax,esi
c0005083:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000508a:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000508d:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005094:	8d 43 50             	lea    eax,[ebx+0x50]
c0005097:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000509e:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00050a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00050a9:	e8 42 ca ff ff       	call   c0001af0 <mem_set>
c00050ae:	83 e6 20             	and    esi,0x20
c00050b1:	75 07                	jne    c00050ba <f_open+0x32e>
c00050b3:	31 ed                	xor    ebp,ebp
c00050b5:	e9 eb 00 00 00       	jmp    c00051a5 <f_open+0x419>
c00050ba:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050bd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050cc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050d0:	74 e1                	je     c00050b3 <f_open+0x327>
c00050d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050da:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050dd:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050e4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050e7:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050eb:	31 ff                	xor    edi,edi
c00050ed:	c1 e5 09             	shl    ebp,0x9
c00050f0:	89 ee                	mov    esi,ebp
c00050f2:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050f6:	89 f8                	mov    eax,edi
c00050f8:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050fc:	73 22                	jae    c0005120 <f_open+0x394>
c00050fe:	89 d8                	mov    eax,ebx
c0005100:	e8 bd dc ff ff       	call   c0002dc2 <get_fat>
c0005105:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005109:	89 c2                	mov    edx,eax
c000510b:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000510f:	83 f8 01             	cmp    eax,0x1
c0005112:	76 10                	jbe    c0005124 <f_open+0x398>
c0005114:	83 f8 ff             	cmp    eax,0xffffffff
c0005117:	75 d9                	jne    c00050f2 <f_open+0x366>
c0005119:	bd 01 00 00 00       	mov    ebp,0x1
c000511e:	eb 09                	jmp    c0005129 <f_open+0x39d>
c0005120:	31 ed                	xor    ebp,ebp
c0005122:	eb 05                	jmp    c0005129 <f_open+0x39d>
c0005124:	bd 02 00 00 00       	mov    ebp,0x2
c0005129:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000512c:	85 ed                	test   ebp,ebp
c000512e:	75 75                	jne    c00051a5 <f_open+0x419>
c0005130:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005134:	25 ff 01 00 00       	and    eax,0x1ff
c0005139:	0f 84 74 ff ff ff    	je     c00050b3 <f_open+0x327>
c000513f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005143:	bd 02 00 00 00       	mov    ebp,0x2
c0005148:	89 c8                	mov    eax,ecx
c000514a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000514e:	e8 a2 cb ff ff       	call   c0001cf5 <clst2sect>
c0005153:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005157:	89 d7                	mov    edi,edx
c0005159:	09 c7                	or     edi,eax
c000515b:	74 48                	je     c00051a5 <f_open+0x419>
c000515d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005161:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005165:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000516d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005171:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005175:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005179:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000517c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005180:	83 ec 0c             	sub    esp,0xc
c0005183:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005186:	6a 01                	push   0x1
c0005188:	52                   	push   edx
c0005189:	50                   	push   eax
c000518a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000518e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005192:	50                   	push   eax
c0005193:	e8 79 c8 ff ff       	call   c0001a11 <disk_read>
c0005198:	83 c4 20             	add    esp,0x20
c000519b:	85 c0                	test   eax,eax
c000519d:	0f 95 c0             	setne  al
c00051a0:	0f b6 c0             	movzx  eax,al
c00051a3:	89 c5                	mov    ebp,eax
c00051a5:	83 ec 0c             	sub    esp,0xc
c00051a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00051ac:	e8 f4 30 00 00       	call   c00082a5 <ff_memfree>
c00051b1:	83 c4 10             	add    esp,0x10
c00051b4:	85 ed                	test   ebp,ebp
c00051b6:	74 06                	je     c00051be <f_open+0x432>
c00051b8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051be:	83 c4 7c             	add    esp,0x7c
c00051c1:	89 e8                	mov    eax,ebp
c00051c3:	5b                   	pop    ebx
c00051c4:	5e                   	pop    esi
c00051c5:	5f                   	pop    edi
c00051c6:	5d                   	pop    ebp
c00051c7:	c3                   	ret    

c00051c8 <f_read>:
c00051c8:	55                   	push   ebp
c00051c9:	57                   	push   edi
c00051ca:	56                   	push   esi
c00051cb:	53                   	push   ebx
c00051cc:	83 ec 2c             	sub    esp,0x2c
c00051cf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051d3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	89 d8                	mov    eax,ebx
c00051e3:	e8 77 cf ff ff       	call   c000215f <validate>
c00051e8:	89 c5                	mov    ebp,eax
c00051ea:	85 c0                	test   eax,eax
c00051ec:	0f 85 4c 02 00 00    	jne    c000543e <f_read+0x276>
c00051f2:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051f6:	85 ed                	test   ebp,ebp
c00051f8:	0f 85 40 02 00 00    	jne    c000543e <f_read+0x276>
c00051fe:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005202:	0f 84 31 02 00 00    	je     c0005439 <f_read+0x271>
c0005208:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000520b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000520e:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005211:	bf 00 00 00 00       	mov    edi,0x0
c0005216:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005219:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000521d:	89 d1                	mov    ecx,edx
c000521f:	19 f9                	sbb    ecx,edi
c0005221:	0f 83 cf 00 00 00    	jae    c00052f6 <f_read+0x12e>
c0005227:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000522b:	e9 c6 00 00 00       	jmp    c00052f6 <f_read+0x12e>
c0005230:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005233:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005236:	89 d0                	mov    eax,edx
c0005238:	25 ff 01 00 00       	and    eax,0x1ff
c000523d:	0f 85 c9 01 00 00    	jne    c000540c <f_read+0x244>
c0005243:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005247:	89 d6                	mov    esi,edx
c0005249:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000524d:	89 cf                	mov    edi,ecx
c000524f:	48                   	dec    eax
c0005250:	0f ac fe 09          	shrd   esi,edi,0x9
c0005254:	21 f0                	and    eax,esi
c0005256:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000525a:	0f 84 a6 00 00 00    	je     c0005306 <f_read+0x13e>
c0005260:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005264:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005267:	89 c8                	mov    eax,ecx
c0005269:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000526c:	e8 84 ca ff ff       	call   c0001cf5 <clst2sect>
c0005271:	89 d7                	mov    edi,edx
c0005273:	09 c7                	or     edi,eax
c0005275:	0f 84 b4 00 00 00    	je     c000532f <f_read+0x167>
c000527b:	31 ff                	xor    edi,edi
c000527d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005281:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005284:	01 c6                	add    esi,eax
c0005286:	11 d7                	adc    edi,edx
c0005288:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005290:	0f 86 fd 00 00 00    	jbe    c0005393 <f_read+0x1cb>
c0005296:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000529a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000529e:	c1 e8 09             	shr    eax,0x9
c00052a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00052a4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00052a8:	03 14 24             	add    edx,DWORD PTR [esp]
c00052ab:	39 c2                	cmp    edx,eax
c00052ad:	76 07                	jbe    c00052b6 <f_read+0xee>
c00052af:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00052b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00052b6:	83 ec 0c             	sub    esp,0xc
c00052b9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052bd:	57                   	push   edi
c00052be:	56                   	push   esi
c00052bf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052c3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052c7:	50                   	push   eax
c00052c8:	e8 44 c7 ff ff       	call   c0001a11 <disk_read>
c00052cd:	83 c4 20             	add    esp,0x20
c00052d0:	85 c0                	test   eax,eax
c00052d2:	75 6e                	jne    c0005342 <f_read+0x17a>
c00052d4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052d8:	78 7e                	js     c0005358 <f_read+0x190>
c00052da:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052dd:	c1 e6 09             	shl    esi,0x9
c00052e0:	31 ff                	xor    edi,edi
c00052e2:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052e6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052ea:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052ee:	01 30                	add    DWORD PTR [eax],esi
c00052f0:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052f3:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052f6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052fb:	0f 85 2f ff ff ff    	jne    c0005230 <f_read+0x68>
c0005301:	e9 38 01 00 00       	jmp    c000543e <f_read+0x276>
c0005306:	89 c8                	mov    eax,ecx
c0005308:	09 d0                	or     eax,edx
c000530a:	75 05                	jne    c0005311 <f_read+0x149>
c000530c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000530f:	eb 19                	jmp    c000532a <f_read+0x162>
c0005311:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005315:	74 09                	je     c0005320 <f_read+0x158>
c0005317:	89 d8                	mov    eax,ebx
c0005319:	e8 f8 c9 ff ff       	call   c0001d16 <clmt_clust>
c000531e:	eb 0a                	jmp    c000532a <f_read+0x162>
c0005320:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005323:	89 d8                	mov    eax,ebx
c0005325:	e8 98 da ff ff       	call   c0002dc2 <get_fat>
c000532a:	83 f8 01             	cmp    eax,0x1
c000532d:	77 0e                	ja     c000533d <f_read+0x175>
c000532f:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005333:	bd 02 00 00 00       	mov    ebp,0x2
c0005338:	e9 01 01 00 00       	jmp    c000543e <f_read+0x276>
c000533d:	83 f8 ff             	cmp    eax,0xffffffff
c0005340:	75 0e                	jne    c0005350 <f_read+0x188>
c0005342:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005346:	bd 01 00 00 00       	mov    ebp,0x1
c000534b:	e9 ee 00 00 00       	jmp    c000543e <f_read+0x276>
c0005350:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005353:	e9 08 ff ff ff       	jmp    c0005260 <f_read+0x98>
c0005358:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000535b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000535e:	29 f0                	sub    eax,esi
c0005360:	19 fa                	sbb    edx,edi
c0005362:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005365:	89 d7                	mov    edi,edx
c0005367:	ba 00 00 00 00       	mov    edx,0x0
c000536c:	89 f9                	mov    ecx,edi
c000536e:	19 d1                	sbb    ecx,edx
c0005370:	0f 83 64 ff ff ff    	jae    c00052da <f_read+0x112>
c0005376:	89 c7                	mov    edi,eax
c0005378:	8d 53 50             	lea    edx,[ebx+0x50]
c000537b:	c1 e7 09             	shl    edi,0x9
c000537e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005382:	b9 00 02 00 00       	mov    ecx,0x200
c0005387:	01 f8                	add    eax,edi
c0005389:	e8 4d c7 ff ff       	call   c0001adb <mem_cpy>
c000538e:	e9 47 ff ff ff       	jmp    c00052da <f_read+0x112>
c0005393:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005396:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005399:	89 04 24             	mov    DWORD PTR [esp],eax
c000539c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00053a0:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00053a4:	75 05                	jne    c00053ab <f_read+0x1e3>
c00053a6:	39 34 24             	cmp    DWORD PTR [esp],esi
c00053a9:	74 5b                	je     c0005406 <f_read+0x23e>
c00053ab:	8d 43 50             	lea    eax,[ebx+0x50]
c00053ae:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053b6:	79 2a                	jns    c00053e2 <f_read+0x21a>
c00053b8:	83 ec 0c             	sub    esp,0xc
c00053bb:	6a 01                	push   0x1
c00053bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053c5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053c9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053cd:	50                   	push   eax
c00053ce:	e8 54 c6 ff ff       	call   c0001a27 <disk_write>
c00053d3:	83 c4 20             	add    esp,0x20
c00053d6:	85 c0                	test   eax,eax
c00053d8:	0f 85 64 ff ff ff    	jne    c0005342 <f_read+0x17a>
c00053de:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053e2:	83 ec 0c             	sub    esp,0xc
c00053e5:	6a 01                	push   0x1
c00053e7:	57                   	push   edi
c00053e8:	56                   	push   esi
c00053e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053f1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053f5:	50                   	push   eax
c00053f6:	e8 16 c6 ff ff       	call   c0001a11 <disk_read>
c00053fb:	83 c4 20             	add    esp,0x20
c00053fe:	85 c0                	test   eax,eax
c0005400:	0f 85 3c ff ff ff    	jne    c0005342 <f_read+0x17a>
c0005406:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005409:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000540c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000540f:	ba 00 02 00 00       	mov    edx,0x200
c0005414:	25 ff 01 00 00       	and    eax,0x1ff
c0005419:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000541d:	29 c2                	sub    edx,eax
c000541f:	39 d6                	cmp    esi,edx
c0005421:	76 02                	jbe    c0005425 <f_read+0x25d>
c0005423:	89 d6                	mov    esi,edx
c0005425:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005429:	89 f1                	mov    ecx,esi
c000542b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000542f:	e8 a7 c6 ff ff       	call   c0001adb <mem_cpy>
c0005434:	e9 a7 fe ff ff       	jmp    c00052e0 <f_read+0x118>
c0005439:	bd 07 00 00 00       	mov    ebp,0x7
c000543e:	83 c4 2c             	add    esp,0x2c
c0005441:	89 e8                	mov    eax,ebp
c0005443:	5b                   	pop    ebx
c0005444:	5e                   	pop    esi
c0005445:	5f                   	pop    edi
c0005446:	5d                   	pop    ebp
c0005447:	c3                   	ret    

c0005448 <f_write>:
c0005448:	55                   	push   ebp
c0005449:	57                   	push   edi
c000544a:	56                   	push   esi
c000544b:	53                   	push   ebx
c000544c:	83 ec 2c             	sub    esp,0x2c
c000544f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005453:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005457:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000545d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005461:	89 d8                	mov    eax,ebx
c0005463:	e8 f7 cc ff ff       	call   c000215f <validate>
c0005468:	89 c5                	mov    ebp,eax
c000546a:	85 c0                	test   eax,eax
c000546c:	0f 85 86 02 00 00    	jne    c00056f8 <f_write+0x2b0>
c0005472:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005476:	85 ed                	test   ebp,ebp
c0005478:	0f 85 7a 02 00 00    	jne    c00056f8 <f_write+0x2b0>
c000547e:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005482:	0f 84 6b 02 00 00    	je     c00056f3 <f_write+0x2ab>
c0005488:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000548c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000548f:	0f 84 43 01 00 00    	je     c00055d8 <f_write+0x190>
c0005495:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005498:	89 c1                	mov    ecx,eax
c000549a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000549e:	0f 83 34 01 00 00    	jae    c00055d8 <f_write+0x190>
c00054a4:	f7 d0                	not    eax
c00054a6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00054aa:	e9 29 01 00 00       	jmp    c00055d8 <f_write+0x190>
c00054af:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00054b2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00054b5:	89 d0                	mov    eax,edx
c00054b7:	25 ff 01 00 00       	and    eax,0x1ff
c00054bc:	0f 85 00 02 00 00    	jne    c00056c2 <f_write+0x27a>
c00054c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054c6:	89 d6                	mov    esi,edx
c00054c8:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054cc:	89 cf                	mov    edi,ecx
c00054ce:	48                   	dec    eax
c00054cf:	0f ac fe 09          	shrd   esi,edi,0x9
c00054d3:	21 f0                	and    eax,esi
c00054d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054d9:	0f 84 06 01 00 00    	je     c00055e5 <f_write+0x19d>
c00054df:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054e3:	0f 88 6e 01 00 00    	js     c0005657 <f_write+0x20f>
c00054e9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054ed:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054f0:	89 c8                	mov    eax,ecx
c00054f2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054f6:	e8 fa c7 ff ff       	call   c0001cf5 <clst2sect>
c00054fb:	89 d1                	mov    ecx,edx
c00054fd:	09 c1                	or     ecx,eax
c00054ff:	0f 84 1c 01 00 00    	je     c0005621 <f_write+0x1d9>
c0005505:	31 ff                	xor    edi,edi
c0005507:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000550b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000550f:	01 c6                	add    esi,eax
c0005511:	11 d7                	adc    edi,edx
c0005513:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000551b:	0f 86 63 01 00 00    	jbe    c0005684 <f_write+0x23c>
c0005521:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005525:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005529:	c1 e8 09             	shr    eax,0x9
c000552c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005530:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005534:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005538:	39 c2                	cmp    edx,eax
c000553a:	76 08                	jbe    c0005544 <f_write+0xfc>
c000553c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005540:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005544:	83 ec 0c             	sub    esp,0xc
c0005547:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000554b:	57                   	push   edi
c000554c:	56                   	push   esi
c000554d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005551:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005555:	50                   	push   eax
c0005556:	e8 cc c4 ff ff       	call   c0001a27 <disk_write>
c000555b:	83 c4 20             	add    esp,0x20
c000555e:	85 c0                	test   eax,eax
c0005560:	0f 85 ce 00 00 00    	jne    c0005634 <f_write+0x1ec>
c0005566:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005569:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000556c:	29 f0                	sub    eax,esi
c000556e:	19 fa                	sbb    edx,edi
c0005570:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005574:	89 d7                	mov    edi,edx
c0005576:	ba 00 00 00 00       	mov    edx,0x0
c000557b:	89 f9                	mov    ecx,edi
c000557d:	19 d1                	sbb    ecx,edx
c000557f:	73 1c                	jae    c000559d <f_write+0x155>
c0005581:	89 c7                	mov    edi,eax
c0005583:	b9 00 02 00 00       	mov    ecx,0x200
c0005588:	c1 e7 09             	shl    edi,0x9
c000558b:	8d 43 50             	lea    eax,[ebx+0x50]
c000558e:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005592:	89 fa                	mov    edx,edi
c0005594:	e8 42 c5 ff ff       	call   c0001adb <mem_cpy>
c0005599:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000559d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00055a1:	c1 e6 09             	shl    esi,0x9
c00055a4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00055a8:	31 ff                	xor    edi,edi
c00055aa:	01 30                	add    DWORD PTR [eax],esi
c00055ac:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00055b0:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00055b4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055b7:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055ba:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055bd:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055c0:	89 c1                	mov    ecx,eax
c00055c2:	39 f2                	cmp    edx,esi
c00055c4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055c7:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055ca:	19 f9                	sbb    ecx,edi
c00055cc:	73 04                	jae    c00055d2 <f_write+0x18a>
c00055ce:	89 f2                	mov    edx,esi
c00055d0:	89 f8                	mov    eax,edi
c00055d2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055d5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055d8:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055dd:	0f 85 cc fe ff ff    	jne    c00054af <f_write+0x67>
c00055e3:	eb 2e                	jmp    c0005613 <f_write+0x1cb>
c00055e5:	89 c8                	mov    eax,ecx
c00055e7:	09 d0                	or     eax,edx
c00055e9:	75 0b                	jne    c00055f6 <f_write+0x1ae>
c00055eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055ee:	31 d2                	xor    edx,edx
c00055f0:	85 c0                	test   eax,eax
c00055f2:	75 28                	jne    c000561c <f_write+0x1d4>
c00055f4:	eb 12                	jmp    c0005608 <f_write+0x1c0>
c00055f6:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055fa:	74 09                	je     c0005605 <f_write+0x1bd>
c00055fc:	89 d8                	mov    eax,ebx
c00055fe:	e8 13 c7 ff ff       	call   c0001d16 <clmt_clust>
c0005603:	eb 0a                	jmp    c000560f <f_write+0x1c7>
c0005605:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005608:	89 d8                	mov    eax,ebx
c000560a:	e8 a1 da ff ff       	call   c00030b0 <create_chain>
c000560f:	85 c0                	test   eax,eax
c0005611:	75 09                	jne    c000561c <f_write+0x1d4>
c0005613:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005617:	e9 dc 00 00 00       	jmp    c00056f8 <f_write+0x2b0>
c000561c:	83 f8 01             	cmp    eax,0x1
c000561f:	75 0e                	jne    c000562f <f_write+0x1e7>
c0005621:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005625:	bd 02 00 00 00       	mov    ebp,0x2
c000562a:	e9 c9 00 00 00       	jmp    c00056f8 <f_write+0x2b0>
c000562f:	83 f8 ff             	cmp    eax,0xffffffff
c0005632:	75 0e                	jne    c0005642 <f_write+0x1fa>
c0005634:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005638:	bd 01 00 00 00       	mov    ebp,0x1
c000563d:	e9 b6 00 00 00       	jmp    c00056f8 <f_write+0x2b0>
c0005642:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005645:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005649:	0f 85 90 fe ff ff    	jne    c00054df <f_write+0x97>
c000564f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005652:	e9 88 fe ff ff       	jmp    c00054df <f_write+0x97>
c0005657:	83 ec 0c             	sub    esp,0xc
c000565a:	8d 43 50             	lea    eax,[ebx+0x50]
c000565d:	6a 01                	push   0x1
c000565f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005662:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005665:	50                   	push   eax
c0005666:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000566a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000566e:	50                   	push   eax
c000566f:	e8 b3 c3 ff ff       	call   c0001a27 <disk_write>
c0005674:	83 c4 20             	add    esp,0x20
c0005677:	85 c0                	test   eax,eax
c0005679:	75 b9                	jne    c0005634 <f_write+0x1ec>
c000567b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000567f:	e9 65 fe ff ff       	jmp    c00054e9 <f_write+0xa1>
c0005684:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005687:	75 05                	jne    c000568e <f_write+0x246>
c0005689:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000568c:	74 2e                	je     c00056bc <f_write+0x274>
c000568e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005691:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005694:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005697:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000569a:	73 20                	jae    c00056bc <f_write+0x274>
c000569c:	83 ec 0c             	sub    esp,0xc
c000569f:	8d 43 50             	lea    eax,[ebx+0x50]
c00056a2:	6a 01                	push   0x1
c00056a4:	57                   	push   edi
c00056a5:	56                   	push   esi
c00056a6:	50                   	push   eax
c00056a7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00056ab:	50                   	push   eax
c00056ac:	e8 60 c3 ff ff       	call   c0001a11 <disk_read>
c00056b1:	83 c4 20             	add    esp,0x20
c00056b4:	85 c0                	test   eax,eax
c00056b6:	0f 85 78 ff ff ff    	jne    c0005634 <f_write+0x1ec>
c00056bc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056bf:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056c2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056c5:	ba 00 02 00 00       	mov    edx,0x200
c00056ca:	25 ff 01 00 00       	and    eax,0x1ff
c00056cf:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056d3:	29 c2                	sub    edx,eax
c00056d5:	39 d6                	cmp    esi,edx
c00056d7:	76 02                	jbe    c00056db <f_write+0x293>
c00056d9:	89 d6                	mov    esi,edx
c00056db:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056df:	89 f1                	mov    ecx,esi
c00056e1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056e5:	e8 f1 c3 ff ff       	call   c0001adb <mem_cpy>
c00056ea:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056ee:	e9 b1 fe ff ff       	jmp    c00055a4 <f_write+0x15c>
c00056f3:	bd 07 00 00 00       	mov    ebp,0x7
c00056f8:	83 c4 2c             	add    esp,0x2c
c00056fb:	89 e8                	mov    eax,ebp
c00056fd:	5b                   	pop    ebx
c00056fe:	5e                   	pop    esi
c00056ff:	5f                   	pop    edi
c0005700:	5d                   	pop    ebp
c0005701:	c3                   	ret    

c0005702 <f_sync>:
c0005702:	56                   	push   esi
c0005703:	53                   	push   ebx
c0005704:	83 ec 64             	sub    esp,0x64
c0005707:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000570b:	8d 54 24 10          	lea    edx,[esp+0x10]
c000570f:	89 d8                	mov    eax,ebx
c0005711:	e8 49 ca ff ff       	call   c000215f <validate>
c0005716:	85 c0                	test   eax,eax
c0005718:	0f 85 ba 01 00 00    	jne    c00058d8 <f_sync+0x1d6>
c000571e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005721:	f6 c2 40             	test   dl,0x40
c0005724:	0f 84 ae 01 00 00    	je     c00058d8 <f_sync+0x1d6>
c000572a:	84 d2                	test   dl,dl
c000572c:	79 33                	jns    c0005761 <f_sync+0x5f>
c000572e:	83 ec 0c             	sub    esp,0xc
c0005731:	8d 43 50             	lea    eax,[ebx+0x50]
c0005734:	6a 01                	push   0x1
c0005736:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005739:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000573c:	50                   	push   eax
c000573d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005741:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005745:	50                   	push   eax
c0005746:	e8 dc c2 ff ff       	call   c0001a27 <disk_write>
c000574b:	83 c4 20             	add    esp,0x20
c000574e:	89 c2                	mov    edx,eax
c0005750:	b8 01 00 00 00       	mov    eax,0x1
c0005755:	85 d2                	test   edx,edx
c0005757:	0f 85 7b 01 00 00    	jne    c00058d8 <f_sync+0x1d6>
c000575d:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005765:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005768:	0f 85 11 01 00 00    	jne    c000587f <f_sync+0x17d>
c000576e:	89 d8                	mov    eax,ebx
c0005770:	e8 13 d6 ff ff       	call   c0002d88 <fill_first_frag>
c0005775:	85 c0                	test   eax,eax
c0005777:	0f 85 5b 01 00 00    	jne    c00058d8 <f_sync+0x1d6>
c000577d:	83 c9 ff             	or     ecx,0xffffffff
c0005780:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005783:	89 d8                	mov    eax,ebx
c0005785:	e8 c9 d5 ff ff       	call   c0002d53 <fill_last_frag>
c000578a:	85 c0                	test   eax,eax
c000578c:	0f 85 46 01 00 00    	jne    c00058d8 <f_sync+0x1d6>
c0005792:	83 ec 0c             	sub    esp,0xc
c0005795:	68 60 04 00 00       	push   0x460
c000579a:	e8 f0 2a 00 00       	call   c000828f <ff_memalloc>
c000579f:	83 c4 10             	add    esp,0x10
c00057a2:	89 c6                	mov    esi,eax
c00057a4:	b8 11 00 00 00       	mov    eax,0x11
c00057a9:	85 f6                	test   esi,esi
c00057ab:	0f 84 27 01 00 00    	je     c00058d8 <f_sync+0x1d6>
c00057b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057b5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057bb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057be:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057c1:	89 da                	mov    edx,ebx
c00057c3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057c7:	e8 af df ff ff       	call   c000377b <load_obj_xdir>
c00057cc:	85 c0                	test   eax,eax
c00057ce:	0f 85 95 00 00 00    	jne    c0005869 <f_sync+0x167>
c00057d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057d8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057db:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057df:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057e2:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057e5:	83 ca 01             	or     edx,0x1
c00057e8:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057eb:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057ee:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057f1:	83 c0 34             	add    eax,0x34
c00057f4:	e8 d9 c2 ff ff       	call   c0001ad2 <st_dword>
c00057f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057fd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005800:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005803:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005806:	83 c0 38             	add    eax,0x38
c0005809:	e8 c7 c2 ff ff       	call   c0001ad5 <st_qword>
c000580e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005818:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000581b:	83 c0 28             	add    eax,0x28
c000581e:	e8 b2 c2 ff ff       	call   c0001ad5 <st_qword>
c0005823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005827:	ba 00 00 21 50       	mov    edx,0x50210000
c000582c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000582f:	83 c0 0c             	add    eax,0xc
c0005832:	e8 9b c2 ff ff       	call   c0001ad2 <st_dword>
c0005837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000583b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000583e:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005842:	31 d2                	xor    edx,edx
c0005844:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005847:	83 c0 10             	add    eax,0x10
c000584a:	e8 83 c2 ff ff       	call   c0001ad2 <st_dword>
c000584f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005853:	e8 62 e1 ff ff       	call   c00039ba <store_xdir>
c0005858:	85 c0                	test   eax,eax
c000585a:	75 0d                	jne    c0005869 <f_sync+0x167>
c000585c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005860:	e8 00 eb ff ff       	call   c0004365 <sync_fs>
c0005865:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005869:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000586d:	83 ec 0c             	sub    esp,0xc
c0005870:	56                   	push   esi
c0005871:	e8 2f 2a 00 00       	call   c00082a5 <ff_memfree>
c0005876:	83 c4 10             	add    esp,0x10
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	eb 59                	jmp    c00058d8 <f_sync+0x1d6>
c000587f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005882:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005885:	e8 b0 c9 ff ff       	call   c000223a <move_window>
c000588a:	85 c0                	test   eax,eax
c000588c:	75 4a                	jne    c00058d8 <f_sync+0x1d6>
c000588e:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005891:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005895:	89 f2                	mov    edx,esi
c0005897:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000589a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000589c:	e8 5f f3 ff ff       	call   c0004c00 <st_clust.isra.1>
c00058a1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058a4:	8d 46 1c             	lea    eax,[esi+0x1c]
c00058a7:	e8 26 c2 ff ff       	call   c0001ad2 <st_dword>
c00058ac:	8d 46 16             	lea    eax,[esi+0x16]
c00058af:	ba 00 00 21 50       	mov    edx,0x50210000
c00058b4:	e8 19 c2 ff ff       	call   c0001ad2 <st_dword>
c00058b9:	8d 46 12             	lea    eax,[esi+0x12]
c00058bc:	31 d2                	xor    edx,edx
c00058be:	e8 0b c2 ff ff       	call   c0001ace <st_word>
c00058c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058c7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058cf:	e8 91 ea ff ff       	call   c0004365 <sync_fs>
c00058d4:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058d8:	83 c4 64             	add    esp,0x64
c00058db:	5b                   	pop    ebx
c00058dc:	5e                   	pop    esi
c00058dd:	c3                   	ret    

c00058de <f_close>:
c00058de:	53                   	push   ebx
c00058df:	83 ec 24             	sub    esp,0x24
c00058e2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058e6:	53                   	push   ebx
c00058e7:	e8 16 fe ff ff       	call   c0005702 <f_sync>
c00058ec:	83 c4 10             	add    esp,0x10
c00058ef:	85 c0                	test   eax,eax
c00058f1:	75 15                	jne    c0005908 <f_close+0x2a>
c00058f3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058f7:	89 d8                	mov    eax,ebx
c00058f9:	e8 61 c8 ff ff       	call   c000215f <validate>
c00058fe:	85 c0                	test   eax,eax
c0005900:	75 06                	jne    c0005908 <f_close+0x2a>
c0005902:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005908:	83 c4 18             	add    esp,0x18
c000590b:	5b                   	pop    ebx
c000590c:	c3                   	ret    

c000590d <f_lseek>:
c000590d:	55                   	push   ebp
c000590e:	57                   	push   edi
c000590f:	56                   	push   esi
c0005910:	53                   	push   ebx
c0005911:	83 ec 3c             	sub    esp,0x3c
c0005914:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005918:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000591c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005920:	89 04 24             	mov    DWORD PTR [esp],eax
c0005923:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005927:	89 d8                	mov    eax,ebx
c0005929:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000592d:	e8 2d c8 ff ff       	call   c000215f <validate>
c0005932:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005936:	85 c0                	test   eax,eax
c0005938:	0f 85 7a 04 00 00    	jne    c0005db8 <f_lseek+0x4ab>
c000593e:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005942:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005946:	85 c0                	test   eax,eax
c0005948:	0f 85 6a 04 00 00    	jne    c0005db8 <f_lseek+0x4ab>
c000594e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005952:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005955:	74 0c                	je     c0005963 <f_lseek+0x56>
c0005957:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000595a:	85 c0                	test   eax,eax
c000595c:	75 1f                	jne    c000597d <f_lseek+0x70>
c000595e:	e9 b5 01 00 00       	jmp    c0005b18 <f_lseek+0x20b>
c0005963:	83 c9 ff             	or     ecx,0xffffffff
c0005966:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005969:	89 d8                	mov    eax,ebx
c000596b:	e8 e3 d3 ff ff       	call   c0002d53 <fill_last_frag>
c0005970:	85 c0                	test   eax,eax
c0005972:	74 e3                	je     c0005957 <f_lseek+0x4a>
c0005974:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005978:	e9 3b 04 00 00       	jmp    c0005db8 <f_lseek+0x4ab>
c000597d:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005982:	0f 85 ac 00 00 00    	jne    c0005a34 <f_lseek+0x127>
c0005988:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000598c:	0f 85 a2 00 00 00    	jne    c0005a34 <f_lseek+0x127>
c0005992:	8d 78 04             	lea    edi,[eax+0x4]
c0005995:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005998:	8b 00                	mov    eax,DWORD PTR [eax]
c000599a:	be 02 00 00 00       	mov    esi,0x2
c000599f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059a3:	85 ed                	test   ebp,ebp
c00059a5:	74 73                	je     c0005a1a <f_lseek+0x10d>
c00059a7:	89 e9                	mov    ecx,ebp
c00059a9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00059b0:	ff 04 24             	inc    DWORD PTR [esp]
c00059b3:	89 ca                	mov    edx,ecx
c00059b5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059b9:	89 d8                	mov    eax,ebx
c00059bb:	e8 02 d4 ff ff       	call   c0002dc2 <get_fat>
c00059c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059c4:	83 f8 01             	cmp    eax,0x1
c00059c7:	77 11                	ja     c00059da <f_lseek+0xcd>
c00059c9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059cd:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059d5:	e9 de 03 00 00       	jmp    c0005db8 <f_lseek+0x4ab>
c00059da:	83 f8 ff             	cmp    eax,0xffffffff
c00059dd:	75 11                	jne    c00059f0 <f_lseek+0xe3>
c00059df:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059e3:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059eb:	e9 c8 03 00 00       	jmp    c0005db8 <f_lseek+0x4ab>
c00059f0:	8d 51 01             	lea    edx,[ecx+0x1]
c00059f3:	89 c1                	mov    ecx,eax
c00059f5:	39 c2                	cmp    edx,eax
c00059f7:	74 b7                	je     c00059b0 <f_lseek+0xa3>
c00059f9:	83 c6 02             	add    esi,0x2
c00059fc:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005a00:	72 0b                	jb     c0005a0d <f_lseek+0x100>
c0005a02:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005a05:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005a08:	89 0f                	mov    DWORD PTR [edi],ecx
c0005a0a:	83 c7 08             	add    edi,0x8
c0005a0d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005a11:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005a14:	76 04                	jbe    c0005a1a <f_lseek+0x10d>
c0005a16:	89 c5                	mov    ebp,eax
c0005a18:	eb 8d                	jmp    c00059a7 <f_lseek+0x9a>
c0005a1a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a1d:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a21:	89 30                	mov    DWORD PTR [eax],esi
c0005a23:	0f 87 87 03 00 00    	ja     c0005db0 <f_lseek+0x4a3>
c0005a29:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a2f:	e9 84 03 00 00       	jmp    c0005db8 <f_lseek+0x4ab>
c0005a34:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a37:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a46:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a4d:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a51:	73 0f                	jae    c0005a62 <f_lseek+0x155>
c0005a53:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a5e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a6a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a6d:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a74:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a78:	0f 84 3a 03 00 00    	je     c0005db8 <f_lseek+0x4ab>
c0005a7e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a82:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a86:	83 c6 ff             	add    esi,0xffffffff
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	83 d7 ff             	adc    edi,0xffffffff
c0005a8e:	89 f2                	mov    edx,esi
c0005a90:	89 f9                	mov    ecx,edi
c0005a92:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a96:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a99:	e8 78 c2 ff ff       	call   c0001d16 <clmt_clust>
c0005a9e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005aa2:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005aa5:	89 c2                	mov    edx,eax
c0005aa7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005aab:	89 c8                	mov    eax,ecx
c0005aad:	e8 43 c2 ff ff       	call   c0001cf5 <clst2sect>
c0005ab2:	89 d7                	mov    edi,edx
c0005ab4:	09 c7                	or     edi,eax
c0005ab6:	0f 84 0d ff ff ff    	je     c00059c9 <f_lseek+0xbc>
c0005abc:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ac0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ac6:	0f 84 ec 02 00 00    	je     c0005db8 <f_lseek+0x4ab>
c0005acc:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ad0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ad4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ad7:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005adb:	0f ac fe 09          	shrd   esi,edi,0x9
c0005adf:	4d                   	dec    ebp
c0005ae0:	31 ff                	xor    edi,edi
c0005ae2:	21 ee                	and    esi,ebp
c0005ae4:	01 c6                	add    esi,eax
c0005ae6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005ae9:	11 d7                	adc    edi,edx
c0005aeb:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005aee:	39 fa                	cmp    edx,edi
c0005af0:	75 08                	jne    c0005afa <f_lseek+0x1ed>
c0005af2:	39 f0                	cmp    eax,esi
c0005af4:	0f 84 be 02 00 00    	je     c0005db8 <f_lseek+0x4ab>
c0005afa:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005afd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005b01:	0f 89 80 02 00 00    	jns    c0005d87 <f_lseek+0x47a>
c0005b07:	83 ec 0c             	sub    esp,0xc
c0005b0a:	6a 01                	push   0x1
c0005b0c:	52                   	push   edx
c0005b0d:	50                   	push   eax
c0005b0e:	55                   	push   ebp
c0005b0f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005b13:	e9 5a 02 00 00       	jmp    c0005d72 <f_lseek+0x465>
c0005b18:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b1c:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b1f:	74 16                	je     c0005b37 <f_lseek+0x22a>
c0005b21:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b26:	76 0f                	jbe    c0005b37 <f_lseek+0x22a>
c0005b28:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b2f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b37:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b3a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b3d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b40:	89 c7                	mov    edi,eax
c0005b42:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b46:	73 0d                	jae    c0005b55 <f_lseek+0x248>
c0005b48:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b4c:	75 07                	jne    c0005b55 <f_lseek+0x248>
c0005b4e:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b51:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b55:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b58:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b5f:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b66:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b6d:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b70:	75 09                	jne    c0005b7b <f_lseek+0x26e>
c0005b72:	31 f6                	xor    esi,esi
c0005b74:	31 ff                	xor    edi,edi
c0005b76:	e9 af 01 00 00       	jmp    c0005d2a <f_lseek+0x41d>
c0005b7b:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b7f:	89 d7                	mov    edi,edx
c0005b81:	c1 e1 09             	shl    ecx,0x9
c0005b84:	09 c7                	or     edi,eax
c0005b86:	89 cd                	mov    ebp,ecx
c0005b88:	74 6d                	je     c0005bf7 <f_lseek+0x2ea>
c0005b8a:	83 c0 ff             	add    eax,0xffffffff
c0005b8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b91:	83 d2 ff             	adc    edx,0xffffffff
c0005b94:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b97:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b9b:	83 c0 ff             	add    eax,0xffffffff
c0005b9e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ba2:	83 d2 ff             	adc    edx,0xffffffff
c0005ba5:	31 ff                	xor    edi,edi
c0005ba7:	57                   	push   edi
c0005ba8:	51                   	push   ecx
c0005ba9:	52                   	push   edx
c0005baa:	50                   	push   eax
c0005bab:	e8 1c fc 01 00       	call   c00257cc <__udivdi3>
c0005bb0:	83 c4 10             	add    esp,0x10
c0005bb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005bb7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005bbb:	57                   	push   edi
c0005bbc:	55                   	push   ebp
c0005bbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bc5:	e8 02 fc 01 00       	call   c00257cc <__udivdi3>
c0005bca:	83 c4 10             	add    esp,0x10
c0005bcd:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005bd1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005bd5:	19 d1                	sbb    ecx,edx
c0005bd7:	72 1e                	jb     c0005bf7 <f_lseek+0x2ea>
c0005bd9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bdd:	89 e9                	mov    ecx,ebp
c0005bdf:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005be2:	f7 d9                	neg    ecx
c0005be4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005be7:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005beb:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005bee:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005bf1:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005bf5:	eb 28                	jmp    c0005c1f <f_lseek+0x312>
c0005bf7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005bfa:	85 c0                	test   eax,eax
c0005bfc:	75 1e                	jne    c0005c1c <f_lseek+0x30f>
c0005bfe:	31 d2                	xor    edx,edx
c0005c00:	89 d8                	mov    eax,ebx
c0005c02:	e8 a9 d4 ff ff       	call   c00030b0 <create_chain>
c0005c07:	83 f8 01             	cmp    eax,0x1
c0005c0a:	0f 84 b9 fd ff ff    	je     c00059c9 <f_lseek+0xbc>
c0005c10:	83 f8 ff             	cmp    eax,0xffffffff
c0005c13:	0f 84 c6 fd ff ff    	je     c00059df <f_lseek+0xd2>
c0005c19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c1c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c1f:	85 c0                	test   eax,eax
c0005c21:	0f 84 4b ff ff ff    	je     c0005b72 <f_lseek+0x265>
c0005c27:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c2b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c33:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c36:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c3a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c3d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c40:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c44:	0f 83 9d 00 00 00    	jae    c0005ce7 <f_lseek+0x3da>
c0005c4a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c4e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c52:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c55:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c59:	01 f2                	add    edx,esi
c0005c5b:	11 f9                	adc    ecx,edi
c0005c5d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c61:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c65:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c68:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c6b:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c6e:	f6 c1 02             	test   cl,0x2
c0005c71:	74 35                	je     c0005ca8 <f_lseek+0x39b>
c0005c73:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c77:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c7a:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c7d:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c81:	73 16                	jae    c0005c99 <f_lseek+0x38c>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	88 ca                	mov    dl,cl
c0005c8d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c90:	83 ca 40             	or     edx,0x40
c0005c93:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c96:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c99:	89 c2                	mov    edx,eax
c0005c9b:	89 d8                	mov    eax,ebx
c0005c9d:	e8 0e d4 ff ff       	call   c00030b0 <create_chain>
c0005ca2:	85 c0                	test   eax,eax
c0005ca4:	75 0b                	jne    c0005cb1 <f_lseek+0x3a4>
c0005ca6:	eb 30                	jmp    c0005cd8 <f_lseek+0x3cb>
c0005ca8:	89 c2                	mov    edx,eax
c0005caa:	89 d8                	mov    eax,ebx
c0005cac:	e8 11 d1 ff ff       	call   c0002dc2 <get_fat>
c0005cb1:	83 f8 ff             	cmp    eax,0xffffffff
c0005cb4:	0f 84 25 fd ff ff    	je     c00059df <f_lseek+0xd2>
c0005cba:	83 f8 01             	cmp    eax,0x1
c0005cbd:	0f 86 06 fd ff ff    	jbe    c00059c9 <f_lseek+0xbc>
c0005cc3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cc7:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005cca:	0f 86 f9 fc ff ff    	jbe    c00059c9 <f_lseek+0xbc>
c0005cd0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cd3:	e9 5b ff ff ff       	jmp    c0005c33 <f_lseek+0x326>
c0005cd8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005cdf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ce7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005cea:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005cee:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005cf1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005cf4:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cf7:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cfd:	0f 84 6f fe ff ff    	je     c0005b72 <f_lseek+0x265>
c0005d03:	89 c2                	mov    edx,eax
c0005d05:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005d09:	e8 e7 bf ff ff       	call   c0001cf5 <clst2sect>
c0005d0e:	89 d7                	mov    edi,edx
c0005d10:	09 c7                	or     edi,eax
c0005d12:	0f 84 b1 fc ff ff    	je     c00059c9 <f_lseek+0xbc>
c0005d18:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d1c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d1f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d23:	c1 ef 09             	shr    edi,0x9
c0005d26:	01 c6                	add    esi,eax
c0005d28:	11 d7                	adc    edi,edx
c0005d2a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d2d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d30:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d33:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d36:	19 d1                	sbb    ecx,edx
c0005d38:	73 0a                	jae    c0005d44 <f_lseek+0x437>
c0005d3a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d3d:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d40:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d44:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d49:	74 6d                	je     c0005db8 <f_lseek+0x4ab>
c0005d4b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d4e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d51:	39 fa                	cmp    edx,edi
c0005d53:	75 04                	jne    c0005d59 <f_lseek+0x44c>
c0005d55:	39 f0                	cmp    eax,esi
c0005d57:	74 5f                	je     c0005db8 <f_lseek+0x4ab>
c0005d59:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d5c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d60:	79 25                	jns    c0005d87 <f_lseek+0x47a>
c0005d62:	83 ec 0c             	sub    esp,0xc
c0005d65:	6a 01                	push   0x1
c0005d67:	52                   	push   edx
c0005d68:	50                   	push   eax
c0005d69:	55                   	push   ebp
c0005d6a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d6e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d72:	50                   	push   eax
c0005d73:	e8 af bc ff ff       	call   c0001a27 <disk_write>
c0005d78:	83 c4 20             	add    esp,0x20
c0005d7b:	85 c0                	test   eax,eax
c0005d7d:	0f 85 5c fc ff ff    	jne    c00059df <f_lseek+0xd2>
c0005d83:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d87:	83 ec 0c             	sub    esp,0xc
c0005d8a:	6a 01                	push   0x1
c0005d8c:	57                   	push   edi
c0005d8d:	56                   	push   esi
c0005d8e:	55                   	push   ebp
c0005d8f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d93:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d97:	50                   	push   eax
c0005d98:	e8 74 bc ff ff       	call   c0001a11 <disk_read>
c0005d9d:	83 c4 20             	add    esp,0x20
c0005da0:	85 c0                	test   eax,eax
c0005da2:	0f 85 37 fc ff ff    	jne    c00059df <f_lseek+0xd2>
c0005da8:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005dab:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005dae:	eb 08                	jmp    c0005db8 <f_lseek+0x4ab>
c0005db0:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005db8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005dbc:	83 c4 3c             	add    esp,0x3c
c0005dbf:	5b                   	pop    ebx
c0005dc0:	5e                   	pop    esi
c0005dc1:	5f                   	pop    edi
c0005dc2:	5d                   	pop    ebp
c0005dc3:	c3                   	ret    

c0005dc4 <f_opendir>:
c0005dc4:	56                   	push   esi
c0005dc5:	b8 09 00 00 00       	mov    eax,0x9
c0005dca:	53                   	push   ebx
c0005dcb:	83 ec 24             	sub    esp,0x24
c0005dce:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005dd2:	85 db                	test   ebx,ebx
c0005dd4:	0f 84 e6 00 00 00    	je     c0005ec0 <f_opendir+0xfc>
c0005dda:	31 c9                	xor    ecx,ecx
c0005ddc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005de0:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005de4:	e8 03 c7 ff ff       	call   c00024ec <mount_volume>
c0005de9:	85 c0                	test   eax,eax
c0005deb:	0f 85 c9 00 00 00    	jne    c0005eba <f_opendir+0xf6>
c0005df1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005df5:	83 ec 0c             	sub    esp,0xc
c0005df8:	89 03                	mov    DWORD PTR [ebx],eax
c0005dfa:	68 60 04 00 00       	push   0x460
c0005dff:	e8 8b 24 00 00       	call   c000828f <ff_memalloc>
c0005e04:	83 c4 10             	add    esp,0x10
c0005e07:	89 c6                	mov    esi,eax
c0005e09:	b8 11 00 00 00       	mov    eax,0x11
c0005e0e:	85 f6                	test   esi,esi
c0005e10:	0f 84 aa 00 00 00    	je     c0005ec0 <f_opendir+0xfc>
c0005e16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e1a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e23:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e26:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e2a:	89 d8                	mov    eax,ebx
c0005e2c:	e8 31 ee ff ff       	call   c0004c62 <follow_path>
c0005e31:	85 c0                	test   eax,eax
c0005e33:	75 61                	jne    c0005e96 <f_opendir+0xd2>
c0005e35:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e39:	78 46                	js     c0005e81 <f_opendir+0xbd>
c0005e3b:	b8 05 00 00 00       	mov    eax,0x5
c0005e40:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e44:	74 50                	je     c0005e96 <f_opendir+0xd2>
c0005e46:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e4a:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e4c:	3c 04                	cmp    al,0x4
c0005e4e:	75 26                	jne    c0005e76 <f_opendir+0xb2>
c0005e50:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e53:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e56:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e59:	30 d2                	xor    dl,dl
c0005e5b:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e5f:	09 c2                	or     edx,eax
c0005e61:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e64:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e67:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e6a:	89 da                	mov    edx,ebx
c0005e6c:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e6f:	e8 b4 ed ff ff       	call   c0004c28 <init_alloc_info.isra.2>
c0005e74:	eb 0b                	jmp    c0005e81 <f_opendir+0xbd>
c0005e76:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e79:	e8 59 ed ff ff       	call   c0004bd7 <ld_clust.isra.0>
c0005e7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e85:	31 d2                	xor    edx,edx
c0005e87:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e8b:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e8f:	89 d8                	mov    eax,ebx
c0005e91:	e8 22 d1 ff ff       	call   c0002fb8 <dir_sdi>
c0005e96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e9a:	83 ec 0c             	sub    esp,0xc
c0005e9d:	56                   	push   esi
c0005e9e:	e8 02 24 00 00       	call   c00082a5 <ff_memfree>
c0005ea3:	83 c4 10             	add    esp,0x10
c0005ea6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eaa:	83 f8 04             	cmp    eax,0x4
c0005ead:	74 06                	je     c0005eb5 <f_opendir+0xf1>
c0005eaf:	85 c0                	test   eax,eax
c0005eb1:	74 0d                	je     c0005ec0 <f_opendir+0xfc>
c0005eb3:	eb 05                	jmp    c0005eba <f_opendir+0xf6>
c0005eb5:	b8 05 00 00 00       	mov    eax,0x5
c0005eba:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ec0:	83 c4 24             	add    esp,0x24
c0005ec3:	5b                   	pop    ebx
c0005ec4:	5e                   	pop    esi
c0005ec5:	c3                   	ret    

c0005ec6 <f_closedir>:
c0005ec6:	53                   	push   ebx
c0005ec7:	83 ec 18             	sub    esp,0x18
c0005eca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005ece:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ed2:	89 d8                	mov    eax,ebx
c0005ed4:	e8 86 c2 ff ff       	call   c000215f <validate>
c0005ed9:	85 c0                	test   eax,eax
c0005edb:	75 06                	jne    c0005ee3 <f_closedir+0x1d>
c0005edd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ee3:	83 c4 18             	add    esp,0x18
c0005ee6:	5b                   	pop    ebx
c0005ee7:	c3                   	ret    

c0005ee8 <f_readdir>:
c0005ee8:	57                   	push   edi
c0005ee9:	56                   	push   esi
c0005eea:	53                   	push   ebx
c0005eeb:	83 ec 20             	sub    esp,0x20
c0005eee:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ef2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ef6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005efa:	89 d8                	mov    eax,ebx
c0005efc:	e8 5e c2 ff ff       	call   c000215f <validate>
c0005f01:	85 c0                	test   eax,eax
c0005f03:	75 77                	jne    c0005f7c <f_readdir+0x94>
c0005f05:	85 ff                	test   edi,edi
c0005f07:	75 0b                	jne    c0005f14 <f_readdir+0x2c>
c0005f09:	31 d2                	xor    edx,edx
c0005f0b:	89 d8                	mov    eax,ebx
c0005f0d:	e8 a6 d0 ff ff       	call   c0002fb8 <dir_sdi>
c0005f12:	eb 68                	jmp    c0005f7c <f_readdir+0x94>
c0005f14:	83 ec 0c             	sub    esp,0xc
c0005f17:	68 60 04 00 00       	push   0x460
c0005f1c:	e8 6e 23 00 00       	call   c000828f <ff_memalloc>
c0005f21:	83 c4 10             	add    esp,0x10
c0005f24:	89 c6                	mov    esi,eax
c0005f26:	b8 11 00 00 00       	mov    eax,0x11
c0005f2b:	85 f6                	test   esi,esi
c0005f2d:	74 4d                	je     c0005f7c <f_readdir+0x94>
c0005f2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f33:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f39:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f3c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f3f:	31 d2                	xor    edx,edx
c0005f41:	89 d8                	mov    eax,ebx
c0005f43:	e8 80 d8 ff ff       	call   c00037c8 <dir_read>
c0005f48:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f4d:	75 19                	jne    c0005f68 <f_readdir+0x80>
c0005f4f:	89 fa                	mov    edx,edi
c0005f51:	89 d8                	mov    eax,ebx
c0005f53:	e8 7e ea ff ff       	call   c00049d6 <get_fileinfo>
c0005f58:	31 d2                	xor    edx,edx
c0005f5a:	89 d8                	mov    eax,ebx
c0005f5c:	e8 af d5 ff ff       	call   c0003510 <dir_next>
c0005f61:	83 f8 04             	cmp    eax,0x4
c0005f64:	75 02                	jne    c0005f68 <f_readdir+0x80>
c0005f66:	31 c0                	xor    eax,eax
c0005f68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f6c:	83 ec 0c             	sub    esp,0xc
c0005f6f:	56                   	push   esi
c0005f70:	e8 30 23 00 00       	call   c00082a5 <ff_memfree>
c0005f75:	83 c4 10             	add    esp,0x10
c0005f78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f7c:	83 c4 20             	add    esp,0x20
c0005f7f:	5b                   	pop    ebx
c0005f80:	5e                   	pop    esi
c0005f81:	5f                   	pop    edi
c0005f82:	c3                   	ret    

c0005f83 <f_stat>:
c0005f83:	57                   	push   edi
c0005f84:	31 c9                	xor    ecx,ecx
c0005f86:	56                   	push   esi
c0005f87:	53                   	push   ebx
c0005f88:	83 ec 50             	sub    esp,0x50
c0005f8b:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f8f:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f93:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f97:	e8 50 c5 ff ff       	call   c00024ec <mount_volume>
c0005f9c:	89 c3                	mov    ebx,eax
c0005f9e:	85 c0                	test   eax,eax
c0005fa0:	75 67                	jne    c0006009 <f_stat+0x86>
c0005fa2:	83 ec 0c             	sub    esp,0xc
c0005fa5:	bb 11 00 00 00       	mov    ebx,0x11
c0005faa:	68 60 04 00 00       	push   0x460
c0005faf:	e8 db 22 00 00       	call   c000828f <ff_memalloc>
c0005fb4:	83 c4 10             	add    esp,0x10
c0005fb7:	89 c6                	mov    esi,eax
c0005fb9:	85 c0                	test   eax,eax
c0005fbb:	74 4c                	je     c0006009 <f_stat+0x86>
c0005fbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005fc1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fc7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fca:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fcd:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fd1:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fd5:	e8 88 ec ff ff       	call   c0004c62 <follow_path>
c0005fda:	89 c3                	mov    ebx,eax
c0005fdc:	85 c0                	test   eax,eax
c0005fde:	75 1d                	jne    c0005ffd <f_stat+0x7a>
c0005fe0:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005fe5:	78 11                	js     c0005ff8 <f_stat+0x75>
c0005fe7:	85 ff                	test   edi,edi
c0005fe9:	74 12                	je     c0005ffd <f_stat+0x7a>
c0005feb:	89 fa                	mov    edx,edi
c0005fed:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005ff1:	e8 e0 e9 ff ff       	call   c00049d6 <get_fileinfo>
c0005ff6:	eb 05                	jmp    c0005ffd <f_stat+0x7a>
c0005ff8:	bb 06 00 00 00       	mov    ebx,0x6
c0005ffd:	83 ec 0c             	sub    esp,0xc
c0006000:	56                   	push   esi
c0006001:	e8 9f 22 00 00       	call   c00082a5 <ff_memfree>
c0006006:	83 c4 10             	add    esp,0x10
c0006009:	83 c4 50             	add    esp,0x50
c000600c:	89 d8                	mov    eax,ebx
c000600e:	5b                   	pop    ebx
c000600f:	5e                   	pop    esi
c0006010:	5f                   	pop    edi
c0006011:	c3                   	ret    

c0006012 <f_getfree>:
c0006012:	55                   	push   ebp
c0006013:	31 c9                	xor    ecx,ecx
c0006015:	57                   	push   edi
c0006016:	56                   	push   esi
c0006017:	53                   	push   ebx
c0006018:	83 ec 5c             	sub    esp,0x5c
c000601b:	8d 54 24 24          	lea    edx,[esp+0x24]
c000601f:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006023:	e8 c4 c4 ff ff       	call   c00024ec <mount_volume>
c0006028:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000602c:	85 c0                	test   eax,eax
c000602e:	0f 85 9d 01 00 00    	jne    c00061d1 <f_getfree+0x1bf>
c0006034:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006038:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000603c:	89 02                	mov    DWORD PTR [edx],eax
c000603e:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006041:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006044:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006047:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000604b:	39 f2                	cmp    edx,esi
c000604d:	77 0b                	ja     c000605a <f_getfree+0x48>
c000604f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006053:	89 10                	mov    DWORD PTR [eax],edx
c0006055:	e9 77 01 00 00       	jmp    c00061d1 <f_getfree+0x1bf>
c000605a:	8a 10                	mov    dl,BYTE PTR [eax]
c000605c:	80 fa 01             	cmp    dl,0x1
c000605f:	75 3a                	jne    c000609b <f_getfree+0x89>
c0006061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006065:	be 02 00 00 00       	mov    esi,0x2
c000606a:	31 db                	xor    ebx,ebx
c000606c:	89 f2                	mov    edx,esi
c000606e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006072:	e8 4b cd ff ff       	call   c0002dc2 <get_fat>
c0006077:	83 f8 ff             	cmp    eax,0xffffffff
c000607a:	0f 84 28 01 00 00    	je     c00061a8 <f_getfree+0x196>
c0006080:	83 f8 01             	cmp    eax,0x1
c0006083:	0f 84 29 01 00 00    	je     c00061b2 <f_getfree+0x1a0>
c0006089:	83 d3 00             	adc    ebx,0x0
c000608c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006090:	46                   	inc    esi
c0006091:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006094:	77 d6                	ja     c000606c <f_getfree+0x5a>
c0006096:	e9 25 01 00 00       	jmp    c00061c0 <f_getfree+0x1ae>
c000609b:	80 fa 04             	cmp    dl,0x4
c000609e:	0f 85 88 00 00 00    	jne    c000612c <f_getfree+0x11a>
c00060a4:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00060a7:	31 ed                	xor    ebp,ebp
c00060a9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00060ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060b4:	31 db                	xor    ebx,ebx
c00060b6:	85 ed                	test   ebp,ebp
c00060b8:	75 3f                	jne    c00060f9 <f_getfree+0xe7>
c00060ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060c2:	83 c0 01             	add    eax,0x1
c00060c5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060c9:	83 d2 00             	adc    edx,0x0
c00060cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060dc:	e8 59 c1 ff ff       	call   c000223a <move_window>
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 d3 00 00 00    	jne    c00061bc <f_getfree+0x1aa>
c00060e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060f5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fd:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006100:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006104:	89 cf                	mov    edi,ecx
c0006106:	85 f6                	test   esi,esi
c0006108:	74 12                	je     c000611c <f_getfree+0x10a>
c000610a:	88 c1                	mov    cl,al
c000610c:	83 e1 01             	and    ecx,0x1
c000610f:	80 f9 01             	cmp    cl,0x1
c0006112:	83 d3 00             	adc    ebx,0x0
c0006115:	d0 e8                	shr    al,1
c0006117:	4e                   	dec    esi
c0006118:	39 fe                	cmp    esi,edi
c000611a:	75 ea                	jne    c0006106 <f_getfree+0xf4>
c000611c:	45                   	inc    ebp
c000611d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006123:	85 f6                	test   esi,esi
c0006125:	75 8f                	jne    c00060b6 <f_getfree+0xa4>
c0006127:	e9 94 00 00 00       	jmp    c00061c0 <f_getfree+0x1ae>
c000612c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000612f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006132:	31 f6                	xor    esi,esi
c0006134:	31 db                	xor    ebx,ebx
c0006136:	85 f6                	test   esi,esi
c0006138:	75 1b                	jne    c0006155 <f_getfree+0x143>
c000613a:	89 d7                	mov    edi,edx
c000613c:	89 cd                	mov    ebp,ecx
c000613e:	83 c7 01             	add    edi,0x1
c0006141:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006145:	83 d5 00             	adc    ebp,0x0
c0006148:	e8 ed c0 ff ff       	call   c000223a <move_window>
c000614d:	85 c0                	test   eax,eax
c000614f:	75 6b                	jne    c00061bc <f_getfree+0x1aa>
c0006151:	89 fa                	mov    edx,edi
c0006153:	89 e9                	mov    ecx,ebp
c0006155:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006159:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000615d:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006161:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006164:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006168:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000616c:	75 11                	jne    c000617f <f_getfree+0x16d>
c000616e:	e8 e9 b8 ff ff       	call   c0001a5c <ld_word>
c0006173:	66 83 f8 01          	cmp    ax,0x1
c0006177:	83 d3 00             	adc    ebx,0x0
c000617a:	83 c6 02             	add    esi,0x2
c000617d:	eb 13                	jmp    c0006192 <f_getfree+0x180>
c000617f:	e8 e5 b8 ff ff       	call   c0001a69 <ld_dword>
c0006184:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006189:	83 f8 01             	cmp    eax,0x1
c000618c:	83 d3 00             	adc    ebx,0x0
c000618f:	83 c6 04             	add    esi,0x4
c0006192:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006198:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000619c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00061a0:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00061a4:	75 90                	jne    c0006136 <f_getfree+0x124>
c00061a6:	eb 18                	jmp    c00061c0 <f_getfree+0x1ae>
c00061a8:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00061b0:	eb 0e                	jmp    c00061c0 <f_getfree+0x1ae>
c00061b2:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00061ba:	eb 04                	jmp    c00061c0 <f_getfree+0x1ae>
c00061bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061c0:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061c4:	89 18                	mov    DWORD PTR [eax],ebx
c00061c6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061ca:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061cd:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061d5:	83 c4 5c             	add    esp,0x5c
c00061d8:	5b                   	pop    ebx
c00061d9:	5e                   	pop    esi
c00061da:	5f                   	pop    edi
c00061db:	5d                   	pop    ebp
c00061dc:	c3                   	ret    

c00061dd <f_truncate>:
c00061dd:	56                   	push   esi
c00061de:	53                   	push   ebx
c00061df:	83 ec 14             	sub    esp,0x14
c00061e2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061e6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061ea:	89 d8                	mov    eax,ebx
c00061ec:	e8 6e bf ff ff       	call   c000215f <validate>
c00061f1:	89 c6                	mov    esi,eax
c00061f3:	85 c0                	test   eax,eax
c00061f5:	0f 85 d2 00 00 00    	jne    c00062cd <f_truncate+0xf0>
c00061fb:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061ff:	85 f6                	test   esi,esi
c0006201:	0f 85 c6 00 00 00    	jne    c00062cd <f_truncate+0xf0>
c0006207:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000620b:	0f 84 b7 00 00 00    	je     c00062c8 <f_truncate+0xeb>
c0006211:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006214:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006217:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000621a:	89 d1                	mov    ecx,edx
c000621c:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000621f:	0f 83 a8 00 00 00    	jae    c00062cd <f_truncate+0xf0>
c0006225:	09 c2                	or     edx,eax
c0006227:	75 15                	jne    c000623e <f_truncate+0x61>
c0006229:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000622c:	31 c9                	xor    ecx,ecx
c000622e:	89 d8                	mov    eax,ebx
c0006230:	e8 7a d0 ff ff       	call   c00032af <remove_chain>
c0006235:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000623c:	eb 35                	jmp    c0006273 <f_truncate+0x96>
c000623e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006241:	89 d8                	mov    eax,ebx
c0006243:	e8 7a cb ff ff       	call   c0002dc2 <get_fat>
c0006248:	89 c2                	mov    edx,eax
c000624a:	b8 01 00 00 00       	mov    eax,0x1
c000624f:	83 fa ff             	cmp    edx,0xffffffff
c0006252:	74 1f                	je     c0006273 <f_truncate+0x96>
c0006254:	b8 02 00 00 00       	mov    eax,0x2
c0006259:	83 fa 01             	cmp    edx,0x1
c000625c:	74 15                	je     c0006273 <f_truncate+0x96>
c000625e:	31 c0                	xor    eax,eax
c0006260:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006264:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006267:	76 0a                	jbe    c0006273 <f_truncate+0x96>
c0006269:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000626c:	89 d8                	mov    eax,ebx
c000626e:	e8 3c d0 ff ff       	call   c00032af <remove_chain>
c0006273:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006276:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006279:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000627c:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000627f:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006282:	83 ca 40             	or     edx,0x40
c0006285:	85 c0                	test   eax,eax
c0006287:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000628a:	75 35                	jne    c00062c1 <f_truncate+0xe4>
c000628c:	84 d2                	test   dl,dl
c000628e:	79 3d                	jns    c00062cd <f_truncate+0xf0>
c0006290:	83 ec 0c             	sub    esp,0xc
c0006293:	8d 43 50             	lea    eax,[ebx+0x50]
c0006296:	6a 01                	push   0x1
c0006298:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000629b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000629e:	50                   	push   eax
c000629f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00062a3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00062a7:	50                   	push   eax
c00062a8:	e8 7a b7 ff ff       	call   c0001a27 <disk_write>
c00062ad:	83 c4 20             	add    esp,0x20
c00062b0:	85 c0                	test   eax,eax
c00062b2:	75 08                	jne    c00062bc <f_truncate+0xdf>
c00062b4:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00062b8:	31 f6                	xor    esi,esi
c00062ba:	eb 11                	jmp    c00062cd <f_truncate+0xf0>
c00062bc:	b8 01 00 00 00       	mov    eax,0x1
c00062c1:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062c4:	89 c6                	mov    esi,eax
c00062c6:	eb 05                	jmp    c00062cd <f_truncate+0xf0>
c00062c8:	be 07 00 00 00       	mov    esi,0x7
c00062cd:	89 f0                	mov    eax,esi
c00062cf:	83 c4 14             	add    esp,0x14
c00062d2:	5b                   	pop    ebx
c00062d3:	5e                   	pop    esi
c00062d4:	c3                   	ret    

c00062d5 <f_unlink>:
c00062d5:	56                   	push   esi
c00062d6:	b9 02 00 00 00       	mov    ecx,0x2
c00062db:	53                   	push   ebx
c00062dc:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062e6:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062ed:	e8 fa c1 ff ff       	call   c00024ec <mount_volume>
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 55 01 00 00    	jne    c000644f <f_unlink+0x17a>
c00062fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062fe:	83 ec 0c             	sub    esp,0xc
c0006301:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006305:	68 60 04 00 00       	push   0x460
c000630a:	e8 80 1f 00 00       	call   c000828f <ff_memalloc>
c000630f:	83 c4 10             	add    esp,0x10
c0006312:	89 c3                	mov    ebx,eax
c0006314:	b8 11 00 00 00       	mov    eax,0x11
c0006319:	85 db                	test   ebx,ebx
c000631b:	0f 84 2e 01 00 00    	je     c000644f <f_unlink+0x17a>
c0006321:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006325:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000632b:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000632e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006331:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006338:	8d 44 24 48          	lea    eax,[esp+0x48]
c000633c:	e8 21 e9 ff ff       	call   c0004c62 <follow_path>
c0006341:	85 c0                	test   eax,eax
c0006343:	0f 85 f2 00 00 00    	jne    c000643b <f_unlink+0x166>
c0006349:	b8 06 00 00 00       	mov    eax,0x6
c000634e:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006356:	0f 88 df 00 00 00    	js     c000643b <f_unlink+0x166>
c000635c:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006361:	74 0a                	je     c000636d <f_unlink+0x98>
c0006363:	b8 07 00 00 00       	mov    eax,0x7
c0006368:	e9 ce 00 00 00       	jmp    c000643b <f_unlink+0x166>
c000636d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006371:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006375:	8a 02                	mov    al,BYTE PTR [edx]
c0006377:	3c 04                	cmp    al,0x4
c0006379:	75 12                	jne    c000638d <f_unlink+0xb8>
c000637b:	8d 42 10             	lea    eax,[edx+0x10]
c000637e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006382:	e8 a1 e8 ff ff       	call   c0004c28 <init_alloc_info.isra.2>
c0006387:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000638b:	eb 0e                	jmp    c000639b <f_unlink+0xc6>
c000638d:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006394:	e8 3e e8 ff ff       	call   c0004bd7 <ld_clust.isra.0>
c0006399:	89 c6                	mov    esi,eax
c000639b:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00063a0:	75 12                	jne    c00063b4 <f_unlink+0xdf>
c00063a2:	8d 44 24 48          	lea    eax,[esp+0x48]
c00063a6:	e8 94 d6 ff ff       	call   c0003a3f <dir_remove>
c00063ab:	85 c0                	test   eax,eax
c00063ad:	74 6c                	je     c000641b <f_unlink+0x146>
c00063af:	e9 87 00 00 00       	jmp    c000643b <f_unlink+0x166>
c00063b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063b8:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063bf:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063c6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063c9:	75 21                	jne    c00063ec <f_unlink+0x117>
c00063cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063d3:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063da:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063e1:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063e5:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063ec:	31 d2                	xor    edx,edx
c00063ee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063f5:	e8 be cb ff ff       	call   c0002fb8 <dir_sdi>
c00063fa:	85 c0                	test   eax,eax
c00063fc:	75 3d                	jne    c000643b <f_unlink+0x166>
c00063fe:	31 d2                	xor    edx,edx
c0006400:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006407:	e8 bc d3 ff ff       	call   c00037c8 <dir_read>
c000640c:	85 c0                	test   eax,eax
c000640e:	0f 84 4f ff ff ff    	je     c0006363 <f_unlink+0x8e>
c0006414:	83 f8 04             	cmp    eax,0x4
c0006417:	75 22                	jne    c000643b <f_unlink+0x166>
c0006419:	eb 87                	jmp    c00063a2 <f_unlink+0xcd>
c000641b:	85 f6                	test   esi,esi
c000641d:	75 0b                	jne    c000642a <f_unlink+0x155>
c000641f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006423:	e8 3d df ff ff       	call   c0004365 <sync_fs>
c0006428:	eb 11                	jmp    c000643b <f_unlink+0x166>
c000642a:	31 c9                	xor    ecx,ecx
c000642c:	89 f2                	mov    edx,esi
c000642e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006432:	e8 78 ce ff ff       	call   c00032af <remove_chain>
c0006437:	85 c0                	test   eax,eax
c0006439:	74 e4                	je     c000641f <f_unlink+0x14a>
c000643b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	53                   	push   ebx
c0006443:	e8 5d 1e 00 00       	call   c00082a5 <ff_memfree>
c0006448:	83 c4 10             	add    esp,0x10
c000644b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000644f:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	c3                   	ret    

c0006458 <f_mkdir>:
c0006458:	57                   	push   edi
c0006459:	b9 02 00 00 00       	mov    ecx,0x2
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	83 c4 80             	add    esp,0xffffff80
c0006463:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006467:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000646e:	e8 79 c0 ff ff       	call   c00024ec <mount_volume>
c0006473:	89 c3                	mov    ebx,eax
c0006475:	85 c0                	test   eax,eax
c0006477:	0f 85 fe 01 00 00    	jne    c000667b <f_mkdir+0x223>
c000647d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006481:	bb 11 00 00 00       	mov    ebx,0x11
c0006486:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000648a:	83 ec 0c             	sub    esp,0xc
c000648d:	68 60 04 00 00       	push   0x460
c0006492:	e8 f8 1d 00 00       	call   c000828f <ff_memalloc>
c0006497:	83 c4 10             	add    esp,0x10
c000649a:	89 c7                	mov    edi,eax
c000649c:	85 c0                	test   eax,eax
c000649e:	0f 84 d7 01 00 00    	je     c000667b <f_mkdir+0x223>
c00064a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a8:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00064ae:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00064b1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064b4:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00064bb:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064bf:	e8 9e e7 ff ff       	call   c0004c62 <follow_path>
c00064c4:	89 c3                	mov    ebx,eax
c00064c6:	85 c0                	test   eax,eax
c00064c8:	74 3e                	je     c0006508 <f_mkdir+0xb0>
c00064ca:	83 f8 04             	cmp    eax,0x4
c00064cd:	75 3e                	jne    c000650d <f_mkdir+0xb5>
c00064cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d3:	31 d2                	xor    edx,edx
c00064d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064dd:	e8 ce cb ff ff       	call   c00030b0 <create_chain>
c00064e2:	89 c6                	mov    esi,eax
c00064e4:	85 c0                	test   eax,eax
c00064e6:	74 0c                	je     c00064f4 <f_mkdir+0x9c>
c00064e8:	bb 02 00 00 00       	mov    ebx,0x2
c00064ed:	83 f8 01             	cmp    eax,0x1
c00064f0:	74 07                	je     c00064f9 <f_mkdir+0xa1>
c00064f2:	eb 2a                	jmp    c000651e <f_mkdir+0xc6>
c00064f4:	bb 07 00 00 00       	mov    ebx,0x7
c00064f9:	31 c9                	xor    ecx,ecx
c00064fb:	89 f2                	mov    edx,esi
c00064fd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006501:	e8 a9 cd ff ff       	call   c00032af <remove_chain>
c0006506:	eb 05                	jmp    c000650d <f_mkdir+0xb5>
c0006508:	bb 08 00 00 00       	mov    ebx,0x8
c000650d:	83 ec 0c             	sub    esp,0xc
c0006510:	57                   	push   edi
c0006511:	e8 8f 1d 00 00       	call   c00082a5 <ff_memfree>
c0006516:	83 c4 10             	add    esp,0x10
c0006519:	e9 5d 01 00 00       	jmp    c000667b <f_mkdir+0x223>
c000651e:	bb 01 00 00 00       	mov    ebx,0x1
c0006523:	83 f8 ff             	cmp    eax,0xffffffff
c0006526:	74 d1                	je     c00064f9 <f_mkdir+0xa1>
c0006528:	89 f2                	mov    edx,esi
c000652a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000652e:	e8 c4 ce ff ff       	call   c00033f7 <dir_clear>
c0006533:	89 c3                	mov    ebx,eax
c0006535:	85 c0                	test   eax,eax
c0006537:	75 c0                	jne    c00064f9 <f_mkdir+0xa1>
c0006539:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000653d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006540:	74 69                	je     c00065ab <f_mkdir+0x153>
c0006542:	b9 0b 00 00 00       	mov    ecx,0xb
c0006547:	83 c0 54             	add    eax,0x54
c000654a:	ba 20 00 00 00       	mov    edx,0x20
c000654f:	e8 9c b5 ff ff       	call   c0001af0 <mem_set>
c0006554:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006558:	ba 00 00 21 50       	mov    edx,0x50210000
c000655d:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006561:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006565:	83 c0 6a             	add    eax,0x6a
c0006568:	e8 65 b5 ff ff       	call   c0001ad2 <st_dword>
c000656d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006571:	89 f1                	mov    ecx,esi
c0006573:	8d 50 54             	lea    edx,[eax+0x54]
c0006576:	e8 85 e6 ff ff       	call   c0004c00 <st_clust.isra.1>
c000657b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000657f:	b9 20 00 00 00       	mov    ecx,0x20
c0006584:	8d 50 54             	lea    edx,[eax+0x54]
c0006587:	83 c0 74             	add    eax,0x74
c000658a:	e8 4c b5 ff ff       	call   c0001adb <mem_cpy>
c000658f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006593:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006597:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000659b:	8d 50 74             	lea    edx,[eax+0x74]
c000659e:	e8 5d e6 ff ff       	call   c0004c00 <st_clust.isra.1>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00065ab:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065af:	e8 2f db ff ff       	call   c00040e3 <dir_register>
c00065b4:	89 c3                	mov    ebx,eax
c00065b6:	85 c0                	test   eax,eax
c00065b8:	0f 85 3b ff ff ff    	jne    c00064f9 <f_mkdir+0xa1>
c00065be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065c2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065c5:	75 74                	jne    c000663b <f_mkdir+0x1e3>
c00065c7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065ca:	ba 00 00 21 50       	mov    edx,0x50210000
c00065cf:	83 c0 0c             	add    eax,0xc
c00065d2:	e8 fb b4 ff ff       	call   c0001ad2 <st_dword>
c00065d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065db:	89 f2                	mov    edx,esi
c00065dd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065e0:	83 c0 34             	add    eax,0x34
c00065e3:	e8 ea b4 ff ff       	call   c0001ad2 <st_dword>
c00065e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ec:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065f0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065f3:	c1 e2 09             	shl    edx,0x9
c00065f6:	83 c0 38             	add    eax,0x38
c00065f9:	e8 d4 b4 ff ff       	call   c0001ad2 <st_dword>
c00065fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006602:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006606:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006609:	c1 e2 09             	shl    edx,0x9
c000660c:	83 c0 28             	add    eax,0x28
c000660f:	e8 be b4 ff ff       	call   c0001ad2 <st_dword>
c0006614:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006618:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000661b:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000661f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006622:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006626:	8d 44 24 34          	lea    eax,[esp+0x34]
c000662a:	e8 8b d3 ff ff       	call   c00039ba <store_xdir>
c000662f:	89 c3                	mov    ebx,eax
c0006631:	85 c0                	test   eax,eax
c0006633:	0f 85 d4 fe ff ff    	jne    c000650d <f_mkdir+0xb5>
c0006639:	eb 30                	jmp    c000666b <f_mkdir+0x213>
c000663b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000663f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006644:	83 c0 16             	add    eax,0x16
c0006647:	e8 86 b4 ff ff       	call   c0001ad2 <st_dword>
c000664c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006650:	89 f1                	mov    ecx,esi
c0006652:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006656:	e8 a5 e5 ff ff       	call   c0004c00 <st_clust.isra.1>
c000665b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000665f:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006667:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000666b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000666f:	e8 f1 dc ff ff       	call   c0004365 <sync_fs>
c0006674:	89 c3                	mov    ebx,eax
c0006676:	e9 92 fe ff ff       	jmp    c000650d <f_mkdir+0xb5>
c000667b:	83 ec 80             	sub    esp,0xffffff80
c000667e:	89 d8                	mov    eax,ebx
c0006680:	5b                   	pop    ebx
c0006681:	5e                   	pop    esi
c0006682:	5f                   	pop    edi
c0006683:	c3                   	ret    

c0006684 <f_rename>:
c0006684:	55                   	push   ebp
c0006685:	57                   	push   edi
c0006686:	56                   	push   esi
c0006687:	53                   	push   ebx
c0006688:	81 ec fc 00 00 00    	sub    esp,0xfc
c000668e:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006695:	e8 a4 b9 ff ff       	call   c000203e <get_ldnumber>
c000669a:	b9 02 00 00 00       	mov    ecx,0x2
c000669f:	8d 54 24 14          	lea    edx,[esp+0x14]
c00066a3:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00066aa:	e8 3d be ff ff       	call   c00024ec <mount_volume>
c00066af:	85 c0                	test   eax,eax
c00066b1:	0f 85 b5 02 00 00    	jne    c000696c <f_rename+0x2e8>
c00066b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066bb:	83 ec 0c             	sub    esp,0xc
c00066be:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066c2:	68 60 04 00 00       	push   0x460
c00066c7:	e8 c3 1b 00 00       	call   c000828f <ff_memalloc>
c00066cc:	83 c4 10             	add    esp,0x10
c00066cf:	89 c3                	mov    ebx,eax
c00066d1:	b8 11 00 00 00       	mov    eax,0x11
c00066d6:	85 db                	test   ebx,ebx
c00066d8:	0f 84 8e 02 00 00    	je     c000696c <f_rename+0x2e8>
c00066de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066e2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066e8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066eb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066ee:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066f5:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066f9:	e8 64 e5 ff ff       	call   c0004c62 <follow_path>
c00066fe:	85 c0                	test   eax,eax
c0006700:	0f 85 52 02 00 00    	jne    c0006958 <f_rename+0x2d4>
c0006706:	b8 06 00 00 00       	mov    eax,0x6
c000670b:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006713:	0f 85 3f 02 00 00    	jne    c0006958 <f_rename+0x2d4>
c0006719:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000671d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006720:	0f 85 05 01 00 00    	jne    c000682b <f_rename+0x1a7>
c0006726:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006729:	b9 40 00 00 00       	mov    ecx,0x40
c000672e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006732:	e8 a4 b3 ff ff       	call   c0001adb <mem_cpy>
c0006737:	b9 4c 00 00 00       	mov    ecx,0x4c
c000673c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006740:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006747:	e8 8f b3 ff ff       	call   c0001adb <mem_cpy>
c000674c:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006753:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000675a:	e8 03 e5 ff ff       	call   c0004c62 <follow_path>
c000675f:	85 c0                	test   eax,eax
c0006761:	75 29                	jne    c000678c <f_rename+0x108>
c0006763:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006767:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000676e:	74 0a                	je     c000677a <f_rename+0xf6>
c0006770:	b8 08 00 00 00       	mov    eax,0x8
c0006775:	e9 de 01 00 00       	jmp    c0006958 <f_rename+0x2d4>
c000677a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006781:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006788:	75 e6                	jne    c0006770 <f_rename+0xec>
c000678a:	eb 09                	jmp    c0006795 <f_rename+0x111>
c000678c:	83 f8 04             	cmp    eax,0x4
c000678f:	0f 85 c3 01 00 00    	jne    c0006958 <f_rename+0x2d4>
c0006795:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000679c:	e8 42 d9 ff ff       	call   c00040e3 <dir_register>
c00067a1:	85 c0                	test   eax,eax
c00067a3:	0f 85 af 01 00 00    	jne    c0006958 <f_rename+0x2d4>
c00067a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ad:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00067b0:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00067b3:	89 c5                	mov    ebp,eax
c00067b5:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00067b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067bc:	8d 46 24             	lea    eax,[esi+0x24]
c00067bf:	e8 98 b2 ff ff       	call   c0001a5c <ld_word>
c00067c4:	b9 40 00 00 00       	mov    ecx,0x40
c00067c9:	89 c7                	mov    edi,eax
c00067cb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067cf:	89 f0                	mov    eax,esi
c00067d1:	e8 05 b3 ff ff       	call   c0001adb <mem_cpy>
c00067d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067da:	89 e9                	mov    ecx,ebp
c00067dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067df:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067e2:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ea:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ed:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067f0:	0f b7 d7             	movzx  edx,di
c00067f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f6:	83 c0 24             	add    eax,0x24
c00067f9:	e8 d0 b2 ff ff       	call   c0001ace <st_word>
c00067fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006802:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006805:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006808:	a8 10                	test   al,0x10
c000680a:	75 06                	jne    c0006812 <f_rename+0x18e>
c000680c:	83 c8 20             	or     eax,0x20
c000680f:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006812:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006819:	e8 9c d1 ff ff       	call   c00039ba <store_xdir>
c000681e:	85 c0                	test   eax,eax
c0006820:	0f 84 1c 01 00 00    	je     c0006942 <f_rename+0x2be>
c0006826:	e9 2d 01 00 00       	jmp    c0006958 <f_rename+0x2d4>
c000682b:	b9 20 00 00 00       	mov    ecx,0x20
c0006830:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006837:	8d 44 24 18          	lea    eax,[esp+0x18]
c000683b:	e8 9b b2 ff ff       	call   c0001adb <mem_cpy>
c0006840:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006845:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006849:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006850:	e8 86 b2 ff ff       	call   c0001adb <mem_cpy>
c0006855:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000685c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006863:	e8 fa e3 ff ff       	call   c0004c62 <follow_path>
c0006868:	85 c0                	test   eax,eax
c000686a:	75 27                	jne    c0006893 <f_rename+0x20f>
c000686c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006870:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006877:	0f 85 f3 fe ff ff    	jne    c0006770 <f_rename+0xec>
c000687d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006884:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000688b:	0f 85 df fe ff ff    	jne    c0006770 <f_rename+0xec>
c0006891:	eb 09                	jmp    c000689c <f_rename+0x218>
c0006893:	83 f8 04             	cmp    eax,0x4
c0006896:	0f 85 bc 00 00 00    	jne    c0006958 <f_rename+0x2d4>
c000689c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00068a3:	e8 3b d8 ff ff       	call   c00040e3 <dir_register>
c00068a8:	85 c0                	test   eax,eax
c00068aa:	0f 85 a8 00 00 00    	jne    c0006958 <f_rename+0x2d4>
c00068b0:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00068b7:	b9 13 00 00 00       	mov    ecx,0x13
c00068bc:	8d 46 0d             	lea    eax,[esi+0xd]
c00068bf:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068c3:	e8 13 b2 ff ff       	call   c0001adb <mem_cpy>
c00068c8:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068cc:	a8 10                	test   al,0x10
c00068ce:	75 03                	jne    c00068d3 <f_rename+0x24f>
c00068d0:	83 c8 20             	or     eax,0x20
c00068d3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068da:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068de:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068e2:	74 5e                	je     c0006942 <f_rename+0x2be>
c00068e4:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068eb:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068ef:	74 51                	je     c0006942 <f_rename+0x2be>
c00068f1:	89 f2                	mov    edx,esi
c00068f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068f7:	8a 07                	mov    al,BYTE PTR [edi]
c00068f9:	e8 d9 e2 ff ff       	call   c0004bd7 <ld_clust.isra.0>
c00068fe:	89 c2                	mov    edx,eax
c0006900:	89 f8                	mov    eax,edi
c0006902:	e8 ee b3 ff ff       	call   c0001cf5 <clst2sect>
c0006907:	89 c6                	mov    esi,eax
c0006909:	89 d1                	mov    ecx,edx
c000690b:	b8 02 00 00 00       	mov    eax,0x2
c0006910:	09 f2                	or     edx,esi
c0006912:	74 44                	je     c0006958 <f_rename+0x2d4>
c0006914:	89 f2                	mov    edx,esi
c0006916:	89 f8                	mov    eax,edi
c0006918:	e8 1d b9 ff ff       	call   c000223a <move_window>
c000691d:	85 c0                	test   eax,eax
c000691f:	75 37                	jne    c0006958 <f_rename+0x2d4>
c0006921:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006925:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006929:	75 17                	jne    c0006942 <f_rename+0x2be>
c000692b:	8d 50 74             	lea    edx,[eax+0x74]
c000692e:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006935:	e8 c6 e2 ff ff       	call   c0004c00 <st_clust.isra.1>
c000693a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000693e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006942:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006946:	e8 f4 d0 ff ff       	call   c0003a3f <dir_remove>
c000694b:	85 c0                	test   eax,eax
c000694d:	75 09                	jne    c0006958 <f_rename+0x2d4>
c000694f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006953:	e8 0d da ff ff       	call   c0004365 <sync_fs>
c0006958:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000695c:	83 ec 0c             	sub    esp,0xc
c000695f:	53                   	push   ebx
c0006960:	e8 40 19 00 00       	call   c00082a5 <ff_memfree>
c0006965:	83 c4 10             	add    esp,0x10
c0006968:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000696c:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006972:	5b                   	pop    ebx
c0006973:	5e                   	pop    esi
c0006974:	5f                   	pop    edi
c0006975:	5d                   	pop    ebp
c0006976:	c3                   	ret    

c0006977 <f_chmod>:
c0006977:	57                   	push   edi
c0006978:	b9 02 00 00 00       	mov    ecx,0x2
c000697d:	56                   	push   esi
c000697e:	53                   	push   ebx
c000697f:	83 ec 60             	sub    esp,0x60
c0006982:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006986:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000698a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000698e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006992:	e8 55 bb ff ff       	call   c00024ec <mount_volume>
c0006997:	85 c0                	test   eax,eax
c0006999:	0f 85 af 00 00 00    	jne    c0006a4e <f_chmod+0xd7>
c000699f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069a3:	83 ec 0c             	sub    esp,0xc
c00069a6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069aa:	68 60 04 00 00       	push   0x460
c00069af:	e8 db 18 00 00       	call   c000828f <ff_memalloc>
c00069b4:	83 c4 10             	add    esp,0x10
c00069b7:	89 c6                	mov    esi,eax
c00069b9:	b8 11 00 00 00       	mov    eax,0x11
c00069be:	85 f6                	test   esi,esi
c00069c0:	0f 84 88 00 00 00    	je     c0006a4e <f_chmod+0xd7>
c00069c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ca:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069d0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069d3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069d6:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069da:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069de:	e8 7f e2 ff ff       	call   c0004c62 <follow_path>
c00069e3:	85 c0                	test   eax,eax
c00069e5:	75 53                	jne    c0006a3a <f_chmod+0xc3>
c00069e7:	b8 06 00 00 00       	mov    eax,0x6
c00069ec:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069f1:	75 47                	jne    c0006a3a <f_chmod+0xc3>
c00069f3:	89 f9                	mov    ecx,edi
c00069f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069f9:	83 e1 27             	and    ecx,0x27
c00069fc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069ff:	75 1d                	jne    c0006a1e <f_chmod+0xa7>
c0006a01:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a04:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006a07:	21 cb                	and    ebx,ecx
c0006a09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006a0c:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006a0f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a13:	e8 a2 cf ff ff       	call   c00039ba <store_xdir>
c0006a18:	85 c0                	test   eax,eax
c0006a1a:	75 1e                	jne    c0006a3a <f_chmod+0xc3>
c0006a1c:	eb 13                	jmp    c0006a31 <f_chmod+0xba>
c0006a1e:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a22:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a25:	21 cb                	and    ebx,ecx
c0006a27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a2a:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a35:	e8 2b d9 ff ff       	call   c0004365 <sync_fs>
c0006a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a3e:	83 ec 0c             	sub    esp,0xc
c0006a41:	56                   	push   esi
c0006a42:	e8 5e 18 00 00       	call   c00082a5 <ff_memfree>
c0006a47:	83 c4 10             	add    esp,0x10
c0006a4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a4e:	83 c4 60             	add    esp,0x60
c0006a51:	5b                   	pop    ebx
c0006a52:	5e                   	pop    esi
c0006a53:	5f                   	pop    edi
c0006a54:	c3                   	ret    

c0006a55 <f_utime>:
c0006a55:	56                   	push   esi
c0006a56:	b9 02 00 00 00       	mov    ecx,0x2
c0006a5b:	53                   	push   ebx
c0006a5c:	83 ec 64             	sub    esp,0x64
c0006a5f:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a63:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a67:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a6b:	e8 7c ba ff ff       	call   c00024ec <mount_volume>
c0006a70:	85 c0                	test   eax,eax
c0006a72:	0f 85 b5 00 00 00    	jne    c0006b2d <f_utime+0xd8>
c0006a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a7c:	83 ec 0c             	sub    esp,0xc
c0006a7f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a83:	68 60 04 00 00       	push   0x460
c0006a88:	e8 02 18 00 00       	call   c000828f <ff_memalloc>
c0006a8d:	83 c4 10             	add    esp,0x10
c0006a90:	89 c3                	mov    ebx,eax
c0006a92:	b8 11 00 00 00       	mov    eax,0x11
c0006a97:	85 db                	test   ebx,ebx
c0006a99:	0f 84 8e 00 00 00    	je     c0006b2d <f_utime+0xd8>
c0006a9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa3:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006aa9:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006aac:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006aaf:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ab3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ab7:	e8 a6 e1 ff ff       	call   c0004c62 <follow_path>
c0006abc:	85 c0                	test   eax,eax
c0006abe:	75 59                	jne    c0006b19 <f_utime+0xc4>
c0006ac0:	b8 06 00 00 00       	mov    eax,0x6
c0006ac5:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006aca:	75 4d                	jne    c0006b19 <f_utime+0xc4>
c0006acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad0:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ad4:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ad8:	c1 e2 10             	shl    edx,0x10
c0006adb:	09 ca                	or     edx,ecx
c0006add:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ae0:	75 1a                	jne    c0006afc <f_utime+0xa7>
c0006ae2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006ae5:	83 c0 0c             	add    eax,0xc
c0006ae8:	e8 e5 af ff ff       	call   c0001ad2 <st_dword>
c0006aed:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006af1:	e8 c4 ce ff ff       	call   c00039ba <store_xdir>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	75 1f                	jne    c0006b19 <f_utime+0xc4>
c0006afa:	eb 14                	jmp    c0006b10 <f_utime+0xbb>
c0006afc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b00:	83 c0 16             	add    eax,0x16
c0006b03:	e8 ca af ff ff       	call   c0001ad2 <st_dword>
c0006b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b0c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b14:	e8 4c d8 ff ff       	call   c0004365 <sync_fs>
c0006b19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b1d:	83 ec 0c             	sub    esp,0xc
c0006b20:	53                   	push   ebx
c0006b21:	e8 7f 17 00 00       	call   c00082a5 <ff_memfree>
c0006b26:	83 c4 10             	add    esp,0x10
c0006b29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b2d:	83 c4 64             	add    esp,0x64
c0006b30:	5b                   	pop    ebx
c0006b31:	5e                   	pop    esi
c0006b32:	c3                   	ret    

c0006b33 <f_getlabel>:
c0006b33:	55                   	push   ebp
c0006b34:	31 c9                	xor    ecx,ecx
c0006b36:	57                   	push   edi
c0006b37:	56                   	push   esi
c0006b38:	53                   	push   ebx
c0006b39:	83 ec 6c             	sub    esp,0x6c
c0006b3c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b40:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b47:	e8 a0 b9 ff ff       	call   c00024ec <mount_volume>
c0006b4c:	89 c6                	mov    esi,eax
c0006b4e:	85 c0                	test   eax,eax
c0006b50:	0f 85 c1 01 00 00    	jne    c0006d17 <f_getlabel+0x1e4>
c0006b56:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b5e:	0f 84 5f 01 00 00    	je     c0006cc3 <f_getlabel+0x190>
c0006b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b68:	31 d2                	xor    edx,edx
c0006b6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b6e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b76:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b7a:	e8 39 c4 ff ff       	call   c0002fb8 <dir_sdi>
c0006b7f:	85 c0                	test   eax,eax
c0006b81:	0f 85 2d 01 00 00    	jne    c0006cb4 <f_getlabel+0x181>
c0006b87:	ba 01 00 00 00       	mov    edx,0x1
c0006b8c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b90:	e8 33 cc ff ff       	call   c00037c8 <dir_read>
c0006b95:	85 c0                	test   eax,eax
c0006b97:	0f 85 17 01 00 00    	jne    c0006cb4 <f_getlabel+0x181>
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ba4:	74 09                	je     c0006baf <f_getlabel+0x7c>
c0006ba6:	31 db                	xor    ebx,ebx
c0006ba8:	31 c9                	xor    ecx,ecx
c0006baa:	e9 c8 00 00 00       	jmp    c0006c77 <f_getlabel+0x144>
c0006baf:	31 ed                	xor    ebp,ebp
c0006bb1:	31 db                	xor    ebx,ebx
c0006bb3:	31 ff                	xor    edi,edi
c0006bb5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bb9:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006bbd:	39 fa                	cmp    edx,edi
c0006bbf:	76 4b                	jbe    c0006c0c <f_getlabel+0xd9>
c0006bc1:	47                   	inc    edi
c0006bc2:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006bc5:	01 d0                	add    eax,edx
c0006bc7:	e8 90 ae ff ff       	call   c0001a5c <ld_word>
c0006bcc:	66 85 ed             	test   bp,bp
c0006bcf:	75 0d                	jne    c0006bde <f_getlabel+0xab>
c0006bd1:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006bd7:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bdc:	76 28                	jbe    c0006c06 <f_getlabel+0xd3>
c0006bde:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006be5:	89 e9                	mov    ecx,ebp
c0006be7:	01 da                	add    edx,ebx
c0006be9:	c1 e1 10             	shl    ecx,0x10
c0006bec:	0f b7 c0             	movzx  eax,ax
c0006bef:	09 c8                	or     eax,ecx
c0006bf1:	b9 04 00 00 00       	mov    ecx,0x4
c0006bf6:	e8 01 b0 ff ff       	call   c0001bfc <put_utf>
c0006bfb:	84 c0                	test   al,al
c0006bfd:	74 0b                	je     c0006c0a <f_getlabel+0xd7>
c0006bff:	0f b6 c0             	movzx  eax,al
c0006c02:	01 c3                	add    ebx,eax
c0006c04:	31 c0                	xor    eax,eax
c0006c06:	89 c5                	mov    ebp,eax
c0006c08:	eb ab                	jmp    c0006bb5 <f_getlabel+0x82>
c0006c0a:	31 db                	xor    ebx,ebx
c0006c0c:	66 85 ed             	test   bp,bp
c0006c0f:	74 02                	je     c0006c13 <f_getlabel+0xe0>
c0006c11:	31 db                	xor    ebx,ebx
c0006c13:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c1a:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c1e:	e9 a0 00 00 00       	jmp    c0006cc3 <f_getlabel+0x190>
c0006c23:	83 ff 0b             	cmp    edi,0xb
c0006c26:	74 11                	je     c0006c39 <f_getlabel+0x106>
c0006c28:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c31:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c34:	c1 e0 08             	shl    eax,0x8
c0006c37:	09 c2                	or     edx,eax
c0006c39:	0f b7 d2             	movzx  edx,dx
c0006c3c:	50                   	push   eax
c0006c3d:	50                   	push   eax
c0006c3e:	68 b5 01 00 00       	push   0x1b5
c0006c43:	52                   	push   edx
c0006c44:	e8 03 17 00 00       	call   c000834c <ff_oem2uni>
c0006c49:	83 c4 10             	add    esp,0x10
c0006c4c:	66 85 c0             	test   ax,ax
c0006c4f:	74 46                	je     c0006c97 <f_getlabel+0x164>
c0006c51:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c58:	0f b7 c0             	movzx  eax,ax
c0006c5b:	01 da                	add    edx,ebx
c0006c5d:	b9 04 00 00 00       	mov    ecx,0x4
c0006c62:	e8 95 af ff ff       	call   c0001bfc <put_utf>
c0006c67:	84 c0                	test   al,al
c0006c69:	74 2c                	je     c0006c97 <f_getlabel+0x164>
c0006c6b:	0f b6 c0             	movzx  eax,al
c0006c6e:	01 c3                	add    ebx,eax
c0006c70:	83 ff 0b             	cmp    edi,0xb
c0006c73:	74 24                	je     c0006c99 <f_getlabel+0x166>
c0006c75:	89 f9                	mov    ecx,edi
c0006c77:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c7b:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c7e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c83:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c8c:	e8 9f ae ff ff       	call   c0001b30 <dbc_1st>
c0006c91:	85 c0                	test   eax,eax
c0006c93:	74 a4                	je     c0006c39 <f_getlabel+0x106>
c0006c95:	eb 8c                	jmp    c0006c23 <f_getlabel+0xf0>
c0006c97:	31 db                	xor    ebx,ebx
c0006c99:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ca0:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ca3:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006caa:	74 17                	je     c0006cc3 <f_getlabel+0x190>
c0006cac:	4b                   	dec    ebx
c0006cad:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006cb0:	74 ee                	je     c0006ca0 <f_getlabel+0x16d>
c0006cb2:	eb 0f                	jmp    c0006cc3 <f_getlabel+0x190>
c0006cb4:	83 f8 04             	cmp    eax,0x4
c0006cb7:	75 5c                	jne    c0006d15 <f_getlabel+0x1e2>
c0006cb9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006cc0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006cc3:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ccb:	74 4a                	je     c0006d17 <f_getlabel+0x1e4>
c0006ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd1:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006cd4:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006cd7:	e8 5e b5 ff ff       	call   c000223a <move_window>
c0006cdc:	89 c6                	mov    esi,eax
c0006cde:	85 c0                	test   eax,eax
c0006ce0:	75 35                	jne    c0006d17 <f_getlabel+0x1e4>
c0006ce2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ce6:	b8 43 00 00 00       	mov    eax,0x43
c0006ceb:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ced:	80 f9 03             	cmp    cl,0x3
c0006cf0:	74 0f                	je     c0006d01 <f_getlabel+0x1ce>
c0006cf2:	31 c0                	xor    eax,eax
c0006cf4:	80 f9 04             	cmp    cl,0x4
c0006cf7:	0f 94 c0             	sete   al
c0006cfa:	48                   	dec    eax
c0006cfb:	83 e0 c3             	and    eax,0xffffffc3
c0006cfe:	83 c0 64             	add    eax,0x64
c0006d01:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006d05:	e8 5f ad ff ff       	call   c0001a69 <ld_dword>
c0006d0a:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006d11:	89 07                	mov    DWORD PTR [edi],eax
c0006d13:	eb 02                	jmp    c0006d17 <f_getlabel+0x1e4>
c0006d15:	89 c6                	mov    esi,eax
c0006d17:	83 c4 6c             	add    esp,0x6c
c0006d1a:	89 f0                	mov    eax,esi
c0006d1c:	5b                   	pop    ebx
c0006d1d:	5e                   	pop    esi
c0006d1e:	5f                   	pop    edi
c0006d1f:	5d                   	pop    ebp
c0006d20:	c3                   	ret    

c0006d21 <f_setlabel>:
c0006d21:	56                   	push   esi
c0006d22:	b9 02 00 00 00       	mov    ecx,0x2
c0006d27:	53                   	push   ebx
c0006d28:	83 ec 74             	sub    esp,0x74
c0006d2b:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d2f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d36:	e8 b1 b7 ff ff       	call   c00024ec <mount_volume>
c0006d3b:	89 c6                	mov    esi,eax
c0006d3d:	85 c0                	test   eax,eax
c0006d3f:	0f 85 41 02 00 00    	jne    c0006f86 <f_setlabel+0x265>
c0006d45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d49:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d4c:	0f 85 8e 00 00 00    	jne    c0006de0 <f_setlabel+0xbf>
c0006d52:	b9 16 00 00 00       	mov    ecx,0x16
c0006d57:	31 d2                	xor    edx,edx
c0006d59:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d5d:	31 db                	xor    ebx,ebx
c0006d5f:	e8 8c ad ff ff       	call   c0001af0 <mem_set>
c0006d64:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d6b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d6e:	0f 86 0a 01 00 00    	jbe    c0006e7e <f_setlabel+0x15d>
c0006d74:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d7b:	e8 b6 ad ff ff       	call   c0001b36 <tchar2uni>
c0006d80:	89 c6                	mov    esi,eax
c0006d82:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d87:	76 2a                	jbe    c0006db3 <f_setlabel+0x92>
c0006d89:	83 f8 ff             	cmp    eax,0xffffffff
c0006d8c:	74 05                	je     c0006d93 <f_setlabel+0x72>
c0006d8e:	83 fb 09             	cmp    ebx,0x9
c0006d91:	76 0a                	jbe    c0006d9d <f_setlabel+0x7c>
c0006d93:	be 06 00 00 00       	mov    esi,0x6
c0006d98:	e9 e9 01 00 00       	jmp    c0006f86 <f_setlabel+0x265>
c0006d9d:	89 c2                	mov    edx,eax
c0006d9f:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006da3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006da6:	c1 ea 10             	shr    edx,0x10
c0006da9:	01 c8                	add    eax,ecx
c0006dab:	43                   	inc    ebx
c0006dac:	e8 1d ad ff ff       	call   c0001ace <st_word>
c0006db1:	eb 04                	jmp    c0006db7 <f_setlabel+0x96>
c0006db3:	85 c0                	test   eax,eax
c0006db5:	74 dc                	je     c0006d93 <f_setlabel+0x72>
c0006db7:	89 f2                	mov    edx,esi
c0006db9:	b8 57 81 02 c0       	mov    eax,0xc0028157
c0006dbe:	e8 5b ad ff ff       	call   c0001b1e <chk_chr>
c0006dc3:	85 c0                	test   eax,eax
c0006dc5:	75 cc                	jne    c0006d93 <f_setlabel+0x72>
c0006dc7:	83 fb 0a             	cmp    ebx,0xa
c0006dca:	77 c7                	ja     c0006d93 <f_setlabel+0x72>
c0006dcc:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006dcf:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006dd3:	0f b7 d6             	movzx  edx,si
c0006dd6:	01 c8                	add    eax,ecx
c0006dd8:	43                   	inc    ebx
c0006dd9:	e8 f0 ac ff ff       	call   c0001ace <st_word>
c0006dde:	eb 84                	jmp    c0006d64 <f_setlabel+0x43>
c0006de0:	b9 0b 00 00 00       	mov    ecx,0xb
c0006de5:	ba 20 00 00 00       	mov    edx,0x20
c0006dea:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006dee:	31 db                	xor    ebx,ebx
c0006df0:	e8 fb ac ff ff       	call   c0001af0 <mem_set>
c0006df5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006dfc:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006dff:	76 60                	jbe    c0006e61 <f_setlabel+0x140>
c0006e01:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e08:	e8 29 ad ff ff       	call   c0001b36 <tchar2uni>
c0006e0d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e12:	0f 87 7b ff ff ff    	ja     c0006d93 <f_setlabel+0x72>
c0006e18:	83 ec 0c             	sub    esp,0xc
c0006e1b:	50                   	push   eax
c0006e1c:	e8 97 15 00 00       	call   c00083b8 <ff_wtoupper>
c0006e21:	5a                   	pop    edx
c0006e22:	59                   	pop    ecx
c0006e23:	68 b5 01 00 00       	push   0x1b5
c0006e28:	50                   	push   eax
c0006e29:	e8 8e 14 00 00       	call   c00082bc <ff_uni2oem>
c0006e2e:	83 c4 10             	add    esp,0x10
c0006e31:	89 c6                	mov    esi,eax
c0006e33:	66 85 c0             	test   ax,ax
c0006e36:	0f 84 57 ff ff ff    	je     c0006d93 <f_setlabel+0x72>
c0006e3c:	0f b7 d0             	movzx  edx,ax
c0006e3f:	b8 50 81 02 c0       	mov    eax,0xc0028150
c0006e44:	e8 d5 ac ff ff       	call   c0001b1e <chk_chr>
c0006e49:	85 c0                	test   eax,eax
c0006e4b:	0f 85 42 ff ff ff    	jne    c0006d93 <f_setlabel+0x72>
c0006e51:	66 81 fe ff 00       	cmp    si,0xff
c0006e56:	0f 87 14 01 00 00    	ja     c0006f70 <f_setlabel+0x24f>
c0006e5c:	e9 fa 00 00 00       	jmp    c0006f5b <f_setlabel+0x23a>
c0006e61:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e66:	0f 84 27 ff ff ff    	je     c0006d93 <f_setlabel+0x72>
c0006e6c:	85 db                	test   ebx,ebx
c0006e6e:	74 0e                	je     c0006e7e <f_setlabel+0x15d>
c0006e70:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e73:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e78:	75 04                	jne    c0006e7e <f_setlabel+0x15d>
c0006e7a:	89 c3                	mov    ebx,eax
c0006e7c:	eb ee                	jmp    c0006e6c <f_setlabel+0x14b>
c0006e7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e82:	31 d2                	xor    edx,edx
c0006e84:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e88:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e90:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e94:	e8 1f c1 ff ff       	call   c0002fb8 <dir_sdi>
c0006e99:	89 c6                	mov    esi,eax
c0006e9b:	85 c0                	test   eax,eax
c0006e9d:	0f 85 e3 00 00 00    	jne    c0006f86 <f_setlabel+0x265>
c0006ea3:	ba 01 00 00 00       	mov    edx,0x1
c0006ea8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006eac:	e8 17 c9 ff ff       	call   c00037c8 <dir_read>
c0006eb1:	85 c0                	test   eax,eax
c0006eb3:	75 21                	jne    c0006ed6 <f_setlabel+0x1b5>
c0006eb5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006eb9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ebd:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006ec0:	74 5d                	je     c0006f1f <f_setlabel+0x1fe>
c0006ec2:	85 db                	test   ebx,ebx
c0006ec4:	74 0b                	je     c0006ed1 <f_setlabel+0x1b0>
c0006ec6:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ecb:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ecf:	eb 70                	jmp    c0006f41 <f_setlabel+0x220>
c0006ed1:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006ed4:	eb 70                	jmp    c0006f46 <f_setlabel+0x225>
c0006ed6:	83 f8 04             	cmp    eax,0x4
c0006ed9:	75 7c                	jne    c0006f57 <f_setlabel+0x236>
c0006edb:	85 db                	test   ebx,ebx
c0006edd:	0f 84 a3 00 00 00    	je     c0006f86 <f_setlabel+0x265>
c0006ee3:	ba 01 00 00 00       	mov    edx,0x1
c0006ee8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006eec:	e8 51 ca ff ff       	call   c0003942 <dir_alloc>
c0006ef1:	89 c6                	mov    esi,eax
c0006ef3:	85 c0                	test   eax,eax
c0006ef5:	0f 85 8b 00 00 00    	jne    c0006f86 <f_setlabel+0x265>
c0006efb:	31 d2                	xor    edx,edx
c0006efd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f01:	b9 20 00 00 00       	mov    ecx,0x20
c0006f06:	e8 e5 ab ff ff       	call   c0001af0 <mem_set>
c0006f0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f0f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f12:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f16:	75 18                	jne    c0006f30 <f_setlabel+0x20f>
c0006f18:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006f1b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f1f:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f22:	b9 16 00 00 00       	mov    ecx,0x16
c0006f27:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f2b:	83 c0 02             	add    eax,0x2
c0006f2e:	eb 9b                	jmp    c0006ecb <f_setlabel+0x1aa>
c0006f30:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f34:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f39:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f3d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f41:	e8 95 ab ff ff       	call   c0001adb <mem_cpy>
c0006f46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f52:	e8 0e d4 ff ff       	call   c0004365 <sync_fs>
c0006f57:	89 c6                	mov    esi,eax
c0006f59:	eb 2b                	jmp    c0006f86 <f_setlabel+0x265>
c0006f5b:	83 fb 0a             	cmp    ebx,0xa
c0006f5e:	0f 87 2f fe ff ff    	ja     c0006d93 <f_setlabel+0x72>
c0006f64:	89 f0                	mov    eax,esi
c0006f66:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f6a:	43                   	inc    ebx
c0006f6b:	e9 85 fe ff ff       	jmp    c0006df5 <f_setlabel+0xd4>
c0006f70:	83 fb 09             	cmp    ebx,0x9
c0006f73:	0f 87 1a fe ff ff    	ja     c0006d93 <f_setlabel+0x72>
c0006f79:	89 f0                	mov    eax,esi
c0006f7b:	66 c1 e8 08          	shr    ax,0x8
c0006f7f:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f83:	43                   	inc    ebx
c0006f84:	eb de                	jmp    c0006f64 <f_setlabel+0x243>
c0006f86:	89 f0                	mov    eax,esi
c0006f88:	83 c4 74             	add    esp,0x74
c0006f8b:	5b                   	pop    ebx
c0006f8c:	5e                   	pop    esi
c0006f8d:	c3                   	ret    

c0006f8e <f_forward>:
c0006f8e:	55                   	push   ebp
c0006f8f:	57                   	push   edi
c0006f90:	56                   	push   esi
c0006f91:	53                   	push   ebx
c0006f92:	83 ec 2c             	sub    esp,0x2c
c0006f95:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f99:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f9d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006fa3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006fa7:	89 d8                	mov    eax,ebx
c0006fa9:	e8 b1 b1 ff ff       	call   c000215f <validate>
c0006fae:	89 c5                	mov    ebp,eax
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	0f 85 aa 01 00 00    	jne    c0007162 <f_forward+0x1d4>
c0006fb8:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006fbc:	85 ed                	test   ebp,ebp
c0006fbe:	0f 85 9e 01 00 00    	jne    c0007162 <f_forward+0x1d4>
c0006fc4:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fc8:	0f 84 8f 01 00 00    	je     c000715d <f_forward+0x1cf>
c0006fce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fd1:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fd4:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fd7:	bf 00 00 00 00       	mov    edi,0x0
c0006fdc:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006fdf:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006fe3:	89 d1                	mov    ecx,edx
c0006fe5:	19 f9                	sbb    ecx,edi
c0006fe7:	0f 83 cf 00 00 00    	jae    c00070bc <f_forward+0x12e>
c0006fed:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006ff1:	e9 c6 00 00 00       	jmp    c00070bc <f_forward+0x12e>
c0006ff6:	50                   	push   eax
c0006ff7:	50                   	push   eax
c0006ff8:	6a 00                	push   0x0
c0006ffa:	6a 00                	push   0x0
c0006ffc:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007000:	83 c4 10             	add    esp,0x10
c0007003:	85 c0                	test   eax,eax
c0007005:	0f 84 57 01 00 00    	je     c0007162 <f_forward+0x1d4>
c000700b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000700e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007012:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007015:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007019:	89 d7                	mov    edi,edx
c000701b:	8d 4e ff             	lea    ecx,[esi-0x1]
c000701e:	89 c6                	mov    esi,eax
c0007020:	0f ac fe 09          	shrd   esi,edi,0x9
c0007024:	21 ce                	and    esi,ecx
c0007026:	89 c1                	mov    ecx,eax
c0007028:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000702e:	0f 84 98 00 00 00    	je     c00070cc <f_forward+0x13e>
c0007034:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007038:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000703b:	89 c8                	mov    eax,ecx
c000703d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007041:	e8 af ac ff ff       	call   c0001cf5 <clst2sect>
c0007046:	89 d7                	mov    edi,edx
c0007048:	09 c7                	or     edi,eax
c000704a:	0f 84 9e 00 00 00    	je     c00070ee <f_forward+0x160>
c0007050:	31 ff                	xor    edi,edi
c0007052:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007055:	01 c6                	add    esi,eax
c0007057:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000705b:	11 d7                	adc    edi,edx
c000705d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007060:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007063:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007067:	39 fa                	cmp    edx,edi
c0007069:	0f 85 a2 00 00 00    	jne    c0007111 <f_forward+0x183>
c000706f:	39 f0                	cmp    eax,esi
c0007071:	0f 85 9a 00 00 00    	jne    c0007111 <f_forward+0x183>
c0007077:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000707a:	ba 00 02 00 00       	mov    edx,0x200
c000707f:	25 ff 01 00 00       	and    eax,0x1ff
c0007084:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007088:	29 c2                	sub    edx,eax
c000708a:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000708d:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007090:	39 d1                	cmp    ecx,edx
c0007092:	76 02                	jbe    c0007096 <f_forward+0x108>
c0007094:	89 d1                	mov    ecx,edx
c0007096:	8d 73 50             	lea    esi,[ebx+0x50]
c0007099:	52                   	push   edx
c000709a:	01 c6                	add    esi,eax
c000709c:	52                   	push   edx
c000709d:	51                   	push   ecx
c000709e:	56                   	push   esi
c000709f:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00070a3:	83 c4 10             	add    esp,0x10
c00070a6:	85 c0                	test   eax,eax
c00070a8:	74 44                	je     c00070ee <f_forward+0x160>
c00070aa:	31 ff                	xor    edi,edi
c00070ac:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00070af:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00070b2:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00070b6:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00070ba:	01 07                	add    DWORD PTR [edi],eax
c00070bc:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070c1:	0f 85 2f ff ff ff    	jne    c0006ff6 <f_forward+0x68>
c00070c7:	e9 96 00 00 00       	jmp    c0007162 <f_forward+0x1d4>
c00070cc:	85 f6                	test   esi,esi
c00070ce:	0f 85 60 ff ff ff    	jne    c0007034 <f_forward+0xa6>
c00070d4:	89 d7                	mov    edi,edx
c00070d6:	09 c7                	or     edi,eax
c00070d8:	75 05                	jne    c00070df <f_forward+0x151>
c00070da:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070dd:	eb 0a                	jmp    c00070e9 <f_forward+0x15b>
c00070df:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070e2:	89 d8                	mov    eax,ebx
c00070e4:	e8 d9 bc ff ff       	call   c0002dc2 <get_fat>
c00070e9:	83 f8 01             	cmp    eax,0x1
c00070ec:	77 0b                	ja     c00070f9 <f_forward+0x16b>
c00070ee:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070f2:	bd 02 00 00 00       	mov    ebp,0x2
c00070f7:	eb 69                	jmp    c0007162 <f_forward+0x1d4>
c00070f9:	83 f8 ff             	cmp    eax,0xffffffff
c00070fc:	75 0b                	jne    c0007109 <f_forward+0x17b>
c00070fe:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007102:	bd 01 00 00 00       	mov    ebp,0x1
c0007107:	eb 59                	jmp    c0007162 <f_forward+0x1d4>
c0007109:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000710c:	e9 23 ff ff ff       	jmp    c0007034 <f_forward+0xa6>
c0007111:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007115:	79 20                	jns    c0007137 <f_forward+0x1a9>
c0007117:	83 ec 0c             	sub    esp,0xc
c000711a:	6a 01                	push   0x1
c000711c:	52                   	push   edx
c000711d:	50                   	push   eax
c000711e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007122:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007126:	50                   	push   eax
c0007127:	e8 fb a8 ff ff       	call   c0001a27 <disk_write>
c000712c:	83 c4 20             	add    esp,0x20
c000712f:	85 c0                	test   eax,eax
c0007131:	75 cb                	jne    c00070fe <f_forward+0x170>
c0007133:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007137:	83 ec 0c             	sub    esp,0xc
c000713a:	6a 01                	push   0x1
c000713c:	57                   	push   edi
c000713d:	56                   	push   esi
c000713e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007142:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007146:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000714a:	50                   	push   eax
c000714b:	e8 c1 a8 ff ff       	call   c0001a11 <disk_read>
c0007150:	83 c4 20             	add    esp,0x20
c0007153:	85 c0                	test   eax,eax
c0007155:	0f 84 1c ff ff ff    	je     c0007077 <f_forward+0xe9>
c000715b:	eb a1                	jmp    c00070fe <f_forward+0x170>
c000715d:	bd 07 00 00 00       	mov    ebp,0x7
c0007162:	83 c4 2c             	add    esp,0x2c
c0007165:	89 e8                	mov    eax,ebp
c0007167:	5b                   	pop    ebx
c0007168:	5e                   	pop    esi
c0007169:	5f                   	pop    edi
c000716a:	5d                   	pop    ebp
c000716b:	c3                   	ret    

c000716c <f_mkfs>:
c000716c:	55                   	push   ebp
c000716d:	57                   	push   edi
c000716e:	56                   	push   esi
c000716f:	53                   	push   ebx
c0007170:	bb 0b 00 00 00       	mov    ebx,0xb
c0007175:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000717b:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007182:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007189:	e8 b0 ae ff ff       	call   c000203e <get_ldnumber>
c000718e:	85 c0                	test   eax,eax
c0007190:	0f 88 ec 10 00 00    	js     c0008282 <f_mkfs+0x1116>
c0007196:	8b 14 85 60 ce 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd31a0]
c000719d:	85 d2                	test   edx,edx
c000719f:	74 03                	je     c00071a4 <f_mkfs+0x38>
c00071a1:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00071a4:	85 f6                	test   esi,esi
c00071a6:	75 05                	jne    c00071ad <f_mkfs+0x41>
c00071a8:	be 40 81 02 c0       	mov    esi,0xc0028140
c00071ad:	83 ec 0c             	sub    esp,0xc
c00071b0:	0f b6 c0             	movzx  eax,al
c00071b3:	bb 03 00 00 00       	mov    ebx,0x3
c00071b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071c0:	e8 49 a8 ff ff       	call   c0001a0e <disk_initialize>
c00071c5:	83 c4 10             	add    esp,0x10
c00071c8:	a8 01                	test   al,0x1
c00071ca:	0f 85 b2 10 00 00    	jne    c0008282 <f_mkfs+0x1116>
c00071d0:	bb 0a 00 00 00       	mov    ebx,0xa
c00071d5:	a8 04                	test   al,0x4
c00071d7:	0f 85 a5 10 00 00    	jne    c0008282 <f_mkfs+0x1116>
c00071dd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071e0:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071e4:	85 c0                	test   eax,eax
c00071e6:	75 20                	jne    c0007208 <f_mkfs+0x9c>
c00071e8:	51                   	push   ecx
c00071e9:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071ed:	50                   	push   eax
c00071ee:	6a 03                	push   0x3
c00071f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071f4:	e8 44 a8 ff ff       	call   c0001a3d <disk_ioctl>
c00071f9:	83 c4 10             	add    esp,0x10
c00071fc:	85 c0                	test   eax,eax
c00071fe:	74 08                	je     c0007208 <f_mkfs+0x9c>
c0007200:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007208:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000720c:	8d 42 ff             	lea    eax,[edx-0x1]
c000720f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007214:	77 04                	ja     c000721a <f_mkfs+0xae>
c0007216:	85 c2                	test   edx,eax
c0007218:	74 08                	je     c0007222 <f_mkfs+0xb6>
c000721a:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007222:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007225:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007229:	48                   	dec    eax
c000722a:	3c 01                	cmp    al,0x1
c000722c:	76 05                	jbe    c0007233 <f_mkfs+0xc7>
c000722e:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007233:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007236:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000723a:	48                   	dec    eax
c000723b:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007240:	77 07                	ja     c0007249 <f_mkfs+0xdd>
c0007242:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007247:	74 08                	je     c0007251 <f_mkfs+0xe5>
c0007249:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007251:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007254:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000725a:	77 07                	ja     c0007263 <f_mkfs+0xf7>
c000725c:	8d 43 ff             	lea    eax,[ebx-0x1]
c000725f:	85 d8                	test   eax,ebx
c0007261:	74 02                	je     c0007265 <f_mkfs+0xf9>
c0007263:	31 db                	xor    ebx,ebx
c0007265:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007270:	77 0a                	ja     c000727c <f_mkfs+0x110>
c0007272:	bb 11 00 00 00       	mov    ebx,0x11
c0007277:	e9 06 10 00 00       	jmp    c0008282 <f_mkfs+0x1116>
c000727c:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007283:	8b 36                	mov    esi,DWORD PTR [esi]
c0007285:	85 ed                	test   ebp,ebp
c0007287:	75 1e                	jne    c00072a7 <f_mkfs+0x13b>
c0007289:	83 ec 0c             	sub    esp,0xc
c000728c:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007293:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007298:	50                   	push   eax
c0007299:	e8 f1 0f 00 00       	call   c000828f <ff_memalloc>
c000729e:	83 c4 10             	add    esp,0x10
c00072a1:	89 c5                	mov    ebp,eax
c00072a3:	85 c0                	test   eax,eax
c00072a5:	74 cb                	je     c0007272 <f_mkfs+0x106>
c00072a7:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00072af:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00072b7:	52                   	push   edx
c00072b8:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072bc:	50                   	push   eax
c00072bd:	6a 01                	push   0x1
c00072bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072c3:	e8 75 a7 ff ff       	call   c0001a3d <disk_ioctl>
c00072c8:	83 c4 10             	add    esp,0x10
c00072cb:	85 c0                	test   eax,eax
c00072cd:	0f 85 4a 0f 00 00    	jne    c000821d <f_mkfs+0x10b1>
c00072d3:	89 f1                	mov    ecx,esi
c00072d5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072dd:	83 e1 0f             	and    ecx,0xf
c00072e0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072e8:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072ec:	83 e6 08             	and    esi,0x8
c00072ef:	75 56                	jne    c0007347 <f_mkfs+0x1db>
c00072f1:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072f5:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072f9:	83 ff 00             	cmp    edi,0x0
c00072fc:	76 20                	jbe    c000731e <f_mkfs+0x1b2>
c00072fe:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007303:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000730b:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007311:	83 d7 ff             	adc    edi,0xffffffff
c0007314:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007318:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000731c:	eb 21                	jmp    c000733f <f_mkfs+0x1d3>
c000731e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007323:	39 f2                	cmp    edx,esi
c0007325:	19 f8                	sbb    eax,edi
c0007327:	73 1e                	jae    c0007347 <f_mkfs+0x1db>
c0007329:	83 c6 c1             	add    esi,0xffffffc1
c000732c:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007334:	83 d7 ff             	adc    edi,0xffffffff
c0007337:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000733b:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000733f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007347:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000734b:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000734f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007352:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007356:	31 c0                	xor    eax,eax
c0007358:	ba 7f 00 00 00       	mov    edx,0x7f
c000735d:	89 c7                	mov    edi,eax
c000735f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007362:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007366:	0f 83 c5 0a 00 00    	jae    c0007e31 <f_mkfs+0xcc5>
c000736c:	89 df                	mov    edi,ebx
c000736e:	c1 ef 09             	shr    edi,0x9
c0007371:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007375:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000737c:	c1 ef 09             	shr    edi,0x9
c000737f:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007384:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007388:	74 29                	je     c00073b3 <f_mkfs+0x247>
c000738a:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007390:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007395:	0f 97 c2             	seta   dl
c0007398:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000739b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000739f:	0f 92 c0             	setb   al
c00073a2:	08 c2                	or     dl,al
c00073a4:	75 5b                	jne    c0007401 <f_mkfs+0x295>
c00073a6:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073aa:	83 e0 07             	and    eax,0x7
c00073ad:	3c 04                	cmp    al,0x4
c00073af:	74 50                	je     c0007401 <f_mkfs+0x295>
c00073b1:	eb 1b                	jmp    c00073ce <f_mkfs+0x262>
c00073b3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00073b8:	0f 87 73 0a 00 00    	ja     c0007e31 <f_mkfs+0xcc5>
c00073be:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073c4:	76 08                	jbe    c00073ce <f_mkfs+0x262>
c00073c6:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073ce:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073d2:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073d6:	83 e0 01             	and    eax,0x1
c00073d9:	80 e1 02             	and    cl,0x2
c00073dc:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073e0:	74 0d                	je     c00073ef <f_mkfs+0x283>
c00073e2:	84 c0                	test   al,al
c00073e4:	0f 84 53 09 00 00    	je     c0007d3d <f_mkfs+0xbd1>
c00073ea:	e9 12 08 00 00       	jmp    c0007c01 <f_mkfs+0xa95>
c00073ef:	bb 13 00 00 00       	mov    ebx,0x13
c00073f4:	84 c0                	test   al,al
c00073f6:	0f 85 05 08 00 00    	jne    c0007c01 <f_mkfs+0xa95>
c00073fc:	e9 39 0e 00 00       	jmp    c000823a <f_mkfs+0x10ce>
c0007401:	31 c0                	xor    eax,eax
c0007403:	ba ff 0f 00 00       	mov    edx,0xfff
c0007408:	89 c7                	mov    edi,eax
c000740a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000740d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007411:	0f 83 1a 0a 00 00    	jae    c0007e31 <f_mkfs+0xcc5>
c0007417:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000741d:	77 39                	ja     c0007458 <f_mkfs+0x2ec>
c000741f:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007424:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000742c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000742f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007433:	73 08                	jae    c000743d <f_mkfs+0x2d1>
c0007435:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000743d:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007442:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007445:	b8 00 00 00 00       	mov    eax,0x0
c000744a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000744e:	73 08                	jae    c0007458 <f_mkfs+0x2ec>
c0007450:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000745c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007460:	83 c0 20             	add    eax,0x20
c0007463:	83 d2 00             	adc    edx,0x0
c0007466:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000746a:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000746e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007472:	31 d2                	xor    edx,edx
c0007474:	31 ff                	xor    edi,edi
c0007476:	52                   	push   edx
c0007477:	89 fb                	mov    ebx,edi
c0007479:	50                   	push   eax
c000747a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000747e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007482:	e8 45 e3 01 00       	call   c00257cc <__udivdi3>
c0007487:	83 c4 10             	add    esp,0x10
c000748a:	c1 e0 02             	shl    eax,0x2
c000748d:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007491:	05 07 02 00 00       	add    eax,0x207
c0007496:	89 f1                	mov    ecx,esi
c0007498:	c1 e8 09             	shr    eax,0x9
c000749b:	83 c1 ff             	add    ecx,0xffffffff
c000749e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00074a2:	83 d3 ff             	adc    ebx,0xffffffff
c00074a5:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00074a9:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00074ad:	31 d2                	xor    edx,edx
c00074af:	01 c8                	add    eax,ecx
c00074b1:	11 da                	adc    edx,ebx
c00074b3:	89 c1                	mov    ecx,eax
c00074b5:	f7 de                	neg    esi
c00074b7:	89 d0                	mov    eax,edx
c00074b9:	83 d7 00             	adc    edi,0x0
c00074bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074c0:	f7 df                	neg    edi
c00074c2:	21 f1                	and    ecx,esi
c00074c4:	21 f8                	and    eax,edi
c00074c6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074ce:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074d6:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074da:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074dd:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074e1:	0f ac d0 01          	shrd   eax,edx,0x1
c00074e5:	89 df                	mov    edi,ebx
c00074e7:	d1 ea                	shr    edx,1
c00074e9:	39 c1                	cmp    ecx,eax
c00074eb:	19 d7                	sbb    edi,edx
c00074ed:	0f 83 3e 09 00 00    	jae    c0007e31 <f_mkfs+0xcc5>
c00074f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074f7:	31 d2                	xor    edx,edx
c00074f9:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007501:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007505:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007508:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000750c:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007510:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007514:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007518:	83 f8 0f             	cmp    eax,0xf
c000751b:	0f 86 10 09 00 00    	jbe    c0007e31 <f_mkfs+0xcc5>
c0007521:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007529:	0f 87 02 09 00 00    	ja     c0007e31 <f_mkfs+0xcc5>
c000752f:	31 d2                	xor    edx,edx
c0007531:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007535:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000753d:	83 c0 07             	add    eax,0x7
c0007540:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007548:	c1 e8 03             	shr    eax,0x3
c000754b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007552:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007556:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000755a:	c1 e0 09             	shl    eax,0x9
c000755d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007561:	48                   	dec    eax
c0007562:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007566:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000756a:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000756e:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007572:	31 d2                	xor    edx,edx
c0007574:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007578:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000757f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007583:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007588:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000758c:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007598:	31 ff                	xor    edi,edi
c000759a:	31 f6                	xor    esi,esi
c000759c:	31 db                	xor    ebx,ebx
c000759e:	85 ff                	test   edi,edi
c00075a0:	74 05                	je     c00075a7 <f_mkfs+0x43b>
c00075a2:	4f                   	dec    edi
c00075a3:	74 44                	je     c00075e9 <f_mkfs+0x47d>
c00075a5:	eb 4f                	jmp    c00075f6 <f_mkfs+0x48a>
c00075a7:	83 ec 0c             	sub    esp,0xc
c00075aa:	0f b7 c3             	movzx  eax,bx
c00075ad:	50                   	push   eax
c00075ae:	e8 05 0e 00 00       	call   c00083b8 <ff_wtoupper>
c00075b3:	83 c4 10             	add    esp,0x10
c00075b6:	89 c1                	mov    ecx,eax
c00075b8:	8d 53 01             	lea    edx,[ebx+0x1]
c00075bb:	66 39 c3             	cmp    bx,ax
c00075be:	75 3e                	jne    c00075fe <f_mkfs+0x492>
c00075c0:	be 01 00 00 00       	mov    esi,0x1
c00075c5:	89 df                	mov    edi,ebx
c00075c7:	66 01 f7             	add    di,si
c00075ca:	75 07                	jne    c00075d3 <f_mkfs+0x467>
c00075cc:	83 fe 7f             	cmp    esi,0x7f
c00075cf:	77 31                	ja     c0007602 <f_mkfs+0x496>
c00075d1:	eb 16                	jmp    c00075e9 <f_mkfs+0x47d>
c00075d3:	83 ec 0c             	sub    esp,0xc
c00075d6:	0f b7 ff             	movzx  edi,di
c00075d9:	57                   	push   edi
c00075da:	e8 d9 0d 00 00       	call   c00083b8 <ff_wtoupper>
c00075df:	83 c4 10             	add    esp,0x10
c00075e2:	39 c7                	cmp    edi,eax
c00075e4:	75 e6                	jne    c00075cc <f_mkfs+0x460>
c00075e6:	46                   	inc    esi
c00075e7:	eb dc                	jmp    c00075c5 <f_mkfs+0x459>
c00075e9:	31 c0                	xor    eax,eax
c00075eb:	89 d9                	mov    ecx,ebx
c00075ed:	4e                   	dec    esi
c00075ee:	0f 95 c0             	setne  al
c00075f1:	43                   	inc    ebx
c00075f2:	89 c7                	mov    edi,eax
c00075f4:	eb 14                	jmp    c000760a <f_mkfs+0x49e>
c00075f6:	89 f1                	mov    ecx,esi
c00075f8:	01 f3                	add    ebx,esi
c00075fa:	31 ff                	xor    edi,edi
c00075fc:	eb 0c                	jmp    c000760a <f_mkfs+0x49e>
c00075fe:	89 d3                	mov    ebx,edx
c0007600:	eb 08                	jmp    c000760a <f_mkfs+0x49e>
c0007602:	bf 02 00 00 00       	mov    edi,0x2
c0007607:	83 c9 ff             	or     ecx,0xffffffff
c000760a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000760e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007611:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007615:	0f b6 c1             	movzx  eax,cl
c0007618:	e8 3a a9 ff ff       	call   c0001f57 <xsum32>
c000761d:	66 c1 e9 08          	shr    cx,0x8
c0007621:	89 c2                	mov    edx,eax
c0007623:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007626:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000762a:	0f b7 c1             	movzx  eax,cx
c000762d:	e8 25 a9 ff ff       	call   c0001f57 <xsum32>
c0007632:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007637:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000763b:	66 85 db             	test   bx,bx
c000763e:	74 1f                	je     c000765f <f_mkfs+0x4f3>
c0007640:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007643:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000764a:	83 c0 02             	add    eax,0x2
c000764d:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007653:	39 c2                	cmp    edx,eax
c0007655:	74 08                	je     c000765f <f_mkfs+0x4f3>
c0007657:	89 04 24             	mov    DWORD PTR [esp],eax
c000765a:	e9 3f ff ff ff       	jmp    c000759e <f_mkfs+0x432>
c000765f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007662:	83 ec 0c             	sub    esp,0xc
c0007665:	05 01 02 00 00       	add    eax,0x201
c000766a:	c1 e8 09             	shr    eax,0x9
c000766d:	50                   	push   eax
c000766e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007672:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007676:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000767a:	55                   	push   ebp
c000767b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000767f:	e8 a3 a3 ff ff       	call   c0001a27 <disk_write>
c0007684:	83 c4 20             	add    esp,0x20
c0007687:	85 c0                	test   eax,eax
c0007689:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000768c:	0f 85 8b 0b 00 00    	jne    c000821d <f_mkfs+0x10b1>
c0007692:	89 d0                	mov    eax,edx
c0007694:	31 d2                	xor    edx,edx
c0007696:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000769a:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c000769e:	66 85 db             	test   bx,bx
c00076a1:	74 04                	je     c00076a7 <f_mkfs+0x53b>
c00076a3:	31 c0                	xor    eax,eax
c00076a5:	eb b0                	jmp    c0007657 <f_mkfs+0x4eb>
c00076a7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00076ab:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00076af:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00076b3:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00076b9:	31 d2                	xor    edx,edx
c00076bb:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076c6:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076ca:	c1 eb 09             	shr    ebx,0x9
c00076cd:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076d8:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076dc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076e0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076e4:	8d 70 01             	lea    esi,[eax+0x1]
c00076e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076ef:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076f6:	31 d2                	xor    edx,edx
c00076f8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0007700:	89 c1                	mov    ecx,eax
c0007702:	89 e8                	mov    eax,ebp
c0007704:	e8 e7 a3 ff ff       	call   c0001af0 <mem_set>
c0007709:	31 c0                	xor    eax,eax
c000770b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000770e:	76 10                	jbe    c0007720 <f_mkfs+0x5b4>
c0007710:	83 fe 07             	cmp    esi,0x7
c0007713:	76 0b                	jbe    c0007720 <f_mkfs+0x5b4>
c0007715:	40                   	inc    eax
c0007716:	83 ee 08             	sub    esi,0x8
c0007719:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000771e:	eb eb                	jmp    c000770b <f_mkfs+0x59f>
c0007720:	b2 01                	mov    dl,0x1
c0007722:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007726:	85 f6                	test   esi,esi
c0007728:	74 0c                	je     c0007736 <f_mkfs+0x5ca>
c000772a:	39 04 24             	cmp    DWORD PTR [esp],eax
c000772d:	76 07                	jbe    c0007736 <f_mkfs+0x5ca>
c000772f:	08 11                	or     BYTE PTR [ecx],dl
c0007731:	4e                   	dec    esi
c0007732:	d1 e2                	shl    edx,1
c0007734:	eb f0                	jmp    c0007726 <f_mkfs+0x5ba>
c0007736:	89 df                	mov    edi,ebx
c0007738:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000773c:	76 04                	jbe    c0007742 <f_mkfs+0x5d6>
c000773e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007742:	83 ec 0c             	sub    esp,0xc
c0007745:	57                   	push   edi
c0007746:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000774a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000774e:	55                   	push   ebp
c000774f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007753:	e8 cf a2 ff ff       	call   c0001a27 <disk_write>
c0007758:	83 c4 20             	add    esp,0x20
c000775b:	85 c0                	test   eax,eax
c000775d:	0f 85 ba 0a 00 00    	jne    c000821d <f_mkfs+0x10b1>
c0007763:	31 d2                	xor    edx,edx
c0007765:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007769:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000776d:	29 fb                	sub    ebx,edi
c000776f:	0f 85 7a ff ff ff    	jne    c00076ef <f_mkfs+0x583>
c0007775:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007779:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007781:	31 f6                	xor    esi,esi
c0007783:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007787:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000778a:	31 d2                	xor    edx,edx
c000778c:	89 e8                	mov    eax,ebp
c000778e:	e8 5d a3 ff ff       	call   c0001af0 <mem_set>
c0007793:	31 c9                	xor    ecx,ecx
c0007795:	85 db                	test   ebx,ebx
c0007797:	75 40                	jne    c00077d9 <f_mkfs+0x66d>
c0007799:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000779e:	89 e8                	mov    eax,ebp
c00077a0:	bb 02 00 00 00       	mov    ebx,0x2
c00077a5:	e8 28 a3 ff ff       	call   c0001ad2 <st_dword>
c00077aa:	8d 45 04             	lea    eax,[ebp+0x4]
c00077ad:	83 ca ff             	or     edx,0xffffffff
c00077b0:	e8 1d a3 ff ff       	call   c0001ad2 <st_dword>
c00077b5:	b9 08 00 00 00       	mov    ecx,0x8
c00077ba:	eb 1d                	jmp    c00077d9 <f_mkfs+0x66d>
c00077bc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077bf:	76 3b                	jbe    c00077fc <f_mkfs+0x690>
c00077c1:	43                   	inc    ebx
c00077c2:	83 fe 01             	cmp    esi,0x1
c00077c5:	89 da                	mov    edx,ebx
c00077c7:	77 03                	ja     c00077cc <f_mkfs+0x660>
c00077c9:	83 ca ff             	or     edx,0xffffffff
c00077cc:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077d0:	4e                   	dec    esi
c00077d1:	e8 fc a2 ff ff       	call   c0001ad2 <st_dword>
c00077d6:	83 c1 04             	add    ecx,0x4
c00077d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077dd:	85 f6                	test   esi,esi
c00077df:	75 db                	jne    c00077bc <f_mkfs+0x650>
c00077e1:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077e6:	77 14                	ja     c00077fc <f_mkfs+0x690>
c00077e8:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077ec:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077f3:	85 f6                	test   esi,esi
c00077f5:	74 05                	je     c00077fc <f_mkfs+0x690>
c00077f7:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077fa:	77 dd                	ja     c00077d9 <f_mkfs+0x66d>
c00077fc:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007800:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007804:	39 cf                	cmp    edi,ecx
c0007806:	76 02                	jbe    c000780a <f_mkfs+0x69e>
c0007808:	89 cf                	mov    edi,ecx
c000780a:	83 ec 0c             	sub    esp,0xc
c000780d:	57                   	push   edi
c000780e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007812:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007816:	55                   	push   ebp
c0007817:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000781b:	e8 07 a2 ff ff       	call   c0001a27 <disk_write>
c0007820:	83 c4 20             	add    esp,0x20
c0007823:	85 c0                	test   eax,eax
c0007825:	0f 85 f2 09 00 00    	jne    c000821d <f_mkfs+0x10b1>
c000782b:	31 d2                	xor    edx,edx
c000782d:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007831:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007835:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007839:	0f 85 48 ff ff ff    	jne    c0007787 <f_mkfs+0x61b>
c000783f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007842:	31 d2                	xor    edx,edx
c0007844:	89 e8                	mov    eax,ebp
c0007846:	31 ff                	xor    edi,edi
c0007848:	e8 a3 a2 ff ff       	call   c0001af0 <mem_set>
c000784d:	8d 45 34             	lea    eax,[ebp+0x34]
c0007850:	ba 02 00 00 00       	mov    edx,0x2
c0007855:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007859:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000785d:	e8 70 a2 ff ff       	call   c0001ad2 <st_dword>
c0007862:	8d 45 38             	lea    eax,[ebp+0x38]
c0007865:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007869:	e8 64 a2 ff ff       	call   c0001ad2 <st_dword>
c000786e:	8d 45 44             	lea    eax,[ebp+0x44]
c0007871:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007875:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007879:	e8 54 a2 ff ff       	call   c0001ad2 <st_dword>
c000787e:	8d 45 54             	lea    eax,[ebp+0x54]
c0007881:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007885:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007889:	83 c2 02             	add    edx,0x2
c000788c:	e8 41 a2 ff ff       	call   c0001ad2 <st_dword>
c0007891:	8d 45 58             	lea    eax,[ebp+0x58]
c0007894:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007898:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000789c:	e8 31 a2 ff ff       	call   c0001ad2 <st_dword>
c00078a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078a5:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00078aa:	89 c6                	mov    esi,eax
c00078ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b0:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00078b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00078b7:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00078bb:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078be:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078c2:	39 cb                	cmp    ebx,ecx
c00078c4:	76 02                	jbe    c00078c8 <f_mkfs+0x75c>
c00078c6:	89 cb                	mov    ebx,ecx
c00078c8:	83 ec 0c             	sub    esp,0xc
c00078cb:	53                   	push   ebx
c00078cc:	57                   	push   edi
c00078cd:	56                   	push   esi
c00078ce:	55                   	push   ebp
c00078cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078d3:	e8 4f a1 ff ff       	call   c0001a27 <disk_write>
c00078d8:	83 c4 20             	add    esp,0x20
c00078db:	85 c0                	test   eax,eax
c00078dd:	0f 85 3a 09 00 00    	jne    c000821d <f_mkfs+0x10b1>
c00078e3:	31 d2                	xor    edx,edx
c00078e5:	b9 00 02 00 00       	mov    ecx,0x200
c00078ea:	89 e8                	mov    eax,ebp
c00078ec:	e8 ff a1 ff ff       	call   c0001af0 <mem_set>
c00078f1:	31 d2                	xor    edx,edx
c00078f3:	01 de                	add    esi,ebx
c00078f5:	11 d7                	adc    edi,edx
c00078f7:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078fa:	75 bf                	jne    c00078bb <f_mkfs+0x74f>
c00078fc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007900:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007904:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000790c:	b9 00 02 00 00       	mov    ecx,0x200
c0007911:	31 d2                	xor    edx,edx
c0007913:	89 e8                	mov    eax,ebp
c0007915:	e8 d6 a1 ff ff       	call   c0001af0 <mem_set>
c000791a:	b9 0b 00 00 00       	mov    ecx,0xb
c000791f:	ba 20 82 02 c0       	mov    edx,0xc0028220
c0007924:	89 e8                	mov    eax,ebp
c0007926:	e8 b0 a1 ff ff       	call   c0001adb <mem_cpy>
c000792b:	8d 45 40             	lea    eax,[ebp+0x40]
c000792e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007932:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007936:	e8 9a a1 ff ff       	call   c0001ad5 <st_qword>
c000793b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000793f:	8d 45 48             	lea    eax,[ebp+0x48]
c0007942:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007946:	e8 8a a1 ff ff       	call   c0001ad5 <st_qword>
c000794b:	8d 45 50             	lea    eax,[ebp+0x50]
c000794e:	ba 20 00 00 00       	mov    edx,0x20
c0007953:	e8 7a a1 ff ff       	call   c0001ad2 <st_dword>
c0007958:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000795c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007960:	e8 6d a1 ff ff       	call   c0001ad2 <st_dword>
c0007965:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007969:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000796d:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007971:	e8 5c a1 ff ff       	call   c0001ad2 <st_dword>
c0007976:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007979:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000797d:	e8 50 a1 ff ff       	call   c0001ad2 <st_dword>
c0007982:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007986:	8d 50 02             	lea    edx,[eax+0x2]
c0007989:	8d 45 60             	lea    eax,[ebp+0x60]
c000798c:	e8 41 a1 ff ff       	call   c0001ad2 <st_dword>
c0007991:	8d 45 64             	lea    eax,[ebp+0x64]
c0007994:	ba 00 00 21 50       	mov    edx,0x50210000
c0007999:	e8 34 a1 ff ff       	call   c0001ad2 <st_dword>
c000799e:	8d 45 68             	lea    eax,[ebp+0x68]
c00079a1:	ba 00 01 00 00       	mov    edx,0x100
c00079a6:	e8 23 a1 ff ff       	call   c0001ace <st_word>
c00079ab:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00079af:	b8 0a 00 00 00       	mov    eax,0xa
c00079b4:	48                   	dec    eax
c00079b5:	74 05                	je     c00079bc <f_mkfs+0x850>
c00079b7:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00079ba:	eb f8                	jmp    c00079b4 <f_mkfs+0x848>
c00079bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079c0:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079c8:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079cc:	74 05                	je     c00079d3 <f_mkfs+0x867>
c00079ce:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079d1:	eb f5                	jmp    c00079c8 <f_mkfs+0x85c>
c00079d3:	8d 45 78             	lea    eax,[ebp+0x78]
c00079d6:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079db:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079e1:	31 db                	xor    ebx,ebx
c00079e3:	e8 e6 a0 ff ff       	call   c0001ace <st_word>
c00079e8:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079ee:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00079f6:	e8 d3 a0 ff ff       	call   c0001ace <st_word>
c00079fb:	31 c9                	xor    ecx,ecx
c00079fd:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007a00:	83 f8 01             	cmp    eax,0x1
c0007a03:	76 13                	jbe    c0007a18 <f_mkfs+0x8ac>
c0007a05:	83 f9 70             	cmp    ecx,0x70
c0007a08:	74 0e                	je     c0007a18 <f_mkfs+0x8ac>
c0007a0a:	89 da                	mov    edx,ebx
c0007a0c:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007a11:	e8 41 a5 ff ff       	call   c0001f57 <xsum32>
c0007a16:	89 c3                	mov    ebx,eax
c0007a18:	41                   	inc    ecx
c0007a19:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a1f:	75 dc                	jne    c00079fd <f_mkfs+0x891>
c0007a21:	89 f0                	mov    eax,esi
c0007a23:	89 fa                	mov    edx,edi
c0007a25:	83 c0 01             	add    eax,0x1
c0007a28:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a2c:	83 d2 00             	adc    edx,0x0
c0007a2f:	83 ec 0c             	sub    esp,0xc
c0007a32:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a36:	6a 01                	push   0x1
c0007a38:	57                   	push   edi
c0007a39:	56                   	push   esi
c0007a3a:	55                   	push   ebp
c0007a3b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a3f:	e8 e3 9f ff ff       	call   c0001a27 <disk_write>
c0007a44:	83 c4 20             	add    esp,0x20
c0007a47:	85 c0                	test   eax,eax
c0007a49:	0f 85 ce 07 00 00    	jne    c000821d <f_mkfs+0x10b1>
c0007a4f:	31 d2                	xor    edx,edx
c0007a51:	b9 00 02 00 00       	mov    ecx,0x200
c0007a56:	89 e8                	mov    eax,ebp
c0007a58:	e8 93 a0 ff ff       	call   c0001af0 <mem_set>
c0007a5d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a62:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a65:	e8 64 a0 ff ff       	call   c0001ace <st_word>
c0007a6a:	89 f0                	mov    eax,esi
c0007a6c:	89 fa                	mov    edx,edi
c0007a6e:	83 c0 09             	add    eax,0x9
c0007a71:	83 d2 00             	adc    edx,0x0
c0007a74:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a77:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a7b:	31 c9                	xor    ecx,ecx
c0007a7d:	41                   	inc    ecx
c0007a7e:	89 da                	mov    edx,ebx
c0007a80:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a85:	e8 cd a4 ff ff       	call   c0001f57 <xsum32>
c0007a8a:	89 c3                	mov    ebx,eax
c0007a8c:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a92:	75 e9                	jne    c0007a7d <f_mkfs+0x911>
c0007a94:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a98:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a9c:	83 c0 01             	add    eax,0x1
c0007a9f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007aa3:	83 d2 00             	adc    edx,0x0
c0007aa6:	83 ec 0c             	sub    esp,0xc
c0007aa9:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007aad:	6a 01                	push   0x1
c0007aaf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007ab3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007ab7:	55                   	push   ebp
c0007ab8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007abc:	e8 66 9f ff ff       	call   c0001a27 <disk_write>
c0007ac1:	83 c4 20             	add    esp,0x20
c0007ac4:	85 c0                	test   eax,eax
c0007ac6:	0f 85 51 07 00 00    	jne    c000821d <f_mkfs+0x10b1>
c0007acc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ad0:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ad4:	75 09                	jne    c0007adf <f_mkfs+0x973>
c0007ad6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ad9:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007add:	74 12                	je     c0007af1 <f_mkfs+0x985>
c0007adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ae3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ae7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007aeb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aef:	eb 8a                	jmp    c0007a7b <f_mkfs+0x90f>
c0007af1:	31 d2                	xor    edx,edx
c0007af3:	b9 00 02 00 00       	mov    ecx,0x200
c0007af8:	89 e8                	mov    eax,ebp
c0007afa:	e8 f1 9f ff ff       	call   c0001af0 <mem_set>
c0007aff:	83 c6 0b             	add    esi,0xb
c0007b02:	83 d7 00             	adc    edi,0x0
c0007b05:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007b09:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007b0d:	31 c9                	xor    ecx,ecx
c0007b0f:	41                   	inc    ecx
c0007b10:	89 da                	mov    edx,ebx
c0007b12:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007b17:	e8 3b a4 ff ff       	call   c0001f57 <xsum32>
c0007b1c:	89 c3                	mov    ebx,eax
c0007b1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b24:	75 e9                	jne    c0007b0f <f_mkfs+0x9a3>
c0007b26:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b29:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b2d:	83 c6 01             	add    esi,0x1
c0007b30:	83 d7 00             	adc    edi,0x0
c0007b33:	83 ec 0c             	sub    esp,0xc
c0007b36:	6a 01                	push   0x1
c0007b38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b40:	55                   	push   ebp
c0007b41:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b45:	e8 dd 9e ff ff       	call   c0001a27 <disk_write>
c0007b4a:	83 c4 20             	add    esp,0x20
c0007b4d:	85 c0                	test   eax,eax
c0007b4f:	0f 85 c8 06 00 00    	jne    c000821d <f_mkfs+0x10b1>
c0007b55:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b59:	75 06                	jne    c0007b61 <f_mkfs+0x9f5>
c0007b5b:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b5f:	74 09                	je     c0007b6a <f_mkfs+0x9fe>
c0007b61:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b64:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b68:	eb a3                	jmp    c0007b0d <f_mkfs+0x9a1>
c0007b6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b6e:	89 da                	mov    edx,ebx
c0007b70:	01 e8                	add    eax,ebp
c0007b72:	e8 5b 9f ff ff       	call   c0001ad2 <st_dword>
c0007b77:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b7c:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b84:	75 e4                	jne    c0007b6a <f_mkfs+0x9fe>
c0007b86:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b89:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b8d:	83 c6 02             	add    esi,0x2
c0007b90:	83 d7 00             	adc    edi,0x0
c0007b93:	83 ec 0c             	sub    esp,0xc
c0007b96:	6a 01                	push   0x1
c0007b98:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ba0:	55                   	push   ebp
c0007ba1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ba5:	e8 7d 9e ff ff       	call   c0001a27 <disk_write>
c0007baa:	83 c4 20             	add    esp,0x20
c0007bad:	85 c0                	test   eax,eax
c0007baf:	0f 85 68 06 00 00    	jne    c000821d <f_mkfs+0x10b1>
c0007bb5:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007bba:	74 0d                	je     c0007bc9 <f_mkfs+0xa5d>
c0007bbc:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007bc4:	e9 43 fd ff ff       	jmp    c000790c <f_mkfs+0x7a0>
c0007bc9:	b1 07                	mov    cl,0x7
c0007bcb:	e9 e3 05 00 00       	jmp    c00081b3 <f_mkfs+0x1047>
c0007bd0:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007bd5:	0f 85 4f 02 00 00    	jne    c0007e2a <f_mkfs+0xcbe>
c0007bdb:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007be0:	0f 86 22 02 00 00    	jbe    c0007e08 <f_mkfs+0xc9c>
c0007be6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007beb:	0f 85 81 06 00 00    	jne    c0008272 <f_mkfs+0x1106>
c0007bf1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007bf4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bf8:	83 f8 40             	cmp    eax,0x40
c0007bfb:	0f 87 51 06 00 00    	ja     c0008252 <f_mkfs+0x10e6>
c0007c01:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007c05:	85 ff                	test   edi,edi
c0007c07:	75 1c                	jne    c0007c25 <f_mkfs+0xab9>
c0007c09:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c0c:	ba 20 81 02 c0       	mov    edx,0xc0028120
c0007c11:	c1 e9 0c             	shr    ecx,0xc
c0007c14:	bf 01 00 00 00       	mov    edi,0x1
c0007c19:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c1c:	66 85 c0             	test   ax,ax
c0007c1f:	0f 85 95 01 00 00    	jne    c0007dba <f_mkfs+0xc4e>
c0007c25:	31 d2                	xor    edx,edx
c0007c27:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c2a:	f7 f7                	div    edi
c0007c2c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c31:	0f 86 95 01 00 00    	jbe    c0007dcc <f_mkfs+0xc60>
c0007c37:	83 c0 02             	add    eax,0x2
c0007c3a:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c3f:	01 c0                	add    eax,eax
c0007c41:	05 ff 01 00 00       	add    eax,0x1ff
c0007c46:	be 01 00 00 00       	mov    esi,0x1
c0007c4b:	c1 e8 09             	shr    eax,0x9
c0007c4e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c56:	c1 e0 05             	shl    eax,0x5
c0007c59:	c1 e8 09             	shr    eax,0x9
c0007c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c60:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c65:	31 d2                	xor    edx,edx
c0007c67:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c6b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c75:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c79:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c81:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c85:	31 d2                	xor    edx,edx
c0007c87:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c8c:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c90:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c94:	31 db                	xor    ebx,ebx
c0007c96:	01 c8                	add    eax,ecx
c0007c98:	11 da                	adc    edx,ebx
c0007c9a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c9e:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ca2:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007ca6:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007caa:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007cae:	f7 da                	neg    edx
c0007cb0:	21 d1                	and    ecx,edx
c0007cb2:	29 d9                	sub    ecx,ebx
c0007cb4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cb9:	0f 85 20 01 00 00    	jne    c0007ddf <f_mkfs+0xc73>
c0007cbf:	31 db                	xor    ebx,ebx
c0007cc1:	01 ce                	add    esi,ecx
c0007cc3:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cc7:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ccb:	31 d2                	xor    edx,edx
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007cd3:	c1 e0 04             	shl    eax,0x4
c0007cd6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cda:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007cde:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ce2:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ce6:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ce9:	19 d3                	sbb    ebx,edx
c0007ceb:	0f 82 40 01 00 00    	jb     c0007e31 <f_mkfs+0xcc5>
c0007cf1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cf4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cf8:	89 c8                	mov    eax,ecx
c0007cfa:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cff:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007d03:	29 f0                	sub    eax,esi
c0007d05:	29 d0                	sub    eax,edx
c0007d07:	31 d2                	xor    edx,edx
c0007d09:	f7 f7                	div    edi
c0007d0b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007d10:	89 c3                	mov    ebx,eax
c0007d12:	0f 85 b8 fe ff ff    	jne    c0007bd0 <f_mkfs+0xa64>
c0007d18:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d1d:	0f 87 1d 01 00 00    	ja     c0007e40 <f_mkfs+0xcd4>
c0007d23:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d28:	0f 85 03 01 00 00    	jne    c0007e31 <f_mkfs+0xcc5>
c0007d2e:	83 ff 01             	cmp    edi,0x1
c0007d31:	0f 86 fa 00 00 00    	jbe    c0007e31 <f_mkfs+0xcc5>
c0007d37:	d1 ef                	shr    edi,1
c0007d39:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d3d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d41:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d44:	85 db                	test   ebx,ebx
c0007d46:	75 2d                	jne    c0007d75 <f_mkfs+0xc09>
c0007d48:	89 cb                	mov    ebx,ecx
c0007d4a:	ba 30 81 02 c0       	mov    edx,0xc0028130
c0007d4f:	c1 eb 11             	shr    ebx,0x11
c0007d52:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d5a:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d5d:	66 85 c0             	test   ax,ax
c0007d60:	74 11                	je     c0007d73 <f_mkfs+0xc07>
c0007d62:	83 c2 02             	add    edx,0x2
c0007d65:	39 d8                	cmp    eax,ebx
c0007d67:	77 0a                	ja     c0007d73 <f_mkfs+0xc07>
c0007d69:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d6d:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d71:	eb e7                	jmp    c0007d5a <f_mkfs+0xbee>
c0007d73:	31 db                	xor    ebx,ebx
c0007d75:	31 d2                	xor    edx,edx
c0007d77:	89 c8                	mov    eax,ecx
c0007d79:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d7d:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d84:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d89:	c1 ea 09             	shr    edx,0x9
c0007d8c:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d91:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d95:	0f 87 96 00 00 00    	ja     c0007e31 <f_mkfs+0xcc5>
c0007d9b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d9f:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007da7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007dab:	be 20 00 00 00       	mov    esi,0x20
c0007db0:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007db5:	e9 a6 fe ff ff       	jmp    c0007c60 <f_mkfs+0xaf4>
c0007dba:	83 c2 02             	add    edx,0x2
c0007dbd:	39 c8                	cmp    eax,ecx
c0007dbf:	0f 87 60 fe ff ff    	ja     c0007c25 <f_mkfs+0xab9>
c0007dc5:	01 ff                	add    edi,edi
c0007dc7:	e9 4d fe ff ff       	jmp    c0007c19 <f_mkfs+0xaad>
c0007dcc:	8d 04 40             	lea    eax,[eax+eax*2]
c0007dcf:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007dd4:	40                   	inc    eax
c0007dd5:	d1 e8                	shr    eax,1
c0007dd7:	83 c0 03             	add    eax,0x3
c0007dda:	e9 62 fe ff ff       	jmp    c0007c41 <f_mkfs+0xad5>
c0007ddf:	31 d2                	xor    edx,edx
c0007de1:	89 c8                	mov    eax,ecx
c0007de3:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007de7:	85 d2                	test   edx,edx
c0007de9:	74 0c                	je     c0007df7 <f_mkfs+0xc8b>
c0007deb:	49                   	dec    ecx
c0007dec:	46                   	inc    esi
c0007ded:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007df2:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007df7:	89 c8                	mov    eax,ecx
c0007df9:	31 d2                	xor    edx,edx
c0007dfb:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007dff:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007e03:	e9 c3 fe ff ff       	jmp    c0007ccb <f_mkfs+0xb5f>
c0007e08:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e0d:	77 31                	ja     c0007e40 <f_mkfs+0xcd4>
c0007e0f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e14:	75 1b                	jne    c0007e31 <f_mkfs+0xcc5>
c0007e16:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e1d:	3d 80 00 00 00       	cmp    eax,0x80
c0007e22:	0f 86 d9 fd ff ff    	jbe    c0007c01 <f_mkfs+0xa95>
c0007e28:	eb 07                	jmp    c0007e31 <f_mkfs+0xcc5>
c0007e2a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e2f:	76 0a                	jbe    c0007e3b <f_mkfs+0xccf>
c0007e31:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e36:	e9 ff 03 00 00       	jmp    c000823a <f_mkfs+0x10ce>
c0007e3b:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e40:	31 d2                	xor    edx,edx
c0007e42:	b9 00 02 00 00       	mov    ecx,0x200
c0007e47:	89 e8                	mov    eax,ebp
c0007e49:	e8 a2 9c ff ff       	call   c0001af0 <mem_set>
c0007e4e:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e53:	ba 42 82 02 c0       	mov    edx,0xc0028242
c0007e58:	89 e8                	mov    eax,ebp
c0007e5a:	e8 7c 9c ff ff       	call   c0001adb <mem_cpy>
c0007e5f:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e62:	ba 00 02 00 00       	mov    edx,0x200
c0007e67:	e8 62 9c ff ff       	call   c0001ace <st_word>
c0007e6c:	89 f8                	mov    eax,edi
c0007e6e:	0f b7 d6             	movzx  edx,si
c0007e71:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e74:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e77:	e8 52 9c ff ff       	call   c0001ace <st_word>
c0007e7c:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e80:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e85:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e88:	75 08                	jne    c0007e92 <f_mkfs+0xd26>
c0007e8a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e92:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e95:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e99:	e8 30 9c ff ff       	call   c0001ace <st_word>
c0007e9e:	b8 ff ff 00 00       	mov    eax,0xffff
c0007ea3:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007ea7:	39 d0                	cmp    eax,edx
c0007ea9:	b8 00 00 00 00       	mov    eax,0x0
c0007eae:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007eb2:	72 0a                	jb     c0007ebe <f_mkfs+0xd52>
c0007eb4:	8d 45 13             	lea    eax,[ebp+0x13]
c0007eb7:	e8 12 9c ff ff       	call   c0001ace <st_word>
c0007ebc:	eb 08                	jmp    c0007ec6 <f_mkfs+0xd5a>
c0007ebe:	8d 45 20             	lea    eax,[ebp+0x20]
c0007ec1:	e8 0c 9c ff ff       	call   c0001ad2 <st_dword>
c0007ec6:	8d 45 18             	lea    eax,[ebp+0x18]
c0007ec9:	ba 3f 00 00 00       	mov    edx,0x3f
c0007ece:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007ed2:	e8 f7 9b ff ff       	call   c0001ace <st_word>
c0007ed7:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007eda:	ba ff 00 00 00       	mov    edx,0xff
c0007edf:	e8 ea 9b ff ff       	call   c0001ace <st_word>
c0007ee4:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007eeb:	e8 e2 9b ff ff       	call   c0001ad2 <st_dword>
c0007ef0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ef5:	75 57                	jne    c0007f4e <f_mkfs+0xde2>
c0007ef7:	8d 45 43             	lea    eax,[ebp+0x43]
c0007efa:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eff:	e8 ce 9b ff ff       	call   c0001ad2 <st_dword>
c0007f04:	8d 45 24             	lea    eax,[ebp+0x24]
c0007f07:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f0b:	e8 c2 9b ff ff       	call   c0001ad2 <st_dword>
c0007f10:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007f13:	ba 02 00 00 00       	mov    edx,0x2
c0007f18:	e8 b5 9b ff ff       	call   c0001ad2 <st_dword>
c0007f1d:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f20:	ba 01 00 00 00       	mov    edx,0x1
c0007f25:	e8 a4 9b ff ff       	call   c0001ace <st_word>
c0007f2a:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f2d:	ba 06 00 00 00       	mov    edx,0x6
c0007f32:	e8 97 9b ff ff       	call   c0001ace <st_word>
c0007f37:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f3b:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f3f:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f42:	b9 13 00 00 00       	mov    ecx,0x13
c0007f47:	ba 4e 82 02 c0       	mov    edx,0xc002824e
c0007f4c:	eb 2f                	jmp    c0007f7d <f_mkfs+0xe11>
c0007f4e:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f51:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f56:	e8 77 9b ff ff       	call   c0001ad2 <st_dword>
c0007f5b:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f60:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f63:	e8 66 9b ff ff       	call   c0001ace <st_word>
c0007f68:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f6c:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f70:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f73:	b9 13 00 00 00       	mov    ecx,0x13
c0007f78:	ba 62 82 02 c0       	mov    edx,0xc0028262
c0007f7d:	e8 59 9b ff ff       	call   c0001adb <mem_cpy>
c0007f82:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f88:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f8d:	89 f0                	mov    eax,esi
c0007f8f:	e8 3a 9b ff ff       	call   c0001ace <st_word>
c0007f94:	83 ec 0c             	sub    esp,0xc
c0007f97:	6a 01                	push   0x1
c0007f99:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f9d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007fa1:	55                   	push   ebp
c0007fa2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa6:	e8 7c 9a ff ff       	call   c0001a27 <disk_write>
c0007fab:	83 c4 20             	add    esp,0x20
c0007fae:	85 c0                	test   eax,eax
c0007fb0:	0f 85 67 02 00 00    	jne    c000821d <f_mkfs+0x10b1>
c0007fb6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fbb:	0f 85 b7 00 00 00    	jne    c0008078 <f_mkfs+0xf0c>
c0007fc1:	83 ec 0c             	sub    esp,0xc
c0007fc4:	6a 01                	push   0x1
c0007fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fca:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fce:	83 c0 06             	add    eax,0x6
c0007fd1:	83 d2 00             	adc    edx,0x0
c0007fd4:	52                   	push   edx
c0007fd5:	50                   	push   eax
c0007fd6:	55                   	push   ebp
c0007fd7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fdb:	e8 47 9a ff ff       	call   c0001a27 <disk_write>
c0007fe0:	83 c4 20             	add    esp,0x20
c0007fe3:	b9 00 02 00 00       	mov    ecx,0x200
c0007fe8:	31 d2                	xor    edx,edx
c0007fea:	89 e8                	mov    eax,ebp
c0007fec:	e8 ff 9a ff ff       	call   c0001af0 <mem_set>
c0007ff1:	ba 52 52 61 41       	mov    edx,0x41615252
c0007ff6:	89 e8                	mov    eax,ebp
c0007ff8:	e8 d5 9a ff ff       	call   c0001ad2 <st_dword>
c0007ffd:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008003:	ba 72 72 41 61       	mov    edx,0x61417272
c0008008:	e8 c5 9a ff ff       	call   c0001ad2 <st_dword>
c000800d:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008010:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008016:	e8 b7 9a ff ff       	call   c0001ad2 <st_dword>
c000801b:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008021:	ba 02 00 00 00       	mov    edx,0x2
c0008026:	e8 a7 9a ff ff       	call   c0001ad2 <st_dword>
c000802b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008030:	89 f0                	mov    eax,esi
c0008032:	e8 97 9a ff ff       	call   c0001ace <st_word>
c0008037:	83 ec 0c             	sub    esp,0xc
c000803a:	6a 01                	push   0x1
c000803c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008040:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008044:	83 c0 07             	add    eax,0x7
c0008047:	83 d2 00             	adc    edx,0x0
c000804a:	52                   	push   edx
c000804b:	50                   	push   eax
c000804c:	55                   	push   ebp
c000804d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008051:	e8 d1 99 ff ff       	call   c0001a27 <disk_write>
c0008056:	83 c4 14             	add    esp,0x14
c0008059:	6a 01                	push   0x1
c000805b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000805f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008063:	83 c0 01             	add    eax,0x1
c0008066:	83 d2 00             	adc    edx,0x0
c0008069:	52                   	push   edx
c000806a:	50                   	push   eax
c000806b:	55                   	push   ebp
c000806c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008070:	e8 b2 99 ff ff       	call   c0001a27 <disk_write>
c0008075:	83 c4 20             	add    esp,0x20
c0008078:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000807f:	31 d2                	xor    edx,edx
c0008081:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008087:	31 db                	xor    ebx,ebx
c0008089:	89 e8                	mov    eax,ebp
c000808b:	e8 60 9a ff ff       	call   c0001af0 <mem_set>
c0008090:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008095:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000809c:	0f 94 c3             	sete   bl
c000809f:	4b                   	dec    ebx
c00080a0:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00080a6:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00080ac:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080b1:	75 21                	jne    c00080d4 <f_mkfs+0xf68>
c00080b3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00080b8:	89 e8                	mov    eax,ebp
c00080ba:	e8 13 9a ff ff       	call   c0001ad2 <st_dword>
c00080bf:	8d 45 04             	lea    eax,[ebp+0x4]
c00080c2:	83 ca ff             	or     edx,0xffffffff
c00080c5:	e8 08 9a ff ff       	call   c0001ad2 <st_dword>
c00080ca:	8d 45 08             	lea    eax,[ebp+0x8]
c00080cd:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080d2:	eb 04                	jmp    c00080d8 <f_mkfs+0xf6c>
c00080d4:	89 da                	mov    edx,ebx
c00080d6:	89 e8                	mov    eax,ebp
c00080d8:	e8 f5 99 ff ff       	call   c0001ad2 <st_dword>
c00080dd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080e5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080e9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080ed:	39 ce                	cmp    esi,ecx
c00080ef:	76 02                	jbe    c00080f3 <f_mkfs+0xf87>
c00080f1:	89 ce                	mov    esi,ecx
c00080f3:	83 ec 0c             	sub    esp,0xc
c00080f6:	56                   	push   esi
c00080f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080ff:	55                   	push   ebp
c0008100:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008104:	e8 1e 99 ff ff       	call   c0001a27 <disk_write>
c0008109:	83 c4 20             	add    esp,0x20
c000810c:	85 c0                	test   eax,eax
c000810e:	0f 85 09 01 00 00    	jne    c000821d <f_mkfs+0x10b1>
c0008114:	31 d2                	xor    edx,edx
c0008116:	b9 00 02 00 00       	mov    ecx,0x200
c000811b:	89 e8                	mov    eax,ebp
c000811d:	e8 ce 99 ff ff       	call   c0001af0 <mem_set>
c0008122:	31 d2                	xor    edx,edx
c0008124:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008128:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000812c:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008130:	75 b3                	jne    c00080e5 <f_mkfs+0xf79>
c0008132:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008135:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000813c:	40                   	inc    eax
c000813d:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008141:	0f 87 65 ff ff ff    	ja     c00080ac <f_mkfs+0xf40>
c0008147:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000814c:	74 04                	je     c0008152 <f_mkfs+0xfe6>
c000814e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008152:	89 fb                	mov    ebx,edi
c0008154:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008158:	76 04                	jbe    c000815e <f_mkfs+0xff2>
c000815a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000815e:	83 ec 0c             	sub    esp,0xc
c0008161:	53                   	push   ebx
c0008162:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008166:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000816a:	55                   	push   ebp
c000816b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000816f:	e8 b3 98 ff ff       	call   c0001a27 <disk_write>
c0008174:	83 c4 20             	add    esp,0x20
c0008177:	85 c0                	test   eax,eax
c0008179:	0f 85 9e 00 00 00    	jne    c000821d <f_mkfs+0x10b1>
c000817f:	31 d2                	xor    edx,edx
c0008181:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008185:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008189:	29 df                	sub    edi,ebx
c000818b:	75 c5                	jne    c0008152 <f_mkfs+0xfe6>
c000818d:	b1 0c                	mov    cl,0xc
c000818f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008194:	74 1d                	je     c00081b3 <f_mkfs+0x1047>
c0008196:	b8 ff ff 00 00       	mov    eax,0xffff
c000819b:	b1 06                	mov    cl,0x6
c000819d:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00081a1:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00081a5:	72 0c                	jb     c00081b3 <f_mkfs+0x1047>
c00081a7:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00081ac:	0f 94 c1             	sete   cl
c00081af:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00081b3:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00081b8:	75 4c                	jne    c0008206 <f_mkfs+0x109a>
c00081ba:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081be:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081c2:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081c9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081d0:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081db:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081e6:	0f b6 c9             	movzx  ecx,cl
c00081e9:	83 ec 0c             	sub    esp,0xc
c00081ec:	55                   	push   ebp
c00081ed:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081f8:	e8 2f c2 ff ff       	call   c000442c <create_partition>
c00081fd:	83 c4 10             	add    esp,0x10
c0008200:	89 c3                	mov    ebx,eax
c0008202:	85 c0                	test   eax,eax
c0008204:	75 34                	jne    c000823a <f_mkfs+0x10ce>
c0008206:	31 db                	xor    ebx,ebx
c0008208:	50                   	push   eax
c0008209:	6a 00                	push   0x0
c000820b:	6a 00                	push   0x0
c000820d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008211:	e8 27 98 ff ff       	call   c0001a3d <disk_ioctl>
c0008216:	83 c4 10             	add    esp,0x10
c0008219:	85 c0                	test   eax,eax
c000821b:	74 1d                	je     c000823a <f_mkfs+0x10ce>
c000821d:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008225:	75 0c                	jne    c0008233 <f_mkfs+0x10c7>
c0008227:	83 ec 0c             	sub    esp,0xc
c000822a:	55                   	push   ebp
c000822b:	e8 75 00 00 00       	call   c00082a5 <ff_memfree>
c0008230:	83 c4 10             	add    esp,0x10
c0008233:	bb 01 00 00 00       	mov    ebx,0x1
c0008238:	eb 48                	jmp    c0008282 <f_mkfs+0x1116>
c000823a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008242:	75 3e                	jne    c0008282 <f_mkfs+0x1116>
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	55                   	push   ebp
c0008248:	e8 58 00 00 00       	call   c00082a5 <ff_memfree>
c000824d:	83 c4 10             	add    esp,0x10
c0008250:	eb 30                	jmp    c0008282 <f_mkfs+0x1116>
c0008252:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008257:	0f 85 eb fa ff ff    	jne    c0007d48 <f_mkfs+0xbdc>
c000825d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008261:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008267:	0f 86 b8 f9 ff ff    	jbe    c0007c25 <f_mkfs+0xab9>
c000826d:	e9 bf fb ff ff       	jmp    c0007e31 <f_mkfs+0xcc5>
c0008272:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008277:	0f 85 c0 fa ff ff    	jne    c0007d3d <f_mkfs+0xbd1>
c000827d:	e9 af fb ff ff       	jmp    c0007e31 <f_mkfs+0xcc5>
c0008282:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008288:	89 d8                	mov    eax,ebx
c000828a:	5b                   	pop    ebx
c000828b:	5e                   	pop    esi
c000828c:	5f                   	pop    edi
c000828d:	5d                   	pop    ebp
c000828e:	c3                   	ret    

c000828f <ff_memalloc>:
c000828f:	83 ec 0c             	sub    esp,0xc
c0008292:	83 ec 0c             	sub    esp,0xc
c0008295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008299:	e8 98 73 00 00       	call   c000f636 <malloc>
c000829e:	83 c4 10             	add    esp,0x10
c00082a1:	83 c4 0c             	add    esp,0xc
c00082a4:	c3                   	ret    

c00082a5 <ff_memfree>:
c00082a5:	83 ec 0c             	sub    esp,0xc
c00082a8:	83 ec 0c             	sub    esp,0xc
c00082ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082af:	e8 92 73 00 00       	call   c000f646 <free>
c00082b4:	83 c4 10             	add    esp,0x10
c00082b7:	90                   	nop
c00082b8:	83 c4 0c             	add    esp,0xc
c00082bb:	c3                   	ret    

c00082bc <ff_uni2oem>:
c00082bc:	83 ec 14             	sub    esp,0x14
c00082bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082c3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082c7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082ce:	c7 44 24 0c 80 85 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028580
c00082d6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082db:	77 0b                	ja     c00082e8 <ff_uni2oem+0x2c>
c00082dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082e1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082e6:	eb 5b                	jmp    c0008343 <ff_uni2oem+0x87>
c00082e8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082f0:	77 51                	ja     c0008343 <ff_uni2oem+0x87>
c00082f2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082f8:	75 49                	jne    c0008343 <ff_uni2oem+0x87>
c00082fa:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008301:	eb 0b                	jmp    c000830e <ff_uni2oem+0x52>
c0008303:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008308:	40                   	inc    eax
c0008309:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000830e:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008314:	77 1b                	ja     c0008331 <ff_uni2oem+0x75>
c0008316:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000831b:	01 c0                	add    eax,eax
c000831d:	89 c2                	mov    edx,eax
c000831f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008323:	01 d0                	add    eax,edx
c0008325:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008328:	0f b7 c0             	movzx  eax,ax
c000832b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000832f:	75 d2                	jne    c0008303 <ff_uni2oem+0x47>
c0008331:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008336:	83 e8 80             	sub    eax,0xffffff80
c0008339:	25 ff 00 00 00       	and    eax,0xff
c000833e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008343:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008348:	83 c4 14             	add    esp,0x14
c000834b:	c3                   	ret    

c000834c <ff_oem2uni>:
c000834c:	83 ec 18             	sub    esp,0x18
c000834f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008353:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008357:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000835c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008360:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008367:	c7 44 24 10 80 85 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028580
c000836f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008375:	77 0b                	ja     c0008382 <ff_oem2uni+0x36>
c0008377:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000837b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008380:	eb 2d                	jmp    c00083af <ff_oem2uni+0x63>
c0008382:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008388:	75 25                	jne    c00083af <ff_oem2uni+0x63>
c000838a:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008391:	77 1c                	ja     c00083af <ff_oem2uni+0x63>
c0008393:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008398:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000839d:	01 c0                	add    eax,eax
c000839f:	89 c2                	mov    edx,eax
c00083a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083a5:	01 d0                	add    eax,edx
c00083a7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083aa:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00083af:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00083b4:	83 c4 18             	add    esp,0x18
c00083b7:	c3                   	ret    

c00083b8 <ff_wtoupper>:
c00083b8:	83 ec 10             	sub    esp,0x10
c00083bb:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083c3:	0f 87 3e 01 00 00    	ja     c0008507 <ff_wtoupper+0x14f>
c00083c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083cd:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083d2:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083d9:	77 07                	ja     c00083e2 <ff_wtoupper+0x2a>
c00083db:	b8 80 83 02 c0       	mov    eax,0xc0028380
c00083e0:	eb 05                	jmp    c00083e7 <ff_wtoupper+0x2f>
c00083e2:	b8 c0 82 02 c0       	mov    eax,0xc00282c0
c00083e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ef:	8d 50 02             	lea    edx,[eax+0x2]
c00083f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083f6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083f9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083fe:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008404:	0f 84 f4 00 00 00    	je     c00084fe <ff_wtoupper+0x146>
c000840a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000840f:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008414:	0f 82 e4 00 00 00    	jb     c00084fe <ff_wtoupper+0x146>
c000841a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000841e:	8d 50 02             	lea    edx,[eax+0x2]
c0008421:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008425:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008428:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000842d:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008432:	66 c1 e8 08          	shr    ax,0x8
c0008436:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000843b:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008442:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008447:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000844c:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008451:	01 ca                	add    edx,ecx
c0008453:	39 d0                	cmp    eax,edx
c0008455:	0f 8d 86 00 00 00    	jge    c00084e1 <ff_wtoupper+0x129>
c000845b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008460:	83 f8 08             	cmp    eax,0x8
c0008463:	0f 87 94 00 00 00    	ja     c00084fd <ff_wtoupper+0x145>
c0008469:	8b 04 85 80 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7d80]
c0008470:	ff e0                	jmp    eax
c0008472:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008477:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000847c:	29 c2                	sub    edx,eax
c000847e:	89 d0                	mov    eax,edx
c0008480:	01 c0                	add    eax,eax
c0008482:	89 c2                	mov    edx,eax
c0008484:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008488:	01 d0                	add    eax,edx
c000848a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000848d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008492:	eb 4b                	jmp    c00084df <ff_wtoupper+0x127>
c0008494:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008499:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000849d:	83 e0 01             	and    eax,0x1
c00084a0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00084a5:	eb 38                	jmp    c00084df <ff_wtoupper+0x127>
c00084a7:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00084ad:	eb 30                	jmp    c00084df <ff_wtoupper+0x127>
c00084af:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00084b5:	eb 28                	jmp    c00084df <ff_wtoupper+0x127>
c00084b7:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084bd:	eb 20                	jmp    c00084df <ff_wtoupper+0x127>
c00084bf:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084c5:	eb 18                	jmp    c00084df <ff_wtoupper+0x127>
c00084c7:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084cd:	eb 10                	jmp    c00084df <ff_wtoupper+0x127>
c00084cf:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084d5:	eb 08                	jmp    c00084df <ff_wtoupper+0x127>
c00084d7:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084de:	90                   	nop
c00084df:	eb 1c                	jmp    c00084fd <ff_wtoupper+0x145>
c00084e1:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084e7:	0f 85 fe fe ff ff    	jne    c00083eb <ff_wtoupper+0x33>
c00084ed:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084f2:	01 c0                	add    eax,eax
c00084f4:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084f8:	e9 ee fe ff ff       	jmp    c00083eb <ff_wtoupper+0x33>
c00084fd:	90                   	nop
c00084fe:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008503:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008507:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000850b:	83 c4 10             	add    esp,0x10
c000850e:	c3                   	ret    

c000850f <psrc_set_converter>:
c000850f:	56                   	push   esi
c0008510:	89 d6                	mov    esi,edx
c0008512:	53                   	push   ebx
c0008513:	89 c3                	mov    ebx,eax
c0008515:	83 ec 0c             	sub    esp,0xc
c0008518:	52                   	push   edx
c0008519:	50                   	push   eax
c000851a:	e8 6f 55 00 00       	call   c000da8e <sinc_set_converter>
c000851f:	83 c4 10             	add    esp,0x10
c0008522:	85 c0                	test   eax,eax
c0008524:	74 25                	je     c000854b <psrc_set_converter+0x3c>
c0008526:	50                   	push   eax
c0008527:	50                   	push   eax
c0008528:	56                   	push   esi
c0008529:	53                   	push   ebx
c000852a:	e8 17 5d 00 00       	call   c000e246 <zoh_set_converter>
c000852f:	83 c4 10             	add    esp,0x10
c0008532:	85 c0                	test   eax,eax
c0008534:	74 15                	je     c000854b <psrc_set_converter+0x3c>
c0008536:	51                   	push   ecx
c0008537:	51                   	push   ecx
c0008538:	56                   	push   esi
c0008539:	53                   	push   ebx
c000853a:	e8 0f 11 00 00       	call   c000964e <linear_set_converter>
c000853f:	83 c4 10             	add    esp,0x10
c0008542:	ba 0a 00 00 00       	mov    edx,0xa
c0008547:	85 c0                	test   eax,eax
c0008549:	75 02                	jne    c000854d <psrc_set_converter+0x3e>
c000854b:	31 d2                	xor    edx,edx
c000854d:	89 d0                	mov    eax,edx
c000854f:	5a                   	pop    edx
c0008550:	5b                   	pop    ebx
c0008551:	5e                   	pop    esi
c0008552:	c3                   	ret    

c0008553 <src_delete>:
c0008553:	53                   	push   ebx
c0008554:	83 ec 08             	sub    esp,0x8
c0008557:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000855b:	85 db                	test   ebx,ebx
c000855d:	74 29                	je     c0008588 <src_delete+0x35>
c000855f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008562:	85 c0                	test   eax,eax
c0008564:	74 0c                	je     c0008572 <src_delete+0x1f>
c0008566:	83 ec 0c             	sub    esp,0xc
c0008569:	50                   	push   eax
c000856a:	e8 d7 70 00 00       	call   c000f646 <free>
c000856f:	83 c4 10             	add    esp,0x10
c0008572:	50                   	push   eax
c0008573:	6a 3c                	push   0x3c
c0008575:	6a 00                	push   0x0
c0008577:	53                   	push   ebx
c0008578:	e8 59 81 ff ff       	call   c00006d6 <memset>
c000857d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008580:	e8 c1 70 00 00       	call   c000f646 <free>
c0008585:	83 c4 10             	add    esp,0x10
c0008588:	31 c0                	xor    eax,eax
c000858a:	83 c4 08             	add    esp,0x8
c000858d:	5b                   	pop    ebx
c000858e:	c3                   	ret    

c000858f <src_process>:
c000858f:	55                   	push   ebp
c0008590:	57                   	push   edi
c0008591:	56                   	push   esi
c0008592:	53                   	push   ebx
c0008593:	83 ec 1c             	sub    esp,0x1c
c0008596:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000859a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000859e:	85 ed                	test   ebp,ebp
c00085a0:	0f 84 6f 01 00 00    	je     c0008715 <src_process+0x186>
c00085a6:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00085aa:	0f 84 6c 01 00 00    	je     c000871c <src_process+0x18d>
c00085b0:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00085b4:	0f 84 62 01 00 00    	je     c000871c <src_process+0x18d>
c00085ba:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00085c1:	0f 85 5c 01 00 00    	jne    c0008723 <src_process+0x194>
c00085c7:	85 db                	test   ebx,ebx
c00085c9:	0f 84 5b 01 00 00    	je     c000872a <src_process+0x19b>
c00085cf:	8b 33                	mov    esi,DWORD PTR [ebx]
c00085d1:	85 f6                	test   esi,esi
c00085d3:	0f 84 58 01 00 00    	je     c0008731 <src_process+0x1a2>
c00085d9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00085dc:	85 ff                	test   edi,edi
c00085de:	0f 84 4d 01 00 00    	je     c0008731 <src_process+0x1a2>
c00085e4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00085e7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00085ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f2:	68 00 00 70 3f       	push   0x3f700000
c00085f7:	6a 00                	push   0x0
c00085f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008601:	e8 99 ec 01 00       	call   c002729f <__ltdf2>
c0008606:	83 c4 10             	add    esp,0x10
c0008609:	85 c0                	test   eax,eax
c000860b:	0f 88 27 01 00 00    	js     c0008738 <src_process+0x1a9>
c0008611:	68 00 00 70 40       	push   0x40700000
c0008616:	6a 00                	push   0x0
c0008618:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000861c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008620:	e8 5c ec 01 00       	call   c0027281 <__gtdf2>
c0008625:	83 c4 10             	add    esp,0x10
c0008628:	85 c0                	test   eax,eax
c000862a:	0f 8f 08 01 00 00    	jg     c0008738 <src_process+0x1a9>
c0008630:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008634:	79 07                	jns    c000863d <src_process+0xae>
c0008636:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000863d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008640:	85 c0                	test   eax,eax
c0008642:	79 50                	jns    c0008694 <src_process+0x105>
c0008644:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000864b:	39 fe                	cmp    esi,edi
c000864d:	72 37                	jb     c0008686 <src_process+0xf7>
c000864f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008656:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000865d:	68 00 00 70 3f       	push   0x3f700000
c0008662:	6a 00                	push   0x0
c0008664:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008667:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000866a:	e8 30 ec 01 00       	call   c002729f <__ltdf2>
c000866f:	83 c4 10             	add    esp,0x10
c0008672:	85 c0                	test   eax,eax
c0008674:	79 37                	jns    c00086ad <src_process+0x11e>
c0008676:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000867a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000867e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008681:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008684:	eb 27                	jmp    c00086ad <src_process+0x11e>
c0008686:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008689:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000868d:	8d 04 86             	lea    eax,[esi+eax*4]
c0008690:	39 c7                	cmp    edi,eax
c0008692:	eb 0d                	jmp    c00086a1 <src_process+0x112>
c0008694:	39 fe                	cmp    esi,edi
c0008696:	72 ee                	jb     c0008686 <src_process+0xf7>
c0008698:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000869c:	8d 04 87             	lea    eax,[edi+eax*4]
c000869f:	39 c6                	cmp    esi,eax
c00086a1:	73 ac                	jae    c000864f <src_process+0xc0>
c00086a3:	b8 10 00 00 00       	mov    eax,0x10
c00086a8:	e9 90 00 00 00       	jmp    c000873d <src_process+0x1ae>
c00086ad:	83 ec 10             	sub    esp,0x10
c00086b0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00086b3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00086b6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00086b9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00086bc:	e8 e3 e2 01 00       	call   c00269a4 <__subdf3>
c00086c1:	83 c4 18             	add    esp,0x18
c00086c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00086c8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00086cc:	52                   	push   edx
c00086cd:	50                   	push   eax
c00086ce:	e8 5d ed 01 00       	call   c0027430 <fabs>
c00086d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00086db:	83 c4 10             	add    esp,0x10
c00086de:	68 af 03 d2 3c       	push   0x3cd203af
c00086e3:	68 16 56 e7 9e       	push   0x9ee75616
c00086e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086f0:	e8 aa eb 01 00       	call   c002729f <__ltdf2>
c00086f5:	83 c4 10             	add    esp,0x10
c00086f8:	85 c0                	test   eax,eax
c00086fa:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086fe:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008702:	79 05                	jns    c0008709 <src_process+0x17a>
c0008704:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008707:	eb 03                	jmp    c000870c <src_process+0x17d>
c0008709:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c000870c:	83 c4 1c             	add    esp,0x1c
c000870f:	5b                   	pop    ebx
c0008710:	5e                   	pop    esi
c0008711:	5f                   	pop    edi
c0008712:	5d                   	pop    ebp
c0008713:	ff e0                	jmp    eax
c0008715:	b8 02 00 00 00       	mov    eax,0x2
c000871a:	eb 21                	jmp    c000873d <src_process+0x1ae>
c000871c:	b8 07 00 00 00       	mov    eax,0x7
c0008721:	eb 1a                	jmp    c000873d <src_process+0x1ae>
c0008723:	b8 12 00 00 00       	mov    eax,0x12
c0008728:	eb 13                	jmp    c000873d <src_process+0x1ae>
c000872a:	b8 03 00 00 00       	mov    eax,0x3
c000872f:	eb 0c                	jmp    c000873d <src_process+0x1ae>
c0008731:	b8 04 00 00 00       	mov    eax,0x4
c0008736:	eb 05                	jmp    c000873d <src_process+0x1ae>
c0008738:	b8 06 00 00 00       	mov    eax,0x6
c000873d:	83 c4 1c             	add    esp,0x1c
c0008740:	5b                   	pop    ebx
c0008741:	5e                   	pop    esi
c0008742:	5f                   	pop    edi
c0008743:	5d                   	pop    ebp
c0008744:	c3                   	ret    

c0008745 <src_callback_read>:
c0008745:	55                   	push   ebp
c0008746:	57                   	push   edi
c0008747:	56                   	push   esi
c0008748:	53                   	push   ebx
c0008749:	83 ec 3c             	sub    esp,0x3c
c000874c:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008750:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008754:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008758:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c000875c:	85 ed                	test   ebp,ebp
c000875e:	0f 8e 52 01 00 00    	jle    c00088b6 <src_callback_read+0x171>
c0008764:	85 db                	test   ebx,ebx
c0008766:	0f 84 4a 01 00 00    	je     c00088b6 <src_callback_read+0x171>
c000876c:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008773:	74 0c                	je     c0008781 <src_callback_read+0x3c>
c0008775:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c000877c:	e9 35 01 00 00       	jmp    c00088b6 <src_callback_read+0x171>
c0008781:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008785:	75 0c                	jne    c0008793 <src_callback_read+0x4e>
c0008787:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000878e:	e9 23 01 00 00       	jmp    c00088b6 <src_callback_read+0x171>
c0008793:	51                   	push   ecx
c0008794:	6a 24                	push   0x24
c0008796:	6a 00                	push   0x0
c0008798:	8d 44 24 18          	lea    eax,[esp+0x18]
c000879c:	50                   	push   eax
c000879d:	e8 34 7f ff ff       	call   c00006d6 <memset>
c00087a2:	83 c4 10             	add    esp,0x10
c00087a5:	68 00 00 70 3f       	push   0x3f700000
c00087aa:	6a 00                	push   0x0
c00087ac:	57                   	push   edi
c00087ad:	56                   	push   esi
c00087ae:	e8 ec ea 01 00       	call   c002729f <__ltdf2>
c00087b3:	83 c4 10             	add    esp,0x10
c00087b6:	85 c0                	test   eax,eax
c00087b8:	78 3e                	js     c00087f8 <src_callback_read+0xb3>
c00087ba:	68 00 00 70 40       	push   0x40700000
c00087bf:	6a 00                	push   0x0
c00087c1:	57                   	push   edi
c00087c2:	56                   	push   esi
c00087c3:	e8 b9 ea 01 00       	call   c0027281 <__gtdf2>
c00087c8:	83 c4 10             	add    esp,0x10
c00087cb:	85 c0                	test   eax,eax
c00087cd:	7f 29                	jg     c00087f8 <src_callback_read+0xb3>
c00087cf:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00087d3:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00087d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00087db:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00087df:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00087e2:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00087e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087ea:	31 f6                	xor    esi,esi
c00087ec:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087f3:	e9 97 00 00 00       	jmp    c000888f <src_callback_read+0x14a>
c00087f8:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087ff:	e9 b2 00 00 00       	jmp    c00088b6 <src_callback_read+0x171>
c0008804:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008808:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000880c:	52                   	push   edx
c000880d:	52                   	push   edx
c000880e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008812:	50                   	push   eax
c0008813:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008816:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008819:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000881d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008821:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008825:	83 c4 10             	add    esp,0x10
c0008828:	85 c0                	test   eax,eax
c000882a:	75 08                	jne    c0008834 <src_callback_read+0xef>
c000882c:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008834:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c000883b:	50                   	push   eax
c000883c:	50                   	push   eax
c000883d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008841:	50                   	push   eax
c0008842:	53                   	push   ebx
c0008843:	e8 47 fd ff ff       	call   c000858f <src_process>
c0008848:	83 c4 10             	add    esp,0x10
c000884b:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008852:	85 c0                	test   eax,eax
c0008854:	75 49                	jne    c000889f <src_callback_read+0x15a>
c0008856:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000885a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000885d:	89 f9                	mov    ecx,edi
c000885f:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008863:	0f af ca             	imul   ecx,edx
c0008866:	c1 e1 02             	shl    ecx,0x2
c0008869:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c000886d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008871:	0f af d1             	imul   edx,ecx
c0008874:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008878:	c1 e2 02             	shl    edx,0x2
c000887b:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c000887f:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008882:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008887:	74 12                	je     c000889b <src_callback_read+0x156>
c0008889:	39 d5                	cmp    ebp,edx
c000888b:	7e 14                	jle    c00088a1 <src_callback_read+0x15c>
c000888d:	89 d6                	mov    esi,edx
c000888f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008894:	75 9e                	jne    c0008834 <src_callback_read+0xef>
c0008896:	e9 69 ff ff ff       	jmp    c0008804 <src_callback_read+0xbf>
c000889b:	85 c9                	test   ecx,ecx
c000889d:	75 ea                	jne    c0008889 <src_callback_read+0x144>
c000889f:	89 f2                	mov    edx,esi
c00088a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00088a5:	85 c0                	test   eax,eax
c00088a7:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c00088aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00088ae:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00088b1:	74 05                	je     c00088b8 <src_callback_read+0x173>
c00088b3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00088b6:	31 d2                	xor    edx,edx
c00088b8:	83 c4 3c             	add    esp,0x3c
c00088bb:	89 d0                	mov    eax,edx
c00088bd:	5b                   	pop    ebx
c00088be:	5e                   	pop    esi
c00088bf:	5f                   	pop    edi
c00088c0:	5d                   	pop    ebp
c00088c1:	c3                   	ret    

c00088c2 <src_set_ratio>:
c00088c2:	57                   	push   edi
c00088c3:	ba 02 00 00 00       	mov    edx,0x2
c00088c8:	56                   	push   esi
c00088c9:	53                   	push   ebx
c00088ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088ce:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00088d2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00088d6:	85 db                	test   ebx,ebx
c00088d8:	74 4c                	je     c0008926 <src_set_ratio+0x64>
c00088da:	ba 07 00 00 00       	mov    edx,0x7
c00088df:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00088e3:	74 41                	je     c0008926 <src_set_ratio+0x64>
c00088e5:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00088e9:	74 3b                	je     c0008926 <src_set_ratio+0x64>
c00088eb:	68 00 00 70 3f       	push   0x3f700000
c00088f0:	6a 00                	push   0x0
c00088f2:	57                   	push   edi
c00088f3:	56                   	push   esi
c00088f4:	e8 a6 e9 01 00       	call   c002729f <__ltdf2>
c00088f9:	83 c4 10             	add    esp,0x10
c00088fc:	ba 06 00 00 00       	mov    edx,0x6
c0008901:	85 c0                	test   eax,eax
c0008903:	78 21                	js     c0008926 <src_set_ratio+0x64>
c0008905:	68 00 00 70 40       	push   0x40700000
c000890a:	6a 00                	push   0x0
c000890c:	57                   	push   edi
c000890d:	56                   	push   esi
c000890e:	e8 6e e9 01 00       	call   c0027281 <__gtdf2>
c0008913:	83 c4 10             	add    esp,0x10
c0008916:	ba 06 00 00 00       	mov    edx,0x6
c000891b:	85 c0                	test   eax,eax
c000891d:	7f 07                	jg     c0008926 <src_set_ratio+0x64>
c000891f:	89 33                	mov    DWORD PTR [ebx],esi
c0008921:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008924:	31 d2                	xor    edx,edx
c0008926:	5b                   	pop    ebx
c0008927:	89 d0                	mov    eax,edx
c0008929:	5e                   	pop    esi
c000892a:	5f                   	pop    edi
c000892b:	c3                   	ret    

c000892c <src_get_channels>:
c000892c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008930:	b8 02 00 00 00       	mov    eax,0x2
c0008935:	85 d2                	test   edx,edx
c0008937:	74 14                	je     c000894d <src_get_channels+0x21>
c0008939:	b8 07 00 00 00       	mov    eax,0x7
c000893e:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008942:	74 09                	je     c000894d <src_get_channels+0x21>
c0008944:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008948:	74 03                	je     c000894d <src_get_channels+0x21>
c000894a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000894d:	c3                   	ret    

c000894e <src_reset>:
c000894e:	53                   	push   ebx
c000894f:	b8 02 00 00 00       	mov    eax,0x2
c0008954:	83 ec 08             	sub    esp,0x8
c0008957:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000895b:	85 db                	test   ebx,ebx
c000895d:	74 36                	je     c0008995 <src_reset+0x47>
c000895f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008962:	85 c0                	test   eax,eax
c0008964:	74 09                	je     c000896f <src_reset+0x21>
c0008966:	83 ec 0c             	sub    esp,0xc
c0008969:	53                   	push   ebx
c000896a:	ff d0                	call   eax
c000896c:	83 c4 10             	add    esp,0x10
c000896f:	31 c0                	xor    eax,eax
c0008971:	31 d2                	xor    edx,edx
c0008973:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008976:	89 03                	mov    DWORD PTR [ebx],eax
c0008978:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000897b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000897e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008985:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000898c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008993:	31 c0                	xor    eax,eax
c0008995:	83 c4 08             	add    esp,0x8
c0008998:	5b                   	pop    ebx
c0008999:	c3                   	ret    

c000899a <src_new>:
c000899a:	57                   	push   edi
c000899b:	56                   	push   esi
c000899c:	53                   	push   ebx
c000899d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00089a1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00089a5:	85 f6                	test   esi,esi
c00089a7:	74 73                	je     c0008a1c <src_new+0x82>
c00089a9:	85 ff                	test   edi,edi
c00089ab:	7f 08                	jg     c00089b5 <src_new+0x1b>
c00089ad:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c00089b3:	eb 1e                	jmp    c00089d3 <src_new+0x39>
c00089b5:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00089bb:	50                   	push   eax
c00089bc:	50                   	push   eax
c00089bd:	6a 3c                	push   0x3c
c00089bf:	6a 01                	push   0x1
c00089c1:	e8 a0 6c 00 00       	call   c000f666 <calloc>
c00089c6:	83 c4 10             	add    esp,0x10
c00089c9:	89 c3                	mov    ebx,eax
c00089cb:	85 c0                	test   eax,eax
c00089cd:	75 10                	jne    c00089df <src_new+0x45>
c00089cf:	85 f6                	test   esi,esi
c00089d1:	75 04                	jne    c00089d7 <src_new+0x3d>
c00089d3:	31 db                	xor    ebx,ebx
c00089d5:	eb 4b                	jmp    c0008a22 <src_new+0x88>
c00089d7:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00089dd:	eb 43                	jmp    c0008a22 <src_new+0x88>
c00089df:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00089e2:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c00089e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089ed:	e8 1d fb ff ff       	call   c000850f <psrc_set_converter>
c00089f2:	85 c0                	test   eax,eax
c00089f4:	74 18                	je     c0008a0e <src_new+0x74>
c00089f6:	85 f6                	test   esi,esi
c00089f8:	74 06                	je     c0008a00 <src_new+0x66>
c00089fa:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008a00:	83 ec 0c             	sub    esp,0xc
c0008a03:	53                   	push   ebx
c0008a04:	31 db                	xor    ebx,ebx
c0008a06:	e8 3b 6c 00 00       	call   c000f646 <free>
c0008a0b:	83 c4 10             	add    esp,0x10
c0008a0e:	83 ec 0c             	sub    esp,0xc
c0008a11:	53                   	push   ebx
c0008a12:	e8 37 ff ff ff       	call   c000894e <src_reset>
c0008a17:	83 c4 10             	add    esp,0x10
c0008a1a:	eb 06                	jmp    c0008a22 <src_new+0x88>
c0008a1c:	85 ff                	test   edi,edi
c0008a1e:	7f 9b                	jg     c00089bb <src_new+0x21>
c0008a20:	eb b1                	jmp    c00089d3 <src_new+0x39>
c0008a22:	89 d8                	mov    eax,ebx
c0008a24:	5b                   	pop    ebx
c0008a25:	5e                   	pop    esi
c0008a26:	5f                   	pop    edi
c0008a27:	c3                   	ret    

c0008a28 <src_callback_new>:
c0008a28:	56                   	push   esi
c0008a29:	53                   	push   ebx
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008a2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a33:	85 f6                	test   esi,esi
c0008a35:	75 0e                	jne    c0008a45 <src_callback_new+0x1d>
c0008a37:	31 db                	xor    ebx,ebx
c0008a39:	85 c0                	test   eax,eax
c0008a3b:	74 47                	je     c0008a84 <src_callback_new+0x5c>
c0008a3d:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008a43:	eb 3f                	jmp    c0008a84 <src_callback_new+0x5c>
c0008a45:	85 c0                	test   eax,eax
c0008a47:	74 06                	je     c0008a4f <src_callback_new+0x27>
c0008a49:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a4f:	51                   	push   ecx
c0008a50:	50                   	push   eax
c0008a51:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a55:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a59:	e8 3c ff ff ff       	call   c000899a <src_new>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	89 c3                	mov    ebx,eax
c0008a63:	85 c0                	test   eax,eax
c0008a65:	74 1d                	je     c0008a84 <src_callback_new+0x5c>
c0008a67:	83 ec 0c             	sub    esp,0xc
c0008a6a:	50                   	push   eax
c0008a6b:	e8 de fe ff ff       	call   c000894e <src_reset>
c0008a70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a74:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a7b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a7e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a81:	83 c4 10             	add    esp,0x10
c0008a84:	89 d8                	mov    eax,ebx
c0008a86:	5a                   	pop    edx
c0008a87:	5b                   	pop    ebx
c0008a88:	5e                   	pop    esi
c0008a89:	c3                   	ret    

c0008a8a <src_get_name>:
c0008a8a:	53                   	push   ebx
c0008a8b:	83 ec 14             	sub    esp,0x14
c0008a8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a92:	53                   	push   ebx
c0008a93:	e8 d0 4f 00 00       	call   c000da68 <sinc_get_name>
c0008a98:	83 c4 10             	add    esp,0x10
c0008a9b:	85 c0                	test   eax,eax
c0008a9d:	75 1d                	jne    c0008abc <src_get_name+0x32>
c0008a9f:	83 ec 0c             	sub    esp,0xc
c0008aa2:	53                   	push   ebx
c0008aa3:	e8 80 57 00 00       	call   c000e228 <zoh_get_name>
c0008aa8:	83 c4 10             	add    esp,0x10
c0008aab:	85 c0                	test   eax,eax
c0008aad:	75 0d                	jne    c0008abc <src_get_name+0x32>
c0008aaf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ab3:	83 c4 08             	add    esp,0x8
c0008ab6:	5b                   	pop    ebx
c0008ab7:	e9 74 0b 00 00       	jmp    c0009630 <linear_get_name>
c0008abc:	83 c4 08             	add    esp,0x8
c0008abf:	5b                   	pop    ebx
c0008ac0:	c3                   	ret    

c0008ac1 <src_get_description>:
c0008ac1:	53                   	push   ebx
c0008ac2:	83 ec 14             	sub    esp,0x14
c0008ac5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008ac9:	53                   	push   ebx
c0008aca:	e8 ac 4f 00 00       	call   c000da7b <sinc_get_description>
c0008acf:	83 c4 10             	add    esp,0x10
c0008ad2:	85 c0                	test   eax,eax
c0008ad4:	75 1d                	jne    c0008af3 <src_get_description+0x32>
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	53                   	push   ebx
c0008ada:	e8 58 57 00 00       	call   c000e237 <zoh_get_description>
c0008adf:	83 c4 10             	add    esp,0x10
c0008ae2:	85 c0                	test   eax,eax
c0008ae4:	75 0d                	jne    c0008af3 <src_get_description+0x32>
c0008ae6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008aea:	83 c4 08             	add    esp,0x8
c0008aed:	5b                   	pop    ebx
c0008aee:	e9 4c 0b 00 00       	jmp    c000963f <linear_get_description>
c0008af3:	83 c4 08             	add    esp,0x8
c0008af6:	5b                   	pop    ebx
c0008af7:	c3                   	ret    

c0008af8 <src_get_version>:
c0008af8:	b8 80 86 02 c0       	mov    eax,0xc0028680
c0008afd:	c3                   	ret    

c0008afe <src_is_valid_ratio>:
c0008afe:	83 ec 1c             	sub    esp,0x1c
c0008b01:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008b05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008b0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b11:	68 00 00 70 3f       	push   0x3f700000
c0008b16:	6a 00                	push   0x0
c0008b18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b20:	e8 7a e7 01 00       	call   c002729f <__ltdf2>
c0008b25:	83 c4 10             	add    esp,0x10
c0008b28:	31 d2                	xor    edx,edx
c0008b2a:	85 c0                	test   eax,eax
c0008b2c:	78 1e                	js     c0008b4c <src_is_valid_ratio+0x4e>
c0008b2e:	68 00 00 70 40       	push   0x40700000
c0008b33:	6a 00                	push   0x0
c0008b35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b3d:	e8 3f e7 01 00       	call   c0027281 <__gtdf2>
c0008b42:	31 d2                	xor    edx,edx
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	85 c0                	test   eax,eax
c0008b49:	0f 9e c2             	setle  dl
c0008b4c:	89 d0                	mov    eax,edx
c0008b4e:	83 c4 1c             	add    esp,0x1c
c0008b51:	c3                   	ret    

c0008b52 <src_error>:
c0008b52:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b56:	31 c0                	xor    eax,eax
c0008b58:	85 d2                	test   edx,edx
c0008b5a:	74 03                	je     c0008b5f <src_error+0xd>
c0008b5c:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b5f:	c3                   	ret    

c0008b60 <src_strerror>:
c0008b60:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b64:	31 c0                	xor    eax,eax
c0008b66:	83 fa 17             	cmp    edx,0x17
c0008b69:	77 07                	ja     c0008b72 <src_strerror+0x12>
c0008b6b:	8b 04 95 e0 8a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7520]
c0008b72:	c3                   	ret    

c0008b73 <src_simple>:
c0008b73:	56                   	push   esi
c0008b74:	53                   	push   ebx
c0008b75:	83 ec 18             	sub    esp,0x18
c0008b78:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b7c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b80:	50                   	push   eax
c0008b81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b85:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b89:	e8 0c fe ff ff       	call   c000899a <src_new>
c0008b8e:	83 c4 10             	add    esp,0x10
c0008b91:	85 c0                	test   eax,eax
c0008b93:	75 06                	jne    c0008b9b <src_simple+0x28>
c0008b95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b99:	eb 25                	jmp    c0008bc0 <src_simple+0x4d>
c0008b9b:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008ba2:	89 c3                	mov    ebx,eax
c0008ba4:	50                   	push   eax
c0008ba5:	50                   	push   eax
c0008ba6:	56                   	push   esi
c0008ba7:	53                   	push   ebx
c0008ba8:	e8 e2 f9 ff ff       	call   c000858f <src_process>
c0008bad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008bb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bb4:	e8 9a f9 ff ff       	call   c0008553 <src_delete>
c0008bb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bbd:	83 c4 10             	add    esp,0x10
c0008bc0:	83 c4 14             	add    esp,0x14
c0008bc3:	5b                   	pop    ebx
c0008bc4:	5e                   	pop    esi
c0008bc5:	c3                   	ret    

c0008bc6 <src_short_to_float_array>:
c0008bc6:	53                   	push   ebx
c0008bc7:	83 ec 18             	sub    esp,0x18
c0008bca:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bce:	85 db                	test   ebx,ebx
c0008bd0:	74 54                	je     c0008c26 <src_short_to_float_array+0x60>
c0008bd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bd6:	4b                   	dec    ebx
c0008bd7:	83 ec 0c             	sub    esp,0xc
c0008bda:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008bde:	50                   	push   eax
c0008bdf:	e8 4f e4 01 00       	call   c0027033 <__floatsidf>
c0008be4:	83 c4 10             	add    esp,0x10
c0008be7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008beb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008bef:	68 00 00 00 3f       	push   0x3f000000
c0008bf4:	6a 00                	push   0x0
c0008bf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bfe:	e8 cd dd 01 00       	call   c00269d0 <__muldf3>
c0008c03:	59                   	pop    ecx
c0008c04:	59                   	pop    ecx
c0008c05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008c09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008c0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c15:	e8 89 e6 01 00       	call   c00272a3 <__truncdfsf2>
c0008c1a:	83 c4 10             	add    esp,0x10
c0008c1d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008c21:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008c24:	eb a8                	jmp    c0008bce <src_short_to_float_array+0x8>
c0008c26:	83 c4 18             	add    esp,0x18
c0008c29:	5b                   	pop    ebx
c0008c2a:	c3                   	ret    

c0008c2b <src_float_to_short_array>:
c0008c2b:	56                   	push   esi
c0008c2c:	53                   	push   ebx
c0008c2d:	83 ec 14             	sub    esp,0x14
c0008c30:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008c34:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c38:	85 db                	test   ebx,ebx
c0008c3a:	0f 84 a4 00 00 00    	je     c0008ce4 <src_float_to_short_array+0xb9>
c0008c40:	83 ec 0c             	sub    esp,0xc
c0008c43:	4b                   	dec    ebx
c0008c44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008c48:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c4b:	e8 77 e7 01 00       	call   c00273c7 <__extendsfdf2>
c0008c50:	83 c4 10             	add    esp,0x10
c0008c53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c5b:	68 00 00 e0 41       	push   0x41e00000
c0008c60:	6a 00                	push   0x0
c0008c62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c6a:	e8 61 dd 01 00       	call   c00269d0 <__muldf3>
c0008c6f:	83 c4 10             	add    esp,0x10
c0008c72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c7a:	68 ff ff df 41       	push   0x41dfffff
c0008c7f:	68 00 00 c0 ff       	push   0xffc00000
c0008c84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c8c:	e8 0c e6 01 00       	call   c002729d <__gedf2>
c0008c91:	83 c4 10             	add    esp,0x10
c0008c94:	85 c0                	test   eax,eax
c0008c96:	78 08                	js     c0008ca0 <src_float_to_short_array+0x75>
c0008c98:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c9e:	eb 98                	jmp    c0008c38 <src_float_to_short_array+0xd>
c0008ca0:	68 00 00 e0 c1       	push   0xc1e00000
c0008ca5:	6a 00                	push   0x0
c0008ca7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008caf:	e8 ed e5 01 00       	call   c00272a1 <__ledf2>
c0008cb4:	83 c4 10             	add    esp,0x10
c0008cb7:	85 c0                	test   eax,eax
c0008cb9:	7f 0b                	jg     c0008cc6 <src_float_to_short_array+0x9b>
c0008cbb:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008cc1:	e9 72 ff ff ff       	jmp    c0008c38 <src_float_to_short_array+0xd>
c0008cc6:	50                   	push   eax
c0008cc7:	50                   	push   eax
c0008cc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ccc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd0:	e8 7b e7 01 00       	call   c0027450 <lrint>
c0008cd5:	83 c4 10             	add    esp,0x10
c0008cd8:	c1 f8 10             	sar    eax,0x10
c0008cdb:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008cdf:	e9 54 ff ff ff       	jmp    c0008c38 <src_float_to_short_array+0xd>
c0008ce4:	83 c4 14             	add    esp,0x14
c0008ce7:	5b                   	pop    ebx
c0008ce8:	5e                   	pop    esi
c0008ce9:	c3                   	ret    

c0008cea <src_int_to_float_array>:
c0008cea:	53                   	push   ebx
c0008ceb:	83 ec 18             	sub    esp,0x18
c0008cee:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008cf2:	85 db                	test   ebx,ebx
c0008cf4:	74 52                	je     c0008d48 <src_int_to_float_array+0x5e>
c0008cf6:	83 ec 0c             	sub    esp,0xc
c0008cf9:	4b                   	dec    ebx
c0008cfa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cfe:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d01:	e8 2d e3 01 00       	call   c0027033 <__floatsidf>
c0008d06:	83 c4 10             	add    esp,0x10
c0008d09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d11:	68 00 00 00 3e       	push   0x3e000000
c0008d16:	6a 00                	push   0x0
c0008d18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d20:	e8 ab dc 01 00       	call   c00269d0 <__muldf3>
c0008d25:	59                   	pop    ecx
c0008d26:	59                   	pop    ecx
c0008d27:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008d2b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008d2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d37:	e8 67 e5 01 00       	call   c00272a3 <__truncdfsf2>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d43:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008d46:	eb aa                	jmp    c0008cf2 <src_int_to_float_array+0x8>
c0008d48:	83 c4 18             	add    esp,0x18
c0008d4b:	5b                   	pop    ebx
c0008d4c:	c3                   	ret    

c0008d4d <src_float_to_int_array>:
c0008d4d:	56                   	push   esi
c0008d4e:	53                   	push   ebx
c0008d4f:	83 ec 14             	sub    esp,0x14
c0008d52:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d56:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d5a:	85 db                	test   ebx,ebx
c0008d5c:	0f 84 a2 00 00 00    	je     c0008e04 <src_float_to_int_array+0xb7>
c0008d62:	83 ec 0c             	sub    esp,0xc
c0008d65:	4b                   	dec    ebx
c0008d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d6a:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d6d:	e8 55 e6 01 00       	call   c00273c7 <__extendsfdf2>
c0008d72:	83 c4 10             	add    esp,0x10
c0008d75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d7d:	68 00 00 e0 41       	push   0x41e00000
c0008d82:	6a 00                	push   0x0
c0008d84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d8c:	e8 3f dc 01 00       	call   c00269d0 <__muldf3>
c0008d91:	83 c4 10             	add    esp,0x10
c0008d94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d98:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d9c:	68 ff ff df 41       	push   0x41dfffff
c0008da1:	68 00 00 c0 ff       	push   0xffc00000
c0008da6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008daa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dae:	e8 ea e4 01 00       	call   c002729d <__gedf2>
c0008db3:	83 c4 10             	add    esp,0x10
c0008db6:	85 c0                	test   eax,eax
c0008db8:	78 09                	js     c0008dc3 <src_float_to_int_array+0x76>
c0008dba:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008dc1:	eb 97                	jmp    c0008d5a <src_float_to_int_array+0xd>
c0008dc3:	68 00 00 e0 c1       	push   0xc1e00000
c0008dc8:	6a 00                	push   0x0
c0008dca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dd2:	e8 ca e4 01 00       	call   c00272a1 <__ledf2>
c0008dd7:	83 c4 10             	add    esp,0x10
c0008dda:	85 c0                	test   eax,eax
c0008ddc:	7f 0c                	jg     c0008dea <src_float_to_int_array+0x9d>
c0008dde:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008de5:	e9 70 ff ff ff       	jmp    c0008d5a <src_float_to_int_array+0xd>
c0008dea:	50                   	push   eax
c0008deb:	50                   	push   eax
c0008dec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008df0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008df4:	e8 57 e6 01 00       	call   c0027450 <lrint>
c0008df9:	83 c4 10             	add    esp,0x10
c0008dfc:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008dff:	e9 56 ff ff ff       	jmp    c0008d5a <src_float_to_int_array+0xd>
c0008e04:	83 c4 14             	add    esp,0x14
c0008e07:	5b                   	pop    ebx
c0008e08:	5e                   	pop    esi
c0008e09:	c3                   	ret    

c0008e0a <linear_vari_process>:
c0008e0a:	55                   	push   ebp
c0008e0b:	31 d2                	xor    edx,edx
c0008e0d:	57                   	push   edi
c0008e0e:	56                   	push   esi
c0008e0f:	53                   	push   ebx
c0008e10:	83 ec 3c             	sub    esp,0x3c
c0008e13:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008e17:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008e1b:	0f 8e d3 07 00 00    	jle    c00095f4 <linear_vari_process+0x7ea>
c0008e21:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e25:	ba 05 00 00 00       	mov    edx,0x5
c0008e2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008e2d:	85 db                	test   ebx,ebx
c0008e2f:	0f 84 bf 07 00 00    	je     c00095f4 <linear_vari_process+0x7ea>
c0008e35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008e38:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008e3c:	74 19                	je     c0008e57 <linear_vari_process+0x4d>
c0008e3e:	31 d2                	xor    edx,edx
c0008e40:	39 c2                	cmp    edx,eax
c0008e42:	7d 0c                	jge    c0008e50 <linear_vari_process+0x46>
c0008e44:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e46:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008e49:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e4d:	42                   	inc    edx
c0008e4e:	eb f0                	jmp    c0008e40 <linear_vari_process+0x36>
c0008e50:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e57:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e5a:	0f af d0             	imul   edx,eax
c0008e5d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e60:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e64:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e6b:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e6e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e75:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e79:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e7e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e86:	68 00 00 70 3f       	push   0x3f700000
c0008e8b:	6a 00                	push   0x0
c0008e8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e95:	e8 05 e4 01 00       	call   c002729f <__ltdf2>
c0008e9a:	83 c4 10             	add    esp,0x10
c0008e9d:	ba 16 00 00 00       	mov    edx,0x16
c0008ea2:	85 c0                	test   eax,eax
c0008ea4:	0f 88 4a 07 00 00    	js     c00095f4 <linear_vari_process+0x7ea>
c0008eaa:	68 00 00 70 40       	push   0x40700000
c0008eaf:	6a 00                	push   0x0
c0008eb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008eb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008eb9:	e8 c3 e3 01 00       	call   c0027281 <__gtdf2>
c0008ebe:	83 c4 10             	add    esp,0x10
c0008ec1:	ba 16 00 00 00       	mov    edx,0x16
c0008ec6:	85 c0                	test   eax,eax
c0008ec8:	0f 8f 26 07 00 00    	jg     c00095f4 <linear_vari_process+0x7ea>
c0008ece:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ed2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008ed5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008ed8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008edc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ee0:	68 00 00 f0 3f       	push   0x3ff00000
c0008ee5:	6a 00                	push   0x0
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eef:	e8 ab e3 01 00       	call   c002729f <__ltdf2>
c0008ef4:	83 c4 10             	add    esp,0x10
c0008ef7:	85 c0                	test   eax,eax
c0008ef9:	0f 89 89 02 00 00    	jns    c0009188 <linear_vari_process+0x37e>
c0008eff:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008f02:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008f05:	0f 8d 7d 02 00 00    	jge    c0009188 <linear_vari_process+0x37e>
c0008f0b:	83 ec 0c             	sub    esp,0xc
c0008f0e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008f11:	e8 1d e1 01 00       	call   c0027033 <__floatsidf>
c0008f16:	83 c4 10             	add    esp,0x10
c0008f19:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008f20:	68 00 00 f0 3f       	push   0x3ff00000
c0008f25:	6a 00                	push   0x0
c0008f27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f2f:	e8 1f d4 01 00       	call   c0026353 <__adddf3>
c0008f34:	83 c4 10             	add    esp,0x10
c0008f37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f3f:	52                   	push   edx
c0008f40:	50                   	push   eax
c0008f41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f45:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f49:	e8 82 da 01 00       	call   c00269d0 <__muldf3>
c0008f4e:	5d                   	pop    ebp
c0008f4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f53:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f57:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f5a:	e8 d4 e0 01 00       	call   c0027033 <__floatsidf>
c0008f5f:	83 c4 10             	add    esp,0x10
c0008f62:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f66:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f6a:	52                   	push   edx
c0008f6b:	50                   	push   eax
c0008f6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f74:	e8 da d3 01 00       	call   c0026353 <__adddf3>
c0008f79:	59                   	pop    ecx
c0008f7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f82:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f85:	e8 a9 e0 01 00       	call   c0027033 <__floatsidf>
c0008f8a:	83 c4 10             	add    esp,0x10
c0008f8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f95:	52                   	push   edx
c0008f96:	50                   	push   eax
c0008f97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f9f:	e8 f9 e2 01 00       	call   c002729d <__gedf2>
c0008fa4:	83 c4 10             	add    esp,0x10
c0008fa7:	85 c0                	test   eax,eax
c0008fa9:	0f 89 d9 01 00 00    	jns    c0009188 <linear_vari_process+0x37e>
c0008faf:	85 ff                	test   edi,edi
c0008fb1:	0f 8e f4 00 00 00    	jle    c00090ab <linear_vari_process+0x2a1>
c0008fb7:	83 ec 10             	sub    esp,0x10
c0008fba:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fbd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fc0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008fc4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008fc7:	ff 30                	push   DWORD PTR [eax]
c0008fc9:	e8 d6 d9 01 00       	call   c00269a4 <__subdf3>
c0008fce:	83 c4 18             	add    esp,0x18
c0008fd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fd5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fd9:	52                   	push   edx
c0008fda:	50                   	push   eax
c0008fdb:	e8 50 e4 01 00       	call   c0027430 <fabs>
c0008fe0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fe4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008fe8:	83 c4 10             	add    esp,0x10
c0008feb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008ff0:	68 23 42 92 0c       	push   0xc924223
c0008ff5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008ff9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008ffd:	e8 7f e2 01 00       	call   c0027281 <__gtdf2>
c0009002:	83 c4 10             	add    esp,0x10
c0009005:	85 c0                	test   eax,eax
c0009007:	0f 8e 9e 00 00 00    	jle    c00090ab <linear_vari_process+0x2a1>
c000900d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009011:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009014:	8b 00                	mov    eax,DWORD PTR [eax]
c0009016:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000901a:	89 04 24             	mov    DWORD PTR [esp],eax
c000901d:	52                   	push   edx
c000901e:	50                   	push   eax
c000901f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009022:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009025:	e8 7a d9 01 00       	call   c00269a4 <__subdf3>
c000902a:	59                   	pop    ecx
c000902b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000902f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009033:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009036:	e8 f8 df 01 00       	call   c0027033 <__floatsidf>
c000903b:	83 c4 10             	add    esp,0x10
c000903e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009042:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009046:	52                   	push   edx
c0009047:	50                   	push   eax
c0009048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000904c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009050:	e8 7b d9 01 00       	call   c00269d0 <__muldf3>
c0009055:	5f                   	pop    edi
c0009056:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000905a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000905e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009061:	e8 cd df 01 00       	call   c0027033 <__floatsidf>
c0009066:	83 c4 10             	add    esp,0x10
c0009069:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000906d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009071:	52                   	push   edx
c0009072:	50                   	push   eax
c0009073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009077:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000907b:	e8 34 dc 01 00       	call   c0026cb4 <__divdf3>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009087:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000908b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000908f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009093:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009097:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909b:	e8 b3 d2 01 00       	call   c0026353 <__adddf3>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00090a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00090ab:	31 ff                	xor    edi,edi
c00090ad:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00090b0:	0f 8e 9d 00 00 00    	jle    c0009153 <linear_vari_process+0x349>
c00090b6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00090b9:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00090bd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00090c0:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00090c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090c7:	8b 06                	mov    eax,DWORD PTR [esi]
c00090c9:	52                   	push   edx
c00090ca:	52                   	push   edx
c00090cb:	55                   	push   ebp
c00090cc:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00090cf:	47                   	inc    edi
c00090d0:	e8 13 cc 01 00       	call   c0025ce8 <__subsf3>
c00090d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00090d8:	e8 ea e2 01 00       	call   c00273c7 <__extendsfdf2>
c00090dd:	83 c4 10             	add    esp,0x10
c00090e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090f8:	e8 d3 d8 01 00       	call   c00269d0 <__muldf3>
c00090fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009108:	e8 ba e2 01 00       	call   c00273c7 <__extendsfdf2>
c000910d:	83 c4 10             	add    esp,0x10
c0009110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009118:	52                   	push   edx
c0009119:	50                   	push   eax
c000911a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000911e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009122:	e8 2c d2 01 00       	call   c0026353 <__adddf3>
c0009127:	59                   	pop    ecx
c0009128:	5d                   	pop    ebp
c0009129:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000912d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009131:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009135:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009139:	e8 65 e1 01 00       	call   c00272a3 <__truncdfsf2>
c000913e:	83 c4 10             	add    esp,0x10
c0009141:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009144:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009148:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000914b:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000914e:	e9 5a ff ff ff       	jmp    c00090ad <linear_vari_process+0x2a3>
c0009153:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009157:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000915b:	68 00 00 f0 3f       	push   0x3ff00000
c0009160:	6a 00                	push   0x0
c0009162:	e8 4d db 01 00       	call   c0026cb4 <__divdf3>
c0009167:	83 c4 10             	add    esp,0x10
c000916a:	89 04 24             	mov    DWORD PTR [esp],eax
c000916d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009171:	52                   	push   edx
c0009172:	50                   	push   eax
c0009173:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009177:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000917b:	e8 d3 d1 01 00       	call   c0026353 <__adddf3>
c0009180:	83 c4 10             	add    esp,0x10
c0009183:	e9 50 fd ff ff       	jmp    c0008ed8 <linear_vari_process+0xce>
c0009188:	50                   	push   eax
c0009189:	50                   	push   eax
c000918a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000918e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009192:	e8 b9 e2 01 00       	call   c0027450 <lrint>
c0009197:	83 ec 0c             	sub    esp,0xc
c000919a:	50                   	push   eax
c000919b:	e8 93 de 01 00       	call   c0027033 <__floatsidf>
c00091a0:	83 c4 10             	add    esp,0x10
c00091a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ab:	52                   	push   edx
c00091ac:	50                   	push   eax
c00091ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b5:	e8 ea d7 01 00       	call   c00269a4 <__subdf3>
c00091ba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00091be:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091c2:	83 c4 20             	add    esp,0x20
c00091c5:	6a 00                	push   0x0
c00091c7:	6a 00                	push   0x0
c00091c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091d1:	e8 c9 e0 01 00       	call   c002729f <__ltdf2>
c00091d6:	83 c4 10             	add    esp,0x10
c00091d9:	85 c0                	test   eax,eax
c00091db:	79 1e                	jns    c00091fb <linear_vari_process+0x3f1>
c00091dd:	68 00 00 f0 3f       	push   0x3ff00000
c00091e2:	6a 00                	push   0x0
c00091e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091ec:	e8 62 d1 01 00       	call   c0026353 <__adddf3>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00091f7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091fb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091fe:	83 ec 10             	sub    esp,0x10
c0009201:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009205:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009209:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000920d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009211:	e8 8e d7 01 00       	call   c00269a4 <__subdf3>
c0009216:	83 c4 18             	add    esp,0x18
c0009219:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000921d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009221:	52                   	push   edx
c0009222:	50                   	push   eax
c0009223:	e8 28 e2 01 00       	call   c0027450 <lrint>
c0009228:	83 c4 10             	add    esp,0x10
c000922b:	0f af f8             	imul   edi,eax
c000922e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009231:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009234:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009237:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000923a:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000923d:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009241:	0f 8d 13 03 00 00    	jge    c000955a <linear_vari_process+0x750>
c0009247:	83 ec 0c             	sub    esp,0xc
c000924a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000924d:	e8 e1 dd 01 00       	call   c0027033 <__floatsidf>
c0009252:	83 c4 10             	add    esp,0x10
c0009255:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009259:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000925d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009261:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009265:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009269:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000926d:	e8 5e d7 01 00       	call   c00269d0 <__muldf3>
c0009272:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009275:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009279:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000927d:	e8 b1 dd 01 00       	call   c0027033 <__floatsidf>
c0009282:	83 c4 10             	add    esp,0x10
c0009285:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009289:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000928d:	52                   	push   edx
c000928e:	50                   	push   eax
c000928f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009293:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009297:	e8 b7 d0 01 00       	call   c0026353 <__adddf3>
c000929c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000929f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092a7:	e8 87 dd 01 00       	call   c0027033 <__floatsidf>
c00092ac:	83 c4 10             	add    esp,0x10
c00092af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b7:	52                   	push   edx
c00092b8:	50                   	push   eax
c00092b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092c1:	e8 d9 df 01 00       	call   c002729f <__ltdf2>
c00092c6:	83 c4 10             	add    esp,0x10
c00092c9:	85 c0                	test   eax,eax
c00092cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00092cf:	0f 89 85 02 00 00    	jns    c000955a <linear_vari_process+0x750>
c00092d5:	85 c9                	test   ecx,ecx
c00092d7:	0f 8e f5 00 00 00    	jle    c00093d2 <linear_vari_process+0x5c8>
c00092dd:	83 ec 10             	sub    esp,0x10
c00092e0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092e3:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092e6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00092ea:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092ed:	ff 30                	push   DWORD PTR [eax]
c00092ef:	e8 b0 d6 01 00       	call   c00269a4 <__subdf3>
c00092f4:	83 c4 18             	add    esp,0x18
c00092f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092fb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092ff:	52                   	push   edx
c0009300:	50                   	push   eax
c0009301:	e8 2a e1 01 00       	call   c0027430 <fabs>
c0009306:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000930a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000930e:	83 c4 10             	add    esp,0x10
c0009311:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009316:	68 23 42 92 0c       	push   0xc924223
c000931b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009323:	e8 59 df 01 00       	call   c0027281 <__gtdf2>
c0009328:	83 c4 10             	add    esp,0x10
c000932b:	85 c0                	test   eax,eax
c000932d:	0f 8e 9f 00 00 00    	jle    c00093d2 <linear_vari_process+0x5c8>
c0009333:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009337:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000933a:	8b 00                	mov    eax,DWORD PTR [eax]
c000933c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009340:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009344:	52                   	push   edx
c0009345:	50                   	push   eax
c0009346:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009349:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000934c:	e8 53 d6 01 00       	call   c00269a4 <__subdf3>
c0009351:	5f                   	pop    edi
c0009352:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009356:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000935a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000935d:	e8 d1 dc 01 00       	call   c0027033 <__floatsidf>
c0009362:	83 c4 10             	add    esp,0x10
c0009365:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009369:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000936d:	52                   	push   edx
c000936e:	50                   	push   eax
c000936f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009373:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009377:	e8 54 d6 01 00       	call   c00269d0 <__muldf3>
c000937c:	5d                   	pop    ebp
c000937d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009381:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009385:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009388:	e8 a6 dc 01 00       	call   c0027033 <__floatsidf>
c000938d:	83 c4 10             	add    esp,0x10
c0009390:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009394:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009398:	52                   	push   edx
c0009399:	50                   	push   eax
c000939a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000939e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093a2:	e8 0d d9 01 00       	call   c0026cb4 <__divdf3>
c00093a7:	83 c4 10             	add    esp,0x10
c00093aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093c2:	e8 8c cf 01 00       	call   c0026353 <__adddf3>
c00093c7:	83 c4 10             	add    esp,0x10
c00093ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093d2:	31 ff                	xor    edi,edi
c00093d4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00093d7:	39 f8                	cmp    eax,edi
c00093d9:	0f 8e ac 00 00 00    	jle    c000948b <linear_vari_process+0x681>
c00093df:	8b 16                	mov    edx,DWORD PTR [esi]
c00093e1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00093e4:	29 c1                	sub    ecx,eax
c00093e6:	89 c8                	mov    eax,ecx
c00093e8:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093eb:	01 f8                	add    eax,edi
c00093ed:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093f1:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093f4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093fe:	51                   	push   ecx
c00093ff:	01 f8                	add    eax,edi
c0009401:	51                   	push   ecx
c0009402:	47                   	inc    edi
c0009403:	55                   	push   ebp
c0009404:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009407:	e8 dc c8 01 00       	call   c0025ce8 <__subsf3>
c000940c:	89 04 24             	mov    DWORD PTR [esp],eax
c000940f:	e8 b3 df 01 00       	call   c00273c7 <__extendsfdf2>
c0009414:	83 c4 10             	add    esp,0x10
c0009417:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000941b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000941f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009423:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009427:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000942b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000942f:	e8 9c d5 01 00       	call   c00269d0 <__muldf3>
c0009434:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009437:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000943b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000943f:	e8 83 df 01 00       	call   c00273c7 <__extendsfdf2>
c0009444:	83 c4 10             	add    esp,0x10
c0009447:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000944b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000944f:	52                   	push   edx
c0009450:	50                   	push   eax
c0009451:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009455:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009459:	e8 f5 ce 01 00       	call   c0026353 <__adddf3>
c000945e:	5d                   	pop    ebp
c000945f:	59                   	pop    ecx
c0009460:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009464:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009468:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000946c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009470:	e8 2e de 01 00       	call   c00272a3 <__truncdfsf2>
c0009475:	83 c4 10             	add    esp,0x10
c0009478:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000947c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009480:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009483:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009486:	e9 49 ff ff ff       	jmp    c00093d4 <linear_vari_process+0x5ca>
c000948b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009493:	68 00 00 f0 3f       	push   0x3ff00000
c0009498:	6a 00                	push   0x0
c000949a:	e8 15 d8 01 00       	call   c0026cb4 <__divdf3>
c000949f:	83 c4 10             	add    esp,0x10
c00094a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00094a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00094aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ba:	e8 94 ce 01 00       	call   c0026353 <__adddf3>
c00094bf:	59                   	pop    ecx
c00094c0:	5f                   	pop    edi
c00094c1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094d1:	e8 7a df 01 00       	call   c0027450 <lrint>
c00094d6:	83 ec 0c             	sub    esp,0xc
c00094d9:	50                   	push   eax
c00094da:	e8 54 db 01 00       	call   c0027033 <__floatsidf>
c00094df:	83 c4 10             	add    esp,0x10
c00094e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ea:	52                   	push   edx
c00094eb:	50                   	push   eax
c00094ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f4:	e8 ab d4 01 00       	call   c00269a4 <__subdf3>
c00094f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009501:	83 c4 20             	add    esp,0x20
c0009504:	6a 00                	push   0x0
c0009506:	6a 00                	push   0x0
c0009508:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000950c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009510:	e8 8a dd 01 00       	call   c002729f <__ltdf2>
c0009515:	83 c4 10             	add    esp,0x10
c0009518:	85 c0                	test   eax,eax
c000951a:	79 1e                	jns    c000953a <linear_vari_process+0x730>
c000951c:	68 00 00 f0 3f       	push   0x3ff00000
c0009521:	6a 00                	push   0x0
c0009523:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009527:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000952b:	e8 23 ce 01 00       	call   c0026353 <__adddf3>
c0009530:	83 c4 10             	add    esp,0x10
c0009533:	89 04 24             	mov    DWORD PTR [esp],eax
c0009536:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000953a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000953d:	83 ec 10             	sub    esp,0x10
c0009540:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009544:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009548:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000954c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009550:	e8 4f d4 01 00       	call   c00269a4 <__subdf3>
c0009555:	e9 bc fc ff ff       	jmp    c0009216 <linear_vari_process+0x40c>
c000955a:	39 fd                	cmp    ebp,edi
c000955c:	7d 38                	jge    c0009596 <linear_vari_process+0x78c>
c000955e:	83 ec 0c             	sub    esp,0xc
c0009561:	89 f8                	mov    eax,edi
c0009563:	29 e8                	sub    eax,ebp
c0009565:	99                   	cdq    
c0009566:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009569:	50                   	push   eax
c000956a:	e8 c4 da 01 00       	call   c0027033 <__floatsidf>
c000956f:	83 c4 10             	add    esp,0x10
c0009572:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009576:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000957a:	52                   	push   edx
c000957b:	50                   	push   eax
c000957c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009580:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009584:	e8 ca cd 01 00       	call   c0026353 <__adddf3>
c0009589:	83 c4 10             	add    esp,0x10
c000958c:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000958f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009592:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009596:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000959a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000959d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00095a1:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00095a4:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00095a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095aa:	85 c0                	test   eax,eax
c00095ac:	7f 29                	jg     c00095d7 <linear_vari_process+0x7cd>
c00095ae:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00095b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00095ba:	89 01                	mov    DWORD PTR [ecx],eax
c00095bc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00095bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c2:	99                   	cdq    
c00095c3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095c6:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00095c9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095cc:	99                   	cdq    
c00095cd:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095d0:	31 d2                	xor    edx,edx
c00095d2:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00095d5:	eb 1d                	jmp    c00095f4 <linear_vari_process+0x7ea>
c00095d7:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00095da:	31 d2                	xor    edx,edx
c00095dc:	29 c8                	sub    eax,ecx
c00095de:	c1 e0 02             	shl    eax,0x2
c00095e1:	39 d1                	cmp    ecx,edx
c00095e3:	7e c9                	jle    c00095ae <linear_vari_process+0x7a4>
c00095e5:	8b 3e                	mov    edi,DWORD PTR [esi]
c00095e7:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00095ea:	83 c0 04             	add    eax,0x4
c00095ed:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095f1:	42                   	inc    edx
c00095f2:	eb ed                	jmp    c00095e1 <linear_vari_process+0x7d7>
c00095f4:	83 c4 3c             	add    esp,0x3c
c00095f7:	89 d0                	mov    eax,edx
c00095f9:	5b                   	pop    ebx
c00095fa:	5e                   	pop    esi
c00095fb:	5f                   	pop    edi
c00095fc:	5d                   	pop    ebp
c00095fd:	c3                   	ret    

c00095fe <linear_reset>:
c00095fe:	83 ec 0c             	sub    esp,0xc
c0009601:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009605:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009608:	85 c0                	test   eax,eax
c000960a:	74 20                	je     c000962c <linear_reset+0x2e>
c000960c:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000960f:	83 c0 1c             	add    eax,0x1c
c0009612:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009615:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000961c:	c1 e2 02             	shl    edx,0x2
c000961f:	51                   	push   ecx
c0009620:	52                   	push   edx
c0009621:	6a 00                	push   0x0
c0009623:	50                   	push   eax
c0009624:	e8 ad 70 ff ff       	call   c00006d6 <memset>
c0009629:	83 c4 10             	add    esp,0x10
c000962c:	83 c4 0c             	add    esp,0xc
c000962f:	c3                   	ret    

c0009630 <linear_get_name>:
c0009630:	31 c0                	xor    eax,eax
c0009632:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009637:	75 05                	jne    c000963e <linear_get_name+0xe>
c0009639:	b8 40 8b 02 c0       	mov    eax,0xc0028b40
c000963e:	c3                   	ret    

c000963f <linear_get_description>:
c000963f:	31 c0                	xor    eax,eax
c0009641:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009646:	75 05                	jne    c000964d <linear_get_description+0xe>
c0009648:	b8 54 8b 02 c0       	mov    eax,0xc0028b54
c000964d:	c3                   	ret    

c000964e <linear_set_converter>:
c000964e:	53                   	push   ebx
c000964f:	b8 0a 00 00 00       	mov    eax,0xa
c0009654:	83 ec 08             	sub    esp,0x8
c0009657:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000965b:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009660:	75 6e                	jne    c00096d0 <linear_set_converter+0x82>
c0009662:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009665:	85 c0                	test   eax,eax
c0009667:	74 13                	je     c000967c <linear_set_converter+0x2e>
c0009669:	83 ec 0c             	sub    esp,0xc
c000966c:	50                   	push   eax
c000966d:	e8 d4 5f 00 00       	call   c000f646 <free>
c0009672:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009679:	83 c4 10             	add    esp,0x10
c000967c:	50                   	push   eax
c000967d:	50                   	push   eax
c000967e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009681:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009688:	50                   	push   eax
c0009689:	6a 01                	push   0x1
c000968b:	e8 d6 5f 00 00       	call   c000f666 <calloc>
c0009690:	83 c4 10             	add    esp,0x10
c0009693:	89 c2                	mov    edx,eax
c0009695:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009698:	85 d2                	test   edx,edx
c000969a:	b8 01 00 00 00       	mov    eax,0x1
c000969f:	74 2f                	je     c00096d0 <linear_set_converter+0x82>
c00096a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00096a4:	83 ec 0c             	sub    esp,0xc
c00096a7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00096aa:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00096b0:	c7 43 24 0a 8e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008e0a
c00096b7:	c7 43 20 0a 8e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008e0a
c00096be:	c7 43 28 fe 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095fe
c00096c5:	53                   	push   ebx
c00096c6:	e8 33 ff ff ff       	call   c00095fe <linear_reset>
c00096cb:	83 c4 10             	add    esp,0x10
c00096ce:	31 c0                	xor    eax,eax
c00096d0:	83 c4 08             	add    esp,0x8
c00096d3:	5b                   	pop    ebx
c00096d4:	c3                   	ret    

c00096d5 <int_to_fp>:
c00096d5:	c1 e0 0c             	shl    eax,0xc
c00096d8:	c3                   	ret    

c00096d9 <fp_to_int>:
c00096d9:	c1 f8 0c             	sar    eax,0xc
c00096dc:	c3                   	ret    

c00096dd <fp_fraction_part>:
c00096dd:	25 ff 0f 00 00       	and    eax,0xfff
c00096e2:	c3                   	ret    

c00096e3 <fp_to_double>:
c00096e3:	83 ec 1c             	sub    esp,0x1c
c00096e6:	e8 f2 ff ff ff       	call   c00096dd <fp_fraction_part>
c00096eb:	83 ec 0c             	sub    esp,0xc
c00096ee:	50                   	push   eax
c00096ef:	e8 3f d9 01 00       	call   c0027033 <__floatsidf>
c00096f4:	83 c4 10             	add    esp,0x10
c00096f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096ff:	68 00 00 30 3f       	push   0x3f300000
c0009704:	6a 00                	push   0x0
c0009706:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970e:	e8 bd d2 01 00       	call   c00269d0 <__muldf3>
c0009713:	83 c4 2c             	add    esp,0x2c
c0009716:	c3                   	ret    

c0009717 <calc_output_single>:
c0009717:	55                   	push   ebp
c0009718:	57                   	push   edi
c0009719:	56                   	push   esi
c000971a:	89 c6                	mov    esi,eax
c000971c:	53                   	push   ebx
c000971d:	89 d3                	mov    ebx,edx
c000971f:	83 ec 4c             	sub    esp,0x4c
c0009722:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009726:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009729:	e8 a7 ff ff ff       	call   c00096d5 <int_to_fp>
c000972e:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009731:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009735:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009739:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000973d:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009740:	99                   	cdq    
c0009741:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009749:	f7 fb                	idiv   ebx
c000974b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009753:	89 da                	mov    edx,ebx
c0009755:	0f af d0             	imul   edx,eax
c0009758:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000975c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009760:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009764:	29 c2                	sub    edx,eax
c0009766:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000976d:	83 c5 04             	add    ebp,0x4
c0009770:	e8 6e ff ff ff       	call   c00096e3 <fp_to_double>
c0009775:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009779:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	e8 53 ff ff ff       	call   c00096d9 <fp_to_int>
c0009786:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009789:	52                   	push   edx
c000978a:	52                   	push   edx
c000978b:	51                   	push   ecx
c000978c:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009790:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009794:	e8 4f c5 01 00       	call   c0025ce8 <__subsf3>
c0009799:	89 04 24             	mov    DWORD PTR [esp],eax
c000979c:	e8 26 dc 01 00       	call   c00273c7 <__extendsfdf2>
c00097a1:	83 c4 10             	add    esp,0x10
c00097a4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097a8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097bc:	e8 0f d2 01 00       	call   c00269d0 <__muldf3>
c00097c1:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00097c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00097c9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00097cc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00097d0:	e8 f2 db 01 00       	call   c00273c7 <__extendsfdf2>
c00097d5:	83 c4 10             	add    esp,0x10
c00097d8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097e0:	52                   	push   edx
c00097e1:	50                   	push   eax
c00097e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097ea:	e8 64 cb 01 00       	call   c0026353 <__adddf3>
c00097ef:	59                   	pop    ecx
c00097f0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097f4:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097f8:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097fe:	e8 c4 db 01 00       	call   c00273c7 <__extendsfdf2>
c0009803:	83 c4 10             	add    esp,0x10
c0009806:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000980a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000980e:	52                   	push   edx
c000980f:	50                   	push   eax
c0009810:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009814:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009818:	e8 b3 d1 01 00       	call   c00269d0 <__muldf3>
c000981d:	83 c4 10             	add    esp,0x10
c0009820:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009824:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009828:	52                   	push   edx
c0009829:	50                   	push   eax
c000982a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000982e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009832:	e8 1c cb 01 00       	call   c0026353 <__adddf3>
c0009837:	83 c4 10             	add    esp,0x10
c000983a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000983e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009842:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009846:	0f 89 1d ff ff ff    	jns    c0009769 <calc_output_single+0x52>
c000984c:	89 d9                	mov    ecx,ebx
c000984e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009852:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009856:	89 dd                	mov    ebp,ebx
c0009858:	29 c8                	sub    eax,ecx
c000985a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009862:	99                   	cdq    
c0009863:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000986b:	f7 fb                	idiv   ebx
c000986d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009871:	0f af e8             	imul   ebp,eax
c0009874:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009878:	01 cd                	add    ebp,ecx
c000987a:	8d 34 86             	lea    esi,[esi+eax*4]
c000987d:	89 e8                	mov    eax,ebp
c000987f:	83 ee 04             	sub    esi,0x4
c0009882:	e8 5c fe ff ff       	call   c00096e3 <fp_to_double>
c0009887:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000988b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000988f:	89 e8                	mov    eax,ebp
c0009891:	29 dd                	sub    ebp,ebx
c0009893:	e8 41 fe ff ff       	call   c00096d9 <fp_to_int>
c0009898:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000989b:	52                   	push   edx
c000989c:	52                   	push   edx
c000989d:	51                   	push   ecx
c000989e:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c00098a2:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00098a6:	e8 3d c4 01 00       	call   c0025ce8 <__subsf3>
c00098ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00098ae:	e8 14 db 01 00       	call   c00273c7 <__extendsfdf2>
c00098b3:	83 c4 10             	add    esp,0x10
c00098b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098ba:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098ce:	e8 fd d0 01 00       	call   c00269d0 <__muldf3>
c00098d3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00098d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00098db:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00098de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00098e2:	e8 e0 da 01 00       	call   c00273c7 <__extendsfdf2>
c00098e7:	83 c4 10             	add    esp,0x10
c00098ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098ee:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098f2:	52                   	push   edx
c00098f3:	50                   	push   eax
c00098f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098fc:	e8 52 ca 01 00       	call   c0026353 <__adddf3>
c0009901:	59                   	pop    ecx
c0009902:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009906:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000990a:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009910:	e8 b2 da 01 00       	call   c00273c7 <__extendsfdf2>
c0009915:	83 c4 10             	add    esp,0x10
c0009918:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000991c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009920:	52                   	push   edx
c0009921:	50                   	push   eax
c0009922:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009926:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000992a:	e8 a1 d0 01 00       	call   c00269d0 <__muldf3>
c000992f:	83 c4 10             	add    esp,0x10
c0009932:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009936:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000993a:	52                   	push   edx
c000993b:	50                   	push   eax
c000993c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009940:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009944:	e8 0a ca 01 00       	call   c0026353 <__adddf3>
c0009949:	83 c4 10             	add    esp,0x10
c000994c:	85 ed                	test   ebp,ebp
c000994e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009952:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009956:	0f 8f 21 ff ff ff    	jg     c000987d <calc_output_single+0x166>
c000995c:	52                   	push   edx
c000995d:	50                   	push   eax
c000995e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009966:	e8 e8 c9 01 00       	call   c0026353 <__adddf3>
c000996b:	83 c4 5c             	add    esp,0x5c
c000996e:	5b                   	pop    ebx
c000996f:	5e                   	pop    esi
c0009970:	5f                   	pop    edi
c0009971:	5d                   	pop    ebp
c0009972:	c3                   	ret    

c0009973 <calc_output_stereo>:
c0009973:	55                   	push   ebp
c0009974:	89 cd                	mov    ebp,ecx
c0009976:	57                   	push   edi
c0009977:	56                   	push   esi
c0009978:	53                   	push   ebx
c0009979:	89 c3                	mov    ebx,eax
c000997b:	83 ec 6c             	sub    esp,0x6c
c000997e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009982:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009989:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009990:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009994:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009998:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000999b:	e8 35 fd ff ff       	call   c00096d5 <int_to_fp>
c00099a0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00099a8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ac:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00099b4:	29 c8                	sub    eax,ecx
c00099b6:	99                   	cdq    
c00099b7:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c00099bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099bf:	0f af d0             	imul   edx,eax
c00099c2:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00099c5:	31 d2                	xor    edx,edx
c00099c7:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00099cb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00099cf:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c00099d2:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00099d6:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00099d9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00099dd:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00099e1:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c00099e4:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00099e9:	29 c1                	sub    ecx,eax
c00099eb:	31 c0                	xor    eax,eax
c00099ed:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099f8:	83 c7 08             	add    edi,0x8
c00099fb:	e8 e3 fc ff ff       	call   c00096e3 <fp_to_double>
c0009a00:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009a04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009a08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a0c:	e8 c8 fc ff ff       	call   c00096d9 <fp_to_int>
c0009a11:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009a14:	52                   	push   edx
c0009a15:	52                   	push   edx
c0009a16:	51                   	push   ecx
c0009a17:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009a1b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009a1f:	e8 c4 c2 01 00       	call   c0025ce8 <__subsf3>
c0009a24:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a27:	e8 9b d9 01 00       	call   c00273c7 <__extendsfdf2>
c0009a2c:	83 c4 10             	add    esp,0x10
c0009a2f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a33:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a3f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a47:	e8 84 cf 01 00       	call   c00269d0 <__muldf3>
c0009a4c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a50:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a54:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a57:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a5b:	e8 67 d9 01 00       	call   c00273c7 <__extendsfdf2>
c0009a60:	83 c4 10             	add    esp,0x10
c0009a63:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a67:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a6b:	52                   	push   edx
c0009a6c:	50                   	push   eax
c0009a6d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a75:	e8 d9 c8 01 00       	call   c0026353 <__adddf3>
c0009a7a:	59                   	pop    ecx
c0009a7b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a7f:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a83:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a89:	e8 39 d9 01 00       	call   c00273c7 <__extendsfdf2>
c0009a8e:	83 c4 10             	add    esp,0x10
c0009a91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a95:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a99:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a9d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aa5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aa9:	e8 22 cf 01 00       	call   c00269d0 <__muldf3>
c0009aae:	83 c4 10             	add    esp,0x10
c0009ab1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ab5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ab9:	52                   	push   edx
c0009aba:	50                   	push   eax
c0009abb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac3:	e8 8b c8 01 00       	call   c0026353 <__adddf3>
c0009ac8:	59                   	pop    ecx
c0009ac9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009acd:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009ad1:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ad7:	e8 eb d8 01 00       	call   c00273c7 <__extendsfdf2>
c0009adc:	83 c4 10             	add    esp,0x10
c0009adf:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ae3:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ae7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aeb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009af3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009af7:	e8 d4 ce 01 00       	call   c00269d0 <__muldf3>
c0009afc:	83 c4 10             	add    esp,0x10
c0009aff:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009b03:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009b07:	52                   	push   edx
c0009b08:	50                   	push   eax
c0009b09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b11:	e8 3d c8 01 00       	call   c0026353 <__adddf3>
c0009b16:	83 c4 10             	add    esp,0x10
c0009b19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009b29:	0f 89 c5 fe ff ff    	jns    c00099f4 <calc_output_stereo+0x81>
c0009b2f:	29 e9                	sub    ecx,ebp
c0009b31:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b35:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b39:	29 c8                	sub    eax,ecx
c0009b3b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b43:	99                   	cdq    
c0009b44:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b48:	31 d2                	xor    edx,edx
c0009b4a:	0f af f8             	imul   edi,eax
c0009b4d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b51:	40                   	inc    eax
c0009b52:	01 cf                	add    edi,ecx
c0009b54:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b59:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b5d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b65:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b68:	31 c0                	xor    eax,eax
c0009b6a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b6e:	89 f8                	mov    eax,edi
c0009b70:	83 eb 08             	sub    ebx,0x8
c0009b73:	e8 6b fb ff ff       	call   c00096e3 <fp_to_double>
c0009b78:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b7c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b80:	89 f8                	mov    eax,edi
c0009b82:	e8 52 fb ff ff       	call   c00096d9 <fp_to_int>
c0009b87:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b8a:	52                   	push   edx
c0009b8b:	52                   	push   edx
c0009b8c:	55                   	push   ebp
c0009b8d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b91:	e8 52 c1 01 00       	call   c0025ce8 <__subsf3>
c0009b96:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b99:	e8 29 d8 01 00       	call   c00273c7 <__extendsfdf2>
c0009b9e:	83 c4 10             	add    esp,0x10
c0009ba1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009ba5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009ba9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bb1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bb5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bb9:	e8 12 ce 01 00       	call   c00269d0 <__muldf3>
c0009bbe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009bc1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009bc5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009bc9:	e8 f9 d7 01 00       	call   c00273c7 <__extendsfdf2>
c0009bce:	83 c4 10             	add    esp,0x10
c0009bd1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bd9:	52                   	push   edx
c0009bda:	50                   	push   eax
c0009bdb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bdf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009be3:	e8 6b c7 01 00       	call   c0026353 <__adddf3>
c0009be8:	59                   	pop    ecx
c0009be9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009bed:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009bf1:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009bf7:	e8 cb d7 01 00       	call   c00273c7 <__extendsfdf2>
c0009bfc:	83 c4 10             	add    esp,0x10
c0009bff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c03:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c0b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c13:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c17:	e8 b4 cd 01 00       	call   c00269d0 <__muldf3>
c0009c1c:	83 c4 10             	add    esp,0x10
c0009c1f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c23:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c27:	52                   	push   edx
c0009c28:	50                   	push   eax
c0009c29:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c2d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c31:	e8 1d c7 01 00       	call   c0026353 <__adddf3>
c0009c36:	5d                   	pop    ebp
c0009c37:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c3b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c3f:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c45:	e8 7d d7 01 00       	call   c00273c7 <__extendsfdf2>
c0009c4a:	83 c4 10             	add    esp,0x10
c0009c4d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c51:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c55:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c59:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c61:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c65:	e8 66 cd 01 00       	call   c00269d0 <__muldf3>
c0009c6a:	83 c4 10             	add    esp,0x10
c0009c6d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c71:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c75:	52                   	push   edx
c0009c76:	50                   	push   eax
c0009c77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c7f:	e8 cf c6 01 00       	call   c0026353 <__adddf3>
c0009c84:	83 c4 10             	add    esp,0x10
c0009c87:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c8b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c8f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c93:	85 ff                	test   edi,edi
c0009c95:	0f 8f d3 fe ff ff    	jg     c0009b6e <calc_output_stereo+0x1fb>
c0009c9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ca7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cab:	e8 a3 c6 01 00       	call   c0026353 <__adddf3>
c0009cb0:	83 c4 10             	add    esp,0x10
c0009cb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cbb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cbf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cc7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ccb:	e8 00 cd 01 00       	call   c00269d0 <__muldf3>
c0009cd0:	59                   	pop    ecx
c0009cd1:	5b                   	pop    ebx
c0009cd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009cda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ce2:	e8 bc d5 01 00       	call   c00272a3 <__truncdfsf2>
c0009ce7:	83 c4 10             	add    esp,0x10
c0009cea:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009cf1:	89 03                	mov    DWORD PTR [ebx],eax
c0009cf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d03:	e8 4b c6 01 00       	call   c0026353 <__adddf3>
c0009d08:	83 c4 10             	add    esp,0x10
c0009d0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d13:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d17:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d23:	e8 a8 cc 01 00       	call   c00269d0 <__muldf3>
c0009d28:	5e                   	pop    esi
c0009d29:	5f                   	pop    edi
c0009d2a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d3a:	e8 64 d5 01 00       	call   c00272a3 <__truncdfsf2>
c0009d3f:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d46:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d49:	83 c4 7c             	add    esp,0x7c
c0009d4c:	5b                   	pop    ebx
c0009d4d:	5e                   	pop    esi
c0009d4e:	5f                   	pop    edi
c0009d4f:	5d                   	pop    ebp
c0009d50:	c3                   	ret    

c0009d51 <calc_output_quad>:
c0009d51:	55                   	push   ebp
c0009d52:	57                   	push   edi
c0009d53:	56                   	push   esi
c0009d54:	89 c6                	mov    esi,eax
c0009d56:	53                   	push   ebx
c0009d57:	83 ec 7c             	sub    esp,0x7c
c0009d5a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d5e:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d62:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d69:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d70:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d78:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d7b:	e8 55 f9 ff ff       	call   c00096d5 <int_to_fp>
c0009d80:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d83:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d86:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d8a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d8e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d92:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d96:	99                   	cdq    
c0009d97:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d9b:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d9f:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009da2:	31 d2                	xor    edx,edx
c0009da4:	0f af d8             	imul   ebx,eax
c0009da7:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009daf:	0f af c7             	imul   eax,edi
c0009db2:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009db6:	29 c1                	sub    ecx,eax
c0009db8:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009dc0:	31 c0                	xor    eax,eax
c0009dc2:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009dc5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009dc9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009dcd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dd1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009dd9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ddd:	89 d8                	mov    eax,ebx
c0009ddf:	83 c7 10             	add    edi,0x10
c0009de2:	e8 fc f8 ff ff       	call   c00096e3 <fp_to_double>
c0009de7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009deb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009def:	89 d8                	mov    eax,ebx
c0009df1:	e8 e3 f8 ff ff       	call   c00096d9 <fp_to_int>
c0009df6:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009dfa:	52                   	push   edx
c0009dfb:	52                   	push   edx
c0009dfc:	51                   	push   ecx
c0009dfd:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009e01:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009e05:	e8 de be 01 00       	call   c0025ce8 <__subsf3>
c0009e0a:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e0d:	e8 b5 d5 01 00       	call   c00273c7 <__extendsfdf2>
c0009e12:	83 c4 10             	add    esp,0x10
c0009e15:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e19:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e25:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e29:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e2d:	e8 9e cb 01 00       	call   c00269d0 <__muldf3>
c0009e32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e36:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e3a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e41:	e8 81 d5 01 00       	call   c00273c7 <__extendsfdf2>
c0009e46:	83 c4 10             	add    esp,0x10
c0009e49:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e4d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e51:	52                   	push   edx
c0009e52:	50                   	push   eax
c0009e53:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e57:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e5b:	e8 f3 c4 01 00       	call   c0026353 <__adddf3>
c0009e60:	59                   	pop    ecx
c0009e61:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e65:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e69:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e6f:	e8 53 d5 01 00       	call   c00273c7 <__extendsfdf2>
c0009e74:	83 c4 10             	add    esp,0x10
c0009e77:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e7b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e87:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e8b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e8f:	e8 3c cb 01 00       	call   c00269d0 <__muldf3>
c0009e94:	83 c4 10             	add    esp,0x10
c0009e97:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e9b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e9f:	52                   	push   edx
c0009ea0:	50                   	push   eax
c0009ea1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ea5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ea9:	e8 a5 c4 01 00       	call   c0026353 <__adddf3>
c0009eae:	59                   	pop    ecx
c0009eaf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009eb3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009eb7:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009ebd:	e8 05 d5 01 00       	call   c00273c7 <__extendsfdf2>
c0009ec2:	83 c4 10             	add    esp,0x10
c0009ec5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ec9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ecd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ed9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009edd:	e8 ee ca 01 00       	call   c00269d0 <__muldf3>
c0009ee2:	83 c4 10             	add    esp,0x10
c0009ee5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ee9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009eed:	52                   	push   edx
c0009eee:	50                   	push   eax
c0009eef:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ef3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ef7:	e8 57 c4 01 00       	call   c0026353 <__adddf3>
c0009efc:	59                   	pop    ecx
c0009efd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009f01:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009f05:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009f0b:	e8 b7 d4 01 00       	call   c00273c7 <__extendsfdf2>
c0009f10:	83 c4 10             	add    esp,0x10
c0009f13:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f17:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f23:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f27:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2b:	e8 a0 ca 01 00       	call   c00269d0 <__muldf3>
c0009f30:	83 c4 10             	add    esp,0x10
c0009f33:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f37:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f3b:	52                   	push   edx
c0009f3c:	50                   	push   eax
c0009f3d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f41:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f45:	e8 09 c4 01 00       	call   c0026353 <__adddf3>
c0009f4a:	59                   	pop    ecx
c0009f4b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f4f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f53:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f59:	e8 69 d4 01 00       	call   c00273c7 <__extendsfdf2>
c0009f5e:	83 c4 10             	add    esp,0x10
c0009f61:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f65:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f71:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f75:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f79:	e8 52 ca 01 00       	call   c00269d0 <__muldf3>
c0009f7e:	83 c4 10             	add    esp,0x10
c0009f81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f85:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f89:	52                   	push   edx
c0009f8a:	50                   	push   eax
c0009f8b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f8f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f93:	e8 bb c3 01 00       	call   c0026353 <__adddf3>
c0009f98:	83 c4 10             	add    esp,0x10
c0009f9b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f9f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009fa3:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009fa7:	0f 89 30 fe ff ff    	jns    c0009ddd <calc_output_quad+0x8c>
c0009fad:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009fb1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fb5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009fb9:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009fbd:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009fc5:	29 c8                	sub    eax,ecx
c0009fc7:	99                   	cdq    
c0009fc8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fcc:	31 d2                	xor    edx,edx
c0009fce:	0f af d8             	imul   ebx,eax
c0009fd1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009fd5:	40                   	inc    eax
c0009fd6:	01 cb                	add    ebx,ecx
c0009fd8:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009fdd:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009fe1:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009fe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009fe9:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fec:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009ff4:	31 c0                	xor    eax,eax
c0009ff6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ffa:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009ffe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a002:	89 d8                	mov    eax,ebx
c000a004:	83 ee 10             	sub    esi,0x10
c000a007:	e8 d7 f6 ff ff       	call   c00096e3 <fp_to_double>
c000a00c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a010:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a014:	89 d8                	mov    eax,ebx
c000a016:	e8 be f6 ff ff       	call   c00096d9 <fp_to_int>
c000a01b:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a01f:	52                   	push   edx
c000a020:	52                   	push   edx
c000a021:	57                   	push   edi
c000a022:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a026:	e8 bd bc 01 00       	call   c0025ce8 <__subsf3>
c000a02b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a02e:	e8 94 d3 01 00       	call   c00273c7 <__extendsfdf2>
c000a033:	83 c4 10             	add    esp,0x10
c000a036:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a03a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a03e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a046:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a04a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a04e:	e8 7d c9 01 00       	call   c00269d0 <__muldf3>
c000a053:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a056:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a05a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a05e:	e8 64 d3 01 00       	call   c00273c7 <__extendsfdf2>
c000a063:	83 c4 10             	add    esp,0x10
c000a066:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a06a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06e:	52                   	push   edx
c000a06f:	50                   	push   eax
c000a070:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a074:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a078:	e8 d6 c2 01 00       	call   c0026353 <__adddf3>
c000a07d:	59                   	pop    ecx
c000a07e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a082:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a086:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a08c:	e8 36 d3 01 00       	call   c00273c7 <__extendsfdf2>
c000a091:	83 c4 10             	add    esp,0x10
c000a094:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a098:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ac:	e8 1f c9 01 00       	call   c00269d0 <__muldf3>
c000a0b1:	83 c4 10             	add    esp,0x10
c000a0b4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0bc:	52                   	push   edx
c000a0bd:	50                   	push   eax
c000a0be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0c6:	e8 88 c2 01 00       	call   c0026353 <__adddf3>
c000a0cb:	5f                   	pop    edi
c000a0cc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a0d0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a0d4:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a0da:	e8 e8 d2 01 00       	call   c00273c7 <__extendsfdf2>
c000a0df:	83 c4 10             	add    esp,0x10
c000a0e2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0fa:	e8 d1 c8 01 00       	call   c00269d0 <__muldf3>
c000a0ff:	83 c4 10             	add    esp,0x10
c000a102:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a106:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10a:	52                   	push   edx
c000a10b:	50                   	push   eax
c000a10c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a110:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a114:	e8 3a c2 01 00       	call   c0026353 <__adddf3>
c000a119:	59                   	pop    ecx
c000a11a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a11e:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a122:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a128:	e8 9a d2 01 00       	call   c00273c7 <__extendsfdf2>
c000a12d:	83 c4 10             	add    esp,0x10
c000a130:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a134:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a148:	e8 83 c8 01 00       	call   c00269d0 <__muldf3>
c000a14d:	83 c4 10             	add    esp,0x10
c000a150:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a154:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a158:	52                   	push   edx
c000a159:	50                   	push   eax
c000a15a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a15e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a162:	e8 ec c1 01 00       	call   c0026353 <__adddf3>
c000a167:	5f                   	pop    edi
c000a168:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a16c:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a170:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a176:	e8 4c d2 01 00       	call   c00273c7 <__extendsfdf2>
c000a17b:	83 c4 10             	add    esp,0x10
c000a17e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a182:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a18a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a18e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a192:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a196:	e8 35 c8 01 00       	call   c00269d0 <__muldf3>
c000a19b:	83 c4 10             	add    esp,0x10
c000a19e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1a6:	52                   	push   edx
c000a1a7:	50                   	push   eax
c000a1a8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a1ac:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a1b0:	e8 9e c1 01 00       	call   c0026353 <__adddf3>
c000a1b5:	83 c4 10             	add    esp,0x10
c000a1b8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1bc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a1c0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a1c4:	85 db                	test   ebx,ebx
c000a1c6:	0f 8f 36 fe ff ff    	jg     c000a002 <calc_output_quad+0x2b1>
c000a1cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1dc:	e8 72 c1 01 00       	call   c0026353 <__adddf3>
c000a1e1:	83 c4 10             	add    esp,0x10
c000a1e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fc:	e8 cf c7 01 00       	call   c00269d0 <__muldf3>
c000a201:	59                   	pop    ecx
c000a202:	5b                   	pop    ebx
c000a203:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a207:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a20b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a20f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a213:	e8 8b d0 01 00       	call   c00272a3 <__truncdfsf2>
c000a218:	83 c4 10             	add    esp,0x10
c000a21b:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a222:	89 06                	mov    DWORD PTR [esi],eax
c000a224:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a228:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a22c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a230:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a234:	e8 1a c1 01 00       	call   c0026353 <__adddf3>
c000a239:	83 c4 10             	add    esp,0x10
c000a23c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a240:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a24c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a254:	e8 77 c7 01 00       	call   c00269d0 <__muldf3>
c000a259:	5e                   	pop    esi
c000a25a:	5f                   	pop    edi
c000a25b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a25f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a263:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a267:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a26b:	e8 33 d0 01 00       	call   c00272a3 <__truncdfsf2>
c000a270:	83 c4 10             	add    esp,0x10
c000a273:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a27a:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a27d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a281:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a285:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 c1 c0 01 00       	call   c0026353 <__adddf3>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a299:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a29d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ad:	e8 1e c7 01 00       	call   c00269d0 <__muldf3>
c000a2b2:	5d                   	pop    ebp
c000a2b3:	59                   	pop    ecx
c000a2b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2c4:	e8 da cf 01 00       	call   c00272a3 <__truncdfsf2>
c000a2c9:	83 c4 10             	add    esp,0x10
c000a2cc:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2d3:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a2d6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2da:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2e2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2e6:	e8 68 c0 01 00       	call   c0026353 <__adddf3>
c000a2eb:	83 c4 10             	add    esp,0x10
c000a2ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a302:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a306:	e8 c5 c6 01 00       	call   c00269d0 <__muldf3>
c000a30b:	5b                   	pop    ebx
c000a30c:	5e                   	pop    esi
c000a30d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a311:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a315:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a319:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a31d:	e8 81 cf 01 00       	call   c00272a3 <__truncdfsf2>
c000a322:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a329:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a32c:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a332:	5b                   	pop    ebx
c000a333:	5e                   	pop    esi
c000a334:	5f                   	pop    edi
c000a335:	5d                   	pop    ebp
c000a336:	c3                   	ret    

c000a337 <calc_output_hex>:
c000a337:	55                   	push   ebp
c000a338:	89 cd                	mov    ebp,ecx
c000a33a:	57                   	push   edi
c000a33b:	56                   	push   esi
c000a33c:	53                   	push   ebx
c000a33d:	89 c3                	mov    ebx,eax
c000a33f:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a345:	89 14 24             	mov    DWORD PTR [esp],edx
c000a348:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a34f:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a356:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a35a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a35e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a361:	e8 6f f3 ff ff       	call   c00096d5 <int_to_fp>
c000a366:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a369:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a36d:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a370:	29 c8                	sub    eax,ecx
c000a372:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a376:	99                   	cdq    
c000a377:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a37f:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a382:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a38a:	0f af f8             	imul   edi,eax
c000a38d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a390:	01 cf                	add    edi,ecx
c000a392:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a396:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a399:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a39d:	0f af c2             	imul   eax,edx
c000a3a0:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a3a4:	29 c1                	sub    ecx,eax
c000a3a6:	31 d2                	xor    edx,edx
c000a3a8:	31 c0                	xor    eax,eax
c000a3aa:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a3ad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a3b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a3b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a3bd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a3c1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a3c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3d1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3d5:	89 f8                	mov    eax,edi
c000a3d7:	e8 07 f3 ff ff       	call   c00096e3 <fp_to_double>
c000a3dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3e4:	89 f8                	mov    eax,edi
c000a3e6:	e8 ee f2 ff ff       	call   c00096d9 <fp_to_int>
c000a3eb:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3ef:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3f2:	52                   	push   edx
c000a3f3:	52                   	push   edx
c000a3f4:	51                   	push   ecx
c000a3f5:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3f9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a400:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a404:	e8 df b8 01 00       	call   c0025ce8 <__subsf3>
c000a409:	89 04 24             	mov    DWORD PTR [esp],eax
c000a40c:	e8 b6 cf 01 00       	call   c00273c7 <__extendsfdf2>
c000a411:	83 c4 10             	add    esp,0x10
c000a414:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a418:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a41c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a420:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a424:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a428:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a42c:	e8 9f c5 01 00       	call   c00269d0 <__muldf3>
c000a431:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a435:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a439:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a43c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a440:	e8 82 cf 01 00       	call   c00273c7 <__extendsfdf2>
c000a445:	83 c4 10             	add    esp,0x10
c000a448:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a44c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a450:	52                   	push   edx
c000a451:	50                   	push   eax
c000a452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a45a:	e8 f4 be 01 00       	call   c0026353 <__adddf3>
c000a45f:	59                   	pop    ecx
c000a460:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a464:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a468:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a46e:	e8 54 cf 01 00       	call   c00273c7 <__extendsfdf2>
c000a473:	83 c4 10             	add    esp,0x10
c000a476:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a47a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a47e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a486:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a48a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a48e:	e8 3d c5 01 00       	call   c00269d0 <__muldf3>
c000a493:	83 c4 10             	add    esp,0x10
c000a496:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a49a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a49e:	52                   	push   edx
c000a49f:	50                   	push   eax
c000a4a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4a8:	e8 a6 be 01 00       	call   c0026353 <__adddf3>
c000a4ad:	59                   	pop    ecx
c000a4ae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4b2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a4b6:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a4bc:	e8 06 cf 01 00       	call   c00273c7 <__extendsfdf2>
c000a4c1:	83 c4 10             	add    esp,0x10
c000a4c4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4c8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4d8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4dc:	e8 ef c4 01 00       	call   c00269d0 <__muldf3>
c000a4e1:	83 c4 10             	add    esp,0x10
c000a4e4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4e8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ec:	52                   	push   edx
c000a4ed:	50                   	push   eax
c000a4ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4f6:	e8 58 be 01 00       	call   c0026353 <__adddf3>
c000a4fb:	59                   	pop    ecx
c000a4fc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a500:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a504:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a50a:	e8 b8 ce 01 00       	call   c00273c7 <__extendsfdf2>
c000a50f:	83 c4 10             	add    esp,0x10
c000a512:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a516:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a526:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a52a:	e8 a1 c4 01 00       	call   c00269d0 <__muldf3>
c000a52f:	83 c4 10             	add    esp,0x10
c000a532:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a536:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a53a:	52                   	push   edx
c000a53b:	50                   	push   eax
c000a53c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a540:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a544:	e8 0a be 01 00       	call   c0026353 <__adddf3>
c000a549:	59                   	pop    ecx
c000a54a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a54e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a552:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a558:	e8 6a ce 01 00       	call   c00273c7 <__extendsfdf2>
c000a55d:	83 c4 10             	add    esp,0x10
c000a560:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a564:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a568:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a56c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a570:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a574:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a578:	e8 53 c4 01 00       	call   c00269d0 <__muldf3>
c000a57d:	83 c4 10             	add    esp,0x10
c000a580:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a584:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a588:	52                   	push   edx
c000a589:	50                   	push   eax
c000a58a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a58e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a592:	e8 bc bd 01 00       	call   c0026353 <__adddf3>
c000a597:	59                   	pop    ecx
c000a598:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a59c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a5a0:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a5a6:	e8 1c ce 01 00       	call   c00273c7 <__extendsfdf2>
c000a5ab:	83 c4 10             	add    esp,0x10
c000a5ae:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5b2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5be:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5c2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5c6:	e8 05 c4 01 00       	call   c00269d0 <__muldf3>
c000a5cb:	83 c4 10             	add    esp,0x10
c000a5ce:	83 c6 18             	add    esi,0x18
c000a5d1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5d5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5d9:	52                   	push   edx
c000a5da:	50                   	push   eax
c000a5db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5e3:	e8 6b bd 01 00       	call   c0026353 <__adddf3>
c000a5e8:	59                   	pop    ecx
c000a5e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5ed:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5f1:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5f7:	e8 cb cd 01 00       	call   c00273c7 <__extendsfdf2>
c000a5fc:	83 c4 10             	add    esp,0x10
c000a5ff:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a603:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a607:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a60b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a60f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a613:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a617:	e8 b4 c3 01 00       	call   c00269d0 <__muldf3>
c000a61c:	83 c4 10             	add    esp,0x10
c000a61f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a623:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a627:	52                   	push   edx
c000a628:	50                   	push   eax
c000a629:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a62d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a631:	e8 1d bd 01 00       	call   c0026353 <__adddf3>
c000a636:	83 c4 10             	add    esp,0x10
c000a639:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a63d:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a641:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a644:	0f 89 8b fd ff ff    	jns    c000a3d5 <calc_output_hex+0x9e>
c000a64a:	31 f6                	xor    esi,esi
c000a64c:	31 ff                	xor    edi,edi
c000a64e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a652:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a655:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a659:	29 e9                	sub    ecx,ebp
c000a65b:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a65f:	29 c8                	sub    eax,ecx
c000a661:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a664:	99                   	cdq    
c000a665:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a669:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a66c:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a670:	0f af e8             	imul   ebp,eax
c000a673:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a677:	40                   	inc    eax
c000a678:	01 cd                	add    ebp,ecx
c000a67a:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a67f:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a683:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a687:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a68b:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a68e:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a692:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a696:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a69a:	89 e8                	mov    eax,ebp
c000a69c:	e8 42 f0 ff ff       	call   c00096e3 <fp_to_double>
c000a6a1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a6a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a6a9:	89 e8                	mov    eax,ebp
c000a6ab:	e8 29 f0 ff ff       	call   c00096d9 <fp_to_int>
c000a6b0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a6b4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a6b7:	52                   	push   edx
c000a6b8:	52                   	push   edx
c000a6b9:	51                   	push   ecx
c000a6ba:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a6c1:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a6c8:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a6cc:	e8 17 b6 01 00       	call   c0025ce8 <__subsf3>
c000a6d1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a6d4:	e8 ee cc 01 00       	call   c00273c7 <__extendsfdf2>
c000a6d9:	83 c4 10             	add    esp,0x10
c000a6dc:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6e0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ec:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6f0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6f4:	e8 d7 c2 01 00       	call   c00269d0 <__muldf3>
c000a6f9:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a700:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a704:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a707:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a70b:	e8 b7 cc 01 00       	call   c00273c7 <__extendsfdf2>
c000a710:	83 c4 10             	add    esp,0x10
c000a713:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a717:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a71b:	52                   	push   edx
c000a71c:	50                   	push   eax
c000a71d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a725:	e8 29 bc 01 00       	call   c0026353 <__adddf3>
c000a72a:	59                   	pop    ecx
c000a72b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a72f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a733:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a739:	e8 89 cc 01 00       	call   c00273c7 <__extendsfdf2>
c000a73e:	83 c4 10             	add    esp,0x10
c000a741:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a745:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a74d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a751:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a755:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a759:	e8 72 c2 01 00       	call   c00269d0 <__muldf3>
c000a75e:	83 c4 10             	add    esp,0x10
c000a761:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a765:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a769:	52                   	push   edx
c000a76a:	50                   	push   eax
c000a76b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a76f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a773:	e8 db bb 01 00       	call   c0026353 <__adddf3>
c000a778:	59                   	pop    ecx
c000a779:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a77d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a781:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a787:	e8 3b cc 01 00       	call   c00273c7 <__extendsfdf2>
c000a78c:	83 c4 10             	add    esp,0x10
c000a78f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a793:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a797:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a79b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a79f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7a3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7a7:	e8 24 c2 01 00       	call   c00269d0 <__muldf3>
c000a7ac:	83 c4 10             	add    esp,0x10
c000a7af:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7b7:	52                   	push   edx
c000a7b8:	50                   	push   eax
c000a7b9:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7bd:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7c1:	e8 8d bb 01 00       	call   c0026353 <__adddf3>
c000a7c6:	59                   	pop    ecx
c000a7c7:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a7cb:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a7cf:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a7d5:	e8 ed cb 01 00       	call   c00273c7 <__extendsfdf2>
c000a7da:	83 c4 10             	add    esp,0x10
c000a7dd:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7e1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7ed:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f5:	e8 d6 c1 01 00       	call   c00269d0 <__muldf3>
c000a7fa:	83 c4 10             	add    esp,0x10
c000a7fd:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a801:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a805:	52                   	push   edx
c000a806:	50                   	push   eax
c000a807:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a80b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a80f:	e8 3f bb 01 00       	call   c0026353 <__adddf3>
c000a814:	59                   	pop    ecx
c000a815:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a819:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a81d:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a823:	e8 9f cb 01 00       	call   c00273c7 <__extendsfdf2>
c000a828:	83 c4 10             	add    esp,0x10
c000a82b:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a82f:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a833:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a837:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a83f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a843:	e8 88 c1 01 00       	call   c00269d0 <__muldf3>
c000a848:	83 c4 10             	add    esp,0x10
c000a84b:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a84f:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a853:	52                   	push   edx
c000a854:	50                   	push   eax
c000a855:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a859:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a85d:	e8 f1 ba 01 00       	call   c0026353 <__adddf3>
c000a862:	59                   	pop    ecx
c000a863:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a867:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a86b:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a871:	e8 51 cb 01 00       	call   c00273c7 <__extendsfdf2>
c000a876:	83 c4 10             	add    esp,0x10
c000a879:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a87d:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a881:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a885:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a889:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a88d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a891:	e8 3a c1 01 00       	call   c00269d0 <__muldf3>
c000a896:	83 c4 10             	add    esp,0x10
c000a899:	83 eb 18             	sub    ebx,0x18
c000a89c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8a0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8a4:	52                   	push   edx
c000a8a5:	50                   	push   eax
c000a8a6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a8aa:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a8ae:	e8 a0 ba 01 00       	call   c0026353 <__adddf3>
c000a8b3:	59                   	pop    ecx
c000a8b4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a8b8:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a8bc:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a8c2:	e8 00 cb 01 00       	call   c00273c7 <__extendsfdf2>
c000a8c7:	83 c4 10             	add    esp,0x10
c000a8ca:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ce:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8da:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8de:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8e2:	e8 e9 c0 01 00       	call   c00269d0 <__muldf3>
c000a8e7:	83 c4 10             	add    esp,0x10
c000a8ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8f2:	52                   	push   edx
c000a8f3:	50                   	push   eax
c000a8f4:	57                   	push   edi
c000a8f5:	56                   	push   esi
c000a8f6:	e8 58 ba 01 00       	call   c0026353 <__adddf3>
c000a8fb:	83 c4 10             	add    esp,0x10
c000a8fe:	89 c6                	mov    esi,eax
c000a900:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a903:	89 d7                	mov    edi,edx
c000a905:	85 ed                	test   ebp,ebp
c000a907:	0f 8f 8d fd ff ff    	jg     c000a69a <calc_output_hex+0x363>
c000a90d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a911:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a915:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a919:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a91d:	e8 31 ba 01 00       	call   c0026353 <__adddf3>
c000a922:	83 c4 10             	add    esp,0x10
c000a925:	89 04 24             	mov    DWORD PTR [esp],eax
c000a928:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a92c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a930:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a934:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93c:	e8 8f c0 01 00       	call   c00269d0 <__muldf3>
c000a941:	59                   	pop    ecx
c000a942:	5b                   	pop    ebx
c000a943:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a947:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a94b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a94f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a953:	e8 4b c9 01 00       	call   c00272a3 <__truncdfsf2>
c000a958:	83 c4 10             	add    esp,0x10
c000a95b:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a962:	89 03                	mov    DWORD PTR [ebx],eax
c000a964:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a968:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a96c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a970:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a974:	e8 da b9 01 00       	call   c0026353 <__adddf3>
c000a979:	83 c4 10             	add    esp,0x10
c000a97c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a97f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a983:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a987:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a98b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a98f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a993:	e8 38 c0 01 00       	call   c00269d0 <__muldf3>
c000a998:	5d                   	pop    ebp
c000a999:	59                   	pop    ecx
c000a99a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a99e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9aa:	e8 f4 c8 01 00       	call   c00272a3 <__truncdfsf2>
c000a9af:	83 c4 10             	add    esp,0x10
c000a9b2:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9b9:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a9bc:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9c0:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9c4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9c8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9cc:	e8 82 b9 01 00       	call   c0026353 <__adddf3>
c000a9d1:	83 c4 10             	add    esp,0x10
c000a9d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9eb:	e8 e0 bf 01 00       	call   c00269d0 <__muldf3>
c000a9f0:	5b                   	pop    ebx
c000a9f1:	5d                   	pop    ebp
c000a9f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa02:	e8 9c c8 01 00       	call   c00272a3 <__truncdfsf2>
c000aa07:	83 c4 10             	add    esp,0x10
c000aa0a:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa11:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000aa14:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa18:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa20:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa24:	e8 2a b9 01 00       	call   c0026353 <__adddf3>
c000aa29:	83 c4 10             	add    esp,0x10
c000aa2c:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa2f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa33:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa37:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa3b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa3f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa43:	e8 88 bf 01 00       	call   c00269d0 <__muldf3>
c000aa48:	59                   	pop    ecx
c000aa49:	5b                   	pop    ebx
c000aa4a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa5a:	e8 44 c8 01 00       	call   c00272a3 <__truncdfsf2>
c000aa5f:	83 c4 10             	add    esp,0x10
c000aa62:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa69:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa6c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa70:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa7c:	e8 d2 b8 01 00       	call   c0026353 <__adddf3>
c000aa81:	83 c4 10             	add    esp,0x10
c000aa84:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa87:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa8b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa8f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa93:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9b:	e8 30 bf 01 00       	call   c00269d0 <__muldf3>
c000aaa0:	5d                   	pop    ebp
c000aaa1:	59                   	pop    ecx
c000aaa2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aaa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab2:	e8 ec c7 01 00       	call   c00272a3 <__truncdfsf2>
c000aab7:	83 c4 10             	add    esp,0x10
c000aaba:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aac1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aac4:	57                   	push   edi
c000aac5:	56                   	push   esi
c000aac6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aaca:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aace:	e8 80 b8 01 00       	call   c0026353 <__adddf3>
c000aad3:	83 c4 10             	add    esp,0x10
c000aad6:	89 04 24             	mov    DWORD PTR [esp],eax
c000aad9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aadd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aae1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aae5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aae9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaed:	e8 de be 01 00       	call   c00269d0 <__muldf3>
c000aaf2:	5b                   	pop    ebx
c000aaf3:	5e                   	pop    esi
c000aaf4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaf8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aafc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab00:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab04:	e8 9a c7 01 00       	call   c00272a3 <__truncdfsf2>
c000ab09:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ab10:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ab13:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ab19:	5b                   	pop    ebx
c000ab1a:	5e                   	pop    esi
c000ab1b:	5f                   	pop    edi
c000ab1c:	5d                   	pop    ebp
c000ab1d:	c3                   	ret    

c000ab1e <sinc_reset>:
c000ab1e:	56                   	push   esi
c000ab1f:	53                   	push   ebx
c000ab20:	51                   	push   ecx
c000ab21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab25:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ab28:	85 db                	test   ebx,ebx
c000ab2a:	74 59                	je     c000ab85 <sinc_reset+0x67>
c000ab2c:	31 d2                	xor    edx,edx
c000ab2e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab35:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab38:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab3b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab42:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab49:	31 c0                	xor    eax,eax
c000ab4b:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab51:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab54:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab57:	52                   	push   edx
c000ab58:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab5b:	c1 e0 02             	shl    eax,0x2
c000ab5e:	50                   	push   eax
c000ab5f:	6a 00                	push   0x0
c000ab61:	56                   	push   esi
c000ab62:	e8 6f 5b ff ff       	call   c00006d6 <memset>
c000ab67:	83 c4 0c             	add    esp,0xc
c000ab6a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab6d:	c1 e0 02             	shl    eax,0x2
c000ab70:	50                   	push   eax
c000ab71:	68 aa 00 00 00       	push   0xaa
c000ab76:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab79:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab7c:	50                   	push   eax
c000ab7d:	e8 54 5b ff ff       	call   c00006d6 <memset>
c000ab82:	83 c4 10             	add    esp,0x10
c000ab85:	58                   	pop    eax
c000ab86:	5b                   	pop    ebx
c000ab87:	5e                   	pop    esi
c000ab88:	c3                   	ret    

c000ab89 <calc_output_multi>:
c000ab89:	55                   	push   ebp
c000ab8a:	57                   	push   edi
c000ab8b:	56                   	push   esi
c000ab8c:	89 c6                	mov    esi,eax
c000ab8e:	53                   	push   ebx
c000ab8f:	83 ec 4c             	sub    esp,0x4c
c000ab92:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab96:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab9a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab9e:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000aba2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000aba6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000abaa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000abae:	8d 46 44             	lea    eax,[esi+0x44]
c000abb1:	89 04 24             	mov    DWORD PTR [esp],eax
c000abb4:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000abba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000abbe:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000abc1:	e8 0f eb ff ff       	call   c00096d5 <int_to_fp>
c000abc6:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000abc9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000abcd:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000abd1:	99                   	cdq    
c000abd2:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000abd6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000abda:	0f af d0             	imul   edx,eax
c000abdd:	0f af c3             	imul   eax,ebx
c000abe0:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000abe4:	29 c1                	sub    ecx,eax
c000abe6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000abea:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000abee:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abf5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abf9:	57                   	push   edi
c000abfa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abfe:	6a 00                	push   0x0
c000ac00:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac04:	e8 cd 5a ff ff       	call   c00006d6 <memset>
c000ac09:	83 c4 10             	add    esp,0x10
c000ac0c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac10:	89 df                	mov    edi,ebx
c000ac12:	e8 cc ea ff ff       	call   c00096e3 <fp_to_double>
c000ac17:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac1b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac1f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac23:	e8 b1 ea ff ff       	call   c00096d9 <fp_to_int>
c000ac28:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac2b:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac2e:	51                   	push   ecx
c000ac2f:	51                   	push   ecx
c000ac30:	55                   	push   ebp
c000ac31:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac35:	e8 ae b0 01 00       	call   c0025ce8 <__subsf3>
c000ac3a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac3d:	e8 85 c7 01 00       	call   c00273c7 <__extendsfdf2>
c000ac42:	83 c4 10             	add    esp,0x10
c000ac45:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac49:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac5d:	e8 6e bd 01 00       	call   c00269d0 <__muldf3>
c000ac62:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac65:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac69:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac6d:	e8 55 c7 01 00       	call   c00273c7 <__extendsfdf2>
c000ac72:	83 c4 10             	add    esp,0x10
c000ac75:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac79:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac7d:	52                   	push   edx
c000ac7e:	50                   	push   eax
c000ac7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac87:	e8 c7 b6 01 00       	call   c0026353 <__adddf3>
c000ac8c:	83 c4 10             	add    esp,0x10
c000ac8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac93:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac97:	89 f8                	mov    eax,edi
c000ac99:	b9 08 00 00 00       	mov    ecx,0x8
c000ac9e:	99                   	cdq    
c000ac9f:	f7 f9                	idiv   ecx
c000aca1:	4a                   	dec    edx
c000aca2:	83 fa 06             	cmp    edx,0x6
c000aca5:	77 07                	ja     c000acae <calc_output_multi+0x125>
c000aca7:	ff 24 95 84 8b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd747c]
c000acae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acb1:	4f                   	dec    edi
c000acb2:	83 ec 0c             	sub    esp,0xc
c000acb5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000acb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acbc:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acc3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acc7:	e8 fb c6 01 00       	call   c00273c7 <__extendsfdf2>
c000accc:	83 c4 10             	add    esp,0x10
c000accf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acd3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acdf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ace3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ace7:	e8 e4 bc 01 00       	call   c00269d0 <__muldf3>
c000acec:	83 c4 10             	add    esp,0x10
c000acef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acf3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acf7:	52                   	push   edx
c000acf8:	50                   	push   eax
c000acf9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acfc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000acff:	e8 4f b6 01 00       	call   c0026353 <__adddf3>
c000ad04:	83 c4 10             	add    esp,0x10
c000ad07:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad0a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad0d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad10:	4f                   	dec    edi
c000ad11:	83 ec 0c             	sub    esp,0xc
c000ad14:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad1b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad22:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad26:	e8 9c c6 01 00       	call   c00273c7 <__extendsfdf2>
c000ad2b:	83 c4 10             	add    esp,0x10
c000ad2e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad32:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad3e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad42:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad46:	e8 85 bc 01 00       	call   c00269d0 <__muldf3>
c000ad4b:	83 c4 10             	add    esp,0x10
c000ad4e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad52:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad56:	52                   	push   edx
c000ad57:	50                   	push   eax
c000ad58:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad5b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad5e:	e8 f0 b5 01 00       	call   c0026353 <__adddf3>
c000ad63:	83 c4 10             	add    esp,0x10
c000ad66:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad69:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad6c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad6f:	4f                   	dec    edi
c000ad70:	83 ec 0c             	sub    esp,0xc
c000ad73:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad7a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad81:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad85:	e8 3d c6 01 00       	call   c00273c7 <__extendsfdf2>
c000ad8a:	83 c4 10             	add    esp,0x10
c000ad8d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad91:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad9d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ada1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ada5:	e8 26 bc 01 00       	call   c00269d0 <__muldf3>
c000adaa:	83 c4 10             	add    esp,0x10
c000adad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adb1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adb5:	52                   	push   edx
c000adb6:	50                   	push   eax
c000adb7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adba:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adbd:	e8 91 b5 01 00       	call   c0026353 <__adddf3>
c000adc2:	83 c4 10             	add    esp,0x10
c000adc5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adc8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000adcb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000adce:	4f                   	dec    edi
c000adcf:	83 ec 0c             	sub    esp,0xc
c000add2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000add5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000add9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ade0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ade4:	e8 de c5 01 00       	call   c00273c7 <__extendsfdf2>
c000ade9:	83 c4 10             	add    esp,0x10
c000adec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adf0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adf8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adfc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae00:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae04:	e8 c7 bb 01 00       	call   c00269d0 <__muldf3>
c000ae09:	83 c4 10             	add    esp,0x10
c000ae0c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae10:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae14:	52                   	push   edx
c000ae15:	50                   	push   eax
c000ae16:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae19:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae1c:	e8 32 b5 01 00       	call   c0026353 <__adddf3>
c000ae21:	83 c4 10             	add    esp,0x10
c000ae24:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae27:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae2a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae2d:	4f                   	dec    edi
c000ae2e:	83 ec 0c             	sub    esp,0xc
c000ae31:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae38:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae3f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae43:	e8 7f c5 01 00       	call   c00273c7 <__extendsfdf2>
c000ae48:	83 c4 10             	add    esp,0x10
c000ae4b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae63:	e8 68 bb 01 00       	call   c00269d0 <__muldf3>
c000ae68:	83 c4 10             	add    esp,0x10
c000ae6b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae6f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae73:	52                   	push   edx
c000ae74:	50                   	push   eax
c000ae75:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae78:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae7b:	e8 d3 b4 01 00       	call   c0026353 <__adddf3>
c000ae80:	83 c4 10             	add    esp,0x10
c000ae83:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae86:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae89:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae8c:	4f                   	dec    edi
c000ae8d:	83 ec 0c             	sub    esp,0xc
c000ae90:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae97:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae9e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aea2:	e8 20 c5 01 00       	call   c00273c7 <__extendsfdf2>
c000aea7:	83 c4 10             	add    esp,0x10
c000aeaa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeae:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aebe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aec2:	e8 09 bb 01 00       	call   c00269d0 <__muldf3>
c000aec7:	83 c4 10             	add    esp,0x10
c000aeca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aece:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aed2:	52                   	push   edx
c000aed3:	50                   	push   eax
c000aed4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aed7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeda:	e8 74 b4 01 00       	call   c0026353 <__adddf3>
c000aedf:	83 c4 10             	add    esp,0x10
c000aee2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aee5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aee8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeeb:	4f                   	dec    edi
c000aeec:	83 ec 0c             	sub    esp,0xc
c000aeef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aef2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aef6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aefd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af01:	e8 c1 c4 01 00       	call   c00273c7 <__extendsfdf2>
c000af06:	83 c4 10             	add    esp,0x10
c000af09:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af0d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af19:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af1d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af21:	e8 aa ba 01 00       	call   c00269d0 <__muldf3>
c000af26:	83 c4 10             	add    esp,0x10
c000af29:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af2d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af31:	52                   	push   edx
c000af32:	50                   	push   eax
c000af33:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af36:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af39:	e8 15 b4 01 00       	call   c0026353 <__adddf3>
c000af3e:	83 c4 10             	add    esp,0x10
c000af41:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af44:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af47:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af4a:	4f                   	dec    edi
c000af4b:	83 ec 0c             	sub    esp,0xc
c000af4e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af55:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af5c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af60:	e8 62 c4 01 00       	call   c00273c7 <__extendsfdf2>
c000af65:	83 c4 10             	add    esp,0x10
c000af68:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af6c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af78:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af80:	e8 4b ba 01 00       	call   c00269d0 <__muldf3>
c000af85:	83 c4 10             	add    esp,0x10
c000af88:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af8c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af90:	52                   	push   edx
c000af91:	50                   	push   eax
c000af92:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af95:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af98:	e8 b6 b3 01 00       	call   c0026353 <__adddf3>
c000af9d:	83 c4 10             	add    esp,0x10
c000afa0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afa3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afa6:	85 ff                	test   edi,edi
c000afa8:	0f 8f e9 fc ff ff    	jg     c000ac97 <calc_output_multi+0x10e>
c000afae:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000afb2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000afb6:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000afba:	0f 89 4c fc ff ff    	jns    c000ac0c <calc_output_multi+0x83>
c000afc0:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000afc4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000afc8:	29 c8                	sub    eax,ecx
c000afca:	99                   	cdq    
c000afcb:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afcf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afd3:	0f af d0             	imul   edx,eax
c000afd6:	40                   	inc    eax
c000afd7:	01 d1                	add    ecx,edx
c000afd9:	0f af c3             	imul   eax,ebx
c000afdc:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000afe0:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000afe3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000afe7:	55                   	push   ebp
c000afe8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afec:	6a 00                	push   0x0
c000afee:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000aff2:	e8 df 56 ff ff       	call   c00006d6 <memset>
c000aff7:	83 c4 10             	add    esp,0x10
c000affa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000affe:	e8 e0 e6 ff ff       	call   c00096e3 <fp_to_double>
c000b003:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b007:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b00b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b00f:	e8 c5 e6 ff ff       	call   c00096d9 <fp_to_int>
c000b014:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b017:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b01a:	57                   	push   edi
c000b01b:	57                   	push   edi
c000b01c:	89 df                	mov    edi,ebx
c000b01e:	55                   	push   ebp
c000b01f:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b023:	e8 c0 ac 01 00       	call   c0025ce8 <__subsf3>
c000b028:	89 04 24             	mov    DWORD PTR [esp],eax
c000b02b:	e8 97 c3 01 00       	call   c00273c7 <__extendsfdf2>
c000b030:	83 c4 10             	add    esp,0x10
c000b033:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b037:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b03b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b03f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b043:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b047:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b04b:	e8 80 b9 01 00       	call   c00269d0 <__muldf3>
c000b050:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b053:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b057:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b05b:	e8 67 c3 01 00       	call   c00273c7 <__extendsfdf2>
c000b060:	83 c4 10             	add    esp,0x10
c000b063:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b067:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b06b:	52                   	push   edx
c000b06c:	50                   	push   eax
c000b06d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b071:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b075:	e8 d9 b2 01 00       	call   c0026353 <__adddf3>
c000b07a:	83 c4 10             	add    esp,0x10
c000b07d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b081:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b085:	89 f8                	mov    eax,edi
c000b087:	b9 08 00 00 00       	mov    ecx,0x8
c000b08c:	99                   	cdq    
c000b08d:	f7 f9                	idiv   ecx
c000b08f:	4a                   	dec    edx
c000b090:	83 fa 06             	cmp    edx,0x6
c000b093:	77 07                	ja     c000b09c <calc_output_multi+0x513>
c000b095:	ff 24 95 a0 8b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7460]
c000b09c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0a0:	4f                   	dec    edi
c000b0a1:	83 ec 0c             	sub    esp,0xc
c000b0a4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0ab:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0b2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0b6:	e8 0c c3 01 00       	call   c00273c7 <__extendsfdf2>
c000b0bb:	83 c4 10             	add    esp,0x10
c000b0be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0d6:	e8 f5 b8 01 00       	call   c00269d0 <__muldf3>
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0e6:	52                   	push   edx
c000b0e7:	50                   	push   eax
c000b0e8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0eb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0ee:	e8 60 b2 01 00       	call   c0026353 <__adddf3>
c000b0f3:	83 c4 10             	add    esp,0x10
c000b0f6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0f9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b100:	4f                   	dec    edi
c000b101:	83 ec 0c             	sub    esp,0xc
c000b104:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b107:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b10b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b112:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b116:	e8 ac c2 01 00       	call   c00273c7 <__extendsfdf2>
c000b11b:	83 c4 10             	add    esp,0x10
c000b11e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b122:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b126:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b12a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b12e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b132:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b136:	e8 95 b8 01 00       	call   c00269d0 <__muldf3>
c000b13b:	83 c4 10             	add    esp,0x10
c000b13e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b142:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b146:	52                   	push   edx
c000b147:	50                   	push   eax
c000b148:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b14b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b14e:	e8 00 b2 01 00       	call   c0026353 <__adddf3>
c000b153:	83 c4 10             	add    esp,0x10
c000b156:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b159:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b15c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b160:	4f                   	dec    edi
c000b161:	83 ec 0c             	sub    esp,0xc
c000b164:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b167:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b16b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b172:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b176:	e8 4c c2 01 00       	call   c00273c7 <__extendsfdf2>
c000b17b:	83 c4 10             	add    esp,0x10
c000b17e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b182:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b186:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b18a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b18e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b192:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b196:	e8 35 b8 01 00       	call   c00269d0 <__muldf3>
c000b19b:	83 c4 10             	add    esp,0x10
c000b19e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1a6:	52                   	push   edx
c000b1a7:	50                   	push   eax
c000b1a8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1ab:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1ae:	e8 a0 b1 01 00       	call   c0026353 <__adddf3>
c000b1b3:	83 c4 10             	add    esp,0x10
c000b1b6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1b9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1c0:	4f                   	dec    edi
c000b1c1:	83 ec 0c             	sub    esp,0xc
c000b1c4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1cb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1d2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1d6:	e8 ec c1 01 00       	call   c00273c7 <__extendsfdf2>
c000b1db:	83 c4 10             	add    esp,0x10
c000b1de:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f6:	e8 d5 b7 01 00       	call   c00269d0 <__muldf3>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	52                   	push   edx
c000b207:	50                   	push   eax
c000b208:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b20b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b20e:	e8 40 b1 01 00       	call   c0026353 <__adddf3>
c000b213:	83 c4 10             	add    esp,0x10
c000b216:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b219:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b21c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b220:	4f                   	dec    edi
c000b221:	83 ec 0c             	sub    esp,0xc
c000b224:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b227:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b22b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b232:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b236:	e8 8c c1 01 00       	call   c00273c7 <__extendsfdf2>
c000b23b:	83 c4 10             	add    esp,0x10
c000b23e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b242:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b24a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b24e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b252:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b256:	e8 75 b7 01 00       	call   c00269d0 <__muldf3>
c000b25b:	83 c4 10             	add    esp,0x10
c000b25e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b262:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b266:	52                   	push   edx
c000b267:	50                   	push   eax
c000b268:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b26b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b26e:	e8 e0 b0 01 00       	call   c0026353 <__adddf3>
c000b273:	83 c4 10             	add    esp,0x10
c000b276:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b279:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b27c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b280:	4f                   	dec    edi
c000b281:	83 ec 0c             	sub    esp,0xc
c000b284:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b287:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b28b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b292:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b296:	e8 2c c1 01 00       	call   c00273c7 <__extendsfdf2>
c000b29b:	83 c4 10             	add    esp,0x10
c000b29e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2b6:	e8 15 b7 01 00       	call   c00269d0 <__muldf3>
c000b2bb:	83 c4 10             	add    esp,0x10
c000b2be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2c6:	52                   	push   edx
c000b2c7:	50                   	push   eax
c000b2c8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2cb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2ce:	e8 80 b0 01 00       	call   c0026353 <__adddf3>
c000b2d3:	83 c4 10             	add    esp,0x10
c000b2d6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2d9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2e0:	4f                   	dec    edi
c000b2e1:	83 ec 0c             	sub    esp,0xc
c000b2e4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2eb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2f2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2f6:	e8 cc c0 01 00       	call   c00273c7 <__extendsfdf2>
c000b2fb:	83 c4 10             	add    esp,0x10
c000b2fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b302:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b30e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b312:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b316:	e8 b5 b6 01 00       	call   c00269d0 <__muldf3>
c000b31b:	83 c4 10             	add    esp,0x10
c000b31e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b322:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b326:	52                   	push   edx
c000b327:	50                   	push   eax
c000b328:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b32b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b32e:	e8 20 b0 01 00       	call   c0026353 <__adddf3>
c000b333:	83 c4 10             	add    esp,0x10
c000b336:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b339:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b33c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b340:	4f                   	dec    edi
c000b341:	83 ec 0c             	sub    esp,0xc
c000b344:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b347:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b34b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b352:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b356:	e8 6c c0 01 00       	call   c00273c7 <__extendsfdf2>
c000b35b:	83 c4 10             	add    esp,0x10
c000b35e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b362:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b366:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b36a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b36e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b372:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b376:	e8 55 b6 01 00       	call   c00269d0 <__muldf3>
c000b37b:	83 c4 10             	add    esp,0x10
c000b37e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b382:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b386:	52                   	push   edx
c000b387:	50                   	push   eax
c000b388:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b38b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b38e:	e8 c0 af 01 00       	call   c0026353 <__adddf3>
c000b393:	83 c4 10             	add    esp,0x10
c000b396:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b399:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b39c:	85 ff                	test   edi,edi
c000b39e:	0f 8f e1 fc ff ff    	jg     c000b085 <calc_output_multi+0x4fc>
c000b3a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b3a8:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b3ac:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b3b0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b3b5:	0f 8f 3f fc ff ff    	jg     c000affa <calc_output_multi+0x471>
c000b3bb:	be 08 00 00 00       	mov    esi,0x8
c000b3c0:	89 d8                	mov    eax,ebx
c000b3c2:	99                   	cdq    
c000b3c3:	f7 fe                	idiv   esi
c000b3c5:	4a                   	dec    edx
c000b3c6:	83 fa 06             	cmp    edx,0x6
c000b3c9:	77 07                	ja     c000b3d2 <calc_output_multi+0x849>
c000b3cb:	ff 24 95 bc 8b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7444]
c000b3d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3d6:	4b                   	dec    ebx
c000b3d7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3db:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3e2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3e6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3e9:	e8 65 af 01 00       	call   c0026353 <__adddf3>
c000b3ee:	83 c4 10             	add    esp,0x10
c000b3f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b401:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b405:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b409:	e8 c2 b5 01 00       	call   c00269d0 <__muldf3>
c000b40e:	5d                   	pop    ebp
c000b40f:	59                   	pop    ecx
c000b410:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b414:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b418:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b41c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b420:	e8 7e be 01 00       	call   c00272a3 <__truncdfsf2>
c000b425:	83 c4 10             	add    esp,0x10
c000b428:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b42c:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b42f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b433:	4b                   	dec    ebx
c000b434:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b438:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b43b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b43f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b443:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b446:	e8 08 af 01 00       	call   c0026353 <__adddf3>
c000b44b:	83 c4 10             	add    esp,0x10
c000b44e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b452:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b462:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b466:	e8 65 b5 01 00       	call   c00269d0 <__muldf3>
c000b46b:	59                   	pop    ecx
c000b46c:	5f                   	pop    edi
c000b46d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b471:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b47d:	e8 21 be 01 00       	call   c00272a3 <__truncdfsf2>
c000b482:	83 c4 10             	add    esp,0x10
c000b485:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b489:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b48c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b490:	4b                   	dec    ebx
c000b491:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b495:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b498:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b49c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4a3:	e8 ab ae 01 00       	call   c0026353 <__adddf3>
c000b4a8:	83 c4 10             	add    esp,0x10
c000b4ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c3:	e8 08 b5 01 00       	call   c00269d0 <__muldf3>
c000b4c8:	5f                   	pop    edi
c000b4c9:	5d                   	pop    ebp
c000b4ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4da:	e8 c4 bd 01 00       	call   c00272a3 <__truncdfsf2>
c000b4df:	83 c4 10             	add    esp,0x10
c000b4e2:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4e6:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ed:	4b                   	dec    ebx
c000b4ee:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4f2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4f9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4fd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b500:	e8 4e ae 01 00       	call   c0026353 <__adddf3>
c000b505:	83 c4 10             	add    esp,0x10
c000b508:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b50c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b518:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b51c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b520:	e8 ab b4 01 00       	call   c00269d0 <__muldf3>
c000b525:	5d                   	pop    ebp
c000b526:	59                   	pop    ecx
c000b527:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b52b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b52f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b533:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b537:	e8 67 bd 01 00       	call   c00272a3 <__truncdfsf2>
c000b53c:	83 c4 10             	add    esp,0x10
c000b53f:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b543:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b54a:	4b                   	dec    ebx
c000b54b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b54f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b552:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b556:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b55a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b55d:	e8 f1 ad 01 00       	call   c0026353 <__adddf3>
c000b562:	83 c4 10             	add    esp,0x10
c000b565:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b569:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b56d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b575:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b579:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57d:	e8 4e b4 01 00       	call   c00269d0 <__muldf3>
c000b582:	59                   	pop    ecx
c000b583:	5f                   	pop    edi
c000b584:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b588:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b58c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b590:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b594:	e8 0a bd 01 00       	call   c00272a3 <__truncdfsf2>
c000b599:	83 c4 10             	add    esp,0x10
c000b59c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5a0:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a7:	4b                   	dec    ebx
c000b5a8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5ac:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5b3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ba:	e8 94 ad 01 00       	call   c0026353 <__adddf3>
c000b5bf:	83 c4 10             	add    esp,0x10
c000b5c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5da:	e8 f1 b3 01 00       	call   c00269d0 <__muldf3>
c000b5df:	5f                   	pop    edi
c000b5e0:	5d                   	pop    ebp
c000b5e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5e5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f1:	e8 ad bc 01 00       	call   c00272a3 <__truncdfsf2>
c000b5f6:	83 c4 10             	add    esp,0x10
c000b5f9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5fd:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b604:	4b                   	dec    ebx
c000b605:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b609:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b60c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b610:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b614:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b617:	e8 37 ad 01 00       	call   c0026353 <__adddf3>
c000b61c:	83 c4 10             	add    esp,0x10
c000b61f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b623:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b627:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b62f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b633:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b637:	e8 94 b3 01 00       	call   c00269d0 <__muldf3>
c000b63c:	5d                   	pop    ebp
c000b63d:	59                   	pop    ecx
c000b63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b642:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64e:	e8 50 bc 01 00       	call   c00272a3 <__truncdfsf2>
c000b653:	83 c4 10             	add    esp,0x10
c000b656:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b65a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b65d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b661:	4b                   	dec    ebx
c000b662:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b666:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b669:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b66d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b671:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b674:	e8 da ac 01 00       	call   c0026353 <__adddf3>
c000b679:	83 c4 10             	add    esp,0x10
c000b67c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b680:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b684:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b688:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b694:	e8 37 b3 01 00       	call   c00269d0 <__muldf3>
c000b699:	59                   	pop    ecx
c000b69a:	5f                   	pop    edi
c000b69b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b69f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ab:	e8 f3 bb 01 00       	call   c00272a3 <__truncdfsf2>
c000b6b0:	83 c4 10             	add    esp,0x10
c000b6b3:	85 db                	test   ebx,ebx
c000b6b5:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b6b9:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b6bc:	0f 8f fe fc ff ff    	jg     c000b3c0 <calc_output_multi+0x837>
c000b6c2:	83 c4 4c             	add    esp,0x4c
c000b6c5:	5b                   	pop    ebx
c000b6c6:	5e                   	pop    esi
c000b6c7:	5f                   	pop    edi
c000b6c8:	5d                   	pop    ebp
c000b6c9:	c3                   	ret    

c000b6ca <double_to_fp>:
c000b6ca:	83 ec 0c             	sub    esp,0xc
c000b6cd:	68 00 00 b0 40       	push   0x40b00000
c000b6d2:	6a 00                	push   0x0
c000b6d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6dc:	e8 ef b2 01 00       	call   c00269d0 <__muldf3>
c000b6e1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b6e5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b6e9:	83 c4 1c             	add    esp,0x1c
c000b6ec:	e9 5f bd 01 00       	jmp    c0027450 <lrint>

c000b6f1 <prepare_data>:
c000b6f1:	55                   	push   ebp
c000b6f2:	57                   	push   edi
c000b6f3:	56                   	push   esi
c000b6f4:	53                   	push   ebx
c000b6f5:	83 ec 1c             	sub    esp,0x1c
c000b6f8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6fc:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b700:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b704:	0f 89 57 01 00 00    	jns    c000b861 <prepare_data+0x170>
c000b70a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b70d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b710:	85 d2                	test   edx,edx
c000b712:	75 0d                	jne    c000b721 <prepare_data+0x30>
c000b714:	8d 14 36             	lea    edx,[esi+esi*1]
c000b717:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b71a:	29 d0                	sub    eax,edx
c000b71c:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b71f:	eb 44                	jmp    c000b765 <prepare_data+0x74>
c000b721:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b724:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b727:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b72a:	39 c1                	cmp    ecx,eax
c000b72c:	7d 04                	jge    c000b732 <prepare_data+0x41>
c000b72e:	29 d0                	sub    eax,edx
c000b730:	eb 2d                	jmp    c000b75f <prepare_data+0x6e>
c000b732:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b738:	29 d7                	sub    edi,edx
c000b73a:	01 f7                	add    edi,esi
c000b73c:	51                   	push   ecx
c000b73d:	29 f2                	sub    edx,esi
c000b73f:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b746:	8d 14 90             	lea    edx,[eax+edx*4]
c000b749:	51                   	push   ecx
c000b74a:	52                   	push   edx
c000b74b:	50                   	push   eax
c000b74c:	e8 17 4f ff ff       	call   c0000668 <memmove>
c000b751:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b754:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b757:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b75a:	29 f0                	sub    eax,esi
c000b75c:	83 c4 10             	add    esp,0x10
c000b75f:	29 f0                	sub    eax,esi
c000b761:	79 02                	jns    c000b765 <prepare_data+0x74>
c000b763:	31 c0                	xor    eax,eax
c000b765:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b768:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b76b:	29 ef                	sub    edi,ebp
c000b76d:	39 c7                	cmp    edi,eax
c000b76f:	7e 02                	jle    c000b773 <prepare_data+0x82>
c000b771:	89 c7                	mov    edi,eax
c000b773:	89 f8                	mov    eax,edi
c000b775:	99                   	cdq    
c000b776:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b779:	b8 15 00 00 00       	mov    eax,0x15
c000b77e:	29 d7                	sub    edi,edx
c000b780:	0f 88 dd 00 00 00    	js     c000b863 <prepare_data+0x172>
c000b786:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b789:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b78c:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b78f:	0f 8f ce 00 00 00    	jg     c000b863 <prepare_data+0x172>
c000b795:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b79b:	50                   	push   eax
c000b79c:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7a3:	50                   	push   eax
c000b7a4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b7a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000b7aa:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b7ad:	50                   	push   eax
c000b7ae:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7b1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b7b5:	50                   	push   eax
c000b7b6:	e8 e5 4e ff ff       	call   c00006a0 <memcpy>
c000b7bb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b7be:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b7c1:	01 fd                	add    ebp,edi
c000b7c3:	01 f9                	add    ecx,edi
c000b7c5:	83 c4 10             	add    esp,0x10
c000b7c8:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b7cb:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b7ce:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b7d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7d5:	0f 85 86 00 00 00    	jne    c000b861 <prepare_data+0x170>
c000b7db:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b7de:	89 e8                	mov    eax,ebp
c000b7e0:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b7e3:	29 c8                	sub    eax,ecx
c000b7e5:	39 f8                	cmp    eax,edi
c000b7e7:	7d 78                	jge    c000b861 <prepare_data+0x170>
c000b7e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7ed:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7f1:	74 6e                	je     c000b861 <prepare_data+0x170>
c000b7f3:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7f6:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7fa:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7fd:	29 ef                	sub    edi,ebp
c000b7ff:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b803:	7c 29                	jl     c000b82e <prepare_data+0x13d>
c000b805:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b808:	29 f1                	sub    ecx,esi
c000b80a:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b811:	55                   	push   ebp
c000b812:	50                   	push   eax
c000b813:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b816:	50                   	push   eax
c000b817:	52                   	push   edx
c000b818:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b81c:	e8 47 4e ff ff       	call   c0000668 <memmove>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b827:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b82a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b82e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b831:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b834:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b837:	83 c6 05             	add    esi,0x5
c000b83a:	78 07                	js     c000b843 <prepare_data+0x152>
c000b83c:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b83f:	39 cf                	cmp    edi,ecx
c000b841:	7e 04                	jle    c000b847 <prepare_data+0x156>
c000b843:	89 ce                	mov    esi,ecx
c000b845:	29 c6                	sub    esi,eax
c000b847:	8d 04 82             	lea    eax,[edx+eax*4]
c000b84a:	51                   	push   ecx
c000b84b:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b852:	51                   	push   ecx
c000b853:	6a 00                	push   0x0
c000b855:	50                   	push   eax
c000b856:	e8 7b 4e ff ff       	call   c00006d6 <memset>
c000b85b:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b85e:	83 c4 10             	add    esp,0x10
c000b861:	31 c0                	xor    eax,eax
c000b863:	83 c4 1c             	add    esp,0x1c
c000b866:	5b                   	pop    ebx
c000b867:	5e                   	pop    esi
c000b868:	5f                   	pop    edi
c000b869:	5d                   	pop    ebp
c000b86a:	c3                   	ret    

c000b86b <sinc_multichan_vari_process>:
c000b86b:	55                   	push   ebp
c000b86c:	ba 05 00 00 00       	mov    edx,0x5
c000b871:	57                   	push   edi
c000b872:	56                   	push   esi
c000b873:	53                   	push   ebx
c000b874:	83 ec 4c             	sub    esp,0x4c
c000b877:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b87b:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b87f:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b882:	85 db                	test   ebx,ebx
c000b884:	0f 84 9b 06 00 00    	je     c000bf25 <sinc_multichan_vari_process+0x6ba>
c000b88a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b88d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b890:	0f af c5             	imul   eax,ebp
c000b893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b896:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b899:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b8a0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b8a7:	0f af c5             	imul   eax,ebp
c000b8aa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b8ad:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b8b0:	8b 06                	mov    eax,DWORD PTR [esi]
c000b8b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8ba:	68 00 00 70 3f       	push   0x3f700000
c000b8bf:	6a 00                	push   0x0
c000b8c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8c9:	e8 d1 b9 01 00       	call   c002729f <__ltdf2>
c000b8ce:	83 c4 10             	add    esp,0x10
c000b8d1:	ba 16 00 00 00       	mov    edx,0x16
c000b8d6:	85 c0                	test   eax,eax
c000b8d8:	0f 88 47 06 00 00    	js     c000bf25 <sinc_multichan_vari_process+0x6ba>
c000b8de:	68 00 00 70 40       	push   0x40700000
c000b8e3:	6a 00                	push   0x0
c000b8e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8ed:	e8 8f b9 01 00       	call   c0027281 <__gtdf2>
c000b8f2:	83 c4 10             	add    esp,0x10
c000b8f5:	ba 16 00 00 00       	mov    edx,0x16
c000b8fa:	85 c0                	test   eax,eax
c000b8fc:	0f 8f 23 06 00 00    	jg     c000bf25 <sinc_multichan_vari_process+0x6ba>
c000b902:	83 ec 0c             	sub    esp,0xc
c000b905:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b908:	e8 26 b7 01 00       	call   c0027033 <__floatsidf>
c000b90d:	83 c4 10             	add    esp,0x10
c000b910:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b914:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b918:	68 00 00 00 40       	push   0x40000000
c000b91d:	6a 00                	push   0x0
c000b91f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b923:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b927:	e8 27 aa 01 00       	call   c0026353 <__adddf3>
c000b92c:	59                   	pop    ecx
c000b92d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b931:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b935:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b938:	e8 f6 b6 01 00       	call   c0027033 <__floatsidf>
c000b93d:	83 c4 10             	add    esp,0x10
c000b940:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b944:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b948:	52                   	push   edx
c000b949:	50                   	push   eax
c000b94a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b952:	e8 5d b3 01 00       	call   c0026cb4 <__divdf3>
c000b957:	83 c4 10             	add    esp,0x10
c000b95a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b95e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b962:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b965:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b968:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b96c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b970:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b974:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b978:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b980:	e8 fc b8 01 00       	call   c0027281 <__gtdf2>
c000b985:	83 c4 10             	add    esp,0x10
c000b988:	85 c0                	test   eax,eax
c000b98a:	7e 2d                	jle    c000b9b9 <sinc_multichan_vari_process+0x14e>
c000b98c:	68 00 00 f0 3f       	push   0x3ff00000
c000b991:	6a 00                	push   0x0
c000b993:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b997:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b99b:	e8 ff b8 01 00       	call   c002729f <__ltdf2>
c000b9a0:	83 c4 10             	add    esp,0x10
c000b9a3:	85 c0                	test   eax,eax
c000b9a5:	79 4d                	jns    c000b9f4 <sinc_multichan_vari_process+0x189>
c000b9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b9af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b9b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b9b7:	eb 1b                	jmp    c000b9d4 <sinc_multichan_vari_process+0x169>
c000b9b9:	68 00 00 f0 3f       	push   0x3ff00000
c000b9be:	6a 00                	push   0x0
c000b9c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9c8:	e8 d2 b8 01 00       	call   c002729f <__ltdf2>
c000b9cd:	83 c4 10             	add    esp,0x10
c000b9d0:	85 c0                	test   eax,eax
c000b9d2:	79 20                	jns    c000b9f4 <sinc_multichan_vari_process+0x189>
c000b9d4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9e4:	e8 cb b2 01 00       	call   c0026cb4 <__divdf3>
c000b9e9:	83 c4 10             	add    esp,0x10
c000b9ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9f4:	50                   	push   eax
c000b9f5:	50                   	push   eax
c000b9f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9fe:	e8 4d ba 01 00       	call   c0027450 <lrint>
c000ba03:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000ba06:	40                   	inc    eax
c000ba07:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba0b:	0f af c5             	imul   eax,ebp
c000ba0e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ba12:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ba15:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba19:	58                   	pop    eax
c000ba1a:	5a                   	pop    edx
c000ba1b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba23:	e8 28 ba 01 00       	call   c0027450 <lrint>
c000ba28:	83 ec 0c             	sub    esp,0xc
c000ba2b:	50                   	push   eax
c000ba2c:	e8 02 b6 01 00       	call   c0027033 <__floatsidf>
c000ba31:	83 c4 10             	add    esp,0x10
c000ba34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba3c:	52                   	push   edx
c000ba3d:	50                   	push   eax
c000ba3e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba46:	e8 59 af 01 00       	call   c00269a4 <__subdf3>
c000ba4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba4f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba53:	83 c4 20             	add    esp,0x20
c000ba56:	6a 00                	push   0x0
c000ba58:	6a 00                	push   0x0
c000ba5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba62:	e8 38 b8 01 00       	call   c002729f <__ltdf2>
c000ba67:	83 c4 10             	add    esp,0x10
c000ba6a:	85 c0                	test   eax,eax
c000ba6c:	79 1f                	jns    c000ba8d <sinc_multichan_vari_process+0x222>
c000ba6e:	68 00 00 f0 3f       	push   0x3ff00000
c000ba73:	6a 00                	push   0x0
c000ba75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba7d:	e8 d1 a8 01 00       	call   c0026353 <__adddf3>
c000ba82:	83 c4 10             	add    esp,0x10
c000ba85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba89:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba8d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba90:	83 ec 10             	sub    esp,0x10
c000ba93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba97:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baa2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baa6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baaa:	e8 f5 ae 01 00       	call   c00269a4 <__subdf3>
c000baaf:	83 c4 18             	add    esp,0x18
c000bab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bab6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baba:	52                   	push   edx
c000babb:	50                   	push   eax
c000babc:	e8 8f b9 01 00       	call   c0027450 <lrint>
c000bac1:	0f af e8             	imul   ebp,eax
c000bac4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bac8:	01 e8                	add    eax,ebp
c000baca:	99                   	cdq    
c000bacb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bace:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bad1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bad5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bad9:	68 00 00 f0 3f       	push   0x3ff00000
c000bade:	6a 00                	push   0x0
c000bae0:	e8 cf b1 01 00       	call   c0026cb4 <__divdf3>
c000bae5:	83 c4 10             	add    esp,0x10
c000bae8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000baec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baf0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000baf5:	68 23 42 92 0c       	push   0xc924223
c000bafa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bafe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb02:	e8 4c a8 01 00       	call   c0026353 <__adddf3>
c000bb07:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bb0b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bb0f:	83 c4 20             	add    esp,0x20
c000bb12:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bb1a:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bb22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb25:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb28:	7d 50                	jge    c000bb7a <sinc_multichan_vari_process+0x30f>
c000bb2a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb2d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb30:	01 c8                	add    eax,ecx
c000bb32:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb35:	99                   	cdq    
c000bb36:	f7 f9                	idiv   ecx
c000bb38:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb3c:	7d 0c                	jge    c000bb4a <sinc_multichan_vari_process+0x2df>
c000bb3e:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bb41:	85 ed                	test   ebp,ebp
c000bb43:	79 6b                	jns    c000bbb0 <sinc_multichan_vari_process+0x345>
c000bb45:	e9 e6 00 00 00       	jmp    c000bc30 <sinc_multichan_vari_process+0x3c5>
c000bb4a:	50                   	push   eax
c000bb4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb4f:	57                   	push   edi
c000bb50:	53                   	push   ebx
c000bb51:	e8 9b fb ff ff       	call   c000b6f1 <prepare_data>
c000bb56:	83 c4 10             	add    esp,0x10
c000bb59:	89 c2                	mov    edx,eax
c000bb5b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb5e:	85 c0                	test   eax,eax
c000bb60:	0f 85 bf 03 00 00    	jne    c000bf25 <sinc_multichan_vari_process+0x6ba>
c000bb66:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb69:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb6c:	01 c8                	add    eax,ecx
c000bb6e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb71:	99                   	cdq    
c000bb72:	f7 f9                	idiv   ecx
c000bb74:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb78:	7c c4                	jl     c000bb3e <sinc_multichan_vari_process+0x2d3>
c000bb7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb82:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb85:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb8c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb90:	89 06                	mov    DWORD PTR [esi],eax
c000bb92:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb95:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb98:	99                   	cdq    
c000bb99:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb9c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb9f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bba2:	99                   	cdq    
c000bba3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bba6:	31 d2                	xor    edx,edx
c000bba8:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bbab:	e9 75 03 00 00       	jmp    c000bf25 <sinc_multichan_vari_process+0x6ba>
c000bbb0:	83 ec 0c             	sub    esp,0xc
c000bbb3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bbb6:	e8 78 b4 01 00       	call   c0027033 <__floatsidf>
c000bbbb:	83 c4 10             	add    esp,0x10
c000bbbe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bbc2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bbc6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd6:	e8 78 a7 01 00       	call   c0026353 <__adddf3>
c000bbdb:	83 c4 10             	add    esp,0x10
c000bbde:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bbe2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bbe6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbf6:	e8 58 a7 01 00       	call   c0026353 <__adddf3>
c000bbfb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbfe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc02:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc06:	e8 28 b4 01 00       	call   c0027033 <__floatsidf>
c000bc0b:	83 c4 10             	add    esp,0x10
c000bc0e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc12:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc16:	52                   	push   edx
c000bc17:	50                   	push   eax
c000bc18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc20:	e8 78 b6 01 00       	call   c002729d <__gedf2>
c000bc25:	83 c4 10             	add    esp,0x10
c000bc28:	85 c0                	test   eax,eax
c000bc2a:	0f 89 4a ff ff ff    	jns    c000bb7a <sinc_multichan_vari_process+0x30f>
c000bc30:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc34:	0f 8e ed 00 00 00    	jle    c000bd27 <sinc_multichan_vari_process+0x4bc>
c000bc3a:	83 ec 10             	sub    esp,0x10
c000bc3d:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc40:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc43:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc46:	ff 36                	push   DWORD PTR [esi]
c000bc48:	e8 57 ad 01 00       	call   c00269a4 <__subdf3>
c000bc4d:	83 c4 18             	add    esp,0x18
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	52                   	push   edx
c000bc59:	50                   	push   eax
c000bc5a:	e8 d1 b7 01 00       	call   c0027430 <fabs>
c000bc5f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc63:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc67:	83 c4 10             	add    esp,0x10
c000bc6a:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc6f:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc78:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc7c:	e8 00 b6 01 00       	call   c0027281 <__gtdf2>
c000bc81:	83 c4 10             	add    esp,0x10
c000bc84:	85 c0                	test   eax,eax
c000bc86:	0f 8e 9b 00 00 00    	jle    c000bd27 <sinc_multichan_vari_process+0x4bc>
c000bc8c:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc8e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc91:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc95:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc99:	52                   	push   edx
c000bc9a:	50                   	push   eax
c000bc9b:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc9e:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bca1:	e8 fe ac 01 00       	call   c00269a4 <__subdf3>
c000bca6:	59                   	pop    ecx
c000bca7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bcab:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bcaf:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bcb2:	e8 7c b3 01 00       	call   c0027033 <__floatsidf>
c000bcb7:	83 c4 10             	add    esp,0x10
c000bcba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcbe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcc2:	52                   	push   edx
c000bcc3:	50                   	push   eax
c000bcc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bccc:	e8 ff ac 01 00       	call   c00269d0 <__muldf3>
c000bcd1:	5d                   	pop    ebp
c000bcd2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bcd6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bcda:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bcdd:	e8 51 b3 01 00       	call   c0027033 <__floatsidf>
c000bce2:	83 c4 10             	add    esp,0x10
c000bce5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bce9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bced:	52                   	push   edx
c000bcee:	50                   	push   eax
c000bcef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcf7:	e8 b8 af 01 00       	call   c0026cb4 <__divdf3>
c000bcfc:	83 c4 10             	add    esp,0x10
c000bcff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd17:	e8 37 a6 01 00       	call   c0026353 <__adddf3>
c000bd1c:	83 c4 10             	add    esp,0x10
c000bd1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd23:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bd27:	83 ec 0c             	sub    esp,0xc
c000bd2a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd2d:	e8 01 b3 01 00       	call   c0027033 <__floatsidf>
c000bd32:	83 c4 10             	add    esp,0x10
c000bd35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd39:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd4d:	e8 4d b5 01 00       	call   c002729f <__ltdf2>
c000bd52:	83 c4 10             	add    esp,0x10
c000bd55:	85 c0                	test   eax,eax
c000bd57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd5b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd5f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd63:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd67:	78 10                	js     c000bd79 <sinc_multichan_vari_process+0x50e>
c000bd69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd6d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd75:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd79:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd7d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd89:	e8 42 ac 01 00       	call   c00269d0 <__muldf3>
c000bd8e:	59                   	pop    ecx
c000bd8f:	5d                   	pop    ebp
c000bd90:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda0:	e8 25 f9 ff ff       	call   c000b6ca <double_to_fp>
c000bda5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bda9:	89 c5                	mov    ebp,eax
c000bdab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdaf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdb3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdb7:	e8 14 ac 01 00       	call   c00269d0 <__muldf3>
c000bdbc:	83 c4 18             	add    esp,0x18
c000bdbf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdc3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdc7:	52                   	push   edx
c000bdc8:	50                   	push   eax
c000bdc9:	e8 fc f8 ff ff       	call   c000b6ca <double_to_fp>
c000bdce:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bdd1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bdd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bdd8:	8d 04 90             	lea    eax,[eax+edx*4]
c000bddb:	50                   	push   eax
c000bddc:	50                   	push   eax
c000bddd:	50                   	push   eax
c000bdde:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bde1:	e8 4d b2 01 00       	call   c0027033 <__floatsidf>
c000bde6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bdea:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bdee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdf2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdf6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdfa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdfe:	e8 b1 ae 01 00       	call   c0026cb4 <__divdf3>
c000be03:	83 c4 1c             	add    esp,0x1c
c000be06:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000be0a:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000be0e:	52                   	push   edx
c000be0f:	89 ea                	mov    edx,ebp
c000be11:	50                   	push   eax
c000be12:	89 d8                	mov    eax,ebx
c000be14:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be17:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000be1b:	e8 69 ed ff ff       	call   c000ab89 <calc_output_multi>
c000be20:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be23:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be26:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be2a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be2e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be32:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be36:	e8 79 ae 01 00       	call   c0026cb4 <__divdf3>
c000be3b:	83 c4 10             	add    esp,0x10
c000be3e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000be42:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000be46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be4a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be56:	e8 f8 a4 01 00       	call   c0026353 <__adddf3>
c000be5b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be5f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be63:	83 c4 28             	add    esp,0x28
c000be66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be6e:	e8 dd b5 01 00       	call   c0027450 <lrint>
c000be73:	83 ec 0c             	sub    esp,0xc
c000be76:	50                   	push   eax
c000be77:	e8 b7 b1 01 00       	call   c0027033 <__floatsidf>
c000be7c:	83 c4 10             	add    esp,0x10
c000be7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be87:	52                   	push   edx
c000be88:	50                   	push   eax
c000be89:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be91:	e8 0e ab 01 00       	call   c00269a4 <__subdf3>
c000be96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be9e:	83 c4 20             	add    esp,0x20
c000bea1:	6a 00                	push   0x0
c000bea3:	6a 00                	push   0x0
c000bea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bead:	e8 ed b3 01 00       	call   c002729f <__ltdf2>
c000beb2:	83 c4 10             	add    esp,0x10
c000beb5:	85 c0                	test   eax,eax
c000beb7:	79 20                	jns    c000bed9 <sinc_multichan_vari_process+0x66e>
c000beb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bebd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bec1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bec5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bec9:	e8 85 a4 01 00       	call   c0026353 <__adddf3>
c000bece:	83 c4 10             	add    esp,0x10
c000bed1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bed5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bed9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bedc:	83 ec 10             	sub    esp,0x10
c000bedf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000bee3:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bef2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bef6:	e8 a9 aa 01 00       	call   c00269a4 <__subdf3>
c000befb:	83 c4 18             	add    esp,0x18
c000befe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf02:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf06:	52                   	push   edx
c000bf07:	50                   	push   eax
c000bf08:	e8 43 b5 01 00       	call   c0027450 <lrint>
c000bf0d:	0f af e8             	imul   ebp,eax
c000bf10:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf14:	83 c4 10             	add    esp,0x10
c000bf17:	01 e8                	add    eax,ebp
c000bf19:	99                   	cdq    
c000bf1a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bf1d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bf20:	e9 fd fb ff ff       	jmp    c000bb22 <sinc_multichan_vari_process+0x2b7>
c000bf25:	83 c4 4c             	add    esp,0x4c
c000bf28:	89 d0                	mov    eax,edx
c000bf2a:	5b                   	pop    ebx
c000bf2b:	5e                   	pop    esi
c000bf2c:	5f                   	pop    edi
c000bf2d:	5d                   	pop    ebp
c000bf2e:	c3                   	ret    

c000bf2f <sinc_hex_vari_process>:
c000bf2f:	55                   	push   ebp
c000bf30:	ba 05 00 00 00       	mov    edx,0x5
c000bf35:	57                   	push   edi
c000bf36:	56                   	push   esi
c000bf37:	53                   	push   ebx
c000bf38:	83 ec 4c             	sub    esp,0x4c
c000bf3b:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bf3f:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bf43:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bf46:	85 db                	test   ebx,ebx
c000bf48:	0f 84 9c 06 00 00    	je     c000c5ea <sinc_hex_vari_process+0x6bb>
c000bf4e:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf51:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf54:	0f af c7             	imul   eax,edi
c000bf57:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf5a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf5d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf64:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf6b:	0f af c7             	imul   eax,edi
c000bf6e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf71:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf74:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf77:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf7b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf7f:	68 00 00 70 3f       	push   0x3f700000
c000bf84:	6a 00                	push   0x0
c000bf86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf8e:	e8 0c b3 01 00       	call   c002729f <__ltdf2>
c000bf93:	83 c4 10             	add    esp,0x10
c000bf96:	ba 16 00 00 00       	mov    edx,0x16
c000bf9b:	85 c0                	test   eax,eax
c000bf9d:	0f 88 47 06 00 00    	js     c000c5ea <sinc_hex_vari_process+0x6bb>
c000bfa3:	68 00 00 70 40       	push   0x40700000
c000bfa8:	6a 00                	push   0x0
c000bfaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfb2:	e8 ca b2 01 00       	call   c0027281 <__gtdf2>
c000bfb7:	83 c4 10             	add    esp,0x10
c000bfba:	ba 16 00 00 00       	mov    edx,0x16
c000bfbf:	85 c0                	test   eax,eax
c000bfc1:	0f 8f 23 06 00 00    	jg     c000c5ea <sinc_hex_vari_process+0x6bb>
c000bfc7:	83 ec 0c             	sub    esp,0xc
c000bfca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bfcd:	e8 61 b0 01 00       	call   c0027033 <__floatsidf>
c000bfd2:	83 c4 10             	add    esp,0x10
c000bfd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfdd:	68 00 00 00 40       	push   0x40000000
c000bfe2:	6a 00                	push   0x0
c000bfe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfec:	e8 62 a3 01 00       	call   c0026353 <__adddf3>
c000bff1:	59                   	pop    ecx
c000bff2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bff6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bffa:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bffd:	e8 31 b0 01 00       	call   c0027033 <__floatsidf>
c000c002:	83 c4 10             	add    esp,0x10
c000c005:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c009:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c00d:	52                   	push   edx
c000c00e:	50                   	push   eax
c000c00f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c013:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c017:	e8 98 ac 01 00       	call   c0026cb4 <__divdf3>
c000c01c:	83 c4 10             	add    esp,0x10
c000c01f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c023:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c027:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c02a:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c02d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c031:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c035:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c039:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c03d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c041:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c045:	e8 37 b2 01 00       	call   c0027281 <__gtdf2>
c000c04a:	83 c4 10             	add    esp,0x10
c000c04d:	85 c0                	test   eax,eax
c000c04f:	7e 2d                	jle    c000c07e <sinc_hex_vari_process+0x14f>
c000c051:	68 00 00 f0 3f       	push   0x3ff00000
c000c056:	6a 00                	push   0x0
c000c058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c05c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c060:	e8 3a b2 01 00       	call   c002729f <__ltdf2>
c000c065:	83 c4 10             	add    esp,0x10
c000c068:	85 c0                	test   eax,eax
c000c06a:	79 4d                	jns    c000c0b9 <sinc_hex_vari_process+0x18a>
c000c06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c070:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c074:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c078:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c07c:	eb 1b                	jmp    c000c099 <sinc_hex_vari_process+0x16a>
c000c07e:	68 00 00 f0 3f       	push   0x3ff00000
c000c083:	6a 00                	push   0x0
c000c085:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c089:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c08d:	e8 0d b2 01 00       	call   c002729f <__ltdf2>
c000c092:	83 c4 10             	add    esp,0x10
c000c095:	85 c0                	test   eax,eax
c000c097:	79 20                	jns    c000c0b9 <sinc_hex_vari_process+0x18a>
c000c099:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c09d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c0a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0a9:	e8 06 ac 01 00       	call   c0026cb4 <__divdf3>
c000c0ae:	83 c4 10             	add    esp,0x10
c000c0b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0b5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0b9:	50                   	push   eax
c000c0ba:	50                   	push   eax
c000c0bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0c3:	e8 88 b3 01 00       	call   c0027450 <lrint>
c000c0c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c0cb:	40                   	inc    eax
c000c0cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0d0:	0f af c7             	imul   eax,edi
c000c0d3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c0d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c0da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0de:	58                   	pop    eax
c000c0df:	5a                   	pop    edx
c000c0e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0e8:	e8 63 b3 01 00       	call   c0027450 <lrint>
c000c0ed:	83 ec 0c             	sub    esp,0xc
c000c0f0:	50                   	push   eax
c000c0f1:	e8 3d af 01 00       	call   c0027033 <__floatsidf>
c000c0f6:	83 c4 10             	add    esp,0x10
c000c0f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c101:	52                   	push   edx
c000c102:	50                   	push   eax
c000c103:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c107:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c10b:	e8 94 a8 01 00       	call   c00269a4 <__subdf3>
c000c110:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c114:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c118:	83 c4 20             	add    esp,0x20
c000c11b:	6a 00                	push   0x0
c000c11d:	6a 00                	push   0x0
c000c11f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c127:	e8 73 b1 01 00       	call   c002729f <__ltdf2>
c000c12c:	83 c4 10             	add    esp,0x10
c000c12f:	85 c0                	test   eax,eax
c000c131:	79 1f                	jns    c000c152 <sinc_hex_vari_process+0x223>
c000c133:	68 00 00 f0 3f       	push   0x3ff00000
c000c138:	6a 00                	push   0x0
c000c13a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c13e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c142:	e8 0c a2 01 00       	call   c0026353 <__adddf3>
c000c147:	83 c4 10             	add    esp,0x10
c000c14a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c14e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c152:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c155:	83 ec 10             	sub    esp,0x10
c000c158:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c15c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c15f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c163:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c167:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c16b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c16f:	e8 30 a8 01 00       	call   c00269a4 <__subdf3>
c000c174:	83 c4 18             	add    esp,0x18
c000c177:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c17b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c17f:	52                   	push   edx
c000c180:	50                   	push   eax
c000c181:	e8 ca b2 01 00       	call   c0027450 <lrint>
c000c186:	0f af f8             	imul   edi,eax
c000c189:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c18d:	01 f8                	add    eax,edi
c000c18f:	99                   	cdq    
c000c190:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c193:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c196:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c19a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c19e:	68 00 00 f0 3f       	push   0x3ff00000
c000c1a3:	6a 00                	push   0x0
c000c1a5:	e8 0a ab 01 00       	call   c0026cb4 <__divdf3>
c000c1aa:	83 c4 10             	add    esp,0x10
c000c1ad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c1b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c1b5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c1ba:	68 23 42 92 0c       	push   0xc924223
c000c1bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1c7:	e8 87 a1 01 00       	call   c0026353 <__adddf3>
c000c1cc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c1d0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c1d4:	83 c4 20             	add    esp,0x20
c000c1d7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c1df:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c1e7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c1ea:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1ed:	7d 50                	jge    c000c23f <sinc_hex_vari_process+0x310>
c000c1ef:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1f5:	01 c8                	add    eax,ecx
c000c1f7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1fa:	99                   	cdq    
c000c1fb:	f7 f9                	idiv   ecx
c000c1fd:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c201:	7d 0c                	jge    c000c20f <sinc_hex_vari_process+0x2e0>
c000c203:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c206:	85 ff                	test   edi,edi
c000c208:	79 6c                	jns    c000c276 <sinc_hex_vari_process+0x347>
c000c20a:	e9 e7 00 00 00       	jmp    c000c2f6 <sinc_hex_vari_process+0x3c7>
c000c20f:	50                   	push   eax
c000c210:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c214:	56                   	push   esi
c000c215:	53                   	push   ebx
c000c216:	e8 d6 f4 ff ff       	call   c000b6f1 <prepare_data>
c000c21b:	83 c4 10             	add    esp,0x10
c000c21e:	89 c2                	mov    edx,eax
c000c220:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c223:	85 c0                	test   eax,eax
c000c225:	0f 85 bf 03 00 00    	jne    c000c5ea <sinc_hex_vari_process+0x6bb>
c000c22b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c22e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c231:	01 c8                	add    eax,ecx
c000c233:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c236:	99                   	cdq    
c000c237:	f7 f9                	idiv   ecx
c000c239:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c23d:	7c c4                	jl     c000c203 <sinc_hex_vari_process+0x2d4>
c000c23f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c243:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c247:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c24a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c24d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c251:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c255:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c258:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c25b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c25e:	99                   	cdq    
c000c25f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c262:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c265:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c268:	99                   	cdq    
c000c269:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c26c:	31 d2                	xor    edx,edx
c000c26e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c271:	e9 74 03 00 00       	jmp    c000c5ea <sinc_hex_vari_process+0x6bb>
c000c276:	83 ec 0c             	sub    esp,0xc
c000c279:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c27c:	e8 b2 ad 01 00       	call   c0027033 <__floatsidf>
c000c281:	83 c4 10             	add    esp,0x10
c000c284:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c288:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c28c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c290:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c298:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c29c:	e8 b2 a0 01 00       	call   c0026353 <__adddf3>
c000c2a1:	83 c4 10             	add    esp,0x10
c000c2a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c2a8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c2ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2bc:	e8 92 a0 01 00       	call   c0026353 <__adddf3>
c000c2c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c2c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2c8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2cc:	e8 62 ad 01 00       	call   c0027033 <__floatsidf>
c000c2d1:	83 c4 10             	add    esp,0x10
c000c2d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2d8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2dc:	52                   	push   edx
c000c2dd:	50                   	push   eax
c000c2de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2e6:	e8 b2 af 01 00       	call   c002729d <__gedf2>
c000c2eb:	83 c4 10             	add    esp,0x10
c000c2ee:	85 c0                	test   eax,eax
c000c2f0:	0f 89 49 ff ff ff    	jns    c000c23f <sinc_hex_vari_process+0x310>
c000c2f6:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2fa:	0f 8e ef 00 00 00    	jle    c000c3ef <sinc_hex_vari_process+0x4c0>
c000c300:	83 ec 10             	sub    esp,0x10
c000c303:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c306:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c309:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c30c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c30f:	e8 90 a6 01 00       	call   c00269a4 <__subdf3>
c000c314:	83 c4 18             	add    esp,0x18
c000c317:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c31b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31f:	52                   	push   edx
c000c320:	50                   	push   eax
c000c321:	e8 0a b1 01 00       	call   c0027430 <fabs>
c000c326:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c32a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c32e:	83 c4 10             	add    esp,0x10
c000c331:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c336:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c33b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c33f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c343:	e8 39 af 01 00       	call   c0027281 <__gtdf2>
c000c348:	83 c4 10             	add    esp,0x10
c000c34b:	85 c0                	test   eax,eax
c000c34d:	0f 8e 9c 00 00 00    	jle    c000c3ef <sinc_hex_vari_process+0x4c0>
c000c353:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c356:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c359:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c35d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c361:	52                   	push   edx
c000c362:	50                   	push   eax
c000c363:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c366:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c369:	e8 36 a6 01 00       	call   c00269a4 <__subdf3>
c000c36e:	59                   	pop    ecx
c000c36f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c373:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c377:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c37a:	e8 b4 ac 01 00       	call   c0027033 <__floatsidf>
c000c37f:	83 c4 10             	add    esp,0x10
c000c382:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c386:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c38a:	52                   	push   edx
c000c38b:	50                   	push   eax
c000c38c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c390:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c394:	e8 37 a6 01 00       	call   c00269d0 <__muldf3>
c000c399:	5f                   	pop    edi
c000c39a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c39e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c3a2:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c3a5:	e8 89 ac 01 00       	call   c0027033 <__floatsidf>
c000c3aa:	83 c4 10             	add    esp,0x10
c000c3ad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3b5:	52                   	push   edx
c000c3b6:	50                   	push   eax
c000c3b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3bf:	e8 f0 a8 01 00       	call   c0026cb4 <__divdf3>
c000c3c4:	83 c4 10             	add    esp,0x10
c000c3c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3cb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3df:	e8 6f 9f 01 00       	call   c0026353 <__adddf3>
c000c3e4:	83 c4 10             	add    esp,0x10
c000c3e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3ef:	83 ec 0c             	sub    esp,0xc
c000c3f2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3f5:	e8 39 ac 01 00       	call   c0027033 <__floatsidf>
c000c3fa:	83 c4 10             	add    esp,0x10
c000c3fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c401:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c405:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c409:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c40d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c411:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c415:	e8 85 ae 01 00       	call   c002729f <__ltdf2>
c000c41a:	83 c4 10             	add    esp,0x10
c000c41d:	85 c0                	test   eax,eax
c000c41f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c423:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c427:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c42b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c42f:	78 10                	js     c000c441 <sinc_hex_vari_process+0x512>
c000c431:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c435:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c439:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c43d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c441:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c445:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c449:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c44d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c451:	e8 7a a5 01 00       	call   c00269d0 <__muldf3>
c000c456:	59                   	pop    ecx
c000c457:	5f                   	pop    edi
c000c458:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c45c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c460:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c464:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c468:	e8 5d f2 ff ff       	call   c000b6ca <double_to_fp>
c000c46d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c471:	89 c7                	mov    edi,eax
c000c473:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c477:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c47b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c47f:	e8 4c a5 01 00       	call   c00269d0 <__muldf3>
c000c484:	83 c4 18             	add    esp,0x18
c000c487:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c48b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c48f:	52                   	push   edx
c000c490:	50                   	push   eax
c000c491:	e8 34 f2 ff ff       	call   c000b6ca <double_to_fp>
c000c496:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c499:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c49d:	83 c4 0c             	add    esp,0xc
c000c4a0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c4a3:	8d 04 90             	lea    eax,[eax+edx*4]
c000c4a6:	50                   	push   eax
c000c4a7:	50                   	push   eax
c000c4a8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c4ab:	e8 83 ab 01 00       	call   c0027033 <__floatsidf>
c000c4b0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c4b4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c4b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4c0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4c8:	e8 e7 a7 01 00       	call   c0026cb4 <__divdf3>
c000c4cd:	83 c4 18             	add    esp,0x18
c000c4d0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4d4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4d8:	52                   	push   edx
c000c4d9:	89 fa                	mov    edx,edi
c000c4db:	50                   	push   eax
c000c4dc:	89 d8                	mov    eax,ebx
c000c4de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c4e2:	e8 50 de ff ff       	call   c000a337 <calc_output_hex>
c000c4e7:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4fb:	e8 b4 a7 01 00       	call   c0026cb4 <__divdf3>
c000c500:	83 c4 10             	add    esp,0x10
c000c503:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c507:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c50b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c50f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c513:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c517:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c51b:	e8 33 9e 01 00       	call   c0026353 <__adddf3>
c000c520:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c524:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c528:	83 c4 18             	add    esp,0x18
c000c52b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c52f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c533:	e8 18 af 01 00       	call   c0027450 <lrint>
c000c538:	83 ec 0c             	sub    esp,0xc
c000c53b:	50                   	push   eax
c000c53c:	e8 f2 aa 01 00       	call   c0027033 <__floatsidf>
c000c541:	83 c4 10             	add    esp,0x10
c000c544:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c548:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c54c:	52                   	push   edx
c000c54d:	50                   	push   eax
c000c54e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c552:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c556:	e8 49 a4 01 00       	call   c00269a4 <__subdf3>
c000c55b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c55f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c563:	83 c4 20             	add    esp,0x20
c000c566:	6a 00                	push   0x0
c000c568:	6a 00                	push   0x0
c000c56a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c56e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c572:	e8 28 ad 01 00       	call   c002729f <__ltdf2>
c000c577:	83 c4 10             	add    esp,0x10
c000c57a:	85 c0                	test   eax,eax
c000c57c:	79 20                	jns    c000c59e <sinc_hex_vari_process+0x66f>
c000c57e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c586:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c58a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c58e:	e8 c0 9d 01 00       	call   c0026353 <__adddf3>
c000c593:	83 c4 10             	add    esp,0x10
c000c596:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c59a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c59e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c5a1:	83 ec 10             	sub    esp,0x10
c000c5a4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c5a8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5b3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5bb:	e8 e4 a3 01 00       	call   c00269a4 <__subdf3>
c000c5c0:	83 c4 18             	add    esp,0x18
c000c5c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cb:	52                   	push   edx
c000c5cc:	50                   	push   eax
c000c5cd:	e8 7e ae 01 00       	call   c0027450 <lrint>
c000c5d2:	0f af f8             	imul   edi,eax
c000c5d5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c5d9:	83 c4 10             	add    esp,0x10
c000c5dc:	01 f8                	add    eax,edi
c000c5de:	99                   	cdq    
c000c5df:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c5e2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c5e5:	e9 fd fb ff ff       	jmp    c000c1e7 <sinc_hex_vari_process+0x2b8>
c000c5ea:	83 c4 4c             	add    esp,0x4c
c000c5ed:	89 d0                	mov    eax,edx
c000c5ef:	5b                   	pop    ebx
c000c5f0:	5e                   	pop    esi
c000c5f1:	5f                   	pop    edi
c000c5f2:	5d                   	pop    ebp
c000c5f3:	c3                   	ret    

c000c5f4 <sinc_quad_vari_process>:
c000c5f4:	55                   	push   ebp
c000c5f5:	ba 05 00 00 00       	mov    edx,0x5
c000c5fa:	57                   	push   edi
c000c5fb:	56                   	push   esi
c000c5fc:	53                   	push   ebx
c000c5fd:	83 ec 4c             	sub    esp,0x4c
c000c600:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c604:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c608:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c60b:	85 db                	test   ebx,ebx
c000c60d:	0f 84 9c 06 00 00    	je     c000ccaf <sinc_quad_vari_process+0x6bb>
c000c613:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c616:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c619:	0f af c7             	imul   eax,edi
c000c61c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c61f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c622:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c629:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c630:	0f af c7             	imul   eax,edi
c000c633:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c636:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c639:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c640:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c644:	68 00 00 70 3f       	push   0x3f700000
c000c649:	6a 00                	push   0x0
c000c64b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c64f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c653:	e8 47 ac 01 00       	call   c002729f <__ltdf2>
c000c658:	83 c4 10             	add    esp,0x10
c000c65b:	ba 16 00 00 00       	mov    edx,0x16
c000c660:	85 c0                	test   eax,eax
c000c662:	0f 88 47 06 00 00    	js     c000ccaf <sinc_quad_vari_process+0x6bb>
c000c668:	68 00 00 70 40       	push   0x40700000
c000c66d:	6a 00                	push   0x0
c000c66f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c673:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c677:	e8 05 ac 01 00       	call   c0027281 <__gtdf2>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	ba 16 00 00 00       	mov    edx,0x16
c000c684:	85 c0                	test   eax,eax
c000c686:	0f 8f 23 06 00 00    	jg     c000ccaf <sinc_quad_vari_process+0x6bb>
c000c68c:	83 ec 0c             	sub    esp,0xc
c000c68f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c692:	e8 9c a9 01 00       	call   c0027033 <__floatsidf>
c000c697:	83 c4 10             	add    esp,0x10
c000c69a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c69e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6a2:	68 00 00 00 40       	push   0x40000000
c000c6a7:	6a 00                	push   0x0
c000c6a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b1:	e8 9d 9c 01 00       	call   c0026353 <__adddf3>
c000c6b6:	59                   	pop    ecx
c000c6b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c6bb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c6bf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6c2:	e8 6c a9 01 00       	call   c0027033 <__floatsidf>
c000c6c7:	83 c4 10             	add    esp,0x10
c000c6ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6d2:	52                   	push   edx
c000c6d3:	50                   	push   eax
c000c6d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6dc:	e8 d3 a5 01 00       	call   c0026cb4 <__divdf3>
c000c6e1:	83 c4 10             	add    esp,0x10
c000c6e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6e8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6ec:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6ef:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c706:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c70a:	e8 72 ab 01 00       	call   c0027281 <__gtdf2>
c000c70f:	83 c4 10             	add    esp,0x10
c000c712:	85 c0                	test   eax,eax
c000c714:	7e 2d                	jle    c000c743 <sinc_quad_vari_process+0x14f>
c000c716:	68 00 00 f0 3f       	push   0x3ff00000
c000c71b:	6a 00                	push   0x0
c000c71d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c725:	e8 75 ab 01 00       	call   c002729f <__ltdf2>
c000c72a:	83 c4 10             	add    esp,0x10
c000c72d:	85 c0                	test   eax,eax
c000c72f:	79 4d                	jns    c000c77e <sinc_quad_vari_process+0x18a>
c000c731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c735:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c739:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c73d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c741:	eb 1b                	jmp    c000c75e <sinc_quad_vari_process+0x16a>
c000c743:	68 00 00 f0 3f       	push   0x3ff00000
c000c748:	6a 00                	push   0x0
c000c74a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c74e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c752:	e8 48 ab 01 00       	call   c002729f <__ltdf2>
c000c757:	83 c4 10             	add    esp,0x10
c000c75a:	85 c0                	test   eax,eax
c000c75c:	79 20                	jns    c000c77e <sinc_quad_vari_process+0x18a>
c000c75e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c762:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c766:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c76a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c76e:	e8 41 a5 01 00       	call   c0026cb4 <__divdf3>
c000c773:	83 c4 10             	add    esp,0x10
c000c776:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c77a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c77e:	50                   	push   eax
c000c77f:	50                   	push   eax
c000c780:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c784:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c788:	e8 c3 ac 01 00       	call   c0027450 <lrint>
c000c78d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c790:	40                   	inc    eax
c000c791:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c795:	0f af c7             	imul   eax,edi
c000c798:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c79c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c79f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7a3:	58                   	pop    eax
c000c7a4:	5a                   	pop    edx
c000c7a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7ad:	e8 9e ac 01 00       	call   c0027450 <lrint>
c000c7b2:	83 ec 0c             	sub    esp,0xc
c000c7b5:	50                   	push   eax
c000c7b6:	e8 78 a8 01 00       	call   c0027033 <__floatsidf>
c000c7bb:	83 c4 10             	add    esp,0x10
c000c7be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7c6:	52                   	push   edx
c000c7c7:	50                   	push   eax
c000c7c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7d0:	e8 cf a1 01 00       	call   c00269a4 <__subdf3>
c000c7d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7dd:	83 c4 20             	add    esp,0x20
c000c7e0:	6a 00                	push   0x0
c000c7e2:	6a 00                	push   0x0
c000c7e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7ec:	e8 ae aa 01 00       	call   c002729f <__ltdf2>
c000c7f1:	83 c4 10             	add    esp,0x10
c000c7f4:	85 c0                	test   eax,eax
c000c7f6:	79 1f                	jns    c000c817 <sinc_quad_vari_process+0x223>
c000c7f8:	68 00 00 f0 3f       	push   0x3ff00000
c000c7fd:	6a 00                	push   0x0
c000c7ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c803:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c807:	e8 47 9b 01 00       	call   c0026353 <__adddf3>
c000c80c:	83 c4 10             	add    esp,0x10
c000c80f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c813:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c817:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c81a:	83 ec 10             	sub    esp,0x10
c000c81d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c821:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c828:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c82c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c830:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c834:	e8 6b a1 01 00       	call   c00269a4 <__subdf3>
c000c839:	83 c4 18             	add    esp,0x18
c000c83c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c840:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c844:	52                   	push   edx
c000c845:	50                   	push   eax
c000c846:	e8 05 ac 01 00       	call   c0027450 <lrint>
c000c84b:	0f af f8             	imul   edi,eax
c000c84e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c852:	01 f8                	add    eax,edi
c000c854:	99                   	cdq    
c000c855:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c858:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c85b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c85f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c863:	68 00 00 f0 3f       	push   0x3ff00000
c000c868:	6a 00                	push   0x0
c000c86a:	e8 45 a4 01 00       	call   c0026cb4 <__divdf3>
c000c86f:	83 c4 10             	add    esp,0x10
c000c872:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c876:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c87a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c87f:	68 23 42 92 0c       	push   0xc924223
c000c884:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c888:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c88c:	e8 c2 9a 01 00       	call   c0026353 <__adddf3>
c000c891:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c895:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c899:	83 c4 20             	add    esp,0x20
c000c89c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c8a4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c8ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c8af:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c8b2:	7d 50                	jge    c000c904 <sinc_quad_vari_process+0x310>
c000c8b4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8b7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8ba:	01 c8                	add    eax,ecx
c000c8bc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8bf:	99                   	cdq    
c000c8c0:	f7 f9                	idiv   ecx
c000c8c2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8c6:	7d 0c                	jge    c000c8d4 <sinc_quad_vari_process+0x2e0>
c000c8c8:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c8cb:	85 ff                	test   edi,edi
c000c8cd:	79 6c                	jns    c000c93b <sinc_quad_vari_process+0x347>
c000c8cf:	e9 e7 00 00 00       	jmp    c000c9bb <sinc_quad_vari_process+0x3c7>
c000c8d4:	50                   	push   eax
c000c8d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8d9:	56                   	push   esi
c000c8da:	53                   	push   ebx
c000c8db:	e8 11 ee ff ff       	call   c000b6f1 <prepare_data>
c000c8e0:	83 c4 10             	add    esp,0x10
c000c8e3:	89 c2                	mov    edx,eax
c000c8e5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c8e8:	85 c0                	test   eax,eax
c000c8ea:	0f 85 bf 03 00 00    	jne    c000ccaf <sinc_quad_vari_process+0x6bb>
c000c8f0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8f3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8f6:	01 c8                	add    eax,ecx
c000c8f8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8fb:	99                   	cdq    
c000c8fc:	f7 f9                	idiv   ecx
c000c8fe:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c902:	7c c4                	jl     c000c8c8 <sinc_quad_vari_process+0x2d4>
c000c904:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c908:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c90c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c90f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c916:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c91a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c91d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c920:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c923:	99                   	cdq    
c000c924:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c927:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c92a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c92d:	99                   	cdq    
c000c92e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c931:	31 d2                	xor    edx,edx
c000c933:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c936:	e9 74 03 00 00       	jmp    c000ccaf <sinc_quad_vari_process+0x6bb>
c000c93b:	83 ec 0c             	sub    esp,0xc
c000c93e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c941:	e8 ed a6 01 00       	call   c0027033 <__floatsidf>
c000c946:	83 c4 10             	add    esp,0x10
c000c949:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c94d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c951:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c955:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c959:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c95d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c961:	e8 ed 99 01 00       	call   c0026353 <__adddf3>
c000c966:	83 c4 10             	add    esp,0x10
c000c969:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c96d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c971:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c975:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c979:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c97d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c981:	e8 cd 99 01 00       	call   c0026353 <__adddf3>
c000c986:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c989:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c98d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c991:	e8 9d a6 01 00       	call   c0027033 <__floatsidf>
c000c996:	83 c4 10             	add    esp,0x10
c000c999:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c99d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a1:	52                   	push   edx
c000c9a2:	50                   	push   eax
c000c9a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9ab:	e8 ed a8 01 00       	call   c002729d <__gedf2>
c000c9b0:	83 c4 10             	add    esp,0x10
c000c9b3:	85 c0                	test   eax,eax
c000c9b5:	0f 89 49 ff ff ff    	jns    c000c904 <sinc_quad_vari_process+0x310>
c000c9bb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c9bf:	0f 8e ef 00 00 00    	jle    c000cab4 <sinc_quad_vari_process+0x4c0>
c000c9c5:	83 ec 10             	sub    esp,0x10
c000c9c8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9cb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9ce:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c9d1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c9d4:	e8 cb 9f 01 00       	call   c00269a4 <__subdf3>
c000c9d9:	83 c4 18             	add    esp,0x18
c000c9dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e4:	52                   	push   edx
c000c9e5:	50                   	push   eax
c000c9e6:	e8 45 aa 01 00       	call   c0027430 <fabs>
c000c9eb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9f3:	83 c4 10             	add    esp,0x10
c000c9f6:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9fb:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000ca00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca08:	e8 74 a8 01 00       	call   c0027281 <__gtdf2>
c000ca0d:	83 c4 10             	add    esp,0x10
c000ca10:	85 c0                	test   eax,eax
c000ca12:	0f 8e 9c 00 00 00    	jle    c000cab4 <sinc_quad_vari_process+0x4c0>
c000ca18:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca1b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ca1e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca26:	52                   	push   edx
c000ca27:	50                   	push   eax
c000ca28:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ca2b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ca2e:	e8 71 9f 01 00       	call   c00269a4 <__subdf3>
c000ca33:	59                   	pop    ecx
c000ca34:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca38:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca3c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ca3f:	e8 ef a5 01 00       	call   c0027033 <__floatsidf>
c000ca44:	83 c4 10             	add    esp,0x10
c000ca47:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca4b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca4f:	52                   	push   edx
c000ca50:	50                   	push   eax
c000ca51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca59:	e8 72 9f 01 00       	call   c00269d0 <__muldf3>
c000ca5e:	5f                   	pop    edi
c000ca5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca63:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca67:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca6a:	e8 c4 a5 01 00       	call   c0027033 <__floatsidf>
c000ca6f:	83 c4 10             	add    esp,0x10
c000ca72:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7a:	52                   	push   edx
c000ca7b:	50                   	push   eax
c000ca7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca84:	e8 2b a2 01 00       	call   c0026cb4 <__divdf3>
c000ca89:	83 c4 10             	add    esp,0x10
c000ca8c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca90:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000caa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000caa4:	e8 aa 98 01 00       	call   c0026353 <__adddf3>
c000caa9:	83 c4 10             	add    esp,0x10
c000caac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cab0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cab4:	83 ec 0c             	sub    esp,0xc
c000cab7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000caba:	e8 74 a5 01 00       	call   c0027033 <__floatsidf>
c000cabf:	83 c4 10             	add    esp,0x10
c000cac2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cac6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000caca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cada:	e8 c0 a7 01 00       	call   c002729f <__ltdf2>
c000cadf:	83 c4 10             	add    esp,0x10
c000cae2:	85 c0                	test   eax,eax
c000cae4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cae8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000caec:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000caf0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000caf4:	78 10                	js     c000cb06 <sinc_quad_vari_process+0x512>
c000caf6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cafa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cafe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb02:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb06:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb16:	e8 b5 9e 01 00       	call   c00269d0 <__muldf3>
c000cb1b:	59                   	pop    ecx
c000cb1c:	5f                   	pop    edi
c000cb1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb21:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2d:	e8 98 eb ff ff       	call   c000b6ca <double_to_fp>
c000cb32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb36:	89 c7                	mov    edi,eax
c000cb38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb3c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb40:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb44:	e8 87 9e 01 00       	call   c00269d0 <__muldf3>
c000cb49:	83 c4 18             	add    esp,0x18
c000cb4c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb50:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb54:	52                   	push   edx
c000cb55:	50                   	push   eax
c000cb56:	e8 6f eb ff ff       	call   c000b6ca <double_to_fp>
c000cb5b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb5e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb62:	83 c4 0c             	add    esp,0xc
c000cb65:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb68:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb6b:	50                   	push   eax
c000cb6c:	50                   	push   eax
c000cb6d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb70:	e8 be a4 01 00       	call   c0027033 <__floatsidf>
c000cb75:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb79:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb89:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb8d:	e8 22 a1 01 00       	call   c0026cb4 <__divdf3>
c000cb92:	83 c4 18             	add    esp,0x18
c000cb95:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb99:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb9d:	52                   	push   edx
c000cb9e:	89 fa                	mov    edx,edi
c000cba0:	50                   	push   eax
c000cba1:	89 d8                	mov    eax,ebx
c000cba3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cba7:	e8 a5 d1 ff ff       	call   c0009d51 <calc_output_quad>
c000cbac:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cbb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbb8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbbc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbc0:	e8 ef a0 01 00       	call   c0026cb4 <__divdf3>
c000cbc5:	83 c4 10             	add    esp,0x10
c000cbc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbcc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbd8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbdc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbe0:	e8 6e 97 01 00       	call   c0026353 <__adddf3>
c000cbe5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cbe9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cbed:	83 c4 18             	add    esp,0x18
c000cbf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbf8:	e8 53 a8 01 00       	call   c0027450 <lrint>
c000cbfd:	83 ec 0c             	sub    esp,0xc
c000cc00:	50                   	push   eax
c000cc01:	e8 2d a4 01 00       	call   c0027033 <__floatsidf>
c000cc06:	83 c4 10             	add    esp,0x10
c000cc09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cc0d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cc11:	52                   	push   edx
c000cc12:	50                   	push   eax
c000cc13:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc17:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc1b:	e8 84 9d 01 00       	call   c00269a4 <__subdf3>
c000cc20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc24:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc28:	83 c4 20             	add    esp,0x20
c000cc2b:	6a 00                	push   0x0
c000cc2d:	6a 00                	push   0x0
c000cc2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc37:	e8 63 a6 01 00       	call   c002729f <__ltdf2>
c000cc3c:	83 c4 10             	add    esp,0x10
c000cc3f:	85 c0                	test   eax,eax
c000cc41:	79 20                	jns    c000cc63 <sinc_quad_vari_process+0x66f>
c000cc43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc53:	e8 fb 96 01 00       	call   c0026353 <__adddf3>
c000cc58:	83 c4 10             	add    esp,0x10
c000cc5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc63:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc66:	83 ec 10             	sub    esp,0x10
c000cc69:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc6d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc78:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc7c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc80:	e8 1f 9d 01 00       	call   c00269a4 <__subdf3>
c000cc85:	83 c4 18             	add    esp,0x18
c000cc88:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc8c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc90:	52                   	push   edx
c000cc91:	50                   	push   eax
c000cc92:	e8 b9 a7 01 00       	call   c0027450 <lrint>
c000cc97:	0f af f8             	imul   edi,eax
c000cc9a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc9e:	83 c4 10             	add    esp,0x10
c000cca1:	01 f8                	add    eax,edi
c000cca3:	99                   	cdq    
c000cca4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cca7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ccaa:	e9 fd fb ff ff       	jmp    c000c8ac <sinc_quad_vari_process+0x2b8>
c000ccaf:	83 c4 4c             	add    esp,0x4c
c000ccb2:	89 d0                	mov    eax,edx
c000ccb4:	5b                   	pop    ebx
c000ccb5:	5e                   	pop    esi
c000ccb6:	5f                   	pop    edi
c000ccb7:	5d                   	pop    ebp
c000ccb8:	c3                   	ret    

c000ccb9 <sinc_stereo_vari_process>:
c000ccb9:	55                   	push   ebp
c000ccba:	ba 05 00 00 00       	mov    edx,0x5
c000ccbf:	57                   	push   edi
c000ccc0:	56                   	push   esi
c000ccc1:	53                   	push   ebx
c000ccc2:	83 ec 4c             	sub    esp,0x4c
c000ccc5:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ccc9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cccd:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ccd0:	85 db                	test   ebx,ebx
c000ccd2:	0f 84 9c 06 00 00    	je     c000d374 <sinc_stereo_vari_process+0x6bb>
c000ccd8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ccdb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ccde:	0f af c7             	imul   eax,edi
c000cce1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cce4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cce7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ccee:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ccf5:	0f af c7             	imul   eax,edi
c000ccf8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ccfb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccfe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cd01:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cd05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd09:	68 00 00 70 3f       	push   0x3f700000
c000cd0e:	6a 00                	push   0x0
c000cd10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd18:	e8 82 a5 01 00       	call   c002729f <__ltdf2>
c000cd1d:	83 c4 10             	add    esp,0x10
c000cd20:	ba 16 00 00 00       	mov    edx,0x16
c000cd25:	85 c0                	test   eax,eax
c000cd27:	0f 88 47 06 00 00    	js     c000d374 <sinc_stereo_vari_process+0x6bb>
c000cd2d:	68 00 00 70 40       	push   0x40700000
c000cd32:	6a 00                	push   0x0
c000cd34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd3c:	e8 40 a5 01 00       	call   c0027281 <__gtdf2>
c000cd41:	83 c4 10             	add    esp,0x10
c000cd44:	ba 16 00 00 00       	mov    edx,0x16
c000cd49:	85 c0                	test   eax,eax
c000cd4b:	0f 8f 23 06 00 00    	jg     c000d374 <sinc_stereo_vari_process+0x6bb>
c000cd51:	83 ec 0c             	sub    esp,0xc
c000cd54:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd57:	e8 d7 a2 01 00       	call   c0027033 <__floatsidf>
c000cd5c:	83 c4 10             	add    esp,0x10
c000cd5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd67:	68 00 00 00 40       	push   0x40000000
c000cd6c:	6a 00                	push   0x0
c000cd6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd76:	e8 d8 95 01 00       	call   c0026353 <__adddf3>
c000cd7b:	59                   	pop    ecx
c000cd7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd80:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd84:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd87:	e8 a7 a2 01 00       	call   c0027033 <__floatsidf>
c000cd8c:	83 c4 10             	add    esp,0x10
c000cd8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd93:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd97:	52                   	push   edx
c000cd98:	50                   	push   eax
c000cd99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cda1:	e8 0e 9f 01 00       	call   c0026cb4 <__divdf3>
c000cda6:	83 c4 10             	add    esp,0x10
c000cda9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdb1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cdb4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cdb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdc7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdcb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdcf:	e8 ad a4 01 00       	call   c0027281 <__gtdf2>
c000cdd4:	83 c4 10             	add    esp,0x10
c000cdd7:	85 c0                	test   eax,eax
c000cdd9:	7e 2d                	jle    c000ce08 <sinc_stereo_vari_process+0x14f>
c000cddb:	68 00 00 f0 3f       	push   0x3ff00000
c000cde0:	6a 00                	push   0x0
c000cde2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdea:	e8 b0 a4 01 00       	call   c002729f <__ltdf2>
c000cdef:	83 c4 10             	add    esp,0x10
c000cdf2:	85 c0                	test   eax,eax
c000cdf4:	79 4d                	jns    c000ce43 <sinc_stereo_vari_process+0x18a>
c000cdf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdfa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce06:	eb 1b                	jmp    c000ce23 <sinc_stereo_vari_process+0x16a>
c000ce08:	68 00 00 f0 3f       	push   0x3ff00000
c000ce0d:	6a 00                	push   0x0
c000ce0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce17:	e8 83 a4 01 00       	call   c002729f <__ltdf2>
c000ce1c:	83 c4 10             	add    esp,0x10
c000ce1f:	85 c0                	test   eax,eax
c000ce21:	79 20                	jns    c000ce43 <sinc_stereo_vari_process+0x18a>
c000ce23:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce33:	e8 7c 9e 01 00       	call   c0026cb4 <__divdf3>
c000ce38:	83 c4 10             	add    esp,0x10
c000ce3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce3f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce43:	50                   	push   eax
c000ce44:	50                   	push   eax
c000ce45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce49:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce4d:	e8 fe a5 01 00       	call   c0027450 <lrint>
c000ce52:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce55:	40                   	inc    eax
c000ce56:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce5a:	0f af c7             	imul   eax,edi
c000ce5d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce68:	58                   	pop    eax
c000ce69:	5a                   	pop    edx
c000ce6a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce6e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce72:	e8 d9 a5 01 00       	call   c0027450 <lrint>
c000ce77:	83 ec 0c             	sub    esp,0xc
c000ce7a:	50                   	push   eax
c000ce7b:	e8 b3 a1 01 00       	call   c0027033 <__floatsidf>
c000ce80:	83 c4 10             	add    esp,0x10
c000ce83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce87:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce8b:	52                   	push   edx
c000ce8c:	50                   	push   eax
c000ce8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce95:	e8 0a 9b 01 00       	call   c00269a4 <__subdf3>
c000ce9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cea2:	83 c4 20             	add    esp,0x20
c000cea5:	6a 00                	push   0x0
c000cea7:	6a 00                	push   0x0
c000cea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cead:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ceb1:	e8 e9 a3 01 00       	call   c002729f <__ltdf2>
c000ceb6:	83 c4 10             	add    esp,0x10
c000ceb9:	85 c0                	test   eax,eax
c000cebb:	79 1f                	jns    c000cedc <sinc_stereo_vari_process+0x223>
c000cebd:	68 00 00 f0 3f       	push   0x3ff00000
c000cec2:	6a 00                	push   0x0
c000cec4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cecc:	e8 82 94 01 00       	call   c0026353 <__adddf3>
c000ced1:	83 c4 10             	add    esp,0x10
c000ced4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ced8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cedc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cedf:	83 ec 10             	sub    esp,0x10
c000cee2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cee6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cef1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cef5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cef9:	e8 a6 9a 01 00       	call   c00269a4 <__subdf3>
c000cefe:	83 c4 18             	add    esp,0x18
c000cf01:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf05:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf09:	52                   	push   edx
c000cf0a:	50                   	push   eax
c000cf0b:	e8 40 a5 01 00       	call   c0027450 <lrint>
c000cf10:	0f af f8             	imul   edi,eax
c000cf13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf17:	01 f8                	add    eax,edi
c000cf19:	99                   	cdq    
c000cf1a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cf1d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cf20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf28:	68 00 00 f0 3f       	push   0x3ff00000
c000cf2d:	6a 00                	push   0x0
c000cf2f:	e8 80 9d 01 00       	call   c0026cb4 <__divdf3>
c000cf34:	83 c4 10             	add    esp,0x10
c000cf37:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf3b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf3f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cf44:	68 23 42 92 0c       	push   0xc924223
c000cf49:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf51:	e8 fd 93 01 00       	call   c0026353 <__adddf3>
c000cf56:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf5a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf5e:	83 c4 20             	add    esp,0x20
c000cf61:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf69:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf71:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf74:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf77:	7d 50                	jge    c000cfc9 <sinc_stereo_vari_process+0x310>
c000cf79:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf7c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf7f:	01 c8                	add    eax,ecx
c000cf81:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf84:	99                   	cdq    
c000cf85:	f7 f9                	idiv   ecx
c000cf87:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf8b:	7d 0c                	jge    c000cf99 <sinc_stereo_vari_process+0x2e0>
c000cf8d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf90:	85 ff                	test   edi,edi
c000cf92:	79 6c                	jns    c000d000 <sinc_stereo_vari_process+0x347>
c000cf94:	e9 e7 00 00 00       	jmp    c000d080 <sinc_stereo_vari_process+0x3c7>
c000cf99:	50                   	push   eax
c000cf9a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf9e:	56                   	push   esi
c000cf9f:	53                   	push   ebx
c000cfa0:	e8 4c e7 ff ff       	call   c000b6f1 <prepare_data>
c000cfa5:	83 c4 10             	add    esp,0x10
c000cfa8:	89 c2                	mov    edx,eax
c000cfaa:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cfad:	85 c0                	test   eax,eax
c000cfaf:	0f 85 bf 03 00 00    	jne    c000d374 <sinc_stereo_vari_process+0x6bb>
c000cfb5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cfb8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cfbb:	01 c8                	add    eax,ecx
c000cfbd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cfc0:	99                   	cdq    
c000cfc1:	f7 f9                	idiv   ecx
c000cfc3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cfc7:	7c c4                	jl     c000cf8d <sinc_stereo_vari_process+0x2d4>
c000cfc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cfcd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfd1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cfd4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cfd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfdb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfdf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cfe2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cfe5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cfe8:	99                   	cdq    
c000cfe9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfec:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfef:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cff2:	99                   	cdq    
c000cff3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cff6:	31 d2                	xor    edx,edx
c000cff8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cffb:	e9 74 03 00 00       	jmp    c000d374 <sinc_stereo_vari_process+0x6bb>
c000d000:	83 ec 0c             	sub    esp,0xc
c000d003:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d006:	e8 28 a0 01 00       	call   c0027033 <__floatsidf>
c000d00b:	83 c4 10             	add    esp,0x10
c000d00e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d012:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d016:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d01a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d01e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d022:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d026:	e8 28 93 01 00       	call   c0026353 <__adddf3>
c000d02b:	83 c4 10             	add    esp,0x10
c000d02e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d032:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d036:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d03a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d03e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d046:	e8 08 93 01 00       	call   c0026353 <__adddf3>
c000d04b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d04e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d052:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d056:	e8 d8 9f 01 00       	call   c0027033 <__floatsidf>
c000d05b:	83 c4 10             	add    esp,0x10
c000d05e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d062:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d066:	52                   	push   edx
c000d067:	50                   	push   eax
c000d068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d070:	e8 28 a2 01 00       	call   c002729d <__gedf2>
c000d075:	83 c4 10             	add    esp,0x10
c000d078:	85 c0                	test   eax,eax
c000d07a:	0f 89 49 ff ff ff    	jns    c000cfc9 <sinc_stereo_vari_process+0x310>
c000d080:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d084:	0f 8e ef 00 00 00    	jle    c000d179 <sinc_stereo_vari_process+0x4c0>
c000d08a:	83 ec 10             	sub    esp,0x10
c000d08d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d090:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d093:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d096:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d099:	e8 06 99 01 00       	call   c00269a4 <__subdf3>
c000d09e:	83 c4 18             	add    esp,0x18
c000d0a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a9:	52                   	push   edx
c000d0aa:	50                   	push   eax
c000d0ab:	e8 80 a3 01 00       	call   c0027430 <fabs>
c000d0b0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d0b8:	83 c4 10             	add    esp,0x10
c000d0bb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d0c0:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d0c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0cd:	e8 af a1 01 00       	call   c0027281 <__gtdf2>
c000d0d2:	83 c4 10             	add    esp,0x10
c000d0d5:	85 c0                	test   eax,eax
c000d0d7:	0f 8e 9c 00 00 00    	jle    c000d179 <sinc_stereo_vari_process+0x4c0>
c000d0dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d0e0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0eb:	52                   	push   edx
c000d0ec:	50                   	push   eax
c000d0ed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0f0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0f3:	e8 ac 98 01 00       	call   c00269a4 <__subdf3>
c000d0f8:	59                   	pop    ecx
c000d0f9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0fd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d101:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d104:	e8 2a 9f 01 00       	call   c0027033 <__floatsidf>
c000d109:	83 c4 10             	add    esp,0x10
c000d10c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d110:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d114:	52                   	push   edx
c000d115:	50                   	push   eax
c000d116:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11e:	e8 ad 98 01 00       	call   c00269d0 <__muldf3>
c000d123:	5f                   	pop    edi
c000d124:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d128:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d12c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d12f:	e8 ff 9e 01 00       	call   c0027033 <__floatsidf>
c000d134:	83 c4 10             	add    esp,0x10
c000d137:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d13b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d13f:	52                   	push   edx
c000d140:	50                   	push   eax
c000d141:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d145:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d149:	e8 66 9b 01 00       	call   c0026cb4 <__divdf3>
c000d14e:	83 c4 10             	add    esp,0x10
c000d151:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d155:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d159:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d15d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d161:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d165:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d169:	e8 e5 91 01 00       	call   c0026353 <__adddf3>
c000d16e:	83 c4 10             	add    esp,0x10
c000d171:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d175:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d179:	83 ec 0c             	sub    esp,0xc
c000d17c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d17f:	e8 af 9e 01 00       	call   c0027033 <__floatsidf>
c000d184:	83 c4 10             	add    esp,0x10
c000d187:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d18b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d19b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d19f:	e8 fb a0 01 00       	call   c002729f <__ltdf2>
c000d1a4:	83 c4 10             	add    esp,0x10
c000d1a7:	85 c0                	test   eax,eax
c000d1a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d1ad:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d1b1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d1b5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d1b9:	78 10                	js     c000d1cb <sinc_stereo_vari_process+0x512>
c000d1bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d1bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d1c3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1c7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1cb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1db:	e8 f0 97 01 00       	call   c00269d0 <__muldf3>
c000d1e0:	59                   	pop    ecx
c000d1e1:	5f                   	pop    edi
c000d1e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d1e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d1ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f2:	e8 d3 e4 ff ff       	call   c000b6ca <double_to_fp>
c000d1f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1fb:	89 c7                	mov    edi,eax
c000d1fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d201:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d205:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d209:	e8 c2 97 01 00       	call   c00269d0 <__muldf3>
c000d20e:	83 c4 18             	add    esp,0x18
c000d211:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d215:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d219:	52                   	push   edx
c000d21a:	50                   	push   eax
c000d21b:	e8 aa e4 ff ff       	call   c000b6ca <double_to_fp>
c000d220:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d223:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d227:	83 c4 0c             	add    esp,0xc
c000d22a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d22d:	8d 04 90             	lea    eax,[eax+edx*4]
c000d230:	50                   	push   eax
c000d231:	50                   	push   eax
c000d232:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d235:	e8 f9 9d 01 00       	call   c0027033 <__floatsidf>
c000d23a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d23e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d242:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d246:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d24a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d24e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d252:	e8 5d 9a 01 00       	call   c0026cb4 <__divdf3>
c000d257:	83 c4 18             	add    esp,0x18
c000d25a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d25e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d262:	52                   	push   edx
c000d263:	89 fa                	mov    edx,edi
c000d265:	50                   	push   eax
c000d266:	89 d8                	mov    eax,ebx
c000d268:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d26c:	e8 02 c7 ff ff       	call   c0009973 <calc_output_stereo>
c000d271:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d27d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d281:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d285:	e8 2a 9a 01 00       	call   c0026cb4 <__divdf3>
c000d28a:	83 c4 10             	add    esp,0x10
c000d28d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d291:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d299:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d29d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2a1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2a5:	e8 a9 90 01 00       	call   c0026353 <__adddf3>
c000d2aa:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d2ae:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d2b2:	83 c4 18             	add    esp,0x18
c000d2b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2bd:	e8 8e a1 01 00       	call   c0027450 <lrint>
c000d2c2:	83 ec 0c             	sub    esp,0xc
c000d2c5:	50                   	push   eax
c000d2c6:	e8 68 9d 01 00       	call   c0027033 <__floatsidf>
c000d2cb:	83 c4 10             	add    esp,0x10
c000d2ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d2d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d2d6:	52                   	push   edx
c000d2d7:	50                   	push   eax
c000d2d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2dc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2e0:	e8 bf 96 01 00       	call   c00269a4 <__subdf3>
c000d2e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ed:	83 c4 20             	add    esp,0x20
c000d2f0:	6a 00                	push   0x0
c000d2f2:	6a 00                	push   0x0
c000d2f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2fc:	e8 9e 9f 01 00       	call   c002729f <__ltdf2>
c000d301:	83 c4 10             	add    esp,0x10
c000d304:	85 c0                	test   eax,eax
c000d306:	79 20                	jns    c000d328 <sinc_stereo_vari_process+0x66f>
c000d308:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d30c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d310:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d314:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d318:	e8 36 90 01 00       	call   c0026353 <__adddf3>
c000d31d:	83 c4 10             	add    esp,0x10
c000d320:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d324:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d328:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d32b:	83 ec 10             	sub    esp,0x10
c000d32e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d332:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d335:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d339:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d33d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d341:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d345:	e8 5a 96 01 00       	call   c00269a4 <__subdf3>
c000d34a:	83 c4 18             	add    esp,0x18
c000d34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d351:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d355:	52                   	push   edx
c000d356:	50                   	push   eax
c000d357:	e8 f4 a0 01 00       	call   c0027450 <lrint>
c000d35c:	0f af f8             	imul   edi,eax
c000d35f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d363:	83 c4 10             	add    esp,0x10
c000d366:	01 f8                	add    eax,edi
c000d368:	99                   	cdq    
c000d369:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d36c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d36f:	e9 fd fb ff ff       	jmp    c000cf71 <sinc_stereo_vari_process+0x2b8>
c000d374:	83 c4 4c             	add    esp,0x4c
c000d377:	89 d0                	mov    eax,edx
c000d379:	5b                   	pop    ebx
c000d37a:	5e                   	pop    esi
c000d37b:	5f                   	pop    edi
c000d37c:	5d                   	pop    ebp
c000d37d:	c3                   	ret    

c000d37e <sinc_mono_vari_process>:
c000d37e:	55                   	push   ebp
c000d37f:	ba 05 00 00 00       	mov    edx,0x5
c000d384:	57                   	push   edi
c000d385:	56                   	push   esi
c000d386:	53                   	push   ebx
c000d387:	83 ec 4c             	sub    esp,0x4c
c000d38a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d38e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d392:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d395:	85 db                	test   ebx,ebx
c000d397:	0f 84 c1 06 00 00    	je     c000da5e <sinc_mono_vari_process+0x6e0>
c000d39d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d3a0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d3a3:	0f af c7             	imul   eax,edi
c000d3a6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d3a9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d3ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d3b3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d3ba:	0f af c7             	imul   eax,edi
c000d3bd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d3c0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d3c4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d3c7:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d3cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d3d1:	68 00 00 70 3f       	push   0x3f700000
c000d3d6:	6a 00                	push   0x0
c000d3d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3e0:	e8 ba 9e 01 00       	call   c002729f <__ltdf2>
c000d3e5:	83 c4 10             	add    esp,0x10
c000d3e8:	ba 16 00 00 00       	mov    edx,0x16
c000d3ed:	85 c0                	test   eax,eax
c000d3ef:	0f 88 69 06 00 00    	js     c000da5e <sinc_mono_vari_process+0x6e0>
c000d3f5:	68 00 00 70 40       	push   0x40700000
c000d3fa:	6a 00                	push   0x0
c000d3fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d400:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d404:	e8 78 9e 01 00       	call   c0027281 <__gtdf2>
c000d409:	83 c4 10             	add    esp,0x10
c000d40c:	ba 16 00 00 00       	mov    edx,0x16
c000d411:	85 c0                	test   eax,eax
c000d413:	0f 8f 45 06 00 00    	jg     c000da5e <sinc_mono_vari_process+0x6e0>
c000d419:	83 ec 0c             	sub    esp,0xc
c000d41c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d41f:	e8 0f 9c 01 00       	call   c0027033 <__floatsidf>
c000d424:	83 c4 10             	add    esp,0x10
c000d427:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d42b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d42f:	68 00 00 00 40       	push   0x40000000
c000d434:	6a 00                	push   0x0
c000d436:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d43a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d43e:	e8 10 8f 01 00       	call   c0026353 <__adddf3>
c000d443:	59                   	pop    ecx
c000d444:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d448:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d44c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d44f:	e8 df 9b 01 00       	call   c0027033 <__floatsidf>
c000d454:	83 c4 10             	add    esp,0x10
c000d457:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d45b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d45f:	52                   	push   edx
c000d460:	50                   	push   eax
c000d461:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d465:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d469:	e8 46 98 01 00       	call   c0026cb4 <__divdf3>
c000d46e:	83 c4 10             	add    esp,0x10
c000d471:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d479:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d47c:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d47f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d483:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d48f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d493:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d497:	e8 e5 9d 01 00       	call   c0027281 <__gtdf2>
c000d49c:	83 c4 10             	add    esp,0x10
c000d49f:	85 c0                	test   eax,eax
c000d4a1:	7e 2d                	jle    c000d4d0 <sinc_mono_vari_process+0x152>
c000d4a3:	68 00 00 f0 3f       	push   0x3ff00000
c000d4a8:	6a 00                	push   0x0
c000d4aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4b2:	e8 e8 9d 01 00       	call   c002729f <__ltdf2>
c000d4b7:	83 c4 10             	add    esp,0x10
c000d4ba:	85 c0                	test   eax,eax
c000d4bc:	79 4d                	jns    c000d50b <sinc_mono_vari_process+0x18d>
c000d4be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d4c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4ce:	eb 1b                	jmp    c000d4eb <sinc_mono_vari_process+0x16d>
c000d4d0:	68 00 00 f0 3f       	push   0x3ff00000
c000d4d5:	6a 00                	push   0x0
c000d4d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	e8 bb 9d 01 00       	call   c002729f <__ltdf2>
c000d4e4:	83 c4 10             	add    esp,0x10
c000d4e7:	85 c0                	test   eax,eax
c000d4e9:	79 20                	jns    c000d50b <sinc_mono_vari_process+0x18d>
c000d4eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4ef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4fb:	e8 b4 97 01 00       	call   c0026cb4 <__divdf3>
c000d500:	83 c4 10             	add    esp,0x10
c000d503:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d507:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d50b:	50                   	push   eax
c000d50c:	50                   	push   eax
c000d50d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d511:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d515:	e8 36 9f 01 00       	call   c0027450 <lrint>
c000d51a:	40                   	inc    eax
c000d51b:	0f af c7             	imul   eax,edi
c000d51e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d522:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d526:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d529:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d52c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d530:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d534:	58                   	pop    eax
c000d535:	5a                   	pop    edx
c000d536:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d53a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d53e:	e8 0d 9f 01 00       	call   c0027450 <lrint>
c000d543:	83 ec 0c             	sub    esp,0xc
c000d546:	50                   	push   eax
c000d547:	e8 e7 9a 01 00       	call   c0027033 <__floatsidf>
c000d54c:	83 c4 10             	add    esp,0x10
c000d54f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d553:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d557:	52                   	push   edx
c000d558:	50                   	push   eax
c000d559:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d55d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d561:	e8 3e 94 01 00       	call   c00269a4 <__subdf3>
c000d566:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d56a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d56e:	83 c4 20             	add    esp,0x20
c000d571:	6a 00                	push   0x0
c000d573:	6a 00                	push   0x0
c000d575:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d579:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d57d:	e8 1d 9d 01 00       	call   c002729f <__ltdf2>
c000d582:	83 c4 10             	add    esp,0x10
c000d585:	85 c0                	test   eax,eax
c000d587:	79 1f                	jns    c000d5a8 <sinc_mono_vari_process+0x22a>
c000d589:	68 00 00 f0 3f       	push   0x3ff00000
c000d58e:	6a 00                	push   0x0
c000d590:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d594:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d598:	e8 b6 8d 01 00       	call   c0026353 <__adddf3>
c000d59d:	83 c4 10             	add    esp,0x10
c000d5a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5a8:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d5ab:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5ae:	83 ec 10             	sub    esp,0x10
c000d5b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5c1:	e8 de 93 01 00       	call   c00269a4 <__subdf3>
c000d5c6:	83 c4 18             	add    esp,0x18
c000d5c9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d5cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d5d1:	52                   	push   edx
c000d5d2:	50                   	push   eax
c000d5d3:	e8 78 9e 01 00       	call   c0027450 <lrint>
c000d5d8:	0f af f8             	imul   edi,eax
c000d5db:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d5de:	31 ff                	xor    edi,edi
c000d5e0:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d5e5:	99                   	cdq    
c000d5e6:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d5e9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5f4:	55                   	push   ebp
c000d5f5:	57                   	push   edi
c000d5f6:	e8 b9 96 01 00       	call   c0026cb4 <__divdf3>
c000d5fb:	83 c4 10             	add    esp,0x10
c000d5fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d602:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d606:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d60b:	68 23 42 92 0c       	push   0xc924223
c000d610:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d618:	e8 36 8d 01 00       	call   c0026353 <__adddf3>
c000d61d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d621:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d625:	83 c4 20             	add    esp,0x20
c000d628:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d62c:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d630:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d633:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d636:	7d 54                	jge    c000d68c <sinc_mono_vari_process+0x30e>
c000d638:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d63b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d63e:	01 c8                	add    eax,ecx
c000d640:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d643:	99                   	cdq    
c000d644:	f7 f9                	idiv   ecx
c000d646:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d64a:	7d 0c                	jge    c000d658 <sinc_mono_vari_process+0x2da>
c000d64c:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d64f:	85 ff                	test   edi,edi
c000d651:	79 73                	jns    c000d6c6 <sinc_mono_vari_process+0x348>
c000d653:	e9 ee 00 00 00       	jmp    c000d746 <sinc_mono_vari_process+0x3c8>
c000d658:	50                   	push   eax
c000d659:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d65d:	56                   	push   esi
c000d65e:	53                   	push   ebx
c000d65f:	e8 8d e0 ff ff       	call   c000b6f1 <prepare_data>
c000d664:	89 c2                	mov    edx,eax
c000d666:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d66a:	83 c4 10             	add    esp,0x10
c000d66d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d670:	85 d2                	test   edx,edx
c000d672:	0f 85 e6 03 00 00    	jne    c000da5e <sinc_mono_vari_process+0x6e0>
c000d678:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d67b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d67e:	01 c8                	add    eax,ecx
c000d680:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d683:	99                   	cdq    
c000d684:	f7 f9                	idiv   ecx
c000d686:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d68a:	7c c0                	jl     c000d64c <sinc_mono_vari_process+0x2ce>
c000d68c:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d690:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d694:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d698:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d69b:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d69e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6a6:	89 01                	mov    DWORD PTR [ecx],eax
c000d6a8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d6ab:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d6ae:	99                   	cdq    
c000d6af:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d6b2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d6b5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d6b8:	99                   	cdq    
c000d6b9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d6bc:	31 d2                	xor    edx,edx
c000d6be:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d6c1:	e9 98 03 00 00       	jmp    c000da5e <sinc_mono_vari_process+0x6e0>
c000d6c6:	83 ec 0c             	sub    esp,0xc
c000d6c9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d6cc:	e8 62 99 01 00       	call   c0027033 <__floatsidf>
c000d6d1:	83 c4 10             	add    esp,0x10
c000d6d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6d8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6e0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6ec:	e8 62 8c 01 00       	call   c0026353 <__adddf3>
c000d6f1:	83 c4 10             	add    esp,0x10
c000d6f4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6f8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d700:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d704:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d708:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d70c:	e8 42 8c 01 00       	call   c0026353 <__adddf3>
c000d711:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d714:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d718:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d71c:	e8 12 99 01 00       	call   c0027033 <__floatsidf>
c000d721:	83 c4 10             	add    esp,0x10
c000d724:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d728:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d72c:	52                   	push   edx
c000d72d:	50                   	push   eax
c000d72e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d732:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d736:	e8 46 9b 01 00       	call   c0027281 <__gtdf2>
c000d73b:	83 c4 10             	add    esp,0x10
c000d73e:	85 c0                	test   eax,eax
c000d740:	0f 8f 46 ff ff ff    	jg     c000d68c <sinc_mono_vari_process+0x30e>
c000d746:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d74a:	0f 8e f5 00 00 00    	jle    c000d845 <sinc_mono_vari_process+0x4c7>
c000d750:	83 ec 10             	sub    esp,0x10
c000d753:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d756:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d759:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d75d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d760:	ff 30                	push   DWORD PTR [eax]
c000d762:	e8 3d 92 01 00       	call   c00269a4 <__subdf3>
c000d767:	83 c4 18             	add    esp,0x18
c000d76a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d76e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d772:	52                   	push   edx
c000d773:	50                   	push   eax
c000d774:	e8 b7 9c 01 00       	call   c0027430 <fabs>
c000d779:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d77d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d781:	83 c4 10             	add    esp,0x10
c000d784:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d789:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d78e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d792:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d796:	e8 e6 9a 01 00       	call   c0027281 <__gtdf2>
c000d79b:	83 c4 10             	add    esp,0x10
c000d79e:	85 c0                	test   eax,eax
c000d7a0:	0f 8e 9f 00 00 00    	jle    c000d845 <sinc_mono_vari_process+0x4c7>
c000d7a6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d7aa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d7ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7b7:	52                   	push   edx
c000d7b8:	50                   	push   eax
c000d7b9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d7bc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d7bf:	e8 e0 91 01 00       	call   c00269a4 <__subdf3>
c000d7c4:	5f                   	pop    edi
c000d7c5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7c9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7cd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d7d0:	e8 5e 98 01 00       	call   c0027033 <__floatsidf>
c000d7d5:	83 c4 10             	add    esp,0x10
c000d7d8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7e0:	52                   	push   edx
c000d7e1:	50                   	push   eax
c000d7e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ea:	e8 e1 91 01 00       	call   c00269d0 <__muldf3>
c000d7ef:	5d                   	pop    ebp
c000d7f0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7f4:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7f8:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7fb:	e8 33 98 01 00       	call   c0027033 <__floatsidf>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d807:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d80b:	52                   	push   edx
c000d80c:	50                   	push   eax
c000d80d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d811:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d815:	e8 9a 94 01 00       	call   c0026cb4 <__divdf3>
c000d81a:	83 c4 10             	add    esp,0x10
c000d81d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d821:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d829:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d82d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d831:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d835:	e8 19 8b 01 00       	call   c0026353 <__adddf3>
c000d83a:	83 c4 10             	add    esp,0x10
c000d83d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d845:	83 ec 0c             	sub    esp,0xc
c000d848:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d84b:	e8 e3 97 01 00       	call   c0027033 <__floatsidf>
c000d850:	83 c4 10             	add    esp,0x10
c000d853:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d857:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d85b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d85f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d867:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d86b:	e8 2f 9a 01 00       	call   c002729f <__ltdf2>
c000d870:	83 c4 10             	add    esp,0x10
c000d873:	85 c0                	test   eax,eax
c000d875:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d879:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d87d:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d881:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d885:	78 10                	js     c000d897 <sinc_mono_vari_process+0x519>
c000d887:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d88b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d88f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d893:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d897:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d89b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d89f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8a7:	e8 24 91 01 00       	call   c00269d0 <__muldf3>
c000d8ac:	59                   	pop    ecx
c000d8ad:	5f                   	pop    edi
c000d8ae:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8be:	e8 07 de ff ff       	call   c000b6ca <double_to_fp>
c000d8c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8c7:	89 c7                	mov    edi,eax
c000d8c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8d1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8d5:	e8 f6 90 01 00       	call   c00269d0 <__muldf3>
c000d8da:	83 c4 18             	add    esp,0x18
c000d8dd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e5:	52                   	push   edx
c000d8e6:	50                   	push   eax
c000d8e7:	e8 de dd ff ff       	call   c000b6ca <double_to_fp>
c000d8ec:	83 ec 0c             	sub    esp,0xc
c000d8ef:	89 c5                	mov    ebp,eax
c000d8f1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8f4:	e8 3a 97 01 00       	call   c0027033 <__floatsidf>
c000d8f9:	83 c4 10             	add    esp,0x10
c000d8fc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d900:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d904:	52                   	push   edx
c000d905:	50                   	push   eax
c000d906:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d90a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d90e:	e8 a1 93 01 00       	call   c0026cb4 <__divdf3>
c000d913:	83 c4 10             	add    esp,0x10
c000d916:	89 e9                	mov    ecx,ebp
c000d918:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d91c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d920:	89 d8                	mov    eax,ebx
c000d922:	89 fa                	mov    edx,edi
c000d924:	e8 ee bd ff ff       	call   c0009717 <calc_output_single>
c000d929:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d92c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d92f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d933:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d937:	52                   	push   edx
c000d938:	50                   	push   eax
c000d939:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d93d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d941:	e8 8a 90 01 00       	call   c00269d0 <__muldf3>
c000d946:	59                   	pop    ecx
c000d947:	59                   	pop    ecx
c000d948:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d94c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d950:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d954:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d958:	e8 46 99 01 00       	call   c00272a3 <__truncdfsf2>
c000d95d:	83 c4 10             	add    esp,0x10
c000d960:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d963:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d966:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d96a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d96e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d972:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d976:	e8 39 93 01 00       	call   c0026cb4 <__divdf3>
c000d97b:	83 c4 10             	add    esp,0x10
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d98a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d98e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d992:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d996:	e8 b8 89 01 00       	call   c0026353 <__adddf3>
c000d99b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d99f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d9a3:	83 c4 18             	add    esp,0x18
c000d9a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ae:	e8 9d 9a 01 00       	call   c0027450 <lrint>
c000d9b3:	83 ec 0c             	sub    esp,0xc
c000d9b6:	50                   	push   eax
c000d9b7:	e8 77 96 01 00       	call   c0027033 <__floatsidf>
c000d9bc:	83 c4 10             	add    esp,0x10
c000d9bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9c3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9c7:	52                   	push   edx
c000d9c8:	50                   	push   eax
c000d9c9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9cd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9d1:	e8 ce 8f 01 00       	call   c00269a4 <__subdf3>
c000d9d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9de:	83 c4 20             	add    esp,0x20
c000d9e1:	6a 00                	push   0x0
c000d9e3:	6a 00                	push   0x0
c000d9e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ed:	e8 ad 98 01 00       	call   c002729f <__ltdf2>
c000d9f2:	83 c4 10             	add    esp,0x10
c000d9f5:	85 c0                	test   eax,eax
c000d9f7:	79 20                	jns    c000da19 <sinc_mono_vari_process+0x69b>
c000d9f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da09:	e8 45 89 01 00       	call   c0026353 <__adddf3>
c000da0e:	83 c4 10             	add    esp,0x10
c000da11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da19:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000da1c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000da1f:	83 ec 10             	sub    esp,0x10
c000da22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da2e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da32:	e8 6d 8f 01 00       	call   c00269a4 <__subdf3>
c000da37:	83 c4 18             	add    esp,0x18
c000da3a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da3e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da42:	52                   	push   edx
c000da43:	50                   	push   eax
c000da44:	e8 07 9a 01 00       	call   c0027450 <lrint>
c000da49:	83 c4 10             	add    esp,0x10
c000da4c:	0f af f8             	imul   edi,eax
c000da4f:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da52:	99                   	cdq    
c000da53:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da56:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da59:	e9 d2 fb ff ff       	jmp    c000d630 <sinc_mono_vari_process+0x2b2>
c000da5e:	83 c4 4c             	add    esp,0x4c
c000da61:	89 d0                	mov    eax,edx
c000da63:	5b                   	pop    ebx
c000da64:	5e                   	pop    esi
c000da65:	5f                   	pop    edi
c000da66:	5d                   	pop    ebp
c000da67:	c3                   	ret    

c000da68 <sinc_get_name>:
c000da68:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da6c:	31 c0                	xor    eax,eax
c000da6e:	83 fa 02             	cmp    edx,0x2
c000da71:	77 07                	ja     c000da7a <sinc_get_name+0x12>
c000da73:	8b 04 95 e4 8b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd741c]
c000da7a:	c3                   	ret    

c000da7b <sinc_get_description>:
c000da7b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da7f:	31 c0                	xor    eax,eax
c000da81:	83 fa 02             	cmp    edx,0x2
c000da84:	77 07                	ja     c000da8d <sinc_get_description+0x12>
c000da86:	8b 04 95 d8 8b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7428]
c000da8d:	c3                   	ret    

c000da8e <sinc_set_converter>:
c000da8e:	53                   	push   ebx
c000da8f:	81 ec 58 08 00 00    	sub    esp,0x858
c000da95:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da9c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da9f:	85 c0                	test   eax,eax
c000daa1:	74 13                	je     c000dab6 <sinc_set_converter+0x28>
c000daa3:	83 ec 0c             	sub    esp,0xc
c000daa6:	50                   	push   eax
c000daa7:	e8 9a 1b 00 00       	call   c000f646 <free>
c000daac:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dab3:	83 c4 10             	add    esp,0x10
c000dab6:	50                   	push   eax
c000dab7:	68 44 08 00 00       	push   0x844
c000dabc:	6a 00                	push   0x0
c000dabe:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dac2:	50                   	push   eax
c000dac3:	e8 0e 2c ff ff       	call   c00006d6 <memset>
c000dac8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dacb:	83 c4 10             	add    esp,0x10
c000dace:	b8 0b 00 00 00       	mov    eax,0xb
c000dad3:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dad9:	7f 6e                	jg     c000db49 <sinc_set_converter+0xbb>
c000dadb:	83 fa 01             	cmp    edx,0x1
c000dade:	75 10                	jne    c000daf0 <sinc_set_converter+0x62>
c000dae0:	c7 43 24 7e d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d37e
c000dae7:	c7 43 20 7e d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d37e
c000daee:	eb 4d                	jmp    c000db3d <sinc_set_converter+0xaf>
c000daf0:	83 fa 02             	cmp    edx,0x2
c000daf3:	75 10                	jne    c000db05 <sinc_set_converter+0x77>
c000daf5:	c7 43 24 b9 cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ccb9
c000dafc:	c7 43 20 b9 cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ccb9
c000db03:	eb 38                	jmp    c000db3d <sinc_set_converter+0xaf>
c000db05:	83 fa 04             	cmp    edx,0x4
c000db08:	75 10                	jne    c000db1a <sinc_set_converter+0x8c>
c000db0a:	c7 43 24 f4 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5f4
c000db11:	c7 43 20 f4 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5f4
c000db18:	eb 23                	jmp    c000db3d <sinc_set_converter+0xaf>
c000db1a:	83 fa 06             	cmp    edx,0x6
c000db1d:	75 10                	jne    c000db2f <sinc_set_converter+0xa1>
c000db1f:	c7 43 24 2f bf 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bf2f
c000db26:	c7 43 20 2f bf 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bf2f
c000db2d:	eb 0e                	jmp    c000db3d <sinc_set_converter+0xaf>
c000db2f:	c7 43 24 6b b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b86b
c000db36:	c7 43 20 6b b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b86b
c000db3d:	c7 43 28 1e ab 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ab1e
c000db44:	b8 0a 00 00 00       	mov    eax,0xa
c000db49:	81 c4 58 08 00 00    	add    esp,0x858
c000db4f:	5b                   	pop    ebx
c000db50:	c3                   	ret    

c000db51 <zoh_vari_process>:
c000db51:	55                   	push   ebp
c000db52:	31 d2                	xor    edx,edx
c000db54:	57                   	push   edi
c000db55:	56                   	push   esi
c000db56:	53                   	push   ebx
c000db57:	83 ec 3c             	sub    esp,0x3c
c000db5a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db5e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db62:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db66:	0f 8e 80 06 00 00    	jle    c000e1ec <zoh_vari_process+0x69b>
c000db6c:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db6f:	ba 05 00 00 00       	mov    edx,0x5
c000db74:	85 db                	test   ebx,ebx
c000db76:	0f 84 70 06 00 00    	je     c000e1ec <zoh_vari_process+0x69b>
c000db7c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db7f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db83:	74 19                	je     c000db9e <zoh_vari_process+0x4d>
c000db85:	31 d2                	xor    edx,edx
c000db87:	39 c2                	cmp    edx,eax
c000db89:	7d 0c                	jge    c000db97 <zoh_vari_process+0x46>
c000db8b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db8d:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db90:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db94:	42                   	inc    edx
c000db95:	eb f0                	jmp    c000db87 <zoh_vari_process+0x36>
c000db97:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db9e:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dba1:	0f af d0             	imul   edx,eax
c000dba4:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dba7:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dbab:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dbb2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dbb5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dbbc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dbbf:	8b 07                	mov    eax,DWORD PTR [edi]
c000dbc1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbc5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbc9:	68 00 00 70 3f       	push   0x3f700000
c000dbce:	6a 00                	push   0x0
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd8:	e8 c2 96 01 00       	call   c002729f <__ltdf2>
c000dbdd:	83 c4 10             	add    esp,0x10
c000dbe0:	ba 16 00 00 00       	mov    edx,0x16
c000dbe5:	85 c0                	test   eax,eax
c000dbe7:	0f 88 ff 05 00 00    	js     c000e1ec <zoh_vari_process+0x69b>
c000dbed:	68 00 00 70 40       	push   0x40700000
c000dbf2:	6a 00                	push   0x0
c000dbf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbfc:	e8 80 96 01 00       	call   c0027281 <__gtdf2>
c000dc01:	83 c4 10             	add    esp,0x10
c000dc04:	ba 16 00 00 00       	mov    edx,0x16
c000dc09:	85 c0                	test   eax,eax
c000dc0b:	0f 8f db 05 00 00    	jg     c000e1ec <zoh_vari_process+0x69b>
c000dc11:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dc14:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dc17:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc1b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc1f:	68 00 00 f0 3f       	push   0x3ff00000
c000dc24:	6a 00                	push   0x0
c000dc26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2e:	e8 6c 96 01 00       	call   c002729f <__ltdf2>
c000dc33:	83 c4 10             	add    esp,0x10
c000dc36:	85 c0                	test   eax,eax
c000dc38:	0f 89 da 01 00 00    	jns    c000de18 <zoh_vari_process+0x2c7>
c000dc3e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dc41:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dc44:	0f 8d ce 01 00 00    	jge    c000de18 <zoh_vari_process+0x2c7>
c000dc4a:	83 ec 0c             	sub    esp,0xc
c000dc4d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc50:	e8 de 93 01 00       	call   c0027033 <__floatsidf>
c000dc55:	83 c4 10             	add    esp,0x10
c000dc58:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc5b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc67:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc6b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc6f:	e8 5c 8d 01 00       	call   c00269d0 <__muldf3>
c000dc74:	59                   	pop    ecx
c000dc75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc79:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc7d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc80:	e8 ae 93 01 00       	call   c0027033 <__floatsidf>
c000dc85:	83 c4 10             	add    esp,0x10
c000dc88:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc90:	52                   	push   edx
c000dc91:	50                   	push   eax
c000dc92:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc9a:	e8 b4 86 01 00       	call   c0026353 <__adddf3>
c000dc9f:	59                   	pop    ecx
c000dca0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dca4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dca8:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dcab:	e8 83 93 01 00       	call   c0027033 <__floatsidf>
c000dcb0:	83 c4 10             	add    esp,0x10
c000dcb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dcb7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dcbb:	52                   	push   edx
c000dcbc:	50                   	push   eax
c000dcbd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcc1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcc5:	e8 d3 95 01 00       	call   c002729d <__gedf2>
c000dcca:	83 c4 10             	add    esp,0x10
c000dccd:	85 c0                	test   eax,eax
c000dccf:	0f 89 43 01 00 00    	jns    c000de18 <zoh_vari_process+0x2c7>
c000dcd5:	85 ed                	test   ebp,ebp
c000dcd7:	0f 8e ec 00 00 00    	jle    c000ddc9 <zoh_vari_process+0x278>
c000dcdd:	83 ec 10             	sub    esp,0x10
c000dce0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dce3:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dce6:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dce9:	ff 37                	push   DWORD PTR [edi]
c000dceb:	e8 b4 8c 01 00       	call   c00269a4 <__subdf3>
c000dcf0:	83 c4 18             	add    esp,0x18
c000dcf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcfb:	52                   	push   edx
c000dcfc:	50                   	push   eax
c000dcfd:	e8 2e 97 01 00       	call   c0027430 <fabs>
c000dd02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd0a:	83 c4 10             	add    esp,0x10
c000dd0d:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dd12:	68 23 42 92 0c       	push   0xc924223
c000dd17:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd1b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd1f:	e8 5d 95 01 00       	call   c0027281 <__gtdf2>
c000dd24:	83 c4 10             	add    esp,0x10
c000dd27:	85 c0                	test   eax,eax
c000dd29:	0f 8e 9a 00 00 00    	jle    c000ddc9 <zoh_vari_process+0x278>
c000dd2f:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd31:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd34:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd37:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dd3b:	52                   	push   edx
c000dd3c:	50                   	push   eax
c000dd3d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dd40:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dd43:	e8 5c 8c 01 00       	call   c00269a4 <__subdf3>
c000dd48:	59                   	pop    ecx
c000dd49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd4d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd51:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd54:	e8 da 92 01 00       	call   c0027033 <__floatsidf>
c000dd59:	83 c4 10             	add    esp,0x10
c000dd5c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd60:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd64:	52                   	push   edx
c000dd65:	50                   	push   eax
c000dd66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6e:	e8 5d 8c 01 00       	call   c00269d0 <__muldf3>
c000dd73:	5d                   	pop    ebp
c000dd74:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd78:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd7c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd7f:	e8 af 92 01 00       	call   c0027033 <__floatsidf>
c000dd84:	83 c4 10             	add    esp,0x10
c000dd87:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd8b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd8f:	52                   	push   edx
c000dd90:	50                   	push   eax
c000dd91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd99:	e8 16 8f 01 00       	call   c0026cb4 <__divdf3>
c000dd9e:	83 c4 10             	add    esp,0x10
c000dda1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dda5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dda9:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ddad:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ddb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddb9:	e8 95 85 01 00       	call   c0026353 <__adddf3>
c000ddbe:	83 c4 10             	add    esp,0x10
c000ddc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddc9:	31 c0                	xor    eax,eax
c000ddcb:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ddce:	7e 13                	jle    c000dde3 <zoh_vari_process+0x292>
c000ddd0:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000ddd4:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ddd7:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ddda:	40                   	inc    eax
c000dddb:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000ddde:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dde1:	eb e8                	jmp    c000ddcb <zoh_vari_process+0x27a>
c000dde3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dde7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddeb:	68 00 00 f0 3f       	push   0x3ff00000
c000ddf0:	6a 00                	push   0x0
c000ddf2:	e8 bd 8e 01 00       	call   c0026cb4 <__divdf3>
c000ddf7:	83 c4 10             	add    esp,0x10
c000ddfa:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddfd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de01:	52                   	push   edx
c000de02:	50                   	push   eax
c000de03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de0b:	e8 43 85 01 00       	call   c0026353 <__adddf3>
c000de10:	83 c4 10             	add    esp,0x10
c000de13:	e9 ff fd ff ff       	jmp    c000dc17 <zoh_vari_process+0xc6>
c000de18:	55                   	push   ebp
c000de19:	55                   	push   ebp
c000de1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de22:	e8 29 96 01 00       	call   c0027450 <lrint>
c000de27:	83 ec 0c             	sub    esp,0xc
c000de2a:	50                   	push   eax
c000de2b:	e8 03 92 01 00       	call   c0027033 <__floatsidf>
c000de30:	83 c4 10             	add    esp,0x10
c000de33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de37:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de3b:	52                   	push   edx
c000de3c:	50                   	push   eax
c000de3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de45:	e8 5a 8b 01 00       	call   c00269a4 <__subdf3>
c000de4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de4e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de52:	83 c4 20             	add    esp,0x20
c000de55:	6a 00                	push   0x0
c000de57:	6a 00                	push   0x0
c000de59:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	e8 39 94 01 00       	call   c002729f <__ltdf2>
c000de66:	83 c4 10             	add    esp,0x10
c000de69:	85 c0                	test   eax,eax
c000de6b:	79 1e                	jns    c000de8b <zoh_vari_process+0x33a>
c000de6d:	68 00 00 f0 3f       	push   0x3ff00000
c000de72:	6a 00                	push   0x0
c000de74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de7c:	e8 d2 84 01 00       	call   c0026353 <__adddf3>
c000de81:	83 c4 10             	add    esp,0x10
c000de84:	89 04 24             	mov    DWORD PTR [esp],eax
c000de87:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de8b:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de8e:	83 ec 10             	sub    esp,0x10
c000de91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dea1:	e8 fe 8a 01 00       	call   c00269a4 <__subdf3>
c000dea6:	83 c4 18             	add    esp,0x18
c000dea9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dead:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000deb1:	52                   	push   edx
c000deb2:	50                   	push   eax
c000deb3:	e8 98 95 01 00       	call   c0027450 <lrint>
c000deb8:	83 c4 10             	add    esp,0x10
c000debb:	0f af e8             	imul   ebp,eax
c000debe:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000dec1:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000dec4:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000dec8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000decb:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000dece:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded2:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000ded5:	0f 8d 7a 02 00 00    	jge    c000e155 <zoh_vari_process+0x604>
c000dedb:	83 ec 0c             	sub    esp,0xc
c000dede:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dee1:	e8 4d 91 01 00       	call   c0027033 <__floatsidf>
c000dee6:	83 c4 10             	add    esp,0x10
c000dee9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000deed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000def1:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000def5:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000def9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000defd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df01:	e8 ca 8a 01 00       	call   c00269d0 <__muldf3>
c000df06:	59                   	pop    ecx
c000df07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000df0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000df0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df13:	e8 1b 91 01 00       	call   c0027033 <__floatsidf>
c000df18:	83 c4 10             	add    esp,0x10
c000df1b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df1f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df23:	52                   	push   edx
c000df24:	50                   	push   eax
c000df25:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df29:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df2d:	e8 21 84 01 00       	call   c0026353 <__adddf3>
c000df32:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000df35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000df39:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000df3d:	e8 f1 90 01 00       	call   c0027033 <__floatsidf>
c000df42:	83 c4 10             	add    esp,0x10
c000df45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df49:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df4d:	52                   	push   edx
c000df4e:	50                   	push   eax
c000df4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df53:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df57:	e8 45 93 01 00       	call   c00272a1 <__ledf2>
c000df5c:	83 c4 10             	add    esp,0x10
c000df5f:	85 c0                	test   eax,eax
c000df61:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df65:	0f 8f ea 01 00 00    	jg     c000e155 <zoh_vari_process+0x604>
c000df6b:	85 c9                	test   ecx,ecx
c000df6d:	0f 8e ed 00 00 00    	jle    c000e060 <zoh_vari_process+0x50f>
c000df73:	83 ec 10             	sub    esp,0x10
c000df76:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df79:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df7c:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df7f:	ff 37                	push   DWORD PTR [edi]
c000df81:	e8 1e 8a 01 00       	call   c00269a4 <__subdf3>
c000df86:	83 c4 18             	add    esp,0x18
c000df89:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df8d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df91:	52                   	push   edx
c000df92:	50                   	push   eax
c000df93:	e8 98 94 01 00       	call   c0027430 <fabs>
c000df98:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df9c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dfa0:	83 c4 10             	add    esp,0x10
c000dfa3:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dfa8:	68 23 42 92 0c       	push   0xc924223
c000dfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb5:	e8 c7 92 01 00       	call   c0027281 <__gtdf2>
c000dfba:	83 c4 10             	add    esp,0x10
c000dfbd:	85 c0                	test   eax,eax
c000dfbf:	0f 8e 9b 00 00 00    	jle    c000e060 <zoh_vari_process+0x50f>
c000dfc5:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfc7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dfca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfd2:	52                   	push   edx
c000dfd3:	50                   	push   eax
c000dfd4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dfd7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dfda:	e8 c5 89 01 00       	call   c00269a4 <__subdf3>
c000dfdf:	5d                   	pop    ebp
c000dfe0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfe4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfe8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfeb:	e8 43 90 01 00       	call   c0027033 <__floatsidf>
c000dff0:	83 c4 10             	add    esp,0x10
c000dff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dffb:	52                   	push   edx
c000dffc:	50                   	push   eax
c000dffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	e8 c6 89 01 00       	call   c00269d0 <__muldf3>
c000e00a:	59                   	pop    ecx
c000e00b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e00f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e013:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e016:	e8 18 90 01 00       	call   c0027033 <__floatsidf>
c000e01b:	83 c4 10             	add    esp,0x10
c000e01e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e022:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e026:	52                   	push   edx
c000e027:	50                   	push   eax
c000e028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e030:	e8 7f 8c 01 00       	call   c0026cb4 <__divdf3>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e044:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e04c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e050:	e8 fe 82 01 00       	call   c0026353 <__adddf3>
c000e055:	83 c4 10             	add    esp,0x10
c000e058:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e05c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e060:	31 d2                	xor    edx,edx
c000e062:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e065:	39 d0                	cmp    eax,edx
c000e067:	7e 1d                	jle    c000e086 <zoh_vari_process+0x535>
c000e069:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e06c:	29 c1                	sub    ecx,eax
c000e06e:	89 c8                	mov    eax,ecx
c000e070:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e072:	01 d0                	add    eax,edx
c000e074:	42                   	inc    edx
c000e075:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e078:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e07b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e07e:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e081:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e084:	eb dc                	jmp    c000e062 <zoh_vari_process+0x511>
c000e086:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e08a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e08e:	68 00 00 f0 3f       	push   0x3ff00000
c000e093:	6a 00                	push   0x0
c000e095:	e8 1a 8c 01 00       	call   c0026cb4 <__divdf3>
c000e09a:	83 c4 10             	add    esp,0x10
c000e09d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0a1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e0a5:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0a9:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0b5:	e8 99 82 01 00       	call   c0026353 <__adddf3>
c000e0ba:	5d                   	pop    ebp
c000e0bb:	59                   	pop    ecx
c000e0bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0cc:	e8 7f 93 01 00       	call   c0027450 <lrint>
c000e0d1:	83 ec 0c             	sub    esp,0xc
c000e0d4:	50                   	push   eax
c000e0d5:	e8 59 8f 01 00       	call   c0027033 <__floatsidf>
c000e0da:	83 c4 10             	add    esp,0x10
c000e0dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e0e5:	52                   	push   edx
c000e0e6:	50                   	push   eax
c000e0e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ef:	e8 b0 88 01 00       	call   c00269a4 <__subdf3>
c000e0f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0fc:	83 c4 20             	add    esp,0x20
c000e0ff:	6a 00                	push   0x0
c000e101:	6a 00                	push   0x0
c000e103:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e107:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e10b:	e8 8f 91 01 00       	call   c002729f <__ltdf2>
c000e110:	83 c4 10             	add    esp,0x10
c000e113:	85 c0                	test   eax,eax
c000e115:	79 1e                	jns    c000e135 <zoh_vari_process+0x5e4>
c000e117:	68 00 00 f0 3f       	push   0x3ff00000
c000e11c:	6a 00                	push   0x0
c000e11e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e122:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e126:	e8 28 82 01 00       	call   c0026353 <__adddf3>
c000e12b:	83 c4 10             	add    esp,0x10
c000e12e:	89 04 24             	mov    DWORD PTR [esp],eax
c000e131:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e135:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e138:	83 ec 10             	sub    esp,0x10
c000e13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e143:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e147:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e14b:	e8 54 88 01 00       	call   c00269a4 <__subdf3>
c000e150:	e9 51 fd ff ff       	jmp    c000dea6 <zoh_vari_process+0x355>
c000e155:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e159:	7d 3a                	jge    c000e195 <zoh_vari_process+0x644>
c000e15b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e15f:	83 ec 0c             	sub    esp,0xc
c000e162:	29 e8                	sub    eax,ebp
c000e164:	99                   	cdq    
c000e165:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e168:	50                   	push   eax
c000e169:	e8 c5 8e 01 00       	call   c0027033 <__floatsidf>
c000e16e:	83 c4 10             	add    esp,0x10
c000e171:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e175:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e179:	52                   	push   edx
c000e17a:	50                   	push   eax
c000e17b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e17f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e183:	e8 cb 81 01 00       	call   c0026353 <__adddf3>
c000e188:	83 c4 10             	add    esp,0x10
c000e18b:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e18e:	89 04 24             	mov    DWORD PTR [esp],eax
c000e191:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e195:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e198:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e19c:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e19f:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e1a2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e1a5:	85 c0                	test   eax,eax
c000e1a7:	7f 25                	jg     c000e1ce <zoh_vari_process+0x67d>
c000e1a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e1ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e1b1:	89 07                	mov    DWORD PTR [edi],eax
c000e1b3:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e1b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e1b9:	99                   	cdq    
c000e1ba:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e1bd:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e1c0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e1c3:	99                   	cdq    
c000e1c4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e1c7:	31 d2                	xor    edx,edx
c000e1c9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e1cc:	eb 1e                	jmp    c000e1ec <zoh_vari_process+0x69b>
c000e1ce:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e1d1:	31 d2                	xor    edx,edx
c000e1d3:	29 c8                	sub    eax,ecx
c000e1d5:	c1 e0 02             	shl    eax,0x2
c000e1d8:	39 d1                	cmp    ecx,edx
c000e1da:	7e cd                	jle    c000e1a9 <zoh_vari_process+0x658>
c000e1dc:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e1de:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e1e2:	83 c0 04             	add    eax,0x4
c000e1e5:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e1e9:	42                   	inc    edx
c000e1ea:	eb ec                	jmp    c000e1d8 <zoh_vari_process+0x687>
c000e1ec:	83 c4 3c             	add    esp,0x3c
c000e1ef:	89 d0                	mov    eax,edx
c000e1f1:	5b                   	pop    ebx
c000e1f2:	5e                   	pop    esi
c000e1f3:	5f                   	pop    edi
c000e1f4:	5d                   	pop    ebp
c000e1f5:	c3                   	ret    

c000e1f6 <zoh_reset>:
c000e1f6:	83 ec 0c             	sub    esp,0xc
c000e1f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1fd:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e200:	85 c0                	test   eax,eax
c000e202:	74 20                	je     c000e224 <zoh_reset+0x2e>
c000e204:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e207:	83 c0 1c             	add    eax,0x1c
c000e20a:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e20d:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e214:	c1 e2 02             	shl    edx,0x2
c000e217:	51                   	push   ecx
c000e218:	52                   	push   edx
c000e219:	6a 00                	push   0x0
c000e21b:	50                   	push   eax
c000e21c:	e8 b5 24 ff ff       	call   c00006d6 <memset>
c000e221:	83 c4 10             	add    esp,0x10
c000e224:	83 c4 0c             	add    esp,0xc
c000e227:	c3                   	ret    

c000e228 <zoh_get_name>:
c000e228:	31 c0                	xor    eax,eax
c000e22a:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e22f:	75 05                	jne    c000e236 <zoh_get_name+0xe>
c000e231:	b8 fe 8c 02 c0       	mov    eax,0xc0028cfe
c000e236:	c3                   	ret    

c000e237 <zoh_get_description>:
c000e237:	31 c0                	xor    eax,eax
c000e239:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e23e:	75 05                	jne    c000e245 <zoh_get_description+0xe>
c000e240:	b8 0f 8d 02 c0       	mov    eax,0xc0028d0f
c000e245:	c3                   	ret    

c000e246 <zoh_set_converter>:
c000e246:	53                   	push   ebx
c000e247:	b8 0a 00 00 00       	mov    eax,0xa
c000e24c:	83 ec 08             	sub    esp,0x8
c000e24f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e253:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e258:	75 6e                	jne    c000e2c8 <zoh_set_converter+0x82>
c000e25a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e25d:	85 c0                	test   eax,eax
c000e25f:	74 13                	je     c000e274 <zoh_set_converter+0x2e>
c000e261:	83 ec 0c             	sub    esp,0xc
c000e264:	50                   	push   eax
c000e265:	e8 dc 13 00 00       	call   c000f646 <free>
c000e26a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e271:	83 c4 10             	add    esp,0x10
c000e274:	50                   	push   eax
c000e275:	50                   	push   eax
c000e276:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e279:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e280:	50                   	push   eax
c000e281:	6a 01                	push   0x1
c000e283:	e8 de 13 00 00       	call   c000f666 <calloc>
c000e288:	83 c4 10             	add    esp,0x10
c000e28b:	89 c2                	mov    edx,eax
c000e28d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e290:	85 d2                	test   edx,edx
c000e292:	b8 01 00 00 00       	mov    eax,0x1
c000e297:	74 2f                	je     c000e2c8 <zoh_set_converter+0x82>
c000e299:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e2a2:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e2a8:	c7 43 24 51 db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db51
c000e2af:	c7 43 20 51 db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db51
c000e2b6:	c7 43 28 f6 e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1f6
c000e2bd:	53                   	push   ebx
c000e2be:	e8 33 ff ff ff       	call   c000e1f6 <zoh_reset>
c000e2c3:	83 c4 10             	add    esp,0x10
c000e2c6:	31 c0                	xor    eax,eax
c000e2c8:	83 c4 08             	add    esp,0x8
c000e2cb:	5b                   	pop    ebx
c000e2cc:	c3                   	ret    

c000e2cd <CPU::current()>:
c000e2cd:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c000e2d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e2d8:	90                   	nop
c000e2d9:	c3                   	ret    

c000e2da <operator new(unsigned long)>:
c000e2da:	83 ec 0c             	sub    esp,0xc
c000e2dd:	83 ec 0c             	sub    esp,0xc
c000e2e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2e4:	e8 4d 13 00 00       	call   c000f636 <malloc>
c000e2e9:	83 c4 10             	add    esp,0x10
c000e2ec:	83 c4 0c             	add    esp,0xc
c000e2ef:	c3                   	ret    

c000e2f0 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e2f0:	83 ec 0c             	sub    esp,0xc
c000e2f3:	83 ec 08             	sub    esp,0x8
c000e2f6:	68 46 8d 02 c0       	push   0xc0028d46
c000e2fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ff:	e8 c2 24 ff ff       	call   c00007c6 <strcmp>
c000e304:	83 c4 10             	add    esp,0x10
c000e307:	85 c0                	test   eax,eax
c000e309:	0f 94 c0             	sete   al
c000e30c:	84 c0                	test   al,al
c000e30e:	74 0a                	je     c000e31a <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e310:	b8 c8 ce 02 c0       	mov    eax,0xc002cec8
c000e315:	e9 e3 00 00 00       	jmp    c000e3fd <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e31a:	83 ec 08             	sub    esp,0x8
c000e31d:	68 4f 8d 02 c0       	push   0xc0028d4f
c000e322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e326:	e8 9b 24 ff ff       	call   c00007c6 <strcmp>
c000e32b:	83 c4 10             	add    esp,0x10
c000e32e:	85 c0                	test   eax,eax
c000e330:	0f 94 c0             	sete   al
c000e333:	84 c0                	test   al,al
c000e335:	74 0a                	je     c000e341 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e337:	b8 cc 57 02 c0       	mov    eax,0xc00257cc
c000e33c:	e9 bc 00 00 00       	jmp    c000e3fd <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e341:	83 ec 08             	sub    esp,0x8
c000e344:	68 59 8d 02 c0       	push   0xc0028d59
c000e349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e34d:	e8 74 24 ff ff       	call   c00007c6 <strcmp>
c000e352:	83 c4 10             	add    esp,0x10
c000e355:	85 c0                	test   eax,eax
c000e357:	0f 94 c0             	sete   al
c000e35a:	84 c0                	test   al,al
c000e35c:	74 0a                	je     c000e368 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e35e:	b8 00 55 02 c0       	mov    eax,0xc0025500
c000e363:	e9 95 00 00 00       	jmp    c000e3fd <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e368:	83 ec 08             	sub    esp,0x8
c000e36b:	68 62 8d 02 c0       	push   0xc0028d62
c000e370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e374:	e8 4d 24 ff ff       	call   c00007c6 <strcmp>
c000e379:	83 c4 10             	add    esp,0x10
c000e37c:	85 c0                	test   eax,eax
c000e37e:	0f 94 c0             	sete   al
c000e381:	84 c0                	test   al,al
c000e383:	74 07                	je     c000e38c <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e385:	b8 cc 58 02 c0       	mov    eax,0xc00258cc
c000e38a:	eb 71                	jmp    c000e3fd <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e38c:	83 ec 08             	sub    esp,0x8
c000e38f:	68 6c 8d 02 c0       	push   0xc0028d6c
c000e394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e398:	e8 29 24 ff ff       	call   c00007c6 <strcmp>
c000e39d:	83 c4 10             	add    esp,0x10
c000e3a0:	85 c0                	test   eax,eax
c000e3a2:	0f 94 c0             	sete   al
c000e3a5:	84 c0                	test   al,al
c000e3a7:	74 07                	je     c000e3b0 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e3a9:	b8 4c 56 02 c0       	mov    eax,0xc002564c
c000e3ae:	eb 4d                	jmp    c000e3fd <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3b0:	83 ec 08             	sub    esp,0x8
c000e3b3:	68 75 8d 02 c0       	push   0xc0028d75
c000e3b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3bc:	e8 05 24 ff ff       	call   c00007c6 <strcmp>
c000e3c1:	83 c4 10             	add    esp,0x10
c000e3c4:	85 c0                	test   eax,eax
c000e3c6:	0f 94 c0             	sete   al
c000e3c9:	84 c0                	test   al,al
c000e3cb:	74 07                	je     c000e3d4 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e3cd:	b8 cc ce 02 c0       	mov    eax,0xc002cecc
c000e3d2:	eb 29                	jmp    c000e3fd <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3d4:	83 ec 08             	sub    esp,0x8
c000e3d7:	68 82 8d 02 c0       	push   0xc0028d82
c000e3dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3e0:	e8 e1 23 ff ff       	call   c00007c6 <strcmp>
c000e3e5:	83 c4 10             	add    esp,0x10
c000e3e8:	85 c0                	test   eax,eax
c000e3ea:	0f 94 c0             	sete   al
c000e3ed:	84 c0                	test   al,al
c000e3ef:	74 07                	je     c000e3f8 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e3f1:	b8 cd ce 02 c0       	mov    eax,0xc002cecd
c000e3f6:	eb 05                	jmp    c000e3fd <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3f8:	b8 00 00 00 00       	mov    eax,0x0
c000e3fd:	83 c4 0c             	add    esp,0xc
c000e400:	c3                   	ret    
c000e401:	90                   	nop

c000e402 <Computer::close(int, int, void*)>:
c000e402:	57                   	push   edi
c000e403:	56                   	push   esi
c000e404:	53                   	push   ebx
c000e405:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e409:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e40d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e411:	83 ec 0c             	sub    esp,0xc
c000e414:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e41a:	e8 59 5a 00 00       	call   c0013e78 <Device::closeAll()>
c000e41f:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e425:	83 c4 10             	add    esp,0x10
c000e428:	8b 10                	mov    edx,DWORD PTR [eax]
c000e42a:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e42e:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e436:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e43a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e43e:	5b                   	pop    ebx
c000e43f:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e442:	5e                   	pop    esi
c000e443:	5f                   	pop    edi
c000e444:	ff e0                	jmp    eax

c000e446 <Krnl::firstTask()>:
c000e446:	53                   	push   ebx
c000e447:	83 ec 14             	sub    esp,0x14
c000e44a:	fb                   	sti    
c000e44b:	68 3f 07 00 00       	push   0x73f
c000e450:	e8 e1 11 00 00       	call   c000f636 <malloc>
c000e455:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e45c:	89 c3                	mov    ebx,eax
c000e45e:	ff 35 14 e4 02 c0    	push   DWORD PTR ds:0xc002e414
c000e464:	68 8f 8d 02 c0       	push   0xc0028d8f
c000e469:	6a 01                	push   0x1
c000e46b:	50                   	push   eax
c000e46c:	e8 1d eb 00 00       	call   c001cf8e <Process::Process(bool, char const*, Process*, char**)>
c000e471:	83 c4 20             	add    esp,0x20
c000e474:	68 ff 00 00 00       	push   0xff
c000e479:	6a 00                	push   0x0
c000e47b:	68 cb ef 00 c0       	push   0xc000efcb
c000e480:	53                   	push   ebx
c000e481:	e8 06 ee 00 00       	call   c001d28c <Process::createThread(void (*)(void*), void*, int)>
c000e486:	6a 7a                	push   0x7a
c000e488:	6a 00                	push   0x0
c000e48a:	68 ea da 01 c0       	push   0xc001daea
c000e48f:	ff 35 14 e4 02 c0    	push   DWORD PTR ds:0xc002e414
c000e495:	e8 f2 ed 00 00       	call   c001d28c <Process::createThread(void (*)(void*), void*, int)>
c000e49a:	83 c4 20             	add    esp,0x20
c000e49d:	a3 c8 e3 02 c0       	mov    ds:0xc002e3c8,eax
c000e4a2:	c6 05 cd ce 02 c0 01 	mov    BYTE PTR ds:0xc002cecd,0x1
c000e4a9:	e8 bd f9 00 00       	call   c001de6b <Vm::initialise8086()>
c000e4ae:	e8 ad 47 00 00       	call   c0012c60 <Fs::initVFS()>
c000e4b3:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c000e4b8:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e4be:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4c0:	6a 00                	push   0x0
c000e4c2:	6a 00                	push   0x0
c000e4c4:	6a 00                	push   0x0
c000e4c6:	50                   	push   eax
c000e4c7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4ca:	e8 b9 d4 00 00       	call   c001b988 <Sys::loadSyscalls()>
c000e4cf:	e8 9e b5 00 00       	call   c0019a72 <Krnl::loadSystemEnv()>
c000e4d4:	83 c4 0c             	add    esp,0xc
c000e4d7:	6a 3a                	push   0x3a
c000e4d9:	68 9c 8d 02 c0       	push   0xc0028d9c
c000e4de:	68 a5 8d 02 c0       	push   0xc0028da5
c000e4e3:	e8 46 c2 00 00       	call   c001a72e <Reg::readIntWithDefault(char*, char*, int)>
c000e4e8:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4eb:	e8 58 52 00 00       	call   c0013748 <User::loadClockSettings(int)>
c000e4f0:	58                   	pop    eax
c000e4f1:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c000e4f6:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e4fc:	e8 4b 59 00 00       	call   c0013e4c <Device::loadDriversForAll()>
c000e501:	5a                   	pop    edx
c000e502:	8b 1d c8 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cec8
c000e508:	59                   	pop    ecx
c000e509:	6a 01                	push   0x1
c000e50b:	68 ad 8d 02 c0       	push   0xc0028dad
c000e510:	e8 d2 e5 00 00       	call   c001cae7 <Thr::loadDLL(char const*, bool)>
c000e515:	5a                   	pop    edx
c000e516:	59                   	pop    ecx
c000e517:	53                   	push   ebx
c000e518:	50                   	push   eax
c000e519:	e8 d8 e7 00 00       	call   c001ccf6 <Thr::executeDLL(unsigned long, void*)>
c000e51e:	83 c4 10             	add    esp,0x10
c000e521:	83 ec 0c             	sub    esp,0xc
c000e524:	6a 02                	push   0x2
c000e526:	e8 c5 f0 00 00       	call   c001d5f0 <blockTask(TaskState)>
c000e52b:	83 c4 10             	add    esp,0x10
c000e52e:	eb f1                	jmp    c000e521 <Krnl::firstTask()+0xdb>

c000e530 <Computer::Computer()>:
c000e530:	83 ec 0c             	sub    esp,0xc
c000e533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e537:	83 ec 08             	sub    esp,0x8
c000e53a:	68 c9 8d 02 c0       	push   0xc0028dc9
c000e53f:	50                   	push   eax
c000e540:	e8 ad 59 00 00       	call   c0013ef2 <Device::Device(char const*)>
c000e545:	83 c4 10             	add    esp,0x10
c000e548:	ba 68 8f 02 c0       	mov    edx,0xc0028f68
c000e54d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e551:	89 10                	mov    DWORD PTR [eax],edx
c000e553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e557:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e565:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e56f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e573:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e579:	83 ca 04             	or     edx,0x4
c000e57c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e586:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e58c:	0f b6 d0             	movzx  edx,al
c000e58f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e593:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e59e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5a4:	0f b6 d0             	movzx  edx,al
c000e5a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5ab:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e5b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5b4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5ba:	8d 50 01             	lea    edx,[eax+0x1]
c000e5bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e5c1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e5c7:	0f b6 d0             	movzx  edx,al
c000e5ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5ce:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e5d2:	83 e1 3f             	and    ecx,0x3f
c000e5d5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e5d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5dd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5e3:	0f b6 d0             	movzx  edx,al
c000e5e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5ea:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e5f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5f5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5fb:	0f b6 d0             	movzx  edx,al
c000e5fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e602:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e60b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e611:	8d 50 01             	lea    edx,[eax+0x1]
c000e614:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e618:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e61e:	0f b6 d0             	movzx  edx,al
c000e621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e625:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e629:	83 e1 3f             	and    ecx,0x3f
c000e62c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e634:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e63a:	0f b6 d0             	movzx  edx,al
c000e63d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e641:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e64c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e652:	0f b6 d0             	movzx  edx,al
c000e655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e659:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e65e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e662:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e668:	8d 50 01             	lea    edx,[eax+0x1]
c000e66b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e66f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e675:	0f b6 d0             	movzx  edx,al
c000e678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e67c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e680:	83 e1 3f             	and    ecx,0x3f
c000e683:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e687:	90                   	nop
c000e688:	83 c4 0c             	add    esp,0xc
c000e68b:	c3                   	ret    

c000e68c <Computer::setBootMessage(char const*)>:
c000e68c:	c3                   	ret    
c000e68d:	90                   	nop

c000e68e <Computer::detectFeatures()>:
c000e68e:	55                   	push   ebp
c000e68f:	57                   	push   edi
c000e690:	56                   	push   esi
c000e691:	53                   	push   ebx
c000e692:	83 ec 1c             	sub    esp,0x1c
c000e695:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e699:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e6a3:	e8 3c 1c ff ff       	call   c00002e4 <detectCPUID>
c000e6a8:	85 c0                	test   eax,eax
c000e6aa:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6b0:	0f 95 c2             	setne  dl
c000e6b3:	83 e0 fd             	and    eax,0xfffffffd
c000e6b6:	d1 e2                	shl    edx,1
c000e6b8:	09 d0                	or     eax,edx
c000e6ba:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6c0:	a8 02                	test   al,0x2
c000e6c2:	75 46                	jne    c000e70a <Computer::detectFeatures()+0x7c>
c000e6c4:	f6 05 e1 ce 02 c0 04 	test   BYTE PTR ds:0xc002cee1,0x4
c000e6cb:	74 07                	je     c000e6d4 <Computer::detectFeatures()+0x46>
c000e6cd:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e6d4:	e8 bd 6d 01 00       	call   c0025496 <x87Detect>
c000e6d9:	83 e0 01             	and    eax,0x1
c000e6dc:	c1 e0 04             	shl    eax,0x4
c000e6df:	88 c2                	mov    dl,al
c000e6e1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6e7:	83 e0 ef             	and    eax,0xffffffef
c000e6ea:	09 d0                	or     eax,edx
c000e6ec:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6f2:	a8 10                	test   al,0x10
c000e6f4:	0f 85 2a 01 00 00    	jne    c000e824 <Computer::detectFeatures()+0x196>
c000e6fa:	84 c0                	test   al,al
c000e6fc:	0f 88 45 01 00 00    	js     c000e847 <Computer::detectFeatures()+0x1b9>
c000e702:	83 c4 1c             	add    esp,0x1c
c000e705:	5b                   	pop    ebx
c000e706:	5e                   	pop    esi
c000e707:	5f                   	pop    edi
c000e708:	5d                   	pop    ebp
c000e709:	c3                   	ret    
c000e70a:	83 ec 0c             	sub    esp,0xc
c000e70d:	6a 20                	push   0x20
c000e70f:	e8 20 9d 00 00       	call   c0018434 <CPU::cpuidCheckEDX(unsigned int)>
c000e714:	83 e0 01             	and    eax,0x1
c000e717:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e71e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e724:	83 e0 f7             	and    eax,0xfffffff7
c000e727:	09 d0                	or     eax,edx
c000e729:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e72f:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e736:	e8 f9 9c 00 00       	call   c0018434 <CPU::cpuidCheckEDX(unsigned int)>
c000e73b:	83 e0 01             	and    eax,0x1
c000e73e:	88 c2                	mov    dl,al
c000e740:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e746:	83 e0 fe             	and    eax,0xfffffffe
c000e749:	09 d0                	or     eax,edx
c000e74b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e751:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e758:	e8 d7 9c 00 00       	call   c0018434 <CPU::cpuidCheckEDX(unsigned int)>
c000e75d:	c1 e0 07             	shl    eax,0x7
c000e760:	88 c2                	mov    dl,al
c000e762:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e768:	83 e0 7f             	and    eax,0x7f
c000e76b:	09 d0                	or     eax,edx
c000e76d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e773:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e77a:	e8 b5 9c 00 00       	call   c0018434 <CPU::cpuidCheckEDX(unsigned int)>
c000e77f:	83 c4 10             	add    esp,0x10
c000e782:	83 e0 01             	and    eax,0x1
c000e785:	c1 e0 05             	shl    eax,0x5
c000e788:	88 c2                	mov    dl,al
c000e78a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e790:	83 e0 df             	and    eax,0xffffffdf
c000e793:	09 d0                	or     eax,edx
c000e795:	f7 05 e0 ce 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002cee0,0x401
c000e79f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e7a5:	0f 84 c2 00 00 00    	je     c000e86d <Computer::detectFeatures()+0x1df>
c000e7ab:	83 e0 fe             	and    eax,0xfffffffe
c000e7ae:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e7b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e7ba:	88 c2                	mov    dl,al
c000e7bc:	83 e2 09             	and    edx,0x9
c000e7bf:	fe ca                	dec    dl
c000e7c1:	75 09                	jne    c000e7cc <Computer::detectFeatures()+0x13e>
c000e7c3:	83 e0 fe             	and    eax,0xfffffffe
c000e7c6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e7cc:	83 ec 0c             	sub    esp,0xc
c000e7cf:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e7d3:	50                   	push   eax
c000e7d4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e7d8:	55                   	push   ebp
c000e7d9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e7dd:	57                   	push   edi
c000e7de:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e7e2:	56                   	push   esi
c000e7e3:	68 00 00 00 80       	push   0x80000000
c000e7e8:	e8 c3 9b 00 00       	call   c00183b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e7ed:	83 c4 20             	add    esp,0x20
c000e7f0:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e7f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e7fb:	0f 86 c3 fe ff ff    	jbe    c000e6c4 <Computer::detectFeatures()+0x36>
c000e801:	83 ec 0c             	sub    esp,0xc
c000e804:	50                   	push   eax
c000e805:	55                   	push   ebp
c000e806:	57                   	push   edi
c000e807:	56                   	push   esi
c000e808:	68 01 00 00 80       	push   0x80000001
c000e80d:	e8 9e 9b 00 00       	call   c00183b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e812:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e81c:	83 c4 20             	add    esp,0x20
c000e81f:	e9 a0 fe ff ff       	jmp    c000e6c4 <Computer::detectFeatures()+0x36>
c000e824:	e8 27 6c 01 00       	call   c0025450 <absolutelyNoChanceInHell>
c000e829:	88 c2                	mov    dl,al
c000e82b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e831:	c1 e2 07             	shl    edx,0x7
c000e834:	83 e0 7f             	and    eax,0x7f
c000e837:	09 d0                	or     eax,edx
c000e839:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e83f:	84 c0                	test   al,al
c000e841:	0f 89 bb fe ff ff    	jns    c000e702 <Computer::detectFeatures()+0x74>
c000e847:	e8 e4 6b 01 00       	call   c0025430 <avxDetect>
c000e84c:	83 e0 01             	and    eax,0x1
c000e84f:	c1 e0 05             	shl    eax,0x5
c000e852:	88 c2                	mov    dl,al
c000e854:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e85a:	83 e0 df             	and    eax,0xffffffdf
c000e85d:	09 d0                	or     eax,edx
c000e85f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e865:	83 c4 1c             	add    esp,0x1c
c000e868:	5b                   	pop    ebx
c000e869:	5e                   	pop    esi
c000e86a:	5f                   	pop    edi
c000e86b:	5d                   	pop    ebp
c000e86c:	c3                   	ret    
c000e86d:	83 ec 0c             	sub    esp,0xc
c000e870:	68 00 02 00 00       	push   0x200
c000e875:	e8 ba 9b 00 00       	call   c0018434 <CPU::cpuidCheckEDX(unsigned int)>
c000e87a:	83 c4 10             	add    esp,0x10
c000e87d:	83 e0 01             	and    eax,0x1
c000e880:	88 c2                	mov    dl,al
c000e882:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e888:	83 e0 fe             	and    eax,0xfffffffe
c000e88b:	09 d0                	or     eax,edx
c000e88d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e893:	e9 1c ff ff ff       	jmp    c000e7b4 <Computer::detectFeatures()+0x126>

c000e898 <Computer::displayFeatures()>:
c000e898:	53                   	push   ebx
c000e899:	83 ec 14             	sub    esp,0x14
c000e89c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e8a0:	68 d9 8d 02 c0       	push   0xc0028dd9
c000e8a5:	e8 31 40 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000e8aa:	83 c4 10             	add    esp,0x10
c000e8ad:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e8b4:	0f 85 73 02 00 00    	jne    c000eb2d <Computer::displayFeatures()+0x295>
c000e8ba:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000e8bf:	83 ec 08             	sub    esp,0x8
c000e8c2:	50                   	push   eax
c000e8c3:	68 ec 8d 02 c0       	push   0xc0028dec
c000e8c8:	e8 0e 40 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000e8cd:	83 c4 10             	add    esp,0x10
c000e8d0:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e8d7:	0f 85 8c 02 00 00    	jne    c000eb69 <Computer::displayFeatures()+0x2d1>
c000e8dd:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000e8e2:	83 ec 08             	sub    esp,0x8
c000e8e5:	50                   	push   eax
c000e8e6:	68 fd 8d 02 c0       	push   0xc0028dfd
c000e8eb:	e8 eb 3f 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000e8f0:	83 c4 10             	add    esp,0x10
c000e8f3:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e8fa:	0f 85 5f 02 00 00    	jne    c000eb5f <Computer::displayFeatures()+0x2c7>
c000e900:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000e905:	83 ec 08             	sub    esp,0x8
c000e908:	50                   	push   eax
c000e909:	68 0e 8e 02 c0       	push   0xc0028e0e
c000e90e:	e8 c8 3f 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000e913:	83 c4 10             	add    esp,0x10
c000e916:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e91d:	0f 85 32 02 00 00    	jne    c000eb55 <Computer::displayFeatures()+0x2bd>
c000e923:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000e928:	83 ec 08             	sub    esp,0x8
c000e92b:	50                   	push   eax
c000e92c:	68 1f 8e 02 c0       	push   0xc0028e1f
c000e931:	e8 a5 3f 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000e936:	83 c4 10             	add    esp,0x10
c000e939:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e940:	0f 85 05 02 00 00    	jne    c000eb4b <Computer::displayFeatures()+0x2b3>
c000e946:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000e94b:	83 ec 08             	sub    esp,0x8
c000e94e:	50                   	push   eax
c000e94f:	68 30 8e 02 c0       	push   0xc0028e30
c000e954:	e8 82 3f 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000e959:	83 c4 10             	add    esp,0x10
c000e95c:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e963:	0f 85 d8 01 00 00    	jne    c000eb41 <Computer::displayFeatures()+0x2a9>
c000e969:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000e96e:	83 ec 08             	sub    esp,0x8
c000e971:	50                   	push   eax
c000e972:	68 41 8e 02 c0       	push   0xc0028e41
c000e977:	e8 5f 3f 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000e97c:	83 c4 10             	add    esp,0x10
c000e97f:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e986:	0f 85 ab 01 00 00    	jne    c000eb37 <Computer::displayFeatures()+0x29f>
c000e98c:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000e991:	83 ec 08             	sub    esp,0x8
c000e994:	50                   	push   eax
c000e995:	68 52 8e 02 c0       	push   0xc0028e52
c000e99a:	e8 3c 3f 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000e99f:	83 c4 10             	add    esp,0x10
c000e9a2:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e9a9:	0f 88 1b 02 00 00    	js     c000ebca <Computer::displayFeatures()+0x332>
c000e9af:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000e9b4:	83 ec 08             	sub    esp,0x8
c000e9b7:	50                   	push   eax
c000e9b8:	68 63 8e 02 c0       	push   0xc0028e63
c000e9bd:	e8 19 3f 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000e9c2:	83 c4 10             	add    esp,0x10
c000e9c5:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e9cc:	0f 85 a1 01 00 00    	jne    c000eb73 <Computer::displayFeatures()+0x2db>
c000e9d2:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000e9d7:	83 ec 08             	sub    esp,0x8
c000e9da:	50                   	push   eax
c000e9db:	68 74 8e 02 c0       	push   0xc0028e74
c000e9e0:	e8 f6 3e 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000e9e5:	83 c4 10             	add    esp,0x10
c000e9e8:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e9ef:	0f 85 cb 01 00 00    	jne    c000ebc0 <Computer::displayFeatures()+0x328>
c000e9f5:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000e9fa:	83 ec 08             	sub    esp,0x8
c000e9fd:	50                   	push   eax
c000e9fe:	68 85 8e 02 c0       	push   0xc0028e85
c000ea03:	e8 d3 3e 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000ea08:	83 c4 10             	add    esp,0x10
c000ea0b:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ea12:	0f 85 9e 01 00 00    	jne    c000ebb6 <Computer::displayFeatures()+0x31e>
c000ea18:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000ea1d:	83 ec 08             	sub    esp,0x8
c000ea20:	50                   	push   eax
c000ea21:	68 96 8e 02 c0       	push   0xc0028e96
c000ea26:	e8 b0 3e 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000ea2b:	83 c4 10             	add    esp,0x10
c000ea2e:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ea35:	0f 85 71 01 00 00    	jne    c000ebac <Computer::displayFeatures()+0x314>
c000ea3b:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000ea40:	83 ec 08             	sub    esp,0x8
c000ea43:	50                   	push   eax
c000ea44:	68 a7 8e 02 c0       	push   0xc0028ea7
c000ea49:	e8 8d 3e 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000ea4e:	83 c4 10             	add    esp,0x10
c000ea51:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ea58:	0f 85 44 01 00 00    	jne    c000eba2 <Computer::displayFeatures()+0x30a>
c000ea5e:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000ea63:	83 ec 08             	sub    esp,0x8
c000ea66:	50                   	push   eax
c000ea67:	68 b8 8e 02 c0       	push   0xc0028eb8
c000ea6c:	e8 6a 3e 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000ea71:	83 c4 10             	add    esp,0x10
c000ea74:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ea7b:	0f 85 17 01 00 00    	jne    c000eb98 <Computer::displayFeatures()+0x300>
c000ea81:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000ea86:	83 ec 08             	sub    esp,0x8
c000ea89:	50                   	push   eax
c000ea8a:	68 c9 8e 02 c0       	push   0xc0028ec9
c000ea8f:	e8 47 3e 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000ea94:	83 c4 10             	add    esp,0x10
c000ea97:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ea9e:	0f 85 ea 00 00 00    	jne    c000eb8e <Computer::displayFeatures()+0x2f6>
c000eaa4:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000eaa9:	83 ec 08             	sub    esp,0x8
c000eaac:	50                   	push   eax
c000eaad:	68 da 8e 02 c0       	push   0xc0028eda
c000eab2:	e8 24 3e 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000eab7:	83 c4 10             	add    esp,0x10
c000eaba:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eac1:	0f 88 0d 01 00 00    	js     c000ebd4 <Computer::displayFeatures()+0x33c>
c000eac7:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000eacc:	83 ec 08             	sub    esp,0x8
c000eacf:	50                   	push   eax
c000ead0:	68 eb 8e 02 c0       	push   0xc0028eeb
c000ead5:	e8 01 3e 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000eada:	83 c4 10             	add    esp,0x10
c000eadd:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000eae4:	0f 85 9a 00 00 00    	jne    c000eb84 <Computer::displayFeatures()+0x2ec>
c000eaea:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000eaef:	83 ec 08             	sub    esp,0x8
c000eaf2:	50                   	push   eax
c000eaf3:	68 fc 8e 02 c0       	push   0xc0028efc
c000eaf8:	e8 de 3d 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000eafd:	83 c4 10             	add    esp,0x10
c000eb00:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000eb07:	75 74                	jne    c000eb7d <Computer::displayFeatures()+0x2e5>
c000eb09:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000eb0e:	83 ec 08             	sub    esp,0x8
c000eb11:	50                   	push   eax
c000eb12:	68 0d 8f 02 c0       	push   0xc0028f0d
c000eb17:	e8 bf 3d 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000eb1c:	c7 44 24 20 4b a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a74b
c000eb24:	83 c4 18             	add    esp,0x18
c000eb27:	5b                   	pop    ebx
c000eb28:	e9 ae 3d 00 00       	jmp    c00128db <Dbg::kprintf(char const*, ...)>
c000eb2d:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb32:	e9 88 fd ff ff       	jmp    c000e8bf <Computer::displayFeatures()+0x27>
c000eb37:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb3c:	e9 50 fe ff ff       	jmp    c000e991 <Computer::displayFeatures()+0xf9>
c000eb41:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb46:	e9 23 fe ff ff       	jmp    c000e96e <Computer::displayFeatures()+0xd6>
c000eb4b:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb50:	e9 f6 fd ff ff       	jmp    c000e94b <Computer::displayFeatures()+0xb3>
c000eb55:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb5a:	e9 c9 fd ff ff       	jmp    c000e928 <Computer::displayFeatures()+0x90>
c000eb5f:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb64:	e9 9c fd ff ff       	jmp    c000e905 <Computer::displayFeatures()+0x6d>
c000eb69:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb6e:	e9 6f fd ff ff       	jmp    c000e8e2 <Computer::displayFeatures()+0x4a>
c000eb73:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb78:	e9 5a fe ff ff       	jmp    c000e9d7 <Computer::displayFeatures()+0x13f>
c000eb7d:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb82:	eb 8a                	jmp    c000eb0e <Computer::displayFeatures()+0x276>
c000eb84:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb89:	e9 61 ff ff ff       	jmp    c000eaef <Computer::displayFeatures()+0x257>
c000eb8e:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb93:	e9 11 ff ff ff       	jmp    c000eaa9 <Computer::displayFeatures()+0x211>
c000eb98:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb9d:	e9 e4 fe ff ff       	jmp    c000ea86 <Computer::displayFeatures()+0x1ee>
c000eba2:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eba7:	e9 b7 fe ff ff       	jmp    c000ea63 <Computer::displayFeatures()+0x1cb>
c000ebac:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000ebb1:	e9 8a fe ff ff       	jmp    c000ea40 <Computer::displayFeatures()+0x1a8>
c000ebb6:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000ebbb:	e9 5d fe ff ff       	jmp    c000ea1d <Computer::displayFeatures()+0x185>
c000ebc0:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000ebc5:	e9 30 fe ff ff       	jmp    c000e9fa <Computer::displayFeatures()+0x162>
c000ebca:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000ebcf:	e9 e0 fd ff ff       	jmp    c000e9b4 <Computer::displayFeatures()+0x11c>
c000ebd4:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000ebd9:	e9 ee fe ff ff       	jmp    c000eacc <Computer::displayFeatures()+0x234>

c000ebde <Computer::rdmsr(unsigned int)>:
c000ebde:	83 ec 0c             	sub    esp,0xc
c000ebe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebe5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ebec:	74 0a                	je     c000ebf8 <Computer::rdmsr(unsigned int)+0x1a>
c000ebee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ebf2:	0f 32                	rdmsr  
c000ebf4:	83 c4 0c             	add    esp,0xc
c000ebf7:	c3                   	ret    
c000ebf8:	83 ec 0c             	sub    esp,0xc
c000ebfb:	68 1e 8f 02 c0       	push   0xc0028f1e
c000ec00:	e8 a6 af 00 00       	call   c0019bab <Krnl::panic(char const*)>
c000ec05:	83 c4 10             	add    esp,0x10
c000ec08:	eb e4                	jmp    c000ebee <Computer::rdmsr(unsigned int)+0x10>

c000ec0a <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ec0a:	57                   	push   edi
c000ec0b:	56                   	push   esi
c000ec0c:	52                   	push   edx
c000ec0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec11:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ec15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ec19:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ec20:	74 0e                	je     c000ec30 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ec22:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ec26:	89 f0                	mov    eax,esi
c000ec28:	89 fa                	mov    edx,edi
c000ec2a:	0f 30                	wrmsr  
c000ec2c:	58                   	pop    eax
c000ec2d:	5e                   	pop    esi
c000ec2e:	5f                   	pop    edi
c000ec2f:	c3                   	ret    
c000ec30:	83 ec 0c             	sub    esp,0xc
c000ec33:	68 24 8f 02 c0       	push   0xc0028f24
c000ec38:	e8 6e af 00 00       	call   c0019bab <Krnl::panic(char const*)>
c000ec3d:	83 c4 10             	add    esp,0x10
c000ec40:	eb e0                	jmp    c000ec22 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ec42 <Computer::nmiEnabled()>:
c000ec42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec46:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ec4c:	c3                   	ret    
c000ec4d:	90                   	nop

c000ec4e <Computer::readCMOS(unsigned char)>:
c000ec4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec52:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec59:	19 c0                	sbb    eax,eax
c000ec5b:	83 e0 80             	and    eax,0xffffff80
c000ec5e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec62:	e6 70                	out    0x70,al
c000ec64:	e4 71                	in     al,0x71
c000ec66:	c3                   	ret    
c000ec67:	90                   	nop

c000ec68 <Computer::enableNMI(bool)>:
c000ec68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec70:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ec76:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ec7e:	eb ce                	jmp    c000ec4e <Computer::readCMOS(unsigned char)>

c000ec80 <Computer::open(int, int, void*)>:
c000ec80:	56                   	push   esi
c000ec81:	53                   	push   ebx
c000ec82:	83 ec 10             	sub    esp,0x10
c000ec85:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ec89:	f6 05 e0 ce 02 c0 04 	test   BYTE PTR ds:0xc002cee0,0x4
c000ec90:	68 68 22 00 00       	push   0x2268
c000ec95:	0f 94 05 04 be 02 c0 	sete   BYTE PTR ds:0xc002be04
c000ec9c:	e8 95 09 00 00       	call   c000f636 <malloc>
c000eca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000eca4:	89 c6                	mov    esi,eax
c000eca6:	e8 17 8c 00 00       	call   c00178c2 <ACPI::ACPI()>
c000ecab:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ecb1:	58                   	pop    eax
c000ecb2:	5a                   	pop    edx
c000ecb3:	56                   	push   esi
c000ecb4:	53                   	push   ebx
c000ecb5:	e8 48 50 00 00       	call   c0013d02 <Device::addChild(Device*)>
c000ecba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ecbd:	e8 cc f9 ff ff       	call   c000e68e <Computer::detectFeatures()>
c000ecc2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ecc5:	e8 ce fb ff ff       	call   c000e898 <Computer::displayFeatures()>
c000ecca:	59                   	pop    ecx
c000eccb:	5e                   	pop    esi
c000eccc:	6a 01                	push   0x1
c000ecce:	53                   	push   ebx
c000eccf:	e8 94 ff ff ff       	call   c000ec68 <Computer::enableNMI(bool)>
c000ecd4:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ecdb:	e8 56 09 00 00       	call   c000f636 <malloc>
c000ece0:	89 04 24             	mov    DWORD PTR [esp],eax
c000ece3:	89 c6                	mov    esi,eax
c000ece5:	e8 02 98 00 00       	call   c00184ec <CPU::CPU()>
c000ecea:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ecf0:	58                   	pop    eax
c000ecf1:	5a                   	pop    edx
c000ecf2:	56                   	push   esi
c000ecf3:	53                   	push   ebx
c000ecf4:	e8 09 50 00 00       	call   c0013d02 <Device::addChild(Device*)>
c000ecf9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ecff:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ed05:	6a 00                	push   0x0
c000ed07:	6a 00                	push   0x0
c000ed09:	50                   	push   eax
c000ed0a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ed0d:	83 c4 20             	add    esp,0x20
c000ed10:	e8 5f 55 00 00       	call   c0014274 <setupFPU()>
c000ed15:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ed1b:	85 c0                	test   eax,eax
c000ed1d:	74 1f                	je     c000ed3e <Computer::open(int, int, void*)+0xbe>
c000ed1f:	83 ec 08             	sub    esp,0x8
c000ed22:	50                   	push   eax
c000ed23:	53                   	push   ebx
c000ed24:	e8 d9 4f 00 00       	call   c0013d02 <Device::addChild(Device*)>
c000ed29:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ed2f:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed31:	6a 00                	push   0x0
c000ed33:	6a 00                	push   0x0
c000ed35:	6a 00                	push   0x0
c000ed37:	50                   	push   eax
c000ed38:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ed3b:	83 c4 20             	add    esp,0x20
c000ed3e:	83 ec 0c             	sub    esp,0xc
c000ed41:	68 46 e4 00 c0       	push   0xc000e446
c000ed46:	e8 41 e6 00 00       	call   c001d38c <setupMultitasking(void (*)())>
c000ed4b:	83 c4 14             	add    esp,0x14
c000ed4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ed53:	5b                   	pop    ebx
c000ed54:	5e                   	pop    esi
c000ed55:	c3                   	ret    

c000ed56 <Computer::disableNMI()>:
c000ed56:	6a 00                	push   0x0
c000ed58:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ed5c:	e8 07 ff ff ff       	call   c000ec68 <Computer::enableNMI(bool)>
c000ed61:	58                   	pop    eax
c000ed62:	5a                   	pop    edx
c000ed63:	c3                   	ret    

c000ed64 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ed64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed68:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ed6f:	19 c0                	sbb    eax,eax
c000ed71:	83 e0 80             	and    eax,0xffffff80
c000ed74:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ed78:	e6 70                	out    0x70,al
c000ed7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed7e:	e6 71                	out    0x71,al
c000ed80:	c3                   	ret    
c000ed81:	90                   	nop

c000ed82 <Computer::handleNMI()>:
c000ed82:	56                   	push   esi
c000ed83:	53                   	push   ebx
c000ed84:	83 ec 10             	sub    esp,0x10
c000ed87:	e4 92                	in     al,0x92
c000ed89:	89 c6                	mov    esi,eax
c000ed8b:	e4 61                	in     al,0x61
c000ed8d:	68 2a 8f 02 c0       	push   0xc0028f2a
c000ed92:	88 c3                	mov    bl,al
c000ed94:	e8 42 3b 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000ed99:	83 c4 10             	add    esp,0x10
c000ed9c:	83 e6 10             	and    esi,0x10
c000ed9f:	75 0d                	jne    c000edae <Computer::handleNMI()+0x2c>
c000eda1:	f6 c3 40             	test   bl,0x40
c000eda4:	75 1d                	jne    c000edc3 <Computer::handleNMI()+0x41>
c000eda6:	84 db                	test   bl,bl
c000eda8:	78 2d                	js     c000edd7 <Computer::handleNMI()+0x55>
c000edaa:	58                   	pop    eax
c000edab:	5b                   	pop    ebx
c000edac:	5e                   	pop    esi
c000edad:	c3                   	ret    
c000edae:	83 ec 0c             	sub    esp,0xc
c000edb1:	68 3b 8f 02 c0       	push   0xc0028f3b
c000edb6:	e8 f0 ad 00 00       	call   c0019bab <Krnl::panic(char const*)>
c000edbb:	83 c4 10             	add    esp,0x10
c000edbe:	f6 c3 40             	test   bl,0x40
c000edc1:	74 e3                	je     c000eda6 <Computer::handleNMI()+0x24>
c000edc3:	83 ec 0c             	sub    esp,0xc
c000edc6:	68 48 8f 02 c0       	push   0xc0028f48
c000edcb:	e8 db ad 00 00       	call   c0019bab <Krnl::panic(char const*)>
c000edd0:	83 c4 10             	add    esp,0x10
c000edd3:	84 db                	test   bl,bl
c000edd5:	79 d3                	jns    c000edaa <Computer::handleNMI()+0x28>
c000edd7:	c7 44 24 10 52 8f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028f52
c000eddf:	5a                   	pop    edx
c000ede0:	5b                   	pop    ebx
c000ede1:	5e                   	pop    esi
c000ede2:	e9 c4 ad 00 00       	jmp    c0019bab <Krnl::panic(char const*)>
c000ede7:	90                   	nop

c000ede8 <Computer::setDiskActivityLight(int, bool)>:
c000ede8:	56                   	push   esi
c000ede9:	53                   	push   ebx
c000edea:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000edee:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000edf3:	77 1b                	ja     c000ee10 <Computer::setDiskActivityLight(int, bool)+0x28>
c000edf5:	e4 92                	in     al,0x92
c000edf7:	bb 40 00 00 00       	mov    ebx,0x40
c000edfc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ee00:	89 da                	mov    edx,ebx
c000ee02:	d3 e2                	shl    edx,cl
c000ee04:	89 f1                	mov    ecx,esi
c000ee06:	f7 d2                	not    edx
c000ee08:	d3 e3                	shl    ebx,cl
c000ee0a:	21 d0                	and    eax,edx
c000ee0c:	09 d8                	or     eax,ebx
c000ee0e:	e6 92                	out    0x92,al
c000ee10:	5b                   	pop    ebx
c000ee11:	5e                   	pop    esi
c000ee12:	c3                   	ret    
c000ee13:	90                   	nop

c000ee14 <GDTEntry::setBase(unsigned int)>:
c000ee14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee18:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ee1c:	89 c1                	mov    ecx,eax
c000ee1e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ee22:	c1 e9 10             	shr    ecx,0x10
c000ee25:	c1 e8 18             	shr    eax,0x18
c000ee28:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ee2b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ee2e:	c3                   	ret    
c000ee2f:	90                   	nop

c000ee30 <GDTEntry::setLimit(unsigned int)>:
c000ee30:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee38:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ee3b:	66 89 01             	mov    WORD PTR [ecx],ax
c000ee3e:	83 e2 f0             	and    edx,0xfffffff0
c000ee41:	c1 e8 10             	shr    eax,0x10
c000ee44:	83 e0 0f             	and    eax,0xf
c000ee47:	09 d0                	or     eax,edx
c000ee49:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ee4c:	c3                   	ret    
c000ee4d:	90                   	nop

c000ee4e <GDT::GDT()>:
c000ee4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee62:	90                   	nop
c000ee63:	c3                   	ret    

c000ee64 <GDT::addEntry(GDTEntry)>:
c000ee64:	53                   	push   ebx
c000ee65:	83 ec 0c             	sub    esp,0xc
c000ee68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ee6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee6e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ee75:	52                   	push   edx
c000ee76:	50                   	push   eax
c000ee77:	68 8c 8f 02 c0       	push   0xc0028f8c
c000ee7c:	e8 5a 3a 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000ee81:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee83:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ee87:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ee8b:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ee8f:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ee93:	8d 50 01             	lea    edx,[eax+0x1]
c000ee96:	c1 e0 03             	shl    eax,0x3
c000ee99:	89 13                	mov    DWORD PTR [ebx],edx
c000ee9b:	83 c4 18             	add    esp,0x18
c000ee9e:	5b                   	pop    ebx
c000ee9f:	c3                   	ret    

c000eea0 <GDT::getNumberOfEntries()>:
c000eea0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eea4:	8b 00                	mov    eax,DWORD PTR [eax]
c000eea6:	c3                   	ret    
c000eea7:	90                   	nop

c000eea8 <GDT::flush()>:
c000eea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eeac:	8b 10                	mov    edx,DWORD PTR [eax]
c000eeae:	83 c0 04             	add    eax,0x4
c000eeb1:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000eeb8:	a3 d2 ce 02 c0       	mov    ds:0xc002ced2,eax
c000eebd:	66 89 15 d0 ce 02 c0 	mov    WORD PTR ds:0xc002ced0,dx
c000eec4:	e9 7f 15 ff ff       	jmp    c0000448 <loadGDT>
c000eec9:	90                   	nop

c000eeca <GDT::setup()>:
c000eeca:	55                   	push   ebp
c000eecb:	57                   	push   edi
c000eecc:	56                   	push   esi
c000eecd:	53                   	push   ebx
c000eece:	83 ec 3c             	sub    esp,0x3c
c000eed1:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000eed5:	6a 00                	push   0x0
c000eed7:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000eedb:	53                   	push   ebx
c000eedc:	e8 33 ff ff ff       	call   c000ee14 <GDTEntry::setBase(unsigned int)>
c000eee1:	6a 00                	push   0x0
c000eee3:	53                   	push   ebx
c000eee4:	e8 47 ff ff ff       	call   c000ee30 <GDTEntry::setLimit(unsigned int)>
c000eee9:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000eef1:	6a 00                	push   0x0
c000eef3:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000eef7:	53                   	push   ebx
c000eef8:	e8 17 ff ff ff       	call   c000ee14 <GDTEntry::setBase(unsigned int)>
c000eefd:	68 ff ff ff 00       	push   0xffffff
c000ef02:	53                   	push   ebx
c000ef03:	e8 28 ff ff ff       	call   c000ee30 <GDTEntry::setLimit(unsigned int)>
c000ef08:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ef0c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ef11:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ef16:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef1a:	83 c4 20             	add    esp,0x20
c000ef1d:	6a 00                	push   0x0
c000ef1f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ef23:	53                   	push   ebx
c000ef24:	e8 eb fe ff ff       	call   c000ee14 <GDTEntry::setBase(unsigned int)>
c000ef29:	68 ff ff ff 00       	push   0xffffff
c000ef2e:	53                   	push   ebx
c000ef2f:	e8 fc fe ff ff       	call   c000ee30 <GDTEntry::setLimit(unsigned int)>
c000ef34:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ef38:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ef3c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ef40:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ef44:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ef48:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ef4d:	0d 00 92 c0 00       	or     eax,0xc09200
c000ef52:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ef56:	89 d8                	mov    eax,ebx
c000ef58:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ef5c:	80 cc 60             	or     ah,0x60
c000ef5f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef63:	83 c4 0c             	add    esp,0xc
c000ef66:	89 f8                	mov    eax,edi
c000ef68:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef6c:	80 cc 60             	or     ah,0x60
c000ef6f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef73:	89 c7                	mov    edi,eax
c000ef75:	55                   	push   ebp
c000ef76:	e8 e9 fe ff ff       	call   c000ee64 <GDT::addEntry(GDTEntry)>
c000ef7b:	83 c4 0c             	add    esp,0xc
c000ef7e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef86:	55                   	push   ebp
c000ef87:	e8 d8 fe ff ff       	call   c000ee64 <GDT::addEntry(GDTEntry)>
c000ef8c:	83 c4 0c             	add    esp,0xc
c000ef8f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef93:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef97:	55                   	push   ebp
c000ef98:	e8 c7 fe ff ff       	call   c000ee64 <GDT::addEntry(GDTEntry)>
c000ef9d:	83 c4 0c             	add    esp,0xc
c000efa0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000efa4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000efa8:	53                   	push   ebx
c000efa9:	51                   	push   ecx
c000efaa:	55                   	push   ebp
c000efab:	e8 b4 fe ff ff       	call   c000ee64 <GDT::addEntry(GDTEntry)>
c000efb0:	83 c4 0c             	add    esp,0xc
c000efb3:	57                   	push   edi
c000efb4:	56                   	push   esi
c000efb5:	55                   	push   ebp
c000efb6:	e8 a9 fe ff ff       	call   c000ee64 <GDT::addEntry(GDTEntry)>
c000efbb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000efbe:	e8 e5 fe ff ff       	call   c000eea8 <GDT::flush()>
c000efc3:	83 c4 4c             	add    esp,0x4c
c000efc6:	5b                   	pop    ebx
c000efc7:	5e                   	pop    esi
c000efc8:	5f                   	pop    edi
c000efc9:	5d                   	pop    ebp
c000efca:	c3                   	ret    

c000efcb <idleFunction(void*)>:
c000efcb:	53                   	push   ebx
c000efcc:	83 ec 08             	sub    esp,0x8
c000efcf:	e8 88 e1 00 00       	call   c001d15c <unlockScheduler()>
c000efd4:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c000efd9:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000efdf:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000efe6:	74 3c                	je     c000f024 <idleFunction(void*)+0x59>
c000efe8:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000efef:	74 33                	je     c000f024 <idleFunction(void*)+0x59>
c000eff1:	31 db                	xor    ebx,ebx
c000eff3:	52                   	push   edx
c000eff4:	52                   	push   edx
c000eff5:	68 e1 00 00 00       	push   0xe1
c000effa:	50                   	push   eax
c000effb:	e8 de fb ff ff       	call   c000ebde <Computer::rdmsr(unsigned int)>
c000f000:	53                   	push   ebx
c000f001:	83 e0 02             	and    eax,0x2
c000f004:	50                   	push   eax
c000f005:	68 e1 00 00 00       	push   0xe1
c000f00a:	ff 35 c8 ce 02 c0    	push   DWORD PTR ds:0xc002cec8
c000f010:	e8 f5 fb ff ff       	call   c000ec0a <Computer::wrmsr(unsigned int, unsigned long long)>
c000f015:	83 c4 20             	add    esp,0x20
c000f018:	e8 62 12 ff ff       	call   c000027f <doTPAUSE>
c000f01d:	e8 ae 84 01 00       	call   c00274d0 <idleCommon()>
c000f022:	eb f4                	jmp    c000f018 <idleFunction(void*)+0x4d>
c000f024:	fb                   	sti    
c000f025:	f4                   	hlt    
c000f026:	e8 a5 84 01 00       	call   c00274d0 <idleCommon()>
c000f02b:	eb f7                	jmp    c000f024 <idleFunction(void*)+0x59>
c000f02d:	90                   	nop

c000f02e <IDTEntry::IDTEntry(bool)>:
c000f02e:	83 ec 04             	sub    esp,0x4
c000f031:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f035:	88 04 24             	mov    BYTE PTR [esp],al
c000f038:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f03c:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f042:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f046:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f04a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f04e:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f051:	83 e2 f0             	and    edx,0xfffffff0
c000f054:	83 ca 0e             	or     edx,0xe
c000f057:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f05a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f05e:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f061:	83 e2 ef             	and    edx,0xffffffef
c000f064:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f067:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f06b:	74 04                	je     c000f071 <IDTEntry::IDTEntry(bool)+0x43>
c000f06d:	b2 03                	mov    dl,0x3
c000f06f:	eb 02                	jmp    c000f073 <IDTEntry::IDTEntry(bool)+0x45>
c000f071:	b2 00                	mov    dl,0x0
c000f073:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f077:	83 e2 03             	and    edx,0x3
c000f07a:	88 d1                	mov    cl,dl
c000f07c:	c1 e1 05             	shl    ecx,0x5
c000f07f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f082:	83 e2 9f             	and    edx,0xffffff9f
c000f085:	09 ca                	or     edx,ecx
c000f087:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f08a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f08e:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f091:	83 ca 80             	or     edx,0xffffff80
c000f094:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f097:	90                   	nop
c000f098:	83 c4 04             	add    esp,0x4
c000f09b:	c3                   	ret    

c000f09c <IDTEntry::setOffset(unsigned int)>:
c000f09c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f0a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0a4:	66 89 02             	mov    WORD PTR [edx],ax
c000f0a7:	c1 e8 10             	shr    eax,0x10
c000f0aa:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f0ae:	c3                   	ret    
c000f0af:	90                   	nop

c000f0b0 <IDT::IDT()>:
c000f0b0:	90                   	nop
c000f0b1:	c3                   	ret    

c000f0b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	83 c0 30             	add    eax,0x30
c000f0b9:	c3                   	ret    

c000f0ba <IDT::addEntry(IDTEntry, int)>:
c000f0ba:	53                   	push   ebx
c000f0bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f0c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f0cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f0ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f0d2:	5b                   	pop    ebx
c000f0d3:	c3                   	ret    

c000f0d4 <IDT::addEntry(int, void (*)(), bool)>:
c000f0d4:	53                   	push   ebx
c000f0d5:	83 ec 10             	sub    esp,0x10
c000f0d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f0dd:	50                   	push   eax
c000f0de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f0e2:	53                   	push   ebx
c000f0e3:	e8 46 ff ff ff       	call   c000f02e <IDTEntry::IDTEntry(bool)>
c000f0e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f0ec:	53                   	push   ebx
c000f0ed:	e8 aa ff ff ff       	call   c000f09c <IDTEntry::setOffset(unsigned int)>
c000f0f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f0fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f0fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f102:	e8 b3 ff ff ff       	call   c000f0ba <IDT::addEntry(IDTEntry, int)>
c000f107:	83 c4 30             	add    esp,0x30
c000f10a:	5b                   	pop    ebx
c000f10b:	c3                   	ret    

c000f10c <IDT::flush()>:
c000f10c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f110:	66 c7 05 d8 ce 02 c0 ff 07 	mov    WORD PTR ds:0xc002ced8,0x7ff
c000f119:	a3 da ce 02 c0       	mov    ds:0xc002ceda,eax
c000f11e:	0f 01 1d d8 ce 02 c0 	lidtd  ds:0xc002ced8
c000f125:	c3                   	ret    

c000f126 <IDT::setup()>:
c000f126:	57                   	push   edi
c000f127:	56                   	push   esi
c000f128:	53                   	push   ebx
c000f129:	83 ec 10             	sub    esp,0x10
c000f12c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f130:	6a 00                	push   0x0
c000f132:	68 68 04 00 c0       	push   0xc0000468
c000f137:	6a 00                	push   0x0
c000f139:	53                   	push   ebx
c000f13a:	e8 95 ff ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f13f:	6a 00                	push   0x0
c000f141:	68 78 04 00 c0       	push   0xc0000478
c000f146:	6a 01                	push   0x1
c000f148:	53                   	push   ebx
c000f149:	e8 86 ff ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f14e:	83 c4 20             	add    esp,0x20
c000f151:	6a 00                	push   0x0
c000f153:	68 82 04 00 c0       	push   0xc0000482
c000f158:	6a 02                	push   0x2
c000f15a:	53                   	push   ebx
c000f15b:	e8 74 ff ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f160:	6a 00                	push   0x0
c000f162:	68 8c 04 00 c0       	push   0xc000048c
c000f167:	6a 03                	push   0x3
c000f169:	53                   	push   ebx
c000f16a:	e8 65 ff ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f16f:	83 c4 20             	add    esp,0x20
c000f172:	6a 00                	push   0x0
c000f174:	68 96 04 00 c0       	push   0xc0000496
c000f179:	6a 04                	push   0x4
c000f17b:	53                   	push   ebx
c000f17c:	e8 53 ff ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f181:	6a 00                	push   0x0
c000f183:	68 a0 04 00 c0       	push   0xc00004a0
c000f188:	6a 05                	push   0x5
c000f18a:	53                   	push   ebx
c000f18b:	e8 44 ff ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f190:	83 c4 20             	add    esp,0x20
c000f193:	6a 00                	push   0x0
c000f195:	68 aa 04 00 c0       	push   0xc00004aa
c000f19a:	6a 06                	push   0x6
c000f19c:	53                   	push   ebx
c000f19d:	e8 32 ff ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f1a2:	6a 00                	push   0x0
c000f1a4:	68 b4 04 00 c0       	push   0xc00004b4
c000f1a9:	6a 07                	push   0x7
c000f1ab:	53                   	push   ebx
c000f1ac:	e8 23 ff ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f1b1:	83 c4 20             	add    esp,0x20
c000f1b4:	6a 00                	push   0x0
c000f1b6:	68 be 04 00 c0       	push   0xc00004be
c000f1bb:	6a 08                	push   0x8
c000f1bd:	53                   	push   ebx
c000f1be:	e8 11 ff ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f1c3:	6a 00                	push   0x0
c000f1c5:	68 c6 04 00 c0       	push   0xc00004c6
c000f1ca:	6a 09                	push   0x9
c000f1cc:	53                   	push   ebx
c000f1cd:	e8 02 ff ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f1d2:	83 c4 20             	add    esp,0x20
c000f1d5:	6a 00                	push   0x0
c000f1d7:	68 d0 04 00 c0       	push   0xc00004d0
c000f1dc:	6a 0a                	push   0xa
c000f1de:	53                   	push   ebx
c000f1df:	e8 f0 fe ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f1e4:	6a 00                	push   0x0
c000f1e6:	68 d8 04 00 c0       	push   0xc00004d8
c000f1eb:	6a 0b                	push   0xb
c000f1ed:	53                   	push   ebx
c000f1ee:	e8 e1 fe ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f1f3:	83 c4 20             	add    esp,0x20
c000f1f6:	6a 00                	push   0x0
c000f1f8:	68 e0 04 00 c0       	push   0xc00004e0
c000f1fd:	6a 0c                	push   0xc
c000f1ff:	53                   	push   ebx
c000f200:	e8 cf fe ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f205:	6a 00                	push   0x0
c000f207:	68 e8 04 00 c0       	push   0xc00004e8
c000f20c:	6a 0d                	push   0xd
c000f20e:	53                   	push   ebx
c000f20f:	e8 c0 fe ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f214:	83 c4 20             	add    esp,0x20
c000f217:	6a 00                	push   0x0
c000f219:	68 f0 04 00 c0       	push   0xc00004f0
c000f21e:	6a 0e                	push   0xe
c000f220:	53                   	push   ebx
c000f221:	e8 ae fe ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f226:	6a 00                	push   0x0
c000f228:	68 f8 04 00 c0       	push   0xc00004f8
c000f22d:	6a 0f                	push   0xf
c000f22f:	53                   	push   ebx
c000f230:	e8 9f fe ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f235:	83 c4 20             	add    esp,0x20
c000f238:	6a 00                	push   0x0
c000f23a:	68 02 05 00 c0       	push   0xc0000502
c000f23f:	6a 10                	push   0x10
c000f241:	53                   	push   ebx
c000f242:	e8 8d fe ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f247:	6a 00                	push   0x0
c000f249:	68 0c 05 00 c0       	push   0xc000050c
c000f24e:	6a 11                	push   0x11
c000f250:	53                   	push   ebx
c000f251:	e8 7e fe ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f256:	83 c4 20             	add    esp,0x20
c000f259:	6a 00                	push   0x0
c000f25b:	68 16 05 00 c0       	push   0xc0000516
c000f260:	6a 12                	push   0x12
c000f262:	53                   	push   ebx
c000f263:	e8 6c fe ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f268:	6a 01                	push   0x1
c000f26a:	68 b0 05 00 c0       	push   0xc00005b0
c000f26f:	6a 60                	push   0x60
c000f271:	53                   	push   ebx
c000f272:	e8 5d fe ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f277:	83 c4 20             	add    esp,0x20
c000f27a:	6a 00                	push   0x0
c000f27c:	68 b7 05 00 c0       	push   0xc00005b7
c000f281:	6a 20                	push   0x20
c000f283:	53                   	push   ebx
c000f284:	e8 4b fe ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f289:	6a 00                	push   0x0
c000f28b:	68 a2 05 00 c0       	push   0xc00005a2
c000f290:	6a 21                	push   0x21
c000f292:	53                   	push   ebx
c000f293:	e8 3c fe ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f298:	83 c4 20             	add    esp,0x20
c000f29b:	6a 00                	push   0x0
c000f29d:	68 a9 05 00 c0       	push   0xc00005a9
c000f2a2:	6a 22                	push   0x22
c000f2a4:	53                   	push   ebx
c000f2a5:	e8 2a fe ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f2aa:	6a 00                	push   0x0
c000f2ac:	68 20 05 00 c0       	push   0xc0000520
c000f2b1:	6a 23                	push   0x23
c000f2b3:	53                   	push   ebx
c000f2b4:	e8 1b fe ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f2b9:	83 c4 20             	add    esp,0x20
c000f2bc:	6a 00                	push   0x0
c000f2be:	68 2a 05 00 c0       	push   0xc000052a
c000f2c3:	6a 24                	push   0x24
c000f2c5:	53                   	push   ebx
c000f2c6:	e8 09 fe ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f2cb:	6a 00                	push   0x0
c000f2cd:	68 34 05 00 c0       	push   0xc0000534
c000f2d2:	6a 25                	push   0x25
c000f2d4:	53                   	push   ebx
c000f2d5:	e8 fa fd ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f2da:	83 c4 20             	add    esp,0x20
c000f2dd:	6a 00                	push   0x0
c000f2df:	68 3e 05 00 c0       	push   0xc000053e
c000f2e4:	6a 26                	push   0x26
c000f2e6:	53                   	push   ebx
c000f2e7:	e8 e8 fd ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f2ec:	6a 00                	push   0x0
c000f2ee:	68 48 05 00 c0       	push   0xc0000548
c000f2f3:	6a 27                	push   0x27
c000f2f5:	53                   	push   ebx
c000f2f6:	e8 d9 fd ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f2fb:	83 c4 20             	add    esp,0x20
c000f2fe:	6a 00                	push   0x0
c000f300:	68 52 05 00 c0       	push   0xc0000552
c000f305:	6a 28                	push   0x28
c000f307:	53                   	push   ebx
c000f308:	e8 c7 fd ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f30d:	6a 00                	push   0x0
c000f30f:	68 5c 05 00 c0       	push   0xc000055c
c000f314:	6a 29                	push   0x29
c000f316:	53                   	push   ebx
c000f317:	e8 b8 fd ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f31c:	83 c4 20             	add    esp,0x20
c000f31f:	6a 00                	push   0x0
c000f321:	68 66 05 00 c0       	push   0xc0000566
c000f326:	6a 2a                	push   0x2a
c000f328:	53                   	push   ebx
c000f329:	e8 a6 fd ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f32e:	6a 00                	push   0x0
c000f330:	68 70 05 00 c0       	push   0xc0000570
c000f335:	6a 2b                	push   0x2b
c000f337:	53                   	push   ebx
c000f338:	e8 97 fd ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f33d:	83 c4 20             	add    esp,0x20
c000f340:	6a 00                	push   0x0
c000f342:	68 7a 05 00 c0       	push   0xc000057a
c000f347:	6a 2c                	push   0x2c
c000f349:	53                   	push   ebx
c000f34a:	e8 85 fd ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f34f:	6a 00                	push   0x0
c000f351:	68 84 05 00 c0       	push   0xc0000584
c000f356:	6a 2d                	push   0x2d
c000f358:	53                   	push   ebx
c000f359:	e8 76 fd ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f35e:	83 c4 20             	add    esp,0x20
c000f361:	6a 00                	push   0x0
c000f363:	68 8e 05 00 c0       	push   0xc000058e
c000f368:	6a 2e                	push   0x2e
c000f36a:	53                   	push   ebx
c000f36b:	e8 64 fd ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f370:	6a 00                	push   0x0
c000f372:	68 98 05 00 c0       	push   0xc0000598
c000f377:	6a 2f                	push   0x2f
c000f379:	53                   	push   ebx
c000f37a:	e8 55 fd ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f37f:	83 c4 20             	add    esp,0x20
c000f382:	6a 00                	push   0x0
c000f384:	68 ed 05 00 c0       	push   0xc00005ed
c000f389:	6a 30                	push   0x30
c000f38b:	53                   	push   ebx
c000f38c:	e8 43 fd ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f391:	6a 00                	push   0x0
c000f393:	68 f7 05 00 c0       	push   0xc00005f7
c000f398:	6a 31                	push   0x31
c000f39a:	53                   	push   ebx
c000f39b:	e8 34 fd ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f3a0:	83 c4 20             	add    esp,0x20
c000f3a3:	6a 00                	push   0x0
c000f3a5:	68 01 06 00 c0       	push   0xc0000601
c000f3aa:	6a 32                	push   0x32
c000f3ac:	53                   	push   ebx
c000f3ad:	e8 22 fd ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f3b2:	6a 00                	push   0x0
c000f3b4:	68 0b 06 00 c0       	push   0xc000060b
c000f3b9:	6a 33                	push   0x33
c000f3bb:	53                   	push   ebx
c000f3bc:	e8 13 fd ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f3c1:	83 c4 20             	add    esp,0x20
c000f3c4:	6a 00                	push   0x0
c000f3c6:	68 15 06 00 c0       	push   0xc0000615
c000f3cb:	6a 34                	push   0x34
c000f3cd:	53                   	push   ebx
c000f3ce:	e8 01 fd ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f3d3:	6a 00                	push   0x0
c000f3d5:	68 1f 06 00 c0       	push   0xc000061f
c000f3da:	6a 35                	push   0x35
c000f3dc:	53                   	push   ebx
c000f3dd:	e8 f2 fc ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f3e2:	83 c4 20             	add    esp,0x20
c000f3e5:	6a 00                	push   0x0
c000f3e7:	68 29 06 00 c0       	push   0xc0000629
c000f3ec:	6a 36                	push   0x36
c000f3ee:	53                   	push   ebx
c000f3ef:	e8 e0 fc ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f3f4:	6a 00                	push   0x0
c000f3f6:	68 33 06 00 c0       	push   0xc0000633
c000f3fb:	6a 37                	push   0x37
c000f3fd:	53                   	push   ebx
c000f3fe:	e8 d1 fc ff ff       	call   c000f0d4 <IDT::addEntry(int, void (*)(), bool)>
c000f403:	83 c4 20             	add    esp,0x20
c000f406:	e8 70 26 00 00       	call   c0011a7b <Virt::getAKernelVAS()>
c000f40b:	52                   	push   edx
c000f40c:	6a 03                	push   0x3
c000f40e:	6a 02                	push   0x2
c000f410:	50                   	push   eax
c000f411:	e8 a0 2c 00 00       	call   c00120b6 <VAS::allocatePages(int, int)>
c000f416:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f41d:	89 c6                	mov    esi,eax
c000f41f:	e8 12 02 00 00       	call   c000f636 <malloc>
c000f424:	81 c6 00 20 00 00    	add    esi,0x2000
c000f42a:	89 04 24             	mov    DWORD PTR [esp],eax
c000f42d:	89 c7                	mov    edi,eax
c000f42f:	e8 e8 1d 00 00       	call   c001121c <TSS::TSS()>
c000f434:	83 c4 0c             	add    esp,0xc
c000f437:	68 be 04 00 c0       	push   0xc00004be
c000f43c:	56                   	push   esi
c000f43d:	57                   	push   edi
c000f43e:	e8 19 1e 00 00       	call   c001125c <TSS::setup(unsigned long, unsigned long)>
c000f443:	59                   	pop    ecx
c000f444:	89 c6                	mov    esi,eax
c000f446:	5f                   	pop    edi
c000f447:	6a 00                	push   0x0
c000f449:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f44d:	50                   	push   eax
c000f44e:	e8 db fb ff ff       	call   c000f02e <IDTEntry::IDTEntry(bool)>
c000f453:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f457:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f45c:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f463:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f469:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f46d:	80 ce 05             	or     dh,0x5
c000f470:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f473:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f477:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f47b:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f47e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f481:	e8 86 fc ff ff       	call   c000f10c <IDT::flush()>
c000f486:	83 c4 20             	add    esp,0x20
c000f489:	5b                   	pop    ebx
c000f48a:	5e                   	pop    esi
c000f48b:	5f                   	pop    edi
c000f48c:	c3                   	ret    

c000f48d <sbrk>:
c000f48d:	55                   	push   ebp
c000f48e:	57                   	push   edi
c000f48f:	56                   	push   esi
c000f490:	53                   	push   ebx
c000f491:	83 ec 1c             	sub    esp,0x1c
c000f494:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f498:	85 c0                	test   eax,eax
c000f49a:	74 3e                	je     c000f4da <sbrk+0x4d>
c000f49c:	78 43                	js     c000f4e1 <sbrk+0x54>
c000f49e:	8b 15 c8 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002cec8
c000f4a4:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f4aa:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f4b0:	83 e2 01             	and    edx,0x1
c000f4b3:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f4b7:	8b 0d f4 bd 02 c0    	mov    ecx,DWORD PTR ds:0xc002bdf4
c000f4bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f4c1:	05 ff 0f 00 00       	add    eax,0xfff
c000f4c6:	89 c2                	mov    edx,eax
c000f4c8:	78 2f                	js     c000f4f9 <sbrk+0x6c>
c000f4ca:	c1 fa 0c             	sar    edx,0xc
c000f4cd:	89 d7                	mov    edi,edx
c000f4cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f4d3:	be 00 00 00 00       	mov    esi,0x0
c000f4d8:	eb 36                	jmp    c000f510 <sbrk+0x83>
c000f4da:	a1 f4 bd 02 c0       	mov    eax,ds:0xc002bdf4
c000f4df:	eb 74                	jmp    c000f555 <sbrk+0xc8>
c000f4e1:	83 ec 08             	sub    esp,0x8
c000f4e4:	50                   	push   eax
c000f4e5:	68 a8 8f 02 c0       	push   0xc0028fa8
c000f4ea:	e8 ec 33 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000f4ef:	83 c4 10             	add    esp,0x10
c000f4f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4f7:	eb 5c                	jmp    c000f555 <sbrk+0xc8>
c000f4f9:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f4ff:	eb c9                	jmp    c000f4ca <sbrk+0x3d>
c000f501:	81 05 f4 bd 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002bdf4,0x1000
c000f50b:	46                   	inc    esi
c000f50c:	39 f7                	cmp    edi,esi
c000f50e:	74 34                	je     c000f544 <sbrk+0xb7>
c000f510:	e8 66 25 00 00       	call   c0011a7b <Virt::getAKernelVAS()>
c000f515:	89 c3                	mov    ebx,eax
c000f517:	8b 2d f4 bd 02 c0    	mov    ebp,DWORD PTR ds:0xc002bdf4
c000f51d:	e8 87 07 00 00       	call   c000fca9 <Phys::allocatePage()>
c000f522:	68 01 04 00 00       	push   0x401
c000f527:	55                   	push   ebp
c000f528:	50                   	push   eax
c000f529:	53                   	push   ebx
c000f52a:	e8 87 2a 00 00       	call   c0011fb6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f52f:	83 c4 10             	add    esp,0x10
c000f532:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f537:	74 c8                	je     c000f501 <sbrk+0x74>
c000f539:	8b 1d f4 bd 02 c0    	mov    ebx,DWORD PTR ds:0xc002bdf4
c000f53f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f542:	eb bd                	jmp    c000f501 <sbrk+0x74>
c000f544:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f549:	75 12                	jne    c000f55d <sbrk+0xd0>
c000f54b:	0f 20 d8             	mov    eax,cr3
c000f54e:	0f 22 d8             	mov    cr3,eax
c000f551:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f555:	83 c4 1c             	add    esp,0x1c
c000f558:	5b                   	pop    ebx
c000f559:	5e                   	pop    esi
c000f55a:	5f                   	pop    edi
c000f55b:	5d                   	pop    ebp
c000f55c:	c3                   	ret    
c000f55d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f561:	89 cb                	mov    ebx,ecx
c000f563:	c1 eb 0a             	shr    ebx,0xa
c000f566:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f56c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f572:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f576:	c1 e0 0c             	shl    eax,0xc
c000f579:	01 c8                	add    eax,ecx
c000f57b:	c1 e8 0a             	shr    eax,0xa
c000f57e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f583:	2d 00 00 40 00       	sub    eax,0x400000
c000f588:	39 c3                	cmp    ebx,eax
c000f58a:	77 c5                	ja     c000f551 <sbrk+0xc4>
c000f58c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f58f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f595:	39 d8                	cmp    eax,ebx
c000f597:	73 f3                	jae    c000f58c <sbrk+0xff>
c000f599:	eb b6                	jmp    c000f551 <sbrk+0xc4>

c000f59b <mmap>:
c000f59b:	83 ec 18             	sub    esp,0x18
c000f59e:	68 d8 8f 02 c0       	push   0xc0028fd8
c000f5a3:	e8 03 a6 00 00       	call   c0019bab <Krnl::panic(char const*)>
c000f5a8:	b8 00 00 00 00       	mov    eax,0x0
c000f5ad:	83 c4 1c             	add    esp,0x1c
c000f5b0:	c3                   	ret    

c000f5b1 <munmap>:
c000f5b1:	83 ec 18             	sub    esp,0x18
c000f5b4:	68 dd 8f 02 c0       	push   0xc0028fdd
c000f5b9:	e8 ed a5 00 00       	call   c0019bab <Krnl::panic(char const*)>
c000f5be:	b8 00 00 00 00       	mov    eax,0x0
c000f5c3:	83 c4 1c             	add    esp,0x1c
c000f5c6:	c3                   	ret    

c000f5c7 <liballoc_lock()>:
c000f5c7:	83 ec 0c             	sub    esp,0xc
c000f5ca:	e8 8b db 00 00       	call   c001d15a <lockScheduler()>
c000f5cf:	b8 00 00 00 00       	mov    eax,0x0
c000f5d4:	83 c4 0c             	add    esp,0xc
c000f5d7:	c3                   	ret    

c000f5d8 <liballoc_unlock()>:
c000f5d8:	83 ec 0c             	sub    esp,0xc
c000f5db:	e8 7c db 00 00       	call   c001d15c <unlockScheduler()>
c000f5e0:	b8 00 00 00 00       	mov    eax,0x0
c000f5e5:	83 c4 0c             	add    esp,0xc
c000f5e8:	c3                   	ret    

c000f5e9 <liballoc_alloc(int)>:
c000f5e9:	83 ec 0c             	sub    esp,0xc
c000f5ec:	e8 8a 24 00 00       	call   c0011a7b <Virt::getAKernelVAS()>
c000f5f1:	83 ec 04             	sub    esp,0x4
c000f5f4:	6a 01                	push   0x1
c000f5f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f5fa:	50                   	push   eax
c000f5fb:	e8 b6 2a 00 00       	call   c00120b6 <VAS::allocatePages(int, int)>
c000f600:	83 c4 1c             	add    esp,0x1c
c000f603:	c3                   	ret    

c000f604 <liballoc_free(void*, int)>:
c000f604:	83 ec 0c             	sub    esp,0xc
c000f607:	e8 6f 24 00 00       	call   c0011a7b <Virt::getAKernelVAS()>
c000f60c:	83 ec 08             	sub    esp,0x8
c000f60f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f613:	50                   	push   eax
c000f614:	e8 59 27 00 00       	call   c0011d72 <VAS::freeAllocatedPages(unsigned long)>
c000f619:	b8 00 00 00 00       	mov    eax,0x0
c000f61e:	83 c4 1c             	add    esp,0x1c
c000f621:	c3                   	ret    

c000f622 <realloc>:
c000f622:	83 ec 14             	sub    esp,0x14
c000f625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f629:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f62d:	e8 1d 1e ff ff       	call   c000144f <dlrealloc>
c000f632:	83 c4 1c             	add    esp,0x1c
c000f635:	c3                   	ret    

c000f636 <malloc>:
c000f636:	83 ec 18             	sub    esp,0x18
c000f639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f63d:	e8 d0 18 ff ff       	call   c0000f12 <dlmalloc>
c000f642:	83 c4 1c             	add    esp,0x1c
c000f645:	c3                   	ret    

c000f646 <free>:
c000f646:	83 ec 18             	sub    esp,0x18
c000f649:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f64d:	e8 65 15 ff ff       	call   c0000bb7 <dlfree>
c000f652:	83 c4 1c             	add    esp,0x1c
c000f655:	c3                   	ret    

c000f656 <rfree>:
c000f656:	83 ec 18             	sub    esp,0x18
c000f659:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f65d:	e8 55 15 ff ff       	call   c0000bb7 <dlfree>
c000f662:	83 c4 1c             	add    esp,0x1c
c000f665:	c3                   	ret    

c000f666 <calloc>:
c000f666:	56                   	push   esi
c000f667:	53                   	push   ebx
c000f668:	83 ec 10             	sub    esp,0x10
c000f66b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f66f:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f674:	53                   	push   ebx
c000f675:	e8 bc ff ff ff       	call   c000f636 <malloc>
c000f67a:	89 c6                	mov    esi,eax
c000f67c:	83 c4 0c             	add    esp,0xc
c000f67f:	53                   	push   ebx
c000f680:	6a 00                	push   0x0
c000f682:	50                   	push   eax
c000f683:	e8 4e 10 ff ff       	call   c00006d6 <memset>
c000f688:	89 f0                	mov    eax,esi
c000f68a:	83 c4 14             	add    esp,0x14
c000f68d:	5b                   	pop    ebx
c000f68e:	5e                   	pop    esi
c000f68f:	c3                   	ret    

c000f690 <hwTextMode_loadInData(VgaText*)>:
c000f690:	55                   	push   ebp
c000f691:	a1 00 be 02 c0       	mov    eax,ds:0xc002be00
c000f696:	57                   	push   edi
c000f697:	56                   	push   esi
c000f698:	53                   	push   ebx
c000f699:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f69d:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f6a3:	85 d2                	test   edx,edx
c000f6a5:	7e 2f                	jle    c000f6d6 <hwTextMode_loadInData(VgaText*)+0x46>
c000f6a7:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f6ad:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f6b0:	31 f6                	xor    esi,esi
c000f6b2:	29 fd                	sub    ebp,edi
c000f6b4:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f6b7:	31 c0                	xor    eax,eax
c000f6b9:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f6bd:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f6c1:	40                   	inc    eax
c000f6c2:	83 f8 50             	cmp    eax,0x50
c000f6c5:	75 f2                	jne    c000f6b9 <hwTextMode_loadInData(VgaText*)+0x29>
c000f6c7:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f6cd:	46                   	inc    esi
c000f6ce:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f6d4:	7f de                	jg     c000f6b4 <hwTextMode_loadInData(VgaText*)+0x24>
c000f6d6:	5b                   	pop    ebx
c000f6d7:	5e                   	pop    esi
c000f6d8:	5f                   	pop    edi
c000f6d9:	5d                   	pop    ebp
c000f6da:	c3                   	ret    

c000f6db <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f6db:	55                   	push   ebp
c000f6dc:	80 3d 60 cf 02 c0 00 	cmp    BYTE PTR ds:0xc002cf60,0x0
c000f6e3:	57                   	push   edi
c000f6e4:	56                   	push   esi
c000f6e5:	53                   	push   ebx
c000f6e6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f6ea:	75 50                	jne    c000f73c <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f6ec:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f6f2:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f6f8:	8b 15 00 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be00
c000f6fe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f702:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f708:	eb 0e                	jmp    c000f718 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f70a:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f710:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f716:	89 da                	mov    edx,ebx
c000f718:	83 e5 0f             	and    ebp,0xf
c000f71b:	c1 e0 04             	shl    eax,0x4
c000f71e:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f721:	0f b6 c0             	movzx  eax,al
c000f724:	41                   	inc    ecx
c000f725:	09 e8                	or     eax,ebp
c000f727:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f72b:	c1 e0 08             	shl    eax,0x8
c000f72e:	09 e8                	or     eax,ebp
c000f730:	39 fb                	cmp    ebx,edi
c000f732:	66 89 02             	mov    WORD PTR [edx],ax
c000f735:	75 d3                	jne    c000f70a <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f737:	5b                   	pop    ebx
c000f738:	5e                   	pop    esi
c000f739:	5f                   	pop    edi
c000f73a:	5d                   	pop    ebp
c000f73b:	c3                   	ret    
c000f73c:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f746:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f750:	31 c0                	xor    eax,eax
c000f752:	bd 02 00 00 00       	mov    ebp,0x2
c000f757:	eb 9f                	jmp    c000f6f8 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f759 <hwTextMode_showCursor(VgaText*, bool)>:
c000f759:	56                   	push   esi
c000f75a:	80 3d 60 cf 02 c0 00 	cmp    BYTE PTR ds:0xc002cf60,0x0
c000f761:	53                   	push   ebx
c000f762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f766:	75 39                	jne    c000f7a1 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f768:	84 c0                	test   al,al
c000f76a:	74 38                	je     c000f7a4 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f76c:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f771:	b0 0a                	mov    al,0xa
c000f773:	89 da                	mov    edx,ebx
c000f775:	ee                   	out    dx,al
c000f776:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f77b:	89 ca                	mov    edx,ecx
c000f77d:	ec                   	in     al,dx
c000f77e:	b2 0f                	mov    dl,0xf
c000f780:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f784:	83 e0 c0             	and    eax,0xffffffc0
c000f787:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f78d:	09 d0                	or     eax,edx
c000f78f:	89 ca                	mov    edx,ecx
c000f791:	ee                   	out    dx,al
c000f792:	b0 0b                	mov    al,0xb
c000f794:	89 da                	mov    edx,ebx
c000f796:	ee                   	out    dx,al
c000f797:	89 ca                	mov    edx,ecx
c000f799:	ec                   	in     al,dx
c000f79a:	83 e0 e0             	and    eax,0xffffffe0
c000f79d:	83 c8 0f             	or     eax,0xf
c000f7a0:	ee                   	out    dx,al
c000f7a1:	5b                   	pop    ebx
c000f7a2:	5e                   	pop    esi
c000f7a3:	c3                   	ret    
c000f7a4:	b0 0a                	mov    al,0xa
c000f7a6:	ba d4 03 00 00       	mov    edx,0x3d4
c000f7ab:	ee                   	out    dx,al
c000f7ac:	b0 20                	mov    al,0x20
c000f7ae:	ba d5 03 00 00       	mov    edx,0x3d5
c000f7b3:	ee                   	out    dx,al
c000f7b4:	5b                   	pop    ebx
c000f7b5:	5e                   	pop    esi
c000f7b6:	c3                   	ret    

c000f7b7 <hwTextMode_update(VgaText*)>:
c000f7b7:	c3                   	ret    

c000f7b8 <hwTextMode_updateCursor(VgaText*)>:
c000f7b8:	56                   	push   esi
c000f7b9:	80 3d 60 cf 02 c0 00 	cmp    BYTE PTR ds:0xc002cf60,0x0
c000f7c0:	53                   	push   ebx
c000f7c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7c5:	75 3f                	jne    c000f806 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f7c7:	be d4 03 00 00       	mov    esi,0x3d4
c000f7cc:	b9 19 00 00 00       	mov    ecx,0x19
c000f7d1:	89 f2                	mov    edx,esi
c000f7d3:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f7d9:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f7df:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f7e2:	c1 e1 04             	shl    ecx,0x4
c000f7e5:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f7eb:	b0 0f                	mov    al,0xf
c000f7ed:	ee                   	out    dx,al
c000f7ee:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f7f3:	88 c8                	mov    al,cl
c000f7f5:	89 da                	mov    edx,ebx
c000f7f7:	ee                   	out    dx,al
c000f7f8:	b0 0e                	mov    al,0xe
c000f7fa:	89 f2                	mov    edx,esi
c000f7fc:	ee                   	out    dx,al
c000f7fd:	89 c8                	mov    eax,ecx
c000f7ff:	89 da                	mov    edx,ebx
c000f801:	66 c1 e8 08          	shr    ax,0x8
c000f805:	ee                   	out    dx,al
c000f806:	5b                   	pop    ebx
c000f807:	5e                   	pop    esi
c000f808:	c3                   	ret    

c000f809 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f809:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f80d:	80 3d 60 cf 02 c0 00 	cmp    BYTE PTR ds:0xc002cf60,0x0
c000f814:	75 38                	jne    c000f84e <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000f816:	ba da 03 00 00       	mov    edx,0x3da
c000f81b:	84 c0                	test   al,al
c000f81d:	75 18                	jne    c000f837 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000f81f:	ec                   	in     al,dx
c000f820:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f825:	b0 30                	mov    al,0x30
c000f827:	89 ca                	mov    edx,ecx
c000f829:	ee                   	out    dx,al
c000f82a:	ba c1 03 00 00       	mov    edx,0x3c1
c000f82f:	ec                   	in     al,dx
c000f830:	83 c8 08             	or     eax,0x8
c000f833:	89 ca                	mov    edx,ecx
c000f835:	ee                   	out    dx,al
c000f836:	c3                   	ret    
c000f837:	ec                   	in     al,dx
c000f838:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f83d:	b0 30                	mov    al,0x30
c000f83f:	89 ca                	mov    edx,ecx
c000f841:	ee                   	out    dx,al
c000f842:	ba c1 03 00 00       	mov    edx,0x3c1
c000f847:	ec                   	in     al,dx
c000f848:	83 e0 f7             	and    eax,0xfffffff7
c000f84b:	89 ca                	mov    edx,ecx
c000f84d:	ee                   	out    dx,al
c000f84e:	c3                   	ret    

c000f84f <hwTextMode_scrollScreen(VgaText*)>:
c000f84f:	55                   	push   ebp
c000f850:	57                   	push   edi
c000f851:	56                   	push   esi
c000f852:	53                   	push   ebx
c000f853:	83 ec 1c             	sub    esp,0x1c
c000f856:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f85a:	80 3d 60 cf 02 c0 00 	cmp    BYTE PTR ds:0xc002cf60,0x0
c000f861:	74 14                	je     c000f877 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000f863:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000f86d:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000f877:	a1 00 be 02 c0       	mov    eax,ds:0xc002be00
c000f87c:	bd 02 00 00 00       	mov    ebp,0x2
c000f881:	05 a0 00 00 00       	add    eax,0xa0
c000f886:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f88a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f88e:	31 c0                	xor    eax,eax
c000f890:	eb 0b                	jmp    c000f89d <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000f892:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f898:	74 57                	je     c000f8f1 <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000f89a:	43                   	inc    ebx
c000f89b:	89 f0                	mov    eax,esi
c000f89d:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f8a3:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f8a9:	88 13                	mov    BYTE PTR [ebx],dl
c000f8ab:	8d 70 01             	lea    esi,[eax+0x1]
c000f8ae:	83 fd 18             	cmp    ebp,0x18
c000f8b1:	75 df                	jne    c000f892 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000f8b3:	a8 01                	test   al,0x1
c000f8b5:	75 13                	jne    c000f8ca <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f8b7:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f8ba:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f8c0:	75 d8                	jne    c000f89a <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000f8c2:	83 c4 1c             	add    esp,0x1c
c000f8c5:	5b                   	pop    ebx
c000f8c6:	5e                   	pop    esi
c000f8c7:	5f                   	pop    edi
c000f8c8:	5d                   	pop    ebp
c000f8c9:	c3                   	ret    
c000f8ca:	83 ec 08             	sub    esp,0x8
c000f8cd:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000f8d4:	50                   	push   eax
c000f8d5:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000f8d9:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000f8e0:	50                   	push   eax
c000f8e1:	e8 08 0c 00 00       	call   c00104ee <VgaText::combineColours(unsigned char, unsigned char)>
c000f8e6:	83 c4 10             	add    esp,0x10
c000f8e9:	88 07                	mov    BYTE PTR [edi],al
c000f8eb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f8ef:	eb c9                	jmp    c000f8ba <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000f8f1:	45                   	inc    ebp
c000f8f2:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f8fa:	eb 8e                	jmp    c000f88a <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000f8fc <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f8fc:	57                   	push   edi
c000f8fd:	80 3d 60 cf 02 c0 00 	cmp    BYTE PTR ds:0xc002cf60,0x0
c000f904:	56                   	push   esi
c000f905:	53                   	push   ebx
c000f906:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f90a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000f90e:	75 65                	jne    c000f975 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000f910:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000f915:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000f91a:	83 ec 08             	sub    esp,0x8
c000f91d:	52                   	push   edx
c000f91e:	50                   	push   eax
c000f91f:	e8 ca 0b 00 00       	call   c00104ee <VgaText::combineColours(unsigned char, unsigned char)>
c000f924:	5a                   	pop    edx
c000f925:	0f b6 c0             	movzx  eax,al
c000f928:	59                   	pop    ecx
c000f929:	50                   	push   eax
c000f92a:	0f be c3             	movsx  eax,bl
c000f92d:	50                   	push   eax
c000f92e:	e8 61 0c 00 00       	call   c0010594 <VgaText::combineCharAndColour(char, unsigned char)>
c000f933:	83 c4 10             	add    esp,0x10
c000f936:	8b 35 00 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be00
c000f93c:	80 3d 60 cf 02 c0 00 	cmp    BYTE PTR ds:0xc002cf60,0x0
c000f943:	74 07                	je     c000f94c <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000f945:	66 0f be c3          	movsx  ax,bl
c000f949:	80 cc 02             	or     ah,0x2
c000f94c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f950:	ba 19 00 00 00       	mov    edx,0x19
c000f955:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f95b:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000f95e:	8d 14 92             	lea    edx,[edx+edx*4]
c000f961:	c1 e1 04             	shl    ecx,0x4
c000f964:	c1 e2 04             	shl    edx,0x4
c000f967:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000f96b:	01 ca                	add    edx,ecx
c000f96d:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000f971:	5b                   	pop    ebx
c000f972:	5e                   	pop    esi
c000f973:	5f                   	pop    edi
c000f974:	c3                   	ret    
c000f975:	b8 02 00 00 00       	mov    eax,0x2
c000f97a:	31 d2                	xor    edx,edx
c000f97c:	eb 9c                	jmp    c000f91a <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000f97e <setupTextMode()>:
c000f97e:	a1 10 04 00 00       	mov    eax,ds:0x410
c000f983:	83 e0 30             	and    eax,0x30
c000f986:	66 83 f8 30          	cmp    ax,0x30
c000f98a:	75 11                	jne    c000f99d <setupTextMode()+0x1f>
c000f98c:	81 2d 00 be 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002be00,0x8000
c000f996:	c6 05 60 cf 02 c0 01 	mov    BYTE PTR ds:0xc002cf60,0x1
c000f99d:	c7 05 98 cf 02 c0 09 f8 00 c0 	mov    DWORD PTR ds:0xc002cf98,0xc000f809
c000f9a7:	c7 05 84 cf 02 c0 90 f6 00 c0 	mov    DWORD PTR ds:0xc002cf84,0xc000f690
c000f9b1:	c7 05 80 cf 02 c0 db f6 00 c0 	mov    DWORD PTR ds:0xc002cf80,0xc000f6db
c000f9bb:	c7 05 8c cf 02 c0 4f f8 00 c0 	mov    DWORD PTR ds:0xc002cf8c,0xc000f84f
c000f9c5:	c7 05 94 cf 02 c0 59 f7 00 c0 	mov    DWORD PTR ds:0xc002cf94,0xc000f759
c000f9cf:	c7 05 88 cf 02 c0 b7 f7 00 c0 	mov    DWORD PTR ds:0xc002cf88,0xc000f7b7
c000f9d9:	c7 05 90 cf 02 c0 b8 f7 00 c0 	mov    DWORD PTR ds:0xc002cf90,0xc000f7b8
c000f9e3:	c7 05 9c cf 02 c0 fc f8 00 c0 	mov    DWORD PTR ds:0xc002cf9c,0xc000f8fc
c000f9ed:	c3                   	ret    

c000f9ee <kernel_main>:
c000f9ee:	57                   	push   edi
c000f9ef:	bf f9 03 00 00       	mov    edi,0x3f9
c000f9f4:	56                   	push   esi
c000f9f5:	31 f6                	xor    esi,esi
c000f9f7:	53                   	push   ebx
c000f9f8:	83 ec 10             	sub    esp,0x10
c000f9fb:	e8 48 09 00 00       	call   c0010348 <installVgaTextImplementation()>
c000fa00:	e8 79 ff ff ff       	call   c000f97e <setupTextMode()>
c000fa05:	89 f0                	mov    eax,esi
c000fa07:	89 fa                	mov    edx,edi
c000fa09:	ee                   	out    dx,al
c000fa0a:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fa0f:	b0 80                	mov    al,0x80
c000fa11:	89 da                	mov    edx,ebx
c000fa13:	ee                   	out    dx,al
c000fa14:	b1 03                	mov    cl,0x3
c000fa16:	ba f8 03 00 00       	mov    edx,0x3f8
c000fa1b:	88 c8                	mov    al,cl
c000fa1d:	ee                   	out    dx,al
c000fa1e:	89 f0                	mov    eax,esi
c000fa20:	89 fa                	mov    edx,edi
c000fa22:	ee                   	out    dx,al
c000fa23:	88 c8                	mov    al,cl
c000fa25:	89 da                	mov    edx,ebx
c000fa27:	ee                   	out    dx,al
c000fa28:	b0 c7                	mov    al,0xc7
c000fa2a:	ba fa 03 00 00       	mov    edx,0x3fa
c000fa2f:	ee                   	out    dx,al
c000fa30:	b0 0b                	mov    al,0xb
c000fa32:	ba fc 03 00 00       	mov    edx,0x3fc
c000fa37:	ee                   	out    dx,al
c000fa38:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fa3d:	83 ec 0c             	sub    esp,0xc
c000fa40:	05 ff 0f 00 00       	add    eax,0xfff
c000fa45:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fa4a:	50                   	push   eax
c000fa4b:	e8 b3 03 00 00       	call   c000fe03 <Phys::physicalMemorySetup(unsigned int)>
c000fa50:	e8 a7 1f 00 00       	call   c00119fc <Virt::virtualMemorySetup()>
c000fa55:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fa5b:	83 c4 10             	add    esp,0x10
c000fa5e:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fa64:	75 0e                	jne    c000fa74 <kernel_main+0x86>
c000fa66:	89 d8                	mov    eax,ebx
c000fa68:	25 48 03 00 00       	and    eax,0x348
c000fa6d:	3d 00 03 00 00       	cmp    eax,0x300
c000fa72:	74 10                	je     c000fa84 <kernel_main+0x96>
c000fa74:	83 ec 0c             	sub    esp,0xc
c000fa77:	68 4c a7 02 c0       	push   0xc002a74c
c000fa7c:	e8 2a a1 00 00       	call   c0019bab <Krnl::panic(char const*)>
c000fa81:	83 c4 10             	add    esp,0x10
c000fa84:	83 ec 0c             	sub    esp,0xc
c000fa87:	89 1d e0 ce 02 c0    	mov    DWORD PTR ds:0xc002cee0,ebx
c000fa8d:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fa91:	53                   	push   ebx
c000fa92:	e8 19 21 00 00       	call   c0011bb0 <VAS::VAS()>
c000fa97:	89 1d 44 d0 02 c0    	mov    DWORD PTR ds:0xc002d044,ebx
c000fa9d:	e8 7e 05 ff ff       	call   c0000020 <callGlobalConstructors>
c000faa2:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000faa9:	e8 88 fb ff ff       	call   c000f636 <malloc>
c000faae:	89 04 24             	mov    DWORD PTR [esp],eax
c000fab1:	89 c6                	mov    esi,eax
c000fab3:	e8 78 ea ff ff       	call   c000e530 <Computer::Computer()>
c000fab8:	6a 00                	push   0x0
c000faba:	89 35 c8 ce 02 c0    	mov    DWORD PTR ds:0xc002cec8,esi
c000fac0:	6a 00                	push   0x0
c000fac2:	6a 00                	push   0x0
c000fac4:	56                   	push   esi
c000fac5:	e8 b6 f1 ff ff       	call   c000ec80 <Computer::open(int, int, void*)>
c000faca:	83 c4 14             	add    esp,0x14
c000facd:	53                   	push   ebx
c000face:	e8 77 23 00 00       	call   c0011e4a <VAS::~VAS()>
c000fad3:	c7 04 24 e4 8f 02 c0 	mov    DWORD PTR [esp],0xc0028fe4
c000fada:	e8 cc a0 00 00       	call   c0019bab <Krnl::panic(char const*)>
c000fadf:	83 c4 20             	add    esp,0x20
c000fae2:	5b                   	pop    ebx
c000fae3:	5e                   	pop    esi
c000fae4:	5f                   	pop    edi
c000fae5:	c3                   	ret    

c000fae6 <Phys::allocateDMA(unsigned long)>:
c000fae6:	55                   	push   ebp
c000fae7:	31 d2                	xor    edx,edx
c000fae9:	57                   	push   edi
c000faea:	31 ed                	xor    ebp,ebp
c000faec:	56                   	push   esi
c000faed:	31 c9                	xor    ecx,ecx
c000faef:	53                   	push   ebx
c000faf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000faf4:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fafa:	31 c0                	xor    eax,eax
c000fafc:	c1 ee 0c             	shr    esi,0xc
c000faff:	eb 17                	jmp    c000fb18 <Phys::allocateDMA(unsigned long)+0x32>
c000fb01:	85 c9                	test   ecx,ecx
c000fb03:	75 04                	jne    c000fb09 <Phys::allocateDMA(unsigned long)+0x23>
c000fb05:	89 d5                	mov    ebp,edx
c000fb07:	89 d0                	mov    eax,edx
c000fb09:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fb0c:	39 de                	cmp    esi,ebx
c000fb0e:	74 20                	je     c000fb30 <Phys::allocateDMA(unsigned long)+0x4a>
c000fb10:	42                   	inc    edx
c000fb11:	89 d9                	mov    ecx,ebx
c000fb13:	83 fa 2f             	cmp    edx,0x2f
c000fb16:	7f 11                	jg     c000fb29 <Phys::allocateDMA(unsigned long)+0x43>
c000fb18:	80 ba 20 cf 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd30e0],0x0
c000fb1f:	74 e0                	je     c000fb01 <Phys::allocateDMA(unsigned long)+0x1b>
c000fb21:	31 c9                	xor    ecx,ecx
c000fb23:	42                   	inc    edx
c000fb24:	83 fa 2f             	cmp    edx,0x2f
c000fb27:	7e ef                	jle    c000fb18 <Phys::allocateDMA(unsigned long)+0x32>
c000fb29:	5b                   	pop    ebx
c000fb2a:	31 c0                	xor    eax,eax
c000fb2c:	5e                   	pop    esi
c000fb2d:	5f                   	pop    edi
c000fb2e:	5d                   	pop    ebp
c000fb2f:	c3                   	ret    
c000fb30:	8d 14 30             	lea    edx,[eax+esi*1]
c000fb33:	89 d7                	mov    edi,edx
c000fb35:	4f                   	dec    edi
c000fb36:	79 03                	jns    c000fb3b <Phys::allocateDMA(unsigned long)+0x55>
c000fb38:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fb3b:	c1 ff 04             	sar    edi,0x4
c000fb3e:	89 c2                	mov    edx,eax
c000fb40:	c1 fa 04             	sar    edx,0x4
c000fb43:	39 fa                	cmp    edx,edi
c000fb45:	75 2f                	jne    c000fb76 <Phys::allocateDMA(unsigned long)+0x90>
c000fb47:	85 db                	test   ebx,ebx
c000fb49:	74 1a                	je     c000fb65 <Phys::allocateDMA(unsigned long)+0x7f>
c000fb4b:	be 20 cf 02 c0       	mov    esi,0xc002cf20
c000fb50:	8d 90 20 cf 02 c0    	lea    edx,[eax-0x3ffd30e0]
c000fb56:	f7 d6                	not    esi
c000fb58:	29 c6                	sub    esi,eax
c000fb5a:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fb5d:	42                   	inc    edx
c000fb5e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fb61:	39 d9                	cmp    ecx,ebx
c000fb63:	7f f5                	jg     c000fb5a <Phys::allocateDMA(unsigned long)+0x74>
c000fb65:	85 ff                	test   edi,edi
c000fb67:	74 13                	je     c000fb7c <Phys::allocateDMA(unsigned long)+0x96>
c000fb69:	5b                   	pop    ebx
c000fb6a:	05 50 20 0c 00       	add    eax,0xc2050
c000fb6f:	5e                   	pop    esi
c000fb70:	c1 e0 0c             	shl    eax,0xc
c000fb73:	5f                   	pop    edi
c000fb74:	5d                   	pop    ebp
c000fb75:	c3                   	ret    
c000fb76:	89 ea                	mov    edx,ebp
c000fb78:	31 c9                	xor    ecx,ecx
c000fb7a:	eb a7                	jmp    c000fb23 <Phys::allocateDMA(unsigned long)+0x3d>
c000fb7c:	5b                   	pop    ebx
c000fb7d:	c1 e0 0c             	shl    eax,0xc
c000fb80:	5e                   	pop    esi
c000fb81:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fb86:	5f                   	pop    edi
c000fb87:	5d                   	pop    ebp
c000fb88:	c3                   	ret    

c000fb89 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fb89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fb91:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fb97:	c1 e9 0c             	shr    ecx,0xc
c000fb9a:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fb9f:	76 25                	jbe    c000fbc6 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fba1:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fba6:	c1 e8 0c             	shr    eax,0xc
c000fba9:	8d 50 10             	lea    edx,[eax+0x10]
c000fbac:	85 c9                	test   ecx,ecx
c000fbae:	74 15                	je     c000fbc5 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fbb0:	8d 82 20 cf 02 c0    	lea    eax,[edx-0x3ffd30e0]
c000fbb6:	8d 94 11 20 cf 02 c0 	lea    edx,[ecx+edx*1-0x3ffd30e0]
c000fbbd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fbc0:	40                   	inc    eax
c000fbc1:	39 d0                	cmp    eax,edx
c000fbc3:	75 f8                	jne    c000fbbd <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fbc5:	c3                   	ret    
c000fbc6:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fbcc:	c1 ea 0c             	shr    edx,0xc
c000fbcf:	eb db                	jmp    c000fbac <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fbd1 <Phys::setPageState(unsigned long, bool)>:
c000fbd1:	56                   	push   esi
c000fbd2:	ba 01 00 00 00       	mov    edx,0x1
c000fbd7:	53                   	push   ebx
c000fbd8:	8b 35 f8 bd 02 c0    	mov    esi,DWORD PTR ds:0xc002bdf8
c000fbde:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fbe6:	89 c8                	mov    eax,ecx
c000fbe8:	83 e1 07             	and    ecx,0x7
c000fbeb:	c1 e8 03             	shr    eax,0x3
c000fbee:	d3 e3                	shl    ebx,cl
c000fbf0:	01 c6                	add    esi,eax
c000fbf2:	d3 e2                	shl    edx,cl
c000fbf4:	f7 d2                	not    edx
c000fbf6:	20 16                	and    BYTE PTR [esi],dl
c000fbf8:	03 05 f8 bd 02 c0    	add    eax,DWORD PTR ds:0xc002bdf8
c000fbfe:	08 18                	or     BYTE PTR [eax],bl
c000fc00:	5b                   	pop    ebx
c000fc01:	5e                   	pop    esi
c000fc02:	c3                   	ret    

c000fc03 <Phys::getPageState(unsigned long)>:
c000fc03:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fc07:	8b 15 f8 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bdf8
c000fc0d:	89 c8                	mov    eax,ecx
c000fc0f:	83 e1 07             	and    ecx,0x7
c000fc12:	c1 e8 03             	shr    eax,0x3
c000fc15:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fc19:	d3 f8                	sar    eax,cl
c000fc1b:	83 e0 01             	and    eax,0x1
c000fc1e:	c3                   	ret    

c000fc1f <Phys::freePage(unsigned long)>:
c000fc1f:	53                   	push   ebx
c000fc20:	83 ec 08             	sub    esp,0x8
c000fc23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc27:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fc2d:	76 57                	jbe    c000fc86 <Phys::freePage(unsigned long)+0x67>
c000fc2f:	c1 eb 0c             	shr    ebx,0xc
c000fc32:	53                   	push   ebx
c000fc33:	e8 cb ff ff ff       	call   c000fc03 <Phys::getPageState(unsigned long)>
c000fc38:	5a                   	pop    edx
c000fc39:	84 c0                	test   al,al
c000fc3b:	74 5b                	je     c000fc98 <Phys::freePage(unsigned long)+0x79>
c000fc3d:	a1 0c cf 02 c0       	mov    eax,ds:0xc002cf0c
c000fc42:	48                   	dec    eax
c000fc43:	a3 0c cf 02 c0       	mov    ds:0xc002cf0c,eax
c000fc48:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc4b:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc4e:	c1 e0 02             	shl    eax,0x2
c000fc51:	99                   	cdq    
c000fc52:	f7 3d 10 cf 02 c0    	idiv   DWORD PTR ds:0xc002cf10
c000fc58:	39 05 08 cf 02 c0    	cmp    DWORD PTR ds:0xc002cf08,eax
c000fc5e:	75 13                	jne    c000fc73 <Phys::freePage(unsigned long)+0x54>
c000fc60:	83 ec 08             	sub    esp,0x8
c000fc63:	6a 00                	push   0x0
c000fc65:	53                   	push   ebx
c000fc66:	e8 66 ff ff ff       	call   c000fbd1 <Phys::setPageState(unsigned long, bool)>
c000fc6b:	83 c4 10             	add    esp,0x10
c000fc6e:	83 c4 08             	add    esp,0x8
c000fc71:	5b                   	pop    ebx
c000fc72:	c3                   	ret    
c000fc73:	83 ec 0c             	sub    esp,0xc
c000fc76:	a3 08 cf 02 c0       	mov    ds:0xc002cf08,eax
c000fc7b:	50                   	push   eax
c000fc7c:	e8 5b 0a 00 00       	call   c00106dc <VgaText::updateRAMUsageDisplay(int)>
c000fc81:	83 c4 10             	add    esp,0x10
c000fc84:	eb da                	jmp    c000fc60 <Phys::freePage(unsigned long)+0x41>
c000fc86:	68 00 10 00 00       	push   0x1000
c000fc8b:	53                   	push   ebx
c000fc8c:	e8 f8 fe ff ff       	call   c000fb89 <Phys::freeDMA(unsigned long, unsigned long)>
c000fc91:	59                   	pop    ecx
c000fc92:	5b                   	pop    ebx
c000fc93:	83 c4 08             	add    esp,0x8
c000fc96:	5b                   	pop    ebx
c000fc97:	c3                   	ret    
c000fc98:	c7 44 24 10 ff 8f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028fff
c000fca0:	83 c4 08             	add    esp,0x8
c000fca3:	5b                   	pop    ebx
c000fca4:	e9 02 9f 00 00       	jmp    c0019bab <Krnl::panic(char const*)>

c000fca9 <Phys::allocatePage()>:
c000fca9:	56                   	push   esi
c000fcaa:	53                   	push   ebx
c000fcab:	51                   	push   ecx
c000fcac:	8b 35 00 cf 02 c0    	mov    esi,DWORD PTR ds:0xc002cf00
c000fcb2:	89 f3                	mov    ebx,esi
c000fcb4:	eb 0a                	jmp    c000fcc0 <Phys::allocatePage()+0x17>
c000fcb6:	89 1d 00 cf 02 c0    	mov    DWORD PTR ds:0xc002cf00,ebx
c000fcbc:	39 de                	cmp    esi,ebx
c000fcbe:	74 24                	je     c000fce4 <Phys::allocatePage()+0x3b>
c000fcc0:	53                   	push   ebx
c000fcc1:	e8 3d ff ff ff       	call   c000fc03 <Phys::getPageState(unsigned long)>
c000fcc6:	5a                   	pop    edx
c000fcc7:	84 c0                	test   al,al
c000fcc9:	74 5a                	je     c000fd25 <Phys::allocatePage()+0x7c>
c000fccb:	43                   	inc    ebx
c000fccc:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fcd2:	75 e2                	jne    c000fcb6 <Phys::allocatePage()+0xd>
c000fcd4:	31 db                	xor    ebx,ebx
c000fcd6:	c7 05 00 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cf00,0x0
c000fce0:	39 de                	cmp    esi,ebx
c000fce2:	75 dc                	jne    c000fcc0 <Phys::allocatePage()+0x17>
c000fce4:	83 ec 0c             	sub    esp,0xc
c000fce7:	68 15 90 02 c0       	push   0xc0029015
c000fcec:	e8 ea 2b 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000fcf1:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fcf8:	e8 e9 fd ff ff       	call   c000fae6 <Phys::allocateDMA(unsigned long)>
c000fcfd:	83 c4 10             	add    esp,0x10
c000fd00:	85 c0                	test   eax,eax
c000fd02:	75 56                	jne    c000fd5a <Phys::allocatePage()+0xb1>
c000fd04:	83 ec 0c             	sub    esp,0xc
c000fd07:	68 26 90 02 c0       	push   0xc0029026
c000fd0c:	e8 9a 9e 00 00       	call   c0019bab <Krnl::panic(char const*)>
c000fd11:	83 c4 10             	add    esp,0x10
c000fd14:	8b 1d 00 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cf00
c000fd1a:	53                   	push   ebx
c000fd1b:	e8 e3 fe ff ff       	call   c000fc03 <Phys::getPageState(unsigned long)>
c000fd20:	5a                   	pop    edx
c000fd21:	84 c0                	test   al,al
c000fd23:	75 a6                	jne    c000fccb <Phys::allocatePage()+0x22>
c000fd25:	6a 01                	push   0x1
c000fd27:	53                   	push   ebx
c000fd28:	e8 a4 fe ff ff       	call   c000fbd1 <Phys::setPageState(unsigned long, bool)>
c000fd2d:	a1 0c cf 02 c0       	mov    eax,ds:0xc002cf0c
c000fd32:	59                   	pop    ecx
c000fd33:	40                   	inc    eax
c000fd34:	5b                   	pop    ebx
c000fd35:	a3 0c cf 02 c0       	mov    ds:0xc002cf0c,eax
c000fd3a:	8d 04 80             	lea    eax,[eax+eax*4]
c000fd3d:	8d 04 80             	lea    eax,[eax+eax*4]
c000fd40:	c1 e0 02             	shl    eax,0x2
c000fd43:	99                   	cdq    
c000fd44:	f7 3d 10 cf 02 c0    	idiv   DWORD PTR ds:0xc002cf10
c000fd4a:	39 05 08 cf 02 c0    	cmp    DWORD PTR ds:0xc002cf08,eax
c000fd50:	75 0c                	jne    c000fd5e <Phys::allocatePage()+0xb5>
c000fd52:	a1 00 cf 02 c0       	mov    eax,ds:0xc002cf00
c000fd57:	c1 e0 0c             	shl    eax,0xc
c000fd5a:	5a                   	pop    edx
c000fd5b:	5b                   	pop    ebx
c000fd5c:	5e                   	pop    esi
c000fd5d:	c3                   	ret    
c000fd5e:	83 ec 0c             	sub    esp,0xc
c000fd61:	a3 08 cf 02 c0       	mov    ds:0xc002cf08,eax
c000fd66:	50                   	push   eax
c000fd67:	e8 70 09 00 00       	call   c00106dc <VgaText::updateRAMUsageDisplay(int)>
c000fd6c:	83 c4 10             	add    esp,0x10
c000fd6f:	eb e1                	jmp    c000fd52 <Phys::allocatePage()+0xa9>

c000fd71 <Phys::allocateContiguousPages(int)>:
c000fd71:	57                   	push   edi
c000fd72:	56                   	push   esi
c000fd73:	53                   	push   ebx
c000fd74:	31 db                	xor    ebx,ebx
c000fd76:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fd7a:	e8 db d3 00 00       	call   c001d15a <lockScheduler()>
c000fd7f:	85 db                	test   ebx,ebx
c000fd81:	75 11                	jne    c000fd94 <Phys::allocateContiguousPages(int)+0x23>
c000fd83:	e8 21 ff ff ff       	call   c000fca9 <Phys::allocatePage()>
c000fd88:	83 ff 01             	cmp    edi,0x1
c000fd8b:	89 c6                	mov    esi,eax
c000fd8d:	74 21                	je     c000fdb0 <Phys::allocateContiguousPages(int)+0x3f>
c000fd8f:	bb 01 00 00 00       	mov    ebx,0x1
c000fd94:	e8 10 ff ff ff       	call   c000fca9 <Phys::allocatePage()>
c000fd99:	89 da                	mov    edx,ebx
c000fd9b:	c1 e2 0c             	shl    edx,0xc
c000fd9e:	01 f2                	add    edx,esi
c000fda0:	39 c2                	cmp    edx,eax
c000fda2:	74 17                	je     c000fdbb <Phys::allocateContiguousPages(int)+0x4a>
c000fda4:	bb 01 00 00 00       	mov    ebx,0x1
c000fda9:	89 c6                	mov    esi,eax
c000fdab:	83 ff 01             	cmp    edi,0x1
c000fdae:	75 e4                	jne    c000fd94 <Phys::allocateContiguousPages(int)+0x23>
c000fdb0:	e8 a7 d3 00 00       	call   c001d15c <unlockScheduler()>
c000fdb5:	89 f0                	mov    eax,esi
c000fdb7:	5b                   	pop    ebx
c000fdb8:	5e                   	pop    esi
c000fdb9:	5f                   	pop    edi
c000fdba:	c3                   	ret    
c000fdbb:	43                   	inc    ebx
c000fdbc:	39 fb                	cmp    ebx,edi
c000fdbe:	75 bf                	jne    c000fd7f <Phys::allocateContiguousPages(int)+0xe>
c000fdc0:	e8 97 d3 00 00       	call   c001d15c <unlockScheduler()>
c000fdc5:	89 f0                	mov    eax,esi
c000fdc7:	5b                   	pop    ebx
c000fdc8:	5e                   	pop    esi
c000fdc9:	5f                   	pop    edi
c000fdca:	c3                   	ret    

c000fdcb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fdcb:	56                   	push   esi
c000fdcc:	53                   	push   ebx
c000fdcd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdd1:	39 1d 04 cf 02 c0    	cmp    DWORD PTR ds:0xc002cf04,ebx
c000fdd7:	73 06                	jae    c000fddf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fdd9:	89 1d 04 cf 02 c0    	mov    DWORD PTR ds:0xc002cf04,ebx
c000fddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fde3:	c1 eb 0c             	shr    ebx,0xc
c000fde6:	c1 e8 0c             	shr    eax,0xc
c000fde9:	39 d8                	cmp    eax,ebx
c000fdeb:	73 13                	jae    c000fe00 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fded:	6a 00                	push   0x0
c000fdef:	8d 70 01             	lea    esi,[eax+0x1]
c000fdf2:	50                   	push   eax
c000fdf3:	e8 d9 fd ff ff       	call   c000fbd1 <Phys::setPageState(unsigned long, bool)>
c000fdf8:	5a                   	pop    edx
c000fdf9:	89 f0                	mov    eax,esi
c000fdfb:	59                   	pop    ecx
c000fdfc:	39 f3                	cmp    ebx,esi
c000fdfe:	75 ed                	jne    c000fded <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fe00:	5b                   	pop    ebx
c000fe01:	5e                   	pop    esi
c000fe02:	c3                   	ret    

c000fe03 <Phys::physicalMemorySetup(unsigned int)>:
c000fe03:	55                   	push   ebp
c000fe04:	57                   	push   edi
c000fe05:	56                   	push   esi
c000fe06:	53                   	push   ebx
c000fe07:	31 db                	xor    ebx,ebx
c000fe09:	83 ec 40             	sub    esp,0x40
c000fe0c:	6a 30                	push   0x30
c000fe0e:	6a 00                	push   0x0
c000fe10:	68 20 cf 02 c0       	push   0xc002cf20
c000fe15:	e8 bc 08 ff ff       	call   c00006d6 <memset>
c000fe1a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fe1e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fe23:	05 00 10 00 00       	add    eax,0x1000
c000fe28:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fe2c:	83 c4 10             	add    esp,0x10
c000fe2f:	83 ec 08             	sub    esp,0x8
c000fe32:	6a 01                	push   0x1
c000fe34:	53                   	push   ebx
c000fe35:	43                   	inc    ebx
c000fe36:	e8 96 fd ff ff       	call   c000fbd1 <Phys::setPageState(unsigned long, bool)>
c000fe3b:	83 c4 10             	add    esp,0x10
c000fe3e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fe44:	75 e9                	jne    c000fe2f <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fe46:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fe4d:	66 85 c0             	test   ax,ax
c000fe50:	0f 84 8e 01 00 00    	je     c000ffe4 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fe56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fe5a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fe62:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe66:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fe6b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fe6f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fe77:	eb 15                	jmp    c000fe8e <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fe79:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fe7d:	83 c3 18             	add    ebx,0x18
c000fe80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe84:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fe88:	0f 84 66 01 00 00    	je     c000fff4 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fe8e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fe91:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fe94:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fe97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe9f:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fea1:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fea4:	01 f0                	add    eax,esi
c000fea6:	55                   	push   ebp
c000fea7:	11 fa                	adc    edx,edi
c000fea9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fead:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000feb1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000feb5:	56                   	push   esi
c000feb6:	68 60 90 02 c0       	push   0xc0029060
c000febb:	e8 1b 2a 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000fec0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fec4:	83 c4 10             	add    esp,0x10
c000fec7:	09 f8                	or     eax,edi
c000fec9:	0f 85 25 01 00 00    	jne    c000fff4 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fecf:	4d                   	dec    ebp
c000fed0:	75 a7                	jne    c000fe79 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fed2:	ba 00 00 08 00       	mov    edx,0x80000
c000fed7:	89 c1                	mov    ecx,eax
c000fed9:	39 f2                	cmp    edx,esi
c000fedb:	19 f9                	sbb    ecx,edi
c000fedd:	0f 82 a7 00 00 00    	jb     c000ff8a <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fee3:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fee7:	89 c1                	mov    ecx,eax
c000fee9:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000feed:	0f 83 97 00 00 00    	jae    c000ff8a <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fef3:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fef8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fefc:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000ff00:	39 fa                	cmp    edx,edi
c000ff02:	19 e8                	sbb    eax,ebp
c000ff04:	0f 82 14 01 00 00    	jb     c001001e <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000ff0a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ff0e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000ff12:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000ff18:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff1d:	83 d5 ff             	adc    ebp,0xffffffff
c000ff20:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000ff24:	31 c0                	xor    eax,eax
c000ff26:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000ff2a:	39 fa                	cmp    edx,edi
c000ff2c:	89 c1                	mov    ecx,eax
c000ff2e:	19 e9                	sbb    ecx,ebp
c000ff30:	0f 83 43 ff ff ff    	jae    c000fe79 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff36:	be 00 00 08 00       	mov    esi,0x80000
c000ff3b:	50                   	push   eax
c000ff3c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ff40:	57                   	push   edi
c000ff41:	56                   	push   esi
c000ff42:	68 84 90 02 c0       	push   0xc0029084
c000ff47:	e8 8f 29 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000ff4c:	5a                   	pop    edx
c000ff4d:	59                   	pop    ecx
c000ff4e:	57                   	push   edi
c000ff4f:	56                   	push   esi
c000ff50:	e8 76 fe ff ff       	call   c000fdcb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000ff55:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ff59:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff5d:	83 c4 0c             	add    esp,0xc
c000ff60:	0f ac d0 0c          	shrd   eax,edx,0xc
c000ff64:	03 05 10 cf 02 c0    	add    eax,DWORD PTR ds:0xc002cf10
c000ff6a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ff71:	a3 10 cf 02 c0       	mov    ds:0xc002cf10,eax
c000ff76:	52                   	push   edx
c000ff77:	50                   	push   eax
c000ff78:	68 42 90 02 c0       	push   0xc0029042
c000ff7d:	e8 59 29 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c000ff82:	83 c4 10             	add    esp,0x10
c000ff85:	e9 ef fe ff ff       	jmp    c000fe79 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff8a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000ff8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff92:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff96:	39 ea                	cmp    edx,ebp
c000ff98:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000ff9c:	0f 82 d7 fe ff ff    	jb     c000fe79 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffa2:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ffa7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000ffab:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000ffaf:	0f 83 c4 fe ff ff    	jae    c000fe79 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffb5:	39 ee                	cmp    esi,ebp
c000ffb7:	89 f8                	mov    eax,edi
c000ffb9:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000ffbd:	0f 83 78 ff ff ff    	jae    c000ff3b <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ffc3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffc7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffcb:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ffcf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ffd3:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000ffd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ffdb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ffdf:	e9 57 ff ff ff       	jmp    c000ff3b <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ffe4:	83 ec 0c             	sub    esp,0xc
c000ffe7:	68 34 90 02 c0       	push   0xc0029034
c000ffec:	e8 ba 9b 00 00       	call   c0019bab <Krnl::panic(char const*)>
c000fff1:	83 c4 10             	add    esp,0x10
c000fff4:	bb 40 01 00 00       	mov    ebx,0x140
c000fff9:	83 ec 08             	sub    esp,0x8
c000fffc:	6a 00                	push   0x0
c000fffe:	53                   	push   ebx
c000ffff:	43                   	inc    ebx
c0010000:	e8 cc fb ff ff       	call   c000fbd1 <Phys::setPageState(unsigned long, bool)>
c0010005:	ff 05 10 cf 02 c0    	inc    DWORD PTR ds:0xc002cf10
c001000b:	83 c4 10             	add    esp,0x10
c001000e:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010014:	75 e3                	jne    c000fff9 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010016:	83 c4 3c             	add    esp,0x3c
c0010019:	5b                   	pop    ebx
c001001a:	5e                   	pop    esi
c001001b:	5f                   	pop    edi
c001001c:	5d                   	pop    ebp
c001001d:	c3                   	ret    
c001001e:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010026:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001002e:	e9 d7 fe ff ff       	jmp    c000ff0a <Phys::physicalMemorySetup(unsigned int)+0x107>
c0010033:	90                   	nop

c0010034 <Pipe::isAtty()>:
c0010034:	31 c0                	xor    eax,eax
c0010036:	c3                   	ret    
c0010037:	90                   	nop

c0010038 <Pipe::~Pipe()>:
c0010038:	83 ec 0c             	sub    esp,0xc
c001003b:	ba f0 90 02 c0       	mov    edx,0xc00290f0
c0010040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010044:	89 10                	mov    DWORD PTR [eax],edx
c0010046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001004a:	83 ec 0c             	sub    esp,0xc
c001004d:	50                   	push   eax
c001004e:	e8 37 16 00 00       	call   c001168a <UnixFile::~UnixFile()>
c0010053:	83 c4 10             	add    esp,0x10
c0010056:	90                   	nop
c0010057:	83 c4 0c             	add    esp,0xc
c001005a:	c3                   	ret    
c001005b:	90                   	nop

c001005c <Pipe::~Pipe()>:
c001005c:	83 ec 0c             	sub    esp,0xc
c001005f:	83 ec 0c             	sub    esp,0xc
c0010062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010066:	e8 cd ff ff ff       	call   c0010038 <Pipe::~Pipe()>
c001006b:	83 c4 10             	add    esp,0x10
c001006e:	83 ec 08             	sub    esp,0x8
c0010071:	6a 20                	push   0x20
c0010073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010077:	e8 7f 27 00 00       	call   c00127fb <operator delete(void*, unsigned long)>
c001007c:	83 c4 10             	add    esp,0x10
c001007f:	83 c4 0c             	add    esp,0xc
c0010082:	c3                   	ret    
c0010083:	90                   	nop

c0010084 <Pipe::read(unsigned long long, void*, int*)>:
c0010084:	55                   	push   ebp
c0010085:	57                   	push   edi
c0010086:	56                   	push   esi
c0010087:	53                   	push   ebx
c0010088:	83 ec 1c             	sub    esp,0x1c
c001008b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001008f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010093:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010097:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001009a:	89 c8                	mov    eax,ecx
c001009c:	99                   	cdq    
c001009d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00100a1:	74 19                	je     c00100bc <Pipe::read(unsigned long long, void*, int*)+0x38>
c00100a3:	39 f9                	cmp    ecx,edi
c00100a5:	89 d1                	mov    ecx,edx
c00100a7:	19 f1                	sbb    ecx,esi
c00100a9:	73 11                	jae    c00100bc <Pipe::read(unsigned long long, void*, int*)+0x38>
c00100ab:	e8 aa d0 00 00       	call   c001d15a <lockScheduler()>
c00100b0:	e8 e1 d3 00 00       	call   c001d496 <schedule()>
c00100b5:	e8 a2 d0 00 00       	call   c001d15c <unlockScheduler()>
c00100ba:	eb db                	jmp    c0010097 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00100bc:	39 f8                	cmp    eax,edi
c00100be:	89 d1                	mov    ecx,edx
c00100c0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00100c4:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00100c8:	19 f1                	sbb    ecx,esi
c00100ca:	73 08                	jae    c00100d4 <Pipe::read(unsigned long long, void*, int*)+0x50>
c00100cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00100d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00100d4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00100d7:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00100da:	29 c6                	sub    esi,eax
c00100dc:	89 f1                	mov    ecx,esi
c00100de:	c1 f9 1f             	sar    ecx,0x1f
c00100e1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00100e5:	89 ca                	mov    edx,ecx
c00100e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00100eb:	19 d1                	sbb    ecx,edx
c00100ed:	73 04                	jae    c00100f3 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c00100ef:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00100f3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00100f7:	89 fd                	mov    ebp,edi
c00100f9:	29 f5                	sub    ebp,esi
c00100fb:	85 f6                	test   esi,esi
c00100fd:	74 12                	je     c0010111 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c00100ff:	52                   	push   edx
c0010100:	56                   	push   esi
c0010101:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010104:	50                   	push   eax
c0010105:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010109:	e8 92 05 ff ff       	call   c00006a0 <memcpy>
c001010e:	83 c4 10             	add    esp,0x10
c0010111:	85 ed                	test   ebp,ebp
c0010113:	74 12                	je     c0010127 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c0010115:	50                   	push   eax
c0010116:	55                   	push   ebp
c0010117:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001011a:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c001011e:	56                   	push   esi
c001011f:	e8 7c 05 ff ff       	call   c00006a0 <memcpy>
c0010124:	83 c4 10             	add    esp,0x10
c0010127:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c001012a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001012d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010130:	99                   	cdq    
c0010131:	89 f7                	mov    edi,esi
c0010133:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010137:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001013b:	c1 ff 1f             	sar    edi,0x1f
c001013e:	57                   	push   edi
c001013f:	56                   	push   esi
c0010140:	52                   	push   edx
c0010141:	50                   	push   eax
c0010142:	e8 85 57 01 00       	call   c00258cc <__umoddi3>
c0010147:	83 c4 10             	add    esp,0x10
c001014a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001014d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010152:	75 10                	jne    c0010164 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c0010154:	83 ec 0c             	sub    esp,0xc
c0010157:	68 ad 90 02 c0       	push   0xc00290ad
c001015c:	e8 4a 9a 00 00       	call   c0019bab <Krnl::panic(char const*)>
c0010161:	83 c4 10             	add    esp,0x10
c0010164:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010168:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001016c:	89 10                	mov    DWORD PTR [eax],edx
c001016e:	83 c4 1c             	add    esp,0x1c
c0010171:	31 c0                	xor    eax,eax
c0010173:	5b                   	pop    ebx
c0010174:	5e                   	pop    esi
c0010175:	5f                   	pop    edi
c0010176:	5d                   	pop    ebp
c0010177:	c3                   	ret    

c0010178 <Pipe::write(unsigned long long, void*, int*)>:
c0010178:	55                   	push   ebp
c0010179:	57                   	push   edi
c001017a:	56                   	push   esi
c001017b:	53                   	push   ebx
c001017c:	83 ec 1c             	sub    esp,0x1c
c001017f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010183:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010187:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001018b:	89 04 24             	mov    DWORD PTR [esp],eax
c001018e:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010191:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010194:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010198:	89 de                	mov    esi,ebx
c001019a:	89 df                	mov    edi,ebx
c001019c:	c1 ff 1f             	sar    edi,0x1f
c001019f:	01 c6                	add    esi,eax
c00101a1:	89 c8                	mov    eax,ecx
c00101a3:	11 d7                	adc    edi,edx
c00101a5:	99                   	cdq    
c00101a6:	39 f1                	cmp    ecx,esi
c00101a8:	89 d0                	mov    eax,edx
c00101aa:	19 f8                	sbb    eax,edi
c00101ac:	b8 01 00 00 00       	mov    eax,0x1
c00101b1:	0f 82 80 00 00 00    	jb     c0010237 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00101b7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00101ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00101bd:	01 d8                	add    eax,ebx
c00101bf:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00101c3:	99                   	cdq    
c00101c4:	f7 f9                	idiv   ecx
c00101c6:	29 d1                	sub    ecx,edx
c00101c8:	89 d7                	mov    edi,edx
c00101ca:	89 c8                	mov    eax,ecx
c00101cc:	99                   	cdq    
c00101cd:	39 ce                	cmp    esi,ecx
c00101cf:	19 d3                	sbb    ebx,edx
c00101d1:	bb 00 00 00 00       	mov    ebx,0x0
c00101d6:	72 04                	jb     c00101dc <Pipe::write(unsigned long long, void*, int*)+0x64>
c00101d8:	89 f3                	mov    ebx,esi
c00101da:	29 cb                	sub    ebx,ecx
c00101dc:	89 f1                	mov    ecx,esi
c00101de:	29 d9                	sub    ecx,ebx
c00101e0:	74 1a                	je     c00101fc <Pipe::write(unsigned long long, void*, int*)+0x84>
c00101e2:	52                   	push   edx
c00101e3:	51                   	push   ecx
c00101e4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00101e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00101ec:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00101ef:	57                   	push   edi
c00101f0:	e8 ab 04 ff ff       	call   c00006a0 <memcpy>
c00101f5:	83 c4 10             	add    esp,0x10
c00101f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101fc:	85 db                	test   ebx,ebx
c00101fe:	74 12                	je     c0010212 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010200:	50                   	push   eax
c0010201:	53                   	push   ebx
c0010202:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010206:	51                   	push   ecx
c0010207:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001020a:	e8 91 04 ff ff       	call   c00006a0 <memcpy>
c001020f:	83 c4 10             	add    esp,0x10
c0010212:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010215:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001021a:	75 10                	jne    c001022c <Pipe::write(unsigned long long, void*, int*)+0xb4>
c001021c:	83 ec 0c             	sub    esp,0xc
c001021f:	68 c9 90 02 c0       	push   0xc00290c9
c0010224:	e8 82 99 00 00       	call   c0019bab <Krnl::panic(char const*)>
c0010229:	83 c4 10             	add    esp,0x10
c001022c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010230:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010233:	89 38                	mov    DWORD PTR [eax],edi
c0010235:	31 c0                	xor    eax,eax
c0010237:	83 c4 1c             	add    esp,0x1c
c001023a:	5b                   	pop    ebx
c001023b:	5e                   	pop    esi
c001023c:	5f                   	pop    edi
c001023d:	5d                   	pop    ebp
c001023e:	c3                   	ret    
c001023f:	90                   	nop

c0010240 <Pipe::Pipe(int)>:
c0010240:	83 ec 0c             	sub    esp,0xc
c0010243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010247:	83 ec 08             	sub    esp,0x8
c001024a:	6a 00                	push   0x0
c001024c:	50                   	push   eax
c001024d:	e8 56 12 00 00       	call   c00114a8 <UnixFile::UnixFile(int)>
c0010252:	83 c4 10             	add    esp,0x10
c0010255:	ba f0 90 02 c0       	mov    edx,0xc00290f0
c001025a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001025e:	89 10                	mov    DWORD PTR [eax],edx
c0010260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010264:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010268:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001026b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001026f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001027a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010281:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010285:	83 ec 0c             	sub    esp,0xc
c0010288:	50                   	push   eax
c0010289:	e8 a8 f3 ff ff       	call   c000f636 <malloc>
c001028e:	83 c4 10             	add    esp,0x10
c0010291:	89 c2                	mov    edx,eax
c0010293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010297:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001029a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001029e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00102a2:	90                   	nop
c00102a3:	83 c4 0c             	add    esp,0xc
c00102a6:	c3                   	ret    
c00102a7:	90                   	nop

c00102a8 <VgaText::isAtty()>:
c00102a8:	b0 01                	mov    al,0x1
c00102aa:	c3                   	ret    
c00102ab:	90                   	nop

c00102ac <VgaText::~VgaText()>:
c00102ac:	83 ec 0c             	sub    esp,0xc
c00102af:	ba ac 91 02 c0       	mov    edx,0xc00291ac
c00102b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b8:	89 10                	mov    DWORD PTR [eax],edx
c00102ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102be:	83 ec 0c             	sub    esp,0xc
c00102c1:	50                   	push   eax
c00102c2:	e8 c3 13 00 00       	call   c001168a <UnixFile::~UnixFile()>
c00102c7:	83 c4 10             	add    esp,0x10
c00102ca:	90                   	nop
c00102cb:	83 c4 0c             	add    esp,0xc
c00102ce:	c3                   	ret    
c00102cf:	90                   	nop

c00102d0 <VgaText::~VgaText()>:
c00102d0:	83 ec 0c             	sub    esp,0xc
c00102d3:	83 ec 0c             	sub    esp,0xc
c00102d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102da:	e8 cd ff ff ff       	call   c00102ac <VgaText::~VgaText()>
c00102df:	83 c4 10             	add    esp,0x10
c00102e2:	83 ec 08             	sub    esp,0x8
c00102e5:	68 60 12 00 00       	push   0x1260
c00102ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ee:	e8 08 25 00 00       	call   c00127fb <operator delete(void*, unsigned long)>
c00102f3:	83 c4 10             	add    esp,0x10
c00102f6:	83 c4 0c             	add    esp,0xc
c00102f9:	c3                   	ret    

c00102fa <VgaText::read(unsigned long long, void*, int*)>:
c00102fa:	83 ec 10             	sub    esp,0x10
c00102fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010301:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010305:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010309:	e8 39 58 00 00       	call   c0015b47 <readKeyboard(VgaText*, char*, unsigned long)>
c001030e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010312:	89 02                	mov    DWORD PTR [edx],eax
c0010314:	31 c0                	xor    eax,eax
c0010316:	83 c4 1c             	add    esp,0x1c
c0010319:	c3                   	ret    

c001031a <setTerminalScrollLock(bool)>:
c001031a:	c3                   	ret    

c001031b <addToTerminalCycle(VgaText*)>:
c001031b:	8b 15 a0 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cfa0
c0010321:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010325:	85 d2                	test   edx,edx
c0010327:	75 0c                	jne    c0010335 <addToTerminalCycle(VgaText*)+0x1a>
c0010329:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c001032f:	a3 a0 cf 02 c0       	mov    ds:0xc002cfa0,eax
c0010334:	c3                   	ret    
c0010335:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001033b:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010341:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010347:	c3                   	ret    

c0010348 <installVgaTextImplementation()>:
c0010348:	83 ec 10             	sub    esp,0x10
c001034b:	6a 20                	push   0x20
c001034d:	6a 00                	push   0x0
c001034f:	68 80 cf 02 c0       	push   0xc002cf80
c0010354:	e8 7d 03 ff ff       	call   c00006d6 <memset>
c0010359:	83 c4 1c             	add    esp,0x1c
c001035c:	c3                   	ret    

c001035d <scrollTerminalScrollLock(int)>:
c001035d:	c3                   	ret    

c001035e <VgaText::load()>:
c001035e:	53                   	push   ebx
c001035f:	31 c0                	xor    eax,eax
c0010361:	83 ec 58             	sub    esp,0x58
c0010364:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010368:	89 e2                	mov    edx,esp
c001036a:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001036e:	40                   	inc    eax
c001036f:	83 f8 50             	cmp    eax,0x50
c0010372:	75 f6                	jne    c001036a <VgaText::load()+0xc>
c0010374:	31 c0                	xor    eax,eax
c0010376:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c001037d:	84 c9                	test   cl,cl
c001037f:	74 06                	je     c0010387 <VgaText::load()+0x29>
c0010381:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010384:	40                   	inc    eax
c0010385:	eb ef                	jmp    c0010376 <VgaText::load()+0x18>
c0010387:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c001038d:	85 c0                	test   eax,eax
c001038f:	74 09                	je     c001039a <VgaText::load()+0x3c>
c0010391:	51                   	push   ecx
c0010392:	51                   	push   ecx
c0010393:	52                   	push   edx
c0010394:	53                   	push   ebx
c0010395:	ff d0                	call   eax
c0010397:	83 c4 10             	add    esp,0x10
c001039a:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00103a0:	85 c0                	test   eax,eax
c00103a2:	74 09                	je     c00103ad <VgaText::load()+0x4f>
c00103a4:	83 ec 0c             	sub    esp,0xc
c00103a7:	53                   	push   ebx
c00103a8:	ff d0                	call   eax
c00103aa:	83 c4 10             	add    esp,0x10
c00103ad:	83 c4 58             	add    esp,0x58
c00103b0:	5b                   	pop    ebx
c00103b1:	c3                   	ret    

c00103b2 <VgaText::updateCursor()>:
c00103b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103b6:	39 05 a4 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfa4,eax
c00103bc:	75 0c                	jne    c00103ca <VgaText::updateCursor()+0x18>
c00103be:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00103c4:	85 c0                	test   eax,eax
c00103c6:	74 02                	je     c00103ca <VgaText::updateCursor()+0x18>
c00103c8:	ff e0                	jmp    eax
c00103ca:	c3                   	ret    
c00103cb:	90                   	nop

c00103cc <VgaText::showCursor(bool)>:
c00103cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103d4:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00103da:	c3                   	ret    
c00103db:	90                   	nop

c00103dc <VgaText::disableBlink(bool)>:
c00103dc:	56                   	push   esi
c00103dd:	53                   	push   ebx
c00103de:	51                   	push   ecx
c00103df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103e7:	39 1d a4 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfa4,ebx
c00103ed:	75 18                	jne    c0010407 <VgaText::disableBlink(bool)+0x2b>
c00103ef:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00103f5:	85 c0                	test   eax,eax
c00103f7:	74 0e                	je     c0010407 <VgaText::disableBlink(bool)+0x2b>
c00103f9:	89 f1                	mov    ecx,esi
c00103fb:	52                   	push   edx
c00103fc:	52                   	push   edx
c00103fd:	0f b6 d1             	movzx  edx,cl
c0010400:	52                   	push   edx
c0010401:	53                   	push   ebx
c0010402:	ff d0                	call   eax
c0010404:	83 c4 10             	add    esp,0x10
c0010407:	89 f0                	mov    eax,esi
c0010409:	83 f0 01             	xor    eax,0x1
c001040c:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010412:	58                   	pop    eax
c0010413:	5b                   	pop    ebx
c0010414:	5e                   	pop    esi
c0010415:	c3                   	ret    

c0010416 <VgaText::doANSI_SGR(int)>:
c0010416:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001041a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001041e:	85 d2                	test   edx,edx
c0010420:	75 14                	jne    c0010436 <VgaText::doANSI_SGR(int)+0x20>
c0010422:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010428:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001042e:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010434:	eb 65                	jmp    c001049b <VgaText::doANSI_SGR(int)+0x85>
c0010436:	83 fa 07             	cmp    edx,0x7
c0010439:	75 14                	jne    c001044f <VgaText::doANSI_SGR(int)+0x39>
c001043b:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010441:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010447:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c001044d:	eb 4c                	jmp    c001049b <VgaText::doANSI_SGR(int)+0x85>
c001044f:	83 fa 1b             	cmp    edx,0x1b
c0010452:	74 ce                	je     c0010422 <VgaText::doANSI_SGR(int)+0xc>
c0010454:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010457:	83 f9 07             	cmp    ecx,0x7
c001045a:	77 09                	ja     c0010465 <VgaText::doANSI_SGR(int)+0x4f>
c001045c:	8b 14 8d 20 be 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd41e0]
c0010463:	eb 20                	jmp    c0010485 <VgaText::doANSI_SGR(int)+0x6f>
c0010465:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010468:	83 f9 07             	cmp    ecx,0x7
c001046b:	77 09                	ja     c0010476 <VgaText::doANSI_SGR(int)+0x60>
c001046d:	8b 14 8d 20 be 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd41e0]
c0010474:	eb 25                	jmp    c001049b <VgaText::doANSI_SGR(int)+0x85>
c0010476:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010479:	83 f9 07             	cmp    ecx,0x7
c001047c:	77 0e                	ja     c001048c <VgaText::doANSI_SGR(int)+0x76>
c001047e:	8b 14 95 d8 bc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4328]
c0010485:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001048b:	c3                   	ret    
c001048c:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001048f:	83 f9 07             	cmp    ecx,0x7
c0010492:	77 0d                	ja     c00104a1 <VgaText::doANSI_SGR(int)+0x8b>
c0010494:	8b 14 95 b0 bc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4350]
c001049b:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00104a1:	c3                   	ret    

c00104a2 <VgaText::setDefaultBgColour(VgaColour)>:
c00104a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104aa:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00104b0:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00104b6:	c3                   	ret    
c00104b7:	90                   	nop

c00104b8 <VgaText::setDefaultFgColour(VgaColour)>:
c00104b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104c0:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00104c6:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00104cc:	c3                   	ret    
c00104cd:	90                   	nop

c00104ce <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00104ce:	53                   	push   ebx
c00104cf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00104d3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00104d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00104db:	51                   	push   ecx
c00104dc:	e8 c1 ff ff ff       	call   c00104a2 <VgaText::setDefaultBgColour(VgaColour)>
c00104e1:	58                   	pop    eax
c00104e2:	5a                   	pop    edx
c00104e3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00104e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00104eb:	5b                   	pop    ebx
c00104ec:	eb ca                	jmp    c00104b8 <VgaText::setDefaultFgColour(VgaColour)>

c00104ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00104ee:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00104f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00104f7:	83 e0 0f             	and    eax,0xf
c00104fa:	c1 e2 04             	shl    edx,0x4
c00104fd:	09 d0                	or     eax,edx
c00104ff:	c3                   	ret    

c0010500 <VgaText::scrollScreen()>:
c0010500:	57                   	push   edi
c0010501:	56                   	push   esi
c0010502:	be 01 00 00 00       	mov    esi,0x1
c0010507:	53                   	push   ebx
c0010508:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001050c:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010512:	31 ff                	xor    edi,edi
c0010514:	01 d9                	add    ecx,ebx
c0010516:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010519:	83 fe 17             	cmp    esi,0x17
c001051c:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010522:	75 28                	jne    c001054c <VgaText::scrollScreen()+0x4c>
c0010524:	f7 c7 01 00 00 00    	test   edi,0x1
c001052a:	74 1c                	je     c0010548 <VgaText::scrollScreen()+0x48>
c001052c:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010533:	50                   	push   eax
c0010534:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001053b:	50                   	push   eax
c001053c:	e8 ad ff ff ff       	call   c00104ee <VgaText::combineColours(unsigned char, unsigned char)>
c0010541:	5a                   	pop    edx
c0010542:	5a                   	pop    edx
c0010543:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010546:	eb 04                	jmp    c001054c <VgaText::scrollScreen()+0x4c>
c0010548:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c001054c:	47                   	inc    edi
c001054d:	41                   	inc    ecx
c001054e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010554:	75 c0                	jne    c0010516 <VgaText::scrollScreen()+0x16>
c0010556:	46                   	inc    esi
c0010557:	83 fe 18             	cmp    esi,0x18
c001055a:	75 b0                	jne    c001050c <VgaText::scrollScreen()+0xc>
c001055c:	39 1d a4 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfa4,ebx
c0010562:	75 24                	jne    c0010588 <VgaText::scrollScreen()+0x88>
c0010564:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001056b:	74 08                	je     c0010575 <VgaText::scrollScreen()+0x75>
c001056d:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010573:	eb 13                	jmp    c0010588 <VgaText::scrollScreen()+0x88>
c0010575:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001057b:	85 c0                	test   eax,eax
c001057d:	74 09                	je     c0010588 <VgaText::scrollScreen()+0x88>
c001057f:	83 ec 0c             	sub    esp,0xc
c0010582:	53                   	push   ebx
c0010583:	ff d0                	call   eax
c0010585:	83 c4 10             	add    esp,0x10
c0010588:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001058c:	5b                   	pop    ebx
c001058d:	5e                   	pop    esi
c001058e:	5f                   	pop    edi
c001058f:	e9 1e fe ff ff       	jmp    c00103b2 <VgaText::updateCursor()>

c0010594 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010594:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010599:	c1 e0 08             	shl    eax,0x8
c001059c:	89 c2                	mov    edx,eax
c001059e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00105a3:	09 d0                	or     eax,edx
c00105a5:	c3                   	ret    

c00105a6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00105a6:	53                   	push   ebx
c00105a7:	83 ec 08             	sub    esp,0x8
c00105aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00105ae:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105b3:	50                   	push   eax
c00105b4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105b9:	50                   	push   eax
c00105ba:	e8 2f ff ff ff       	call   c00104ee <VgaText::combineColours(unsigned char, unsigned char)>
c00105bf:	5a                   	pop    edx
c00105c0:	0f b6 c0             	movzx  eax,al
c00105c3:	5b                   	pop    ebx
c00105c4:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00105c9:	50                   	push   eax
c00105ca:	53                   	push   ebx
c00105cb:	e8 c4 ff ff ff       	call   c0010594 <VgaText::combineCharAndColour(char, unsigned char)>
c00105d0:	5a                   	pop    edx
c00105d1:	5a                   	pop    edx
c00105d2:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00105d8:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00105dc:	0f b7 d2             	movzx  edx,dx
c00105df:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00105e4:	39 0d a4 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfa4,ecx
c00105ea:	75 14                	jne    c0010600 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00105ec:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00105f2:	85 c0                	test   eax,eax
c00105f4:	74 0a                	je     c0010600 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00105f6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00105fa:	83 c4 08             	add    esp,0x8
c00105fd:	5b                   	pop    ebx
c00105fe:	ff e0                	jmp    eax
c0010600:	83 c4 08             	add    esp,0x8
c0010603:	5b                   	pop    ebx
c0010604:	c3                   	ret    
c0010605:	90                   	nop

c0010606 <VgaText::getCursorX()>:
c0010606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001060a:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010610:	c3                   	ret    
c0010611:	90                   	nop

c0010612 <VgaText::getCursorY()>:
c0010612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010616:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c001061c:	c3                   	ret    
c001061d:	90                   	nop

c001061e <VgaText::setCursor(int, int)>:
c001061e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010622:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010626:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c001062c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010630:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010636:	e9 77 fd ff ff       	jmp    c00103b2 <VgaText::updateCursor()>
c001063b:	90                   	nop

c001063c <VgaText::setCursorX(int)>:
c001063c:	83 ec 10             	sub    esp,0x10
c001063f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010643:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010649:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001064d:	50                   	push   eax
c001064e:	e8 cb ff ff ff       	call   c001061e <VgaText::setCursor(int, int)>
c0010653:	83 c4 1c             	add    esp,0x1c
c0010656:	c3                   	ret    
c0010657:	90                   	nop

c0010658 <VgaText::setCursorY(int)>:
c0010658:	83 ec 10             	sub    esp,0x10
c001065b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001065f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010663:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010669:	50                   	push   eax
c001066a:	e8 af ff ff ff       	call   c001061e <VgaText::setCursor(int, int)>
c001066f:	83 c4 1c             	add    esp,0x1c
c0010672:	c3                   	ret    
c0010673:	90                   	nop

c0010674 <VgaText::incrementCursor(bool)>:
c0010674:	56                   	push   esi
c0010675:	53                   	push   ebx
c0010676:	51                   	push   ecx
c0010677:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001067b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001067f:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010685:	40                   	inc    eax
c0010686:	83 f8 50             	cmp    eax,0x50
c0010689:	74 08                	je     c0010693 <VgaText::incrementCursor(bool)+0x1f>
c001068b:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010691:	eb 33                	jmp    c00106c6 <VgaText::incrementCursor(bool)+0x52>
c0010693:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010699:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00106a3:	8d 50 01             	lea    edx,[eax+0x1]
c00106a6:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00106ac:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00106b2:	75 12                	jne    c00106c6 <VgaText::incrementCursor(bool)+0x52>
c00106b4:	83 ec 0c             	sub    esp,0xc
c00106b7:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00106bd:	53                   	push   ebx
c00106be:	e8 3d fe ff ff       	call   c0010500 <VgaText::scrollScreen()>
c00106c3:	83 c4 10             	add    esp,0x10
c00106c6:	89 f0                	mov    eax,esi
c00106c8:	84 c0                	test   al,al
c00106ca:	74 0c                	je     c00106d8 <VgaText::incrementCursor(bool)+0x64>
c00106cc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00106d0:	5a                   	pop    edx
c00106d1:	5b                   	pop    ebx
c00106d2:	5e                   	pop    esi
c00106d3:	e9 da fc ff ff       	jmp    c00103b2 <VgaText::updateCursor()>
c00106d8:	58                   	pop    eax
c00106d9:	5b                   	pop    ebx
c00106da:	5e                   	pop    esi
c00106db:	c3                   	ret    

c00106dc <VgaText::updateRAMUsageDisplay(int)>:
c00106dc:	56                   	push   esi
c00106dd:	8b 35 00 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be00
c00106e3:	53                   	push   ebx
c00106e4:	bb 0a 00 00 00       	mov    ebx,0xa
c00106e9:	6a 0f                	push   0xf
c00106eb:	6a 00                	push   0x0
c00106ed:	e8 fc fd ff ff       	call   c00104ee <VgaText::combineColours(unsigned char, unsigned char)>
c00106f2:	5a                   	pop    edx
c00106f3:	59                   	pop    ecx
c00106f4:	0f b6 c8             	movzx  ecx,al
c00106f7:	51                   	push   ecx
c00106f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106fc:	99                   	cdq    
c00106fd:	f7 fb                	idiv   ebx
c00106ff:	89 d3                	mov    ebx,edx
c0010701:	83 c0 30             	add    eax,0x30
c0010704:	83 c3 30             	add    ebx,0x30
c0010707:	0f be c0             	movsx  eax,al
c001070a:	0f b6 db             	movzx  ebx,bl
c001070d:	50                   	push   eax
c001070e:	e8 81 fe ff ff       	call   c0010594 <VgaText::combineCharAndColour(char, unsigned char)>
c0010713:	5a                   	pop    edx
c0010714:	5a                   	pop    edx
c0010715:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c001071c:	51                   	push   ecx
c001071d:	53                   	push   ebx
c001071e:	e8 71 fe ff ff       	call   c0010594 <VgaText::combineCharAndColour(char, unsigned char)>
c0010723:	5b                   	pop    ebx
c0010724:	5a                   	pop    edx
c0010725:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c001072c:	51                   	push   ecx
c001072d:	6a 25                	push   0x25
c001072f:	e8 60 fe ff ff       	call   c0010594 <VgaText::combineCharAndColour(char, unsigned char)>
c0010734:	59                   	pop    ecx
c0010735:	5b                   	pop    ebx
c0010736:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c001073d:	5b                   	pop    ebx
c001073e:	5e                   	pop    esi
c001073f:	c3                   	ret    

c0010740 <VgaText::updateDiskUsage()>:
c0010740:	55                   	push   ebp
c0010741:	bd 10 27 00 00       	mov    ebp,0x2710
c0010746:	57                   	push   edi
c0010747:	8b 3d 00 be 02 c0    	mov    edi,DWORD PTR ds:0xc002be00
c001074d:	56                   	push   esi
c001074e:	53                   	push   ebx
c001074f:	6a 0f                	push   0xf
c0010751:	6a 00                	push   0x0
c0010753:	e8 96 fd ff ff       	call   c00104ee <VgaText::combineColours(unsigned char, unsigned char)>
c0010758:	5a                   	pop    edx
c0010759:	0f b6 d8             	movzx  ebx,al
c001075c:	59                   	pop    ecx
c001075d:	8b 35 08 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f208
c0010763:	53                   	push   ebx
c0010764:	b9 0a 00 00 00       	mov    ecx,0xa
c0010769:	89 f0                	mov    eax,esi
c001076b:	99                   	cdq    
c001076c:	f7 fd                	idiv   ebp
c001076e:	99                   	cdq    
c001076f:	f7 f9                	idiv   ecx
c0010771:	8d 42 30             	lea    eax,[edx+0x30]
c0010774:	0f b6 c0             	movzx  eax,al
c0010777:	50                   	push   eax
c0010778:	e8 17 fe ff ff       	call   c0010594 <VgaText::combineCharAndColour(char, unsigned char)>
c001077d:	5d                   	pop    ebp
c001077e:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010783:	5a                   	pop    edx
c0010784:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010788:	53                   	push   ebx
c0010789:	89 f0                	mov    eax,esi
c001078b:	99                   	cdq    
c001078c:	f7 fd                	idiv   ebp
c001078e:	99                   	cdq    
c001078f:	f7 f9                	idiv   ecx
c0010791:	8d 42 30             	lea    eax,[edx+0x30]
c0010794:	0f b6 c0             	movzx  eax,al
c0010797:	50                   	push   eax
c0010798:	e8 f7 fd ff ff       	call   c0010594 <VgaText::combineCharAndColour(char, unsigned char)>
c001079d:	5d                   	pop    ebp
c001079e:	bd 64 00 00 00       	mov    ebp,0x64
c00107a3:	5a                   	pop    edx
c00107a4:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00107ab:	53                   	push   ebx
c00107ac:	89 f0                	mov    eax,esi
c00107ae:	99                   	cdq    
c00107af:	f7 fd                	idiv   ebp
c00107b1:	99                   	cdq    
c00107b2:	f7 f9                	idiv   ecx
c00107b4:	8d 42 30             	lea    eax,[edx+0x30]
c00107b7:	0f b6 c0             	movzx  eax,al
c00107ba:	50                   	push   eax
c00107bb:	e8 d4 fd ff ff       	call   c0010594 <VgaText::combineCharAndColour(char, unsigned char)>
c00107c0:	5d                   	pop    ebp
c00107c1:	5a                   	pop    edx
c00107c2:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00107c9:	53                   	push   ebx
c00107ca:	89 f0                	mov    eax,esi
c00107cc:	99                   	cdq    
c00107cd:	f7 f9                	idiv   ecx
c00107cf:	89 d6                	mov    esi,edx
c00107d1:	99                   	cdq    
c00107d2:	f7 f9                	idiv   ecx
c00107d4:	8d 42 30             	lea    eax,[edx+0x30]
c00107d7:	0f b6 c0             	movzx  eax,al
c00107da:	50                   	push   eax
c00107db:	e8 b4 fd ff ff       	call   c0010594 <VgaText::combineCharAndColour(char, unsigned char)>
c00107e0:	5d                   	pop    ebp
c00107e1:	5a                   	pop    edx
c00107e2:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00107e9:	53                   	push   ebx
c00107ea:	8d 46 30             	lea    eax,[esi+0x30]
c00107ed:	0f b6 f0             	movzx  esi,al
c00107f0:	56                   	push   esi
c00107f1:	e8 9e fd ff ff       	call   c0010594 <VgaText::combineCharAndColour(char, unsigned char)>
c00107f6:	5e                   	pop    esi
c00107f7:	8b 35 04 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f204
c00107fd:	5d                   	pop    ebp
c00107fe:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010805:	bd 10 27 00 00       	mov    ebp,0x2710
c001080a:	53                   	push   ebx
c001080b:	89 f0                	mov    eax,esi
c001080d:	99                   	cdq    
c001080e:	f7 fd                	idiv   ebp
c0010810:	99                   	cdq    
c0010811:	f7 f9                	idiv   ecx
c0010813:	8d 42 30             	lea    eax,[edx+0x30]
c0010816:	0f b6 c0             	movzx  eax,al
c0010819:	50                   	push   eax
c001081a:	e8 75 fd ff ff       	call   c0010594 <VgaText::combineCharAndColour(char, unsigned char)>
c001081f:	5a                   	pop    edx
c0010820:	5d                   	pop    ebp
c0010821:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010828:	bd e8 03 00 00       	mov    ebp,0x3e8
c001082d:	53                   	push   ebx
c001082e:	89 f0                	mov    eax,esi
c0010830:	99                   	cdq    
c0010831:	f7 fd                	idiv   ebp
c0010833:	99                   	cdq    
c0010834:	f7 f9                	idiv   ecx
c0010836:	8d 42 30             	lea    eax,[edx+0x30]
c0010839:	0f b6 c0             	movzx  eax,al
c001083c:	50                   	push   eax
c001083d:	e8 52 fd ff ff       	call   c0010594 <VgaText::combineCharAndColour(char, unsigned char)>
c0010842:	5a                   	pop    edx
c0010843:	5d                   	pop    ebp
c0010844:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c001084b:	bd 64 00 00 00       	mov    ebp,0x64
c0010850:	53                   	push   ebx
c0010851:	89 f0                	mov    eax,esi
c0010853:	99                   	cdq    
c0010854:	f7 fd                	idiv   ebp
c0010856:	99                   	cdq    
c0010857:	f7 f9                	idiv   ecx
c0010859:	83 c2 30             	add    edx,0x30
c001085c:	0f b6 d2             	movzx  edx,dl
c001085f:	52                   	push   edx
c0010860:	e8 2f fd ff ff       	call   c0010594 <VgaText::combineCharAndColour(char, unsigned char)>
c0010865:	5a                   	pop    edx
c0010866:	5d                   	pop    ebp
c0010867:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c001086e:	53                   	push   ebx
c001086f:	89 f0                	mov    eax,esi
c0010871:	99                   	cdq    
c0010872:	f7 f9                	idiv   ecx
c0010874:	89 d6                	mov    esi,edx
c0010876:	99                   	cdq    
c0010877:	f7 f9                	idiv   ecx
c0010879:	8d 42 30             	lea    eax,[edx+0x30]
c001087c:	0f b6 c0             	movzx  eax,al
c001087f:	50                   	push   eax
c0010880:	e8 0f fd ff ff       	call   c0010594 <VgaText::combineCharAndColour(char, unsigned char)>
c0010885:	5a                   	pop    edx
c0010886:	59                   	pop    ecx
c0010887:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c001088e:	53                   	push   ebx
c001088f:	8d 46 30             	lea    eax,[esi+0x30]
c0010892:	0f b6 f0             	movzx  esi,al
c0010895:	56                   	push   esi
c0010896:	e8 f9 fc ff ff       	call   c0010594 <VgaText::combineCharAndColour(char, unsigned char)>
c001089b:	5b                   	pop    ebx
c001089c:	5e                   	pop    esi
c001089d:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c00108a4:	5b                   	pop    ebx
c00108a5:	5e                   	pop    esi
c00108a6:	5f                   	pop    edi
c00108a7:	5d                   	pop    ebp
c00108a8:	c3                   	ret    
c00108a9:	90                   	nop

c00108aa <VgaText::updateTitle()>:
c00108aa:	53                   	push   ebx
c00108ab:	31 c0                	xor    eax,eax
c00108ad:	83 ec 58             	sub    esp,0x58
c00108b0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00108b4:	89 e1                	mov    ecx,esp
c00108b6:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00108ba:	40                   	inc    eax
c00108bb:	83 f8 50             	cmp    eax,0x50
c00108be:	75 f6                	jne    c00108b6 <VgaText::updateTitle()+0xc>
c00108c0:	31 c0                	xor    eax,eax
c00108c2:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c00108c9:	84 db                	test   bl,bl
c00108cb:	74 06                	je     c00108d3 <VgaText::updateTitle()+0x29>
c00108cd:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00108d0:	40                   	inc    eax
c00108d1:	eb ef                	jmp    c00108c2 <VgaText::updateTitle()+0x18>
c00108d3:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00108d9:	85 c0                	test   eax,eax
c00108db:	74 09                	je     c00108e6 <VgaText::updateTitle()+0x3c>
c00108dd:	53                   	push   ebx
c00108de:	53                   	push   ebx
c00108df:	51                   	push   ecx
c00108e0:	52                   	push   edx
c00108e1:	ff d0                	call   eax
c00108e3:	83 c4 10             	add    esp,0x10
c00108e6:	e8 55 fe ff ff       	call   c0010740 <VgaText::updateDiskUsage()>
c00108eb:	83 c4 58             	add    esp,0x58
c00108ee:	5b                   	pop    ebx
c00108ef:	c3                   	ret    

c00108f0 <VgaText::setTitleTextColour(VgaColour)>:
c00108f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108f8:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00108fe:	eb aa                	jmp    c00108aa <VgaText::updateTitle()>

c0010900 <VgaText::setTitleColour(VgaColour)>:
c0010900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010904:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010908:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c001090e:	eb 9a                	jmp    c00108aa <VgaText::updateTitle()>

c0010910 <VgaText::setTitle(char*)>:
c0010910:	53                   	push   ebx
c0010911:	83 ec 10             	sub    esp,0x10
c0010914:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001091c:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010922:	50                   	push   eax
c0010923:	e8 4d fe fe ff       	call   c0000775 <strcpy>
c0010928:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001092c:	83 c4 18             	add    esp,0x18
c001092f:	5b                   	pop    ebx
c0010930:	e9 75 ff ff ff       	jmp    c00108aa <VgaText::updateTitle()>
c0010935:	90                   	nop

c0010936 <VgaText::decrementCursor(bool)>:
c0010936:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001093a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001093e:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010944:	85 c0                	test   eax,eax
c0010946:	74 07                	je     c001094f <VgaText::decrementCursor(bool)+0x19>
c0010948:	48                   	dec    eax
c0010949:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c001094f:	84 c9                	test   cl,cl
c0010951:	74 09                	je     c001095c <VgaText::decrementCursor(bool)+0x26>
c0010953:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010957:	e9 56 fa ff ff       	jmp    c00103b2 <VgaText::updateCursor()>
c001095c:	c3                   	ret    
c001095d:	90                   	nop

c001095e <VgaText::putchar(char, VgaColour, VgaColour)>:
c001095e:	53                   	push   ebx
c001095f:	83 ec 08             	sub    esp,0x8
c0010962:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010966:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001096a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001096e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010972:	3c 07                	cmp    al,0x7
c0010974:	75 2a                	jne    c00109a0 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010976:	a1 4c d0 02 c0       	mov    eax,ds:0xc002d04c
c001097b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010983:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001098b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010993:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010997:	83 c4 08             	add    esp,0x8
c001099a:	5b                   	pop    ebx
c001099b:	e9 3a 2d 00 00       	jmp    c00136da <Buzzer::beep(int, int, bool)>
c00109a0:	3c 0d                	cmp    al,0xd
c00109a2:	75 0c                	jne    c00109b0 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c00109a4:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109ae:	eb 3b                	jmp    c00109eb <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c00109b0:	3c 0a                	cmp    al,0xa
c00109b2:	75 40                	jne    c00109f4 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c00109b4:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00109ba:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109c4:	8d 50 01             	lea    edx,[eax+0x1]
c00109c7:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00109cd:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00109d3:	75 12                	jne    c00109e7 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00109d5:	83 ec 0c             	sub    esp,0xc
c00109d8:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00109de:	53                   	push   ebx
c00109df:	e8 1c fb ff ff       	call   c0010500 <VgaText::scrollScreen()>
c00109e4:	83 c4 10             	add    esp,0x10
c00109e7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00109eb:	83 c4 08             	add    esp,0x8
c00109ee:	5b                   	pop    ebx
c00109ef:	e9 be f9 ff ff       	jmp    c00103b2 <VgaText::updateCursor()>
c00109f4:	3c 08                	cmp    al,0x8
c00109f6:	75 31                	jne    c0010a29 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00109f8:	50                   	push   eax
c00109f9:	50                   	push   eax
c00109fa:	6a 01                	push   0x1
c00109fc:	53                   	push   ebx
c00109fd:	e8 34 ff ff ff       	call   c0010936 <VgaText::decrementCursor(bool)>
c0010a02:	5a                   	pop    edx
c0010a03:	59                   	pop    ecx
c0010a04:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010a0a:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010a10:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010a16:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010a1c:	6a 20                	push   0x20
c0010a1e:	53                   	push   ebx
c0010a1f:	e8 82 fb ff ff       	call   c00105a6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a24:	83 c4 28             	add    esp,0x28
c0010a27:	5b                   	pop    ebx
c0010a28:	c3                   	ret    
c0010a29:	83 ec 08             	sub    esp,0x8
c0010a2c:	0f be c0             	movsx  eax,al
c0010a2f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010a35:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010a3b:	51                   	push   ecx
c0010a3c:	52                   	push   edx
c0010a3d:	50                   	push   eax
c0010a3e:	53                   	push   ebx
c0010a3f:	e8 62 fb ff ff       	call   c00105a6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a44:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010a48:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010a50:	83 c4 28             	add    esp,0x28
c0010a53:	5b                   	pop    ebx
c0010a54:	e9 1b fc ff ff       	jmp    c0010674 <VgaText::incrementCursor(bool)>
c0010a59:	90                   	nop

c0010a5a <VgaText::isShowingCursor()>:
c0010a5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a5e:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010a64:	c3                   	ret    
c0010a65:	90                   	nop

c0010a66 <VgaText::isBlinkDisabled()>:
c0010a66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a6a:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010a70:	83 f0 01             	xor    eax,0x1
c0010a73:	c3                   	ret    

c0010a74 <VgaText::setCursorHeight(int)>:
c0010a74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a7c:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010a82:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010a89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a8d:	e9 3a f9 ff ff       	jmp    c00103cc <VgaText::showCursor(bool)>

c0010a92 <VgaText::getCursorHeight()>:
c0010a92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a96:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010a9c:	c3                   	ret    

c0010a9d <setActiveTerminal(VgaText*)>:
c0010a9d:	53                   	push   ebx
c0010a9e:	83 ec 08             	sub    esp,0x8
c0010aa1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010aa5:	85 db                	test   ebx,ebx
c0010aa7:	75 11                	jne    c0010aba <setActiveTerminal(VgaText*)+0x1d>
c0010aa9:	c7 44 24 10 04 91 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029104
c0010ab1:	83 c4 08             	add    esp,0x8
c0010ab4:	5b                   	pop    ebx
c0010ab5:	e9 f1 90 00 00       	jmp    c0019bab <Krnl::panic(char const*)>
c0010aba:	50                   	push   eax
c0010abb:	50                   	push   eax
c0010abc:	53                   	push   ebx
c0010abd:	68 12 91 02 c0       	push   0xc0029112
c0010ac2:	e8 14 1e 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0010ac7:	a1 a4 cf 02 c0       	mov    eax,ds:0xc002cfa4
c0010acc:	83 c4 10             	add    esp,0x10
c0010acf:	85 c0                	test   eax,eax
c0010ad1:	74 0c                	je     c0010adf <setActiveTerminal(VgaText*)+0x42>
c0010ad3:	83 ec 0c             	sub    esp,0xc
c0010ad6:	50                   	push   eax
c0010ad7:	e8 d6 f8 ff ff       	call   c00103b2 <VgaText::updateCursor()>
c0010adc:	83 c4 10             	add    esp,0x10
c0010adf:	89 1d a4 cf 02 c0    	mov    DWORD PTR ds:0xc002cfa4,ebx
c0010ae5:	51                   	push   ecx
c0010ae6:	51                   	push   ecx
c0010ae7:	53                   	push   ebx
c0010ae8:	68 2a 91 02 c0       	push   0xc002912a
c0010aed:	e8 e9 1d 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0010af2:	83 c4 0c             	add    esp,0xc
c0010af5:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010afb:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010b01:	53                   	push   ebx
c0010b02:	e8 17 fb ff ff       	call   c001061e <VgaText::setCursor(int, int)>
c0010b07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b0a:	e8 57 ff ff ff       	call   c0010a66 <VgaText::isBlinkDisabled()>
c0010b0f:	5a                   	pop    edx
c0010b10:	0f b6 c0             	movzx  eax,al
c0010b13:	59                   	pop    ecx
c0010b14:	50                   	push   eax
c0010b15:	53                   	push   ebx
c0010b16:	e8 c1 f8 ff ff       	call   c00103dc <VgaText::disableBlink(bool)>
c0010b1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b1e:	e8 6f ff ff ff       	call   c0010a92 <VgaText::getCursorHeight()>
c0010b23:	5a                   	pop    edx
c0010b24:	59                   	pop    ecx
c0010b25:	50                   	push   eax
c0010b26:	53                   	push   ebx
c0010b27:	e8 48 ff ff ff       	call   c0010a74 <VgaText::setCursorHeight(int)>
c0010b2c:	83 c4 10             	add    esp,0x10
c0010b2f:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010b36:	75 0a                	jne    c0010b42 <setActiveTerminal(VgaText*)+0xa5>
c0010b38:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010b42:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010b46:	83 c4 08             	add    esp,0x8
c0010b49:	5b                   	pop    ebx
c0010b4a:	e9 0f f8 ff ff       	jmp    c001035e <VgaText::load()>

c0010b4f <doTerminalCycle()>:
c0010b4f:	83 ec 18             	sub    esp,0x18
c0010b52:	a1 a0 cf 02 c0       	mov    eax,ds:0xc002cfa0
c0010b57:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010b5d:	50                   	push   eax
c0010b5e:	a3 a0 cf 02 c0       	mov    ds:0xc002cfa0,eax
c0010b63:	e8 35 ff ff ff       	call   c0010a9d <setActiveTerminal(VgaText*)>
c0010b68:	83 c4 1c             	add    esp,0x1c
c0010b6b:	c3                   	ret    

c0010b6c <VgaText::doUpdate()>:
c0010b6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b70:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010b76:	85 c0                	test   eax,eax
c0010b78:	74 02                	je     c0010b7c <VgaText::doUpdate()+0x10>
c0010b7a:	ff e0                	jmp    eax
c0010b7c:	c3                   	ret    
c0010b7d:	90                   	nop

c0010b7e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010b7e:	55                   	push   ebp
c0010b7f:	57                   	push   edi
c0010b80:	56                   	push   esi
c0010b81:	53                   	push   ebx
c0010b82:	83 ec 1c             	sub    esp,0x1c
c0010b85:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010b89:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010b8e:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010b95:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010b98:	50                   	push   eax
c0010b99:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010b9e:	50                   	push   eax
c0010b9f:	e8 4a f9 ff ff       	call   c00104ee <VgaText::combineColours(unsigned char, unsigned char)>
c0010ba4:	59                   	pop    ecx
c0010ba5:	0f b6 c0             	movzx  eax,al
c0010ba8:	5b                   	pop    ebx
c0010ba9:	31 c9                	xor    ecx,ecx
c0010bab:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010bb3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010bb7:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010bbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010bc1:	0f b7 db             	movzx  ebx,bx
c0010bc4:	01 db                	add    ebx,ebx
c0010bc6:	01 fb                	add    ebx,edi
c0010bc8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010bcb:	84 c0                	test   al,al
c0010bcd:	0f 84 38 01 00 00    	je     c0010d0b <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010bd3:	3c 0d                	cmp    al,0xd
c0010bd5:	75 0f                	jne    c0010be6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010bd7:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010be1:	e9 1f 01 00 00       	jmp    c0010d05 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010be6:	3c 0a                	cmp    al,0xa
c0010be8:	75 5b                	jne    c0010c45 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010bea:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010bf0:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010bfa:	8d 48 01             	lea    ecx,[eax+0x1]
c0010bfd:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010c03:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010c09:	75 12                	jne    c0010c1d <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010c0b:	83 ec 0c             	sub    esp,0xc
c0010c0e:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010c14:	55                   	push   ebp
c0010c15:	e8 e6 f8 ff ff       	call   c0010500 <VgaText::scrollScreen()>
c0010c1a:	83 c4 10             	add    esp,0x10
c0010c1d:	83 ec 0c             	sub    esp,0xc
c0010c20:	55                   	push   ebp
c0010c21:	e8 8c f7 ff ff       	call   c00103b2 <VgaText::updateCursor()>
c0010c26:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c2e:	83 c4 10             	add    esp,0x10
c0010c31:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010c37:	31 c9                	xor    ecx,ecx
c0010c39:	0f b7 db             	movzx  ebx,bx
c0010c3c:	01 db                	add    ebx,ebx
c0010c3e:	01 fb                	add    ebx,edi
c0010c40:	e9 c0 00 00 00       	jmp    c0010d05 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010c45:	3c 08                	cmp    al,0x8
c0010c47:	75 4e                	jne    c0010c97 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010c49:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010c4d:	53                   	push   ebx
c0010c4e:	53                   	push   ebx
c0010c4f:	6a 01                	push   0x1
c0010c51:	55                   	push   ebp
c0010c52:	e8 df fc ff ff       	call   c0010936 <VgaText::decrementCursor(bool)>
c0010c57:	58                   	pop    eax
c0010c58:	5a                   	pop    edx
c0010c59:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010c5f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010c65:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010c6b:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010c71:	6a 20                	push   0x20
c0010c73:	55                   	push   ebp
c0010c74:	e8 2d f9 ff ff       	call   c00105a6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c79:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c81:	83 c4 20             	add    esp,0x20
c0010c84:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010c8a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010c8e:	0f b7 db             	movzx  ebx,bx
c0010c91:	01 db                	add    ebx,ebx
c0010c93:	01 fb                	add    ebx,edi
c0010c95:	eb 6e                	jmp    c0010d05 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010c97:	51                   	push   ecx
c0010c98:	51                   	push   ecx
c0010c99:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010c9d:	50                   	push   eax
c0010c9e:	e8 f1 f8 ff ff       	call   c0010594 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ca3:	83 c4 10             	add    esp,0x10
c0010ca6:	66 89 03             	mov    WORD PTR [ebx],ax
c0010ca9:	39 2d a4 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfa4,ebp
c0010caf:	75 2a                	jne    c0010cdb <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010cb1:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010cb7:	85 c0                	test   eax,eax
c0010cb9:	74 20                	je     c0010cdb <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010cbb:	52                   	push   edx
c0010cbc:	52                   	push   edx
c0010cbd:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010cc3:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010cc9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ccd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010cd1:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010cd4:	51                   	push   ecx
c0010cd5:	55                   	push   ebp
c0010cd6:	ff d0                	call   eax
c0010cd8:	83 c4 20             	add    esp,0x20
c0010cdb:	83 c3 02             	add    ebx,0x2
c0010cde:	50                   	push   eax
c0010cdf:	50                   	push   eax
c0010ce0:	6a 00                	push   0x0
c0010ce2:	55                   	push   ebp
c0010ce3:	e8 8c f9 ff ff       	call   c0010674 <VgaText::incrementCursor(bool)>
c0010ce8:	83 c4 10             	add    esp,0x10
c0010ceb:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010cf2:	75 0f                	jne    c0010d03 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010cf4:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010cfc:	0f b7 db             	movzx  ebx,bx
c0010cff:	01 db                	add    ebx,ebx
c0010d01:	01 fb                	add    ebx,edi
c0010d03:	b1 01                	mov    cl,0x1
c0010d05:	46                   	inc    esi
c0010d06:	e9 bd fe ff ff       	jmp    c0010bc8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010d0b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010d0f:	83 ec 0c             	sub    esp,0xc
c0010d12:	55                   	push   ebp
c0010d13:	e8 9a f6 ff ff       	call   c00103b2 <VgaText::updateCursor()>
c0010d18:	83 c4 10             	add    esp,0x10
c0010d1b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010d1f:	84 c9                	test   cl,cl
c0010d21:	74 0c                	je     c0010d2f <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010d23:	83 ec 0c             	sub    esp,0xc
c0010d26:	55                   	push   ebp
c0010d27:	e8 40 fe ff ff       	call   c0010b6c <VgaText::doUpdate()>
c0010d2c:	83 c4 10             	add    esp,0x10
c0010d2f:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010d36:	83 c4 1c             	add    esp,0x1c
c0010d39:	5b                   	pop    ebx
c0010d3a:	5e                   	pop    esi
c0010d3b:	5f                   	pop    edi
c0010d3c:	5d                   	pop    ebp
c0010d3d:	c3                   	ret    

c0010d3e <VgaText::clearScreen()>:
c0010d3e:	57                   	push   edi
c0010d3f:	56                   	push   esi
c0010d40:	31 f6                	xor    esi,esi
c0010d42:	53                   	push   ebx
c0010d43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d47:	52                   	push   edx
c0010d48:	6a 00                	push   0x0
c0010d4a:	6a 00                	push   0x0
c0010d4c:	53                   	push   ebx
c0010d4d:	e8 cc f8 ff ff       	call   c001061e <VgaText::setCursor(int, int)>
c0010d52:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010d59:	83 c4 10             	add    esp,0x10
c0010d5c:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010d62:	7e 26                	jle    c0010d8a <VgaText::clearScreen()+0x4c>
c0010d64:	31 ff                	xor    edi,edi
c0010d66:	50                   	push   eax
c0010d67:	50                   	push   eax
c0010d68:	56                   	push   esi
c0010d69:	57                   	push   edi
c0010d6a:	47                   	inc    edi
c0010d6b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d71:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d77:	6a 20                	push   0x20
c0010d79:	53                   	push   ebx
c0010d7a:	e8 27 f8 ff ff       	call   c00105a6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d7f:	83 c4 20             	add    esp,0x20
c0010d82:	83 ff 50             	cmp    edi,0x50
c0010d85:	75 df                	jne    c0010d66 <VgaText::clearScreen()+0x28>
c0010d87:	46                   	inc    esi
c0010d88:	eb d2                	jmp    c0010d5c <VgaText::clearScreen()+0x1e>
c0010d8a:	83 ec 0c             	sub    esp,0xc
c0010d8d:	53                   	push   ebx
c0010d8e:	e8 d9 fd ff ff       	call   c0010b6c <VgaText::doUpdate()>
c0010d93:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010d9a:	83 c4 10             	add    esp,0x10
c0010d9d:	5b                   	pop    ebx
c0010d9e:	5e                   	pop    esi
c0010d9f:	5f                   	pop    edi
c0010da0:	c3                   	ret    
c0010da1:	90                   	nop

c0010da2 <VgaText::putchar(char)>:
c0010da2:	56                   	push   esi
c0010da3:	53                   	push   ebx
c0010da4:	83 ec 14             	sub    esp,0x14
c0010da7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010dab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010daf:	3c 5b                	cmp    al,0x5b
c0010db1:	75 21                	jne    c0010dd4 <VgaText::putchar(char)+0x32>
c0010db3:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010dba:	74 28                	je     c0010de4 <VgaText::putchar(char)+0x42>
c0010dbc:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010dc5:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010dcf:	e9 e2 00 00 00       	jmp    c0010eb6 <VgaText::putchar(char)+0x114>
c0010dd4:	3c 1b                	cmp    al,0x1b
c0010dd6:	75 0c                	jne    c0010de4 <VgaText::putchar(char)+0x42>
c0010dd8:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010ddf:	e9 d2 00 00 00       	jmp    c0010eb6 <VgaText::putchar(char)+0x114>
c0010de4:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010dea:	84 c9                	test   cl,cl
c0010dec:	0f 84 ab 00 00 00    	je     c0010e9d <VgaText::putchar(char)+0xfb>
c0010df2:	8d 50 c0             	lea    edx,[eax-0x40]
c0010df5:	80 fa 3e             	cmp    dl,0x3e
c0010df8:	0f 87 82 00 00 00    	ja     c0010e80 <VgaText::putchar(char)+0xde>
c0010dfe:	3c 6d                	cmp    al,0x6d
c0010e00:	75 4d                	jne    c0010e4f <VgaText::putchar(char)+0xad>
c0010e02:	31 f6                	xor    esi,esi
c0010e04:	31 d2                	xor    edx,edx
c0010e06:	31 c0                	xor    eax,eax
c0010e08:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010e0e:	7e 30                	jle    c0010e40 <VgaText::putchar(char)+0x9e>
c0010e10:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010e18:	80 fa 3b             	cmp    dl,0x3b
c0010e1b:	75 17                	jne    c0010e34 <VgaText::putchar(char)+0x92>
c0010e1d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e21:	50                   	push   eax
c0010e22:	53                   	push   ebx
c0010e23:	e8 ee f5 ff ff       	call   c0010416 <VgaText::doANSI_SGR(int)>
c0010e28:	59                   	pop    ecx
c0010e29:	31 d2                	xor    edx,edx
c0010e2b:	58                   	pop    eax
c0010e2c:	31 c0                	xor    eax,eax
c0010e2e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010e32:	eb 09                	jmp    c0010e3d <VgaText::putchar(char)+0x9b>
c0010e34:	6b c0 0a             	imul   eax,eax,0xa
c0010e37:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010e3b:	88 ca                	mov    dl,cl
c0010e3d:	46                   	inc    esi
c0010e3e:	eb c8                	jmp    c0010e08 <VgaText::putchar(char)+0x66>
c0010e40:	84 d2                	test   dl,dl
c0010e42:	74 31                	je     c0010e75 <VgaText::putchar(char)+0xd3>
c0010e44:	50                   	push   eax
c0010e45:	53                   	push   ebx
c0010e46:	e8 cb f5 ff ff       	call   c0010416 <VgaText::doANSI_SGR(int)>
c0010e4b:	58                   	pop    eax
c0010e4c:	5a                   	pop    edx
c0010e4d:	eb 26                	jmp    c0010e75 <VgaText::putchar(char)+0xd3>
c0010e4f:	3c 4a                	cmp    al,0x4a
c0010e51:	75 22                	jne    c0010e75 <VgaText::putchar(char)+0xd3>
c0010e53:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010e5a:	75 19                	jne    c0010e75 <VgaText::putchar(char)+0xd3>
c0010e5c:	83 ec 0c             	sub    esp,0xc
c0010e5f:	53                   	push   ebx
c0010e60:	e8 d9 fe ff ff       	call   c0010d3e <VgaText::clearScreen()>
c0010e65:	83 c4 0c             	add    esp,0xc
c0010e68:	6a 00                	push   0x0
c0010e6a:	6a 00                	push   0x0
c0010e6c:	53                   	push   ebx
c0010e6d:	e8 ac f7 ff ff       	call   c001061e <VgaText::setCursor(int, int)>
c0010e72:	83 c4 10             	add    esp,0x10
c0010e75:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010e7e:	eb 36                	jmp    c0010eb6 <VgaText::putchar(char)+0x114>
c0010e80:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010e86:	83 fa 0e             	cmp    edx,0xe
c0010e89:	7f 2b                	jg     c0010eb6 <VgaText::putchar(char)+0x114>
c0010e8b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010e8e:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010e94:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010e9b:	eb 19                	jmp    c0010eb6 <VgaText::putchar(char)+0x114>
c0010e9d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010ea3:	0f be c0             	movsx  eax,al
c0010ea6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010eac:	50                   	push   eax
c0010ead:	53                   	push   ebx
c0010eae:	e8 ab fa ff ff       	call   c001095e <VgaText::putchar(char, VgaColour, VgaColour)>
c0010eb3:	83 c4 10             	add    esp,0x10
c0010eb6:	83 c4 14             	add    esp,0x14
c0010eb9:	5b                   	pop    ebx
c0010eba:	5e                   	pop    esi
c0010ebb:	c3                   	ret    

c0010ebc <VgaText::puts(char const*)>:
c0010ebc:	53                   	push   ebx
c0010ebd:	83 ec 08             	sub    esp,0x8
c0010ec0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ec4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010ec7:	84 c0                	test   al,al
c0010ec9:	74 12                	je     c0010edd <VgaText::puts(char const*)+0x21>
c0010ecb:	43                   	inc    ebx
c0010ecc:	51                   	push   ecx
c0010ecd:	51                   	push   ecx
c0010ece:	50                   	push   eax
c0010ecf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ed3:	e8 ca fe ff ff       	call   c0010da2 <VgaText::putchar(char)>
c0010ed8:	83 c4 10             	add    esp,0x10
c0010edb:	eb e7                	jmp    c0010ec4 <VgaText::puts(char const*)+0x8>
c0010edd:	83 c4 08             	add    esp,0x8
c0010ee0:	5b                   	pop    ebx
c0010ee1:	c3                   	ret    

c0010ee2 <VgaText::putx(unsigned int)>:
c0010ee2:	57                   	push   edi
c0010ee3:	b9 11 00 00 00       	mov    ecx,0x11
c0010ee8:	56                   	push   esi
c0010ee9:	be 46 91 02 c0       	mov    esi,0xc0029146
c0010eee:	53                   	push   ebx
c0010eef:	83 ec 20             	sub    esp,0x20
c0010ef2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010ef6:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010efa:	fc                   	cld    
c0010efb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010efd:	be 08 00 00 00       	mov    esi,0x8
c0010f02:	50                   	push   eax
c0010f03:	50                   	push   eax
c0010f04:	89 d8                	mov    eax,ebx
c0010f06:	c1 e3 04             	shl    ebx,0x4
c0010f09:	c1 e8 1c             	shr    eax,0x1c
c0010f0c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010f11:	50                   	push   eax
c0010f12:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f16:	e8 87 fe ff ff       	call   c0010da2 <VgaText::putchar(char)>
c0010f1b:	83 c4 10             	add    esp,0x10
c0010f1e:	4e                   	dec    esi
c0010f1f:	75 e1                	jne    c0010f02 <VgaText::putx(unsigned int)+0x20>
c0010f21:	83 c4 20             	add    esp,0x20
c0010f24:	5b                   	pop    ebx
c0010f25:	5e                   	pop    esi
c0010f26:	5f                   	pop    edi
c0010f27:	c3                   	ret    

c0010f28 <VgaText::VgaText(char const*)>:
c0010f28:	57                   	push   edi
c0010f29:	56                   	push   esi
c0010f2a:	53                   	push   ebx
c0010f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f2f:	83 ec 08             	sub    esp,0x8
c0010f32:	6a 00                	push   0x0
c0010f34:	50                   	push   eax
c0010f35:	e8 6e 05 00 00       	call   c00114a8 <UnixFile::UnixFile(int)>
c0010f3a:	83 c4 10             	add    esp,0x10
c0010f3d:	ba ac 91 02 c0       	mov    edx,0xc00291ac
c0010f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f46:	89 10                	mov    DWORD PTR [eax],edx
c0010f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f4c:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f5a:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f68:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010f6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f73:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f7e:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f8c:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f9a:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010fa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa5:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb0:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010fb6:	bb 80 cf 02 c0       	mov    ebx,0xc002cf80
c0010fbb:	b8 08 00 00 00       	mov    eax,0x8
c0010fc0:	fc                   	cld    
c0010fc1:	89 d7                	mov    edi,edx
c0010fc3:	89 de                	mov    esi,ebx
c0010fc5:	89 c1                	mov    ecx,eax
c0010fc7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010fc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fcd:	05 1e 10 00 00       	add    eax,0x101e
c0010fd2:	83 ec 08             	sub    esp,0x8
c0010fd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fd9:	50                   	push   eax
c0010fda:	e8 96 f7 fe ff       	call   c0000775 <strcpy>
c0010fdf:	83 c4 10             	add    esp,0x10
c0010fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe6:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ff4:	83 c0 0c             	add    eax,0xc
c0010ff7:	83 ec 04             	sub    esp,0x4
c0010ffa:	68 00 0f 00 00       	push   0xf00
c0010fff:	6a 00                	push   0x0
c0011001:	50                   	push   eax
c0011002:	e8 cf f6 fe ff       	call   c00006d6 <memset>
c0011007:	83 c4 10             	add    esp,0x10
c001100a:	83 ec 04             	sub    esp,0x4
c001100d:	6a 00                	push   0x0
c001100f:	6a 07                	push   0x7
c0011011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011015:	e8 b4 f4 ff ff       	call   c00104ce <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001101a:	83 c4 10             	add    esp,0x10
c001101d:	83 ec 08             	sub    esp,0x8
c0011020:	6a 02                	push   0x2
c0011022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011026:	e8 49 fa ff ff       	call   c0010a74 <VgaText::setCursorHeight(int)>
c001102b:	83 c4 10             	add    esp,0x10
c001102e:	83 ec 04             	sub    esp,0x4
c0011031:	6a 00                	push   0x0
c0011033:	6a 00                	push   0x0
c0011035:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011039:	e8 e0 f5 ff ff       	call   c001061e <VgaText::setCursor(int, int)>
c001103e:	83 c4 10             	add    esp,0x10
c0011041:	83 ec 08             	sub    esp,0x8
c0011044:	6a 01                	push   0x1
c0011046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001104a:	e8 7d f3 ff ff       	call   c00103cc <VgaText::showCursor(bool)>
c001104f:	83 c4 10             	add    esp,0x10
c0011052:	83 ec 08             	sub    esp,0x8
c0011055:	6a 01                	push   0x1
c0011057:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001105b:	e8 7c f3 ff ff       	call   c00103dc <VgaText::disableBlink(bool)>
c0011060:	83 c4 10             	add    esp,0x10
c0011063:	83 ec 0c             	sub    esp,0xc
c0011066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001106a:	e8 cf fc ff ff       	call   c0010d3e <VgaText::clearScreen()>
c001106f:	83 c4 10             	add    esp,0x10
c0011072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011076:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c001107d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011081:	05 9e 10 00 00       	add    eax,0x109e
c0011086:	83 ec 04             	sub    esp,0x4
c0011089:	68 96 00 00 00       	push   0x96
c001108e:	6a 00                	push   0x0
c0011090:	50                   	push   eax
c0011091:	e8 40 f6 fe ff       	call   c00006d6 <memset>
c0011096:	83 c4 10             	add    esp,0x10
c0011099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001109d:	05 34 11 00 00       	add    eax,0x1134
c00110a2:	83 ec 04             	sub    esp,0x4
c00110a5:	68 2c 01 00 00       	push   0x12c
c00110aa:	6a 00                	push   0x0
c00110ac:	50                   	push   eax
c00110ad:	e8 24 f6 fe ff       	call   c00006d6 <memset>
c00110b2:	83 c4 10             	add    esp,0x10
c00110b5:	90                   	nop
c00110b6:	5b                   	pop    ebx
c00110b7:	5e                   	pop    esi
c00110b8:	5f                   	pop    edi
c00110b9:	c3                   	ret    

c00110ba <VgaText::receiveKey(unsigned char)>:
c00110ba:	55                   	push   ebp
c00110bb:	57                   	push   edi
c00110bc:	56                   	push   esi
c00110bd:	53                   	push   ebx
c00110be:	83 ec 1c             	sub    esp,0x1c
c00110c1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00110c5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00110c9:	84 db                	test   bl,bl
c00110cb:	0f 84 c9 00 00 00    	je     c001119a <VgaText::receiveKey(unsigned char)+0xe0>
c00110d1:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c00110d7:	80 fb 08             	cmp    bl,0x8
c00110da:	75 2c                	jne    c0011108 <VgaText::receiveKey(unsigned char)+0x4e>
c00110dc:	83 ec 0c             	sub    esp,0xc
c00110df:	57                   	push   edi
c00110e0:	e8 0e f6 fe ff       	call   c00006f3 <strlen>
c00110e5:	83 c4 10             	add    esp,0x10
c00110e8:	85 c0                	test   eax,eax
c00110ea:	74 41                	je     c001112d <VgaText::receiveKey(unsigned char)+0x73>
c00110ec:	50                   	push   eax
c00110ed:	50                   	push   eax
c00110ee:	6a 08                	push   0x8
c00110f0:	56                   	push   esi
c00110f1:	e8 ac fc ff ff       	call   c0010da2 <VgaText::putchar(char)>
c00110f6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00110f9:	e8 f5 f5 fe ff       	call   c00006f3 <strlen>
c00110fe:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011106:	eb 22                	jmp    c001112a <VgaText::receiveKey(unsigned char)+0x70>
c0011108:	0f be c3             	movsx  eax,bl
c001110b:	52                   	push   edx
c001110c:	52                   	push   edx
c001110d:	50                   	push   eax
c001110e:	56                   	push   esi
c001110f:	e8 8e fc ff ff       	call   c0010da2 <VgaText::putchar(char)>
c0011114:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011118:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001111d:	59                   	pop    ecx
c001111e:	5d                   	pop    ebp
c001111f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011123:	50                   	push   eax
c0011124:	57                   	push   edi
c0011125:	e8 02 f7 fe ff       	call   c000082c <strcat>
c001112a:	83 c4 10             	add    esp,0x10
c001112d:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011134:	75 05                	jne    c001113b <VgaText::receiveKey(unsigned char)+0x81>
c0011136:	80 fb 0a             	cmp    bl,0xa
c0011139:	75 53                	jne    c001118e <VgaText::receiveKey(unsigned char)+0xd4>
c001113b:	83 ec 0c             	sub    esp,0xc
c001113e:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0011144:	53                   	push   ebx
c0011145:	e8 a9 f5 fe ff       	call   c00006f3 <strlen>
c001114a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001114d:	89 c5                	mov    ebp,eax
c001114f:	e8 9f f5 fe ff       	call   c00006f3 <strlen>
c0011154:	83 c4 10             	add    esp,0x10
c0011157:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c001115b:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011160:	76 10                	jbe    c0011172 <VgaText::receiveKey(unsigned char)+0xb8>
c0011162:	83 ec 0c             	sub    esp,0xc
c0011165:	68 57 91 02 c0       	push   0xc0029157
c001116a:	e8 3c 8a 00 00       	call   c0019bab <Krnl::panic(char const*)>
c001116f:	83 c4 10             	add    esp,0x10
c0011172:	50                   	push   eax
c0011173:	50                   	push   eax
c0011174:	57                   	push   edi
c0011175:	53                   	push   ebx
c0011176:	e8 b1 f6 fe ff       	call   c000082c <strcat>
c001117b:	83 c4 0c             	add    esp,0xc
c001117e:	68 96 00 00 00       	push   0x96
c0011183:	6a 00                	push   0x0
c0011185:	57                   	push   edi
c0011186:	e8 4b f5 fe ff       	call   c00006d6 <memset>
c001118b:	83 c4 10             	add    esp,0x10
c001118e:	83 ec 0c             	sub    esp,0xc
c0011191:	56                   	push   esi
c0011192:	e8 d5 f9 ff ff       	call   c0010b6c <VgaText::doUpdate()>
c0011197:	83 c4 10             	add    esp,0x10
c001119a:	83 c4 1c             	add    esp,0x1c
c001119d:	5b                   	pop    ebx
c001119e:	5e                   	pop    esi
c001119f:	5f                   	pop    edi
c00111a0:	5d                   	pop    ebp
c00111a1:	c3                   	ret    

c00111a2 <VgaText::write(unsigned long long, void*, int*)>:
c00111a2:	55                   	push   ebp
c00111a3:	57                   	push   edi
c00111a4:	56                   	push   esi
c00111a5:	53                   	push   ebx
c00111a6:	83 ec 0c             	sub    esp,0xc
c00111a9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00111ad:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00111b1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00111b5:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00111bc:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00111bf:	39 eb                	cmp    ebx,ebp
c00111c1:	74 13                	je     c00111d6 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00111c3:	43                   	inc    ebx
c00111c4:	50                   	push   eax
c00111c5:	50                   	push   eax
c00111c6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00111ca:	50                   	push   eax
c00111cb:	56                   	push   esi
c00111cc:	e8 d1 fb ff ff       	call   c0010da2 <VgaText::putchar(char)>
c00111d1:	83 c4 10             	add    esp,0x10
c00111d4:	eb e9                	jmp    c00111bf <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00111d6:	83 ec 0c             	sub    esp,0xc
c00111d9:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c00111e0:	56                   	push   esi
c00111e1:	e8 86 f9 ff ff       	call   c0010b6c <VgaText::doUpdate()>
c00111e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00111ea:	89 38                	mov    DWORD PTR [eax],edi
c00111ec:	83 c4 1c             	add    esp,0x1c
c00111ef:	31 c0                	xor    eax,eax
c00111f1:	5b                   	pop    ebx
c00111f2:	5e                   	pop    esi
c00111f3:	5f                   	pop    edi
c00111f4:	5d                   	pop    ebp
c00111f5:	c3                   	ret    

c00111f6 <newTerminal(char*)>:
c00111f6:	83 ec 28             	sub    esp,0x28
c00111f9:	68 60 12 00 00       	push   0x1260
c00111fe:	e8 33 e4 ff ff       	call   c000f636 <malloc>
c0011203:	5a                   	pop    edx
c0011204:	59                   	pop    ecx
c0011205:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011209:	50                   	push   eax
c001120a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001120e:	e8 15 fd ff ff       	call   c0010f28 <VgaText::VgaText(char const*)>
c0011213:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011217:	83 c4 2c             	add    esp,0x2c
c001121a:	c3                   	ret    
c001121b:	90                   	nop

c001121c <TSS::TSS()>:
c001121c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011220:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011227:	90                   	nop
c0011228:	c3                   	ret    
c0011229:	90                   	nop

c001122a <TSS::setESP(unsigned long)>:
c001122a:	55                   	push   ebp
c001122b:	89 e5                	mov    ebp,esp
c001122d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011230:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011233:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011236:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011239:	90                   	nop
c001123a:	5d                   	pop    ebp
c001123b:	c3                   	ret    

c001123c <TSS::flush()>:
c001123c:	55                   	push   ebp
c001123d:	89 e5                	mov    ebp,esp
c001123f:	83 ec 10             	sub    esp,0x10
c0011242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011245:	8b 00                	mov    eax,DWORD PTR [eax]
c0011247:	83 c8 03             	or     eax,0x3
c001124a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001124e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011252:	66 89 d0             	mov    ax,dx
c0011255:	0f 00 d8             	ltr    ax
c0011258:	90                   	nop
c0011259:	c9                   	leave  
c001125a:	c3                   	ret    
c001125b:	90                   	nop

c001125c <TSS::setup(unsigned long, unsigned long)>:
c001125c:	55                   	push   ebp
c001125d:	89 e5                	mov    ebp,esp
c001125f:	83 ec 18             	sub    esp,0x18
c0011262:	83 ec 0c             	sub    esp,0xc
c0011265:	6a 68                	push   0x68
c0011267:	e8 ca e3 ff ff       	call   c000f636 <malloc>
c001126c:	83 c4 10             	add    esp,0x10
c001126f:	89 c2                	mov    edx,eax
c0011271:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011274:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001127a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001127d:	83 ec 04             	sub    esp,0x4
c0011280:	6a 68                	push   0x68
c0011282:	6a 00                	push   0x0
c0011284:	50                   	push   eax
c0011285:	e8 4c f4 fe ff       	call   c00006d6 <memset>
c001128a:	83 c4 10             	add    esp,0x10
c001128d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011290:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011293:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011299:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001129c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001129f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00112a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112ab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00112ae:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00112b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112b7:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00112bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112c3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00112c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112cf:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00112d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112db:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00112e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112e7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00112ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112f3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00112f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011302:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011308:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001130b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001130e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011314:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011317:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001131e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011321:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011324:	0f 20 da             	mov    edx,cr3
c0011327:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001132a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001132d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011333:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011336:	83 ec 08             	sub    esp,0x8
c0011339:	50                   	push   eax
c001133a:	8d 45 ec             	lea    eax,[ebp-0x14]
c001133d:	50                   	push   eax
c001133e:	e8 d1 da ff ff       	call   c000ee14 <GDTEntry::setBase(unsigned int)>
c0011343:	83 c4 10             	add    esp,0x10
c0011346:	83 ec 08             	sub    esp,0x8
c0011349:	6a 68                	push   0x68
c001134b:	8d 45 ec             	lea    eax,[ebp-0x14]
c001134e:	50                   	push   eax
c001134f:	e8 dc da ff ff       	call   c000ee30 <GDTEntry::setLimit(unsigned int)>
c0011354:	83 c4 10             	add    esp,0x10
c0011357:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001135b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001135e:	83 e0 0f             	and    eax,0xf
c0011361:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011364:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011367:	83 c8 40             	or     eax,0x40
c001136a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001136d:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0011372:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011378:	05 78 01 00 00       	add    eax,0x178
c001137d:	83 ec 04             	sub    esp,0x4
c0011380:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011383:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011386:	50                   	push   eax
c0011387:	e8 d8 da ff ff       	call   c000ee64 <GDT::addEntry(GDTEntry)>
c001138c:	83 c4 10             	add    esp,0x10
c001138f:	89 c2                	mov    edx,eax
c0011391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011394:	89 10                	mov    DWORD PTR [eax],edx
c0011396:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c001139b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00113a1:	05 78 01 00 00       	add    eax,0x178
c00113a6:	83 ec 0c             	sub    esp,0xc
c00113a9:	50                   	push   eax
c00113aa:	e8 f9 da ff ff       	call   c000eea8 <GDT::flush()>
c00113af:	83 c4 10             	add    esp,0x10
c00113b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00113b7:	83 ec 08             	sub    esp,0x8
c00113ba:	50                   	push   eax
c00113bb:	68 c0 91 02 c0       	push   0xc00291c0
c00113c0:	e8 16 15 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00113c5:	83 c4 10             	add    esp,0x10
c00113c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00113cd:	c9                   	leave  
c00113ce:	c3                   	ret    
c00113cf:	90                   	nop

c00113d0 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00113d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00113d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113db:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00113e0:	75 08                	jne    c00113ea <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00113e2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00113e8:	eb 38                	jmp    c0011422 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00113ea:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00113ef:	75 17                	jne    c0011408 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00113f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113f6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00113f9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00113ff:	8b 10                	mov    edx,DWORD PTR [eax]
c0011401:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011405:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011408:	89 c1                	mov    ecx,eax
c001140a:	83 e1 fd             	and    ecx,0xfffffffd
c001140d:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011413:	74 cd                	je     c00113e2 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011415:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001141a:	83 e0 ef             	and    eax,0xffffffef
c001141d:	83 f8 08             	cmp    eax,0x8
c0011420:	76 c0                	jbe    c00113e2 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011422:	31 c0                	xor    eax,eax
c0011424:	c3                   	ret    
c0011425:	90                   	nop

c0011426 <ReservedFilename::isAtty()>:
c0011426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001142a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001142d:	31 c0                	xor    eax,eax
c001142f:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011435:	74 09                	je     c0011440 <ReservedFilename::isAtty()+0x1a>
c0011437:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001143d:	0f 94 c0             	sete   al
c0011440:	c3                   	ret    
c0011441:	90                   	nop

c0011442 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011442:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011446:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001144a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001144d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011451:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011456:	75 08                	jne    c0011460 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011458:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001145e:	eb 3d                	jmp    c001149d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011460:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011465:	75 17                	jne    c001147e <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011467:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001146c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001146f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011475:	8b 10                	mov    edx,DWORD PTR [eax]
c0011477:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001147b:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001147e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011483:	75 04                	jne    c0011489 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011485:	89 0a                	mov    DWORD PTR [edx],ecx
c0011487:	eb 14                	jmp    c001149d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011489:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001148e:	74 c8                	je     c0011458 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011490:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011495:	83 e0 ef             	and    eax,0xffffffef
c0011498:	83 f8 08             	cmp    eax,0x8
c001149b:	76 bb                	jbe    c0011458 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001149d:	31 c0                	xor    eax,eax
c001149f:	c3                   	ret    

c00114a0 <UnixFile::getFileDescriptor()>:
c00114a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114a7:	c3                   	ret    

c00114a8 <UnixFile::UnixFile(int)>:
c00114a8:	53                   	push   ebx
c00114a9:	83 ec 28             	sub    esp,0x28
c00114ac:	ba ac 92 02 c0       	mov    edx,0xc00292ac
c00114b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114b5:	89 10                	mov    DWORD PTR [eax],edx
c00114b7:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00114bf:	0f 8f 8c 01 00 00    	jg     c0011651 <UnixFile::UnixFile(int)+0x1a9>
c00114c5:	a1 60 be 02 c0       	mov    eax,ds:0xc002be60
c00114ca:	8d 50 01             	lea    edx,[eax+0x1]
c00114cd:	89 15 60 be 02 c0    	mov    DWORD PTR ds:0xc002be60,edx
c00114d3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00114d7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00114da:	83 ec 08             	sub    esp,0x8
c00114dd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00114e1:	68 38 d0 02 c0       	push   0xc002d038
c00114e6:	e8 55 60 01 00       	call   c0027540 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00114eb:	83 c4 10             	add    esp,0x10
c00114ee:	a0 34 d0 02 c0       	mov    al,ds:0xc002d034
c00114f3:	83 f0 01             	xor    eax,0x1
c00114f6:	84 c0                	test   al,al
c00114f8:	0f 84 54 01 00 00    	je     c0011652 <UnixFile::UnixFile(int)+0x1aa>
c00114fe:	c6 05 34 d0 02 c0 01 	mov    BYTE PTR ds:0xc002d034,0x1
c0011505:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001150d:	83 ec 0c             	sub    esp,0xc
c0011510:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011514:	e8 1d e1 ff ff       	call   c000f636 <malloc>
c0011519:	83 c4 10             	add    esp,0x10
c001151c:	89 c3                	mov    ebx,eax
c001151e:	83 ec 08             	sub    esp,0x8
c0011521:	68 03 ff ff 0f       	push   0xfffff03
c0011526:	53                   	push   ebx
c0011527:	e8 2c 01 00 00       	call   c0011658 <ReservedFilename::ReservedFilename(int)>
c001152c:	83 c4 10             	add    esp,0x10
c001152f:	89 1d 2c d0 02 c0    	mov    DWORD PTR ds:0xc002d02c,ebx
c0011535:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001153d:	83 ec 0c             	sub    esp,0xc
c0011540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011544:	e8 ed e0 ff ff       	call   c000f636 <malloc>
c0011549:	83 c4 10             	add    esp,0x10
c001154c:	89 c3                	mov    ebx,eax
c001154e:	83 ec 08             	sub    esp,0x8
c0011551:	68 01 ff ff 0f       	push   0xfffff01
c0011556:	53                   	push   ebx
c0011557:	e8 fc 00 00 00       	call   c0011658 <ReservedFilename::ReservedFilename(int)>
c001155c:	83 c4 10             	add    esp,0x10
c001155f:	89 1d 30 d0 02 c0    	mov    DWORD PTR ds:0xc002d030,ebx
c0011565:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001156d:	83 ec 0c             	sub    esp,0xc
c0011570:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011574:	e8 bd e0 ff ff       	call   c000f636 <malloc>
c0011579:	83 c4 10             	add    esp,0x10
c001157c:	89 c3                	mov    ebx,eax
c001157e:	83 ec 08             	sub    esp,0x8
c0011581:	68 00 ff ff 0f       	push   0xfffff00
c0011586:	53                   	push   ebx
c0011587:	e8 cc 00 00 00       	call   c0011658 <ReservedFilename::ReservedFilename(int)>
c001158c:	83 c4 10             	add    esp,0x10
c001158f:	89 1d 24 d0 02 c0    	mov    DWORD PTR ds:0xc002d024,ebx
c0011595:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001159d:	83 ec 0c             	sub    esp,0xc
c00115a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00115a4:	e8 8d e0 ff ff       	call   c000f636 <malloc>
c00115a9:	83 c4 10             	add    esp,0x10
c00115ac:	89 c3                	mov    ebx,eax
c00115ae:	83 ec 08             	sub    esp,0x8
c00115b1:	68 02 ff ff 0f       	push   0xfffff02
c00115b6:	53                   	push   ebx
c00115b7:	e8 9c 00 00 00       	call   c0011658 <ReservedFilename::ReservedFilename(int)>
c00115bc:	83 c4 10             	add    esp,0x10
c00115bf:	89 1d 28 d0 02 c0    	mov    DWORD PTR ds:0xc002d028,ebx
c00115c5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00115cd:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00115d2:	7f 7e                	jg     c0011652 <UnixFile::UnixFile(int)+0x1aa>
c00115d4:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00115dc:	83 ec 0c             	sub    esp,0xc
c00115df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00115e3:	e8 4e e0 ff ff       	call   c000f636 <malloc>
c00115e8:	83 c4 10             	add    esp,0x10
c00115eb:	89 c3                	mov    ebx,eax
c00115ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115f1:	05 10 ff ff 0f       	add    eax,0xfffff10
c00115f6:	83 ec 08             	sub    esp,0x8
c00115f9:	50                   	push   eax
c00115fa:	53                   	push   ebx
c00115fb:	e8 58 00 00 00       	call   c0011658 <ReservedFilename::ReservedFilename(int)>
c0011600:	83 c4 10             	add    esp,0x10
c0011603:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011607:	89 1c 85 00 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3000],ebx
c001160e:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011616:	83 ec 0c             	sub    esp,0xc
c0011619:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001161d:	e8 14 e0 ff ff       	call   c000f636 <malloc>
c0011622:	83 c4 10             	add    esp,0x10
c0011625:	89 c3                	mov    ebx,eax
c0011627:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001162b:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011630:	83 ec 08             	sub    esp,0x8
c0011633:	50                   	push   eax
c0011634:	53                   	push   ebx
c0011635:	e8 1e 00 00 00       	call   c0011658 <ReservedFilename::ReservedFilename(int)>
c001163a:	83 c4 10             	add    esp,0x10
c001163d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011641:	89 1c 85 c0 cf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3040],ebx
c0011648:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001164c:	e9 7c ff ff ff       	jmp    c00115cd <UnixFile::UnixFile(int)+0x125>
c0011651:	90                   	nop
c0011652:	83 c4 28             	add    esp,0x28
c0011655:	5b                   	pop    ebx
c0011656:	c3                   	ret    
c0011657:	90                   	nop

c0011658 <ReservedFilename::ReservedFilename(int)>:
c0011658:	83 ec 0c             	sub    esp,0xc
c001165b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001165f:	83 ec 08             	sub    esp,0x8
c0011662:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011666:	50                   	push   eax
c0011667:	e8 3c fe ff ff       	call   c00114a8 <UnixFile::UnixFile(int)>
c001166c:	83 c4 10             	add    esp,0x10
c001166f:	ba c8 92 02 c0       	mov    edx,0xc00292c8
c0011674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011678:	89 10                	mov    DWORD PTR [eax],edx
c001167a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001167e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011682:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011685:	90                   	nop
c0011686:	83 c4 0c             	add    esp,0xc
c0011689:	c3                   	ret    

c001168a <UnixFile::~UnixFile()>:
c001168a:	83 ec 1c             	sub    esp,0x1c
c001168d:	ba ac 92 02 c0       	mov    edx,0xc00292ac
c0011692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011696:	89 10                	mov    DWORD PTR [eax],edx
c0011698:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001169c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001169f:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00116a4:	7f 73                	jg     c0011719 <UnixFile::~UnixFile()+0x8f>
c00116a6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00116ae:	83 ec 0c             	sub    esp,0xc
c00116b1:	68 38 d0 02 c0       	push   0xc002d038
c00116b6:	e8 59 5f 01 00       	call   c0027614 <LinkedList<UnixFile>::getFirstElement()>
c00116bb:	83 c4 10             	add    esp,0x10
c00116be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00116c2:	83 ec 0c             	sub    esp,0xc
c00116c5:	68 38 d0 02 c0       	push   0xc002d038
c00116ca:	e8 4d 5f 01 00       	call   c002761c <LinkedList<UnixFile>::removeFirst()>
c00116cf:	83 c4 10             	add    esp,0x10
c00116d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00116d6:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00116da:	74 40                	je     c001171c <UnixFile::~UnixFile()+0x92>
c00116dc:	83 ec 08             	sub    esp,0x8
c00116df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00116e3:	68 38 d0 02 c0       	push   0xc002d038
c00116e8:	e8 53 5e 01 00       	call   c0027540 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00116ed:	83 c4 10             	add    esp,0x10
c00116f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116f4:	8d 50 01             	lea    edx,[eax+0x1]
c00116f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00116fb:	3d 88 13 00 00       	cmp    eax,0x1388
c0011700:	0f 94 c0             	sete   al
c0011703:	84 c0                	test   al,al
c0011705:	74 a7                	je     c00116ae <UnixFile::~UnixFile()+0x24>
c0011707:	83 ec 0c             	sub    esp,0xc
c001170a:	68 84 92 02 c0       	push   0xc0029284
c001170f:	e8 97 84 00 00       	call   c0019bab <Krnl::panic(char const*)>
c0011714:	83 c4 10             	add    esp,0x10
c0011717:	eb 95                	jmp    c00116ae <UnixFile::~UnixFile()+0x24>
c0011719:	90                   	nop
c001171a:	eb 01                	jmp    c001171d <UnixFile::~UnixFile()+0x93>
c001171c:	90                   	nop
c001171d:	90                   	nop
c001171e:	83 c4 1c             	add    esp,0x1c
c0011721:	c3                   	ret    

c0011722 <UnixFile::~UnixFile()>:
c0011722:	83 ec 0c             	sub    esp,0xc
c0011725:	83 ec 0c             	sub    esp,0xc
c0011728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001172c:	e8 59 ff ff ff       	call   c001168a <UnixFile::~UnixFile()>
c0011731:	83 c4 10             	add    esp,0x10
c0011734:	83 ec 08             	sub    esp,0x8
c0011737:	6a 0c                	push   0xc
c0011739:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001173d:	e8 b9 10 00 00       	call   c00127fb <operator delete(void*, unsigned long)>
c0011742:	83 c4 10             	add    esp,0x10
c0011745:	83 c4 0c             	add    esp,0xc
c0011748:	c3                   	ret    
c0011749:	90                   	nop

c001174a <ReservedFilename::~ReservedFilename()>:
c001174a:	83 ec 0c             	sub    esp,0xc
c001174d:	ba c8 92 02 c0       	mov    edx,0xc00292c8
c0011752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011756:	89 10                	mov    DWORD PTR [eax],edx
c0011758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001175c:	83 ec 0c             	sub    esp,0xc
c001175f:	50                   	push   eax
c0011760:	e8 25 ff ff ff       	call   c001168a <UnixFile::~UnixFile()>
c0011765:	83 c4 10             	add    esp,0x10
c0011768:	90                   	nop
c0011769:	83 c4 0c             	add    esp,0xc
c001176c:	c3                   	ret    
c001176d:	90                   	nop

c001176e <ReservedFilename::~ReservedFilename()>:
c001176e:	83 ec 0c             	sub    esp,0xc
c0011771:	83 ec 0c             	sub    esp,0xc
c0011774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011778:	e8 cd ff ff ff       	call   c001174a <ReservedFilename::~ReservedFilename()>
c001177d:	83 c4 10             	add    esp,0x10
c0011780:	83 ec 08             	sub    esp,0x8
c0011783:	6a 0c                	push   0xc
c0011785:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011789:	e8 6d 10 00 00       	call   c00127fb <operator delete(void*, unsigned long)>
c001178e:	83 c4 10             	add    esp,0x10
c0011791:	83 c4 0c             	add    esp,0xc
c0011794:	c3                   	ret    

c0011795 <getFromFileDescriptor(int)>:
c0011795:	53                   	push   ebx
c0011796:	83 ec 08             	sub    esp,0x8
c0011799:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001179d:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00117a3:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00117a9:	7f 2c                	jg     c00117d7 <getFromFileDescriptor(int)+0x42>
c00117ab:	83 ec 0c             	sub    esp,0xc
c00117ae:	68 38 d0 02 c0       	push   0xc002d038
c00117b3:	e8 5c 5e 01 00       	call   c0027614 <LinkedList<UnixFile>::getFirstElement()>
c00117b8:	83 c4 10             	add    esp,0x10
c00117bb:	85 c0                	test   eax,eax
c00117bd:	75 04                	jne    c00117c3 <getFromFileDescriptor(int)+0x2e>
c00117bf:	31 c0                	xor    eax,eax
c00117c1:	eb 6e                	jmp    c0011831 <getFromFileDescriptor(int)+0x9c>
c00117c3:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00117c6:	74 69                	je     c0011831 <getFromFileDescriptor(int)+0x9c>
c00117c8:	52                   	push   edx
c00117c9:	52                   	push   edx
c00117ca:	50                   	push   eax
c00117cb:	68 38 d0 02 c0       	push   0xc002d038
c00117d0:	e8 e9 5e 01 00       	call   c00276be <LinkedList<UnixFile>::getNext(UnixFile*)>
c00117d5:	eb e1                	jmp    c00117b8 <getFromFileDescriptor(int)+0x23>
c00117d7:	a1 2c d0 02 c0       	mov    eax,ds:0xc002d02c
c00117dc:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00117e2:	74 4d                	je     c0011831 <getFromFileDescriptor(int)+0x9c>
c00117e4:	a1 30 d0 02 c0       	mov    eax,ds:0xc002d030
c00117e9:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00117ef:	74 40                	je     c0011831 <getFromFileDescriptor(int)+0x9c>
c00117f1:	a1 28 d0 02 c0       	mov    eax,ds:0xc002d028
c00117f6:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00117fc:	74 33                	je     c0011831 <getFromFileDescriptor(int)+0x9c>
c00117fe:	a1 24 d0 02 c0       	mov    eax,ds:0xc002d024
c0011803:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011809:	74 26                	je     c0011831 <getFromFileDescriptor(int)+0x9c>
c001180b:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011811:	83 f8 08             	cmp    eax,0x8
c0011814:	77 09                	ja     c001181f <getFromFileDescriptor(int)+0x8a>
c0011816:	8b 04 85 00 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3000]
c001181d:	eb 12                	jmp    c0011831 <getFromFileDescriptor(int)+0x9c>
c001181f:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011825:	83 fb 08             	cmp    ebx,0x8
c0011828:	77 95                	ja     c00117bf <getFromFileDescriptor(int)+0x2a>
c001182a:	8b 04 9d c0 cf 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3040]
c0011831:	83 c4 08             	add    esp,0x8
c0011834:	5b                   	pop    ebx
c0011835:	c3                   	ret    

c0011836 <__static_initialization_and_destruction_0(int, int)>:
c0011836:	83 ec 0c             	sub    esp,0xc
c0011839:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001183e:	75 34                	jne    c0011874 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011840:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011848:	75 2a                	jne    c0011874 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001184a:	83 ec 0c             	sub    esp,0xc
c001184d:	68 38 d0 02 c0       	push   0xc002d038
c0011852:	e8 91 5c 01 00       	call   c00274e8 <LinkedList<UnixFile>::LinkedList()>
c0011857:	83 c4 10             	add    esp,0x10
c001185a:	83 ec 04             	sub    esp,0x4
c001185d:	68 f0 bd 02 c0       	push   0xc002bdf0
c0011862:	68 38 d0 02 c0       	push   0xc002d038
c0011867:	68 e6 74 02 c0       	push   0xc00274e6
c001186c:	e8 04 0f 00 00       	call   c0012775 <__cxa_atexit>
c0011871:	83 c4 10             	add    esp,0x10
c0011874:	90                   	nop
c0011875:	83 c4 0c             	add    esp,0xc
c0011878:	c3                   	ret    

c0011879 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011879:	83 ec 0c             	sub    esp,0xc
c001187c:	83 ec 08             	sub    esp,0x8
c001187f:	68 ff ff 00 00       	push   0xffff
c0011884:	6a 01                	push   0x1
c0011886:	e8 ab ff ff ff       	call   c0011836 <__static_initialization_and_destruction_0(int, int)>
c001188b:	83 c4 10             	add    esp,0x10
c001188e:	83 c4 0c             	add    esp,0xc
c0011891:	c3                   	ret    

c0011892 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011892:	53                   	push   ebx
c0011893:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011897:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001189b:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00118a1:	89 c8                	mov    eax,ecx
c00118a3:	d1 e8                	shr    eax,1
c00118a5:	03 05 68 be 02 c0    	add    eax,DWORD PTR ds:0xc002be68
c00118ab:	83 e1 01             	and    ecx,0x1
c00118ae:	8a 10                	mov    dl,BYTE PTR [eax]
c00118b0:	75 09                	jne    c00118bb <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00118b2:	83 e2 f0             	and    edx,0xfffffff0
c00118b5:	09 da                	or     edx,ebx
c00118b7:	88 10                	mov    BYTE PTR [eax],dl
c00118b9:	5b                   	pop    ebx
c00118ba:	c3                   	ret    
c00118bb:	c1 e3 04             	shl    ebx,0x4
c00118be:	83 e2 0f             	and    edx,0xf
c00118c1:	09 da                	or     edx,ebx
c00118c3:	88 10                	mov    BYTE PTR [eax],dl
c00118c5:	5b                   	pop    ebx
c00118c6:	c3                   	ret    

c00118c7 <Virt::getPageState(unsigned long)>:
c00118c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118cb:	8b 0d 68 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be68
c00118d1:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00118d7:	89 d0                	mov    eax,edx
c00118d9:	d1 e8                	shr    eax,1
c00118db:	83 e2 01             	and    edx,0x1
c00118de:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00118e1:	75 04                	jne    c00118e7 <Virt::getPageState(unsigned long)+0x20>
c00118e3:	83 e0 0f             	and    eax,0xf
c00118e6:	c3                   	ret    
c00118e7:	c0 e8 04             	shr    al,0x4
c00118ea:	c3                   	ret    

c00118eb <Virt::allocateKernelVirtualPages(int)>:
c00118eb:	55                   	push   ebp
c00118ec:	31 ed                	xor    ebp,ebp
c00118ee:	57                   	push   edi
c00118ef:	56                   	push   esi
c00118f0:	53                   	push   ebx
c00118f1:	31 db                	xor    ebx,ebx
c00118f3:	83 ec 1c             	sub    esp,0x1c
c00118f6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00118fa:	8b 3d 64 be 02 c0    	mov    edi,DWORD PTR ds:0xc002be64
c0011900:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011905:	57                   	push   edi
c0011906:	e8 bc ff ff ff       	call   c00118c7 <Virt::getPageState(unsigned long)>
c001190b:	5a                   	pop    edx
c001190c:	84 c0                	test   al,al
c001190e:	75 3a                	jne    c001194a <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011910:	85 db                	test   ebx,ebx
c0011912:	75 02                	jne    c0011916 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011914:	89 fd                	mov    ebp,edi
c0011916:	43                   	inc    ebx
c0011917:	39 f3                	cmp    ebx,esi
c0011919:	74 5a                	je     c0011975 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001191b:	47                   	inc    edi
c001191c:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011922:	76 31                	jbe    c0011955 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011924:	c7 05 64 be 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002be64,0xc8000
c001192e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011933:	75 28                	jne    c001195d <Virt::allocateKernelVirtualPages(int)+0x72>
c0011935:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001193a:	bf 00 80 0c 00       	mov    edi,0xc8000
c001193f:	57                   	push   edi
c0011940:	e8 82 ff ff ff       	call   c00118c7 <Virt::getPageState(unsigned long)>
c0011945:	5a                   	pop    edx
c0011946:	84 c0                	test   al,al
c0011948:	74 c6                	je     c0011910 <Virt::allocateKernelVirtualPages(int)+0x25>
c001194a:	31 db                	xor    ebx,ebx
c001194c:	47                   	inc    edi
c001194d:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011953:	77 cf                	ja     c0011924 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011955:	89 3d 64 be 02 c0    	mov    DWORD PTR ds:0xc002be64,edi
c001195b:	eb a8                	jmp    c0011905 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001195d:	83 ec 0c             	sub    esp,0xc
c0011960:	68 dc 92 02 c0       	push   0xc00292dc
c0011965:	e8 41 82 00 00       	call   c0019bab <Krnl::panic(char const*)>
c001196a:	8b 3d 64 be 02 c0    	mov    edi,DWORD PTR ds:0xc002be64
c0011970:	83 c4 10             	add    esp,0x10
c0011973:	eb 90                	jmp    c0011905 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011975:	89 2d 64 be 02 c0    	mov    DWORD PTR ds:0xc002be64,ebp
c001197b:	4b                   	dec    ebx
c001197c:	74 5f                	je     c00119dd <Virt::allocateKernelVirtualPages(int)+0xf2>
c001197e:	85 f6                	test   esi,esi
c0011980:	74 3d                	je     c00119bf <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011982:	89 e8                	mov    eax,ebp
c0011984:	31 db                	xor    ebx,ebx
c0011986:	8d 7e ff             	lea    edi,[esi-0x1]
c0011989:	eb 14                	jmp    c001199f <Virt::allocateKernelVirtualPages(int)+0xb4>
c001198b:	6a 01                	push   0x1
c001198d:	43                   	inc    ebx
c001198e:	50                   	push   eax
c001198f:	e8 fe fe ff ff       	call   c0011892 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011994:	58                   	pop    eax
c0011995:	39 f3                	cmp    ebx,esi
c0011997:	5a                   	pop    edx
c0011998:	74 25                	je     c00119bf <Virt::allocateKernelVirtualPages(int)+0xd4>
c001199a:	a1 64 be 02 c0       	mov    eax,ds:0xc002be64
c001199f:	8d 50 01             	lea    edx,[eax+0x1]
c00119a2:	85 db                	test   ebx,ebx
c00119a4:	89 15 64 be 02 c0    	mov    DWORD PTR ds:0xc002be64,edx
c00119aa:	74 20                	je     c00119cc <Virt::allocateKernelVirtualPages(int)+0xe1>
c00119ac:	39 df                	cmp    edi,ebx
c00119ae:	75 db                	jne    c001198b <Virt::allocateKernelVirtualPages(int)+0xa0>
c00119b0:	6a 03                	push   0x3
c00119b2:	43                   	inc    ebx
c00119b3:	50                   	push   eax
c00119b4:	e8 d9 fe ff ff       	call   c0011892 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119b9:	59                   	pop    ecx
c00119ba:	39 f3                	cmp    ebx,esi
c00119bc:	58                   	pop    eax
c00119bd:	75 db                	jne    c001199a <Virt::allocateKernelVirtualPages(int)+0xaf>
c00119bf:	83 c4 1c             	add    esp,0x1c
c00119c2:	89 e8                	mov    eax,ebp
c00119c4:	5b                   	pop    ebx
c00119c5:	c1 e0 0c             	shl    eax,0xc
c00119c8:	5e                   	pop    esi
c00119c9:	5f                   	pop    edi
c00119ca:	5d                   	pop    ebp
c00119cb:	c3                   	ret    
c00119cc:	6a 02                	push   0x2
c00119ce:	bb 01 00 00 00       	mov    ebx,0x1
c00119d3:	50                   	push   eax
c00119d4:	e8 b9 fe ff ff       	call   c0011892 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119d9:	58                   	pop    eax
c00119da:	5a                   	pop    edx
c00119db:	eb bd                	jmp    c001199a <Virt::allocateKernelVirtualPages(int)+0xaf>
c00119dd:	6a 04                	push   0x4
c00119df:	8d 45 01             	lea    eax,[ebp+0x1]
c00119e2:	55                   	push   ebp
c00119e3:	a3 64 be 02 c0       	mov    ds:0xc002be64,eax
c00119e8:	e8 a5 fe ff ff       	call   c0011892 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119ed:	59                   	pop    ecx
c00119ee:	89 e8                	mov    eax,ebp
c00119f0:	5b                   	pop    ebx
c00119f1:	c1 e0 0c             	shl    eax,0xc
c00119f4:	83 c4 1c             	add    esp,0x1c
c00119f7:	5b                   	pop    ebx
c00119f8:	5e                   	pop    esi
c00119f9:	5f                   	pop    edi
c00119fa:	5d                   	pop    ebp
c00119fb:	c3                   	ret    

c00119fc <Virt::virtualMemorySetup()>:
c00119fc:	53                   	push   ebx
c00119fd:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011a02:	83 ec 08             	sub    esp,0x8
c0011a05:	6a 0f                	push   0xf
c0011a07:	53                   	push   ebx
c0011a08:	43                   	inc    ebx
c0011a09:	e8 84 fe ff ff       	call   c0011892 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a0e:	59                   	pop    ecx
c0011a0f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011a15:	58                   	pop    eax
c0011a16:	75 ed                	jne    c0011a05 <Virt::virtualMemorySetup()+0x9>
c0011a18:	83 ec 08             	sub    esp,0x8
c0011a1b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011a20:	68 00 00 00 c8       	push   0xc8000000
c0011a25:	68 63 94 02 c0       	push   0xc0029463
c0011a2a:	e8 ac 0e 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0011a2f:	58                   	pop    eax
c0011a30:	5a                   	pop    edx
c0011a31:	68 00 f0 ff ef       	push   0xeffff000
c0011a36:	68 77 94 02 c0       	push   0xc0029477
c0011a3b:	e8 9b 0e 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0011a40:	83 c4 10             	add    esp,0x10
c0011a43:	83 ec 08             	sub    esp,0x8
c0011a46:	6a 00                	push   0x0
c0011a48:	53                   	push   ebx
c0011a49:	43                   	inc    ebx
c0011a4a:	e8 43 fe ff ff       	call   c0011892 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a4f:	83 c4 10             	add    esp,0x10
c0011a52:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011a58:	75 e9                	jne    c0011a43 <Virt::virtualMemorySetup()+0x47>
c0011a5a:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011a5f:	83 ec 08             	sub    esp,0x8
c0011a62:	6a 0f                	push   0xf
c0011a64:	53                   	push   ebx
c0011a65:	43                   	inc    ebx
c0011a66:	e8 27 fe ff ff       	call   c0011892 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a6b:	83 c4 10             	add    esp,0x10
c0011a6e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011a74:	75 e9                	jne    c0011a5f <Virt::virtualMemorySetup()+0x63>
c0011a76:	83 c4 08             	add    esp,0x8
c0011a79:	5b                   	pop    ebx
c0011a7a:	c3                   	ret    

c0011a7b <Virt::getAKernelVAS()>:
c0011a7b:	a1 44 d0 02 c0       	mov    eax,ds:0xc002d044
c0011a80:	c3                   	ret    

c0011a81 <Virt::setupPageSwapping(int)>:
c0011a81:	57                   	push   edi
c0011a82:	56                   	push   esi
c0011a83:	53                   	push   ebx
c0011a84:	83 ec 1c             	sub    esp,0x1c
c0011a87:	68 14 01 00 00       	push   0x114
c0011a8c:	e8 a5 db ff ff       	call   c000f636 <malloc>
c0011a91:	83 c4 0c             	add    esp,0xc
c0011a94:	89 c6                	mov    esi,eax
c0011a96:	ff 35 14 e4 02 c0    	push   DWORD PTR ds:0xc002e414
c0011a9c:	68 8b 94 02 c0       	push   0xc002948b
c0011aa1:	50                   	push   eax
c0011aa2:	e8 8d 13 00 00       	call   c0012e34 <File::File(char const*, Process*)>
c0011aa7:	89 34 24             	mov    DWORD PTR [esp],esi
c0011aaa:	e8 61 15 00 00       	call   c0013010 <File::unlink()>
c0011aaf:	58                   	pop    eax
c0011ab0:	5a                   	pop    edx
c0011ab1:	6a 12                	push   0x12
c0011ab3:	56                   	push   esi
c0011ab4:	e8 df 13 00 00       	call   c0012e98 <File::open(FileOpenMode)>
c0011ab9:	83 c4 10             	add    esp,0x10
c0011abc:	85 c0                	test   eax,eax
c0011abe:	0f 85 ca 00 00 00    	jne    c0011b8e <Virt::setupPageSwapping(int)+0x10d>
c0011ac4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ac8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ad0:	c1 e3 08             	shl    ebx,0x8
c0011ad3:	83 ec 0c             	sub    esp,0xc
c0011ad6:	68 00 00 01 00       	push   0x10000
c0011adb:	e8 56 db ff ff       	call   c000f636 <malloc>
c0011ae0:	83 c4 0c             	add    esp,0xc
c0011ae3:	89 c7                	mov    edi,eax
c0011ae5:	68 00 00 01 00       	push   0x10000
c0011aea:	6a 00                	push   0x0
c0011aec:	50                   	push   eax
c0011aed:	e8 e4 eb fe ff       	call   c00006d6 <memset>
c0011af2:	83 c4 10             	add    esp,0x10
c0011af5:	85 db                	test   ebx,ebx
c0011af7:	79 03                	jns    c0011afc <Virt::setupPageSwapping(int)+0x7b>
c0011af9:	83 c3 0f             	add    ebx,0xf
c0011afc:	c1 fb 04             	sar    ebx,0x4
c0011aff:	4b                   	dec    ebx
c0011b00:	83 fb ff             	cmp    ebx,0xffffffff
c0011b03:	74 4b                	je     c0011b50 <Virt::setupPageSwapping(int)+0xcf>
c0011b05:	83 ec 0c             	sub    esp,0xc
c0011b08:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b0a:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b0e:	52                   	push   edx
c0011b0f:	57                   	push   edi
c0011b10:	6a 00                	push   0x0
c0011b12:	68 00 00 01 00       	push   0x10000
c0011b17:	56                   	push   esi
c0011b18:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011b1b:	83 c4 20             	add    esp,0x20
c0011b1e:	85 c0                	test   eax,eax
c0011b20:	75 59                	jne    c0011b7b <Virt::setupPageSwapping(int)+0xfa>
c0011b22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b26:	3d 00 00 01 00       	cmp    eax,0x10000
c0011b2b:	74 d2                	je     c0011aff <Virt::setupPageSwapping(int)+0x7e>
c0011b2d:	83 ec 08             	sub    esp,0x8
c0011b30:	4b                   	dec    ebx
c0011b31:	50                   	push   eax
c0011b32:	68 de 94 02 c0       	push   0xc00294de
c0011b37:	e8 9f 0d 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0011b3c:	c7 04 24 e7 94 02 c0 	mov    DWORD PTR [esp],0xc00294e7
c0011b43:	e8 63 80 00 00       	call   c0019bab <Krnl::panic(char const*)>
c0011b48:	83 c4 10             	add    esp,0x10
c0011b4b:	83 fb ff             	cmp    ebx,0xffffffff
c0011b4e:	75 b5                	jne    c0011b05 <Virt::setupPageSwapping(int)+0x84>
c0011b50:	83 ec 0c             	sub    esp,0xc
c0011b53:	56                   	push   esi
c0011b54:	e8 9d 13 00 00       	call   c0012ef6 <File::close()>
c0011b59:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b5c:	e8 f5 da ff ff       	call   c000f656 <rfree>
c0011b61:	83 c4 10             	add    esp,0x10
c0011b64:	85 f6                	test   esi,esi
c0011b66:	74 0c                	je     c0011b74 <Virt::setupPageSwapping(int)+0xf3>
c0011b68:	83 ec 0c             	sub    esp,0xc
c0011b6b:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b6d:	56                   	push   esi
c0011b6e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b71:	83 c4 10             	add    esp,0x10
c0011b74:	83 c4 10             	add    esp,0x10
c0011b77:	5b                   	pop    ebx
c0011b78:	5e                   	pop    esi
c0011b79:	5f                   	pop    edi
c0011b7a:	c3                   	ret    
c0011b7b:	83 ec 08             	sub    esp,0x8
c0011b7e:	50                   	push   eax
c0011b7f:	68 c6 94 02 c0       	push   0xc00294c6
c0011b84:	e8 52 0d 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0011b89:	83 c4 10             	add    esp,0x10
c0011b8c:	eb 94                	jmp    c0011b22 <Virt::setupPageSwapping(int)+0xa1>
c0011b8e:	83 ec 08             	sub    esp,0x8
c0011b91:	50                   	push   eax
c0011b92:	68 a2 94 02 c0       	push   0xc00294a2
c0011b97:	e8 3f 0d 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0011b9c:	c7 04 24 ab 94 02 c0 	mov    DWORD PTR [esp],0xc00294ab
c0011ba3:	e8 03 80 00 00       	call   c0019bab <Krnl::panic(char const*)>
c0011ba8:	83 c4 10             	add    esp,0x10
c0011bab:	e9 14 ff ff ff       	jmp    c0011ac4 <Virt::setupPageSwapping(int)+0x43>

c0011bb0 <VAS::VAS()>:
c0011bb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bb4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011bbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bbf:	a3 44 d0 02 c0       	mov    ds:0xc002d044,eax
c0011bc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bc8:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011bcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bd0:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011bd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bd7:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011bde:	90                   	nop
c0011bdf:	c3                   	ret    

c0011be0 <VAS::VAS(VAS*)>:
c0011be0:	83 ec 0c             	sub    esp,0xc
c0011be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011be7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011bee:	83 ec 0c             	sub    esp,0xc
c0011bf1:	68 fc 92 02 c0       	push   0xc00292fc
c0011bf6:	e8 b0 7f 00 00       	call   c0019bab <Krnl::panic(char const*)>
c0011bfb:	83 c4 10             	add    esp,0x10
c0011bfe:	90                   	nop
c0011bff:	83 c4 0c             	add    esp,0xc
c0011c02:	c3                   	ret    
c0011c03:	90                   	nop

c0011c04 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c08:	89 c2                	mov    edx,eax
c0011c0a:	c1 e8 0a             	shr    eax,0xa
c0011c0d:	c1 ea 16             	shr    edx,0x16
c0011c10:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011c15:	19 c9                	sbb    ecx,ecx
c0011c17:	c1 e2 0c             	shl    edx,0xc
c0011c1a:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011c20:	25 fc 0f 00 00       	and    eax,0xffc
c0011c25:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011c2c:	01 d0                	add    eax,edx
c0011c2e:	c3                   	ret    
c0011c2f:	90                   	nop

c0011c30 <VAS::getPageTableEntry(unsigned long)>:
c0011c30:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c34:	89 ca                	mov    edx,ecx
c0011c36:	c1 e9 0a             	shr    ecx,0xa
c0011c39:	c1 ea 16             	shr    edx,0x16
c0011c3c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011c42:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011c48:	c1 e0 0c             	shl    eax,0xc
c0011c4b:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011c4e:	c3                   	ret    

c0011c4f <Virt::freeKernelVirtualPages(unsigned long)>:
c0011c4f:	57                   	push   edi
c0011c50:	56                   	push   esi
c0011c51:	be 01 00 00 00       	mov    esi,0x1
c0011c56:	53                   	push   ebx
c0011c57:	83 ec 10             	sub    esp,0x10
c0011c5a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c5e:	c1 eb 0c             	shr    ebx,0xc
c0011c61:	eb 3f                	jmp    c0011ca2 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011c63:	e8 13 fe ff ff       	call   c0011a7b <Virt::getAKernelVAS()>
c0011c68:	83 ec 08             	sub    esp,0x8
c0011c6b:	57                   	push   edi
c0011c6c:	50                   	push   eax
c0011c6d:	e8 be ff ff ff       	call   c0011c30 <VAS::getPageTableEntry(unsigned long)>
c0011c72:	83 c4 10             	add    esp,0x10
c0011c75:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c77:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011c7b:	f6 c4 04             	test   ah,0x4
c0011c7e:	75 5f                	jne    c0011cdf <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011c80:	80 fa 04             	cmp    dl,0x4
c0011c83:	74 78                	je     c0011cfd <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011c85:	80 fa 02             	cmp    dl,0x2
c0011c88:	0f 84 88 00 00 00    	je     c0011d16 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011c8e:	80 fa 03             	cmp    dl,0x3
c0011c91:	0f 84 ad 00 00 00    	je     c0011d44 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011c97:	fe ca                	dec    dl
c0011c99:	0f 84 92 00 00 00    	je     c0011d31 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011c9f:	43                   	inc    ebx
c0011ca0:	31 f6                	xor    esi,esi
c0011ca2:	53                   	push   ebx
c0011ca3:	e8 1f fc ff ff       	call   c00118c7 <Virt::getPageState(unsigned long)>
c0011ca8:	5f                   	pop    edi
c0011ca9:	89 df                	mov    edi,ebx
c0011cab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011caf:	c1 e7 0c             	shl    edi,0xc
c0011cb2:	84 c0                	test   al,al
c0011cb4:	75 ad                	jne    c0011c63 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011cb6:	83 ec 0c             	sub    esp,0xc
c0011cb9:	68 ed 94 02 c0       	push   0xc00294ed
c0011cbe:	e8 e8 7e 00 00       	call   c0019bab <Krnl::panic(char const*)>
c0011cc3:	e8 b3 fd ff ff       	call   c0011a7b <Virt::getAKernelVAS()>
c0011cc8:	5a                   	pop    edx
c0011cc9:	59                   	pop    ecx
c0011cca:	57                   	push   edi
c0011ccb:	50                   	push   eax
c0011ccc:	e8 5f ff ff ff       	call   c0011c30 <VAS::getPageTableEntry(unsigned long)>
c0011cd1:	83 c4 10             	add    esp,0x10
c0011cd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cd6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011cda:	f6 c4 04             	test   ah,0x4
c0011cdd:	74 c0                	je     c0011c9f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011cdf:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011ce3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ce8:	83 ec 0c             	sub    esp,0xc
c0011ceb:	50                   	push   eax
c0011cec:	e8 2e df ff ff       	call   c000fc1f <Phys::freePage(unsigned long)>
c0011cf1:	83 c4 10             	add    esp,0x10
c0011cf4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011cf8:	80 fa 04             	cmp    dl,0x4
c0011cfb:	75 88                	jne    c0011c85 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011cfd:	89 f0                	mov    eax,esi
c0011cff:	84 c0                	test   al,al
c0011d01:	75 47                	jne    c0011d4a <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011d03:	c7 44 24 20 20 93 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029320
c0011d0b:	83 c4 10             	add    esp,0x10
c0011d0e:	5b                   	pop    ebx
c0011d0f:	5e                   	pop    esi
c0011d10:	5f                   	pop    edi
c0011d11:	e9 95 7e 00 00       	jmp    c0019bab <Krnl::panic(char const*)>
c0011d16:	89 f0                	mov    eax,esi
c0011d18:	84 c0                	test   al,al
c0011d1a:	75 15                	jne    c0011d31 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011d1c:	83 ec 0c             	sub    esp,0xc
c0011d1f:	68 09 95 02 c0       	push   0xc0029509
c0011d24:	e8 82 7e 00 00       	call   c0019bab <Krnl::panic(char const*)>
c0011d29:	83 c4 10             	add    esp,0x10
c0011d2c:	e9 6e ff ff ff       	jmp    c0011c9f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011d31:	83 ec 08             	sub    esp,0x8
c0011d34:	6a 00                	push   0x0
c0011d36:	53                   	push   ebx
c0011d37:	e8 56 fb ff ff       	call   c0011892 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d3c:	83 c4 10             	add    esp,0x10
c0011d3f:	e9 5b ff ff ff       	jmp    c0011c9f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011d44:	89 f0                	mov    eax,esi
c0011d46:	84 c0                	test   al,al
c0011d48:	75 15                	jne    c0011d5f <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011d4a:	83 ec 08             	sub    esp,0x8
c0011d4d:	6a 00                	push   0x0
c0011d4f:	53                   	push   ebx
c0011d50:	e8 3d fb ff ff       	call   c0011892 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d55:	83 c4 10             	add    esp,0x10
c0011d58:	83 c4 10             	add    esp,0x10
c0011d5b:	5b                   	pop    ebx
c0011d5c:	5e                   	pop    esi
c0011d5d:	5f                   	pop    edi
c0011d5e:	c3                   	ret    
c0011d5f:	c7 44 24 20 25 95 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029525
c0011d67:	83 c4 10             	add    esp,0x10
c0011d6a:	5b                   	pop    ebx
c0011d6b:	5e                   	pop    esi
c0011d6c:	5f                   	pop    edi
c0011d6d:	e9 39 7e 00 00       	jmp    c0019bab <Krnl::panic(char const*)>

c0011d72 <VAS::freeAllocatedPages(unsigned long)>:
c0011d72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d7a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011d7e:	74 09                	je     c0011d89 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011d80:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011d84:	e9 c6 fe ff ff       	jmp    c0011c4f <Virt::freeKernelVirtualPages(unsigned long)>
c0011d89:	c7 44 24 04 44 93 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029344
c0011d91:	e9 45 0b 00 00       	jmp    c00128db <Dbg::kprintf(char const*, ...)>

c0011d96 <VAS::virtualToPhysical(unsigned long)>:
c0011d96:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011d9a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011d9e:	e8 8d fe ff ff       	call   c0011c30 <VAS::getPageTableEntry(unsigned long)>
c0011da3:	5a                   	pop    edx
c0011da4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011da6:	59                   	pop    ecx
c0011da7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dac:	c3                   	ret    
c0011dad:	90                   	nop

c0011dae <VAS::reflagRange(unsigned long, int, int, int)>:
c0011dae:	55                   	push   ebp
c0011daf:	57                   	push   edi
c0011db0:	56                   	push   esi
c0011db1:	53                   	push   ebx
c0011db2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011db6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011dba:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011dbe:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011dc2:	85 db                	test   ebx,ebx
c0011dc4:	7e 22                	jle    c0011de8 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011dc6:	c1 e3 0c             	shl    ebx,0xc
c0011dc9:	01 f3                	add    ebx,esi
c0011dcb:	56                   	push   esi
c0011dcc:	81 c6 00 10 00 00    	add    esi,0x1000
c0011dd2:	55                   	push   ebp
c0011dd3:	e8 58 fe ff ff       	call   c0011c30 <VAS::getPageTableEntry(unsigned long)>
c0011dd8:	5a                   	pop    edx
c0011dd9:	59                   	pop    ecx
c0011dda:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011ddc:	21 f9                	and    ecx,edi
c0011dde:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011de2:	39 f3                	cmp    ebx,esi
c0011de4:	89 08                	mov    DWORD PTR [eax],ecx
c0011de6:	75 e3                	jne    c0011dcb <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011de8:	5b                   	pop    ebx
c0011de9:	5e                   	pop    esi
c0011dea:	5f                   	pop    edi
c0011deb:	5d                   	pop    ebp
c0011dec:	c3                   	ret    
c0011ded:	90                   	nop

c0011dee <VAS::setToWriteCombining(unsigned long, int)>:
c0011dee:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0011df3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011df9:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011e00:	75 01                	jne    c0011e03 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011e02:	c3                   	ret    
c0011e03:	68 80 00 00 00       	push   0x80
c0011e08:	6a ff                	push   0xffffffff
c0011e0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e16:	e8 93 ff ff ff       	call   c0011dae <VAS::reflagRange(unsigned long, int, int, int)>
c0011e1b:	83 c4 14             	add    esp,0x14
c0011e1e:	c3                   	ret    
c0011e1f:	90                   	nop

c0011e20 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011e20:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e29:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011e2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e30:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011e33:	19 c0                	sbb    eax,eax
c0011e35:	83 ca 03             	or     edx,0x3
c0011e38:	83 e0 fc             	and    eax,0xfffffffc
c0011e3b:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011e42:	0f 20 d8             	mov    eax,cr3
c0011e45:	0f 22 d8             	mov    cr3,eax
c0011e48:	c3                   	ret    
c0011e49:	90                   	nop

c0011e4a <VAS::~VAS()>:
c0011e4a:	83 ec 2c             	sub    esp,0x2c
c0011e4d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e55:	e8 00 b3 00 00       	call   c001d15a <lockScheduler()>
c0011e5a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011e5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e61:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e64:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011e6a:	83 ec 04             	sub    esp,0x4
c0011e6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011e71:	6a 01                	push   0x1
c0011e73:	50                   	push   eax
c0011e74:	e8 a7 ff ff ff       	call   c0011e20 <VAS::mapOtherVASIn(bool, VAS*)>
c0011e79:	83 c4 10             	add    esp,0x10
c0011e7c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011e84:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011e8c:	0f 8f d7 00 00 00    	jg     c0011f69 <VAS::~VAS()+0x11f>
c0011e92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e96:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e99:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e9d:	c1 e2 02             	shl    edx,0x2
c0011ea0:	01 d0                	add    eax,edx
c0011ea2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ea4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eac:	83 e0 01             	and    eax,0x1
c0011eaf:	0f 84 ab 00 00 00    	je     c0011f60 <VAS::~VAS()+0x116>
c0011eb5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011ebd:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011ec5:	7f 75                	jg     c0011f3c <VAS::~VAS()+0xf2>
c0011ec7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ecb:	c1 e0 0a             	shl    eax,0xa
c0011ece:	89 c2                	mov    edx,eax
c0011ed0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011ed4:	01 d0                	add    eax,edx
c0011ed6:	c1 e0 0c             	shl    eax,0xc
c0011ed9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011edd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011ee2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ee4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ee7:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011eed:	83 ec 04             	sub    esp,0x4
c0011ef0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011ef4:	6a 01                	push   0x1
c0011ef6:	50                   	push   eax
c0011ef7:	e8 08 fd ff ff       	call   c0011c04 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011efc:	83 c4 10             	add    esp,0x10
c0011eff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011f03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f07:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f09:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011f0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f11:	25 01 04 00 00       	and    eax,0x401
c0011f16:	3d 01 04 00 00       	cmp    eax,0x401
c0011f1b:	75 19                	jne    c0011f36 <VAS::~VAS()+0xec>
c0011f1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f21:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f26:	83 ec 0c             	sub    esp,0xc
c0011f29:	50                   	push   eax
c0011f2a:	e8 f0 dc ff ff       	call   c000fc1f <Phys::freePage(unsigned long)>
c0011f2f:	83 c4 10             	add    esp,0x10
c0011f32:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f36:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011f3a:	eb 81                	jmp    c0011ebd <VAS::~VAS()+0x73>
c0011f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f40:	25 00 04 00 00       	and    eax,0x400
c0011f45:	74 19                	je     c0011f60 <VAS::~VAS()+0x116>
c0011f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f4b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f50:	83 ec 0c             	sub    esp,0xc
c0011f53:	50                   	push   eax
c0011f54:	e8 c6 dc ff ff       	call   c000fc1f <Phys::freePage(unsigned long)>
c0011f59:	83 c4 10             	add    esp,0x10
c0011f5c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f60:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f64:	e9 1b ff ff ff       	jmp    c0011e84 <VAS::~VAS()+0x3a>
c0011f69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f6d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f70:	83 ec 0c             	sub    esp,0xc
c0011f73:	50                   	push   eax
c0011f74:	e8 d6 fc ff ff       	call   c0011c4f <Virt::freeKernelVirtualPages(unsigned long)>
c0011f79:	83 c4 10             	add    esp,0x10
c0011f7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f80:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f83:	83 ec 0c             	sub    esp,0xc
c0011f86:	50                   	push   eax
c0011f87:	e8 93 dc ff ff       	call   c000fc1f <Phys::freePage(unsigned long)>
c0011f8c:	83 c4 10             	add    esp,0x10
c0011f8f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f97:	c1 e0 02             	shl    eax,0x2
c0011f9a:	83 ec 08             	sub    esp,0x8
c0011f9d:	50                   	push   eax
c0011f9e:	68 68 93 02 c0       	push   0xc0029368
c0011fa3:	e8 33 09 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0011fa8:	83 c4 10             	add    esp,0x10
c0011fab:	e8 ac b1 00 00       	call   c001d15c <unlockScheduler()>
c0011fb0:	90                   	nop
c0011fb1:	83 c4 2c             	add    esp,0x2c
c0011fb4:	c3                   	ret    
c0011fb5:	90                   	nop

c0011fb6 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011fb6:	55                   	push   ebp
c0011fb7:	57                   	push   edi
c0011fb8:	56                   	push   esi
c0011fb9:	53                   	push   ebx
c0011fba:	83 ec 1c             	sub    esp,0x1c
c0011fbd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011fc1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011fc5:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011fcb:	77 08                	ja     c0011fd5 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011fcd:	0f 20 d8             	mov    eax,cr3
c0011fd0:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011fd3:	75 47                	jne    c001201c <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011fd5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fd9:	09 d8                	or     eax,ebx
c0011fdb:	a9 ff 0f 00 00       	test   eax,0xfff
c0011fe0:	75 57                	jne    c0012039 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011fe2:	89 de                	mov    esi,ebx
c0011fe4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011fe7:	c1 ee 16             	shr    esi,0x16
c0011fea:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011ff1:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011ff5:	74 54                	je     c001204b <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011ff7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ffb:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012001:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012005:	c1 e6 0c             	shl    esi,0xc
c0012008:	c1 eb 0a             	shr    ebx,0xa
c001200b:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012011:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012014:	83 c4 1c             	add    esp,0x1c
c0012017:	5b                   	pop    ebx
c0012018:	5e                   	pop    esi
c0012019:	5f                   	pop    edi
c001201a:	5d                   	pop    ebp
c001201b:	c3                   	ret    
c001201c:	83 ec 0c             	sub    esp,0xc
c001201f:	68 88 93 02 c0       	push   0xc0029388
c0012024:	e8 b2 08 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0012029:	83 c4 10             	add    esp,0x10
c001202c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012030:	09 d8                	or     eax,ebx
c0012032:	a9 ff 0f 00 00       	test   eax,0xfff
c0012037:	74 a9                	je     c0011fe2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012039:	83 ec 0c             	sub    esp,0xc
c001203c:	68 f0 93 02 c0       	push   0xc00293f0
c0012041:	e8 65 7b 00 00       	call   c0019bab <Krnl::panic(char const*)>
c0012046:	83 c4 10             	add    esp,0x10
c0012049:	eb 97                	jmp    c0011fe2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001204b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001204f:	e8 55 dc ff ff       	call   c000fca9 <Phys::allocatePage()>
c0012054:	89 c5                	mov    ebp,eax
c0012056:	e8 20 fa ff ff       	call   c0011a7b <Virt::getAKernelVAS()>
c001205b:	83 ec 0c             	sub    esp,0xc
c001205e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012062:	6a 01                	push   0x1
c0012064:	e8 82 f8 ff ff       	call   c00118eb <Virt::allocateKernelVirtualPages(int)>
c0012069:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012070:	6a 01                	push   0x1
c0012072:	50                   	push   eax
c0012073:	55                   	push   ebp
c0012074:	81 cd 07 04 00 00    	or     ebp,0x407
c001207a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001207e:	51                   	push   ecx
c001207f:	e8 26 02 00 00       	call   c00122aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012084:	83 c4 1c             	add    esp,0x1c
c0012087:	68 00 10 00 00       	push   0x1000
c001208c:	6a 00                	push   0x0
c001208e:	50                   	push   eax
c001208f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012093:	e8 3e e6 fe ff       	call   c00006d6 <memset>
c0012098:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001209c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001209f:	e8 ab fb ff ff       	call   c0011c4f <Virt::freeKernelVirtualPages(unsigned long)>
c00120a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00120a8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00120ab:	83 c4 10             	add    esp,0x10
c00120ae:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00120b1:	e9 41 ff ff ff       	jmp    c0011ff7 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00120b6 <VAS::allocatePages(int, int)>:
c00120b6:	55                   	push   ebp
c00120b7:	57                   	push   edi
c00120b8:	56                   	push   esi
c00120b9:	53                   	push   ebx
c00120ba:	83 ec 1c             	sub    esp,0x1c
c00120bd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00120c1:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c00120c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120cc:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00120d2:	83 e0 01             	and    eax,0x1
c00120d5:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00120d9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00120dd:	0f 85 cc 00 00 00    	jne    c00121af <VAS::allocatePages(int, int)+0xf9>
c00120e3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00120e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120ea:	85 c0                	test   eax,eax
c00120ec:	0f 84 a1 00 00 00    	je     c0012193 <VAS::allocatePages(int, int)+0xdd>
c00120f2:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00120f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120fa:	c1 e6 0c             	shl    esi,0xc
c00120fd:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012101:	85 c0                	test   eax,eax
c0012103:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012106:	7e 33                	jle    c001213b <VAS::allocatePages(int, int)+0x85>
c0012108:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001210c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012110:	81 cd 00 04 00 00    	or     ebp,0x400
c0012116:	e8 8e db ff ff       	call   c000fca9 <Phys::allocatePage()>
c001211b:	55                   	push   ebp
c001211c:	53                   	push   ebx
c001211d:	50                   	push   eax
c001211e:	57                   	push   edi
c001211f:	e8 92 fe ff ff       	call   c0011fb6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012124:	83 c4 10             	add    esp,0x10
c0012127:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001212c:	74 03                	je     c0012131 <VAS::allocatePages(int, int)+0x7b>
c001212e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012131:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012137:	39 de                	cmp    esi,ebx
c0012139:	75 db                	jne    c0012116 <VAS::allocatePages(int, int)+0x60>
c001213b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012140:	75 12                	jne    c0012154 <VAS::allocatePages(int, int)+0x9e>
c0012142:	0f 20 d8             	mov    eax,cr3
c0012145:	0f 22 d8             	mov    cr3,eax
c0012148:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001214c:	83 c4 1c             	add    esp,0x1c
c001214f:	5b                   	pop    ebx
c0012150:	5e                   	pop    esi
c0012151:	5f                   	pop    edi
c0012152:	5d                   	pop    ebp
c0012153:	c3                   	ret    
c0012154:	c1 ee 0a             	shr    esi,0xa
c0012157:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001215b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012161:	c1 eb 0a             	shr    ebx,0xa
c0012164:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001216a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012170:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012176:	39 c3                	cmp    ebx,eax
c0012178:	77 ce                	ja     c0012148 <VAS::allocatePages(int, int)+0x92>
c001217a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001217d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012183:	39 d8                	cmp    eax,ebx
c0012185:	73 f3                	jae    c001217a <VAS::allocatePages(int, int)+0xc4>
c0012187:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001218b:	83 c4 1c             	add    esp,0x1c
c001218e:	5b                   	pop    ebx
c001218f:	5e                   	pop    esi
c0012190:	5f                   	pop    edi
c0012191:	5d                   	pop    ebp
c0012192:	c3                   	ret    
c0012193:	83 ec 0c             	sub    esp,0xc
c0012196:	68 14 94 02 c0       	push   0xc0029414
c001219b:	e8 0b 7a 00 00       	call   c0019bab <Krnl::panic(char const*)>
c00121a0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00121a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121a7:	83 c4 10             	add    esp,0x10
c00121aa:	e9 43 ff ff ff       	jmp    c00120f2 <VAS::allocatePages(int, int)+0x3c>
c00121af:	83 ec 0c             	sub    esp,0xc
c00121b2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00121b6:	e8 30 f7 ff ff       	call   c00118eb <Virt::allocateKernelVirtualPages(int)>
c00121bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121bf:	83 c4 10             	add    esp,0x10
c00121c2:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00121c7:	0f 87 9b 00 00 00    	ja     c0012268 <VAS::allocatePages(int, int)+0x1b2>
c00121cd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00121d1:	85 d2                	test   edx,edx
c00121d3:	7e 3c                	jle    c0012211 <VAS::allocatePages(int, int)+0x15b>
c00121d5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00121d9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00121dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00121e1:	c1 e5 0c             	shl    ebp,0xc
c00121e4:	81 ce 00 04 00 00    	or     esi,0x400
c00121ea:	01 dd                	add    ebp,ebx
c00121ec:	e8 b8 da ff ff       	call   c000fca9 <Phys::allocatePage()>
c00121f1:	56                   	push   esi
c00121f2:	53                   	push   ebx
c00121f3:	50                   	push   eax
c00121f4:	57                   	push   edi
c00121f5:	e8 bc fd ff ff       	call   c0011fb6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00121fa:	83 c4 10             	add    esp,0x10
c00121fd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012202:	74 03                	je     c0012207 <VAS::allocatePages(int, int)+0x151>
c0012204:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012207:	81 c3 00 10 00 00    	add    ebx,0x1000
c001220d:	39 dd                	cmp    ebp,ebx
c001220f:	75 db                	jne    c00121ec <VAS::allocatePages(int, int)+0x136>
c0012211:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012216:	0f 84 26 ff ff ff    	je     c0012142 <VAS::allocatePages(int, int)+0x8c>
c001221c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012220:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012224:	89 d3                	mov    ebx,edx
c0012226:	c1 e0 0c             	shl    eax,0xc
c0012229:	c1 eb 0a             	shr    ebx,0xa
c001222c:	01 d0                	add    eax,edx
c001222e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012234:	c1 e8 0a             	shr    eax,0xa
c0012237:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001223d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012242:	2d 00 00 40 00       	sub    eax,0x400000
c0012247:	39 c3                	cmp    ebx,eax
c0012249:	0f 87 f9 fe ff ff    	ja     c0012148 <VAS::allocatePages(int, int)+0x92>
c001224f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012252:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012258:	39 d8                	cmp    eax,ebx
c001225a:	73 f3                	jae    c001224f <VAS::allocatePages(int, int)+0x199>
c001225c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012260:	83 c4 1c             	add    esp,0x1c
c0012263:	5b                   	pop    ebx
c0012264:	5e                   	pop    esi
c0012265:	5f                   	pop    edi
c0012266:	5d                   	pop    ebp
c0012267:	c3                   	ret    
c0012268:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c001226d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012273:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001227a:	0f 84 4d ff ff ff    	je     c00121cd <VAS::allocatePages(int, int)+0x117>
c0012280:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012288:	e9 40 ff ff ff       	jmp    c00121cd <VAS::allocatePages(int, int)+0x117>
c001228d:	90                   	nop

c001228e <VAS::setCPUSpecific(unsigned long)>:
c001228e:	83 ec 0c             	sub    esp,0xc
c0012291:	6a 05                	push   0x5
c0012293:	68 00 00 40 c2       	push   0xc2400000
c0012298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001229c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122a0:	e8 11 fd ff ff       	call   c0011fb6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00122a5:	83 c4 1c             	add    esp,0x1c
c00122a8:	c3                   	ret    
c00122a9:	90                   	nop

c00122aa <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00122aa:	55                   	push   ebp
c00122ab:	57                   	push   edi
c00122ac:	56                   	push   esi
c00122ad:	53                   	push   ebx
c00122ae:	83 ec 1c             	sub    esp,0x1c
c00122b1:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c00122b6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122ba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122c0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00122c4:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00122ca:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00122ce:	83 e0 01             	and    eax,0x1
c00122d1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00122d5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122d9:	85 c0                	test   eax,eax
c00122db:	7e 39                	jle    c0012316 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00122dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122e1:	89 f3                	mov    ebx,esi
c00122e3:	c1 e0 0c             	shl    eax,0xc
c00122e6:	01 f0                	add    eax,esi
c00122e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122ec:	55                   	push   ebp
c00122ed:	53                   	push   ebx
c00122ee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122f2:	29 f0                	sub    eax,esi
c00122f4:	01 d8                	add    eax,ebx
c00122f6:	50                   	push   eax
c00122f7:	57                   	push   edi
c00122f8:	e8 b9 fc ff ff       	call   c0011fb6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00122fd:	83 c4 10             	add    esp,0x10
c0012300:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012305:	74 03                	je     c001230a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012307:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001230a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012310:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012314:	75 d6                	jne    c00122ec <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012316:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001231b:	75 10                	jne    c001232d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c001231d:	0f 20 d8             	mov    eax,cr3
c0012320:	0f 22 d8             	mov    cr3,eax
c0012323:	83 c4 1c             	add    esp,0x1c
c0012326:	89 f0                	mov    eax,esi
c0012328:	5b                   	pop    ebx
c0012329:	5e                   	pop    esi
c001232a:	5f                   	pop    edi
c001232b:	5d                   	pop    ebp
c001232c:	c3                   	ret    
c001232d:	89 f3                	mov    ebx,esi
c001232f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012333:	c1 eb 0a             	shr    ebx,0xa
c0012336:	c1 e0 0c             	shl    eax,0xc
c0012339:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001233f:	01 f0                	add    eax,esi
c0012341:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012347:	c1 e8 0a             	shr    eax,0xa
c001234a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001234f:	2d 00 00 40 00       	sub    eax,0x400000
c0012354:	39 c3                	cmp    ebx,eax
c0012356:	77 cb                	ja     c0012323 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012358:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001235b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012361:	39 d8                	cmp    eax,ebx
c0012363:	73 f3                	jae    c0012358 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012365:	83 c4 1c             	add    esp,0x1c
c0012368:	89 f0                	mov    eax,esi
c001236a:	5b                   	pop    ebx
c001236b:	5e                   	pop    esi
c001236c:	5f                   	pop    edi
c001236d:	5d                   	pop    ebp
c001236e:	c3                   	ret    
c001236f:	90                   	nop

c0012370 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012370:	55                   	push   ebp
c0012371:	57                   	push   edi
c0012372:	56                   	push   esi
c0012373:	53                   	push   ebx
c0012374:	83 ec 1c             	sub    esp,0x1c
c0012377:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001237b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001237f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012383:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012387:	a9 ff 0f 00 00       	test   eax,0xfff
c001238c:	75 4a                	jne    c00123d8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001238e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012392:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012395:	c1 eb 16             	shr    ebx,0x16
c0012398:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001239f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00123a3:	74 4d                	je     c00123f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00123a5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00123a9:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00123ad:	c1 e8 0a             	shr    eax,0xa
c00123b0:	80 fa 01             	cmp    dl,0x1
c00123b3:	19 d2                	sbb    edx,edx
c00123b5:	c1 e3 0c             	shl    ebx,0xc
c00123b8:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00123bc:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00123c2:	25 fc 0f 00 00       	and    eax,0xffc
c00123c7:	01 d8                	add    eax,ebx
c00123c9:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00123d0:	83 c4 1c             	add    esp,0x1c
c00123d3:	5b                   	pop    ebx
c00123d4:	5e                   	pop    esi
c00123d5:	5f                   	pop    edi
c00123d6:	5d                   	pop    ebp
c00123d7:	c3                   	ret    
c00123d8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00123dc:	83 ec 0c             	sub    esp,0xc
c00123df:	68 40 94 02 c0       	push   0xc0029440
c00123e4:	e8 c2 77 00 00       	call   c0019bab <Krnl::panic(char const*)>
c00123e9:	83 c4 10             	add    esp,0x10
c00123ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123f0:	eb 9c                	jmp    c001238e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00123f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123f6:	e8 ae d8 ff ff       	call   c000fca9 <Phys::allocatePage()>
c00123fb:	89 c5                	mov    ebp,eax
c00123fd:	e8 79 f6 ff ff       	call   c0011a7b <Virt::getAKernelVAS()>
c0012402:	83 ec 0c             	sub    esp,0xc
c0012405:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012409:	6a 01                	push   0x1
c001240b:	e8 db f4 ff ff       	call   c00118eb <Virt::allocateKernelVirtualPages(int)>
c0012410:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012417:	6a 01                	push   0x1
c0012419:	50                   	push   eax
c001241a:	55                   	push   ebp
c001241b:	81 cd 07 04 00 00    	or     ebp,0x407
c0012421:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012425:	51                   	push   ecx
c0012426:	e8 7f fe ff ff       	call   c00122aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001242b:	83 c4 1c             	add    esp,0x1c
c001242e:	68 00 10 00 00       	push   0x1000
c0012433:	6a 00                	push   0x0
c0012435:	50                   	push   eax
c0012436:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001243a:	e8 97 e2 fe ff       	call   c00006d6 <memset>
c001243f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012443:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012446:	e8 04 f8 ff ff       	call   c0011c4f <Virt::freeKernelVirtualPages(unsigned long)>
c001244b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001244e:	83 c4 10             	add    esp,0x10
c0012451:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012454:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012458:	e9 48 ff ff ff       	jmp    c00123a5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c001245d:	90                   	nop

c001245e <VAS::VAS(bool)>:
c001245e:	53                   	push   ebx
c001245f:	83 ec 28             	sub    esp,0x28
c0012462:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012466:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001246a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001246e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012475:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012479:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001247d:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012480:	e8 24 d8 ff ff       	call   c000fca9 <Phys::allocatePage()>
c0012485:	89 c2                	mov    edx,eax
c0012487:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001248b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001248e:	e8 e8 f5 ff ff       	call   c0011a7b <Virt::getAKernelVAS()>
c0012493:	89 c3                	mov    ebx,eax
c0012495:	83 ec 0c             	sub    esp,0xc
c0012498:	6a 01                	push   0x1
c001249a:	e8 4c f4 ff ff       	call   c00118eb <Virt::allocateKernelVirtualPages(int)>
c001249f:	83 c4 10             	add    esp,0x10
c00124a2:	89 c2                	mov    edx,eax
c00124a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00124ab:	83 ec 0c             	sub    esp,0xc
c00124ae:	6a 03                	push   0x3
c00124b0:	6a 01                	push   0x1
c00124b2:	52                   	push   edx
c00124b3:	50                   	push   eax
c00124b4:	53                   	push   ebx
c00124b5:	e8 f0 fd ff ff       	call   c00122aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124ba:	83 c4 20             	add    esp,0x20
c00124bd:	89 c2                	mov    edx,eax
c00124bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124c3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00124c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00124ce:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00124d6:	7f 1c                	jg     c00124f4 <VAS::VAS(bool)+0x96>
c00124d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00124df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00124e3:	c1 e2 02             	shl    edx,0x2
c00124e6:	01 d0                	add    eax,edx
c00124e8:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00124ee:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00124f2:	eb da                	jmp    c00124ce <VAS::VAS(bool)+0x70>
c00124f4:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00124fc:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012504:	7f 7a                	jg     c0012580 <VAS::VAS(bool)+0x122>
c0012506:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001250a:	2d 00 02 00 00       	sub    eax,0x200
c001250f:	c1 e0 0c             	shl    eax,0xc
c0012512:	83 c8 03             	or     eax,0x3
c0012515:	89 c2                	mov    edx,eax
c0012517:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c001251c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012522:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012528:	83 e0 10             	and    eax,0x10
c001252b:	84 c0                	test   al,al
c001252d:	74 07                	je     c0012536 <VAS::VAS(bool)+0xd8>
c001252f:	b8 00 01 00 00       	mov    eax,0x100
c0012534:	eb 05                	jmp    c001253b <VAS::VAS(bool)+0xdd>
c0012536:	b8 00 00 00 00       	mov    eax,0x0
c001253b:	09 d0                	or     eax,edx
c001253d:	89 c1                	mov    ecx,eax
c001253f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012543:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012546:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001254a:	c1 e2 02             	shl    edx,0x2
c001254d:	01 d0                	add    eax,edx
c001254f:	89 ca                	mov    edx,ecx
c0012551:	89 10                	mov    DWORD PTR [eax],edx
c0012553:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012557:	2d 40 03 00 00       	sub    eax,0x340
c001255c:	83 f8 7f             	cmp    eax,0x7f
c001255f:	77 16                	ja     c0012577 <VAS::VAS(bool)+0x119>
c0012561:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012565:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012568:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001256c:	c1 e2 02             	shl    edx,0x2
c001256f:	01 d0                	add    eax,edx
c0012571:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012577:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001257b:	e9 7c ff ff ff       	jmp    c00124fc <VAS::VAS(bool)+0x9e>
c0012580:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0012585:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001258b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012591:	83 e0 10             	and    eax,0x10
c0012594:	84 c0                	test   al,al
c0012596:	74 07                	je     c001259f <VAS::VAS(bool)+0x141>
c0012598:	b8 03 41 00 00       	mov    eax,0x4103
c001259d:	eb 05                	jmp    c00125a4 <VAS::VAS(bool)+0x146>
c001259f:	b8 03 40 00 00       	mov    eax,0x4003
c00125a4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00125a8:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00125ab:	81 c2 20 0c 00 00    	add    edx,0xc20
c00125b1:	89 02                	mov    DWORD PTR [edx],eax
c00125b3:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c00125b8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125be:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00125c4:	83 ec 08             	sub    esp,0x8
c00125c7:	50                   	push   eax
c00125c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125cc:	e8 bd fc ff ff       	call   c001228e <VAS::setCPUSpecific(unsigned long)>
c00125d1:	83 c4 10             	add    esp,0x10
c00125d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125d8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00125db:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c00125e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125e6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00125ec:	83 e0 10             	and    eax,0x10
c00125ef:	84 c0                	test   al,al
c00125f1:	74 07                	je     c00125fa <VAS::VAS(bool)+0x19c>
c00125f3:	b8 00 01 00 00       	mov    eax,0x100
c00125f8:	eb 05                	jmp    c00125ff <VAS::VAS(bool)+0x1a1>
c00125fa:	b8 00 00 00 00       	mov    eax,0x0
c00125ff:	09 c2                	or     edx,eax
c0012601:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012605:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012608:	05 fc 0f 00 00       	add    eax,0xffc
c001260d:	83 ca 03             	or     edx,0x3
c0012610:	89 10                	mov    DWORD PTR [eax],edx
c0012612:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0012617:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001261d:	83 ec 0c             	sub    esp,0xc
c0012620:	50                   	push   eax
c0012621:	e8 c8 19 00 00       	call   c0013fee <Device::getName()>
c0012626:	83 c4 10             	add    esp,0x10
c0012629:	83 ec 08             	sub    esp,0x8
c001262c:	68 3f 95 02 c0       	push   0xc002953f
c0012631:	50                   	push   eax
c0012632:	e8 8f e1 fe ff       	call   c00007c6 <strcmp>
c0012637:	83 c4 10             	add    esp,0x10
c001263a:	85 c0                	test   eax,eax
c001263c:	0f 94 c0             	sete   al
c001263f:	84 c0                	test   al,al
c0012641:	74 70                	je     c00126b3 <VAS::VAS(bool)+0x255>
c0012643:	e8 f5 aa 00 00       	call   c001d13d <disableIRQs()>
c0012648:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c001264d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012653:	05 7c 09 00 00       	add    eax,0x97c
c0012658:	83 ec 0c             	sub    esp,0xc
c001265b:	50                   	push   eax
c001265c:	e8 51 ca ff ff       	call   c000f0b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012661:	83 c4 10             	add    esp,0x10
c0012664:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012669:	89 c3                	mov    ebx,eax
c001266b:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0012670:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012676:	05 7c 09 00 00       	add    eax,0x97c
c001267b:	83 ec 0c             	sub    esp,0xc
c001267e:	50                   	push   eax
c001267f:	e8 2e ca ff ff       	call   c000f0b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012684:	83 c4 10             	add    esp,0x10
c0012687:	83 ec 08             	sub    esp,0x8
c001268a:	50                   	push   eax
c001268b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001268f:	e8 9c f5 ff ff       	call   c0011c30 <VAS::getPageTableEntry(unsigned long)>
c0012694:	83 c4 10             	add    esp,0x10
c0012697:	8b 00                	mov    eax,DWORD PTR [eax]
c0012699:	25 00 f0 ff ff       	and    eax,0xfffff000
c001269e:	6a 11                	push   0x11
c00126a0:	53                   	push   ebx
c00126a1:	50                   	push   eax
c00126a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00126a6:	e8 0b f9 ff ff       	call   c0011fb6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126ab:	83 c4 10             	add    esp,0x10
c00126ae:	e8 98 aa 00 00       	call   c001d14b <enableIRQs()>
c00126b3:	90                   	nop
c00126b4:	83 c4 28             	add    esp,0x28
c00126b7:	5b                   	pop    ebx
c00126b8:	c3                   	ret    

c00126b9 <mapVASFirstTime>:
c00126b9:	55                   	push   ebp
c00126ba:	57                   	push   edi
c00126bb:	56                   	push   esi
c00126bc:	53                   	push   ebx
c00126bd:	83 ec 0c             	sub    esp,0xc
c00126c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126c5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00126c8:	4a                   	dec    edx
c00126c9:	0f 84 8e 00 00 00    	je     c001275d <mapVASFirstTime+0xa4>
c00126cf:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00126d2:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00126d5:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00126da:	c1 e5 15             	shl    ebp,0x15
c00126dd:	be 00 90 e7 01       	mov    esi,0x1e79000
c00126e2:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00126e8:	29 eb                	sub    ebx,ebp
c00126ea:	29 ee                	sub    esi,ebp
c00126ec:	e8 b8 d5 ff ff       	call   c000fca9 <Phys::allocatePage()>
c00126f1:	83 ec 0c             	sub    esp,0xc
c00126f4:	68 03 04 00 00       	push   0x403
c00126f9:	6a 01                	push   0x1
c00126fb:	53                   	push   ebx
c00126fc:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012702:	50                   	push   eax
c0012703:	57                   	push   edi
c0012704:	e8 a1 fb ff ff       	call   c00122aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012709:	83 c4 20             	add    esp,0x20
c001270c:	39 f3                	cmp    ebx,esi
c001270e:	75 dc                	jne    c00126ec <mapVASFirstTime+0x33>
c0012710:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012715:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c001271a:	29 ee                	sub    esi,ebp
c001271c:	29 e8                	sub    eax,ebp
c001271e:	89 c5                	mov    ebp,eax
c0012720:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012724:	19 db                	sbb    ebx,ebx
c0012726:	e8 7e d5 ff ff       	call   c000fca9 <Phys::allocatePage()>
c001272b:	83 e3 04             	and    ebx,0x4
c001272e:	83 ec 0c             	sub    esp,0xc
c0012731:	81 c3 03 04 00 00    	add    ebx,0x403
c0012737:	53                   	push   ebx
c0012738:	6a 01                	push   0x1
c001273a:	56                   	push   esi
c001273b:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012741:	50                   	push   eax
c0012742:	57                   	push   edi
c0012743:	e8 62 fb ff ff       	call   c00122aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012748:	83 c4 20             	add    esp,0x20
c001274b:	39 f5                	cmp    ebp,esi
c001274d:	75 d1                	jne    c0012720 <mapVASFirstTime+0x67>
c001274f:	0f 20 d8             	mov    eax,cr3
c0012752:	0f 22 d8             	mov    cr3,eax
c0012755:	83 c4 0c             	add    esp,0xc
c0012758:	5b                   	pop    ebx
c0012759:	5e                   	pop    esi
c001275a:	5f                   	pop    edi
c001275b:	5d                   	pop    ebp
c001275c:	c3                   	ret    
c001275d:	83 ec 0c             	sub    esp,0xc
c0012760:	68 4d 95 02 c0       	push   0xc002954d
c0012765:	e8 71 01 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001276a:	83 c4 10             	add    esp,0x10
c001276d:	83 c4 0c             	add    esp,0xc
c0012770:	5b                   	pop    ebx
c0012771:	5e                   	pop    esi
c0012772:	5f                   	pop    edi
c0012773:	5d                   	pop    ebp
c0012774:	c3                   	ret    

c0012775 <__cxa_atexit>:
c0012775:	31 c0                	xor    eax,eax
c0012777:	c3                   	ret    

c0012778 <__cxa_finalize>:
c0012778:	c3                   	ret    

c0012779 <__stack_chk_fail>:
c0012779:	55                   	push   ebp
c001277a:	89 e5                	mov    ebp,esp
c001277c:	83 ec 14             	sub    esp,0x14
c001277f:	68 66 95 02 c0       	push   0xc0029566
c0012784:	e8 52 01 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0012789:	58                   	pop    eax
c001278a:	5a                   	pop    edx
c001278b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001278e:	68 b6 95 02 c0       	push   0xc00295b6
c0012793:	e8 43 01 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0012798:	59                   	pop    ecx
c0012799:	58                   	pop    eax
c001279a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001279d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127a0:	68 b6 95 02 c0       	push   0xc00295b6
c00127a5:	e8 31 01 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00127aa:	5a                   	pop    edx
c00127ab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127ae:	59                   	pop    ecx
c00127af:	8b 00                	mov    eax,DWORD PTR [eax]
c00127b1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127b4:	68 b6 95 02 c0       	push   0xc00295b6
c00127b9:	e8 1d 01 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00127be:	5a                   	pop    edx
c00127bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127c2:	59                   	pop    ecx
c00127c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00127c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00127c7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127ca:	68 b6 95 02 c0       	push   0xc00295b6
c00127cf:	e8 07 01 00 00       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00127d4:	c7 04 24 be 95 02 c0 	mov    DWORD PTR [esp],0xc00295be
c00127db:	e8 cb 73 00 00       	call   c0019bab <Krnl::panic(char const*)>
c00127e0:	83 c4 10             	add    esp,0x10
c00127e3:	c9                   	leave  
c00127e4:	c3                   	ret    

c00127e5 <__cxa_pure_virtual>:
c00127e5:	83 ec 18             	sub    esp,0x18
c00127e8:	68 d6 95 02 c0       	push   0xc00295d6
c00127ed:	e8 b9 73 00 00       	call   c0019bab <Krnl::panic(char const*)>
c00127f2:	83 c4 1c             	add    esp,0x1c
c00127f5:	c3                   	ret    

c00127f6 <operator new[](unsigned long)>:
c00127f6:	e9 3b ce ff ff       	jmp    c000f636 <malloc>

c00127fb <operator delete(void*, unsigned long)>:
c00127fb:	e9 56 ce ff ff       	jmp    c000f656 <rfree>

c0012800 <operator delete[](void*)>:
c0012800:	e9 51 ce ff ff       	jmp    c000f656 <rfree>

c0012805 <operator delete[](void*, unsigned long)>:
c0012805:	e9 4c ce ff ff       	jmp    c000f656 <rfree>

c001280a <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001280a:	57                   	push   edi
c001280b:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012810:	56                   	push   esi
c0012811:	be ec 95 02 c0       	mov    esi,0xc00295ec
c0012816:	53                   	push   ebx
c0012817:	83 ec 40             	sub    esp,0x40
c001281a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001281e:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012822:	fc                   	cld    
c0012823:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012825:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012829:	83 f9 3e             	cmp    ecx,0x3e
c001282c:	7e 05                	jle    c0012833 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c001282e:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012833:	89 df                	mov    edi,ebx
c0012835:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012839:	eb 02                	jmp    c001283d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c001283b:	89 c7                	mov    edi,eax
c001283d:	31 d2                	xor    edx,edx
c001283f:	46                   	inc    esi
c0012840:	89 f8                	mov    eax,edi
c0012842:	f7 f1                	div    ecx
c0012844:	39 cf                	cmp    edi,ecx
c0012846:	73 f3                	jae    c001283b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012848:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001284b:	eb 02                	jmp    c001284f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c001284d:	89 c3                	mov    ebx,eax
c001284f:	31 d2                	xor    edx,edx
c0012851:	4e                   	dec    esi
c0012852:	89 d8                	mov    eax,ebx
c0012854:	f7 f1                	div    ecx
c0012856:	39 cb                	cmp    ebx,ecx
c0012858:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c001285c:	88 16                	mov    BYTE PTR [esi],dl
c001285e:	73 ed                	jae    c001284d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012860:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012864:	83 c4 40             	add    esp,0x40
c0012867:	5b                   	pop    ebx
c0012868:	5e                   	pop    esi
c0012869:	5f                   	pop    edi
c001286a:	c3                   	ret    

c001286b <Dbg::logc(char)>:
c001286b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001286f:	ba fd 03 00 00       	mov    edx,0x3fd
c0012874:	ec                   	in     al,dx
c0012875:	a8 20                	test   al,0x20
c0012877:	74 fb                	je     c0012874 <Dbg::logc(char)+0x9>
c0012879:	ba f8 03 00 00       	mov    edx,0x3f8
c001287e:	88 c8                	mov    al,cl
c0012880:	ee                   	out    dx,al
c0012881:	c3                   	ret    

c0012882 <Dbg::logs(char*)>:
c0012882:	53                   	push   ebx
c0012883:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012887:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001288a:	84 c0                	test   al,al
c001288c:	74 0f                	je     c001289d <Dbg::logs(char*)+0x1b>
c001288e:	50                   	push   eax
c001288f:	43                   	inc    ebx
c0012890:	e8 d6 ff ff ff       	call   c001286b <Dbg::logc(char)>
c0012895:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012898:	5a                   	pop    edx
c0012899:	84 c0                	test   al,al
c001289b:	75 f1                	jne    c001288e <Dbg::logs(char*)+0xc>
c001289d:	5b                   	pop    ebx
c001289e:	c3                   	ret    

c001289f <Dbg::logWriteInt(unsigned int)>:
c001289f:	83 ec 10             	sub    esp,0x10
c00128a2:	6a 0a                	push   0xa
c00128a4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128a8:	50                   	push   eax
c00128a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128ad:	e8 58 ff ff ff       	call   c001280a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128b2:	50                   	push   eax
c00128b3:	e8 ca ff ff ff       	call   c0012882 <Dbg::logs(char*)>
c00128b8:	83 c4 20             	add    esp,0x20
c00128bb:	c3                   	ret    

c00128bc <Dbg::logWriteIntBase(unsigned int, int)>:
c00128bc:	83 ec 10             	sub    esp,0x10
c00128bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128c3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128c7:	50                   	push   eax
c00128c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128cc:	e8 39 ff ff ff       	call   c001280a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128d1:	50                   	push   eax
c00128d2:	e8 ab ff ff ff       	call   c0012882 <Dbg::logs(char*)>
c00128d7:	83 c4 20             	add    esp,0x20
c00128da:	c3                   	ret    

c00128db <Dbg::kprintf(char const*, ...)>:
c00128db:	55                   	push   ebp
c00128dc:	57                   	push   edi
c00128dd:	56                   	push   esi
c00128de:	53                   	push   ebx
c00128df:	83 ec 0c             	sub    esp,0xc
c00128e2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00128e6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00128ea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128ee:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00128f1:	84 c0                	test   al,al
c00128f3:	74 4a                	je     c001293f <Dbg::kprintf(char const*, ...)+0x64>
c00128f5:	31 db                	xor    ebx,ebx
c00128f7:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00128fa:	3c 25                	cmp    al,0x25
c00128fc:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00128ff:	0f 85 e4 00 00 00    	jne    c00129e9 <Dbg::kprintf(char const*, ...)+0x10e>
c0012905:	83 c3 02             	add    ebx,0x2
c0012908:	8a 07                	mov    al,BYTE PTR [edi]
c001290a:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c001290d:	83 e8 25             	sub    eax,0x25
c0012910:	3c 53                	cmp    al,0x53
c0012912:	0f 87 ba 00 00 00    	ja     c00129d2 <Dbg::kprintf(char const*, ...)+0xf7>
c0012918:	0f b6 c0             	movzx  eax,al
c001291b:	ff 24 85 2c 96 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd69d4]
c0012922:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012926:	89 c8                	mov    eax,ecx
c0012928:	83 c1 04             	add    ecx,0x4
c001292b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001292f:	ff 30                	push   DWORD PTR [eax]
c0012931:	e8 4c ff ff ff       	call   c0012882 <Dbg::logs(char*)>
c0012936:	58                   	pop    eax
c0012937:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001293b:	84 c0                	test   al,al
c001293d:	75 b8                	jne    c00128f7 <Dbg::kprintf(char const*, ...)+0x1c>
c001293f:	83 c4 0c             	add    esp,0xc
c0012942:	5b                   	pop    ebx
c0012943:	5e                   	pop    esi
c0012944:	5f                   	pop    edi
c0012945:	5d                   	pop    ebp
c0012946:	c3                   	ret    
c0012947:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001294b:	89 d0                	mov    eax,edx
c001294d:	83 c2 04             	add    edx,0x4
c0012950:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012954:	ff 30                	push   DWORD PTR [eax]
c0012956:	e8 44 ff ff ff       	call   c001289f <Dbg::logWriteInt(unsigned int)>
c001295b:	58                   	pop    eax
c001295c:	eb d9                	jmp    c0012937 <Dbg::kprintf(char const*, ...)+0x5c>
c001295e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012962:	89 d0                	mov    eax,edx
c0012964:	83 c2 04             	add    edx,0x4
c0012967:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001296a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001296e:	50                   	push   eax
c001296f:	e8 f7 fe ff ff       	call   c001286b <Dbg::logc(char)>
c0012974:	58                   	pop    eax
c0012975:	eb c0                	jmp    c0012937 <Dbg::kprintf(char const*, ...)+0x5c>
c0012977:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001297b:	89 c8                	mov    eax,ecx
c001297d:	83 c1 04             	add    ecx,0x4
c0012980:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012984:	ff 30                	push   DWORD PTR [eax]
c0012986:	e8 14 ff ff ff       	call   c001289f <Dbg::logWriteInt(unsigned int)>
c001298b:	5f                   	pop    edi
c001298c:	eb a9                	jmp    c0012937 <Dbg::kprintf(char const*, ...)+0x5c>
c001298e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012992:	89 c8                	mov    eax,ecx
c0012994:	83 c1 04             	add    ecx,0x4
c0012997:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001299b:	6a 10                	push   0x10
c001299d:	ff 30                	push   DWORD PTR [eax]
c001299f:	e8 18 ff ff ff       	call   c00128bc <Dbg::logWriteIntBase(unsigned int, int)>
c00129a4:	59                   	pop    ecx
c00129a5:	5f                   	pop    edi
c00129a6:	eb 8f                	jmp    c0012937 <Dbg::kprintf(char const*, ...)+0x5c>
c00129a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00129ac:	89 d0                	mov    eax,edx
c00129ae:	83 c2 08             	add    edx,0x8
c00129b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00129b5:	6a 10                	push   0x10
c00129b7:	ff 30                	push   DWORD PTR [eax]
c00129b9:	e8 fe fe ff ff       	call   c00128bc <Dbg::logWriteIntBase(unsigned int, int)>
c00129be:	58                   	pop    eax
c00129bf:	5a                   	pop    edx
c00129c0:	e9 72 ff ff ff       	jmp    c0012937 <Dbg::kprintf(char const*, ...)+0x5c>
c00129c5:	6a 25                	push   0x25
c00129c7:	e8 9f fe ff ff       	call   c001286b <Dbg::logc(char)>
c00129cc:	58                   	pop    eax
c00129cd:	e9 65 ff ff ff       	jmp    c0012937 <Dbg::kprintf(char const*, ...)+0x5c>
c00129d2:	6a 25                	push   0x25
c00129d4:	e8 92 fe ff ff       	call   c001286b <Dbg::logc(char)>
c00129d9:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00129dc:	50                   	push   eax
c00129dd:	e8 89 fe ff ff       	call   c001286b <Dbg::logc(char)>
c00129e2:	5a                   	pop    edx
c00129e3:	59                   	pop    ecx
c00129e4:	e9 4e ff ff ff       	jmp    c0012937 <Dbg::kprintf(char const*, ...)+0x5c>
c00129e9:	50                   	push   eax
c00129ea:	89 eb                	mov    ebx,ebp
c00129ec:	e8 7a fe ff ff       	call   c001286b <Dbg::logc(char)>
c00129f1:	89 fd                	mov    ebp,edi
c00129f3:	58                   	pop    eax
c00129f4:	e9 3e ff ff ff       	jmp    c0012937 <Dbg::kprintf(char const*, ...)+0x5c>
c00129f9:	90                   	nop

c00129fa <File::read(unsigned long long, void*, int*)>:
c00129fa:	53                   	push   ebx
c00129fb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129ff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a03:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a0a:	3c 19                	cmp    al,0x19
c0012a0c:	77 35                	ja     c0012a43 <File::read(unsigned long long, void*, int*)+0x49>
c0012a0e:	8b 04 85 e0 d4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2b20]
c0012a15:	85 c0                	test   eax,eax
c0012a17:	74 2a                	je     c0012a43 <File::read(unsigned long long, void*, int*)+0x49>
c0012a19:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a1f:	85 c0                	test   eax,eax
c0012a21:	74 20                	je     c0012a43 <File::read(unsigned long long, void*, int*)+0x49>
c0012a23:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a27:	74 21                	je     c0012a4a <File::read(unsigned long long, void*, int*)+0x50>
c0012a29:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a2b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a2f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a39:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a3d:	5b                   	pop    ebx
c0012a3e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012a41:	ff e0                	jmp    eax
c0012a43:	b8 0b 00 00 00       	mov    eax,0xb
c0012a48:	eb 05                	jmp    c0012a4f <File::read(unsigned long long, void*, int*)+0x55>
c0012a4a:	b8 05 00 00 00       	mov    eax,0x5
c0012a4f:	5b                   	pop    ebx
c0012a50:	c3                   	ret    
c0012a51:	90                   	nop

c0012a52 <File::write(unsigned long long, void*, int*)>:
c0012a52:	53                   	push   ebx
c0012a53:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a57:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a5b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a62:	3c 19                	cmp    al,0x19
c0012a64:	77 35                	ja     c0012a9b <File::write(unsigned long long, void*, int*)+0x49>
c0012a66:	8b 04 85 e0 d4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2b20]
c0012a6d:	85 c0                	test   eax,eax
c0012a6f:	74 2a                	je     c0012a9b <File::write(unsigned long long, void*, int*)+0x49>
c0012a71:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a77:	85 c0                	test   eax,eax
c0012a79:	74 20                	je     c0012a9b <File::write(unsigned long long, void*, int*)+0x49>
c0012a7b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a7f:	74 21                	je     c0012aa2 <File::write(unsigned long long, void*, int*)+0x50>
c0012a81:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a83:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a87:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a95:	5b                   	pop    ebx
c0012a96:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012a99:	ff e0                	jmp    eax
c0012a9b:	b8 0b 00 00 00       	mov    eax,0xb
c0012aa0:	eb 05                	jmp    c0012aa7 <File::write(unsigned long long, void*, int*)+0x55>
c0012aa2:	b8 05 00 00 00       	mov    eax,0x5
c0012aa7:	5b                   	pop    ebx
c0012aa8:	c3                   	ret    
c0012aa9:	90                   	nop

c0012aaa <Directory::read(unsigned long long, void*, int*)>:
c0012aaa:	53                   	push   ebx
c0012aab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012aaf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ab3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012aba:	3c 19                	cmp    al,0x19
c0012abc:	77 35                	ja     c0012af3 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012abe:	8b 04 85 e0 d4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2b20]
c0012ac5:	85 c0                	test   eax,eax
c0012ac7:	74 2a                	je     c0012af3 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ac9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012acf:	85 c0                	test   eax,eax
c0012ad1:	74 20                	je     c0012af3 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ad3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ad7:	74 21                	je     c0012afa <Directory::read(unsigned long long, void*, int*)+0x50>
c0012ad9:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012adb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012adf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012ae5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ae9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012aed:	5b                   	pop    ebx
c0012aee:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012af1:	ff e0                	jmp    eax
c0012af3:	b8 0b 00 00 00       	mov    eax,0xb
c0012af8:	eb 05                	jmp    c0012aff <Directory::read(unsigned long long, void*, int*)+0x55>
c0012afa:	b8 05 00 00 00       	mov    eax,0x5
c0012aff:	5b                   	pop    ebx
c0012b00:	c3                   	ret    
c0012b01:	90                   	nop

c0012b02 <Directory::write(unsigned long long, void*, int*)>:
c0012b02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b06:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012b0d:	b8 0b 00 00 00       	mov    eax,0xb
c0012b12:	80 fa 19             	cmp    dl,0x19
c0012b15:	77 18                	ja     c0012b2f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b17:	8b 14 95 e0 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b20]
c0012b1e:	85 d2                	test   edx,edx
c0012b20:	74 0d                	je     c0012b2f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b22:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012b29:	19 c0                	sbb    eax,eax
c0012b2b:	83 e0 0a             	and    eax,0xa
c0012b2e:	40                   	inc    eax
c0012b2f:	c3                   	ret    

c0012b30 <File::isAtty()>:
c0012b30:	31 c0                	xor    eax,eax
c0012b32:	c3                   	ret    
c0012b33:	90                   	nop

c0012b34 <Directory::isAtty()>:
c0012b34:	31 c0                	xor    eax,eax
c0012b36:	c3                   	ret    
c0012b37:	90                   	nop

c0012b38 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012b38:	b8 0a 00 00 00       	mov    eax,0xa
c0012b3d:	c3                   	ret    

c0012b3e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012b3e:	b8 0a 00 00 00       	mov    eax,0xa
c0012b43:	c3                   	ret    

c0012b44 <File::~File()>:
c0012b44:	83 ec 0c             	sub    esp,0xc
c0012b47:	ba e8 97 02 c0       	mov    edx,0xc00297e8
c0012b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b50:	89 10                	mov    DWORD PTR [eax],edx
c0012b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b56:	83 ec 0c             	sub    esp,0xc
c0012b59:	50                   	push   eax
c0012b5a:	e8 2b eb ff ff       	call   c001168a <UnixFile::~UnixFile()>
c0012b5f:	83 c4 10             	add    esp,0x10
c0012b62:	90                   	nop
c0012b63:	83 c4 0c             	add    esp,0xc
c0012b66:	c3                   	ret    
c0012b67:	90                   	nop

c0012b68 <File::~File()>:
c0012b68:	83 ec 0c             	sub    esp,0xc
c0012b6b:	83 ec 0c             	sub    esp,0xc
c0012b6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b72:	e8 cd ff ff ff       	call   c0012b44 <File::~File()>
c0012b77:	83 c4 10             	add    esp,0x10
c0012b7a:	83 ec 08             	sub    esp,0x8
c0012b7d:	68 14 01 00 00       	push   0x114
c0012b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b86:	e8 70 fc ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0012b8b:	83 c4 10             	add    esp,0x10
c0012b8e:	83 c4 0c             	add    esp,0xc
c0012b91:	c3                   	ret    

c0012b92 <Directory::~Directory()>:
c0012b92:	83 ec 0c             	sub    esp,0xc
c0012b95:	ba 04 98 02 c0       	mov    edx,0xc0029804
c0012b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b9e:	89 10                	mov    DWORD PTR [eax],edx
c0012ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ba4:	83 ec 0c             	sub    esp,0xc
c0012ba7:	50                   	push   eax
c0012ba8:	e8 dd ea ff ff       	call   c001168a <UnixFile::~UnixFile()>
c0012bad:	83 c4 10             	add    esp,0x10
c0012bb0:	90                   	nop
c0012bb1:	83 c4 0c             	add    esp,0xc
c0012bb4:	c3                   	ret    
c0012bb5:	90                   	nop

c0012bb6 <Directory::~Directory()>:
c0012bb6:	83 ec 0c             	sub    esp,0xc
c0012bb9:	83 ec 0c             	sub    esp,0xc
c0012bbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bc0:	e8 cd ff ff ff       	call   c0012b92 <Directory::~Directory()>
c0012bc5:	83 c4 10             	add    esp,0x10
c0012bc8:	83 ec 08             	sub    esp,0x8
c0012bcb:	68 14 01 00 00       	push   0x114
c0012bd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bd4:	e8 22 fc ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0012bd9:	83 c4 10             	add    esp,0x10
c0012bdc:	83 c4 0c             	add    esp,0xc
c0012bdf:	c3                   	ret    

c0012be0 <Filesystem::Filesystem()>:
c0012be0:	ba 84 97 02 c0       	mov    edx,0xc0029784
c0012be5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012be9:	89 10                	mov    DWORD PTR [eax],edx
c0012beb:	8b 15 48 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d048
c0012bf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bf5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012bf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bfc:	a3 48 d0 02 c0       	mov    ds:0xc002d048,eax
c0012c01:	90                   	nop
c0012c02:	c3                   	ret    
c0012c03:	90                   	nop

c0012c04 <Filesystem::~Filesystem()>:
c0012c04:	ba 84 97 02 c0       	mov    edx,0xc0029784
c0012c09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c0d:	89 10                	mov    DWORD PTR [eax],edx
c0012c0f:	90                   	nop
c0012c10:	c3                   	ret    
c0012c11:	90                   	nop

c0012c12 <Filesystem::~Filesystem()>:
c0012c12:	83 ec 0c             	sub    esp,0xc
c0012c15:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c19:	e8 e6 ff ff ff       	call   c0012c04 <Filesystem::~Filesystem()>
c0012c1e:	83 c4 04             	add    esp,0x4
c0012c21:	83 ec 08             	sub    esp,0x8
c0012c24:	6a 08                	push   0x8
c0012c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c2a:	e8 cc fb ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0012c2f:	83 c4 10             	add    esp,0x10
c0012c32:	83 c4 0c             	add    esp,0xc
c0012c35:	c3                   	ret    

c0012c36 <Fs::getcwd(Process*, char*, int)>:
c0012c36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c3a:	31 c0                	xor    eax,eax
c0012c3c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c3f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012c43:	7d 15                	jge    c0012c5a <Fs::getcwd(Process*, char*, int)+0x24>
c0012c45:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c49:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c50:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c53:	84 c9                	test   cl,cl
c0012c55:	74 06                	je     c0012c5d <Fs::getcwd(Process*, char*, int)+0x27>
c0012c57:	40                   	inc    eax
c0012c58:	eb e2                	jmp    c0012c3c <Fs::getcwd(Process*, char*, int)+0x6>
c0012c5a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c5d:	31 c0                	xor    eax,eax
c0012c5f:	c3                   	ret    

c0012c60 <Fs::initVFS()>:
c0012c60:	83 ec 18             	sub    esp,0x18
c0012c63:	6a 08                	push   0x8
c0012c65:	e8 cc c9 ff ff       	call   c000f636 <malloc>
c0012c6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c6d:	e8 5c d6 00 00       	call   c00202ce <FAT::FAT()>
c0012c72:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012c79:	e8 b8 c9 ff ff       	call   c000f636 <malloc>
c0012c7e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c81:	e8 a0 e8 00 00       	call   c0021526 <ISO9660::ISO9660()>
c0012c86:	83 c4 1c             	add    esp,0x1c
c0012c89:	c3                   	ret    

c0012c8a <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012c8a:	55                   	push   ebp
c0012c8b:	57                   	push   edi
c0012c8c:	56                   	push   esi
c0012c8d:	53                   	push   ebx
c0012c8e:	81 ec 10 04 00 00    	sub    esp,0x410
c0012c94:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012c9b:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012ca2:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012ca9:	68 00 04 00 00       	push   0x400
c0012cae:	6a 00                	push   0x0
c0012cb0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012cb4:	56                   	push   esi
c0012cb5:	e8 1c da fe ff       	call   c00006d6 <memset>
c0012cba:	83 c4 10             	add    esp,0x10
c0012cbd:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012cc1:	75 0b                	jne    c0012cce <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012cc3:	50                   	push   eax
c0012cc4:	50                   	push   eax
c0012cc5:	57                   	push   edi
c0012cc6:	56                   	push   esi
c0012cc7:	e8 a9 da fe ff       	call   c0000775 <strcpy>
c0012ccc:	eb 41                	jmp    c0012d0f <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012cce:	8a 07                	mov    al,BYTE PTR [edi]
c0012cd0:	3c 5c                	cmp    al,0x5c
c0012cd2:	74 04                	je     c0012cd8 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012cd4:	3c 2f                	cmp    al,0x2f
c0012cd6:	75 18                	jne    c0012cf0 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012cd8:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012cdb:	3c 60                	cmp    al,0x60
c0012cdd:	7e 03                	jle    c0012ce2 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012cdf:	83 e8 20             	sub    eax,0x20
c0012ce2:	88 04 24             	mov    BYTE PTR [esp],al
c0012ce5:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012cec:	50                   	push   eax
c0012ced:	50                   	push   eax
c0012cee:	eb 18                	jmp    c0012d08 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012cf0:	50                   	push   eax
c0012cf1:	50                   	push   eax
c0012cf2:	55                   	push   ebp
c0012cf3:	56                   	push   esi
c0012cf4:	e8 7c da fe ff       	call   c0000775 <strcpy>
c0012cf9:	5a                   	pop    edx
c0012cfa:	59                   	pop    ecx
c0012cfb:	68 fc ac 02 c0       	push   0xc002acfc
c0012d00:	56                   	push   esi
c0012d01:	e8 26 db fe ff       	call   c000082c <strcat>
c0012d06:	5d                   	pop    ebp
c0012d07:	58                   	pop    eax
c0012d08:	57                   	push   edi
c0012d09:	56                   	push   esi
c0012d0a:	e8 1d db fe ff       	call   c000082c <strcat>
c0012d0f:	83 c4 10             	add    esp,0x10
c0012d12:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012d15:	3c 60                	cmp    al,0x60
c0012d17:	7e 03                	jle    c0012d1c <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012d19:	83 e8 20             	sub    eax,0x20
c0012d1c:	88 04 24             	mov    BYTE PTR [esp],al
c0012d1f:	88 03                	mov    BYTE PTR [ebx],al
c0012d21:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d28:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012d2e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012d32:	bf 03 00 00 00       	mov    edi,0x3
c0012d37:	b8 03 00 00 00       	mov    eax,0x3
c0012d3c:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012d3f:	84 d2                	test   dl,dl
c0012d41:	0f 84 91 00 00 00    	je     c0012dd8 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012d47:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012d4a:	80 fa 5c             	cmp    dl,0x5c
c0012d4d:	74 05                	je     c0012d54 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012d4f:	80 fa 2f             	cmp    dl,0x2f
c0012d52:	75 12                	jne    c0012d66 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d54:	89 c5                	mov    ebp,eax
c0012d56:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d5b:	74 09                	je     c0012d66 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d5d:	40                   	inc    eax
c0012d5e:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012d62:	89 cf                	mov    edi,ecx
c0012d64:	eb d6                	jmp    c0012d3c <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012d66:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012d6b:	75 5b                	jne    c0012dc8 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d6d:	80 fa 2e             	cmp    dl,0x2e
c0012d70:	75 56                	jne    c0012dc8 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d72:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012d76:	74 19                	je     c0012d91 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012d78:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d7d:	74 53                	je     c0012dd2 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d7f:	89 f9                	mov    ecx,edi
c0012d81:	41                   	inc    ecx
c0012d82:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d85:	80 fa 2f             	cmp    dl,0x2f
c0012d88:	74 f7                	je     c0012d81 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d8a:	80 fa 5c             	cmp    dl,0x5c
c0012d8d:	74 f2                	je     c0012d81 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d8f:	eb d1                	jmp    c0012d62 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d91:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d96:	74 3a                	je     c0012dd2 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d98:	83 f8 03             	cmp    eax,0x3
c0012d9b:	74 c5                	je     c0012d62 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d9d:	41                   	inc    ecx
c0012d9e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012da1:	80 fa 2f             	cmp    dl,0x2f
c0012da4:	74 f7                	je     c0012d9d <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012da6:	80 fa 5c             	cmp    dl,0x5c
c0012da9:	74 f2                	je     c0012d9d <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012dab:	48                   	dec    eax
c0012dac:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012db0:	75 06                	jne    c0012db8 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012db2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012db6:	eb f3                	jmp    c0012dab <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012db8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dbc:	74 07                	je     c0012dc5 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012dbe:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dc2:	48                   	dec    eax
c0012dc3:	eb f3                	jmp    c0012db8 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012dc5:	40                   	inc    eax
c0012dc6:	eb 9a                	jmp    c0012d62 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dc8:	80 fa 2f             	cmp    dl,0x2f
c0012dcb:	74 95                	je     c0012d62 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dcd:	80 fa 5c             	cmp    dl,0x5c
c0012dd0:	74 90                	je     c0012d62 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dd2:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012dd5:	40                   	inc    eax
c0012dd6:	eb 8a                	jmp    c0012d62 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dd8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ddc:	83 ec 0c             	sub    esp,0xc
c0012ddf:	53                   	push   ebx
c0012de0:	e8 0e d9 fe ff       	call   c00006f3 <strlen>
c0012de5:	83 c4 10             	add    esp,0x10
c0012de8:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012ded:	75 26                	jne    c0012e15 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012def:	83 ec 0c             	sub    esp,0xc
c0012df2:	53                   	push   ebx
c0012df3:	e8 fb d8 fe ff       	call   c00006f3 <strlen>
c0012df8:	83 c4 10             	add    esp,0x10
c0012dfb:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012e00:	74 26                	je     c0012e28 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012e02:	83 ec 0c             	sub    esp,0xc
c0012e05:	53                   	push   ebx
c0012e06:	e8 e8 d8 fe ff       	call   c00006f3 <strlen>
c0012e0b:	83 c4 10             	add    esp,0x10
c0012e0e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e13:	eb c7                	jmp    c0012ddc <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012e15:	83 ec 0c             	sub    esp,0xc
c0012e18:	53                   	push   ebx
c0012e19:	e8 d5 d8 fe ff       	call   c00006f3 <strlen>
c0012e1e:	83 c4 10             	add    esp,0x10
c0012e21:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e26:	74 c7                	je     c0012def <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012e28:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012e2e:	5b                   	pop    ebx
c0012e2f:	5e                   	pop    esi
c0012e30:	5f                   	pop    edi
c0012e31:	5d                   	pop    ebp
c0012e32:	c3                   	ret    
c0012e33:	90                   	nop

c0012e34 <File::File(char const*, Process*)>:
c0012e34:	83 ec 0c             	sub    esp,0xc
c0012e37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e3b:	83 ec 08             	sub    esp,0x8
c0012e3e:	6a 00                	push   0x0
c0012e40:	50                   	push   eax
c0012e41:	e8 62 e6 ff ff       	call   c00114a8 <UnixFile::UnixFile(int)>
c0012e46:	83 c4 10             	add    esp,0x10
c0012e49:	ba e8 97 02 c0       	mov    edx,0xc00297e8
c0012e4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e52:	89 10                	mov    DWORD PTR [eax],edx
c0012e54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e58:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e62:	83 c0 0d             	add    eax,0xd
c0012e65:	83 ec 04             	sub    esp,0x4
c0012e68:	52                   	push   edx
c0012e69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e6d:	50                   	push   eax
c0012e6e:	e8 17 fe ff ff       	call   c0012c8a <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e73:	83 c4 10             	add    esp,0x10
c0012e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e7a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012e7d:	8d 50 bf             	lea    edx,[eax-0x41]
c0012e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e84:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e8e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012e92:	90                   	nop
c0012e93:	83 c4 0c             	add    esp,0xc
c0012e96:	c3                   	ret    
c0012e97:	90                   	nop

c0012e98 <File::open(FileOpenMode)>:
c0012e98:	53                   	push   ebx
c0012e99:	b8 0b 00 00 00       	mov    eax,0xb
c0012e9e:	83 ec 08             	sub    esp,0x8
c0012ea1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ea5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012eac:	80 fa 19             	cmp    dl,0x19
c0012eaf:	77 40                	ja     c0012ef1 <File::open(FileOpenMode)+0x59>
c0012eb1:	8b 14 95 e0 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b20]
c0012eb8:	85 d2                	test   edx,edx
c0012eba:	74 35                	je     c0012ef1 <File::open(FileOpenMode)+0x59>
c0012ebc:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012ec2:	85 d2                	test   edx,edx
c0012ec4:	74 2b                	je     c0012ef1 <File::open(FileOpenMode)+0x59>
c0012ec6:	b8 06 00 00 00       	mov    eax,0x6
c0012ecb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012ecf:	75 20                	jne    c0012ef1 <File::open(FileOpenMode)+0x59>
c0012ed1:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ed3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ed9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012edd:	51                   	push   ecx
c0012ede:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012ee1:	51                   	push   ecx
c0012ee2:	52                   	push   edx
c0012ee3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012ee6:	83 c4 10             	add    esp,0x10
c0012ee9:	85 c0                	test   eax,eax
c0012eeb:	75 04                	jne    c0012ef1 <File::open(FileOpenMode)+0x59>
c0012eed:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012ef1:	83 c4 08             	add    esp,0x8
c0012ef4:	5b                   	pop    ebx
c0012ef5:	c3                   	ret    

c0012ef6 <File::close()>:
c0012ef6:	53                   	push   ebx
c0012ef7:	b8 0b 00 00 00       	mov    eax,0xb
c0012efc:	83 ec 08             	sub    esp,0x8
c0012eff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f03:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f0a:	80 fa 19             	cmp    dl,0x19
c0012f0d:	77 41                	ja     c0012f50 <File::close()+0x5a>
c0012f0f:	8b 1c 95 e0 d4 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2b20]
c0012f16:	85 db                	test   ebx,ebx
c0012f18:	74 36                	je     c0012f50 <File::close()+0x5a>
c0012f1a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012f21:	74 2d                	je     c0012f50 <File::close()+0x5a>
c0012f23:	b8 05 00 00 00       	mov    eax,0x5
c0012f28:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f2c:	74 22                	je     c0012f50 <File::close()+0x5a>
c0012f2e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012f32:	8b 04 95 e0 d4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2b20]
c0012f39:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f3f:	53                   	push   ebx
c0012f40:	53                   	push   ebx
c0012f41:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f43:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f49:	50                   	push   eax
c0012f4a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012f4d:	83 c4 10             	add    esp,0x10
c0012f50:	83 c4 08             	add    esp,0x8
c0012f53:	5b                   	pop    ebx
c0012f54:	c3                   	ret    
c0012f55:	90                   	nop

c0012f56 <File::seek(unsigned long long)>:
c0012f56:	56                   	push   esi
c0012f57:	53                   	push   ebx
c0012f58:	b8 0b 00 00 00       	mov    eax,0xb
c0012f5d:	51                   	push   ecx
c0012f5e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f62:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f66:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012f6d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f71:	80 fa 19             	cmp    dl,0x19
c0012f74:	77 31                	ja     c0012fa7 <File::seek(unsigned long long)+0x51>
c0012f76:	8b 14 95 e0 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b20]
c0012f7d:	85 d2                	test   edx,edx
c0012f7f:	74 26                	je     c0012fa7 <File::seek(unsigned long long)+0x51>
c0012f81:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f87:	85 d2                	test   edx,edx
c0012f89:	74 1c                	je     c0012fa7 <File::seek(unsigned long long)+0x51>
c0012f8b:	b8 05 00 00 00       	mov    eax,0x5
c0012f90:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012f94:	74 11                	je     c0012fa7 <File::seek(unsigned long long)+0x51>
c0012f96:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f98:	53                   	push   ebx
c0012f99:	51                   	push   ecx
c0012f9a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012fa0:	52                   	push   edx
c0012fa1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012fa4:	83 c4 10             	add    esp,0x10
c0012fa7:	5a                   	pop    edx
c0012fa8:	5b                   	pop    ebx
c0012fa9:	5e                   	pop    esi
c0012faa:	c3                   	ret    
c0012fab:	90                   	nop

c0012fac <File::tell(unsigned long long*)>:
c0012fac:	83 ec 0c             	sub    esp,0xc
c0012faf:	b8 0b 00 00 00       	mov    eax,0xb
c0012fb4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fb8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012fbf:	80 fa 19             	cmp    dl,0x19
c0012fc2:	77 34                	ja     c0012ff8 <File::tell(unsigned long long*)+0x4c>
c0012fc4:	8b 14 95 e0 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b20]
c0012fcb:	85 d2                	test   edx,edx
c0012fcd:	74 29                	je     c0012ff8 <File::tell(unsigned long long*)+0x4c>
c0012fcf:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fd5:	85 d2                	test   edx,edx
c0012fd7:	74 1f                	je     c0012ff8 <File::tell(unsigned long long*)+0x4c>
c0012fd9:	b8 05 00 00 00       	mov    eax,0x5
c0012fde:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012fe2:	74 14                	je     c0012ff8 <File::tell(unsigned long long*)+0x4c>
c0012fe4:	50                   	push   eax
c0012fe5:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fe7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012feb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012ff1:	52                   	push   edx
c0012ff2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012ff5:	83 c4 10             	add    esp,0x10
c0012ff8:	83 c4 0c             	add    esp,0xc
c0012ffb:	c3                   	ret    

c0012ffc <File::rewind()>:
c0012ffc:	83 ec 10             	sub    esp,0x10
c0012fff:	6a 00                	push   0x0
c0013001:	6a 00                	push   0x0
c0013003:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013007:	e8 4a ff ff ff       	call   c0012f56 <File::seek(unsigned long long)>
c001300c:	83 c4 1c             	add    esp,0x1c
c001300f:	c3                   	ret    

c0013010 <File::unlink()>:
c0013010:	83 ec 0c             	sub    esp,0xc
c0013013:	b8 0b 00 00 00       	mov    eax,0xb
c0013018:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001301c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013023:	80 f9 19             	cmp    cl,0x19
c0013026:	77 2f                	ja     c0013057 <File::unlink()+0x47>
c0013028:	8b 0c 8d e0 d4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2b20]
c001302f:	85 c9                	test   ecx,ecx
c0013031:	74 24                	je     c0013057 <File::unlink()+0x47>
c0013033:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013039:	85 c9                	test   ecx,ecx
c001303b:	74 1a                	je     c0013057 <File::unlink()+0x47>
c001303d:	b8 06 00 00 00       	mov    eax,0x6
c0013042:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013046:	75 0f                	jne    c0013057 <File::unlink()+0x47>
c0013048:	83 c2 0d             	add    edx,0xd
c001304b:	50                   	push   eax
c001304c:	50                   	push   eax
c001304d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001304f:	52                   	push   edx
c0013050:	51                   	push   ecx
c0013051:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013054:	83 c4 10             	add    esp,0x10
c0013057:	83 c4 0c             	add    esp,0xc
c001305a:	c3                   	ret    
c001305b:	90                   	nop

c001305c <File::rename(char const*)>:
c001305c:	83 ec 0c             	sub    esp,0xc
c001305f:	b8 0b 00 00 00       	mov    eax,0xb
c0013064:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013068:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001306f:	80 f9 19             	cmp    cl,0x19
c0013072:	77 32                	ja     c00130a6 <File::rename(char const*)+0x4a>
c0013074:	8b 0c 8d e0 d4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2b20]
c001307b:	85 c9                	test   ecx,ecx
c001307d:	74 27                	je     c00130a6 <File::rename(char const*)+0x4a>
c001307f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013085:	85 c9                	test   ecx,ecx
c0013087:	74 1d                	je     c00130a6 <File::rename(char const*)+0x4a>
c0013089:	b8 06 00 00 00       	mov    eax,0x6
c001308e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013092:	75 12                	jne    c00130a6 <File::rename(char const*)+0x4a>
c0013094:	83 c2 0d             	add    edx,0xd
c0013097:	50                   	push   eax
c0013098:	8b 01                	mov    eax,DWORD PTR [ecx]
c001309a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001309e:	52                   	push   edx
c001309f:	51                   	push   ecx
c00130a0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00130a3:	83 c4 10             	add    esp,0x10
c00130a6:	83 c4 0c             	add    esp,0xc
c00130a9:	c3                   	ret    

c00130aa <File::chfatattr(unsigned char, unsigned char)>:
c00130aa:	57                   	push   edi
c00130ab:	b8 0b 00 00 00       	mov    eax,0xb
c00130b0:	56                   	push   esi
c00130b1:	53                   	push   ebx
c00130b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130b6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00130ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130c1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00130c5:	80 f9 19             	cmp    cl,0x19
c00130c8:	77 37                	ja     c0013101 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130ca:	8b 0c 8d e0 d4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2b20]
c00130d1:	85 c9                	test   ecx,ecx
c00130d3:	74 2c                	je     c0013101 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130d5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130db:	85 c9                	test   ecx,ecx
c00130dd:	74 22                	je     c0013101 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130df:	b8 06 00 00 00       	mov    eax,0x6
c00130e4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130e8:	75 17                	jne    c0013101 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130ea:	8b 39                	mov    edi,DWORD PTR [ecx]
c00130ec:	89 f0                	mov    eax,esi
c00130ee:	83 c2 0d             	add    edx,0xd
c00130f1:	0f b6 f0             	movzx  esi,al
c00130f4:	0f b6 db             	movzx  ebx,bl
c00130f7:	56                   	push   esi
c00130f8:	53                   	push   ebx
c00130f9:	52                   	push   edx
c00130fa:	51                   	push   ecx
c00130fb:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00130fe:	83 c4 10             	add    esp,0x10
c0013101:	5b                   	pop    ebx
c0013102:	5e                   	pop    esi
c0013103:	5f                   	pop    edi
c0013104:	c3                   	ret    
c0013105:	90                   	nop

c0013106 <File::exists()>:
c0013106:	83 ec 0c             	sub    esp,0xc
c0013109:	31 c0                	xor    eax,eax
c001310b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001310f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013116:	80 f9 19             	cmp    cl,0x19
c0013119:	77 24                	ja     c001313f <File::exists()+0x39>
c001311b:	8b 0c 8d e0 d4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2b20]
c0013122:	85 c9                	test   ecx,ecx
c0013124:	74 19                	je     c001313f <File::exists()+0x39>
c0013126:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001312c:	85 c9                	test   ecx,ecx
c001312e:	74 0f                	je     c001313f <File::exists()+0x39>
c0013130:	83 c2 0d             	add    edx,0xd
c0013133:	50                   	push   eax
c0013134:	50                   	push   eax
c0013135:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013137:	52                   	push   edx
c0013138:	51                   	push   ecx
c0013139:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001313c:	83 c4 10             	add    esp,0x10
c001313f:	83 c4 0c             	add    esp,0xc
c0013142:	c3                   	ret    
c0013143:	90                   	nop

c0013144 <File::stat(unsigned long long*, bool*)>:
c0013144:	56                   	push   esi
c0013145:	53                   	push   ebx
c0013146:	50                   	push   eax
c0013147:	b8 0b 00 00 00       	mov    eax,0xb
c001314c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013150:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013154:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001315b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001315f:	80 f9 19             	cmp    cl,0x19
c0013162:	77 3d                	ja     c00131a1 <File::stat(unsigned long long*, bool*)+0x5d>
c0013164:	8b 0c 8d e0 d4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2b20]
c001316b:	85 c9                	test   ecx,ecx
c001316d:	74 32                	je     c00131a1 <File::stat(unsigned long long*, bool*)+0x5d>
c001316f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013175:	85 c9                	test   ecx,ecx
c0013177:	74 28                	je     c00131a1 <File::stat(unsigned long long*, bool*)+0x5d>
c0013179:	8b 01                	mov    eax,DWORD PTR [ecx]
c001317b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001317f:	74 13                	je     c0013194 <File::stat(unsigned long long*, bool*)+0x50>
c0013181:	83 ec 04             	sub    esp,0x4
c0013184:	56                   	push   esi
c0013185:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001318b:	51                   	push   ecx
c001318c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001318f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013192:	eb 0a                	jmp    c001319e <File::stat(unsigned long long*, bool*)+0x5a>
c0013194:	53                   	push   ebx
c0013195:	83 c2 0d             	add    edx,0xd
c0013198:	56                   	push   esi
c0013199:	52                   	push   edx
c001319a:	51                   	push   ecx
c001319b:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001319e:	83 c4 10             	add    esp,0x10
c00131a1:	5a                   	pop    edx
c00131a2:	5b                   	pop    ebx
c00131a3:	5e                   	pop    esi
c00131a4:	c3                   	ret    

c00131a5 <Fs::setcwd(Process*, char*)>:
c00131a5:	55                   	push   ebp
c00131a6:	57                   	push   edi
c00131a7:	56                   	push   esi
c00131a8:	53                   	push   ebx
c00131a9:	81 ec 20 02 00 00    	sub    esp,0x220
c00131af:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00131b6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00131bc:	57                   	push   edi
c00131bd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00131c4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00131c8:	56                   	push   esi
c00131c9:	e8 bc fa ff ff       	call   c0012c8a <Fs::standardiseFiles(char*, char const*, char const*)>
c00131ce:	89 34 24             	mov    DWORD PTR [esp],esi
c00131d1:	e8 1d d5 fe ff       	call   c00006f3 <strlen>
c00131d6:	83 c4 10             	add    esp,0x10
c00131d9:	83 f8 02             	cmp    eax,0x2
c00131dc:	77 17                	ja     c00131f5 <Fs::setcwd(Process*, char*)+0x50>
c00131de:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00131e3:	83 e8 41             	sub    eax,0x41
c00131e6:	83 f8 19             	cmp    eax,0x19
c00131e9:	76 24                	jbe    c001320f <Fs::setcwd(Process*, char*)+0x6a>
c00131eb:	b8 03 00 00 00       	mov    eax,0x3
c00131f0:	e9 e0 00 00 00       	jmp    c00132d5 <Fs::setcwd(Process*, char*)+0x130>
c00131f5:	83 ec 0c             	sub    esp,0xc
c00131f8:	56                   	push   esi
c00131f9:	e8 f5 d4 fe ff       	call   c00006f3 <strlen>
c00131fe:	83 c4 10             	add    esp,0x10
c0013201:	83 f8 03             	cmp    eax,0x3
c0013204:	75 34                	jne    c001323a <Fs::setcwd(Process*, char*)+0x95>
c0013206:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001320b:	75 2d                	jne    c001323a <Fs::setcwd(Process*, char*)+0x95>
c001320d:	eb cf                	jmp    c00131de <Fs::setcwd(Process*, char*)+0x39>
c001320f:	8b 14 85 e0 d4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2b20]
c0013216:	b8 05 00 00 00       	mov    eax,0x5
c001321b:	85 d2                	test   edx,edx
c001321d:	0f 84 b2 00 00 00    	je     c00132d5 <Fs::setcwd(Process*, char*)+0x130>
c0013223:	b8 06 00 00 00       	mov    eax,0x6
c0013228:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001322f:	0f 85 92 00 00 00    	jne    c00132c7 <Fs::setcwd(Process*, char*)+0x122>
c0013235:	e9 9b 00 00 00       	jmp    c00132d5 <Fs::setcwd(Process*, char*)+0x130>
c001323a:	83 ec 0c             	sub    esp,0xc
c001323d:	68 14 01 00 00       	push   0x114
c0013242:	e8 ef c3 ff ff       	call   c000f636 <malloc>
c0013247:	83 c4 0c             	add    esp,0xc
c001324a:	89 c3                	mov    ebx,eax
c001324c:	55                   	push   ebp
c001324d:	56                   	push   esi
c001324e:	50                   	push   eax
c001324f:	e8 e0 fb ff ff       	call   c0012e34 <File::File(char const*, Process*)>
c0013254:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013259:	83 c4 0c             	add    esp,0xc
c001325c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013260:	50                   	push   eax
c0013261:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013265:	50                   	push   eax
c0013266:	53                   	push   ebx
c0013267:	e8 d8 fe ff ff       	call   c0013144 <File::stat(unsigned long long*, bool*)>
c001326c:	83 c4 10             	add    esp,0x10
c001326f:	83 f8 02             	cmp    eax,0x2
c0013272:	74 04                	je     c0013278 <Fs::setcwd(Process*, char*)+0xd3>
c0013274:	85 c0                	test   eax,eax
c0013276:	74 1c                	je     c0013294 <Fs::setcwd(Process*, char*)+0xef>
c0013278:	b8 01 00 00 00       	mov    eax,0x1
c001327d:	85 db                	test   ebx,ebx
c001327f:	74 54                	je     c00132d5 <Fs::setcwd(Process*, char*)+0x130>
c0013281:	83 ec 0c             	sub    esp,0xc
c0013284:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013286:	53                   	push   ebx
c0013287:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001328a:	83 c4 10             	add    esp,0x10
c001328d:	b8 01 00 00 00       	mov    eax,0x1
c0013292:	eb 41                	jmp    c00132d5 <Fs::setcwd(Process*, char*)+0x130>
c0013294:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013299:	75 1c                	jne    c00132b7 <Fs::setcwd(Process*, char*)+0x112>
c001329b:	b8 02 00 00 00       	mov    eax,0x2
c00132a0:	85 db                	test   ebx,ebx
c00132a2:	74 31                	je     c00132d5 <Fs::setcwd(Process*, char*)+0x130>
c00132a4:	83 ec 0c             	sub    esp,0xc
c00132a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132a9:	53                   	push   ebx
c00132aa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132ad:	83 c4 10             	add    esp,0x10
c00132b0:	b8 02 00 00 00       	mov    eax,0x2
c00132b5:	eb 1e                	jmp    c00132d5 <Fs::setcwd(Process*, char*)+0x130>
c00132b7:	85 db                	test   ebx,ebx
c00132b9:	74 0c                	je     c00132c7 <Fs::setcwd(Process*, char*)+0x122>
c00132bb:	83 ec 0c             	sub    esp,0xc
c00132be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132c0:	53                   	push   ebx
c00132c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132c4:	83 c4 10             	add    esp,0x10
c00132c7:	50                   	push   eax
c00132c8:	50                   	push   eax
c00132c9:	56                   	push   esi
c00132ca:	57                   	push   edi
c00132cb:	e8 a5 d4 fe ff       	call   c0000775 <strcpy>
c00132d0:	83 c4 10             	add    esp,0x10
c00132d3:	31 c0                	xor    eax,eax
c00132d5:	81 c4 1c 02 00 00    	add    esp,0x21c
c00132db:	5b                   	pop    ebx
c00132dc:	5e                   	pop    esi
c00132dd:	5f                   	pop    edi
c00132de:	5d                   	pop    ebp
c00132df:	c3                   	ret    

c00132e0 <Directory::Directory(char const*, Process*)>:
c00132e0:	83 ec 0c             	sub    esp,0xc
c00132e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e7:	83 ec 08             	sub    esp,0x8
c00132ea:	6a 00                	push   0x0
c00132ec:	50                   	push   eax
c00132ed:	e8 b6 e1 ff ff       	call   c00114a8 <UnixFile::UnixFile(int)>
c00132f2:	83 c4 10             	add    esp,0x10
c00132f5:	ba 04 98 02 c0       	mov    edx,0xc0029804
c00132fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132fe:	89 10                	mov    DWORD PTR [eax],edx
c0013300:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013304:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001330a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001330e:	83 c0 0d             	add    eax,0xd
c0013311:	83 ec 04             	sub    esp,0x4
c0013314:	52                   	push   edx
c0013315:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013319:	50                   	push   eax
c001331a:	e8 6b f9 ff ff       	call   c0012c8a <Fs::standardiseFiles(char*, char const*, char const*)>
c001331f:	83 c4 10             	add    esp,0x10
c0013322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013326:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013329:	8d 50 bf             	lea    edx,[eax-0x41]
c001332c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013330:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001333a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001333e:	90                   	nop
c001333f:	83 c4 0c             	add    esp,0xc
c0013342:	c3                   	ret    
c0013343:	90                   	nop

c0013344 <Directory::open()>:
c0013344:	53                   	push   ebx
c0013345:	b8 0b 00 00 00       	mov    eax,0xb
c001334a:	83 ec 08             	sub    esp,0x8
c001334d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013351:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013358:	80 fa 19             	cmp    dl,0x19
c001335b:	77 3d                	ja     c001339a <Directory::open()+0x56>
c001335d:	8b 14 95 e0 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b20]
c0013364:	85 d2                	test   edx,edx
c0013366:	74 32                	je     c001339a <Directory::open()+0x56>
c0013368:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001336e:	85 d2                	test   edx,edx
c0013370:	74 28                	je     c001339a <Directory::open()+0x56>
c0013372:	b8 06 00 00 00       	mov    eax,0x6
c0013377:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001337b:	75 1d                	jne    c001339a <Directory::open()+0x56>
c001337d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013383:	50                   	push   eax
c0013384:	8b 02                	mov    eax,DWORD PTR [edx]
c0013386:	51                   	push   ecx
c0013387:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001338a:	51                   	push   ecx
c001338b:	52                   	push   edx
c001338c:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001338f:	83 c4 10             	add    esp,0x10
c0013392:	85 c0                	test   eax,eax
c0013394:	75 04                	jne    c001339a <Directory::open()+0x56>
c0013396:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001339a:	83 c4 08             	add    esp,0x8
c001339d:	5b                   	pop    ebx
c001339e:	c3                   	ret    
c001339f:	90                   	nop

c00133a0 <Directory::close()>:
c00133a0:	53                   	push   ebx
c00133a1:	b8 0b 00 00 00       	mov    eax,0xb
c00133a6:	83 ec 08             	sub    esp,0x8
c00133a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133ad:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133b4:	80 fa 19             	cmp    dl,0x19
c00133b7:	77 41                	ja     c00133fa <Directory::close()+0x5a>
c00133b9:	8b 1c 95 e0 d4 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2b20]
c00133c0:	85 db                	test   ebx,ebx
c00133c2:	74 36                	je     c00133fa <Directory::close()+0x5a>
c00133c4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00133cb:	74 2d                	je     c00133fa <Directory::close()+0x5a>
c00133cd:	b8 05 00 00 00       	mov    eax,0x5
c00133d2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00133d6:	74 22                	je     c00133fa <Directory::close()+0x5a>
c00133d8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00133dc:	8b 04 95 e0 d4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2b20]
c00133e3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00133e9:	53                   	push   ebx
c00133ea:	53                   	push   ebx
c00133eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00133ed:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00133f3:	50                   	push   eax
c00133f4:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00133f7:	83 c4 10             	add    esp,0x10
c00133fa:	83 c4 08             	add    esp,0x8
c00133fd:	5b                   	pop    ebx
c00133fe:	c3                   	ret    
c00133ff:	90                   	nop

c0013400 <Directory::unlink()>:
c0013400:	83 ec 0c             	sub    esp,0xc
c0013403:	b8 0b 00 00 00       	mov    eax,0xb
c0013408:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001340c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013413:	80 f9 19             	cmp    cl,0x19
c0013416:	77 2f                	ja     c0013447 <Directory::unlink()+0x47>
c0013418:	8b 0c 8d e0 d4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2b20]
c001341f:	85 c9                	test   ecx,ecx
c0013421:	74 24                	je     c0013447 <Directory::unlink()+0x47>
c0013423:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013429:	85 c9                	test   ecx,ecx
c001342b:	74 1a                	je     c0013447 <Directory::unlink()+0x47>
c001342d:	b8 06 00 00 00       	mov    eax,0x6
c0013432:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013436:	75 0f                	jne    c0013447 <Directory::unlink()+0x47>
c0013438:	83 c2 0d             	add    edx,0xd
c001343b:	50                   	push   eax
c001343c:	50                   	push   eax
c001343d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001343f:	52                   	push   edx
c0013440:	51                   	push   ecx
c0013441:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013444:	83 c4 10             	add    esp,0x10
c0013447:	83 c4 0c             	add    esp,0xc
c001344a:	c3                   	ret    
c001344b:	90                   	nop

c001344c <Directory::rename(char const*)>:
c001344c:	83 ec 0c             	sub    esp,0xc
c001344f:	b8 0b 00 00 00       	mov    eax,0xb
c0013454:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013458:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001345f:	80 f9 19             	cmp    cl,0x19
c0013462:	77 32                	ja     c0013496 <Directory::rename(char const*)+0x4a>
c0013464:	8b 0c 8d e0 d4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2b20]
c001346b:	85 c9                	test   ecx,ecx
c001346d:	74 27                	je     c0013496 <Directory::rename(char const*)+0x4a>
c001346f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013475:	85 c9                	test   ecx,ecx
c0013477:	74 1d                	je     c0013496 <Directory::rename(char const*)+0x4a>
c0013479:	b8 06 00 00 00       	mov    eax,0x6
c001347e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013482:	75 12                	jne    c0013496 <Directory::rename(char const*)+0x4a>
c0013484:	83 c2 0d             	add    edx,0xd
c0013487:	50                   	push   eax
c0013488:	8b 01                	mov    eax,DWORD PTR [ecx]
c001348a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001348e:	52                   	push   edx
c001348f:	51                   	push   ecx
c0013490:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013493:	83 c4 10             	add    esp,0x10
c0013496:	83 c4 0c             	add    esp,0xc
c0013499:	c3                   	ret    

c001349a <Directory::exists()>:
c001349a:	83 ec 0c             	sub    esp,0xc
c001349d:	31 c0                	xor    eax,eax
c001349f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134a3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134aa:	80 f9 19             	cmp    cl,0x19
c00134ad:	77 24                	ja     c00134d3 <Directory::exists()+0x39>
c00134af:	8b 0c 8d e0 d4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2b20]
c00134b6:	85 c9                	test   ecx,ecx
c00134b8:	74 19                	je     c00134d3 <Directory::exists()+0x39>
c00134ba:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134c0:	85 c9                	test   ecx,ecx
c00134c2:	74 0f                	je     c00134d3 <Directory::exists()+0x39>
c00134c4:	83 c2 0d             	add    edx,0xd
c00134c7:	50                   	push   eax
c00134c8:	50                   	push   eax
c00134c9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134cb:	52                   	push   edx
c00134cc:	51                   	push   ecx
c00134cd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00134d0:	83 c4 10             	add    esp,0x10
c00134d3:	83 c4 0c             	add    esp,0xc
c00134d6:	c3                   	ret    
c00134d7:	90                   	nop

c00134d8 <Directory::read(dirent*)>:
c00134d8:	83 ec 1c             	sub    esp,0x1c
c00134db:	b8 0b 00 00 00       	mov    eax,0xb
c00134e0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00134e4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134eb:	80 fa 19             	cmp    dl,0x19
c00134ee:	77 30                	ja     c0013520 <Directory::read(dirent*)+0x48>
c00134f0:	8b 14 95 e0 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b20]
c00134f7:	85 d2                	test   edx,edx
c00134f9:	74 25                	je     c0013520 <Directory::read(dirent*)+0x48>
c00134fb:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013502:	74 1c                	je     c0013520 <Directory::read(dirent*)+0x48>
c0013504:	83 ec 0c             	sub    esp,0xc
c0013507:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013509:	8d 54 24 18          	lea    edx,[esp+0x18]
c001350d:	52                   	push   edx
c001350e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013512:	6a 00                	push   0x0
c0013514:	68 10 01 00 00       	push   0x110
c0013519:	51                   	push   ecx
c001351a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001351d:	83 c4 20             	add    esp,0x20
c0013520:	83 c4 1c             	add    esp,0x1c
c0013523:	c3                   	ret    

c0013524 <Directory::create()>:
c0013524:	83 ec 0c             	sub    esp,0xc
c0013527:	b8 0b 00 00 00       	mov    eax,0xb
c001352c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013530:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013537:	80 f9 19             	cmp    cl,0x19
c001353a:	77 2f                	ja     c001356b <Directory::create()+0x47>
c001353c:	8b 0c 8d e0 d4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2b20]
c0013543:	85 c9                	test   ecx,ecx
c0013545:	74 24                	je     c001356b <Directory::create()+0x47>
c0013547:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001354d:	85 c9                	test   ecx,ecx
c001354f:	74 1a                	je     c001356b <Directory::create()+0x47>
c0013551:	b8 06 00 00 00       	mov    eax,0x6
c0013556:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001355a:	75 0f                	jne    c001356b <Directory::create()+0x47>
c001355c:	83 c2 0d             	add    edx,0xd
c001355f:	50                   	push   eax
c0013560:	50                   	push   eax
c0013561:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013563:	52                   	push   edx
c0013564:	51                   	push   ecx
c0013565:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013568:	83 c4 10             	add    esp,0x10
c001356b:	83 c4 0c             	add    esp,0xc
c001356e:	c3                   	ret    
c001356f:	90                   	nop

c0013570 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013570:	b8 0a 00 00 00       	mov    eax,0xa
c0013575:	c3                   	ret    

c0013576 <Bus::Bus(char const*)>:
c0013576:	83 ec 0c             	sub    esp,0xc
c0013579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001357d:	83 ec 08             	sub    esp,0x8
c0013580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013584:	50                   	push   eax
c0013585:	e8 68 09 00 00       	call   c0013ef2 <Device::Device(char const*)>
c001358a:	83 c4 10             	add    esp,0x10
c001358d:	ba 20 98 02 c0       	mov    edx,0xc0029820
c0013592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013596:	89 10                	mov    DWORD PTR [eax],edx
c0013598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001359c:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00135a6:	90                   	nop
c00135a7:	83 c4 0c             	add    esp,0xc
c00135aa:	c3                   	ret    
c00135ab:	90                   	nop

c00135ac <Bus::~Bus()>:
c00135ac:	83 ec 0c             	sub    esp,0xc
c00135af:	ba 20 98 02 c0       	mov    edx,0xc0029820
c00135b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b8:	89 10                	mov    DWORD PTR [eax],edx
c00135ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135be:	83 ec 0c             	sub    esp,0xc
c00135c1:	50                   	push   eax
c00135c2:	e8 0d 06 00 00       	call   c0013bd4 <Device::~Device()>
c00135c7:	83 c4 10             	add    esp,0x10
c00135ca:	90                   	nop
c00135cb:	83 c4 0c             	add    esp,0xc
c00135ce:	c3                   	ret    
c00135cf:	90                   	nop

c00135d0 <Bus::~Bus()>:
c00135d0:	83 ec 0c             	sub    esp,0xc
c00135d3:	83 ec 0c             	sub    esp,0xc
c00135d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135da:	e8 cd ff ff ff       	call   c00135ac <Bus::~Bus()>
c00135df:	83 c4 10             	add    esp,0x10
c00135e2:	83 ec 08             	sub    esp,0x8
c00135e5:	68 58 01 00 00       	push   0x158
c00135ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135ee:	e8 08 f2 ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c00135f3:	83 c4 10             	add    esp,0x10
c00135f6:	83 c4 0c             	add    esp,0xc
c00135f9:	c3                   	ret    

c00135fa <Buzzer::Buzzer(char const*)>:
c00135fa:	83 ec 0c             	sub    esp,0xc
c00135fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013601:	83 ec 08             	sub    esp,0x8
c0013604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013608:	50                   	push   eax
c0013609:	e8 e4 08 00 00       	call   c0013ef2 <Device::Device(char const*)>
c001360e:	83 c4 10             	add    esp,0x10
c0013611:	ba 4c 98 02 c0       	mov    edx,0xc002984c
c0013616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001361a:	89 10                	mov    DWORD PTR [eax],edx
c001361c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013620:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001362a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001362e:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013638:	90                   	nop
c0013639:	83 c4 0c             	add    esp,0xc
c001363c:	c3                   	ret    
c001363d:	90                   	nop

c001363e <Buzzer::~Buzzer()>:
c001363e:	83 ec 0c             	sub    esp,0xc
c0013641:	ba 4c 98 02 c0       	mov    edx,0xc002984c
c0013646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001364a:	89 10                	mov    DWORD PTR [eax],edx
c001364c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013650:	83 ec 0c             	sub    esp,0xc
c0013653:	50                   	push   eax
c0013654:	e8 7b 05 00 00       	call   c0013bd4 <Device::~Device()>
c0013659:	83 c4 10             	add    esp,0x10
c001365c:	90                   	nop
c001365d:	83 c4 0c             	add    esp,0xc
c0013660:	c3                   	ret    
c0013661:	90                   	nop

c0013662 <Buzzer::~Buzzer()>:
c0013662:	83 ec 0c             	sub    esp,0xc
c0013665:	83 ec 0c             	sub    esp,0xc
c0013668:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001366c:	e8 cd ff ff ff       	call   c001363e <Buzzer::~Buzzer()>
c0013671:	83 c4 10             	add    esp,0x10
c0013674:	83 ec 08             	sub    esp,0x8
c0013677:	68 5c 01 00 00       	push   0x15c
c001367c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013680:	e8 76 f1 ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0013685:	83 c4 10             	add    esp,0x10
c0013688:	83 c4 0c             	add    esp,0xc
c001368b:	c3                   	ret    

c001368c <Buzzer::stop()>:
c001368c:	83 ec 14             	sub    esp,0x14
c001368f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013693:	8b 10                	mov    edx,DWORD PTR [eax]
c0013695:	6a 00                	push   0x0
c0013697:	50                   	push   eax
c0013698:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001369b:	83 c4 1c             	add    esp,0x1c
c001369e:	c3                   	ret    

c001369f <beepThread(void*)>:
c001369f:	53                   	push   ebx
c00136a0:	83 ec 08             	sub    esp,0x8
c00136a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136a7:	e8 b0 9a 00 00       	call   c001d15c <unlockScheduler()>
c00136ac:	b8 40 42 0f 00       	mov    eax,0xf4240
c00136b1:	52                   	push   edx
c00136b2:	52                   	push   edx
c00136b3:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00136b9:	52                   	push   edx
c00136ba:	50                   	push   eax
c00136bb:	e8 ea 9f 00 00       	call   c001d6aa <nanoSleep(unsigned long long)>
c00136c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136c3:	e8 c4 ff ff ff       	call   c001368c <Buzzer::stop()>
c00136c8:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00136d0:	83 c4 18             	add    esp,0x18
c00136d3:	5b                   	pop    ebx
c00136d4:	e9 17 9f 00 00       	jmp    c001d5f0 <blockTask(TaskState)>
c00136d9:	90                   	nop

c00136da <Buzzer::beep(int, int, bool)>:
c00136da:	57                   	push   edi
c00136db:	56                   	push   esi
c00136dc:	53                   	push   ebx
c00136dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136e1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00136e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136e9:	52                   	push   edx
c00136ea:	52                   	push   edx
c00136eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00136ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136f1:	56                   	push   esi
c00136f2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00136f5:	83 c4 10             	add    esp,0x10
c00136f8:	89 f8                	mov    eax,edi
c00136fa:	84 c0                	test   al,al
c00136fc:	74 1f                	je     c001371d <Buzzer::beep(int, int, bool)+0x43>
c00136fe:	50                   	push   eax
c00136ff:	50                   	push   eax
c0013700:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013706:	99                   	cdq    
c0013707:	52                   	push   edx
c0013708:	50                   	push   eax
c0013709:	e8 9c 9f 00 00       	call   c001d6aa <nanoSleep(unsigned long long)>
c001370e:	83 c4 10             	add    esp,0x10
c0013711:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013715:	5b                   	pop    ebx
c0013716:	5e                   	pop    esi
c0013717:	5f                   	pop    edi
c0013718:	e9 6f ff ff ff       	jmp    c001368c <Buzzer::stop()>
c001371d:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013723:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0013728:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013730:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013734:	c7 44 24 14 9f 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc001369f
c001373c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013740:	5b                   	pop    ebx
c0013741:	5e                   	pop    esi
c0013742:	5f                   	pop    edi
c0013743:	e9 44 9b 00 00       	jmp    c001d28c <Process::createThread(void (*)(void*), void*, int)>

c0013748 <User::loadClockSettings(int)>:
c0013748:	53                   	push   ebx
c0013749:	83 ec 14             	sub    esp,0x14
c001374c:	68 14 01 00 00       	push   0x114
c0013751:	e8 e0 be ff ff       	call   c000f636 <malloc>
c0013756:	83 c4 0c             	add    esp,0xc
c0013759:	89 c3                	mov    ebx,eax
c001375b:	ff 35 14 e4 02 c0    	push   DWORD PTR ds:0xc002e414
c0013761:	68 74 98 02 c0       	push   0xc0029874
c0013766:	50                   	push   eax
c0013767:	e8 c8 f6 ff ff       	call   c0012e34 <File::File(char const*, Process*)>
c001376c:	58                   	pop    eax
c001376d:	5a                   	pop    edx
c001376e:	6a 01                	push   0x1
c0013770:	53                   	push   ebx
c0013771:	e8 22 f7 ff ff       	call   c0012e98 <File::open(FileOpenMode)>
c0013776:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013779:	e8 78 f7 ff ff       	call   c0012ef6 <File::close()>
c001377e:	83 c4 10             	add    esp,0x10
c0013781:	85 db                	test   ebx,ebx
c0013783:	74 0f                	je     c0013794 <User::loadClockSettings(int)+0x4c>
c0013785:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013787:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001378b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001378e:	83 c4 08             	add    esp,0x8
c0013791:	5b                   	pop    ebx
c0013792:	ff e0                	jmp    eax
c0013794:	83 c4 08             	add    esp,0x8
c0013797:	5b                   	pop    ebx
c0013798:	c3                   	ret    
c0013799:	90                   	nop

c001379a <Clock::Clock(char const*)>:
c001379a:	83 ec 0c             	sub    esp,0xc
c001379d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137a1:	83 ec 08             	sub    esp,0x8
c00137a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137a8:	50                   	push   eax
c00137a9:	e8 44 07 00 00       	call   c0013ef2 <Device::Device(char const*)>
c00137ae:	83 c4 10             	add    esp,0x10
c00137b1:	ba 9c 98 02 c0       	mov    edx,0xc002989c
c00137b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ba:	89 10                	mov    DWORD PTR [eax],edx
c00137bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137c0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00137ca:	90                   	nop
c00137cb:	83 c4 0c             	add    esp,0xc
c00137ce:	c3                   	ret    
c00137cf:	90                   	nop

c00137d0 <Clock::~Clock()>:
c00137d0:	83 ec 0c             	sub    esp,0xc
c00137d3:	ba 9c 98 02 c0       	mov    edx,0xc002989c
c00137d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137dc:	89 10                	mov    DWORD PTR [eax],edx
c00137de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137e2:	83 ec 0c             	sub    esp,0xc
c00137e5:	50                   	push   eax
c00137e6:	e8 e9 03 00 00       	call   c0013bd4 <Device::~Device()>
c00137eb:	83 c4 10             	add    esp,0x10
c00137ee:	90                   	nop
c00137ef:	83 c4 0c             	add    esp,0xc
c00137f2:	c3                   	ret    
c00137f3:	90                   	nop

c00137f4 <Clock::~Clock()>:
c00137f4:	83 ec 0c             	sub    esp,0xc
c00137f7:	83 ec 0c             	sub    esp,0xc
c00137fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137fe:	e8 cd ff ff ff       	call   c00137d0 <Clock::~Clock()>
c0013803:	83 c4 10             	add    esp,0x10
c0013806:	83 ec 08             	sub    esp,0x8
c0013809:	68 58 01 00 00       	push   0x158
c001380e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013812:	e8 e4 ef ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0013817:	83 c4 10             	add    esp,0x10
c001381a:	83 c4 0c             	add    esp,0xc
c001381d:	c3                   	ret    

c001381e <Clock::timeInSecondsLocal()>:
c001381e:	53                   	push   ebx
c001381f:	83 ec 14             	sub    esp,0x14
c0013822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013826:	8b 10                	mov    edx,DWORD PTR [eax]
c0013828:	50                   	push   eax
c0013829:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001382c:	0f b6 0d 50 d0 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d050
c0013833:	03 0d 54 d0 02 c0    	add    ecx,DWORD PTR ds:0xc002d054
c0013839:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001383f:	89 cb                	mov    ebx,ecx
c0013841:	c1 fb 1f             	sar    ebx,0x1f
c0013844:	01 c8                	add    eax,ecx
c0013846:	11 da                	adc    edx,ebx
c0013848:	83 c4 10             	add    esp,0x10
c001384b:	31 c9                	xor    ecx,ecx
c001384d:	80 3d 51 d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d051,0x0
c0013854:	74 05                	je     c001385b <Clock::timeInSecondsLocal()+0x3d>
c0013856:	b9 08 07 00 00       	mov    ecx,0x708
c001385b:	31 db                	xor    ebx,ebx
c001385d:	01 c8                	add    eax,ecx
c001385f:	11 da                	adc    edx,ebx
c0013861:	83 c4 08             	add    esp,0x8
c0013864:	5b                   	pop    ebx
c0013865:	c3                   	ret    

c0013866 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013866:	57                   	push   edi
c0013867:	56                   	push   esi
c0013868:	53                   	push   ebx
c0013869:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001386d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013871:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013873:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013877:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001387a:	0f b6 05 50 d0 02 c0 	movzx  eax,BYTE PTR ds:0xc002d050
c0013881:	03 05 54 d0 02 c0    	add    eax,DWORD PTR ds:0xc002d054
c0013887:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001388d:	99                   	cdq    
c001388e:	29 c6                	sub    esi,eax
c0013890:	19 d7                	sbb    edi,edx
c0013892:	89 f0                	mov    eax,esi
c0013894:	89 fa                	mov    edx,edi
c0013896:	31 f6                	xor    esi,esi
c0013898:	80 3d 51 d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d051,0x0
c001389f:	74 05                	je     c00138a6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00138a1:	be 08 07 00 00       	mov    esi,0x708
c00138a6:	31 ff                	xor    edi,edi
c00138a8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00138ac:	29 f0                	sub    eax,esi
c00138ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138b2:	19 fa                	sbb    edx,edi
c00138b4:	89 d8                	mov    eax,ebx
c00138b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138ba:	5b                   	pop    ebx
c00138bb:	5e                   	pop    esi
c00138bc:	5f                   	pop    edi
c00138bd:	ff e0                	jmp    eax

c00138bf <datetimeToSeconds(datetime_t)>:
c00138bf:	55                   	push   ebp
c00138c0:	57                   	push   edi
c00138c1:	56                   	push   esi
c00138c2:	53                   	push   ebx
c00138c3:	83 ec 14             	sub    esp,0x14
c00138c6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138ca:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00138ce:	89 d3                	mov    ebx,edx
c00138d0:	0f b6 c6             	movzx  eax,dh
c00138d3:	c1 eb 10             	shr    ebx,0x10
c00138d6:	48                   	dec    eax
c00138d7:	66 81 eb 6c 07       	sub    bx,0x76c
c00138dc:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00138e0:	0f b6 f5             	movzx  esi,ch
c00138e3:	89 cf                	mov    edi,ecx
c00138e5:	6b f6 3c             	imul   esi,esi,0x3c
c00138e8:	c1 ef 10             	shr    edi,0x10
c00138eb:	0f b6 c9             	movzx  ecx,cl
c00138ee:	89 f8                	mov    eax,edi
c00138f0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00138f6:	0f b6 f8             	movzx  edi,al
c00138f9:	0f b6 d2             	movzx  edx,dl
c00138fc:	01 fe                	add    esi,edi
c00138fe:	01 f1                	add    ecx,esi
c0013900:	0f b7 f3             	movzx  esi,bx
c0013903:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013907:	c1 f9 1f             	sar    ecx,0x1f
c001390a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001390f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013913:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013918:	8b 0c 8d e0 98 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6720]
c001391f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013923:	76 29                	jbe    c001394e <datetimeToSeconds(datetime_t)+0x8f>
c0013925:	f6 c3 03             	test   bl,0x3
c0013928:	75 24                	jne    c001394e <datetimeToSeconds(datetime_t)+0x8f>
c001392a:	31 d2                	xor    edx,edx
c001392c:	bf 64 00 00 00       	mov    edi,0x64
c0013931:	89 d8                	mov    eax,ebx
c0013933:	66 f7 f7             	div    di
c0013936:	66 85 d2             	test   dx,dx
c0013939:	75 12                	jne    c001394d <datetimeToSeconds(datetime_t)+0x8e>
c001393b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013941:	bf 90 01 00 00       	mov    edi,0x190
c0013946:	99                   	cdq    
c0013947:	f7 ff                	idiv   edi
c0013949:	85 d2                	test   edx,edx
c001394b:	75 01                	jne    c001394e <datetimeToSeconds(datetime_t)+0x8f>
c001394d:	41                   	inc    ecx
c001394e:	66 83 fb 46          	cmp    bx,0x46
c0013952:	76 45                	jbe    c0013999 <datetimeToSeconds(datetime_t)+0xda>
c0013954:	bb 46 00 00 00       	mov    ebx,0x46
c0013959:	bf 64 00 00 00       	mov    edi,0x64
c001395e:	bd 90 01 00 00       	mov    ebp,0x190
c0013963:	b8 6d 01 00 00       	mov    eax,0x16d
c0013968:	f6 c3 03             	test   bl,0x3
c001396b:	75 23                	jne    c0013990 <datetimeToSeconds(datetime_t)+0xd1>
c001396d:	89 d8                	mov    eax,ebx
c001396f:	99                   	cdq    
c0013970:	f7 ff                	idiv   edi
c0013972:	b8 6e 01 00 00       	mov    eax,0x16e
c0013977:	85 d2                	test   edx,edx
c0013979:	75 15                	jne    c0013990 <datetimeToSeconds(datetime_t)+0xd1>
c001397b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013981:	99                   	cdq    
c0013982:	f7 fd                	idiv   ebp
c0013984:	83 fa 01             	cmp    edx,0x1
c0013987:	19 c0                	sbb    eax,eax
c0013989:	f7 d0                	not    eax
c001398b:	05 6e 01 00 00       	add    eax,0x16e
c0013990:	01 c1                	add    ecx,eax
c0013992:	43                   	inc    ebx
c0013993:	39 f3                	cmp    ebx,esi
c0013995:	7c cc                	jl     c0013963 <datetimeToSeconds(datetime_t)+0xa4>
c0013997:	eb 35                	jmp    c00139ce <datetimeToSeconds(datetime_t)+0x10f>
c0013999:	74 33                	je     c00139ce <datetimeToSeconds(datetime_t)+0x10f>
c001399b:	b8 45 00 00 00       	mov    eax,0x45
c00139a0:	89 c2                	mov    edx,eax
c00139a2:	83 e2 03             	and    edx,0x3
c00139a5:	39 f0                	cmp    eax,esi
c00139a7:	7e 0f                	jle    c00139b8 <datetimeToSeconds(datetime_t)+0xf9>
c00139a9:	83 fa 01             	cmp    edx,0x1
c00139ac:	19 d2                	sbb    edx,edx
c00139ae:	48                   	dec    eax
c00139af:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00139b6:	eb e8                	jmp    c00139a0 <datetimeToSeconds(datetime_t)+0xe1>
c00139b8:	b8 6d 01 00 00       	mov    eax,0x16d
c00139bd:	85 d2                	test   edx,edx
c00139bf:	75 0b                	jne    c00139cc <datetimeToSeconds(datetime_t)+0x10d>
c00139c1:	66 83 fb 01          	cmp    bx,0x1
c00139c5:	19 c0                	sbb    eax,eax
c00139c7:	05 6e 01 00 00       	add    eax,0x16e
c00139cc:	29 c1                	sub    ecx,eax
c00139ce:	b8 80 51 01 00       	mov    eax,0x15180
c00139d3:	f7 e9                	imul   ecx
c00139d5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00139d9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00139dd:	83 c4 14             	add    esp,0x14
c00139e0:	5b                   	pop    ebx
c00139e1:	5e                   	pop    esi
c00139e2:	5f                   	pop    edi
c00139e3:	5d                   	pop    ebp
c00139e4:	c3                   	ret    
c00139e5:	90                   	nop

c00139e6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00139e6:	57                   	push   edi
c00139e7:	56                   	push   esi
c00139e8:	53                   	push   ebx
c00139e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00139ed:	8b 06                	mov    eax,DWORD PTR [esi]
c00139ef:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00139f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139fa:	e8 c0 fe ff ff       	call   c00138bf <datetimeToSeconds(datetime_t)>
c00139ff:	59                   	pop    ecx
c0013a00:	0f b6 0d 50 d0 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d050
c0013a07:	5b                   	pop    ebx
c0013a08:	03 0d 54 d0 02 c0    	add    ecx,DWORD PTR ds:0xc002d054
c0013a0e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a14:	89 cb                	mov    ebx,ecx
c0013a16:	c1 fb 1f             	sar    ebx,0x1f
c0013a19:	29 c8                	sub    eax,ecx
c0013a1b:	19 da                	sbb    edx,ebx
c0013a1d:	31 c9                	xor    ecx,ecx
c0013a1f:	80 3d 51 d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d051,0x0
c0013a26:	74 05                	je     c0013a2d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013a28:	b9 08 07 00 00       	mov    ecx,0x708
c0013a2d:	31 db                	xor    ebx,ebx
c0013a2f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013a33:	29 c8                	sub    eax,ecx
c0013a35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a39:	19 da                	sbb    edx,ebx
c0013a3b:	89 f8                	mov    eax,edi
c0013a3d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013a41:	5b                   	pop    ebx
c0013a42:	5e                   	pop    esi
c0013a43:	5f                   	pop    edi
c0013a44:	ff e0                	jmp    eax

c0013a46 <secondsToDatetime(unsigned long long)>:
c0013a46:	55                   	push   ebp
c0013a47:	57                   	push   edi
c0013a48:	56                   	push   esi
c0013a49:	53                   	push   ebx
c0013a4a:	83 ec 1c             	sub    esp,0x1c
c0013a4d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a51:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013a55:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013a59:	6a 00                	push   0x0
c0013a5b:	68 80 51 01 00       	push   0x15180
c0013a60:	55                   	push   ebp
c0013a61:	57                   	push   edi
c0013a62:	e8 65 1d 01 00       	call   c00257cc <__udivdi3>
c0013a67:	83 c4 10             	add    esp,0x10
c0013a6a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013a70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a74:	6a 00                	push   0x0
c0013a76:	68 80 51 01 00       	push   0x15180
c0013a7b:	55                   	push   ebp
c0013a7c:	57                   	push   edi
c0013a7d:	bf 10 0e 00 00       	mov    edi,0xe10
c0013a82:	e8 45 1e 01 00       	call   c00258cc <__umoddi3>
c0013a87:	83 c4 10             	add    esp,0x10
c0013a8a:	99                   	cdq    
c0013a8b:	f7 ff                	idiv   edi
c0013a8d:	bf 3c 00 00 00       	mov    edi,0x3c
c0013a92:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013a95:	89 d0                	mov    eax,edx
c0013a97:	99                   	cdq    
c0013a98:	f7 ff                	idiv   edi
c0013a9a:	85 db                	test   ebx,ebx
c0013a9c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013a9f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013aa2:	79 11                	jns    c0013ab5 <secondsToDatetime(unsigned long long)+0x6f>
c0013aa4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013aa8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013aae:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ab3:	eb 07                	jmp    c0013abc <secondsToDatetime(unsigned long long)+0x76>
c0013ab5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013aba:	89 d8                	mov    eax,ebx
c0013abc:	bf b4 05 00 00       	mov    edi,0x5b4
c0013ac1:	99                   	cdq    
c0013ac2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013ac7:	f7 f9                	idiv   ecx
c0013ac9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013ace:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013ad2:	31 d2                	xor    edx,edx
c0013ad4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013adc:	01 c3                	add    ebx,eax
c0013ade:	89 d8                	mov    eax,ebx
c0013ae0:	f7 f1                	div    ecx
c0013ae2:	31 d2                	xor    edx,edx
c0013ae4:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013ae7:	89 d8                	mov    eax,ebx
c0013ae9:	f7 f7                	div    edi
c0013aeb:	31 d2                	xor    edx,edx
c0013aed:	29 c1                	sub    ecx,eax
c0013aef:	89 d8                	mov    eax,ebx
c0013af1:	f7 f5                	div    ebp
c0013af3:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013af8:	29 c1                	sub    ecx,eax
c0013afa:	31 d2                	xor    edx,edx
c0013afc:	89 c8                	mov    eax,ecx
c0013afe:	f7 f5                	div    ebp
c0013b00:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013b05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b09:	31 d2                	xor    edx,edx
c0013b0b:	89 c8                	mov    eax,ecx
c0013b0d:	f7 f5                	div    ebp
c0013b0f:	31 d2                	xor    edx,edx
c0013b11:	01 c3                	add    ebx,eax
c0013b13:	89 c8                	mov    eax,ecx
c0013b15:	f7 f7                	div    edi
c0013b17:	bf 99 00 00 00       	mov    edi,0x99
c0013b1c:	29 c3                	sub    ebx,eax
c0013b1e:	31 d2                	xor    edx,edx
c0013b20:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013b28:	29 c3                	sub    ebx,eax
c0013b2a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013b2d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013b30:	bb 05 00 00 00       	mov    ebx,0x5
c0013b35:	83 c1 02             	add    ecx,0x2
c0013b38:	89 c8                	mov    eax,ecx
c0013b3a:	f7 f7                	div    edi
c0013b3c:	31 d2                	xor    edx,edx
c0013b3e:	89 c7                	mov    edi,eax
c0013b40:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013b46:	83 c0 02             	add    eax,0x2
c0013b49:	f7 f3                	div    ebx
c0013b4b:	89 eb                	mov    ebx,ebp
c0013b4d:	29 c3                	sub    ebx,eax
c0013b4f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013b55:	88 1e                	mov    BYTE PTR [esi],bl
c0013b57:	19 c0                	sbb    eax,eax
c0013b59:	31 d2                	xor    edx,edx
c0013b5b:	83 e0 0c             	and    eax,0xc
c0013b5e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013b62:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013b6a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013b6e:	83 f9 01             	cmp    ecx,0x1
c0013b71:	0f 96 c2             	setbe  dl
c0013b74:	41                   	inc    ecx
c0013b75:	01 d0                	add    eax,edx
c0013b77:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013b7a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013b7e:	83 c4 1c             	add    esp,0x1c
c0013b81:	89 f0                	mov    eax,esi
c0013b83:	5b                   	pop    ebx
c0013b84:	5e                   	pop    esi
c0013b85:	5f                   	pop    edi
c0013b86:	5d                   	pop    ebp
c0013b87:	c2 04 00             	ret    0x4

c0013b8a <Clock::timeInDatetimeLocal()>:
c0013b8a:	53                   	push   ebx
c0013b8b:	83 ec 14             	sub    esp,0x14
c0013b8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b92:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013b96:	e8 83 fc ff ff       	call   c001381e <Clock::timeInSecondsLocal()>
c0013b9b:	83 c4 0c             	add    esp,0xc
c0013b9e:	52                   	push   edx
c0013b9f:	50                   	push   eax
c0013ba0:	53                   	push   ebx
c0013ba1:	e8 a0 fe ff ff       	call   c0013a46 <secondsToDatetime(unsigned long long)>
c0013ba6:	89 d8                	mov    eax,ebx
c0013ba8:	83 c4 14             	add    esp,0x14
c0013bab:	5b                   	pop    ebx
c0013bac:	c2 04 00             	ret    0x4
c0013baf:	90                   	nop

c0013bb0 <Device::hibernate()>:
c0013bb0:	c3                   	ret    
c0013bb1:	90                   	nop

c0013bb2 <Device::wake()>:
c0013bb2:	c3                   	ret    
c0013bb3:	90                   	nop

c0013bb4 <Device::detect()>:
c0013bb4:	c3                   	ret    
c0013bb5:	90                   	nop

c0013bb6 <Device::disableLegacy()>:
c0013bb6:	c3                   	ret    
c0013bb7:	90                   	nop

c0013bb8 <Device::powerSaving(PowerSavingLevel)>:
c0013bb8:	c3                   	ret    
c0013bb9:	90                   	nop

c0013bba <DriverlessDevice::close(int, int, void*)>:
c0013bba:	31 c0                	xor    eax,eax
c0013bbc:	c3                   	ret    
c0013bbd:	90                   	nop

c0013bbe <DriverlessDevice::detect()>:
c0013bbe:	c3                   	ret    
c0013bbf:	90                   	nop

c0013bc0 <DriverlessDevice::open(int, int, void*)>:
c0013bc0:	83 ec 18             	sub    esp,0x18
c0013bc3:	68 10 99 02 c0       	push   0xc0029910
c0013bc8:	e8 de 5f 00 00       	call   c0019bab <Krnl::panic(char const*)>
c0013bcd:	83 c8 ff             	or     eax,0xffffffff
c0013bd0:	83 c4 1c             	add    esp,0x1c
c0013bd3:	c3                   	ret    

c0013bd4 <Device::~Device()>:
c0013bd4:	ba 38 99 02 c0       	mov    edx,0xc0029938
c0013bd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bdd:	89 10                	mov    DWORD PTR [eax],edx
c0013bdf:	90                   	nop
c0013be0:	c3                   	ret    
c0013be1:	90                   	nop

c0013be2 <Device::~Device()>:
c0013be2:	83 ec 0c             	sub    esp,0xc
c0013be5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013be9:	e8 e6 ff ff ff       	call   c0013bd4 <Device::~Device()>
c0013bee:	83 c4 04             	add    esp,0x4
c0013bf1:	83 ec 08             	sub    esp,0x8
c0013bf4:	68 58 01 00 00       	push   0x158
c0013bf9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bfd:	e8 f9 eb ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0013c02:	83 c4 10             	add    esp,0x10
c0013c05:	83 c4 0c             	add    esp,0xc
c0013c08:	c3                   	ret    
c0013c09:	90                   	nop

c0013c0a <Device::findAndLoadDriver()>:
c0013c0a:	c3                   	ret    
c0013c0b:	90                   	nop

c0013c0c <Device::preOpenPCI(PCIDeviceInfo)>:
c0013c0c:	57                   	push   edi
c0013c0d:	b9 09 00 00 00       	mov    ecx,0x9
c0013c12:	56                   	push   esi
c0013c13:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013c17:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013c1b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013c25:	81 c7 18 01 00 00    	add    edi,0x118
c0013c2b:	fc                   	cld    
c0013c2c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013c2e:	5e                   	pop    esi
c0013c2f:	5f                   	pop    edi
c0013c30:	c3                   	ret    
c0013c31:	90                   	nop

c0013c32 <Device::preOpenACPI(void*, char*, char*)>:
c0013c32:	56                   	push   esi
c0013c33:	53                   	push   ebx
c0013c34:	83 ec 08             	sub    esp,0x8
c0013c37:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013c3b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013c3f:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013c49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c4d:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013c53:	6a 1e                	push   0x1e
c0013c55:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013c5b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013c5f:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013c65:	50                   	push   eax
c0013c66:	e8 35 ca fe ff       	call   c00006a0 <memcpy>
c0013c6b:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013c6f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013c73:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013c7b:	83 c4 14             	add    esp,0x14
c0013c7e:	5b                   	pop    ebx
c0013c7f:	5e                   	pop    esi
c0013c80:	e9 1b ca fe ff       	jmp    c00006a0 <memcpy>
c0013c85:	90                   	nop

c0013c86 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c8a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013c8f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013c96:	75 0b                	jne    c0013ca3 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013c98:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c9a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c9e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013ca1:	eb 1e                	jmp    c0013cc1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013ca3:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0013ca8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013cae:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013cb4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013cb6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cbe:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013cc1:	ff e0                	jmp    eax
c0013cc3:	90                   	nop

c0013cc4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013cc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cc8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ccd:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013cd4:	75 0b                	jne    c0013ce1 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013cd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cd8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cdc:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013cdf:	eb 1e                	jmp    c0013cff <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013ce1:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0013ce6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013cec:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013cf2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013cf4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cf8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cfc:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013cff:	ff e0                	jmp    eax
c0013d01:	90                   	nop

c0013d02 <Device::addChild(Device*)>:
c0013d02:	53                   	push   ebx
c0013d03:	83 ec 08             	sub    esp,0x8
c0013d06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d0e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013d14:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013d1a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013d1c:	85 d2                	test   edx,edx
c0013d1e:	74 04                	je     c0013d24 <Device::addChild(Device*)+0x22>
c0013d20:	89 d3                	mov    ebx,edx
c0013d22:	eb f6                	jmp    c0013d1a <Device::addChild(Device*)+0x18>
c0013d24:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013d27:	83 ec 0c             	sub    esp,0xc
c0013d2a:	6a 08                	push   0x8
c0013d2c:	e8 05 b9 ff ff       	call   c000f636 <malloc>
c0013d31:	89 03                	mov    DWORD PTR [ebx],eax
c0013d33:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d40:	83 c4 18             	add    esp,0x18
c0013d43:	5b                   	pop    ebx
c0013d44:	c3                   	ret    
c0013d45:	90                   	nop

c0013d46 <Device::removeAllChildren()>:
c0013d46:	56                   	push   esi
c0013d47:	53                   	push   ebx
c0013d48:	52                   	push   edx
c0013d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d4d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013d53:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d56:	74 17                	je     c0013d6f <Device::removeAllChildren()+0x29>
c0013d58:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013d5b:	85 c0                	test   eax,eax
c0013d5d:	74 0c                	je     c0013d6b <Device::removeAllChildren()+0x25>
c0013d5f:	83 ec 0c             	sub    esp,0xc
c0013d62:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d64:	50                   	push   eax
c0013d65:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013d68:	83 c4 10             	add    esp,0x10
c0013d6b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d6d:	eb e4                	jmp    c0013d53 <Device::removeAllChildren()+0xd>
c0013d6f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d7b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d88:	58                   	pop    eax
c0013d89:	5b                   	pop    ebx
c0013d8a:	5e                   	pop    esi
c0013d8b:	c3                   	ret    

c0013d8c <Device::hibernateAll()>:
c0013d8c:	53                   	push   ebx
c0013d8d:	83 ec 14             	sub    esp,0x14
c0013d90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d96:	53                   	push   ebx
c0013d97:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013d9a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013da0:	83 c4 10             	add    esp,0x10
c0013da3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013da6:	74 0f                	je     c0013db7 <Device::hibernateAll()+0x2b>
c0013da8:	83 ec 0c             	sub    esp,0xc
c0013dab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dae:	e8 d9 ff ff ff       	call   c0013d8c <Device::hibernateAll()>
c0013db3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013db5:	eb e9                	jmp    c0013da0 <Device::hibernateAll()+0x14>
c0013db7:	83 c4 08             	add    esp,0x8
c0013dba:	5b                   	pop    ebx
c0013dbb:	c3                   	ret    

c0013dbc <Device::wakeAll()>:
c0013dbc:	53                   	push   ebx
c0013dbd:	83 ec 14             	sub    esp,0x14
c0013dc0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dc6:	53                   	push   ebx
c0013dc7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013dca:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dd0:	83 c4 10             	add    esp,0x10
c0013dd3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dd6:	74 0f                	je     c0013de7 <Device::wakeAll()+0x2b>
c0013dd8:	83 ec 0c             	sub    esp,0xc
c0013ddb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dde:	e8 d9 ff ff ff       	call   c0013dbc <Device::wakeAll()>
c0013de3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013de5:	eb e9                	jmp    c0013dd0 <Device::wakeAll()+0x14>
c0013de7:	83 c4 08             	add    esp,0x8
c0013dea:	5b                   	pop    ebx
c0013deb:	c3                   	ret    

c0013dec <Device::detectAll()>:
c0013dec:	53                   	push   ebx
c0013ded:	83 ec 14             	sub    esp,0x14
c0013df0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013df4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013df6:	53                   	push   ebx
c0013df7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013dfa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e00:	83 c4 10             	add    esp,0x10
c0013e03:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e06:	74 0f                	je     c0013e17 <Device::detectAll()+0x2b>
c0013e08:	83 ec 0c             	sub    esp,0xc
c0013e0b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e0e:	e8 d9 ff ff ff       	call   c0013dec <Device::detectAll()>
c0013e13:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e15:	eb e9                	jmp    c0013e00 <Device::detectAll()+0x14>
c0013e17:	83 c4 08             	add    esp,0x8
c0013e1a:	5b                   	pop    ebx
c0013e1b:	c3                   	ret    

c0013e1c <Device::disableLegacyAll()>:
c0013e1c:	53                   	push   ebx
c0013e1d:	83 ec 14             	sub    esp,0x14
c0013e20:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e24:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e26:	53                   	push   ebx
c0013e27:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013e2a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e30:	83 c4 10             	add    esp,0x10
c0013e33:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e36:	74 0f                	je     c0013e47 <Device::disableLegacyAll()+0x2b>
c0013e38:	83 ec 0c             	sub    esp,0xc
c0013e3b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e3e:	e8 d9 ff ff ff       	call   c0013e1c <Device::disableLegacyAll()>
c0013e43:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e45:	eb e9                	jmp    c0013e30 <Device::disableLegacyAll()+0x14>
c0013e47:	83 c4 08             	add    esp,0x8
c0013e4a:	5b                   	pop    ebx
c0013e4b:	c3                   	ret    

c0013e4c <Device::loadDriversForAll()>:
c0013e4c:	53                   	push   ebx
c0013e4d:	83 ec 08             	sub    esp,0x8
c0013e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e54:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e5a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013e5c:	85 db                	test   ebx,ebx
c0013e5e:	74 12                	je     c0013e72 <Device::loadDriversForAll()+0x26>
c0013e60:	83 ec 0c             	sub    esp,0xc
c0013e63:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013e66:	e8 e1 ff ff ff       	call   c0013e4c <Device::loadDriversForAll()>
c0013e6b:	83 c4 10             	add    esp,0x10
c0013e6e:	89 d8                	mov    eax,ebx
c0013e70:	eb e8                	jmp    c0013e5a <Device::loadDriversForAll()+0xe>
c0013e72:	83 c4 08             	add    esp,0x8
c0013e75:	5b                   	pop    ebx
c0013e76:	c3                   	ret    
c0013e77:	90                   	nop

c0013e78 <Device::closeAll()>:
c0013e78:	53                   	push   ebx
c0013e79:	83 ec 08             	sub    esp,0x8
c0013e7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e82:	6a 00                	push   0x0
c0013e84:	6a 00                	push   0x0
c0013e86:	6a 00                	push   0x0
c0013e88:	53                   	push   ebx
c0013e89:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e8c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e92:	83 c4 10             	add    esp,0x10
c0013e95:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e98:	74 0f                	je     c0013ea9 <Device::closeAll()+0x31>
c0013e9a:	83 ec 0c             	sub    esp,0xc
c0013e9d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ea0:	e8 d3 ff ff ff       	call   c0013e78 <Device::closeAll()>
c0013ea5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ea7:	eb e9                	jmp    c0013e92 <Device::closeAll()+0x1a>
c0013ea9:	83 c4 08             	add    esp,0x8
c0013eac:	5b                   	pop    ebx
c0013ead:	c3                   	ret    

c0013eae <Device::powerSavingAll(PowerSavingLevel)>:
c0013eae:	56                   	push   esi
c0013eaf:	53                   	push   ebx
c0013eb0:	83 ec 0c             	sub    esp,0xc
c0013eb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013eb7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013ebb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ebd:	56                   	push   esi
c0013ebe:	53                   	push   ebx
c0013ebf:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013ec2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ec8:	83 c4 10             	add    esp,0x10
c0013ecb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ece:	74 0f                	je     c0013edf <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013ed0:	52                   	push   edx
c0013ed1:	52                   	push   edx
c0013ed2:	56                   	push   esi
c0013ed3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ed6:	e8 d3 ff ff ff       	call   c0013eae <Device::powerSavingAll(PowerSavingLevel)>
c0013edb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013edd:	eb e9                	jmp    c0013ec8 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013edf:	58                   	pop    eax
c0013ee0:	5b                   	pop    ebx
c0013ee1:	5e                   	pop    esi
c0013ee2:	c3                   	ret    
c0013ee3:	90                   	nop

c0013ee4 <Device::setName(char const*)>:
c0013ee4:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013eec:	e9 84 c8 fe ff       	jmp    c0000775 <strcpy>
c0013ef1:	90                   	nop

c0013ef2 <Device::Device(char const*)>:
c0013ef2:	83 ec 1c             	sub    esp,0x1c
c0013ef5:	ba 38 99 02 c0       	mov    edx,0xc0029938
c0013efa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013efe:	89 10                	mov    DWORD PTR [eax],edx
c0013f00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f04:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013f0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f12:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013f1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f20:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f2e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f38:	83 ec 08             	sub    esp,0x8
c0013f3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f43:	e8 9c ff ff ff       	call   c0013ee4 <Device::setName(char const*)>
c0013f48:	83 c4 10             	add    esp,0x10
c0013f4b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013f53:	83 ec 0c             	sub    esp,0xc
c0013f56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f5a:	e8 d7 b6 ff ff       	call   c000f636 <malloc>
c0013f5f:	83 c4 10             	add    esp,0x10
c0013f62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f68:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f6f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f73:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013f79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f7d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f83:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f8d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f9e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013fa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fa9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013fb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013fbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013fda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fde:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013fe8:	90                   	nop
c0013fe9:	83 c4 1c             	add    esp,0x1c
c0013fec:	c3                   	ret    
c0013fed:	90                   	nop

c0013fee <Device::getName()>:
c0013fee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ff2:	05 d0 00 00 00       	add    eax,0xd0
c0013ff7:	c3                   	ret    

c0013ff8 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013ff8:	83 ec 0c             	sub    esp,0xc
c0013ffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fff:	83 ec 08             	sub    esp,0x8
c0014002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014006:	50                   	push   eax
c0014007:	e8 e6 fe ff ff       	call   c0013ef2 <Device::Device(char const*)>
c001400c:	83 c4 10             	add    esp,0x10
c001400f:	ba 64 99 02 c0       	mov    edx,0xc0029964
c0014014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014018:	89 10                	mov    DWORD PTR [eax],edx
c001401a:	90                   	nop
c001401b:	83 c4 0c             	add    esp,0xc
c001401e:	c3                   	ret    
c001401f:	90                   	nop

c0014020 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014020:	57                   	push   edi
c0014021:	56                   	push   esi
c0014022:	53                   	push   ebx
c0014023:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014027:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001402b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001402f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014035:	75 0c                	jne    c0014043 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014037:	52                   	push   edx
c0014038:	52                   	push   edx
c0014039:	53                   	push   ebx
c001403a:	56                   	push   esi
c001403b:	e8 ca 36 01 00       	call   c002770a <LinkedList<Device>::addElement(Device*)>
c0014040:	83 c4 10             	add    esp,0x10
c0014043:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014049:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001404c:	74 12                	je     c0014060 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001404e:	50                   	push   eax
c001404f:	57                   	push   edi
c0014050:	56                   	push   esi
c0014051:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014054:	e8 c7 ff ff ff       	call   c0014020 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014059:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001405b:	83 c4 10             	add    esp,0x10
c001405e:	eb e9                	jmp    c0014049 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014060:	5b                   	pop    ebx
c0014061:	5e                   	pop    esi
c0014062:	5f                   	pop    edi
c0014063:	c3                   	ret    

c0014064 <getDevicesOfType(DeviceType)>:
c0014064:	53                   	push   ebx
c0014065:	83 ec 14             	sub    esp,0x14
c0014068:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001406c:	53                   	push   ebx
c001406d:	e8 74 37 01 00       	call   c00277e6 <LinkedList<Device>::LinkedList()>
c0014072:	83 c4 0c             	add    esp,0xc
c0014075:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014079:	53                   	push   ebx
c001407a:	ff 35 c8 ce 02 c0    	push   DWORD PTR ds:0xc002cec8
c0014080:	e8 9b ff ff ff       	call   c0014020 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014085:	89 d8                	mov    eax,ebx
c0014087:	83 c4 18             	add    esp,0x18
c001408a:	5b                   	pop    ebx
c001408b:	c2 04 00             	ret    0x4

c001408e <HardDiskController::HardDiskController(char const*)>:
c001408e:	83 ec 0c             	sub    esp,0xc
c0014091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014095:	83 ec 08             	sub    esp,0x8
c0014098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001409c:	50                   	push   eax
c001409d:	e8 50 fe ff ff       	call   c0013ef2 <Device::Device(char const*)>
c00140a2:	83 c4 10             	add    esp,0x10
c00140a5:	ba 90 99 02 c0       	mov    edx,0xc0029990
c00140aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ae:	89 10                	mov    DWORD PTR [eax],edx
c00140b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140b4:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00140be:	90                   	nop
c00140bf:	83 c4 0c             	add    esp,0xc
c00140c2:	c3                   	ret    
c00140c3:	90                   	nop

c00140c4 <HardDiskController::~HardDiskController()>:
c00140c4:	83 ec 0c             	sub    esp,0xc
c00140c7:	ba 90 99 02 c0       	mov    edx,0xc0029990
c00140cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140d0:	89 10                	mov    DWORD PTR [eax],edx
c00140d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140d6:	83 ec 0c             	sub    esp,0xc
c00140d9:	50                   	push   eax
c00140da:	e8 f5 fa ff ff       	call   c0013bd4 <Device::~Device()>
c00140df:	83 c4 10             	add    esp,0x10
c00140e2:	90                   	nop
c00140e3:	83 c4 0c             	add    esp,0xc
c00140e6:	c3                   	ret    
c00140e7:	90                   	nop

c00140e8 <HardDiskController::~HardDiskController()>:
c00140e8:	83 ec 0c             	sub    esp,0xc
c00140eb:	83 ec 0c             	sub    esp,0xc
c00140ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140f2:	e8 cd ff ff ff       	call   c00140c4 <HardDiskController::~HardDiskController()>
c00140f7:	83 c4 10             	add    esp,0x10
c00140fa:	83 ec 08             	sub    esp,0x8
c00140fd:	68 58 01 00 00       	push   0x158
c0014102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014106:	e8 f0 e6 ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c001410b:	83 c4 10             	add    esp,0x10
c001410e:	83 c4 0c             	add    esp,0xc
c0014111:	c3                   	ret    

c0014112 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014112:	83 ec 0c             	sub    esp,0xc
c0014115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014119:	83 ec 08             	sub    esp,0x8
c001411c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014120:	50                   	push   eax
c0014121:	e8 cc fd ff ff       	call   c0013ef2 <Device::Device(char const*)>
c0014126:	83 c4 10             	add    esp,0x10
c0014129:	ba bc 99 02 c0       	mov    edx,0xc00299bc
c001412e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014132:	89 10                	mov    DWORD PTR [eax],edx
c0014134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014138:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001413f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014143:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001414a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001414e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001415c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014160:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001416a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014174:	90                   	nop
c0014175:	83 c4 0c             	add    esp,0xc
c0014178:	c3                   	ret    
c0014179:	90                   	nop

c001417a <PhysicalDisk::startCache()>:
c001417a:	56                   	push   esi
c001417b:	53                   	push   ebx
c001417c:	83 ec 10             	sub    esp,0x10
c001417f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014183:	6a 30                	push   0x30
c0014185:	e8 ac b4 ff ff       	call   c000f636 <malloc>
c001418a:	89 c6                	mov    esi,eax
c001418c:	58                   	pop    eax
c001418d:	5a                   	pop    edx
c001418e:	53                   	push   ebx
c001418f:	56                   	push   esi
c0014190:	e8 dd 25 00 00       	call   c0016772 <VCache::VCache(PhysicalDisk*)>
c0014195:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001419b:	83 c4 14             	add    esp,0x14
c001419e:	5b                   	pop    ebx
c001419f:	5e                   	pop    esi
c00141a0:	c3                   	ret    
c00141a1:	90                   	nop

c00141a2 <PhysicalDisk::~PhysicalDisk()>:
c00141a2:	83 ec 0c             	sub    esp,0xc
c00141a5:	ba bc 99 02 c0       	mov    edx,0xc00299bc
c00141aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141ae:	89 10                	mov    DWORD PTR [eax],edx
c00141b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141b4:	83 ec 0c             	sub    esp,0xc
c00141b7:	50                   	push   eax
c00141b8:	e8 17 fa ff ff       	call   c0013bd4 <Device::~Device()>
c00141bd:	83 c4 10             	add    esp,0x10
c00141c0:	90                   	nop
c00141c1:	83 c4 0c             	add    esp,0xc
c00141c4:	c3                   	ret    
c00141c5:	90                   	nop

c00141c6 <PhysicalDisk::~PhysicalDisk()>:
c00141c6:	83 ec 0c             	sub    esp,0xc
c00141c9:	83 ec 0c             	sub    esp,0xc
c00141cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141d0:	e8 cd ff ff ff       	call   c00141a2 <PhysicalDisk::~PhysicalDisk()>
c00141d5:	83 c4 10             	add    esp,0x10
c00141d8:	83 ec 08             	sub    esp,0x8
c00141db:	68 6c 01 00 00       	push   0x16c
c00141e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141e4:	e8 12 e6 ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c00141e9:	83 c4 10             	add    esp,0x10
c00141ec:	83 c4 0c             	add    esp,0xc
c00141ef:	c3                   	ret    

c00141f0 <FPU::FPU(char const*)>:
c00141f0:	83 ec 0c             	sub    esp,0xc
c00141f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141f7:	83 ec 08             	sub    esp,0x8
c00141fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141fe:	50                   	push   eax
c00141ff:	e8 ee fc ff ff       	call   c0013ef2 <Device::Device(char const*)>
c0014204:	83 c4 10             	add    esp,0x10
c0014207:	ba fc 99 02 c0       	mov    edx,0xc00299fc
c001420c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014210:	89 10                	mov    DWORD PTR [eax],edx
c0014212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014216:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014220:	90                   	nop
c0014221:	83 c4 0c             	add    esp,0xc
c0014224:	c3                   	ret    
c0014225:	90                   	nop

c0014226 <FPU::~FPU()>:
c0014226:	83 ec 0c             	sub    esp,0xc
c0014229:	ba fc 99 02 c0       	mov    edx,0xc00299fc
c001422e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014232:	89 10                	mov    DWORD PTR [eax],edx
c0014234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014238:	83 ec 0c             	sub    esp,0xc
c001423b:	50                   	push   eax
c001423c:	e8 93 f9 ff ff       	call   c0013bd4 <Device::~Device()>
c0014241:	83 c4 10             	add    esp,0x10
c0014244:	90                   	nop
c0014245:	83 c4 0c             	add    esp,0xc
c0014248:	c3                   	ret    
c0014249:	90                   	nop

c001424a <FPU::~FPU()>:
c001424a:	83 ec 0c             	sub    esp,0xc
c001424d:	83 ec 0c             	sub    esp,0xc
c0014250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014254:	e8 cd ff ff ff       	call   c0014226 <FPU::~FPU()>
c0014259:	83 c4 10             	add    esp,0x10
c001425c:	83 ec 08             	sub    esp,0x8
c001425f:	68 58 01 00 00       	push   0x158
c0014264:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014268:	e8 8e e5 ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c001426d:	83 c4 10             	add    esp,0x10
c0014270:	83 c4 0c             	add    esp,0xc
c0014273:	c3                   	ret    

c0014274 <setupFPU()>:
c0014274:	53                   	push   ebx
c0014275:	83 ec 08             	sub    esp,0x8
c0014278:	8b 15 c8 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002cec8
c001427e:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014285:	74 19                	je     c00142a0 <setupFPU()+0x2c>
c0014287:	83 ec 0c             	sub    esp,0xc
c001428a:	68 58 01 00 00       	push   0x158
c001428f:	e8 a2 b3 ff ff       	call   c000f636 <malloc>
c0014294:	89 c3                	mov    ebx,eax
c0014296:	89 04 24             	mov    DWORD PTR [esp],eax
c0014299:	e8 b0 00 01 00       	call   c002434e <AVX::AVX()>
c001429e:	eb 5b                	jmp    c00142fb <setupFPU()+0x87>
c00142a0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00142a6:	84 c0                	test   al,al
c00142a8:	79 19                	jns    c00142c3 <setupFPU()+0x4f>
c00142aa:	83 ec 0c             	sub    esp,0xc
c00142ad:	68 58 01 00 00       	push   0x158
c00142b2:	e8 7f b3 ff ff       	call   c000f636 <malloc>
c00142b7:	89 c3                	mov    ebx,eax
c00142b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00142bc:	e8 b3 01 01 00       	call   c0024474 <SSE::SSE()>
c00142c1:	eb 38                	jmp    c00142fb <setupFPU()+0x87>
c00142c3:	a8 20                	test   al,0x20
c00142c5:	74 19                	je     c00142e0 <setupFPU()+0x6c>
c00142c7:	83 ec 0c             	sub    esp,0xc
c00142ca:	68 58 01 00 00       	push   0x158
c00142cf:	e8 62 b3 ff ff       	call   c000f636 <malloc>
c00142d4:	89 c3                	mov    ebx,eax
c00142d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00142d9:	e8 00 01 01 00       	call   c00243de <MMX::MMX()>
c00142de:	eb 1b                	jmp    c00142fb <setupFPU()+0x87>
c00142e0:	a8 10                	test   al,0x10
c00142e2:	74 1c                	je     c0014300 <setupFPU()+0x8c>
c00142e4:	83 ec 0c             	sub    esp,0xc
c00142e7:	68 58 01 00 00       	push   0x158
c00142ec:	e8 45 b3 ff ff       	call   c000f636 <malloc>
c00142f1:	89 c3                	mov    ebx,eax
c00142f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00142f6:	e8 07 02 01 00       	call   c0024502 <x87::x87()>
c00142fb:	83 c4 10             	add    esp,0x10
c00142fe:	eb 24                	jmp    c0014324 <setupFPU()+0xb0>
c0014300:	83 e0 ef             	and    eax,0xffffffef
c0014303:	83 ec 0c             	sub    esp,0xc
c0014306:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001430c:	68 e8 99 02 c0       	push   0xc00299e8
c0014311:	e8 c5 e5 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0014316:	0f 20 c0             	mov    eax,cr0
c0014319:	83 c8 04             	or     eax,0x4
c001431c:	0f 22 c0             	mov    cr0,eax
c001431f:	31 db                	xor    ebx,ebx
c0014321:	83 c4 10             	add    esp,0x10
c0014324:	89 d8                	mov    eax,ebx
c0014326:	83 c4 08             	add    esp,0x8
c0014329:	5b                   	pop    ebx
c001432a:	c3                   	ret    
c001432b:	90                   	nop

c001432c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001432c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014330:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014334:	c1 e0 04             	shl    eax,0x4
c0014337:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001433b:	8d 50 10             	lea    edx,[eax+0x10]
c001433e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014344:	74 08                	je     c001434e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014346:	83 c0 04             	add    eax,0x4
c0014349:	39 d0                	cmp    eax,edx
c001434b:	75 f1                	jne    c001433e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001434d:	c3                   	ret    
c001434e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014358:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014362:	eb e2                	jmp    c0014346 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014364 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014364:	57                   	push   edi
c0014365:	31 c0                	xor    eax,eax
c0014367:	56                   	push   esi
c0014368:	53                   	push   ebx
c0014369:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001436d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014371:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014375:	89 da                	mov    edx,ebx
c0014377:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001437b:	c1 e2 04             	shl    edx,0x4
c001437e:	01 ca                	add    edx,ecx
c0014380:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014388:	74 16                	je     c00143a0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001438a:	40                   	inc    eax
c001438b:	83 f8 04             	cmp    eax,0x4
c001438e:	75 f0                	jne    c0014380 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014390:	c7 44 24 10 2c 9a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029a2c
c0014398:	5b                   	pop    ebx
c0014399:	5e                   	pop    esi
c001439a:	5f                   	pop    edi
c001439b:	e9 0b 58 00 00       	jmp    c0019bab <Krnl::panic(char const*)>
c00143a0:	8d 04 98             	lea    eax,[eax+ebx*4]
c00143a3:	8d 04 81             	lea    eax,[ecx+eax*4]
c00143a6:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00143ac:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00143b2:	5b                   	pop    ebx
c00143b3:	5e                   	pop    esi
c00143b4:	5f                   	pop    edi
c00143b5:	c3                   	ret    

c00143b6 <doubleFault(regs*, void*)>:
c00143b6:	55                   	push   ebp
c00143b7:	89 e5                	mov    ebp,esp
c00143b9:	83 ec 08             	sub    esp,0x8
c00143bc:	83 ec 0c             	sub    esp,0xc
c00143bf:	68 67 9a 02 c0       	push   0xc0029a67
c00143c4:	e8 e2 57 00 00       	call   c0019bab <Krnl::panic(char const*)>
c00143c9:	83 c4 10             	add    esp,0x10
c00143cc:	90                   	nop
c00143cd:	c9                   	leave  
c00143ce:	c3                   	ret    
c00143cf:	90                   	nop

c00143d0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00143d0:	56                   	push   esi
c00143d1:	53                   	push   ebx
c00143d2:	50                   	push   eax
c00143d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143d7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00143db:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00143e0:	75 35                	jne    c0014417 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00143e2:	8d 43 20             	lea    eax,[ebx+0x20]
c00143e5:	31 d2                	xor    edx,edx
c00143e7:	89 c1                	mov    ecx,eax
c00143e9:	c1 e1 04             	shl    ecx,0x4
c00143ec:	01 f1                	add    ecx,esi
c00143ee:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00143f6:	74 3e                	je     c0014436 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00143f8:	42                   	inc    edx
c00143f9:	83 fa 04             	cmp    edx,0x4
c00143fc:	75 f0                	jne    c00143ee <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00143fe:	83 ec 0c             	sub    esp,0xc
c0014401:	68 ac 9a 02 c0       	push   0xc0029aac
c0014406:	e8 a0 57 00 00       	call   c0019bab <Krnl::panic(char const*)>
c001440b:	83 c4 10             	add    esp,0x10
c001440e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014413:	5a                   	pop    edx
c0014414:	5b                   	pop    ebx
c0014415:	5e                   	pop    esi
c0014416:	c3                   	ret    
c0014417:	83 ec 0c             	sub    esp,0xc
c001441a:	56                   	push   esi
c001441b:	e8 ce fb ff ff       	call   c0013fee <Device::getName()>
c0014420:	83 c4 10             	add    esp,0x10
c0014423:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014426:	75 ba                	jne    c00143e2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014428:	83 fb 0f             	cmp    ebx,0xf
c001442b:	7f 29                	jg     c0014456 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001442d:	0f b6 9b 20 c1 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3ee0]
c0014434:	eb ac                	jmp    c00143e2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014436:	8d 04 82             	lea    eax,[edx+eax*4]
c0014439:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001443d:	8d 04 86             	lea    eax,[esi+eax*4]
c0014440:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014446:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001444a:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014450:	89 d8                	mov    eax,ebx
c0014452:	5a                   	pop    edx
c0014453:	5b                   	pop    ebx
c0014454:	5e                   	pop    esi
c0014455:	c3                   	ret    
c0014456:	83 ec 0c             	sub    esp,0xc
c0014459:	68 74 9a 02 c0       	push   0xc0029a74
c001445e:	e8 48 57 00 00       	call   c0019bab <Krnl::panic(char const*)>
c0014463:	83 c4 10             	add    esp,0x10
c0014466:	e9 77 ff ff ff       	jmp    c00143e2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001446b:	90                   	nop

c001446c <InterruptController::clearAllHandlers(int, bool)>:
c001446c:	56                   	push   esi
c001446d:	53                   	push   ebx
c001446e:	52                   	push   edx
c001446f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014473:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014477:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001447c:	75 61                	jne    c00144df <InterruptController::clearAllHandlers(int, bool)+0x73>
c001447e:	8d 46 20             	lea    eax,[esi+0x20]
c0014481:	c1 e6 04             	shl    esi,0x4
c0014484:	c1 e0 04             	shl    eax,0x4
c0014487:	01 de                	add    esi,ebx
c0014489:	01 d8                	add    eax,ebx
c001448b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014495:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c001449f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00144a9:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00144b3:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00144bd:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00144c7:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00144d1:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00144db:	58                   	pop    eax
c00144dc:	5b                   	pop    ebx
c00144dd:	5e                   	pop    esi
c00144de:	c3                   	ret    
c00144df:	83 ec 0c             	sub    esp,0xc
c00144e2:	53                   	push   ebx
c00144e3:	e8 06 fb ff ff       	call   c0013fee <Device::getName()>
c00144e8:	83 c4 10             	add    esp,0x10
c00144eb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00144ee:	75 8e                	jne    c001447e <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144f0:	83 fe 0f             	cmp    esi,0xf
c00144f3:	7f 09                	jg     c00144fe <InterruptController::clearAllHandlers(int, bool)+0x92>
c00144f5:	0f b6 b6 20 c1 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3ee0]
c00144fc:	eb 80                	jmp    c001447e <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144fe:	83 ec 0c             	sub    esp,0xc
c0014501:	68 e8 9a 02 c0       	push   0xc0029ae8
c0014506:	e8 a0 56 00 00       	call   c0019bab <Krnl::panic(char const*)>
c001450b:	83 c4 10             	add    esp,0x10
c001450e:	e9 6b ff ff ff       	jmp    c001447e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014513:	90                   	nop

c0014514 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014514:	56                   	push   esi
c0014515:	53                   	push   ebx
c0014516:	52                   	push   edx
c0014517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001451b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001451f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014524:	75 3a                	jne    c0014560 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014526:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001452a:	8d 50 20             	lea    edx,[eax+0x20]
c001452d:	c1 e2 04             	shl    edx,0x4
c0014530:	8d 04 16             	lea    eax,[esi+edx*1]
c0014533:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014537:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001453d:	74 0b                	je     c001454a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001453f:	83 c0 04             	add    eax,0x4
c0014542:	39 d0                	cmp    eax,edx
c0014544:	75 f1                	jne    c0014537 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014546:	58                   	pop    eax
c0014547:	5b                   	pop    ebx
c0014548:	5e                   	pop    esi
c0014549:	c3                   	ret    
c001454a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014554:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001455e:	eb df                	jmp    c001453f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014560:	83 ec 0c             	sub    esp,0xc
c0014563:	56                   	push   esi
c0014564:	e8 85 fa ff ff       	call   c0013fee <Device::getName()>
c0014569:	83 c4 10             	add    esp,0x10
c001456c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001456f:	75 b5                	jne    c0014526 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014571:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014576:	7f 11                	jg     c0014589 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014578:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001457c:	0f b6 80 20 c1 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3ee0]
c0014583:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014587:	eb 9d                	jmp    c0014526 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014589:	83 ec 0c             	sub    esp,0xc
c001458c:	68 e8 9a 02 c0       	push   0xc0029ae8
c0014591:	e8 15 56 00 00       	call   c0019bab <Krnl::panic(char const*)>
c0014596:	83 c4 10             	add    esp,0x10
c0014599:	eb 8b                	jmp    c0014526 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c001459b <nmiHandler(regs*, void*)>:
c001459b:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c00145a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145a4:	e9 d9 a7 ff ff       	jmp    c000ed82 <Computer::handleNMI()>

c00145a9 <int_handler>:
c00145a9:	55                   	push   ebp
c00145aa:	57                   	push   edi
c00145ab:	56                   	push   esi
c00145ac:	53                   	push   ebx
c00145ad:	83 ec 0c             	sub    esp,0xc
c00145b0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00145b4:	80 3d 00 da 02 c0 00 	cmp    BYTE PTR ds:0xc002da00,0x0
c00145bb:	74 0b                	je     c00145c8 <int_handler+0x1f>
c00145bd:	fa                   	cli    
c00145be:	f4                   	hlt    
c00145bf:	80 3d 00 da 02 c0 00 	cmp    BYTE PTR ds:0xc002da00,0x0
c00145c6:	75 f5                	jne    c00145bd <int_handler+0x14>
c00145c8:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c00145cd:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00145d0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00145d6:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00145dc:	8d 43 e0             	lea    eax,[ebx-0x20]
c00145df:	83 f8 17             	cmp    eax,0x17
c00145e2:	77 13                	ja     c00145f7 <int_handler+0x4e>
c00145e4:	83 ec 08             	sub    esp,0x8
c00145e7:	8b 17                	mov    edx,DWORD PTR [edi]
c00145e9:	8d 43 e0             	lea    eax,[ebx-0x20]
c00145ec:	0f b6 c0             	movzx  eax,al
c00145ef:	50                   	push   eax
c00145f0:	57                   	push   edi
c00145f1:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00145f4:	83 c4 10             	add    esp,0x10
c00145f7:	83 c3 15             	add    ebx,0x15
c00145fa:	c1 e3 04             	shl    ebx,0x4
c00145fd:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014601:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014608:	31 db                	xor    ebx,ebx
c001460a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001460e:	85 c0                	test   eax,eax
c0014610:	74 13                	je     c0014625 <int_handler+0x7c>
c0014612:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014615:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014619:	74 1c                	je     c0014637 <int_handler+0x8e>
c001461b:	83 ec 08             	sub    esp,0x8
c001461e:	52                   	push   edx
c001461f:	56                   	push   esi
c0014620:	ff d0                	call   eax
c0014622:	83 c4 10             	add    esp,0x10
c0014625:	43                   	inc    ebx
c0014626:	83 fb 04             	cmp    ebx,0x4
c0014629:	75 df                	jne    c001460a <int_handler+0x61>
c001462b:	83 c4 0c             	add    esp,0xc
c001462e:	31 c0                	xor    eax,eax
c0014630:	5b                   	pop    ebx
c0014631:	31 d2                	xor    edx,edx
c0014633:	5e                   	pop    esi
c0014634:	5f                   	pop    edi
c0014635:	5d                   	pop    ebp
c0014636:	c3                   	ret    
c0014637:	83 ec 08             	sub    esp,0x8
c001463a:	52                   	push   edx
c001463b:	56                   	push   esi
c001463c:	ff d0                	call   eax
c001463e:	83 c4 10             	add    esp,0x10
c0014641:	83 c4 0c             	add    esp,0xc
c0014644:	5b                   	pop    ebx
c0014645:	5e                   	pop    esi
c0014646:	5f                   	pop    edi
c0014647:	5d                   	pop    ebp
c0014648:	c3                   	ret    
c0014649:	90                   	nop

c001464a <InterruptController::InterruptController(char const*)>:
c001464a:	83 ec 1c             	sub    esp,0x1c
c001464d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014651:	83 ec 08             	sub    esp,0x8
c0014654:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014658:	50                   	push   eax
c0014659:	e8 94 f8 ff ff       	call   c0013ef2 <Device::Device(char const*)>
c001465e:	83 c4 10             	add    esp,0x10
c0014661:	ba 1c 9d 02 c0       	mov    edx,0xc0029d1c
c0014666:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001466a:	89 10                	mov    DWORD PTR [eax],edx
c001466c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014670:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001467a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014682:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001468a:	7f 5e                	jg     c00146ea <InterruptController::InterruptController(char const*)+0xa0>
c001468c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014694:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014699:	7f 49                	jg     c00146e4 <InterruptController::InterruptController(char const*)+0x9a>
c001469b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001469f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146a3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146ae:	01 ca                	add    edx,ecx
c00146b0:	83 c2 54             	add    edx,0x54
c00146b3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146c3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146ce:	01 ca                	add    edx,ecx
c00146d0:	81 c2 54 04 00 00    	add    edx,0x454
c00146d6:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146de:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00146e2:	eb b0                	jmp    c0014694 <InterruptController::InterruptController(char const*)+0x4a>
c00146e4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00146e8:	eb 98                	jmp    c0014682 <InterruptController::InterruptController(char const*)+0x38>
c00146ea:	90                   	nop
c00146eb:	83 c4 1c             	add    esp,0x1c
c00146ee:	c3                   	ret    
c00146ef:	90                   	nop

c00146f0 <InterruptController::~InterruptController()>:
c00146f0:	83 ec 0c             	sub    esp,0xc
c00146f3:	ba 1c 9d 02 c0       	mov    edx,0xc0029d1c
c00146f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146fc:	89 10                	mov    DWORD PTR [eax],edx
c00146fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014702:	83 ec 0c             	sub    esp,0xc
c0014705:	50                   	push   eax
c0014706:	e8 c9 f4 ff ff       	call   c0013bd4 <Device::~Device()>
c001470b:	83 c4 10             	add    esp,0x10
c001470e:	90                   	nop
c001470f:	83 c4 0c             	add    esp,0xc
c0014712:	c3                   	ret    
c0014713:	90                   	nop

c0014714 <InterruptController::~InterruptController()>:
c0014714:	83 ec 0c             	sub    esp,0xc
c0014717:	83 ec 0c             	sub    esp,0xc
c001471a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001471e:	e8 cd ff ff ff       	call   c00146f0 <InterruptController::~InterruptController()>
c0014723:	83 c4 10             	add    esp,0x10
c0014726:	83 ec 08             	sub    esp,0x8
c0014729:	68 58 21 00 00       	push   0x2158
c001472e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014732:	e8 c4 e0 ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0014737:	83 c4 10             	add    esp,0x10
c001473a:	83 c4 0c             	add    esp,0xc
c001473d:	c3                   	ret    

c001473e <displayDebugInfo(regs*)>:
c001473e:	55                   	push   ebp
c001473f:	57                   	push   edi
c0014740:	56                   	push   esi
c0014741:	53                   	push   ebx
c0014742:	83 ec 24             	sub    esp,0x24
c0014745:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014749:	0f 20 c2             	mov    edx,cr0
c001474c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014750:	0f 20 d7             	mov    edi,cr2
c0014753:	0f 20 de             	mov    esi,cr3
c0014756:	0f 20 e5             	mov    ebp,cr4
c0014759:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001475c:	68 22 9b 02 c0       	push   0xc0029b22
c0014761:	e8 75 e1 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0014766:	58                   	pop    eax
c0014767:	5a                   	pop    edx
c0014768:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001476b:	68 2d 9b 02 c0       	push   0xc0029b2d
c0014770:	e8 66 e1 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0014775:	59                   	pop    ecx
c0014776:	58                   	pop    eax
c0014777:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001477a:	68 38 9b 02 c0       	push   0xc0029b38
c001477f:	e8 57 e1 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0014784:	58                   	pop    eax
c0014785:	5a                   	pop    edx
c0014786:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014789:	68 43 9b 02 c0       	push   0xc0029b43
c001478e:	e8 48 e1 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0014793:	59                   	pop    ecx
c0014794:	58                   	pop    eax
c0014795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014798:	68 4e 9b 02 c0       	push   0xc0029b4e
c001479d:	e8 39 e1 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00147a2:	58                   	pop    eax
c00147a3:	5a                   	pop    edx
c00147a4:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00147a7:	68 59 9b 02 c0       	push   0xc0029b59
c00147ac:	e8 2a e1 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00147b1:	59                   	pop    ecx
c00147b2:	58                   	pop    eax
c00147b3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00147b6:	68 64 9b 02 c0       	push   0xc0029b64
c00147bb:	e8 1b e1 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00147c0:	58                   	pop    eax
c00147c1:	5a                   	pop    edx
c00147c2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00147c5:	68 6f 9b 02 c0       	push   0xc0029b6f
c00147ca:	e8 0c e1 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00147cf:	59                   	pop    ecx
c00147d0:	58                   	pop    eax
c00147d1:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00147d4:	68 7a 9b 02 c0       	push   0xc0029b7a
c00147d9:	e8 fd e0 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00147de:	58                   	pop    eax
c00147df:	5a                   	pop    edx
c00147e0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00147e3:	68 89 9b 02 c0       	push   0xc0029b89
c00147e8:	e8 ee e0 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00147ed:	59                   	pop    ecx
c00147ee:	58                   	pop    eax
c00147ef:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00147f2:	68 94 9b 02 c0       	push   0xc0029b94
c00147f7:	e8 df e0 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00147fc:	58                   	pop    eax
c00147fd:	5a                   	pop    edx
c00147fe:	57                   	push   edi
c00147ff:	68 9f 9b 02 c0       	push   0xc0029b9f
c0014804:	e8 d2 e0 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0014809:	59                   	pop    ecx
c001480a:	58                   	pop    eax
c001480b:	56                   	push   esi
c001480c:	68 aa 9b 02 c0       	push   0xc0029baa
c0014811:	e8 c5 e0 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0014816:	58                   	pop    eax
c0014817:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c001481c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014822:	e8 76 c2 ff ff       	call   c0010a9d <setActiveTerminal(VgaText*)>
c0014827:	58                   	pop    eax
c0014828:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001482b:	5a                   	pop    edx
c001482c:	c1 e0 05             	shl    eax,0x5
c001482f:	05 80 be 02 c0       	add    eax,0xc002be80
c0014834:	50                   	push   eax
c0014835:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c001483a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014840:	e8 77 c6 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0014845:	59                   	pop    ecx
c0014846:	58                   	pop    eax
c0014847:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c001484c:	68 b5 9b 02 c0       	push   0xc0029bb5
c0014851:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014857:	e8 60 c6 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c001485c:	58                   	pop    eax
c001485d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014862:	5a                   	pop    edx
c0014863:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014866:	83 c0 0c             	add    eax,0xc
c0014869:	50                   	push   eax
c001486a:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c001486f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014875:	e8 42 c6 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c001487a:	59                   	pop    ecx
c001487b:	58                   	pop    eax
c001487c:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0014881:	68 be 9b 02 c0       	push   0xc0029bbe
c0014886:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001488c:	e8 2b c6 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0014891:	58                   	pop    eax
c0014892:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0014897:	5a                   	pop    edx
c0014898:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001489b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a1:	e8 3c c6 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c00148a6:	59                   	pop    ecx
c00148a7:	58                   	pop    eax
c00148a8:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c00148ad:	68 c6 9b 02 c0       	push   0xc0029bc6
c00148b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b8:	e8 ff c5 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c00148bd:	58                   	pop    eax
c00148be:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c00148c3:	5a                   	pop    edx
c00148c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00148c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148cd:	e8 10 c6 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c00148d2:	59                   	pop    ecx
c00148d3:	58                   	pop    eax
c00148d4:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c00148d9:	68 ce 9b 02 c0       	push   0xc0029bce
c00148de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148e4:	e8 d3 c5 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c00148e9:	58                   	pop    eax
c00148ea:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c00148ef:	5a                   	pop    edx
c00148f0:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00148f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f9:	e8 e4 c5 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c00148fe:	59                   	pop    ecx
c00148ff:	58                   	pop    eax
c0014900:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0014905:	68 d6 9b 02 c0       	push   0xc0029bd6
c001490a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014910:	e8 a7 c5 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0014915:	58                   	pop    eax
c0014916:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c001491b:	5a                   	pop    edx
c001491c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001491f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014925:	e8 b8 c5 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c001492a:	59                   	pop    ecx
c001492b:	58                   	pop    eax
c001492c:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0014931:	68 de 9b 02 c0       	push   0xc0029bde
c0014936:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001493c:	e8 7b c5 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0014941:	58                   	pop    eax
c0014942:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0014947:	5a                   	pop    edx
c0014948:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001494b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014951:	e8 8c c5 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c0014956:	59                   	pop    ecx
c0014957:	58                   	pop    eax
c0014958:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c001495d:	68 e6 9b 02 c0       	push   0xc0029be6
c0014962:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014968:	e8 4f c5 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c001496d:	58                   	pop    eax
c001496e:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0014973:	5a                   	pop    edx
c0014974:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014977:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001497d:	e8 60 c5 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c0014982:	59                   	pop    ecx
c0014983:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0014988:	5b                   	pop    ebx
c0014989:	68 ee 9b 02 c0       	push   0xc0029bee
c001498e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014994:	e8 23 c5 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0014999:	58                   	pop    eax
c001499a:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c001499f:	5a                   	pop    edx
c00149a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00149a4:	52                   	push   edx
c00149a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ab:	e8 32 c5 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c00149b0:	59                   	pop    ecx
c00149b1:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c00149b6:	5b                   	pop    ebx
c00149b7:	68 f7 9b 02 c0       	push   0xc0029bf7
c00149bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149c2:	e8 f5 c4 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c00149c7:	58                   	pop    eax
c00149c8:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c00149cd:	5a                   	pop    edx
c00149ce:	57                   	push   edi
c00149cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149d5:	e8 08 c5 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c00149da:	59                   	pop    ecx
c00149db:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c00149e0:	5b                   	pop    ebx
c00149e1:	68 ff 9b 02 c0       	push   0xc0029bff
c00149e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ec:	e8 cb c4 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c00149f1:	5f                   	pop    edi
c00149f2:	58                   	pop    eax
c00149f3:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c00149f8:	56                   	push   esi
c00149f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ff:	e8 de c4 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c0014a04:	58                   	pop    eax
c0014a05:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0014a0a:	5a                   	pop    edx
c0014a0b:	68 07 9c 02 c0       	push   0xc0029c07
c0014a10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a16:	e8 a1 c4 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0014a1b:	59                   	pop    ecx
c0014a1c:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0014a21:	5b                   	pop    ebx
c0014a22:	55                   	push   ebp
c0014a23:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a29:	e8 b4 c4 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c0014a2e:	5e                   	pop    esi
c0014a2f:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0014a34:	5f                   	pop    edi
c0014a35:	68 0f 9c 02 c0       	push   0xc0029c0f
c0014a3a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a40:	e8 77 c4 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0014a45:	0f 21 c0             	mov    eax,db0
c0014a48:	5d                   	pop    ebp
c0014a49:	5a                   	pop    edx
c0014a4a:	50                   	push   eax
c0014a4b:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0014a50:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a56:	e8 87 c4 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c0014a5b:	59                   	pop    ecx
c0014a5c:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0014a61:	5b                   	pop    ebx
c0014a62:	68 18 9c 02 c0       	push   0xc0029c18
c0014a67:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a6d:	e8 4a c4 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0014a72:	0f 21 c8             	mov    eax,db1
c0014a75:	5e                   	pop    esi
c0014a76:	5f                   	pop    edi
c0014a77:	50                   	push   eax
c0014a78:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0014a7d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a83:	e8 5a c4 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c0014a88:	5d                   	pop    ebp
c0014a89:	58                   	pop    eax
c0014a8a:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0014a8f:	68 20 9c 02 c0       	push   0xc0029c20
c0014a94:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a9a:	e8 1d c4 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0014a9f:	0f 21 d0             	mov    eax,db2
c0014aa2:	5a                   	pop    edx
c0014aa3:	59                   	pop    ecx
c0014aa4:	50                   	push   eax
c0014aa5:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0014aaa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ab0:	e8 2d c4 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c0014ab5:	5b                   	pop    ebx
c0014ab6:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0014abb:	5e                   	pop    esi
c0014abc:	68 28 9c 02 c0       	push   0xc0029c28
c0014ac1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ac7:	e8 f0 c3 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0014acc:	0f 21 d8             	mov    eax,db3
c0014acf:	5f                   	pop    edi
c0014ad0:	5d                   	pop    ebp
c0014ad1:	50                   	push   eax
c0014ad2:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0014ad7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014add:	e8 00 c4 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c0014ae2:	58                   	pop    eax
c0014ae3:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0014ae8:	5a                   	pop    edx
c0014ae9:	68 30 9c 02 c0       	push   0xc0029c30
c0014aee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014af4:	e8 c3 c3 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0014af9:	0f 21 f0             	mov    eax,db6
c0014afc:	59                   	pop    ecx
c0014afd:	5b                   	pop    ebx
c0014afe:	50                   	push   eax
c0014aff:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0014b04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b0a:	e8 d3 c3 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c0014b0f:	5e                   	pop    esi
c0014b10:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0014b15:	5f                   	pop    edi
c0014b16:	68 38 9c 02 c0       	push   0xc0029c38
c0014b1b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b21:	e8 96 c3 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0014b26:	0f 21 f8             	mov    eax,db7
c0014b29:	5d                   	pop    ebp
c0014b2a:	5a                   	pop    edx
c0014b2b:	50                   	push   eax
c0014b2c:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0014b31:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b37:	e8 a6 c3 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c0014b3c:	fa                   	cli    
c0014b3d:	f4                   	hlt    
c0014b3e:	83 c4 10             	add    esp,0x10
c0014b41:	eb fe                	jmp    c0014b41 <displayDebugInfo(regs*)+0x403>

c0014b43 <x87EmulHandler(regs*, void*)>:
c0014b43:	53                   	push   ebx
c0014b44:	83 ec 14             	sub    esp,0x14
c0014b47:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014b4b:	53                   	push   ebx
c0014b4c:	e8 9d a2 00 00       	call   c001edee <Vm::x87Handler(regs*)>
c0014b51:	83 c4 10             	add    esp,0x10
c0014b54:	84 c0                	test   al,al
c0014b56:	74 05                	je     c0014b5d <x87EmulHandler(regs*, void*)+0x1a>
c0014b58:	83 c4 08             	add    esp,0x8
c0014b5b:	5b                   	pop    ebx
c0014b5c:	c3                   	ret    
c0014b5d:	83 ec 0c             	sub    esp,0xc
c0014b60:	68 40 9c 02 c0       	push   0xc0029c40
c0014b65:	e8 71 dd ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0014b6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b6d:	e8 cc fb ff ff       	call   c001473e <displayDebugInfo(regs*)>

c0014b72 <gpFault(regs*, void*)>:
c0014b72:	53                   	push   ebx
c0014b73:	83 ec 14             	sub    esp,0x14
c0014b76:	c7 05 70 d0 02 c0 6b e1 01 c0 	mov    DWORD PTR ds:0xc002d070,0xc001e16b
c0014b80:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014b84:	53                   	push   ebx
c0014b85:	e8 e1 95 00 00       	call   c001e16b <Vm::faultHandler(regs*)>
c0014b8a:	83 c4 10             	add    esp,0x10
c0014b8d:	84 c0                	test   al,al
c0014b8f:	74 05                	je     c0014b96 <gpFault(regs*, void*)+0x24>
c0014b91:	83 c4 08             	add    esp,0x8
c0014b94:	5b                   	pop    ebx
c0014b95:	c3                   	ret    
c0014b96:	83 ec 0c             	sub    esp,0xc
c0014b99:	68 56 9c 02 c0       	push   0xc0029c56
c0014b9e:	e8 38 dd ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0014ba3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ba6:	e8 93 fb ff ff       	call   c001473e <displayDebugInfo(regs*)>

c0014bab <pgFault(regs*, void*)>:
c0014bab:	83 ec 18             	sub    esp,0x18
c0014bae:	68 71 9c 02 c0       	push   0xc0029c71
c0014bb3:	e8 23 dd ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0014bb8:	58                   	pop    eax
c0014bb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bbd:	e8 7c fb ff ff       	call   c001473e <displayDebugInfo(regs*)>

c0014bc2 <otherISRHandler(regs*, void*)>:
c0014bc2:	53                   	push   ebx
c0014bc3:	83 ec 0c             	sub    esp,0xc
c0014bc6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014bca:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014bcd:	50                   	push   eax
c0014bce:	50                   	push   eax
c0014bcf:	68 7e 9c 02 c0       	push   0xc0029c7e
c0014bd4:	e8 02 dd ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0014bd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bdc:	e8 5d fb ff ff       	call   c001473e <displayDebugInfo(regs*)>

c0014be1 <opcodeFault(regs*, void*)>:
c0014be1:	55                   	push   ebp
c0014be2:	89 e5                	mov    ebp,esp
c0014be4:	56                   	push   esi
c0014be5:	53                   	push   ebx
c0014be6:	83 ec 40             	sub    esp,0x40
c0014be9:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0014bee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014bf4:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014bfa:	84 c0                	test   al,al
c0014bfc:	74 24                	je     c0014c22 <opcodeFault(regs*, void*)+0x41>
c0014bfe:	83 ec 0c             	sub    esp,0xc
c0014c01:	68 9c 9c 02 c0       	push   0xc0029c9c
c0014c06:	e8 d0 dc ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0014c0b:	83 c4 10             	add    esp,0x10
c0014c0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c11:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c14:	8d 50 19             	lea    edx,[eax+0x19]
c0014c17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c1a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c1d:	e9 77 05 00 00       	jmp    c0015199 <opcodeFault(regs*, void*)+0x5b8>
c0014c22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c25:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c28:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014c2b:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014c2f:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014c33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c36:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c39:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014c3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c3f:	8a 00                	mov    al,BYTE PTR [eax]
c0014c41:	3c f0                	cmp    al,0xf0
c0014c43:	75 17                	jne    c0014c5c <opcodeFault(regs*, void*)+0x7b>
c0014c45:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c4b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c4e:	8d 50 01             	lea    edx,[eax+0x1]
c0014c51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c54:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c57:	e9 da 00 00 00       	jmp    c0014d36 <opcodeFault(regs*, void*)+0x155>
c0014c5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c5f:	8a 00                	mov    al,BYTE PTR [eax]
c0014c61:	3c f2                	cmp    al,0xf2
c0014c63:	74 09                	je     c0014c6e <opcodeFault(regs*, void*)+0x8d>
c0014c65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c68:	8a 00                	mov    al,BYTE PTR [eax]
c0014c6a:	3c f3                	cmp    al,0xf3
c0014c6c:	75 1b                	jne    c0014c89 <opcodeFault(regs*, void*)+0xa8>
c0014c6e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c72:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c78:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c7b:	8d 50 01             	lea    edx,[eax+0x1]
c0014c7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c81:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c84:	e9 ad 00 00 00       	jmp    c0014d36 <opcodeFault(regs*, void*)+0x155>
c0014c89:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c8c:	8a 00                	mov    al,BYTE PTR [eax]
c0014c8e:	3c 66                	cmp    al,0x66
c0014c90:	75 1f                	jne    c0014cb1 <opcodeFault(regs*, void*)+0xd0>
c0014c92:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c96:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014c9a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ca3:	8d 50 01             	lea    edx,[eax+0x1]
c0014ca6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cac:	e9 85 00 00 00       	jmp    c0014d36 <opcodeFault(regs*, void*)+0x155>
c0014cb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cb4:	8a 00                	mov    al,BYTE PTR [eax]
c0014cb6:	3c 67                	cmp    al,0x67
c0014cb8:	75 18                	jne    c0014cd2 <opcodeFault(regs*, void*)+0xf1>
c0014cba:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014cbe:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cc7:	8d 50 01             	lea    edx,[eax+0x1]
c0014cca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ccd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cd0:	eb 64                	jmp    c0014d36 <opcodeFault(regs*, void*)+0x155>
c0014cd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cd5:	8a 00                	mov    al,BYTE PTR [eax]
c0014cd7:	3c 2e                	cmp    al,0x2e
c0014cd9:	74 09                	je     c0014ce4 <opcodeFault(regs*, void*)+0x103>
c0014cdb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cde:	8a 00                	mov    al,BYTE PTR [eax]
c0014ce0:	3c 3e                	cmp    al,0x3e
c0014ce2:	75 18                	jne    c0014cfc <opcodeFault(regs*, void*)+0x11b>
c0014ce4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ce8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ceb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cf1:	8d 50 01             	lea    edx,[eax+0x1]
c0014cf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cfa:	eb 3a                	jmp    c0014d36 <opcodeFault(regs*, void*)+0x155>
c0014cfc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cff:	8a 00                	mov    al,BYTE PTR [eax]
c0014d01:	3c 36                	cmp    al,0x36
c0014d03:	74 1b                	je     c0014d20 <opcodeFault(regs*, void*)+0x13f>
c0014d05:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d08:	8a 00                	mov    al,BYTE PTR [eax]
c0014d0a:	3c 26                	cmp    al,0x26
c0014d0c:	74 12                	je     c0014d20 <opcodeFault(regs*, void*)+0x13f>
c0014d0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d11:	8a 00                	mov    al,BYTE PTR [eax]
c0014d13:	3c 64                	cmp    al,0x64
c0014d15:	74 09                	je     c0014d20 <opcodeFault(regs*, void*)+0x13f>
c0014d17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d1a:	8a 00                	mov    al,BYTE PTR [eax]
c0014d1c:	3c 65                	cmp    al,0x65
c0014d1e:	75 16                	jne    c0014d36 <opcodeFault(regs*, void*)+0x155>
c0014d20:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d24:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d2d:	8d 50 01             	lea    edx,[eax+0x1]
c0014d30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d33:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d39:	8a 00                	mov    al,BYTE PTR [eax]
c0014d3b:	3c 0f                	cmp    al,0xf
c0014d3d:	0f 85 ad 00 00 00    	jne    c0014df0 <opcodeFault(regs*, void*)+0x20f>
c0014d43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d46:	40                   	inc    eax
c0014d47:	8a 00                	mov    al,BYTE PTR [eax]
c0014d49:	3c c2                	cmp    al,0xc2
c0014d4b:	74 0e                	je     c0014d5b <opcodeFault(regs*, void*)+0x17a>
c0014d4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d50:	40                   	inc    eax
c0014d51:	8a 00                	mov    al,BYTE PTR [eax]
c0014d53:	3c c3                	cmp    al,0xc3
c0014d55:	0f 85 95 00 00 00    	jne    c0014df0 <opcodeFault(regs*, void*)+0x20f>
c0014d5b:	83 ec 0c             	sub    esp,0xc
c0014d5e:	68 bf 9c 02 c0       	push   0xc0029cbf
c0014d63:	e8 73 db ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0014d68:	83 c4 10             	add    esp,0x10
c0014d6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d71:	8d 50 01             	lea    edx,[eax+0x1]
c0014d74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d77:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d7a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d80:	8a 00                	mov    al,BYTE PTR [eax]
c0014d82:	8d 50 fe             	lea    edx,[eax-0x2]
c0014d85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d88:	88 10                	mov    BYTE PTR [eax],dl
c0014d8a:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014d8d:	50                   	push   eax
c0014d8e:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014d91:	50                   	push   eax
c0014d92:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014d95:	50                   	push   eax
c0014d96:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d99:	e8 3e 46 00 00       	call   c00193dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014d9e:	83 c4 10             	add    esp,0x10
c0014da1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014da7:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014daa:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014dad:	01 d0                	add    eax,edx
c0014daf:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014db2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014db8:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014dbb:	48                   	dec    eax
c0014dbc:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014dbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014dc5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dcb:	83 ec 04             	sub    esp,0x4
c0014dce:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014dd1:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014dd4:	50                   	push   eax
c0014dd5:	e8 da b3 fe ff       	call   c00001b4 <voodooXADD>
c0014dda:	83 c4 10             	add    esp,0x10
c0014ddd:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014de0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014de3:	01 c2                	add    edx,eax
c0014de5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014deb:	e9 a9 03 00 00       	jmp    c0015199 <opcodeFault(regs*, void*)+0x5b8>
c0014df0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014df3:	8a 00                	mov    al,BYTE PTR [eax]
c0014df5:	3c 0f                	cmp    al,0xf
c0014df7:	0f 85 8b 01 00 00    	jne    c0014f88 <opcodeFault(regs*, void*)+0x3a7>
c0014dfd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e00:	40                   	inc    eax
c0014e01:	8a 00                	mov    al,BYTE PTR [eax]
c0014e03:	3c c7                	cmp    al,0xc7
c0014e05:	0f 86 7d 01 00 00    	jbe    c0014f88 <opcodeFault(regs*, void*)+0x3a7>
c0014e0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e0e:	40                   	inc    eax
c0014e0f:	8a 00                	mov    al,BYTE PTR [eax]
c0014e11:	3c cf                	cmp    al,0xcf
c0014e13:	0f 87 6f 01 00 00    	ja     c0014f88 <opcodeFault(regs*, void*)+0x3a7>
c0014e19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e1c:	40                   	inc    eax
c0014e1d:	8a 00                	mov    al,BYTE PTR [eax]
c0014e1f:	83 c0 38             	add    eax,0x38
c0014e22:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014e25:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014e29:	75 0b                	jne    c0014e36 <opcodeFault(regs*, void*)+0x255>
c0014e2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014e31:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e34:	eb 75                	jmp    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014e36:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014e3a:	75 0b                	jne    c0014e47 <opcodeFault(regs*, void*)+0x266>
c0014e3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e3f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014e42:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e45:	eb 64                	jmp    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014e47:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014e4b:	75 0b                	jne    c0014e58 <opcodeFault(regs*, void*)+0x277>
c0014e4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e50:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014e53:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e56:	eb 53                	jmp    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014e58:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014e5c:	75 0b                	jne    c0014e69 <opcodeFault(regs*, void*)+0x288>
c0014e5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e61:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014e64:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e67:	eb 42                	jmp    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014e69:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014e6d:	75 0b                	jne    c0014e7a <opcodeFault(regs*, void*)+0x299>
c0014e6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e72:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014e75:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e78:	eb 31                	jmp    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014e7a:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014e7e:	75 0b                	jne    c0014e8b <opcodeFault(regs*, void*)+0x2aa>
c0014e80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e83:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014e86:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e89:	eb 20                	jmp    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014e8b:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014e8f:	75 0b                	jne    c0014e9c <opcodeFault(regs*, void*)+0x2bb>
c0014e91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e94:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014e97:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e9a:	eb 0f                	jmp    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014e9c:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014ea0:	75 09                	jne    c0014eab <opcodeFault(regs*, void*)+0x2ca>
c0014ea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014ea8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014eab:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014eaf:	74 10                	je     c0014ec1 <opcodeFault(regs*, void*)+0x2e0>
c0014eb1:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014eb8:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014ebf:	eb 2d                	jmp    c0014eee <opcodeFault(regs*, void*)+0x30d>
c0014ec1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ec4:	c1 e0 18             	shl    eax,0x18
c0014ec7:	89 c2                	mov    edx,eax
c0014ec9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ecc:	c1 e0 08             	shl    eax,0x8
c0014ecf:	25 00 00 ff 00       	and    eax,0xff0000
c0014ed4:	09 c2                	or     edx,eax
c0014ed6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ed9:	c1 e8 08             	shr    eax,0x8
c0014edc:	25 00 ff 00 00       	and    eax,0xff00
c0014ee1:	09 c2                	or     edx,eax
c0014ee3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ee6:	c1 e8 18             	shr    eax,0x18
c0014ee9:	09 d0                	or     eax,edx
c0014eeb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014eee:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014ef2:	75 0b                	jne    c0014eff <opcodeFault(regs*, void*)+0x31e>
c0014ef4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014efa:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014efd:	eb 75                	jmp    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014eff:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014f03:	75 0b                	jne    c0014f10 <opcodeFault(regs*, void*)+0x32f>
c0014f05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f08:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f0b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014f0e:	eb 64                	jmp    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014f10:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f14:	75 0b                	jne    c0014f21 <opcodeFault(regs*, void*)+0x340>
c0014f16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f19:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f1c:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014f1f:	eb 53                	jmp    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014f21:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f25:	75 0b                	jne    c0014f32 <opcodeFault(regs*, void*)+0x351>
c0014f27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f2d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014f30:	eb 42                	jmp    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014f32:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f36:	75 0b                	jne    c0014f43 <opcodeFault(regs*, void*)+0x362>
c0014f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f3b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f3e:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014f41:	eb 31                	jmp    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014f43:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f47:	75 0b                	jne    c0014f54 <opcodeFault(regs*, void*)+0x373>
c0014f49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f4f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014f52:	eb 20                	jmp    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014f54:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f58:	75 0b                	jne    c0014f65 <opcodeFault(regs*, void*)+0x384>
c0014f5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f60:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014f63:	eb 0f                	jmp    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014f65:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014f69:	75 09                	jne    c0014f74 <opcodeFault(regs*, void*)+0x393>
c0014f6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f6e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f71:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014f74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f77:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f7a:	8d 50 02             	lea    edx,[eax+0x2]
c0014f7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f80:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f83:	e9 11 02 00 00       	jmp    c0015199 <opcodeFault(regs*, void*)+0x5b8>
c0014f88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f8b:	8a 00                	mov    al,BYTE PTR [eax]
c0014f8d:	3c 0f                	cmp    al,0xf
c0014f8f:	0f 85 76 01 00 00    	jne    c001510b <opcodeFault(regs*, void*)+0x52a>
c0014f95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f98:	40                   	inc    eax
c0014f99:	8a 00                	mov    al,BYTE PTR [eax]
c0014f9b:	3c c7                	cmp    al,0xc7
c0014f9d:	0f 85 68 01 00 00    	jne    c001510b <opcodeFault(regs*, void*)+0x52a>
c0014fa3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fac:	8d 50 01             	lea    edx,[eax+0x1]
c0014faf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fb5:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014fb8:	50                   	push   eax
c0014fb9:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014fbc:	50                   	push   eax
c0014fbd:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014fc0:	50                   	push   eax
c0014fc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014fc4:	e8 13 44 00 00       	call   c00193dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014fc9:	83 c4 10             	add    esp,0x10
c0014fcc:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014fcf:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014fd2:	83 f0 01             	xor    eax,0x1
c0014fd5:	84 c0                	test   al,al
c0014fd7:	0f 84 2e 01 00 00    	je     c001510b <opcodeFault(regs*, void*)+0x52a>
c0014fdd:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014fe0:	3c 01                	cmp    al,0x1
c0014fe2:	0f 85 23 01 00 00    	jne    c001510b <opcodeFault(regs*, void*)+0x52a>
c0014fe8:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014feb:	83 f0 01             	xor    eax,0x1
c0014fee:	84 c0                	test   al,al
c0014ff0:	0f 84 15 01 00 00    	je     c001510b <opcodeFault(regs*, void*)+0x52a>
c0014ff6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff9:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014ffc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014fff:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015006:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015009:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001500c:	89 c2                	mov    edx,eax
c001500e:	b8 00 00 00 00       	mov    eax,0x0
c0015013:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015016:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001501c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001501f:	ba 00 00 00 00       	mov    edx,0x0
c0015024:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015027:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001502a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015030:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015033:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001503a:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001503d:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015040:	89 c2                	mov    edx,eax
c0015042:	b8 00 00 00 00       	mov    eax,0x0
c0015047:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001504a:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001504d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015050:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015053:	ba 00 00 00 00       	mov    edx,0x0
c0015058:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001505b:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001505e:	e8 f7 80 00 00       	call   c001d15a <lockScheduler()>
c0015063:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015066:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015069:	8b 00                	mov    eax,DWORD PTR [eax]
c001506b:	89 c1                	mov    ecx,eax
c001506d:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015070:	89 cb                	mov    ebx,ecx
c0015072:	89 d0                	mov    eax,edx
c0015074:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015077:	89 c6                	mov    esi,eax
c0015079:	89 f0                	mov    eax,esi
c001507b:	09 d8                	or     eax,ebx
c001507d:	85 c0                	test   eax,eax
c001507f:	75 21                	jne    c00150a2 <opcodeFault(regs*, void*)+0x4c1>
c0015081:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015084:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015087:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001508a:	89 01                	mov    DWORD PTR [ecx],eax
c001508c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001508f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015092:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015095:	83 c8 40             	or     eax,0x40
c0015098:	89 c2                	mov    edx,eax
c001509a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00150a0:	eb 3e                	jmp    c00150e0 <opcodeFault(regs*, void*)+0x4ff>
c00150a2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00150a5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00150a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00150aa:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150ad:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00150b0:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00150b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00150b9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00150bc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00150bf:	89 d0                	mov    eax,edx
c00150c1:	31 d2                	xor    edx,edx
c00150c3:	89 c3                	mov    ebx,eax
c00150c5:	89 d6                	mov    esi,edx
c00150c7:	89 da                	mov    edx,ebx
c00150c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150cc:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00150cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00150d5:	83 e0 bf             	and    eax,0xffffffbf
c00150d8:	89 c2                	mov    edx,eax
c00150da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150dd:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00150e0:	e8 77 80 00 00       	call   c001d15c <unlockScheduler()>
c00150e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150eb:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00150ee:	01 c2                	add    edx,eax
c00150f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150f6:	83 ec 0c             	sub    esp,0xc
c00150f9:	68 ce 9c 02 c0       	push   0xc0029cce
c00150fe:	e8 d8 d7 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0015103:	83 c4 10             	add    esp,0x10
c0015106:	e9 8e 00 00 00       	jmp    c0015199 <opcodeFault(regs*, void*)+0x5b8>
c001510b:	83 ec 0c             	sub    esp,0xc
c001510e:	68 e1 9c 02 c0       	push   0xc0029ce1
c0015113:	e8 c3 d7 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0015118:	83 c4 10             	add    esp,0x10
c001511b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001511e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015121:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015124:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015127:	c1 e0 04             	shl    eax,0x4
c001512a:	01 d0                	add    eax,edx
c001512c:	83 c0 03             	add    eax,0x3
c001512f:	8a 00                	mov    al,BYTE PTR [eax]
c0015131:	0f b6 d8             	movzx  ebx,al
c0015134:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015137:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001513a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001513d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015140:	c1 e0 04             	shl    eax,0x4
c0015143:	01 d0                	add    eax,edx
c0015145:	83 c0 02             	add    eax,0x2
c0015148:	8a 00                	mov    al,BYTE PTR [eax]
c001514a:	0f b6 c8             	movzx  ecx,al
c001514d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015150:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015156:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015159:	c1 e0 04             	shl    eax,0x4
c001515c:	01 d0                	add    eax,edx
c001515e:	40                   	inc    eax
c001515f:	8a 00                	mov    al,BYTE PTR [eax]
c0015161:	0f b6 d0             	movzx  edx,al
c0015164:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015167:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001516a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001516d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015170:	c1 e0 04             	shl    eax,0x4
c0015173:	01 f0                	add    eax,esi
c0015175:	8a 00                	mov    al,BYTE PTR [eax]
c0015177:	0f b6 c0             	movzx  eax,al
c001517a:	83 ec 0c             	sub    esp,0xc
c001517d:	53                   	push   ebx
c001517e:	51                   	push   ecx
c001517f:	52                   	push   edx
c0015180:	50                   	push   eax
c0015181:	68 f4 9c 02 c0       	push   0xc0029cf4
c0015186:	e8 50 d7 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001518b:	83 c4 20             	add    esp,0x20
c001518e:	83 ec 0c             	sub    esp,0xc
c0015191:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015194:	e8 a5 f5 ff ff       	call   c001473e <displayDebugInfo(regs*)>
c0015199:	8d 65 f8             	lea    esp,[ebp-0x8]
c001519c:	5b                   	pop    ebx
c001519d:	5e                   	pop    esi
c001519e:	5d                   	pop    ebp
c001519f:	c3                   	ret    

c00151a0 <displayProgramFault(char const*)>:
c00151a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151a5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151a8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00151ae:	85 c0                	test   eax,eax
c00151b0:	74 15                	je     c00151c7 <displayProgramFault(char const*)+0x27>
c00151b2:	83 ec 0c             	sub    esp,0xc
c00151b5:	6a 04                	push   0x4
c00151b7:	6a 0f                	push   0xf
c00151b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00151bd:	50                   	push   eax
c00151be:	e8 bb b9 ff ff       	call   c0010b7e <VgaText::puts(char const*, VgaColour, VgaColour)>
c00151c3:	83 c4 1c             	add    esp,0x1c
c00151c6:	c3                   	ret    
c00151c7:	c3                   	ret    

c00151c8 <setupInterruptController()>:
c00151c8:	55                   	push   ebp
c00151c9:	89 e5                	mov    ebp,esp
c00151cb:	53                   	push   ebx
c00151cc:	83 ec 24             	sub    esp,0x24
c00151cf:	b8 00 00 00 00       	mov    eax,0x0
c00151d4:	85 c0                	test   eax,eax
c00151d6:	0f 95 c0             	setne  al
c00151d9:	84 c0                	test   al,al
c00151db:	74 5b                	je     c0015238 <setupInterruptController()+0x70>
c00151dd:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00151e4:	83 ec 0c             	sub    esp,0xc
c00151e7:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00151ea:	e8 47 a4 ff ff       	call   c000f636 <malloc>
c00151ef:	83 c4 10             	add    esp,0x10
c00151f2:	89 c3                	mov    ebx,eax
c00151f4:	83 ec 0c             	sub    esp,0xc
c00151f7:	53                   	push   ebx
c00151f8:	e8 43 f5 00 00       	call   c0024740 <APIC::APIC()>
c00151fd:	83 c4 10             	add    esp,0x10
c0015200:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015203:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015206:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015209:	8b 00                	mov    eax,DWORD PTR [eax]
c001520b:	83 c0 08             	add    eax,0x8
c001520e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015210:	6a 00                	push   0x0
c0015212:	6a 00                	push   0x0
c0015214:	6a 00                	push   0x0
c0015216:	52                   	push   edx
c0015217:	ff d0                	call   eax
c0015219:	83 c4 10             	add    esp,0x10
c001521c:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0015221:	83 ec 08             	sub    esp,0x8
c0015224:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015227:	50                   	push   eax
c0015228:	e8 d5 ea ff ff       	call   c0013d02 <Device::addChild(Device*)>
c001522d:	83 c4 10             	add    esp,0x10
c0015230:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015233:	e9 52 03 00 00       	jmp    c001558a <setupInterruptController()+0x3c2>
c0015238:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c001523d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015243:	83 e0 01             	and    eax,0x1
c0015246:	84 c0                	test   al,al
c0015248:	0f 95 c0             	setne  al
c001524b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001524e:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015255:	83 ec 0c             	sub    esp,0xc
c0015258:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001525b:	e8 d6 a3 ff ff       	call   c000f636 <malloc>
c0015260:	83 c4 10             	add    esp,0x10
c0015263:	89 c3                	mov    ebx,eax
c0015265:	83 ec 0c             	sub    esp,0xc
c0015268:	53                   	push   ebx
c0015269:	e8 2a fa 00 00       	call   c0024c98 <PIC::PIC()>
c001526e:	83 c4 10             	add    esp,0x10
c0015271:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015274:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015277:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001527a:	8b 00                	mov    eax,DWORD PTR [eax]
c001527c:	83 c0 08             	add    eax,0x8
c001527f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015281:	6a 00                	push   0x0
c0015283:	6a 00                	push   0x0
c0015285:	6a 00                	push   0x0
c0015287:	52                   	push   edx
c0015288:	ff d0                	call   eax
c001528a:	83 c4 10             	add    esp,0x10
c001528d:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015291:	74 73                	je     c0015306 <setupInterruptController()+0x13e>
c0015293:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015296:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015299:	8b 00                	mov    eax,DWORD PTR [eax]
c001529b:	83 c0 0c             	add    eax,0xc
c001529e:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a0:	6a 00                	push   0x0
c00152a2:	6a 00                	push   0x0
c00152a4:	6a 00                	push   0x0
c00152a6:	52                   	push   edx
c00152a7:	ff d0                	call   eax
c00152a9:	83 c4 10             	add    esp,0x10
c00152ac:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00152b0:	74 15                	je     c00152c7 <setupInterruptController()+0xff>
c00152b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b7:	83 c0 04             	add    eax,0x4
c00152ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00152bc:	83 ec 0c             	sub    esp,0xc
c00152bf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152c2:	ff d0                	call   eax
c00152c4:	83 c4 10             	add    esp,0x10
c00152c7:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00152ce:	83 ec 0c             	sub    esp,0xc
c00152d1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00152d4:	e8 5d a3 ff ff       	call   c000f636 <malloc>
c00152d9:	83 c4 10             	add    esp,0x10
c00152dc:	89 c3                	mov    ebx,eax
c00152de:	83 ec 0c             	sub    esp,0xc
c00152e1:	53                   	push   ebx
c00152e2:	e8 59 f4 00 00       	call   c0024740 <APIC::APIC()>
c00152e7:	83 c4 10             	add    esp,0x10
c00152ea:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00152ed:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00152f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f5:	83 c0 08             	add    eax,0x8
c00152f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152fa:	6a 00                	push   0x0
c00152fc:	6a 00                	push   0x0
c00152fe:	6a 00                	push   0x0
c0015300:	52                   	push   edx
c0015301:	ff d0                	call   eax
c0015303:	83 c4 10             	add    esp,0x10
c0015306:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c001530b:	83 ec 08             	sub    esp,0x8
c001530e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015311:	50                   	push   eax
c0015312:	e8 eb e9 ff ff       	call   c0013d02 <Device::addChild(Device*)>
c0015317:	83 c4 10             	add    esp,0x10
c001531a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001531d:	8b 00                	mov    eax,DWORD PTR [eax]
c001531f:	83 c0 24             	add    eax,0x24
c0015322:	8b 00                	mov    eax,DWORD PTR [eax]
c0015324:	6a 00                	push   0x0
c0015326:	68 c2 4b 01 c0       	push   0xc0014bc2
c001532b:	6a 00                	push   0x0
c001532d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015330:	ff d0                	call   eax
c0015332:	83 c4 10             	add    esp,0x10
c0015335:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015338:	8b 00                	mov    eax,DWORD PTR [eax]
c001533a:	83 c0 24             	add    eax,0x24
c001533d:	8b 00                	mov    eax,DWORD PTR [eax]
c001533f:	6a 00                	push   0x0
c0015341:	68 c2 4b 01 c0       	push   0xc0014bc2
c0015346:	6a 01                	push   0x1
c0015348:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001534b:	ff d0                	call   eax
c001534d:	83 c4 10             	add    esp,0x10
c0015350:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015353:	8b 00                	mov    eax,DWORD PTR [eax]
c0015355:	83 c0 24             	add    eax,0x24
c0015358:	8b 00                	mov    eax,DWORD PTR [eax]
c001535a:	6a 00                	push   0x0
c001535c:	68 9b 45 01 c0       	push   0xc001459b
c0015361:	6a 02                	push   0x2
c0015363:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015366:	ff d0                	call   eax
c0015368:	83 c4 10             	add    esp,0x10
c001536b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015370:	83 c0 24             	add    eax,0x24
c0015373:	8b 00                	mov    eax,DWORD PTR [eax]
c0015375:	6a 00                	push   0x0
c0015377:	68 c2 4b 01 c0       	push   0xc0014bc2
c001537c:	6a 03                	push   0x3
c001537e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015381:	ff d0                	call   eax
c0015383:	83 c4 10             	add    esp,0x10
c0015386:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015389:	8b 00                	mov    eax,DWORD PTR [eax]
c001538b:	83 c0 24             	add    eax,0x24
c001538e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015390:	6a 00                	push   0x0
c0015392:	68 c2 4b 01 c0       	push   0xc0014bc2
c0015397:	6a 04                	push   0x4
c0015399:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001539c:	ff d0                	call   eax
c001539e:	83 c4 10             	add    esp,0x10
c00153a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a6:	83 c0 24             	add    eax,0x24
c00153a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ab:	6a 00                	push   0x0
c00153ad:	68 c2 4b 01 c0       	push   0xc0014bc2
c00153b2:	6a 05                	push   0x5
c00153b4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153b7:	ff d0                	call   eax
c00153b9:	83 c4 10             	add    esp,0x10
c00153bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c1:	83 c0 24             	add    eax,0x24
c00153c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c6:	6a 00                	push   0x0
c00153c8:	68 e1 4b 01 c0       	push   0xc0014be1
c00153cd:	6a 06                	push   0x6
c00153cf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153d2:	ff d0                	call   eax
c00153d4:	83 c4 10             	add    esp,0x10
c00153d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153da:	8b 00                	mov    eax,DWORD PTR [eax]
c00153dc:	83 c0 24             	add    eax,0x24
c00153df:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e1:	6a 00                	push   0x0
c00153e3:	68 43 4b 01 c0       	push   0xc0014b43
c00153e8:	6a 07                	push   0x7
c00153ea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153ed:	ff d0                	call   eax
c00153ef:	83 c4 10             	add    esp,0x10
c00153f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f7:	83 c0 24             	add    eax,0x24
c00153fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00153fc:	6a 00                	push   0x0
c00153fe:	68 b6 43 01 c0       	push   0xc00143b6
c0015403:	6a 08                	push   0x8
c0015405:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015408:	ff d0                	call   eax
c001540a:	83 c4 10             	add    esp,0x10
c001540d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015410:	8b 00                	mov    eax,DWORD PTR [eax]
c0015412:	83 c0 24             	add    eax,0x24
c0015415:	8b 00                	mov    eax,DWORD PTR [eax]
c0015417:	6a 00                	push   0x0
c0015419:	68 c2 4b 01 c0       	push   0xc0014bc2
c001541e:	6a 09                	push   0x9
c0015420:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015423:	ff d0                	call   eax
c0015425:	83 c4 10             	add    esp,0x10
c0015428:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542b:	8b 00                	mov    eax,DWORD PTR [eax]
c001542d:	83 c0 24             	add    eax,0x24
c0015430:	8b 00                	mov    eax,DWORD PTR [eax]
c0015432:	6a 00                	push   0x0
c0015434:	68 c2 4b 01 c0       	push   0xc0014bc2
c0015439:	6a 0a                	push   0xa
c001543b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001543e:	ff d0                	call   eax
c0015440:	83 c4 10             	add    esp,0x10
c0015443:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015446:	8b 00                	mov    eax,DWORD PTR [eax]
c0015448:	83 c0 24             	add    eax,0x24
c001544b:	8b 00                	mov    eax,DWORD PTR [eax]
c001544d:	6a 00                	push   0x0
c001544f:	68 c2 4b 01 c0       	push   0xc0014bc2
c0015454:	6a 0b                	push   0xb
c0015456:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015459:	ff d0                	call   eax
c001545b:	83 c4 10             	add    esp,0x10
c001545e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015461:	8b 00                	mov    eax,DWORD PTR [eax]
c0015463:	83 c0 24             	add    eax,0x24
c0015466:	8b 00                	mov    eax,DWORD PTR [eax]
c0015468:	6a 00                	push   0x0
c001546a:	68 c2 4b 01 c0       	push   0xc0014bc2
c001546f:	6a 0c                	push   0xc
c0015471:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015474:	ff d0                	call   eax
c0015476:	83 c4 10             	add    esp,0x10
c0015479:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547c:	8b 00                	mov    eax,DWORD PTR [eax]
c001547e:	83 c0 24             	add    eax,0x24
c0015481:	8b 00                	mov    eax,DWORD PTR [eax]
c0015483:	6a 00                	push   0x0
c0015485:	68 72 4b 01 c0       	push   0xc0014b72
c001548a:	6a 0d                	push   0xd
c001548c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001548f:	ff d0                	call   eax
c0015491:	83 c4 10             	add    esp,0x10
c0015494:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015497:	8b 00                	mov    eax,DWORD PTR [eax]
c0015499:	83 c0 24             	add    eax,0x24
c001549c:	8b 00                	mov    eax,DWORD PTR [eax]
c001549e:	6a 00                	push   0x0
c00154a0:	68 ab 4b 01 c0       	push   0xc0014bab
c00154a5:	6a 0e                	push   0xe
c00154a7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154aa:	ff d0                	call   eax
c00154ac:	83 c4 10             	add    esp,0x10
c00154af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b4:	83 c0 24             	add    eax,0x24
c00154b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b9:	6a 00                	push   0x0
c00154bb:	68 c2 4b 01 c0       	push   0xc0014bc2
c00154c0:	6a 0f                	push   0xf
c00154c2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154c5:	ff d0                	call   eax
c00154c7:	83 c4 10             	add    esp,0x10
c00154ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00154cf:	83 c0 24             	add    eax,0x24
c00154d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d4:	6a 00                	push   0x0
c00154d6:	68 c2 4b 01 c0       	push   0xc0014bc2
c00154db:	6a 10                	push   0x10
c00154dd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154e0:	ff d0                	call   eax
c00154e2:	83 c4 10             	add    esp,0x10
c00154e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ea:	83 c0 24             	add    eax,0x24
c00154ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ef:	6a 00                	push   0x0
c00154f1:	68 c2 4b 01 c0       	push   0xc0014bc2
c00154f6:	6a 11                	push   0x11
c00154f8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154fb:	ff d0                	call   eax
c00154fd:	83 c4 10             	add    esp,0x10
c0015500:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015503:	8b 00                	mov    eax,DWORD PTR [eax]
c0015505:	83 c0 24             	add    eax,0x24
c0015508:	8b 00                	mov    eax,DWORD PTR [eax]
c001550a:	6a 00                	push   0x0
c001550c:	68 c2 4b 01 c0       	push   0xc0014bc2
c0015511:	6a 12                	push   0x12
c0015513:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015516:	ff d0                	call   eax
c0015518:	83 c4 10             	add    esp,0x10
c001551b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015520:	83 c0 24             	add    eax,0x24
c0015523:	8b 00                	mov    eax,DWORD PTR [eax]
c0015525:	6a 00                	push   0x0
c0015527:	68 c2 4b 01 c0       	push   0xc0014bc2
c001552c:	6a 13                	push   0x13
c001552e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015531:	ff d0                	call   eax
c0015533:	83 c4 10             	add    esp,0x10
c0015536:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015539:	8b 00                	mov    eax,DWORD PTR [eax]
c001553b:	83 c0 24             	add    eax,0x24
c001553e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015540:	6a 00                	push   0x0
c0015542:	68 c2 4b 01 c0       	push   0xc0014bc2
c0015547:	6a 14                	push   0x14
c0015549:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001554c:	ff d0                	call   eax
c001554e:	83 c4 10             	add    esp,0x10
c0015551:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015554:	8b 00                	mov    eax,DWORD PTR [eax]
c0015556:	83 c0 24             	add    eax,0x24
c0015559:	8b 00                	mov    eax,DWORD PTR [eax]
c001555b:	6a 00                	push   0x0
c001555d:	68 c2 4b 01 c0       	push   0xc0014bc2
c0015562:	6a 1e                	push   0x1e
c0015564:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015567:	ff d0                	call   eax
c0015569:	83 c4 10             	add    esp,0x10
c001556c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001556f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015571:	83 c0 24             	add    eax,0x24
c0015574:	8b 00                	mov    eax,DWORD PTR [eax]
c0015576:	6a 00                	push   0x0
c0015578:	68 55 bb 01 c0       	push   0xc001bb55
c001557d:	6a 60                	push   0x60
c001557f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015582:	ff d0                	call   eax
c0015584:	83 c4 10             	add    esp,0x10
c0015587:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001558a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001558d:	c9                   	leave  
c001558e:	c3                   	ret    
c001558f:	90                   	nop

c0015590 <InterruptController::convertLegacyIRQNumber(int)>:
c0015590:	55                   	push   ebp
c0015591:	89 e5                	mov    ebp,esp
c0015593:	83 ec 08             	sub    esp,0x8
c0015596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015599:	83 ec 0c             	sub    esp,0xc
c001559c:	50                   	push   eax
c001559d:	e8 4c ea ff ff       	call   c0013fee <Device::getName()>
c00155a2:	83 c4 10             	add    esp,0x10
c00155a5:	8a 00                	mov    al,BYTE PTR [eax]
c00155a7:	3c 41                	cmp    al,0x41
c00155a9:	0f 94 c0             	sete   al
c00155ac:	84 c0                	test   al,al
c00155ae:	74 28                	je     c00155d8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00155b0:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00155b4:	7f 12                	jg     c00155c8 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00155b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00155b9:	05 20 c1 02 c0       	add    eax,0xc002c120
c00155be:	8a 00                	mov    al,BYTE PTR [eax]
c00155c0:	0f b6 c0             	movzx  eax,al
c00155c3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00155c6:	eb 10                	jmp    c00155d8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00155c8:	83 ec 0c             	sub    esp,0xc
c00155cb:	68 74 9a 02 c0       	push   0xc0029a74
c00155d0:	e8 d6 45 00 00       	call   c0019bab <Krnl::panic(char const*)>
c00155d5:	83 c4 10             	add    esp,0x10
c00155d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00155db:	c9                   	leave  
c00155dc:	c3                   	ret    
c00155dd:	90                   	nop

c00155de <startGUI(void*)>:
c00155de:	55                   	push   ebp
c00155df:	89 e5                	mov    ebp,esp
c00155e1:	53                   	push   ebx
c00155e2:	83 ec 04             	sub    esp,0x4
c00155e5:	e8 72 7b 00 00       	call   c001d15c <unlockScheduler()>
c00155ea:	8b 1d c8 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cec8
c00155f0:	83 ec 08             	sub    esp,0x8
c00155f3:	6a 01                	push   0x1
c00155f5:	68 5c 9d 02 c0       	push   0xc0029d5c
c00155fa:	e8 e8 74 00 00       	call   c001cae7 <Thr::loadDLL(char const*, bool)>
c00155ff:	83 c4 10             	add    esp,0x10
c0015602:	83 ec 08             	sub    esp,0x8
c0015605:	53                   	push   ebx
c0015606:	50                   	push   eax
c0015607:	e8 ea 76 00 00       	call   c001ccf6 <Thr::executeDLL(unsigned long, void*)>
c001560c:	83 c4 10             	add    esp,0x10
c001560f:	8b 1d c8 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cec8
c0015615:	83 ec 08             	sub    esp,0x8
c0015618:	6a 01                	push   0x1
c001561a:	68 76 9d 02 c0       	push   0xc0029d76
c001561f:	e8 c3 74 00 00       	call   c001cae7 <Thr::loadDLL(char const*, bool)>
c0015624:	83 c4 10             	add    esp,0x10
c0015627:	83 ec 08             	sub    esp,0x8
c001562a:	53                   	push   ebx
c001562b:	50                   	push   eax
c001562c:	e8 c5 76 00 00       	call   c001ccf6 <Thr::executeDLL(unsigned long, void*)>
c0015631:	83 c4 10             	add    esp,0x10
c0015634:	90                   	nop
c0015635:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015638:	c9                   	leave  
c0015639:	c3                   	ret    

c001563a <startGUIVESA(void*)>:
c001563a:	55                   	push   ebp
c001563b:	89 e5                	mov    ebp,esp
c001563d:	53                   	push   ebx
c001563e:	83 ec 04             	sub    esp,0x4
c0015641:	e8 16 7b 00 00       	call   c001d15c <unlockScheduler()>
c0015646:	8b 1d c8 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cec8
c001564c:	83 ec 08             	sub    esp,0x8
c001564f:	6a 01                	push   0x1
c0015651:	68 90 9d 02 c0       	push   0xc0029d90
c0015656:	e8 8c 74 00 00       	call   c001cae7 <Thr::loadDLL(char const*, bool)>
c001565b:	83 c4 10             	add    esp,0x10
c001565e:	83 ec 08             	sub    esp,0x8
c0015661:	53                   	push   ebx
c0015662:	50                   	push   eax
c0015663:	e8 8e 76 00 00       	call   c001ccf6 <Thr::executeDLL(unsigned long, void*)>
c0015668:	83 c4 10             	add    esp,0x10
c001566b:	8b 1d c8 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cec8
c0015671:	83 ec 08             	sub    esp,0x8
c0015674:	6a 01                	push   0x1
c0015676:	68 76 9d 02 c0       	push   0xc0029d76
c001567b:	e8 67 74 00 00       	call   c001cae7 <Thr::loadDLL(char const*, bool)>
c0015680:	83 c4 10             	add    esp,0x10
c0015683:	83 ec 08             	sub    esp,0x8
c0015686:	53                   	push   ebx
c0015687:	50                   	push   eax
c0015688:	e8 69 76 00 00       	call   c001ccf6 <Thr::executeDLL(unsigned long, void*)>
c001568d:	83 c4 10             	add    esp,0x10
c0015690:	90                   	nop
c0015691:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015694:	c9                   	leave  
c0015695:	c3                   	ret    

c0015696 <sendKeyToTerminal(unsigned char)>:
c0015696:	55                   	push   ebp
c0015697:	89 e5                	mov    ebp,esp
c0015699:	83 ec 28             	sub    esp,0x28
c001569c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001569f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00156a2:	a1 a4 cf 02 c0       	mov    eax,ds:0xc002cfa4
c00156a7:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00156ab:	83 ec 08             	sub    esp,0x8
c00156ae:	52                   	push   edx
c00156af:	50                   	push   eax
c00156b0:	e8 05 ba ff ff       	call   c00110ba <VgaText::receiveKey(unsigned char)>
c00156b5:	83 c4 10             	add    esp,0x10
c00156b8:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00156bc:	75 41                	jne    c00156ff <sendKeyToTerminal(unsigned char)+0x69>
c00156be:	e8 be 7a 00 00       	call   c001d181 <lockStuff()>
c00156c3:	a1 80 d0 02 c0       	mov    eax,ds:0xc002d080
c00156c8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156cb:	c7 05 80 d0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d080,0x0
c00156d5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00156d9:	74 1f                	je     c00156fa <sendKeyToTerminal(unsigned char)+0x64>
c00156db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156de:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00156e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00156e4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156e7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156ea:	83 ec 0c             	sub    esp,0xc
c00156ed:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00156f0:	e8 7d 80 00 00       	call   c001d772 <unblockTask(ThreadControlBlock*)>
c00156f5:	83 c4 10             	add    esp,0x10
c00156f8:	eb db                	jmp    c00156d5 <sendKeyToTerminal(unsigned char)+0x3f>
c00156fa:	e8 1c 7e 00 00       	call   c001d51b <unlockStuff()>
c00156ff:	90                   	nop
c0015700:	c9                   	leave  
c0015701:	c3                   	ret    

c0015702 <sendKeyboardToken(KeyboardToken)>:
c0015702:	55                   	push   ebp
c0015703:	89 e5                	mov    ebp,esp
c0015705:	83 ec 18             	sub    esp,0x18
c0015708:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001570b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570e:	0f b7 c0             	movzx  eax,ax
c0015711:	83 f2 01             	xor    edx,0x1
c0015714:	88 90 a0 d0 02 c0    	mov    BYTE PTR [eax-0x3ffd2f60],dl
c001571a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571d:	66 3d 03 02          	cmp    ax,0x203
c0015721:	75 07                	jne    c001572a <sendKeyboardToken(KeyboardToken)+0x28>
c0015723:	a0 a0 d1 02 c0       	mov    al,ds:0xc002d1a0
c0015728:	84 c0                	test   al,al
c001572a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001572e:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015731:	a0 a8 d4 02 c0       	mov    al,ds:0xc002d4a8
c0015736:	38 c2                	cmp    dl,al
c0015738:	74 1c                	je     c0015756 <sendKeyboardToken(KeyboardToken)+0x54>
c001573a:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001573d:	a2 a8 d4 02 c0       	mov    ds:0xc002d4a8,al
c0015742:	a0 a8 d4 02 c0       	mov    al,ds:0xc002d4a8
c0015747:	0f b6 c0             	movzx  eax,al
c001574a:	83 ec 0c             	sub    esp,0xc
c001574d:	50                   	push   eax
c001574e:	e8 c7 ab ff ff       	call   c001031a <setTerminalScrollLock(bool)>
c0015753:	83 c4 10             	add    esp,0x10
c0015756:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015759:	84 c0                	test   al,al
c001575b:	0f 84 ae 00 00 00    	je     c001580f <sendKeyboardToken(KeyboardToken)+0x10d>
c0015761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015764:	66 3d 10 03          	cmp    ax,0x310
c0015768:	75 06                	jne    c0015770 <sendKeyboardToken(KeyboardToken)+0x6e>
c001576a:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015773:	66 3d 11 03          	cmp    ax,0x311
c0015777:	75 06                	jne    c001577f <sendKeyboardToken(KeyboardToken)+0x7d>
c0015779:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001577f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015782:	66 3d 12 03          	cmp    ax,0x312
c0015786:	75 06                	jne    c001578e <sendKeyboardToken(KeyboardToken)+0x8c>
c0015788:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001578e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015791:	66 3d 13 03          	cmp    ax,0x313
c0015795:	75 06                	jne    c001579d <sendKeyboardToken(KeyboardToken)+0x9b>
c0015797:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001579d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a0:	66 3d 14 03          	cmp    ax,0x314
c00157a4:	75 06                	jne    c00157ac <sendKeyboardToken(KeyboardToken)+0xaa>
c00157a6:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00157ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157af:	66 3d 15 03          	cmp    ax,0x315
c00157b3:	75 06                	jne    c00157bb <sendKeyboardToken(KeyboardToken)+0xb9>
c00157b5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00157bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157be:	66 3d 16 03          	cmp    ax,0x316
c00157c2:	75 06                	jne    c00157ca <sendKeyboardToken(KeyboardToken)+0xc8>
c00157c4:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00157ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cd:	66 3d 17 03          	cmp    ax,0x317
c00157d1:	75 06                	jne    c00157d9 <sendKeyboardToken(KeyboardToken)+0xd7>
c00157d3:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00157d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157dc:	66 3d 18 03          	cmp    ax,0x318
c00157e0:	75 06                	jne    c00157e8 <sendKeyboardToken(KeyboardToken)+0xe6>
c00157e2:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00157e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157eb:	66 3d 19 03          	cmp    ax,0x319
c00157ef:	75 06                	jne    c00157f7 <sendKeyboardToken(KeyboardToken)+0xf5>
c00157f1:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00157f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fa:	66 3d 1a 03          	cmp    ax,0x31a
c00157fe:	0f 85 c9 00 00 00    	jne    c00158cd <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015804:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001580a:	e9 be 00 00 00       	jmp    c00158cd <sendKeyboardToken(KeyboardToken)+0x1cb>
c001580f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015812:	66 3d 10 03          	cmp    ax,0x310
c0015816:	75 0a                	jne    c0015822 <sendKeyboardToken(KeyboardToken)+0x120>
c0015818:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001581e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015825:	66 3d 11 03          	cmp    ax,0x311
c0015829:	75 0a                	jne    c0015835 <sendKeyboardToken(KeyboardToken)+0x133>
c001582b:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015831:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015835:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015838:	66 3d 12 03          	cmp    ax,0x312
c001583c:	75 0a                	jne    c0015848 <sendKeyboardToken(KeyboardToken)+0x146>
c001583e:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015844:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584b:	66 3d 13 03          	cmp    ax,0x313
c001584f:	75 0a                	jne    c001585b <sendKeyboardToken(KeyboardToken)+0x159>
c0015851:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015857:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001585b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585e:	66 3d 14 03          	cmp    ax,0x314
c0015862:	75 0a                	jne    c001586e <sendKeyboardToken(KeyboardToken)+0x16c>
c0015864:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001586a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001586e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015871:	66 3d 15 03          	cmp    ax,0x315
c0015875:	75 0a                	jne    c0015881 <sendKeyboardToken(KeyboardToken)+0x17f>
c0015877:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001587d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015881:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015884:	66 3d 16 03          	cmp    ax,0x316
c0015888:	75 0a                	jne    c0015894 <sendKeyboardToken(KeyboardToken)+0x192>
c001588a:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015890:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015897:	66 3d 17 03          	cmp    ax,0x317
c001589b:	75 0a                	jne    c00158a7 <sendKeyboardToken(KeyboardToken)+0x1a5>
c001589d:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00158a3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158aa:	66 3d 18 03          	cmp    ax,0x318
c00158ae:	75 0a                	jne    c00158ba <sendKeyboardToken(KeyboardToken)+0x1b8>
c00158b0:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00158b6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158bd:	66 3d 19 03          	cmp    ax,0x319
c00158c1:	75 0a                	jne    c00158cd <sendKeyboardToken(KeyboardToken)+0x1cb>
c00158c3:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00158c9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d0:	66 3d 00 02          	cmp    ax,0x200
c00158d4:	75 2c                	jne    c0015902 <sendKeyboardToken(KeyboardToken)+0x200>
c00158d6:	a0 a0 d4 02 c0       	mov    al,ds:0xc002d4a0
c00158db:	83 f0 01             	xor    eax,0x1
c00158de:	84 c0                	test   al,al
c00158e0:	74 20                	je     c0015902 <sendKeyboardToken(KeyboardToken)+0x200>
c00158e2:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c00158e7:	6a 01                	push   0x1
c00158e9:	6a 00                	push   0x0
c00158eb:	68 de 55 01 c0       	push   0xc00155de
c00158f0:	50                   	push   eax
c00158f1:	e8 96 79 00 00       	call   c001d28c <Process::createThread(void (*)(void*), void*, int)>
c00158f6:	83 c4 10             	add    esp,0x10
c00158f9:	c6 05 a0 d4 02 c0 01 	mov    BYTE PTR ds:0xc002d4a0,0x1
c0015900:	eb 33                	jmp    c0015935 <sendKeyboardToken(KeyboardToken)+0x233>
c0015902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015905:	66 3d 01 02          	cmp    ax,0x201
c0015909:	75 2a                	jne    c0015935 <sendKeyboardToken(KeyboardToken)+0x233>
c001590b:	a0 a0 d4 02 c0       	mov    al,ds:0xc002d4a0
c0015910:	83 f0 01             	xor    eax,0x1
c0015913:	84 c0                	test   al,al
c0015915:	74 1e                	je     c0015935 <sendKeyboardToken(KeyboardToken)+0x233>
c0015917:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c001591c:	6a 01                	push   0x1
c001591e:	6a 00                	push   0x0
c0015920:	68 3a 56 01 c0       	push   0xc001563a
c0015925:	50                   	push   eax
c0015926:	e8 61 79 00 00       	call   c001d28c <Process::createThread(void (*)(void*), void*, int)>
c001592b:	83 c4 10             	add    esp,0x10
c001592e:	c6 05 a0 d4 02 c0 01 	mov    BYTE PTR ds:0xc002d4a0,0x1
c0015935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015938:	66 3d 1d 03          	cmp    ax,0x31d
c001593c:	75 06                	jne    c0015944 <sendKeyboardToken(KeyboardToken)+0x242>
c001593e:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015944:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015947:	66 3d 1c 03          	cmp    ax,0x31c
c001594b:	75 06                	jne    c0015953 <sendKeyboardToken(KeyboardToken)+0x251>
c001594d:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015953:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015956:	66 3d 1b 03          	cmp    ax,0x31b
c001595a:	75 06                	jne    c0015962 <sendKeyboardToken(KeyboardToken)+0x260>
c001595c:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015965:	66 3d 1e 03          	cmp    ax,0x31e
c0015969:	75 06                	jne    c0015971 <sendKeyboardToken(KeyboardToken)+0x26f>
c001596b:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015974:	66 3d 1f 03          	cmp    ax,0x31f
c0015978:	75 06                	jne    c0015980 <sendKeyboardToken(KeyboardToken)+0x27e>
c001597a:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015983:	66 3d 1a 03          	cmp    ax,0x31a
c0015987:	75 06                	jne    c001598f <sendKeyboardToken(KeyboardToken)+0x28d>
c0015989:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001598f:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015993:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015996:	83 f0 01             	xor    eax,0x1
c0015999:	84 c0                	test   al,al
c001599b:	74 77                	je     c0015a14 <sendKeyboardToken(KeyboardToken)+0x312>
c001599d:	a0 a1 d1 02 c0       	mov    al,ds:0xc002d1a1
c00159a2:	84 c0                	test   al,al
c00159a4:	74 41                	je     c00159e7 <sendKeyboardToken(KeyboardToken)+0x2e5>
c00159a6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00159aa:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00159ae:	74 2b                	je     c00159db <sendKeyboardToken(KeyboardToken)+0x2d9>
c00159b0:	8b 15 a4 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d4a4
c00159b6:	89 d0                	mov    eax,edx
c00159b8:	c1 e0 02             	shl    eax,0x2
c00159bb:	01 d0                	add    eax,edx
c00159bd:	01 c0                	add    eax,eax
c00159bf:	a3 a4 d4 02 c0       	mov    ds:0xc002d4a4,eax
c00159c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c7:	0f b7 c0             	movzx  eax,ax
c00159ca:	8d 50 d0             	lea    edx,[eax-0x30]
c00159cd:	a1 a4 d4 02 c0       	mov    eax,ds:0xc002d4a4
c00159d2:	01 d0                	add    eax,edx
c00159d4:	a3 a4 d4 02 c0       	mov    ds:0xc002d4a4,eax
c00159d9:	eb 6d                	jmp    c0015a48 <sendKeyboardToken(KeyboardToken)+0x346>
c00159db:	c7 05 a4 d4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d4a4,0x0
c00159e5:	eb 61                	jmp    c0015a48 <sendKeyboardToken(KeyboardToken)+0x346>
c00159e7:	a1 a4 d4 02 c0       	mov    eax,ds:0xc002d4a4
c00159ec:	85 c0                	test   eax,eax
c00159ee:	74 18                	je     c0015a08 <sendKeyboardToken(KeyboardToken)+0x306>
c00159f0:	a1 a4 d4 02 c0       	mov    eax,ds:0xc002d4a4
c00159f5:	0f b6 c0             	movzx  eax,al
c00159f8:	83 ec 0c             	sub    esp,0xc
c00159fb:	50                   	push   eax
c00159fc:	e8 95 fc ff ff       	call   c0015696 <sendKeyToTerminal(unsigned char)>
c0015a01:	83 c4 10             	add    esp,0x10
c0015a04:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a08:	c7 05 a4 d4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d4a4,0x0
c0015a12:	eb 34                	jmp    c0015a48 <sendKeyboardToken(KeyboardToken)+0x346>
c0015a14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a17:	66 3d 01 01          	cmp    ax,0x101
c0015a1b:	75 2b                	jne    c0015a48 <sendKeyboardToken(KeyboardToken)+0x346>
c0015a1d:	a1 a4 d4 02 c0       	mov    eax,ds:0xc002d4a4
c0015a22:	85 c0                	test   eax,eax
c0015a24:	74 18                	je     c0015a3e <sendKeyboardToken(KeyboardToken)+0x33c>
c0015a26:	a1 a4 d4 02 c0       	mov    eax,ds:0xc002d4a4
c0015a2b:	0f b6 c0             	movzx  eax,al
c0015a2e:	83 ec 0c             	sub    esp,0xc
c0015a31:	50                   	push   eax
c0015a32:	e8 5f fc ff ff       	call   c0015696 <sendKeyToTerminal(unsigned char)>
c0015a37:	83 c4 10             	add    esp,0x10
c0015a3a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a3e:	c7 05 a4 d4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d4a4,0x0
c0015a48:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015a4b:	83 f0 01             	xor    eax,0x1
c0015a4e:	84 c0                	test   al,al
c0015a50:	74 4c                	je     c0015a9e <sendKeyboardToken(KeyboardToken)+0x39c>
c0015a52:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a55:	83 f0 01             	xor    eax,0x1
c0015a58:	84 c0                	test   al,al
c0015a5a:	74 42                	je     c0015a9e <sendKeyboardToken(KeyboardToken)+0x39c>
c0015a5c:	a0 a0 d1 02 c0       	mov    al,ds:0xc002d1a0
c0015a61:	83 f0 01             	xor    eax,0x1
c0015a64:	84 c0                	test   al,al
c0015a66:	74 36                	je     c0015a9e <sendKeyboardToken(KeyboardToken)+0x39c>
c0015a68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a6b:	66 83 f8 1f          	cmp    ax,0x1f
c0015a6f:	76 09                	jbe    c0015a7a <sendKeyboardToken(KeyboardToken)+0x378>
c0015a71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a74:	66 83 f8 7e          	cmp    ax,0x7e
c0015a78:	76 12                	jbe    c0015a8c <sendKeyboardToken(KeyboardToken)+0x38a>
c0015a7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a7d:	66 83 f8 0a          	cmp    ax,0xa
c0015a81:	74 09                	je     c0015a8c <sendKeyboardToken(KeyboardToken)+0x38a>
c0015a83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a86:	66 83 f8 08          	cmp    ax,0x8
c0015a8a:	75 12                	jne    c0015a9e <sendKeyboardToken(KeyboardToken)+0x39c>
c0015a8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a8f:	0f b6 c0             	movzx  eax,al
c0015a92:	83 ec 0c             	sub    esp,0xc
c0015a95:	50                   	push   eax
c0015a96:	e8 fb fb ff ff       	call   c0015696 <sendKeyToTerminal(unsigned char)>
c0015a9b:	83 c4 10             	add    esp,0x10
c0015a9e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015aa1:	83 f0 01             	xor    eax,0x1
c0015aa4:	84 c0                	test   al,al
c0015aa6:	74 4f                	je     c0015af7 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015aa8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015aab:	83 f0 01             	xor    eax,0x1
c0015aae:	84 c0                	test   al,al
c0015ab0:	74 45                	je     c0015af7 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015ab2:	a0 a0 d1 02 c0       	mov    al,ds:0xc002d1a0
c0015ab7:	84 c0                	test   al,al
c0015ab9:	74 3c                	je     c0015af7 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015abe:	66 83 f8 3f          	cmp    ax,0x3f
c0015ac2:	76 33                	jbe    c0015af7 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac7:	66 83 f8 7f          	cmp    ax,0x7f
c0015acb:	77 2a                	ja     c0015af7 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015acd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad0:	88 c2                	mov    dl,al
c0015ad2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad5:	66 83 f8 5f          	cmp    ax,0x5f
c0015ad9:	76 04                	jbe    c0015adf <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015adb:	b0 20                	mov    al,0x20
c0015add:	eb 02                	jmp    c0015ae1 <sendKeyboardToken(KeyboardToken)+0x3df>
c0015adf:	b0 00                	mov    al,0x0
c0015ae1:	29 c2                	sub    edx,eax
c0015ae3:	88 d0                	mov    al,dl
c0015ae5:	83 e8 40             	sub    eax,0x40
c0015ae8:	0f b6 c0             	movzx  eax,al
c0015aeb:	83 ec 0c             	sub    esp,0xc
c0015aee:	50                   	push   eax
c0015aef:	e8 a2 fb ff ff       	call   c0015696 <sendKeyToTerminal(unsigned char)>
c0015af4:	83 c4 10             	add    esp,0x10
c0015af7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015afa:	66 3d 00 03          	cmp    ax,0x300
c0015afe:	75 0f                	jne    c0015b0f <sendKeyboardToken(KeyboardToken)+0x40d>
c0015b00:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b03:	83 f0 01             	xor    eax,0x1
c0015b06:	84 c0                	test   al,al
c0015b08:	74 05                	je     c0015b0f <sendKeyboardToken(KeyboardToken)+0x40d>
c0015b0a:	e8 40 b0 ff ff       	call   c0010b4f <doTerminalCycle()>
c0015b0f:	90                   	nop
c0015b10:	c9                   	leave  
c0015b11:	c3                   	ret    

c0015b12 <clearInternalKeybuffer(VgaText*)>:
c0015b12:	55                   	push   ebp
c0015b13:	89 e5                	mov    ebp,esp
c0015b15:	83 ec 08             	sub    esp,0x8
c0015b18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b1b:	05 34 11 00 00       	add    eax,0x1134
c0015b20:	83 ec 0c             	sub    esp,0xc
c0015b23:	50                   	push   eax
c0015b24:	e8 ca ab fe ff       	call   c00006f3 <strlen>
c0015b29:	83 c4 10             	add    esp,0x10
c0015b2c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b2f:	81 c2 34 11 00 00    	add    edx,0x1134
c0015b35:	83 ec 04             	sub    esp,0x4
c0015b38:	50                   	push   eax
c0015b39:	6a 00                	push   0x0
c0015b3b:	52                   	push   edx
c0015b3c:	e8 95 ab fe ff       	call   c00006d6 <memset>
c0015b41:	83 c4 10             	add    esp,0x10
c0015b44:	90                   	nop
c0015b45:	c9                   	leave  
c0015b46:	c3                   	ret    

c0015b47 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015b47:	55                   	push   ebp
c0015b48:	89 e5                	mov    ebp,esp
c0015b4a:	83 ec 18             	sub    esp,0x18
c0015b4d:	fb                   	sti    
c0015b4e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015b55:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015b59:	0f 84 8a 00 00 00    	je     c0015be9 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015b5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b62:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015b68:	84 c0                	test   al,al
c0015b6a:	75 11                	jne    c0015b7d <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015b6c:	e8 e9 75 00 00       	call   c001d15a <lockScheduler()>
c0015b71:	e8 20 79 00 00       	call   c001d496 <schedule()>
c0015b76:	e8 e1 75 00 00       	call   c001d15c <unlockScheduler()>
c0015b7b:	eb e2                	jmp    c0015b5f <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015b7d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015b80:	8d 50 01             	lea    edx,[eax+0x1]
c0015b83:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015b86:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b89:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015b8f:	88 10                	mov    BYTE PTR [eax],dl
c0015b91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b94:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015b9a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba0:	05 34 11 00 00       	add    eax,0x1134
c0015ba5:	83 ec 0c             	sub    esp,0xc
c0015ba8:	50                   	push   eax
c0015ba9:	e8 45 ab fe ff       	call   c00006f3 <strlen>
c0015bae:	83 c4 10             	add    esp,0x10
c0015bb1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015bb4:	81 c2 34 11 00 00    	add    edx,0x1134
c0015bba:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015bbd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015bc0:	81 c2 34 11 00 00    	add    edx,0x1134
c0015bc6:	83 ec 04             	sub    esp,0x4
c0015bc9:	50                   	push   eax
c0015bca:	51                   	push   ecx
c0015bcb:	52                   	push   edx
c0015bcc:	e8 97 aa fe ff       	call   c0000668 <memmove>
c0015bd1:	83 c4 10             	add    esp,0x10
c0015bd4:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015bd7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015bda:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015bde:	0f 85 71 ff ff ff    	jne    c0015b55 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015be4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be7:	eb 03                	jmp    c0015bec <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015be9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bec:	c9                   	leave  
c0015bed:	c3                   	ret    

c0015bee <Keyboard::Keyboard(char const*)>:
c0015bee:	83 ec 0c             	sub    esp,0xc
c0015bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bf5:	83 ec 08             	sub    esp,0x8
c0015bf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015bfc:	50                   	push   eax
c0015bfd:	e8 f0 e2 ff ff       	call   c0013ef2 <Device::Device(char const*)>
c0015c02:	83 c4 10             	add    esp,0x10
c0015c05:	ba b4 9d 02 c0       	mov    edx,0xc0029db4
c0015c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c0e:	89 10                	mov    DWORD PTR [eax],edx
c0015c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c14:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015c1e:	c6 05 84 d0 02 c0 01 	mov    BYTE PTR ds:0xc002d084,0x1
c0015c25:	90                   	nop
c0015c26:	83 c4 0c             	add    esp,0xc
c0015c29:	c3                   	ret    

c0015c2a <Keyboard::~Keyboard()>:
c0015c2a:	83 ec 0c             	sub    esp,0xc
c0015c2d:	ba b4 9d 02 c0       	mov    edx,0xc0029db4
c0015c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c36:	89 10                	mov    DWORD PTR [eax],edx
c0015c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c3c:	83 ec 0c             	sub    esp,0xc
c0015c3f:	50                   	push   eax
c0015c40:	e8 8f df ff ff       	call   c0013bd4 <Device::~Device()>
c0015c45:	83 c4 10             	add    esp,0x10
c0015c48:	90                   	nop
c0015c49:	83 c4 0c             	add    esp,0xc
c0015c4c:	c3                   	ret    
c0015c4d:	90                   	nop

c0015c4e <Keyboard::~Keyboard()>:
c0015c4e:	83 ec 0c             	sub    esp,0xc
c0015c51:	83 ec 0c             	sub    esp,0xc
c0015c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c58:	e8 cd ff ff ff       	call   c0015c2a <Keyboard::~Keyboard()>
c0015c5d:	83 c4 10             	add    esp,0x10
c0015c60:	83 ec 08             	sub    esp,0x8
c0015c63:	68 5c 01 00 00       	push   0x15c
c0015c68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c6c:	e8 8a cb ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0015c71:	83 c4 10             	add    esp,0x10
c0015c74:	83 c4 0c             	add    esp,0xc
c0015c77:	c3                   	ret    

c0015c78 <LogicalDisk::close(int, int, void*)>:
c0015c78:	83 c8 ff             	or     eax,0xffffffff
c0015c7b:	c3                   	ret    

c0015c7c <LogicalDisk::~LogicalDisk()>:
c0015c7c:	83 ec 0c             	sub    esp,0xc
c0015c7f:	ba 64 9e 02 c0       	mov    edx,0xc0029e64
c0015c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c88:	89 10                	mov    DWORD PTR [eax],edx
c0015c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c8e:	83 ec 0c             	sub    esp,0xc
c0015c91:	50                   	push   eax
c0015c92:	e8 3d df ff ff       	call   c0013bd4 <Device::~Device()>
c0015c97:	83 c4 10             	add    esp,0x10
c0015c9a:	90                   	nop
c0015c9b:	83 c4 0c             	add    esp,0xc
c0015c9e:	c3                   	ret    
c0015c9f:	90                   	nop

c0015ca0 <LogicalDisk::~LogicalDisk()>:
c0015ca0:	83 ec 0c             	sub    esp,0xc
c0015ca3:	83 ec 0c             	sub    esp,0xc
c0015ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015caa:	e8 cd ff ff ff       	call   c0015c7c <LogicalDisk::~LogicalDisk()>
c0015caf:	83 c4 10             	add    esp,0x10
c0015cb2:	83 ec 08             	sub    esp,0x8
c0015cb5:	68 74 01 00 00       	push   0x174
c0015cba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cbe:	e8 38 cb ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0015cc3:	83 c4 10             	add    esp,0x10
c0015cc6:	83 c4 0c             	add    esp,0xc
c0015cc9:	c3                   	ret    

c0015cca <LogicalDisk::open(int, int, void*)>:
c0015cca:	83 ec 18             	sub    esp,0x18
c0015ccd:	68 e0 9d 02 c0       	push   0xc0029de0
c0015cd2:	e8 d4 3e 00 00       	call   c0019bab <Krnl::panic(char const*)>
c0015cd7:	83 c8 ff             	or     eax,0xffffffff
c0015cda:	83 c4 1c             	add    esp,0x1c
c0015cdd:	c3                   	ret    

c0015cde <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015cde:	53                   	push   ebx
c0015cdf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015ce3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ce7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ceb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015cf1:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015cf7:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015cfd:	77 10                	ja     c0015d0f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015cff:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015d05:	89 d3                	mov    ebx,edx
c0015d07:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015d0d:	72 05                	jb     c0015d14 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015d0f:	83 c8 ff             	or     eax,0xffffffff
c0015d12:	89 c2                	mov    edx,eax
c0015d14:	5b                   	pop    ebx
c0015d15:	c3                   	ret    

c0015d16 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015d16:	56                   	push   esi
c0015d17:	83 c8 ff             	or     eax,0xffffffff
c0015d1a:	53                   	push   ebx
c0015d1b:	89 c2                	mov    edx,eax
c0015d1d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015d21:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015d25:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015d29:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015d2f:	77 27                	ja     c0015d58 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015d31:	89 d8                	mov    eax,ebx
c0015d33:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015d39:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015d3f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d44:	89 c2                	mov    edx,eax
c0015d46:	73 10                	jae    c0015d58 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015d48:	89 c8                	mov    eax,ecx
c0015d4a:	89 da                	mov    edx,ebx
c0015d4c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015d52:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015d58:	5b                   	pop    ebx
c0015d59:	5e                   	pop    esi
c0015d5a:	c3                   	ret    
c0015d5b:	90                   	nop

c0015d5c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015d5c:	83 ec 1c             	sub    esp,0x1c
c0015d5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015d63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015d67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015d73:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015d7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d82:	83 ec 08             	sub    esp,0x8
c0015d85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d89:	50                   	push   eax
c0015d8a:	e8 63 e1 ff ff       	call   c0013ef2 <Device::Device(char const*)>
c0015d8f:	83 c4 10             	add    esp,0x10
c0015d92:	ba 64 9e 02 c0       	mov    edx,0xc0029e64
c0015d97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d9b:	89 10                	mov    DWORD PTR [eax],edx
c0015d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015da1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015da8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dac:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015db7:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015dc1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015dc5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015dc9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015dcd:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015dd3:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015dd9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015ddd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015de0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015de4:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015dea:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015df0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015df4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015df8:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015dfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e02:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015e0c:	90                   	nop
c0015e0d:	83 c4 1c             	add    esp,0x1c
c0015e10:	c3                   	ret    
c0015e11:	90                   	nop

c0015e12 <LogicalDisk::assignDriveLetter()>:
c0015e12:	55                   	push   ebp
c0015e13:	57                   	push   edi
c0015e14:	56                   	push   esi
c0015e15:	53                   	push   ebx
c0015e16:	83 ec 14             	sub    esp,0x14
c0015e19:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015e1d:	8b 3d c0 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d4c0
c0015e23:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015e29:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015e2d:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015e33:	8b 3d c4 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d4c4
c0015e39:	3c 01                	cmp    al,0x1
c0015e3b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015e3f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015e43:	19 c0                	sbb    eax,eax
c0015e45:	83 e0 02             	and    eax,0x2
c0015e48:	83 c0 41             	add    eax,0x41
c0015e4b:	0f be e8             	movsx  ebp,al
c0015e4e:	3c 43                	cmp    al,0x43
c0015e50:	75 10                	jne    c0015e62 <LogicalDisk::assignDriveLetter()+0x50>
c0015e52:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015e59:	75 5d                	jne    c0015eb8 <LogicalDisk::assignDriveLetter()+0xa6>
c0015e5b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015e60:	75 56                	jne    c0015eb8 <LogicalDisk::assignDriveLetter()+0xa6>
c0015e62:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015e65:	ba 01 00 00 00       	mov    edx,0x1
c0015e6a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015e6e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015e72:	d3 e2                	shl    edx,cl
c0015e74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015e78:	89 d7                	mov    edi,edx
c0015e7a:	89 d6                	mov    esi,edx
c0015e7c:	c1 ff 1f             	sar    edi,0x1f
c0015e7f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015e83:	21 f9                	and    ecx,edi
c0015e85:	09 d1                	or     ecx,edx
c0015e87:	75 2f                	jne    c0015eb8 <LogicalDisk::assignDriveLetter()+0xa6>
c0015e89:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015e8d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e91:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015e97:	09 f2                	or     edx,esi
c0015e99:	89 15 c0 d4 02 c0    	mov    DWORD PTR ds:0xc002d4c0,edx
c0015e9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ea3:	09 fa                	or     edx,edi
c0015ea5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015ea9:	89 15 c4 d4 02 c0    	mov    DWORD PTR ds:0xc002d4c4,edx
c0015eaf:	89 1c bd e0 d4 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2b20],ebx
c0015eb6:	eb 08                	jmp    c0015ec0 <LogicalDisk::assignDriveLetter()+0xae>
c0015eb8:	45                   	inc    ebp
c0015eb9:	40                   	inc    eax
c0015eba:	3c 5b                	cmp    al,0x5b
c0015ebc:	75 90                	jne    c0015e4e <LogicalDisk::assignDriveLetter()+0x3c>
c0015ebe:	31 c0                	xor    eax,eax
c0015ec0:	83 c4 14             	add    esp,0x14
c0015ec3:	5b                   	pop    ebx
c0015ec4:	5e                   	pop    esi
c0015ec5:	5f                   	pop    edi
c0015ec6:	5d                   	pop    ebp
c0015ec7:	c3                   	ret    

c0015ec8 <LogicalDisk::mount()>:
c0015ec8:	56                   	push   esi
c0015ec9:	53                   	push   ebx
c0015eca:	51                   	push   ecx
c0015ecb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ecf:	8b 1d 48 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d048
c0015ed5:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015edf:	85 db                	test   ebx,ebx
c0015ee1:	74 50                	je     c0015f33 <LogicalDisk::mount()+0x6b>
c0015ee3:	e8 5d 72 00 00       	call   c001d145 <getIRQNestingLevel()>
c0015ee8:	52                   	push   edx
c0015ee9:	52                   	push   edx
c0015eea:	50                   	push   eax
c0015eeb:	68 04 9e 02 c0       	push   0xc0029e04
c0015ef0:	e8 e6 c9 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0015ef5:	83 c4 0c             	add    esp,0xc
c0015ef8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015eff:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015f01:	83 e8 41             	sub    eax,0x41
c0015f04:	50                   	push   eax
c0015f05:	56                   	push   esi
c0015f06:	53                   	push   ebx
c0015f07:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f0a:	83 c4 10             	add    esp,0x10
c0015f0d:	84 c0                	test   al,al
c0015f0f:	74 08                	je     c0015f19 <LogicalDisk::mount()+0x51>
c0015f11:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015f17:	eb 1c                	jmp    c0015f35 <LogicalDisk::mount()+0x6d>
c0015f19:	e8 27 72 00 00       	call   c001d145 <getIRQNestingLevel()>
c0015f1e:	51                   	push   ecx
c0015f1f:	51                   	push   ecx
c0015f20:	50                   	push   eax
c0015f21:	68 1f 9e 02 c0       	push   0xc0029e1f
c0015f26:	e8 b0 c9 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0015f2b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015f2e:	83 c4 10             	add    esp,0x10
c0015f31:	eb ac                	jmp    c0015edf <LogicalDisk::mount()+0x17>
c0015f33:	31 c0                	xor    eax,eax
c0015f35:	5a                   	pop    edx
c0015f36:	5b                   	pop    ebx
c0015f37:	5e                   	pop    esi
c0015f38:	c3                   	ret    
c0015f39:	90                   	nop

c0015f3a <LogicalDisk::unmount()>:
c0015f3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f3e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015f48:	c3                   	ret    
c0015f49:	90                   	nop

c0015f4a <LogicalDisk::unassignDriveLetter()>:
c0015f4a:	57                   	push   edi
c0015f4b:	56                   	push   esi
c0015f4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f50:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015f57:	84 c9                	test   cl,cl
c0015f59:	75 0f                	jne    c0015f6a <LogicalDisk::unassignDriveLetter()+0x20>
c0015f5b:	c7 44 24 0c 3a 9e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029e3a
c0015f63:	5e                   	pop    esi
c0015f64:	5f                   	pop    edi
c0015f65:	e9 41 3c 00 00       	jmp    c0019bab <Krnl::panic(char const*)>
c0015f6a:	83 e9 41             	sub    ecx,0x41
c0015f6d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015f74:	b8 01 00 00 00       	mov    eax,0x1
c0015f79:	c7 04 8d e0 d4 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2b20],0x0
c0015f84:	d3 e0                	shl    eax,cl
c0015f86:	89 c7                	mov    edi,eax
c0015f88:	f7 d0                	not    eax
c0015f8a:	c1 ff 1f             	sar    edi,0x1f
c0015f8d:	21 05 c0 d4 02 c0    	and    DWORD PTR ds:0xc002d4c0,eax
c0015f93:	89 fe                	mov    esi,edi
c0015f95:	f7 d6                	not    esi
c0015f97:	21 35 c4 d4 02 c0    	and    DWORD PTR ds:0xc002d4c4,esi
c0015f9d:	5e                   	pop    esi
c0015f9e:	5f                   	pop    edi
c0015f9f:	c3                   	ret    

c0015fa0 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015fa0:	57                   	push   edi
c0015fa1:	56                   	push   esi
c0015fa2:	53                   	push   ebx
c0015fa3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015fa7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fab:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015faf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015fb3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015fb9:	77 41                	ja     c0015ffc <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015fbb:	99                   	cdq    
c0015fbc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015fc2:	01 c8                	add    eax,ecx
c0015fc4:	11 da                	adc    edx,ebx
c0015fc6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015fcc:	19 d7                	sbb    edi,edx
c0015fce:	72 33                	jb     c0016003 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015fd0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015fd6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015fdc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015fe0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015fe4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015fea:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015ff0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ff4:	5b                   	pop    ebx
c0015ff5:	5e                   	pop    esi
c0015ff6:	5f                   	pop    edi
c0015ff7:	e9 f8 09 00 00       	jmp    c00169f4 <VCache::read(unsigned long long, int, void*)>
c0015ffc:	b8 05 00 00 00       	mov    eax,0x5
c0016001:	eb 05                	jmp    c0016008 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016003:	b8 07 00 00 00       	mov    eax,0x7
c0016008:	5b                   	pop    ebx
c0016009:	5e                   	pop    esi
c001600a:	5f                   	pop    edi
c001600b:	c3                   	ret    

c001600c <LogicalDisk::write(unsigned long long, int, void*)>:
c001600c:	57                   	push   edi
c001600d:	56                   	push   esi
c001600e:	53                   	push   ebx
c001600f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016013:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016017:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001601f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016025:	77 41                	ja     c0016068 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016027:	99                   	cdq    
c0016028:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001602e:	01 c8                	add    eax,ecx
c0016030:	11 da                	adc    edx,ebx
c0016032:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016038:	19 d7                	sbb    edi,edx
c001603a:	72 33                	jb     c001606f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001603c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016042:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016048:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001604c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016050:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016056:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001605c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016060:	5b                   	pop    ebx
c0016061:	5e                   	pop    esi
c0016062:	5f                   	pop    edi
c0016063:	e9 a8 08 00 00       	jmp    c0016910 <VCache::write(unsigned long long, int, void*)>
c0016068:	b8 05 00 00 00       	mov    eax,0x5
c001606d:	eb 05                	jmp    c0016074 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001606f:	b8 07 00 00 00       	mov    eax,0x7
c0016074:	5b                   	pop    ebx
c0016075:	5e                   	pop    esi
c0016076:	5f                   	pop    edi
c0016077:	c3                   	ret    

c0016078 <Mouse::Mouse(char const*)>:
c0016078:	83 ec 0c             	sub    esp,0xc
c001607b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001607f:	83 ec 08             	sub    esp,0x8
c0016082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016086:	50                   	push   eax
c0016087:	e8 66 de ff ff       	call   c0013ef2 <Device::Device(char const*)>
c001608c:	83 c4 10             	add    esp,0x10
c001608f:	ba 90 9e 02 c0       	mov    edx,0xc0029e90
c0016094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016098:	89 10                	mov    DWORD PTR [eax],edx
c001609a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001609e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00160a8:	90                   	nop
c00160a9:	83 c4 0c             	add    esp,0xc
c00160ac:	c3                   	ret    
c00160ad:	90                   	nop

c00160ae <Mouse::~Mouse()>:
c00160ae:	83 ec 0c             	sub    esp,0xc
c00160b1:	ba 90 9e 02 c0       	mov    edx,0xc0029e90
c00160b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160ba:	89 10                	mov    DWORD PTR [eax],edx
c00160bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160c0:	83 ec 0c             	sub    esp,0xc
c00160c3:	50                   	push   eax
c00160c4:	e8 0b db ff ff       	call   c0013bd4 <Device::~Device()>
c00160c9:	83 c4 10             	add    esp,0x10
c00160cc:	90                   	nop
c00160cd:	83 c4 0c             	add    esp,0xc
c00160d0:	c3                   	ret    
c00160d1:	90                   	nop

c00160d2 <Mouse::~Mouse()>:
c00160d2:	83 ec 0c             	sub    esp,0xc
c00160d5:	83 ec 0c             	sub    esp,0xc
c00160d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160dc:	e8 cd ff ff ff       	call   c00160ae <Mouse::~Mouse()>
c00160e1:	83 c4 10             	add    esp,0x10
c00160e4:	83 ec 08             	sub    esp,0x8
c00160e7:	68 58 01 00 00       	push   0x158
c00160ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160f0:	e8 06 c7 ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c00160f5:	83 c4 10             	add    esp,0x10
c00160f8:	83 c4 0c             	add    esp,0xc
c00160fb:	c3                   	ret    

c00160fc <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00160fc:	55                   	push   ebp
c00160fd:	57                   	push   edi
c00160fe:	56                   	push   esi
c00160ff:	53                   	push   ebx
c0016100:	81 ec 28 01 00 00    	sub    esp,0x128
c0016106:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001610d:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016114:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001611b:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016122:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016126:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001612a:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016131:	e8 b8 de ff ff       	call   c0013fee <Device::getName()>
c0016136:	5a                   	pop    edx
c0016137:	59                   	pop    ecx
c0016138:	50                   	push   eax
c0016139:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001613d:	55                   	push   ebp
c001613e:	e8 32 a6 fe ff       	call   c0000775 <strcpy>
c0016143:	5b                   	pop    ebx
c0016144:	58                   	pop    eax
c0016145:	68 b4 9e 02 c0       	push   0xc0029eb4
c001614a:	55                   	push   ebp
c001614b:	e8 dc a6 fe ff       	call   c000082c <strcat>
c0016150:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016157:	e8 da 94 ff ff       	call   c000f636 <malloc>
c001615c:	83 c4 0c             	add    esp,0xc
c001615f:	89 c3                	mov    ebx,eax
c0016161:	57                   	push   edi
c0016162:	56                   	push   esi
c0016163:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016167:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001616b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016172:	55                   	push   ebp
c0016173:	50                   	push   eax
c0016174:	e8 e3 fb ff ff       	call   c0015d5c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016179:	83 c4 14             	add    esp,0x14
c001617c:	53                   	push   ebx
c001617d:	e8 90 fc ff ff       	call   c0015e12 <LogicalDisk::assignDriveLetter()>
c0016182:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016185:	e8 3e fd ff ff       	call   c0015ec8 <LogicalDisk::mount()>
c001618a:	58                   	pop    eax
c001618b:	5a                   	pop    edx
c001618c:	53                   	push   ebx
c001618d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016194:	e8 69 db ff ff       	call   c0013d02 <Device::addChild(Device*)>
c0016199:	81 c4 2c 01 00 00    	add    esp,0x12c
c001619f:	5b                   	pop    ebx
c00161a0:	5e                   	pop    esi
c00161a1:	5f                   	pop    edi
c00161a2:	5d                   	pop    ebp
c00161a3:	c3                   	ret    

c00161a4 <createPartitionsForDisk(PhysicalDisk*)>:
c00161a4:	55                   	push   ebp
c00161a5:	57                   	push   edi
c00161a6:	56                   	push   esi
c00161a7:	53                   	push   ebx
c00161a8:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00161ae:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00161b5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00161bb:	3d 00 02 00 00       	cmp    eax,0x200
c00161c0:	74 27                	je     c00161e9 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00161c2:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00161c8:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00161ce:	83 ec 10             	sub    esp,0x10
c00161d1:	0f a4 f7 0a          	shld   edi,esi,0xa
c00161d5:	99                   	cdq    
c00161d6:	c1 e6 0a             	shl    esi,0xa
c00161d9:	52                   	push   edx
c00161da:	89 fd                	mov    ebp,edi
c00161dc:	50                   	push   eax
c00161dd:	55                   	push   ebp
c00161de:	56                   	push   esi
c00161df:	e8 e8 f5 00 00       	call   c00257cc <__udivdi3>
c00161e4:	e9 b1 00 00 00       	jmp    c001629a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00161e9:	83 ec 0c             	sub    esp,0xc
c00161ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00161ee:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00161f2:	56                   	push   esi
c00161f3:	6a 01                	push   0x1
c00161f5:	6a 00                	push   0x0
c00161f7:	6a 00                	push   0x0
c00161f9:	53                   	push   ebx
c00161fa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00161fd:	83 c4 20             	add    esp,0x20
c0016200:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016208:	75 0a                	jne    c0016214 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001620a:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016212:	74 2c                	je     c0016240 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016214:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001621a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016220:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016226:	83 ec 10             	sub    esp,0x10
c0016229:	0f a4 c2 0a          	shld   edx,eax,0xa
c001622d:	89 f7                	mov    edi,esi
c001622f:	c1 e0 0a             	shl    eax,0xa
c0016232:	c1 ff 1f             	sar    edi,0x1f
c0016235:	57                   	push   edi
c0016236:	56                   	push   esi
c0016237:	52                   	push   edx
c0016238:	50                   	push   eax
c0016239:	e8 8e f5 00 00       	call   c00257cc <__udivdi3>
c001623e:	eb 5a                	jmp    c001629a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016240:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016247:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001624e:	83 e1 7f             	and    ecx,0x7f
c0016251:	83 e0 7f             	and    eax,0x7f
c0016254:	01 c1                	add    ecx,eax
c0016256:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001625d:	83 e0 7f             	and    eax,0x7f
c0016260:	01 c1                	add    ecx,eax
c0016262:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016269:	83 e0 7f             	and    eax,0x7f
c001626c:	00 c1                	add    cl,al
c001626e:	74 41                	je     c00162b1 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016270:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016276:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001627c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016282:	83 ec 10             	sub    esp,0x10
c0016285:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016289:	89 f7                	mov    edi,esi
c001628b:	c1 e0 0a             	shl    eax,0xa
c001628e:	c1 ff 1f             	sar    edi,0x1f
c0016291:	57                   	push   edi
c0016292:	56                   	push   esi
c0016293:	52                   	push   edx
c0016294:	50                   	push   eax
c0016295:	e8 32 f5 00 00       	call   c00257cc <__udivdi3>
c001629a:	83 c4 14             	add    esp,0x14
c001629d:	52                   	push   edx
c001629e:	50                   	push   eax
c001629f:	6a 00                	push   0x0
c00162a1:	6a 00                	push   0x0
c00162a3:	53                   	push   ebx
c00162a4:	e8 53 fe ff ff       	call   c00160fc <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00162a9:	83 c4 20             	add    esp,0x20
c00162ac:	e9 79 01 00 00       	jmp    c001642a <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00162b1:	89 f0                	mov    eax,esi
c00162b3:	31 f6                	xor    esi,esi
c00162b5:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00162bc:	75 02                	jne    c00162c0 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00162be:	89 f1                	mov    ecx,esi
c00162c0:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00162c7:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00162ce:	c1 e2 08             	shl    edx,0x8
c00162d1:	c1 e7 10             	shl    edi,0x10
c00162d4:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00162dc:	09 fa                	or     edx,edi
c00162de:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00162e6:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00162ed:	83 c0 10             	add    eax,0x10
c00162f0:	09 fa                	or     edx,edi
c00162f2:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00162f9:	c1 e7 18             	shl    edi,0x18
c00162fc:	09 fa                	or     edx,edi
c00162fe:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016305:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016309:	c1 e7 10             	shl    edi,0x10
c001630c:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016313:	c1 e2 08             	shl    edx,0x8
c0016316:	09 fa                	or     edx,edi
c0016318:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001631f:	09 fa                	or     edx,edi
c0016321:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016328:	c1 e7 18             	shl    edi,0x18
c001632b:	09 fa                	or     edx,edi
c001632d:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016331:	46                   	inc    esi
c0016332:	83 fe 04             	cmp    esi,0x4
c0016335:	0f 85 7a ff ff ff    	jne    c00162b5 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001633b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001633f:	83 f0 01             	xor    eax,0x1
c0016342:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016346:	75 57                	jne    c001639f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016348:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001634c:	83 f0 01             	xor    eax,0x1
c001634f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016353:	75 4a                	jne    c001639f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016355:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016359:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016361:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016369:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001636f:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016375:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001637b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001637f:	89 f7                	mov    edi,esi
c0016381:	c1 e0 0a             	shl    eax,0xa
c0016384:	c1 ff 1f             	sar    edi,0x1f
c0016387:	57                   	push   edi
c0016388:	56                   	push   esi
c0016389:	52                   	push   edx
c001638a:	50                   	push   eax
c001638b:	e8 3c f4 00 00       	call   c00257cc <__udivdi3>
c0016390:	83 c4 10             	add    esp,0x10
c0016393:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016397:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001639b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001639f:	84 c9                	test   cl,cl
c00163a1:	74 53                	je     c00163f6 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00163a3:	0f b6 c9             	movzx  ecx,cl
c00163a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163aa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00163ae:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00163b2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00163b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00163ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00163be:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00163c2:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00163c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00163ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00163ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163d6:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00163da:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00163de:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00163e2:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00163e6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00163ea:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00163ee:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00163f2:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00163f6:	31 ed                	xor    ebp,ebp
c00163f8:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00163fc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016400:	89 f8                	mov    eax,edi
c0016402:	09 f0                	or     eax,esi
c0016404:	74 1e                	je     c0016424 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016406:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001640a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001640e:	89 d1                	mov    ecx,edx
c0016410:	09 c1                	or     ecx,eax
c0016412:	74 10                	je     c0016424 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016414:	83 ec 0c             	sub    esp,0xc
c0016417:	57                   	push   edi
c0016418:	56                   	push   esi
c0016419:	52                   	push   edx
c001641a:	50                   	push   eax
c001641b:	53                   	push   ebx
c001641c:	e8 db fc ff ff       	call   c00160fc <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016421:	83 c4 20             	add    esp,0x20
c0016424:	45                   	inc    ebp
c0016425:	83 fd 04             	cmp    ebp,0x4
c0016428:	75 ce                	jne    c00163f8 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001642a:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016430:	5b                   	pop    ebx
c0016431:	5e                   	pop    esi
c0016432:	5f                   	pop    edi
c0016433:	5d                   	pop    ebp
c0016434:	c3                   	ret    
c0016435:	90                   	nop

c0016436 <Serial::Serial(char const*)>:
c0016436:	83 ec 0c             	sub    esp,0xc
c0016439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643d:	83 ec 08             	sub    esp,0x8
c0016440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016444:	50                   	push   eax
c0016445:	e8 a8 da ff ff       	call   c0013ef2 <Device::Device(char const*)>
c001644a:	83 c4 10             	add    esp,0x10
c001644d:	ba c8 9e 02 c0       	mov    edx,0xc0029ec8
c0016452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016456:	89 10                	mov    DWORD PTR [eax],edx
c0016458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001645c:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016466:	90                   	nop
c0016467:	83 c4 0c             	add    esp,0xc
c001646a:	c3                   	ret    
c001646b:	90                   	nop

c001646c <Serial::~Serial()>:
c001646c:	83 ec 0c             	sub    esp,0xc
c001646f:	ba c8 9e 02 c0       	mov    edx,0xc0029ec8
c0016474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016478:	89 10                	mov    DWORD PTR [eax],edx
c001647a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001647e:	83 ec 0c             	sub    esp,0xc
c0016481:	50                   	push   eax
c0016482:	e8 4d d7 ff ff       	call   c0013bd4 <Device::~Device()>
c0016487:	83 c4 10             	add    esp,0x10
c001648a:	90                   	nop
c001648b:	83 c4 0c             	add    esp,0xc
c001648e:	c3                   	ret    
c001648f:	90                   	nop

c0016490 <Serial::~Serial()>:
c0016490:	83 ec 0c             	sub    esp,0xc
c0016493:	83 ec 0c             	sub    esp,0xc
c0016496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001649a:	e8 cd ff ff ff       	call   c001646c <Serial::~Serial()>
c001649f:	83 c4 10             	add    esp,0x10
c00164a2:	83 ec 08             	sub    esp,0x8
c00164a5:	68 58 01 00 00       	push   0x158
c00164aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164ae:	e8 48 c3 ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c00164b3:	83 c4 10             	add    esp,0x10
c00164b6:	83 c4 0c             	add    esp,0xc
c00164b9:	c3                   	ret    

c00164ba <Timer::Timer(char const*)>:
c00164ba:	83 ec 0c             	sub    esp,0xc
c00164bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164c1:	83 ec 08             	sub    esp,0x8
c00164c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c8:	50                   	push   eax
c00164c9:	e8 24 da ff ff       	call   c0013ef2 <Device::Device(char const*)>
c00164ce:	83 c4 10             	add    esp,0x10
c00164d1:	ba 0c 9f 02 c0       	mov    edx,0xc0029f0c
c00164d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164da:	89 10                	mov    DWORD PTR [eax],edx
c00164dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164e0:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00164ea:	90                   	nop
c00164eb:	83 c4 0c             	add    esp,0xc
c00164ee:	c3                   	ret    
c00164ef:	90                   	nop

c00164f0 <Timer::~Timer()>:
c00164f0:	83 ec 0c             	sub    esp,0xc
c00164f3:	ba 0c 9f 02 c0       	mov    edx,0xc0029f0c
c00164f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164fc:	89 10                	mov    DWORD PTR [eax],edx
c00164fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016502:	83 ec 0c             	sub    esp,0xc
c0016505:	50                   	push   eax
c0016506:	e8 c9 d6 ff ff       	call   c0013bd4 <Device::~Device()>
c001650b:	83 c4 10             	add    esp,0x10
c001650e:	90                   	nop
c001650f:	83 c4 0c             	add    esp,0xc
c0016512:	c3                   	ret    
c0016513:	90                   	nop

c0016514 <Timer::~Timer()>:
c0016514:	83 ec 0c             	sub    esp,0xc
c0016517:	83 ec 0c             	sub    esp,0xc
c001651a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001651e:	e8 cd ff ff ff       	call   c00164f0 <Timer::~Timer()>
c0016523:	83 c4 10             	add    esp,0x10
c0016526:	83 ec 08             	sub    esp,0x8
c0016529:	68 5c 01 00 00       	push   0x15c
c001652e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016532:	e8 c4 c2 ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0016537:	83 c4 10             	add    esp,0x10
c001653a:	83 c4 0c             	add    esp,0xc
c001653d:	c3                   	ret    

c001653e <Timer::read()>:
c001653e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016542:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016548:	c3                   	ret    

c0016549 <timerHandler(unsigned long long)>:
c0016549:	55                   	push   ebp
c001654a:	57                   	push   edi
c001654b:	56                   	push   esi
c001654c:	53                   	push   ebx
c001654d:	83 ec 0c             	sub    esp,0xc
c0016550:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016554:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016558:	01 35 50 d5 02 c0    	add    DWORD PTR ds:0xc002d550,esi
c001655e:	11 3d 54 d5 02 c0    	adc    DWORD PTR ds:0xc002d554,edi
c0016564:	80 3d cd ce 02 c0 00 	cmp    BYTE PTR ds:0xc002cecd,0x0
c001656b:	0f 84 07 01 00 00    	je     c0016678 <timerHandler(unsigned long long)+0x12f>
c0016571:	e8 0b 6c 00 00       	call   c001d181 <lockStuff()>
c0016576:	83 ec 0c             	sub    esp,0xc
c0016579:	68 fc e3 02 c0       	push   0xc002e3fc
c001657e:	e8 bb 12 01 00       	call   c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016583:	c7 04 24 fc e3 02 c0 	mov    DWORD PTR [esp],0xc002e3fc
c001658a:	89 c3                	mov    ebx,eax
c001658c:	e8 b5 12 01 00       	call   c0027846 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016591:	83 c4 10             	add    esp,0x10
c0016594:	84 c0                	test   al,al
c0016596:	74 60                	je     c00165f8 <timerHandler(unsigned long long)+0xaf>
c0016598:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001659e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00165a1:	85 c0                	test   eax,eax
c00165a3:	0f 85 91 00 00 00    	jne    c001663a <timerHandler(unsigned long long)+0xf1>
c00165a9:	e9 be 00 00 00       	jmp    c001666c <timerHandler(unsigned long long)+0x123>
c00165ae:	83 ec 0c             	sub    esp,0xc
c00165b1:	55                   	push   ebp
c00165b2:	e8 bb 71 00 00       	call   c001d772 <unblockTask(ThreadControlBlock*)>
c00165b7:	83 c4 10             	add    esp,0x10
c00165ba:	39 eb                	cmp    ebx,ebp
c00165bc:	75 12                	jne    c00165d0 <timerHandler(unsigned long long)+0x87>
c00165be:	83 ec 0c             	sub    esp,0xc
c00165c1:	68 fc e3 02 c0       	push   0xc002e3fc
c00165c6:	e8 73 12 01 00       	call   c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165cb:	89 c3                	mov    ebx,eax
c00165cd:	83 c4 10             	add    esp,0x10
c00165d0:	83 ec 0c             	sub    esp,0xc
c00165d3:	68 fc e3 02 c0       	push   0xc002e3fc
c00165d8:	e8 69 12 01 00       	call   c0027846 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00165dd:	83 c4 10             	add    esp,0x10
c00165e0:	84 c0                	test   al,al
c00165e2:	75 b4                	jne    c0016598 <timerHandler(unsigned long long)+0x4f>
c00165e4:	83 ec 0c             	sub    esp,0xc
c00165e7:	68 fc e3 02 c0       	push   0xc002e3fc
c00165ec:	e8 4d 12 01 00       	call   c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165f1:	83 c4 10             	add    esp,0x10
c00165f4:	39 d8                	cmp    eax,ebx
c00165f6:	74 a0                	je     c0016598 <timerHandler(unsigned long long)+0x4f>
c00165f8:	83 ec 0c             	sub    esp,0xc
c00165fb:	68 fc e3 02 c0       	push   0xc002e3fc
c0016600:	e8 39 12 01 00       	call   c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016605:	c7 04 24 fc e3 02 c0 	mov    DWORD PTR [esp],0xc002e3fc
c001660c:	89 c5                	mov    ebp,eax
c001660e:	e8 4f 12 01 00       	call   c0027862 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016613:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016616:	83 c4 10             	add    esp,0x10
c0016619:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001661c:	39 15 50 d5 02 c0    	cmp    DWORD PTR ds:0xc002d550,edx
c0016622:	a1 54 d5 02 c0       	mov    eax,ds:0xc002d554
c0016627:	19 c8                	sbb    eax,ecx
c0016629:	73 83                	jae    c00165ae <timerHandler(unsigned long long)+0x65>
c001662b:	50                   	push   eax
c001662c:	50                   	push   eax
c001662d:	55                   	push   ebp
c001662e:	68 fc e3 02 c0       	push   0xc002e3fc
c0016633:	e8 d8 12 01 00       	call   c0027910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016638:	eb 93                	jmp    c00165cd <timerHandler(unsigned long long)+0x84>
c001663a:	80 3d cc ce 02 c0 00 	cmp    BYTE PTR ds:0xc002cecc,0x0
c0016641:	74 29                	je     c001666c <timerHandler(unsigned long long)+0x123>
c0016643:	39 c6                	cmp    esi,eax
c0016645:	bb 00 00 00 00       	mov    ebx,0x0
c001664a:	19 df                	sbb    edi,ebx
c001664c:	72 19                	jb     c0016667 <timerHandler(unsigned long long)+0x11e>
c001664e:	e8 07 6b 00 00       	call   c001d15a <lockScheduler()>
c0016653:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016658:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001665b:	e8 36 6e 00 00       	call   c001d496 <schedule()>
c0016660:	e8 f7 6a 00 00       	call   c001d15c <unlockScheduler()>
c0016665:	eb 05                	jmp    c001666c <timerHandler(unsigned long long)+0x123>
c0016667:	29 f0                	sub    eax,esi
c0016669:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c001666c:	83 c4 0c             	add    esp,0xc
c001666f:	5b                   	pop    ebx
c0016670:	5e                   	pop    esi
c0016671:	5f                   	pop    edi
c0016672:	5d                   	pop    ebp
c0016673:	e9 a3 6e 00 00       	jmp    c001d51b <unlockStuff()>
c0016678:	83 c4 0c             	add    esp,0xc
c001667b:	5b                   	pop    ebx
c001667c:	5e                   	pop    esi
c001667d:	5f                   	pop    edi
c001667e:	5d                   	pop    ebp
c001667f:	c3                   	ret    

c0016680 <setupTimer(int)>:
c0016680:	57                   	push   edi
c0016681:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0016686:	56                   	push   esi
c0016687:	53                   	push   ebx
c0016688:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001668c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016692:	83 ec 0c             	sub    esp,0xc
c0016695:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001669b:	e8 4e d9 ff ff       	call   c0013fee <Device::getName()>
c00166a0:	83 c4 10             	add    esp,0x10
c00166a3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00166a6:	0f 85 8d 00 00 00    	jne    c0016739 <setupTimer(int)+0xb9>
c00166ac:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c00166b1:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00166b8:	74 7f                	je     c0016739 <setupTimer(int)+0xb9>
c00166ba:	83 ec 0c             	sub    esp,0xc
c00166bd:	68 5c 01 00 00       	push   0x15c
c00166c2:	e8 6f 8f ff ff       	call   c000f636 <malloc>
c00166c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00166ca:	89 c3                	mov    ebx,eax
c00166cc:	e8 d1 ec 00 00       	call   c00253a2 <PIT::PIT()>
c00166d1:	59                   	pop    ecx
c00166d2:	5f                   	pop    edi
c00166d3:	53                   	push   ebx
c00166d4:	ff 35 c8 ce 02 c0    	push   DWORD PTR ds:0xc002cec8
c00166da:	e8 23 d6 ff ff       	call   c0013d02 <Device::addChild(Device*)>
c00166df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00166e1:	6a 00                	push   0x0
c00166e3:	6a 00                	push   0x0
c00166e5:	56                   	push   esi
c00166e6:	53                   	push   ebx
c00166e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00166ea:	83 c4 14             	add    esp,0x14
c00166ed:	68 60 01 00 00       	push   0x160
c00166f2:	e8 3f 8f ff ff       	call   c000f636 <malloc>
c00166f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00166fa:	89 c7                	mov    edi,eax
c00166fc:	e8 51 eb 00 00       	call   c0025252 <APICTimer::APICTimer()>
c0016701:	6a 00                	push   0x0
c0016703:	6a 00                	push   0x0
c0016705:	56                   	push   esi
c0016706:	57                   	push   edi
c0016707:	e8 48 ea 00 00       	call   c0025154 <APICTimer::open(int, int, void*)>
c001670c:	83 c4 20             	add    esp,0x20
c001670f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016711:	6a 00                	push   0x0
c0016713:	6a 00                	push   0x0
c0016715:	6a 00                	push   0x0
c0016717:	53                   	push   ebx
c0016718:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001671b:	58                   	pop    eax
c001671c:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0016721:	5a                   	pop    edx
c0016722:	57                   	push   edi
c0016723:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016729:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001672f:	e8 ce d5 ff ff       	call   c0013d02 <Device::addChild(Device*)>
c0016734:	83 c4 10             	add    esp,0x10
c0016737:	eb 33                	jmp    c001676c <setupTimer(int)+0xec>
c0016739:	83 ec 0c             	sub    esp,0xc
c001673c:	68 5c 01 00 00       	push   0x15c
c0016741:	e8 f0 8e ff ff       	call   c000f636 <malloc>
c0016746:	89 04 24             	mov    DWORD PTR [esp],eax
c0016749:	89 c3                	mov    ebx,eax
c001674b:	e8 52 ec 00 00       	call   c00253a2 <PIT::PIT()>
c0016750:	58                   	pop    eax
c0016751:	5a                   	pop    edx
c0016752:	53                   	push   ebx
c0016753:	ff 35 c8 ce 02 c0    	push   DWORD PTR ds:0xc002cec8
c0016759:	e8 a4 d5 ff ff       	call   c0013d02 <Device::addChild(Device*)>
c001675e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016760:	6a 00                	push   0x0
c0016762:	6a 00                	push   0x0
c0016764:	56                   	push   esi
c0016765:	53                   	push   ebx
c0016766:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016769:	83 c4 20             	add    esp,0x20
c001676c:	89 d8                	mov    eax,ebx
c001676e:	5b                   	pop    ebx
c001676f:	5e                   	pop    esi
c0016770:	5f                   	pop    edi
c0016771:	c3                   	ret    

c0016772 <VCache::VCache(PhysicalDisk*)>:
c0016772:	53                   	push   ebx
c0016773:	83 ec 18             	sub    esp,0x18
c0016776:	ba 3c 9f 02 c0       	mov    edx,0xc0029f3c
c001677b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001677f:	89 10                	mov    DWORD PTR [eax],edx
c0016781:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016785:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001678c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016790:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016797:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001679b:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00167a2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00167a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167ad:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00167b4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00167bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167bf:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00167c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167ca:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00167ce:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00167d6:	83 ec 0c             	sub    esp,0xc
c00167d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167dd:	e8 54 8e ff ff       	call   c000f636 <malloc>
c00167e2:	83 c4 10             	add    esp,0x10
c00167e5:	89 c3                	mov    ebx,eax
c00167e7:	83 ec 0c             	sub    esp,0xc
c00167ea:	53                   	push   ebx
c00167eb:	e8 8a 6a 00 00       	call   c001d27a <Mutex::Mutex()>
c00167f0:	83 c4 10             	add    esp,0x10
c00167f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167f7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00167fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167fe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016802:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016805:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016809:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016810:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016814:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001681a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001681e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016821:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016825:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001682b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016831:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016835:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016838:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001683b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001683f:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016843:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016847:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001684d:	c1 e0 06             	shl    eax,0x6
c0016850:	83 ec 0c             	sub    esp,0xc
c0016853:	50                   	push   eax
c0016854:	e8 dd 8d ff ff       	call   c000f636 <malloc>
c0016859:	83 c4 10             	add    esp,0x10
c001685c:	89 c2                	mov    edx,eax
c001685e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016862:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016865:	90                   	nop
c0016866:	83 c4 18             	add    esp,0x18
c0016869:	5b                   	pop    ebx
c001686a:	c3                   	ret    
c001686b:	90                   	nop

c001686c <VCache::writeWriteBuffer()>:
c001686c:	53                   	push   ebx
c001686d:	83 ec 14             	sub    esp,0x14
c0016870:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016874:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016877:	8b 10                	mov    edx,DWORD PTR [eax]
c0016879:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001687c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001687f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016882:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016885:	50                   	push   eax
c0016886:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016889:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016890:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016897:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001689b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00168a2:	83 c4 28             	add    esp,0x28
c00168a5:	5b                   	pop    ebx
c00168a6:	c3                   	ret    
c00168a7:	90                   	nop

c00168a8 <VCache::~VCache()>:
c00168a8:	83 ec 0c             	sub    esp,0xc
c00168ab:	ba 3c 9f 02 c0       	mov    edx,0xc0029f3c
c00168b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b4:	89 10                	mov    DWORD PTR [eax],edx
c00168b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ba:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00168bd:	84 c0                	test   al,al
c00168bf:	74 0f                	je     c00168d0 <VCache::~VCache()+0x28>
c00168c1:	83 ec 0c             	sub    esp,0xc
c00168c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168c8:	e8 9f ff ff ff       	call   c001686c <VCache::writeWriteBuffer()>
c00168cd:	83 c4 10             	add    esp,0x10
c00168d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00168d7:	83 ec 0c             	sub    esp,0xc
c00168da:	50                   	push   eax
c00168db:	e8 66 8d ff ff       	call   c000f646 <free>
c00168e0:	83 c4 10             	add    esp,0x10
c00168e3:	90                   	nop
c00168e4:	83 c4 0c             	add    esp,0xc
c00168e7:	c3                   	ret    

c00168e8 <VCache::~VCache()>:
c00168e8:	83 ec 0c             	sub    esp,0xc
c00168eb:	83 ec 0c             	sub    esp,0xc
c00168ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168f2:	e8 b1 ff ff ff       	call   c00168a8 <VCache::~VCache()>
c00168f7:	83 c4 10             	add    esp,0x10
c00168fa:	83 ec 08             	sub    esp,0x8
c00168fd:	6a 30                	push   0x30
c00168ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016903:	e8 f3 be ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0016908:	83 c4 10             	add    esp,0x10
c001690b:	83 c4 0c             	add    esp,0xc
c001690e:	c3                   	ret    
c001690f:	90                   	nop

c0016910 <VCache::write(unsigned long long, int, void*)>:
c0016910:	55                   	push   ebp
c0016911:	57                   	push   edi
c0016912:	56                   	push   esi
c0016913:	53                   	push   ebx
c0016914:	83 ec 28             	sub    esp,0x28
c0016917:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001691b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001691f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016923:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016927:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001692a:	e8 ad 6d 00 00       	call   c001d6dc <Semaphore::acquire()>
c001692f:	83 c4 10             	add    esp,0x10
c0016932:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016936:	74 66                	je     c001699e <VCache::write(unsigned long long, int, void*)+0x8e>
c0016938:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001693b:	99                   	cdq    
c001693c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016940:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016943:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016946:	89 c1                	mov    ecx,eax
c0016948:	89 d0                	mov    eax,edx
c001694a:	31 f1                	xor    ecx,esi
c001694c:	31 f8                	xor    eax,edi
c001694e:	89 ca                	mov    edx,ecx
c0016950:	09 c2                	or     edx,eax
c0016952:	75 3e                	jne    c0016992 <VCache::write(unsigned long long, int, void*)+0x82>
c0016954:	83 fd 01             	cmp    ebp,0x1
c0016957:	75 39                	jne    c0016992 <VCache::write(unsigned long long, int, void*)+0x82>
c0016959:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001695c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016962:	51                   	push   ecx
c0016963:	50                   	push   eax
c0016964:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016968:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001696c:	0f af c8             	imul   ecx,eax
c001696f:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016972:	51                   	push   ecx
c0016973:	e8 28 9d fe ff       	call   c00006a0 <memcpy>
c0016978:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001697b:	83 c4 10             	add    esp,0x10
c001697e:	40                   	inc    eax
c001697f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016982:	83 f8 40             	cmp    eax,0x40
c0016985:	75 57                	jne    c00169de <VCache::write(unsigned long long, int, void*)+0xce>
c0016987:	83 ec 0c             	sub    esp,0xc
c001698a:	53                   	push   ebx
c001698b:	e8 dc fe ff ff       	call   c001686c <VCache::writeWriteBuffer()>
c0016990:	eb 34                	jmp    c00169c6 <VCache::write(unsigned long long, int, void*)+0xb6>
c0016992:	83 ec 0c             	sub    esp,0xc
c0016995:	53                   	push   ebx
c0016996:	e8 d1 fe ff ff       	call   c001686c <VCache::writeWriteBuffer()>
c001699b:	83 c4 10             	add    esp,0x10
c001699e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169a1:	83 fd 3f             	cmp    ebp,0x3f
c00169a4:	7f 25                	jg     c00169cb <VCache::write(unsigned long long, int, void*)+0xbb>
c00169a6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00169a9:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00169ac:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00169af:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00169b3:	52                   	push   edx
c00169b4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00169ba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00169be:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00169c1:	e8 da 9c fe ff       	call   c00006a0 <memcpy>
c00169c6:	83 c4 10             	add    esp,0x10
c00169c9:	eb 13                	jmp    c00169de <VCache::write(unsigned long long, int, void*)+0xce>
c00169cb:	83 ec 0c             	sub    esp,0xc
c00169ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00169d0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00169d4:	55                   	push   ebp
c00169d5:	57                   	push   edi
c00169d6:	56                   	push   esi
c00169d7:	50                   	push   eax
c00169d8:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00169db:	83 c4 20             	add    esp,0x20
c00169de:	83 ec 0c             	sub    esp,0xc
c00169e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00169e4:	e8 a1 72 00 00       	call   c001dc8a <Semaphore::release()>
c00169e9:	83 c4 2c             	add    esp,0x2c
c00169ec:	31 c0                	xor    eax,eax
c00169ee:	5b                   	pop    ebx
c00169ef:	5e                   	pop    esi
c00169f0:	5f                   	pop    edi
c00169f1:	5d                   	pop    ebp
c00169f2:	c3                   	ret    
c00169f3:	90                   	nop

c00169f4 <VCache::read(unsigned long long, int, void*)>:
c00169f4:	57                   	push   edi
c00169f5:	56                   	push   esi
c00169f6:	53                   	push   ebx
c00169f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00169fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00169ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016a03:	83 ec 0c             	sub    esp,0xc
c0016a06:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a09:	e8 ce 6c 00 00       	call   c001d6dc <Semaphore::acquire()>
c0016a0e:	83 c4 10             	add    esp,0x10
c0016a11:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016a15:	74 0c                	je     c0016a23 <VCache::read(unsigned long long, int, void*)+0x2f>
c0016a17:	83 ec 0c             	sub    esp,0xc
c0016a1a:	53                   	push   ebx
c0016a1b:	e8 4c fe ff ff       	call   c001686c <VCache::writeWriteBuffer()>
c0016a20:	83 c4 10             	add    esp,0x10
c0016a23:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a26:	83 ec 0c             	sub    esp,0xc
c0016a29:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a33:	57                   	push   edi
c0016a34:	56                   	push   esi
c0016a35:	50                   	push   eax
c0016a36:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016a39:	83 c4 14             	add    esp,0x14
c0016a3c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a3f:	e8 46 72 00 00       	call   c001dc8a <Semaphore::release()>
c0016a44:	83 c4 10             	add    esp,0x10
c0016a47:	31 c0                	xor    eax,eax
c0016a49:	5b                   	pop    ebx
c0016a4a:	5e                   	pop    esi
c0016a4b:	5f                   	pop    edi
c0016a4c:	c3                   	ret    
c0016a4d:	90                   	nop

c0016a4e <Video::putrect(int, int, int, int, unsigned int)>:
c0016a4e:	55                   	push   ebp
c0016a4f:	57                   	push   edi
c0016a50:	56                   	push   esi
c0016a51:	53                   	push   ebx
c0016a52:	83 ec 1c             	sub    esp,0x1c
c0016a55:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016a59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016a5d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016a61:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016a65:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a6d:	01 df                	add    edi,ebx
c0016a6f:	39 fb                	cmp    ebx,edi
c0016a71:	7d 1f                	jge    c0016a92 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016a73:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016a77:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016a7b:	7d 12                	jge    c0016a8f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016a7d:	8b 16                	mov    edx,DWORD PTR [esi]
c0016a7f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016a83:	53                   	push   ebx
c0016a84:	55                   	push   ebp
c0016a85:	45                   	inc    ebp
c0016a86:	56                   	push   esi
c0016a87:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016a8a:	83 c4 10             	add    esp,0x10
c0016a8d:	eb e8                	jmp    c0016a77 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016a8f:	43                   	inc    ebx
c0016a90:	eb dd                	jmp    c0016a6f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016a92:	83 c4 1c             	add    esp,0x1c
c0016a95:	5b                   	pop    ebx
c0016a96:	5e                   	pop    esi
c0016a97:	5f                   	pop    edi
c0016a98:	5d                   	pop    ebp
c0016a99:	c3                   	ret    

c0016a9a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016a9a:	55                   	push   ebp
c0016a9b:	57                   	push   edi
c0016a9c:	31 ff                	xor    edi,edi
c0016a9e:	56                   	push   esi
c0016a9f:	53                   	push   ebx
c0016aa0:	83 ec 1c             	sub    esp,0x1c
c0016aa3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016aa7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016aab:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016ab2:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016ab7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016abb:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016abf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ac3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016ac6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016aca:	01 f9                	add    ecx,edi
c0016acc:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016ad0:	7d 2f                	jge    c0016b01 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016ad2:	31 f6                	xor    esi,esi
c0016ad4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016ad8:	01 f2                	add    edx,esi
c0016ada:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016ade:	7d 1a                	jge    c0016afa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016ae0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016ae3:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016ae6:	46                   	inc    esi
c0016ae7:	51                   	push   ecx
c0016ae8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016aec:	52                   	push   edx
c0016aed:	55                   	push   ebp
c0016aee:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016af1:	83 c4 10             	add    esp,0x10
c0016af4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016af8:	eb da                	jmp    c0016ad4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016afa:	47                   	inc    edi
c0016afb:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016aff:	eb c5                	jmp    c0016ac6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016b01:	83 c4 1c             	add    esp,0x1c
c0016b04:	5b                   	pop    ebx
c0016b05:	5e                   	pop    esi
c0016b06:	5f                   	pop    edi
c0016b07:	5d                   	pop    ebp
c0016b08:	c3                   	ret    
c0016b09:	90                   	nop

c0016b0a <Video::blit(unsigned int*, int, int, int, int)>:
c0016b0a:	55                   	push   ebp
c0016b0b:	57                   	push   edi
c0016b0c:	56                   	push   esi
c0016b0d:	53                   	push   ebx
c0016b0e:	83 ec 1c             	sub    esp,0x1c
c0016b11:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016b15:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b19:	85 c0                	test   eax,eax
c0016b1b:	79 02                	jns    c0016b1f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016b1d:	31 c0                	xor    eax,eax
c0016b1f:	c1 e0 02             	shl    eax,0x2
c0016b22:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016b26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b2a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016b2e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016b32:	39 d8                	cmp    eax,ebx
c0016b34:	7e 49                	jle    c0016b7f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016b36:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016b3c:	7c 41                	jl     c0016b7f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016b3e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016b42:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016b46:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016b4a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016b4e:	39 f9                	cmp    ecx,edi
c0016b50:	7e 22                	jle    c0016b74 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016b52:	83 c5 04             	add    ebp,0x4
c0016b55:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016b5b:	7c 14                	jl     c0016b71 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016b5d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016b5f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016b62:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016b66:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016b6a:	56                   	push   esi
c0016b6b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016b6e:	83 c4 10             	add    esp,0x10
c0016b71:	47                   	inc    edi
c0016b72:	eb d2                	jmp    c0016b46 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016b74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016b78:	43                   	inc    ebx
c0016b79:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016b7d:	eb ab                	jmp    c0016b2a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016b7f:	83 c4 1c             	add    esp,0x1c
c0016b82:	5b                   	pop    ebx
c0016b83:	5e                   	pop    esi
c0016b84:	5f                   	pop    edi
c0016b85:	5d                   	pop    ebp
c0016b86:	c3                   	ret    
c0016b87:	90                   	nop

c0016b88 <Video::clearScreen(unsigned int)>:
c0016b88:	57                   	push   edi
c0016b89:	56                   	push   esi
c0016b8a:	53                   	push   ebx
c0016b8b:	31 db                	xor    ebx,ebx
c0016b8d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016b91:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016b97:	7e 1f                	jle    c0016bb8 <Video::clearScreen(unsigned int)+0x30>
c0016b99:	31 ff                	xor    edi,edi
c0016b9b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016ba1:	7e 12                	jle    c0016bb5 <Video::clearScreen(unsigned int)+0x2d>
c0016ba3:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ba5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ba9:	53                   	push   ebx
c0016baa:	57                   	push   edi
c0016bab:	47                   	inc    edi
c0016bac:	56                   	push   esi
c0016bad:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016bb0:	83 c4 10             	add    esp,0x10
c0016bb3:	eb e6                	jmp    c0016b9b <Video::clearScreen(unsigned int)+0x13>
c0016bb5:	43                   	inc    ebx
c0016bb6:	eb d9                	jmp    c0016b91 <Video::clearScreen(unsigned int)+0x9>
c0016bb8:	5b                   	pop    ebx
c0016bb9:	5e                   	pop    esi
c0016bba:	5f                   	pop    edi
c0016bbb:	c3                   	ret    

c0016bbc <Video::putpixel(int, int, unsigned int)>:
c0016bbc:	c7 44 24 04 44 9f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029f44
c0016bc4:	e9 e2 2f 00 00       	jmp    c0019bab <Krnl::panic(char const*)>
c0016bc9:	90                   	nop

c0016bca <Video::Video(char const*)>:
c0016bca:	83 ec 0c             	sub    esp,0xc
c0016bcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bd1:	83 ec 08             	sub    esp,0x8
c0016bd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bd8:	50                   	push   eax
c0016bd9:	e8 14 d3 ff ff       	call   c0013ef2 <Device::Device(char const*)>
c0016bde:	83 c4 10             	add    esp,0x10
c0016be1:	ba c8 9f 02 c0       	mov    edx,0xc0029fc8
c0016be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bea:	89 10                	mov    DWORD PTR [eax],edx
c0016bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bf0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016bfa:	90                   	nop
c0016bfb:	83 c4 0c             	add    esp,0xc
c0016bfe:	c3                   	ret    
c0016bff:	90                   	nop

c0016c00 <Video::~Video()>:
c0016c00:	83 ec 0c             	sub    esp,0xc
c0016c03:	ba c8 9f 02 c0       	mov    edx,0xc0029fc8
c0016c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c0c:	89 10                	mov    DWORD PTR [eax],edx
c0016c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c12:	83 ec 0c             	sub    esp,0xc
c0016c15:	50                   	push   eax
c0016c16:	e8 b9 cf ff ff       	call   c0013bd4 <Device::~Device()>
c0016c1b:	83 c4 10             	add    esp,0x10
c0016c1e:	90                   	nop
c0016c1f:	83 c4 0c             	add    esp,0xc
c0016c22:	c3                   	ret    
c0016c23:	90                   	nop

c0016c24 <Video::~Video()>:
c0016c24:	83 ec 0c             	sub    esp,0xc
c0016c27:	83 ec 0c             	sub    esp,0xc
c0016c2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c2e:	e8 cd ff ff ff       	call   c0016c00 <Video::~Video()>
c0016c33:	83 c4 10             	add    esp,0x10
c0016c36:	83 ec 08             	sub    esp,0x8
c0016c39:	68 64 01 00 00       	push   0x164
c0016c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c42:	e8 b4 bb ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0016c47:	83 c4 10             	add    esp,0x10
c0016c4a:	83 c4 0c             	add    esp,0xc
c0016c4d:	c3                   	ret    

c0016c4e <Video::isMonochrome()>:
c0016c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c52:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016c58:	c3                   	ret    
c0016c59:	90                   	nop

c0016c5a <Video::getWidth()>:
c0016c5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c5e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016c64:	c3                   	ret    
c0016c65:	90                   	nop

c0016c66 <Video::getHeight()>:
c0016c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c6a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c70:	c3                   	ret    
c0016c71:	90                   	nop

c0016c72 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016c72:	55                   	push   ebp
c0016c73:	57                   	push   edi
c0016c74:	56                   	push   esi
c0016c75:	53                   	push   ebx
c0016c76:	83 ec 2c             	sub    esp,0x2c
c0016c79:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016c7d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016c81:	83 f8 01             	cmp    eax,0x1
c0016c84:	19 c9                	sbb    ecx,ecx
c0016c86:	31 db                	xor    ebx,ebx
c0016c88:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016c8c:	89 cd                	mov    ebp,ecx
c0016c8e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016c96:	f7 d5                	not    ebp
c0016c98:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016ca2:	01 d8                	add    eax,ebx
c0016ca4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ca8:	56                   	push   esi
c0016ca9:	e8 b8 ff ff ff       	call   c0016c66 <Video::getHeight()>
c0016cae:	59                   	pop    ecx
c0016caf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016cb3:	7e 70                	jle    c0016d25 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016cb5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016cb9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016cbd:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016cc0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016cc4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016cc8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016ccf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016cd3:	89 f8                	mov    eax,edi
c0016cd5:	83 c0 20             	add    eax,0x20
c0016cd8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016cdc:	56                   	push   esi
c0016cdd:	e8 78 ff ff ff       	call   c0016c5a <Video::getWidth()>
c0016ce2:	5a                   	pop    edx
c0016ce3:	39 c7                	cmp    edi,eax
c0016ce5:	7d 34                	jge    c0016d1b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016ce7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016cec:	74 05                	je     c0016cf3 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016cee:	8b 06                	mov    eax,DWORD PTR [esi]
c0016cf0:	55                   	push   ebp
c0016cf1:	eb 0d                	jmp    c0016d00 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016cf3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016cf8:	74 12                	je     c0016d0c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016cfa:	8b 06                	mov    eax,DWORD PTR [esi]
c0016cfc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d00:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016d04:	57                   	push   edi
c0016d05:	56                   	push   esi
c0016d06:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d09:	83 c4 10             	add    esp,0x10
c0016d0c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016d10:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016d14:	47                   	inc    edi
c0016d15:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016d19:	75 c1                	jne    c0016cdc <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016d1b:	43                   	inc    ebx
c0016d1c:	83 fb 20             	cmp    ebx,0x20
c0016d1f:	0f 85 79 ff ff ff    	jne    c0016c9e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016d25:	83 c4 2c             	add    esp,0x2c
c0016d28:	5b                   	pop    ebx
c0016d29:	5e                   	pop    esi
c0016d2a:	5f                   	pop    edi
c0016d2b:	5d                   	pop    ebp
c0016d2c:	c3                   	ret    
c0016d2d:	90                   	nop

c0016d2e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016d2e:	55                   	push   ebp
c0016d2f:	57                   	push   edi
c0016d30:	56                   	push   esi
c0016d31:	53                   	push   ebx
c0016d32:	83 ec 28             	sub    esp,0x28
c0016d35:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016d39:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016d3d:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016d41:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016d45:	c1 e7 08             	shl    edi,0x8
c0016d48:	01 c7                	add    edi,eax
c0016d4a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016d4e:	c1 e0 08             	shl    eax,0x8
c0016d51:	01 d0                	add    eax,edx
c0016d53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d5b:	0f af c7             	imul   eax,edi
c0016d5e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016d65:	50                   	push   eax
c0016d66:	e8 cb 88 ff ff       	call   c000f636 <malloc>
c0016d6b:	83 c4 10             	add    esp,0x10
c0016d6e:	89 c5                	mov    ebp,eax
c0016d70:	85 c0                	test   eax,eax
c0016d72:	75 15                	jne    c0016d89 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016d74:	83 ec 0c             	sub    esp,0xc
c0016d77:	68 65 9f 02 c0       	push   0xc0029f65
c0016d7c:	e8 5a bb ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0016d81:	83 c4 10             	add    esp,0x10
c0016d84:	e9 1c 01 00 00       	jmp    c0016ea5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016d89:	be 12 00 00 00       	mov    esi,0x12
c0016d8e:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016d92:	74 11                	je     c0016da5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016d94:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016d98:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016d9c:	c1 fe 03             	sar    esi,0x3
c0016d9f:	0f af f0             	imul   esi,eax
c0016da2:	83 c6 12             	add    esi,0x12
c0016da5:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016da9:	74 04                	je     c0016daf <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016dab:	85 ff                	test   edi,edi
c0016dad:	75 12                	jne    c0016dc1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016daf:	83 ec 0c             	sub    esp,0xc
c0016db2:	68 7c 9f 02 c0       	push   0xc0029f7c
c0016db7:	e8 1f bb ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0016dbc:	e9 ce 00 00 00       	jmp    c0016e8f <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016dc1:	52                   	push   edx
c0016dc2:	52                   	push   edx
c0016dc3:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016dc7:	50                   	push   eax
c0016dc8:	68 91 9f 02 c0       	push   0xc0029f91
c0016dcd:	e8 09 bb ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0016dd2:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016dd6:	83 c4 10             	add    esp,0x10
c0016dd9:	80 fa 02             	cmp    dl,0x2
c0016ddc:	0f 85 98 00 00 00    	jne    c0016e7a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016de2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016de7:	75 10                	jne    c0016df9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016de9:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016ded:	75 0a                	jne    c0016df9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016def:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016df2:	83 e8 18             	sub    eax,0x18
c0016df5:	a8 f7                	test   al,0xf7
c0016df7:	74 0a                	je     c0016e03 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016df9:	83 ec 0c             	sub    esp,0xc
c0016dfc:	68 9e 9f 02 c0       	push   0xc0029f9e
c0016e01:	eb 7f                	jmp    c0016e82 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016e03:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016e0b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016e13:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016e17:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016e1f:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016e23:	75 0c                	jne    c0016e31 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016e25:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016e2a:	c1 e0 18             	shl    eax,0x18
c0016e2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e31:	41                   	inc    ecx
c0016e32:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016e37:	c1 e2 10             	shl    edx,0x10
c0016e3a:	89 d0                	mov    eax,edx
c0016e3c:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016e41:	c1 e2 08             	shl    edx,0x8
c0016e44:	09 c2                	or     edx,eax
c0016e46:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016e4a:	09 c2                	or     edx,eax
c0016e4c:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016e50:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016e54:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016e58:	c1 f8 03             	sar    eax,0x3
c0016e5b:	01 c6                	add    esi,eax
c0016e5d:	89 c8                	mov    eax,ecx
c0016e5f:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016e63:	39 c7                	cmp    edi,eax
c0016e65:	7f b0                	jg     c0016e17 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016e67:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016e6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016e6f:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016e72:	7e 22                	jle    c0016e96 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016e74:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016e78:	eb 99                	jmp    c0016e13 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016e7a:	50                   	push   eax
c0016e7b:	50                   	push   eax
c0016e7c:	52                   	push   edx
c0016e7d:	68 ac 9f 02 c0       	push   0xc0029fac
c0016e82:	e8 54 ba ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0016e87:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016e8a:	e8 b7 87 ff ff       	call   c000f646 <free>
c0016e8f:	83 c4 10             	add    esp,0x10
c0016e92:	31 ed                	xor    ebp,ebp
c0016e94:	eb 0f                	jmp    c0016ea5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016e96:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e9a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016e9d:	89 38                	mov    DWORD PTR [eax],edi
c0016e9f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016ea3:	89 08                	mov    DWORD PTR [eax],ecx
c0016ea5:	83 c4 1c             	add    esp,0x1c
c0016ea8:	89 e8                	mov    eax,ebp
c0016eaa:	5b                   	pop    ebx
c0016eab:	5e                   	pop    esi
c0016eac:	5f                   	pop    edi
c0016ead:	5d                   	pop    ebp
c0016eae:	c3                   	ret    
c0016eaf:	90                   	nop

c0016eb0 <Video::putTGA(int, int, unsigned char*, int)>:
c0016eb0:	55                   	push   ebp
c0016eb1:	57                   	push   edi
c0016eb2:	56                   	push   esi
c0016eb3:	53                   	push   ebx
c0016eb4:	83 ec 28             	sub    esp,0x28
c0016eb7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016ebb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016ebf:	50                   	push   eax
c0016ec0:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016ec4:	50                   	push   eax
c0016ec5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016ec9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016ecd:	56                   	push   esi
c0016ece:	e8 5b fe ff ff       	call   c0016d2e <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016ed3:	83 c4 20             	add    esp,0x20
c0016ed6:	85 c0                	test   eax,eax
c0016ed8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016edc:	74 35                	je     c0016f13 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016ede:	89 c7                	mov    edi,eax
c0016ee0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ee4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016ee8:	39 d8                	cmp    eax,ebx
c0016eea:	7e 27                	jle    c0016f13 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016eec:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016ef0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ef4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016ef8:	39 e8                	cmp    eax,ebp
c0016efa:	7e 14                	jle    c0016f10 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016efc:	8b 06                	mov    eax,DWORD PTR [esi]
c0016efe:	83 c7 04             	add    edi,0x4
c0016f01:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016f04:	53                   	push   ebx
c0016f05:	55                   	push   ebp
c0016f06:	45                   	inc    ebp
c0016f07:	56                   	push   esi
c0016f08:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f0b:	83 c4 10             	add    esp,0x10
c0016f0e:	eb e0                	jmp    c0016ef0 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016f10:	43                   	inc    ebx
c0016f11:	eb cd                	jmp    c0016ee0 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016f13:	83 c4 1c             	add    esp,0x1c
c0016f16:	5b                   	pop    ebx
c0016f17:	5e                   	pop    esi
c0016f18:	5f                   	pop    edi
c0016f19:	5d                   	pop    ebp
c0016f1a:	c3                   	ret    
c0016f1b:	90                   	nop

c0016f1c <ACPI::close(int, int, void*)>:
c0016f1c:	83 ec 1c             	sub    esp,0x1c
c0016f1f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016f27:	74 0a                	je     c0016f33 <ACPI::close(int, int, void*)+0x17>
c0016f29:	b8 00 00 00 00       	mov    eax,0x0
c0016f2e:	e9 9a 00 00 00       	jmp    c0016fcd <ACPI::close(int, int, void*)+0xb1>
c0016f33:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f38:	75 37                	jne    c0016f71 <ACPI::close(int, int, void*)+0x55>
c0016f3a:	83 ec 0c             	sub    esp,0xc
c0016f3d:	68 08 a0 02 c0       	push   0xc002a008
c0016f42:	e8 94 b9 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0016f47:	83 c4 10             	add    esp,0x10
c0016f4a:	a1 68 d5 02 c0       	mov    eax,ds:0xc002d568
c0016f4f:	85 c0                	test   eax,eax
c0016f51:	74 07                	je     c0016f5a <ACPI::close(int, int, void*)+0x3e>
c0016f53:	a1 68 d5 02 c0       	mov    eax,ds:0xc002d568
c0016f58:	ff d0                	call   eax
c0016f5a:	83 ec 0c             	sub    esp,0xc
c0016f5d:	68 2c a1 02 c0       	push   0xc002a12c
c0016f62:	e8 44 2c 00 00       	call   c0019bab <Krnl::panic(char const*)>
c0016f67:	83 c4 10             	add    esp,0x10
c0016f6a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016f6f:	eb 5c                	jmp    c0016fcd <ACPI::close(int, int, void*)+0xb1>
c0016f71:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016f76:	75 50                	jne    c0016fc8 <ACPI::close(int, int, void*)+0xac>
c0016f78:	a1 64 d5 02 c0       	mov    eax,ds:0xc002d564
c0016f7d:	85 c0                	test   eax,eax
c0016f7f:	74 07                	je     c0016f88 <ACPI::close(int, int, void*)+0x6c>
c0016f81:	a1 64 d5 02 c0       	mov    eax,ds:0xc002d564
c0016f86:	ff d0                	call   eax
c0016f88:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016f8d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016f92:	83 e0 02             	and    eax,0x2
c0016f95:	74 1c                	je     c0016fb3 <ACPI::close(int, int, void*)+0x97>
c0016f97:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016f9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fa2:	89 c2                	mov    edx,eax
c0016fa4:	ec                   	in     al,dx
c0016fa5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016fa9:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016fad:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016fb1:	eb da                	jmp    c0016f8d <ACPI::close(int, int, void*)+0x71>
c0016fb3:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016fba:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016fbf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016fc3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016fc7:	ee                   	out    dx,al
c0016fc8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016fcd:	83 c4 1c             	add    esp,0x1c
c0016fd0:	c3                   	ret    

c0016fd1 <findRSDP()>:
c0016fd1:	83 ec 1c             	sub    esp,0x1c
c0016fd4:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0016fd9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016fdf:	83 e0 04             	and    eax,0x4
c0016fe2:	84 c0                	test   al,al
c0016fe4:	75 07                	jne    c0016fed <findRSDP()+0x1c>
c0016fe6:	b8 00 00 00 00       	mov    eax,0x0
c0016feb:	eb 6a                	jmp    c0017057 <findRSDP()+0x86>
c0016fed:	a1 10 cf 02 c0       	mov    eax,ds:0xc002cf10
c0016ff2:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016ff7:	7f 1b                	jg     c0017014 <findRSDP()+0x43>
c0016ff9:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0016ffe:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017004:	83 e2 fb             	and    edx,0xfffffffb
c0017007:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001700d:	b8 00 00 00 00       	mov    eax,0x0
c0017012:	eb 43                	jmp    c0017057 <findRSDP()+0x86>
c0017014:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001701c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017024:	77 2c                	ja     c0017052 <findRSDP()+0x81>
c0017026:	83 ec 04             	sub    esp,0x4
c0017029:	6a 08                	push   0x8
c001702b:	68 15 a0 02 c0       	push   0xc002a015
c0017030:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017034:	e8 04 96 fe ff       	call   c000063d <memcmp>
c0017039:	83 c4 10             	add    esp,0x10
c001703c:	85 c0                	test   eax,eax
c001703e:	0f 94 c0             	sete   al
c0017041:	84 c0                	test   al,al
c0017043:	74 06                	je     c001704b <findRSDP()+0x7a>
c0017045:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017049:	eb 0c                	jmp    c0017057 <findRSDP()+0x86>
c001704b:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017050:	eb ca                	jmp    c001701c <findRSDP()+0x4b>
c0017052:	b8 00 00 00 00       	mov    eax,0x0
c0017057:	83 c4 1c             	add    esp,0x1c
c001705a:	c3                   	ret    

c001705b <loadACPITables(unsigned char*)>:
c001705b:	56                   	push   esi
c001705c:	53                   	push   ebx
c001705d:	83 ec 44             	sub    esp,0x44
c0017060:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0017065:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001706b:	83 e0 04             	and    eax,0x4
c001706e:	84 c0                	test   al,al
c0017070:	0f 84 05 02 00 00    	je     c001727b <loadACPITables(unsigned char*)+0x220>
c0017076:	a0 80 d7 02 c0       	mov    al,ds:0xc002d780
c001707b:	84 c0                	test   al,al
c001707d:	74 75                	je     c00170f4 <loadACPITables(unsigned char*)+0x99>
c001707f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017083:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017087:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001708b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001708e:	83 e8 24             	sub    eax,0x24
c0017091:	c1 e8 03             	shr    eax,0x3
c0017094:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017098:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00170a0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00170a4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00170a8:	0f 8d b2 00 00 00    	jge    c0017160 <loadACPITables(unsigned char*)+0x105>
c00170ae:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00170b2:	83 c0 24             	add    eax,0x24
c00170b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00170b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170bd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00170c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00170c5:	c1 e0 03             	shl    eax,0x3
c00170c8:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00170cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170d0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00170d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00170d5:	89 c1                	mov    ecx,eax
c00170d7:	a1 6c d5 02 c0       	mov    eax,ds:0xc002d56c
c00170dc:	8d 50 01             	lea    edx,[eax+0x1]
c00170df:	89 15 6c d5 02 c0    	mov    DWORD PTR ds:0xc002d56c,edx
c00170e5:	89 ca                	mov    edx,ecx
c00170e7:	89 14 c5 84 d5 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2a7c],edx
c00170ee:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00170f2:	eb ac                	jmp    c00170a0 <loadACPITables(unsigned char*)+0x45>
c00170f4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00170f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00170fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017100:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017103:	83 e8 24             	sub    eax,0x24
c0017106:	c1 e8 02             	shr    eax,0x2
c0017109:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001710d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017119:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c001711d:	7d 41                	jge    c0017160 <loadACPITables(unsigned char*)+0x105>
c001711f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017123:	83 c0 24             	add    eax,0x24
c0017126:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001712a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001712e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017132:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017136:	c1 e0 02             	shl    eax,0x2
c0017139:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c001713d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017141:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017143:	a1 6c d5 02 c0       	mov    eax,ds:0xc002d56c
c0017148:	8d 50 01             	lea    edx,[eax+0x1]
c001714b:	89 15 6c d5 02 c0    	mov    DWORD PTR ds:0xc002d56c,edx
c0017151:	89 ca                	mov    edx,ecx
c0017153:	89 14 c5 84 d5 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2a7c],edx
c001715a:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c001715e:	eb b5                	jmp    c0017115 <loadACPITables(unsigned char*)+0xba>
c0017160:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017168:	a1 6c d5 02 c0       	mov    eax,ds:0xc002d56c
c001716d:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017171:	0f 8d 05 01 00 00    	jge    c001727c <loadACPITables(unsigned char*)+0x221>
c0017177:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001717b:	8b 04 c5 84 d5 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2a7c]
c0017182:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001718a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001718e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017192:	25 ff 0f 00 00       	and    eax,0xfff
c0017197:	89 c6                	mov    esi,eax
c0017199:	e8 dd a8 ff ff       	call   c0011a7b <Virt::getAKernelVAS()>
c001719e:	89 c3                	mov    ebx,eax
c00171a0:	83 ec 0c             	sub    esp,0xc
c00171a3:	6a 01                	push   0x1
c00171a5:	e8 41 a7 ff ff       	call   c00118eb <Virt::allocateKernelVirtualPages(int)>
c00171aa:	83 c4 10             	add    esp,0x10
c00171ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00171b1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00171b7:	83 ec 0c             	sub    esp,0xc
c00171ba:	6a 01                	push   0x1
c00171bc:	6a 01                	push   0x1
c00171be:	50                   	push   eax
c00171bf:	52                   	push   edx
c00171c0:	53                   	push   ebx
c00171c1:	e8 e4 b0 ff ff       	call   c00122aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00171c6:	83 c4 20             	add    esp,0x20
c00171c9:	09 f0                	or     eax,esi
c00171cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00171cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171d3:	c1 e0 03             	shl    eax,0x3
c00171d6:	05 80 d5 02 c0       	add    eax,0xc002d580
c00171db:	83 ec 04             	sub    esp,0x4
c00171de:	6a 04                	push   0x4
c00171e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171e4:	50                   	push   eax
c00171e5:	e8 b6 94 fe ff       	call   c00006a0 <memcpy>
c00171ea:	83 c4 10             	add    esp,0x10
c00171ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00171f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00171f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171fc:	05 00 10 00 00       	add    eax,0x1000
c0017201:	c1 e8 0c             	shr    eax,0xc
c0017204:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001720c:	89 04 24             	mov    DWORD PTR [esp],eax
c001720f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017213:	25 ff 0f 00 00       	and    eax,0xfff
c0017218:	89 c6                	mov    esi,eax
c001721a:	e8 5c a8 ff ff       	call   c0011a7b <Virt::getAKernelVAS()>
c001721f:	89 c3                	mov    ebx,eax
c0017221:	83 ec 0c             	sub    esp,0xc
c0017224:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017228:	e8 be a6 ff ff       	call   c00118eb <Virt::allocateKernelVirtualPages(int)>
c001722d:	83 c4 10             	add    esp,0x10
c0017230:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017234:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001723a:	83 ec 0c             	sub    esp,0xc
c001723d:	6a 01                	push   0x1
c001723f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017243:	50                   	push   eax
c0017244:	52                   	push   edx
c0017245:	53                   	push   ebx
c0017246:	e8 5f b0 ff ff       	call   c00122aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001724b:	83 c4 20             	add    esp,0x20
c001724e:	09 f0                	or     eax,esi
c0017250:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017254:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017257:	83 ec 0c             	sub    esp,0xc
c001725a:	50                   	push   eax
c001725b:	e8 ef a9 ff ff       	call   c0011c4f <Virt::freeKernelVirtualPages(unsigned long)>
c0017260:	83 c4 10             	add    esp,0x10
c0017263:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017267:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001726b:	89 14 c5 84 d5 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2a7c],edx
c0017272:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017276:	e9 ed fe ff ff       	jmp    c0017168 <loadACPITables(unsigned char*)+0x10d>
c001727b:	90                   	nop
c001727c:	83 c4 44             	add    esp,0x44
c001727f:	5b                   	pop    ebx
c0017280:	5e                   	pop    esi
c0017281:	c3                   	ret    

c0017282 <findRSDT(unsigned char*)>:
c0017282:	56                   	push   esi
c0017283:	53                   	push   ebx
c0017284:	83 ec 44             	sub    esp,0x44
c0017287:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c001728c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017292:	83 e0 04             	and    eax,0x4
c0017295:	84 c0                	test   al,al
c0017297:	75 0a                	jne    c00172a3 <findRSDT(unsigned char*)+0x21>
c0017299:	b8 00 00 00 00       	mov    eax,0x0
c001729e:	e9 f7 00 00 00       	jmp    c001739a <findRSDT(unsigned char*)+0x118>
c00172a3:	83 ec 04             	sub    esp,0x4
c00172a6:	6a 24                	push   0x24
c00172a8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00172ac:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172b0:	50                   	push   eax
c00172b1:	e8 ea 93 fe ff       	call   c00006a0 <memcpy>
c00172b6:	83 c4 10             	add    esp,0x10
c00172b9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00172bd:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00172c1:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00172c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00172cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00172d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00172d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00172d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00172dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172e1:	25 ff 0f 00 00       	and    eax,0xfff
c00172e6:	89 c6                	mov    esi,eax
c00172e8:	e8 8e a7 ff ff       	call   c0011a7b <Virt::getAKernelVAS()>
c00172ed:	89 c3                	mov    ebx,eax
c00172ef:	83 ec 0c             	sub    esp,0xc
c00172f2:	6a 02                	push   0x2
c00172f4:	e8 f2 a5 ff ff       	call   c00118eb <Virt::allocateKernelVirtualPages(int)>
c00172f9:	83 c4 10             	add    esp,0x10
c00172fc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017300:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017306:	83 ec 0c             	sub    esp,0xc
c0017309:	6a 01                	push   0x1
c001730b:	6a 02                	push   0x2
c001730d:	50                   	push   eax
c001730e:	52                   	push   edx
c001730f:	53                   	push   ebx
c0017310:	e8 95 af ff ff       	call   c00122aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017315:	83 c4 20             	add    esp,0x20
c0017318:	09 f0                	or     eax,esi
c001731a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001731e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017322:	25 ff 0f 00 00       	and    eax,0xfff
c0017327:	89 c6                	mov    esi,eax
c0017329:	e8 4d a7 ff ff       	call   c0011a7b <Virt::getAKernelVAS()>
c001732e:	89 c3                	mov    ebx,eax
c0017330:	83 ec 0c             	sub    esp,0xc
c0017333:	6a 02                	push   0x2
c0017335:	e8 b1 a5 ff ff       	call   c00118eb <Virt::allocateKernelVirtualPages(int)>
c001733a:	83 c4 10             	add    esp,0x10
c001733d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017341:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017347:	83 ec 0c             	sub    esp,0xc
c001734a:	6a 01                	push   0x1
c001734c:	6a 02                	push   0x2
c001734e:	50                   	push   eax
c001734f:	52                   	push   edx
c0017350:	53                   	push   ebx
c0017351:	e8 54 af ff ff       	call   c00122aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017356:	83 c4 20             	add    esp,0x20
c0017359:	09 f0                	or     eax,esi
c001735b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001735f:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017364:	75 11                	jne    c0017377 <findRSDT(unsigned char*)+0xf5>
c0017366:	c6 05 80 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d780,0x0
c001736d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017371:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017375:	eb 1f                	jmp    c0017396 <findRSDT(unsigned char*)+0x114>
c0017377:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c001737c:	75 11                	jne    c001738f <findRSDT(unsigned char*)+0x10d>
c001737e:	c6 05 80 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d780,0x1
c0017385:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017389:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001738d:	eb 07                	jmp    c0017396 <findRSDT(unsigned char*)+0x114>
c001738f:	b8 00 00 00 00       	mov    eax,0x0
c0017394:	eb 04                	jmp    c001739a <findRSDT(unsigned char*)+0x118>
c0017396:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001739a:	83 c4 44             	add    esp,0x44
c001739d:	5b                   	pop    ebx
c001739e:	5e                   	pop    esi
c001739f:	c3                   	ret    

c00173a0 <findDataTable(unsigned char*, char*)>:
c00173a0:	83 ec 1c             	sub    esp,0x1c
c00173a3:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c00173a8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00173ae:	83 e0 04             	and    eax,0x4
c00173b1:	84 c0                	test   al,al
c00173b3:	75 07                	jne    c00173bc <findDataTable(unsigned char*, char*)+0x1c>
c00173b5:	b8 00 00 00 00       	mov    eax,0x0
c00173ba:	eb 7c                	jmp    c0017438 <findDataTable(unsigned char*, char*)+0x98>
c00173bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00173c4:	a1 6c d5 02 c0       	mov    eax,ds:0xc002d56c
c00173c9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00173cd:	7d 3a                	jge    c0017409 <findDataTable(unsigned char*, char*)+0x69>
c00173cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173d3:	c1 e0 03             	shl    eax,0x3
c00173d6:	05 80 d5 02 c0       	add    eax,0xc002d580
c00173db:	83 ec 04             	sub    esp,0x4
c00173de:	6a 04                	push   0x4
c00173e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00173e4:	50                   	push   eax
c00173e5:	e8 53 92 fe ff       	call   c000063d <memcmp>
c00173ea:	83 c4 10             	add    esp,0x10
c00173ed:	85 c0                	test   eax,eax
c00173ef:	0f 94 c0             	sete   al
c00173f2:	84 c0                	test   al,al
c00173f4:	74 0d                	je     c0017403 <findDataTable(unsigned char*, char*)+0x63>
c00173f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173fa:	8b 04 c5 84 d5 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2a7c]
c0017401:	eb 35                	jmp    c0017438 <findDataTable(unsigned char*, char*)+0x98>
c0017403:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017407:	eb bb                	jmp    c00173c4 <findDataTable(unsigned char*, char*)+0x24>
c0017409:	a0 80 d7 02 c0       	mov    al,ds:0xc002d780
c001740e:	84 c0                	test   al,al
c0017410:	74 07                	je     c0017419 <findDataTable(unsigned char*, char*)+0x79>
c0017412:	b8 58 00 00 00       	mov    eax,0x58
c0017417:	eb 05                	jmp    c001741e <findDataTable(unsigned char*, char*)+0x7e>
c0017419:	b8 52 00 00 00       	mov    eax,0x52
c001741e:	83 ec 04             	sub    esp,0x4
c0017421:	50                   	push   eax
c0017422:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017426:	68 50 a1 02 c0       	push   0xc002a150
c001742b:	e8 ab b4 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0017430:	83 c4 10             	add    esp,0x10
c0017433:	b8 00 00 00 00       	mov    eax,0x0
c0017438:	83 c4 1c             	add    esp,0x1c
c001743b:	c3                   	ret    

c001743c <scanMADT()>:
c001743c:	53                   	push   ebx
c001743d:	83 ec 38             	sub    esp,0x38
c0017440:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0017445:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001744b:	83 e0 04             	and    eax,0x4
c001744e:	84 c0                	test   al,al
c0017450:	0f 84 63 04 00 00    	je     c00178b9 <scanMADT()+0x47d>
c0017456:	e8 76 fb ff ff       	call   c0016fd1 <findRSDP()>
c001745b:	a3 8c d7 02 c0       	mov    ds:0xc002d78c,eax
c0017460:	a1 8c d7 02 c0       	mov    eax,ds:0xc002d78c
c0017465:	85 c0                	test   eax,eax
c0017467:	75 19                	jne    c0017482 <scanMADT()+0x46>
c0017469:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c001746e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017474:	83 e2 fb             	and    edx,0xfffffffb
c0017477:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001747d:	e9 3b 04 00 00       	jmp    c00178bd <scanMADT()+0x481>
c0017482:	a1 8c d7 02 c0       	mov    eax,ds:0xc002d78c
c0017487:	83 ec 0c             	sub    esp,0xc
c001748a:	50                   	push   eax
c001748b:	e8 f2 fd ff ff       	call   c0017282 <findRSDT(unsigned char*)>
c0017490:	83 c4 10             	add    esp,0x10
c0017493:	a3 88 d7 02 c0       	mov    ds:0xc002d788,eax
c0017498:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c001749d:	85 c0                	test   eax,eax
c001749f:	75 19                	jne    c00174ba <scanMADT()+0x7e>
c00174a1:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c00174a6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00174ac:	83 e2 fb             	and    edx,0xfffffffb
c00174af:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00174b5:	e9 03 04 00 00       	jmp    c00178bd <scanMADT()+0x481>
c00174ba:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00174bf:	83 ec 0c             	sub    esp,0xc
c00174c2:	50                   	push   eax
c00174c3:	e8 93 fb ff ff       	call   c001705b <loadACPITables(unsigned char*)>
c00174c8:	83 c4 10             	add    esp,0x10
c00174cb:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00174d0:	83 ec 08             	sub    esp,0x8
c00174d3:	68 1e a0 02 c0       	push   0xc002a01e
c00174d8:	50                   	push   eax
c00174d9:	e8 c2 fe ff ff       	call   c00173a0 <findDataTable(unsigned char*, char*)>
c00174de:	83 c4 10             	add    esp,0x10
c00174e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00174e5:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00174ea:	75 19                	jne    c0017505 <scanMADT()+0xc9>
c00174ec:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c00174f1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00174f7:	83 e2 fe             	and    edx,0xfffffffe
c00174fa:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017500:	e9 b8 03 00 00       	jmp    c00178bd <scanMADT()+0x481>
c0017505:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001750d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017511:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017514:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017518:	0f 87 9f 03 00 00    	ja     c00178bd <scanMADT()+0x481>
c001751e:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017526:	0f 87 91 03 00 00    	ja     c00178bd <scanMADT()+0x481>
c001752c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017530:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017534:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017538:	8d 50 01             	lea    edx,[eax+0x1]
c001753b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001753f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017543:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017547:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001754b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001754f:	8d 50 01             	lea    edx,[eax+0x1]
c0017552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017556:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001755a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001755e:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017562:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017567:	0f 86 4f 03 00 00    	jbe    c00178bc <scanMADT()+0x480>
c001756d:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017572:	75 57                	jne    c00175cb <scanMADT()+0x18f>
c0017574:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017578:	8d 50 01             	lea    edx,[eax+0x1]
c001757b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001757f:	8a 15 80 d9 02 c0    	mov    dl,BYTE PTR ds:0xc002d980
c0017585:	0f b6 d2             	movzx  edx,dl
c0017588:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001758c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017590:	88 82 c0 d9 02 c0    	mov    BYTE PTR [edx-0x3ffd2640],al
c0017596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001759a:	8d 50 01             	lea    edx,[eax+0x1]
c001759d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175a1:	8a 15 80 d9 02 c0    	mov    dl,BYTE PTR ds:0xc002d980
c00175a7:	8d 4a 01             	lea    ecx,[edx+0x1]
c00175aa:	88 0d 80 d9 02 c0    	mov    BYTE PTR ds:0xc002d980,cl
c00175b0:	0f b6 d2             	movzx  edx,dl
c00175b3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00175b7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00175bb:	88 82 a0 d9 02 c0    	mov    BYTE PTR [edx-0x3ffd2660],al
c00175c1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00175c6:	e9 da 02 00 00       	jmp    c00178a5 <scanMADT()+0x469>
c00175cb:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00175d0:	0f 85 14 01 00 00    	jne    c00176ea <scanMADT()+0x2ae>
c00175d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175da:	8d 50 01             	lea    edx,[eax+0x1]
c00175dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175e1:	8a 15 40 d8 02 c0    	mov    dl,BYTE PTR ds:0xc002d840
c00175e7:	0f b6 d2             	movzx  edx,dl
c00175ea:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00175ee:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00175f2:	88 82 60 d8 02 c0    	mov    BYTE PTR [edx-0x3ffd27a0],al
c00175f8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00175fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017600:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017604:	01 d0                	add    eax,edx
c0017606:	83 c0 2c             	add    eax,0x2c
c0017609:	8a 00                	mov    al,BYTE PTR [eax]
c001760b:	0f b6 d0             	movzx  edx,al
c001760e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017612:	8d 48 01             	lea    ecx,[eax+0x1]
c0017615:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017619:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001761d:	0f b6 c0             	movzx  eax,al
c0017620:	c1 e0 08             	shl    eax,0x8
c0017623:	89 d1                	mov    ecx,edx
c0017625:	09 c1                	or     ecx,eax
c0017627:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001762b:	8d 50 02             	lea    edx,[eax+0x2]
c001762e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017632:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017636:	0f b6 c0             	movzx  eax,al
c0017639:	c1 e0 10             	shl    eax,0x10
c001763c:	09 c1                	or     ecx,eax
c001763e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017642:	8d 50 03             	lea    edx,[eax+0x3]
c0017645:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017649:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001764d:	0f b6 c0             	movzx  eax,al
c0017650:	c1 e0 18             	shl    eax,0x18
c0017653:	09 c1                	or     ecx,eax
c0017655:	89 ca                	mov    edx,ecx
c0017657:	a0 40 d8 02 c0       	mov    al,ds:0xc002d840
c001765c:	0f b6 c0             	movzx  eax,al
c001765f:	89 14 85 80 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2780],edx
c0017666:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001766b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001766f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017673:	01 d0                	add    eax,edx
c0017675:	83 c0 2c             	add    eax,0x2c
c0017678:	8a 00                	mov    al,BYTE PTR [eax]
c001767a:	0f b6 d0             	movzx  edx,al
c001767d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017681:	8d 48 01             	lea    ecx,[eax+0x1]
c0017684:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017688:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001768c:	0f b6 c0             	movzx  eax,al
c001768f:	c1 e0 08             	shl    eax,0x8
c0017692:	89 d1                	mov    ecx,edx
c0017694:	09 c1                	or     ecx,eax
c0017696:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001769a:	8d 50 02             	lea    edx,[eax+0x2]
c001769d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176a1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00176a5:	0f b6 c0             	movzx  eax,al
c00176a8:	c1 e0 10             	shl    eax,0x10
c00176ab:	09 c1                	or     ecx,eax
c00176ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176b1:	8d 50 03             	lea    edx,[eax+0x3]
c00176b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176b8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00176bc:	0f b6 c0             	movzx  eax,al
c00176bf:	c1 e0 18             	shl    eax,0x18
c00176c2:	09 c1                	or     ecx,eax
c00176c4:	89 ca                	mov    edx,ecx
c00176c6:	a0 40 d8 02 c0       	mov    al,ds:0xc002d840
c00176cb:	0f b6 c0             	movzx  eax,al
c00176ce:	89 14 85 00 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2700],edx
c00176d5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00176da:	a0 40 d8 02 c0       	mov    al,ds:0xc002d840
c00176df:	40                   	inc    eax
c00176e0:	a2 40 d8 02 c0       	mov    ds:0xc002d840,al
c00176e5:	e9 bb 01 00 00       	jmp    c00178a5 <scanMADT()+0x469>
c00176ea:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00176ef:	0f 85 e9 00 00 00    	jne    c00177de <scanMADT()+0x3a2>
c00176f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176f9:	8d 50 01             	lea    edx,[eax+0x1]
c00176fc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017700:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017704:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017708:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001770c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017710:	8d 50 01             	lea    edx,[eax+0x1]
c0017713:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017717:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001771b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001771f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017723:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017727:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001772b:	01 d0                	add    eax,edx
c001772d:	83 c0 2c             	add    eax,0x2c
c0017730:	8a 00                	mov    al,BYTE PTR [eax]
c0017732:	0f b6 d0             	movzx  edx,al
c0017735:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017739:	8d 48 01             	lea    ecx,[eax+0x1]
c001773c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017740:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017744:	0f b6 c0             	movzx  eax,al
c0017747:	c1 e0 08             	shl    eax,0x8
c001774a:	89 d1                	mov    ecx,edx
c001774c:	09 c1                	or     ecx,eax
c001774e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017752:	8d 50 02             	lea    edx,[eax+0x2]
c0017755:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017759:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001775d:	0f b6 c0             	movzx  eax,al
c0017760:	c1 e0 10             	shl    eax,0x10
c0017763:	09 c1                	or     ecx,eax
c0017765:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017769:	8d 50 03             	lea    edx,[eax+0x3]
c001776c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017770:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017774:	0f b6 c0             	movzx  eax,al
c0017777:	c1 e0 18             	shl    eax,0x18
c001777a:	09 c8                	or     eax,ecx
c001777c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017780:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017785:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017789:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001778d:	01 d0                	add    eax,edx
c001778f:	83 c0 2c             	add    eax,0x2c
c0017792:	8a 00                	mov    al,BYTE PTR [eax]
c0017794:	0f b6 c0             	movzx  eax,al
c0017797:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001779b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001779e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177a2:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00177a6:	0f b6 d2             	movzx  edx,dl
c00177a9:	c1 e2 08             	shl    edx,0x8
c00177ac:	09 d0                	or     eax,edx
c00177ae:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00177b3:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00177b8:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00177bd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00177c1:	88 90 20 c1 02 c0    	mov    BYTE PTR [eax-0x3ffd3ee0],dl
c00177c7:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00177cc:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00177d1:	66 89 84 12 20 d8 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd27e0],ax
c00177d9:	e9 c7 00 00 00       	jmp    c00178a5 <scanMADT()+0x469>
c00177de:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00177e3:	0f 85 b0 00 00 00    	jne    c0017899 <scanMADT()+0x45d>
c00177e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177ed:	8d 50 01             	lea    edx,[eax+0x1]
c00177f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177f8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00177fc:	0f b6 c0             	movzx  eax,al
c00177ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017803:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017807:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001780b:	01 d0                	add    eax,edx
c001780d:	83 c0 2c             	add    eax,0x2c
c0017810:	8a 00                	mov    al,BYTE PTR [eax]
c0017812:	0f b6 d0             	movzx  edx,al
c0017815:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017819:	8d 48 01             	lea    ecx,[eax+0x1]
c001781c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017820:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017824:	0f b6 c0             	movzx  eax,al
c0017827:	c1 e0 08             	shl    eax,0x8
c001782a:	09 d0                	or     eax,edx
c001782c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017830:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017835:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017839:	8d 50 01             	lea    edx,[eax+0x1]
c001783c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017840:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017844:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017848:	0f b6 c0             	movzx  eax,al
c001784b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001784f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017853:	c1 e0 08             	shl    eax,0x8
c0017856:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001785a:	89 c1                	mov    ecx,eax
c001785c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017860:	c1 e0 18             	shl    eax,0x18
c0017863:	89 c3                	mov    ebx,eax
c0017865:	a1 90 d7 02 c0       	mov    eax,ds:0xc002d790
c001786a:	8d 50 01             	lea    edx,[eax+0x1]
c001786d:	89 15 90 d7 02 c0    	mov    DWORD PTR ds:0xc002d790,edx
c0017873:	09 d9                	or     ecx,ebx
c0017875:	89 ca                	mov    edx,ecx
c0017877:	89 14 85 a0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2860],edx
c001787e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017882:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001788a:	68 80 a1 02 c0       	push   0xc002a180
c001788f:	e8 47 b0 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0017894:	83 c4 10             	add    esp,0x10
c0017897:	eb 0c                	jmp    c00178a5 <scanMADT()+0x469>
c0017899:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001789e:	75 05                	jne    c00178a5 <scanMADT()+0x469>
c00178a0:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00178a5:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00178aa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00178ae:	01 d0                	add    eax,edx
c00178b0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00178b4:	e9 54 fc ff ff       	jmp    c001750d <scanMADT()+0xd1>
c00178b9:	90                   	nop
c00178ba:	eb 01                	jmp    c00178bd <scanMADT()+0x481>
c00178bc:	90                   	nop
c00178bd:	83 c4 38             	add    esp,0x38
c00178c0:	5b                   	pop    ebx
c00178c1:	c3                   	ret    

c00178c2 <ACPI::ACPI()>:
c00178c2:	83 ec 0c             	sub    esp,0xc
c00178c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178c9:	83 ec 08             	sub    esp,0x8
c00178cc:	68 23 a0 02 c0       	push   0xc002a023
c00178d1:	50                   	push   eax
c00178d2:	e8 1b c6 ff ff       	call   c0013ef2 <Device::Device(char const*)>
c00178d7:	83 c4 10             	add    esp,0x10
c00178da:	ba 58 a2 02 c0       	mov    edx,0xc002a258
c00178df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178e3:	89 10                	mov    DWORD PTR [eax],edx
c00178e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178e9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00178f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178f4:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00178fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017902:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c001790c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017910:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0017917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001791b:	c6 80 65 22 00 00 00 	mov    BYTE PTR [eax+0x2265],0x0
c0017922:	e8 15 fb ff ff       	call   c001743c <scanMADT()>
c0017927:	90                   	nop
c0017928:	83 c4 0c             	add    esp,0xc
c001792b:	c3                   	ret    

c001792c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001792c:	83 ec 2c             	sub    esp,0x2c
c001792f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017933:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017937:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001793b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001793f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017944:	88 d0                	mov    al,dl
c0017946:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001794a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001794f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017957:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001795b:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017961:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017965:	0f 8d 97 00 00 00    	jge    c0017a02 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001796b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001796f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017973:	83 c2 2a             	add    edx,0x2a
c0017976:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001797a:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001797f:	75 78                	jne    c00179f9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017981:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017985:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017989:	83 c2 2a             	add    edx,0x2a
c001798c:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017990:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017994:	75 63                	jne    c00179f9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017996:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001799b:	74 3a                	je     c00179d7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001799d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00179a5:	83 c2 2a             	add    edx,0x2a
c00179a8:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00179ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179b3:	39 c2                	cmp    edx,eax
c00179b5:	74 10                	je     c00179c7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00179b7:	83 ec 0c             	sub    esp,0xc
c00179ba:	68 bc a1 02 c0       	push   0xc002a1bc
c00179bf:	e8 e7 21 00 00       	call   c0019bab <Krnl::panic(char const*)>
c00179c4:	83 c4 10             	add    esp,0x10
c00179c7:	83 ec 0c             	sub    esp,0xc
c00179ca:	68 28 a0 02 c0       	push   0xc002a028
c00179cf:	e8 d7 21 00 00       	call   c0019bab <Krnl::panic(char const*)>
c00179d4:	83 c4 10             	add    esp,0x10
c00179d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00179db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00179e3:	83 c2 2a             	add    edx,0x2a
c00179e6:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00179ea:	8b 02                	mov    eax,DWORD PTR [edx]
c00179ec:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00179ef:	89 01                	mov    DWORD PTR [ecx],eax
c00179f1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00179f4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00179f9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00179fd:	e9 55 ff ff ff       	jmp    c0017957 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017a02:	90                   	nop
c0017a03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a07:	83 c4 2c             	add    esp,0x2c
c0017a0a:	c2 04 00             	ret    0x4
c0017a0d:	90                   	nop

c0017a0e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017a0e:	56                   	push   esi
c0017a0f:	53                   	push   ebx
c0017a10:	83 ec 14             	sub    esp,0x14
c0017a13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017a1b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017a1f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017a24:	88 c8                	mov    al,cl
c0017a26:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017a2a:	88 d0                	mov    al,dl
c0017a2c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017a30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a34:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0017a3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a3e:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0017a44:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0017a49:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0017a4e:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0017a53:	83 ec 04             	sub    esp,0x4
c0017a56:	56                   	push   esi
c0017a57:	53                   	push   ebx
c0017a58:	51                   	push   ecx
c0017a59:	52                   	push   edx
c0017a5a:	50                   	push   eax
c0017a5b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017a5f:	68 ec a1 02 c0       	push   0xc002a1ec
c0017a64:	e8 72 ae ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0017a69:	83 c4 20             	add    esp,0x20
c0017a6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a70:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017a76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a7a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017a7d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017a81:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017a85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a89:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017a8f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a93:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017a96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a9a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017a9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aa3:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017aa9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017aad:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ab4:	83 c2 2a             	add    edx,0x2a
c0017ab7:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017abb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017abf:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017ac5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ac9:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017acc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017ad0:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017ad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ad8:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017ade:	8d 50 01             	lea    edx,[eax+0x1]
c0017ae1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ae5:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0017aeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aef:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017af5:	3d 00 08 00 00       	cmp    eax,0x800
c0017afa:	75 10                	jne    c0017b0c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0017afc:	83 ec 0c             	sub    esp,0xc
c0017aff:	68 37 a0 02 c0       	push   0xc002a037
c0017b04:	e8 a2 20 00 00       	call   c0019bab <Krnl::panic(char const*)>
c0017b09:	83 c4 10             	add    esp,0x10
c0017b0c:	90                   	nop
c0017b0d:	83 c4 14             	add    esp,0x14
c0017b10:	5b                   	pop    ebx
c0017b11:	5e                   	pop    esi
c0017b12:	c3                   	ret    
c0017b13:	90                   	nop

c0017b14 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017b14:	b8 00 00 00 00       	mov    eax,0x0
c0017b19:	c3                   	ret    

c0017b1a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017b1a:	83 ec 1c             	sub    esp,0x1c
c0017b1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b21:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017b24:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017b28:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0017b2d:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017b32:	83 ec 08             	sub    esp,0x8
c0017b35:	52                   	push   edx
c0017b36:	50                   	push   eax
c0017b37:	e8 12 71 ff ff       	call   c000ec4e <Computer::readCMOS(unsigned char)>
c0017b3c:	83 c4 10             	add    esp,0x10
c0017b3f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017b43:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0017b48:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017b4d:	83 ec 04             	sub    esp,0x4
c0017b50:	6a 01                	push   0x1
c0017b52:	52                   	push   edx
c0017b53:	50                   	push   eax
c0017b54:	e8 0b 72 ff ff       	call   c000ed64 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b59:	83 c4 10             	add    esp,0x10
c0017b5c:	90                   	nop
c0017b5d:	83 c4 1c             	add    esp,0x1c
c0017b60:	c3                   	ret    
c0017b61:	90                   	nop

c0017b62 <ACPI::open(int, int, void*)>:
c0017b62:	53                   	push   ebx
c0017b63:	83 ec 28             	sub    esp,0x28
c0017b66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b6a:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0017b71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b75:	c6 80 65 22 00 00 00 	mov    BYTE PTR [eax+0x2265],0x0
c0017b7c:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0017b81:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b87:	83 e0 04             	and    eax,0x4
c0017b8a:	84 c0                	test   al,al
c0017b8c:	74 47                	je     c0017bd5 <ACPI::open(int, int, void*)+0x73>
c0017b8e:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0017b93:	83 ec 08             	sub    esp,0x8
c0017b96:	68 54 a0 02 c0       	push   0xc002a054
c0017b9b:	50                   	push   eax
c0017b9c:	e8 ff f7 ff ff       	call   c00173a0 <findDataTable(unsigned char*, char*)>
c0017ba1:	83 c4 10             	add    esp,0x10
c0017ba4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ba8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017bad:	74 26                	je     c0017bd5 <ACPI::open(int, int, void*)+0x73>
c0017baf:	83 ec 0c             	sub    esp,0xc
c0017bb2:	68 59 a0 02 c0       	push   0xc002a059
c0017bb7:	e8 1f ad ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0017bbc:	83 c4 10             	add    esp,0x10
c0017bbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bc3:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017bca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bce:	c6 80 65 22 00 00 01 	mov    BYTE PTR [eax+0x2265],0x1
c0017bd5:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0017bdd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017be1:	8a 00                	mov    al,BYTE PTR [eax]
c0017be3:	3c 01                	cmp    al,0x1
c0017be5:	75 28                	jne    c0017c0f <ACPI::open(int, int, void*)+0xad>
c0017be7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017beb:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017bf2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bf6:	c6 80 65 22 00 00 01 	mov    BYTE PTR [eax+0x2265],0x1
c0017bfd:	83 ec 0c             	sub    esp,0xc
c0017c00:	68 6a a0 02 c0       	push   0xc002a06a
c0017c05:	e8 d1 ac ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0017c0a:	83 c4 10             	add    esp,0x10
c0017c0d:	eb 25                	jmp    c0017c34 <ACPI::open(int, int, void*)+0xd2>
c0017c0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c13:	8a 00                	mov    al,BYTE PTR [eax]
c0017c15:	3c 02                	cmp    al,0x2
c0017c17:	75 1b                	jne    c0017c34 <ACPI::open(int, int, void*)+0xd2>
c0017c19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c1d:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017c24:	83 ec 0c             	sub    esp,0xc
c0017c27:	68 72 a0 02 c0       	push   0xc002a072
c0017c2c:	e8 aa ac ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0017c31:	83 c4 10             	add    esp,0x10
c0017c34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c38:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0017c3e:	83 f0 01             	xor    eax,0x1
c0017c41:	84 c0                	test   al,al
c0017c43:	74 6a                	je     c0017caf <ACPI::open(int, int, void*)+0x14d>
c0017c45:	83 ec 0c             	sub    esp,0xc
c0017c48:	68 7a a0 02 c0       	push   0xc002a07a
c0017c4d:	e8 89 ac ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0017c52:	83 c4 10             	add    esp,0x10
c0017c55:	e8 f6 84 fe ff       	call   c0000150 <manualPCIProbe>
c0017c5a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017c5e:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0017c63:	75 28                	jne    c0017c8d <ACPI::open(int, int, void*)+0x12b>
c0017c65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c69:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017c70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c74:	c6 80 65 22 00 00 01 	mov    BYTE PTR [eax+0x2265],0x1
c0017c7b:	83 ec 0c             	sub    esp,0xc
c0017c7e:	68 88 a0 02 c0       	push   0xc002a088
c0017c83:	e8 53 ac ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0017c88:	83 c4 10             	add    esp,0x10
c0017c8b:	eb 22                	jmp    c0017caf <ACPI::open(int, int, void*)+0x14d>
c0017c8d:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0017c92:	75 1b                	jne    c0017caf <ACPI::open(int, int, void*)+0x14d>
c0017c94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c98:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017c9f:	83 ec 0c             	sub    esp,0xc
c0017ca2:	68 92 a0 02 c0       	push   0xc002a092
c0017ca7:	e8 2f ac ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0017cac:	83 c4 10             	add    esp,0x10
c0017caf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cb3:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0017cb9:	84 c0                	test   al,al
c0017cbb:	74 13                	je     c0017cd0 <ACPI::open(int, int, void*)+0x16e>
c0017cbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cc1:	8a 80 65 22 00 00    	mov    al,BYTE PTR [eax+0x2265]
c0017cc7:	83 f0 01             	xor    eax,0x1
c0017cca:	0f b6 c0             	movzx  eax,al
c0017ccd:	40                   	inc    eax
c0017cce:	eb 05                	jmp    c0017cd5 <ACPI::open(int, int, void*)+0x173>
c0017cd0:	b8 00 00 00 00       	mov    eax,0x0
c0017cd5:	83 ec 08             	sub    esp,0x8
c0017cd8:	50                   	push   eax
c0017cd9:	68 9c a0 02 c0       	push   0xc002a09c
c0017cde:	e8 f8 ab ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0017ce3:	83 c4 10             	add    esp,0x10
c0017ce6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cea:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0017cf0:	84 c0                	test   al,al
c0017cf2:	74 67                	je     c0017d5b <ACPI::open(int, int, void*)+0x1f9>
c0017cf4:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0017cfc:	83 ec 0c             	sub    esp,0xc
c0017cff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d03:	e8 2e 79 ff ff       	call   c000f636 <malloc>
c0017d08:	83 c4 10             	add    esp,0x10
c0017d0b:	89 c3                	mov    ebx,eax
c0017d0d:	83 ec 0c             	sub    esp,0xc
c0017d10:	53                   	push   ebx
c0017d11:	e8 48 9f 00 00       	call   c0021c5e <PCI::PCI()>
c0017d16:	83 c4 10             	add    esp,0x10
c0017d19:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017d1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d21:	83 ec 08             	sub    esp,0x8
c0017d24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d28:	50                   	push   eax
c0017d29:	e8 d4 bf ff ff       	call   c0013d02 <Device::addChild(Device*)>
c0017d2e:	83 c4 10             	add    esp,0x10
c0017d31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d35:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d37:	83 c0 08             	add    eax,0x8
c0017d3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d3c:	6a 00                	push   0x0
c0017d3e:	6a 00                	push   0x0
c0017d40:	6a 00                	push   0x0
c0017d42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d46:	ff d0                	call   eax
c0017d48:	83 c4 10             	add    esp,0x10
c0017d4b:	83 ec 0c             	sub    esp,0xc
c0017d4e:	68 a5 a0 02 c0       	push   0xc002a0a5
c0017d53:	e8 83 ab ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0017d58:	83 c4 10             	add    esp,0x10
c0017d5b:	83 ec 0c             	sub    esp,0xc
c0017d5e:	68 b0 a0 02 c0       	push   0xc002a0b0
c0017d63:	e8 24 43 00 00       	call   c001c08c <Thr::loadKernelSymbolTable(char const*)>
c0017d68:	83 c4 10             	add    esp,0x10
c0017d6b:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0017d70:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d76:	83 e0 04             	and    eax,0x4
c0017d79:	84 c0                	test   al,al
c0017d7b:	0f 84 d5 00 00 00    	je     c0017e56 <ACPI::open(int, int, void*)+0x2f4>
c0017d81:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017d88:	83 ec 0c             	sub    esp,0xc
c0017d8b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d8f:	e8 a2 78 ff ff       	call   c000f636 <malloc>
c0017d94:	83 c4 10             	add    esp,0x10
c0017d97:	89 c3                	mov    ebx,eax
c0017d99:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0017d9e:	83 ec 04             	sub    esp,0x4
c0017da1:	50                   	push   eax
c0017da2:	68 ce a0 02 c0       	push   0xc002a0ce
c0017da7:	53                   	push   ebx
c0017da8:	e8 87 b0 ff ff       	call   c0012e34 <File::File(char const*, Process*)>
c0017dad:	83 c4 10             	add    esp,0x10
c0017db0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017db4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017db9:	74 17                	je     c0017dd2 <ACPI::open(int, int, void*)+0x270>
c0017dbb:	83 ec 0c             	sub    esp,0xc
c0017dbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017dc2:	e8 3f b3 ff ff       	call   c0013106 <File::exists()>
c0017dc7:	83 c4 10             	add    esp,0x10
c0017dca:	84 c0                	test   al,al
c0017dcc:	74 04                	je     c0017dd2 <ACPI::open(int, int, void*)+0x270>
c0017dce:	b0 01                	mov    al,0x1
c0017dd0:	eb 02                	jmp    c0017dd4 <ACPI::open(int, int, void*)+0x272>
c0017dd2:	b0 00                	mov    al,0x0
c0017dd4:	84 c0                	test   al,al
c0017dd6:	74 25                	je     c0017dfd <ACPI::open(int, int, void*)+0x29b>
c0017dd8:	8b 1d c8 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cec8
c0017dde:	83 ec 08             	sub    esp,0x8
c0017de1:	6a 01                	push   0x1
c0017de3:	68 ce a0 02 c0       	push   0xc002a0ce
c0017de8:	e8 fa 4c 00 00       	call   c001cae7 <Thr::loadDLL(char const*, bool)>
c0017ded:	83 c4 10             	add    esp,0x10
c0017df0:	83 ec 08             	sub    esp,0x8
c0017df3:	53                   	push   ebx
c0017df4:	50                   	push   eax
c0017df5:	e8 fc 4e 00 00       	call   c001ccf6 <Thr::executeDLL(unsigned long, void*)>
c0017dfa:	83 c4 10             	add    esp,0x10
c0017dfd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e02:	74 1e                	je     c0017e22 <ACPI::open(int, int, void*)+0x2c0>
c0017e04:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e09:	74 17                	je     c0017e22 <ACPI::open(int, int, void*)+0x2c0>
c0017e0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e11:	83 c0 08             	add    eax,0x8
c0017e14:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e16:	83 ec 0c             	sub    esp,0xc
c0017e19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e1d:	ff d0                	call   eax
c0017e1f:	83 c4 10             	add    esp,0x10
c0017e22:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0017e27:	83 ec 08             	sub    esp,0x8
c0017e2a:	68 eb a0 02 c0       	push   0xc002a0eb
c0017e2f:	50                   	push   eax
c0017e30:	e8 6b f5 ff ff       	call   c00173a0 <findDataTable(unsigned char*, char*)>
c0017e35:	83 c4 10             	add    esp,0x10
c0017e38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e3c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017e41:	74 13                	je     c0017e56 <ACPI::open(int, int, void*)+0x2f4>
c0017e43:	83 ec 08             	sub    esp,0x8
c0017e46:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e4a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017e4e:	e8 c7 fc ff ff       	call   c0017b1a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017e53:	83 c4 10             	add    esp,0x10
c0017e56:	8b 1d c8 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cec8
c0017e5c:	83 ec 08             	sub    esp,0x8
c0017e5f:	6a 01                	push   0x1
c0017e61:	68 f0 a0 02 c0       	push   0xc002a0f0
c0017e66:	e8 7c 4c 00 00       	call   c001cae7 <Thr::loadDLL(char const*, bool)>
c0017e6b:	83 c4 10             	add    esp,0x10
c0017e6e:	83 ec 08             	sub    esp,0x8
c0017e71:	53                   	push   ebx
c0017e72:	50                   	push   eax
c0017e73:	e8 7e 4e 00 00       	call   c001ccf6 <Thr::executeDLL(unsigned long, void*)>
c0017e78:	83 c4 10             	add    esp,0x10
c0017e7b:	8b 1d c8 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cec8
c0017e81:	83 ec 08             	sub    esp,0x8
c0017e84:	6a 01                	push   0x1
c0017e86:	68 0d a1 02 c0       	push   0xc002a10d
c0017e8b:	e8 57 4c 00 00       	call   c001cae7 <Thr::loadDLL(char const*, bool)>
c0017e90:	83 c4 10             	add    esp,0x10
c0017e93:	83 ec 08             	sub    esp,0x8
c0017e96:	53                   	push   ebx
c0017e97:	50                   	push   eax
c0017e98:	e8 59 4e 00 00       	call   c001ccf6 <Thr::executeDLL(unsigned long, void*)>
c0017e9d:	83 c4 10             	add    esp,0x10
c0017ea0:	b8 00 00 00 00       	mov    eax,0x0
c0017ea5:	83 c4 28             	add    esp,0x28
c0017ea8:	5b                   	pop    ebx
c0017ea9:	c3                   	ret    

c0017eaa <ACPI::sleep()>:
c0017eaa:	83 ec 0c             	sub    esp,0xc
c0017ead:	a1 60 d5 02 c0       	mov    eax,ds:0xc002d560
c0017eb2:	85 c0                	test   eax,eax
c0017eb4:	74 07                	je     c0017ebd <ACPI::sleep()+0x13>
c0017eb6:	a1 60 d5 02 c0       	mov    eax,ds:0xc002d560
c0017ebb:	ff d0                	call   eax
c0017ebd:	90                   	nop
c0017ebe:	83 c4 0c             	add    esp,0xc
c0017ec1:	c3                   	ret    

c0017ec2 <CPU::close(int, int, void*)>:
c0017ec2:	31 c0                	xor    eax,eax
c0017ec4:	c3                   	ret    
c0017ec5:	90                   	nop

c0017ec6 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017ec6:	55                   	push   ebp
c0017ec7:	57                   	push   edi
c0017ec8:	56                   	push   esi
c0017ec9:	53                   	push   ebx
c0017eca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017ece:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ed2:	89 ce                	mov    esi,ecx
c0017ed4:	89 d5                	mov    ebp,edx
c0017ed6:	80 f9 04             	cmp    cl,0x4
c0017ed9:	75 28                	jne    c0017f03 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017edb:	8d 42 f9             	lea    eax,[edx-0x7]
c0017ede:	3c 03                	cmp    al,0x3
c0017ee0:	0f 86 63 01 00 00    	jbe    c0018049 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017ee6:	80 fa 03             	cmp    dl,0x3
c0017ee9:	0f 84 5a 01 00 00    	je     c0018049 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017eef:	8d 7a f2             	lea    edi,[edx-0xe]
c0017ef2:	b8 f0 c2 02 c0       	mov    eax,0xc002c2f0
c0017ef7:	89 fb                	mov    ebx,edi
c0017ef9:	80 fb 01             	cmp    bl,0x1
c0017efc:	77 4e                	ja     c0017f4c <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017efe:	e9 52 01 00 00       	jmp    c0018055 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f03:	80 f9 05             	cmp    cl,0x5
c0017f06:	75 4d                	jne    c0017f55 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017f08:	b8 00 c3 02 c0       	mov    eax,0xc002c300
c0017f0d:	80 fa 03             	cmp    dl,0x3
c0017f10:	0f 86 3f 01 00 00    	jbe    c0018055 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f16:	8d 7a fa             	lea    edi,[edx-0x6]
c0017f19:	b8 10 c3 02 c0       	mov    eax,0xc002c310
c0017f1e:	89 fb                	mov    ebx,edi
c0017f20:	80 fb 01             	cmp    bl,0x1
c0017f23:	0f 86 2c 01 00 00    	jbe    c0018055 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f29:	b8 20 c3 02 c0       	mov    eax,0xc002c320
c0017f2e:	80 fa 08             	cmp    dl,0x8
c0017f31:	0f 84 1e 01 00 00    	je     c0018055 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f37:	89 d7                	mov    edi,edx
c0017f39:	b8 30 c3 02 c0       	mov    eax,0xc002c330
c0017f3e:	83 e7 fb             	and    edi,0xfffffffb
c0017f41:	89 fb                	mov    ebx,edi
c0017f43:	80 fb 09             	cmp    bl,0x9
c0017f46:	0f 84 09 01 00 00    	je     c0018055 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f4c:	31 c0                	xor    eax,eax
c0017f4e:	89 eb                	mov    ebx,ebp
c0017f50:	0f b6 fb             	movzx  edi,bl
c0017f53:	eb 30                	jmp    c0017f85 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017f55:	31 c0                	xor    eax,eax
c0017f57:	80 f9 06             	cmp    cl,0x6
c0017f5a:	75 f2                	jne    c0017f4e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017f5c:	80 fa 0a             	cmp    dl,0xa
c0017f5f:	77 ed                	ja     c0017f4e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017f61:	bf de 05 00 00       	mov    edi,0x5de
c0017f66:	0f a3 d7             	bt     edi,edx
c0017f69:	73 e3                	jae    c0017f4e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017f6b:	b8 40 c3 02 c0       	mov    eax,0xc002c340
c0017f70:	e9 e0 00 00 00       	jmp    c0018055 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f75:	39 c7                	cmp    edi,eax
c0017f77:	0f 84 d3 00 00 00    	je     c0018050 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017f7d:	40                   	inc    eax
c0017f7e:	3d d0 00 00 00       	cmp    eax,0xd0
c0017f83:	74 09                	je     c0017f8e <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017f85:	89 f3                	mov    ebx,esi
c0017f87:	80 fb 0f             	cmp    bl,0xf
c0017f8a:	75 f1                	jne    c0017f7d <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017f8c:	eb e7                	jmp    c0017f75 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017f8e:	80 f9 10             	cmp    cl,0x10
c0017f91:	75 14                	jne    c0017fa7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017f93:	8d 42 fc             	lea    eax,[edx-0x4]
c0017f96:	83 e0 fb             	and    eax,0xfffffffb
c0017f99:	3c 02                	cmp    al,0x2
c0017f9b:	76 34                	jbe    c0017fd1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017f9d:	b8 6e a5 02 c0       	mov    eax,0xc002a56e
c0017fa2:	80 fa 02             	cmp    dl,0x2
c0017fa5:	eb 24                	jmp    c0017fcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017fa7:	80 f9 11             	cmp    cl,0x11
c0017faa:	75 13                	jne    c0017fbf <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017fac:	b8 6e a5 02 c0       	mov    eax,0xc002a56e
c0017fb1:	80 fa 03             	cmp    dl,0x3
c0017fb4:	0f 85 9b 00 00 00    	jne    c0018055 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017fba:	e9 91 00 00 00       	jmp    c0018050 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017fbf:	80 f9 12             	cmp    cl,0x12
c0017fc2:	75 14                	jne    c0017fd8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017fc4:	b8 6e a5 02 c0       	mov    eax,0xc002a56e
c0017fc9:	fe ca                	dec    dl
c0017fcb:	0f 85 84 00 00 00    	jne    c0018055 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017fd1:	b8 60 c3 02 c0       	mov    eax,0xc002c360
c0017fd6:	eb 7d                	jmp    c0018055 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017fd8:	80 f9 14             	cmp    cl,0x14
c0017fdb:	75 12                	jne    c0017fef <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017fdd:	4a                   	dec    edx
c0017fde:	b8 6e a5 02 c0       	mov    eax,0xc002a56e
c0017fe3:	80 fa 01             	cmp    dl,0x1
c0017fe6:	77 6d                	ja     c0018055 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017fe8:	b8 70 c3 02 c0       	mov    eax,0xc002c370
c0017fed:	eb 66                	jmp    c0018055 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017fef:	80 f9 15             	cmp    cl,0x15
c0017ff2:	75 31                	jne    c0018025 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017ff4:	b8 80 c3 02 c0       	mov    eax,0xc002c380
c0017ff9:	80 fa 01             	cmp    dl,0x1
c0017ffc:	74 57                	je     c0018055 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ffe:	b8 6e a5 02 c0       	mov    eax,0xc002a56e
c0018003:	80 fa 13             	cmp    dl,0x13
c0018006:	76 0c                	jbe    c0018014 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018008:	80 fa 30             	cmp    dl,0x30
c001800b:	75 48                	jne    c0018055 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001800d:	b8 a0 c3 02 c0       	mov    eax,0xc002c3a0
c0018012:	eb 41                	jmp    c0018055 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018014:	b9 04 00 09 00       	mov    ecx,0x90004
c0018019:	0f a3 d1             	bt     ecx,edx
c001801c:	73 37                	jae    c0018055 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001801e:	b8 90 c3 02 c0       	mov    eax,0xc002c390
c0018023:	eb 30                	jmp    c0018055 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018025:	b8 6e a5 02 c0       	mov    eax,0xc002a56e
c001802a:	80 f9 16             	cmp    cl,0x16
c001802d:	75 26                	jne    c0018055 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001802f:	b8 b0 c3 02 c0       	mov    eax,0xc002c3b0
c0018034:	84 d2                	test   dl,dl
c0018036:	74 1d                	je     c0018055 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018038:	b8 6e a5 02 c0       	mov    eax,0xc002a56e
c001803d:	80 fa 30             	cmp    dl,0x30
c0018040:	75 13                	jne    c0018055 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018042:	b8 c0 c3 02 c0       	mov    eax,0xc002c3c0
c0018047:	eb 0c                	jmp    c0018055 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018049:	b8 e0 c2 02 c0       	mov    eax,0xc002c2e0
c001804e:	eb 05                	jmp    c0018055 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018050:	b8 50 c3 02 c0       	mov    eax,0xc002c350
c0018055:	5b                   	pop    ebx
c0018056:	5e                   	pop    esi
c0018057:	5f                   	pop    edi
c0018058:	5d                   	pop    ebp
c0018059:	c3                   	ret    

c001805a <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001805a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001805e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018062:	80 f9 04             	cmp    cl,0x4
c0018065:	75 6b                	jne    c00180d2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018067:	b8 40 c1 02 c0       	mov    eax,0xc002c140
c001806c:	80 fa 01             	cmp    dl,0x1
c001806f:	0f 86 92 02 00 00    	jbe    c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018075:	b8 50 c1 02 c0       	mov    eax,0xc002c150
c001807a:	80 fa 02             	cmp    dl,0x2
c001807d:	0f 84 84 02 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018083:	b8 60 c1 02 c0       	mov    eax,0xc002c160
c0018088:	80 fa 03             	cmp    dl,0x3
c001808b:	0f 84 76 02 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018091:	b8 70 c1 02 c0       	mov    eax,0xc002c170
c0018096:	80 fa 04             	cmp    dl,0x4
c0018099:	0f 84 68 02 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001809f:	b8 80 c1 02 c0       	mov    eax,0xc002c180
c00180a4:	80 fa 05             	cmp    dl,0x5
c00180a7:	0f 84 5a 02 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180ad:	b8 60 c1 02 c0       	mov    eax,0xc002c160
c00180b2:	80 fa 07             	cmp    dl,0x7
c00180b5:	0f 84 4c 02 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180bb:	83 ea 08             	sub    edx,0x8
c00180be:	b8 6e a5 02 c0       	mov    eax,0xc002a56e
c00180c3:	80 fa 01             	cmp    dl,0x1
c00180c6:	0f 87 3b 02 00 00    	ja     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180cc:	b8 90 c1 02 c0       	mov    eax,0xc002c190
c00180d1:	c3                   	ret    
c00180d2:	80 f9 05             	cmp    cl,0x5
c00180d5:	75 45                	jne    c001811c <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00180d7:	8d 4a ff             	lea    ecx,[edx-0x1]
c00180da:	b8 a0 c1 02 c0       	mov    eax,0xc002c1a0
c00180df:	80 f9 02             	cmp    cl,0x2
c00180e2:	0f 86 1f 02 00 00    	jbe    c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180e8:	80 fa 04             	cmp    dl,0x4
c00180eb:	0f 84 f3 01 00 00    	je     c00182e4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00180f1:	80 fa 07             	cmp    dl,0x7
c00180f4:	0f 84 0d 02 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180fa:	b8 b0 c1 02 c0       	mov    eax,0xc002c1b0
c00180ff:	80 fa 08             	cmp    dl,0x8
c0018102:	0f 84 ff 01 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018108:	b8 6e a5 02 c0       	mov    eax,0xc002a56e
c001810d:	80 fa 09             	cmp    dl,0x9
c0018110:	0f 85 f1 01 00 00    	jne    c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018116:	b8 c0 c1 02 c0       	mov    eax,0xc002c1c0
c001811b:	c3                   	ret    
c001811c:	80 f9 06             	cmp    cl,0x6
c001811f:	0f 85 85 01 00 00    	jne    c00182aa <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018125:	b8 d0 c1 02 c0       	mov    eax,0xc002c1d0
c001812a:	80 fa 01             	cmp    dl,0x1
c001812d:	0f 84 d4 01 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018133:	8d 42 fb             	lea    eax,[edx-0x5]
c0018136:	3c 01                	cmp    al,0x1
c0018138:	0f 86 ac 01 00 00    	jbe    c00182ea <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001813e:	80 fa 03             	cmp    dl,0x3
c0018141:	0f 84 a3 01 00 00    	je     c00182ea <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018147:	8d 4a f9             	lea    ecx,[edx-0x7]
c001814a:	b8 f0 c1 02 c0       	mov    eax,0xc002c1f0
c001814f:	80 f9 01             	cmp    cl,0x1
c0018152:	0f 86 af 01 00 00    	jbe    c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018158:	80 fa 09             	cmp    dl,0x9
c001815b:	0f 84 8f 01 00 00    	je     c00182f0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018161:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018164:	80 f9 01             	cmp    cl,0x1
c0018167:	0f 86 9a 01 00 00    	jbe    c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001816d:	b8 00 c2 02 c0       	mov    eax,0xc002c200
c0018172:	80 fa 0d             	cmp    dl,0xd
c0018175:	0f 84 8c 01 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001817b:	b8 10 c2 02 c0       	mov    eax,0xc002c210
c0018180:	80 fa 0e             	cmp    dl,0xe
c0018183:	0f 84 7e 01 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018189:	b8 20 c2 02 c0       	mov    eax,0xc002c220
c001818e:	80 fa 0f             	cmp    dl,0xf
c0018191:	0f 84 70 01 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018197:	b8 00 c2 02 c0       	mov    eax,0xc002c200
c001819c:	80 fa 15             	cmp    dl,0x15
c001819f:	0f 84 62 01 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181a5:	8d 4a ea             	lea    ecx,[edx-0x16]
c00181a8:	b8 20 c2 02 c0       	mov    eax,0xc002c220
c00181ad:	80 f9 01             	cmp    cl,0x1
c00181b0:	0f 86 51 01 00 00    	jbe    c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181b6:	80 fa 1a             	cmp    dl,0x1a
c00181b9:	0f 84 37 01 00 00    	je     c00182f6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00181bf:	80 fa 1c             	cmp    dl,0x1c
c00181c2:	0f 84 34 01 00 00    	je     c00182fc <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00181c8:	80 fa 1d             	cmp    dl,0x1d
c00181cb:	0f 84 36 01 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181d1:	b8 50 c2 02 c0       	mov    eax,0xc002c250
c00181d6:	80 fa 25             	cmp    dl,0x25
c00181d9:	0f 84 28 01 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181df:	8d 4a da             	lea    ecx,[edx-0x26]
c00181e2:	b8 40 c2 02 c0       	mov    eax,0xc002c240
c00181e7:	80 f9 01             	cmp    cl,0x1
c00181ea:	0f 86 17 01 00 00    	jbe    c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181f0:	b8 60 c2 02 c0       	mov    eax,0xc002c260
c00181f5:	80 fa 2a             	cmp    dl,0x2a
c00181f8:	0f 84 09 01 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181fe:	b8 50 c2 02 c0       	mov    eax,0xc002c250
c0018203:	80 fa 2c             	cmp    dl,0x2c
c0018206:	0f 84 fb 00 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001820c:	b8 60 c2 02 c0       	mov    eax,0xc002c260
c0018211:	80 fa 2d             	cmp    dl,0x2d
c0018214:	0f 84 ed 00 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001821a:	b8 30 c2 02 c0       	mov    eax,0xc002c230
c001821f:	80 fa 2e             	cmp    dl,0x2e
c0018222:	0f 84 df 00 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018228:	b8 50 c2 02 c0       	mov    eax,0xc002c250
c001822d:	80 fa 2f             	cmp    dl,0x2f
c0018230:	0f 84 d1 00 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018236:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018239:	b8 40 c2 02 c0       	mov    eax,0xc002c240
c001823e:	80 f9 01             	cmp    cl,0x1
c0018241:	0f 86 c0 00 00 00    	jbe    c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018247:	b8 70 c2 02 c0       	mov    eax,0xc002c270
c001824c:	80 fa 37             	cmp    dl,0x37
c001824f:	0f 84 b2 00 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018255:	b8 80 c2 02 c0       	mov    eax,0xc002c280
c001825a:	80 fa 3a             	cmp    dl,0x3a
c001825d:	0f 84 a4 00 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018263:	b8 90 c2 02 c0       	mov    eax,0xc002c290
c0018268:	80 fa 3c             	cmp    dl,0x3c
c001826b:	0f 84 96 00 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018271:	b8 a0 c2 02 c0       	mov    eax,0xc002c2a0
c0018276:	80 fa 3d             	cmp    dl,0x3d
c0018279:	0f 84 88 00 00 00    	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001827f:	b8 80 c2 02 c0       	mov    eax,0xc002c280
c0018284:	80 fa 3e             	cmp    dl,0x3e
c0018287:	74 7e                	je     c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018289:	8d 42 bb             	lea    eax,[edx-0x45]
c001828c:	3c 01                	cmp    al,0x1
c001828e:	76 72                	jbe    c0018302 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018290:	80 fa 3f             	cmp    dl,0x3f
c0018293:	74 6d                	je     c0018302 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018295:	80 fa 4a             	cmp    dl,0x4a
c0018298:	74 0a                	je     c00182a4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001829a:	b8 6e a5 02 c0       	mov    eax,0xc002a56e
c001829f:	80 fa 4d             	cmp    dl,0x4d
c00182a2:	75 63                	jne    c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182a4:	b8 70 c2 02 c0       	mov    eax,0xc002c270
c00182a9:	c3                   	ret    
c00182aa:	b8 6e a5 02 c0       	mov    eax,0xc002a56e
c00182af:	80 f9 0b             	cmp    cl,0xb
c00182b2:	75 0a                	jne    c00182be <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00182b4:	fe ca                	dec    dl
c00182b6:	75 4f                	jne    c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182b8:	b8 b0 c2 02 c0       	mov    eax,0xc002c2b0
c00182bd:	c3                   	ret    
c00182be:	80 f9 0f             	cmp    cl,0xf
c00182c1:	75 44                	jne    c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182c3:	b8 c0 c2 02 c0       	mov    eax,0xc002c2c0
c00182c8:	80 fa 02             	cmp    dl,0x2
c00182cb:	76 3a                	jbe    c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182cd:	8d 42 fd             	lea    eax,[edx-0x3]
c00182d0:	3c 01                	cmp    al,0x1
c00182d2:	76 0a                	jbe    c00182de <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00182d4:	b8 6e a5 02 c0       	mov    eax,0xc002a56e
c00182d9:	80 fa 06             	cmp    dl,0x6
c00182dc:	75 29                	jne    c0018307 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182de:	b8 d0 c2 02 c0       	mov    eax,0xc002c2d0
c00182e3:	c3                   	ret    
c00182e4:	b8 b0 c1 02 c0       	mov    eax,0xc002c1b0
c00182e9:	c3                   	ret    
c00182ea:	b8 e0 c1 02 c0       	mov    eax,0xc002c1e0
c00182ef:	c3                   	ret    
c00182f0:	b8 00 c2 02 c0       	mov    eax,0xc002c200
c00182f5:	c3                   	ret    
c00182f6:	b8 30 c2 02 c0       	mov    eax,0xc002c230
c00182fb:	c3                   	ret    
c00182fc:	b8 40 c2 02 c0       	mov    eax,0xc002c240
c0018301:	c3                   	ret    
c0018302:	b8 90 c2 02 c0       	mov    eax,0xc002c290
c0018307:	c3                   	ret    

c0018308 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018308:	60                   	pusha  
c0018309:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001830d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018311:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018315:	9c                   	pushf  
c0018316:	fa                   	cli    
c0018317:	0f 09                	wbinvd 
c0018319:	0f 30                	wrmsr  
c001831b:	9d                   	popf   
c001831c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018320:	89 02                	mov    DWORD PTR [edx],eax
c0018322:	61                   	popa   
c0018323:	c3                   	ret    

c0018324 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018324:	60                   	pusha  
c0018325:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018329:	9c                   	pushf  
c001832a:	fa                   	cli    
c001832b:	0f 09                	wbinvd 
c001832d:	31 c0                	xor    eax,eax
c001832f:	31 d2                	xor    edx,edx
c0018331:	0f 32                	rdmsr  
c0018333:	9d                   	popf   
c0018334:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018338:	89 02                	mov    DWORD PTR [edx],eax
c001833a:	61                   	popa   
c001833b:	c3                   	ret    

c001833c <CPU::AMD_K6_writeback(int, int, int)>:
c001833c:	56                   	push   esi
c001833d:	53                   	push   ebx
c001833e:	83 ec 10             	sub    esp,0x10
c0018341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018345:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001834a:	75 5d                	jne    c00183a9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001834c:	83 f8 08             	cmp    eax,0x8
c001834f:	75 09                	jne    c001835a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018351:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018356:	7e 13                	jle    c001836b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018358:	eb 30                	jmp    c001838a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001835a:	83 f8 06             	cmp    eax,0x6
c001835d:	7c 4a                	jl     c00183a9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001835f:	83 f8 07             	cmp    eax,0x7
c0018362:	7e 07                	jle    c001836b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018364:	83 f8 09             	cmp    eax,0x9
c0018367:	74 21                	je     c001838a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018369:	eb 3e                	jmp    c00183a9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001836b:	89 e6                	mov    esi,esp
c001836d:	8b 1d 04 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cf04
c0018373:	56                   	push   esi
c0018374:	c1 eb 15             	shr    ebx,0x15
c0018377:	68 82 00 00 c0       	push   0xc0000082
c001837c:	83 e3 7e             	and    ebx,0x7e
c001837f:	e8 a0 ff ff ff       	call   c0018324 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018384:	56                   	push   esi
c0018385:	6a 00                	push   0x0
c0018387:	53                   	push   ebx
c0018388:	eb 12                	jmp    c001839c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001838a:	89 e3                	mov    ebx,esp
c001838c:	53                   	push   ebx
c001838d:	68 82 00 00 c0       	push   0xc0000082
c0018392:	e8 8d ff ff ff       	call   c0018324 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018397:	53                   	push   ebx
c0018398:	6a 00                	push   0x0
c001839a:	6a 00                	push   0x0
c001839c:	68 82 00 00 c0       	push   0xc0000082
c00183a1:	e8 62 ff ff ff       	call   c0018308 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00183a6:	83 c4 18             	add    esp,0x18
c00183a9:	83 c4 10             	add    esp,0x10
c00183ac:	5b                   	pop    ebx
c00183ad:	5e                   	pop    esi
c00183ae:	c3                   	ret    
c00183af:	90                   	nop

c00183b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00183b0:	55                   	push   ebp
c00183b1:	57                   	push   edi
c00183b2:	56                   	push   esi
c00183b3:	53                   	push   ebx
c00183b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00183b8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00183bc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00183c0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00183c4:	39 05 e0 c3 02 c0    	cmp    DWORD PTR ds:0xc002c3e0,eax
c00183ca:	75 23                	jne    c00183ef <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00183cc:	a1 ec d9 02 c0       	mov    eax,ds:0xc002d9ec
c00183d1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183d5:	89 06                	mov    DWORD PTR [esi],eax
c00183d7:	a1 e8 d9 02 c0       	mov    eax,ds:0xc002d9e8
c00183dc:	89 07                	mov    DWORD PTR [edi],eax
c00183de:	a1 e4 d9 02 c0       	mov    eax,ds:0xc002d9e4
c00183e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00183e6:	a1 e0 d9 02 c0       	mov    eax,ds:0xc002d9e0
c00183eb:	89 02                	mov    DWORD PTR [edx],eax
c00183ed:	eb 3f                	jmp    c001842e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00183ef:	31 c9                	xor    ecx,ecx
c00183f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00183f5:	0f a2                	cpuid  
c00183f7:	89 06                	mov    DWORD PTR [esi],eax
c00183f9:	89 1f                	mov    DWORD PTR [edi],ebx
c00183fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00183ff:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018402:	89 10                	mov    DWORD PTR [eax],edx
c0018404:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018408:	a3 e0 c3 02 c0       	mov    ds:0xc002c3e0,eax
c001840d:	8b 06                	mov    eax,DWORD PTR [esi]
c001840f:	a3 ec d9 02 c0       	mov    ds:0xc002d9ec,eax
c0018414:	8b 07                	mov    eax,DWORD PTR [edi]
c0018416:	a3 e8 d9 02 c0       	mov    ds:0xc002d9e8,eax
c001841b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001841e:	a3 e4 d9 02 c0       	mov    ds:0xc002d9e4,eax
c0018423:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018427:	8b 00                	mov    eax,DWORD PTR [eax]
c0018429:	a3 e0 d9 02 c0       	mov    ds:0xc002d9e0,eax
c001842e:	5b                   	pop    ebx
c001842f:	5e                   	pop    esi
c0018430:	5f                   	pop    edi
c0018431:	5d                   	pop    ebp
c0018432:	c3                   	ret    
c0018433:	90                   	nop

c0018434 <CPU::cpuidCheckEDX(unsigned int)>:
c0018434:	83 ec 10             	sub    esp,0x10
c0018437:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001843b:	50                   	push   eax
c001843c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018440:	50                   	push   eax
c0018441:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018445:	50                   	push   eax
c0018446:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001844a:	50                   	push   eax
c001844b:	6a 01                	push   0x1
c001844d:	e8 5e ff ff ff       	call   c00183b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018452:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018456:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001845a:	0f 95 c0             	setne  al
c001845d:	83 c4 24             	add    esp,0x24
c0018460:	c3                   	ret    
c0018461:	90                   	nop

c0018462 <CPU::cpuidCheckECX(unsigned int)>:
c0018462:	83 ec 10             	sub    esp,0x10
c0018465:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018469:	50                   	push   eax
c001846a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001846e:	50                   	push   eax
c001846f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018473:	50                   	push   eax
c0018474:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018478:	50                   	push   eax
c0018479:	6a 01                	push   0x1
c001847b:	e8 30 ff ff ff       	call   c00183b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018484:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018488:	0f 95 c0             	setne  al
c001848b:	83 c4 24             	add    esp,0x24
c001848e:	c3                   	ret    
c001848f:	90                   	nop

c0018490 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018490:	83 ec 10             	sub    esp,0x10
c0018493:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018497:	50                   	push   eax
c0018498:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001849c:	50                   	push   eax
c001849d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184a1:	50                   	push   eax
c00184a2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184a6:	50                   	push   eax
c00184a7:	6a 07                	push   0x7
c00184a9:	e8 02 ff ff ff       	call   c00183b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00184ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00184b2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00184b6:	0f 95 c0             	setne  al
c00184b9:	83 c4 24             	add    esp,0x24
c00184bc:	c3                   	ret    
c00184bd:	90                   	nop

c00184be <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00184be:	83 ec 10             	sub    esp,0x10
c00184c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184c5:	50                   	push   eax
c00184c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184ca:	50                   	push   eax
c00184cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184cf:	50                   	push   eax
c00184d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184d4:	50                   	push   eax
c00184d5:	6a 07                	push   0x7
c00184d7:	e8 d4 fe ff ff       	call   c00183b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00184dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00184e0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00184e4:	0f 95 c0             	setne  al
c00184e7:	83 c4 24             	add    esp,0x24
c00184ea:	c3                   	ret    
c00184eb:	90                   	nop

c00184ec <CPU::CPU()>:
c00184ec:	83 ec 0c             	sub    esp,0xc
c00184ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184f3:	83 ec 08             	sub    esp,0x8
c00184f6:	68 6e a5 02 c0       	push   0xc002a56e
c00184fb:	50                   	push   eax
c00184fc:	e8 f1 b9 ff ff       	call   c0013ef2 <Device::Device(char const*)>
c0018501:	83 c4 10             	add    esp,0x10
c0018504:	ba 48 a6 02 c0       	mov    edx,0xc002a648
c0018509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001850d:	89 10                	mov    DWORD PTR [eax],edx
c001850f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018513:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001851d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018521:	05 78 01 00 00       	add    eax,0x178
c0018526:	83 ec 0c             	sub    esp,0xc
c0018529:	50                   	push   eax
c001852a:	e8 1f 69 ff ff       	call   c000ee4e <GDT::GDT()>
c001852f:	83 c4 10             	add    esp,0x10
c0018532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018536:	05 7c 09 00 00       	add    eax,0x97c
c001853b:	83 ec 0c             	sub    esp,0xc
c001853e:	50                   	push   eax
c001853f:	e8 6c 6b ff ff       	call   c000f0b0 <IDT::IDT()>
c0018544:	83 c4 10             	add    esp,0x10
c0018547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001854b:	05 7c 11 00 00       	add    eax,0x117c
c0018550:	83 ec 0c             	sub    esp,0xc
c0018553:	50                   	push   eax
c0018554:	e8 c3 8c ff ff       	call   c001121c <TSS::TSS()>
c0018559:	83 c4 10             	add    esp,0x10
c001855c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018560:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001856b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018575:	90                   	nop
c0018576:	83 c4 0c             	add    esp,0xc
c0018579:	c3                   	ret    

c001857a <CPU::displayFeatures()>:
c001857a:	53                   	push   ebx
c001857b:	83 ec 10             	sub    esp,0x10
c001857e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018582:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018588:	68 7c a2 02 c0       	push   0xc002a27c
c001858d:	e8 49 a3 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0018592:	59                   	pop    ecx
c0018593:	58                   	pop    eax
c0018594:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001859a:	50                   	push   eax
c001859b:	68 8d a2 02 c0       	push   0xc002a28d
c00185a0:	e8 36 a3 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00185a5:	58                   	pop    eax
c00185a6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00185ac:	5a                   	pop    edx
c00185ad:	c1 e8 0e             	shr    eax,0xe
c00185b0:	0f b6 c0             	movzx  eax,al
c00185b3:	50                   	push   eax
c00185b4:	68 9e a2 02 c0       	push   0xc002a29e
c00185b9:	e8 1d a3 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00185be:	59                   	pop    ecx
c00185bf:	58                   	pop    eax
c00185c0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00185c6:	66 c1 e8 06          	shr    ax,0x6
c00185ca:	0f b6 c0             	movzx  eax,al
c00185cd:	50                   	push   eax
c00185ce:	68 af a2 02 c0       	push   0xc002a2af
c00185d3:	e8 03 a3 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00185d8:	c7 04 24 4b a7 02 c0 	mov    DWORD PTR [esp],0xc002a74b
c00185df:	e8 f7 a2 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00185e4:	83 c4 10             	add    esp,0x10
c00185e7:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c00185ec:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00185f3:	74 05                	je     c00185fa <CPU::displayFeatures()+0x80>
c00185f5:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c00185fa:	52                   	push   edx
c00185fb:	52                   	push   edx
c00185fc:	50                   	push   eax
c00185fd:	68 c0 a2 02 c0       	push   0xc002a2c0
c0018602:	e8 d4 a2 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0018607:	83 c4 10             	add    esp,0x10
c001860a:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c001860f:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018616:	78 05                	js     c001861d <CPU::displayFeatures()+0xa3>
c0018618:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c001861d:	51                   	push   ecx
c001861e:	51                   	push   ecx
c001861f:	50                   	push   eax
c0018620:	68 d7 a2 02 c0       	push   0xc002a2d7
c0018625:	e8 b1 a2 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001862a:	83 c4 10             	add    esp,0x10
c001862d:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c0018632:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018639:	75 05                	jne    c0018640 <CPU::displayFeatures()+0xc6>
c001863b:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c0018640:	52                   	push   edx
c0018641:	52                   	push   edx
c0018642:	50                   	push   eax
c0018643:	68 ee a2 02 c0       	push   0xc002a2ee
c0018648:	e8 8e a2 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001864d:	83 c4 10             	add    esp,0x10
c0018650:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c0018655:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001865c:	75 05                	jne    c0018663 <CPU::displayFeatures()+0xe9>
c001865e:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c0018663:	51                   	push   ecx
c0018664:	51                   	push   ecx
c0018665:	50                   	push   eax
c0018666:	68 05 a3 02 c0       	push   0xc002a305
c001866b:	e8 6b a2 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0018670:	83 c4 10             	add    esp,0x10
c0018673:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c0018678:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001867f:	75 05                	jne    c0018686 <CPU::displayFeatures()+0x10c>
c0018681:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c0018686:	52                   	push   edx
c0018687:	52                   	push   edx
c0018688:	50                   	push   eax
c0018689:	68 1c a3 02 c0       	push   0xc002a31c
c001868e:	e8 48 a2 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0018693:	83 c4 10             	add    esp,0x10
c0018696:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c001869b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00186a2:	75 05                	jne    c00186a9 <CPU::displayFeatures()+0x12f>
c00186a4:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c00186a9:	51                   	push   ecx
c00186aa:	51                   	push   ecx
c00186ab:	50                   	push   eax
c00186ac:	68 33 a3 02 c0       	push   0xc002a333
c00186b1:	e8 25 a2 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00186b6:	83 c4 10             	add    esp,0x10
c00186b9:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c00186be:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00186c5:	75 05                	jne    c00186cc <CPU::displayFeatures()+0x152>
c00186c7:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c00186cc:	52                   	push   edx
c00186cd:	52                   	push   edx
c00186ce:	50                   	push   eax
c00186cf:	68 4a a3 02 c0       	push   0xc002a34a
c00186d4:	e8 02 a2 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00186d9:	83 c4 10             	add    esp,0x10
c00186dc:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c00186e1:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00186e8:	75 05                	jne    c00186ef <CPU::displayFeatures()+0x175>
c00186ea:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c00186ef:	51                   	push   ecx
c00186f0:	51                   	push   ecx
c00186f1:	50                   	push   eax
c00186f2:	68 61 a3 02 c0       	push   0xc002a361
c00186f7:	e8 df a1 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00186fc:	83 c4 10             	add    esp,0x10
c00186ff:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c0018704:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001870b:	75 05                	jne    c0018712 <CPU::displayFeatures()+0x198>
c001870d:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c0018712:	52                   	push   edx
c0018713:	52                   	push   edx
c0018714:	50                   	push   eax
c0018715:	68 78 a3 02 c0       	push   0xc002a378
c001871a:	e8 bc a1 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001871f:	83 c4 10             	add    esp,0x10
c0018722:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c0018727:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001872e:	75 05                	jne    c0018735 <CPU::displayFeatures()+0x1bb>
c0018730:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c0018735:	51                   	push   ecx
c0018736:	51                   	push   ecx
c0018737:	50                   	push   eax
c0018738:	68 8f a3 02 c0       	push   0xc002a38f
c001873d:	e8 99 a1 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0018742:	83 c4 10             	add    esp,0x10
c0018745:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c001874a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018751:	75 05                	jne    c0018758 <CPU::displayFeatures()+0x1de>
c0018753:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c0018758:	52                   	push   edx
c0018759:	52                   	push   edx
c001875a:	50                   	push   eax
c001875b:	68 a6 a3 02 c0       	push   0xc002a3a6
c0018760:	e8 76 a1 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0018765:	83 c4 10             	add    esp,0x10
c0018768:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c001876d:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018774:	75 05                	jne    c001877b <CPU::displayFeatures()+0x201>
c0018776:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c001877b:	51                   	push   ecx
c001877c:	51                   	push   ecx
c001877d:	50                   	push   eax
c001877e:	68 bd a3 02 c0       	push   0xc002a3bd
c0018783:	e8 53 a1 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0018788:	83 c4 10             	add    esp,0x10
c001878b:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c0018790:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018797:	75 05                	jne    c001879e <CPU::displayFeatures()+0x224>
c0018799:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c001879e:	52                   	push   edx
c001879f:	52                   	push   edx
c00187a0:	50                   	push   eax
c00187a1:	68 d4 a3 02 c0       	push   0xc002a3d4
c00187a6:	e8 30 a1 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00187ab:	83 c4 10             	add    esp,0x10
c00187ae:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c00187b3:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00187ba:	78 05                	js     c00187c1 <CPU::displayFeatures()+0x247>
c00187bc:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c00187c1:	51                   	push   ecx
c00187c2:	51                   	push   ecx
c00187c3:	50                   	push   eax
c00187c4:	68 eb a3 02 c0       	push   0xc002a3eb
c00187c9:	e8 0d a1 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00187ce:	83 c4 10             	add    esp,0x10
c00187d1:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c00187d6:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00187dd:	75 05                	jne    c00187e4 <CPU::displayFeatures()+0x26a>
c00187df:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c00187e4:	52                   	push   edx
c00187e5:	52                   	push   edx
c00187e6:	50                   	push   eax
c00187e7:	68 02 a4 02 c0       	push   0xc002a402
c00187ec:	e8 ea a0 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00187f1:	83 c4 18             	add    esp,0x18
c00187f4:	5b                   	pop    ebx
c00187f5:	c3                   	ret    

c00187f6 <CPU::detectFeatures()>:
c00187f6:	55                   	push   ebp
c00187f7:	57                   	push   edi
c00187f8:	56                   	push   esi
c00187f9:	53                   	push   ebx
c00187fa:	83 ec 50             	sub    esp,0x50
c00187fd:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018801:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001880b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018812:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018818:	6a 0d                	push   0xd
c001881a:	6a 00                	push   0x0
c001881c:	57                   	push   edi
c001881d:	e8 b4 7e fe ff       	call   c00006d6 <memset>
c0018822:	83 c4 10             	add    esp,0x10
c0018825:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c001882a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018831:	0f 84 20 09 00 00    	je     c0019157 <CPU::detectFeatures()+0x961>
c0018837:	83 ec 0c             	sub    esp,0xc
c001883a:	6a 10                	push   0x10
c001883c:	e8 f3 fb ff ff       	call   c0018434 <CPU::cpuidCheckEDX(unsigned int)>
c0018841:	83 e0 01             	and    eax,0x1
c0018844:	8d 14 00             	lea    edx,[eax+eax*1]
c0018847:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001884d:	83 e0 fd             	and    eax,0xfffffffd
c0018850:	09 d0                	or     eax,edx
c0018852:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018858:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001885f:	e8 d0 fb ff ff       	call   c0018434 <CPU::cpuidCheckEDX(unsigned int)>
c0018864:	83 e0 01             	and    eax,0x1
c0018867:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001886e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018874:	83 e0 fb             	and    eax,0xfffffffb
c0018877:	09 d0                	or     eax,edx
c0018879:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001887f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018886:	e8 a9 fb ff ff       	call   c0018434 <CPU::cpuidCheckEDX(unsigned int)>
c001888b:	83 e0 01             	and    eax,0x1
c001888e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018895:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001889b:	83 e0 f7             	and    eax,0xfffffff7
c001889e:	09 d0                	or     eax,edx
c00188a0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188a6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00188ad:	e8 82 fb ff ff       	call   c0018434 <CPU::cpuidCheckEDX(unsigned int)>
c00188b2:	83 e0 01             	and    eax,0x1
c00188b5:	c1 e0 04             	shl    eax,0x4
c00188b8:	88 c2                	mov    dl,al
c00188ba:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188c0:	83 e0 ef             	and    eax,0xffffffef
c00188c3:	09 d0                	or     eax,edx
c00188c5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188cb:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00188d2:	e8 5d fb ff ff       	call   c0018434 <CPU::cpuidCheckEDX(unsigned int)>
c00188d7:	83 e0 01             	and    eax,0x1
c00188da:	c1 e0 05             	shl    eax,0x5
c00188dd:	88 c2                	mov    dl,al
c00188df:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188e5:	83 e0 df             	and    eax,0xffffffdf
c00188e8:	09 d0                	or     eax,edx
c00188ea:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188f0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00188f7:	e8 38 fb ff ff       	call   c0018434 <CPU::cpuidCheckEDX(unsigned int)>
c00188fc:	83 e0 01             	and    eax,0x1
c00188ff:	8d 14 00             	lea    edx,[eax+eax*1]
c0018902:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018908:	83 e0 fd             	and    eax,0xfffffffd
c001890b:	09 d0                	or     eax,edx
c001890d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018913:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001891a:	e8 15 fb ff ff       	call   c0018434 <CPU::cpuidCheckEDX(unsigned int)>
c001891f:	83 e0 01             	and    eax,0x1
c0018922:	c1 e0 06             	shl    eax,0x6
c0018925:	88 c2                	mov    dl,al
c0018927:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001892d:	83 e0 bf             	and    eax,0xffffffbf
c0018930:	09 d0                	or     eax,edx
c0018932:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018938:	58                   	pop    eax
c0018939:	8d 74 24 28          	lea    esi,[esp+0x28]
c001893d:	56                   	push   esi
c001893e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018942:	55                   	push   ebp
c0018943:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018947:	50                   	push   eax
c0018948:	8d 54 24 28          	lea    edx,[esp+0x28]
c001894c:	52                   	push   edx
c001894d:	6a 00                	push   0x0
c001894f:	e8 5c fa ff ff       	call   c00183b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018954:	83 c4 1c             	add    esp,0x1c
c0018957:	6a 04                	push   0x4
c0018959:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001895d:	50                   	push   eax
c001895e:	57                   	push   edi
c001895f:	e8 3c 7d fe ff       	call   c00006a0 <memcpy>
c0018964:	83 c4 0c             	add    esp,0xc
c0018967:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001896d:	6a 04                	push   0x4
c001896f:	56                   	push   esi
c0018970:	50                   	push   eax
c0018971:	e8 2a 7d fe ff       	call   c00006a0 <memcpy>
c0018976:	83 c4 0c             	add    esp,0xc
c0018979:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001897f:	6a 04                	push   0x4
c0018981:	55                   	push   ebp
c0018982:	50                   	push   eax
c0018983:	e8 18 7d fe ff       	call   c00006a0 <memcpy>
c0018988:	58                   	pop    eax
c0018989:	5a                   	pop    edx
c001898a:	68 19 a4 02 c0       	push   0xc002a419
c001898f:	57                   	push   edi
c0018990:	e8 31 7e fe ff       	call   c00007c6 <strcmp>
c0018995:	83 c4 10             	add    esp,0x10
c0018998:	85 c0                	test   eax,eax
c001899a:	75 0f                	jne    c00189ab <CPU::detectFeatures()+0x1b5>
c001899c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00189a6:	e9 22 02 00 00       	jmp    c0018bcd <CPU::detectFeatures()+0x3d7>
c00189ab:	50                   	push   eax
c00189ac:	50                   	push   eax
c00189ad:	68 26 a4 02 c0       	push   0xc002a426
c00189b2:	57                   	push   edi
c00189b3:	e8 0e 7e fe ff       	call   c00007c6 <strcmp>
c00189b8:	83 c4 10             	add    esp,0x10
c00189bb:	85 c0                	test   eax,eax
c00189bd:	74 dd                	je     c001899c <CPU::detectFeatures()+0x1a6>
c00189bf:	51                   	push   ecx
c00189c0:	51                   	push   ecx
c00189c1:	68 33 a4 02 c0       	push   0xc002a433
c00189c6:	57                   	push   edi
c00189c7:	e8 fa 7d fe ff       	call   c00007c6 <strcmp>
c00189cc:	83 c4 10             	add    esp,0x10
c00189cf:	85 c0                	test   eax,eax
c00189d1:	74 2a                	je     c00189fd <CPU::detectFeatures()+0x207>
c00189d3:	52                   	push   edx
c00189d4:	52                   	push   edx
c00189d5:	68 40 a4 02 c0       	push   0xc002a440
c00189da:	57                   	push   edi
c00189db:	e8 e6 7d fe ff       	call   c00007c6 <strcmp>
c00189e0:	83 c4 10             	add    esp,0x10
c00189e3:	85 c0                	test   eax,eax
c00189e5:	74 16                	je     c00189fd <CPU::detectFeatures()+0x207>
c00189e7:	50                   	push   eax
c00189e8:	50                   	push   eax
c00189e9:	68 4d a4 02 c0       	push   0xc002a44d
c00189ee:	57                   	push   edi
c00189ef:	e8 d2 7d fe ff       	call   c00007c6 <strcmp>
c00189f4:	83 c4 10             	add    esp,0x10
c00189f7:	85 c0                	test   eax,eax
c00189f9:	74 48                	je     c0018a43 <CPU::detectFeatures()+0x24d>
c00189fb:	eb 0f                	jmp    c0018a0c <CPU::detectFeatures()+0x216>
c00189fd:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018a07:	e9 c1 01 00 00       	jmp    c0018bcd <CPU::detectFeatures()+0x3d7>
c0018a0c:	50                   	push   eax
c0018a0d:	50                   	push   eax
c0018a0e:	68 5a a4 02 c0       	push   0xc002a45a
c0018a13:	57                   	push   edi
c0018a14:	e8 ad 7d fe ff       	call   c00007c6 <strcmp>
c0018a19:	83 c4 10             	add    esp,0x10
c0018a1c:	85 c0                	test   eax,eax
c0018a1e:	74 23                	je     c0018a43 <CPU::detectFeatures()+0x24d>
c0018a20:	50                   	push   eax
c0018a21:	50                   	push   eax
c0018a22:	68 67 a4 02 c0       	push   0xc002a467
c0018a27:	57                   	push   edi
c0018a28:	e8 99 7d fe ff       	call   c00007c6 <strcmp>
c0018a2d:	83 c4 10             	add    esp,0x10
c0018a30:	85 c0                	test   eax,eax
c0018a32:	75 1e                	jne    c0018a52 <CPU::detectFeatures()+0x25c>
c0018a34:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018a3e:	e9 8a 01 00 00       	jmp    c0018bcd <CPU::detectFeatures()+0x3d7>
c0018a43:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018a4d:	e9 7b 01 00 00       	jmp    c0018bcd <CPU::detectFeatures()+0x3d7>
c0018a52:	50                   	push   eax
c0018a53:	50                   	push   eax
c0018a54:	68 74 a4 02 c0       	push   0xc002a474
c0018a59:	57                   	push   edi
c0018a5a:	e8 67 7d fe ff       	call   c00007c6 <strcmp>
c0018a5f:	83 c4 10             	add    esp,0x10
c0018a62:	85 c0                	test   eax,eax
c0018a64:	75 0f                	jne    c0018a75 <CPU::detectFeatures()+0x27f>
c0018a66:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018a70:	e9 58 01 00 00       	jmp    c0018bcd <CPU::detectFeatures()+0x3d7>
c0018a75:	50                   	push   eax
c0018a76:	50                   	push   eax
c0018a77:	68 33 a4 02 c0       	push   0xc002a433
c0018a7c:	57                   	push   edi
c0018a7d:	e8 44 7d fe ff       	call   c00007c6 <strcmp>
c0018a82:	83 c4 10             	add    esp,0x10
c0018a85:	85 c0                	test   eax,eax
c0018a87:	75 0f                	jne    c0018a98 <CPU::detectFeatures()+0x2a2>
c0018a89:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018a93:	e9 35 01 00 00       	jmp    c0018bcd <CPU::detectFeatures()+0x3d7>
c0018a98:	50                   	push   eax
c0018a99:	50                   	push   eax
c0018a9a:	68 81 a4 02 c0       	push   0xc002a481
c0018a9f:	57                   	push   edi
c0018aa0:	e8 21 7d fe ff       	call   c00007c6 <strcmp>
c0018aa5:	83 c4 10             	add    esp,0x10
c0018aa8:	85 c0                	test   eax,eax
c0018aaa:	75 0f                	jne    c0018abb <CPU::detectFeatures()+0x2c5>
c0018aac:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018ab6:	e9 12 01 00 00       	jmp    c0018bcd <CPU::detectFeatures()+0x3d7>
c0018abb:	51                   	push   ecx
c0018abc:	51                   	push   ecx
c0018abd:	68 8e a4 02 c0       	push   0xc002a48e
c0018ac2:	57                   	push   edi
c0018ac3:	e8 fe 7c fe ff       	call   c00007c6 <strcmp>
c0018ac8:	83 c4 10             	add    esp,0x10
c0018acb:	85 c0                	test   eax,eax
c0018acd:	75 0f                	jne    c0018ade <CPU::detectFeatures()+0x2e8>
c0018acf:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018ad9:	e9 ef 00 00 00       	jmp    c0018bcd <CPU::detectFeatures()+0x3d7>
c0018ade:	52                   	push   edx
c0018adf:	52                   	push   edx
c0018ae0:	68 9b a4 02 c0       	push   0xc002a49b
c0018ae5:	57                   	push   edi
c0018ae6:	e8 db 7c fe ff       	call   c00007c6 <strcmp>
c0018aeb:	83 c4 10             	add    esp,0x10
c0018aee:	85 c0                	test   eax,eax
c0018af0:	75 0f                	jne    c0018b01 <CPU::detectFeatures()+0x30b>
c0018af2:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018afc:	e9 cc 00 00 00       	jmp    c0018bcd <CPU::detectFeatures()+0x3d7>
c0018b01:	50                   	push   eax
c0018b02:	50                   	push   eax
c0018b03:	68 a8 a4 02 c0       	push   0xc002a4a8
c0018b08:	57                   	push   edi
c0018b09:	e8 b8 7c fe ff       	call   c00007c6 <strcmp>
c0018b0e:	83 c4 10             	add    esp,0x10
c0018b11:	85 c0                	test   eax,eax
c0018b13:	75 0f                	jne    c0018b24 <CPU::detectFeatures()+0x32e>
c0018b15:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018b1f:	e9 a9 00 00 00       	jmp    c0018bcd <CPU::detectFeatures()+0x3d7>
c0018b24:	50                   	push   eax
c0018b25:	50                   	push   eax
c0018b26:	68 b5 a4 02 c0       	push   0xc002a4b5
c0018b2b:	57                   	push   edi
c0018b2c:	e8 95 7c fe ff       	call   c00007c6 <strcmp>
c0018b31:	83 c4 10             	add    esp,0x10
c0018b34:	85 c0                	test   eax,eax
c0018b36:	75 0f                	jne    c0018b47 <CPU::detectFeatures()+0x351>
c0018b38:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018b42:	e9 86 00 00 00       	jmp    c0018bcd <CPU::detectFeatures()+0x3d7>
c0018b47:	50                   	push   eax
c0018b48:	50                   	push   eax
c0018b49:	68 c2 a4 02 c0       	push   0xc002a4c2
c0018b4e:	57                   	push   edi
c0018b4f:	e8 72 7c fe ff       	call   c00007c6 <strcmp>
c0018b54:	83 c4 10             	add    esp,0x10
c0018b57:	85 c0                	test   eax,eax
c0018b59:	75 0c                	jne    c0018b67 <CPU::detectFeatures()+0x371>
c0018b5b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018b65:	eb 66                	jmp    c0018bcd <CPU::detectFeatures()+0x3d7>
c0018b67:	50                   	push   eax
c0018b68:	50                   	push   eax
c0018b69:	68 cf a4 02 c0       	push   0xc002a4cf
c0018b6e:	57                   	push   edi
c0018b6f:	e8 52 7c fe ff       	call   c00007c6 <strcmp>
c0018b74:	83 c4 10             	add    esp,0x10
c0018b77:	85 c0                	test   eax,eax
c0018b79:	75 0c                	jne    c0018b87 <CPU::detectFeatures()+0x391>
c0018b7b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018b85:	eb 46                	jmp    c0018bcd <CPU::detectFeatures()+0x3d7>
c0018b87:	50                   	push   eax
c0018b88:	50                   	push   eax
c0018b89:	68 dc a4 02 c0       	push   0xc002a4dc
c0018b8e:	57                   	push   edi
c0018b8f:	e8 32 7c fe ff       	call   c00007c6 <strcmp>
c0018b94:	83 c4 10             	add    esp,0x10
c0018b97:	85 c0                	test   eax,eax
c0018b99:	74 e0                	je     c0018b7b <CPU::detectFeatures()+0x385>
c0018b9b:	50                   	push   eax
c0018b9c:	50                   	push   eax
c0018b9d:	68 e9 a4 02 c0       	push   0xc002a4e9
c0018ba2:	57                   	push   edi
c0018ba3:	e8 1e 7c fe ff       	call   c00007c6 <strcmp>
c0018ba8:	83 c4 10             	add    esp,0x10
c0018bab:	85 c0                	test   eax,eax
c0018bad:	74 cc                	je     c0018b7b <CPU::detectFeatures()+0x385>
c0018baf:	51                   	push   ecx
c0018bb0:	51                   	push   ecx
c0018bb1:	68 f6 a4 02 c0       	push   0xc002a4f6
c0018bb6:	57                   	push   edi
c0018bb7:	e8 0a 7c fe ff       	call   c00007c6 <strcmp>
c0018bbc:	83 c4 10             	add    esp,0x10
c0018bbf:	85 c0                	test   eax,eax
c0018bc1:	74 b8                	je     c0018b7b <CPU::detectFeatures()+0x385>
c0018bc3:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018bcd:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018bd2:	0f 86 be 00 00 00    	jbe    c0018c96 <CPU::detectFeatures()+0x4a0>
c0018bd8:	83 ec 0c             	sub    esp,0xc
c0018bdb:	68 80 00 00 00       	push   0x80
c0018be0:	e8 ab f8 ff ff       	call   c0018490 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018be5:	83 e0 01             	and    eax,0x1
c0018be8:	c1 e0 06             	shl    eax,0x6
c0018beb:	88 c2                	mov    dl,al
c0018bed:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018bf3:	83 e0 bf             	and    eax,0xffffffbf
c0018bf6:	09 d0                	or     eax,edx
c0018bf8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018bfe:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018c05:	e8 86 f8 ff ff       	call   c0018490 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018c0a:	83 e0 01             	and    eax,0x1
c0018c0d:	c1 e0 04             	shl    eax,0x4
c0018c10:	88 c2                	mov    dl,al
c0018c12:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018c18:	83 e0 ef             	and    eax,0xffffffef
c0018c1b:	09 d0                	or     eax,edx
c0018c1d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018c23:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018c2a:	e8 61 f8 ff ff       	call   c0018490 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018c2f:	c1 e0 07             	shl    eax,0x7
c0018c32:	88 c2                	mov    dl,al
c0018c34:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c3a:	83 e0 7f             	and    eax,0x7f
c0018c3d:	09 d0                	or     eax,edx
c0018c3f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018c45:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018c4c:	e8 6d f8 ff ff       	call   c00184be <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018c51:	83 e0 01             	and    eax,0x1
c0018c54:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018c5b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018c61:	83 e0 f7             	and    eax,0xfffffff7
c0018c64:	09 d0                	or     eax,edx
c0018c66:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018c6c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018c73:	e8 46 f8 ff ff       	call   c00184be <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018c78:	83 c4 10             	add    esp,0x10
c0018c7b:	83 e0 01             	and    eax,0x1
c0018c7e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018c85:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018c8b:	83 e0 fb             	and    eax,0xfffffffb
c0018c8e:	09 d0                	or     eax,edx
c0018c90:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018c96:	83 ec 0c             	sub    esp,0xc
c0018c99:	56                   	push   esi
c0018c9a:	55                   	push   ebp
c0018c9b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018c9f:	57                   	push   edi
c0018ca0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ca4:	50                   	push   eax
c0018ca5:	6a 01                	push   0x1
c0018ca7:	e8 04 f7 ff ff       	call   c00183b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018cac:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018cb0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018cb6:	88 ca                	mov    dl,cl
c0018cb8:	83 e0 f0             	and    eax,0xfffffff0
c0018cbb:	83 e2 0f             	and    edx,0xf
c0018cbe:	09 d0                	or     eax,edx
c0018cc0:	88 ca                	mov    dl,cl
c0018cc2:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018cc8:	c0 ea 04             	shr    dl,0x4
c0018ccb:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018ccf:	0f b6 c2             	movzx  eax,dl
c0018cd2:	83 c4 20             	add    esp,0x20
c0018cd5:	c1 e0 06             	shl    eax,0x6
c0018cd8:	89 c5                	mov    ebp,eax
c0018cda:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ce0:	66 25 3f c0          	and    ax,0xc03f
c0018ce4:	09 e8                	or     eax,ebp
c0018ce6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018ced:	89 c8                	mov    eax,ecx
c0018cef:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018cf5:	c1 e8 08             	shr    eax,0x8
c0018cf8:	83 e2 3f             	and    edx,0x3f
c0018cfb:	83 e0 0f             	and    eax,0xf
c0018cfe:	89 c5                	mov    ebp,eax
c0018d00:	c1 e5 06             	shl    ebp,0x6
c0018d03:	09 d5                	or     ebp,edx
c0018d05:	89 ea                	mov    edx,ebp
c0018d07:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018d0d:	88 c2                	mov    dl,al
c0018d0f:	c0 ea 02             	shr    dl,0x2
c0018d12:	89 d5                	mov    ebp,edx
c0018d14:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018d1a:	83 e2 c0             	and    edx,0xffffffc0
c0018d1d:	09 d5                	or     ebp,edx
c0018d1f:	89 ea                	mov    edx,ebp
c0018d21:	89 cd                	mov    ebp,ecx
c0018d23:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018d29:	c1 ed 0c             	shr    ebp,0xc
c0018d2c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018d32:	83 e5 03             	and    ebp,0x3
c0018d35:	83 e2 cf             	and    edx,0xffffffcf
c0018d38:	c1 e5 04             	shl    ebp,0x4
c0018d3b:	09 d5                	or     ebp,edx
c0018d3d:	3c 06                	cmp    al,0x6
c0018d3f:	89 ea                	mov    edx,ebp
c0018d41:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018d47:	74 04                	je     c0018d4d <CPU::detectFeatures()+0x557>
c0018d49:	3c 0f                	cmp    al,0xf
c0018d4b:	75 5c                	jne    c0018da9 <CPU::detectFeatures()+0x5b3>
c0018d4d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018d51:	89 cd                	mov    ebp,ecx
c0018d53:	c1 ed 10             	shr    ebp,0x10
c0018d56:	c1 e5 04             	shl    ebp,0x4
c0018d59:	09 ea                	or     edx,ebp
c0018d5b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018d61:	0f b6 d2             	movzx  edx,dl
c0018d64:	66 81 e5 3f c0       	and    bp,0xc03f
c0018d69:	c1 e2 06             	shl    edx,0x6
c0018d6c:	09 ea                	or     edx,ebp
c0018d6e:	3c 0f                	cmp    al,0xf
c0018d70:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018d77:	75 30                	jne    c0018da9 <CPU::detectFeatures()+0x5b3>
c0018d79:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018d7f:	c1 e9 14             	shr    ecx,0x14
c0018d82:	83 e0 3f             	and    eax,0x3f
c0018d85:	83 c1 0f             	add    ecx,0xf
c0018d88:	88 ca                	mov    dl,cl
c0018d8a:	c0 e9 02             	shr    cl,0x2
c0018d8d:	c1 e2 06             	shl    edx,0x6
c0018d90:	09 d0                	or     eax,edx
c0018d92:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018d98:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018d9e:	83 e0 c0             	and    eax,0xffffffc0
c0018da1:	09 c1                	or     ecx,eax
c0018da3:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018da9:	83 ec 0c             	sub    esp,0xc
c0018dac:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018db3:	56                   	push   esi
c0018db4:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018db8:	50                   	push   eax
c0018db9:	57                   	push   edi
c0018dba:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018dbe:	55                   	push   ebp
c0018dbf:	68 00 00 00 80       	push   0x80000000
c0018dc4:	e8 e7 f5 ff ff       	call   c00183b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dc9:	83 c4 20             	add    esp,0x20
c0018dcc:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018dd4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018dd8:	76 1e                	jbe    c0018df8 <CPU::detectFeatures()+0x602>
c0018dda:	83 ec 0c             	sub    esp,0xc
c0018ddd:	56                   	push   esi
c0018dde:	50                   	push   eax
c0018ddf:	57                   	push   edi
c0018de0:	55                   	push   ebp
c0018de1:	68 01 00 00 80       	push   0x80000001
c0018de6:	e8 c5 f5 ff ff       	call   c00183b0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018deb:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018df5:	83 c4 20             	add    esp,0x20
c0018df8:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018dfe:	83 f8 01             	cmp    eax,0x1
c0018e01:	75 6f                	jne    c0018e72 <CPU::detectFeatures()+0x67c>
c0018e03:	51                   	push   ecx
c0018e04:	51                   	push   ecx
c0018e05:	68 02 a5 02 c0       	push   0xc002a502
c0018e0a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018e0e:	56                   	push   esi
c0018e0f:	e8 61 79 fe ff       	call   c0000775 <strcpy>
c0018e14:	5f                   	pop    edi
c0018e15:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e1b:	5d                   	pop    ebp
c0018e1c:	66 c1 e8 06          	shr    ax,0x6
c0018e20:	0f b6 c0             	movzx  eax,al
c0018e23:	50                   	push   eax
c0018e24:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e2a:	c1 e8 0e             	shr    eax,0xe
c0018e2d:	0f b6 c0             	movzx  eax,al
c0018e30:	50                   	push   eax
c0018e31:	e8 24 f2 ff ff       	call   c001805a <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018e36:	5a                   	pop    edx
c0018e37:	59                   	pop    ecx
c0018e38:	50                   	push   eax
c0018e39:	56                   	push   esi
c0018e3a:	e8 ed 79 fe ff       	call   c000082c <strcat>
c0018e3f:	5f                   	pop    edi
c0018e40:	5d                   	pop    ebp
c0018e41:	56                   	push   esi
c0018e42:	53                   	push   ebx
c0018e43:	e8 9c b0 ff ff       	call   c0013ee4 <Device::setName(char const*)>
c0018e48:	58                   	pop    eax
c0018e49:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018e4f:	5a                   	pop    edx
c0018e50:	68 09 a5 02 c0       	push   0xc002a509
c0018e55:	50                   	push   eax
c0018e56:	e8 6b 79 fe ff       	call   c00007c6 <strcmp>
c0018e5b:	83 c4 10             	add    esp,0x10
c0018e5e:	85 c0                	test   eax,eax
c0018e60:	0f 85 71 03 00 00    	jne    c00191d7 <CPU::detectFeatures()+0x9e1>
c0018e66:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018e6d:	e9 65 03 00 00       	jmp    c00191d7 <CPU::detectFeatures()+0x9e1>
c0018e72:	83 f8 02             	cmp    eax,0x2
c0018e75:	0f 85 b5 00 00 00    	jne    c0018f30 <CPU::detectFeatures()+0x73a>
c0018e7b:	57                   	push   edi
c0018e7c:	57                   	push   edi
c0018e7d:	68 1b a5 02 c0       	push   0xc002a51b
c0018e82:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018e86:	56                   	push   esi
c0018e87:	e8 e9 78 fe ff       	call   c0000775 <strcpy>
c0018e8c:	5d                   	pop    ebp
c0018e8d:	58                   	pop    eax
c0018e8e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e94:	66 c1 e8 06          	shr    ax,0x6
c0018e98:	0f b6 c0             	movzx  eax,al
c0018e9b:	50                   	push   eax
c0018e9c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ea2:	c1 e8 0e             	shr    eax,0xe
c0018ea5:	0f b6 c0             	movzx  eax,al
c0018ea8:	50                   	push   eax
c0018ea9:	e8 18 f0 ff ff       	call   c0017ec6 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018eae:	5a                   	pop    edx
c0018eaf:	59                   	pop    ecx
c0018eb0:	50                   	push   eax
c0018eb1:	56                   	push   esi
c0018eb2:	e8 75 79 fe ff       	call   c000082c <strcat>
c0018eb7:	5f                   	pop    edi
c0018eb8:	5d                   	pop    ebp
c0018eb9:	56                   	push   esi
c0018eba:	53                   	push   ebx
c0018ebb:	e8 24 b0 ff ff       	call   c0013ee4 <Device::setName(char const*)>
c0018ec0:	58                   	pop    eax
c0018ec1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018ec7:	5a                   	pop    edx
c0018ec8:	68 20 a5 02 c0       	push   0xc002a520
c0018ecd:	50                   	push   eax
c0018ece:	e8 f3 78 fe ff       	call   c00007c6 <strcmp>
c0018ed3:	83 c4 10             	add    esp,0x10
c0018ed6:	85 c0                	test   eax,eax
c0018ed8:	75 20                	jne    c0018efa <CPU::detectFeatures()+0x704>
c0018eda:	8b 15 c8 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002cec8
c0018ee0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018ee6:	a8 01                	test   al,0x1
c0018ee8:	74 10                	je     c0018efa <CPU::detectFeatures()+0x704>
c0018eea:	83 e0 fe             	and    eax,0xfffffffe
c0018eed:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018ef3:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018efa:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f00:	c1 e8 0e             	shr    eax,0xe
c0018f03:	3c 05                	cmp    al,0x5
c0018f05:	0f 85 cc 02 00 00    	jne    c00191d7 <CPU::detectFeatures()+0x9e1>
c0018f0b:	56                   	push   esi
c0018f0c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018f12:	83 e0 0f             	and    eax,0xf
c0018f15:	50                   	push   eax
c0018f16:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f1c:	66 c1 e8 06          	shr    ax,0x6
c0018f20:	0f b6 c0             	movzx  eax,al
c0018f23:	50                   	push   eax
c0018f24:	6a 05                	push   0x5
c0018f26:	e8 11 f4 ff ff       	call   c001833c <CPU::AMD_K6_writeback(int, int, int)>
c0018f2b:	e9 1f 02 00 00       	jmp    c001914f <CPU::detectFeatures()+0x959>
c0018f30:	8d 50 fd             	lea    edx,[eax-0x3]
c0018f33:	83 fa 01             	cmp    edx,0x1
c0018f36:	76 09                	jbe    c0018f41 <CPU::detectFeatures()+0x74b>
c0018f38:	83 f8 06             	cmp    eax,0x6
c0018f3b:	0f 85 91 01 00 00    	jne    c00190d2 <CPU::detectFeatures()+0x8dc>
c0018f41:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018f47:	c1 ea 0e             	shr    edx,0xe
c0018f4a:	80 fa 05             	cmp    dl,0x5
c0018f4d:	75 7b                	jne    c0018fca <CPU::detectFeatures()+0x7d4>
c0018f4f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018f55:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018f5a:	66 81 fa 00 01       	cmp    dx,0x100
c0018f5f:	75 0c                	jne    c0018f6d <CPU::detectFeatures()+0x777>
c0018f61:	51                   	push   ecx
c0018f62:	51                   	push   ecx
c0018f63:	68 27 a5 02 c0       	push   0xc002a527
c0018f68:	e9 dc 01 00 00       	jmp    c0019149 <CPU::detectFeatures()+0x953>
c0018f6d:	66 81 fa 00 02       	cmp    dx,0x200
c0018f72:	75 0c                	jne    c0018f80 <CPU::detectFeatures()+0x78a>
c0018f74:	52                   	push   edx
c0018f75:	52                   	push   edx
c0018f76:	68 3a a5 02 c0       	push   0xc002a53a
c0018f7b:	e9 c9 01 00 00       	jmp    c0019149 <CPU::detectFeatures()+0x953>
c0018f80:	66 81 fa 40 02       	cmp    dx,0x240
c0018f85:	75 0c                	jne    c0018f93 <CPU::detectFeatures()+0x79d>
c0018f87:	50                   	push   eax
c0018f88:	50                   	push   eax
c0018f89:	68 4c a5 02 c0       	push   0xc002a54c
c0018f8e:	e9 b6 01 00 00       	jmp    c0019149 <CPU::detectFeatures()+0x953>
c0018f93:	83 f8 06             	cmp    eax,0x6
c0018f96:	75 0c                	jne    c0018fa4 <CPU::detectFeatures()+0x7ae>
c0018f98:	50                   	push   eax
c0018f99:	50                   	push   eax
c0018f9a:	68 5e a5 02 c0       	push   0xc002a55e
c0018f9f:	e9 a5 01 00 00       	jmp    c0019149 <CPU::detectFeatures()+0x953>
c0018fa4:	83 f8 04             	cmp    eax,0x4
c0018fa7:	75 0c                	jne    c0018fb5 <CPU::detectFeatures()+0x7bf>
c0018fa9:	50                   	push   eax
c0018faa:	50                   	push   eax
c0018fab:	68 6a a5 02 c0       	push   0xc002a56a
c0018fb0:	e9 94 01 00 00       	jmp    c0019149 <CPU::detectFeatures()+0x953>
c0018fb5:	83 f8 03             	cmp    eax,0x3
c0018fb8:	0f 85 19 02 00 00    	jne    c00191d7 <CPU::detectFeatures()+0x9e1>
c0018fbe:	50                   	push   eax
c0018fbf:	50                   	push   eax
c0018fc0:	68 72 a5 02 c0       	push   0xc002a572
c0018fc5:	e9 7f 01 00 00       	jmp    c0019149 <CPU::detectFeatures()+0x953>
c0018fca:	80 fa 06             	cmp    dl,0x6
c0018fcd:	0f 85 db 00 00 00    	jne    c00190ae <CPU::detectFeatures()+0x8b8>
c0018fd3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018fd9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018fde:	66 81 fa 80 01       	cmp    dx,0x180
c0018fe3:	75 0c                	jne    c0018ff1 <CPU::detectFeatures()+0x7fb>
c0018fe5:	50                   	push   eax
c0018fe6:	50                   	push   eax
c0018fe7:	68 7d a5 02 c0       	push   0xc002a57d
c0018fec:	e9 58 01 00 00       	jmp    c0019149 <CPU::detectFeatures()+0x953>
c0018ff1:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018ff7:	66 f7 c1 80 ff       	test   cx,0xff80
c0018ffc:	75 0c                	jne    c001900a <CPU::detectFeatures()+0x814>
c0018ffe:	50                   	push   eax
c0018fff:	50                   	push   eax
c0019000:	68 8d a5 02 c0       	push   0xc002a58d
c0019005:	e9 3f 01 00 00       	jmp    c0019149 <CPU::detectFeatures()+0x953>
c001900a:	66 81 fa 40 02       	cmp    dx,0x240
c001900f:	75 0c                	jne    c001901d <CPU::detectFeatures()+0x827>
c0019011:	55                   	push   ebp
c0019012:	55                   	push   ebp
c0019013:	68 94 a5 02 c0       	push   0xc002a594
c0019018:	e9 2c 01 00 00       	jmp    c0019149 <CPU::detectFeatures()+0x953>
c001901d:	66 81 fa 80 02       	cmp    dx,0x280
c0019022:	75 0c                	jne    c0019030 <CPU::detectFeatures()+0x83a>
c0019024:	57                   	push   edi
c0019025:	57                   	push   edi
c0019026:	68 9d a5 02 c0       	push   0xc002a59d
c001902b:	e9 19 01 00 00       	jmp    c0019149 <CPU::detectFeatures()+0x953>
c0019030:	66 81 fa 40 03       	cmp    dx,0x340
c0019035:	74 ed                	je     c0019024 <CPU::detectFeatures()+0x82e>
c0019037:	66 81 fa c0 03       	cmp    dx,0x3c0
c001903c:	75 0c                	jne    c001904a <CPU::detectFeatures()+0x854>
c001903e:	56                   	push   esi
c001903f:	56                   	push   esi
c0019040:	68 a4 a5 02 c0       	push   0xc002a5a4
c0019045:	e9 ff 00 00 00       	jmp    c0019149 <CPU::detectFeatures()+0x953>
c001904a:	83 f8 06             	cmp    eax,0x6
c001904d:	0f 84 45 ff ff ff    	je     c0018f98 <CPU::detectFeatures()+0x7a2>
c0019053:	83 f8 04             	cmp    eax,0x4
c0019056:	0f 84 4d ff ff ff    	je     c0018fa9 <CPU::detectFeatures()+0x7b3>
c001905c:	83 f8 03             	cmp    eax,0x3
c001905f:	0f 85 72 01 00 00    	jne    c00191d7 <CPU::detectFeatures()+0x9e1>
c0019065:	51                   	push   ecx
c0019066:	51                   	push   ecx
c0019067:	68 ad a5 02 c0       	push   0xc002a5ad
c001906c:	53                   	push   ebx
c001906d:	e8 72 ae ff ff       	call   c0013ee4 <Device::setName(char const*)>
c0019072:	b1 c1                	mov    cl,0xc1
c0019074:	88 c8                	mov    al,cl
c0019076:	e6 22                	out    0x22,al
c0019078:	e4 23                	in     al,0x23
c001907a:	88 c2                	mov    dl,al
c001907c:	88 c8                	mov    al,cl
c001907e:	e6 22                	out    0x22,al
c0019080:	88 d0                	mov    al,dl
c0019082:	83 c8 10             	or     eax,0x10
c0019085:	e6 23                	out    0x23,al
c0019087:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001908e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019091:	89 d0                	mov    eax,edx
c0019093:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019099:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001909d:	40                   	inc    eax
c001909e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00190a4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00190a9:	e9 a1 00 00 00       	jmp    c001914f <CPU::detectFeatures()+0x959>
c00190ae:	83 f8 06             	cmp    eax,0x6
c00190b1:	0f 84 e1 fe ff ff    	je     c0018f98 <CPU::detectFeatures()+0x7a2>
c00190b7:	83 f8 04             	cmp    eax,0x4
c00190ba:	0f 84 e9 fe ff ff    	je     c0018fa9 <CPU::detectFeatures()+0x7b3>
c00190c0:	83 f8 03             	cmp    eax,0x3
c00190c3:	0f 85 0e 01 00 00    	jne    c00191d7 <CPU::detectFeatures()+0x9e1>
c00190c9:	52                   	push   edx
c00190ca:	52                   	push   edx
c00190cb:	68 b8 a5 02 c0       	push   0xc002a5b8
c00190d0:	eb 77                	jmp    c0019149 <CPU::detectFeatures()+0x953>
c00190d2:	83 f8 07             	cmp    eax,0x7
c00190d5:	75 09                	jne    c00190e0 <CPU::detectFeatures()+0x8ea>
c00190d7:	50                   	push   eax
c00190d8:	50                   	push   eax
c00190d9:	68 c2 a5 02 c0       	push   0xc002a5c2
c00190de:	eb 69                	jmp    c0019149 <CPU::detectFeatures()+0x953>
c00190e0:	83 f8 0a             	cmp    eax,0xa
c00190e3:	75 09                	jne    c00190ee <CPU::detectFeatures()+0x8f8>
c00190e5:	50                   	push   eax
c00190e6:	50                   	push   eax
c00190e7:	68 cd a5 02 c0       	push   0xc002a5cd
c00190ec:	eb 5b                	jmp    c0019149 <CPU::detectFeatures()+0x953>
c00190ee:	83 f8 0b             	cmp    eax,0xb
c00190f1:	75 09                	jne    c00190fc <CPU::detectFeatures()+0x906>
c00190f3:	50                   	push   eax
c00190f4:	50                   	push   eax
c00190f5:	68 d5 a5 02 c0       	push   0xc002a5d5
c00190fa:	eb 4d                	jmp    c0019149 <CPU::detectFeatures()+0x953>
c00190fc:	83 f8 08             	cmp    eax,0x8
c00190ff:	75 09                	jne    c001910a <CPU::detectFeatures()+0x914>
c0019101:	50                   	push   eax
c0019102:	50                   	push   eax
c0019103:	68 de a5 02 c0       	push   0xc002a5de
c0019108:	eb 3f                	jmp    c0019149 <CPU::detectFeatures()+0x953>
c001910a:	83 f8 09             	cmp    eax,0x9
c001910d:	75 09                	jne    c0019118 <CPU::detectFeatures()+0x922>
c001910f:	50                   	push   eax
c0019110:	50                   	push   eax
c0019111:	68 e6 a5 02 c0       	push   0xc002a5e6
c0019116:	eb 31                	jmp    c0019149 <CPU::detectFeatures()+0x953>
c0019118:	83 f8 05             	cmp    eax,0x5
c001911b:	75 09                	jne    c0019126 <CPU::detectFeatures()+0x930>
c001911d:	50                   	push   eax
c001911e:	50                   	push   eax
c001911f:	68 ee a5 02 c0       	push   0xc002a5ee
c0019124:	eb 23                	jmp    c0019149 <CPU::detectFeatures()+0x953>
c0019126:	83 f8 0c             	cmp    eax,0xc
c0019129:	75 09                	jne    c0019134 <CPU::detectFeatures()+0x93e>
c001912b:	55                   	push   ebp
c001912c:	55                   	push   ebp
c001912d:	68 fc a5 02 c0       	push   0xc002a5fc
c0019132:	eb 15                	jmp    c0019149 <CPU::detectFeatures()+0x953>
c0019134:	83 f8 0d             	cmp    eax,0xd
c0019137:	75 09                	jne    c0019142 <CPU::detectFeatures()+0x94c>
c0019139:	57                   	push   edi
c001913a:	57                   	push   edi
c001913b:	68 07 a6 02 c0       	push   0xc002a607
c0019140:	eb 07                	jmp    c0019149 <CPU::detectFeatures()+0x953>
c0019142:	56                   	push   esi
c0019143:	56                   	push   esi
c0019144:	68 1b a6 02 c0       	push   0xc002a61b
c0019149:	53                   	push   ebx
c001914a:	e8 95 ad ff ff       	call   c0013ee4 <Device::setName(char const*)>
c001914f:	83 c4 10             	add    esp,0x10
c0019152:	e9 80 00 00 00       	jmp    c00191d7 <CPU::detectFeatures()+0x9e1>
c0019157:	51                   	push   ecx
c0019158:	51                   	push   ecx
c0019159:	68 67 a4 02 c0       	push   0xc002a467
c001915e:	57                   	push   edi
c001915f:	e8 11 76 fe ff       	call   c0000775 <strcpy>
c0019164:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001916e:	e8 3b 71 fe ff       	call   c00002ae <is486>
c0019173:	83 c4 10             	add    esp,0x10
c0019176:	85 c0                	test   eax,eax
c0019178:	74 2b                	je     c00191a5 <CPU::detectFeatures()+0x9af>
c001917a:	52                   	push   edx
c001917b:	52                   	push   edx
c001917c:	68 27 a6 02 c0       	push   0xc002a627
c0019181:	53                   	push   ebx
c0019182:	e8 5d ad ff ff       	call   c0013ee4 <Device::setName(char const*)>
c0019187:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001918e:	0f 20 c0             	mov    eax,cr0
c0019191:	83 e0 14             	and    eax,0x14
c0019194:	83 c4 10             	add    esp,0x10
c0019197:	83 f8 04             	cmp    eax,0x4
c001919a:	75 1f                	jne    c00191bb <CPU::detectFeatures()+0x9c5>
c001919c:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00191a3:	eb 32                	jmp    c00191d7 <CPU::detectFeatures()+0x9e1>
c00191a5:	50                   	push   eax
c00191a6:	50                   	push   eax
c00191a7:	68 32 a6 02 c0       	push   0xc002a632
c00191ac:	53                   	push   ebx
c00191ad:	e8 32 ad ff ff       	call   c0013ee4 <Device::setName(char const*)>
c00191b2:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00191b9:	eb d3                	jmp    c001918e <CPU::detectFeatures()+0x998>
c00191bb:	e8 c9 70 fe ff       	call   c0000289 <hasLegacyFPU>
c00191c0:	83 e0 01             	and    eax,0x1
c00191c3:	8d 14 00             	lea    edx,[eax+eax*1]
c00191c6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00191cc:	83 e0 fd             	and    eax,0xfffffffd
c00191cf:	09 d0                	or     eax,edx
c00191d1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00191d7:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00191de:	83 c4 4c             	add    esp,0x4c
c00191e1:	5b                   	pop    ebx
c00191e2:	5e                   	pop    esi
c00191e3:	5f                   	pop    edi
c00191e4:	5d                   	pop    ebp
c00191e5:	c3                   	ret    

c00191e6 <CPU::setupSMEP()>:
c00191e6:	0f 20 e0             	mov    eax,cr4
c00191e9:	0d 00 00 10 00       	or     eax,0x100000
c00191ee:	0f 22 e0             	mov    cr4,eax
c00191f1:	c3                   	ret    

c00191f2 <CPU::setupUMIP()>:
c00191f2:	0f 20 e0             	mov    eax,cr4
c00191f5:	80 cc 08             	or     ah,0x8
c00191f8:	0f 22 e0             	mov    cr4,eax
c00191fb:	c3                   	ret    

c00191fc <CPU::setupTSC()>:
c00191fc:	0f 20 e0             	mov    eax,cr4
c00191ff:	83 c8 04             	or     eax,0x4
c0019202:	0f 22 e0             	mov    cr4,eax
c0019205:	c3                   	ret    

c0019206 <CPU::setupLargePages()>:
c0019206:	0f 20 e0             	mov    eax,cr4
c0019209:	83 c8 10             	or     eax,0x10
c001920c:	0f 22 e0             	mov    cr4,eax
c001920f:	c3                   	ret    

c0019210 <CPU::setupPAT()>:
c0019210:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0019215:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001921c:	74 2c                	je     c001924a <CPU::setupPAT()+0x3a>
c001921e:	53                   	push   ebx
c001921f:	83 ec 10             	sub    esp,0x10
c0019222:	68 77 02 00 00       	push   0x277
c0019227:	50                   	push   eax
c0019228:	e8 b1 59 ff ff       	call   c000ebde <Computer::rdmsr(unsigned int)>
c001922d:	83 e2 f8             	and    edx,0xfffffff8
c0019230:	83 ca 01             	or     edx,0x1
c0019233:	52                   	push   edx
c0019234:	50                   	push   eax
c0019235:	68 77 02 00 00       	push   0x277
c001923a:	ff 35 c8 ce 02 c0    	push   DWORD PTR ds:0xc002cec8
c0019240:	e8 c5 59 ff ff       	call   c000ec0a <Computer::wrmsr(unsigned int, unsigned long long)>
c0019245:	83 c4 28             	add    esp,0x28
c0019248:	5b                   	pop    ebx
c0019249:	c3                   	ret    
c001924a:	c3                   	ret    
c001924b:	90                   	nop

c001924c <CPU::setupMTRR()>:
c001924c:	c3                   	ret    
c001924d:	90                   	nop

c001924e <CPU::setupGlobalPages()>:
c001924e:	0f 20 e0             	mov    eax,cr4
c0019251:	0c 80                	or     al,0x80
c0019253:	0f 22 e0             	mov    cr4,eax
c0019256:	c3                   	ret    
c0019257:	90                   	nop

c0019258 <CPU::allowUsermodeDataAccess()>:
c0019258:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001925c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019263:	74 03                	je     c0019268 <CPU::allowUsermodeDataAccess()+0x10>
c0019265:	0f 01 cb             	stac   
c0019268:	c3                   	ret    
c0019269:	90                   	nop

c001926a <CPU::prohibitUsermodeDataAccess()>:
c001926a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001926e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019275:	74 03                	je     c001927a <CPU::prohibitUsermodeDataAccess()+0x10>
c0019277:	0f 01 ca             	clac   
c001927a:	c3                   	ret    
c001927b:	90                   	nop

c001927c <CPU::setupSMAP()>:
c001927c:	0f 20 e0             	mov    eax,cr4
c001927f:	0d 00 00 20 00       	or     eax,0x200000
c0019284:	0f 22 e0             	mov    cr4,eax
c0019287:	eb e1                	jmp    c001926a <CPU::prohibitUsermodeDataAccess()>
c0019289:	90                   	nop

c001928a <CPU::setupFeatures()>:
c001928a:	83 ec 0c             	sub    esp,0xc
c001928d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019291:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019298:	74 07                	je     c00192a1 <CPU::setupFeatures()+0x17>
c001929a:	52                   	push   edx
c001929b:	e8 46 ff ff ff       	call   c00191e6 <CPU::setupSMEP()>
c00192a0:	58                   	pop    eax
c00192a1:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00192a8:	74 07                	je     c00192b1 <CPU::setupFeatures()+0x27>
c00192aa:	52                   	push   edx
c00192ab:	e8 cc ff ff ff       	call   c001927c <CPU::setupSMAP()>
c00192b0:	58                   	pop    eax
c00192b1:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00192b8:	74 07                	je     c00192c1 <CPU::setupFeatures()+0x37>
c00192ba:	52                   	push   edx
c00192bb:	e8 32 ff ff ff       	call   c00191f2 <CPU::setupUMIP()>
c00192c0:	58                   	pop    eax
c00192c1:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00192c8:	74 07                	je     c00192d1 <CPU::setupFeatures()+0x47>
c00192ca:	52                   	push   edx
c00192cb:	e8 2c ff ff ff       	call   c00191fc <CPU::setupTSC()>
c00192d0:	58                   	pop    eax
c00192d1:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00192d8:	74 07                	je     c00192e1 <CPU::setupFeatures()+0x57>
c00192da:	52                   	push   edx
c00192db:	e8 26 ff ff ff       	call   c0019206 <CPU::setupLargePages()>
c00192e0:	59                   	pop    ecx
c00192e1:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00192e8:	74 07                	je     c00192f1 <CPU::setupFeatures()+0x67>
c00192ea:	52                   	push   edx
c00192eb:	e8 5e ff ff ff       	call   c001924e <CPU::setupGlobalPages()>
c00192f0:	58                   	pop    eax
c00192f1:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00192f8:	74 0c                	je     c0019306 <CPU::setupFeatures()+0x7c>
c00192fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00192fe:	83 c4 0c             	add    esp,0xc
c0019301:	e9 0a ff ff ff       	jmp    c0019210 <CPU::setupPAT()>
c0019306:	83 c4 0c             	add    esp,0xc
c0019309:	c3                   	ret    

c001930a <CPU::open(int, int, void*)>:
c001930a:	57                   	push   edi
c001930b:	56                   	push   esi
c001930c:	53                   	push   ebx
c001930d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019311:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019315:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001931b:	83 ec 0c             	sub    esp,0xc
c001931e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019324:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001932a:	50                   	push   eax
c001932b:	e8 9a 5b ff ff       	call   c000eeca <GDT::setup()>
c0019330:	83 c4 0c             	add    esp,0xc
c0019333:	6a 00                	push   0x0
c0019335:	68 ef be ad de       	push   0xdeadbeef
c001933a:	57                   	push   edi
c001933b:	e8 1c 7f ff ff       	call   c001125c <TSS::setup(unsigned long, unsigned long)>
c0019340:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019343:	e8 f4 7e ff ff       	call   c001123c <TSS::flush()>
c0019348:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001934e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019351:	e8 d0 5d ff ff       	call   c000f126 <IDT::setup()>
c0019356:	b8 00 04 00 00       	mov    eax,0x400
c001935b:	0f 23 f8             	mov    db7,eax
c001935e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019368:	e8 3c 69 ff ff       	call   c000fca9 <Phys::allocatePage()>
c001936d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019373:	89 30                	mov    DWORD PTR [eax],esi
c0019375:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001937b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001937e:	58                   	pop    eax
c001937f:	5a                   	pop    edx
c0019380:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019386:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001938a:	e8 ff 8e ff ff       	call   c001228e <VAS::setCPUSpecific(unsigned long)>
c001938f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019392:	e8 5f f4 ff ff       	call   c00187f6 <CPU::detectFeatures()>
c0019397:	e8 2c be ff ff       	call   c00151c8 <setupInterruptController()>
c001939c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00193a2:	a1 e0 ce 02 c0       	mov    eax,ds:0xc002cee0
c00193a7:	83 e0 10             	and    eax,0x10
c00193aa:	83 f8 01             	cmp    eax,0x1
c00193ad:	19 c0                	sbb    eax,eax
c00193af:	83 e0 46             	and    eax,0x46
c00193b2:	83 c0 1e             	add    eax,0x1e
c00193b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00193b8:	e8 c3 d2 ff ff       	call   c0016680 <setupTimer(int)>
c00193bd:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00193c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00193c6:	e8 bf fe ff ff       	call   c001928a <CPU::setupFeatures()>
c00193cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00193ce:	e8 a7 f1 ff ff       	call   c001857a <CPU::displayFeatures()>
c00193d3:	83 c4 10             	add    esp,0x10
c00193d6:	31 c0                	xor    eax,eax
c00193d8:	5b                   	pop    ebx
c00193d9:	5e                   	pop    esi
c00193da:	5f                   	pop    edi
c00193db:	c3                   	ret    

c00193dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00193dc:	57                   	push   edi
c00193dd:	56                   	push   esi
c00193de:	53                   	push   ebx
c00193df:	51                   	push   ecx
c00193e0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00193e4:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00193e7:	0f 02 c0             	lar    eax,ax
c00193ea:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00193ed:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00193f1:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00193f4:	88 ca                	mov    dl,cl
c00193f6:	c0 ea 06             	shr    dl,0x6
c00193f9:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00193fd:	89 ca                	mov    edx,ecx
c00193ff:	66 c1 ea 03          	shr    dx,0x3
c0019403:	83 e2 07             	and    edx,0x7
c0019406:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001940b:	88 17                	mov    BYTE PTR [edi],dl
c001940d:	0f 84 a6 01 00 00    	je     c00195b9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019413:	83 e1 07             	and    ecx,0x7
c0019416:	80 f9 04             	cmp    cl,0x4
c0019419:	0f 84 98 00 00 00    	je     c00194b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001941f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019424:	0f 95 c0             	setne  al
c0019427:	80 f9 05             	cmp    cl,0x5
c001942a:	0f 95 c2             	setne  dl
c001942d:	08 c2                	or     dl,al
c001942f:	74 79                	je     c00194aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019431:	84 c9                	test   cl,cl
c0019433:	75 05                	jne    c001943a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019435:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019438:	eb 3c                	jmp    c0019476 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001943a:	80 f9 01             	cmp    cl,0x1
c001943d:	75 05                	jne    c0019444 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001943f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019442:	eb 32                	jmp    c0019476 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019444:	80 f9 02             	cmp    cl,0x2
c0019447:	75 05                	jne    c001944e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019449:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001944c:	eb 28                	jmp    c0019476 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001944e:	31 c0                	xor    eax,eax
c0019450:	80 f9 03             	cmp    cl,0x3
c0019453:	75 05                	jne    c001945a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019455:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019458:	eb 1c                	jmp    c0019476 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001945a:	80 f9 05             	cmp    cl,0x5
c001945d:	75 05                	jne    c0019464 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001945f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019462:	eb 12                	jmp    c0019476 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019464:	80 f9 06             	cmp    cl,0x6
c0019467:	75 05                	jne    c001946e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019469:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001946c:	eb 08                	jmp    c0019476 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001946e:	80 f9 07             	cmp    cl,0x7
c0019471:	75 03                	jne    c0019476 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019476:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001947b:	75 10                	jne    c001948d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001947d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019481:	b9 03 00 00 00       	mov    ecx,0x3
c0019486:	01 d0                	add    eax,edx
c0019488:	e9 37 01 00 00       	jmp    c00195c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001948d:	b9 02 00 00 00       	mov    ecx,0x2
c0019492:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019497:	0f 85 27 01 00 00    	jne    c00195c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001949d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00194a0:	b9 06 00 00 00       	mov    ecx,0x6
c00194a5:	e9 1a 01 00 00       	jmp    c00195c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00194aa:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00194ad:	b9 06 00 00 00       	mov    ecx,0x6
c00194b2:	e9 0f 01 00 00       	jmp    c00195c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00194b7:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00194ba:	88 ca                	mov    dl,cl
c00194bc:	c0 ea 06             	shr    dl,0x6
c00194bf:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00194c3:	89 ca                	mov    edx,ecx
c00194c5:	66 c1 ea 03          	shr    dx,0x3
c00194c9:	83 e2 07             	and    edx,0x7
c00194cc:	80 e1 07             	and    cl,0x7
c00194cf:	75 05                	jne    c00194d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00194d1:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00194d4:	eb 4c                	jmp    c0019522 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194d6:	80 f9 01             	cmp    cl,0x1
c00194d9:	75 05                	jne    c00194e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00194db:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00194de:	eb 42                	jmp    c0019522 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194e0:	80 f9 02             	cmp    cl,0x2
c00194e3:	75 05                	jne    c00194ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00194e5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00194e8:	eb 38                	jmp    c0019522 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194ea:	80 f9 03             	cmp    cl,0x3
c00194ed:	75 05                	jne    c00194f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00194ef:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00194f2:	eb 2e                	jmp    c0019522 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194f4:	80 f9 04             	cmp    cl,0x4
c00194f7:	75 12                	jne    c001950b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00194f9:	f6 c4 60             	test   ah,0x60
c00194fc:	75 08                	jne    c0019506 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00194fe:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019501:	8d 78 14             	lea    edi,[eax+0x14]
c0019504:	eb 1c                	jmp    c0019522 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019506:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019509:	eb 17                	jmp    c0019522 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001950b:	80 f9 05             	cmp    cl,0x5
c001950e:	75 05                	jne    c0019515 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019510:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019513:	eb 0d                	jmp    c0019522 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019515:	80 f9 06             	cmp    cl,0x6
c0019518:	75 05                	jne    c001951f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001951a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001951d:	eb 03                	jmp    c0019522 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001951f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019522:	84 d2                	test   dl,dl
c0019524:	75 05                	jne    c001952b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019526:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019529:	eb 3c                	jmp    c0019567 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001952b:	80 fa 01             	cmp    dl,0x1
c001952e:	75 05                	jne    c0019535 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019530:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019533:	eb 32                	jmp    c0019567 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019535:	80 fa 02             	cmp    dl,0x2
c0019538:	75 05                	jne    c001953f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001953a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001953d:	eb 28                	jmp    c0019567 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001953f:	80 fa 03             	cmp    dl,0x3
c0019542:	75 05                	jne    c0019549 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019544:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019547:	eb 1e                	jmp    c0019567 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019549:	31 c0                	xor    eax,eax
c001954b:	80 fa 04             	cmp    dl,0x4
c001954e:	74 17                	je     c0019567 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019550:	80 fa 05             	cmp    dl,0x5
c0019553:	75 05                	jne    c001955a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019555:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019558:	eb 0d                	jmp    c0019567 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001955a:	80 fa 06             	cmp    dl,0x6
c001955d:	75 05                	jne    c0019564 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001955f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019562:	eb 03                	jmp    c0019567 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019564:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019567:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001956c:	0f 94 c2             	sete   dl
c001956f:	80 f9 05             	cmp    cl,0x5
c0019572:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019576:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001957b:	d3 e0                	shl    eax,cl
c001957d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019581:	74 0a                	je     c001958d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019583:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019586:	b9 07 00 00 00       	mov    ecx,0x7
c001958b:	eb 37                	jmp    c00195c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001958d:	01 f8                	add    eax,edi
c001958f:	b9 03 00 00 00       	mov    ecx,0x3
c0019594:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019599:	74 2b                	je     c00195c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001959b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00195a0:	75 0d                	jne    c00195af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00195a2:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00195a6:	01 c8                	add    eax,ecx
c00195a8:	b9 04 00 00 00       	mov    ecx,0x4
c00195ad:	eb 17                	jmp    c00195c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00195af:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00195b2:	b9 07 00 00 00       	mov    ecx,0x7
c00195b7:	eb 0d                	jmp    c00195c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00195b9:	b9 02 00 00 00       	mov    ecx,0x2
c00195be:	b2 01                	mov    dl,0x1
c00195c0:	31 c0                	xor    eax,eax
c00195c2:	eb 02                	jmp    c00195c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00195c4:	31 d2                	xor    edx,edx
c00195c6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00195ca:	89 0b                	mov    DWORD PTR [ebx],ecx
c00195cc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00195d0:	88 11                	mov    BYTE PTR [ecx],dl
c00195d2:	5a                   	pop    edx
c00195d3:	5b                   	pop    ebx
c00195d4:	5e                   	pop    esi
c00195d5:	5f                   	pop    edi
c00195d6:	c3                   	ret    
c00195d7:	90                   	nop

c00195d8 <EnvVarContainer::getEnv(char const*)>:
c00195d8:	57                   	push   edi
c00195d9:	56                   	push   esi
c00195da:	53                   	push   ebx
c00195db:	31 db                	xor    ebx,ebx
c00195dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00195e1:	39 1e                	cmp    DWORD PTR [esi],ebx
c00195e3:	7e 2b                	jle    c0019610 <EnvVarContainer::getEnv(char const*)+0x38>
c00195e5:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00195ec:	50                   	push   eax
c00195ed:	50                   	push   eax
c00195ee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00195f1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00195f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00195f8:	e8 c9 71 fe ff       	call   c00007c6 <strcmp>
c00195fd:	83 c4 10             	add    esp,0x10
c0019600:	85 c0                	test   eax,eax
c0019602:	75 09                	jne    c001960d <EnvVarContainer::getEnv(char const*)+0x35>
c0019604:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019607:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001960b:	eb 05                	jmp    c0019612 <EnvVarContainer::getEnv(char const*)+0x3a>
c001960d:	43                   	inc    ebx
c001960e:	eb d1                	jmp    c00195e1 <EnvVarContainer::getEnv(char const*)+0x9>
c0019610:	31 c0                	xor    eax,eax
c0019612:	5b                   	pop    ebx
c0019613:	5e                   	pop    esi
c0019614:	5f                   	pop    edi
c0019615:	c3                   	ret    

c0019616 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019616:	57                   	push   edi
c0019617:	56                   	push   esi
c0019618:	53                   	push   ebx
c0019619:	83 ec 1c             	sub    esp,0x1c
c001961c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019620:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019624:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019628:	57                   	push   edi
c0019629:	e8 c5 70 fe ff       	call   c00006f3 <strlen>
c001962e:	40                   	inc    eax
c001962f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019632:	e8 ff 5f ff ff       	call   c000f636 <malloc>
c0019637:	89 34 24             	mov    DWORD PTR [esp],esi
c001963a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001963e:	e8 b0 70 fe ff       	call   c00006f3 <strlen>
c0019643:	40                   	inc    eax
c0019644:	89 04 24             	mov    DWORD PTR [esp],eax
c0019647:	e8 ea 5f ff ff       	call   c000f636 <malloc>
c001964c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001964f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019653:	e8 9b 70 fe ff       	call   c00006f3 <strlen>
c0019658:	83 c4 0c             	add    esp,0xc
c001965b:	40                   	inc    eax
c001965c:	50                   	push   eax
c001965d:	6a 00                	push   0x0
c001965f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019663:	e8 6e 70 fe ff       	call   c00006d6 <memset>
c0019668:	89 3c 24             	mov    DWORD PTR [esp],edi
c001966b:	e8 83 70 fe ff       	call   c00006f3 <strlen>
c0019670:	83 c4 0c             	add    esp,0xc
c0019673:	40                   	inc    eax
c0019674:	50                   	push   eax
c0019675:	57                   	push   edi
c0019676:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001967a:	e8 21 70 fe ff       	call   c00006a0 <memcpy>
c001967f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019682:	e8 6c 70 fe ff       	call   c00006f3 <strlen>
c0019687:	83 c4 0c             	add    esp,0xc
c001968a:	40                   	inc    eax
c001968b:	50                   	push   eax
c001968c:	6a 00                	push   0x0
c001968e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019692:	e8 3f 70 fe ff       	call   c00006d6 <memset>
c0019697:	89 34 24             	mov    DWORD PTR [esp],esi
c001969a:	e8 54 70 fe ff       	call   c00006f3 <strlen>
c001969f:	83 c4 0c             	add    esp,0xc
c00196a2:	40                   	inc    eax
c00196a3:	50                   	push   eax
c00196a4:	56                   	push   esi
c00196a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196a9:	e8 f2 6f fe ff       	call   c00006a0 <memcpy>
c00196ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196b0:	40                   	inc    eax
c00196b1:	89 03                	mov    DWORD PTR [ebx],eax
c00196b3:	c1 e0 03             	shl    eax,0x3
c00196b6:	5a                   	pop    edx
c00196b7:	59                   	pop    ecx
c00196b8:	50                   	push   eax
c00196b9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00196bc:	e8 61 5f ff ff       	call   c000f622 <realloc>
c00196c1:	83 c4 0c             	add    esp,0xc
c00196c4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00196c7:	6a 08                	push   0x8
c00196c9:	8d 54 24 10          	lea    edx,[esp+0x10]
c00196cd:	52                   	push   edx
c00196ce:	8b 13                	mov    edx,DWORD PTR [ebx]
c00196d0:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c00196d4:	50                   	push   eax
c00196d5:	e8 c6 6f fe ff       	call   c00006a0 <memcpy>
c00196da:	83 c4 20             	add    esp,0x20
c00196dd:	5b                   	pop    ebx
c00196de:	5e                   	pop    esi
c00196df:	5f                   	pop    edi
c00196e0:	c3                   	ret    
c00196e1:	90                   	nop

c00196e2 <EnvVarContainer::deleteEnv(char const*)>:
c00196e2:	c3                   	ret    
c00196e3:	90                   	nop

c00196e4 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00196e4:	55                   	push   ebp
c00196e5:	57                   	push   edi
c00196e6:	56                   	push   esi
c00196e7:	53                   	push   ebx
c00196e8:	81 ec 38 01 00 00    	sub    esp,0x138
c00196ee:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c00196f5:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c00196fc:	68 14 01 00 00       	push   0x114
c0019701:	e8 30 5f ff ff       	call   c000f636 <malloc>
c0019706:	83 c4 0c             	add    esp,0xc
c0019709:	89 c7                	mov    edi,eax
c001970b:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001970e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019715:	50                   	push   eax
c0019716:	e8 19 97 ff ff       	call   c0012e34 <File::File(char const*, Process*)>
c001971b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001971e:	e8 e3 99 ff ff       	call   c0013106 <File::exists()>
c0019723:	83 c4 10             	add    esp,0x10
c0019726:	84 c0                	test   al,al
c0019728:	75 31                	jne    c001975b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001972a:	51                   	push   ecx
c001972b:	51                   	push   ecx
c001972c:	6a 12                	push   0x12
c001972e:	57                   	push   edi
c001972f:	e8 64 97 ff ff       	call   c0012e98 <File::open(FileOpenMode)>
c0019734:	8b 07                	mov    eax,DWORD PTR [edi]
c0019736:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0019739:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001973c:	e8 b2 6f fe ff       	call   c00006f3 <strlen>
c0019741:	5a                   	pop    edx
c0019742:	31 d2                	xor    edx,edx
c0019744:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019748:	51                   	push   ecx
c0019749:	55                   	push   ebp
c001974a:	52                   	push   edx
c001974b:	50                   	push   eax
c001974c:	57                   	push   edi
c001974d:	ff d3                	call   ebx
c001974f:	83 c4 14             	add    esp,0x14
c0019752:	57                   	push   edi
c0019753:	e8 9e 97 ff ff       	call   c0012ef6 <File::close()>
c0019758:	83 c4 10             	add    esp,0x10
c001975b:	31 db                	xor    ebx,ebx
c001975d:	50                   	push   eax
c001975e:	31 ed                	xor    ebp,ebp
c0019760:	68 00 01 00 00       	push   0x100
c0019765:	6a 00                	push   0x0
c0019767:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001976b:	50                   	push   eax
c001976c:	e8 65 6f fe ff       	call   c00006d6 <memset>
c0019771:	58                   	pop    eax
c0019772:	5a                   	pop    edx
c0019773:	6a 01                	push   0x1
c0019775:	57                   	push   edi
c0019776:	e8 1d 97 ff ff       	call   c0012e98 <File::open(FileOpenMode)>
c001977b:	83 c4 10             	add    esp,0x10
c001977e:	83 ec 0c             	sub    esp,0xc
c0019781:	8b 07                	mov    eax,DWORD PTR [edi]
c0019783:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019787:	51                   	push   ecx
c0019788:	8d 54 24 23          	lea    edx,[esp+0x23]
c001978c:	52                   	push   edx
c001978d:	6a 00                	push   0x0
c001978f:	6a 01                	push   0x1
c0019791:	57                   	push   edi
c0019792:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019795:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019799:	83 c4 20             	add    esp,0x20
c001979c:	3c 0d                	cmp    al,0xd
c001979e:	0f 84 12 01 00 00    	je     c00198b6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00197a4:	85 db                	test   ebx,ebx
c00197a6:	0f 84 fd 00 00 00    	je     c00198a9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00197ac:	3c 0a                	cmp    al,0xa
c00197ae:	74 13                	je     c00197c3 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00197b0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00197b5:	74 0c                	je     c00197c3 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00197b7:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c00197bd:	0f 8e e6 00 00 00    	jle    c00198a9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00197c3:	83 ec 0c             	sub    esp,0xc
c00197c6:	8d 53 01             	lea    edx,[ebx+0x1]
c00197c9:	29 dd                	sub    ebp,ebx
c00197cb:	52                   	push   edx
c00197cc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00197d0:	e8 61 5e ff ff       	call   c000f636 <malloc>
c00197d5:	8d 4d 04             	lea    ecx,[ebp+0x4]
c00197d8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00197dc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00197df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00197e3:	e8 4e 5e ff ff       	call   c000f636 <malloc>
c00197e8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00197ec:	83 c4 0c             	add    esp,0xc
c00197ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00197f3:	52                   	push   edx
c00197f4:	6a 00                	push   0x0
c00197f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00197fa:	e8 d7 6e fe ff       	call   c00006d6 <memset>
c00197ff:	83 c4 0c             	add    esp,0xc
c0019802:	53                   	push   ebx
c0019803:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019807:	55                   	push   ebp
c0019808:	01 eb                	add    ebx,ebp
c001980a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001980e:	e8 8d 6e fe ff       	call   c00006a0 <memcpy>
c0019813:	83 c4 0c             	add    esp,0xc
c0019816:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001981a:	51                   	push   ecx
c001981b:	6a 00                	push   0x0
c001981d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019821:	e8 b0 6e fe ff       	call   c00006d6 <memset>
c0019826:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019829:	e8 c5 6e fe ff       	call   c00006f3 <strlen>
c001982e:	83 c4 0c             	add    esp,0xc
c0019831:	50                   	push   eax
c0019832:	53                   	push   ebx
c0019833:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019837:	e8 64 6e fe ff       	call   c00006a0 <memcpy>
c001983c:	5b                   	pop    ebx
c001983d:	58                   	pop    eax
c001983e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019842:	68 6c a6 02 c0       	push   0xc002a66c
c0019847:	e8 8f 90 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001984c:	8b 06                	mov    eax,DWORD PTR [esi]
c001984e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019851:	40                   	inc    eax
c0019852:	83 c4 10             	add    esp,0x10
c0019855:	89 06                	mov    DWORD PTR [esi],eax
c0019857:	85 d2                	test   edx,edx
c0019859:	75 0c                	jne    c0019867 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001985b:	83 ec 0c             	sub    esp,0xc
c001985e:	6a 08                	push   0x8
c0019860:	e8 d1 5d ff ff       	call   c000f636 <malloc>
c0019865:	eb 0c                	jmp    c0019873 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c0019867:	c1 e0 03             	shl    eax,0x3
c001986a:	51                   	push   ecx
c001986b:	51                   	push   ecx
c001986c:	50                   	push   eax
c001986d:	52                   	push   edx
c001986e:	e8 af 5d ff ff       	call   c000f622 <realloc>
c0019873:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0019876:	83 c4 10             	add    esp,0x10
c0019879:	31 db                	xor    ebx,ebx
c001987b:	52                   	push   edx
c001987c:	6a 08                	push   0x8
c001987e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019882:	50                   	push   eax
c0019883:	8b 16                	mov    edx,DWORD PTR [esi]
c0019885:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019888:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001988c:	50                   	push   eax
c001988d:	e8 0e 6e fe ff       	call   c00006a0 <memcpy>
c0019892:	83 c4 0c             	add    esp,0xc
c0019895:	68 00 01 00 00       	push   0x100
c001989a:	6a 00                	push   0x0
c001989c:	55                   	push   ebp
c001989d:	31 ed                	xor    ebp,ebp
c001989f:	e8 32 6e fe ff       	call   c00006d6 <memset>
c00198a4:	83 c4 10             	add    esp,0x10
c00198a7:	eb 0d                	jmp    c00198b6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00198a9:	3c 3d                	cmp    al,0x3d
c00198ab:	74 07                	je     c00198b4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c00198ad:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c00198b1:	45                   	inc    ebp
c00198b2:	eb 02                	jmp    c00198b6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00198b4:	89 eb                	mov    ebx,ebp
c00198b6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00198bb:	0f 85 bd fe ff ff    	jne    c001977e <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c00198c1:	50                   	push   eax
c00198c2:	50                   	push   eax
c00198c3:	ff 36                	push   DWORD PTR [esi]
c00198c5:	68 7a a6 02 c0       	push   0xc002a67a
c00198ca:	e8 0c 90 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00198cf:	81 c4 3c 01 00 00    	add    esp,0x13c
c00198d5:	5b                   	pop    ebx
c00198d6:	5e                   	pop    esi
c00198d7:	5f                   	pop    edi
c00198d8:	5d                   	pop    ebp
c00198d9:	c3                   	ret    

c00198da <EnvVarContainer::__loadSystem()>:
c00198da:	83 ec 10             	sub    esp,0x10
c00198dd:	68 00 c4 02 c0       	push   0xc002c400
c00198e2:	68 a5 a6 02 c0       	push   0xc002a6a5
c00198e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00198eb:	e8 f4 fd ff ff       	call   c00196e4 <EnvVarContainer::loadFrom(char const*, char const*)>
c00198f0:	83 c4 1c             	add    esp,0x1c
c00198f3:	c3                   	ret    

c00198f4 <EnvVarContainer::__loadUser()>:
c00198f4:	c3                   	ret    
c00198f5:	90                   	nop

c00198f6 <EnvVarContainer::EnvVarContainer(Process*)>:
c00198f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00198fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019904:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019908:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001990b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001990f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019916:	90                   	nop
c0019917:	c3                   	ret    

c0019918 <EnvVarContainer::~EnvVarContainer()>:
c0019918:	83 ec 0c             	sub    esp,0xc
c001991b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001991f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019922:	85 c0                	test   eax,eax
c0019924:	74 1d                	je     c0019943 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001992a:	8b 00                	mov    eax,DWORD PTR [eax]
c001992c:	85 c0                	test   eax,eax
c001992e:	74 13                	je     c0019943 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019934:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019937:	83 ec 0c             	sub    esp,0xc
c001993a:	50                   	push   eax
c001993b:	e8 06 5d ff ff       	call   c000f646 <free>
c0019940:	83 c4 10             	add    esp,0x10
c0019943:	90                   	nop
c0019944:	83 c4 0c             	add    esp,0xc
c0019947:	c3                   	ret    

c0019948 <Krnl::getEnv(Process*, char const*)>:
c0019948:	53                   	push   ebx
c0019949:	83 ec 08             	sub    esp,0x8
c001994c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019950:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019954:	39 05 14 e4 02 c0    	cmp    DWORD PTR ds:0xc002e414,eax
c001995a:	74 04                	je     c0019960 <Krnl::getEnv(Process*, char const*)+0x18>
c001995c:	85 c0                	test   eax,eax
c001995e:	75 0b                	jne    c001996b <Krnl::getEnv(Process*, char const*)+0x23>
c0019960:	a1 f0 d9 02 c0       	mov    eax,ds:0xc002d9f0
c0019965:	85 c0                	test   eax,eax
c0019967:	75 19                	jne    c0019982 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019969:	eb 27                	jmp    c0019992 <Krnl::getEnv(Process*, char const*)+0x4a>
c001996b:	52                   	push   edx
c001996c:	52                   	push   edx
c001996d:	53                   	push   ebx
c001996e:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019974:	e8 5f fc ff ff       	call   c00195d8 <EnvVarContainer::getEnv(char const*)>
c0019979:	83 c4 10             	add    esp,0x10
c001997c:	85 c0                	test   eax,eax
c001997e:	75 28                	jne    c00199a8 <Krnl::getEnv(Process*, char const*)+0x60>
c0019980:	eb de                	jmp    c0019960 <Krnl::getEnv(Process*, char const*)+0x18>
c0019982:	52                   	push   edx
c0019983:	52                   	push   edx
c0019984:	53                   	push   ebx
c0019985:	50                   	push   eax
c0019986:	e8 4d fc ff ff       	call   c00195d8 <EnvVarContainer::getEnv(char const*)>
c001998b:	83 c4 10             	add    esp,0x10
c001998e:	85 c0                	test   eax,eax
c0019990:	75 16                	jne    c00199a8 <Krnl::getEnv(Process*, char const*)+0x60>
c0019992:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019996:	a1 f4 d9 02 c0       	mov    eax,ds:0xc002d9f4
c001999b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001999f:	83 c4 08             	add    esp,0x8
c00199a2:	5b                   	pop    ebx
c00199a3:	e9 30 fc ff ff       	jmp    c00195d8 <EnvVarContainer::getEnv(char const*)>
c00199a8:	83 c4 08             	add    esp,0x8
c00199ab:	5b                   	pop    ebx
c00199ac:	c3                   	ret    

c00199ad <Krnl::setEnvSystem(char const*, char const*)>:
c00199ad:	83 ec 10             	sub    esp,0x10
c00199b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00199b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00199b8:	ff 35 f4 d9 02 c0    	push   DWORD PTR ds:0xc002d9f4
c00199be:	e8 53 fc ff ff       	call   c0019616 <EnvVarContainer::setEnv(char const*, char const*)>
c00199c3:	83 c4 1c             	add    esp,0x1c
c00199c6:	c3                   	ret    

c00199c7 <Krnl::setEnvUser(char const*, char const*)>:
c00199c7:	a1 f0 d9 02 c0       	mov    eax,ds:0xc002d9f0
c00199cc:	85 c0                	test   eax,eax
c00199ce:	74 15                	je     c00199e5 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00199d0:	83 ec 10             	sub    esp,0x10
c00199d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00199d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00199db:	50                   	push   eax
c00199dc:	e8 35 fc ff ff       	call   c0019616 <EnvVarContainer::setEnv(char const*, char const*)>
c00199e1:	83 c4 1c             	add    esp,0x1c
c00199e4:	c3                   	ret    
c00199e5:	c3                   	ret    

c00199e6 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00199e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199ea:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c00199f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00199f4:	e9 1d fc ff ff       	jmp    c0019616 <EnvVarContainer::setEnv(char const*, char const*)>

c00199f9 <Krnl::deleteEnvSystem(char const*)>:
c00199f9:	c3                   	ret    

c00199fa <Krnl::deleteEnvUser(char const*)>:
c00199fa:	c3                   	ret    

c00199fb <Krnl::deleteEnvProcess(Process*, char const*)>:
c00199fb:	c3                   	ret    

c00199fc <Krnl::newProcessEnv(Process*)>:
c00199fc:	83 ec 28             	sub    esp,0x28
c00199ff:	6a 0c                	push   0xc
c0019a01:	e8 30 5c ff ff       	call   c000f636 <malloc>
c0019a06:	5a                   	pop    edx
c0019a07:	59                   	pop    ecx
c0019a08:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019a0c:	50                   	push   eax
c0019a0d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a11:	e8 e0 fe ff ff       	call   c00198f6 <EnvVarContainer::EnvVarContainer(Process*)>
c0019a16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a1a:	83 c4 2c             	add    esp,0x2c
c0019a1d:	c3                   	ret    

c0019a1e <Krnl::copyProcessEnv(Process*, Process*)>:
c0019a1e:	56                   	push   esi
c0019a1f:	53                   	push   ebx
c0019a20:	83 ec 10             	sub    esp,0x10
c0019a23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a27:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c0019a2d:	6a 0c                	push   0xc
c0019a2f:	e8 02 5c ff ff       	call   c000f636 <malloc>
c0019a34:	89 c3                	mov    ebx,eax
c0019a36:	58                   	pop    eax
c0019a37:	5a                   	pop    edx
c0019a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a3c:	53                   	push   ebx
c0019a3d:	e8 b4 fe ff ff       	call   c00198f6 <EnvVarContainer::EnvVarContainer(Process*)>
c0019a42:	8b 06                	mov    eax,DWORD PTR [esi]
c0019a44:	89 03                	mov    DWORD PTR [ebx],eax
c0019a46:	c1 e0 03             	shl    eax,0x3
c0019a49:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a4c:	e8 e5 5b ff ff       	call   c000f636 <malloc>
c0019a51:	83 c4 0c             	add    esp,0xc
c0019a54:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019a57:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0019a59:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019a60:	52                   	push   edx
c0019a61:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019a64:	50                   	push   eax
c0019a65:	e8 36 6c fe ff       	call   c00006a0 <memcpy>
c0019a6a:	89 d8                	mov    eax,ebx
c0019a6c:	83 c4 14             	add    esp,0x14
c0019a6f:	5b                   	pop    ebx
c0019a70:	5e                   	pop    esi
c0019a71:	c3                   	ret    

c0019a72 <Krnl::loadSystemEnv()>:
c0019a72:	53                   	push   ebx
c0019a73:	83 ec 14             	sub    esp,0x14
c0019a76:	6a 0c                	push   0xc
c0019a78:	e8 b9 5b ff ff       	call   c000f636 <malloc>
c0019a7d:	89 c3                	mov    ebx,eax
c0019a7f:	58                   	pop    eax
c0019a80:	5a                   	pop    edx
c0019a81:	ff 35 14 e4 02 c0    	push   DWORD PTR ds:0xc002e414
c0019a87:	53                   	push   ebx
c0019a88:	e8 69 fe ff ff       	call   c00198f6 <EnvVarContainer::EnvVarContainer(Process*)>
c0019a8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a90:	89 1d f4 d9 02 c0    	mov    DWORD PTR ds:0xc002d9f4,ebx
c0019a96:	e8 3f fe ff ff       	call   c00198da <EnvVarContainer::__loadSystem()>
c0019a9b:	83 c4 18             	add    esp,0x18
c0019a9e:	5b                   	pop    ebx
c0019a9f:	c3                   	ret    

c0019aa0 <Krnl::loadUserEnv()>:
c0019aa0:	53                   	push   ebx
c0019aa1:	83 ec 14             	sub    esp,0x14
c0019aa4:	6a 0c                	push   0xc
c0019aa6:	e8 8b 5b ff ff       	call   c000f636 <malloc>
c0019aab:	89 c3                	mov    ebx,eax
c0019aad:	58                   	pop    eax
c0019aae:	5a                   	pop    edx
c0019aaf:	ff 35 14 e4 02 c0    	push   DWORD PTR ds:0xc002e414
c0019ab5:	53                   	push   ebx
c0019ab6:	e8 3b fe ff ff       	call   c00198f6 <EnvVarContainer::EnvVarContainer(Process*)>
c0019abb:	89 1d f0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9f0,ebx
c0019ac1:	83 c4 18             	add    esp,0x18
c0019ac4:	5b                   	pop    ebx
c0019ac5:	c3                   	ret    

c0019ac6 <Krnl::flushEnv()>:
c0019ac6:	c3                   	ret    

c0019ac7 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019ac7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019acb:	8b 15 f0 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9f0
c0019ad1:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019ad7:	a1 f4 d9 02 c0       	mov    eax,ds:0xc002d9f4
c0019adc:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ade:	03 01                	add    eax,DWORD PTR [ecx]
c0019ae0:	85 d2                	test   edx,edx
c0019ae2:	74 02                	je     c0019ae6 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019ae4:	03 02                	add    eax,DWORD PTR [edx]
c0019ae6:	c3                   	ret    

c0019ae7 <Krnl::getProcessEnvPair(Process*, int)>:
c0019ae7:	57                   	push   edi
c0019ae8:	8b 0d f0 d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d9f0
c0019aee:	56                   	push   esi
c0019aef:	85 c9                	test   ecx,ecx
c0019af1:	53                   	push   ebx
c0019af2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019af6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019afa:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c0019b00:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019b04:	8b 02                	mov    eax,DWORD PTR [edx]
c0019b06:	75 47                	jne    c0019b4f <Krnl::getProcessEnvPair(Process*, int)+0x68>
c0019b08:	39 c3                	cmp    ebx,eax
c0019b0a:	7c 47                	jl     c0019b53 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c0019b0c:	8b 15 f4 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9f4
c0019b12:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019b14:	01 c1                	add    ecx,eax
c0019b16:	39 d9                	cmp    ecx,ebx
c0019b18:	7e 6c                	jle    c0019b86 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019b1a:	51                   	push   ecx
c0019b1b:	89 d9                	mov    ecx,ebx
c0019b1d:	29 c1                	sub    ecx,eax
c0019b1f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019b22:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c0019b26:	53                   	push   ebx
c0019b27:	68 c7 a6 02 c0       	push   0xc002a6c7
c0019b2c:	e8 aa 8d ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0019b31:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c0019b37:	2b 18                	sub    ebx,DWORD PTR [eax]
c0019b39:	a1 f4 d9 02 c0       	mov    eax,ds:0xc002d9f4
c0019b3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019b41:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019b45:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019b48:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019b4b:	89 06                	mov    DWORD PTR [esi],eax
c0019b4d:	eb 51                	jmp    c0019ba0 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c0019b4f:	39 c3                	cmp    ebx,eax
c0019b51:	7d 05                	jge    c0019b58 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019b53:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019b56:	eb 20                	jmp    c0019b78 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c0019b58:	8b 39                	mov    edi,DWORD PTR [ecx]
c0019b5a:	8d 14 07             	lea    edx,[edi+eax*1]
c0019b5d:	39 da                	cmp    edx,ebx
c0019b5f:	7e 04                	jle    c0019b65 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019b61:	29 c3                	sub    ebx,eax
c0019b63:	eb 10                	jmp    c0019b75 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c0019b65:	8b 0d f4 d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d9f4
c0019b6b:	03 11                	add    edx,DWORD PTR [ecx]
c0019b6d:	39 da                	cmp    edx,ebx
c0019b6f:	7e 15                	jle    c0019b86 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019b71:	29 c3                	sub    ebx,eax
c0019b73:	29 fb                	sub    ebx,edi
c0019b75:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019b78:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019b7c:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019b7f:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019b82:	89 06                	mov    DWORD PTR [esi],eax
c0019b84:	eb 1d                	jmp    c0019ba3 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c0019b86:	83 ec 0c             	sub    esp,0xc
c0019b89:	68 db a6 02 c0       	push   0xc002a6db
c0019b8e:	e8 18 00 00 00       	call   c0019bab <Krnl::panic(char const*)>
c0019b93:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0019b99:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019ba0:	83 c4 10             	add    esp,0x10
c0019ba3:	89 f0                	mov    eax,esi
c0019ba5:	5b                   	pop    ebx
c0019ba6:	5e                   	pop    esi
c0019ba7:	5f                   	pop    edi
c0019ba8:	c2 04 00             	ret    0x4

c0019bab <Krnl::panic(char const*)>:
c0019bab:	55                   	push   ebp
c0019bac:	89 e5                	mov    ebp,esp
c0019bae:	53                   	push   ebx
c0019baf:	50                   	push   eax
c0019bb0:	a1 fc d9 02 c0       	mov    eax,ds:0xc002d9fc
c0019bb5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019bb8:	85 c0                	test   eax,eax
c0019bba:	74 02                	je     c0019bbe <Krnl::panic(char const*)+0x13>
c0019bbc:	ff d0                	call   eax
c0019bbe:	fa                   	cli    
c0019bbf:	c6 05 00 da 02 c0 01 	mov    BYTE PTR ds:0xc002da00,0x1
c0019bc6:	83 ec 08             	sub    esp,0x8
c0019bc9:	c6 05 04 be 02 c0 00 	mov    BYTE PTR ds:0xc002be04,0x0
c0019bd0:	53                   	push   ebx
c0019bd1:	68 f5 a6 02 c0       	push   0xc002a6f5
c0019bd6:	e8 00 8d ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0019bdb:	58                   	pop    eax
c0019bdc:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019be1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019be7:	e8 b1 6e ff ff       	call   c0010a9d <setActiveTerminal(VgaText*)>
c0019bec:	83 c4 0c             	add    esp,0xc
c0019bef:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019bf4:	6a 01                	push   0x1
c0019bf6:	6a 0f                	push   0xf
c0019bf8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019bfe:	e8 cb 68 ff ff       	call   c00104ce <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019c03:	5a                   	pop    edx
c0019c04:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019c09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c0f:	e8 2a 71 ff ff       	call   c0010d3e <VgaText::clearScreen()>
c0019c14:	59                   	pop    ecx
c0019c15:	58                   	pop    eax
c0019c16:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019c1b:	68 0e a7 02 c0       	push   0xc002a70e
c0019c20:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c26:	e8 91 72 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0019c2b:	58                   	pop    eax
c0019c2c:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019c31:	5a                   	pop    edx
c0019c32:	68 b4 a7 02 c0       	push   0xc002a7b4
c0019c37:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c3d:	e8 7a 72 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0019c42:	59                   	pop    ecx
c0019c43:	58                   	pop    eax
c0019c44:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019c49:	68 2a a7 02 c0       	push   0xc002a72a
c0019c4e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c54:	e8 63 72 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0019c59:	58                   	pop    eax
c0019c5a:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019c5f:	5a                   	pop    edx
c0019c60:	53                   	push   ebx
c0019c61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c67:	e8 50 72 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0019c6c:	59                   	pop    ecx
c0019c6d:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019c72:	5b                   	pop    ebx
c0019c73:	68 4a a7 02 c0       	push   0xc002a74a
c0019c78:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c7e:	e8 39 72 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0019c83:	58                   	pop    eax
c0019c84:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019c89:	5a                   	pop    edx
c0019c8a:	68 f0 a7 02 c0       	push   0xc002a7f0
c0019c8f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c95:	e8 22 72 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0019c9a:	59                   	pop    ecx
c0019c9b:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019ca0:	5b                   	pop    ebx
c0019ca1:	68 2a a7 02 c0       	push   0xc002a72a
c0019ca6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cac:	e8 0b 72 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0019cb1:	58                   	pop    eax
c0019cb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019cb7:	5a                   	pop    edx
c0019cb8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019cbb:	83 c0 0c             	add    eax,0xc
c0019cbe:	50                   	push   eax
c0019cbf:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019cc4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cca:	e8 ed 71 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0019ccf:	59                   	pop    ecx
c0019cd0:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019cd5:	5b                   	pop    ebx
c0019cd6:	68 49 a7 02 c0       	push   0xc002a749
c0019cdb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ce1:	e8 d6 71 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0019ce6:	58                   	pop    eax
c0019ce7:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019cec:	5a                   	pop    edx
c0019ced:	68 1c a8 02 c0       	push   0xc002a81c
c0019cf2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cf8:	e8 bf 71 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0019cfd:	59                   	pop    ecx
c0019cfe:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019d03:	5b                   	pop    ebx
c0019d04:	68 5c a8 02 c0       	push   0xc002a85c
c0019d09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d0f:	e8 a8 71 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0019d14:	58                   	pop    eax
c0019d15:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019d1a:	5a                   	pop    edx
c0019d1b:	68 35 a7 02 c0       	push   0xc002a735
c0019d20:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d26:	e8 91 71 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0019d2b:	59                   	pop    ecx
c0019d2c:	5b                   	pop    ebx
c0019d2d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019d30:	68 4d a7 02 c0       	push   0xc002a74d
c0019d35:	e8 a1 8b ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0019d3a:	58                   	pop    eax
c0019d3b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019d3e:	5a                   	pop    edx
c0019d3f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019d42:	68 56 a7 02 c0       	push   0xc002a756
c0019d47:	e8 8f 8b ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0019d4c:	59                   	pop    ecx
c0019d4d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019d50:	5b                   	pop    ebx
c0019d51:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d53:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019d56:	68 5f a7 02 c0       	push   0xc002a75f
c0019d5b:	e8 7b 8b ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0019d60:	58                   	pop    eax
c0019d61:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019d66:	5a                   	pop    edx
c0019d67:	68 a0 a8 02 c0       	push   0xc002a8a0
c0019d6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d72:	e8 45 71 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0019d77:	59                   	pop    ecx
c0019d78:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019d7d:	5b                   	pop    ebx
c0019d7e:	68 68 a7 02 c0       	push   0xc002a768
c0019d83:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d89:	e8 2e 71 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0019d8e:	0f 20 c0             	mov    eax,cr0
c0019d91:	5a                   	pop    edx
c0019d92:	59                   	pop    ecx
c0019d93:	50                   	push   eax
c0019d94:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019d99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d9f:	e8 3e 71 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c0019da4:	5b                   	pop    ebx
c0019da5:	58                   	pop    eax
c0019da6:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019dab:	68 72 a7 02 c0       	push   0xc002a772
c0019db0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019db6:	e8 01 71 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0019dbb:	0f 20 d0             	mov    eax,cr2
c0019dbe:	5a                   	pop    edx
c0019dbf:	59                   	pop    ecx
c0019dc0:	50                   	push   eax
c0019dc1:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019dc6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dcc:	e8 11 71 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c0019dd1:	5b                   	pop    ebx
c0019dd2:	58                   	pop    eax
c0019dd3:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019dd8:	68 7c a7 02 c0       	push   0xc002a77c
c0019ddd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019de3:	e8 d4 70 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0019de8:	0f 20 d8             	mov    eax,cr3
c0019deb:	5a                   	pop    edx
c0019dec:	59                   	pop    ecx
c0019ded:	50                   	push   eax
c0019dee:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019df3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019df9:	e8 e4 70 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c0019dfe:	5b                   	pop    ebx
c0019dff:	58                   	pop    eax
c0019e00:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019e05:	68 8f a7 02 c0       	push   0xc002a78f
c0019e0a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e10:	e8 a7 70 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0019e15:	0f 20 e0             	mov    eax,cr4
c0019e18:	5a                   	pop    edx
c0019e19:	59                   	pop    ecx
c0019e1a:	50                   	push   eax
c0019e1b:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019e20:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e26:	e8 b7 70 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c0019e2b:	5b                   	pop    ebx
c0019e2c:	58                   	pop    eax
c0019e2d:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019e32:	68 99 a7 02 c0       	push   0xc002a799
c0019e37:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e3d:	e8 7a 70 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0019e42:	5a                   	pop    edx
c0019e43:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019e48:	59                   	pop    ecx
c0019e49:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019e4f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019e52:	50                   	push   eax
c0019e53:	e8 8a 70 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c0019e58:	5b                   	pop    ebx
c0019e59:	58                   	pop    eax
c0019e5a:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019e5f:	68 b0 a7 02 c0       	push   0xc002a7b0
c0019e64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e6a:	e8 4d 70 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0019e6f:	5a                   	pop    edx
c0019e70:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019e75:	59                   	pop    ecx
c0019e76:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019e7c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019e7f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019e82:	50                   	push   eax
c0019e83:	e8 5a 70 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c0019e88:	5b                   	pop    ebx
c0019e89:	58                   	pop    eax
c0019e8a:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019e8f:	68 b0 a7 02 c0       	push   0xc002a7b0
c0019e94:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e9a:	e8 1d 70 ff ff       	call   c0010ebc <VgaText::puts(char const*)>
c0019e9f:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0019ea4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019ea7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019ead:	8b 12                	mov    edx,DWORD PTR [edx]
c0019eaf:	59                   	pop    ecx
c0019eb0:	5b                   	pop    ebx
c0019eb1:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019eb4:	50                   	push   eax
c0019eb5:	e8 28 70 ff ff       	call   c0010ee2 <VgaText::putx(unsigned int)>
c0019eba:	83 c4 10             	add    esp,0x10
c0019ebd:	b2 fe                	mov    dl,0xfe
c0019ebf:	e4 60                	in     al,0x60
c0019ec1:	3c 1c                	cmp    al,0x1c
c0019ec3:	74 04                	je     c0019ec9 <Krnl::panic(char const*)+0x31e>
c0019ec5:	3c 5a                	cmp    al,0x5a
c0019ec7:	75 f6                	jne    c0019ebf <Krnl::panic(char const*)+0x314>
c0019ec9:	e4 64                	in     al,0x64
c0019ecb:	a8 02                	test   al,0x2
c0019ecd:	75 fa                	jne    c0019ec9 <Krnl::panic(char const*)+0x31e>
c0019ecf:	88 d0                	mov    al,dl
c0019ed1:	e6 64                	out    0x64,al
c0019ed3:	fa                   	cli    
c0019ed4:	f4                   	hlt    
c0019ed5:	eb e8                	jmp    c0019ebf <Krnl::panic(char const*)+0x314>

c0019ed7 <Net::switchEndian16(unsigned short)>:
c0019ed7:	83 ec 04             	sub    esp,0x4
c0019eda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ede:	66 89 04 24          	mov    WORD PTR [esp],ax
c0019ee2:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019ee6:	c1 f8 08             	sar    eax,0x8
c0019ee9:	89 c2                	mov    edx,eax
c0019eeb:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019eef:	c1 e0 08             	shl    eax,0x8
c0019ef2:	09 d0                	or     eax,edx
c0019ef4:	83 c4 04             	add    esp,0x4
c0019ef7:	c3                   	ret    

c0019ef8 <Net::switchEndian32(unsigned int)>:
c0019ef8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019efc:	c1 e8 18             	shr    eax,0x18
c0019eff:	89 c2                	mov    edx,eax
c0019f01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f05:	c1 e0 08             	shl    eax,0x8
c0019f08:	25 00 00 ff 00       	and    eax,0xff0000
c0019f0d:	09 c2                	or     edx,eax
c0019f0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f13:	c1 e8 08             	shr    eax,0x8
c0019f16:	25 00 ff 00 00       	and    eax,0xff00
c0019f1b:	09 c2                	or     edx,eax
c0019f1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f21:	c1 e0 18             	shl    eax,0x18
c0019f24:	09 d0                	or     eax,edx
c0019f26:	c3                   	ret    

c0019f27 <Net::crc32Calc(unsigned char*, int)>:
c0019f27:	83 ec 10             	sub    esp,0x10
c0019f2a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019f2f:	75 07                	jne    c0019f38 <Net::crc32Calc(unsigned char*, int)+0x11>
c0019f31:	b8 00 00 00 00       	mov    eax,0x0
c0019f36:	eb 7c                	jmp    c0019fb4 <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019f38:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0019f3d:	7f 07                	jg     c0019f46 <Net::crc32Calc(unsigned char*, int)+0x1f>
c0019f3f:	b8 00 00 00 00       	mov    eax,0x0
c0019f44:	eb 6e                	jmp    c0019fb4 <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019f46:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0019f4e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019f56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f5a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019f5e:	7d 4e                	jge    c0019fae <Net::crc32Calc(unsigned char*, int)+0x87>
c0019f60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f68:	01 d0                	add    eax,edx
c0019f6a:	8a 00                	mov    al,BYTE PTR [eax]
c0019f6c:	0f b6 c0             	movzx  eax,al
c0019f6f:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0019f73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019f7b:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0019f80:	7f 26                	jg     c0019fa8 <Net::crc32Calc(unsigned char*, int)+0x81>
c0019f82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f86:	83 e0 01             	and    eax,0x1
c0019f89:	74 0d                	je     c0019f98 <Net::crc32Calc(unsigned char*, int)+0x71>
c0019f8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f8f:	d1 e8                	shr    eax,1
c0019f91:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0019f96:	eb 06                	jmp    c0019f9e <Net::crc32Calc(unsigned char*, int)+0x77>
c0019f98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f9c:	d1 e8                	shr    eax,1
c0019f9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019fa2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019fa6:	eb d3                	jmp    c0019f7b <Net::crc32Calc(unsigned char*, int)+0x54>
c0019fa8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0019fac:	eb a8                	jmp    c0019f56 <Net::crc32Calc(unsigned char*, int)+0x2f>
c0019fae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fb2:	f7 d0                	not    eax
c0019fb4:	83 c4 10             	add    esp,0x10
c0019fb7:	c3                   	ret    

c0019fb8 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0019fb8:	83 ec 1c             	sub    esp,0x1c
c0019fbb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019fbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019fc3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019fcb:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c0019fd0:	7f 14                	jg     c0019fe6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c0019fd2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019fd6:	8d 50 01             	lea    edx,[eax+0x1]
c0019fd9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019fdd:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0019fe0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019fe4:	eb e5                	jmp    c0019fcb <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c0019fe6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019fea:	8d 50 01             	lea    edx,[eax+0x1]
c0019fed:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019ff1:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0019ff4:	83 ec 04             	sub    esp,0x4
c0019ff7:	6a 06                	push   0x6
c0019ff9:	8d 44 24 36          	lea    eax,[esp+0x36]
c0019ffd:	50                   	push   eax
c0019ffe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a002:	e8 99 66 fe ff       	call   c00006a0 <memcpy>
c001a007:	83 c4 10             	add    esp,0x10
c001a00a:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a00f:	83 ec 04             	sub    esp,0x4
c001a012:	6a 06                	push   0x6
c001a014:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a018:	50                   	push   eax
c001a019:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a01d:	e8 7e 66 fe ff       	call   c00006a0 <memcpy>
c001a022:	83 c4 10             	add    esp,0x10
c001a025:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a02a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a02e:	0f b7 c0             	movzx  eax,ax
c001a031:	c1 f8 08             	sar    eax,0x8
c001a034:	89 c1                	mov    ecx,eax
c001a036:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a03a:	8d 50 01             	lea    edx,[eax+0x1]
c001a03d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a041:	88 ca                	mov    dl,cl
c001a043:	88 10                	mov    BYTE PTR [eax],dl
c001a045:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a049:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a04d:	8d 48 01             	lea    ecx,[eax+0x1]
c001a050:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a054:	88 10                	mov    BYTE PTR [eax],dl
c001a056:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a05a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a05e:	83 ec 04             	sub    esp,0x4
c001a061:	52                   	push   edx
c001a062:	50                   	push   eax
c001a063:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a067:	e8 34 66 fe ff       	call   c00006a0 <memcpy>
c001a06c:	83 c4 10             	add    esp,0x10
c001a06f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a073:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a077:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a07b:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a07f:	83 ec 08             	sub    esp,0x8
c001a082:	50                   	push   eax
c001a083:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a087:	e8 9b fe ff ff       	call   c0019f27 <Net::crc32Calc(unsigned char*, int)>
c001a08c:	83 c4 10             	add    esp,0x10
c001a08f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a093:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a097:	c1 e8 18             	shr    eax,0x18
c001a09a:	89 c1                	mov    ecx,eax
c001a09c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0a0:	8d 50 01             	lea    edx,[eax+0x1]
c001a0a3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a0a7:	88 ca                	mov    dl,cl
c001a0a9:	88 10                	mov    BYTE PTR [eax],dl
c001a0ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0af:	c1 e8 10             	shr    eax,0x10
c001a0b2:	89 c1                	mov    ecx,eax
c001a0b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0b8:	8d 50 01             	lea    edx,[eax+0x1]
c001a0bb:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a0bf:	88 ca                	mov    dl,cl
c001a0c1:	88 10                	mov    BYTE PTR [eax],dl
c001a0c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0c7:	c1 e8 08             	shr    eax,0x8
c001a0ca:	89 c1                	mov    ecx,eax
c001a0cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0d0:	8d 50 01             	lea    edx,[eax+0x1]
c001a0d3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a0d7:	88 ca                	mov    dl,cl
c001a0d9:	88 10                	mov    BYTE PTR [eax],dl
c001a0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0df:	8d 50 01             	lea    edx,[eax+0x1]
c001a0e2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a0e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a0ea:	88 10                	mov    BYTE PTR [eax],dl
c001a0ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a0f0:	83 c4 1c             	add    esp,0x1c
c001a0f3:	c3                   	ret    

c001a0f4 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a0f4:	83 ec 2c             	sub    esp,0x2c
c001a0f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a0fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a0ff:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001a104:	83 ec 04             	sub    esp,0x4
c001a107:	6a 06                	push   0x6
c001a109:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a10d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a111:	83 c0 0e             	add    eax,0xe
c001a114:	50                   	push   eax
c001a115:	e8 86 65 fe ff       	call   c00006a0 <memcpy>
c001a11a:	83 c4 10             	add    esp,0x10
c001a11d:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a122:	83 ec 04             	sub    esp,0x4
c001a125:	6a 06                	push   0x6
c001a127:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a12b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a12f:	83 c0 08             	add    eax,0x8
c001a132:	50                   	push   eax
c001a133:	e8 68 65 fe ff       	call   c00006a0 <memcpy>
c001a138:	83 c4 10             	add    esp,0x10
c001a13b:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a140:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a144:	8d 50 01             	lea    edx,[eax+0x1]
c001a147:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a14b:	8a 00                	mov    al,BYTE PTR [eax]
c001a14d:	0f b6 c0             	movzx  eax,al
c001a150:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001a155:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a159:	8d 50 01             	lea    edx,[eax+0x1]
c001a15c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a160:	8a 00                	mov    al,BYTE PTR [eax]
c001a162:	0f b6 c0             	movzx  eax,al
c001a165:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001a16a:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001a16f:	c1 e0 08             	shl    eax,0x8
c001a172:	89 c2                	mov    edx,eax
c001a174:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a178:	09 d0                	or     eax,edx
c001a17a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a17e:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a182:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001a187:	75 3a                	jne    c001a1c3 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a189:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a18d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a190:	66 3d dc 05          	cmp    ax,0x5dc
c001a194:	77 10                	ja     c001a1a6 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001a196:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a19a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a19d:	0f b7 c0             	movzx  eax,ax
c001a1a0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a1a4:	eb 1d                	jmp    c001a1c3 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a1a6:	83 ec 0c             	sub    esp,0xc
c001a1a9:	68 c8 a8 02 c0       	push   0xc002a8c8
c001a1ae:	e8 28 87 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001a1b3:	83 c4 10             	add    esp,0x10
c001a1b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a1ba:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a1be:	e9 c0 00 00 00       	jmp    c001a283 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001a1c3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a1c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a1cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1cd:	83 ec 04             	sub    esp,0x4
c001a1d0:	52                   	push   edx
c001a1d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a1d5:	50                   	push   eax
c001a1d6:	e8 c5 64 fe ff       	call   c00006a0 <memcpy>
c001a1db:	83 c4 10             	add    esp,0x10
c001a1de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a1e2:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001a1e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a1ea:	8d 50 01             	lea    edx,[eax+0x1]
c001a1ed:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a1f1:	8a 00                	mov    al,BYTE PTR [eax]
c001a1f3:	0f b6 c0             	movzx  eax,al
c001a1f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a1fa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a1fe:	8d 50 01             	lea    edx,[eax+0x1]
c001a201:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a205:	8a 00                	mov    al,BYTE PTR [eax]
c001a207:	0f b6 c0             	movzx  eax,al
c001a20a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a20e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a212:	8d 50 01             	lea    edx,[eax+0x1]
c001a215:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a219:	8a 00                	mov    al,BYTE PTR [eax]
c001a21b:	0f b6 c0             	movzx  eax,al
c001a21e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a222:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a226:	8d 50 01             	lea    edx,[eax+0x1]
c001a229:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a22d:	8a 00                	mov    al,BYTE PTR [eax]
c001a22f:	0f b6 c0             	movzx  eax,al
c001a232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a236:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a23a:	c1 e0 18             	shl    eax,0x18
c001a23d:	89 c2                	mov    edx,eax
c001a23f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a243:	c1 e0 10             	shl    eax,0x10
c001a246:	09 c2                	or     edx,eax
c001a248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a24c:	c1 e0 08             	shl    eax,0x8
c001a24f:	09 d0                	or     eax,edx
c001a251:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001a255:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a259:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a25d:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001a261:	83 e8 04             	sub    eax,0x4
c001a264:	83 ec 08             	sub    esp,0x8
c001a267:	50                   	push   eax
c001a268:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a26c:	e8 b6 fc ff ff       	call   c0019f27 <Net::crc32Calc(unsigned char*, int)>
c001a271:	83 c4 10             	add    esp,0x10
c001a274:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a278:	0f 94 c2             	sete   dl
c001a27b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a27f:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a282:	90                   	nop
c001a283:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a287:	83 c4 2c             	add    esp,0x2c
c001a28a:	c2 04 00             	ret    0x4

c001a28d <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a28d:	55                   	push   ebp
c001a28e:	57                   	push   edi
c001a28f:	56                   	push   esi
c001a290:	53                   	push   ebx
c001a291:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a297:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a29e:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a2a0:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a2a3:	80 fb 40             	cmp    bl,0x40
c001a2a6:	75 1b                	jne    c001a2c3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a2a8:	8a 16                	mov    dl,BYTE PTR [esi]
c001a2aa:	84 d2                	test   dl,dl
c001a2ac:	0f 84 f1 00 00 00    	je     c001a3a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a2b2:	8d 46 01             	lea    eax,[esi+0x1]
c001a2b5:	80 fa 3a             	cmp    dl,0x3a
c001a2b8:	74 04                	je     c001a2be <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a2ba:	89 c6                	mov    esi,eax
c001a2bc:	eb ea                	jmp    c001a2a8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a2be:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a2c1:	89 c6                	mov    esi,eax
c001a2c3:	50                   	push   eax
c001a2c4:	6a 40                	push   0x40
c001a2c6:	6a 00                	push   0x0
c001a2c8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a2cc:	50                   	push   eax
c001a2cd:	e8 04 64 fe ff       	call   c00006d6 <memset>
c001a2d2:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a2d9:	31 c0                	xor    eax,eax
c001a2db:	83 c4 10             	add    esp,0x10
c001a2de:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a2e0:	84 c9                	test   cl,cl
c001a2e2:	0f 84 bb 00 00 00    	je     c001a3a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a2e8:	3d c7 00 00 00       	cmp    eax,0xc7
c001a2ed:	0f 8f b0 00 00 00    	jg     c001a3a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a2f3:	80 f9 0a             	cmp    cl,0xa
c001a2f6:	0f 85 98 00 00 00    	jne    c001a394 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a2fc:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a301:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a305:	a8 df                	test   al,0xdf
c001a307:	0f 94 c1             	sete   cl
c001a30a:	3c 23                	cmp    al,0x23
c001a30c:	0f 94 c2             	sete   dl
c001a30f:	08 d1                	or     cl,dl
c001a311:	75 4a                	jne    c001a35d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a313:	8d 50 f7             	lea    edx,[eax-0x9]
c001a316:	80 fa 01             	cmp    dl,0x1
c001a319:	76 42                	jbe    c001a35d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a31b:	3c 5b                	cmp    al,0x5b
c001a31d:	75 42                	jne    c001a361 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a31f:	80 fb 40             	cmp    bl,0x40
c001a322:	75 39                	jne    c001a35d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a324:	83 ec 0c             	sub    esp,0xc
c001a327:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a32b:	52                   	push   edx
c001a32c:	e8 c2 63 fe ff       	call   c00006f3 <strlen>
c001a331:	83 c4 10             	add    esp,0x10
c001a334:	83 f8 3f             	cmp    eax,0x3f
c001a337:	77 6a                	ja     c001a3a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a339:	50                   	push   eax
c001a33a:	50                   	push   eax
c001a33b:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a33f:	52                   	push   edx
c001a340:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a344:	52                   	push   edx
c001a345:	e8 2b 64 fe ff       	call   c0000775 <strcpy>
c001a34a:	58                   	pop    eax
c001a34b:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a34f:	52                   	push   edx
c001a350:	e8 9e 63 fe ff       	call   c00006f3 <strlen>
c001a355:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a35a:	83 c4 10             	add    esp,0x10
c001a35d:	31 d2                	xor    edx,edx
c001a35f:	eb 3a                	jmp    c001a39b <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a361:	80 fb 40             	cmp    bl,0x40
c001a364:	74 06                	je     c001a36c <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a366:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a36a:	eb 20                	jmp    c001a38c <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a36c:	50                   	push   eax
c001a36d:	50                   	push   eax
c001a36e:	55                   	push   ebp
c001a36f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a373:	50                   	push   eax
c001a374:	e8 4d 64 fe ff       	call   c00007c6 <strcmp>
c001a379:	83 c4 10             	add    esp,0x10
c001a37c:	85 c0                	test   eax,eax
c001a37e:	75 dd                	jne    c001a35d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a380:	eb e4                	jmp    c001a366 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a382:	8d 50 01             	lea    edx,[eax+0x1]
c001a385:	80 f9 3d             	cmp    cl,0x3d
c001a388:	74 1d                	je     c001a3a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a38a:	89 d0                	mov    eax,edx
c001a38c:	8a 08                	mov    cl,BYTE PTR [eax]
c001a38e:	84 c9                	test   cl,cl
c001a390:	75 f0                	jne    c001a382 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a392:	eb 0f                	jmp    c001a3a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a394:	8d 50 01             	lea    edx,[eax+0x1]
c001a397:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a39b:	47                   	inc    edi
c001a39c:	89 d0                	mov    eax,edx
c001a39e:	e9 3b ff ff ff       	jmp    c001a2de <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a3a3:	31 c0                	xor    eax,eax
c001a3a5:	eb 33                	jmp    c001a3da <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a3a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a3ab:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a3ae:	50                   	push   eax
c001a3af:	50                   	push   eax
c001a3b0:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a3b4:	50                   	push   eax
c001a3b5:	56                   	push   esi
c001a3b6:	e8 0b 64 fe ff       	call   c00007c6 <strcmp>
c001a3bb:	83 c4 10             	add    esp,0x10
c001a3be:	85 c0                	test   eax,eax
c001a3c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a3c4:	75 97                	jne    c001a35d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a3c6:	51                   	push   ecx
c001a3c7:	51                   	push   ecx
c001a3c8:	52                   	push   edx
c001a3c9:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a3d0:	e8 a0 63 fe ff       	call   c0000775 <strcpy>
c001a3d5:	83 c4 10             	add    esp,0x10
c001a3d8:	b0 01                	mov    al,0x1
c001a3da:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a3e0:	5b                   	pop    ebx
c001a3e1:	5e                   	pop    esi
c001a3e2:	5f                   	pop    edi
c001a3e3:	5d                   	pop    ebp
c001a3e4:	c3                   	ret    

c001a3e5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a3e5:	57                   	push   edi
c001a3e6:	56                   	push   esi
c001a3e7:	53                   	push   ebx
c001a3e8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a3ee:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a3f5:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a3fc:	53                   	push   ebx
c001a3fd:	e8 f1 62 fe ff       	call   c00006f3 <strlen>
c001a402:	89 34 24             	mov    DWORD PTR [esp],esi
c001a405:	89 c7                	mov    edi,eax
c001a407:	e8 e7 62 fe ff       	call   c00006f3 <strlen>
c001a40c:	83 c4 10             	add    esp,0x10
c001a40f:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a413:	3d ff 00 00 00       	cmp    eax,0xff
c001a418:	0f 87 d3 00 00 00    	ja     c001a4f1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a41e:	57                   	push   edi
c001a41f:	57                   	push   edi
c001a420:	56                   	push   esi
c001a421:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a425:	56                   	push   esi
c001a426:	e8 4a 63 fe ff       	call   c0000775 <strcpy>
c001a42b:	58                   	pop    eax
c001a42c:	5a                   	pop    edx
c001a42d:	68 fc ac 02 c0       	push   0xc002acfc
c001a432:	56                   	push   esi
c001a433:	e8 f4 63 fe ff       	call   c000082c <strcat>
c001a438:	59                   	pop    ecx
c001a439:	5f                   	pop    edi
c001a43a:	53                   	push   ebx
c001a43b:	56                   	push   esi
c001a43c:	e8 eb 63 fe ff       	call   c000082c <strcat>
c001a441:	58                   	pop    eax
c001a442:	5a                   	pop    edx
c001a443:	68 14 a9 02 c0       	push   0xc002a914
c001a448:	56                   	push   esi
c001a449:	e8 de 63 fe ff       	call   c000082c <strcat>
c001a44e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a455:	e8 dc 51 ff ff       	call   c000f636 <malloc>
c001a45a:	83 c4 0c             	add    esp,0xc
c001a45d:	89 c3                	mov    ebx,eax
c001a45f:	ff 35 14 e4 02 c0    	push   DWORD PTR ds:0xc002e414
c001a465:	56                   	push   esi
c001a466:	50                   	push   eax
c001a467:	e8 c8 89 ff ff       	call   c0012e34 <File::File(char const*, Process*)>
c001a46c:	83 c4 10             	add    esp,0x10
c001a46f:	85 db                	test   ebx,ebx
c001a471:	74 7e                	je     c001a4f1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a473:	51                   	push   ecx
c001a474:	51                   	push   ecx
c001a475:	6a 01                	push   0x1
c001a477:	53                   	push   ebx
c001a478:	e8 1b 8a ff ff       	call   c0012e98 <File::open(FileOpenMode)>
c001a47d:	83 c4 10             	add    esp,0x10
c001a480:	85 c0                	test   eax,eax
c001a482:	74 08                	je     c001a48c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a484:	83 ec 0c             	sub    esp,0xc
c001a487:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a489:	53                   	push   ebx
c001a48a:	eb 5f                	jmp    c001a4eb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a48c:	52                   	push   edx
c001a48d:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a491:	50                   	push   eax
c001a492:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a496:	50                   	push   eax
c001a497:	53                   	push   ebx
c001a498:	e8 a7 8c ff ff       	call   c0013144 <File::stat(unsigned long long*, bool*)>
c001a49d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a4a1:	83 c4 10             	add    esp,0x10
c001a4a4:	89 c1                	mov    ecx,eax
c001a4a6:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a4aa:	74 31                	je     c001a4dd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a4ac:	83 ec 0c             	sub    esp,0xc
c001a4af:	50                   	push   eax
c001a4b0:	e8 81 51 ff ff       	call   c000f636 <malloc>
c001a4b5:	89 c6                	mov    esi,eax
c001a4b7:	58                   	pop    eax
c001a4b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a4ba:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a4be:	52                   	push   edx
c001a4bf:	56                   	push   esi
c001a4c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a4c4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a4c8:	53                   	push   ebx
c001a4c9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a4cc:	83 c4 20             	add    esp,0x20
c001a4cf:	85 c0                	test   eax,eax
c001a4d1:	75 0a                	jne    c001a4dd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a4d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a4d7:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a4db:	74 18                	je     c001a4f5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a4dd:	83 ec 0c             	sub    esp,0xc
c001a4e0:	53                   	push   ebx
c001a4e1:	e8 10 8a ff ff       	call   c0012ef6 <File::close()>
c001a4e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a4e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a4ee:	83 c4 10             	add    esp,0x10
c001a4f1:	31 c0                	xor    eax,eax
c001a4f3:	eb 3b                	jmp    c001a530 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a4f5:	83 ec 0c             	sub    esp,0xc
c001a4f8:	53                   	push   ebx
c001a4f9:	e8 f8 89 ff ff       	call   c0012ef6 <File::close()>
c001a4fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a500:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a503:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a506:	83 c4 0c             	add    esp,0xc
c001a509:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a510:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a517:	56                   	push   esi
c001a518:	e8 70 fd ff ff       	call   c001a28d <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a51d:	89 34 24             	mov    DWORD PTR [esp],esi
c001a520:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a524:	e8 1d 51 ff ff       	call   c000f646 <free>
c001a529:	83 c4 10             	add    esp,0x10
c001a52c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a530:	81 c4 20 01 00 00    	add    esp,0x120
c001a536:	5b                   	pop    ebx
c001a537:	5e                   	pop    esi
c001a538:	5f                   	pop    edi
c001a539:	c3                   	ret    

c001a53a <Reg::getLine(char*, char*, char*)>:
c001a53a:	57                   	push   edi
c001a53b:	56                   	push   esi
c001a53c:	53                   	push   ebx
c001a53d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a541:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a545:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a549:	57                   	push   edi
c001a54a:	56                   	push   esi
c001a54b:	53                   	push   ebx
c001a54c:	68 19 a9 02 c0       	push   0xc002a919
c001a551:	e8 8f fe ff ff       	call   c001a3e5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a556:	83 c4 10             	add    esp,0x10
c001a559:	84 c0                	test   al,al
c001a55b:	75 10                	jne    c001a56d <Reg::getLine(char*, char*, char*)+0x33>
c001a55d:	57                   	push   edi
c001a55e:	56                   	push   esi
c001a55f:	53                   	push   ebx
c001a560:	68 3e a9 02 c0       	push   0xc002a93e
c001a565:	e8 7b fe ff ff       	call   c001a3e5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a56a:	83 c4 10             	add    esp,0x10
c001a56d:	5b                   	pop    ebx
c001a56e:	5e                   	pop    esi
c001a56f:	5f                   	pop    edi
c001a570:	c3                   	ret    

c001a571 <Reg::readInt(char*, char*, int*)>:
c001a571:	55                   	push   ebp
c001a572:	57                   	push   edi
c001a573:	56                   	push   esi
c001a574:	53                   	push   ebx
c001a575:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a57b:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a57f:	57                   	push   edi
c001a580:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a587:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a58e:	e8 a7 ff ff ff       	call   c001a53a <Reg::getLine(char*, char*, char*)>
c001a593:	83 c4 10             	add    esp,0x10
c001a596:	84 c0                	test   al,al
c001a598:	0f 84 b3 00 00 00    	je     c001a651 <Reg::readInt(char*, char*, int*)+0xe0>
c001a59e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a5a2:	80 fa 2b             	cmp    dl,0x2b
c001a5a5:	74 0c                	je     c001a5b3 <Reg::readInt(char*, char*, int*)+0x42>
c001a5a7:	80 fa 2d             	cmp    dl,0x2d
c001a5aa:	75 0e                	jne    c001a5ba <Reg::readInt(char*, char*, int*)+0x49>
c001a5ac:	ba 01 00 00 00       	mov    edx,0x1
c001a5b1:	eb 0b                	jmp    c001a5be <Reg::readInt(char*, char*, int*)+0x4d>
c001a5b3:	ba 01 00 00 00       	mov    edx,0x1
c001a5b8:	eb 02                	jmp    c001a5bc <Reg::readInt(char*, char*, int*)+0x4b>
c001a5ba:	31 d2                	xor    edx,edx
c001a5bc:	31 c0                	xor    eax,eax
c001a5be:	be 0a 00 00 00       	mov    esi,0xa
c001a5c3:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a5c8:	75 20                	jne    c001a5ea <Reg::readInt(char*, char*, int*)+0x79>
c001a5ca:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a5ce:	80 f9 78             	cmp    cl,0x78
c001a5d1:	75 0a                	jne    c001a5dd <Reg::readInt(char*, char*, int*)+0x6c>
c001a5d3:	83 c2 02             	add    edx,0x2
c001a5d6:	be 10 00 00 00       	mov    esi,0x10
c001a5db:	eb 0d                	jmp    c001a5ea <Reg::readInt(char*, char*, int*)+0x79>
c001a5dd:	80 f9 62             	cmp    cl,0x62
c001a5e0:	75 08                	jne    c001a5ea <Reg::readInt(char*, char*, int*)+0x79>
c001a5e2:	83 c2 02             	add    edx,0x2
c001a5e5:	be 02 00 00 00       	mov    esi,0x2
c001a5ea:	01 d7                	add    edi,edx
c001a5ec:	31 d2                	xor    edx,edx
c001a5ee:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a5f0:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a5f4:	80 fb 0d             	cmp    bl,0xd
c001a5f7:	0f 94 c3             	sete   bl
c001a5fa:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a5ff:	0f 94 c1             	sete   cl
c001a602:	08 cb                	or     bl,cl
c001a604:	75 3a                	jne    c001a640 <Reg::readInt(char*, char*, int*)+0xcf>
c001a606:	0f af d6             	imul   edx,esi
c001a609:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a60e:	83 fe 10             	cmp    esi,0x10
c001a611:	75 26                	jne    c001a639 <Reg::readInt(char*, char*, int*)+0xc8>
c001a613:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a617:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a61a:	89 e9                	mov    ecx,ebp
c001a61c:	80 f9 05             	cmp    cl,0x5
c001a61f:	77 06                	ja     c001a627 <Reg::readInt(char*, char*, int*)+0xb6>
c001a621:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a625:	eb 16                	jmp    c001a63d <Reg::readInt(char*, char*, int*)+0xcc>
c001a627:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a62b:	83 e9 61             	sub    ecx,0x61
c001a62e:	80 f9 05             	cmp    cl,0x5
c001a631:	77 06                	ja     c001a639 <Reg::readInt(char*, char*, int*)+0xc8>
c001a633:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a637:	eb 04                	jmp    c001a63d <Reg::readInt(char*, char*, int*)+0xcc>
c001a639:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a63d:	47                   	inc    edi
c001a63e:	eb ae                	jmp    c001a5ee <Reg::readInt(char*, char*, int*)+0x7d>
c001a640:	84 c0                	test   al,al
c001a642:	74 02                	je     c001a646 <Reg::readInt(char*, char*, int*)+0xd5>
c001a644:	f7 da                	neg    edx
c001a646:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a64d:	89 10                	mov    DWORD PTR [eax],edx
c001a64f:	88 d8                	mov    al,bl
c001a651:	81 c4 ec 00 00 00    	add    esp,0xec
c001a657:	5b                   	pop    ebx
c001a658:	5e                   	pop    esi
c001a659:	5f                   	pop    edi
c001a65a:	5d                   	pop    ebp
c001a65b:	c3                   	ret    

c001a65c <Reg::readString(char*, char*, char*, int)>:
c001a65c:	57                   	push   edi
c001a65d:	56                   	push   esi
c001a65e:	53                   	push   ebx
c001a65f:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a665:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a66c:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a670:	57                   	push   edi
c001a671:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a678:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a67f:	e8 b6 fe ff ff       	call   c001a53a <Reg::getLine(char*, char*, char*)>
c001a684:	83 c4 10             	add    esp,0x10
c001a687:	89 c6                	mov    esi,eax
c001a689:	84 c0                	test   al,al
c001a68b:	74 44                	je     c001a6d1 <Reg::readString(char*, char*, char*, int)+0x75>
c001a68d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a694:	31 c0                	xor    eax,eax
c001a696:	4a                   	dec    edx
c001a697:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a69a:	84 c9                	test   cl,cl
c001a69c:	74 0f                	je     c001a6ad <Reg::readString(char*, char*, char*, int)+0x51>
c001a69e:	39 c2                	cmp    edx,eax
c001a6a0:	7e 0b                	jle    c001a6ad <Reg::readString(char*, char*, char*, int)+0x51>
c001a6a2:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a6a5:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a6aa:	40                   	inc    eax
c001a6ab:	eb ea                	jmp    c001a697 <Reg::readString(char*, char*, char*, int)+0x3b>
c001a6ad:	83 ec 0c             	sub    esp,0xc
c001a6b0:	53                   	push   ebx
c001a6b1:	e8 3d 60 fe ff       	call   c00006f3 <strlen>
c001a6b6:	83 c4 10             	add    esp,0x10
c001a6b9:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a6be:	75 11                	jne    c001a6d1 <Reg::readString(char*, char*, char*, int)+0x75>
c001a6c0:	83 ec 0c             	sub    esp,0xc
c001a6c3:	53                   	push   ebx
c001a6c4:	e8 2a 60 fe ff       	call   c00006f3 <strlen>
c001a6c9:	83 c4 10             	add    esp,0x10
c001a6cc:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a6d1:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a6d7:	89 f0                	mov    eax,esi
c001a6d9:	5b                   	pop    ebx
c001a6da:	5e                   	pop    esi
c001a6db:	5f                   	pop    edi
c001a6dc:	c3                   	ret    

c001a6dd <Reg::readBool(char*, char*, bool*)>:
c001a6dd:	83 ec 20             	sub    esp,0x20
c001a6e0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a6e4:	50                   	push   eax
c001a6e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6ed:	e8 7f fe ff ff       	call   c001a571 <Reg::readInt(char*, char*, int*)>
c001a6f2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a6f7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a6fb:	0f 95 02             	setne  BYTE PTR [edx]
c001a6fe:	83 c4 2c             	add    esp,0x2c
c001a701:	c3                   	ret    

c001a702 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a702:	53                   	push   ebx
c001a703:	83 ec 1c             	sub    esp,0x1c
c001a706:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a70a:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a70e:	50                   	push   eax
c001a70f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a713:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a717:	e8 c1 ff ff ff       	call   c001a6dd <Reg::readBool(char*, char*, bool*)>
c001a71c:	83 c4 10             	add    esp,0x10
c001a71f:	84 c0                	test   al,al
c001a721:	74 04                	je     c001a727 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001a723:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001a727:	88 d8                	mov    al,bl
c001a729:	83 c4 18             	add    esp,0x18
c001a72c:	5b                   	pop    ebx
c001a72d:	c3                   	ret    

c001a72e <Reg::readIntWithDefault(char*, char*, int)>:
c001a72e:	53                   	push   ebx
c001a72f:	83 ec 1c             	sub    esp,0x1c
c001a732:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a736:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a73a:	50                   	push   eax
c001a73b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a73f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a743:	e8 29 fe ff ff       	call   c001a571 <Reg::readInt(char*, char*, int*)>
c001a748:	83 c4 10             	add    esp,0x10
c001a74b:	84 c0                	test   al,al
c001a74d:	74 04                	je     c001a753 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001a74f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a753:	89 d8                	mov    eax,ebx
c001a755:	83 c4 18             	add    esp,0x18
c001a758:	5b                   	pop    ebx
c001a759:	c3                   	ret    

c001a75a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001a75a:	57                   	push   edi
c001a75b:	56                   	push   esi
c001a75c:	53                   	push   ebx
c001a75d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a761:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a765:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a769:	56                   	push   esi
c001a76a:	53                   	push   ebx
c001a76b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a76f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a773:	e8 e4 fe ff ff       	call   c001a65c <Reg::readString(char*, char*, char*, int)>
c001a778:	83 c4 10             	add    esp,0x10
c001a77b:	84 c0                	test   al,al
c001a77d:	75 1b                	jne    c001a79a <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001a77f:	50                   	push   eax
c001a780:	56                   	push   esi
c001a781:	4e                   	dec    esi
c001a782:	6a 00                	push   0x0
c001a784:	53                   	push   ebx
c001a785:	e8 4c 5f fe ff       	call   c00006d6 <memset>
c001a78a:	83 c4 0c             	add    esp,0xc
c001a78d:	56                   	push   esi
c001a78e:	57                   	push   edi
c001a78f:	53                   	push   ebx
c001a790:	89 fb                	mov    ebx,edi
c001a792:	e8 09 5f fe ff       	call   c00006a0 <memcpy>
c001a797:	83 c4 10             	add    esp,0x10
c001a79a:	89 d8                	mov    eax,ebx
c001a79c:	5b                   	pop    ebx
c001a79d:	5e                   	pop    esi
c001a79e:	5f                   	pop    edi
c001a79f:	c3                   	ret    

c001a7a0 <Sys::exit(regs*)>:
c001a7a0:	83 ec 18             	sub    esp,0x18
c001a7a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a7a7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a7aa:	e8 ee 33 00 00       	call   c001db9d <terminateTask(int)>
c001a7af:	83 c8 ff             	or     eax,0xffffffff
c001a7b2:	83 c4 1c             	add    esp,0x1c
c001a7b5:	89 c2                	mov    edx,eax
c001a7b7:	c3                   	ret    

c001a7b8 <Sys::getCwd(regs*)>:
c001a7b8:	83 ec 10             	sub    esp,0x10
c001a7bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7bf:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a7c2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a7c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a7ca:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a7cd:	e8 64 84 ff ff       	call   c0012c36 <Fs::getcwd(Process*, char*, int)>
c001a7d2:	83 c4 1c             	add    esp,0x1c
c001a7d5:	99                   	cdq    
c001a7d6:	c3                   	ret    

c001a7d7 <Sys::getPID(regs*)>:
c001a7d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a7dc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a7df:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7e1:	99                   	cdq    
c001a7e2:	c3                   	ret    

c001a7e3 <Sys::loadDLL(regs*)>:
c001a7e3:	56                   	push   esi
c001a7e4:	53                   	push   ebx
c001a7e5:	31 d2                	xor    edx,edx
c001a7e7:	51                   	push   ecx
c001a7e8:	b8 01 00 00 00       	mov    eax,0x1
c001a7ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a7f1:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001a7f5:	0f 84 8c 00 00 00    	je     c001a887 <Sys::loadDLL(regs*)+0xa4>
c001a7fb:	83 ec 0c             	sub    esp,0xc
c001a7fe:	68 14 01 00 00       	push   0x114
c001a803:	e8 2e 4e ff ff       	call   c000f636 <malloc>
c001a808:	83 c4 0c             	add    esp,0xc
c001a80b:	89 c3                	mov    ebx,eax
c001a80d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a812:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a815:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a818:	53                   	push   ebx
c001a819:	e8 16 86 ff ff       	call   c0012e34 <File::File(char const*, Process*)>
c001a81e:	83 c4 10             	add    esp,0x10
c001a821:	31 d2                	xor    edx,edx
c001a823:	b8 02 00 00 00       	mov    eax,0x2
c001a828:	85 db                	test   ebx,ebx
c001a82a:	74 5b                	je     c001a887 <Sys::loadDLL(regs*)+0xa4>
c001a82c:	83 ec 0c             	sub    esp,0xc
c001a82f:	53                   	push   ebx
c001a830:	e8 d1 88 ff ff       	call   c0013106 <File::exists()>
c001a835:	83 c4 10             	add    esp,0x10
c001a838:	84 c0                	test   al,al
c001a83a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a83c:	75 11                	jne    c001a84f <Sys::loadDLL(regs*)+0x6c>
c001a83e:	83 ec 0c             	sub    esp,0xc
c001a841:	53                   	push   ebx
c001a842:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a845:	83 c4 10             	add    esp,0x10
c001a848:	b8 03 00 00 00       	mov    eax,0x3
c001a84d:	eb 36                	jmp    c001a885 <Sys::loadDLL(regs*)+0xa2>
c001a84f:	83 ec 0c             	sub    esp,0xc
c001a852:	53                   	push   ebx
c001a853:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a856:	58                   	pop    eax
c001a857:	5a                   	pop    edx
c001a858:	6a 00                	push   0x0
c001a85a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a85d:	e8 85 22 00 00       	call   c001cae7 <Thr::loadDLL(char const*, bool)>
c001a862:	83 c4 10             	add    esp,0x10
c001a865:	89 c1                	mov    ecx,eax
c001a867:	31 d2                	xor    edx,edx
c001a869:	b8 04 00 00 00       	mov    eax,0x4
c001a86e:	85 c9                	test   ecx,ecx
c001a870:	74 15                	je     c001a887 <Sys::loadDLL(regs*)+0xa4>
c001a872:	53                   	push   ebx
c001a873:	53                   	push   ebx
c001a874:	ff 35 c8 ce 02 c0    	push   DWORD PTR ds:0xc002cec8
c001a87a:	51                   	push   ecx
c001a87b:	e8 76 24 00 00       	call   c001ccf6 <Thr::executeDLL(unsigned long, void*)>
c001a880:	83 c4 10             	add    esp,0x10
c001a883:	31 c0                	xor    eax,eax
c001a885:	31 d2                	xor    edx,edx
c001a887:	59                   	pop    ecx
c001a888:	5b                   	pop    ebx
c001a889:	5e                   	pop    esi
c001a88a:	c3                   	ret    

c001a88b <Sys::read(regs*)>:
c001a88b:	57                   	push   edi
c001a88c:	56                   	push   esi
c001a88d:	53                   	push   ebx
c001a88e:	83 ec 10             	sub    esp,0x10
c001a891:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a895:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a898:	83 f8 02             	cmp    eax,0x2
c001a89b:	77 10                	ja     c001a8ad <Sys::read(regs*)+0x22>
c001a89d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a8a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a8a5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a8ab:	eb 0e                	jmp    c001a8bb <Sys::read(regs*)+0x30>
c001a8ad:	83 ec 0c             	sub    esp,0xc
c001a8b0:	50                   	push   eax
c001a8b1:	e8 df 6e ff ff       	call   c0011795 <getFromFileDescriptor(int)>
c001a8b6:	83 c4 10             	add    esp,0x10
c001a8b9:	89 c1                	mov    ecx,eax
c001a8bb:	83 c8 ff             	or     eax,0xffffffff
c001a8be:	85 c9                	test   ecx,ecx
c001a8c0:	89 c2                	mov    edx,eax
c001a8c2:	74 28                	je     c001a8ec <Sys::read(regs*)+0x61>
c001a8c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a8cc:	31 ff                	xor    edi,edi
c001a8ce:	83 ec 0c             	sub    esp,0xc
c001a8d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a8d3:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a8d7:	52                   	push   edx
c001a8d8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a8db:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a8de:	57                   	push   edi
c001a8df:	56                   	push   esi
c001a8e0:	51                   	push   ecx
c001a8e1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a8e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a8e8:	83 c4 20             	add    esp,0x20
c001a8eb:	99                   	cdq    
c001a8ec:	83 c4 10             	add    esp,0x10
c001a8ef:	5b                   	pop    ebx
c001a8f0:	5e                   	pop    esi
c001a8f1:	5f                   	pop    edi
c001a8f2:	c3                   	ret    

c001a8f3 <Sys::sbrk(regs*)>:
c001a8f3:	56                   	push   esi
c001a8f4:	53                   	push   ebx
c001a8f5:	50                   	push   eax
c001a8f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a8fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a902:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001a905:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001a90b:	85 db                	test   ebx,ebx
c001a90d:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001a910:	74 02                	je     c001a914 <Sys::sbrk(regs*)+0x21>
c001a912:	79 06                	jns    c001a91a <Sys::sbrk(regs*)+0x27>
c001a914:	89 f0                	mov    eax,esi
c001a916:	31 d2                	xor    edx,edx
c001a918:	eb 2a                	jmp    c001a944 <Sys::sbrk(regs*)+0x51>
c001a91a:	83 c8 ff             	or     eax,0xffffffff
c001a91d:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001a923:	89 c2                	mov    edx,eax
c001a925:	77 1d                	ja     c001a944 <Sys::sbrk(regs*)+0x51>
c001a927:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001a92d:	50                   	push   eax
c001a92e:	c1 ea 0c             	shr    edx,0xc
c001a931:	68 07 04 00 00       	push   0x407
c001a936:	52                   	push   edx
c001a937:	51                   	push   ecx
c001a938:	e8 79 77 ff ff       	call   c00120b6 <VAS::allocatePages(int, int)>
c001a93d:	89 f0                	mov    eax,esi
c001a93f:	31 d2                	xor    edx,edx
c001a941:	83 c4 10             	add    esp,0x10
c001a944:	59                   	pop    ecx
c001a945:	5b                   	pop    ebx
c001a946:	5e                   	pop    esi
c001a947:	c3                   	ret    

c001a948 <Sys::setCwd(regs*)>:
c001a948:	83 ec 14             	sub    esp,0x14
c001a94b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a94f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a952:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a957:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a95a:	e8 46 88 ff ff       	call   c00131a5 <Fs::setcwd(Process*, char*)>
c001a95f:	83 c4 1c             	add    esp,0x1c
c001a962:	99                   	cdq    
c001a963:	c3                   	ret    

c001a964 <Sys::setTime(regs*)>:
c001a964:	55                   	push   ebp
c001a965:	31 d2                	xor    edx,edx
c001a967:	57                   	push   edi
c001a968:	bf 18 00 00 00       	mov    edi,0x18
c001a96d:	56                   	push   esi
c001a96e:	53                   	push   ebx
c001a96f:	bb 3c 00 00 00       	mov    ebx,0x3c
c001a974:	83 ec 30             	sub    esp,0x30
c001a977:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001a97b:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001a97e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001a981:	f7 f3                	div    ebx
c001a983:	89 d6                	mov    esi,edx
c001a985:	31 d2                	xor    edx,edx
c001a987:	f7 f3                	div    ebx
c001a989:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001a98c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a990:	bb 10 0e 00 00       	mov    ebx,0xe10
c001a995:	31 d2                	xor    edx,edx
c001a997:	f7 f3                	div    ebx
c001a999:	31 d2                	xor    edx,edx
c001a99b:	bb 0c 00 00 00       	mov    ebx,0xc
c001a9a0:	f7 f7                	div    edi
c001a9a2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001a9a5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a9a9:	0f b7 cd             	movzx  ecx,bp
c001a9ac:	56                   	push   esi
c001a9ad:	89 c7                	mov    edi,eax
c001a9af:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001a9b3:	c1 e6 10             	shl    esi,0x10
c001a9b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a9ba:	83 e7 1f             	and    edi,0x1f
c001a9bd:	51                   	push   ecx
c001a9be:	47                   	inc    edi
c001a9bf:	c1 e8 05             	shr    eax,0x5
c001a9c2:	31 d2                	xor    edx,edx
c001a9c4:	f7 f3                	div    ebx
c001a9c6:	31 db                	xor    ebx,ebx
c001a9c8:	52                   	push   edx
c001a9c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001a9cd:	57                   	push   edi
c001a9ce:	68 59 a9 02 c0       	push   0xc002a959
c001a9d3:	e8 03 7f ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001a9d8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a9dc:	89 f8                	mov    eax,edi
c001a9de:	31 c9                	xor    ecx,ecx
c001a9e0:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001a9e4:	88 c1                	mov    cl,al
c001a9e6:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001a9ec:	88 d5                	mov    ch,dl
c001a9ee:	c1 e0 10             	shl    eax,0x10
c001a9f1:	0f b7 d1             	movzx  edx,cx
c001a9f4:	09 c2                	or     edx,eax
c001a9f6:	89 d8                	mov    eax,ebx
c001a9f8:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001a9fd:	09 f0                	or     eax,esi
c001a9ff:	89 c3                	mov    ebx,eax
c001aa01:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001aa05:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001aa09:	83 c4 18             	add    esp,0x18
c001aa0c:	53                   	push   ebx
c001aa0d:	52                   	push   edx
c001aa0e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001aa12:	8d 74 24 28          	lea    esi,[esp+0x28]
c001aa16:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001aa1a:	e8 a0 8e ff ff       	call   c00138bf <datetimeToSeconds(datetime_t)>
c001aa1f:	83 c4 0c             	add    esp,0xc
c001aa22:	52                   	push   edx
c001aa23:	50                   	push   eax
c001aa24:	56                   	push   esi
c001aa25:	e8 1c 90 ff ff       	call   c0013a46 <secondsToDatetime(unsigned long long)>
c001aa2a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aa2e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aa32:	51                   	push   ecx
c001aa33:	89 d6                	mov    esi,edx
c001aa35:	51                   	push   ecx
c001aa36:	c1 ee 10             	shr    esi,0x10
c001aa39:	89 f3                	mov    ebx,esi
c001aa3b:	0f b6 f3             	movzx  esi,bl
c001aa3e:	56                   	push   esi
c001aa3f:	0f b6 f6             	movzx  esi,dh
c001aa42:	0f b6 d2             	movzx  edx,dl
c001aa45:	56                   	push   esi
c001aa46:	52                   	push   edx
c001aa47:	89 c2                	mov    edx,eax
c001aa49:	c1 ea 10             	shr    edx,0x10
c001aa4c:	52                   	push   edx
c001aa4d:	0f b6 d4             	movzx  edx,ah
c001aa50:	0f b6 c0             	movzx  eax,al
c001aa53:	52                   	push   edx
c001aa54:	50                   	push   eax
c001aa55:	68 75 a9 02 c0       	push   0xc002a975
c001aa5a:	e8 7c 7e ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001aa5f:	83 c4 2c             	add    esp,0x2c
c001aa62:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c001aa67:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001aa6b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001aa6f:	53                   	push   ebx
c001aa70:	51                   	push   ecx
c001aa71:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001aa77:	e8 6a 8f ff ff       	call   c00139e6 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001aa7c:	83 f0 01             	xor    eax,0x1
c001aa7f:	31 d2                	xor    edx,edx
c001aa81:	0f b6 c0             	movzx  eax,al
c001aa84:	83 c4 3c             	add    esp,0x3c
c001aa87:	5b                   	pop    ebx
c001aa88:	5e                   	pop    esi
c001aa89:	5f                   	pop    edi
c001aa8a:	5d                   	pop    ebp
c001aa8b:	c3                   	ret    

c001aa8c <Sys::timezone(regs*)>:
c001aa8c:	53                   	push   ebx
c001aa8d:	83 ec 08             	sub    esp,0x8
c001aa90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa94:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001aa98:	75 17                	jne    c001aab1 <Sys::timezone(regs*)+0x25>
c001aa9a:	83 ec 0c             	sub    esp,0xc
c001aa9d:	68 91 a9 02 c0       	push   0xc002a991
c001aaa2:	e8 34 7e ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001aaa7:	83 c8 ff             	or     eax,0xffffffff
c001aaaa:	83 c4 10             	add    esp,0x10
c001aaad:	89 c2                	mov    edx,eax
c001aaaf:	eb 20                	jmp    c001aad1 <Sys::timezone(regs*)+0x45>
c001aab1:	83 ec 0c             	sub    esp,0xc
c001aab4:	68 c9 a9 02 c0       	push   0xc002a9c9
c001aab9:	e8 1d 7e ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001aabe:	58                   	pop    eax
c001aabf:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001aac2:	e8 81 8c ff ff       	call   c0013748 <User::loadClockSettings(int)>
c001aac7:	83 c4 10             	add    esp,0x10
c001aaca:	b8 01 00 00 00       	mov    eax,0x1
c001aacf:	31 d2                	xor    edx,edx
c001aad1:	83 c4 08             	add    esp,0x8
c001aad4:	5b                   	pop    ebx
c001aad5:	c3                   	ret    

c001aad6 <Sys::write(regs*)>:
c001aad6:	57                   	push   edi
c001aad7:	56                   	push   esi
c001aad8:	53                   	push   ebx
c001aad9:	83 ec 10             	sub    esp,0x10
c001aadc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aae0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aae3:	83 f8 02             	cmp    eax,0x2
c001aae6:	77 10                	ja     c001aaf8 <Sys::write(regs*)+0x22>
c001aae8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aaed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aaf0:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001aaf6:	eb 0e                	jmp    c001ab06 <Sys::write(regs*)+0x30>
c001aaf8:	83 ec 0c             	sub    esp,0xc
c001aafb:	50                   	push   eax
c001aafc:	e8 94 6c ff ff       	call   c0011795 <getFromFileDescriptor(int)>
c001ab01:	83 c4 10             	add    esp,0x10
c001ab04:	89 c1                	mov    ecx,eax
c001ab06:	83 c8 ff             	or     eax,0xffffffff
c001ab09:	85 c9                	test   ecx,ecx
c001ab0b:	89 c2                	mov    edx,eax
c001ab0d:	74 28                	je     c001ab37 <Sys::write(regs*)+0x61>
c001ab0f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab17:	31 ff                	xor    edi,edi
c001ab19:	83 ec 0c             	sub    esp,0xc
c001ab1c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ab1e:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ab22:	52                   	push   edx
c001ab23:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ab26:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ab29:	57                   	push   edi
c001ab2a:	56                   	push   esi
c001ab2b:	51                   	push   ecx
c001ab2c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001ab2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ab33:	83 c4 20             	add    esp,0x20
c001ab36:	99                   	cdq    
c001ab37:	83 c4 10             	add    esp,0x10
c001ab3a:	5b                   	pop    ebx
c001ab3b:	5e                   	pop    esi
c001ab3c:	5f                   	pop    edi
c001ab3d:	c3                   	ret    

c001ab3e <Sys::yield(regs*)>:
c001ab3e:	57                   	push   edi
c001ab3f:	56                   	push   esi
c001ab40:	53                   	push   ebx
c001ab41:	e8 14 26 00 00       	call   c001d15a <lockScheduler()>
c001ab46:	e8 4b 29 00 00       	call   c001d496 <schedule()>
c001ab4b:	e8 0c 26 00 00       	call   c001d15c <unlockScheduler()>
c001ab50:	8b 35 50 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d550
c001ab56:	8b 3d 54 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d554
c001ab5c:	89 f0                	mov    eax,esi
c001ab5e:	89 fb                	mov    ebx,edi
c001ab60:	89 f1                	mov    ecx,esi
c001ab62:	c1 e0 07             	shl    eax,0x7
c001ab65:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001ab69:	25 80 30 0f 00       	and    eax,0xf3080
c001ab6e:	c1 eb 17             	shr    ebx,0x17
c001ab71:	31 c8                	xor    eax,ecx
c001ab73:	89 da                	mov    edx,ebx
c001ab75:	5b                   	pop    ebx
c001ab76:	5e                   	pop    esi
c001ab77:	5f                   	pop    edi
c001ab78:	c3                   	ret    

c001ab79 <sysCallSeekDir(regs*)>:
c001ab79:	31 c0                	xor    eax,eax
c001ab7b:	31 d2                	xor    edx,edx
c001ab7d:	c3                   	ret    

c001ab7e <sysCallTellDir(regs*)>:
c001ab7e:	31 c0                	xor    eax,eax
c001ab80:	31 d2                	xor    edx,edx
c001ab82:	c3                   	ret    

c001ab83 <sysCallVerify(regs*)>:
c001ab83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab87:	31 d2                	xor    edx,edx
c001ab89:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ab8c:	c3                   	ret    

c001ab8d <sysCallGetArgc(regs*)>:
c001ab8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab92:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ab95:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001ab9b:	99                   	cdq    
c001ab9c:	c3                   	ret    

c001ab9d <sysFormatDisk(regs*)>:
c001ab9d:	56                   	push   esi
c001ab9e:	53                   	push   ebx
c001ab9f:	53                   	push   ebx
c001aba0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aba4:	8b 1d 48 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d048
c001abaa:	eb 25                	jmp    c001abd1 <sysFormatDisk(regs*)+0x34>
c001abac:	83 ec 0c             	sub    esp,0xc
c001abaf:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001abb2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001abb4:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001abb7:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001abba:	50                   	push   eax
c001abbb:	ff 34 85 e0 d4 02 c0 	push   DWORD PTR [eax*4-0x3ffd2b20]
c001abc2:	53                   	push   ebx
c001abc3:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001abc6:	83 c4 20             	add    esp,0x20
c001abc9:	83 f8 08             	cmp    eax,0x8
c001abcc:	75 12                	jne    c001abe0 <sysFormatDisk(regs*)+0x43>
c001abce:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001abd1:	85 db                	test   ebx,ebx
c001abd3:	75 d7                	jne    c001abac <sysFormatDisk(regs*)+0xf>
c001abd5:	59                   	pop    ecx
c001abd6:	b8 03 00 00 00       	mov    eax,0x3
c001abdb:	31 d2                	xor    edx,edx
c001abdd:	5b                   	pop    ebx
c001abde:	5e                   	pop    esi
c001abdf:	c3                   	ret    
c001abe0:	85 c0                	test   eax,eax
c001abe2:	74 1b                	je     c001abff <sysFormatDisk(regs*)+0x62>
c001abe4:	83 f8 09             	cmp    eax,0x9
c001abe7:	74 0b                	je     c001abf4 <sysFormatDisk(regs*)+0x57>
c001abe9:	59                   	pop    ecx
c001abea:	b8 02 00 00 00       	mov    eax,0x2
c001abef:	31 d2                	xor    edx,edx
c001abf1:	5b                   	pop    ebx
c001abf2:	5e                   	pop    esi
c001abf3:	c3                   	ret    
c001abf4:	59                   	pop    ecx
c001abf5:	b8 01 00 00 00       	mov    eax,0x1
c001abfa:	31 d2                	xor    edx,edx
c001abfc:	5b                   	pop    ebx
c001abfd:	5e                   	pop    esi
c001abfe:	c3                   	ret    
c001abff:	59                   	pop    ecx
c001ac00:	31 c0                	xor    eax,eax
c001ac02:	31 d2                	xor    edx,edx
c001ac04:	5b                   	pop    ebx
c001ac05:	5e                   	pop    esi
c001ac06:	c3                   	ret    

c001ac07 <sysSetDiskVolumeLabel(regs*)>:
c001ac07:	56                   	push   esi
c001ac08:	53                   	push   ebx
c001ac09:	53                   	push   ebx
c001ac0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac0e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001ac11:	83 f8 19             	cmp    eax,0x19
c001ac14:	77 29                	ja     c001ac3f <sysSetDiskVolumeLabel(regs*)+0x38>
c001ac16:	8b 0c 85 e0 d4 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2b20]
c001ac1d:	85 c9                	test   ecx,ecx
c001ac1f:	74 1e                	je     c001ac3f <sysSetDiskVolumeLabel(regs*)+0x38>
c001ac21:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001ac24:	85 d2                	test   edx,edx
c001ac26:	74 17                	je     c001ac3f <sysSetDiskVolumeLabel(regs*)+0x38>
c001ac28:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001ac2e:	8b 33                	mov    esi,DWORD PTR [ebx]
c001ac30:	52                   	push   edx
c001ac31:	50                   	push   eax
c001ac32:	51                   	push   ecx
c001ac33:	53                   	push   ebx
c001ac34:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001ac37:	83 c4 10             	add    esp,0x10
c001ac3a:	99                   	cdq    
c001ac3b:	59                   	pop    ecx
c001ac3c:	5b                   	pop    ebx
c001ac3d:	5e                   	pop    esi
c001ac3e:	c3                   	ret    
c001ac3f:	59                   	pop    ecx
c001ac40:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ac45:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ac4a:	5b                   	pop    ebx
c001ac4b:	5e                   	pop    esi
c001ac4c:	c3                   	ret    

c001ac4d <sysGetDiskVolumeLabel(regs*)>:
c001ac4d:	57                   	push   edi
c001ac4e:	56                   	push   esi
c001ac4f:	53                   	push   ebx
c001ac50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac54:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ac57:	83 fa 19             	cmp    edx,0x19
c001ac5a:	77 34                	ja     c001ac90 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ac5c:	8b 0c 95 e0 d4 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2b20]
c001ac63:	85 c9                	test   ecx,ecx
c001ac65:	74 29                	je     c001ac90 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ac67:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001ac6a:	85 db                	test   ebx,ebx
c001ac6c:	74 22                	je     c001ac90 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ac6e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001ac71:	85 c0                	test   eax,eax
c001ac73:	74 1b                	je     c001ac90 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ac75:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001ac7b:	83 ec 0c             	sub    esp,0xc
c001ac7e:	8b 3e                	mov    edi,DWORD PTR [esi]
c001ac80:	50                   	push   eax
c001ac81:	53                   	push   ebx
c001ac82:	52                   	push   edx
c001ac83:	51                   	push   ecx
c001ac84:	56                   	push   esi
c001ac85:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001ac88:	83 c4 20             	add    esp,0x20
c001ac8b:	99                   	cdq    
c001ac8c:	5b                   	pop    ebx
c001ac8d:	5e                   	pop    esi
c001ac8e:	5f                   	pop    edi
c001ac8f:	c3                   	ret    
c001ac90:	5b                   	pop    ebx
c001ac91:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ac96:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ac9b:	5e                   	pop    esi
c001ac9c:	5f                   	pop    edi
c001ac9d:	c3                   	ret    

c001ac9e <sysShutdown(regs*)>:
c001ac9e:	83 ec 0c             	sub    esp,0xc
c001aca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aca5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001aca8:	85 c0                	test   eax,eax
c001acaa:	74 18                	je     c001acc4 <sysShutdown(regs*)+0x26>
c001acac:	83 f8 01             	cmp    eax,0x1
c001acaf:	74 38                	je     c001ace9 <sysShutdown(regs*)+0x4b>
c001acb1:	83 f8 02             	cmp    eax,0x2
c001acb4:	74 24                	je     c001acda <sysShutdown(regs*)+0x3c>
c001acb6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001acbb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001acc0:	83 c4 0c             	add    esp,0xc
c001acc3:	c3                   	ret    
c001acc4:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c001acc9:	8b 10                	mov    edx,DWORD PTR [eax]
c001accb:	6a 00                	push   0x0
c001accd:	6a 00                	push   0x0
c001accf:	6a 00                	push   0x0
c001acd1:	50                   	push   eax
c001acd2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001acd5:	83 c4 10             	add    esp,0x10
c001acd8:	eb dc                	jmp    c001acb6 <sysShutdown(regs*)+0x18>
c001acda:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c001acdf:	8b 10                	mov    edx,DWORD PTR [eax]
c001ace1:	6a 00                	push   0x0
c001ace3:	6a 00                	push   0x0
c001ace5:	6a 01                	push   0x1
c001ace7:	eb e8                	jmp    c001acd1 <sysShutdown(regs*)+0x33>
c001ace9:	a1 60 d5 02 c0       	mov    eax,ds:0xc002d560
c001acee:	85 c0                	test   eax,eax
c001acf0:	74 02                	je     c001acf4 <sysShutdown(regs*)+0x56>
c001acf2:	ff d0                	call   eax
c001acf4:	31 c0                	xor    eax,eax
c001acf6:	31 d2                	xor    edx,edx
c001acf8:	83 c4 0c             	add    esp,0xc
c001acfb:	c3                   	ret    

c001acfc <sysCallRealpath(regs*)>:
c001acfc:	83 ec 0c             	sub    esp,0xc
c001acff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad03:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001ad06:	85 d2                	test   edx,edx
c001ad08:	74 07                	je     c001ad11 <sysCallRealpath(regs*)+0x15>
c001ad0a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001ad0d:	85 c0                	test   eax,eax
c001ad0f:	75 0b                	jne    c001ad1c <sysCallRealpath(regs*)+0x20>
c001ad11:	b8 01 00 00 00       	mov    eax,0x1
c001ad16:	31 d2                	xor    edx,edx
c001ad18:	83 c4 0c             	add    esp,0xc
c001ad1b:	c3                   	ret    
c001ad1c:	51                   	push   ecx
c001ad1d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ad23:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001ad26:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001ad2c:	51                   	push   ecx
c001ad2d:	52                   	push   edx
c001ad2e:	50                   	push   eax
c001ad2f:	e8 56 7f ff ff       	call   c0012c8a <Fs::standardiseFiles(char*, char const*, char const*)>
c001ad34:	83 c4 10             	add    esp,0x10
c001ad37:	31 c0                	xor    eax,eax
c001ad39:	31 d2                	xor    edx,edx
c001ad3b:	83 c4 0c             	add    esp,0xc
c001ad3e:	c3                   	ret    

c001ad3f <sysCallReadDir(regs*)>:
c001ad3f:	53                   	push   ebx
c001ad40:	83 ec 18             	sub    esp,0x18
c001ad43:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad47:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ad4a:	83 f8 02             	cmp    eax,0x2
c001ad4d:	76 53                	jbe    c001ada2 <sysCallReadDir(regs*)+0x63>
c001ad4f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001ad52:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001ad58:	77 4f                	ja     c001ada9 <sysCallReadDir(regs*)+0x6a>
c001ad5a:	83 ec 0c             	sub    esp,0xc
c001ad5d:	50                   	push   eax
c001ad5e:	e8 32 6a ff ff       	call   c0011795 <getFromFileDescriptor(int)>
c001ad63:	83 c4 10             	add    esp,0x10
c001ad66:	85 c0                	test   eax,eax
c001ad68:	74 50                	je     c001adba <sysCallReadDir(regs*)+0x7b>
c001ad6a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ad72:	83 ec 0c             	sub    esp,0xc
c001ad75:	8b 10                	mov    edx,DWORD PTR [eax]
c001ad77:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001ad7b:	51                   	push   ecx
c001ad7c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ad7f:	6a 00                	push   0x0
c001ad81:	68 10 01 00 00       	push   0x110
c001ad86:	50                   	push   eax
c001ad87:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ad8a:	83 c4 20             	add    esp,0x20
c001ad8d:	85 c0                	test   eax,eax
c001ad8f:	74 38                	je     c001adc9 <sysCallReadDir(regs*)+0x8a>
c001ad91:	83 f8 07             	cmp    eax,0x7
c001ad94:	74 0c                	je     c001ada2 <sysCallReadDir(regs*)+0x63>
c001ad96:	b8 02 00 00 00       	mov    eax,0x2
c001ad9b:	31 d2                	xor    edx,edx
c001ad9d:	83 c4 18             	add    esp,0x18
c001ada0:	5b                   	pop    ebx
c001ada1:	c3                   	ret    
c001ada2:	b8 01 00 00 00       	mov    eax,0x1
c001ada7:	eb f2                	jmp    c001ad9b <sysCallReadDir(regs*)+0x5c>
c001ada9:	83 ec 08             	sub    esp,0x8
c001adac:	52                   	push   edx
c001adad:	68 08 aa 02 c0       	push   0xc002aa08
c001adb2:	e8 24 7b ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001adb7:	83 c4 10             	add    esp,0x10
c001adba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001adbf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001adc4:	83 c4 18             	add    esp,0x18
c001adc7:	5b                   	pop    ebx
c001adc8:	c3                   	ret    
c001adc9:	31 c0                	xor    eax,eax
c001adcb:	eb ce                	jmp    c001ad9b <sysCallReadDir(regs*)+0x5c>

c001adcd <sysCallIsATTY(regs*)>:
c001adcd:	83 ec 0c             	sub    esp,0xc
c001add0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001add4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001add7:	83 f8 02             	cmp    eax,0x2
c001adda:	76 07                	jbe    c001ade3 <sysCallIsATTY(regs*)+0x16>
c001addc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ade1:	75 26                	jne    c001ae09 <sysCallIsATTY(regs*)+0x3c>
c001ade3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ade8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001adeb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001adf1:	85 c0                	test   eax,eax
c001adf3:	74 24                	je     c001ae19 <sysCallIsATTY(regs*)+0x4c>
c001adf5:	83 ec 0c             	sub    esp,0xc
c001adf8:	8b 10                	mov    edx,DWORD PTR [eax]
c001adfa:	50                   	push   eax
c001adfb:	ff 12                	call   DWORD PTR [edx]
c001adfd:	31 d2                	xor    edx,edx
c001adff:	0f b6 c0             	movzx  eax,al
c001ae02:	83 c4 10             	add    esp,0x10
c001ae05:	83 c4 0c             	add    esp,0xc
c001ae08:	c3                   	ret    
c001ae09:	83 ec 0c             	sub    esp,0xc
c001ae0c:	50                   	push   eax
c001ae0d:	e8 83 69 ff ff       	call   c0011795 <getFromFileDescriptor(int)>
c001ae12:	83 c4 10             	add    esp,0x10
c001ae15:	85 c0                	test   eax,eax
c001ae17:	75 dc                	jne    c001adf5 <sysCallIsATTY(regs*)+0x28>
c001ae19:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ae1e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ae23:	83 c4 0c             	add    esp,0xc
c001ae26:	c3                   	ret    

c001ae27 <sysCallSeek(regs*)>:
c001ae27:	53                   	push   ebx
c001ae28:	83 ec 08             	sub    esp,0x8
c001ae2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae2f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae32:	83 f8 02             	cmp    eax,0x2
c001ae35:	76 4a                	jbe    c001ae81 <sysCallSeek(regs*)+0x5a>
c001ae37:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ae3c:	77 32                	ja     c001ae70 <sysCallSeek(regs*)+0x49>
c001ae3e:	83 ec 0c             	sub    esp,0xc
c001ae41:	50                   	push   eax
c001ae42:	e8 4e 69 ff ff       	call   c0011795 <getFromFileDescriptor(int)>
c001ae47:	83 c4 0c             	add    esp,0xc
c001ae4a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ae4d:	31 db                	xor    ebx,ebx
c001ae4f:	53                   	push   ebx
c001ae50:	51                   	push   ecx
c001ae51:	50                   	push   eax
c001ae52:	e8 ff 80 ff ff       	call   c0012f56 <File::seek(unsigned long long)>
c001ae57:	83 c4 10             	add    esp,0x10
c001ae5a:	85 c0                	test   eax,eax
c001ae5c:	0f 95 c0             	setne  al
c001ae5f:	31 d2                	xor    edx,edx
c001ae61:	0f b6 c0             	movzx  eax,al
c001ae64:	f7 d8                	neg    eax
c001ae66:	83 d2 00             	adc    edx,0x0
c001ae69:	83 c4 08             	add    esp,0x8
c001ae6c:	f7 da                	neg    edx
c001ae6e:	5b                   	pop    ebx
c001ae6f:	c3                   	ret    
c001ae70:	83 ec 08             	sub    esp,0x8
c001ae73:	50                   	push   eax
c001ae74:	68 77 aa 02 c0       	push   0xc002aa77
c001ae79:	e8 5d 7a ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001ae7e:	83 c4 10             	add    esp,0x10
c001ae81:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ae86:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ae8b:	83 c4 08             	add    esp,0x8
c001ae8e:	5b                   	pop    ebx
c001ae8f:	c3                   	ret    

c001ae90 <sysCallTell(regs*)>:
c001ae90:	53                   	push   ebx
c001ae91:	83 ec 08             	sub    esp,0x8
c001ae94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae98:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae9b:	83 f8 02             	cmp    eax,0x2
c001ae9e:	76 5e                	jbe    c001aefe <sysCallTell(regs*)+0x6e>
c001aea0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001aea5:	77 2d                	ja     c001aed4 <sysCallTell(regs*)+0x44>
c001aea7:	83 ec 0c             	sub    esp,0xc
c001aeaa:	50                   	push   eax
c001aeab:	e8 e5 68 ff ff       	call   c0011795 <getFromFileDescriptor(int)>
c001aeb0:	5a                   	pop    edx
c001aeb1:	59                   	pop    ecx
c001aeb2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001aeb5:	50                   	push   eax
c001aeb6:	e8 f1 80 ff ff       	call   c0012fac <File::tell(unsigned long long*)>
c001aebb:	83 c4 10             	add    esp,0x10
c001aebe:	85 c0                	test   eax,eax
c001aec0:	0f 95 c0             	setne  al
c001aec3:	31 d2                	xor    edx,edx
c001aec5:	0f b6 c0             	movzx  eax,al
c001aec8:	f7 d8                	neg    eax
c001aeca:	83 d2 00             	adc    edx,0x0
c001aecd:	83 c4 08             	add    esp,0x8
c001aed0:	f7 da                	neg    edx
c001aed2:	5b                   	pop    ebx
c001aed3:	c3                   	ret    
c001aed4:	83 ec 08             	sub    esp,0x8
c001aed7:	50                   	push   eax
c001aed8:	68 91 aa 02 c0       	push   0xc002aa91
c001aedd:	e8 f9 79 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001aee2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001aee5:	83 c4 10             	add    esp,0x10
c001aee8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001aeee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001aef5:	31 d2                	xor    edx,edx
c001aef7:	31 c0                	xor    eax,eax
c001aef9:	83 c4 08             	add    esp,0x8
c001aefc:	5b                   	pop    ebx
c001aefd:	c3                   	ret    
c001aefe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001af03:	ba ff ff ff ff       	mov    edx,0xffffffff
c001af08:	83 c4 08             	add    esp,0x8
c001af0b:	5b                   	pop    ebx
c001af0c:	c3                   	ret    

c001af0d <sysCallSize(regs*)>:
c001af0d:	53                   	push   ebx
c001af0e:	83 ec 18             	sub    esp,0x18
c001af11:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af15:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001af18:	83 f8 02             	cmp    eax,0x2
c001af1b:	76 64                	jbe    c001af81 <sysCallSize(regs*)+0x74>
c001af1d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001af22:	77 33                	ja     c001af57 <sysCallSize(regs*)+0x4a>
c001af24:	83 ec 0c             	sub    esp,0xc
c001af27:	50                   	push   eax
c001af28:	e8 68 68 ff ff       	call   c0011795 <getFromFileDescriptor(int)>
c001af2d:	83 c4 0c             	add    esp,0xc
c001af30:	8d 54 24 13          	lea    edx,[esp+0x13]
c001af34:	52                   	push   edx
c001af35:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001af38:	50                   	push   eax
c001af39:	e8 06 82 ff ff       	call   c0013144 <File::stat(unsigned long long*, bool*)>
c001af3e:	83 c4 10             	add    esp,0x10
c001af41:	85 c0                	test   eax,eax
c001af43:	0f 95 c0             	setne  al
c001af46:	31 d2                	xor    edx,edx
c001af48:	0f b6 c0             	movzx  eax,al
c001af4b:	f7 d8                	neg    eax
c001af4d:	83 d2 00             	adc    edx,0x0
c001af50:	83 c4 18             	add    esp,0x18
c001af53:	f7 da                	neg    edx
c001af55:	5b                   	pop    ebx
c001af56:	c3                   	ret    
c001af57:	83 ec 08             	sub    esp,0x8
c001af5a:	50                   	push   eax
c001af5b:	68 ab aa 02 c0       	push   0xc002aaab
c001af60:	e8 76 79 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001af65:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001af68:	83 c4 10             	add    esp,0x10
c001af6b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001af71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001af78:	31 d2                	xor    edx,edx
c001af7a:	31 c0                	xor    eax,eax
c001af7c:	83 c4 18             	add    esp,0x18
c001af7f:	5b                   	pop    ebx
c001af80:	c3                   	ret    
c001af81:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001af86:	ba ff ff ff ff       	mov    edx,0xffffffff
c001af8b:	83 c4 18             	add    esp,0x18
c001af8e:	5b                   	pop    ebx
c001af8f:	c3                   	ret    

c001af90 <sysCallSizeFromFilename(regs*)>:
c001af90:	57                   	push   edi
c001af91:	56                   	push   esi
c001af92:	53                   	push   ebx
c001af93:	83 ec 20             	sub    esp,0x20
c001af96:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001af9a:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001af9d:	83 fb 02             	cmp    ebx,0x2
c001afa0:	0f 86 99 00 00 00    	jbe    c001b03f <sysCallSizeFromFilename(regs*)+0xaf>
c001afa6:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001afac:	77 65                	ja     c001b013 <sysCallSizeFromFilename(regs*)+0x83>
c001afae:	83 ec 0c             	sub    esp,0xc
c001afb1:	68 14 01 00 00       	push   0x114
c001afb6:	e8 7b 46 ff ff       	call   c000f636 <malloc>
c001afbb:	83 c4 0c             	add    esp,0xc
c001afbe:	89 c6                	mov    esi,eax
c001afc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afc5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001afc8:	53                   	push   ebx
c001afc9:	56                   	push   esi
c001afca:	e8 65 7e ff ff       	call   c0012e34 <File::File(char const*, Process*)>
c001afcf:	83 c4 0c             	add    esp,0xc
c001afd2:	8d 44 24 23          	lea    eax,[esp+0x23]
c001afd6:	50                   	push   eax
c001afd7:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001afda:	56                   	push   esi
c001afdb:	e8 64 81 ff ff       	call   c0013144 <File::stat(unsigned long long*, bool*)>
c001afe0:	83 c4 10             	add    esp,0x10
c001afe3:	85 f6                	test   esi,esi
c001afe5:	74 14                	je     c001affb <sysCallSizeFromFilename(regs*)+0x6b>
c001afe7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001afeb:	8b 16                	mov    edx,DWORD PTR [esi]
c001afed:	83 ec 0c             	sub    esp,0xc
c001aff0:	56                   	push   esi
c001aff1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001aff4:	83 c4 10             	add    esp,0x10
c001aff7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001affb:	85 c0                	test   eax,eax
c001affd:	0f 95 c0             	setne  al
c001b000:	31 d2                	xor    edx,edx
c001b002:	0f b6 c0             	movzx  eax,al
c001b005:	f7 d8                	neg    eax
c001b007:	83 d2 00             	adc    edx,0x0
c001b00a:	83 c4 20             	add    esp,0x20
c001b00d:	f7 da                	neg    edx
c001b00f:	5b                   	pop    ebx
c001b010:	5e                   	pop    esi
c001b011:	5f                   	pop    edi
c001b012:	c3                   	ret    
c001b013:	83 ec 08             	sub    esp,0x8
c001b016:	53                   	push   ebx
c001b017:	68 ab aa 02 c0       	push   0xc002aaab
c001b01c:	e8 ba 78 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001b021:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001b024:	83 c4 10             	add    esp,0x10
c001b027:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b02d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b034:	31 d2                	xor    edx,edx
c001b036:	83 c4 20             	add    esp,0x20
c001b039:	31 c0                	xor    eax,eax
c001b03b:	5b                   	pop    ebx
c001b03c:	5e                   	pop    esi
c001b03d:	5f                   	pop    edi
c001b03e:	c3                   	ret    
c001b03f:	83 c4 20             	add    esp,0x20
c001b042:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b047:	5b                   	pop    ebx
c001b048:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b04d:	5e                   	pop    esi
c001b04e:	5f                   	pop    edi
c001b04f:	c3                   	ret    

c001b050 <sysCallClose(regs*)>:
c001b050:	53                   	push   ebx
c001b051:	83 ec 08             	sub    esp,0x8
c001b054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b058:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b05b:	83 f8 02             	cmp    eax,0x2
c001b05e:	76 50                	jbe    c001b0b0 <sysCallClose(regs*)+0x60>
c001b060:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b065:	74 58                	je     c001b0bf <sysCallClose(regs*)+0x6f>
c001b067:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b06c:	74 60                	je     c001b0ce <sysCallClose(regs*)+0x7e>
c001b06e:	77 2f                	ja     c001b09f <sysCallClose(regs*)+0x4f>
c001b070:	83 ec 0c             	sub    esp,0xc
c001b073:	50                   	push   eax
c001b074:	e8 1c 67 ff ff       	call   c0011795 <getFromFileDescriptor(int)>
c001b079:	89 c3                	mov    ebx,eax
c001b07b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b07e:	e8 73 7e ff ff       	call   c0012ef6 <File::close()>
c001b083:	83 c4 10             	add    esp,0x10
c001b086:	85 db                	test   ebx,ebx
c001b088:	74 0c                	je     c001b096 <sysCallClose(regs*)+0x46>
c001b08a:	83 ec 0c             	sub    esp,0xc
c001b08d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b08f:	53                   	push   ebx
c001b090:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b093:	83 c4 10             	add    esp,0x10
c001b096:	31 c0                	xor    eax,eax
c001b098:	31 d2                	xor    edx,edx
c001b09a:	83 c4 08             	add    esp,0x8
c001b09d:	5b                   	pop    ebx
c001b09e:	c3                   	ret    
c001b09f:	83 ec 08             	sub    esp,0x8
c001b0a2:	50                   	push   eax
c001b0a3:	68 2c aa 02 c0       	push   0xc002aa2c
c001b0a8:	e8 2e 78 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001b0ad:	83 c4 10             	add    esp,0x10
c001b0b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b0b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b0ba:	83 c4 08             	add    esp,0x8
c001b0bd:	5b                   	pop    ebx
c001b0be:	c3                   	ret    
c001b0bf:	83 ec 0c             	sub    esp,0xc
c001b0c2:	68 c6 aa 02 c0       	push   0xc002aac6
c001b0c7:	e8 0f 78 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001b0cc:	eb c5                	jmp    c001b093 <sysCallClose(regs*)+0x43>
c001b0ce:	83 ec 0c             	sub    esp,0xc
c001b0d1:	68 d4 aa 02 c0       	push   0xc002aad4
c001b0d6:	eb ef                	jmp    c001b0c7 <sysCallClose(regs*)+0x77>

c001b0d8 <sysCallOpenDir(regs*)>:
c001b0d8:	56                   	push   esi
c001b0d9:	53                   	push   ebx
c001b0da:	53                   	push   ebx
c001b0db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b0df:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b0e2:	85 f6                	test   esi,esi
c001b0e4:	74 59                	je     c001b13f <sysCallOpenDir(regs*)+0x67>
c001b0e6:	83 ec 0c             	sub    esp,0xc
c001b0e9:	68 14 01 00 00       	push   0x114
c001b0ee:	e8 43 45 ff ff       	call   c000f636 <malloc>
c001b0f3:	83 c4 0c             	add    esp,0xc
c001b0f6:	89 c6                	mov    esi,eax
c001b0f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0fd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b100:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b103:	56                   	push   esi
c001b104:	e8 d7 81 ff ff       	call   c00132e0 <Directory::Directory(char const*, Process*)>
c001b109:	83 c4 10             	add    esp,0x10
c001b10c:	85 f6                	test   esi,esi
c001b10e:	74 2f                	je     c001b13f <sysCallOpenDir(regs*)+0x67>
c001b110:	83 ec 0c             	sub    esp,0xc
c001b113:	56                   	push   esi
c001b114:	e8 2b 82 ff ff       	call   c0013344 <Directory::open()>
c001b119:	83 c4 10             	add    esp,0x10
c001b11c:	85 c0                	test   eax,eax
c001b11e:	75 1f                	jne    c001b13f <sysCallOpenDir(regs*)+0x67>
c001b120:	83 ec 0c             	sub    esp,0xc
c001b123:	56                   	push   esi
c001b124:	e8 77 63 ff ff       	call   c00114a0 <UnixFile::getFileDescriptor()>
c001b129:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b12c:	83 c4 10             	add    esp,0x10
c001b12f:	89 02                	mov    DWORD PTR [edx],eax
c001b131:	c1 f8 1f             	sar    eax,0x1f
c001b134:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b137:	31 c0                	xor    eax,eax
c001b139:	59                   	pop    ecx
c001b13a:	31 d2                	xor    edx,edx
c001b13c:	5b                   	pop    ebx
c001b13d:	5e                   	pop    esi
c001b13e:	c3                   	ret    
c001b13f:	59                   	pop    ecx
c001b140:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b145:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b14a:	5b                   	pop    ebx
c001b14b:	5e                   	pop    esi
c001b14c:	c3                   	ret    

c001b14d <sysCallCloseDir(regs*)>:
c001b14d:	53                   	push   ebx
c001b14e:	83 ec 08             	sub    esp,0x8
c001b151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b155:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b158:	83 f8 02             	cmp    eax,0x2
c001b15b:	76 47                	jbe    c001b1a4 <sysCallCloseDir(regs*)+0x57>
c001b15d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b162:	77 2f                	ja     c001b193 <sysCallCloseDir(regs*)+0x46>
c001b164:	83 ec 0c             	sub    esp,0xc
c001b167:	50                   	push   eax
c001b168:	e8 28 66 ff ff       	call   c0011795 <getFromFileDescriptor(int)>
c001b16d:	89 c3                	mov    ebx,eax
c001b16f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b172:	e8 29 82 ff ff       	call   c00133a0 <Directory::close()>
c001b177:	83 c4 10             	add    esp,0x10
c001b17a:	85 db                	test   ebx,ebx
c001b17c:	74 0c                	je     c001b18a <sysCallCloseDir(regs*)+0x3d>
c001b17e:	83 ec 0c             	sub    esp,0xc
c001b181:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b183:	53                   	push   ebx
c001b184:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b187:	83 c4 10             	add    esp,0x10
c001b18a:	31 c0                	xor    eax,eax
c001b18c:	31 d2                	xor    edx,edx
c001b18e:	83 c4 08             	add    esp,0x8
c001b191:	5b                   	pop    ebx
c001b192:	c3                   	ret    
c001b193:	83 ec 08             	sub    esp,0x8
c001b196:	50                   	push   eax
c001b197:	68 54 aa 02 c0       	push   0xc002aa54
c001b19c:	e8 3a 77 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001b1a1:	83 c4 10             	add    esp,0x10
c001b1a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b1a9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1ae:	83 c4 08             	add    esp,0x8
c001b1b1:	5b                   	pop    ebx
c001b1b2:	c3                   	ret    

c001b1b3 <sysCallMakeDir(regs*)>:
c001b1b3:	56                   	push   esi
c001b1b4:	53                   	push   ebx
c001b1b5:	83 ec 10             	sub    esp,0x10
c001b1b8:	68 14 01 00 00       	push   0x114
c001b1bd:	e8 74 44 ff ff       	call   c000f636 <malloc>
c001b1c2:	83 c4 0c             	add    esp,0xc
c001b1c5:	89 c3                	mov    ebx,eax
c001b1c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1cc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b1cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1d3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b1d6:	53                   	push   ebx
c001b1d7:	e8 04 81 ff ff       	call   c00132e0 <Directory::Directory(char const*, Process*)>
c001b1dc:	83 c4 10             	add    esp,0x10
c001b1df:	85 db                	test   ebx,ebx
c001b1e1:	74 32                	je     c001b215 <sysCallMakeDir(regs*)+0x62>
c001b1e3:	83 ec 0c             	sub    esp,0xc
c001b1e6:	53                   	push   ebx
c001b1e7:	e8 38 83 ff ff       	call   c0013524 <Directory::create()>
c001b1ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b1ef:	89 c6                	mov    esi,eax
c001b1f1:	e8 aa 81 ff ff       	call   c00133a0 <Directory::close()>
c001b1f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b1fb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b1fe:	83 c4 10             	add    esp,0x10
c001b201:	31 c0                	xor    eax,eax
c001b203:	59                   	pop    ecx
c001b204:	85 f6                	test   esi,esi
c001b206:	5b                   	pop    ebx
c001b207:	0f 95 c0             	setne  al
c001b20a:	5e                   	pop    esi
c001b20b:	31 d2                	xor    edx,edx
c001b20d:	f7 d8                	neg    eax
c001b20f:	83 d2 00             	adc    edx,0x0
c001b212:	f7 da                	neg    edx
c001b214:	c3                   	ret    
c001b215:	59                   	pop    ecx
c001b216:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b21b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b220:	5b                   	pop    ebx
c001b221:	5e                   	pop    esi
c001b222:	c3                   	ret    

c001b223 <sysCallWait(regs*)>:
c001b223:	83 ec 10             	sub    esp,0x10
c001b226:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b22a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b22d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b230:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b233:	e8 d9 23 00 00       	call   c001d611 <waitTask(int, int*, int)>
c001b238:	83 c4 1c             	add    esp,0x1c
c001b23b:	99                   	cdq    
c001b23c:	c3                   	ret    

c001b23d <sysCallNotImpl(regs*)>:
c001b23d:	83 ec 18             	sub    esp,0x18
c001b240:	68 e2 aa 02 c0       	push   0xc002aae2
c001b245:	e8 61 e9 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001b24a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b24f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b254:	83 c4 1c             	add    esp,0x1c
c001b257:	c3                   	ret    

c001b258 <sysPanic(regs*)>:
c001b258:	83 ec 18             	sub    esp,0x18
c001b25b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b25f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b262:	e8 44 e9 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001b267:	c7 04 24 fc aa 02 c0 	mov    DWORD PTR [esp],0xc002aafc
c001b26e:	e8 38 e9 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001b273:	b8 01 00 00 00       	mov    eax,0x1
c001b278:	31 d2                	xor    edx,edx
c001b27a:	83 c4 1c             	add    esp,0x1c
c001b27d:	c3                   	ret    

c001b27e <sysCallRmdir(regs*)>:
c001b27e:	56                   	push   esi
c001b27f:	53                   	push   ebx
c001b280:	83 ec 20             	sub    esp,0x20
c001b283:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b287:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b28a:	68 14 01 00 00       	push   0x114
c001b28f:	e8 a2 43 ff ff       	call   c000f636 <malloc>
c001b294:	83 c4 0c             	add    esp,0xc
c001b297:	89 c3                	mov    ebx,eax
c001b299:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b29e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2a1:	56                   	push   esi
c001b2a2:	53                   	push   ebx
c001b2a3:	e8 8c 7b ff ff       	call   c0012e34 <File::File(char const*, Process*)>
c001b2a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2ab:	e8 60 7d ff ff       	call   c0013010 <File::unlink()>
c001b2b0:	83 c4 10             	add    esp,0x10
c001b2b3:	85 db                	test   ebx,ebx
c001b2b5:	74 14                	je     c001b2cb <sysCallRmdir(regs*)+0x4d>
c001b2b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b2bb:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b2bd:	83 ec 0c             	sub    esp,0xc
c001b2c0:	53                   	push   ebx
c001b2c1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b2c4:	83 c4 10             	add    esp,0x10
c001b2c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2cb:	85 c0                	test   eax,eax
c001b2cd:	0f 95 c0             	setne  al
c001b2d0:	31 d2                	xor    edx,edx
c001b2d2:	0f b6 c0             	movzx  eax,al
c001b2d5:	f7 d8                	neg    eax
c001b2d7:	83 d2 00             	adc    edx,0x0
c001b2da:	83 c4 14             	add    esp,0x14
c001b2dd:	f7 da                	neg    edx
c001b2df:	5b                   	pop    ebx
c001b2e0:	5e                   	pop    esi
c001b2e1:	c3                   	ret    

c001b2e2 <sysCallUnlink(regs*)>:
c001b2e2:	56                   	push   esi
c001b2e3:	53                   	push   ebx
c001b2e4:	83 ec 20             	sub    esp,0x20
c001b2e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b2eb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b2ee:	68 14 01 00 00       	push   0x114
c001b2f3:	e8 3e 43 ff ff       	call   c000f636 <malloc>
c001b2f8:	83 c4 0c             	add    esp,0xc
c001b2fb:	89 c3                	mov    ebx,eax
c001b2fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b302:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b305:	56                   	push   esi
c001b306:	53                   	push   ebx
c001b307:	e8 28 7b ff ff       	call   c0012e34 <File::File(char const*, Process*)>
c001b30c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b30f:	e8 fc 7c ff ff       	call   c0013010 <File::unlink()>
c001b314:	83 c4 10             	add    esp,0x10
c001b317:	85 db                	test   ebx,ebx
c001b319:	74 14                	je     c001b32f <sysCallUnlink(regs*)+0x4d>
c001b31b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b31f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b321:	83 ec 0c             	sub    esp,0xc
c001b324:	53                   	push   ebx
c001b325:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b328:	83 c4 10             	add    esp,0x10
c001b32b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b32f:	85 c0                	test   eax,eax
c001b331:	0f 95 c0             	setne  al
c001b334:	31 d2                	xor    edx,edx
c001b336:	0f b6 c0             	movzx  eax,al
c001b339:	f7 d8                	neg    eax
c001b33b:	83 d2 00             	adc    edx,0x0
c001b33e:	83 c4 14             	add    esp,0x14
c001b341:	f7 da                	neg    edx
c001b343:	5b                   	pop    ebx
c001b344:	5e                   	pop    esi
c001b345:	c3                   	ret    

c001b346 <sysCallGetArgv(regs*)>:
c001b346:	83 ec 0c             	sub    esp,0xc
c001b349:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b34d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b350:	85 c0                	test   eax,eax
c001b352:	78 2b                	js     c001b37f <sysCallGetArgv(regs*)+0x39>
c001b354:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b35a:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b35d:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b363:	7d 1a                	jge    c001b37f <sysCallGetArgv(regs*)+0x39>
c001b365:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b36c:	85 c0                	test   eax,eax
c001b36e:	74 17                	je     c001b387 <sysCallGetArgv(regs*)+0x41>
c001b370:	83 ec 08             	sub    esp,0x8
c001b373:	50                   	push   eax
c001b374:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b377:	e8 f9 53 fe ff       	call   c0000775 <strcpy>
c001b37c:	83 c4 10             	add    esp,0x10
c001b37f:	31 c0                	xor    eax,eax
c001b381:	31 d2                	xor    edx,edx
c001b383:	83 c4 0c             	add    esp,0xc
c001b386:	c3                   	ret    
c001b387:	b8 01 00 00 00       	mov    eax,0x1
c001b38c:	31 d2                	xor    edx,edx
c001b38e:	83 c4 0c             	add    esp,0xc
c001b391:	c3                   	ret    

c001b392 <sysCallTTYName(regs*)>:
c001b392:	56                   	push   esi
c001b393:	53                   	push   ebx
c001b394:	53                   	push   ebx
c001b395:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b399:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b39c:	85 c0                	test   eax,eax
c001b39e:	74 5f                	je     c001b3ff <sysCallTTYName(regs*)+0x6d>
c001b3a0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b3a3:	83 f8 02             	cmp    eax,0x2
c001b3a6:	77 3e                	ja     c001b3e6 <sysCallTTYName(regs*)+0x54>
c001b3a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3b0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b3b6:	85 db                	test   ebx,ebx
c001b3b8:	74 45                	je     c001b3ff <sysCallTTYName(regs*)+0x6d>
c001b3ba:	83 ec 0c             	sub    esp,0xc
c001b3bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3bf:	53                   	push   ebx
c001b3c0:	ff 10                	call   DWORD PTR [eax]
c001b3c2:	83 c4 10             	add    esp,0x10
c001b3c5:	84 c0                	test   al,al
c001b3c7:	74 41                	je     c001b40a <sysCallTTYName(regs*)+0x78>
c001b3c9:	83 ec 08             	sub    esp,0x8
c001b3cc:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001b3d2:	53                   	push   ebx
c001b3d3:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b3d6:	e8 9a 53 fe ff       	call   c0000775 <strcpy>
c001b3db:	83 c4 10             	add    esp,0x10
c001b3de:	31 c0                	xor    eax,eax
c001b3e0:	59                   	pop    ecx
c001b3e1:	31 d2                	xor    edx,edx
c001b3e3:	5b                   	pop    ebx
c001b3e4:	5e                   	pop    esi
c001b3e5:	c3                   	ret    
c001b3e6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b3eb:	74 bb                	je     c001b3a8 <sysCallTTYName(regs*)+0x16>
c001b3ed:	83 ec 0c             	sub    esp,0xc
c001b3f0:	50                   	push   eax
c001b3f1:	e8 9f 63 ff ff       	call   c0011795 <getFromFileDescriptor(int)>
c001b3f6:	83 c4 10             	add    esp,0x10
c001b3f9:	89 c3                	mov    ebx,eax
c001b3fb:	85 db                	test   ebx,ebx
c001b3fd:	75 bb                	jne    c001b3ba <sysCallTTYName(regs*)+0x28>
c001b3ff:	59                   	pop    ecx
c001b400:	b8 01 00 00 00       	mov    eax,0x1
c001b405:	31 d2                	xor    edx,edx
c001b407:	5b                   	pop    ebx
c001b408:	5e                   	pop    esi
c001b409:	c3                   	ret    
c001b40a:	59                   	pop    ecx
c001b40b:	b8 02 00 00 00       	mov    eax,0x2
c001b410:	31 d2                	xor    edx,edx
c001b412:	5b                   	pop    ebx
c001b413:	5e                   	pop    esi
c001b414:	c3                   	ret    

c001b415 <sysCallUSleep(regs*)>:
c001b415:	83 ec 14             	sub    esp,0x14
c001b418:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b41d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b421:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b428:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b42b:	01 ca                	add    edx,ecx
c001b42d:	52                   	push   edx
c001b42e:	50                   	push   eax
c001b42f:	e8 76 22 00 00       	call   c001d6aa <nanoSleep(unsigned long long)>
c001b434:	31 c0                	xor    eax,eax
c001b436:	31 d2                	xor    edx,edx
c001b438:	83 c4 1c             	add    esp,0x1c
c001b43b:	c3                   	ret    

c001b43c <sysCallSpawn(regs*)>:
c001b43c:	56                   	push   esi
c001b43d:	53                   	push   ebx
c001b43e:	53                   	push   ebx
c001b43f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b443:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b446:	85 f6                	test   esi,esi
c001b448:	75 08                	jne    c001b452 <sysCallSpawn(regs*)+0x16>
c001b44a:	59                   	pop    ecx
c001b44b:	31 c0                	xor    eax,eax
c001b44d:	31 d2                	xor    edx,edx
c001b44f:	5b                   	pop    ebx
c001b450:	5e                   	pop    esi
c001b451:	c3                   	ret    
c001b452:	83 ec 0c             	sub    esp,0xc
c001b455:	68 3f 07 00 00       	push   0x73f
c001b45a:	e8 d7 41 ff ff       	call   c000f636 <malloc>
c001b45f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b462:	89 c6                	mov    esi,eax
c001b464:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b469:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b46c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b46f:	56                   	push   esi
c001b470:	e8 35 19 00 00       	call   c001cdaa <Process::Process(char const*, Process*, char**)>
c001b475:	83 c4 20             	add    esp,0x20
c001b478:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b47f:	75 c9                	jne    c001b44a <sysCallSpawn(regs*)+0xe>
c001b481:	83 ec 0c             	sub    esp,0xc
c001b484:	56                   	push   esi
c001b485:	e8 e6 1e 00 00       	call   c001d370 <Process::createUserThread()>
c001b48a:	8b 06                	mov    eax,DWORD PTR [esi]
c001b48c:	83 c4 10             	add    esp,0x10
c001b48f:	99                   	cdq    
c001b490:	59                   	pop    ecx
c001b491:	5b                   	pop    ebx
c001b492:	5e                   	pop    esi
c001b493:	c3                   	ret    

c001b494 <sysCallGetEnv(regs*)>:
c001b494:	57                   	push   edi
c001b495:	56                   	push   esi
c001b496:	53                   	push   ebx
c001b497:	83 ec 1c             	sub    esp,0x1c
c001b49a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b49e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4a3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b4a6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b4a9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4ac:	e8 16 e6 ff ff       	call   c0019ac7 <Krnl::getProcessTotalEnvCount(Process*)>
c001b4b1:	83 c4 10             	add    esp,0x10
c001b4b4:	39 c7                	cmp    edi,eax
c001b4b6:	7c 14                	jl     c001b4cc <sysCallGetEnv(regs*)+0x38>
c001b4b8:	85 f6                	test   esi,esi
c001b4ba:	75 0b                	jne    c001b4c7 <sysCallGetEnv(regs*)+0x33>
c001b4bc:	83 c4 10             	add    esp,0x10
c001b4bf:	31 c0                	xor    eax,eax
c001b4c1:	5b                   	pop    ebx
c001b4c2:	31 d2                	xor    edx,edx
c001b4c4:	5e                   	pop    esi
c001b4c5:	5f                   	pop    edi
c001b4c6:	c3                   	ret    
c001b4c7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b4ca:	eb f0                	jmp    c001b4bc <sysCallGetEnv(regs*)+0x28>
c001b4cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b4d0:	52                   	push   edx
c001b4d1:	57                   	push   edi
c001b4d2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b4d8:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b4db:	50                   	push   eax
c001b4dc:	e8 06 e6 ff ff       	call   c0019ae7 <Krnl::getProcessEnvPair(Process*, int)>
c001b4e1:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b4e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b4e8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b4ec:	83 c4 0c             	add    esp,0xc
c001b4ef:	85 c9                	test   ecx,ecx
c001b4f1:	75 23                	jne    c001b516 <sysCallGetEnv(regs*)+0x82>
c001b4f3:	83 ec 0c             	sub    esp,0xc
c001b4f6:	50                   	push   eax
c001b4f7:	e8 f7 51 fe ff       	call   c00006f3 <strlen>
c001b4fc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b4ff:	89 c3                	mov    ebx,eax
c001b501:	e8 ed 51 fe ff       	call   c00006f3 <strlen>
c001b506:	83 c4 10             	add    esp,0x10
c001b509:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b50d:	83 c4 10             	add    esp,0x10
c001b510:	31 d2                	xor    edx,edx
c001b512:	5b                   	pop    ebx
c001b513:	5e                   	pop    esi
c001b514:	5f                   	pop    edi
c001b515:	c3                   	ret    
c001b516:	83 ec 08             	sub    esp,0x8
c001b519:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b51c:	50                   	push   eax
c001b51d:	56                   	push   esi
c001b51e:	e8 52 52 fe ff       	call   c0000775 <strcpy>
c001b523:	58                   	pop    eax
c001b524:	5a                   	pop    edx
c001b525:	68 0b ab 02 c0       	push   0xc002ab0b
c001b52a:	56                   	push   esi
c001b52b:	e8 fc 52 fe ff       	call   c000082c <strcat>
c001b530:	59                   	pop    ecx
c001b531:	5b                   	pop    ebx
c001b532:	57                   	push   edi
c001b533:	56                   	push   esi
c001b534:	e8 f3 52 fe ff       	call   c000082c <strcat>
c001b539:	83 c4 10             	add    esp,0x10
c001b53c:	e9 7b ff ff ff       	jmp    c001b4bc <sysCallGetEnv(regs*)+0x28>

c001b541 <sysAppSettings(regs*)>:
c001b541:	53                   	push   ebx
c001b542:	83 ec 08             	sub    esp,0x8
c001b545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b549:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b54c:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001b552:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b557:	66 3d c0 09          	cmp    ax,0x9c0
c001b55b:	75 2f                	jne    c001b58c <sysAppSettings(regs*)+0x4b>
c001b55d:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001b563:	83 e0 1f             	and    eax,0x1f
c001b566:	3c 01                	cmp    al,0x1
c001b568:	74 2e                	je     c001b598 <sysAppSettings(regs*)+0x57>
c001b56a:	3c 07                	cmp    al,0x7
c001b56c:	0f 84 bd 00 00 00    	je     c001b62f <sysAppSettings(regs*)+0xee>
c001b572:	84 c0                	test   al,al
c001b574:	0f 84 dc 00 00 00    	je     c001b656 <sysAppSettings(regs*)+0x115>
c001b57a:	3c 08                	cmp    al,0x8
c001b57c:	74 6d                	je     c001b5eb <sysAppSettings(regs*)+0xaa>
c001b57e:	0f b6 c0             	movzx  eax,al
c001b581:	83 c4 08             	add    esp,0x8
c001b584:	05 e8 03 00 00       	add    eax,0x3e8
c001b589:	5b                   	pop    ebx
c001b58a:	99                   	cdq    
c001b58b:	c3                   	ret    
c001b58c:	b8 01 00 00 00       	mov    eax,0x1
c001b591:	31 d2                	xor    edx,edx
c001b593:	83 c4 08             	add    esp,0x8
c001b596:	5b                   	pop    ebx
c001b597:	c3                   	ret    
c001b598:	51                   	push   ecx
c001b599:	68 00 01 00 00       	push   0x100
c001b59e:	6a 00                	push   0x0
c001b5a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5a5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5a8:	83 c0 0c             	add    eax,0xc
c001b5ab:	50                   	push   eax
c001b5ac:	e8 25 51 fe ff       	call   c00006d6 <memset>
c001b5b1:	83 c4 0c             	add    esp,0xc
c001b5b4:	68 ff 00 00 00       	push   0xff
c001b5b9:	53                   	push   ebx
c001b5ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5c2:	83 c0 0c             	add    eax,0xc
c001b5c5:	50                   	push   eax
c001b5c6:	e8 d5 50 fe ff       	call   c00006a0 <memcpy>
c001b5cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5d0:	5b                   	pop    ebx
c001b5d1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5d4:	5a                   	pop    edx
c001b5d5:	8d 50 0c             	lea    edx,[eax+0xc]
c001b5d8:	52                   	push   edx
c001b5d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b5df:	e8 2c 53 ff ff       	call   c0010910 <VgaText::setTitle(char*)>
c001b5e4:	83 c4 10             	add    esp,0x10
c001b5e7:	31 c0                	xor    eax,eax
c001b5e9:	eb a6                	jmp    c001b591 <sysAppSettings(regs*)+0x50>
c001b5eb:	83 ec 08             	sub    esp,0x8
c001b5ee:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b5f4:	83 e0 0f             	and    eax,0xf
c001b5f7:	50                   	push   eax
c001b5f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5fd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b600:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b606:	e8 f5 52 ff ff       	call   c0010900 <VgaText::setTitleColour(VgaColour)>
c001b60b:	58                   	pop    eax
c001b60c:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b612:	5a                   	pop    edx
c001b613:	c1 e8 04             	shr    eax,0x4
c001b616:	83 e0 0f             	and    eax,0xf
c001b619:	50                   	push   eax
c001b61a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b61f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b622:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b628:	e8 c3 52 ff ff       	call   c00108f0 <VgaText::setTitleTextColour(VgaColour)>
c001b62d:	eb b5                	jmp    c001b5e4 <sysAppSettings(regs*)+0xa3>
c001b62f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b634:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b637:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b63d:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b643:	c0 e8 06             	shr    al,0x6
c001b646:	83 e0 01             	and    eax,0x1
c001b649:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b64f:	31 c0                	xor    eax,eax
c001b651:	e9 3b ff ff ff       	jmp    c001b591 <sysAppSettings(regs*)+0x50>
c001b656:	b8 02 00 00 00       	mov    eax,0x2
c001b65b:	e9 31 ff ff ff       	jmp    c001b591 <sysAppSettings(regs*)+0x50>

c001b660 <sysSetFatAttrib(regs*)>:
c001b660:	57                   	push   edi
c001b661:	56                   	push   esi
c001b662:	53                   	push   ebx
c001b663:	83 ec 1c             	sub    esp,0x1c
c001b666:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b66a:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b66d:	68 14 01 00 00       	push   0x114
c001b672:	e8 bf 3f ff ff       	call   c000f636 <malloc>
c001b677:	83 c4 0c             	add    esp,0xc
c001b67a:	89 c3                	mov    ebx,eax
c001b67c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b681:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b684:	57                   	push   edi
c001b685:	53                   	push   ebx
c001b686:	e8 a9 77 ff ff       	call   c0012e34 <File::File(char const*, Process*)>
c001b68b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b68e:	83 c4 0c             	add    esp,0xc
c001b691:	0f b6 d4             	movzx  edx,ah
c001b694:	0f b6 c0             	movzx  eax,al
c001b697:	52                   	push   edx
c001b698:	50                   	push   eax
c001b699:	53                   	push   ebx
c001b69a:	e8 0b 7a ff ff       	call   c00130aa <File::chfatattr(unsigned char, unsigned char)>
c001b69f:	83 c4 10             	add    esp,0x10
c001b6a2:	85 db                	test   ebx,ebx
c001b6a4:	74 14                	je     c001b6ba <sysSetFatAttrib(regs*)+0x5a>
c001b6a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6aa:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b6ac:	83 ec 0c             	sub    esp,0xc
c001b6af:	53                   	push   ebx
c001b6b0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b6b3:	83 c4 10             	add    esp,0x10
c001b6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6ba:	85 c0                	test   eax,eax
c001b6bc:	0f 95 c0             	setne  al
c001b6bf:	31 d2                	xor    edx,edx
c001b6c1:	0f b6 c0             	movzx  eax,al
c001b6c4:	f7 d8                	neg    eax
c001b6c6:	83 d2 00             	adc    edx,0x0
c001b6c9:	83 c4 10             	add    esp,0x10
c001b6cc:	f7 da                	neg    edx
c001b6ce:	5b                   	pop    ebx
c001b6cf:	5e                   	pop    esi
c001b6d0:	5f                   	pop    edi
c001b6d1:	c3                   	ret    

c001b6d2 <sysPipe(regs*)>:
c001b6d2:	57                   	push   edi
c001b6d3:	56                   	push   esi
c001b6d4:	53                   	push   ebx
c001b6d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6d9:	83 ec 0c             	sub    esp,0xc
c001b6dc:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b6df:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b6e2:	6a 20                	push   0x20
c001b6e4:	e8 4d 3f ff ff       	call   c000f636 <malloc>
c001b6e9:	89 c3                	mov    ebx,eax
c001b6eb:	58                   	pop    eax
c001b6ec:	5a                   	pop    edx
c001b6ed:	68 00 50 00 00       	push   0x5000
c001b6f2:	53                   	push   ebx
c001b6f3:	e8 48 4b ff ff       	call   c0010240 <Pipe::Pipe(int)>
c001b6f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6fb:	e8 a0 5d ff ff       	call   c00114a0 <UnixFile::getFileDescriptor()>
c001b700:	89 07                	mov    DWORD PTR [edi],eax
c001b702:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b705:	e8 96 5d ff ff       	call   c00114a0 <UnixFile::getFileDescriptor()>
c001b70a:	83 c4 10             	add    esp,0x10
c001b70d:	89 06                	mov    DWORD PTR [esi],eax
c001b70f:	31 d2                	xor    edx,edx
c001b711:	5b                   	pop    ebx
c001b712:	31 c0                	xor    eax,eax
c001b714:	5e                   	pop    esi
c001b715:	5f                   	pop    edi
c001b716:	c3                   	ret    

c001b717 <sysGetUnixTime(regs*)>:
c001b717:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c001b71c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b722:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b726:	e9 f3 80 ff ff       	jmp    c001381e <Clock::timeInSecondsLocal()>

c001b72b <string_ends_with(char const*, char const*)>:
c001b72b:	57                   	push   edi
c001b72c:	56                   	push   esi
c001b72d:	53                   	push   ebx
c001b72e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b732:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b736:	83 ec 0c             	sub    esp,0xc
c001b739:	53                   	push   ebx
c001b73a:	e8 b4 4f fe ff       	call   c00006f3 <strlen>
c001b73f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b742:	89 c6                	mov    esi,eax
c001b744:	e8 aa 4f fe ff       	call   c00006f3 <strlen>
c001b749:	83 c4 10             	add    esp,0x10
c001b74c:	39 c6                	cmp    esi,eax
c001b74e:	7d 06                	jge    c001b756 <string_ends_with(char const*, char const*)+0x2b>
c001b750:	5b                   	pop    ebx
c001b751:	31 c0                	xor    eax,eax
c001b753:	5e                   	pop    esi
c001b754:	5f                   	pop    edi
c001b755:	c3                   	ret    
c001b756:	83 ec 08             	sub    esp,0x8
c001b759:	29 c6                	sub    esi,eax
c001b75b:	57                   	push   edi
c001b75c:	01 f3                	add    ebx,esi
c001b75e:	53                   	push   ebx
c001b75f:	e8 62 50 fe ff       	call   c00007c6 <strcmp>
c001b764:	83 c4 10             	add    esp,0x10
c001b767:	85 c0                	test   eax,eax
c001b769:	5b                   	pop    ebx
c001b76a:	0f 94 c0             	sete   al
c001b76d:	5e                   	pop    esi
c001b76e:	0f b6 c0             	movzx  eax,al
c001b771:	5f                   	pop    edi
c001b772:	c3                   	ret    

c001b773 <sysCallOpen(regs*)>:
c001b773:	56                   	push   esi
c001b774:	53                   	push   ebx
c001b775:	81 ec 04 01 00 00    	sub    esp,0x104
c001b77b:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001b782:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001b785:	85 c9                	test   ecx,ecx
c001b787:	0f 84 b3 00 00 00    	je     c001b840 <sysCallOpen(regs*)+0xcd>
c001b78d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b790:	85 c0                	test   eax,eax
c001b792:	0f 84 a8 00 00 00    	je     c001b840 <sysCallOpen(regs*)+0xcd>
c001b798:	52                   	push   edx
c001b799:	68 0d ab 02 c0       	push   0xc002ab0d
c001b79e:	50                   	push   eax
c001b79f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b7a3:	56                   	push   esi
c001b7a4:	e8 e1 74 ff ff       	call   c0012c8a <Fs::standardiseFiles(char*, char const*, char const*)>
c001b7a9:	89 34 24             	mov    DWORD PTR [esp],esi
c001b7ac:	e8 42 4f fe ff       	call   c00006f3 <strlen>
c001b7b1:	83 c4 10             	add    esp,0x10
c001b7b4:	48                   	dec    eax
c001b7b5:	74 1d                	je     c001b7d4 <sysCallOpen(regs*)+0x61>
c001b7b7:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001b7ba:	eb 0f                	jmp    c001b7cb <sysCallOpen(regs*)+0x58>
c001b7bc:	80 fa 3a             	cmp    dl,0x3a
c001b7bf:	74 0f                	je     c001b7d0 <sysCallOpen(regs*)+0x5d>
c001b7c1:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001b7c5:	48                   	dec    eax
c001b7c6:	74 0c                	je     c001b7d4 <sysCallOpen(regs*)+0x61>
c001b7c8:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001b7cb:	80 fa 2e             	cmp    dl,0x2e
c001b7ce:	75 ec                	jne    c001b7bc <sysCallOpen(regs*)+0x49>
c001b7d0:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001b7d4:	83 ec 08             	sub    esp,0x8
c001b7d7:	68 11 ab 02 c0       	push   0xc002ab11
c001b7dc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b7df:	e8 47 ff ff ff       	call   c001b72b <string_ends_with(char const*, char const*)>
c001b7e4:	83 c4 10             	add    esp,0x10
c001b7e7:	85 c0                	test   eax,eax
c001b7e9:	75 17                	jne    c001b802 <sysCallOpen(regs*)+0x8f>
c001b7eb:	83 ec 08             	sub    esp,0x8
c001b7ee:	68 32 ab 02 c0       	push   0xc002ab32
c001b7f3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b7f6:	e8 30 ff ff ff       	call   c001b72b <string_ends_with(char const*, char const*)>
c001b7fb:	83 c4 10             	add    esp,0x10
c001b7fe:	85 c0                	test   eax,eax
c001b800:	74 51                	je     c001b853 <sysCallOpen(regs*)+0xe0>
c001b802:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b805:	83 ec 08             	sub    esp,0x8
c001b808:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001b80e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b815:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b818:	ff 30                	push   DWORD PTR [eax]
c001b81a:	68 16 ab 02 c0       	push   0xc002ab16
c001b81f:	e8 b7 70 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001b824:	c7 04 24 25 ab 02 c0 	mov    DWORD PTR [esp],0xc002ab25
c001b82b:	e8 ab 70 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001b830:	83 c4 10             	add    esp,0x10
c001b833:	81 c4 04 01 00 00    	add    esp,0x104
c001b839:	31 c0                	xor    eax,eax
c001b83b:	31 d2                	xor    edx,edx
c001b83d:	5b                   	pop    ebx
c001b83e:	5e                   	pop    esi
c001b83f:	c3                   	ret    
c001b840:	81 c4 04 01 00 00    	add    esp,0x104
c001b846:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b84b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b850:	5b                   	pop    ebx
c001b851:	5e                   	pop    esi
c001b852:	c3                   	ret    
c001b853:	83 ec 08             	sub    esp,0x8
c001b856:	68 12 ab 02 c0       	push   0xc002ab12
c001b85b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b85e:	e8 63 4f fe ff       	call   c00007c6 <strcmp>
c001b863:	83 c4 10             	add    esp,0x10
c001b866:	85 c0                	test   eax,eax
c001b868:	74 98                	je     c001b802 <sysCallOpen(regs*)+0x8f>
c001b86a:	83 ec 08             	sub    esp,0x8
c001b86d:	68 11 ab 02 c0       	push   0xc002ab11
c001b872:	56                   	push   esi
c001b873:	e8 b3 fe ff ff       	call   c001b72b <string_ends_with(char const*, char const*)>
c001b878:	83 c4 10             	add    esp,0x10
c001b87b:	85 c0                	test   eax,eax
c001b87d:	75 83                	jne    c001b802 <sysCallOpen(regs*)+0x8f>
c001b87f:	83 ec 08             	sub    esp,0x8
c001b882:	68 37 ab 02 c0       	push   0xc002ab37
c001b887:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b88a:	e8 9c fe ff ff       	call   c001b72b <string_ends_with(char const*, char const*)>
c001b88f:	83 c4 10             	add    esp,0x10
c001b892:	85 c0                	test   eax,eax
c001b894:	0f 85 d9 00 00 00    	jne    c001b973 <sysCallOpen(regs*)+0x200>
c001b89a:	83 ec 08             	sub    esp,0x8
c001b89d:	68 3c ab 02 c0       	push   0xc002ab3c
c001b8a2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b8a5:	e8 81 fe ff ff       	call   c001b72b <string_ends_with(char const*, char const*)>
c001b8aa:	83 c4 10             	add    esp,0x10
c001b8ad:	85 c0                	test   eax,eax
c001b8af:	0f 85 be 00 00 00    	jne    c001b973 <sysCallOpen(regs*)+0x200>
c001b8b5:	83 ec 08             	sub    esp,0x8
c001b8b8:	68 38 ab 02 c0       	push   0xc002ab38
c001b8bd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b8c0:	e8 01 4f fe ff       	call   c00007c6 <strcmp>
c001b8c5:	83 c4 10             	add    esp,0x10
c001b8c8:	85 c0                	test   eax,eax
c001b8ca:	0f 84 a3 00 00 00    	je     c001b973 <sysCallOpen(regs*)+0x200>
c001b8d0:	83 ec 08             	sub    esp,0x8
c001b8d3:	68 37 ab 02 c0       	push   0xc002ab37
c001b8d8:	56                   	push   esi
c001b8d9:	e8 4d fe ff ff       	call   c001b72b <string_ends_with(char const*, char const*)>
c001b8de:	83 c4 10             	add    esp,0x10
c001b8e1:	85 c0                	test   eax,eax
c001b8e3:	0f 85 8a 00 00 00    	jne    c001b973 <sysCallOpen(regs*)+0x200>
c001b8e9:	83 ec 0c             	sub    esp,0xc
c001b8ec:	68 14 01 00 00       	push   0x114
c001b8f1:	e8 40 3d ff ff       	call   c000f636 <malloc>
c001b8f6:	83 c4 0c             	add    esp,0xc
c001b8f9:	89 c6                	mov    esi,eax
c001b8fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b900:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b903:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b906:	56                   	push   esi
c001b907:	e8 28 75 ff ff       	call   c0012e34 <File::File(char const*, Process*)>
c001b90c:	83 c4 10             	add    esp,0x10
c001b90f:	85 f6                	test   esi,esi
c001b911:	0f 84 29 ff ff ff    	je     c001b840 <sysCallOpen(regs*)+0xcd>
c001b917:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b91a:	0f b6 c2             	movzx  eax,dl
c001b91d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001b920:	89 d0                	mov    eax,edx
c001b922:	83 e0 01             	and    eax,0x1
c001b925:	f6 c2 02             	test   dl,0x2
c001b928:	74 03                	je     c001b92d <sysCallOpen(regs*)+0x1ba>
c001b92a:	83 c8 02             	or     eax,0x2
c001b92d:	f6 c2 04             	test   dl,0x4
c001b930:	74 03                	je     c001b935 <sysCallOpen(regs*)+0x1c2>
c001b932:	83 c8 04             	or     eax,0x4
c001b935:	f6 c2 08             	test   dl,0x8
c001b938:	74 03                	je     c001b93d <sysCallOpen(regs*)+0x1ca>
c001b93a:	83 c8 0a             	or     eax,0xa
c001b93d:	83 e2 10             	and    edx,0x10
c001b940:	74 03                	je     c001b945 <sysCallOpen(regs*)+0x1d2>
c001b942:	83 c8 12             	or     eax,0x12
c001b945:	83 ec 08             	sub    esp,0x8
c001b948:	50                   	push   eax
c001b949:	56                   	push   esi
c001b94a:	e8 49 75 ff ff       	call   c0012e98 <File::open(FileOpenMode)>
c001b94f:	83 c4 10             	add    esp,0x10
c001b952:	85 c0                	test   eax,eax
c001b954:	0f 85 e6 fe ff ff    	jne    c001b840 <sysCallOpen(regs*)+0xcd>
c001b95a:	83 ec 0c             	sub    esp,0xc
c001b95d:	56                   	push   esi
c001b95e:	e8 3d 5b ff ff       	call   c00114a0 <UnixFile::getFileDescriptor()>
c001b963:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b966:	89 02                	mov    DWORD PTR [edx],eax
c001b968:	c1 f8 1f             	sar    eax,0x1f
c001b96b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b96e:	e9 bd fe ff ff       	jmp    c001b830 <sysCallOpen(regs*)+0xbd>
c001b973:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b976:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001b97c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b983:	e9 ab fe ff ff       	jmp    c001b833 <sysCallOpen(regs*)+0xc0>

c001b988 <Sys::loadSyscalls()>:
c001b988:	c7 05 20 da 02 c0 3e ab 01 c0 	mov    DWORD PTR ds:0xc002da20,0xc001ab3e
c001b992:	c7 05 24 da 02 c0 a0 a7 01 c0 	mov    DWORD PTR ds:0xc002da24,0xc001a7a0
c001b99c:	c7 05 28 da 02 c0 f3 a8 01 c0 	mov    DWORD PTR ds:0xc002da28,0xc001a8f3
c001b9a6:	c7 05 2c da 02 c0 d6 aa 01 c0 	mov    DWORD PTR ds:0xc002da2c,0xc001aad6
c001b9b0:	c7 05 30 da 02 c0 8b a8 01 c0 	mov    DWORD PTR ds:0xc002da30,0xc001a88b
c001b9ba:	c7 05 34 da 02 c0 d7 a7 01 c0 	mov    DWORD PTR ds:0xc002da34,0xc001a7d7
c001b9c4:	c7 05 38 da 02 c0 b8 a7 01 c0 	mov    DWORD PTR ds:0xc002da38,0xc001a7b8
c001b9ce:	c7 05 3c da 02 c0 48 a9 01 c0 	mov    DWORD PTR ds:0xc002da3c,0xc001a948
c001b9d8:	c7 05 44 da 02 c0 50 b0 01 c0 	mov    DWORD PTR ds:0xc002da44,0xc001b050
c001b9e2:	c7 05 40 da 02 c0 73 b7 01 c0 	mov    DWORD PTR ds:0xc002da40,0xc001b773
c001b9ec:	c7 05 48 da 02 c0 d8 b0 01 c0 	mov    DWORD PTR ds:0xc002da48,0xc001b0d8
c001b9f6:	c7 05 4c da 02 c0 3f ad 01 c0 	mov    DWORD PTR ds:0xc002da4c,0xc001ad3f
c001ba00:	c7 05 50 da 02 c0 79 ab 01 c0 	mov    DWORD PTR ds:0xc002da50,0xc001ab79
c001ba0a:	c7 05 54 da 02 c0 7e ab 01 c0 	mov    DWORD PTR ds:0xc002da54,0xc001ab7e
c001ba14:	c7 05 58 da 02 c0 b3 b1 01 c0 	mov    DWORD PTR ds:0xc002da58,0xc001b1b3
c001ba1e:	c7 05 5c da 02 c0 4d b1 01 c0 	mov    DWORD PTR ds:0xc002da5c,0xc001b14d
c001ba28:	c7 05 60 da 02 c0 27 ae 01 c0 	mov    DWORD PTR ds:0xc002da60,0xc001ae27
c001ba32:	c7 05 64 da 02 c0 90 ae 01 c0 	mov    DWORD PTR ds:0xc002da64,0xc001ae90
c001ba3c:	c7 05 68 da 02 c0 0d af 01 c0 	mov    DWORD PTR ds:0xc002da68,0xc001af0d
c001ba46:	c7 05 6c da 02 c0 83 ab 01 c0 	mov    DWORD PTR ds:0xc002da6c,0xc001ab83
c001ba50:	c7 05 70 da 02 c0 23 b2 01 c0 	mov    DWORD PTR ds:0xc002da70,0xc001b223
c001ba5a:	c7 05 74 da 02 c0 3d b2 01 c0 	mov    DWORD PTR ds:0xc002da74,0xc001b23d
c001ba64:	c7 05 78 da 02 c0 3d b2 01 c0 	mov    DWORD PTR ds:0xc002da78,0xc001b23d
c001ba6e:	c7 05 7c da 02 c0 7e b2 01 c0 	mov    DWORD PTR ds:0xc002da7c,0xc001b27e
c001ba78:	c7 05 80 da 02 c0 e2 b2 01 c0 	mov    DWORD PTR ds:0xc002da80,0xc001b2e2
c001ba82:	c7 05 84 da 02 c0 8d ab 01 c0 	mov    DWORD PTR ds:0xc002da84,0xc001ab8d
c001ba8c:	c7 05 88 da 02 c0 46 b3 01 c0 	mov    DWORD PTR ds:0xc002da88,0xc001b346
c001ba96:	c7 05 8c da 02 c0 fc ac 01 c0 	mov    DWORD PTR ds:0xc002da8c,0xc001acfc
c001baa0:	c7 05 90 da 02 c0 92 b3 01 c0 	mov    DWORD PTR ds:0xc002da90,0xc001b392
c001baaa:	c7 05 94 da 02 c0 cd ad 01 c0 	mov    DWORD PTR ds:0xc002da94,0xc001adcd
c001bab4:	c7 05 98 da 02 c0 15 b4 01 c0 	mov    DWORD PTR ds:0xc002da98,0xc001b415
c001babe:	c7 05 9c da 02 c0 90 af 01 c0 	mov    DWORD PTR ds:0xc002da9c,0xc001af90
c001bac8:	c7 05 a0 da 02 c0 3c b4 01 c0 	mov    DWORD PTR ds:0xc002daa0,0xc001b43c
c001bad2:	c7 05 a4 da 02 c0 94 b4 01 c0 	mov    DWORD PTR ds:0xc002daa4,0xc001b494
c001badc:	c7 05 a8 da 02 c0 41 b5 01 c0 	mov    DWORD PTR ds:0xc002daa8,0xc001b541
c001bae6:	c7 05 ac da 02 c0 9d ab 01 c0 	mov    DWORD PTR ds:0xc002daac,0xc001ab9d
c001baf0:	c7 05 b0 da 02 c0 07 ac 01 c0 	mov    DWORD PTR ds:0xc002dab0,0xc001ac07
c001bafa:	c7 05 b4 da 02 c0 4d ac 01 c0 	mov    DWORD PTR ds:0xc002dab4,0xc001ac4d
c001bb04:	c7 05 b8 da 02 c0 60 b6 01 c0 	mov    DWORD PTR ds:0xc002dab8,0xc001b660
c001bb0e:	c7 05 bc da 02 c0 58 b2 01 c0 	mov    DWORD PTR ds:0xc002dabc,0xc001b258
c001bb18:	c7 05 c0 da 02 c0 9e ac 01 c0 	mov    DWORD PTR ds:0xc002dac0,0xc001ac9e
c001bb22:	c7 05 c4 da 02 c0 d2 b6 01 c0 	mov    DWORD PTR ds:0xc002dac4,0xc001b6d2
c001bb2c:	c7 05 c8 da 02 c0 17 b7 01 c0 	mov    DWORD PTR ds:0xc002dac8,0xc001b717
c001bb36:	c7 05 cc da 02 c0 e3 a7 01 c0 	mov    DWORD PTR ds:0xc002dacc,0xc001a7e3
c001bb40:	c7 05 d0 da 02 c0 64 a9 01 c0 	mov    DWORD PTR ds:0xc002dad0,0xc001a964
c001bb4a:	c7 05 d4 da 02 c0 8c aa 01 c0 	mov    DWORD PTR ds:0xc002dad4,0xc001aa8c
c001bb54:	c3                   	ret    

c001bb55 <Sys::systemCall(regs*, void*)>:
c001bb55:	53                   	push   ebx
c001bb56:	83 ec 08             	sub    esp,0x8
c001bb59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb5d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001bb60:	83 f8 7f             	cmp    eax,0x7f
c001bb63:	77 16                	ja     c001bb7b <Sys::systemCall(regs*, void*)+0x26>
c001bb65:	8b 14 85 20 da 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd25e0]
c001bb6c:	85 d2                	test   edx,edx
c001bb6e:	74 0b                	je     c001bb7b <Sys::systemCall(regs*, void*)+0x26>
c001bb70:	83 ec 0c             	sub    esp,0xc
c001bb73:	53                   	push   ebx
c001bb74:	ff d2                	call   edx
c001bb76:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001bb79:	eb 0d                	jmp    c001bb88 <Sys::systemCall(regs*, void*)+0x33>
c001bb7b:	52                   	push   edx
c001bb7c:	52                   	push   edx
c001bb7d:	50                   	push   eax
c001bb7e:	68 41 ab 02 c0       	push   0xc002ab41
c001bb83:	e8 53 6d ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001bb88:	83 c4 10             	add    esp,0x10
c001bb8b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bb90:	31 d2                	xor    edx,edx
c001bb92:	83 c4 08             	add    esp,0x8
c001bb95:	5b                   	pop    ebx
c001bb96:	c3                   	ret    

c001bb97 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001bb97:	55                   	push   ebp
c001bb98:	89 e5                	mov    ebp,esp
c001bb9a:	57                   	push   edi
c001bb9b:	56                   	push   esi
c001bb9c:	53                   	push   ebx
c001bb9d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001bba3:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001bba6:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001bba9:	85 c0                	test   eax,eax
c001bbab:	0f 95 c1             	setne  cl
c001bbae:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001bbb2:	0f 94 c2             	sete   dl
c001bbb5:	84 d1                	test   cl,dl
c001bbb7:	74 26                	je     c001bbdf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001bbb9:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001bbc0:	74 1d                	je     c001bbdf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001bbc2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001bbc5:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001bbcb:	89 d6                	mov    esi,edx
c001bbcd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001bbd3:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001bbd9:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bbdc:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001bbdf:	83 ec 0c             	sub    esp,0xc
c001bbe2:	05 ff 0f 00 00       	add    eax,0xfff
c001bbe7:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001bbea:	6a 01                	push   0x1
c001bbec:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001bbf2:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001bbf8:	e8 ee 5c ff ff       	call   c00118eb <Virt::allocateKernelVirtualPages(int)>
c001bbfd:	83 c4 10             	add    esp,0x10
c001bc00:	89 c6                	mov    esi,eax
c001bc02:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001bc08:	0f 86 21 01 00 00    	jbe    c001bd2f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001bc0e:	c1 eb 0c             	shr    ebx,0xc
c001bc11:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001bc1b:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001bc21:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bc24:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bc27:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001bc2d:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001bc30:	29 d8                	sub    eax,ebx
c001bc32:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001bc38:	0f 83 f4 00 00 00    	jae    c001bd32 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001bc3e:	83 ec 0c             	sub    esp,0xc
c001bc41:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001bc47:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001bc4a:	3d 00 10 00 00       	cmp    eax,0x1000
c001bc4f:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001bc51:	52                   	push   edx
c001bc52:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001bc58:	52                   	push   edx
c001bc59:	76 05                	jbe    c001bc60 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001bc5b:	b8 00 10 00 00       	mov    eax,0x1000
c001bc60:	31 d2                	xor    edx,edx
c001bc62:	52                   	push   edx
c001bc63:	50                   	push   eax
c001bc64:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001bc67:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bc6a:	83 c4 20             	add    esp,0x20
c001bc6d:	85 c0                	test   eax,eax
c001bc6f:	74 1f                	je     c001bc90 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001bc71:	51                   	push   ecx
c001bc72:	51                   	push   ecx
c001bc73:	50                   	push   eax
c001bc74:	68 55 ab 02 c0       	push   0xc002ab55
c001bc79:	e8 5d 6c ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001bc7e:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc81:	e8 c9 5f ff ff       	call   c0011c4f <Virt::freeKernelVirtualPages(unsigned long)>
c001bc86:	83 c4 10             	add    esp,0x10
c001bc89:	31 c0                	xor    eax,eax
c001bc8b:	e9 7c 01 00 00       	jmp    c001be0c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001bc90:	e8 c5 14 00 00       	call   c001d15a <lockScheduler()>
c001bc95:	e8 0f 40 ff ff       	call   c000fca9 <Phys::allocatePage()>
c001bc9a:	6a 07                	push   0x7
c001bc9c:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001bca2:	56                   	push   esi
c001bca3:	50                   	push   eax
c001bca4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bcaa:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001bcad:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001bcb3:	e8 fe 62 ff ff       	call   c0011fb6 <VAS::mapPage(unsigned long, unsigned long, int)>
c001bcb8:	83 c4 0c             	add    esp,0xc
c001bcbb:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bcc1:	6a 00                	push   0x0
c001bcc3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bcc9:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001bccc:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001bcd2:	e8 49 61 ff ff       	call   c0011e20 <VAS::mapOtherVASIn(bool, VAS*)>
c001bcd7:	58                   	pop    eax
c001bcd8:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001bcde:	5a                   	pop    edx
c001bcdf:	68 07 04 00 00       	push   0x407
c001bce4:	53                   	push   ebx
c001bce5:	81 c3 00 10 00 00    	add    ebx,0x1000
c001bceb:	50                   	push   eax
c001bcec:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bcf2:	6a 00                	push   0x0
c001bcf4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcf9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bcfc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001bd02:	e8 69 66 ff ff       	call   c0012370 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001bd07:	83 c4 1c             	add    esp,0x1c
c001bd0a:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001bd10:	68 00 10 00 00       	push   0x1000
c001bd15:	50                   	push   eax
c001bd16:	56                   	push   esi
c001bd17:	e8 84 49 fe ff       	call   c00006a0 <memcpy>
c001bd1c:	e8 3b 14 00 00       	call   c001d15c <unlockScheduler()>
c001bd21:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001bd27:	83 c4 10             	add    esp,0x10
c001bd2a:	e9 f5 fe ff ff       	jmp    c001bc24 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001bd2f:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bd32:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001bd3c:	0f 86 bc 00 00 00    	jbe    c001bdfe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001bd42:	e8 13 14 00 00       	call   c001d15a <lockScheduler()>
c001bd47:	51                   	push   ecx
c001bd48:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bd4e:	6a 00                	push   0x0
c001bd50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd55:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bd58:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001bd5e:	e8 bd 60 ff ff       	call   c0011e20 <VAS::mapOtherVASIn(bool, VAS*)>
c001bd63:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001bd69:	83 c4 10             	add    esp,0x10
c001bd6c:	c1 e8 0c             	shr    eax,0xc
c001bd6f:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001bd79:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001bd7f:	e8 25 3f ff ff       	call   c000fca9 <Phys::allocatePage()>
c001bd84:	6a 07                	push   0x7
c001bd86:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001bd8c:	56                   	push   esi
c001bd8d:	50                   	push   eax
c001bd8e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bd94:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bd97:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001bd9d:	e8 14 62 ff ff       	call   c0011fb6 <VAS::mapPage(unsigned long, unsigned long, int)>
c001bda2:	58                   	pop    eax
c001bda3:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001bda9:	5a                   	pop    edx
c001bdaa:	68 07 04 00 00       	push   0x407
c001bdaf:	53                   	push   ebx
c001bdb0:	81 c3 00 10 00 00    	add    ebx,0x1000
c001bdb6:	50                   	push   eax
c001bdb7:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bdbd:	6a 00                	push   0x0
c001bdbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdc4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bdc7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001bdcd:	e8 9e 65 ff ff       	call   c0012370 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001bdd2:	83 c4 1c             	add    esp,0x1c
c001bdd5:	68 00 10 00 00       	push   0x1000
c001bdda:	6a 00                	push   0x0
c001bddc:	56                   	push   esi
c001bddd:	e8 f4 48 fe ff       	call   c00006d6 <memset>
c001bde2:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001bde8:	83 c4 10             	add    esp,0x10
c001bdeb:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001bdf1:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001bdf7:	77 86                	ja     c001bd7f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001bdf9:	e8 5e 13 00 00       	call   c001d15c <unlockScheduler()>
c001bdfe:	83 ec 0c             	sub    esp,0xc
c001be01:	56                   	push   esi
c001be02:	e8 48 5e ff ff       	call   c0011c4f <Virt::freeKernelVirtualPages(unsigned long)>
c001be07:	83 c4 10             	add    esp,0x10
c001be0a:	b0 01                	mov    al,0x1
c001be0c:	8d 65 f4             	lea    esp,[ebp-0xc]
c001be0f:	5b                   	pop    ebx
c001be10:	5e                   	pop    esi
c001be11:	5f                   	pop    edi
c001be12:	5d                   	pop    ebp
c001be13:	c3                   	ret    

c001be14 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001be14:	55                   	push   ebp
c001be15:	57                   	push   edi
c001be16:	56                   	push   esi
c001be17:	53                   	push   ebx
c001be18:	83 ec 48             	sub    esp,0x48
c001be1b:	68 14 01 00 00       	push   0x114
c001be20:	e8 11 38 ff ff       	call   c000f636 <malloc>
c001be25:	83 c4 0c             	add    esp,0xc
c001be28:	89 c6                	mov    esi,eax
c001be2a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001be2e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001be32:	50                   	push   eax
c001be33:	e8 fc 6f ff ff       	call   c0012e34 <File::File(char const*, Process*)>
c001be38:	58                   	pop    eax
c001be39:	5a                   	pop    edx
c001be3a:	6a 01                	push   0x1
c001be3c:	56                   	push   esi
c001be3d:	e8 56 70 ff ff       	call   c0012e98 <File::open(FileOpenMode)>
c001be42:	83 c4 10             	add    esp,0x10
c001be45:	85 c0                	test   eax,eax
c001be47:	0f 85 47 01 00 00    	jne    c001bf94 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001be4d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001be55:	83 ec 0c             	sub    esp,0xc
c001be58:	6a 34                	push   0x34
c001be5a:	e8 d7 37 ff ff       	call   c000f636 <malloc>
c001be5f:	89 c3                	mov    ebx,eax
c001be61:	58                   	pop    eax
c001be62:	8b 06                	mov    eax,DWORD PTR [esi]
c001be64:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001be68:	57                   	push   edi
c001be69:	53                   	push   ebx
c001be6a:	6a 00                	push   0x0
c001be6c:	6a 34                	push   0x34
c001be6e:	56                   	push   esi
c001be6f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001be72:	83 c4 20             	add    esp,0x20
c001be75:	85 c0                	test   eax,eax
c001be77:	0f 85 17 01 00 00    	jne    c001bf94 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001be7d:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001be83:	0f 85 0b 01 00 00    	jne    c001bf94 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001be89:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be8c:	85 c0                	test   eax,eax
c001be8e:	0f 84 00 01 00 00    	je     c001bf94 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001be94:	31 d2                	xor    edx,edx
c001be96:	55                   	push   ebp
c001be97:	52                   	push   edx
c001be98:	50                   	push   eax
c001be99:	56                   	push   esi
c001be9a:	e8 b7 70 ff ff       	call   c0012f56 <File::seek(unsigned long long)>
c001be9f:	83 c4 10             	add    esp,0x10
c001bea2:	85 c0                	test   eax,eax
c001bea4:	0f 85 ea 00 00 00    	jne    c001bf94 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001beaa:	83 ec 0c             	sub    esp,0xc
c001bead:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001beb0:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001beb4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001beb8:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001bebc:	0f af c2             	imul   eax,edx
c001bebf:	50                   	push   eax
c001bec0:	e8 71 37 ff ff       	call   c000f636 <malloc>
c001bec5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001bec7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001becb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bece:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bed2:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001bed6:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001beda:	0f af c2             	imul   eax,edx
c001bedd:	99                   	cdq    
c001bede:	52                   	push   edx
c001bedf:	50                   	push   eax
c001bee0:	56                   	push   esi
c001bee1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bee4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bee7:	83 c4 20             	add    esp,0x20
c001beea:	85 c0                	test   eax,eax
c001beec:	0f 84 a2 00 00 00    	je     c001bf94 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bef2:	31 d2                	xor    edx,edx
c001bef4:	51                   	push   ecx
c001bef5:	52                   	push   edx
c001bef6:	50                   	push   eax
c001bef7:	56                   	push   esi
c001bef8:	e8 59 70 ff ff       	call   c0012f56 <File::seek(unsigned long long)>
c001befd:	83 c4 10             	add    esp,0x10
c001bf00:	85 c0                	test   eax,eax
c001bf02:	0f 85 8c 00 00 00    	jne    c001bf94 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bf08:	83 ec 0c             	sub    esp,0xc
c001bf0b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001bf0f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001bf13:	31 ed                	xor    ebp,ebp
c001bf15:	0f af c2             	imul   eax,edx
c001bf18:	50                   	push   eax
c001bf19:	e8 18 37 ff ff       	call   c000f636 <malloc>
c001bf1e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001bf20:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bf24:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf2b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001bf2f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001bf33:	0f af c2             	imul   eax,edx
c001bf36:	99                   	cdq    
c001bf37:	52                   	push   edx
c001bf38:	50                   	push   eax
c001bf39:	56                   	push   esi
c001bf3a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bf3d:	83 c4 20             	add    esp,0x20
c001bf40:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bf48:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001bf4c:	0f 86 80 00 00 00    	jbe    c001bfd2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001bf52:	0f b7 fd             	movzx  edi,bp
c001bf55:	c1 e7 05             	shl    edi,0x5
c001bf58:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001bf5c:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001bf5f:	75 6b                	jne    c001bfcc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bf61:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001bf64:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bf68:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001bf6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bf6f:	52                   	push   edx
c001bf70:	31 d2                	xor    edx,edx
c001bf72:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001bf75:	52                   	push   edx
c001bf76:	50                   	push   eax
c001bf77:	56                   	push   esi
c001bf78:	e8 d9 6f ff ff       	call   c0012f56 <File::seek(unsigned long long)>
c001bf7d:	83 c4 10             	add    esp,0x10
c001bf80:	85 c0                	test   eax,eax
c001bf82:	74 17                	je     c001bf9b <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001bf84:	83 ec 0c             	sub    esp,0xc
c001bf87:	68 80 ab 02 c0       	push   0xc002ab80
c001bf8c:	e8 4a 69 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001bf91:	83 c4 10             	add    esp,0x10
c001bf94:	31 c0                	xor    eax,eax
c001bf96:	e9 87 00 00 00       	jmp    c001c022 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001bf9b:	83 ec 0c             	sub    esp,0xc
c001bf9e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001bfa1:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001bfa4:	50                   	push   eax
c001bfa5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bfa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfad:	56                   	push   esi
c001bfae:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001bfb2:	e8 e0 fb ff ff       	call   c001bb97 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001bfb7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bfbb:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001bfbf:	83 c4 20             	add    esp,0x20
c001bfc2:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bfc6:	73 04                	jae    c001bfcc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bfc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bfcc:	45                   	inc    ebp
c001bfcd:	e9 76 ff ff ff       	jmp    c001bf48 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001bfd2:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001bfd6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bfda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bfde:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001bfe4:	83 ec 0c             	sub    esp,0xc
c001bfe7:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001bfed:	25 00 f0 ff ff       	and    eax,0xfffff000
c001bff2:	05 00 10 00 00       	add    eax,0x1000
c001bff7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bffe:	e8 43 36 ff ff       	call   c000f646 <free>
c001c003:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c006:	e8 3b 36 ff ff       	call   c000f646 <free>
c001c00b:	58                   	pop    eax
c001c00c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c010:	e8 31 36 ff ff       	call   c000f646 <free>
c001c015:	89 34 24             	mov    DWORD PTR [esp],esi
c001c018:	e8 d9 6e ff ff       	call   c0012ef6 <File::close()>
c001c01d:	83 c4 10             	add    esp,0x10
c001c020:	b0 01                	mov    al,0x1
c001c022:	83 c4 3c             	add    esp,0x3c
c001c025:	5b                   	pop    ebx
c001c026:	5e                   	pop    esi
c001c027:	5f                   	pop    edi
c001c028:	5d                   	pop    ebp
c001c029:	c3                   	ret    

c001c02a <Thr::runtimeReferenceHelper()>:
c001c02a:	83 ec 18             	sub    esp,0x18
c001c02d:	68 88 ab 02 c0       	push   0xc002ab88
c001c032:	e8 a4 68 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001c037:	fa                   	cli    
c001c038:	83 c4 10             	add    esp,0x10
c001c03b:	eb fe                	jmp    c001c03b <Thr::runtimeReferenceHelper()+0x11>

c001c03d <Thr::getAddressOfKernelSymbol(char const*)>:
c001c03d:	57                   	push   edi
c001c03e:	56                   	push   esi
c001c03f:	53                   	push   ebx
c001c040:	31 db                	xor    ebx,ebx
c001c042:	39 1d c0 e3 02 c0    	cmp    DWORD PTR ds:0xc002e3c0,ebx
c001c048:	7e 3c                	jle    c001c086 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c04a:	8b 34 9d 40 e3 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd1cc0]
c001c051:	31 ff                	xor    edi,edi
c001c053:	39 3c 9d 40 e2 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd1dc0],edi
c001c05a:	7e 27                	jle    c001c083 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c05c:	50                   	push   eax
c001c05d:	50                   	push   eax
c001c05e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c062:	8b 06                	mov    eax,DWORD PTR [esi]
c001c064:	03 04 9d c0 e2 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd1d40]
c001c06b:	50                   	push   eax
c001c06c:	e8 55 47 fe ff       	call   c00007c6 <strcmp>
c001c071:	83 c4 10             	add    esp,0x10
c001c074:	85 c0                	test   eax,eax
c001c076:	75 05                	jne    c001c07d <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c078:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c07b:	eb 0b                	jmp    c001c088 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c07d:	83 c6 10             	add    esi,0x10
c001c080:	47                   	inc    edi
c001c081:	eb d0                	jmp    c001c053 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c083:	43                   	inc    ebx
c001c084:	eb bc                	jmp    c001c042 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c086:	31 c0                	xor    eax,eax
c001c088:	5b                   	pop    ebx
c001c089:	5e                   	pop    esi
c001c08a:	5f                   	pop    edi
c001c08b:	c3                   	ret    

c001c08c <Thr::loadKernelSymbolTable(char const*)>:
c001c08c:	55                   	push   ebp
c001c08d:	57                   	push   edi
c001c08e:	56                   	push   esi
c001c08f:	53                   	push   ebx
c001c090:	83 ec 68             	sub    esp,0x68
c001c093:	8b 35 14 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e414
c001c099:	68 14 01 00 00       	push   0x114
c001c09e:	e8 93 35 ff ff       	call   c000f636 <malloc>
c001c0a3:	83 c4 0c             	add    esp,0xc
c001c0a6:	89 c3                	mov    ebx,eax
c001c0a8:	56                   	push   esi
c001c0a9:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c0ad:	50                   	push   eax
c001c0ae:	e8 81 6d ff ff       	call   c0012e34 <File::File(char const*, Process*)>
c001c0b3:	5e                   	pop    esi
c001c0b4:	5f                   	pop    edi
c001c0b5:	6a 01                	push   0x1
c001c0b7:	53                   	push   ebx
c001c0b8:	e8 db 6d ff ff       	call   c0012e98 <File::open(FileOpenMode)>
c001c0bd:	83 c4 10             	add    esp,0x10
c001c0c0:	31 d2                	xor    edx,edx
c001c0c2:	85 c0                	test   eax,eax
c001c0c4:	0f 85 74 02 00 00    	jne    c001c33e <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001c0ca:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c0d2:	83 ec 0c             	sub    esp,0xc
c001c0d5:	6a 34                	push   0x34
c001c0d7:	e8 5a 35 ff ff       	call   c000f636 <malloc>
c001c0dc:	59                   	pop    ecx
c001c0dd:	89 c7                	mov    edi,eax
c001c0df:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c0e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c0e5:	56                   	push   esi
c001c0e6:	57                   	push   edi
c001c0e7:	6a 00                	push   0x0
c001c0e9:	6a 34                	push   0x34
c001c0eb:	53                   	push   ebx
c001c0ec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c0ef:	83 c4 20             	add    esp,0x20
c001c0f2:	85 c0                	test   eax,eax
c001c0f4:	74 17                	je     c001c10d <Thr::loadKernelSymbolTable(char const*)+0x81>
c001c0f6:	83 ec 0c             	sub    esp,0xc
c001c0f9:	68 aa ab 02 c0       	push   0xc002abaa
c001c0fe:	e8 a8 da ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001c103:	83 c4 10             	add    esp,0x10
c001c106:	31 d2                	xor    edx,edx
c001c108:	e9 31 02 00 00       	jmp    c001c33e <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001c10d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c113:	75 e1                	jne    c001c0f6 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001c115:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c118:	85 c0                	test   eax,eax
c001c11a:	74 da                	je     c001c0f6 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001c11c:	52                   	push   edx
c001c11d:	31 d2                	xor    edx,edx
c001c11f:	52                   	push   edx
c001c120:	50                   	push   eax
c001c121:	53                   	push   ebx
c001c122:	e8 2f 6e ff ff       	call   c0012f56 <File::seek(unsigned long long)>
c001c127:	83 c4 10             	add    esp,0x10
c001c12a:	85 c0                	test   eax,eax
c001c12c:	75 c8                	jne    c001c0f6 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001c12e:	83 ec 0c             	sub    esp,0xc
c001c131:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c135:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c139:	31 ed                	xor    ebp,ebp
c001c13b:	0f af c2             	imul   eax,edx
c001c13e:	50                   	push   eax
c001c13f:	e8 f2 34 ff ff       	call   c000f636 <malloc>
c001c144:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c146:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c14a:	89 34 24             	mov    DWORD PTR [esp],esi
c001c14d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c151:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c155:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c159:	0f af c2             	imul   eax,edx
c001c15c:	99                   	cdq    
c001c15d:	52                   	push   edx
c001c15e:	50                   	push   eax
c001c15f:	53                   	push   ebx
c001c160:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c163:	83 c4 20             	add    esp,0x20
c001c166:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c16e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c176:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c17e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c186:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c18a:	0f 86 aa 00 00 00    	jbe    c001c23a <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001c190:	0f b7 f5             	movzx  esi,bp
c001c193:	6b f6 28             	imul   esi,esi,0x28
c001c196:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c19a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c19d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c1a1:	50                   	push   eax
c001c1a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c1a6:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c1aa:	8b 16                	mov    edx,DWORD PTR [esi]
c001c1ac:	6b c0 28             	imul   eax,eax,0x28
c001c1af:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c1b3:	89 d0                	mov    eax,edx
c001c1b5:	31 d2                	xor    edx,edx
c001c1b7:	52                   	push   edx
c001c1b8:	50                   	push   eax
c001c1b9:	53                   	push   ebx
c001c1ba:	e8 97 6d ff ff       	call   c0012f56 <File::seek(unsigned long long)>
c001c1bf:	83 c4 0c             	add    esp,0xc
c001c1c2:	6a 20                	push   0x20
c001c1c4:	6a 00                	push   0x0
c001c1c6:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c1ca:	52                   	push   edx
c001c1cb:	e8 06 45 fe ff       	call   c00006d6 <memset>
c001c1d0:	58                   	pop    eax
c001c1d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c1d3:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c1d7:	51                   	push   ecx
c001c1d8:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c1dc:	52                   	push   edx
c001c1dd:	6a 00                	push   0x0
c001c1df:	6a 1f                	push   0x1f
c001c1e1:	53                   	push   ebx
c001c1e2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c1e5:	83 c4 18             	add    esp,0x18
c001c1e8:	68 c1 ab 02 c0       	push   0xc002abc1
c001c1ed:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c1f1:	52                   	push   edx
c001c1f2:	e8 cf 45 fe ff       	call   c00007c6 <strcmp>
c001c1f7:	83 c4 10             	add    esp,0x10
c001c1fa:	85 c0                	test   eax,eax
c001c1fc:	75 0f                	jne    c001c20d <Thr::loadKernelSymbolTable(char const*)+0x181>
c001c1fe:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c201:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c205:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c209:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c20d:	50                   	push   eax
c001c20e:	50                   	push   eax
c001c20f:	68 c9 ab 02 c0       	push   0xc002abc9
c001c214:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c218:	50                   	push   eax
c001c219:	e8 a8 45 fe ff       	call   c00007c6 <strcmp>
c001c21e:	83 c4 10             	add    esp,0x10
c001c221:	85 c0                	test   eax,eax
c001c223:	75 0f                	jne    c001c234 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001c225:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c228:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c22c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c230:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c234:	45                   	inc    ebp
c001c235:	e9 4c ff ff ff       	jmp    c001c186 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001c23a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c23f:	75 10                	jne    c001c251 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001c241:	83 ec 0c             	sub    esp,0xc
c001c244:	68 d1 ab 02 c0       	push   0xc002abd1
c001c249:	e8 5d d9 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001c24e:	83 c4 10             	add    esp,0x10
c001c251:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c256:	75 10                	jne    c001c268 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001c258:	83 ec 0c             	sub    esp,0xc
c001c25b:	68 d1 ab 02 c0       	push   0xc002abd1
c001c260:	e8 46 d9 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001c265:	83 c4 10             	add    esp,0x10
c001c268:	31 d2                	xor    edx,edx
c001c26a:	50                   	push   eax
c001c26b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c26f:	52                   	push   edx
c001c270:	50                   	push   eax
c001c271:	53                   	push   ebx
c001c272:	e8 df 6c ff ff       	call   c0012f56 <File::seek(unsigned long long)>
c001c277:	5a                   	pop    edx
c001c278:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c27c:	e8 b5 33 ff ff       	call   c000f636 <malloc>
c001c281:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c285:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c289:	31 c9                	xor    ecx,ecx
c001c28b:	5e                   	pop    esi
c001c28c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c28e:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c292:	55                   	push   ebp
c001c293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c297:	51                   	push   ecx
c001c298:	52                   	push   edx
c001c299:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c29d:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c2a1:	53                   	push   ebx
c001c2a2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c2a5:	83 c4 14             	add    esp,0x14
c001c2a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c2ac:	e8 85 33 ff ff       	call   c000f636 <malloc>
c001c2b1:	89 c6                	mov    esi,eax
c001c2b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c2b5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c2b8:	56                   	push   esi
c001c2b9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c2bd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c2c1:	51                   	push   ecx
c001c2c2:	52                   	push   edx
c001c2c3:	53                   	push   ebx
c001c2c4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c2c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c2cb:	8b 15 c0 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3c0
c001c2d1:	83 c4 1c             	add    esp,0x1c
c001c2d4:	c1 e8 04             	shr    eax,0x4
c001c2d7:	89 04 95 40 e2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1dc0],eax
c001c2de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c2e2:	31 d2                	xor    edx,edx
c001c2e4:	52                   	push   edx
c001c2e5:	50                   	push   eax
c001c2e6:	53                   	push   ebx
c001c2e7:	e8 6a 6c ff ff       	call   c0012f56 <File::seek(unsigned long long)>
c001c2ec:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c2ee:	31 d2                	xor    edx,edx
c001c2f0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c2f3:	56                   	push   esi
c001c2f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c2f8:	52                   	push   edx
c001c2f9:	50                   	push   eax
c001c2fa:	53                   	push   ebx
c001c2fb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c2fe:	83 c4 14             	add    esp,0x14
c001c301:	53                   	push   ebx
c001c302:	e8 ef 6b ff ff       	call   c0012ef6 <File::close()>
c001c307:	5d                   	pop    ebp
c001c308:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c30c:	e8 35 33 ff ff       	call   c000f646 <free>
c001c311:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c314:	e8 2d 33 ff ff       	call   c000f646 <free>
c001c319:	a1 c0 e3 02 c0       	mov    eax,ds:0xc002e3c0
c001c31e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c322:	8d 50 01             	lea    edx,[eax+0x1]
c001c325:	89 0c 85 40 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1cc0],ecx
c001c32c:	89 15 c0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3c0,edx
c001c332:	89 34 85 c0 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d40],esi
c001c339:	83 c4 10             	add    esp,0x10
c001c33c:	b2 01                	mov    dl,0x1
c001c33e:	83 c4 5c             	add    esp,0x5c
c001c341:	88 d0                	mov    al,dl
c001c343:	5b                   	pop    ebx
c001c344:	5e                   	pop    esi
c001c345:	5f                   	pop    edi
c001c346:	5d                   	pop    ebp
c001c347:	c3                   	ret    

c001c348 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c348:	55                   	push   ebp
c001c349:	57                   	push   edi
c001c34a:	56                   	push   esi
c001c34b:	53                   	push   ebx
c001c34c:	81 ec 68 03 00 00    	sub    esp,0x368
c001c352:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c359:	8b 1d 14 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e414
c001c35f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c363:	68 14 01 00 00       	push   0x114
c001c368:	e8 c9 32 ff ff       	call   c000f636 <malloc>
c001c36d:	83 c4 0c             	add    esp,0xc
c001c370:	89 c5                	mov    ebp,eax
c001c372:	53                   	push   ebx
c001c373:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c37a:	50                   	push   eax
c001c37b:	e8 b4 6a ff ff       	call   c0012e34 <File::File(char const*, Process*)>
c001c380:	5e                   	pop    esi
c001c381:	5f                   	pop    edi
c001c382:	6a 01                	push   0x1
c001c384:	55                   	push   ebp
c001c385:	e8 0e 6b ff ff       	call   c0012e98 <File::open(FileOpenMode)>
c001c38a:	83 c4 10             	add    esp,0x10
c001c38d:	85 c0                	test   eax,eax
c001c38f:	0f 85 8d 06 00 00    	jne    c001ca22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c395:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c39d:	83 ec 0c             	sub    esp,0xc
c001c3a0:	6a 34                	push   0x34
c001c3a2:	e8 8f 32 ff ff       	call   c000f636 <malloc>
c001c3a7:	5b                   	pop    ebx
c001c3a8:	89 c7                	mov    edi,eax
c001c3aa:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c3ae:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c3b1:	53                   	push   ebx
c001c3b2:	57                   	push   edi
c001c3b3:	6a 00                	push   0x0
c001c3b5:	6a 34                	push   0x34
c001c3b7:	55                   	push   ebp
c001c3b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c3bb:	83 c4 20             	add    esp,0x20
c001c3be:	85 c0                	test   eax,eax
c001c3c0:	0f 85 5c 06 00 00    	jne    c001ca22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c3c6:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c3cc:	0f 85 50 06 00 00    	jne    c001ca22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c3d2:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c3d5:	85 c0                	test   eax,eax
c001c3d7:	0f 84 45 06 00 00    	je     c001ca22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c3dd:	31 d2                	xor    edx,edx
c001c3df:	51                   	push   ecx
c001c3e0:	52                   	push   edx
c001c3e1:	50                   	push   eax
c001c3e2:	55                   	push   ebp
c001c3e3:	e8 6e 6b ff ff       	call   c0012f56 <File::seek(unsigned long long)>
c001c3e8:	83 c4 10             	add    esp,0x10
c001c3eb:	85 c0                	test   eax,eax
c001c3ed:	0f 85 2f 06 00 00    	jne    c001ca22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c3f3:	83 ec 0c             	sub    esp,0xc
c001c3f6:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c3f9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c3fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c401:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c405:	0f af c2             	imul   eax,edx
c001c408:	50                   	push   eax
c001c409:	e8 28 32 ff ff       	call   c000f636 <malloc>
c001c40e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c411:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c415:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c418:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c41c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c420:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c424:	0f af c2             	imul   eax,edx
c001c427:	99                   	cdq    
c001c428:	52                   	push   edx
c001c429:	50                   	push   eax
c001c42a:	55                   	push   ebp
c001c42b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c42e:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c431:	83 c4 20             	add    esp,0x20
c001c434:	85 c0                	test   eax,eax
c001c436:	0f 84 e6 05 00 00    	je     c001ca22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c43c:	52                   	push   edx
c001c43d:	31 d2                	xor    edx,edx
c001c43f:	52                   	push   edx
c001c440:	50                   	push   eax
c001c441:	55                   	push   ebp
c001c442:	e8 0f 6b ff ff       	call   c0012f56 <File::seek(unsigned long long)>
c001c447:	83 c4 10             	add    esp,0x10
c001c44a:	85 c0                	test   eax,eax
c001c44c:	0f 85 d0 05 00 00    	jne    c001ca22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c452:	83 ec 0c             	sub    esp,0xc
c001c455:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c459:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c45d:	31 f6                	xor    esi,esi
c001c45f:	0f af c2             	imul   eax,edx
c001c462:	50                   	push   eax
c001c463:	e8 ce 31 ff ff       	call   c000f636 <malloc>
c001c468:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c46b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c46f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c472:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c476:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c47a:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c47e:	0f af c2             	imul   eax,edx
c001c481:	99                   	cdq    
c001c482:	52                   	push   edx
c001c483:	50                   	push   eax
c001c484:	55                   	push   ebp
c001c485:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c488:	83 c4 20             	add    esp,0x20
c001c48b:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c48f:	0f 86 8a 00 00 00    	jbe    c001c51f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c495:	0f b7 de             	movzx  ebx,si
c001c498:	c1 e3 05             	shl    ebx,0x5
c001c49b:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c49f:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c4a2:	75 75                	jne    c001c519 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c4a4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c4a7:	31 d2                	xor    edx,edx
c001c4a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c4ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c4b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c4b4:	50                   	push   eax
c001c4b5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c4b8:	52                   	push   edx
c001c4b9:	50                   	push   eax
c001c4ba:	55                   	push   ebp
c001c4bb:	e8 96 6a ff ff       	call   c0012f56 <File::seek(unsigned long long)>
c001c4c0:	83 c4 10             	add    esp,0x10
c001c4c3:	85 c0                	test   eax,eax
c001c4c5:	0f 85 57 05 00 00    	jne    c001ca22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c4cb:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c4d2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c4d5:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c4d9:	31 d2                	xor    edx,edx
c001c4db:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c4df:	83 ec 0c             	sub    esp,0xc
c001c4e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c4e6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c4ed:	50                   	push   eax
c001c4ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c4f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4f6:	52                   	push   edx
c001c4f7:	50                   	push   eax
c001c4f8:	55                   	push   ebp
c001c4f9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c4fc:	83 c4 1c             	add    esp,0x1c
c001c4ff:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c502:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c505:	50                   	push   eax
c001c506:	6a 00                	push   0x0
c001c508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c50c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c510:	50                   	push   eax
c001c511:	e8 c0 41 fe ff       	call   c00006d6 <memset>
c001c516:	83 c4 10             	add    esp,0x10
c001c519:	46                   	inc    esi
c001c51a:	e9 6c ff ff ff       	jmp    c001c48b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c51f:	53                   	push   ebx
c001c520:	31 db                	xor    ebx,ebx
c001c522:	68 00 01 00 00       	push   0x100
c001c527:	6a 00                	push   0x0
c001c529:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c52d:	50                   	push   eax
c001c52e:	e8 a3 41 fe ff       	call   c00006d6 <memset>
c001c533:	83 c4 0c             	add    esp,0xc
c001c536:	68 00 01 00 00       	push   0x100
c001c53b:	6a 00                	push   0x0
c001c53d:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c544:	50                   	push   eax
c001c545:	e8 8c 41 fe ff       	call   c00006d6 <memset>
c001c54a:	83 c4 10             	add    esp,0x10
c001c54d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c555:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c55d:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c565:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c56d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c575:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c579:	0f 86 30 01 00 00    	jbe    c001c6af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c57f:	0f b7 f3             	movzx  esi,bx
c001c582:	6b f6 28             	imul   esi,esi,0x28
c001c585:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c589:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c58c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c590:	52                   	push   edx
c001c591:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c595:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c599:	8b 06                	mov    eax,DWORD PTR [esi]
c001c59b:	6b d2 28             	imul   edx,edx,0x28
c001c59e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c5a2:	31 d2                	xor    edx,edx
c001c5a4:	52                   	push   edx
c001c5a5:	50                   	push   eax
c001c5a6:	55                   	push   ebp
c001c5a7:	e8 aa 69 ff ff       	call   c0012f56 <File::seek(unsigned long long)>
c001c5ac:	83 c4 0c             	add    esp,0xc
c001c5af:	6a 20                	push   0x20
c001c5b1:	6a 00                	push   0x0
c001c5b3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c5ba:	51                   	push   ecx
c001c5bb:	e8 16 41 fe ff       	call   c00006d6 <memset>
c001c5c0:	59                   	pop    ecx
c001c5c1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c5c4:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c5c8:	52                   	push   edx
c001c5c9:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c5d0:	51                   	push   ecx
c001c5d1:	6a 00                	push   0x0
c001c5d3:	6a 1f                	push   0x1f
c001c5d5:	55                   	push   ebp
c001c5d6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c5d9:	83 c4 1c             	add    esp,0x1c
c001c5dc:	6a 09                	push   0x9
c001c5de:	68 eb ab 02 c0       	push   0xc002abeb
c001c5e3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c5ea:	51                   	push   ecx
c001c5eb:	e8 4d 40 fe ff       	call   c000063d <memcmp>
c001c5f0:	83 c4 10             	add    esp,0x10
c001c5f3:	85 c0                	test   eax,eax
c001c5f5:	75 21                	jne    c001c618 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c5f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c5ff:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c603:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c607:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c60a:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c611:	89 d0                	mov    eax,edx
c001c613:	40                   	inc    eax
c001c614:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c618:	50                   	push   eax
c001c619:	6a 09                	push   0x9
c001c61b:	68 f5 ab 02 c0       	push   0xc002abf5
c001c620:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c627:	50                   	push   eax
c001c628:	e8 10 40 fe ff       	call   c000063d <memcmp>
c001c62d:	83 c4 10             	add    esp,0x10
c001c630:	85 c0                	test   eax,eax
c001c632:	75 21                	jne    c001c655 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c638:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c63c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c640:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c644:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c647:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c64e:	89 d0                	mov    eax,edx
c001c650:	40                   	inc    eax
c001c651:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c655:	50                   	push   eax
c001c656:	50                   	push   eax
c001c657:	68 c1 ab 02 c0       	push   0xc002abc1
c001c65c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c663:	50                   	push   eax
c001c664:	e8 5d 41 fe ff       	call   c00007c6 <strcmp>
c001c669:	83 c4 10             	add    esp,0x10
c001c66c:	85 c0                	test   eax,eax
c001c66e:	75 0f                	jne    c001c67f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c670:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c677:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c67b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c67f:	50                   	push   eax
c001c680:	50                   	push   eax
c001c681:	68 c9 ab 02 c0       	push   0xc002abc9
c001c686:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c68d:	50                   	push   eax
c001c68e:	e8 33 41 fe ff       	call   c00007c6 <strcmp>
c001c693:	83 c4 10             	add    esp,0x10
c001c696:	85 c0                	test   eax,eax
c001c698:	75 0f                	jne    c001c6a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c69a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c69d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c6a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c6a5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c6a9:	43                   	inc    ebx
c001c6aa:	e9 c6 fe ff ff       	jmp    c001c575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c6af:	31 d2                	xor    edx,edx
c001c6b1:	50                   	push   eax
c001c6b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c6b6:	52                   	push   edx
c001c6b7:	50                   	push   eax
c001c6b8:	55                   	push   ebp
c001c6b9:	e8 98 68 ff ff       	call   c0012f56 <File::seek(unsigned long long)>
c001c6be:	58                   	pop    eax
c001c6bf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c6c3:	e8 6e 2f ff ff       	call   c000f636 <malloc>
c001c6c8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c6cb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c6cf:	31 d2                	xor    edx,edx
c001c6d1:	58                   	pop    eax
c001c6d2:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c6d6:	53                   	push   ebx
c001c6d7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c6db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c6df:	52                   	push   edx
c001c6e0:	50                   	push   eax
c001c6e1:	55                   	push   ebp
c001c6e2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c6e5:	83 c4 14             	add    esp,0x14
c001c6e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c6ec:	e8 45 2f ff ff       	call   c000f636 <malloc>
c001c6f1:	31 d2                	xor    edx,edx
c001c6f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c6f7:	83 c4 0c             	add    esp,0xc
c001c6fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c6fe:	52                   	push   edx
c001c6ff:	50                   	push   eax
c001c700:	55                   	push   ebp
c001c701:	e8 50 68 ff ff       	call   c0012f56 <File::seek(unsigned long long)>
c001c706:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c709:	31 d2                	xor    edx,edx
c001c70b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c70e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c712:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c716:	52                   	push   edx
c001c717:	50                   	push   eax
c001c718:	55                   	push   ebp
c001c719:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c71c:	83 c4 20             	add    esp,0x20
c001c71f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c727:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c72b:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001c72f:	0f 84 f1 02 00 00    	je     c001ca26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001c735:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001c73c:	31 d2                	xor    edx,edx
c001c73e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c742:	c1 e8 03             	shr    eax,0x3
c001c745:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001c749:	51                   	push   ecx
c001c74a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c74e:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001c752:	52                   	push   edx
c001c753:	50                   	push   eax
c001c754:	55                   	push   ebp
c001c755:	e8 fc 67 ff ff       	call   c0012f56 <File::seek(unsigned long long)>
c001c75a:	5b                   	pop    ebx
c001c75b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c75f:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001c766:	e8 cb 2e ff ff       	call   c000f636 <malloc>
c001c76b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c76e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c772:	31 d2                	xor    edx,edx
c001c774:	5e                   	pop    esi
c001c775:	8d 44 24 58          	lea    eax,[esp+0x58]
c001c779:	50                   	push   eax
c001c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c77e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c782:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001c789:	52                   	push   edx
c001c78a:	50                   	push   eax
c001c78b:	55                   	push   ebp
c001c78c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c78f:	83 c4 20             	add    esp,0x20
c001c792:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c79a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c79e:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001c7a2:	0f 8d 62 02 00 00    	jge    c001ca0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001c7a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c7ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7b0:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001c7b5:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001c7b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c7bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7c0:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001c7c4:	89 d8                	mov    eax,ebx
c001c7c6:	c1 e8 08             	shr    eax,0x8
c001c7c9:	89 c6                	mov    esi,eax
c001c7cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c7cf:	c1 e6 04             	shl    esi,0x4
c001c7d2:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001c7d6:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001c7d9:	85 d2                	test   edx,edx
c001c7db:	0f 85 bf 00 00 00    	jne    c001c8a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001c7e1:	83 ec 0c             	sub    esp,0xc
c001c7e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c7e8:	03 06                	add    eax,DWORD PTR [esi]
c001c7ea:	50                   	push   eax
c001c7eb:	e8 4d f8 ff ff       	call   c001c03d <Thr::getAddressOfKernelSymbol(char const*)>
c001c7f0:	83 c4 10             	add    esp,0x10
c001c7f3:	89 c2                	mov    edx,eax
c001c7f5:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001c7fa:	85 c0                	test   eax,eax
c001c7fc:	0f 85 9e 00 00 00    	jne    c001c8a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001c802:	83 ec 0c             	sub    esp,0xc
c001c805:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c809:	03 06                	add    eax,DWORD PTR [esi]
c001c80b:	50                   	push   eax
c001c80c:	e8 df 1a ff ff       	call   c000e2f0 <Krnl::resolveCompatibilitySymbol(char*)>
c001c811:	83 c4 10             	add    esp,0x10
c001c814:	89 c2                	mov    edx,eax
c001c816:	85 c0                	test   eax,eax
c001c818:	0f 85 82 00 00 00    	jne    c001c8a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001c81e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001c822:	50                   	push   eax
c001c823:	50                   	push   eax
c001c824:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c828:	03 06                	add    eax,DWORD PTR [esi]
c001c82a:	50                   	push   eax
c001c82b:	68 ff ab 02 c0       	push   0xc002abff
c001c830:	e8 a6 60 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001c835:	58                   	pop    eax
c001c836:	5a                   	pop    edx
c001c837:	68 19 ac 02 c0       	push   0xc002ac19
c001c83c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c843:	50                   	push   eax
c001c844:	e8 2c 3f fe ff       	call   c0000775 <strcpy>
c001c849:	59                   	pop    ecx
c001c84a:	58                   	pop    eax
c001c84b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c84f:	03 06                	add    eax,DWORD PTR [esi]
c001c851:	50                   	push   eax
c001c852:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c859:	50                   	push   eax
c001c85a:	e8 cd 3f fe ff       	call   c000082c <strcat>
c001c85f:	58                   	pop    eax
c001c860:	5a                   	pop    edx
c001c861:	68 af ac 02 c0       	push   0xc002acaf
c001c866:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c86d:	50                   	push   eax
c001c86e:	e8 b9 3f fe ff       	call   c000082c <strcat>
c001c873:	83 c4 10             	add    esp,0x10
c001c876:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001c87b:	0f 84 43 01 00 00    	je     c001c9c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001c881:	83 ec 0c             	sub    esp,0xc
c001c884:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c88b:	50                   	push   eax
c001c88c:	e8 1a d3 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001c891:	83 c4 10             	add    esp,0x10
c001c894:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001c898:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c89c:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c8a0:	80 fb 01             	cmp    bl,0x1
c001c8a3:	75 7d                	jne    c001c922 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001c8a5:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001c8ac:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c8b0:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001c8b4:	01 ce                	add    esi,ecx
c001c8b6:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001c8bc:	0f 94 c0             	sete   al
c001c8bf:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001c8c5:	0f 94 c3             	sete   bl
c001c8c8:	09 c3                	or     ebx,eax
c001c8ca:	8b 06                	mov    eax,DWORD PTR [esi]
c001c8cc:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001c8d1:	74 36                	je     c001c909 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001c8d3:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001c8d6:	84 db                	test   bl,bl
c001c8d8:	75 0a                	jne    c001c8e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001c8da:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c8de:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001c8e2:	76 37                	jbe    c001c91b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c8e4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001c8e8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001c8ed:	0f 84 d1 00 00 00    	je     c001c9c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001c8f3:	83 ec 0c             	sub    esp,0xc
c001c8f6:	68 30 ac 02 c0       	push   0xc002ac30
c001c8fb:	e8 ab d2 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001c900:	83 c4 10             	add    esp,0x10
c001c903:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c907:	eb 12                	jmp    c001c91b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c909:	01 c1                	add    ecx,eax
c001c90b:	84 db                	test   bl,bl
c001c90d:	75 0c                	jne    c001c91b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c90f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c913:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001c917:	77 02                	ja     c001c91b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c919:	01 d1                	add    ecx,edx
c001c91b:	89 0e                	mov    DWORD PTR [esi],ecx
c001c91d:	e9 df 00 00 00       	jmp    c001ca01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001c922:	80 fb 02             	cmp    bl,0x2
c001c925:	75 71                	jne    c001c998 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001c927:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001c92e:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001c932:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001c936:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001c93c:	74 15                	je     c001c953 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001c93e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001c944:	74 0d                	je     c001c953 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001c946:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c94a:	83 e8 04             	sub    eax,0x4
c001c94d:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001c951:	76 1f                	jbe    c001c972 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001c953:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001c957:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001c95c:	74 66                	je     c001c9c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001c95e:	83 ec 0c             	sub    esp,0xc
c001c961:	68 4c ac 02 c0       	push   0xc002ac4c
c001c966:	e8 40 d2 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001c96b:	83 c4 10             	add    esp,0x10
c001c96e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c972:	8b 06                	mov    eax,DWORD PTR [esi]
c001c974:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001c979:	74 13                	je     c001c98e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001c97b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001c97f:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001c986:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001c98a:	01 c8                	add    eax,ecx
c001c98c:	eb 04                	jmp    c001c992 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001c98e:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001c992:	01 c2                	add    edx,eax
c001c994:	89 16                	mov    DWORD PTR [esi],edx
c001c996:	eb 69                	jmp    c001ca01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001c998:	0f b6 db             	movzx  ebx,bl
c001c99b:	50                   	push   eax
c001c99c:	50                   	push   eax
c001c99d:	53                   	push   ebx
c001c99e:	68 68 ac 02 c0       	push   0xc002ac68
c001c9a3:	e8 33 5f ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001c9a8:	83 c4 10             	add    esp,0x10
c001c9ab:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001c9b0:	74 12                	je     c001c9c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001c9b2:	83 ec 0c             	sub    esp,0xc
c001c9b5:	68 73 ac 02 c0       	push   0xc002ac73
c001c9ba:	e8 ec d1 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001c9bf:	83 c4 10             	add    esp,0x10
c001c9c2:	eb 3d                	jmp    c001ca01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001c9c4:	83 ec 0c             	sub    esp,0xc
c001c9c7:	55                   	push   ebp
c001c9c8:	e8 29 65 ff ff       	call   c0012ef6 <File::close()>
c001c9cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c9d0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c9d3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c9d6:	59                   	pop    ecx
c001c9d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c9db:	e8 66 2c ff ff       	call   c000f646 <free>
c001c9e0:	5b                   	pop    ebx
c001c9e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9e5:	e8 5c 2c ff ff       	call   c000f646 <free>
c001c9ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c9ed:	e8 54 2c ff ff       	call   c000f646 <free>
c001c9f2:	5e                   	pop    esi
c001c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9f7:	e8 4a 2c ff ff       	call   c000f646 <free>
c001c9fc:	83 c4 10             	add    esp,0x10
c001c9ff:	eb 21                	jmp    c001ca22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ca01:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001ca05:	e9 90 fd ff ff       	jmp    c001c79a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001ca0a:	83 ec 0c             	sub    esp,0xc
c001ca0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ca11:	e8 30 2c ff ff       	call   c000f646 <free>
c001ca16:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001ca1a:	83 c4 10             	add    esp,0x10
c001ca1d:	e9 05 fd ff ff       	jmp    c001c727 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001ca22:	31 c0                	xor    eax,eax
c001ca24:	eb 33                	jmp    c001ca59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001ca26:	83 ec 0c             	sub    esp,0xc
c001ca29:	55                   	push   ebp
c001ca2a:	e8 c7 64 ff ff       	call   c0012ef6 <File::close()>
c001ca2f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ca32:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ca35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ca38:	58                   	pop    eax
c001ca39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca3d:	e8 04 2c ff ff       	call   c000f646 <free>
c001ca42:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ca45:	e8 fc 2b ff ff       	call   c000f646 <free>
c001ca4a:	5a                   	pop    edx
c001ca4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca4f:	e8 f2 2b ff ff       	call   c000f646 <free>
c001ca54:	83 c4 10             	add    esp,0x10
c001ca57:	b0 01                	mov    al,0x1
c001ca59:	81 c4 5c 03 00 00    	add    esp,0x35c
c001ca5f:	5b                   	pop    ebx
c001ca60:	5e                   	pop    esi
c001ca61:	5f                   	pop    edi
c001ca62:	5d                   	pop    ebp
c001ca63:	c3                   	ret    

c001ca64 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001ca64:	56                   	push   esi
c001ca65:	31 d2                	xor    edx,edx
c001ca67:	53                   	push   ebx
c001ca68:	8b 1d 20 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc20
c001ca6e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ca72:	39 d3                	cmp    ebx,edx
c001ca74:	7e 1b                	jle    c001ca91 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001ca76:	8b 04 95 40 de 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd21c0]
c001ca7d:	39 c8                	cmp    eax,ecx
c001ca7f:	77 0d                	ja     c001ca8e <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001ca81:	8b 34 95 40 dc 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd23c0]
c001ca88:	01 c6                	add    esi,eax
c001ca8a:	39 ce                	cmp    esi,ecx
c001ca8c:	77 05                	ja     c001ca93 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001ca8e:	42                   	inc    edx
c001ca8f:	eb e1                	jmp    c001ca72 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001ca91:	31 c0                	xor    eax,eax
c001ca93:	5b                   	pop    ebx
c001ca94:	5e                   	pop    esi
c001ca95:	c3                   	ret    

c001ca96 <Thr::getDriverNameFromAddress(unsigned long)>:
c001ca96:	53                   	push   ebx
c001ca97:	31 c0                	xor    eax,eax
c001ca99:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ca9d:	8b 1d 20 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc20
c001caa3:	39 c3                	cmp    ebx,eax
c001caa5:	7e 22                	jle    c001cac9 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001caa7:	8b 14 85 40 de 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd21c0]
c001caae:	39 ca                	cmp    edx,ecx
c001cab0:	77 14                	ja     c001cac6 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cab2:	03 14 85 40 dc 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd23c0]
c001cab9:	39 ca                	cmp    edx,ecx
c001cabb:	76 09                	jbe    c001cac6 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cabd:	8b 04 85 40 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fc0]
c001cac4:	eb 05                	jmp    c001cacb <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001cac6:	40                   	inc    eax
c001cac7:	eb da                	jmp    c001caa3 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001cac9:	31 c0                	xor    eax,eax
c001cacb:	5b                   	pop    ebx
c001cacc:	c3                   	ret    

c001cacd <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001cacd:	53                   	push   ebx
c001cace:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001cad2:	53                   	push   ebx
c001cad3:	e8 8c ff ff ff       	call   c001ca64 <Thr::getDriverBaseFromAddress(unsigned long)>
c001cad8:	5a                   	pop    edx
c001cad9:	31 d2                	xor    edx,edx
c001cadb:	85 c0                	test   eax,eax
c001cadd:	74 04                	je     c001cae3 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001cadf:	89 da                	mov    edx,ebx
c001cae1:	29 c2                	sub    edx,eax
c001cae3:	89 d0                	mov    eax,edx
c001cae5:	5b                   	pop    ebx
c001cae6:	c3                   	ret    

c001cae7 <Thr::loadDLL(char const*, bool)>:
c001cae7:	55                   	push   ebp
c001cae8:	57                   	push   edi
c001cae9:	56                   	push   esi
c001caea:	53                   	push   ebx
c001caeb:	81 ec 34 01 00 00    	sub    esp,0x134
c001caf1:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001caf8:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001caff:	56                   	push   esi
c001cb00:	68 8b ac 02 c0       	push   0xc002ac8b
c001cb05:	e8 d1 5d ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001cb0a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001cb11:	e8 20 2b ff ff       	call   c000f636 <malloc>
c001cb16:	83 c4 0c             	add    esp,0xc
c001cb19:	89 c3                	mov    ebx,eax
c001cb1b:	ff 35 14 e4 02 c0    	push   DWORD PTR ds:0xc002e414
c001cb21:	56                   	push   esi
c001cb22:	50                   	push   eax
c001cb23:	e8 0c 63 ff ff       	call   c0012e34 <File::File(char const*, Process*)>
c001cb28:	83 c4 10             	add    esp,0x10
c001cb2b:	85 db                	test   ebx,ebx
c001cb2d:	75 3c                	jne    c001cb6b <Thr::loadDLL(char const*, bool)+0x84>
c001cb2f:	89 e8                	mov    eax,ebp
c001cb31:	84 c0                	test   al,al
c001cb33:	0f 84 b0 01 00 00    	je     c001cce9 <Thr::loadDLL(char const*, bool)+0x202>
c001cb39:	50                   	push   eax
c001cb3a:	50                   	push   eax
c001cb3b:	68 9c ac 02 c0       	push   0xc002ac9c
c001cb40:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001cb44:	57                   	push   edi
c001cb45:	e8 2b 3c fe ff       	call   c0000775 <strcpy>
c001cb4a:	58                   	pop    eax
c001cb4b:	5a                   	pop    edx
c001cb4c:	56                   	push   esi
c001cb4d:	57                   	push   edi
c001cb4e:	e8 d9 3c fe ff       	call   c000082c <strcat>
c001cb53:	59                   	pop    ecx
c001cb54:	58                   	pop    eax
c001cb55:	68 af ac 02 c0       	push   0xc002acaf
c001cb5a:	57                   	push   edi
c001cb5b:	e8 cc 3c fe ff       	call   c000082c <strcat>
c001cb60:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb63:	e8 43 d0 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001cb68:	83 c4 10             	add    esp,0x10
c001cb6b:	50                   	push   eax
c001cb6c:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001cb70:	50                   	push   eax
c001cb71:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cb75:	50                   	push   eax
c001cb76:	53                   	push   ebx
c001cb77:	e8 c8 65 ff ff       	call   c0013144 <File::stat(unsigned long long*, bool*)>
c001cb7c:	83 c4 10             	add    esp,0x10
c001cb7f:	85 db                	test   ebx,ebx
c001cb81:	74 0c                	je     c001cb8f <Thr::loadDLL(char const*, bool)+0xa8>
c001cb83:	83 ec 0c             	sub    esp,0xc
c001cb86:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb88:	53                   	push   ebx
c001cb89:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cb8c:	83 c4 10             	add    esp,0x10
c001cb8f:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001cb94:	75 0a                	jne    c001cba0 <Thr::loadDLL(char const*, bool)+0xb9>
c001cb96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb9a:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001cb9e:	75 3c                	jne    c001cbdc <Thr::loadDLL(char const*, bool)+0xf5>
c001cba0:	89 e8                	mov    eax,ebp
c001cba2:	84 c0                	test   al,al
c001cba4:	0f 84 3d 01 00 00    	je     c001cce7 <Thr::loadDLL(char const*, bool)+0x200>
c001cbaa:	50                   	push   eax
c001cbab:	50                   	push   eax
c001cbac:	68 9c ac 02 c0       	push   0xc002ac9c
c001cbb1:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001cbb5:	53                   	push   ebx
c001cbb6:	e8 ba 3b fe ff       	call   c0000775 <strcpy>
c001cbbb:	58                   	pop    eax
c001cbbc:	5a                   	pop    edx
c001cbbd:	56                   	push   esi
c001cbbe:	53                   	push   ebx
c001cbbf:	e8 68 3c fe ff       	call   c000082c <strcat>
c001cbc4:	59                   	pop    ecx
c001cbc5:	5f                   	pop    edi
c001cbc6:	68 af ac 02 c0       	push   0xc002acaf
c001cbcb:	53                   	push   ebx
c001cbcc:	e8 5b 3c fe ff       	call   c000082c <strcat>
c001cbd1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbd4:	e8 d2 cf ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001cbd9:	83 c4 10             	add    esp,0x10
c001cbdc:	e8 9a 4e ff ff       	call   c0011a7b <Virt::getAKernelVAS()>
c001cbe1:	51                   	push   ecx
c001cbe2:	6a 03                	push   0x3
c001cbe4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001cbe8:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cbec:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001cbf2:	83 d3 00             	adc    ebx,0x0
c001cbf5:	89 ca                	mov    edx,ecx
c001cbf7:	89 d1                	mov    ecx,edx
c001cbf9:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001cbfd:	51                   	push   ecx
c001cbfe:	50                   	push   eax
c001cbff:	e8 b2 54 ff ff       	call   c00120b6 <VAS::allocatePages(int, int)>
c001cc04:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc07:	89 c3                	mov    ebx,eax
c001cc09:	e8 e5 3a fe ff       	call   c00006f3 <strlen>
c001cc0e:	8b 3d 20 dc 02 c0    	mov    edi,DWORD PTR ds:0xc002dc20
c001cc14:	40                   	inc    eax
c001cc15:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc18:	e8 19 2a ff ff       	call   c000f636 <malloc>
c001cc1d:	89 04 bd 40 e0 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1fc0],eax
c001cc24:	5f                   	pop    edi
c001cc25:	58                   	pop    eax
c001cc26:	a1 20 dc 02 c0       	mov    eax,ds:0xc002dc20
c001cc2b:	56                   	push   esi
c001cc2c:	ff 34 85 40 e0 02 c0 	push   DWORD PTR [eax*4-0x3ffd1fc0]
c001cc33:	e8 3d 3b fe ff       	call   c0000775 <strcpy>
c001cc38:	a1 20 dc 02 c0       	mov    eax,ds:0xc002dc20
c001cc3d:	8d 50 01             	lea    edx,[eax+0x1]
c001cc40:	89 1c 85 40 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd21c0],ebx
c001cc47:	89 15 20 dc 02 c0    	mov    DWORD PTR ds:0xc002dc20,edx
c001cc4d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cc51:	83 c4 0c             	add    esp,0xc
c001cc54:	89 14 85 40 dc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd23c0],edx
c001cc5b:	6a 01                	push   0x1
c001cc5d:	53                   	push   ebx
c001cc5e:	56                   	push   esi
c001cc5f:	e8 e4 f6 ff ff       	call   c001c348 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001cc64:	83 c4 10             	add    esp,0x10
c001cc67:	89 c7                	mov    edi,eax
c001cc69:	fe c8                	dec    al
c001cc6b:	74 16                	je     c001cc83 <Thr::loadDLL(char const*, bool)+0x19c>
c001cc6d:	89 e8                	mov    eax,ebp
c001cc6f:	84 c0                	test   al,al
c001cc71:	74 10                	je     c001cc83 <Thr::loadDLL(char const*, bool)+0x19c>
c001cc73:	83 ec 0c             	sub    esp,0xc
c001cc76:	68 b1 ac 02 c0       	push   0xc002acb1
c001cc7b:	e8 2b cf ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001cc80:	83 c4 10             	add    esp,0x10
c001cc83:	31 f6                	xor    esi,esi
c001cc85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc8d:	05 ff 0f 00 00       	add    eax,0xfff
c001cc92:	83 d2 00             	adc    edx,0x0
c001cc95:	0f ac d0 0c          	shrd   eax,edx,0xc
c001cc99:	c1 ea 0c             	shr    edx,0xc
c001cc9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cca0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cca4:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001cca8:	ba 00 00 00 00       	mov    edx,0x0
c001ccad:	89 d0                	mov    eax,edx
c001ccaf:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001ccb3:	73 2c                	jae    c001cce1 <Thr::loadDLL(char const*, bool)+0x1fa>
c001ccb5:	e8 c1 4d ff ff       	call   c0011a7b <Virt::getAKernelVAS()>
c001ccba:	89 f5                	mov    ebp,esi
c001ccbc:	c1 e5 0c             	shl    ebp,0xc
c001ccbf:	52                   	push   edx
c001ccc0:	01 dd                	add    ebp,ebx
c001ccc2:	52                   	push   edx
c001ccc3:	55                   	push   ebp
c001ccc4:	50                   	push   eax
c001ccc5:	e8 66 4f ff ff       	call   c0011c30 <VAS::getPageTableEntry(unsigned long)>
c001ccca:	83 c4 10             	add    esp,0x10
c001cccd:	f6 00 60             	test   BYTE PTR [eax],0x60
c001ccd0:	75 0c                	jne    c001ccde <Thr::loadDLL(char const*, bool)+0x1f7>
c001ccd2:	83 ec 0c             	sub    esp,0xc
c001ccd5:	55                   	push   ebp
c001ccd6:	e8 44 2f ff ff       	call   c000fc1f <Phys::freePage(unsigned long)>
c001ccdb:	83 c4 10             	add    esp,0x10
c001ccde:	46                   	inc    esi
c001ccdf:	eb a4                	jmp    c001cc85 <Thr::loadDLL(char const*, bool)+0x19e>
c001cce1:	89 f8                	mov    eax,edi
c001cce3:	84 c0                	test   al,al
c001cce5:	75 02                	jne    c001cce9 <Thr::loadDLL(char const*, bool)+0x202>
c001cce7:	31 db                	xor    ebx,ebx
c001cce9:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ccef:	89 d8                	mov    eax,ebx
c001ccf1:	5b                   	pop    ebx
c001ccf2:	5e                   	pop    esi
c001ccf3:	5f                   	pop    edi
c001ccf4:	5d                   	pop    ebp
c001ccf5:	c3                   	ret    

c001ccf6 <Thr::executeDLL(unsigned long, void*)>:
c001ccf6:	56                   	push   esi
c001ccf7:	53                   	push   ebx
c001ccf8:	51                   	push   ecx
c001ccf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ccfd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001cd01:	85 db                	test   ebx,ebx
c001cd03:	75 10                	jne    c001cd15 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001cd05:	83 ec 0c             	sub    esp,0xc
c001cd08:	68 d0 ac 02 c0       	push   0xc002acd0
c001cd0d:	e8 99 ce ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001cd12:	83 c4 10             	add    esp,0x10
c001cd15:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001cd19:	89 d8                	mov    eax,ebx
c001cd1b:	5a                   	pop    edx
c001cd1c:	5b                   	pop    ebx
c001cd1d:	5e                   	pop    esi
c001cd1e:	ff e0                	jmp    eax

c001cd20 <changeTSS>:
c001cd20:	83 ec 14             	sub    esp,0x14
c001cd23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd28:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001cd2b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001cd30:	c1 e2 15             	shl    edx,0x15
c001cd33:	29 d0                	sub    eax,edx
c001cd35:	50                   	push   eax
c001cd36:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c001cd3b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cd41:	05 7c 11 00 00       	add    eax,0x117c
c001cd46:	50                   	push   eax
c001cd47:	e8 de 44 ff ff       	call   c001122a <TSS::setESP(unsigned long)>
c001cd4c:	83 c4 1c             	add    esp,0x1c
c001cd4f:	c3                   	ret    

c001cd50 <Process::addArgs(char**)>:
c001cd50:	57                   	push   edi
c001cd51:	56                   	push   esi
c001cd52:	53                   	push   ebx
c001cd53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd57:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cd5b:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001cd65:	85 ff                	test   edi,edi
c001cd67:	74 3d                	je     c001cda6 <Process::addArgs(char**)+0x56>
c001cd69:	8b 07                	mov    eax,DWORD PTR [edi]
c001cd6b:	85 c0                	test   eax,eax
c001cd6d:	74 37                	je     c001cda6 <Process::addArgs(char**)+0x56>
c001cd6f:	31 db                	xor    ebx,ebx
c001cd71:	83 ec 0c             	sub    esp,0xc
c001cd74:	50                   	push   eax
c001cd75:	e8 79 39 fe ff       	call   c00006f3 <strlen>
c001cd7a:	40                   	inc    eax
c001cd7b:	89 04 24             	mov    DWORD PTR [esp],eax
c001cd7e:	e8 b3 28 ff ff       	call   c000f636 <malloc>
c001cd83:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001cd8a:	5a                   	pop    edx
c001cd8b:	59                   	pop    ecx
c001cd8c:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001cd8f:	43                   	inc    ebx
c001cd90:	50                   	push   eax
c001cd91:	e8 df 39 fe ff       	call   c0000775 <strcpy>
c001cd96:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001cd9c:	83 c4 10             	add    esp,0x10
c001cd9f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001cda2:	85 c0                	test   eax,eax
c001cda4:	75 cb                	jne    c001cd71 <Process::addArgs(char**)+0x21>
c001cda6:	5b                   	pop    ebx
c001cda7:	5e                   	pop    esi
c001cda8:	5f                   	pop    edi
c001cda9:	c3                   	ret    

c001cdaa <Process::Process(char const*, Process*, char**)>:
c001cdaa:	56                   	push   esi
c001cdab:	53                   	push   ebx
c001cdac:	83 ec 14             	sub    esp,0x14
c001cdaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdb3:	05 0c 02 00 00       	add    eax,0x20c
c001cdb8:	bb 07 00 00 00       	mov    ebx,0x7
c001cdbd:	89 c6                	mov    esi,eax
c001cdbf:	85 db                	test   ebx,ebx
c001cdc1:	78 12                	js     c001cdd5 <Process::Process(char const*, Process*, char**)+0x2b>
c001cdc3:	83 ec 0c             	sub    esp,0xc
c001cdc6:	56                   	push   esi
c001cdc7:	e8 b6 ac 00 00       	call   c0027a82 <ThreadControlBlock::ThreadControlBlock()>
c001cdcc:	83 c4 10             	add    esp,0x10
c001cdcf:	83 c6 63             	add    esi,0x63
c001cdd2:	4b                   	dec    ebx
c001cdd3:	eb ea                	jmp    c001cdbf <Process::Process(char const*, Process*, char**)+0x15>
c001cdd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdd9:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001cde0:	83 ec 0c             	sub    esp,0xc
c001cde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cde7:	e8 10 cc ff ff       	call   c00199fc <Krnl::newProcessEnv(Process*)>
c001cdec:	83 c4 10             	add    esp,0x10
c001cdef:	89 c2                	mov    edx,eax
c001cdf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdf5:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001cdfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdff:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001ce08:	a1 50 c4 02 c0       	mov    eax,ds:0xc002c450
c001ce0d:	8d 50 01             	lea    edx,[eax+0x1]
c001ce10:	89 15 50 c4 02 c0    	mov    DWORD PTR ds:0xc002c450,edx
c001ce16:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ce1a:	89 02                	mov    DWORD PTR [edx],eax
c001ce1c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001ce24:	83 ec 0c             	sub    esp,0xc
c001ce27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce2b:	e8 06 28 ff ff       	call   c000f636 <malloc>
c001ce30:	83 c4 10             	add    esp,0x10
c001ce33:	89 c3                	mov    ebx,eax
c001ce35:	83 ec 08             	sub    esp,0x8
c001ce38:	6a 00                	push   0x0
c001ce3a:	53                   	push   ebx
c001ce3b:	e8 1e 56 ff ff       	call   c001245e <VAS::VAS(bool)>
c001ce40:	83 c4 10             	add    esp,0x10
c001ce43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce47:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001ce4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce51:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ce5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce5f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ce63:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001ce69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce6d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ce73:	85 c0                	test   eax,eax
c001ce75:	74 42                	je     c001ceb9 <Process::Process(char const*, Process*, char**)+0x10f>
c001ce77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce7b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ce81:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ce87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce8b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001ce91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce95:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ce9b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001cea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cea5:	05 0c 01 00 00       	add    eax,0x10c
c001ceaa:	83 ec 08             	sub    esp,0x8
c001cead:	52                   	push   edx
c001ceae:	50                   	push   eax
c001ceaf:	e8 c1 38 fe ff       	call   c0000775 <strcpy>
c001ceb4:	83 c4 10             	add    esp,0x10
c001ceb7:	eb 63                	jmp    c001cf1c <Process::Process(char const*, Process*, char**)+0x172>
c001ceb9:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001cec1:	83 ec 0c             	sub    esp,0xc
c001cec4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cec8:	e8 69 27 ff ff       	call   c000f636 <malloc>
c001cecd:	83 c4 10             	add    esp,0x10
c001ced0:	89 c3                	mov    ebx,eax
c001ced2:	83 ec 08             	sub    esp,0x8
c001ced5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ced9:	53                   	push   ebx
c001ceda:	e8 49 40 ff ff       	call   c0010f28 <VgaText::VgaText(char const*)>
c001cedf:	83 c4 10             	add    esp,0x10
c001cee2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cee6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001ceec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cef0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cef6:	83 ec 0c             	sub    esp,0xc
c001cef9:	50                   	push   eax
c001cefa:	e8 1c 34 ff ff       	call   c001031b <addToTerminalCycle(VgaText*)>
c001ceff:	83 c4 10             	add    esp,0x10
c001cf02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf06:	05 0c 01 00 00       	add    eax,0x10c
c001cf0b:	83 ec 08             	sub    esp,0x8
c001cf0e:	68 fa ac 02 c0       	push   0xc002acfa
c001cf13:	50                   	push   eax
c001cf14:	e8 5c 38 fe ff       	call   c0000775 <strcpy>
c001cf19:	83 c4 10             	add    esp,0x10
c001cf1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf20:	83 c0 0c             	add    eax,0xc
c001cf23:	83 ec 08             	sub    esp,0x8
c001cf26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf2a:	50                   	push   eax
c001cf2b:	e8 45 38 fe ff       	call   c0000775 <strcpy>
c001cf30:	83 c4 10             	add    esp,0x10
c001cf33:	83 ec 08             	sub    esp,0x8
c001cf36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001cf3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf3e:	e8 0d fe ff ff       	call   c001cd50 <Process::addArgs(char**)>
c001cf43:	83 c4 10             	add    esp,0x10
c001cf46:	83 ec 08             	sub    esp,0x8
c001cf49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf51:	e8 be ee ff ff       	call   c001be14 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001cf56:	83 c4 10             	add    esp,0x10
c001cf59:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cf5d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001cf61:	83 f0 01             	xor    eax,0x1
c001cf64:	88 c2                	mov    dl,al
c001cf66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf6a:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001cf70:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001cf75:	83 ec 08             	sub    esp,0x8
c001cf78:	50                   	push   eax
c001cf79:	68 f8 ad 02 c0       	push   0xc002adf8
c001cf7e:	e8 58 59 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001cf83:	83 c4 10             	add    esp,0x10
c001cf86:	90                   	nop
c001cf87:	83 c4 14             	add    esp,0x14
c001cf8a:	5b                   	pop    ebx
c001cf8b:	5e                   	pop    esi
c001cf8c:	c3                   	ret    
c001cf8d:	90                   	nop

c001cf8e <Process::Process(bool, char const*, Process*, char**)>:
c001cf8e:	56                   	push   esi
c001cf8f:	53                   	push   ebx
c001cf90:	83 ec 24             	sub    esp,0x24
c001cf93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cf97:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cf9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cf9f:	05 0c 02 00 00       	add    eax,0x20c
c001cfa4:	bb 07 00 00 00       	mov    ebx,0x7
c001cfa9:	89 c6                	mov    esi,eax
c001cfab:	85 db                	test   ebx,ebx
c001cfad:	78 12                	js     c001cfc1 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001cfaf:	83 ec 0c             	sub    esp,0xc
c001cfb2:	56                   	push   esi
c001cfb3:	e8 ca aa 00 00       	call   c0027a82 <ThreadControlBlock::ThreadControlBlock()>
c001cfb8:	83 c4 10             	add    esp,0x10
c001cfbb:	83 c6 63             	add    esi,0x63
c001cfbe:	4b                   	dec    ebx
c001cfbf:	eb ea                	jmp    c001cfab <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001cfc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cfc5:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001cfcc:	83 ec 0c             	sub    esp,0xc
c001cfcf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cfd3:	e8 24 ca ff ff       	call   c00199fc <Krnl::newProcessEnv(Process*)>
c001cfd8:	83 c4 10             	add    esp,0x10
c001cfdb:	89 c2                	mov    edx,eax
c001cfdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cfe1:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001cfe7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cfeb:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001cff4:	a1 50 c4 02 c0       	mov    eax,ds:0xc002c450
c001cff9:	8d 50 01             	lea    edx,[eax+0x1]
c001cffc:	89 15 50 c4 02 c0    	mov    DWORD PTR ds:0xc002c450,edx
c001d002:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d006:	89 02                	mov    DWORD PTR [edx],eax
c001d008:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001d010:	83 ec 0c             	sub    esp,0xc
c001d013:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d017:	e8 1a 26 ff ff       	call   c000f636 <malloc>
c001d01c:	83 c4 10             	add    esp,0x10
c001d01f:	89 c3                	mov    ebx,eax
c001d021:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d026:	83 ec 08             	sub    esp,0x8
c001d029:	50                   	push   eax
c001d02a:	53                   	push   ebx
c001d02b:	e8 2e 54 ff ff       	call   c001245e <VAS::VAS(bool)>
c001d030:	83 c4 10             	add    esp,0x10
c001d033:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d037:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d03d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d041:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d04b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d04f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d053:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d059:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d05d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d063:	85 c0                	test   eax,eax
c001d065:	74 42                	je     c001d0a9 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d067:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d06b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d071:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d077:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d07b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d081:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d085:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d08b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d091:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d095:	05 0c 01 00 00       	add    eax,0x10c
c001d09a:	83 ec 08             	sub    esp,0x8
c001d09d:	52                   	push   edx
c001d09e:	50                   	push   eax
c001d09f:	e8 d1 36 fe ff       	call   c0000775 <strcpy>
c001d0a4:	83 c4 10             	add    esp,0x10
c001d0a7:	eb 63                	jmp    c001d10c <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d0a9:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001d0b1:	83 ec 0c             	sub    esp,0xc
c001d0b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d0b8:	e8 79 25 ff ff       	call   c000f636 <malloc>
c001d0bd:	83 c4 10             	add    esp,0x10
c001d0c0:	89 c3                	mov    ebx,eax
c001d0c2:	83 ec 08             	sub    esp,0x8
c001d0c5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d0c9:	53                   	push   ebx
c001d0ca:	e8 59 3e ff ff       	call   c0010f28 <VgaText::VgaText(char const*)>
c001d0cf:	83 c4 10             	add    esp,0x10
c001d0d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d0d6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d0dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d0e0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d0e6:	83 ec 0c             	sub    esp,0xc
c001d0e9:	50                   	push   eax
c001d0ea:	e8 2c 32 ff ff       	call   c001031b <addToTerminalCycle(VgaText*)>
c001d0ef:	83 c4 10             	add    esp,0x10
c001d0f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d0f6:	05 0c 01 00 00       	add    eax,0x10c
c001d0fb:	83 ec 08             	sub    esp,0x8
c001d0fe:	68 fa ac 02 c0       	push   0xc002acfa
c001d103:	50                   	push   eax
c001d104:	e8 6c 36 fe ff       	call   c0000775 <strcpy>
c001d109:	83 c4 10             	add    esp,0x10
c001d10c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d110:	83 c0 0c             	add    eax,0xc
c001d113:	83 ec 08             	sub    esp,0x8
c001d116:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d11a:	50                   	push   eax
c001d11b:	e8 55 36 fe ff       	call   c0000775 <strcpy>
c001d120:	83 c4 10             	add    esp,0x10
c001d123:	83 ec 08             	sub    esp,0x8
c001d126:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d12a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d12e:	e8 1d fc ff ff       	call   c001cd50 <Process::addArgs(char**)>
c001d133:	83 c4 10             	add    esp,0x10
c001d136:	90                   	nop
c001d137:	83 c4 24             	add    esp,0x24
c001d13a:	5b                   	pop    ebx
c001d13b:	5e                   	pop    esi
c001d13c:	c3                   	ret    

c001d13d <disableIRQs()>:
c001d13d:	fa                   	cli    
c001d13e:	ff 05 ec e3 02 c0    	inc    DWORD PTR ds:0xc002e3ec
c001d144:	c3                   	ret    

c001d145 <getIRQNestingLevel()>:
c001d145:	a1 ec e3 02 c0       	mov    eax,ds:0xc002e3ec
c001d14a:	c3                   	ret    

c001d14b <enableIRQs()>:
c001d14b:	a1 ec e3 02 c0       	mov    eax,ds:0xc002e3ec
c001d150:	48                   	dec    eax
c001d151:	a3 ec e3 02 c0       	mov    ds:0xc002e3ec,eax
c001d156:	75 01                	jne    c001d159 <enableIRQs()+0xe>
c001d158:	fb                   	sti    
c001d159:	c3                   	ret    

c001d15a <lockScheduler()>:
c001d15a:	eb e1                	jmp    c001d13d <disableIRQs()>

c001d15c <unlockScheduler()>:
c001d15c:	eb ed                	jmp    c001d14b <enableIRQs()>

c001d15e <userModeEntryPoint(void*)>:
c001d15e:	83 ec 0c             	sub    esp,0xc
c001d161:	e8 f6 ff ff ff       	call   c001d15c <unlockScheduler()>
c001d166:	fb                   	sti    
c001d167:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d16c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d16f:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d175:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d179:	83 c4 0c             	add    esp,0xc
c001d17c:	e9 a9 31 fe ff       	jmp    c000032a <goToUsermode>

c001d181 <lockStuff()>:
c001d181:	e8 b7 ff ff ff       	call   c001d13d <disableIRQs()>
c001d186:	ff 05 e8 e3 02 c0    	inc    DWORD PTR ds:0xc002e3e8
c001d18c:	c3                   	ret    

c001d18d <taskStartupFunction>:
c001d18d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d192:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d195:	c3                   	ret    

c001d196 <updateTimeUsed()>:
c001d196:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c001d19b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d1a1:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d1a8:	74 50                	je     c001d1fa <updateTimeUsed()+0x64>
c001d1aa:	57                   	push   edi
c001d1ab:	56                   	push   esi
c001d1ac:	53                   	push   ebx
c001d1ad:	0f 31                	rdtsc  
c001d1af:	89 c1                	mov    ecx,eax
c001d1b1:	a3 28 e4 02 c0       	mov    ds:0xc002e428,eax
c001d1b6:	2b 0d 18 e4 02 c0    	sub    ecx,DWORD PTR ds:0xc002e418
c001d1bc:	89 d3                	mov    ebx,edx
c001d1be:	89 0d 20 e4 02 c0    	mov    DWORD PTR ds:0xc002e420,ecx
c001d1c4:	1b 1d 1c e4 02 c0    	sbb    ebx,DWORD PTR ds:0xc002e41c
c001d1ca:	a3 18 e4 02 c0       	mov    ds:0xc002e418,eax
c001d1cf:	89 1d 24 e4 02 c0    	mov    DWORD PTR ds:0xc002e424,ebx
c001d1d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1da:	89 15 2c e4 02 c0    	mov    DWORD PTR ds:0xc002e42c,edx
c001d1e0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001d1e3:	89 15 1c e4 02 c0    	mov    DWORD PTR ds:0xc002e41c,edx
c001d1e9:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001d1ec:	01 f1                	add    ecx,esi
c001d1ee:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001d1f1:	11 fb                	adc    ebx,edi
c001d1f3:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001d1f6:	5b                   	pop    ebx
c001d1f7:	5e                   	pop    esi
c001d1f8:	5f                   	pop    edi
c001d1f9:	c3                   	ret    
c001d1fa:	c3                   	ret    

c001d1fb <switchToThread(ThreadControlBlock*)>:
c001d1fb:	53                   	push   ebx
c001d1fc:	83 ec 08             	sub    esp,0x8
c001d1ff:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c001d204:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d208:	85 c0                	test   eax,eax
c001d20a:	75 30                	jne    c001d23c <switchToThread(ThreadControlBlock*)+0x41>
c001d20c:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001d20f:	3c ff                	cmp    al,0xff
c001d211:	74 25                	je     c001d238 <switchToThread(ThreadControlBlock*)+0x3d>
c001d213:	0f b6 d0             	movzx  edx,al
c001d216:	b8 84 03 00 00       	mov    eax,0x384
c001d21b:	29 d0                	sub    eax,edx
c001d21d:	c1 e0 10             	shl    eax,0x10
c001d220:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001d223:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001d226:	e8 6b ff ff ff       	call   c001d196 <updateTimeUsed()>
c001d22b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001d22f:	83 c4 08             	add    esp,0x8
c001d232:	5b                   	pop    ebx
c001d233:	e9 2a 31 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d238:	31 c0                	xor    eax,eax
c001d23a:	eb e7                	jmp    c001d223 <switchToThread(ThreadControlBlock*)+0x28>
c001d23c:	c7 05 e4 e3 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002e3e4,0x1
c001d246:	83 c4 08             	add    esp,0x8
c001d249:	5b                   	pop    ebx
c001d24a:	c3                   	ret    
c001d24b:	90                   	nop

c001d24c <Semaphore::Semaphore(int)>:
c001d24c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d250:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d254:	89 10                	mov    DWORD PTR [eax],edx
c001d256:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d25a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d265:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d26c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d270:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d277:	90                   	nop
c001d278:	c3                   	ret    
c001d279:	90                   	nop

c001d27a <Mutex::Mutex()>:
c001d27a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d27e:	6a 01                	push   0x1
c001d280:	50                   	push   eax
c001d281:	e8 c6 ff ff ff       	call   c001d24c <Semaphore::Semaphore(int)>
c001d286:	83 c4 08             	add    esp,0x8
c001d289:	90                   	nop
c001d28a:	c3                   	ret    
c001d28b:	90                   	nop

c001d28c <Process::createThread(void (*)(void*), void*, int)>:
c001d28c:	55                   	push   ebp
c001d28d:	31 c9                	xor    ecx,ecx
c001d28f:	57                   	push   edi
c001d290:	56                   	push   esi
c001d291:	53                   	push   ebx
c001d292:	83 ec 1c             	sub    esp,0x1c
c001d295:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d299:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d2a0:	89 f2                	mov    edx,esi
c001d2a2:	0f b7 c2             	movzx  eax,dx
c001d2a5:	83 e2 01             	and    edx,0x1
c001d2a8:	74 14                	je     c001d2be <Process::createThread(void (*)(void*), void*, int)+0x32>
c001d2aa:	d1 f8                	sar    eax,1
c001d2ac:	41                   	inc    ecx
c001d2ad:	89 c2                	mov    edx,eax
c001d2af:	83 f9 10             	cmp    ecx,0x10
c001d2b2:	75 ee                	jne    c001d2a2 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d2b4:	83 c4 1c             	add    esp,0x1c
c001d2b7:	31 c0                	xor    eax,eax
c001d2b9:	5b                   	pop    ebx
c001d2ba:	5e                   	pop    esi
c001d2bb:	5f                   	pop    edi
c001d2bc:	5d                   	pop    ebp
c001d2bd:	c3                   	ret    
c001d2be:	83 ec 08             	sub    esp,0x8
c001d2c1:	b8 01 00 00 00       	mov    eax,0x1
c001d2c6:	d3 e0                	shl    eax,cl
c001d2c8:	09 c6                	or     esi,eax
c001d2ca:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d2d0:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d2d7:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001d2da:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d2dd:	01 ce                	add    esi,ecx
c001d2df:	89 f0                	mov    eax,esi
c001d2e1:	c1 e0 05             	shl    eax,0x5
c001d2e4:	01 c6                	add    esi,eax
c001d2e6:	8d 04 33             	lea    eax,[ebx+esi*1]
c001d2e9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001d2ef:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d2f5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001d2f9:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d2ff:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001d305:	89 ca                	mov    edx,ecx
c001d307:	f7 da                	neg    edx
c001d309:	c1 e2 15             	shl    edx,0x15
c001d30c:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001d312:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001d318:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d31c:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d326:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d32c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d330:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001d336:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d340:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d34a:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001d351:	50                   	push   eax
c001d352:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d356:	68 08 e4 02 c0       	push   0xc002e408
c001d35b:	e8 b0 a5 00 00       	call   c0027910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d360:	83 c4 10             	add    esp,0x10
c001d363:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d367:	83 c4 1c             	add    esp,0x1c
c001d36a:	5b                   	pop    ebx
c001d36b:	5e                   	pop    esi
c001d36c:	5f                   	pop    edi
c001d36d:	5d                   	pop    ebp
c001d36e:	c3                   	ret    
c001d36f:	90                   	nop

c001d370 <Process::createUserThread()>:
c001d370:	83 ec 0c             	sub    esp,0xc
c001d373:	68 80 00 00 00       	push   0x80
c001d378:	6a 00                	push   0x0
c001d37a:	68 5e d1 01 c0       	push   0xc001d15e
c001d37f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d383:	e8 04 ff ff ff       	call   c001d28c <Process::createThread(void (*)(void*), void*, int)>
c001d388:	83 c4 1c             	add    esp,0x1c
c001d38b:	c3                   	ret    

c001d38c <setupMultitasking(void (*)())>:
c001d38c:	56                   	push   esi
c001d38d:	53                   	push   ebx
c001d38e:	53                   	push   ebx
c001d38f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d393:	eb 10                	jmp    c001d3a5 <setupMultitasking(void (*)())+0x19>
c001d395:	83 ec 0c             	sub    esp,0xc
c001d398:	68 08 e4 02 c0       	push   0xc002e408
c001d39d:	e8 c0 a4 00 00       	call   c0027862 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d3a2:	83 c4 10             	add    esp,0x10
c001d3a5:	83 ec 0c             	sub    esp,0xc
c001d3a8:	68 08 e4 02 c0       	push   0xc002e408
c001d3ad:	e8 94 a4 00 00       	call   c0027846 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d3b2:	83 c4 10             	add    esp,0x10
c001d3b5:	84 c0                	test   al,al
c001d3b7:	74 dc                	je     c001d395 <setupMultitasking(void (*)())+0x9>
c001d3b9:	83 ec 0c             	sub    esp,0xc
c001d3bc:	68 3f 07 00 00       	push   0x73f
c001d3c1:	e8 70 22 ff ff       	call   c000f636 <malloc>
c001d3c6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d3cd:	89 c3                	mov    ebx,eax
c001d3cf:	6a 00                	push   0x0
c001d3d1:	68 fe ac 02 c0       	push   0xc002acfe
c001d3d6:	6a 01                	push   0x1
c001d3d8:	50                   	push   eax
c001d3d9:	e8 b0 fb ff ff       	call   c001cf8e <Process::Process(bool, char const*, Process*, char**)>
c001d3de:	83 c4 18             	add    esp,0x18
c001d3e1:	89 1d 14 e4 02 c0    	mov    DWORD PTR ds:0xc002e414,ebx
c001d3e7:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d3ed:	68 20 ae 02 c0       	push   0xc002ae20
c001d3f2:	e8 e4 54 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001d3f7:	58                   	pop    eax
c001d3f8:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d3fe:	e8 9a 36 ff ff       	call   c0010a9d <setActiveTerminal(VgaText*)>
c001d403:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d40b:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d411:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d414:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d41e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d424:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d42a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d434:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d43e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d448:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d44e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d454:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d45e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d464:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d46e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d474:	5a                   	pop    edx
c001d475:	59                   	pop    ecx
c001d476:	68 fa ac 02 c0       	push   0xc002acfa
c001d47b:	50                   	push   eax
c001d47c:	e8 f4 32 fe ff       	call   c0000775 <strcpy>
c001d481:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d488:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d48c:	83 c4 14             	add    esp,0x14
c001d48f:	5b                   	pop    ebx
c001d490:	5e                   	pop    esi
c001d491:	e9 be 2e fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d496 <schedule()>:
c001d496:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c001d49b:	85 c0                	test   eax,eax
c001d49d:	74 0b                	je     c001d4aa <schedule()+0x14>
c001d49f:	c7 05 e4 e3 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002e3e4,0x1
c001d4a9:	c3                   	ret    
c001d4aa:	53                   	push   ebx
c001d4ab:	83 ec 14             	sub    esp,0x14
c001d4ae:	68 08 e4 02 c0       	push   0xc002e408
c001d4b3:	e8 8e a3 00 00       	call   c0027846 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d4b8:	83 c4 10             	add    esp,0x10
c001d4bb:	84 c0                	test   al,al
c001d4bd:	75 38                	jne    c001d4f7 <schedule()+0x61>
c001d4bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d4c4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d4c7:	4a                   	dec    edx
c001d4c8:	74 32                	je     c001d4fc <schedule()+0x66>
c001d4ca:	83 ec 0c             	sub    esp,0xc
c001d4cd:	68 08 e4 02 c0       	push   0xc002e408
c001d4d2:	e8 67 a3 00 00       	call   c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d4d7:	c7 04 24 08 e4 02 c0 	mov    DWORD PTR [esp],0xc002e408
c001d4de:	89 c3                	mov    ebx,eax
c001d4e0:	e8 7d a3 00 00       	call   c0027862 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d4e5:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d4ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d4ef:	e8 07 fd ff ff       	call   c001d1fb <switchToThread(ThreadControlBlock*)>
c001d4f4:	83 c4 10             	add    esp,0x10
c001d4f7:	83 c4 08             	add    esp,0x8
c001d4fa:	5b                   	pop    ebx
c001d4fb:	c3                   	ret    
c001d4fc:	83 ec 08             	sub    esp,0x8
c001d4ff:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d506:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d50c:	68 08 e4 02 c0       	push   0xc002e408
c001d511:	e8 fa a3 00 00       	call   c0027910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d516:	83 c4 10             	add    esp,0x10
c001d519:	eb af                	jmp    c001d4ca <schedule()+0x34>

c001d51b <unlockStuff()>:
c001d51b:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c001d520:	48                   	dec    eax
c001d521:	a3 e8 e3 02 c0       	mov    ds:0xc002e3e8,eax
c001d526:	75 09                	jne    c001d531 <unlockStuff()+0x16>
c001d528:	a1 e4 e3 02 c0       	mov    eax,ds:0xc002e3e4
c001d52d:	85 c0                	test   eax,eax
c001d52f:	75 05                	jne    c001d536 <unlockStuff()+0x1b>
c001d531:	e9 15 fc ff ff       	jmp    c001d14b <enableIRQs()>
c001d536:	83 ec 0c             	sub    esp,0xc
c001d539:	c7 05 e4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3e4,0x0
c001d543:	e8 4e ff ff ff       	call   c001d496 <schedule()>
c001d548:	83 c4 0c             	add    esp,0xc
c001d54b:	e9 fb fb ff ff       	jmp    c001d14b <enableIRQs()>

c001d550 <Semaphore::tryAcquire()>:
c001d550:	83 ec 0c             	sub    esp,0xc
c001d553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d557:	e8 25 fc ff ff       	call   c001d181 <lockStuff()>
c001d55c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d55f:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d561:	7c 0b                	jl     c001d56e <Semaphore::tryAcquire()+0x1e>
c001d563:	e8 b3 ff ff ff       	call   c001d51b <unlockStuff()>
c001d568:	31 c0                	xor    eax,eax
c001d56a:	83 c4 0c             	add    esp,0xc
c001d56d:	c3                   	ret    
c001d56e:	42                   	inc    edx
c001d56f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d572:	e8 a4 ff ff ff       	call   c001d51b <unlockStuff()>
c001d577:	b0 01                	mov    al,0x1
c001d579:	83 c4 0c             	add    esp,0xc
c001d57c:	c3                   	ret    
c001d57d:	90                   	nop

c001d57e <Semaphore::assertLocked(char const*)>:
c001d57e:	83 ec 0c             	sub    esp,0xc
c001d581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d585:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d589:	e8 f3 fb ff ff       	call   c001d181 <lockStuff()>
c001d58e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d590:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d593:	7c 05                	jl     c001d59a <Semaphore::assertLocked(char const*)+0x1c>
c001d595:	83 c4 0c             	add    esp,0xc
c001d598:	eb 81                	jmp    c001d51b <unlockStuff()>
c001d59a:	83 ec 0c             	sub    esp,0xc
c001d59d:	52                   	push   edx
c001d59e:	e8 08 c6 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001d5a3:	83 c4 10             	add    esp,0x10
c001d5a6:	83 c4 0c             	add    esp,0xc
c001d5a9:	e9 6d ff ff ff       	jmp    c001d51b <unlockStuff()>

c001d5ae <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d5ae:	83 ec 0c             	sub    esp,0xc
c001d5b1:	e8 8f fb ff ff       	call   c001d145 <getIRQNestingLevel()>
c001d5b6:	83 ec 08             	sub    esp,0x8
c001d5b9:	50                   	push   eax
c001d5ba:	68 54 ae 02 c0       	push   0xc002ae54
c001d5bf:	e8 17 53 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001d5c4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d5c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d5cd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d5d0:	e8 c1 fe ff ff       	call   c001d496 <schedule()>
c001d5d5:	e8 82 fb ff ff       	call   c001d15c <unlockScheduler()>
c001d5da:	e8 66 fb ff ff       	call   c001d145 <getIRQNestingLevel()>
c001d5df:	5a                   	pop    edx
c001d5e0:	59                   	pop    ecx
c001d5e1:	50                   	push   eax
c001d5e2:	68 88 ae 02 c0       	push   0xc002ae88
c001d5e7:	e8 ef 52 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001d5ec:	83 c4 1c             	add    esp,0x1c
c001d5ef:	c3                   	ret    

c001d5f0 <blockTask(TaskState)>:
c001d5f0:	83 ec 0c             	sub    esp,0xc
c001d5f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d5f7:	e8 5e fb ff ff       	call   c001d15a <lockScheduler()>
c001d5fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d601:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d604:	e8 8d fe ff ff       	call   c001d496 <schedule()>
c001d609:	83 c4 0c             	add    esp,0xc
c001d60c:	e9 4b fb ff ff       	jmp    c001d15c <unlockScheduler()>

c001d611 <waitTask(int, int*, int)>:
c001d611:	83 ec 18             	sub    esp,0x18
c001d614:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d619:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d61d:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d620:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d624:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d629:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d62c:	6a 07                	push   0x7
c001d62e:	e8 bd ff ff ff       	call   c001d5f0 <blockTask(TaskState)>
c001d633:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d638:	83 c4 10             	add    esp,0x10
c001d63b:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d63e:	85 d2                	test   edx,edx
c001d640:	74 0a                	je     c001d64c <waitTask(int, int*, int)+0x3b>
c001d642:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d645:	89 02                	mov    DWORD PTR [edx],eax
c001d647:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d64c:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d64f:	83 c4 0c             	add    esp,0xc
c001d652:	c3                   	ret    

c001d653 <nanoSleepUntil(unsigned long long)>:
c001d653:	83 ec 0c             	sub    esp,0xc
c001d656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d65a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d65e:	3b 05 50 d5 02 c0    	cmp    eax,DWORD PTR ds:0xc002d550
c001d664:	89 d1                	mov    ecx,edx
c001d666:	1b 0d 54 d5 02 c0    	sbb    ecx,DWORD PTR ds:0xc002d554
c001d66c:	73 04                	jae    c001d672 <nanoSleepUntil(unsigned long long)+0x1f>
c001d66e:	83 c4 0c             	add    esp,0xc
c001d671:	c3                   	ret    
c001d672:	e8 0a fb ff ff       	call   c001d181 <lockStuff()>
c001d677:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d67d:	83 ec 08             	sub    esp,0x8
c001d680:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d683:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d686:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d68c:	68 fc e3 02 c0       	push   0xc002e3fc
c001d691:	e8 7a a2 00 00       	call   c0027910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d696:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001d69d:	e8 4e ff ff ff       	call   c001d5f0 <blockTask(TaskState)>
c001d6a2:	83 c4 1c             	add    esp,0x1c
c001d6a5:	e9 71 fe ff ff       	jmp    c001d51b <unlockStuff()>

c001d6aa <nanoSleep(unsigned long long)>:
c001d6aa:	a1 50 d5 02 c0       	mov    eax,ds:0xc002d550
c001d6af:	8b 15 54 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d554
c001d6b5:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001d6b9:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001d6bd:	eb 94                	jmp    c001d653 <nanoSleepUntil(unsigned long long)>

c001d6bf <sleep(unsigned long long)>:
c001d6bf:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001d6c7:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001d6cc:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001d6d0:	01 ca                	add    edx,ecx
c001d6d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d6d6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d6da:	eb ce                	jmp    c001d6aa <nanoSleep(unsigned long long)>

c001d6dc <Semaphore::acquire()>:
c001d6dc:	83 ec 0c             	sub    esp,0xc
c001d6df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6e3:	e8 99 fa ff ff       	call   c001d181 <lockStuff()>
c001d6e8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d6eb:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d6ed:	7d 0c                	jge    c001d6fb <Semaphore::acquire()+0x1f>
c001d6ef:	42                   	inc    edx
c001d6f0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d6f3:	83 c4 0c             	add    esp,0xc
c001d6f6:	e9 20 fe ff ff       	jmp    c001d51b <unlockStuff()>
c001d6fb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d701:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001d708:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d70b:	85 d2                	test   edx,edx
c001d70d:	74 2a                	je     c001d739 <Semaphore::acquire()+0x5d>
c001d70f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001d712:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d718:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001d71b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d721:	83 ec 0c             	sub    esp,0xc
c001d724:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d727:	6a 05                	push   0x5
c001d729:	e8 c2 fe ff ff       	call   c001d5f0 <blockTask(TaskState)>
c001d72e:	83 c4 10             	add    esp,0x10
c001d731:	83 c4 0c             	add    esp,0xc
c001d734:	e9 e2 fd ff ff       	jmp    c001d51b <unlockStuff()>
c001d739:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d73f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d742:	eb d7                	jmp    c001d71b <Semaphore::acquire()+0x3f>

c001d744 <taskReturned>:
c001d744:	83 ec 18             	sub    esp,0x18
c001d747:	68 bc ae 02 c0       	push   0xc002aebc
c001d74c:	e8 5a c4 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001d751:	83 c4 10             	add    esp,0x10
c001d754:	83 ec 0c             	sub    esp,0xc
c001d757:	6a 02                	push   0x2
c001d759:	e8 92 fe ff ff       	call   c001d5f0 <blockTask(TaskState)>
c001d75e:	e8 f7 f9 ff ff       	call   c001d15a <lockScheduler()>
c001d763:	e8 2e fd ff ff       	call   c001d496 <schedule()>
c001d768:	e8 ef f9 ff ff       	call   c001d15c <unlockScheduler()>
c001d76d:	83 c4 10             	add    esp,0x10
c001d770:	eb e2                	jmp    c001d754 <taskReturned+0x10>

c001d772 <unblockTask(ThreadControlBlock*)>:
c001d772:	53                   	push   ebx
c001d773:	83 ec 08             	sub    esp,0x8
c001d776:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d77a:	e8 db f9 ff ff       	call   c001d15a <lockScheduler()>
c001d77f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d782:	85 c0                	test   eax,eax
c001d784:	74 5c                	je     c001d7e2 <unblockTask(ThreadControlBlock*)+0x70>
c001d786:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d789:	48                   	dec    eax
c001d78a:	74 31                	je     c001d7bd <unblockTask(ThreadControlBlock*)+0x4b>
c001d78c:	83 ec 0c             	sub    esp,0xc
c001d78f:	68 08 e4 02 c0       	push   0xc002e408
c001d794:	e8 a5 a0 00 00       	call   c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d799:	83 c4 10             	add    esp,0x10
c001d79c:	85 c0                	test   eax,eax
c001d79e:	75 17                	jne    c001d7b7 <unblockTask(ThreadControlBlock*)+0x45>
c001d7a0:	eb 65                	jmp    c001d807 <unblockTask(ThreadControlBlock*)+0x95>
c001d7a2:	83 ec 08             	sub    esp,0x8
c001d7a5:	50                   	push   eax
c001d7a6:	68 08 e4 02 c0       	push   0xc002e408
c001d7ab:	e8 68 a3 00 00       	call   c0027b18 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001d7b0:	83 c4 10             	add    esp,0x10
c001d7b3:	85 c0                	test   eax,eax
c001d7b5:	74 50                	je     c001d807 <unblockTask(ThreadControlBlock*)+0x95>
c001d7b7:	39 c3                	cmp    ebx,eax
c001d7b9:	75 e7                	jne    c001d7a2 <unblockTask(ThreadControlBlock*)+0x30>
c001d7bb:	eb 1c                	jmp    c001d7d9 <unblockTask(ThreadControlBlock*)+0x67>
c001d7bd:	83 ec 0c             	sub    esp,0xc
c001d7c0:	68 ac af 02 c0       	push   0xc002afac
c001d7c5:	e8 11 51 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001d7ca:	c7 04 24 38 af 02 c0 	mov    DWORD PTR [esp],0xc002af38
c001d7d1:	e8 05 51 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001d7d6:	83 c4 10             	add    esp,0x10
c001d7d9:	83 c4 08             	add    esp,0x8
c001d7dc:	5b                   	pop    ebx
c001d7dd:	e9 7a f9 ff ff       	jmp    c001d15c <unlockScheduler()>
c001d7e2:	83 ec 0c             	sub    esp,0xc
c001d7e5:	68 f0 ae 02 c0       	push   0xc002aef0
c001d7ea:	e8 ec 50 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001d7ef:	c7 04 24 38 af 02 c0 	mov    DWORD PTR [esp],0xc002af38
c001d7f6:	e8 e0 50 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001d7fb:	83 c4 10             	add    esp,0x10
c001d7fe:	83 c4 08             	add    esp,0x8
c001d801:	5b                   	pop    ebx
c001d802:	e9 55 f9 ff ff       	jmp    c001d15c <unlockScheduler()>
c001d807:	83 ec 08             	sub    esp,0x8
c001d80a:	53                   	push   ebx
c001d80b:	68 08 e4 02 c0       	push   0xc002e408
c001d810:	e8 fb a0 00 00       	call   c0027910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d815:	83 c4 10             	add    esp,0x10
c001d818:	83 c4 08             	add    esp,0x8
c001d81b:	5b                   	pop    ebx
c001d81c:	e9 3b f9 ff ff       	jmp    c001d15c <unlockScheduler()>

c001d821 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001d821:	55                   	push   ebp
c001d822:	57                   	push   edi
c001d823:	56                   	push   esi
c001d824:	53                   	push   ebx
c001d825:	83 ec 1c             	sub    esp,0x1c
c001d828:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d82c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d82f:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001d835:	85 ff                	test   edi,edi
c001d837:	7e 20                	jle    c001d859 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001d839:	31 f6                	xor    esi,esi
c001d83b:	83 ec 0c             	sub    esp,0xc
c001d83e:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001d845:	46                   	inc    esi
c001d846:	e8 fb 1d ff ff       	call   c000f646 <free>
c001d84b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d84e:	83 c4 10             	add    esp,0x10
c001d851:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001d857:	7f e2                	jg     c001d83b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001d859:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d863:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001d868:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001d86b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d86e:	d3 c0                	rol    eax,cl
c001d870:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001d877:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d87a:	89 f7                	mov    edi,esi
c001d87c:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001d884:	0f 85 74 01 00 00    	jne    c001d9fe <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001d88a:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001d890:	85 ed                	test   ebp,ebp
c001d892:	74 1b                	je     c001d8af <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001d894:	83 ec 0c             	sub    esp,0xc
c001d897:	55                   	push   ebp
c001d898:	e8 7b c0 ff ff       	call   c0019918 <EnvVarContainer::~EnvVarContainer()>
c001d89d:	59                   	pop    ecx
c001d89e:	5e                   	pop    esi
c001d89f:	6a 0c                	push   0xc
c001d8a1:	55                   	push   ebp
c001d8a2:	e8 54 4f ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c001d8a7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d8aa:	83 c4 10             	add    esp,0x10
c001d8ad:	89 f7                	mov    edi,esi
c001d8af:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d8b5:	85 c0                	test   eax,eax
c001d8b7:	0f 84 aa 00 00 00    	je     c001d967 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d8bd:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001d8c0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d8c4:	31 c9                	xor    ecx,ecx
c001d8c6:	eb 10                	jmp    c001d8d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001d8c8:	41                   	inc    ecx
c001d8c9:	83 f9 10             	cmp    ecx,0x10
c001d8cc:	0f 84 95 00 00 00    	je     c001d967 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d8d2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d8d8:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001d8df:	d3 fa                	sar    edx,cl
c001d8e1:	83 e2 01             	and    edx,0x1
c001d8e4:	74 e2                	je     c001d8c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d8e6:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d8e9:	01 ca                	add    edx,ecx
c001d8eb:	89 d5                	mov    ebp,edx
c001d8ed:	c1 e5 05             	shl    ebp,0x5
c001d8f0:	01 ea                	add    edx,ebp
c001d8f2:	01 d0                	add    eax,edx
c001d8f4:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001d8fa:	83 fd 07             	cmp    ebp,0x7
c001d8fd:	75 c9                	jne    c001d8c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d8ff:	05 40 02 00 00       	add    eax,0x240
c001d904:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001d907:	83 fd ff             	cmp    ebp,0xffffffff
c001d90a:	0f 8c 08 01 00 00    	jl     c001da18 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001d910:	0f 84 b9 01 00 00    	je     c001dacf <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001d916:	85 ed                	test   ebp,ebp
c001d918:	0f 84 a0 01 00 00    	je     c001dabe <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001d91e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001d920:	75 a6                	jne    c001d8c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d922:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d928:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d92c:	01 d0                	add    eax,edx
c001d92e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d932:	83 ec 0c             	sub    esp,0xc
c001d935:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001d93b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d93e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d944:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001d94b:	50                   	push   eax
c001d94c:	e8 21 fe ff ff       	call   c001d772 <unblockTask(ThreadControlBlock*)>
c001d951:	83 c4 10             	add    esp,0x10
c001d954:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d957:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d95b:	89 f7                	mov    edi,esi
c001d95d:	41                   	inc    ecx
c001d95e:	83 f9 10             	cmp    ecx,0x10
c001d961:	0f 85 6b ff ff ff    	jne    c001d8d2 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001d967:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001d96d:	85 c0                	test   eax,eax
c001d96f:	74 5d                	je     c001d9ce <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d971:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001d977:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001d97d:	74 4f                	je     c001d9ce <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d97f:	83 ec 0c             	sub    esp,0xc
c001d982:	68 08 e4 02 c0       	push   0xc002e408
c001d987:	e8 b2 9e 00 00       	call   c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d98c:	c7 04 24 08 e4 02 c0 	mov    DWORD PTR [esp],0xc002e408
c001d993:	89 c7                	mov    edi,eax
c001d995:	e8 ac 9e 00 00       	call   c0027846 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d99a:	83 c4 10             	add    esp,0x10
c001d99d:	84 c0                	test   al,al
c001d99f:	0f 84 e4 00 00 00    	je     c001da89 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001d9a5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d9a8:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d9ae:	85 d2                	test   edx,edx
c001d9b0:	74 0f                	je     c001d9c1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001d9b2:	83 ec 0c             	sub    esp,0xc
c001d9b5:	8b 02                	mov    eax,DWORD PTR [edx]
c001d9b7:	52                   	push   edx
c001d9b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d9bb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d9be:	83 c4 10             	add    esp,0x10
c001d9c1:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001d9cb:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d9ce:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001d9d4:	85 db                	test   ebx,ebx
c001d9d6:	74 16                	je     c001d9ee <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001d9d8:	83 ec 0c             	sub    esp,0xc
c001d9db:	53                   	push   ebx
c001d9dc:	e8 69 44 ff ff       	call   c0011e4a <VAS::~VAS()>
c001d9e1:	58                   	pop    eax
c001d9e2:	5a                   	pop    edx
c001d9e3:	6a 10                	push   0x10
c001d9e5:	53                   	push   ebx
c001d9e6:	e8 10 4e ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c001d9eb:	83 c4 10             	add    esp,0x10
c001d9ee:	83 ec 0c             	sub    esp,0xc
c001d9f1:	68 05 ad 02 c0       	push   0xc002ad05
c001d9f6:	e8 e0 4e ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001d9fb:	83 c4 10             	add    esp,0x10
c001d9fe:	83 ec 08             	sub    esp,0x8
c001da01:	68 3f 07 00 00       	push   0x73f
c001da06:	68 13 ad 02 c0       	push   0xc002ad13
c001da0b:	e8 cb 4e ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001da10:	83 c4 2c             	add    esp,0x2c
c001da13:	5b                   	pop    ebx
c001da14:	5e                   	pop    esi
c001da15:	5f                   	pop    edi
c001da16:	5d                   	pop    ebp
c001da17:	c3                   	ret    
c001da18:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001da1c:	83 ec 0c             	sub    esp,0xc
c001da1f:	68 f0 af 02 c0       	push   0xc002aff0
c001da24:	e8 82 c1 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001da29:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001da2c:	83 c4 10             	add    esp,0x10
c001da2f:	89 f7                	mov    edi,esi
c001da31:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001da35:	e9 8e fe ff ff       	jmp    c001d8c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001da3a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001da40:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001da46:	75 1c                	jne    c001da64 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001da48:	83 ec 0c             	sub    esp,0xc
c001da4b:	68 58 b0 02 c0       	push   0xc002b058
c001da50:	e8 86 4e ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001da55:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001da5c:	e8 8f fb ff ff       	call   c001d5f0 <blockTask(TaskState)>
c001da61:	83 c4 10             	add    esp,0x10
c001da64:	83 ec 08             	sub    esp,0x8
c001da67:	56                   	push   esi
c001da68:	68 08 e4 02 c0       	push   0xc002e408
c001da6d:	e8 9e 9e 00 00       	call   c0027910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da72:	c7 04 24 08 e4 02 c0 	mov    DWORD PTR [esp],0xc002e408
c001da79:	e8 c0 9d 00 00       	call   c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001da7e:	83 c4 10             	add    esp,0x10
c001da81:	39 f8                	cmp    eax,edi
c001da83:	0f 84 1c ff ff ff    	je     c001d9a5 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001da89:	83 ec 0c             	sub    esp,0xc
c001da8c:	68 08 e4 02 c0       	push   0xc002e408
c001da91:	e8 a8 9d 00 00       	call   c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001da96:	c7 04 24 08 e4 02 c0 	mov    DWORD PTR [esp],0xc002e408
c001da9d:	89 c6                	mov    esi,eax
c001da9f:	e8 be 9d 00 00       	call   c0027862 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001daa4:	83 c4 10             	add    esp,0x10
c001daa7:	39 f3                	cmp    ebx,esi
c001daa9:	74 b9                	je     c001da64 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001daab:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001daae:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dab1:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001dab7:	75 ab                	jne    c001da64 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001dab9:	e9 7c ff ff ff       	jmp    c001da3a <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001dabe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dac2:	83 ec 0c             	sub    esp,0xc
c001dac5:	68 24 b0 02 c0       	push   0xc002b024
c001daca:	e9 55 ff ff ff       	jmp    c001da24 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001dacf:	8b 36                	mov    esi,DWORD PTR [esi]
c001dad1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dad5:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001dad8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dadb:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001dae1:	01 d7                	add    edi,edx
c001dae3:	89 f8                	mov    eax,edi
c001dae5:	e9 44 fe ff ff       	jmp    c001d92e <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001daea <cleanerTaskFunction(void*)>:
c001daea:	53                   	push   ebx
c001daeb:	83 ec 08             	sub    esp,0x8
c001daee:	e8 69 f6 ff ff       	call   c001d15c <unlockScheduler()>
c001daf3:	e8 62 f6 ff ff       	call   c001d15a <lockScheduler()>
c001daf8:	80 3d cc e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3cc,0x0
c001daff:	0f 85 8e 00 00 00    	jne    c001db93 <cleanerTaskFunction(void*)+0xa9>
c001db05:	83 ec 0c             	sub    esp,0xc
c001db08:	6a 02                	push   0x2
c001db0a:	e8 9f fa ff ff       	call   c001d5ae <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001db0f:	83 c4 10             	add    esp,0x10
c001db12:	c6 05 cc e3 02 c0 00 	mov    BYTE PTR ds:0xc002e3cc,0x0
c001db19:	e8 63 f6 ff ff       	call   c001d181 <lockStuff()>
c001db1e:	e8 37 f6 ff ff       	call   c001d15a <lockScheduler()>
c001db23:	83 ec 0c             	sub    esp,0xc
c001db26:	68 f0 e3 02 c0       	push   0xc002e3f0
c001db2b:	e8 16 9d 00 00       	call   c0027846 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001db30:	83 c4 10             	add    esp,0x10
c001db33:	84 c0                	test   al,al
c001db35:	75 40                	jne    c001db77 <cleanerTaskFunction(void*)+0x8d>
c001db37:	83 ec 0c             	sub    esp,0xc
c001db3a:	68 f0 e3 02 c0       	push   0xc002e3f0
c001db3f:	e8 fa 9c 00 00       	call   c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001db44:	c7 04 24 f0 e3 02 c0 	mov    DWORD PTR [esp],0xc002e3f0
c001db4b:	89 c3                	mov    ebx,eax
c001db4d:	e8 10 9d 00 00       	call   c0027862 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001db52:	c7 04 24 29 ad 02 c0 	mov    DWORD PTR [esp],0xc002ad29
c001db59:	e8 7d 4d ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001db5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db61:	e8 bb fc ff ff       	call   c001d821 <cleanupTerminatedTask(ThreadControlBlock*)>
c001db66:	c7 04 24 42 ad 02 c0 	mov    DWORD PTR [esp],0xc002ad42
c001db6d:	e8 69 4d ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001db72:	83 c4 10             	add    esp,0x10
c001db75:	eb ac                	jmp    c001db23 <cleanerTaskFunction(void*)+0x39>
c001db77:	e8 e0 f5 ff ff       	call   c001d15c <unlockScheduler()>
c001db7c:	e8 9a f9 ff ff       	call   c001d51b <unlockStuff()>
c001db81:	e8 d4 f5 ff ff       	call   c001d15a <lockScheduler()>
c001db86:	80 3d cc e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3cc,0x0
c001db8d:	0f 84 72 ff ff ff    	je     c001db05 <cleanerTaskFunction(void*)+0x1b>
c001db93:	e8 c4 f5 ff ff       	call   c001d15c <unlockScheduler()>
c001db98:	e9 75 ff ff ff       	jmp    c001db12 <cleanerTaskFunction(void*)+0x28>

c001db9d <terminateTask(int)>:
c001db9d:	83 ec 14             	sub    esp,0x14
c001dba0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dba5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dba8:	83 c0 0c             	add    eax,0xc
c001dbab:	50                   	push   eax
c001dbac:	68 80 b0 02 c0       	push   0xc002b080
c001dbb1:	e8 25 4d ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001dbb6:	e8 c6 f5 ff ff       	call   c001d181 <lockStuff()>
c001dbbb:	e8 9a f5 ff ff       	call   c001d15a <lockScheduler()>
c001dbc0:	c7 04 24 55 ad 02 c0 	mov    DWORD PTR [esp],0xc002ad55
c001dbc7:	e8 0f 4d ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001dbcc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dbd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbd5:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001dbd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbdd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001dbe0:	5a                   	pop    edx
c001dbe1:	59                   	pop    ecx
c001dbe2:	50                   	push   eax
c001dbe3:	68 f0 e3 02 c0       	push   0xc002e3f0
c001dbe8:	e8 23 9d 00 00       	call   c0027910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dbed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbf2:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001dbf9:	c7 04 24 6f ad 02 c0 	mov    DWORD PTR [esp],0xc002ad6f
c001dc00:	e8 d6 4c ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001dc05:	83 c4 10             	add    esp,0x10
c001dc08:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c001dc0d:	85 c0                	test   eax,eax
c001dc0f:	74 5a                	je     c001dc6b <terminateTask(int)+0xce>
c001dc11:	83 ec 0c             	sub    esp,0xc
c001dc14:	68 89 ad 02 c0       	push   0xc002ad89
c001dc19:	e8 bd 4c ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001dc1e:	58                   	pop    eax
c001dc1f:	c6 05 cc e3 02 c0 01 	mov    BYTE PTR ds:0xc002e3cc,0x1
c001dc26:	ff 35 c8 e3 02 c0    	push   DWORD PTR ds:0xc002e3c8
c001dc2c:	e8 41 fb ff ff       	call   c001d772 <unblockTask(ThreadControlBlock*)>
c001dc31:	c7 04 24 a3 ad 02 c0 	mov    DWORD PTR [esp],0xc002ada3
c001dc38:	e8 9e 4c ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001dc3d:	83 c4 10             	add    esp,0x10
c001dc40:	e8 17 f5 ff ff       	call   c001d15c <unlockScheduler()>
c001dc45:	e8 d1 f8 ff ff       	call   c001d51b <unlockStuff()>
c001dc4a:	83 ec 0c             	sub    esp,0xc
c001dc4d:	68 db ad 02 c0       	push   0xc002addb
c001dc52:	e8 84 4c ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001dc57:	83 c4 10             	add    esp,0x10
c001dc5a:	e8 fb f4 ff ff       	call   c001d15a <lockScheduler()>
c001dc5f:	e8 32 f8 ff ff       	call   c001d496 <schedule()>
c001dc64:	e8 f3 f4 ff ff       	call   c001d15c <unlockScheduler()>
c001dc69:	eb ef                	jmp    c001dc5a <terminateTask(int)+0xbd>
c001dc6b:	83 ec 0c             	sub    esp,0xc
c001dc6e:	68 bd ad 02 c0       	push   0xc002adbd
c001dc73:	e8 63 4c ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001dc78:	83 c4 10             	add    esp,0x10
c001dc7b:	eb c3                	jmp    c001dc40 <terminateTask(int)+0xa3>

c001dc7d <Thr::terminateFromIRQ(int)>:
c001dc7d:	83 ec 18             	sub    esp,0x18
c001dc80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc84:	e8 14 ff ff ff       	call   c001db9d <terminateTask(int)>
c001dc89:	90                   	nop

c001dc8a <Semaphore::release()>:
c001dc8a:	83 ec 0c             	sub    esp,0xc
c001dc8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc91:	e8 eb f4 ff ff       	call   c001d181 <lockStuff()>
c001dc96:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dc99:	85 d2                	test   edx,edx
c001dc9b:	74 1a                	je     c001dcb7 <Semaphore::release()+0x2d>
c001dc9d:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001dca0:	83 ec 0c             	sub    esp,0xc
c001dca3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001dca6:	52                   	push   edx
c001dca7:	e8 c6 fa ff ff       	call   c001d772 <unblockTask(ThreadControlBlock*)>
c001dcac:	83 c4 10             	add    esp,0x10
c001dcaf:	83 c4 0c             	add    esp,0xc
c001dcb2:	e9 64 f8 ff ff       	jmp    c001d51b <unlockStuff()>
c001dcb7:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001dcba:	83 c4 0c             	add    esp,0xc
c001dcbd:	e9 59 f8 ff ff       	jmp    c001d51b <unlockStuff()>

c001dcc2 <__static_initialization_and_destruction_0(int, int)>:
c001dcc2:	83 ec 0c             	sub    esp,0xc
c001dcc5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001dcca:	0f 85 88 00 00 00    	jne    c001dd58 <__static_initialization_and_destruction_0(int, int)+0x96>
c001dcd0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001dcd8:	75 7e                	jne    c001dd58 <__static_initialization_and_destruction_0(int, int)+0x96>
c001dcda:	83 ec 0c             	sub    esp,0xc
c001dcdd:	68 08 e4 02 c0       	push   0xc002e408
c001dce2:	e8 d9 9d 00 00       	call   c0027ac0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001dce7:	83 c4 10             	add    esp,0x10
c001dcea:	83 ec 04             	sub    esp,0x4
c001dced:	68 f0 bd 02 c0       	push   0xc002bdf0
c001dcf2:	68 08 e4 02 c0       	push   0xc002e408
c001dcf7:	68 80 7a 02 c0       	push   0xc0027a80
c001dcfc:	e8 74 4a ff ff       	call   c0012775 <__cxa_atexit>
c001dd01:	83 c4 10             	add    esp,0x10
c001dd04:	83 ec 0c             	sub    esp,0xc
c001dd07:	68 fc e3 02 c0       	push   0xc002e3fc
c001dd0c:	e8 af 9d 00 00       	call   c0027ac0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001dd11:	83 c4 10             	add    esp,0x10
c001dd14:	83 ec 04             	sub    esp,0x4
c001dd17:	68 f0 bd 02 c0       	push   0xc002bdf0
c001dd1c:	68 fc e3 02 c0       	push   0xc002e3fc
c001dd21:	68 80 7a 02 c0       	push   0xc0027a80
c001dd26:	e8 4a 4a ff ff       	call   c0012775 <__cxa_atexit>
c001dd2b:	83 c4 10             	add    esp,0x10
c001dd2e:	83 ec 0c             	sub    esp,0xc
c001dd31:	68 f0 e3 02 c0       	push   0xc002e3f0
c001dd36:	e8 85 9d 00 00       	call   c0027ac0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001dd3b:	83 c4 10             	add    esp,0x10
c001dd3e:	83 ec 04             	sub    esp,0x4
c001dd41:	68 f0 bd 02 c0       	push   0xc002bdf0
c001dd46:	68 f0 e3 02 c0       	push   0xc002e3f0
c001dd4b:	68 80 7a 02 c0       	push   0xc0027a80
c001dd50:	e8 20 4a ff ff       	call   c0012775 <__cxa_atexit>
c001dd55:	83 c4 10             	add    esp,0x10
c001dd58:	90                   	nop
c001dd59:	83 c4 0c             	add    esp,0xc
c001dd5c:	c3                   	ret    

c001dd5d <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001dd5d:	83 ec 0c             	sub    esp,0xc
c001dd60:	83 ec 08             	sub    esp,0x8
c001dd63:	68 ff ff 00 00       	push   0xffff
c001dd68:	6a 01                	push   0x1
c001dd6a:	e8 53 ff ff ff       	call   c001dcc2 <__static_initialization_and_destruction_0(int, int)>
c001dd6f:	83 c4 10             	add    esp,0x10
c001dd72:	83 c4 0c             	add    esp,0xc
c001dd75:	c3                   	ret    

c001dd76 <Vm::inbv(unsigned short)>:
c001dd76:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dd7a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001dd7f:	75 06                	jne    c001dd87 <Vm::inbv(unsigned short)+0x11>
c001dd81:	a0 4c e4 02 c0       	mov    al,ds:0xc002e44c
c001dd86:	c3                   	ret    
c001dd87:	ec                   	in     al,dx
c001dd88:	c3                   	ret    

c001dd89 <Vm::outbv(unsigned short, unsigned char)>:
c001dd89:	53                   	push   ebx
c001dd8a:	83 ec 08             	sub    esp,0x8
c001dd8d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd91:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001dd95:	66 81 fa fe fe       	cmp    dx,0xfefe
c001dd9a:	75 38                	jne    c001ddd4 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001dd9c:	0f b6 c3             	movzx  eax,bl
c001dd9f:	51                   	push   ecx
c001dda0:	51                   	push   ecx
c001dda1:	50                   	push   eax
c001dda2:	68 9f b0 02 c0       	push   0xc002b09f
c001dda7:	e8 2f 4b ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001ddac:	8b 15 4c e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e44c
c001ddb2:	83 c4 10             	add    esp,0x10
c001ddb5:	8d 42 01             	lea    eax,[edx+0x1]
c001ddb8:	88 9a 60 e4 02 c0    	mov    BYTE PTR [edx-0x3ffd1ba0],bl
c001ddbe:	a3 4c e4 02 c0       	mov    ds:0xc002e44c,eax
c001ddc3:	83 f8 20             	cmp    eax,0x20
c001ddc6:	75 0f                	jne    c001ddd7 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ddc8:	c7 05 4c e4 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002e44c,0x1f
c001ddd2:	eb 03                	jmp    c001ddd7 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ddd4:	88 d8                	mov    al,bl
c001ddd6:	ee                   	out    dx,al
c001ddd7:	83 c4 08             	add    esp,0x8
c001ddda:	5b                   	pop    ebx
c001dddb:	c3                   	ret    

c001dddc <Vm::realToLinear(unsigned short, unsigned short)>:
c001dddc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dde1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dde6:	c1 e0 04             	shl    eax,0x4
c001dde9:	01 d0                	add    eax,edx
c001ddeb:	c3                   	ret    

c001ddec <Vm::getSegment(unsigned int)>:
c001ddec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddf0:	c1 e8 10             	shr    eax,0x10
c001ddf3:	c3                   	ret    

c001ddf4 <Vm::getOffset(unsigned int)>:
c001ddf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddf8:	c3                   	ret    

c001ddf9 <Vm::mainloop2()>:
c001ddf9:	83 ec 0c             	sub    esp,0xc
c001ddfc:	e8 59 f3 ff ff       	call   c001d15a <lockScheduler()>
c001de01:	83 ec 0c             	sub    esp,0xc
c001de04:	c6 05 45 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e445,0x1
c001de0b:	6a 02                	push   0x2
c001de0d:	e8 9c f7 ff ff       	call   c001d5ae <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001de12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de17:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001de1b:	52                   	push   edx
c001de1c:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001de20:	52                   	push   edx
c001de21:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001de25:	52                   	push   edx
c001de26:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001de2a:	50                   	push   eax
c001de2b:	e8 ca 24 fe ff       	call   c00002fa <goToVM86>
c001de30:	83 c4 2c             	add    esp,0x2c
c001de33:	c3                   	ret    

c001de34 <Vm::mainVm8086Loop(void*)>:
c001de34:	83 ec 0c             	sub    esp,0xc
c001de37:	e8 20 f3 ff ff       	call   c001d15c <unlockScheduler()>
c001de3c:	83 c4 0c             	add    esp,0xc
c001de3f:	eb b8                	jmp    c001ddf9 <Vm::mainloop2()>

c001de41 <Vm::mainloop3(unsigned long)>:
c001de41:	53                   	push   ebx
c001de42:	83 ec 08             	sub    esp,0x8
c001de45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de49:	e8 0c f3 ff ff       	call   c001d15a <lockScheduler()>
c001de4e:	83 ec 0c             	sub    esp,0xc
c001de51:	89 1d 40 e4 02 c0    	mov    DWORD PTR ds:0xc002e440,ebx
c001de57:	6a 02                	push   0x2
c001de59:	c6 05 44 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e444,0x1
c001de60:	e8 49 f7 ff ff       	call   c001d5ae <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001de65:	83 c4 18             	add    esp,0x18
c001de68:	5b                   	pop    ebx
c001de69:	eb 8e                	jmp    c001ddf9 <Vm::mainloop2()>

c001de6b <Vm::initialise8086()>:
c001de6b:	83 ec 0c             	sub    esp,0xc
c001de6e:	68 80 00 00 00       	push   0x80
c001de73:	6a 00                	push   0x0
c001de75:	68 34 de 01 c0       	push   0xc001de34
c001de7a:	ff 35 14 e4 02 c0    	push   DWORD PTR ds:0xc002e414
c001de80:	e8 07 f4 ff ff       	call   c001d28c <Process::createThread(void (*)(void*), void*, int)>
c001de85:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001de8c:	a3 48 e4 02 c0       	mov    ds:0xc002e448,eax
c001de91:	68 00 01 00 00       	push   0x100
c001de96:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c001de9b:	6a 00                	push   0x0
c001de9d:	6a 00                	push   0x0
c001de9f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001dea5:	e8 00 44 ff ff       	call   c00122aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001deaa:	83 c4 2c             	add    esp,0x2c
c001dead:	c3                   	ret    

c001deae <Vm::finish8086()>:
c001deae:	53                   	push   ebx
c001deaf:	83 ec 08             	sub    esp,0x8
c001deb2:	e8 a3 f2 ff ff       	call   c001d15a <lockScheduler()>
c001deb7:	80 3d 44 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e444,0x0
c001debe:	75 0c                	jne    c001decc <Vm::finish8086()+0x1e>
c001dec0:	e8 d1 f5 ff ff       	call   c001d496 <schedule()>
c001dec5:	e8 92 f2 ff ff       	call   c001d15c <unlockScheduler()>
c001deca:	eb e6                	jmp    c001deb2 <Vm::finish8086()+0x4>
c001decc:	83 ec 0c             	sub    esp,0xc
c001decf:	8b 1d 40 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e440
c001ded5:	ff 35 48 e4 02 c0    	push   DWORD PTR ds:0xc002e448
c001dedb:	c6 05 44 e4 02 c0 00 	mov    BYTE PTR ds:0xc002e444,0x0
c001dee2:	e8 8b f8 ff ff       	call   c001d772 <unblockTask(ThreadControlBlock*)>
c001dee7:	e8 70 f2 ff ff       	call   c001d15c <unlockScheduler()>
c001deec:	89 d8                	mov    eax,ebx
c001deee:	83 c4 18             	add    esp,0x18
c001def1:	5b                   	pop    ebx
c001def2:	c3                   	ret    

c001def3 <Vm::getOutput8086(unsigned char*)>:
c001def3:	83 ec 10             	sub    esp,0x10
c001def6:	ff 35 4c e4 02 c0    	push   DWORD PTR ds:0xc002e44c
c001defc:	68 60 e4 02 c0       	push   0xc002e460
c001df01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df05:	e8 96 27 fe ff       	call   c00006a0 <memcpy>
c001df0a:	a1 4c e4 02 c0       	mov    eax,ds:0xc002e44c
c001df0f:	c7 05 4c e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e44c,0x0
c001df19:	83 c4 1c             	add    esp,0x1c
c001df1c:	c3                   	ret    

c001df1d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001df1d:	55                   	push   ebp
c001df1e:	57                   	push   edi
c001df1f:	56                   	push   esi
c001df20:	53                   	push   ebx
c001df21:	83 ec 2c             	sub    esp,0x2c
c001df24:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001df28:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001df2c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001df30:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001df34:	e8 21 f2 ff ff       	call   c001d15a <lockScheduler()>
c001df39:	a0 45 e4 02 c0       	mov    al,ds:0xc002e445
c001df3e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001df42:	84 c0                	test   al,al
c001df44:	75 0c                	jne    c001df52 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001df46:	e8 4b f5 ff ff       	call   c001d496 <schedule()>
c001df4b:	e8 0c f2 ff ff       	call   c001d15c <unlockScheduler()>
c001df50:	eb e2                	jmp    c001df34 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001df52:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c001df57:	c7 05 4c e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e44c,0x0
c001df61:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001df65:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001df69:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001df6d:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001df71:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001df75:	50                   	push   eax
c001df76:	6a 20                	push   0x20
c001df78:	6a 00                	push   0x0
c001df7a:	68 60 e4 02 c0       	push   0xc002e460
c001df7f:	e8 52 27 fe ff       	call   c00006d6 <memset>
c001df84:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001df8b:	e8 a6 16 ff ff       	call   c000f636 <malloc>
c001df90:	83 c4 0c             	add    esp,0xc
c001df93:	89 c7                	mov    edi,eax
c001df95:	ff 35 14 e4 02 c0    	push   DWORD PTR ds:0xc002e414
c001df9b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df9f:	50                   	push   eax
c001dfa0:	e8 8f 4e ff ff       	call   c0012e34 <File::File(char const*, Process*)>
c001dfa5:	83 c4 10             	add    esp,0x10
c001dfa8:	85 ff                	test   edi,edi
c001dfaa:	75 0a                	jne    c001dfb6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001dfac:	83 ec 0c             	sub    esp,0xc
c001dfaf:	68 bb b0 02 c0       	push   0xc002b0bb
c001dfb4:	eb 27                	jmp    c001dfdd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001dfb6:	50                   	push   eax
c001dfb7:	8d 44 24 17          	lea    eax,[esp+0x17]
c001dfbb:	50                   	push   eax
c001dfbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c001dfc0:	50                   	push   eax
c001dfc1:	57                   	push   edi
c001dfc2:	e8 7d 51 ff ff       	call   c0013144 <File::stat(unsigned long long*, bool*)>
c001dfc7:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001dfcc:	83 c4 10             	add    esp,0x10
c001dfcf:	89 e8                	mov    eax,ebp
c001dfd1:	84 c0                	test   al,al
c001dfd3:	74 19                	je     c001dfee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001dfd5:	83 ec 0c             	sub    esp,0xc
c001dfd8:	68 cf b0 02 c0       	push   0xc002b0cf
c001dfdd:	e8 c9 bb ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001dfe2:	31 ed                	xor    ebp,ebp
c001dfe4:	e8 73 f1 ff ff       	call   c001d15c <unlockScheduler()>
c001dfe9:	83 c4 10             	add    esp,0x10
c001dfec:	eb 75                	jmp    c001e063 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001dfee:	50                   	push   eax
c001dfef:	50                   	push   eax
c001dff0:	6a 01                	push   0x1
c001dff2:	57                   	push   edi
c001dff3:	e8 a0 4e ff ff       	call   c0012e98 <File::open(FileOpenMode)>
c001dff8:	83 c4 10             	add    esp,0x10
c001dffb:	85 c0                	test   eax,eax
c001dffd:	74 17                	je     c001e016 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001dfff:	83 ec 0c             	sub    esp,0xc
c001e002:	68 e8 b0 02 c0       	push   0xc002b0e8
c001e007:	e8 9f bb ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001e00c:	e8 4b f1 ff ff       	call   c001d15c <unlockScheduler()>
c001e011:	83 c4 10             	add    esp,0x10
c001e014:	eb 4d                	jmp    c001e063 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e016:	0f b7 f6             	movzx  esi,si
c001e019:	50                   	push   eax
c001e01a:	0f b7 db             	movzx  ebx,bx
c001e01d:	50                   	push   eax
c001e01e:	56                   	push   esi
c001e01f:	53                   	push   ebx
c001e020:	e8 b7 fd ff ff       	call   c001dddc <Vm::realToLinear(unsigned short, unsigned short)>
c001e025:	5a                   	pop    edx
c001e026:	8b 17                	mov    edx,DWORD PTR [edi]
c001e028:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e02c:	51                   	push   ecx
c001e02d:	50                   	push   eax
c001e02e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e032:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e036:	57                   	push   edi
c001e037:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e03a:	83 c4 14             	add    esp,0x14
c001e03d:	57                   	push   edi
c001e03e:	e8 b3 4e ff ff       	call   c0012ef6 <File::close()>
c001e043:	c6 05 45 e4 02 c0 00 	mov    BYTE PTR ds:0xc002e445,0x0
c001e04a:	e8 0d f1 ff ff       	call   c001d15c <unlockScheduler()>
c001e04f:	59                   	pop    ecx
c001e050:	ff 35 48 e4 02 c0    	push   DWORD PTR ds:0xc002e448
c001e056:	e8 17 f7 ff ff       	call   c001d772 <unblockTask(ThreadControlBlock*)>
c001e05b:	83 c4 10             	add    esp,0x10
c001e05e:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001e063:	83 c4 2c             	add    esp,0x2c
c001e066:	89 e8                	mov    eax,ebp
c001e068:	5b                   	pop    ebx
c001e069:	5e                   	pop    esi
c001e06a:	5f                   	pop    edi
c001e06b:	5d                   	pop    ebp
c001e06c:	c3                   	ret    

c001e06d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e06d:	57                   	push   edi
c001e06e:	56                   	push   esi
c001e06f:	53                   	push   ebx
c001e070:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e078:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e07c:	83 e8 06             	sub    eax,0x6
c001e07f:	0f b7 c0             	movzx  eax,ax
c001e082:	50                   	push   eax
c001e083:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e088:	50                   	push   eax
c001e089:	e8 4e fd ff ff       	call   c001dddc <Vm::realToLinear(unsigned short, unsigned short)>
c001e08e:	5a                   	pop    edx
c001e08f:	5e                   	pop    esi
c001e090:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e093:	8d 56 fa             	lea    edx,[esi-0x6]
c001e096:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e09c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e09f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e0a2:	83 c2 02             	add    edx,0x2
c001e0a5:	66 89 10             	mov    WORD PTR [eax],dx
c001e0a8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e0ab:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e0af:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e0b2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e0b6:	89 d6                	mov    esi,edx
c001e0b8:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e0be:	66 81 e6 ff fd       	and    si,0xfdff
c001e0c3:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e0c7:	74 07                	je     c001e0d0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e0c9:	89 d6                	mov    esi,edx
c001e0cb:	66 81 ce 00 02       	or     si,0x200
c001e0d0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e0d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0d9:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e0dd:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e0e5:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e0e8:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e0f0:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e0f3:	5b                   	pop    ebx
c001e0f4:	5e                   	pop    esi
c001e0f5:	5f                   	pop    edi
c001e0f6:	c3                   	ret    

c001e0f7 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e0f7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e0fc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e101:	c1 e0 04             	shl    eax,0x4
c001e104:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e107:	c3                   	ret    

c001e108 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e108:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e10d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e112:	c1 e0 04             	shl    eax,0x4
c001e115:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e119:	c3                   	ret    

c001e11a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e11a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e11f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e124:	c1 e0 04             	shl    eax,0x4
c001e127:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e12a:	c3                   	ret    

c001e12b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e12b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e130:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e135:	c1 e0 04             	shl    eax,0x4
c001e138:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e13c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e13f:	c3                   	ret    

c001e140 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e140:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e145:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e14a:	c1 e0 04             	shl    eax,0x4
c001e14d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e151:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e155:	c3                   	ret    

c001e156 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e156:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e15b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e160:	c1 e0 04             	shl    eax,0x4
c001e163:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e167:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e16a:	c3                   	ret    

c001e16b <Vm::faultHandler(regs*)>:
c001e16b:	55                   	push   ebp
c001e16c:	57                   	push   edi
c001e16d:	56                   	push   esi
c001e16e:	53                   	push   ebx
c001e16f:	83 ec 1c             	sub    esp,0x1c
c001e172:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e176:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001e179:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001e17c:	0f b7 c1             	movzx  eax,cx
c001e17f:	50                   	push   eax
c001e180:	0f b7 c3             	movzx  eax,bx
c001e183:	c1 e3 04             	shl    ebx,0x4
c001e186:	50                   	push   eax
c001e187:	e8 50 fc ff ff       	call   c001dddc <Vm::realToLinear(unsigned short, unsigned short)>
c001e18c:	5a                   	pop    edx
c001e18d:	89 c5                	mov    ebp,eax
c001e18f:	5e                   	pop    esi
c001e190:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001e194:	50                   	push   eax
c001e195:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e199:	50                   	push   eax
c001e19a:	e8 3d fc ff ff       	call   c001dddc <Vm::realToLinear(unsigned short, unsigned short)>
c001e19f:	01 cb                	add    ebx,ecx
c001e1a1:	89 c6                	mov    esi,eax
c001e1a3:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001e1a7:	50                   	push   eax
c001e1a8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e1ac:	50                   	push   eax
c001e1ad:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e1b1:	50                   	push   eax
c001e1b2:	55                   	push   ebp
c001e1b3:	53                   	push   ebx
c001e1b4:	b3 06                	mov    bl,0x6
c001e1b6:	68 01 b1 02 c0       	push   0xc002b101
c001e1bb:	e8 1b 47 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e1c0:	83 c4 20             	add    esp,0x20
c001e1c3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e1c8:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e1cd:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e1d1:	3c 9d                	cmp    al,0x9d
c001e1d3:	0f 84 d7 02 00 00    	je     c001e4b0 <Vm::faultHandler(regs*)+0x345>
c001e1d9:	0f 87 a3 00 00 00    	ja     c001e282 <Vm::faultHandler(regs*)+0x117>
c001e1df:	3c 66                	cmp    al,0x66
c001e1e1:	0f 84 15 02 00 00    	je     c001e3fc <Vm::faultHandler(regs*)+0x291>
c001e1e7:	77 5f                	ja     c001e248 <Vm::faultHandler(regs*)+0xdd>
c001e1e9:	3c 36                	cmp    al,0x36
c001e1eb:	0f 84 f1 01 00 00    	je     c001e3e2 <Vm::faultHandler(regs*)+0x277>
c001e1f1:	77 28                	ja     c001e21b <Vm::faultHandler(regs*)+0xb0>
c001e1f3:	3c 26                	cmp    al,0x26
c001e1f5:	0f 84 99 01 00 00    	je     c001e394 <Vm::faultHandler(regs*)+0x229>
c001e1fb:	3c 2e                	cmp    al,0x2e
c001e1fd:	0f 85 3b 07 00 00    	jne    c001e93e <Vm::faultHandler(regs*)+0x7d3>
c001e203:	83 ec 0c             	sub    esp,0xc
c001e206:	31 db                	xor    ebx,ebx
c001e208:	68 16 b1 02 c0       	push   0xc002b116
c001e20d:	e8 c9 46 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e212:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e215:	83 c4 10             	add    esp,0x10
c001e218:	45                   	inc    ebp
c001e219:	eb b2                	jmp    c001e1cd <Vm::faultHandler(regs*)+0x62>
c001e21b:	3c 64                	cmp    al,0x64
c001e21d:	0f 84 8b 01 00 00    	je     c001e3ae <Vm::faultHandler(regs*)+0x243>
c001e223:	0f 87 9f 01 00 00    	ja     c001e3c8 <Vm::faultHandler(regs*)+0x25d>
c001e229:	3c 3e                	cmp    al,0x3e
c001e22b:	0f 85 0d 07 00 00    	jne    c001e93e <Vm::faultHandler(regs*)+0x7d3>
c001e231:	83 ec 0c             	sub    esp,0xc
c001e234:	b3 01                	mov    bl,0x1
c001e236:	68 1a b1 02 c0       	push   0xc002b11a
c001e23b:	e8 9b 46 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e240:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e243:	83 c4 10             	add    esp,0x10
c001e246:	eb d0                	jmp    c001e218 <Vm::faultHandler(regs*)+0xad>
c001e248:	3c 6d                	cmp    al,0x6d
c001e24a:	0f 84 af 03 00 00    	je     c001e5ff <Vm::faultHandler(regs*)+0x494>
c001e250:	77 15                	ja     c001e267 <Vm::faultHandler(regs*)+0xfc>
c001e252:	3c 67                	cmp    al,0x67
c001e254:	0f 84 bf 01 00 00    	je     c001e419 <Vm::faultHandler(regs*)+0x2ae>
c001e25a:	3c 6c                	cmp    al,0x6c
c001e25c:	0f 84 3f 03 00 00    	je     c001e5a1 <Vm::faultHandler(regs*)+0x436>
c001e262:	e9 d7 06 00 00       	jmp    c001e93e <Vm::faultHandler(regs*)+0x7d3>
c001e267:	3c 6f                	cmp    al,0x6f
c001e269:	0f 84 a4 04 00 00    	je     c001e713 <Vm::faultHandler(regs*)+0x5a8>
c001e26f:	0f 82 11 04 00 00    	jb     c001e686 <Vm::faultHandler(regs*)+0x51b>
c001e275:	3c 9c                	cmp    al,0x9c
c001e277:	0f 84 ba 01 00 00    	je     c001e437 <Vm::faultHandler(regs*)+0x2cc>
c001e27d:	e9 bc 06 00 00       	jmp    c001e93e <Vm::faultHandler(regs*)+0x7d3>
c001e282:	3c ec                	cmp    al,0xec
c001e284:	0f 84 24 06 00 00    	je     c001e8ae <Vm::faultHandler(regs*)+0x743>
c001e28a:	0f 87 93 00 00 00    	ja     c001e323 <Vm::faultHandler(regs*)+0x1b8>
c001e290:	3c e4                	cmp    al,0xe4
c001e292:	0f 84 5c 05 00 00    	je     c001e7f4 <Vm::faultHandler(regs*)+0x689>
c001e298:	77 6a                	ja     c001e304 <Vm::faultHandler(regs*)+0x199>
c001e29a:	3c cd                	cmp    al,0xcd
c001e29c:	0f 84 7e 02 00 00    	je     c001e520 <Vm::faultHandler(regs*)+0x3b5>
c001e2a2:	3c cf                	cmp    al,0xcf
c001e2a4:	0f 85 94 06 00 00    	jne    c001e93e <Vm::faultHandler(regs*)+0x7d3>
c001e2aa:	83 ec 0c             	sub    esp,0xc
c001e2ad:	68 5e b1 02 c0       	push   0xc002b15e
c001e2b2:	e8 24 46 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e2b7:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001e2ba:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001e2bd:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001e2c1:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001e2c4:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001e2c8:	0d 00 02 02 00       	or     eax,0x20200
c001e2cd:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e2d0:	56                   	push   esi
c001e2d1:	53                   	push   ebx
c001e2d2:	52                   	push   edx
c001e2d3:	68 64 b1 02 c0       	push   0xc002b164
c001e2d8:	e8 fe 45 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e2dd:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001e2e1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e2e7:	66 c1 e8 09          	shr    ax,0x9
c001e2eb:	83 e0 01             	and    eax,0x1
c001e2ee:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e2f1:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e2f4:	83 c0 06             	add    eax,0x6
c001e2f7:	25 ff ff 00 00       	and    eax,0xffff
c001e2fc:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e2ff:	e9 95 02 00 00       	jmp    c001e599 <Vm::faultHandler(regs*)+0x42e>
c001e304:	3c e6                	cmp    al,0xe6
c001e306:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001e30a:	0f 84 4e 05 00 00    	je     c001e85e <Vm::faultHandler(regs*)+0x6f3>
c001e310:	0f 82 0a 05 00 00    	jb     c001e820 <Vm::faultHandler(regs*)+0x6b5>
c001e316:	3c e7                	cmp    al,0xe7
c001e318:	0f 84 69 05 00 00    	je     c001e887 <Vm::faultHandler(regs*)+0x71c>
c001e31e:	e9 1b 06 00 00       	jmp    c001e93e <Vm::faultHandler(regs*)+0x7d3>
c001e323:	3c ef                	cmp    al,0xef
c001e325:	0f 84 e6 05 00 00    	je     c001e911 <Vm::faultHandler(regs*)+0x7a6>
c001e32b:	77 37                	ja     c001e364 <Vm::faultHandler(regs*)+0x1f9>
c001e32d:	3c ed                	cmp    al,0xed
c001e32f:	0f 84 a3 05 00 00    	je     c001e8d8 <Vm::faultHandler(regs*)+0x76d>
c001e335:	3c ee                	cmp    al,0xee
c001e337:	0f 85 01 06 00 00    	jne    c001e93e <Vm::faultHandler(regs*)+0x7d3>
c001e33d:	52                   	push   edx
c001e33e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e341:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e344:	68 ff b1 02 c0       	push   0xc002b1ff
c001e349:	e8 8d 45 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e34e:	59                   	pop    ecx
c001e34f:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e353:	5b                   	pop    ebx
c001e354:	50                   	push   eax
c001e355:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e359:	50                   	push   eax
c001e35a:	e8 2a fa ff ff       	call   c001dd89 <Vm::outbv(unsigned short, unsigned char)>
c001e35f:	e9 a5 05 00 00       	jmp    c001e909 <Vm::faultHandler(regs*)+0x79e>
c001e364:	3c fa                	cmp    al,0xfa
c001e366:	0f 84 f7 01 00 00    	je     c001e563 <Vm::faultHandler(regs*)+0x3f8>
c001e36c:	3c fb                	cmp    al,0xfb
c001e36e:	0f 84 0a 02 00 00    	je     c001e57e <Vm::faultHandler(regs*)+0x413>
c001e374:	3c f3                	cmp    al,0xf3
c001e376:	0f 85 c2 05 00 00    	jne    c001e93e <Vm::faultHandler(regs*)+0x7d3>
c001e37c:	83 ec 0c             	sub    esp,0xc
c001e37f:	68 37 b1 02 c0       	push   0xc002b137
c001e384:	e8 52 45 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e389:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e38c:	83 c4 10             	add    esp,0x10
c001e38f:	e9 84 fe ff ff       	jmp    c001e218 <Vm::faultHandler(regs*)+0xad>
c001e394:	83 ec 0c             	sub    esp,0xc
c001e397:	b3 02                	mov    bl,0x2
c001e399:	68 12 b1 02 c0       	push   0xc002b112
c001e39e:	e8 38 45 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e3a3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e3a6:	83 c4 10             	add    esp,0x10
c001e3a9:	e9 6a fe ff ff       	jmp    c001e218 <Vm::faultHandler(regs*)+0xad>
c001e3ae:	83 ec 0c             	sub    esp,0xc
c001e3b1:	b3 03                	mov    bl,0x3
c001e3b3:	68 1e b1 02 c0       	push   0xc002b11e
c001e3b8:	e8 1e 45 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e3bd:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e3c0:	83 c4 10             	add    esp,0x10
c001e3c3:	e9 50 fe ff ff       	jmp    c001e218 <Vm::faultHandler(regs*)+0xad>
c001e3c8:	83 ec 0c             	sub    esp,0xc
c001e3cb:	b3 04                	mov    bl,0x4
c001e3cd:	68 22 b1 02 c0       	push   0xc002b122
c001e3d2:	e8 04 45 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e3d7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e3da:	83 c4 10             	add    esp,0x10
c001e3dd:	e9 36 fe ff ff       	jmp    c001e218 <Vm::faultHandler(regs*)+0xad>
c001e3e2:	83 ec 0c             	sub    esp,0xc
c001e3e5:	b3 05                	mov    bl,0x5
c001e3e7:	68 26 b1 02 c0       	push   0xc002b126
c001e3ec:	e8 ea 44 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e3f1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e3f4:	83 c4 10             	add    esp,0x10
c001e3f7:	e9 1c fe ff ff       	jmp    c001e218 <Vm::faultHandler(regs*)+0xad>
c001e3fc:	83 ec 0c             	sub    esp,0xc
c001e3ff:	68 2a b1 02 c0       	push   0xc002b12a
c001e404:	e8 d2 44 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e409:	83 c4 10             	add    esp,0x10
c001e40c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e40f:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e414:	e9 ff fd ff ff       	jmp    c001e218 <Vm::faultHandler(regs*)+0xad>
c001e419:	50                   	push   eax
c001e41a:	50                   	push   eax
c001e41b:	6a 01                	push   0x1
c001e41d:	68 2f b1 02 c0       	push   0xc002b12f
c001e422:	e8 b4 44 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e427:	83 c4 10             	add    esp,0x10
c001e42a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e42d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001e432:	e9 e1 fd ff ff       	jmp    c001e218 <Vm::faultHandler(regs*)+0xad>
c001e437:	83 ec 0c             	sub    esp,0xc
c001e43a:	68 3d b1 02 c0       	push   0xc002b13d
c001e43f:	e8 97 44 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e444:	83 c4 10             	add    esp,0x10
c001e447:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e44a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e44f:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e452:	74 2f                	je     c001e483 <Vm::faultHandler(regs*)+0x318>
c001e454:	83 ea 04             	sub    edx,0x4
c001e457:	25 ff 0d 00 00       	and    eax,0xdff
c001e45c:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e462:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e468:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e46e:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e472:	0f 84 bf 04 00 00    	je     c001e937 <Vm::faultHandler(regs*)+0x7cc>
c001e478:	80 cc 02             	or     ah,0x2
c001e47b:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e47e:	e9 b4 04 00 00       	jmp    c001e937 <Vm::faultHandler(regs*)+0x7cc>
c001e483:	83 ea 02             	sub    edx,0x2
c001e486:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e48c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e48f:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e493:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e499:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e49d:	74 05                	je     c001e4a4 <Vm::faultHandler(regs*)+0x339>
c001e49f:	80 cc 02             	or     ah,0x2
c001e4a2:	eb 03                	jmp    c001e4a7 <Vm::faultHandler(regs*)+0x33c>
c001e4a4:	80 e4 fd             	and    ah,0xfd
c001e4a7:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e4ab:	e9 87 04 00 00       	jmp    c001e937 <Vm::faultHandler(regs*)+0x7cc>
c001e4b0:	83 ec 0c             	sub    esp,0xc
c001e4b3:	68 44 b1 02 c0       	push   0xc002b144
c001e4b8:	e8 1e 44 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e4bd:	83 c4 10             	add    esp,0x10
c001e4c0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e4c5:	74 28                	je     c001e4ef <Vm::faultHandler(regs*)+0x384>
c001e4c7:	8b 06                	mov    eax,DWORD PTR [esi]
c001e4c9:	25 ff 0d 00 00       	and    eax,0xdff
c001e4ce:	0d 00 02 02 00       	or     eax,0x20200
c001e4d3:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e4d6:	8b 06                	mov    eax,DWORD PTR [esi]
c001e4d8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e4de:	c1 e8 09             	shr    eax,0x9
c001e4e1:	83 e0 01             	and    eax,0x1
c001e4e4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e4e7:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e4ea:	83 c0 04             	add    eax,0x4
c001e4ed:	eb 24                	jmp    c001e513 <Vm::faultHandler(regs*)+0x3a8>
c001e4ef:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e4f2:	0d 00 02 02 00       	or     eax,0x20200
c001e4f7:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e4fa:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e4fd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e503:	66 c1 e8 09          	shr    ax,0x9
c001e507:	83 e0 01             	and    eax,0x1
c001e50a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e50d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e510:	83 c0 02             	add    eax,0x2
c001e513:	25 ff ff 00 00       	and    eax,0xffff
c001e518:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e51b:	e9 17 04 00 00       	jmp    c001e937 <Vm::faultHandler(regs*)+0x7cc>
c001e520:	53                   	push   ebx
c001e521:	53                   	push   ebx
c001e522:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e526:	50                   	push   eax
c001e527:	68 4a b1 02 c0       	push   0xc002b14a
c001e52c:	e8 aa 43 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e531:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e535:	83 c4 10             	add    esp,0x10
c001e538:	3c ee                	cmp    al,0xee
c001e53a:	75 10                	jne    c001e54c <Vm::faultHandler(regs*)+0x3e1>
c001e53c:	83 ec 0c             	sub    esp,0xc
c001e53f:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e542:	e8 fa f8 ff ff       	call   c001de41 <Vm::mainloop3(unsigned long)>
c001e547:	e9 c0 03 00 00       	jmp    c001e90c <Vm::faultHandler(regs*)+0x7a1>
c001e54c:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e550:	83 ec 0c             	sub    esp,0xc
c001e553:	53                   	push   ebx
c001e554:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e558:	53                   	push   ebx
c001e559:	55                   	push   ebp
c001e55a:	50                   	push   eax
c001e55b:	57                   	push   edi
c001e55c:	e8 0c fb ff ff       	call   c001e06d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e561:	eb 36                	jmp    c001e599 <Vm::faultHandler(regs*)+0x42e>
c001e563:	83 ec 0c             	sub    esp,0xc
c001e566:	68 54 b1 02 c0       	push   0xc002b154
c001e56b:	e8 6b 43 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e570:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e575:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e579:	e9 8b 03 00 00       	jmp    c001e909 <Vm::faultHandler(regs*)+0x79e>
c001e57e:	83 ec 0c             	sub    esp,0xc
c001e581:	68 59 b1 02 c0       	push   0xc002b159
c001e586:	e8 50 43 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e58b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e590:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e594:	e9 70 03 00 00       	jmp    c001e909 <Vm::faultHandler(regs*)+0x79e>
c001e599:	83 c4 20             	add    esp,0x20
c001e59c:	e9 99 03 00 00       	jmp    c001e93a <Vm::faultHandler(regs*)+0x7cf>
c001e5a1:	83 ec 0c             	sub    esp,0xc
c001e5a4:	68 97 b1 02 c0       	push   0xc002b197
c001e5a9:	e8 2d 43 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e5ae:	83 c4 10             	add    esp,0x10
c001e5b1:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e5b4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e5b9:	74 0d                	je     c001e5c8 <Vm::faultHandler(regs*)+0x45d>
c001e5bb:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e5c2:	0f 87 9e 01 00 00    	ja     c001e766 <Vm::faultHandler(regs*)+0x5fb>
c001e5c8:	83 ec 0c             	sub    esp,0xc
c001e5cb:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e5cf:	0f b7 db             	movzx  ebx,bx
c001e5d2:	50                   	push   eax
c001e5d3:	e8 9e f7 ff ff       	call   c001dd76 <Vm::inbv(unsigned short)>
c001e5d8:	83 c4 0c             	add    esp,0xc
c001e5db:	0f b6 c0             	movzx  eax,al
c001e5de:	50                   	push   eax
c001e5df:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e5e3:	50                   	push   eax
c001e5e4:	53                   	push   ebx
c001e5e5:	e8 41 fb ff ff       	call   c001e12b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e5ea:	83 c4 10             	add    esp,0x10
c001e5ed:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e5f0:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e5f4:	74 03                	je     c001e5f9 <Vm::faultHandler(regs*)+0x48e>
c001e5f6:	48                   	dec    eax
c001e5f7:	eb 01                	jmp    c001e5fa <Vm::faultHandler(regs*)+0x48f>
c001e5f9:	40                   	inc    eax
c001e5fa:	0f b7 c0             	movzx  eax,ax
c001e5fd:	eb 7f                	jmp    c001e67e <Vm::faultHandler(regs*)+0x513>
c001e5ff:	83 ec 0c             	sub    esp,0xc
c001e602:	68 c9 b1 02 c0       	push   0xc002b1c9
c001e607:	e8 cf 42 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e60c:	83 c4 10             	add    esp,0x10
c001e60f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e612:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e617:	74 0d                	je     c001e626 <Vm::faultHandler(regs*)+0x4bb>
c001e619:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e620:	0f 87 40 01 00 00    	ja     c001e766 <Vm::faultHandler(regs*)+0x5fb>
c001e626:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e629:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e62d:	0f b7 db             	movzx  ebx,bx
c001e630:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e635:	74 20                	je     c001e657 <Vm::faultHandler(regs*)+0x4ec>
c001e637:	ed                   	in     eax,dx
c001e638:	51                   	push   ecx
c001e639:	50                   	push   eax
c001e63a:	56                   	push   esi
c001e63b:	53                   	push   ebx
c001e63c:	e8 15 fb ff ff       	call   c001e156 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e641:	83 c4 10             	add    esp,0x10
c001e644:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e647:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e64b:	74 05                	je     c001e652 <Vm::faultHandler(regs*)+0x4e7>
c001e64d:	83 e8 04             	sub    eax,0x4
c001e650:	eb 27                	jmp    c001e679 <Vm::faultHandler(regs*)+0x50e>
c001e652:	83 c0 04             	add    eax,0x4
c001e655:	eb 22                	jmp    c001e679 <Vm::faultHandler(regs*)+0x50e>
c001e657:	66 ed                	in     ax,dx
c001e659:	0f b7 c0             	movzx  eax,ax
c001e65c:	52                   	push   edx
c001e65d:	50                   	push   eax
c001e65e:	56                   	push   esi
c001e65f:	53                   	push   ebx
c001e660:	e8 db fa ff ff       	call   c001e140 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e665:	83 c4 10             	add    esp,0x10
c001e668:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e66b:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e66f:	74 05                	je     c001e676 <Vm::faultHandler(regs*)+0x50b>
c001e671:	83 e8 02             	sub    eax,0x2
c001e674:	eb 03                	jmp    c001e679 <Vm::faultHandler(regs*)+0x50e>
c001e676:	83 c0 02             	add    eax,0x2
c001e679:	25 ff ff 00 00       	and    eax,0xffff
c001e67e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e681:	e9 b1 02 00 00       	jmp    c001e937 <Vm::faultHandler(regs*)+0x7cc>
c001e686:	83 ec 0c             	sub    esp,0xc
c001e689:	4b                   	dec    ebx
c001e68a:	68 cf b1 02 c0       	push   0xc002b1cf
c001e68f:	e8 47 42 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e694:	83 c4 10             	add    esp,0x10
c001e697:	80 fb 05             	cmp    bl,0x5
c001e69a:	77 0a                	ja     c001e6a6 <Vm::faultHandler(regs*)+0x53b>
c001e69c:	0f b6 db             	movzx  ebx,bl
c001e69f:	ff 24 9d 40 b2 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd4dc0]
c001e6a6:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e6aa:	eb 1b                	jmp    c001e6c7 <Vm::faultHandler(regs*)+0x55c>
c001e6ac:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e6b0:	eb 15                	jmp    c001e6c7 <Vm::faultHandler(regs*)+0x55c>
c001e6b2:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e6b6:	eb 0f                	jmp    c001e6c7 <Vm::faultHandler(regs*)+0x55c>
c001e6b8:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e6bc:	eb 09                	jmp    c001e6c7 <Vm::faultHandler(regs*)+0x55c>
c001e6be:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e6c1:	eb 04                	jmp    c001e6c7 <Vm::faultHandler(regs*)+0x55c>
c001e6c3:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e6c7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e6cc:	74 0d                	je     c001e6db <Vm::faultHandler(regs*)+0x570>
c001e6ce:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001e6d5:	0f 87 8b 00 00 00    	ja     c001e766 <Vm::faultHandler(regs*)+0x5fb>
c001e6db:	53                   	push   ebx
c001e6dc:	53                   	push   ebx
c001e6dd:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001e6e1:	52                   	push   edx
c001e6e2:	50                   	push   eax
c001e6e3:	e8 0f fa ff ff       	call   c001e0f7 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001e6e8:	5e                   	pop    esi
c001e6e9:	0f b6 c0             	movzx  eax,al
c001e6ec:	5d                   	pop    ebp
c001e6ed:	50                   	push   eax
c001e6ee:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e6f2:	50                   	push   eax
c001e6f3:	e8 91 f6 ff ff       	call   c001dd89 <Vm::outbv(unsigned short, unsigned char)>
c001e6f8:	83 c4 10             	add    esp,0x10
c001e6fb:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001e6fe:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e702:	74 03                	je     c001e707 <Vm::faultHandler(regs*)+0x59c>
c001e704:	48                   	dec    eax
c001e705:	eb 01                	jmp    c001e708 <Vm::faultHandler(regs*)+0x59d>
c001e707:	40                   	inc    eax
c001e708:	0f b7 c0             	movzx  eax,ax
c001e70b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001e70e:	e9 24 02 00 00       	jmp    c001e937 <Vm::faultHandler(regs*)+0x7cc>
c001e713:	83 ec 0c             	sub    esp,0xc
c001e716:	4b                   	dec    ebx
c001e717:	68 cf b1 02 c0       	push   0xc002b1cf
c001e71c:	e8 ba 41 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e721:	83 c4 10             	add    esp,0x10
c001e724:	80 fb 05             	cmp    bl,0x5
c001e727:	77 0a                	ja     c001e733 <Vm::faultHandler(regs*)+0x5c8>
c001e729:	0f b6 db             	movzx  ebx,bl
c001e72c:	ff 24 9d 58 b2 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd4da8]
c001e733:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e737:	eb 1b                	jmp    c001e754 <Vm::faultHandler(regs*)+0x5e9>
c001e739:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e73d:	eb 15                	jmp    c001e754 <Vm::faultHandler(regs*)+0x5e9>
c001e73f:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e743:	eb 0f                	jmp    c001e754 <Vm::faultHandler(regs*)+0x5e9>
c001e745:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e749:	eb 09                	jmp    c001e754 <Vm::faultHandler(regs*)+0x5e9>
c001e74b:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e74e:	eb 04                	jmp    c001e754 <Vm::faultHandler(regs*)+0x5e9>
c001e750:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e754:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001e757:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e75c:	74 39                	je     c001e797 <Vm::faultHandler(regs*)+0x62c>
c001e75e:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001e764:	76 31                	jbe    c001e797 <Vm::faultHandler(regs*)+0x62c>
c001e766:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e76a:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e76e:	51                   	push   ecx
c001e76f:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e773:	51                   	push   ecx
c001e774:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e778:	51                   	push   ecx
c001e779:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e77d:	51                   	push   ecx
c001e77e:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e782:	52                   	push   edx
c001e783:	50                   	push   eax
c001e784:	50                   	push   eax
c001e785:	68 9c b1 02 c0       	push   0xc002b19c
c001e78a:	e8 4c 41 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e78f:	83 c4 20             	add    esp,0x20
c001e792:	e9 fb 01 00 00       	jmp    c001e992 <Vm::faultHandler(regs*)+0x827>
c001e797:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001e79a:	0f b7 d3             	movzx  edx,bx
c001e79d:	81 e6 00 04 00 00    	and    esi,0x400
c001e7a3:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001e7a6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e7ab:	74 1d                	je     c001e7ca <Vm::faultHandler(regs*)+0x65f>
c001e7ad:	51                   	push   ecx
c001e7ae:	51                   	push   ecx
c001e7af:	52                   	push   edx
c001e7b0:	50                   	push   eax
c001e7b1:	e8 64 f9 ff ff       	call   c001e11a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001e7b6:	83 c4 10             	add    esp,0x10
c001e7b9:	89 ea                	mov    edx,ebp
c001e7bb:	ef                   	out    dx,eax
c001e7bc:	85 f6                	test   esi,esi
c001e7be:	74 05                	je     c001e7c5 <Vm::faultHandler(regs*)+0x65a>
c001e7c0:	83 eb 04             	sub    ebx,0x4
c001e7c3:	eb 21                	jmp    c001e7e6 <Vm::faultHandler(regs*)+0x67b>
c001e7c5:	83 c3 04             	add    ebx,0x4
c001e7c8:	eb 1c                	jmp    c001e7e6 <Vm::faultHandler(regs*)+0x67b>
c001e7ca:	51                   	push   ecx
c001e7cb:	51                   	push   ecx
c001e7cc:	52                   	push   edx
c001e7cd:	50                   	push   eax
c001e7ce:	e8 35 f9 ff ff       	call   c001e108 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001e7d3:	83 c4 10             	add    esp,0x10
c001e7d6:	89 ea                	mov    edx,ebp
c001e7d8:	66 ef                	out    dx,ax
c001e7da:	85 f6                	test   esi,esi
c001e7dc:	74 05                	je     c001e7e3 <Vm::faultHandler(regs*)+0x678>
c001e7de:	83 eb 02             	sub    ebx,0x2
c001e7e1:	eb 03                	jmp    c001e7e6 <Vm::faultHandler(regs*)+0x67b>
c001e7e3:	83 c3 02             	add    ebx,0x2
c001e7e6:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001e7ec:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001e7ef:	e9 43 01 00 00       	jmp    c001e937 <Vm::faultHandler(regs*)+0x7cc>
c001e7f4:	53                   	push   ebx
c001e7f5:	53                   	push   ebx
c001e7f6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e7fa:	50                   	push   eax
c001e7fb:	68 d5 b1 02 c0       	push   0xc002b1d5
c001e800:	e8 d6 40 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e805:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e80c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e810:	89 04 24             	mov    DWORD PTR [esp],eax
c001e813:	e8 5e f5 ff ff       	call   c001dd76 <Vm::inbv(unsigned short)>
c001e818:	0f b6 c0             	movzx  eax,al
c001e81b:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e81e:	eb 5e                	jmp    c001e87e <Vm::faultHandler(regs*)+0x713>
c001e820:	51                   	push   ecx
c001e821:	51                   	push   ecx
c001e822:	53                   	push   ebx
c001e823:	68 db b1 02 c0       	push   0xc002b1db
c001e828:	e8 ae 40 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e82d:	83 c4 10             	add    esp,0x10
c001e830:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e835:	74 07                	je     c001e83e <Vm::faultHandler(regs*)+0x6d3>
c001e837:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e83b:	ed                   	in     eax,dx
c001e83c:	eb 14                	jmp    c001e852 <Vm::faultHandler(regs*)+0x6e7>
c001e83e:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001e841:	66 31 db             	xor    bx,bx
c001e844:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001e847:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e84b:	66 ed                	in     ax,dx
c001e84d:	0f b7 c0             	movzx  eax,ax
c001e850:	09 d8                	or     eax,ebx
c001e852:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e855:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e859:	e9 dc 00 00 00       	jmp    c001e93a <Vm::faultHandler(regs*)+0x7cf>
c001e85e:	50                   	push   eax
c001e85f:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e862:	53                   	push   ebx
c001e863:	68 e1 b1 02 c0       	push   0xc002b1e1
c001e868:	e8 6e 40 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e86d:	58                   	pop    eax
c001e86e:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e872:	5a                   	pop    edx
c001e873:	50                   	push   eax
c001e874:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e878:	50                   	push   eax
c001e879:	e8 0b f5 ff ff       	call   c001dd89 <Vm::outbv(unsigned short, unsigned char)>
c001e87e:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e882:	e9 85 00 00 00       	jmp    c001e90c <Vm::faultHandler(regs*)+0x7a1>
c001e887:	50                   	push   eax
c001e888:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e88b:	53                   	push   ebx
c001e88c:	68 ea b1 02 c0       	push   0xc002b1ea
c001e891:	e8 45 40 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e896:	83 c4 10             	add    esp,0x10
c001e899:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e89d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e8a2:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e8a5:	74 03                	je     c001e8aa <Vm::faultHandler(regs*)+0x73f>
c001e8a7:	ef                   	out    dx,eax
c001e8a8:	eb ab                	jmp    c001e855 <Vm::faultHandler(regs*)+0x6ea>
c001e8aa:	66 ef                	out    dx,ax
c001e8ac:	eb a7                	jmp    c001e855 <Vm::faultHandler(regs*)+0x6ea>
c001e8ae:	55                   	push   ebp
c001e8af:	55                   	push   ebp
c001e8b0:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e8b3:	68 f3 b1 02 c0       	push   0xc002b1f3
c001e8b8:	e8 1e 40 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e8bd:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e8c4:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e8c8:	89 04 24             	mov    DWORD PTR [esp],eax
c001e8cb:	e8 a6 f4 ff ff       	call   c001dd76 <Vm::inbv(unsigned short)>
c001e8d0:	0f b6 c0             	movzx  eax,al
c001e8d3:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e8d6:	eb 31                	jmp    c001e909 <Vm::faultHandler(regs*)+0x79e>
c001e8d8:	56                   	push   esi
c001e8d9:	56                   	push   esi
c001e8da:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e8dd:	68 f9 b1 02 c0       	push   0xc002b1f9
c001e8e2:	e8 f4 3f ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e8e7:	83 c4 10             	add    esp,0x10
c001e8ea:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e8ed:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e8f2:	74 03                	je     c001e8f7 <Vm::faultHandler(regs*)+0x78c>
c001e8f4:	ed                   	in     eax,dx
c001e8f5:	eb 0d                	jmp    c001e904 <Vm::faultHandler(regs*)+0x799>
c001e8f7:	66 ed                	in     ax,dx
c001e8f9:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001e8fc:	0f b7 c0             	movzx  eax,ax
c001e8ff:	66 31 d2             	xor    dx,dx
c001e902:	09 d0                	or     eax,edx
c001e904:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e907:	eb 2e                	jmp    c001e937 <Vm::faultHandler(regs*)+0x7cc>
c001e909:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e90c:	83 c4 10             	add    esp,0x10
c001e90f:	eb 29                	jmp    c001e93a <Vm::faultHandler(regs*)+0x7cf>
c001e911:	50                   	push   eax
c001e912:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e915:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e918:	68 08 b2 02 c0       	push   0xc002b208
c001e91d:	e8 b9 3f ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e922:	83 c4 10             	add    esp,0x10
c001e925:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e928:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e92d:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e930:	74 03                	je     c001e935 <Vm::faultHandler(regs*)+0x7ca>
c001e932:	ef                   	out    dx,eax
c001e933:	eb 02                	jmp    c001e937 <Vm::faultHandler(regs*)+0x7cc>
c001e935:	66 ef                	out    dx,ax
c001e937:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e93a:	b0 01                	mov    al,0x1
c001e93c:	eb 56                	jmp    c001e994 <Vm::faultHandler(regs*)+0x829>
c001e93e:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e942:	51                   	push   ecx
c001e943:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e947:	51                   	push   ecx
c001e948:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e94c:	51                   	push   ecx
c001e94d:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e951:	51                   	push   ecx
c001e952:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e956:	52                   	push   edx
c001e957:	50                   	push   eax
c001e958:	50                   	push   eax
c001e959:	68 11 b2 02 c0       	push   0xc002b211
c001e95e:	e8 78 3f ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001e963:	83 c4 20             	add    esp,0x20
c001e966:	83 ec 0c             	sub    esp,0xc
c001e969:	6a 60                	push   0x60
c001e96b:	e8 06 f4 ff ff       	call   c001dd76 <Vm::inbv(unsigned short)>
c001e970:	83 c4 10             	add    esp,0x10
c001e973:	3c 1c                	cmp    al,0x1c
c001e975:	74 04                	je     c001e97b <Vm::faultHandler(regs*)+0x810>
c001e977:	3c 5a                	cmp    al,0x5a
c001e979:	75 eb                	jne    c001e966 <Vm::faultHandler(regs*)+0x7fb>
c001e97b:	3c 1c                	cmp    al,0x1c
c001e97d:	74 04                	je     c001e983 <Vm::faultHandler(regs*)+0x818>
c001e97f:	3c 5a                	cmp    al,0x5a
c001e981:	75 0f                	jne    c001e992 <Vm::faultHandler(regs*)+0x827>
c001e983:	83 ec 0c             	sub    esp,0xc
c001e986:	6a 60                	push   0x60
c001e988:	e8 e9 f3 ff ff       	call   c001dd76 <Vm::inbv(unsigned short)>
c001e98d:	83 c4 10             	add    esp,0x10
c001e990:	eb e9                	jmp    c001e97b <Vm::faultHandler(regs*)+0x810>
c001e992:	31 c0                	xor    eax,eax
c001e994:	83 c4 1c             	add    esp,0x1c
c001e997:	5b                   	pop    ebx
c001e998:	5e                   	pop    esi
c001e999:	5f                   	pop    edi
c001e99a:	5d                   	pop    ebp
c001e99b:	c3                   	ret    

c001e99c <Vm::fpuInternalTo32(unsigned long long)>:
c001e99c:	57                   	push   edi
c001e99d:	56                   	push   esi
c001e99e:	53                   	push   ebx
c001e99f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e9a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a7:	89 d6                	mov    esi,edx
c001e9a9:	89 d7                	mov    edi,edx
c001e9ab:	89 c1                	mov    ecx,eax
c001e9ad:	c1 ef 14             	shr    edi,0x14
c001e9b0:	89 d3                	mov    ebx,edx
c001e9b2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001e9b8:	31 d2                	xor    edx,edx
c001e9ba:	89 f8                	mov    eax,edi
c001e9bc:	81 e6 00 00 00 80    	and    esi,0x80000000
c001e9c2:	bf ff 00 00 00       	mov    edi,0xff
c001e9c7:	05 80 fc ff ff       	add    eax,0xfffffc80
c001e9cc:	83 d2 ff             	adc    edx,0xffffffff
c001e9cf:	39 c7                	cmp    edi,eax
c001e9d1:	bf 00 00 00 00       	mov    edi,0x0
c001e9d6:	19 d7                	sbb    edi,edx
c001e9d8:	72 15                	jb     c001e9ef <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001e9da:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001e9de:	c1 e0 17             	shl    eax,0x17
c001e9e1:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001e9e7:	09 f1                	or     ecx,esi
c001e9e9:	09 c1                	or     ecx,eax
c001e9eb:	89 cf                	mov    edi,ecx
c001e9ed:	eb 02                	jmp    c001e9f1 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001e9ef:	31 ff                	xor    edi,edi
c001e9f1:	89 f8                	mov    eax,edi
c001e9f3:	5b                   	pop    ebx
c001e9f4:	5e                   	pop    esi
c001e9f5:	5f                   	pop    edi
c001e9f6:	c3                   	ret    

c001e9f7 <Vm::fpuInternalTo64(unsigned long long)>:
c001e9f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9fb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e9ff:	c3                   	ret    

c001ea00 <Vm::fpu32ToInternal(unsigned int)>:
c001ea00:	57                   	push   edi
c001ea01:	31 ff                	xor    edi,edi
c001ea03:	56                   	push   esi
c001ea04:	53                   	push   ebx
c001ea05:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea09:	89 cb                	mov    ebx,ecx
c001ea0b:	89 ce                	mov    esi,ecx
c001ea0d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ea13:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ea19:	c1 e9 17             	shr    ecx,0x17
c001ea1c:	89 f0                	mov    eax,esi
c001ea1e:	0f b6 d1             	movzx  edx,cl
c001ea21:	81 c2 80 03 00 00    	add    edx,0x380
c001ea27:	89 d1                	mov    ecx,edx
c001ea29:	89 fa                	mov    edx,edi
c001ea2b:	c1 e1 14             	shl    ecx,0x14
c001ea2e:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ea32:	c1 e0 1d             	shl    eax,0x1d
c001ea35:	89 d7                	mov    edi,edx
c001ea37:	89 c6                	mov    esi,eax
c001ea39:	89 ca                	mov    edx,ecx
c001ea3b:	89 f0                	mov    eax,esi
c001ea3d:	09 fa                	or     edx,edi
c001ea3f:	09 da                	or     edx,ebx
c001ea41:	5b                   	pop    ebx
c001ea42:	5e                   	pop    esi
c001ea43:	5f                   	pop    edi
c001ea44:	c3                   	ret    

c001ea45 <Vm::fpu64ToInternal(unsigned long long)>:
c001ea45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea49:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ea4d:	c3                   	ret    

c001ea4e <Vm::fpuFloatToLong(unsigned long long)>:
c001ea4e:	57                   	push   edi
c001ea4f:	31 c0                	xor    eax,eax
c001ea51:	56                   	push   esi
c001ea52:	31 d2                	xor    edx,edx
c001ea54:	53                   	push   ebx
c001ea55:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ea5d:	89 d9                	mov    ecx,ebx
c001ea5f:	c1 e9 14             	shr    ecx,0x14
c001ea62:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ea68:	89 cf                	mov    edi,ecx
c001ea6a:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001ea70:	78 33                	js     c001eaa5 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ea72:	89 d9                	mov    ecx,ebx
c001ea74:	89 f0                	mov    eax,esi
c001ea76:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ea7c:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ea82:	89 ca                	mov    edx,ecx
c001ea84:	b9 34 00 00 00       	mov    ecx,0x34
c001ea89:	29 f9                	sub    ecx,edi
c001ea8b:	0f ad d0             	shrd   eax,edx,cl
c001ea8e:	d3 fa                	sar    edx,cl
c001ea90:	f6 c1 20             	test   cl,0x20
c001ea93:	74 05                	je     c001ea9a <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001ea95:	89 d0                	mov    eax,edx
c001ea97:	c1 fa 1f             	sar    edx,0x1f
c001ea9a:	85 db                	test   ebx,ebx
c001ea9c:	79 07                	jns    c001eaa5 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ea9e:	f7 d8                	neg    eax
c001eaa0:	83 d2 00             	adc    edx,0x0
c001eaa3:	f7 da                	neg    edx
c001eaa5:	5b                   	pop    ebx
c001eaa6:	5e                   	pop    esi
c001eaa7:	5f                   	pop    edi
c001eaa8:	c3                   	ret    

c001eaa9 <Vm::fpuULongToFloat(unsigned long long)>:
c001eaa9:	57                   	push   edi
c001eaaa:	31 c9                	xor    ecx,ecx
c001eaac:	56                   	push   esi
c001eaad:	53                   	push   ebx
c001eaae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eab2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001eab6:	0f ba e7 14          	bt     edi,0x14
c001eaba:	72 07                	jb     c001eac3 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001eabc:	01 f6                	add    esi,esi
c001eabe:	11 ff                	adc    edi,edi
c001eac0:	41                   	inc    ecx
c001eac1:	eb f3                	jmp    c001eab6 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001eac3:	89 fa                	mov    edx,edi
c001eac5:	89 f0                	mov    eax,esi
c001eac7:	bb 33 04 00 00       	mov    ebx,0x433
c001eacc:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001ead2:	29 cb                	sub    ebx,ecx
c001ead4:	89 d9                	mov    ecx,ebx
c001ead6:	5b                   	pop    ebx
c001ead7:	c1 e1 14             	shl    ecx,0x14
c001eada:	5e                   	pop    esi
c001eadb:	09 ca                	or     edx,ecx
c001eadd:	5f                   	pop    edi
c001eade:	c3                   	ret    

c001eadf <Vm::fpuLongToFloat(long long)>:
c001eadf:	56                   	push   esi
c001eae0:	31 c0                	xor    eax,eax
c001eae2:	53                   	push   ebx
c001eae3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eae7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eaeb:	39 c8                	cmp    eax,ecx
c001eaed:	19 d8                	sbb    eax,ebx
c001eaef:	7d 04                	jge    c001eaf5 <Vm::fpuLongToFloat(long long)+0x16>
c001eaf1:	31 f6                	xor    esi,esi
c001eaf3:	eb 0c                	jmp    c001eb01 <Vm::fpuLongToFloat(long long)+0x22>
c001eaf5:	f7 d9                	neg    ecx
c001eaf7:	be 01 00 00 00       	mov    esi,0x1
c001eafc:	83 d3 00             	adc    ebx,0x0
c001eaff:	f7 db                	neg    ebx
c001eb01:	31 c0                	xor    eax,eax
c001eb03:	0f ba e3 14          	bt     ebx,0x14
c001eb07:	72 07                	jb     c001eb10 <Vm::fpuLongToFloat(long long)+0x31>
c001eb09:	01 c9                	add    ecx,ecx
c001eb0b:	11 db                	adc    ebx,ebx
c001eb0d:	40                   	inc    eax
c001eb0e:	eb f3                	jmp    c001eb03 <Vm::fpuLongToFloat(long long)+0x24>
c001eb10:	ba 33 04 00 00       	mov    edx,0x433
c001eb15:	29 c2                	sub    edx,eax
c001eb17:	89 c8                	mov    eax,ecx
c001eb19:	c1 e2 14             	shl    edx,0x14
c001eb1c:	89 d9                	mov    ecx,ebx
c001eb1e:	89 f3                	mov    ebx,esi
c001eb20:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001eb26:	09 ca                	or     edx,ecx
c001eb28:	84 db                	test   bl,bl
c001eb2a:	74 06                	je     c001eb32 <Vm::fpuLongToFloat(long long)+0x53>
c001eb2c:	81 ca 00 00 00 80    	or     edx,0x80000000
c001eb32:	5b                   	pop    ebx
c001eb33:	5e                   	pop    esi
c001eb34:	c3                   	ret    

c001eb35 <Vm::fpuGet0()>:
c001eb35:	31 c0                	xor    eax,eax
c001eb37:	31 d2                	xor    edx,edx
c001eb39:	c3                   	ret    

c001eb3a <Vm::fpuGet1()>:
c001eb3a:	b8 01 00 00 00       	mov    eax,0x1
c001eb3f:	31 d2                	xor    edx,edx
c001eb41:	c3                   	ret    

c001eb42 <Vm::fpuGetPi()>:
c001eb42:	b8 03 00 00 00       	mov    eax,0x3
c001eb47:	31 d2                	xor    edx,edx
c001eb49:	c3                   	ret    

c001eb4a <Vm::fpuGetLog2E()>:
c001eb4a:	83 ec 18             	sub    esp,0x18
c001eb4d:	68 70 b2 02 c0       	push   0xc002b270
c001eb52:	e8 54 b0 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001eb57:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001eb5c:	31 d2                	xor    edx,edx
c001eb5e:	83 c4 1c             	add    esp,0x1c
c001eb61:	c3                   	ret    

c001eb62 <Vm::fpuGetLogE2()>:
c001eb62:	83 ec 18             	sub    esp,0x18
c001eb65:	68 7c b2 02 c0       	push   0xc002b27c
c001eb6a:	e8 3c b0 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001eb6f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001eb74:	31 d2                	xor    edx,edx
c001eb76:	83 c4 1c             	add    esp,0x1c
c001eb79:	c3                   	ret    

c001eb7a <Vm::fpuGetLog210()>:
c001eb7a:	83 ec 18             	sub    esp,0x18
c001eb7d:	68 88 b2 02 c0       	push   0xc002b288
c001eb82:	e8 24 b0 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001eb87:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001eb8c:	31 d2                	xor    edx,edx
c001eb8e:	83 c4 1c             	add    esp,0x1c
c001eb91:	c3                   	ret    

c001eb92 <Vm::fpuGetLog102()>:
c001eb92:	83 ec 18             	sub    esp,0x18
c001eb95:	68 95 b2 02 c0       	push   0xc002b295
c001eb9a:	e8 0c b0 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001eb9f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001eba4:	31 d2                	xor    edx,edx
c001eba6:	83 c4 1c             	add    esp,0x1c
c001eba9:	c3                   	ret    

c001ebaa <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001ebaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ebae:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ebb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ebb6:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001ebba:	0f 92 c0             	setb   al
c001ebbd:	c3                   	ret    

c001ebbe <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001ebbe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ebc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc6:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001ebca:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001ebce:	09 c2                	or     edx,eax
c001ebd0:	0f 94 c0             	sete   al
c001ebd3:	c3                   	ret    

c001ebd4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001ebd4:	57                   	push   edi
c001ebd5:	56                   	push   esi
c001ebd6:	53                   	push   ebx
c001ebd7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ebdb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ebdf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ebe3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ebe7:	57                   	push   edi
c001ebe8:	56                   	push   esi
c001ebe9:	53                   	push   ebx
c001ebea:	51                   	push   ecx
c001ebeb:	e8 ce ff ff ff       	call   c001ebbe <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001ebf0:	83 c4 10             	add    esp,0x10
c001ebf3:	88 c2                	mov    dl,al
c001ebf5:	31 c0                	xor    eax,eax
c001ebf7:	84 d2                	test   dl,dl
c001ebf9:	75 0c                	jne    c001ec07 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001ebfb:	57                   	push   edi
c001ebfc:	56                   	push   esi
c001ebfd:	53                   	push   ebx
c001ebfe:	51                   	push   ecx
c001ebff:	e8 a6 ff ff ff       	call   c001ebaa <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001ec04:	83 c4 10             	add    esp,0x10
c001ec07:	83 e0 01             	and    eax,0x1
c001ec0a:	5b                   	pop    ebx
c001ec0b:	88 c1                	mov    cl,al
c001ec0d:	83 e2 01             	and    edx,0x1
c001ec10:	a0 81 e4 02 c0       	mov    al,ds:0xc002e481
c001ec15:	c1 e2 06             	shl    edx,0x6
c001ec18:	83 e0 ba             	and    eax,0xffffffba
c001ec1b:	5e                   	pop    esi
c001ec1c:	09 c8                	or     eax,ecx
c001ec1e:	5f                   	pop    edi
c001ec1f:	09 d0                	or     eax,edx
c001ec21:	a2 81 e4 02 c0       	mov    ds:0xc002e481,al
c001ec26:	c3                   	ret    

c001ec27 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001ec27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ec2f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ec33:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001ec37:	c3                   	ret    

c001ec38 <Vm::fpuAbs(unsigned long long)>:
c001ec38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ec40:	c3                   	ret    

c001ec41 <Vm::fpuChs(unsigned long long)>:
c001ec41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec45:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ec49:	f7 d8                	neg    eax
c001ec4b:	83 d2 00             	adc    edx,0x0
c001ec4e:	f7 da                	neg    edx
c001ec50:	c3                   	ret    

c001ec51 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001ec51:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001ec55:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001ec5a:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001ec5e:	eb c7                	jmp    c001ec27 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001ec60 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001ec60:	53                   	push   ebx
c001ec61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec65:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ec69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec6d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ec71:	0f af ca             	imul   ecx,edx
c001ec74:	0f af d8             	imul   ebx,eax
c001ec77:	f7 e2                	mul    edx
c001ec79:	01 d9                	add    ecx,ebx
c001ec7b:	5b                   	pop    ebx
c001ec7c:	01 ca                	add    edx,ecx
c001ec7e:	c3                   	ret    

c001ec7f <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001ec7f:	83 ec 0c             	sub    esp,0xc
c001ec82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec92:	e8 35 6b 00 00       	call   c00257cc <__udivdi3>
c001ec97:	83 c4 1c             	add    esp,0x1c
c001ec9a:	c3                   	ret    

c001ec9b <Vm::fpuSquare(unsigned long long)>:
c001ec9b:	50                   	push   eax
c001ec9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eca0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001eca4:	52                   	push   edx
c001eca5:	50                   	push   eax
c001eca6:	52                   	push   edx
c001eca7:	50                   	push   eax
c001eca8:	e8 b3 ff ff ff       	call   c001ec60 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ecad:	83 c4 14             	add    esp,0x14
c001ecb0:	c3                   	ret    

c001ecb1 <Vm::fpuGetReg(int)>:
c001ecb1:	83 ec 0c             	sub    esp,0xc
c001ecb4:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ecb9:	76 10                	jbe    c001eccb <Vm::fpuGetReg(int)+0x1a>
c001ecbb:	83 ec 0c             	sub    esp,0xc
c001ecbe:	68 a2 b2 02 c0       	push   0xc002b2a2
c001ecc3:	e8 e3 ae ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001ecc8:	83 c4 10             	add    esp,0x10
c001eccb:	a0 81 e4 02 c0       	mov    al,ds:0xc002e481
c001ecd0:	b9 08 00 00 00       	mov    ecx,0x8
c001ecd5:	c0 e8 03             	shr    al,0x3
c001ecd8:	83 e0 07             	and    eax,0x7
c001ecdb:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ecdf:	99                   	cdq    
c001ece0:	f7 f9                	idiv   ecx
c001ece2:	8b 04 d5 84 e4 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd1b7c]
c001ece9:	8b 14 d5 88 e4 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd1b78]
c001ecf0:	83 c4 0c             	add    esp,0xc
c001ecf3:	c3                   	ret    

c001ecf4 <Vm::fpuSetReg(int, unsigned long long)>:
c001ecf4:	57                   	push   edi
c001ecf5:	56                   	push   esi
c001ecf6:	52                   	push   edx
c001ecf7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ecfb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ecff:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ed04:	76 10                	jbe    c001ed16 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001ed06:	83 ec 0c             	sub    esp,0xc
c001ed09:	68 b5 b2 02 c0       	push   0xc002b2b5
c001ed0e:	e8 98 ae ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001ed13:	83 c4 10             	add    esp,0x10
c001ed16:	a0 81 e4 02 c0       	mov    al,ds:0xc002e481
c001ed1b:	b9 08 00 00 00       	mov    ecx,0x8
c001ed20:	c0 e8 03             	shr    al,0x3
c001ed23:	83 e0 07             	and    eax,0x7
c001ed26:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ed2a:	99                   	cdq    
c001ed2b:	f7 f9                	idiv   ecx
c001ed2d:	89 34 d5 84 e4 02 c0 	mov    DWORD PTR [edx*8-0x3ffd1b7c],esi
c001ed34:	89 3c d5 88 e4 02 c0 	mov    DWORD PTR [edx*8-0x3ffd1b78],edi
c001ed3b:	58                   	pop    eax
c001ed3c:	5e                   	pop    esi
c001ed3d:	5f                   	pop    edi
c001ed3e:	c3                   	ret    

c001ed3f <Vm::fpuPush(unsigned long long)>:
c001ed3f:	a0 81 e4 02 c0       	mov    al,ds:0xc002e481
c001ed44:	c0 e8 03             	shr    al,0x3
c001ed47:	83 e0 07             	and    eax,0x7
c001ed4a:	83 c0 07             	add    eax,0x7
c001ed4d:	88 c2                	mov    dl,al
c001ed4f:	83 e0 07             	and    eax,0x7
c001ed52:	83 e2 07             	and    edx,0x7
c001ed55:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001ed5c:	8a 15 81 e4 02 c0    	mov    dl,BYTE PTR ds:0xc002e481
c001ed62:	83 e2 c7             	and    edx,0xffffffc7
c001ed65:	09 ca                	or     edx,ecx
c001ed67:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ed6b:	88 15 81 e4 02 c0    	mov    BYTE PTR ds:0xc002e481,dl
c001ed71:	89 0c c5 88 e4 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1b78],ecx
c001ed78:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ed7c:	89 14 c5 84 e4 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1b7c],edx
c001ed83:	a1 c4 e4 02 c0       	mov    eax,ds:0xc002e4c4
c001ed88:	83 f8 08             	cmp    eax,0x8
c001ed8b:	75 08                	jne    c001ed95 <Vm::fpuPush(unsigned long long)+0x56>
c001ed8d:	80 0d 80 e4 02 c0 40 	or     BYTE PTR ds:0xc002e480,0x40
c001ed94:	c3                   	ret    
c001ed95:	40                   	inc    eax
c001ed96:	a3 c4 e4 02 c0       	mov    ds:0xc002e4c4,eax
c001ed9b:	c3                   	ret    

c001ed9c <Vm::fpuPop()>:
c001ed9c:	8a 0d 81 e4 02 c0    	mov    cl,BYTE PTR ds:0xc002e481
c001eda2:	53                   	push   ebx
c001eda3:	c0 e9 03             	shr    cl,0x3
c001eda6:	8a 1d 81 e4 02 c0    	mov    bl,BYTE PTR ds:0xc002e481
c001edac:	83 e1 07             	and    ecx,0x7
c001edaf:	83 e3 c7             	and    ebx,0xffffffc7
c001edb2:	8b 04 cd 84 e4 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd1b7c]
c001edb9:	8b 14 cd 88 e4 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd1b78]
c001edc0:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001edc7:	83 e1 38             	and    ecx,0x38
c001edca:	09 d9                	or     ecx,ebx
c001edcc:	88 0d 81 e4 02 c0    	mov    BYTE PTR ds:0xc002e481,cl
c001edd2:	8b 0d c4 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e4c4
c001edd8:	85 c9                	test   ecx,ecx
c001edda:	74 09                	je     c001ede5 <Vm::fpuPop()+0x49>
c001eddc:	49                   	dec    ecx
c001eddd:	89 0d c4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4c4,ecx
c001ede3:	eb 07                	jmp    c001edec <Vm::fpuPop()+0x50>
c001ede5:	80 0d 80 e4 02 c0 40 	or     BYTE PTR ds:0xc002e480,0x40
c001edec:	5b                   	pop    ebx
c001eded:	c3                   	ret    

c001edee <Vm::x87Handler(regs*)>:
c001edee:	55                   	push   ebp
c001edef:	57                   	push   edi
c001edf0:	56                   	push   esi
c001edf1:	53                   	push   ebx
c001edf2:	83 ec 1c             	sub    esp,0x1c
c001edf5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001edf9:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001edfe:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001ee01:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001ee09:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001ee0d:	50                   	push   eax
c001ee0e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001ee12:	50                   	push   eax
c001ee13:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ee17:	50                   	push   eax
c001ee18:	53                   	push   ebx
c001ee19:	e8 be a5 ff ff       	call   c00193dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001ee1e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001ee21:	83 c4 10             	add    esp,0x10
c001ee24:	89 c6                	mov    esi,eax
c001ee26:	80 fa d9             	cmp    dl,0xd9
c001ee29:	0f 85 52 01 00 00    	jne    c001ef81 <Vm::x87Handler(regs*)+0x193>
c001ee2f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee33:	8d 50 20             	lea    edx,[eax+0x20]
c001ee36:	80 fa 0e             	cmp    dl,0xe
c001ee39:	0f 87 86 00 00 00    	ja     c001eec5 <Vm::x87Handler(regs*)+0xd7>
c001ee3f:	0f b6 d2             	movzx  edx,dl
c001ee42:	ff 24 95 c8 b2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd4d38]
c001ee49:	e8 e7 fc ff ff       	call   c001eb35 <Vm::fpuGet0()>
c001ee4e:	eb 05                	jmp    c001ee55 <Vm::x87Handler(regs*)+0x67>
c001ee50:	e8 e5 fc ff ff       	call   c001eb3a <Vm::fpuGet1()>
c001ee55:	57                   	push   edi
c001ee56:	57                   	push   edi
c001ee57:	52                   	push   edx
c001ee58:	50                   	push   eax
c001ee59:	e8 e1 fe ff ff       	call   c001ed3f <Vm::fpuPush(unsigned long long)>
c001ee5e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee62:	83 c4 10             	add    esp,0x10
c001ee65:	b0 01                	mov    al,0x1
c001ee67:	e9 e3 09 00 00       	jmp    c001f84f <Vm::x87Handler(regs*)+0xa61>
c001ee6c:	83 ec 0c             	sub    esp,0xc
c001ee6f:	6a 00                	push   0x0
c001ee71:	e8 3b fe ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001ee76:	59                   	pop    ecx
c001ee77:	5e                   	pop    esi
c001ee78:	52                   	push   edx
c001ee79:	50                   	push   eax
c001ee7a:	e8 c2 fd ff ff       	call   c001ec41 <Vm::fpuChs(unsigned long long)>
c001ee7f:	eb 13                	jmp    c001ee94 <Vm::x87Handler(regs*)+0xa6>
c001ee81:	83 ec 0c             	sub    esp,0xc
c001ee84:	6a 00                	push   0x0
c001ee86:	e8 26 fe ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001ee8b:	5f                   	pop    edi
c001ee8c:	5d                   	pop    ebp
c001ee8d:	52                   	push   edx
c001ee8e:	50                   	push   eax
c001ee8f:	e8 a4 fd ff ff       	call   c001ec38 <Vm::fpuAbs(unsigned long long)>
c001ee94:	83 c4 0c             	add    esp,0xc
c001ee97:	52                   	push   edx
c001ee98:	50                   	push   eax
c001ee99:	6a 00                	push   0x0
c001ee9b:	e8 54 fe ff ff       	call   c001ecf4 <Vm::fpuSetReg(int, unsigned long long)>
c001eea0:	eb bc                	jmp    c001ee5e <Vm::x87Handler(regs*)+0x70>
c001eea2:	e8 d3 fc ff ff       	call   c001eb7a <Vm::fpuGetLog210()>
c001eea7:	eb ac                	jmp    c001ee55 <Vm::x87Handler(regs*)+0x67>
c001eea9:	e8 9c fc ff ff       	call   c001eb4a <Vm::fpuGetLog2E()>
c001eeae:	eb a5                	jmp    c001ee55 <Vm::x87Handler(regs*)+0x67>
c001eeb0:	e8 8d fc ff ff       	call   c001eb42 <Vm::fpuGetPi()>
c001eeb5:	eb 9e                	jmp    c001ee55 <Vm::x87Handler(regs*)+0x67>
c001eeb7:	e8 d6 fc ff ff       	call   c001eb92 <Vm::fpuGetLog102()>
c001eebc:	eb 97                	jmp    c001ee55 <Vm::x87Handler(regs*)+0x67>
c001eebe:	e8 9f fc ff ff       	call   c001eb62 <Vm::fpuGetLogE2()>
c001eec3:	eb 90                	jmp    c001ee55 <Vm::x87Handler(regs*)+0x67>
c001eec5:	8d 50 40             	lea    edx,[eax+0x40]
c001eec8:	80 fa 07             	cmp    dl,0x7
c001eecb:	77 15                	ja     c001eee2 <Vm::x87Handler(regs*)+0xf4>
c001eecd:	83 ec 0c             	sub    esp,0xc
c001eed0:	2d c0 00 00 00       	sub    eax,0xc0
c001eed5:	50                   	push   eax
c001eed6:	e8 d6 fd ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001eedb:	59                   	pop    ecx
c001eedc:	5e                   	pop    esi
c001eedd:	e9 75 ff ff ff       	jmp    c001ee57 <Vm::x87Handler(regs*)+0x69>
c001eee2:	8d 50 38             	lea    edx,[eax+0x38]
c001eee5:	80 fa 07             	cmp    dl,0x7
c001eee8:	77 3c                	ja     c001ef26 <Vm::x87Handler(regs*)+0x138>
c001eeea:	83 ec 0c             	sub    esp,0xc
c001eeed:	2d c8 00 00 00       	sub    eax,0xc8
c001eef2:	50                   	push   eax
c001eef3:	e8 b9 fd ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001eef8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eeff:	89 c6                	mov    esi,eax
c001ef01:	89 d7                	mov    edi,edx
c001ef03:	e8 a9 fd ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001ef08:	83 c4 0c             	add    esp,0xc
c001ef0b:	52                   	push   edx
c001ef0c:	50                   	push   eax
c001ef0d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef11:	2d c8 00 00 00       	sub    eax,0xc8
c001ef16:	50                   	push   eax
c001ef17:	e8 d8 fd ff ff       	call   c001ecf4 <Vm::fpuSetReg(int, unsigned long long)>
c001ef1c:	83 c4 0c             	add    esp,0xc
c001ef1f:	57                   	push   edi
c001ef20:	56                   	push   esi
c001ef21:	e9 73 ff ff ff       	jmp    c001ee99 <Vm::x87Handler(regs*)+0xab>
c001ef26:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ef2a:	84 d2                	test   dl,dl
c001ef2c:	75 0f                	jne    c001ef3d <Vm::x87Handler(regs*)+0x14f>
c001ef2e:	83 ec 0c             	sub    esp,0xc
c001ef31:	ff 36                	push   DWORD PTR [esi]
c001ef33:	e8 c8 fa ff ff       	call   c001ea00 <Vm::fpu32ToInternal(unsigned int)>
c001ef38:	e9 bf 00 00 00       	jmp    c001effc <Vm::x87Handler(regs*)+0x20e>
c001ef3d:	80 fa 03             	cmp    dl,0x3
c001ef40:	75 13                	jne    c001ef55 <Vm::x87Handler(regs*)+0x167>
c001ef42:	e8 55 fe ff ff       	call   c001ed9c <Vm::fpuPop()>
c001ef47:	55                   	push   ebp
c001ef48:	55                   	push   ebp
c001ef49:	52                   	push   edx
c001ef4a:	50                   	push   eax
c001ef4b:	e8 4c fa ff ff       	call   c001e99c <Vm::fpuInternalTo32(unsigned long long)>
c001ef50:	e9 88 00 00 00       	jmp    c001efdd <Vm::x87Handler(regs*)+0x1ef>
c001ef55:	80 fa 05             	cmp    dl,0x5
c001ef58:	75 0e                	jne    c001ef68 <Vm::x87Handler(regs*)+0x17a>
c001ef5a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ef5d:	66 a3 82 e4 02 c0    	mov    ds:0xc002e482,ax
c001ef63:	e9 df 00 00 00       	jmp    c001f047 <Vm::x87Handler(regs*)+0x259>
c001ef68:	31 c0                	xor    eax,eax
c001ef6a:	80 fa 07             	cmp    dl,0x7
c001ef6d:	0f 85 dc 08 00 00    	jne    c001f84f <Vm::x87Handler(regs*)+0xa61>
c001ef73:	66 a1 82 e4 02 c0    	mov    ax,ds:0xc002e482
c001ef79:	66 89 06             	mov    WORD PTR [esi],ax
c001ef7c:	e9 c6 00 00 00       	jmp    c001f047 <Vm::x87Handler(regs*)+0x259>
c001ef81:	80 fa d8             	cmp    dl,0xd8
c001ef84:	0f 84 c9 00 00 00    	je     c001f053 <Vm::x87Handler(regs*)+0x265>
c001ef8a:	80 fa dc             	cmp    dl,0xdc
c001ef8d:	0f 84 0d 02 00 00    	je     c001f1a0 <Vm::x87Handler(regs*)+0x3b2>
c001ef93:	80 fa de             	cmp    dl,0xde
c001ef96:	0f 84 cd 02 00 00    	je     c001f269 <Vm::x87Handler(regs*)+0x47b>
c001ef9c:	80 fa dd             	cmp    dl,0xdd
c001ef9f:	0f 84 5f 04 00 00    	je     c001f404 <Vm::x87Handler(regs*)+0x616>
c001efa5:	80 fa da             	cmp    dl,0xda
c001efa8:	0f 84 24 05 00 00    	je     c001f4d2 <Vm::x87Handler(regs*)+0x6e4>
c001efae:	80 fa df             	cmp    dl,0xdf
c001efb1:	0f 84 68 05 00 00    	je     c001f51f <Vm::x87Handler(regs*)+0x731>
c001efb7:	31 c0                	xor    eax,eax
c001efb9:	80 fa db             	cmp    dl,0xdb
c001efbc:	0f 85 8d 08 00 00    	jne    c001f84f <Vm::x87Handler(regs*)+0xa61>
c001efc2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001efc6:	80 fa 03             	cmp    dl,0x3
c001efc9:	0f 85 70 06 00 00    	jne    c001f63f <Vm::x87Handler(regs*)+0x851>
c001efcf:	e8 c8 fd ff ff       	call   c001ed9c <Vm::fpuPop()>
c001efd4:	55                   	push   ebp
c001efd5:	55                   	push   ebp
c001efd6:	52                   	push   edx
c001efd7:	50                   	push   eax
c001efd8:	e8 71 fa ff ff       	call   c001ea4e <Vm::fpuFloatToLong(unsigned long long)>
c001efdd:	83 c4 10             	add    esp,0x10
c001efe0:	89 06                	mov    DWORD PTR [esi],eax
c001efe2:	eb 63                	jmp    c001f047 <Vm::x87Handler(regs*)+0x259>
c001efe4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001efe8:	84 d2                	test   dl,dl
c001efea:	0f 85 e6 05 00 00    	jne    c001f5d6 <Vm::x87Handler(regs*)+0x7e8>
c001eff0:	57                   	push   edi
c001eff1:	57                   	push   edi
c001eff2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001eff5:	ff 36                	push   DWORD PTR [esi]
c001eff7:	e8 49 fa ff ff       	call   c001ea45 <Vm::fpu64ToInternal(unsigned long long)>
c001effc:	5e                   	pop    esi
c001effd:	5f                   	pop    edi
c001effe:	52                   	push   edx
c001efff:	50                   	push   eax
c001f000:	e8 3a fd ff ff       	call   c001ed3f <Vm::fpuPush(unsigned long long)>
c001f005:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f009:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f00c:	e9 51 fe ff ff       	jmp    c001ee62 <Vm::x87Handler(regs*)+0x74>
c001f011:	80 fa 03             	cmp    dl,0x3
c001f014:	0f 85 d7 06 00 00    	jne    c001f6f1 <Vm::x87Handler(regs*)+0x903>
c001f01a:	57                   	push   edi
c001f01b:	57                   	push   edi
c001f01c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f01f:	ff 36                	push   DWORD PTR [esi]
c001f021:	e8 1f fa ff ff       	call   c001ea45 <Vm::fpu64ToInternal(unsigned long long)>
c001f026:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f02d:	89 c6                	mov    esi,eax
c001f02f:	89 d7                	mov    edi,edx
c001f031:	e8 7b fc ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f036:	57                   	push   edi
c001f037:	56                   	push   esi
c001f038:	52                   	push   edx
c001f039:	50                   	push   eax
c001f03a:	e8 95 fb ff ff       	call   c001ebd4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f03f:	83 c4 20             	add    esp,0x20
c001f042:	e8 55 fd ff ff       	call   c001ed9c <Vm::fpuPop()>
c001f047:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f04b:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f04e:	e9 12 fe ff ff       	jmp    c001ee65 <Vm::x87Handler(regs*)+0x77>
c001f053:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f057:	8d 50 40             	lea    edx,[eax+0x40]
c001f05a:	80 fa 07             	cmp    dl,0x7
c001f05d:	77 29                	ja     c001f088 <Vm::x87Handler(regs*)+0x29a>
c001f05f:	83 ec 0c             	sub    esp,0xc
c001f062:	2d c0 00 00 00       	sub    eax,0xc0
c001f067:	50                   	push   eax
c001f068:	e8 44 fc ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f06d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f074:	89 c6                	mov    esi,eax
c001f076:	89 d7                	mov    edi,edx
c001f078:	e8 34 fc ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f07d:	57                   	push   edi
c001f07e:	56                   	push   esi
c001f07f:	52                   	push   edx
c001f080:	50                   	push   eax
c001f081:	e8 a1 fb ff ff       	call   c001ec27 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f086:	eb 2f                	jmp    c001f0b7 <Vm::x87Handler(regs*)+0x2c9>
c001f088:	8d 50 38             	lea    edx,[eax+0x38]
c001f08b:	80 fa 07             	cmp    dl,0x7
c001f08e:	77 2f                	ja     c001f0bf <Vm::x87Handler(regs*)+0x2d1>
c001f090:	83 ec 0c             	sub    esp,0xc
c001f093:	2d c8 00 00 00       	sub    eax,0xc8
c001f098:	50                   	push   eax
c001f099:	e8 13 fc ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f09e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f0a5:	89 c6                	mov    esi,eax
c001f0a7:	89 d7                	mov    edi,edx
c001f0a9:	e8 03 fc ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f0ae:	57                   	push   edi
c001f0af:	56                   	push   esi
c001f0b0:	52                   	push   edx
c001f0b1:	50                   	push   eax
c001f0b2:	e8 a9 fb ff ff       	call   c001ec60 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f0b7:	83 c4 1c             	add    esp,0x1c
c001f0ba:	e9 d8 fd ff ff       	jmp    c001ee97 <Vm::x87Handler(regs*)+0xa9>
c001f0bf:	8d 50 30             	lea    edx,[eax+0x30]
c001f0c2:	80 fa 07             	cmp    dl,0x7
c001f0c5:	77 0d                	ja     c001f0d4 <Vm::x87Handler(regs*)+0x2e6>
c001f0c7:	83 ec 0c             	sub    esp,0xc
c001f0ca:	2d d0 00 00 00       	sub    eax,0xd0
c001f0cf:	e9 99 03 00 00       	jmp    c001f46d <Vm::x87Handler(regs*)+0x67f>
c001f0d4:	8d 50 28             	lea    edx,[eax+0x28]
c001f0d7:	80 fa 07             	cmp    dl,0x7
c001f0da:	77 0d                	ja     c001f0e9 <Vm::x87Handler(regs*)+0x2fb>
c001f0dc:	83 ec 0c             	sub    esp,0xc
c001f0df:	2d d8 00 00 00       	sub    eax,0xd8
c001f0e4:	e9 c0 03 00 00       	jmp    c001f4a9 <Vm::x87Handler(regs*)+0x6bb>
c001f0e9:	8d 50 20             	lea    edx,[eax+0x20]
c001f0ec:	80 fa 07             	cmp    dl,0x7
c001f0ef:	77 1b                	ja     c001f10c <Vm::x87Handler(regs*)+0x31e>
c001f0f1:	83 ec 0c             	sub    esp,0xc
c001f0f4:	2d e0 00 00 00       	sub    eax,0xe0
c001f0f9:	50                   	push   eax
c001f0fa:	e8 b2 fb ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f0ff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f106:	89 c6                	mov    esi,eax
c001f108:	89 d7                	mov    edi,edx
c001f10a:	eb 22                	jmp    c001f12e <Vm::x87Handler(regs*)+0x340>
c001f10c:	8d 50 18             	lea    edx,[eax+0x18]
c001f10f:	80 fa 07             	cmp    dl,0x7
c001f112:	77 2d                	ja     c001f141 <Vm::x87Handler(regs*)+0x353>
c001f114:	83 ec 0c             	sub    esp,0xc
c001f117:	6a 00                	push   0x0
c001f119:	e8 93 fb ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f11e:	89 c6                	mov    esi,eax
c001f120:	89 d7                	mov    edi,edx
c001f122:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f126:	2d e8 00 00 00       	sub    eax,0xe8
c001f12b:	89 04 24             	mov    DWORD PTR [esp],eax
c001f12e:	e8 7e fb ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f133:	57                   	push   edi
c001f134:	56                   	push   esi
c001f135:	52                   	push   edx
c001f136:	50                   	push   eax
c001f137:	e8 15 fb ff ff       	call   c001ec51 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f13c:	e9 76 ff ff ff       	jmp    c001f0b7 <Vm::x87Handler(regs*)+0x2c9>
c001f141:	8d 50 10             	lea    edx,[eax+0x10]
c001f144:	80 fa 07             	cmp    dl,0x7
c001f147:	77 1b                	ja     c001f164 <Vm::x87Handler(regs*)+0x376>
c001f149:	83 ec 0c             	sub    esp,0xc
c001f14c:	2d f0 00 00 00       	sub    eax,0xf0
c001f151:	50                   	push   eax
c001f152:	e8 5a fb ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f157:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f15e:	89 c6                	mov    esi,eax
c001f160:	89 d7                	mov    edi,edx
c001f162:	eb 22                	jmp    c001f186 <Vm::x87Handler(regs*)+0x398>
c001f164:	3c f7                	cmp    al,0xf7
c001f166:	0f 86 d1 03 00 00    	jbe    c001f53d <Vm::x87Handler(regs*)+0x74f>
c001f16c:	83 ec 0c             	sub    esp,0xc
c001f16f:	6a 00                	push   0x0
c001f171:	e8 3b fb ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f176:	89 c6                	mov    esi,eax
c001f178:	89 d7                	mov    edi,edx
c001f17a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f17e:	2d f8 00 00 00       	sub    eax,0xf8
c001f183:	89 04 24             	mov    DWORD PTR [esp],eax
c001f186:	e8 26 fb ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f18b:	57                   	push   edi
c001f18c:	56                   	push   esi
c001f18d:	52                   	push   edx
c001f18e:	50                   	push   eax
c001f18f:	e8 eb fa ff ff       	call   c001ec7f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f194:	83 c4 1c             	add    esp,0x1c
c001f197:	52                   	push   edx
c001f198:	50                   	push   eax
c001f199:	6a 00                	push   0x0
c001f19b:	e9 51 02 00 00       	jmp    c001f3f1 <Vm::x87Handler(regs*)+0x603>
c001f1a0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1a4:	8d 50 40             	lea    edx,[eax+0x40]
c001f1a7:	80 fa 07             	cmp    dl,0x7
c001f1aa:	77 37                	ja     c001f1e3 <Vm::x87Handler(regs*)+0x3f5>
c001f1ac:	83 ec 0c             	sub    esp,0xc
c001f1af:	2d c0 00 00 00       	sub    eax,0xc0
c001f1b4:	50                   	push   eax
c001f1b5:	e8 f7 fa ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f1ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f1c1:	89 c6                	mov    esi,eax
c001f1c3:	89 d7                	mov    edi,edx
c001f1c5:	e8 e7 fa ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f1ca:	57                   	push   edi
c001f1cb:	56                   	push   esi
c001f1cc:	52                   	push   edx
c001f1cd:	50                   	push   eax
c001f1ce:	e8 54 fa ff ff       	call   c001ec27 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f1d3:	83 c4 1c             	add    esp,0x1c
c001f1d6:	52                   	push   edx
c001f1d7:	50                   	push   eax
c001f1d8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1dc:	2d c0 00 00 00       	sub    eax,0xc0
c001f1e1:	eb 3d                	jmp    c001f220 <Vm::x87Handler(regs*)+0x432>
c001f1e3:	8d 50 38             	lea    edx,[eax+0x38]
c001f1e6:	80 fa 07             	cmp    dl,0x7
c001f1e9:	77 3b                	ja     c001f226 <Vm::x87Handler(regs*)+0x438>
c001f1eb:	83 ec 0c             	sub    esp,0xc
c001f1ee:	2d c8 00 00 00       	sub    eax,0xc8
c001f1f3:	50                   	push   eax
c001f1f4:	e8 b8 fa ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f1f9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f200:	89 c6                	mov    esi,eax
c001f202:	89 d7                	mov    edi,edx
c001f204:	e8 a8 fa ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f209:	57                   	push   edi
c001f20a:	56                   	push   esi
c001f20b:	52                   	push   edx
c001f20c:	50                   	push   eax
c001f20d:	e8 4e fa ff ff       	call   c001ec60 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f212:	83 c4 1c             	add    esp,0x1c
c001f215:	52                   	push   edx
c001f216:	50                   	push   eax
c001f217:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f21b:	2d c8 00 00 00       	sub    eax,0xc8
c001f220:	50                   	push   eax
c001f221:	e9 75 fc ff ff       	jmp    c001ee9b <Vm::x87Handler(regs*)+0xad>
c001f226:	83 c0 18             	add    eax,0x18
c001f229:	3c 07                	cmp    al,0x7
c001f22b:	0f 87 3b 04 00 00    	ja     c001f66c <Vm::x87Handler(regs*)+0x87e>
c001f231:	83 ec 0c             	sub    esp,0xc
c001f234:	6a 00                	push   0x0
c001f236:	e8 76 fa ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f23b:	89 c6                	mov    esi,eax
c001f23d:	89 d7                	mov    edi,edx
c001f23f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f243:	2d e8 00 00 00       	sub    eax,0xe8
c001f248:	89 04 24             	mov    DWORD PTR [esp],eax
c001f24b:	e8 61 fa ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f250:	57                   	push   edi
c001f251:	56                   	push   esi
c001f252:	52                   	push   edx
c001f253:	50                   	push   eax
c001f254:	e8 f8 f9 ff ff       	call   c001ec51 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f259:	83 c4 1c             	add    esp,0x1c
c001f25c:	52                   	push   edx
c001f25d:	50                   	push   eax
c001f25e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f262:	2d e8 00 00 00       	sub    eax,0xe8
c001f267:	eb b7                	jmp    c001f220 <Vm::x87Handler(regs*)+0x432>
c001f269:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f26d:	8d 50 40             	lea    edx,[eax+0x40]
c001f270:	80 fa 07             	cmp    dl,0x7
c001f273:	77 3a                	ja     c001f2af <Vm::x87Handler(regs*)+0x4c1>
c001f275:	83 ec 0c             	sub    esp,0xc
c001f278:	2d c0 00 00 00       	sub    eax,0xc0
c001f27d:	50                   	push   eax
c001f27e:	e8 2e fa ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f283:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f28a:	89 c6                	mov    esi,eax
c001f28c:	89 d7                	mov    edi,edx
c001f28e:	e8 1e fa ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f293:	57                   	push   edi
c001f294:	56                   	push   esi
c001f295:	52                   	push   edx
c001f296:	50                   	push   eax
c001f297:	e8 8b f9 ff ff       	call   c001ec27 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f29c:	83 c4 1c             	add    esp,0x1c
c001f29f:	52                   	push   edx
c001f2a0:	50                   	push   eax
c001f2a1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2a5:	2d c0 00 00 00       	sub    eax,0xc0
c001f2aa:	e9 9e 01 00 00       	jmp    c001f44d <Vm::x87Handler(regs*)+0x65f>
c001f2af:	8d 50 20             	lea    edx,[eax+0x20]
c001f2b2:	80 fa 07             	cmp    dl,0x7
c001f2b5:	77 3a                	ja     c001f2f1 <Vm::x87Handler(regs*)+0x503>
c001f2b7:	83 ec 0c             	sub    esp,0xc
c001f2ba:	2d e0 00 00 00       	sub    eax,0xe0
c001f2bf:	50                   	push   eax
c001f2c0:	e8 ec f9 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f2c5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2cc:	89 c6                	mov    esi,eax
c001f2ce:	89 d7                	mov    edi,edx
c001f2d0:	e8 dc f9 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f2d5:	57                   	push   edi
c001f2d6:	56                   	push   esi
c001f2d7:	52                   	push   edx
c001f2d8:	50                   	push   eax
c001f2d9:	e8 73 f9 ff ff       	call   c001ec51 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f2de:	83 c4 1c             	add    esp,0x1c
c001f2e1:	52                   	push   edx
c001f2e2:	50                   	push   eax
c001f2e3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2e7:	2d e0 00 00 00       	sub    eax,0xe0
c001f2ec:	e9 5c 01 00 00       	jmp    c001f44d <Vm::x87Handler(regs*)+0x65f>
c001f2f1:	8d 50 18             	lea    edx,[eax+0x18]
c001f2f4:	80 fa 07             	cmp    dl,0x7
c001f2f7:	77 3b                	ja     c001f334 <Vm::x87Handler(regs*)+0x546>
c001f2f9:	83 ec 0c             	sub    esp,0xc
c001f2fc:	6a 00                	push   0x0
c001f2fe:	e8 ae f9 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f303:	89 c6                	mov    esi,eax
c001f305:	89 d7                	mov    edi,edx
c001f307:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f30b:	2d e8 00 00 00       	sub    eax,0xe8
c001f310:	89 04 24             	mov    DWORD PTR [esp],eax
c001f313:	e8 99 f9 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f318:	57                   	push   edi
c001f319:	56                   	push   esi
c001f31a:	52                   	push   edx
c001f31b:	50                   	push   eax
c001f31c:	e8 30 f9 ff ff       	call   c001ec51 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f321:	83 c4 1c             	add    esp,0x1c
c001f324:	52                   	push   edx
c001f325:	50                   	push   eax
c001f326:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f32a:	2d e8 00 00 00       	sub    eax,0xe8
c001f32f:	e9 19 01 00 00       	jmp    c001f44d <Vm::x87Handler(regs*)+0x65f>
c001f334:	8d 50 38             	lea    edx,[eax+0x38]
c001f337:	80 fa 07             	cmp    dl,0x7
c001f33a:	77 37                	ja     c001f373 <Vm::x87Handler(regs*)+0x585>
c001f33c:	83 ec 0c             	sub    esp,0xc
c001f33f:	2d c8 00 00 00       	sub    eax,0xc8
c001f344:	50                   	push   eax
c001f345:	e8 67 f9 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f34a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f351:	89 c6                	mov    esi,eax
c001f353:	89 d7                	mov    edi,edx
c001f355:	e8 57 f9 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f35a:	57                   	push   edi
c001f35b:	56                   	push   esi
c001f35c:	52                   	push   edx
c001f35d:	50                   	push   eax
c001f35e:	e8 fd f8 ff ff       	call   c001ec60 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f363:	83 c4 1c             	add    esp,0x1c
c001f366:	52                   	push   edx
c001f367:	50                   	push   eax
c001f368:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f36c:	2d c8 00 00 00       	sub    eax,0xc8
c001f371:	eb 7d                	jmp    c001f3f0 <Vm::x87Handler(regs*)+0x602>
c001f373:	3c f7                	cmp    al,0xf7
c001f375:	76 38                	jbe    c001f3af <Vm::x87Handler(regs*)+0x5c1>
c001f377:	83 ec 0c             	sub    esp,0xc
c001f37a:	6a 00                	push   0x0
c001f37c:	e8 30 f9 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f381:	89 c6                	mov    esi,eax
c001f383:	89 d7                	mov    edi,edx
c001f385:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f389:	2d f8 00 00 00       	sub    eax,0xf8
c001f38e:	89 04 24             	mov    DWORD PTR [esp],eax
c001f391:	e8 1b f9 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f396:	57                   	push   edi
c001f397:	56                   	push   esi
c001f398:	52                   	push   edx
c001f399:	50                   	push   eax
c001f39a:	e8 e0 f8 ff ff       	call   c001ec7f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f39f:	83 c4 1c             	add    esp,0x1c
c001f3a2:	52                   	push   edx
c001f3a3:	50                   	push   eax
c001f3a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3a8:	2d f8 00 00 00       	sub    eax,0xf8
c001f3ad:	eb 41                	jmp    c001f3f0 <Vm::x87Handler(regs*)+0x602>
c001f3af:	8d 50 10             	lea    edx,[eax+0x10]
c001f3b2:	80 fa 07             	cmp    dl,0x7
c001f3b5:	0f 87 5a 01 00 00    	ja     c001f515 <Vm::x87Handler(regs*)+0x727>
c001f3bb:	83 ec 0c             	sub    esp,0xc
c001f3be:	2d f0 00 00 00       	sub    eax,0xf0
c001f3c3:	50                   	push   eax
c001f3c4:	e8 e8 f8 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f3c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3d0:	89 c6                	mov    esi,eax
c001f3d2:	89 d7                	mov    edi,edx
c001f3d4:	e8 d8 f8 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f3d9:	57                   	push   edi
c001f3da:	56                   	push   esi
c001f3db:	52                   	push   edx
c001f3dc:	50                   	push   eax
c001f3dd:	e8 9d f8 ff ff       	call   c001ec7f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f3e2:	83 c4 1c             	add    esp,0x1c
c001f3e5:	52                   	push   edx
c001f3e6:	50                   	push   eax
c001f3e7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3eb:	2d f0 00 00 00       	sub    eax,0xf0
c001f3f0:	50                   	push   eax
c001f3f1:	e8 fe f8 ff ff       	call   c001ecf4 <Vm::fpuSetReg(int, unsigned long long)>
c001f3f6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f3fa:	e8 9d f9 ff ff       	call   c001ed9c <Vm::fpuPop()>
c001f3ff:	e9 5e fa ff ff       	jmp    c001ee62 <Vm::x87Handler(regs*)+0x74>
c001f404:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f408:	8d 50 30             	lea    edx,[eax+0x30]
c001f40b:	80 fa 07             	cmp    dl,0x7
c001f40e:	77 1d                	ja     c001f42d <Vm::x87Handler(regs*)+0x63f>
c001f410:	83 ec 0c             	sub    esp,0xc
c001f413:	6a 00                	push   0x0
c001f415:	e8 97 f8 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f41a:	83 c4 0c             	add    esp,0xc
c001f41d:	52                   	push   edx
c001f41e:	50                   	push   eax
c001f41f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f423:	2d d0 00 00 00       	sub    eax,0xd0
c001f428:	e9 f3 fd ff ff       	jmp    c001f220 <Vm::x87Handler(regs*)+0x432>
c001f42d:	8d 50 28             	lea    edx,[eax+0x28]
c001f430:	80 fa 07             	cmp    dl,0x7
c001f433:	77 28                	ja     c001f45d <Vm::x87Handler(regs*)+0x66f>
c001f435:	83 ec 0c             	sub    esp,0xc
c001f438:	6a 00                	push   0x0
c001f43a:	e8 72 f8 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f43f:	83 c4 0c             	add    esp,0xc
c001f442:	52                   	push   edx
c001f443:	50                   	push   eax
c001f444:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f448:	2d d8 00 00 00       	sub    eax,0xd8
c001f44d:	50                   	push   eax
c001f44e:	e8 a1 f8 ff ff       	call   c001ecf4 <Vm::fpuSetReg(int, unsigned long long)>
c001f453:	e8 44 f9 ff ff       	call   c001ed9c <Vm::fpuPop()>
c001f458:	e9 01 fa ff ff       	jmp    c001ee5e <Vm::x87Handler(regs*)+0x70>
c001f45d:	8d 50 20             	lea    edx,[eax+0x20]
c001f460:	80 fa 07             	cmp    dl,0x7
c001f463:	77 30                	ja     c001f495 <Vm::x87Handler(regs*)+0x6a7>
c001f465:	83 ec 0c             	sub    esp,0xc
c001f468:	2d e0 00 00 00       	sub    eax,0xe0
c001f46d:	50                   	push   eax
c001f46e:	e8 3e f8 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f473:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f47a:	89 c6                	mov    esi,eax
c001f47c:	89 d7                	mov    edi,edx
c001f47e:	e8 2e f8 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f483:	57                   	push   edi
c001f484:	56                   	push   esi
c001f485:	52                   	push   edx
c001f486:	50                   	push   eax
c001f487:	e8 48 f7 ff ff       	call   c001ebd4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f48c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f490:	e9 54 02 00 00       	jmp    c001f6e9 <Vm::x87Handler(regs*)+0x8fb>
c001f495:	8d 50 18             	lea    edx,[eax+0x18]
c001f498:	80 fa 07             	cmp    dl,0x7
c001f49b:	0f 87 43 fb ff ff    	ja     c001efe4 <Vm::x87Handler(regs*)+0x1f6>
c001f4a1:	83 ec 0c             	sub    esp,0xc
c001f4a4:	2d e8 00 00 00       	sub    eax,0xe8
c001f4a9:	50                   	push   eax
c001f4aa:	e8 02 f8 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f4af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4b6:	89 c6                	mov    esi,eax
c001f4b8:	89 d7                	mov    edi,edx
c001f4ba:	e8 f2 f7 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f4bf:	57                   	push   edi
c001f4c0:	56                   	push   esi
c001f4c1:	52                   	push   edx
c001f4c2:	50                   	push   eax
c001f4c3:	e8 0c f7 ff ff       	call   c001ebd4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f4c8:	83 c4 20             	add    esp,0x20
c001f4cb:	e8 cc f8 ff ff       	call   c001ed9c <Vm::fpuPop()>
c001f4d0:	eb 62                	jmp    c001f534 <Vm::x87Handler(regs*)+0x746>
c001f4d2:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f4d6:	0f 85 0f 01 00 00    	jne    c001f5eb <Vm::x87Handler(regs*)+0x7fd>
c001f4dc:	83 ec 0c             	sub    esp,0xc
c001f4df:	6a 01                	push   0x1
c001f4e1:	e8 cb f7 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f4e6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4ed:	89 c6                	mov    esi,eax
c001f4ef:	89 d7                	mov    edi,edx
c001f4f1:	e8 bb f7 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f4f6:	57                   	push   edi
c001f4f7:	56                   	push   esi
c001f4f8:	52                   	push   edx
c001f4f9:	50                   	push   eax
c001f4fa:	e8 d5 f6 ff ff       	call   c001ebd4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f4ff:	83 c4 20             	add    esp,0x20
c001f502:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f506:	e8 91 f8 ff ff       	call   c001ed9c <Vm::fpuPop()>
c001f50b:	e8 8c f8 ff ff       	call   c001ed9c <Vm::fpuPop()>
c001f510:	e9 50 f9 ff ff       	jmp    c001ee65 <Vm::x87Handler(regs*)+0x77>
c001f515:	3c d9                	cmp    al,0xd9
c001f517:	0f 85 b5 02 00 00    	jne    c001f7d2 <Vm::x87Handler(regs*)+0x9e4>
c001f51d:	eb bd                	jmp    c001f4dc <Vm::x87Handler(regs*)+0x6ee>
c001f51f:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f523:	0f 85 ea 02 00 00    	jne    c001f813 <Vm::x87Handler(regs*)+0xa25>
c001f529:	0f b7 05 80 e4 02 c0 	movzx  eax,WORD PTR ds:0xc002e480
c001f530:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f534:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f538:	e9 28 f9 ff ff       	jmp    c001ee65 <Vm::x87Handler(regs*)+0x77>
c001f53d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f541:	84 d2                	test   dl,dl
c001f543:	75 0f                	jne    c001f554 <Vm::x87Handler(regs*)+0x766>
c001f545:	83 ec 0c             	sub    esp,0xc
c001f548:	ff 36                	push   DWORD PTR [esi]
c001f54a:	e8 b1 f4 ff ff       	call   c001ea00 <Vm::fpu32ToInternal(unsigned int)>
c001f54f:	e9 2c 01 00 00       	jmp    c001f680 <Vm::x87Handler(regs*)+0x892>
c001f554:	80 fa 01             	cmp    dl,0x1
c001f557:	75 0f                	jne    c001f568 <Vm::x87Handler(regs*)+0x77a>
c001f559:	83 ec 0c             	sub    esp,0xc
c001f55c:	ff 36                	push   DWORD PTR [esi]
c001f55e:	e8 9d f4 ff ff       	call   c001ea00 <Vm::fpu32ToInternal(unsigned int)>
c001f563:	e9 81 02 00 00       	jmp    c001f7e9 <Vm::x87Handler(regs*)+0x9fb>
c001f568:	80 fa 04             	cmp    dl,0x4
c001f56b:	75 0f                	jne    c001f57c <Vm::x87Handler(regs*)+0x78e>
c001f56d:	83 ec 0c             	sub    esp,0xc
c001f570:	ff 36                	push   DWORD PTR [esi]
c001f572:	e8 89 f4 ff ff       	call   c001ea00 <Vm::fpu32ToInternal(unsigned int)>
c001f577:	e9 86 01 00 00       	jmp    c001f702 <Vm::x87Handler(regs*)+0x914>
c001f57c:	80 fa 05             	cmp    dl,0x5
c001f57f:	75 1b                	jne    c001f59c <Vm::x87Handler(regs*)+0x7ae>
c001f581:	83 ec 0c             	sub    esp,0xc
c001f584:	6a 00                	push   0x0
c001f586:	e8 26 f7 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f58b:	89 c7                	mov    edi,eax
c001f58d:	89 d5                	mov    ebp,edx
c001f58f:	58                   	pop    eax
c001f590:	ff 36                	push   DWORD PTR [esi]
c001f592:	e8 69 f4 ff ff       	call   c001ea00 <Vm::fpu32ToInternal(unsigned int)>
c001f597:	e9 a3 01 00 00       	jmp    c001f73f <Vm::x87Handler(regs*)+0x951>
c001f59c:	80 fa 06             	cmp    dl,0x6
c001f59f:	75 0f                	jne    c001f5b0 <Vm::x87Handler(regs*)+0x7c2>
c001f5a1:	83 ec 0c             	sub    esp,0xc
c001f5a4:	ff 36                	push   DWORD PTR [esi]
c001f5a6:	e8 55 f4 ff ff       	call   c001ea00 <Vm::fpu32ToInternal(unsigned int)>
c001f5ab:	e9 ae 01 00 00       	jmp    c001f75e <Vm::x87Handler(regs*)+0x970>
c001f5b0:	31 c0                	xor    eax,eax
c001f5b2:	80 fa 07             	cmp    dl,0x7
c001f5b5:	0f 85 94 02 00 00    	jne    c001f84f <Vm::x87Handler(regs*)+0xa61>
c001f5bb:	83 ec 0c             	sub    esp,0xc
c001f5be:	6a 00                	push   0x0
c001f5c0:	e8 ec f6 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f5c5:	89 c7                	mov    edi,eax
c001f5c7:	89 d5                	mov    ebp,edx
c001f5c9:	58                   	pop    eax
c001f5ca:	ff 36                	push   DWORD PTR [esi]
c001f5cc:	e8 2f f4 ff ff       	call   c001ea00 <Vm::fpu32ToInternal(unsigned int)>
c001f5d1:	e9 cb 01 00 00       	jmp    c001f7a1 <Vm::x87Handler(regs*)+0x9b3>
c001f5d6:	80 fa 03             	cmp    dl,0x3
c001f5d9:	0f 85 d3 01 00 00    	jne    c001f7b2 <Vm::x87Handler(regs*)+0x9c4>
c001f5df:	e8 b8 f7 ff ff       	call   c001ed9c <Vm::fpuPop()>
c001f5e4:	51                   	push   ecx
c001f5e5:	51                   	push   ecx
c001f5e6:	e9 de 01 00 00       	jmp    c001f7c9 <Vm::x87Handler(regs*)+0x9db>
c001f5eb:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f5ef:	80 fa 01             	cmp    dl,0x1
c001f5f2:	75 09                	jne    c001f5fd <Vm::x87Handler(regs*)+0x80f>
c001f5f4:	57                   	push   edi
c001f5f5:	57                   	push   edi
c001f5f6:	8b 06                	mov    eax,DWORD PTR [esi]
c001f5f8:	e9 e3 01 00 00       	jmp    c001f7e0 <Vm::x87Handler(regs*)+0x9f2>
c001f5fd:	80 fa 04             	cmp    dl,0x4
c001f600:	75 12                	jne    c001f614 <Vm::x87Handler(regs*)+0x826>
c001f602:	31 d2                	xor    edx,edx
c001f604:	51                   	push   ecx
c001f605:	51                   	push   ecx
c001f606:	8b 06                	mov    eax,DWORD PTR [esi]
c001f608:	52                   	push   edx
c001f609:	50                   	push   eax
c001f60a:	e8 d0 f4 ff ff       	call   c001eadf <Vm::fpuLongToFloat(long long)>
c001f60f:	e9 ee 00 00 00       	jmp    c001f702 <Vm::x87Handler(regs*)+0x914>
c001f614:	31 c0                	xor    eax,eax
c001f616:	80 fa 07             	cmp    dl,0x7
c001f619:	0f 85 30 02 00 00    	jne    c001f84f <Vm::x87Handler(regs*)+0xa61>
c001f61f:	83 ec 0c             	sub    esp,0xc
c001f622:	6a 00                	push   0x0
c001f624:	e8 88 f6 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f629:	89 c7                	mov    edi,eax
c001f62b:	89 d5                	mov    ebp,edx
c001f62d:	58                   	pop    eax
c001f62e:	8b 06                	mov    eax,DWORD PTR [esi]
c001f630:	5a                   	pop    edx
c001f631:	31 d2                	xor    edx,edx
c001f633:	52                   	push   edx
c001f634:	50                   	push   eax
c001f635:	e8 a5 f4 ff ff       	call   c001eadf <Vm::fpuLongToFloat(long long)>
c001f63a:	e9 62 01 00 00       	jmp    c001f7a1 <Vm::x87Handler(regs*)+0x9b3>
c001f63f:	84 d2                	test   dl,dl
c001f641:	75 0d                	jne    c001f650 <Vm::x87Handler(regs*)+0x862>
c001f643:	31 d2                	xor    edx,edx
c001f645:	55                   	push   ebp
c001f646:	55                   	push   ebp
c001f647:	8b 06                	mov    eax,DWORD PTR [esi]
c001f649:	52                   	push   edx
c001f64a:	50                   	push   eax
c001f64b:	e9 d3 01 00 00       	jmp    c001f823 <Vm::x87Handler(regs*)+0xa35>
c001f650:	31 c0                	xor    eax,eax
c001f652:	80 fa 02             	cmp    dl,0x2
c001f655:	0f 85 f4 01 00 00    	jne    c001f84f <Vm::x87Handler(regs*)+0xa61>
c001f65b:	83 ec 0c             	sub    esp,0xc
c001f65e:	6a 00                	push   0x0
c001f660:	e8 4c f6 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f665:	59                   	pop    ecx
c001f666:	5f                   	pop    edi
c001f667:	e9 6a f9 ff ff       	jmp    c001efd6 <Vm::x87Handler(regs*)+0x1e8>
c001f66c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f670:	84 d2                	test   dl,dl
c001f672:	75 2a                	jne    c001f69e <Vm::x87Handler(regs*)+0x8b0>
c001f674:	50                   	push   eax
c001f675:	50                   	push   eax
c001f676:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f679:	ff 36                	push   DWORD PTR [esi]
c001f67b:	e8 c5 f3 ff ff       	call   c001ea45 <Vm::fpu64ToInternal(unsigned long long)>
c001f680:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f687:	89 c6                	mov    esi,eax
c001f689:	89 d7                	mov    edi,edx
c001f68b:	e8 21 f6 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f690:	57                   	push   edi
c001f691:	56                   	push   esi
c001f692:	52                   	push   edx
c001f693:	50                   	push   eax
c001f694:	e8 8e f5 ff ff       	call   c001ec27 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f699:	e9 64 01 00 00       	jmp    c001f802 <Vm::x87Handler(regs*)+0xa14>
c001f69e:	80 fa 01             	cmp    dl,0x1
c001f6a1:	75 11                	jne    c001f6b4 <Vm::x87Handler(regs*)+0x8c6>
c001f6a3:	50                   	push   eax
c001f6a4:	50                   	push   eax
c001f6a5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f6a8:	ff 36                	push   DWORD PTR [esi]
c001f6aa:	e8 96 f3 ff ff       	call   c001ea45 <Vm::fpu64ToInternal(unsigned long long)>
c001f6af:	e9 35 01 00 00       	jmp    c001f7e9 <Vm::x87Handler(regs*)+0x9fb>
c001f6b4:	80 fa 02             	cmp    dl,0x2
c001f6b7:	0f 85 54 f9 ff ff    	jne    c001f011 <Vm::x87Handler(regs*)+0x223>
c001f6bd:	55                   	push   ebp
c001f6be:	55                   	push   ebp
c001f6bf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f6c2:	ff 36                	push   DWORD PTR [esi]
c001f6c4:	e8 7c f3 ff ff       	call   c001ea45 <Vm::fpu64ToInternal(unsigned long long)>
c001f6c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6d0:	89 c6                	mov    esi,eax
c001f6d2:	89 d7                	mov    edi,edx
c001f6d4:	e8 d8 f5 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f6d9:	57                   	push   edi
c001f6da:	56                   	push   esi
c001f6db:	52                   	push   edx
c001f6dc:	50                   	push   eax
c001f6dd:	e8 f2 f4 ff ff       	call   c001ebd4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f6e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f6e6:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f6e9:	83 c4 20             	add    esp,0x20
c001f6ec:	e9 74 f7 ff ff       	jmp    c001ee65 <Vm::x87Handler(regs*)+0x77>
c001f6f1:	80 fa 04             	cmp    dl,0x4
c001f6f4:	75 2a                	jne    c001f720 <Vm::x87Handler(regs*)+0x932>
c001f6f6:	51                   	push   ecx
c001f6f7:	51                   	push   ecx
c001f6f8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f6fb:	ff 36                	push   DWORD PTR [esi]
c001f6fd:	e8 43 f3 ff ff       	call   c001ea45 <Vm::fpu64ToInternal(unsigned long long)>
c001f702:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f709:	89 c6                	mov    esi,eax
c001f70b:	89 d7                	mov    edi,edx
c001f70d:	e8 9f f5 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f712:	57                   	push   edi
c001f713:	56                   	push   esi
c001f714:	52                   	push   edx
c001f715:	50                   	push   eax
c001f716:	e8 36 f5 ff ff       	call   c001ec51 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f71b:	e9 e2 00 00 00       	jmp    c001f802 <Vm::x87Handler(regs*)+0xa14>
c001f720:	80 fa 05             	cmp    dl,0x5
c001f723:	75 28                	jne    c001f74d <Vm::x87Handler(regs*)+0x95f>
c001f725:	83 ec 0c             	sub    esp,0xc
c001f728:	6a 00                	push   0x0
c001f72a:	e8 82 f5 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f72f:	89 c7                	mov    edi,eax
c001f731:	89 d5                	mov    ebp,edx
c001f733:	58                   	pop    eax
c001f734:	5a                   	pop    edx
c001f735:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f738:	ff 36                	push   DWORD PTR [esi]
c001f73a:	e8 06 f3 ff ff       	call   c001ea45 <Vm::fpu64ToInternal(unsigned long long)>
c001f73f:	83 c4 10             	add    esp,0x10
c001f742:	55                   	push   ebp
c001f743:	57                   	push   edi
c001f744:	52                   	push   edx
c001f745:	50                   	push   eax
c001f746:	e8 06 f5 ff ff       	call   c001ec51 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f74b:	eb 60                	jmp    c001f7ad <Vm::x87Handler(regs*)+0x9bf>
c001f74d:	80 fa 06             	cmp    dl,0x6
c001f750:	75 2a                	jne    c001f77c <Vm::x87Handler(regs*)+0x98e>
c001f752:	51                   	push   ecx
c001f753:	51                   	push   ecx
c001f754:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f757:	ff 36                	push   DWORD PTR [esi]
c001f759:	e8 e7 f2 ff ff       	call   c001ea45 <Vm::fpu64ToInternal(unsigned long long)>
c001f75e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f765:	89 c6                	mov    esi,eax
c001f767:	89 d7                	mov    edi,edx
c001f769:	e8 43 f5 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f76e:	57                   	push   edi
c001f76f:	56                   	push   esi
c001f770:	52                   	push   edx
c001f771:	50                   	push   eax
c001f772:	e8 08 f5 ff ff       	call   c001ec7f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f777:	e9 86 00 00 00       	jmp    c001f802 <Vm::x87Handler(regs*)+0xa14>
c001f77c:	31 c0                	xor    eax,eax
c001f77e:	80 fa 07             	cmp    dl,0x7
c001f781:	0f 85 c8 00 00 00    	jne    c001f84f <Vm::x87Handler(regs*)+0xa61>
c001f787:	83 ec 0c             	sub    esp,0xc
c001f78a:	6a 00                	push   0x0
c001f78c:	e8 20 f5 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f791:	89 c7                	mov    edi,eax
c001f793:	89 d5                	mov    ebp,edx
c001f795:	58                   	pop    eax
c001f796:	5a                   	pop    edx
c001f797:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f79a:	ff 36                	push   DWORD PTR [esi]
c001f79c:	e8 a4 f2 ff ff       	call   c001ea45 <Vm::fpu64ToInternal(unsigned long long)>
c001f7a1:	83 c4 10             	add    esp,0x10
c001f7a4:	55                   	push   ebp
c001f7a5:	57                   	push   edi
c001f7a6:	52                   	push   edx
c001f7a7:	50                   	push   eax
c001f7a8:	e8 d2 f4 ff ff       	call   c001ec7f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f7ad:	83 c4 0c             	add    esp,0xc
c001f7b0:	eb 53                	jmp    c001f805 <Vm::x87Handler(regs*)+0xa17>
c001f7b2:	31 c0                	xor    eax,eax
c001f7b4:	80 fa 02             	cmp    dl,0x2
c001f7b7:	0f 85 92 00 00 00    	jne    c001f84f <Vm::x87Handler(regs*)+0xa61>
c001f7bd:	83 ec 0c             	sub    esp,0xc
c001f7c0:	6a 00                	push   0x0
c001f7c2:	e8 ea f4 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f7c7:	59                   	pop    ecx
c001f7c8:	5f                   	pop    edi
c001f7c9:	52                   	push   edx
c001f7ca:	50                   	push   eax
c001f7cb:	e8 27 f2 ff ff       	call   c001e9f7 <Vm::fpuInternalTo64(unsigned long long)>
c001f7d0:	eb 70                	jmp    c001f842 <Vm::x87Handler(regs*)+0xa54>
c001f7d2:	31 c0                	xor    eax,eax
c001f7d4:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001f7d9:	75 74                	jne    c001f84f <Vm::x87Handler(regs*)+0xa61>
c001f7db:	50                   	push   eax
c001f7dc:	50                   	push   eax
c001f7dd:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f7e0:	31 d2                	xor    edx,edx
c001f7e2:	52                   	push   edx
c001f7e3:	50                   	push   eax
c001f7e4:	e8 f6 f2 ff ff       	call   c001eadf <Vm::fpuLongToFloat(long long)>
c001f7e9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7f0:	89 c6                	mov    esi,eax
c001f7f2:	89 d7                	mov    edi,edx
c001f7f4:	e8 b8 f4 ff ff       	call   c001ecb1 <Vm::fpuGetReg(int)>
c001f7f9:	57                   	push   edi
c001f7fa:	56                   	push   esi
c001f7fb:	52                   	push   edx
c001f7fc:	50                   	push   eax
c001f7fd:	e8 5e f4 ff ff       	call   c001ec60 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f802:	83 c4 1c             	add    esp,0x1c
c001f805:	52                   	push   edx
c001f806:	50                   	push   eax
c001f807:	6a 00                	push   0x0
c001f809:	e8 e6 f4 ff ff       	call   c001ecf4 <Vm::fpuSetReg(int, unsigned long long)>
c001f80e:	e9 f2 f7 ff ff       	jmp    c001f005 <Vm::x87Handler(regs*)+0x217>
c001f813:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f817:	80 fa 05             	cmp    dl,0x5
c001f81a:	75 11                	jne    c001f82d <Vm::x87Handler(regs*)+0xa3f>
c001f81c:	55                   	push   ebp
c001f81d:	55                   	push   ebp
c001f81e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f821:	ff 36                	push   DWORD PTR [esi]
c001f823:	e8 81 f2 ff ff       	call   c001eaa9 <Vm::fpuULongToFloat(unsigned long long)>
c001f828:	e9 cf f7 ff ff       	jmp    c001effc <Vm::x87Handler(regs*)+0x20e>
c001f82d:	31 c0                	xor    eax,eax
c001f82f:	80 fa 07             	cmp    dl,0x7
c001f832:	75 1b                	jne    c001f84f <Vm::x87Handler(regs*)+0xa61>
c001f834:	e8 63 f5 ff ff       	call   c001ed9c <Vm::fpuPop()>
c001f839:	51                   	push   ecx
c001f83a:	51                   	push   ecx
c001f83b:	52                   	push   edx
c001f83c:	50                   	push   eax
c001f83d:	e8 0c f2 ff ff       	call   c001ea4e <Vm::fpuFloatToLong(unsigned long long)>
c001f842:	83 c4 10             	add    esp,0x10
c001f845:	89 06                	mov    DWORD PTR [esi],eax
c001f847:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001f84a:	e9 f8 f7 ff ff       	jmp    c001f047 <Vm::x87Handler(regs*)+0x259>
c001f84f:	83 c4 1c             	add    esp,0x1c
c001f852:	5b                   	pop    ebx
c001f853:	5e                   	pop    esi
c001f854:	5f                   	pop    edi
c001f855:	5d                   	pop    ebp
c001f856:	c3                   	ret    

c001f857 <__static_initialization_and_destruction_0(int, int)>:
c001f857:	83 ec 0c             	sub    esp,0xc
c001f85a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f85f:	75 1a                	jne    c001f87b <__static_initialization_and_destruction_0(int, int)+0x24>
c001f861:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f869:	75 10                	jne    c001f87b <__static_initialization_and_destruction_0(int, int)+0x24>
c001f86b:	83 ec 0c             	sub    esp,0xc
c001f86e:	68 80 e4 02 c0       	push   0xc002e480
c001f873:	e8 a8 82 00 00       	call   c0027b20 <Vm::_FPUState::_FPUState()>
c001f878:	83 c4 10             	add    esp,0x10
c001f87b:	90                   	nop
c001f87c:	83 c4 0c             	add    esp,0xc
c001f87f:	c3                   	ret    

c001f880 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001f880:	83 ec 0c             	sub    esp,0xc
c001f883:	83 ec 08             	sub    esp,0x8
c001f886:	68 ff ff 00 00       	push   0xffff
c001f88b:	6a 01                	push   0x1
c001f88d:	e8 c5 ff ff ff       	call   c001f857 <__static_initialization_and_destruction_0(int, int)>
c001f892:	83 c4 10             	add    esp,0x10
c001f895:	83 c4 0c             	add    esp,0xc
c001f898:	c3                   	ret    
c001f899:	90                   	nop

c001f89a <FAT::getName()>:
c001f89a:	b8 04 b3 02 c0       	mov    eax,0xc002b304
c001f89f:	c3                   	ret    

c001f8a0 <FAT::tell(void*, unsigned long long*)>:
c001f8a0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f8a5:	75 06                	jne    c001f8ad <FAT::tell(void*, unsigned long long*)+0xd>
c001f8a7:	b8 04 00 00 00       	mov    eax,0x4
c001f8ac:	c3                   	ret    
c001f8ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f8b2:	75 06                	jne    c001f8ba <FAT::tell(void*, unsigned long long*)+0x1a>
c001f8b4:	b8 04 00 00 00       	mov    eax,0x4
c001f8b9:	c3                   	ret    
c001f8ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8be:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001f8c1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001f8c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f8c8:	89 01                	mov    DWORD PTR [ecx],eax
c001f8ca:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f8cd:	b8 00 00 00 00       	mov    eax,0x0
c001f8d2:	c3                   	ret    
c001f8d3:	90                   	nop

c001f8d4 <FAT::stat(void*, unsigned long long*)>:
c001f8d4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f8d9:	75 06                	jne    c001f8e1 <FAT::stat(void*, unsigned long long*)+0xd>
c001f8db:	b8 04 00 00 00       	mov    eax,0x4
c001f8e0:	c3                   	ret    
c001f8e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f8e6:	75 06                	jne    c001f8ee <FAT::stat(void*, unsigned long long*)+0x1a>
c001f8e8:	b8 04 00 00 00       	mov    eax,0x4
c001f8ed:	c3                   	ret    
c001f8ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8f2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f8f5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f8f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f8fc:	89 01                	mov    DWORD PTR [ecx],eax
c001f8fe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f901:	b8 00 00 00 00       	mov    eax,0x0
c001f906:	c3                   	ret    
c001f907:	90                   	nop

c001f908 <FAT::~FAT()>:
c001f908:	83 ec 0c             	sub    esp,0xc
c001f90b:	ba 88 b3 02 c0       	mov    edx,0xc002b388
c001f910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f914:	89 10                	mov    DWORD PTR [eax],edx
c001f916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f91a:	83 ec 0c             	sub    esp,0xc
c001f91d:	50                   	push   eax
c001f91e:	e8 e1 32 ff ff       	call   c0012c04 <Filesystem::~Filesystem()>
c001f923:	83 c4 10             	add    esp,0x10
c001f926:	90                   	nop
c001f927:	83 c4 0c             	add    esp,0xc
c001f92a:	c3                   	ret    
c001f92b:	90                   	nop

c001f92c <FAT::~FAT()>:
c001f92c:	83 ec 0c             	sub    esp,0xc
c001f92f:	83 ec 0c             	sub    esp,0xc
c001f932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f936:	e8 cd ff ff ff       	call   c001f908 <FAT::~FAT()>
c001f93b:	83 c4 10             	add    esp,0x10
c001f93e:	83 ec 08             	sub    esp,0x8
c001f941:	6a 08                	push   0x8
c001f943:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f947:	e8 af 2e ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c001f94c:	83 c4 10             	add    esp,0x10
c001f94f:	83 c4 0c             	add    esp,0xc
c001f952:	c3                   	ret    
c001f953:	90                   	nop

c001f954 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001f954:	83 ec 1c             	sub    esp,0x1c
c001f957:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001f95e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001f963:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f967:	8b 04 85 00 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1b00]
c001f96e:	83 f8 ff             	cmp    eax,0xffffffff
c001f971:	75 34                	jne    c001f9a7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001f973:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f977:	88 c2                	mov    dl,al
c001f979:	a1 e0 e4 02 c0       	mov    eax,ds:0xc002e4e0
c001f97e:	01 d0                	add    eax,edx
c001f980:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f984:	8b 15 e0 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4e0
c001f98a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f98e:	89 14 85 00 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b00],edx
c001f995:	a1 e0 e4 02 c0       	mov    eax,ds:0xc002e4e0
c001f99a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f99e:	89 14 85 80 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a80],edx
c001f9a5:	eb 17                	jmp    c001f9be <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001f9a7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f9ab:	88 c2                	mov    dl,al
c001f9ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f9b1:	8b 04 85 00 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1b00]
c001f9b8:	01 d0                	add    eax,edx
c001f9ba:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f9be:	83 ec 04             	sub    esp,0x4
c001f9c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f9c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f9c9:	8d 44 24 15          	lea    eax,[esp+0x15]
c001f9cd:	50                   	push   eax
c001f9ce:	e8 60 71 fe ff       	call   c0006b33 <f_getlabel>
c001f9d3:	83 c4 10             	add    esp,0x10
c001f9d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f9da:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f9df:	75 07                	jne    c001f9e8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001f9e1:	b8 00 00 00 00       	mov    eax,0x0
c001f9e6:	eb 05                	jmp    c001f9ed <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001f9e8:	b8 01 00 00 00       	mov    eax,0x1
c001f9ed:	83 c4 1c             	add    esp,0x1c
c001f9f0:	c3                   	ret    
c001f9f1:	90                   	nop

c001f9f2 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001f9f2:	57                   	push   edi
c001f9f3:	83 ec 58             	sub    esp,0x58
c001f9f6:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001f9fe:	8d 54 24 10          	lea    edx,[esp+0x10]
c001fa02:	b9 0f 00 00 00       	mov    ecx,0xf
c001fa07:	b8 00 00 00 00       	mov    eax,0x0
c001fa0c:	fc                   	cld    
c001fa0d:	89 d7                	mov    edi,edx
c001fa0f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fa11:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fa15:	8b 04 85 00 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1b00]
c001fa1c:	83 f8 ff             	cmp    eax,0xffffffff
c001fa1f:	75 34                	jne    c001fa55 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001fa21:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fa25:	88 c2                	mov    dl,al
c001fa27:	a1 e0 e4 02 c0       	mov    eax,ds:0xc002e4e0
c001fa2c:	01 d0                	add    eax,edx
c001fa2e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fa32:	8b 15 e0 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4e0
c001fa38:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fa3c:	89 14 85 00 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b00],edx
c001fa43:	a1 e0 e4 02 c0       	mov    eax,ds:0xc002e4e0
c001fa48:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001fa4c:	89 14 85 80 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a80],edx
c001fa53:	eb 17                	jmp    c001fa6c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001fa55:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fa59:	88 c2                	mov    dl,al
c001fa5b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fa5f:	8b 04 85 00 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1b00]
c001fa66:	01 d0                	add    eax,edx
c001fa68:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fa6c:	83 ec 08             	sub    esp,0x8
c001fa6f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001fa73:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fa77:	50                   	push   eax
c001fa78:	e8 af 0d fe ff       	call   c000082c <strcat>
c001fa7d:	83 c4 10             	add    esp,0x10
c001fa80:	83 ec 0c             	sub    esp,0xc
c001fa83:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fa87:	50                   	push   eax
c001fa88:	e8 94 72 fe ff       	call   c0006d21 <f_setlabel>
c001fa8d:	83 c4 10             	add    esp,0x10
c001fa90:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001fa94:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001fa99:	75 07                	jne    c001faa2 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001fa9b:	b8 00 00 00 00       	mov    eax,0x0
c001faa0:	eb 05                	jmp    c001faa7 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001faa2:	b8 01 00 00 00       	mov    eax,0x1
c001faa7:	83 c4 58             	add    esp,0x58
c001faaa:	5f                   	pop    edi
c001faab:	c3                   	ret    

c001faac <FAT::format(LogicalDisk*, int, char const*, int)>:
c001faac:	83 ec 2c             	sub    esp,0x2c
c001faaf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001fab7:	83 ec 08             	sub    esp,0x8
c001faba:	68 28 b3 02 c0       	push   0xc002b328
c001fabf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fac3:	e8 fe 0c fe ff       	call   c00007c6 <strcmp>
c001fac8:	83 c4 10             	add    esp,0x10
c001facb:	85 c0                	test   eax,eax
c001facd:	0f 94 c0             	sete   al
c001fad0:	84 c0                	test   al,al
c001fad2:	74 0d                	je     c001fae1 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001fad4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fadc:	e9 a6 00 00 00       	jmp    c001fb87 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fae1:	83 ec 08             	sub    esp,0x8
c001fae4:	68 1a b3 02 c0       	push   0xc002b31a
c001fae9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001faed:	e8 d4 0c fe ff       	call   c00007c6 <strcmp>
c001faf2:	83 c4 10             	add    esp,0x10
c001faf5:	85 c0                	test   eax,eax
c001faf7:	0f 94 c0             	sete   al
c001fafa:	84 c0                	test   al,al
c001fafc:	74 0a                	je     c001fb08 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001fafe:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fb06:	eb 7f                	jmp    c001fb87 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fb08:	83 ec 08             	sub    esp,0x8
c001fb0b:	68 20 b3 02 c0       	push   0xc002b320
c001fb10:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fb14:	e8 ad 0c fe ff       	call   c00007c6 <strcmp>
c001fb19:	83 c4 10             	add    esp,0x10
c001fb1c:	85 c0                	test   eax,eax
c001fb1e:	0f 94 c0             	sete   al
c001fb21:	84 c0                	test   al,al
c001fb23:	74 0a                	je     c001fb2f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001fb25:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fb2d:	eb 58                	jmp    c001fb87 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fb2f:	83 ec 08             	sub    esp,0x8
c001fb32:	68 2c 82 02 c0       	push   0xc002822c
c001fb37:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fb3b:	e8 86 0c fe ff       	call   c00007c6 <strcmp>
c001fb40:	83 c4 10             	add    esp,0x10
c001fb43:	85 c0                	test   eax,eax
c001fb45:	0f 94 c0             	sete   al
c001fb48:	84 c0                	test   al,al
c001fb4a:	74 0a                	je     c001fb56 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001fb4c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001fb54:	eb 31                	jmp    c001fb87 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fb56:	83 ec 08             	sub    esp,0x8
c001fb59:	68 26 b3 02 c0       	push   0xc002b326
c001fb5e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fb62:	e8 5f 0c fe ff       	call   c00007c6 <strcmp>
c001fb67:	83 c4 10             	add    esp,0x10
c001fb6a:	85 c0                	test   eax,eax
c001fb6c:	0f 94 c0             	sete   al
c001fb6f:	84 c0                	test   al,al
c001fb71:	74 0a                	je     c001fb7d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001fb73:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001fb7b:	eb 0a                	jmp    c001fb87 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fb7d:	b8 08 00 00 00       	mov    eax,0x8
c001fb82:	e9 04 01 00 00       	jmp    c001fc8b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001fb87:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001fb8e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001fb93:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fb97:	8b 04 85 00 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1b00]
c001fb9e:	83 f8 ff             	cmp    eax,0xffffffff
c001fba1:	75 34                	jne    c001fbd7 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001fba3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001fba7:	88 c2                	mov    dl,al
c001fba9:	a1 e0 e4 02 c0       	mov    eax,ds:0xc002e4e0
c001fbae:	01 d0                	add    eax,edx
c001fbb0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001fbb4:	8b 15 e0 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4e0
c001fbba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fbbe:	89 14 85 00 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b00],edx
c001fbc5:	a1 e0 e4 02 c0       	mov    eax,ds:0xc002e4e0
c001fbca:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001fbce:	89 14 85 80 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a80],edx
c001fbd5:	eb 17                	jmp    c001fbee <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001fbd7:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001fbdb:	88 c2                	mov    dl,al
c001fbdd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fbe1:	8b 04 85 00 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1b00]
c001fbe8:	01 d0                	add    eax,edx
c001fbea:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001fbee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fbf2:	88 04 24             	mov    BYTE PTR [esp],al
c001fbf5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001fbf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbfd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001fc05:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001fc0a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fc12:	83 ec 0c             	sub    esp,0xc
c001fc15:	68 00 20 00 00       	push   0x2000
c001fc1a:	e8 17 fa fe ff       	call   c000f636 <malloc>
c001fc1f:	83 c4 10             	add    esp,0x10
c001fc22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fc26:	68 00 20 00 00       	push   0x2000
c001fc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc2f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fc33:	50                   	push   eax
c001fc34:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001fc38:	50                   	push   eax
c001fc39:	e8 2e 75 fe ff       	call   c000716c <f_mkfs>
c001fc3e:	83 c4 10             	add    esp,0x10
c001fc41:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fc45:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fc4a:	75 07                	jne    c001fc53 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001fc4c:	b8 00 00 00 00       	mov    eax,0x0
c001fc51:	eb 38                	jmp    c001fc8b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001fc53:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001fc58:	75 17                	jne    c001fc71 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001fc5a:	83 ec 0c             	sub    esp,0xc
c001fc5d:	68 58 b3 02 c0       	push   0xc002b358
c001fc62:	e8 74 2c ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001fc67:	83 c4 10             	add    esp,0x10
c001fc6a:	b8 09 00 00 00       	mov    eax,0x9
c001fc6f:	eb 1a                	jmp    c001fc8b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001fc71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc75:	83 ec 08             	sub    esp,0x8
c001fc78:	50                   	push   eax
c001fc79:	68 2c b3 02 c0       	push   0xc002b32c
c001fc7e:	e8 58 2c ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c001fc83:	83 c4 10             	add    esp,0x10
c001fc86:	b8 01 00 00 00       	mov    eax,0x1
c001fc8b:	83 c4 2c             	add    esp,0x2c
c001fc8e:	c3                   	ret    
c001fc8f:	90                   	nop

c001fc90 <FAT::tryMount(LogicalDisk*, int)>:
c001fc90:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001fc96:	a1 e0 e4 02 c0       	mov    eax,ds:0xc002e4e0
c001fc9b:	83 f8 14             	cmp    eax,0x14
c001fc9e:	75 17                	jne    c001fcb7 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001fca0:	83 ec 0c             	sub    esp,0xc
c001fca3:	68 3e b3 02 c0       	push   0xc002b33e
c001fca8:	e8 fe 9e ff ff       	call   c0019bab <Krnl::panic(char const*)>
c001fcad:	83 c4 10             	add    esp,0x10
c001fcb0:	b0 00                	mov    al,0x0
c001fcb2:	e9 d7 01 00 00       	jmp    c001fe8e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fcb7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001fcbe:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fcc4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fcca:	3d 00 02 00 00       	cmp    eax,0x200
c001fccf:	74 07                	je     c001fcd8 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001fcd1:	b0 00                	mov    al,0x0
c001fcd3:	e9 b6 01 00 00       	jmp    c001fe8e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fcd8:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001fce0:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001fce7:	8b 04 85 00 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1b00]
c001fcee:	83 f8 ff             	cmp    eax,0xffffffff
c001fcf1:	74 07                	je     c001fcfa <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001fcf3:	b0 01                	mov    al,0x1
c001fcf5:	e9 94 01 00 00       	jmp    c001fe8e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fcfa:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001fd04:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001fd0c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001fd13:	88 c2                	mov    dl,al
c001fd15:	a1 e0 e4 02 c0       	mov    eax,ds:0xc002e4e0
c001fd1a:	01 d0                	add    eax,edx
c001fd1c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001fd23:	8b 15 e0 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4e0
c001fd29:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001fd30:	89 14 85 00 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b00],edx
c001fd37:	a1 e0 e4 02 c0       	mov    eax,ds:0xc002e4e0
c001fd3c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001fd43:	89 14 85 80 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a80],edx
c001fd4a:	83 ec 0c             	sub    esp,0xc
c001fd4d:	68 54 02 00 00       	push   0x254
c001fd52:	e8 df f8 fe ff       	call   c000f636 <malloc>
c001fd57:	83 c4 10             	add    esp,0x10
c001fd5a:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001fd61:	83 ec 04             	sub    esp,0x4
c001fd64:	6a 00                	push   0x0
c001fd66:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fd6d:	50                   	push   eax
c001fd6e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fd75:	e8 b0 4f fe ff       	call   c0004d2a <f_mount>
c001fd7a:	83 c4 10             	add    esp,0x10
c001fd7d:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001fd84:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001fd8c:	74 19                	je     c001fda7 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001fd8e:	83 ec 0c             	sub    esp,0xc
c001fd91:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fd98:	e8 b9 f8 fe ff       	call   c000f656 <rfree>
c001fd9d:	83 c4 10             	add    esp,0x10
c001fda0:	b0 00                	mov    al,0x0
c001fda2:	e9 e7 00 00 00       	jmp    c001fe8e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fda7:	83 ec 04             	sub    esp,0x4
c001fdaa:	68 00 01 00 00       	push   0x100
c001fdaf:	6a 00                	push   0x0
c001fdb1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fdb8:	50                   	push   eax
c001fdb9:	e8 18 09 fe ff       	call   c00006d6 <memset>
c001fdbe:	83 c4 10             	add    esp,0x10
c001fdc1:	83 ec 08             	sub    esp,0x8
c001fdc4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fdcb:	50                   	push   eax
c001fdcc:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fdd3:	50                   	push   eax
c001fdd4:	e8 53 0a fe ff       	call   c000082c <strcat>
c001fdd9:	83 c4 10             	add    esp,0x10
c001fddc:	83 ec 08             	sub    esp,0x8
c001fddf:	68 4c b3 02 c0       	push   0xc002b34c
c001fde4:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fdeb:	50                   	push   eax
c001fdec:	e8 3b 0a fe ff       	call   c000082c <strcat>
c001fdf1:	83 c4 10             	add    esp,0x10
c001fdf4:	83 ec 04             	sub    esp,0x4
c001fdf7:	6a 01                	push   0x1
c001fdf9:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001fe00:	50                   	push   eax
c001fe01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fe05:	50                   	push   eax
c001fe06:	e8 81 4f fe ff       	call   c0004d8c <f_open>
c001fe0b:	83 c4 10             	add    esp,0x10
c001fe0e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001fe15:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001fe1c:	85 c0                	test   eax,eax
c001fe1e:	74 0a                	je     c001fe2a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001fe20:	78 2d                	js     c001fe4f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001fe22:	83 e8 04             	sub    eax,0x4
c001fe25:	83 f8 01             	cmp    eax,0x1
c001fe28:	77 25                	ja     c001fe4f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001fe2a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001fe32:	83 ec 0c             	sub    esp,0xc
c001fe35:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fe39:	50                   	push   eax
c001fe3a:	e8 9f 5a fe ff       	call   c00058de <f_close>
c001fe3f:	83 c4 10             	add    esp,0x10
c001fe42:	90                   	nop
c001fe43:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001fe4b:	74 3a                	je     c001fe87 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001fe4d:	eb 2d                	jmp    c001fe7c <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001fe4f:	83 ec 0c             	sub    esp,0xc
c001fe52:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fe59:	e8 f8 f7 fe ff       	call   c000f656 <rfree>
c001fe5e:	83 c4 10             	add    esp,0x10
c001fe61:	83 ec 04             	sub    esp,0x4
c001fe64:	6a 00                	push   0x0
c001fe66:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fe6d:	50                   	push   eax
c001fe6e:	6a 00                	push   0x0
c001fe70:	e8 b5 4e fe ff       	call   c0004d2a <f_mount>
c001fe75:	83 c4 10             	add    esp,0x10
c001fe78:	b0 00                	mov    al,0x0
c001fe7a:	eb 12                	jmp    c001fe8e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fe7c:	a1 e0 e4 02 c0       	mov    eax,ds:0xc002e4e0
c001fe81:	40                   	inc    eax
c001fe82:	a3 e0 e4 02 c0       	mov    ds:0xc002e4e0,eax
c001fe87:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001fe8e:	81 c4 6c 03 00 00    	add    esp,0x36c
c001fe94:	c3                   	ret    
c001fe95:	90                   	nop

c001fe96 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001fe96:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001fe9c:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001fea4:	74 0a                	je     c001feb0 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001fea6:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001feae:	75 0a                	jne    c001feba <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001feb0:	b8 04 00 00 00       	mov    eax,0x4
c001feb5:	e9 db 00 00 00       	jmp    c001ff95 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001feba:	83 ec 08             	sub    esp,0x8
c001febd:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fec4:	50                   	push   eax
c001fec5:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001fecc:	e8 17 60 fe ff       	call   c0005ee8 <f_readdir>
c001fed1:	83 c4 10             	add    esp,0x10
c001fed4:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001fedb:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001fee1:	83 ec 0c             	sub    esp,0xc
c001fee4:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001feeb:	83 c0 1a             	add    eax,0x1a
c001feee:	50                   	push   eax
c001feef:	e8 ff 07 fe ff       	call   c00006f3 <strlen>
c001fef4:	83 c4 10             	add    esp,0x10
c001fef7:	ba 00 00 00 00       	mov    edx,0x0
c001fefc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ff00:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ff04:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001ff0b:	0f b6 c0             	movzx  eax,al
c001ff0e:	83 e0 10             	and    eax,0x10
c001ff11:	74 07                	je     c001ff1a <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001ff13:	b8 02 00 00 00       	mov    eax,0x2
c001ff18:	eb 05                	jmp    c001ff1f <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001ff1a:	b8 01 00 00 00       	mov    eax,0x1
c001ff1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff23:	83 ec 08             	sub    esp,0x8
c001ff26:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ff2d:	83 c0 1a             	add    eax,0x1a
c001ff30:	50                   	push   eax
c001ff31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ff35:	83 c0 10             	add    eax,0x10
c001ff38:	50                   	push   eax
c001ff39:	e8 37 08 fe ff       	call   c0000775 <strcpy>
c001ff3e:	83 c4 10             	add    esp,0x10
c001ff41:	83 ec 04             	sub    esp,0x4
c001ff44:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001ff4b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ff4f:	50                   	push   eax
c001ff50:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001ff57:	e8 44 07 fe ff       	call   c00006a0 <memcpy>
c001ff5c:	83 c4 10             	add    esp,0x10
c001ff5f:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001ff66:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ff6c:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001ff73:	84 c0                	test   al,al
c001ff75:	75 07                	jne    c001ff7e <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001ff77:	b8 07 00 00 00       	mov    eax,0x7
c001ff7c:	eb 17                	jmp    c001ff95 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001ff7e:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001ff85:	85 c0                	test   eax,eax
c001ff87:	75 07                	jne    c001ff90 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001ff89:	b8 00 00 00 00       	mov    eax,0x0
c001ff8e:	eb 05                	jmp    c001ff95 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001ff90:	b8 01 00 00 00       	mov    eax,0x1
c001ff95:	81 c4 3c 02 00 00    	add    esp,0x23c
c001ff9b:	c3                   	ret    

c001ff9c <FAT::read(void*, unsigned long, void*, int*)>:
c001ff9c:	83 ec 1c             	sub    esp,0x1c
c001ff9f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ffa4:	74 07                	je     c001ffad <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001ffa6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ffab:	75 07                	jne    c001ffb4 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001ffad:	b8 04 00 00 00       	mov    eax,0x4
c001ffb2:	eb 3d                	jmp    c001fff1 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001ffb4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ffb8:	50                   	push   eax
c001ffb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ffbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ffc1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ffc5:	e8 fe 51 fe ff       	call   c00051c8 <f_read>
c001ffca:	83 c4 10             	add    esp,0x10
c001ffcd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ffd1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffd5:	89 c2                	mov    edx,eax
c001ffd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ffdb:	89 10                	mov    DWORD PTR [eax],edx
c001ffdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ffe1:	85 c0                	test   eax,eax
c001ffe3:	75 07                	jne    c001ffec <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001ffe5:	b8 00 00 00 00       	mov    eax,0x0
c001ffea:	eb 05                	jmp    c001fff1 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001ffec:	b8 01 00 00 00       	mov    eax,0x1
c001fff1:	83 c4 1c             	add    esp,0x1c
c001fff4:	c3                   	ret    
c001fff5:	90                   	nop

c001fff6 <FAT::write(void*, unsigned long, void*, int*)>:
c001fff6:	83 ec 1c             	sub    esp,0x1c
c001fff9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fffe:	74 07                	je     c0020007 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020000:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020005:	75 07                	jne    c002000e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020007:	b8 04 00 00 00       	mov    eax,0x4
c002000c:	eb 3d                	jmp    c002004b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002000e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020012:	50                   	push   eax
c0020013:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020017:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002001b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002001f:	e8 24 54 fe ff       	call   c0005448 <f_write>
c0020024:	83 c4 10             	add    esp,0x10
c0020027:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002002b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002002f:	89 c2                	mov    edx,eax
c0020031:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020035:	89 10                	mov    DWORD PTR [eax],edx
c0020037:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002003b:	85 c0                	test   eax,eax
c002003d:	75 07                	jne    c0020046 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c002003f:	b8 00 00 00 00       	mov    eax,0x0
c0020044:	eb 05                	jmp    c002004b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020046:	b8 01 00 00 00       	mov    eax,0x1
c002004b:	83 c4 1c             	add    esp,0x1c
c002004e:	c3                   	ret    
c002004f:	90                   	nop

c0020050 <FAT::close(void*)>:
c0020050:	83 ec 1c             	sub    esp,0x1c
c0020053:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020058:	75 07                	jne    c0020061 <FAT::close(void*)+0x11>
c002005a:	b8 04 00 00 00       	mov    eax,0x4
c002005f:	eb 36                	jmp    c0020097 <FAT::close(void*)+0x47>
c0020061:	83 ec 0c             	sub    esp,0xc
c0020064:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020068:	e8 71 58 fe ff       	call   c00058de <f_close>
c002006d:	83 c4 10             	add    esp,0x10
c0020070:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020074:	83 ec 0c             	sub    esp,0xc
c0020077:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002007b:	e8 c6 f5 fe ff       	call   c000f646 <free>
c0020080:	83 c4 10             	add    esp,0x10
c0020083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020087:	85 c0                	test   eax,eax
c0020089:	75 07                	jne    c0020092 <FAT::close(void*)+0x42>
c002008b:	b8 00 00 00 00       	mov    eax,0x0
c0020090:	eb 05                	jmp    c0020097 <FAT::close(void*)+0x47>
c0020092:	b8 01 00 00 00       	mov    eax,0x1
c0020097:	83 c4 1c             	add    esp,0x1c
c002009a:	c3                   	ret    
c002009b:	90                   	nop

c002009c <FAT::closeDir(void*)>:
c002009c:	83 ec 1c             	sub    esp,0x1c
c002009f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00200a4:	75 07                	jne    c00200ad <FAT::closeDir(void*)+0x11>
c00200a6:	b8 04 00 00 00       	mov    eax,0x4
c00200ab:	eb 36                	jmp    c00200e3 <FAT::closeDir(void*)+0x47>
c00200ad:	83 ec 0c             	sub    esp,0xc
c00200b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00200b4:	e8 0d 5e fe ff       	call   c0005ec6 <f_closedir>
c00200b9:	83 c4 10             	add    esp,0x10
c00200bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00200c0:	83 ec 0c             	sub    esp,0xc
c00200c3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00200c7:	e8 7a f5 fe ff       	call   c000f646 <free>
c00200cc:	83 c4 10             	add    esp,0x10
c00200cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00200d3:	85 c0                	test   eax,eax
c00200d5:	75 07                	jne    c00200de <FAT::closeDir(void*)+0x42>
c00200d7:	b8 00 00 00 00       	mov    eax,0x0
c00200dc:	eb 05                	jmp    c00200e3 <FAT::closeDir(void*)+0x47>
c00200de:	b8 01 00 00 00       	mov    eax,0x1
c00200e3:	83 c4 1c             	add    esp,0x1c
c00200e6:	c3                   	ret    
c00200e7:	90                   	nop

c00200e8 <FAT::seek(void*, unsigned long long)>:
c00200e8:	83 ec 2c             	sub    esp,0x2c
c00200eb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00200ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00200f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00200f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00200fb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020100:	75 07                	jne    c0020109 <FAT::seek(void*, unsigned long long)+0x21>
c0020102:	b8 04 00 00 00       	mov    eax,0x4
c0020107:	eb 2f                	jmp    c0020138 <FAT::seek(void*, unsigned long long)+0x50>
c0020109:	83 ec 04             	sub    esp,0x4
c002010c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020110:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020114:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020118:	e8 f0 57 fe ff       	call   c000590d <f_lseek>
c002011d:	83 c4 10             	add    esp,0x10
c0020120:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020124:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020128:	85 c0                	test   eax,eax
c002012a:	75 07                	jne    c0020133 <FAT::seek(void*, unsigned long long)+0x4b>
c002012c:	b8 00 00 00 00       	mov    eax,0x0
c0020131:	eb 05                	jmp    c0020138 <FAT::seek(void*, unsigned long long)+0x50>
c0020133:	b8 01 00 00 00       	mov    eax,0x1
c0020138:	83 c4 2c             	add    esp,0x2c
c002013b:	c3                   	ret    

c002013c <fatWrapperReadDisk>:
c002013c:	83 ec 1c             	sub    esp,0x1c
c002013f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020143:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020147:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002014b:	89 04 24             	mov    DWORD PTR [esp],eax
c002014e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020152:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020156:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002015b:	8b 04 85 e0 d4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2b20]
c0020162:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020166:	83 ec 0c             	sub    esp,0xc
c0020169:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002016d:	52                   	push   edx
c002016e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020172:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020176:	50                   	push   eax
c0020177:	e8 24 5e ff ff       	call   c0015fa0 <LogicalDisk::read(unsigned long long, int, void*)>
c002017c:	83 c4 20             	add    esp,0x20
c002017f:	83 c4 1c             	add    esp,0x1c
c0020182:	c3                   	ret    

c0020183 <fatWrapperWriteDisk>:
c0020183:	83 ec 1c             	sub    esp,0x1c
c0020186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002018a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002018e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020192:	89 04 24             	mov    DWORD PTR [esp],eax
c0020195:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002019d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00201a2:	8b 04 85 e0 d4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2b20]
c00201a9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00201ad:	83 ec 0c             	sub    esp,0xc
c00201b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00201b4:	52                   	push   edx
c00201b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00201b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00201bd:	50                   	push   eax
c00201be:	e8 49 5e ff ff       	call   c001600c <LogicalDisk::write(unsigned long long, int, void*)>
c00201c3:	83 c4 20             	add    esp,0x20
c00201c6:	83 c4 1c             	add    esp,0x1c
c00201c9:	c3                   	ret    

c00201ca <fatWrapperIoctl>:
c00201ca:	53                   	push   ebx
c00201cb:	83 ec 28             	sub    esp,0x28
c00201ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00201d2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00201d6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00201da:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00201de:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00201e3:	75 31                	jne    c0020216 <fatWrapperIoctl+0x4c>
c00201e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00201e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00201ed:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00201f2:	8b 04 85 e0 d4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2b20]
c00201f9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00201ff:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020205:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020209:	66 89 02             	mov    WORD PTR [edx],ax
c002020c:	b8 00 00 00 00       	mov    eax,0x0
c0020211:	e9 b2 00 00 00       	jmp    c00202c8 <fatWrapperIoctl+0xfe>
c0020216:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c002021b:	75 6a                	jne    c0020287 <fatWrapperIoctl+0xbd>
c002021d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020221:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020225:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002022a:	8b 04 85 e0 d4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2b20]
c0020231:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020237:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c002023d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020243:	89 c8                	mov    eax,ecx
c0020245:	89 da                	mov    edx,ebx
c0020247:	0f a4 c2 0a          	shld   edx,eax,0xa
c002024b:	c1 e0 0a             	shl    eax,0xa
c002024e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020253:	8b 0c 8d e0 d4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2b20]
c002025a:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020260:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020266:	89 cb                	mov    ebx,ecx
c0020268:	c1 fb 1f             	sar    ebx,0x1f
c002026b:	53                   	push   ebx
c002026c:	51                   	push   ecx
c002026d:	52                   	push   edx
c002026e:	50                   	push   eax
c002026f:	e8 58 55 00 00       	call   c00257cc <__udivdi3>
c0020274:	83 c4 10             	add    esp,0x10
c0020277:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002027b:	89 01                	mov    DWORD PTR [ecx],eax
c002027d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020280:	b8 00 00 00 00       	mov    eax,0x0
c0020285:	eb 41                	jmp    c00202c8 <fatWrapperIoctl+0xfe>
c0020287:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002028c:	75 07                	jne    c0020295 <fatWrapperIoctl+0xcb>
c002028e:	b8 00 00 00 00       	mov    eax,0x0
c0020293:	eb 33                	jmp    c00202c8 <fatWrapperIoctl+0xfe>
c0020295:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002029a:	75 19                	jne    c00202b5 <fatWrapperIoctl+0xeb>
c002029c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00202a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00202a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00202a8:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00202ae:	b8 00 00 00 00       	mov    eax,0x0
c00202b3:	eb 13                	jmp    c00202c8 <fatWrapperIoctl+0xfe>
c00202b5:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00202ba:	75 07                	jne    c00202c3 <fatWrapperIoctl+0xf9>
c00202bc:	b8 00 00 00 00       	mov    eax,0x0
c00202c1:	eb 05                	jmp    c00202c8 <fatWrapperIoctl+0xfe>
c00202c3:	b8 04 00 00 00       	mov    eax,0x4
c00202c8:	83 c4 28             	add    esp,0x28
c00202cb:	5b                   	pop    ebx
c00202cc:	c3                   	ret    
c00202cd:	90                   	nop

c00202ce <FAT::FAT()>:
c00202ce:	83 ec 1c             	sub    esp,0x1c
c00202d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00202d5:	83 ec 0c             	sub    esp,0xc
c00202d8:	50                   	push   eax
c00202d9:	e8 02 29 ff ff       	call   c0012be0 <Filesystem::Filesystem()>
c00202de:	83 c4 10             	add    esp,0x10
c00202e1:	ba 88 b3 02 c0       	mov    edx,0xc002b388
c00202e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00202ea:	89 10                	mov    DWORD PTR [eax],edx
c00202ec:	c7 05 e0 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e4e0,0x0
c00202f6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00202fe:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020303:	7f 15                	jg     c002031a <FAT::FAT()+0x4c>
c0020305:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020309:	c7 04 85 00 e5 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd1b00],0xffffffff
c0020314:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020318:	eb e4                	jmp    c00202fe <FAT::FAT()+0x30>
c002031a:	90                   	nop
c002031b:	83 c4 1c             	add    esp,0x1c
c002031e:	c3                   	ret    
c002031f:	90                   	nop

c0020320 <FAT::fixFilepath(char*)>:
c0020320:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020324:	8a 00                	mov    al,BYTE PTR [eax]
c0020326:	3c 40                	cmp    al,0x40
c0020328:	7e 2c                	jle    c0020356 <FAT::fixFilepath(char*)+0x36>
c002032a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002032e:	8a 00                	mov    al,BYTE PTR [eax]
c0020330:	83 e8 41             	sub    eax,0x41
c0020333:	88 c2                	mov    dl,al
c0020335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020339:	88 10                	mov    BYTE PTR [eax],dl
c002033b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002033f:	8a 00                	mov    al,BYTE PTR [eax]
c0020341:	0f be c0             	movsx  eax,al
c0020344:	8b 04 85 00 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1b00]
c002034b:	83 c0 30             	add    eax,0x30
c002034e:	88 c2                	mov    dl,al
c0020350:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020354:	88 10                	mov    BYTE PTR [eax],dl
c0020356:	90                   	nop
c0020357:	c3                   	ret    

c0020358 <FAT::open(char const*, void**, FileOpenMode)>:
c0020358:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002035e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020366:	74 0a                	je     c0020372 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020368:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020370:	75 0a                	jne    c002037c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020372:	b8 04 00 00 00       	mov    eax,0x4
c0020377:	e9 fd 00 00 00       	jmp    c0020479 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002037c:	83 ec 08             	sub    esp,0x8
c002037f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020386:	8d 44 24 14          	lea    eax,[esp+0x14]
c002038a:	50                   	push   eax
c002038b:	e8 e5 03 fe ff       	call   c0000775 <strcpy>
c0020390:	83 c4 10             	add    esp,0x10
c0020393:	83 ec 08             	sub    esp,0x8
c0020396:	8d 44 24 10          	lea    eax,[esp+0x10]
c002039a:	50                   	push   eax
c002039b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00203a2:	e8 79 ff ff ff       	call   c0020320 <FAT::fixFilepath(char*)>
c00203a7:	83 c4 10             	add    esp,0x10
c00203aa:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00203b2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00203b9:	83 e0 01             	and    eax,0x1
c00203bc:	74 08                	je     c00203c6 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00203be:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00203c6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00203cd:	83 e0 04             	and    eax,0x4
c00203d0:	74 10                	je     c00203e2 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00203d2:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00203da:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00203e2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00203e9:	83 e0 02             	and    eax,0x2
c00203ec:	74 08                	je     c00203f6 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00203ee:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00203f6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00203fd:	83 e0 08             	and    eax,0x8
c0020400:	74 08                	je     c002040a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020402:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002040a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020411:	83 e0 10             	and    eax,0x10
c0020414:	74 08                	je     c002041e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020416:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002041e:	83 ec 0c             	sub    esp,0xc
c0020421:	68 50 02 00 00       	push   0x250
c0020426:	e8 0b f2 fe ff       	call   c000f636 <malloc>
c002042b:	83 c4 10             	add    esp,0x10
c002042e:	89 c2                	mov    edx,eax
c0020430:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020437:	89 10                	mov    DWORD PTR [eax],edx
c0020439:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020441:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020448:	8b 00                	mov    eax,DWORD PTR [eax]
c002044a:	83 ec 04             	sub    esp,0x4
c002044d:	52                   	push   edx
c002044e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020452:	52                   	push   edx
c0020453:	50                   	push   eax
c0020454:	e8 33 49 fe ff       	call   c0004d8c <f_open>
c0020459:	83 c4 10             	add    esp,0x10
c002045c:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020463:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c002046b:	74 07                	je     c0020474 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c002046d:	b8 01 00 00 00       	mov    eax,0x1
c0020472:	eb 05                	jmp    c0020479 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020474:	b8 00 00 00 00       	mov    eax,0x0
c0020479:	81 c4 1c 01 00 00    	add    esp,0x11c
c002047f:	c3                   	ret    

c0020480 <FAT::openDir(char const*, void**)>:
c0020480:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020486:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002048e:	74 0a                	je     c002049a <FAT::openDir(char const*, void**)+0x1a>
c0020490:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020498:	75 07                	jne    c00204a1 <FAT::openDir(char const*, void**)+0x21>
c002049a:	b8 04 00 00 00       	mov    eax,0x4
c002049f:	eb 7d                	jmp    c002051e <FAT::openDir(char const*, void**)+0x9e>
c00204a1:	83 ec 08             	sub    esp,0x8
c00204a4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00204ab:	8d 44 24 18          	lea    eax,[esp+0x18]
c00204af:	50                   	push   eax
c00204b0:	e8 c0 02 fe ff       	call   c0000775 <strcpy>
c00204b5:	83 c4 10             	add    esp,0x10
c00204b8:	83 ec 08             	sub    esp,0x8
c00204bb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00204bf:	50                   	push   eax
c00204c0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00204c7:	e8 54 fe ff ff       	call   c0020320 <FAT::fixFilepath(char*)>
c00204cc:	83 c4 10             	add    esp,0x10
c00204cf:	83 ec 0c             	sub    esp,0xc
c00204d2:	6a 4c                	push   0x4c
c00204d4:	e8 5d f1 fe ff       	call   c000f636 <malloc>
c00204d9:	83 c4 10             	add    esp,0x10
c00204dc:	89 c2                	mov    edx,eax
c00204de:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00204e5:	89 10                	mov    DWORD PTR [eax],edx
c00204e7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00204ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00204f0:	83 ec 08             	sub    esp,0x8
c00204f3:	8d 54 24 14          	lea    edx,[esp+0x14]
c00204f7:	52                   	push   edx
c00204f8:	50                   	push   eax
c00204f9:	e8 c6 58 fe ff       	call   c0005dc4 <f_opendir>
c00204fe:	83 c4 10             	add    esp,0x10
c0020501:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020508:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020510:	74 07                	je     c0020519 <FAT::openDir(char const*, void**)+0x99>
c0020512:	b8 01 00 00 00       	mov    eax,0x1
c0020517:	eb 05                	jmp    c002051e <FAT::openDir(char const*, void**)+0x9e>
c0020519:	b8 00 00 00 00       	mov    eax,0x0
c002051e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020524:	c3                   	ret    
c0020525:	90                   	nop

c0020526 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020526:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002052c:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020534:	75 0a                	jne    c0020540 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020536:	b8 04 00 00 00       	mov    eax,0x4
c002053b:	e9 c9 00 00 00       	jmp    c0020609 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020540:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020548:	75 0a                	jne    c0020554 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c002054a:	b8 04 00 00 00       	mov    eax,0x4
c002054f:	e9 b5 00 00 00       	jmp    c0020609 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020554:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c002055c:	75 0a                	jne    c0020568 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002055e:	b8 04 00 00 00       	mov    eax,0x4
c0020563:	e9 a1 00 00 00       	jmp    c0020609 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020568:	83 ec 08             	sub    esp,0x8
c002056b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020572:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020579:	50                   	push   eax
c002057a:	e8 f6 01 fe ff       	call   c0000775 <strcpy>
c002057f:	83 c4 10             	add    esp,0x10
c0020582:	83 ec 08             	sub    esp,0x8
c0020585:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002058c:	50                   	push   eax
c002058d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020594:	e8 87 fd ff ff       	call   c0020320 <FAT::fixFilepath(char*)>
c0020599:	83 c4 10             	add    esp,0x10
c002059c:	83 ec 08             	sub    esp,0x8
c002059f:	8d 44 24 08          	lea    eax,[esp+0x8]
c00205a3:	50                   	push   eax
c00205a4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00205ab:	50                   	push   eax
c00205ac:	e8 d2 59 fe ff       	call   c0005f83 <f_stat>
c00205b1:	83 c4 10             	add    esp,0x10
c00205b4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00205bb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00205c2:	85 c0                	test   eax,eax
c00205c4:	74 07                	je     c00205cd <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00205c6:	83 f8 04             	cmp    eax,0x4
c00205c9:	74 32                	je     c00205fd <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00205cb:	eb 37                	jmp    c0020604 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00205cd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00205d1:	0f b6 c0             	movzx  eax,al
c00205d4:	83 e0 10             	and    eax,0x10
c00205d7:	0f 95 c2             	setne  dl
c00205da:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00205e1:	88 10                	mov    BYTE PTR [eax],dl
c00205e3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00205e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00205ea:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00205f1:	89 01                	mov    DWORD PTR [ecx],eax
c00205f3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205f6:	b8 00 00 00 00       	mov    eax,0x0
c00205fb:	eb 0c                	jmp    c0020609 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00205fd:	b8 02 00 00 00       	mov    eax,0x2
c0020602:	eb 05                	jmp    c0020609 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020604:	b8 01 00 00 00       	mov    eax,0x1
c0020609:	81 c4 2c 02 00 00    	add    esp,0x22c
c002060f:	c3                   	ret    

c0020610 <FAT::unlink(char const*)>:
c0020610:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020616:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002061e:	75 07                	jne    c0020627 <FAT::unlink(char const*)+0x17>
c0020620:	b8 04 00 00 00       	mov    eax,0x4
c0020625:	eb 5c                	jmp    c0020683 <FAT::unlink(char const*)+0x73>
c0020627:	83 ec 08             	sub    esp,0x8
c002062a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020631:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020635:	50                   	push   eax
c0020636:	e8 3a 01 fe ff       	call   c0000775 <strcpy>
c002063b:	83 c4 10             	add    esp,0x10
c002063e:	83 ec 08             	sub    esp,0x8
c0020641:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020645:	50                   	push   eax
c0020646:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002064d:	e8 ce fc ff ff       	call   c0020320 <FAT::fixFilepath(char*)>
c0020652:	83 c4 10             	add    esp,0x10
c0020655:	83 ec 0c             	sub    esp,0xc
c0020658:	8d 44 24 18          	lea    eax,[esp+0x18]
c002065c:	50                   	push   eax
c002065d:	e8 73 5c fe ff       	call   c00062d5 <f_unlink>
c0020662:	83 c4 10             	add    esp,0x10
c0020665:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002066c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020673:	85 c0                	test   eax,eax
c0020675:	75 07                	jne    c002067e <FAT::unlink(char const*)+0x6e>
c0020677:	b8 00 00 00 00       	mov    eax,0x0
c002067c:	eb 05                	jmp    c0020683 <FAT::unlink(char const*)+0x73>
c002067e:	b8 01 00 00 00       	mov    eax,0x1
c0020683:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020689:	c3                   	ret    

c002068a <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c002068a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020690:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020697:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002069e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00206a2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00206a6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00206ae:	75 0a                	jne    c00206ba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00206b0:	b8 04 00 00 00       	mov    eax,0x4
c00206b5:	e9 1c 01 00 00       	jmp    c00207d6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00206ba:	83 ec 08             	sub    esp,0x8
c00206bd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00206c4:	8d 44 24 24          	lea    eax,[esp+0x24]
c00206c8:	50                   	push   eax
c00206c9:	e8 a7 00 fe ff       	call   c0000775 <strcpy>
c00206ce:	83 c4 10             	add    esp,0x10
c00206d1:	83 ec 08             	sub    esp,0x8
c00206d4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00206d8:	50                   	push   eax
c00206d9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00206e0:	e8 3b fc ff ff       	call   c0020320 <FAT::fixFilepath(char*)>
c00206e5:	83 c4 10             	add    esp,0x10
c00206e8:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00206f0:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00206f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00206fd:	83 e0 01             	and    eax,0x1
c0020700:	74 08                	je     c002070a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020702:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002070a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002070f:	83 e0 02             	and    eax,0x2
c0020712:	74 08                	je     c002071c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020714:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002071c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020721:	83 e0 04             	and    eax,0x4
c0020724:	74 08                	je     c002072e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020726:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c002072e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020733:	83 e0 08             	and    eax,0x8
c0020736:	74 08                	je     c0020740 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020738:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020740:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020745:	83 e0 01             	and    eax,0x1
c0020748:	74 08                	je     c0020752 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c002074a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020752:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020757:	83 e0 02             	and    eax,0x2
c002075a:	74 08                	je     c0020764 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c002075c:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020764:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020769:	83 e0 04             	and    eax,0x4
c002076c:	74 08                	je     c0020776 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c002076e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020776:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002077b:	83 e0 08             	and    eax,0x8
c002077e:	74 08                	je     c0020788 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020780:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020788:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002078f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020796:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002079e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00207a6:	83 ec 04             	sub    esp,0x4
c00207a9:	52                   	push   edx
c00207aa:	50                   	push   eax
c00207ab:	8d 44 24 24          	lea    eax,[esp+0x24]
c00207af:	50                   	push   eax
c00207b0:	e8 c2 61 fe ff       	call   c0006977 <f_chmod>
c00207b5:	83 c4 10             	add    esp,0x10
c00207b8:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00207bf:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00207c6:	85 c0                	test   eax,eax
c00207c8:	75 07                	jne    c00207d1 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00207ca:	b8 00 00 00 00       	mov    eax,0x0
c00207cf:	eb 05                	jmp    c00207d6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00207d1:	b8 01 00 00 00       	mov    eax,0x1
c00207d6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00207dc:	c3                   	ret    
c00207dd:	90                   	nop

c00207de <FAT::rename(char const*, char const*)>:
c00207de:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00207e4:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00207ec:	74 0a                	je     c00207f8 <FAT::rename(char const*, char const*)+0x1a>
c00207ee:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00207f6:	75 0a                	jne    c0020802 <FAT::rename(char const*, char const*)+0x24>
c00207f8:	b8 04 00 00 00       	mov    eax,0x4
c00207fd:	e9 98 00 00 00       	jmp    c002089a <FAT::rename(char const*, char const*)+0xbc>
c0020802:	83 ec 08             	sub    esp,0x8
c0020805:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002080c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020813:	50                   	push   eax
c0020814:	e8 5c ff fd ff       	call   c0000775 <strcpy>
c0020819:	83 c4 10             	add    esp,0x10
c002081c:	83 ec 08             	sub    esp,0x8
c002081f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020826:	50                   	push   eax
c0020827:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002082e:	e8 ed fa ff ff       	call   c0020320 <FAT::fixFilepath(char*)>
c0020833:	83 c4 10             	add    esp,0x10
c0020836:	83 ec 08             	sub    esp,0x8
c0020839:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020840:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020844:	50                   	push   eax
c0020845:	e8 2b ff fd ff       	call   c0000775 <strcpy>
c002084a:	83 c4 10             	add    esp,0x10
c002084d:	83 ec 08             	sub    esp,0x8
c0020850:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020854:	50                   	push   eax
c0020855:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002085c:	e8 bf fa ff ff       	call   c0020320 <FAT::fixFilepath(char*)>
c0020861:	83 c4 10             	add    esp,0x10
c0020864:	83 ec 08             	sub    esp,0x8
c0020867:	8d 44 24 14          	lea    eax,[esp+0x14]
c002086b:	50                   	push   eax
c002086c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020873:	50                   	push   eax
c0020874:	e8 0b 5e fe ff       	call   c0006684 <f_rename>
c0020879:	83 c4 10             	add    esp,0x10
c002087c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020883:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002088a:	85 c0                	test   eax,eax
c002088c:	75 07                	jne    c0020895 <FAT::rename(char const*, char const*)+0xb7>
c002088e:	b8 00 00 00 00       	mov    eax,0x0
c0020893:	eb 05                	jmp    c002089a <FAT::rename(char const*, char const*)+0xbc>
c0020895:	b8 01 00 00 00       	mov    eax,0x1
c002089a:	81 c4 1c 02 00 00    	add    esp,0x21c
c00208a0:	c3                   	ret    
c00208a1:	90                   	nop

c00208a2 <FAT::mkdir(char const*)>:
c00208a2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00208a8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00208b0:	75 07                	jne    c00208b9 <FAT::mkdir(char const*)+0x17>
c00208b2:	b8 04 00 00 00       	mov    eax,0x4
c00208b7:	eb 5c                	jmp    c0020915 <FAT::mkdir(char const*)+0x73>
c00208b9:	83 ec 08             	sub    esp,0x8
c00208bc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00208c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00208c7:	50                   	push   eax
c00208c8:	e8 a8 fe fd ff       	call   c0000775 <strcpy>
c00208cd:	83 c4 10             	add    esp,0x10
c00208d0:	83 ec 08             	sub    esp,0x8
c00208d3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00208d7:	50                   	push   eax
c00208d8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00208df:	e8 3c fa ff ff       	call   c0020320 <FAT::fixFilepath(char*)>
c00208e4:	83 c4 10             	add    esp,0x10
c00208e7:	83 ec 0c             	sub    esp,0xc
c00208ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c00208ee:	50                   	push   eax
c00208ef:	e8 64 5b fe ff       	call   c0006458 <f_mkdir>
c00208f4:	83 c4 10             	add    esp,0x10
c00208f7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00208fe:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020905:	85 c0                	test   eax,eax
c0020907:	75 07                	jne    c0020910 <FAT::mkdir(char const*)+0x6e>
c0020909:	b8 00 00 00 00       	mov    eax,0x0
c002090e:	eb 05                	jmp    c0020915 <FAT::mkdir(char const*)+0x73>
c0020910:	b8 01 00 00 00       	mov    eax,0x1
c0020915:	81 c4 1c 01 00 00    	add    esp,0x11c
c002091b:	c3                   	ret    

c002091c <FAT::exists(char const*)>:
c002091c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020922:	83 ec 08             	sub    esp,0x8
c0020925:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002092c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020930:	50                   	push   eax
c0020931:	e8 3f fe fd ff       	call   c0000775 <strcpy>
c0020936:	83 c4 10             	add    esp,0x10
c0020939:	83 ec 08             	sub    esp,0x8
c002093c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020940:	50                   	push   eax
c0020941:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020948:	e8 d3 f9 ff ff       	call   c0020320 <FAT::fixFilepath(char*)>
c002094d:	83 c4 10             	add    esp,0x10
c0020950:	83 ec 08             	sub    esp,0x8
c0020953:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002095a:	50                   	push   eax
c002095b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002095f:	50                   	push   eax
c0020960:	e8 1e 56 fe ff       	call   c0005f83 <f_stat>
c0020965:	83 c4 10             	add    esp,0x10
c0020968:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002096f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020976:	85 c0                	test   eax,eax
c0020978:	75 04                	jne    c002097e <FAT::exists(char const*)+0x62>
c002097a:	b0 01                	mov    al,0x1
c002097c:	eb 02                	jmp    c0020980 <FAT::exists(char const*)+0x64>
c002097e:	b0 00                	mov    al,0x0
c0020980:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020986:	c3                   	ret    
c0020987:	90                   	nop

c0020988 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020988:	b8 08 00 00 00       	mov    eax,0x8
c002098d:	c3                   	ret    

c002098e <ISO9660::seek(void*, unsigned long long)>:
c002098e:	53                   	push   ebx
c002098f:	b8 04 00 00 00       	mov    eax,0x4
c0020994:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020998:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002099c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00209a0:	85 d2                	test   edx,edx
c00209a2:	74 17                	je     c00209bb <ISO9660::seek(void*, unsigned long long)+0x2d>
c00209a4:	89 c8                	mov    eax,ecx
c00209a6:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00209a9:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00209ac:	b8 01 00 00 00       	mov    eax,0x1
c00209b1:	73 08                	jae    c00209bb <ISO9660::seek(void*, unsigned long long)+0x2d>
c00209b3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00209b6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00209b9:	31 c0                	xor    eax,eax
c00209bb:	5b                   	pop    ebx
c00209bc:	c3                   	ret    
c00209bd:	90                   	nop

c00209be <ISO9660::tell(void*, unsigned long long*)>:
c00209be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00209c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00209c6:	85 d2                	test   edx,edx
c00209c8:	74 12                	je     c00209dc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00209ca:	85 c0                	test   eax,eax
c00209cc:	74 0e                	je     c00209dc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00209ce:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00209d1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00209d4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00209d7:	89 10                	mov    DWORD PTR [eax],edx
c00209d9:	31 c0                	xor    eax,eax
c00209db:	c3                   	ret    
c00209dc:	b8 04 00 00 00       	mov    eax,0x4
c00209e1:	c3                   	ret    

c00209e2 <ISO9660::getName()>:
c00209e2:	b8 e4 b3 02 c0       	mov    eax,0xc002b3e4
c00209e7:	c3                   	ret    

c00209e8 <ISO9660::stat(void*, unsigned long long*)>:
c00209e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00209ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00209f0:	85 d2                	test   edx,edx
c00209f2:	74 12                	je     c0020a06 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00209f4:	85 c0                	test   eax,eax
c00209f6:	74 0e                	je     c0020a06 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00209f8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00209fb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00209fe:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020a01:	89 10                	mov    DWORD PTR [eax],edx
c0020a03:	31 c0                	xor    eax,eax
c0020a05:	c3                   	ret    
c0020a06:	b8 04 00 00 00       	mov    eax,0x4
c0020a0b:	c3                   	ret    

c0020a0c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020a0c:	b8 01 00 00 00       	mov    eax,0x1
c0020a11:	c3                   	ret    

c0020a12 <ISO9660::unlink(char const*)>:
c0020a12:	b8 01 00 00 00       	mov    eax,0x1
c0020a17:	c3                   	ret    

c0020a18 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020a18:	b8 01 00 00 00       	mov    eax,0x1
c0020a1d:	c3                   	ret    

c0020a1e <ISO9660::rename(char const*, char const*)>:
c0020a1e:	b8 01 00 00 00       	mov    eax,0x1
c0020a23:	c3                   	ret    

c0020a24 <ISO9660::mkdir(char const*)>:
c0020a24:	b8 01 00 00 00       	mov    eax,0x1
c0020a29:	c3                   	ret    

c0020a2a <ISO9660::close(void*)>:
c0020a2a:	83 ec 0c             	sub    esp,0xc
c0020a2d:	b8 04 00 00 00       	mov    eax,0x4
c0020a32:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020a36:	85 d2                	test   edx,edx
c0020a38:	74 0e                	je     c0020a48 <ISO9660::close(void*)+0x1e>
c0020a3a:	83 ec 0c             	sub    esp,0xc
c0020a3d:	52                   	push   edx
c0020a3e:	e8 03 ec fe ff       	call   c000f646 <free>
c0020a43:	83 c4 10             	add    esp,0x10
c0020a46:	31 c0                	xor    eax,eax
c0020a48:	83 c4 0c             	add    esp,0xc
c0020a4b:	c3                   	ret    

c0020a4c <ISO9660::closeDir(void*)>:
c0020a4c:	83 ec 0c             	sub    esp,0xc
c0020a4f:	b8 04 00 00 00       	mov    eax,0x4
c0020a54:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020a58:	85 d2                	test   edx,edx
c0020a5a:	74 0e                	je     c0020a6a <ISO9660::closeDir(void*)+0x1e>
c0020a5c:	83 ec 0c             	sub    esp,0xc
c0020a5f:	52                   	push   edx
c0020a60:	e8 e1 eb fe ff       	call   c000f646 <free>
c0020a65:	83 c4 10             	add    esp,0x10
c0020a68:	31 c0                	xor    eax,eax
c0020a6a:	83 c4 0c             	add    esp,0xc
c0020a6d:	c3                   	ret    

c0020a6e <ISO9660::~ISO9660()>:
c0020a6e:	83 ec 0c             	sub    esp,0xc
c0020a71:	ba 48 b4 02 c0       	mov    edx,0xc002b448
c0020a76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a7a:	89 10                	mov    DWORD PTR [eax],edx
c0020a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a80:	83 ec 0c             	sub    esp,0xc
c0020a83:	50                   	push   eax
c0020a84:	e8 7b 21 ff ff       	call   c0012c04 <Filesystem::~Filesystem()>
c0020a89:	83 c4 10             	add    esp,0x10
c0020a8c:	90                   	nop
c0020a8d:	83 c4 0c             	add    esp,0xc
c0020a90:	c3                   	ret    
c0020a91:	90                   	nop

c0020a92 <ISO9660::~ISO9660()>:
c0020a92:	83 ec 0c             	sub    esp,0xc
c0020a95:	83 ec 0c             	sub    esp,0xc
c0020a98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a9c:	e8 cd ff ff ff       	call   c0020a6e <ISO9660::~ISO9660()>
c0020aa1:	83 c4 10             	add    esp,0x10
c0020aa4:	83 ec 08             	sub    esp,0x8
c0020aa7:	6a 08                	push   0x8
c0020aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020aad:	e8 49 1d ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0020ab2:	83 c4 10             	add    esp,0x10
c0020ab5:	83 c4 0c             	add    esp,0xc
c0020ab8:	c3                   	ret    

c0020ab9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020ab9:	55                   	push   ebp
c0020aba:	31 c9                	xor    ecx,ecx
c0020abc:	57                   	push   edi
c0020abd:	56                   	push   esi
c0020abe:	53                   	push   ebx
c0020abf:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0020ac3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020ac7:	89 eb                	mov    ebx,ebp
c0020ac9:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0020acd:	39 ce                	cmp    esi,ecx
c0020acf:	7e 17                	jle    c0020ae8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0020ad1:	31 d2                	xor    edx,edx
c0020ad3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0020ad7:	7d 13                	jge    c0020aec <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0020ad9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020add:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020ae0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0020ae3:	75 0d                	jne    c0020af2 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0020ae5:	42                   	inc    edx
c0020ae6:	eb eb                	jmp    c0020ad3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0020ae8:	31 c0                	xor    eax,eax
c0020aea:	eb 0a                	jmp    c0020af6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020aec:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020af0:	eb 04                	jmp    c0020af6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020af2:	41                   	inc    ecx
c0020af3:	43                   	inc    ebx
c0020af4:	eb d7                	jmp    c0020acd <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020af6:	5b                   	pop    ebx
c0020af7:	5e                   	pop    esi
c0020af8:	5f                   	pop    edi
c0020af9:	5d                   	pop    ebp
c0020afa:	c3                   	ret    

c0020afb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0020afb:	56                   	push   esi
c0020afc:	53                   	push   ebx
c0020afd:	52                   	push   edx
c0020afe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020b02:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020b06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020b0a:	39 0d e0 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5e0,ecx
c0020b10:	75 08                	jne    c0020b1a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0020b12:	38 05 54 c4 02 c0    	cmp    BYTE PTR ds:0xc002c454,al
c0020b18:	74 2b                	je     c0020b45 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0020b1a:	83 ec 0c             	sub    esp,0xc
c0020b1d:	a2 54 c4 02 c0       	mov    ds:0xc002c454,al
c0020b22:	68 00 e6 02 c0       	push   0xc002e600
c0020b27:	0f be c0             	movsx  eax,al
c0020b2a:	6a 01                	push   0x1
c0020b2c:	89 0d e0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5e0,ecx
c0020b32:	31 db                	xor    ebx,ebx
c0020b34:	53                   	push   ebx
c0020b35:	51                   	push   ecx
c0020b36:	ff 34 85 dc d3 02 c0 	push   DWORD PTR [eax*4-0x3ffd2c24]
c0020b3d:	e8 5e 54 ff ff       	call   c0015fa0 <LogicalDisk::read(unsigned long long, int, void*)>
c0020b42:	83 c4 20             	add    esp,0x20
c0020b45:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0020b4d:	c7 44 24 14 00 e6 02 c0 	mov    DWORD PTR [esp+0x14],0xc002e600
c0020b55:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020b59:	58                   	pop    eax
c0020b5a:	5b                   	pop    ebx
c0020b5b:	5e                   	pop    esi
c0020b5c:	e9 3f fb fd ff       	jmp    c00006a0 <memcpy>
c0020b61:	90                   	nop

c0020b62 <ISO9660::tryMount(LogicalDisk*, int)>:
c0020b62:	81 ec 10 08 00 00    	sub    esp,0x810
c0020b68:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0020b6f:	83 c0 41             	add    eax,0x41
c0020b72:	0f be c0             	movsx  eax,al
c0020b75:	50                   	push   eax
c0020b76:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b7a:	50                   	push   eax
c0020b7b:	6a 10                	push   0x10
c0020b7d:	e8 79 ff ff ff       	call   c0020afb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020b82:	83 c4 10             	add    esp,0x10
c0020b85:	31 c0                	xor    eax,eax
c0020b87:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0020b8c:	75 1d                	jne    c0020bab <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020b8e:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0020b93:	75 16                	jne    c0020bab <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020b95:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0020b9a:	75 0f                	jne    c0020bab <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020b9c:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0020ba1:	75 08                	jne    c0020bab <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020ba3:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0020ba8:	0f 94 c0             	sete   al
c0020bab:	81 c4 0c 08 00 00    	add    esp,0x80c
c0020bb1:	c3                   	ret    

c0020bb2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0020bb2:	55                   	push   ebp
c0020bb3:	57                   	push   edi
c0020bb4:	56                   	push   esi
c0020bb5:	53                   	push   ebx
c0020bb6:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0020bbc:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0020bc3:	85 ed                	test   ebp,ebp
c0020bc5:	0f 84 d6 01 00 00    	je     c0020da1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020bcb:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0020bd3:	0f 84 c8 01 00 00    	je     c0020da1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020bd9:	b8 01 00 00 00       	mov    eax,0x1
c0020bde:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0020be2:	0f 85 be 01 00 00    	jne    c0020da6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020be8:	31 d2                	xor    edx,edx
c0020bea:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020bf1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020bf4:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0020bf7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020bfb:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0020bfe:	89 04 24             	mov    DWORD PTR [esp],eax
c0020c01:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020c05:	01 f0                	add    eax,esi
c0020c07:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0020c0a:	11 fa                	adc    edx,edi
c0020c0c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0020c10:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0020c14:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020c18:	19 d1                	sbb    ecx,edx
c0020c1a:	72 0a                	jb     c0020c26 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0020c1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020c20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020c24:	eb 13                	jmp    c0020c39 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0020c26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020c2e:	29 f0                	sub    eax,esi
c0020c30:	19 fa                	sbb    edx,edi
c0020c32:	89 04 24             	mov    DWORD PTR [esp],eax
c0020c35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020c39:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020c3c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0020c3f:	0f a4 c2 0b          	shld   edx,eax,0xb
c0020c43:	51                   	push   ecx
c0020c44:	c1 e0 0b             	shl    eax,0xb
c0020c47:	01 c6                	add    esi,eax
c0020c49:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020c4d:	11 d7                	adc    edi,edx
c0020c4f:	50                   	push   eax
c0020c50:	89 fa                	mov    edx,edi
c0020c52:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0020c56:	89 f0                	mov    eax,esi
c0020c58:	53                   	push   ebx
c0020c59:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020c5d:	50                   	push   eax
c0020c5e:	e8 98 fe ff ff       	call   c0020afb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020c63:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020c67:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0020c6a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0020c6e:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0020c74:	83 c4 10             	add    esp,0x10
c0020c77:	b8 00 08 00 00       	mov    eax,0x800
c0020c7c:	29 d0                	sub    eax,edx
c0020c7e:	39 c1                	cmp    ecx,eax
c0020c80:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0020c84:	83 d9 00             	sbb    ecx,0x0
c0020c87:	7d 1c                	jge    c0020ca5 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0020c89:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0020c8e:	75 12                	jne    c0020ca2 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0020c90:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020c97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020c9d:	e9 fb 00 00 00       	jmp    c0020d9d <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0020ca2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020ca5:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0020ca8:	31 d2                	xor    edx,edx
c0020caa:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0020cae:	39 c2                	cmp    edx,eax
c0020cb0:	7d 14                	jge    c0020cc6 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0020cb2:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0020cb9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020cbd:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0020cc0:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0020cc3:	42                   	inc    edx
c0020cc4:	eb e8                	jmp    c0020cae <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0020cc6:	89 c3                	mov    ebx,eax
c0020cc8:	85 c0                	test   eax,eax
c0020cca:	79 02                	jns    c0020cce <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0020ccc:	31 db                	xor    ebx,ebx
c0020cce:	99                   	cdq    
c0020ccf:	01 c3                	add    ebx,eax
c0020cd1:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0020cd8:	01 c6                	add    esi,eax
c0020cda:	11 d7                	adc    edi,edx
c0020cdc:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020ce0:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020ce4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0020ce7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0020ceb:	29 c6                	sub    esi,eax
c0020ced:	19 d7                	sbb    edi,edx
c0020cef:	89 34 24             	mov    DWORD PTR [esp],esi
c0020cf2:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0020cf6:	b8 ff 07 00 00       	mov    eax,0x7ff
c0020cfb:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0020cfe:	b8 00 00 00 00       	mov    eax,0x0
c0020d03:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020d07:	7d 3e                	jge    c0020d47 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0020d09:	52                   	push   edx
c0020d0a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020d0e:	50                   	push   eax
c0020d0f:	53                   	push   ebx
c0020d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d14:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020d18:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020d1c:	50                   	push   eax
c0020d1d:	e8 d9 fd ff ff       	call   c0020afb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020d22:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0020d2a:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0020d2f:	81 c3 00 08 00 00    	add    ebx,0x800
c0020d35:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0020d3d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0020d42:	83 c4 10             	add    esp,0x10
c0020d45:	eb af                	jmp    c0020cf6 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0020d47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020d4b:	0b 04 24             	or     eax,DWORD PTR [esp]
c0020d4e:	74 32                	je     c0020d82 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0020d50:	50                   	push   eax
c0020d51:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020d55:	50                   	push   eax
c0020d56:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020d5a:	50                   	push   eax
c0020d5b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0020d5f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0020d63:	0f ac fe 0b          	shrd   esi,edi,0xb
c0020d67:	56                   	push   esi
c0020d68:	e8 8e fd ff ff       	call   c0020afb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020d6d:	83 c4 0c             	add    esp,0xc
c0020d70:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0020d74:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020d78:	50                   	push   eax
c0020d79:	53                   	push   ebx
c0020d7a:	e8 21 f9 fd ff       	call   c00006a0 <memcpy>
c0020d7f:	83 c4 10             	add    esp,0x10
c0020d82:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020d89:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020d8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020d91:	89 38                	mov    DWORD PTR [eax],edi
c0020d93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d97:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0020d9a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0020d9d:	31 c0                	xor    eax,eax
c0020d9f:	eb 05                	jmp    c0020da6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020da1:	b8 04 00 00 00       	mov    eax,0x4
c0020da6:	81 c4 2c 08 00 00    	add    esp,0x82c
c0020dac:	5b                   	pop    ebx
c0020dad:	5e                   	pop    esi
c0020dae:	5f                   	pop    edi
c0020daf:	5d                   	pop    ebp
c0020db0:	c3                   	ret    
c0020db1:	90                   	nop

c0020db2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0020db2:	55                   	push   ebp
c0020db3:	57                   	push   edi
c0020db4:	56                   	push   esi
c0020db5:	53                   	push   ebx
c0020db6:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0020dbc:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0020dc3:	85 f6                	test   esi,esi
c0020dc5:	0f 84 64 02 00 00    	je     c002102f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020dcb:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0020dd3:	0f 84 56 02 00 00    	je     c002102f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020dd9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0020ddc:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0020ddf:	75 0a                	jne    c0020deb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0020de1:	b8 07 00 00 00       	mov    eax,0x7
c0020de6:	e9 49 02 00 00       	jmp    c0021034 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020deb:	50                   	push   eax
c0020dec:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020df0:	50                   	push   eax
c0020df1:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020df8:	53                   	push   ebx
c0020df9:	8b 06                	mov    eax,DWORD PTR [esi]
c0020dfb:	c1 e0 0b             	shl    eax,0xb
c0020dfe:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0020e01:	c1 e8 0b             	shr    eax,0xb
c0020e04:	50                   	push   eax
c0020e05:	e8 f1 fc ff ff       	call   c0020afb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020e0a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020e0d:	83 c4 10             	add    esp,0x10
c0020e10:	89 c1                	mov    ecx,eax
c0020e12:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0020e15:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0020e1b:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0020e1e:	84 db                	test   bl,bl
c0020e20:	0f 85 90 00 00 00    	jne    c0020eb6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0020e26:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0020e2c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020e32:	29 c7                	sub    edi,eax
c0020e34:	89 fb                	mov    ebx,edi
c0020e36:	c1 fb 1f             	sar    ebx,0x1f
c0020e39:	01 f8                	add    eax,edi
c0020e3b:	11 da                	adc    edx,ebx
c0020e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020e45:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0020e48:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0020e4b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020e4e:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020e51:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020e58:	89 d8                	mov    eax,ebx
c0020e5a:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020e5d:	ba 00 00 00 00       	mov    edx,0x0
c0020e62:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020e66:	b8 00 00 00 00       	mov    eax,0x0
c0020e6b:	73 0b                	jae    c0020e78 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0020e6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020e70:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020e74:	29 f8                	sub    eax,edi
c0020e76:	19 da                	sbb    edx,ebx
c0020e78:	89 d3                	mov    ebx,edx
c0020e7a:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020e7d:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020e80:	09 c3                	or     ebx,eax
c0020e82:	0f 84 59 ff ff ff    	je     c0020de1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0020e88:	55                   	push   ebp
c0020e89:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020e8d:	50                   	push   eax
c0020e8e:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020e95:	53                   	push   ebx
c0020e96:	8b 06                	mov    eax,DWORD PTR [esi]
c0020e98:	c1 e0 0b             	shl    eax,0xb
c0020e9b:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0020e9f:	c1 e8 0b             	shr    eax,0xb
c0020ea2:	50                   	push   eax
c0020ea3:	e8 53 fc ff ff       	call   c0020afb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020ea8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020eab:	83 c4 10             	add    esp,0x10
c0020eae:	25 ff 07 00 00       	and    eax,0x7ff
c0020eb3:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0020eb6:	57                   	push   edi
c0020eb7:	6a 28                	push   0x28
c0020eb9:	6a 00                	push   0x0
c0020ebb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020ebf:	50                   	push   eax
c0020ec0:	e8 11 f8 fd ff       	call   c00006d6 <memset>
c0020ec5:	31 d2                	xor    edx,edx
c0020ec7:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0020eca:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020ed0:	89 f8                	mov    eax,edi
c0020ed2:	83 c0 21             	add    eax,0x21
c0020ed5:	83 d2 00             	adc    edx,0x0
c0020ed8:	89 c7                	mov    edi,eax
c0020eda:	89 d5                	mov    ebp,edx
c0020edc:	83 c4 10             	add    esp,0x10
c0020edf:	31 c9                	xor    ecx,ecx
c0020ee1:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0020ee8:	83 f9 28             	cmp    ecx,0x28
c0020eeb:	88 04 24             	mov    BYTE PTR [esp],al
c0020eee:	0f 94 c2             	sete   dl
c0020ef1:	88 d0                	mov    al,dl
c0020ef3:	ba ff 07 00 00       	mov    edx,0x7ff
c0020ef8:	39 fa                	cmp    edx,edi
c0020efa:	ba 00 00 00 00       	mov    edx,0x0
c0020eff:	19 ea                	sbb    edx,ebp
c0020f01:	0f 92 c2             	setb   dl
c0020f04:	09 c2                	or     edx,eax
c0020f06:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0020f0a:	0f 94 c0             	sete   al
c0020f0d:	08 d0                	or     al,dl
c0020f0f:	75 16                	jne    c0020f27 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020f11:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0020f15:	74 10                	je     c0020f27 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020f17:	8a 04 24             	mov    al,BYTE PTR [esp]
c0020f1a:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0020f1e:	41                   	inc    ecx
c0020f1f:	83 c7 01             	add    edi,0x1
c0020f22:	83 d5 00             	adc    ebp,0x0
c0020f25:	eb ba                	jmp    c0020ee1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0020f27:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0020f2e:	83 ec 0c             	sub    esp,0xc
c0020f31:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020f35:	57                   	push   edi
c0020f36:	e8 b8 f7 fd ff       	call   c00006f3 <strlen>
c0020f3b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0020f43:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020f47:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0020f4e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020f51:	5a                   	pop    edx
c0020f52:	25 ff 07 00 00       	and    eax,0x7ff
c0020f57:	01 c8                	add    eax,ecx
c0020f59:	59                   	pop    ecx
c0020f5a:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0020f60:	83 e0 02             	and    eax,0x2
c0020f63:	3c 01                	cmp    al,0x1
c0020f65:	19 c0                	sbb    eax,eax
c0020f67:	83 c0 02             	add    eax,0x2
c0020f6a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020f6e:	57                   	push   edi
c0020f6f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0020f73:	50                   	push   eax
c0020f74:	e8 fc f7 fd ff       	call   c0000775 <strcpy>
c0020f79:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0020f7d:	83 c4 10             	add    esp,0x10
c0020f80:	84 c0                	test   al,al
c0020f82:	75 21                	jne    c0020fa5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0020f84:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0020f8c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020f94:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020f9c:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0020fa3:	eb 28                	jmp    c0020fcd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020fa5:	fe c8                	dec    al
c0020fa7:	75 24                	jne    c0020fcd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020fa9:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0020fb1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020fb9:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020fc1:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0020fc8:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0020fcd:	0f b6 fb             	movzx  edi,bl
c0020fd0:	31 db                	xor    ebx,ebx
c0020fd2:	50                   	push   eax
c0020fd3:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0020fda:	8d 44 24 48          	lea    eax,[esp+0x48]
c0020fde:	50                   	push   eax
c0020fdf:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0020fe6:	e8 b5 f6 fd ff       	call   c00006a0 <memcpy>
c0020feb:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0020ff2:	89 f9                	mov    ecx,edi
c0020ff4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020ffa:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0020ffd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021000:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021003:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021006:	83 c4 10             	add    esp,0x10
c0021009:	39 c7                	cmp    edi,eax
c002100b:	89 df                	mov    edi,ebx
c002100d:	19 d7                	sbb    edi,edx
c002100f:	72 10                	jb     c0021021 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021011:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021018:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c002101f:	eb 0a                	jmp    c002102b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021021:	29 c8                	sub    eax,ecx
c0021023:	19 da                	sbb    edx,ebx
c0021025:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021028:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c002102b:	31 c0                	xor    eax,eax
c002102d:	eb 05                	jmp    c0021034 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c002102f:	b8 04 00 00 00       	mov    eax,0x4
c0021034:	81 c4 5c 09 00 00    	add    esp,0x95c
c002103a:	5b                   	pop    ebx
c002103b:	5e                   	pop    esi
c002103c:	5f                   	pop    edi
c002103d:	5d                   	pop    ebp
c002103e:	c3                   	ret    

c002103f <readRoot(unsigned int*, unsigned int*, char)>:
c002103f:	81 ec 40 08 00 00    	sub    esp,0x840
c0021045:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c002104d:	50                   	push   eax
c002104e:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021052:	50                   	push   eax
c0021053:	6a 10                	push   0x10
c0021055:	e8 a1 fa ff ff       	call   c0020afb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002105a:	83 c4 0c             	add    esp,0xc
c002105d:	6a 22                	push   0x22
c002105f:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021066:	50                   	push   eax
c0021067:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002106b:	50                   	push   eax
c002106c:	e8 2f f6 fd ff       	call   c00006a0 <memcpy>
c0021071:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021078:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002107c:	89 10                	mov    DWORD PTR [eax],edx
c002107e:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021085:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021089:	89 10                	mov    DWORD PTR [eax],edx
c002108b:	b0 01                	mov    al,0x1
c002108d:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021093:	c3                   	ret    

c0021094 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021094:	55                   	push   ebp
c0021095:	57                   	push   edi
c0021096:	56                   	push   esi
c0021097:	53                   	push   ebx
c0021098:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002109e:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00210a5:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00210ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00210b0:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00210b4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00210b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00210bc:	75 03                	jne    c00210c1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00210be:	83 c3 02             	add    ebx,0x2
c00210c1:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00210c4:	75 03                	jne    c00210c9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00210c6:	43                   	inc    ebx
c00210c7:	eb f8                	jmp    c00210c1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00210c9:	51                   	push   ecx
c00210ca:	68 00 01 00 00       	push   0x100
c00210cf:	6a 00                	push   0x0
c00210d1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00210d5:	50                   	push   eax
c00210d6:	e8 fb f5 fd ff       	call   c00006d6 <memset>
c00210db:	83 c4 10             	add    esp,0x10
c00210de:	31 d2                	xor    edx,edx
c00210e0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00210e3:	84 c0                	test   al,al
c00210e5:	74 21                	je     c0021108 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00210e7:	3c 2f                	cmp    al,0x2f
c00210e9:	75 0b                	jne    c00210f6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00210eb:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00210ef:	bd 01 00 00 00       	mov    ebp,0x1
c00210f4:	eb 14                	jmp    c002110a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00210f6:	8d 48 9f             	lea    ecx,[eax-0x61]
c00210f9:	80 f9 19             	cmp    cl,0x19
c00210fc:	77 03                	ja     c0021101 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00210fe:	83 e8 20             	sub    eax,0x20
c0021101:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021105:	42                   	inc    edx
c0021106:	eb d8                	jmp    c00210e0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021108:	31 ed                	xor    ebp,ebp
c002110a:	83 ec 0c             	sub    esp,0xc
c002110d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021114:	e8 1d e5 fe ff       	call   c000f636 <malloc>
c0021119:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021120:	89 c6                	mov    esi,eax
c0021122:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021128:	c1 ef 0b             	shr    edi,0xb
c002112b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021132:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021136:	83 c4 10             	add    esp,0x10
c0021139:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c002113e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021142:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021149:	74 28                	je     c0021173 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c002114b:	52                   	push   edx
c002114c:	57                   	push   edi
c002114d:	50                   	push   eax
c002114e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021152:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021159:	e8 9d f9 ff ff       	call   c0020afb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002115e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021162:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021169:	05 00 08 00 00       	add    eax,0x800
c002116e:	83 c4 10             	add    esp,0x10
c0021171:	eb cb                	jmp    c002113e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021173:	83 ec 0c             	sub    esp,0xc
c0021176:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c002117a:	57                   	push   edi
c002117b:	e8 73 f5 fd ff       	call   c00006f3 <strlen>
c0021180:	50                   	push   eax
c0021181:	57                   	push   edi
c0021182:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021189:	56                   	push   esi
c002118a:	e8 2a f9 ff ff       	call   c0020ab9 <__memmem(unsigned char*, int, unsigned char*, int)>
c002118f:	83 c4 20             	add    esp,0x20
c0021192:	85 c0                	test   eax,eax
c0021194:	75 13                	jne    c00211a9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021196:	83 ec 0c             	sub    esp,0xc
c0021199:	56                   	push   esi
c002119a:	e8 a7 e4 fe ff       	call   c000f646 <free>
c002119f:	83 c4 10             	add    esp,0x10
c00211a2:	31 c0                	xor    eax,eax
c00211a4:	e9 b3 00 00 00       	jmp    c002125c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00211a9:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00211ad:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00211b1:	c1 e7 08             	shl    edi,0x8
c00211b4:	c1 e2 10             	shl    edx,0x10
c00211b7:	09 d7                	or     edi,edx
c00211b9:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00211bd:	09 d7                	or     edi,edx
c00211bf:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00211c3:	c1 e2 18             	shl    edx,0x18
c00211c6:	09 d7                	or     edi,edx
c00211c8:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00211cc:	89 d1                	mov    ecx,edx
c00211ce:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00211d2:	c1 e1 08             	shl    ecx,0x8
c00211d5:	c1 e2 10             	shl    edx,0x10
c00211d8:	09 ca                	or     edx,ecx
c00211da:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00211de:	09 ca                	or     edx,ecx
c00211e0:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00211e4:	c1 e1 18             	shl    ecx,0x18
c00211e7:	09 ca                	or     edx,ecx
c00211e9:	89 e9                	mov    ecx,ebp
c00211eb:	84 c9                	test   cl,cl
c00211ed:	74 3c                	je     c002122b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00211ef:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00211f3:	83 ec 0c             	sub    esp,0xc
c00211f6:	56                   	push   esi
c00211f7:	e8 4a e4 fe ff       	call   c000f646 <free>
c00211fc:	83 c4 0c             	add    esp,0xc
c00211ff:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021206:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c002120b:	50                   	push   eax
c002120c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021213:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002121a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002121e:	52                   	push   edx
c002121f:	57                   	push   edi
c0021220:	53                   	push   ebx
c0021221:	e8 6e fe ff ff       	call   c0021094 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021226:	83 c4 20             	add    esp,0x20
c0021229:	eb 31                	jmp    c002125c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002122b:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c002122e:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021235:	d0 e8                	shr    al,1
c0021237:	89 3b                	mov    DWORD PTR [ebx],edi
c0021239:	83 e0 01             	and    eax,0x1
c002123c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021243:	83 ec 0c             	sub    esp,0xc
c0021246:	89 13                	mov    DWORD PTR [ebx],edx
c0021248:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c002124f:	89 03                	mov    DWORD PTR [ebx],eax
c0021251:	56                   	push   esi
c0021252:	e8 ef e3 fe ff       	call   c000f646 <free>
c0021257:	83 c4 10             	add    esp,0x10
c002125a:	b0 01                	mov    al,0x1
c002125c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021262:	5b                   	pop    ebx
c0021263:	5e                   	pop    esi
c0021264:	5f                   	pop    edi
c0021265:	5d                   	pop    ebp
c0021266:	c3                   	ret    

c0021267 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021267:	55                   	push   ebp
c0021268:	57                   	push   edi
c0021269:	56                   	push   esi
c002126a:	53                   	push   ebx
c002126b:	83 ec 20             	sub    esp,0x20
c002126e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021272:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021276:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002127a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021282:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002128a:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c002128f:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021295:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c002129b:	57                   	push   edi
c002129c:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212a0:	50                   	push   eax
c00212a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212a5:	50                   	push   eax
c00212a6:	e8 94 fd ff ff       	call   c002103f <readRoot(unsigned int*, unsigned int*, char)>
c00212ab:	5a                   	pop    edx
c00212ac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00212b0:	e8 3e f4 fd ff       	call   c00006f3 <strlen>
c00212b5:	83 c4 10             	add    esp,0x10
c00212b8:	83 f8 03             	cmp    eax,0x3
c00212bb:	77 17                	ja     c00212d4 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00212bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00212c1:	89 03                	mov    DWORD PTR [ebx],eax
c00212c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212c7:	89 06                	mov    DWORD PTR [esi],eax
c00212c9:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00212d0:	b0 01                	mov    al,0x1
c00212d2:	eb 19                	jmp    c00212ed <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00212d4:	50                   	push   eax
c00212d5:	55                   	push   ebp
c00212d6:	57                   	push   edi
c00212d7:	56                   	push   esi
c00212d8:	53                   	push   ebx
c00212d9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00212dd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00212e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00212e5:	e8 aa fd ff ff       	call   c0021094 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00212ea:	83 c4 20             	add    esp,0x20
c00212ed:	83 c4 1c             	add    esp,0x1c
c00212f0:	5b                   	pop    ebx
c00212f1:	5e                   	pop    esi
c00212f2:	5f                   	pop    edi
c00212f3:	5d                   	pop    ebp
c00212f4:	c3                   	ret    
c00212f5:	90                   	nop

c00212f6 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00212f6:	57                   	push   edi
c00212f7:	56                   	push   esi
c00212f8:	53                   	push   ebx
c00212f9:	83 ec 10             	sub    esp,0x10
c00212fc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021300:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021304:	85 ff                	test   edi,edi
c0021306:	0f 84 9d 00 00 00    	je     c00213a9 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002130c:	85 f6                	test   esi,esi
c002130e:	0f 84 95 00 00 00    	je     c00213a9 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021314:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021319:	74 17                	je     c0021332 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c002131b:	83 ec 0c             	sub    esp,0xc
c002131e:	68 ff b3 02 c0       	push   0xc002b3ff
c0021323:	e8 b3 15 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0021328:	83 c4 10             	add    esp,0x10
c002132b:	b8 03 00 00 00       	mov    eax,0x3
c0021330:	eb 7c                	jmp    c00213ae <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021332:	83 ec 0c             	sub    esp,0xc
c0021335:	6a 1c                	push   0x1c
c0021337:	e8 fa e2 fe ff       	call   c000f636 <malloc>
c002133c:	89 07                	mov    DWORD PTR [edi],eax
c002133e:	89 c3                	mov    ebx,eax
c0021340:	58                   	pop    eax
c0021341:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021345:	50                   	push   eax
c0021346:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021349:	50                   	push   eax
c002134a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002134e:	50                   	push   eax
c002134f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021353:	50                   	push   eax
c0021354:	56                   	push   esi
c0021355:	e8 0d ff ff ff       	call   c0021267 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002135a:	83 c4 20             	add    esp,0x20
c002135d:	84 c0                	test   al,al
c002135f:	74 07                	je     c0021368 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021361:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021366:	74 0b                	je     c0021373 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021368:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002136c:	b8 01 00 00 00       	mov    eax,0x1
c0021371:	eb 3b                	jmp    c00213ae <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021373:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021377:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002137b:	89 03                	mov    DWORD PTR [ebx],eax
c002137d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021384:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021388:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002138f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021396:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021399:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00213a0:	8a 06                	mov    al,BYTE PTR [esi]
c00213a2:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00213a5:	31 c0                	xor    eax,eax
c00213a7:	eb 05                	jmp    c00213ae <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00213a9:	b8 04 00 00 00       	mov    eax,0x4
c00213ae:	83 c4 10             	add    esp,0x10
c00213b1:	5b                   	pop    ebx
c00213b2:	5e                   	pop    esi
c00213b3:	5f                   	pop    edi
c00213b4:	c3                   	ret    
c00213b5:	90                   	nop

c00213b6 <ISO9660::exists(char const*)>:
c00213b6:	83 ec 28             	sub    esp,0x28
c00213b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00213bd:	8d 54 24 18          	lea    edx,[esp+0x18]
c00213c1:	52                   	push   edx
c00213c2:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00213c5:	52                   	push   edx
c00213c6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00213ca:	52                   	push   edx
c00213cb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00213cf:	52                   	push   edx
c00213d0:	50                   	push   eax
c00213d1:	e8 91 fe ff ff       	call   c0021267 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00213d6:	83 c4 3c             	add    esp,0x3c
c00213d9:	c3                   	ret    

c00213da <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00213da:	56                   	push   esi
c00213db:	53                   	push   ebx
c00213dc:	83 ec 14             	sub    esp,0x14
c00213df:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00213e3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00213e7:	85 db                	test   ebx,ebx
c00213e9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00213ed:	0f 94 c2             	sete   dl
c00213f0:	85 f6                	test   esi,esi
c00213f2:	0f 94 c0             	sete   al
c00213f5:	08 c2                	or     dl,al
c00213f7:	75 68                	jne    c0021461 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00213f9:	85 c9                	test   ecx,ecx
c00213fb:	74 64                	je     c0021461 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00213fd:	83 ec 0c             	sub    esp,0xc
c0021400:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021403:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021407:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002140d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021414:	50                   	push   eax
c0021415:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021418:	50                   	push   eax
c0021419:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002141d:	50                   	push   eax
c002141e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021422:	50                   	push   eax
c0021423:	51                   	push   ecx
c0021424:	e8 3e fe ff ff       	call   c0021267 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021429:	83 c4 20             	add    esp,0x20
c002142c:	ba 01 00 00 00       	mov    edx,0x1
c0021431:	84 c0                	test   al,al
c0021433:	74 31                	je     c0021466 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021435:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021439:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021440:	89 03                	mov    DWORD PTR [ebx],eax
c0021442:	ba 00 00 00 00       	mov    edx,0x0
c0021447:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002144b:	85 c0                	test   eax,eax
c002144d:	0f 95 06             	setne  BYTE PTR [esi]
c0021450:	74 14                	je     c0021466 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021452:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021458:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002145f:	eb 05                	jmp    c0021466 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021461:	ba 04 00 00 00       	mov    edx,0x4
c0021466:	83 c4 14             	add    esp,0x14
c0021469:	89 d0                	mov    eax,edx
c002146b:	5b                   	pop    ebx
c002146c:	5e                   	pop    esi
c002146d:	c3                   	ret    

c002146e <ISO9660::openDir(char const*, void**)>:
c002146e:	57                   	push   edi
c002146f:	56                   	push   esi
c0021470:	53                   	push   ebx
c0021471:	83 ec 10             	sub    esp,0x10
c0021474:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021478:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002147c:	85 ff                	test   edi,edi
c002147e:	0f 84 95 00 00 00    	je     c0021519 <ISO9660::openDir(char const*, void**)+0xab>
c0021484:	85 f6                	test   esi,esi
c0021486:	0f 84 8d 00 00 00    	je     c0021519 <ISO9660::openDir(char const*, void**)+0xab>
c002148c:	83 ec 0c             	sub    esp,0xc
c002148f:	6a 1c                	push   0x1c
c0021491:	e8 a0 e1 fe ff       	call   c000f636 <malloc>
c0021496:	89 07                	mov    DWORD PTR [edi],eax
c0021498:	89 c3                	mov    ebx,eax
c002149a:	59                   	pop    ecx
c002149b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002149f:	50                   	push   eax
c00214a0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00214a3:	50                   	push   eax
c00214a4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00214a8:	50                   	push   eax
c00214a9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00214ad:	50                   	push   eax
c00214ae:	56                   	push   esi
c00214af:	e8 b3 fd ff ff       	call   c0021267 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00214b4:	83 c4 20             	add    esp,0x20
c00214b7:	84 c0                	test   al,al
c00214b9:	74 07                	je     c00214c2 <ISO9660::openDir(char const*, void**)+0x54>
c00214bb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00214c0:	75 21                	jne    c00214e3 <ISO9660::openDir(char const*, void**)+0x75>
c00214c2:	0f b6 c0             	movzx  eax,al
c00214c5:	52                   	push   edx
c00214c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00214ca:	50                   	push   eax
c00214cb:	68 25 b4 02 c0       	push   0xc002b425
c00214d0:	e8 06 14 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00214d5:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00214d9:	83 c4 10             	add    esp,0x10
c00214dc:	b8 01 00 00 00       	mov    eax,0x1
c00214e1:	eb 3b                	jmp    c002151e <ISO9660::openDir(char const*, void**)+0xb0>
c00214e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214e7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00214eb:	89 03                	mov    DWORD PTR [ebx],eax
c00214ed:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00214f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00214f8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00214ff:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021506:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021509:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021510:	8a 06                	mov    al,BYTE PTR [esi]
c0021512:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021515:	31 c0                	xor    eax,eax
c0021517:	eb 05                	jmp    c002151e <ISO9660::openDir(char const*, void**)+0xb0>
c0021519:	b8 04 00 00 00       	mov    eax,0x4
c002151e:	83 c4 10             	add    esp,0x10
c0021521:	5b                   	pop    ebx
c0021522:	5e                   	pop    esi
c0021523:	5f                   	pop    edi
c0021524:	c3                   	ret    
c0021525:	90                   	nop

c0021526 <ISO9660::ISO9660()>:
c0021526:	83 ec 0c             	sub    esp,0xc
c0021529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002152d:	83 ec 0c             	sub    esp,0xc
c0021530:	50                   	push   eax
c0021531:	e8 aa 16 ff ff       	call   c0012be0 <Filesystem::Filesystem()>
c0021536:	83 c4 10             	add    esp,0x10
c0021539:	ba 48 b4 02 c0       	mov    edx,0xc002b448
c002153e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021542:	89 10                	mov    DWORD PTR [eax],edx
c0021544:	90                   	nop
c0021545:	83 c4 0c             	add    esp,0xc
c0021548:	c3                   	ret    
c0021549:	90                   	nop

c002154a <SoundChannel::~SoundChannel()>:
c002154a:	83 ec 0c             	sub    esp,0xc
c002154d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021551:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021554:	83 ec 0c             	sub    esp,0xc
c0021557:	50                   	push   eax
c0021558:	e8 e9 e0 fe ff       	call   c000f646 <free>
c002155d:	83 c4 10             	add    esp,0x10
c0021560:	90                   	nop
c0021561:	83 c4 0c             	add    esp,0xc
c0021564:	c3                   	ret    
c0021565:	90                   	nop

c0021566 <SoundChannel::setSpeed(float)>:
c0021566:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002156a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002156e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021571:	c3                   	ret    

c0021572 <SoundChannel::getSpeed()>:
c0021572:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021576:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0021579:	c3                   	ret    

c002157a <SoundChannel::setVolume(int)>:
c002157a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002157e:	83 f8 64             	cmp    eax,0x64
c0021581:	7e 05                	jle    c0021588 <SoundChannel::setVolume(int)+0xe>
c0021583:	b8 64 00 00 00       	mov    eax,0x64
c0021588:	85 c0                	test   eax,eax
c002158a:	79 02                	jns    c002158e <SoundChannel::setVolume(int)+0x14>
c002158c:	31 c0                	xor    eax,eax
c002158e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021592:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0021595:	c3                   	ret    

c0021596 <SoundChannel::getVolume()>:
c0021596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002159a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c002159d:	c3                   	ret    

c002159e <SoundChannel::pause()>:
c002159e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215a2:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00215a6:	c3                   	ret    
c00215a7:	90                   	nop

c00215a8 <SoundChannel::SoundChannel(int, int, int, int)>:
c00215a8:	83 ec 1c             	sub    esp,0x1c
c00215ab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00215af:	e8 ea ff ff ff       	call   c002159e <SoundChannel::pause()>
c00215b4:	83 c4 04             	add    esp,0x4
c00215b7:	6a 50                	push   0x50
c00215b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00215bd:	e8 b8 ff ff ff       	call   c002157a <SoundChannel::setVolume(int)>
c00215c2:	83 c4 08             	add    esp,0x8
c00215c5:	a1 c0 b4 02 c0       	mov    eax,ds:0xc002b4c0
c00215ca:	50                   	push   eax
c00215cb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00215cf:	e8 92 ff ff ff       	call   c0021566 <SoundChannel::setSpeed(float)>
c00215d4:	83 c4 08             	add    esp,0x8
c00215d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00215db:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00215df:	89 10                	mov    DWORD PTR [eax],edx
c00215e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00215e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00215e9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00215ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00215f0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00215f4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00215f7:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00215fc:	75 23                	jne    c0021621 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00215fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021602:	8b 10                	mov    edx,DWORD PTR [eax]
c0021604:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021608:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002160b:	0f af c2             	imul   eax,edx
c002160e:	85 c0                	test   eax,eax
c0021610:	79 03                	jns    c0021615 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0021612:	83 c0 03             	add    eax,0x3
c0021615:	c1 f8 02             	sar    eax,0x2
c0021618:	05 a0 0f 00 00       	add    eax,0xfa0
c002161d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021621:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021625:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021629:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002162c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021630:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021637:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002163b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021642:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021646:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021649:	c1 e0 02             	shl    eax,0x2
c002164c:	83 ec 0c             	sub    esp,0xc
c002164f:	50                   	push   eax
c0021650:	e8 e1 df fe ff       	call   c000f636 <malloc>
c0021655:	83 c4 10             	add    esp,0x10
c0021658:	89 c2                	mov    edx,eax
c002165a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002165e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021661:	83 ec 04             	sub    esp,0x4
c0021664:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021668:	50                   	push   eax
c0021669:	6a 01                	push   0x1
c002166b:	6a 04                	push   0x4
c002166d:	e8 28 73 fe ff       	call   c000899a <src_new>
c0021672:	83 c4 10             	add    esp,0x10
c0021675:	89 c2                	mov    edx,eax
c0021677:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002167b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002167e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021682:	85 c0                	test   eax,eax
c0021684:	74 10                	je     c0021696 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0021686:	83 ec 0c             	sub    esp,0xc
c0021689:	68 a4 b4 02 c0       	push   0xc002b4a4
c002168e:	e8 18 85 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c0021693:	83 c4 10             	add    esp,0x10
c0021696:	a0 00 f2 02 c0       	mov    al,ds:0xc002f200
c002169b:	83 f0 01             	xor    eax,0x1
c002169e:	84 c0                	test   al,al
c00216a0:	74 57                	je     c00216f9 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00216a2:	a1 c4 b4 02 c0       	mov    eax,ds:0xc002b4c4
c00216a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00216ab:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00216b3:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00216bb:	7f 35                	jg     c00216f2 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00216bd:	83 ec 0c             	sub    esp,0xc
c00216c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00216c4:	e8 2e 4a 00 00       	call   c00260f7 <__floatsisf>
c00216c9:	83 c4 10             	add    esp,0x10
c00216cc:	8b 15 c4 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b4c4
c00216d2:	83 ec 08             	sub    esp,0x8
c00216d5:	52                   	push   edx
c00216d6:	50                   	push   eax
c00216d7:	e8 2d 46 00 00       	call   c0025d09 <__mulsf3>
c00216dc:	83 c4 10             	add    esp,0x10
c00216df:	89 c2                	mov    edx,eax
c00216e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216e5:	89 14 85 00 ee 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1200],edx
c00216ec:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00216f0:	eb c1                	jmp    c00216b3 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00216f2:	c6 05 00 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f200,0x1
c00216f9:	90                   	nop
c00216fa:	83 c4 1c             	add    esp,0x1c
c00216fd:	c3                   	ret    

c00216fe <SoundChannel::play()>:
c00216fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021702:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0021706:	c3                   	ret    
c0021707:	90                   	nop

c0021708 <SoundChannel::paused()>:
c0021708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002170c:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002170f:	c3                   	ret    

c0021710 <SoundChannel::getSampleRate()>:
c0021710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021714:	8b 00                	mov    eax,DWORD PTR [eax]
c0021716:	c3                   	ret    
c0021717:	90                   	nop

c0021718 <SoundChannel::getBits()>:
c0021718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002171c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002171f:	c3                   	ret    

c0021720 <SoundChannel::getBufferUsed()>:
c0021720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021724:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021727:	c3                   	ret    

c0021728 <SoundChannel::getBufferSize()>:
c0021728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002172c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002172f:	c3                   	ret    

c0021730 <SoundChannel::unbuffer(float*, int, int)>:
c0021730:	56                   	push   esi
c0021731:	53                   	push   ebx
c0021732:	83 ec 40             	sub    esp,0x40
c0021735:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021739:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002173c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021740:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021743:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021747:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002174b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002174f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021753:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021757:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002175b:	e8 97 49 00 00       	call   c00260f7 <__floatsisf>
c0021760:	5a                   	pop    edx
c0021761:	89 c6                	mov    esi,eax
c0021763:	ff 33                	push   DWORD PTR [ebx]
c0021765:	e8 8d 49 00 00       	call   c00260f7 <__floatsisf>
c002176a:	59                   	pop    ecx
c002176b:	5a                   	pop    edx
c002176c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002176f:	50                   	push   eax
c0021770:	e8 94 45 00 00       	call   c0025d09 <__mulsf3>
c0021775:	59                   	pop    ecx
c0021776:	5a                   	pop    edx
c0021777:	50                   	push   eax
c0021778:	56                   	push   esi
c0021779:	e8 4e 47 00 00       	call   c0025ecc <__divsf3>
c002177e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021781:	e8 41 5c 00 00       	call   c00273c7 <__extendsfdf2>
c0021786:	59                   	pop    ecx
c0021787:	5e                   	pop    esi
c0021788:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002178c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021790:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021798:	8d 44 24 14          	lea    eax,[esp+0x14]
c002179c:	50                   	push   eax
c002179d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00217a0:	e8 ea 6d fe ff       	call   c000858f <src_process>
c00217a5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00217a9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00217ac:	83 c4 0c             	add    esp,0xc
c00217af:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00217b2:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00217b5:	29 d0                	sub    eax,edx
c00217b7:	c1 e0 02             	shl    eax,0x2
c00217ba:	50                   	push   eax
c00217bb:	8d 04 91             	lea    eax,[ecx+edx*4]
c00217be:	50                   	push   eax
c00217bf:	51                   	push   ecx
c00217c0:	e8 a3 ee fd ff       	call   c0000668 <memmove>
c00217c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00217c9:	83 c4 44             	add    esp,0x44
c00217cc:	5b                   	pop    ebx
c00217cd:	5e                   	pop    esi
c00217ce:	c3                   	ret    
c00217cf:	90                   	nop

c00217d0 <SoundChannel::buffer8(unsigned char*, int)>:
c00217d0:	55                   	push   ebp
c00217d1:	57                   	push   edi
c00217d2:	56                   	push   esi
c00217d3:	53                   	push   ebx
c00217d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00217d8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00217dc:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00217df:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00217e3:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00217e6:	74 7a                	je     c0021862 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00217e8:	85 ff                	test   edi,edi
c00217ea:	7e 76                	jle    c0021862 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00217ec:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00217f0:	8d 70 01             	lea    esi,[eax+0x1]
c00217f3:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00217f6:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00217f9:	8b 1c 9d 00 ee 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1200]
c0021800:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021803:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021806:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021809:	74 5e                	je     c0021869 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002180b:	83 ff 01             	cmp    edi,0x1
c002180e:	74 4b                	je     c002185b <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021810:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021814:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021817:	8d 70 01             	lea    esi,[eax+0x1]
c002181a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002181d:	8b 1c 9d 00 ee 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1200]
c0021824:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021827:	b8 02 00 00 00       	mov    eax,0x2
c002182c:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002182f:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021832:	75 23                	jne    c0021857 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021834:	eb 27                	jmp    c002185d <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021836:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002183b:	8d 71 01             	lea    esi,[ecx+0x1]
c002183e:	40                   	inc    eax
c002183f:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021842:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021845:	8b 1c 9d 00 ee 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1200]
c002184c:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002184f:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021852:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021855:	74 06                	je     c002185d <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021857:	39 c7                	cmp    edi,eax
c0021859:	75 db                	jne    c0021836 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c002185b:	89 f8                	mov    eax,edi
c002185d:	5b                   	pop    ebx
c002185e:	5e                   	pop    esi
c002185f:	5f                   	pop    edi
c0021860:	5d                   	pop    ebp
c0021861:	c3                   	ret    
c0021862:	5b                   	pop    ebx
c0021863:	31 c0                	xor    eax,eax
c0021865:	5e                   	pop    esi
c0021866:	5f                   	pop    edi
c0021867:	5d                   	pop    ebp
c0021868:	c3                   	ret    
c0021869:	b8 01 00 00 00       	mov    eax,0x1
c002186e:	eb ed                	jmp    c002185d <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021870 <SoundDevice::SoundDevice(char const*)>:
c0021870:	83 ec 1c             	sub    esp,0x1c
c0021873:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021877:	83 ec 08             	sub    esp,0x8
c002187a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002187e:	50                   	push   eax
c002187f:	e8 6e 26 ff ff       	call   c0013ef2 <Device::Device(char const*)>
c0021884:	83 c4 10             	add    esp,0x10
c0021887:	ba d0 b4 02 c0       	mov    edx,0xc002b4d0
c002188c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021890:	89 10                	mov    DWORD PTR [eax],edx
c0021892:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021896:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00218a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00218a4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00218ae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00218b6:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00218bb:	7f 19                	jg     c00218d6 <SoundDevice::SoundDevice(char const*)+0x66>
c00218bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00218c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218c5:	83 c2 54             	add    edx,0x54
c00218c8:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00218d0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00218d4:	eb e0                	jmp    c00218b6 <SoundDevice::SoundDevice(char const*)+0x46>
c00218d6:	90                   	nop
c00218d7:	83 c4 1c             	add    esp,0x1c
c00218da:	c3                   	ret    
c00218db:	90                   	nop

c00218dc <SoundDevice::~SoundDevice()>:
c00218dc:	53                   	push   ebx
c00218dd:	83 ec 18             	sub    esp,0x18
c00218e0:	ba d0 b4 02 c0       	mov    edx,0xc002b4d0
c00218e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00218e9:	89 10                	mov    DWORD PTR [eax],edx
c00218eb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00218f3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00218f8:	7f 46                	jg     c0021940 <SoundDevice::~SoundDevice()+0x64>
c00218fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00218fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021902:	83 c2 54             	add    edx,0x54
c0021905:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021909:	85 c0                	test   eax,eax
c002190b:	74 2d                	je     c002193a <SoundDevice::~SoundDevice()+0x5e>
c002190d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021911:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021915:	83 c2 54             	add    edx,0x54
c0021918:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002191c:	85 db                	test   ebx,ebx
c002191e:	74 1a                	je     c002193a <SoundDevice::~SoundDevice()+0x5e>
c0021920:	83 ec 0c             	sub    esp,0xc
c0021923:	53                   	push   ebx
c0021924:	e8 21 fc ff ff       	call   c002154a <SoundChannel::~SoundChannel()>
c0021929:	83 c4 10             	add    esp,0x10
c002192c:	83 ec 08             	sub    esp,0x8
c002192f:	6a 2c                	push   0x2c
c0021931:	53                   	push   ebx
c0021932:	e8 c4 0e ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0021937:	83 c4 10             	add    esp,0x10
c002193a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002193e:	eb b3                	jmp    c00218f3 <SoundDevice::~SoundDevice()+0x17>
c0021940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021944:	83 ec 0c             	sub    esp,0xc
c0021947:	50                   	push   eax
c0021948:	e8 87 22 ff ff       	call   c0013bd4 <Device::~Device()>
c002194d:	83 c4 10             	add    esp,0x10
c0021950:	90                   	nop
c0021951:	83 c4 18             	add    esp,0x18
c0021954:	5b                   	pop    ebx
c0021955:	c3                   	ret    

c0021956 <SoundDevice::~SoundDevice()>:
c0021956:	83 ec 0c             	sub    esp,0xc
c0021959:	83 ec 0c             	sub    esp,0xc
c002195c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021960:	e8 77 ff ff ff       	call   c00218dc <SoundDevice::~SoundDevice()>
c0021965:	83 c4 10             	add    esp,0x10
c0021968:	83 ec 08             	sub    esp,0x8
c002196b:	68 e4 01 00 00       	push   0x1e4
c0021970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021974:	e8 82 0e ff ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0021979:	83 c4 10             	add    esp,0x10
c002197c:	83 c4 0c             	add    esp,0xc
c002197f:	c3                   	ret    

c0021980 <SoundDevice::getFreeChannelNum()>:
c0021980:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021984:	31 c0                	xor    eax,eax
c0021986:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002198e:	74 09                	je     c0021999 <SoundDevice::getFreeChannelNum()+0x19>
c0021990:	40                   	inc    eax
c0021991:	83 f8 20             	cmp    eax,0x20
c0021994:	75 f0                	jne    c0021986 <SoundDevice::getFreeChannelNum()+0x6>
c0021996:	83 c8 ff             	or     eax,0xffffffff
c0021999:	c3                   	ret    

c002199a <SoundDevice::addChannel(SoundChannel*)>:
c002199a:	56                   	push   esi
c002199b:	53                   	push   ebx
c002199c:	51                   	push   ecx
c002199d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00219a1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00219a5:	53                   	push   ebx
c00219a6:	e8 d5 ff ff ff       	call   c0021980 <SoundDevice::getFreeChannelNum()>
c00219ab:	5a                   	pop    edx
c00219ac:	83 f8 ff             	cmp    eax,0xffffffff
c00219af:	74 51                	je     c0021a02 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00219b1:	85 f6                	test   esi,esi
c00219b3:	74 4d                	je     c0021a02 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00219b5:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00219bc:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00219c3:	75 30                	jne    c00219f5 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00219c5:	83 ec 0c             	sub    esp,0xc
c00219c8:	56                   	push   esi
c00219c9:	e8 42 fd ff ff       	call   c0021710 <SoundChannel::getSampleRate()>
c00219ce:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00219d4:	89 34 24             	mov    DWORD PTR [esp],esi
c00219d7:	e8 3c fd ff ff       	call   c0021718 <SoundChannel::getBits()>
c00219dc:	83 c4 0c             	add    esp,0xc
c00219df:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00219e5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00219e7:	50                   	push   eax
c00219e8:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00219ee:	53                   	push   ebx
c00219ef:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00219f2:	83 c4 10             	add    esp,0x10
c00219f5:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00219fb:	b8 01 00 00 00       	mov    eax,0x1
c0021a00:	eb 03                	jmp    c0021a05 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021a02:	83 c8 ff             	or     eax,0xffffffff
c0021a05:	5a                   	pop    edx
c0021a06:	5b                   	pop    ebx
c0021a07:	5e                   	pop    esi
c0021a08:	c3                   	ret    
c0021a09:	90                   	nop

c0021a0a <SoundDevice::removeChannel(int)>:
c0021a0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021a0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a12:	83 fa 1f             	cmp    edx,0x1f
c0021a15:	77 23                	ja     c0021a3a <SoundDevice::removeChannel(int)+0x30>
c0021a17:	8d 14 90             	lea    edx,[eax+edx*4]
c0021a1a:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021a21:	74 17                	je     c0021a3a <SoundDevice::removeChannel(int)+0x30>
c0021a23:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021a2d:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021a33:	75 05                	jne    c0021a3a <SoundDevice::removeChannel(int)+0x30>
c0021a35:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a37:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0021a3a:	c3                   	ret    
c0021a3b:	90                   	nop

c0021a3c <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0021a3c:	57                   	push   edi
c0021a3d:	56                   	push   esi
c0021a3e:	53                   	push   ebx
c0021a3f:	31 db                	xor    ebx,ebx
c0021a41:	83 ec 10             	sub    esp,0x10
c0021a44:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021a48:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021a4c:	0f 8d cb 00 00 00    	jge    c0021b1d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021a52:	83 ec 0c             	sub    esp,0xc
c0021a55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021a59:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021a5c:	e8 66 59 00 00       	call   c00273c7 <__extendsfdf2>
c0021a61:	83 c4 10             	add    esp,0x10
c0021a64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021a6c:	68 00 00 f0 3f       	push   0x3ff00000
c0021a71:	6a 00                	push   0x0
c0021a73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a7b:	e8 d3 48 00 00       	call   c0026353 <__adddf3>
c0021a80:	83 c4 10             	add    esp,0x10
c0021a83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021a8b:	68 00 00 e0 3f       	push   0x3fe00000
c0021a90:	6a 00                	push   0x0
c0021a92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a9a:	e8 31 4f 00 00       	call   c00269d0 <__muldf3>
c0021a9f:	83 c4 10             	add    esp,0x10
c0021aa2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021aa6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021aaa:	68 00 00 60 40       	push   0x40600000
c0021aaf:	6a 00                	push   0x0
c0021ab1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ab5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ab9:	e8 12 4f 00 00       	call   c00269d0 <__muldf3>
c0021abe:	59                   	pop    ecx
c0021abf:	5f                   	pop    edi
c0021ac0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021ac4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0021ac8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021acc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ad0:	e8 ce 57 00 00       	call   c00272a3 <__truncdfsf2>
c0021ad5:	5a                   	pop    edx
c0021ad6:	89 c7                	mov    edi,eax
c0021ad8:	59                   	pop    ecx
c0021ad9:	68 00 00 fe 42       	push   0x42fe0000
c0021ade:	50                   	push   eax
c0021adf:	e8 69 48 00 00       	call   c002634d <__gesf2>
c0021ae4:	83 c4 10             	add    esp,0x10
c0021ae7:	85 c0                	test   eax,eax
c0021ae9:	78 06                	js     c0021af1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0021aeb:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0021aef:	eb 26                	jmp    c0021b17 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021af1:	50                   	push   eax
c0021af2:	50                   	push   eax
c0021af3:	6a 00                	push   0x0
c0021af5:	57                   	push   edi
c0021af6:	e8 56 48 00 00       	call   c0026351 <__lesf2>
c0021afb:	83 c4 10             	add    esp,0x10
c0021afe:	85 c0                	test   eax,eax
c0021b00:	7f 06                	jg     c0021b08 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0021b02:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0021b06:	eb 0f                	jmp    c0021b17 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021b08:	83 ec 0c             	sub    esp,0xc
c0021b0b:	57                   	push   edi
c0021b0c:	e8 4b 59 00 00       	call   c002745c <lrintf>
c0021b11:	83 c4 10             	add    esp,0x10
c0021b14:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0021b17:	43                   	inc    ebx
c0021b18:	e9 2b ff ff ff       	jmp    c0021a48 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0021b1d:	83 c4 10             	add    esp,0x10
c0021b20:	5b                   	pop    ebx
c0021b21:	5e                   	pop    esi
c0021b22:	5f                   	pop    edi
c0021b23:	c3                   	ret    

c0021b24 <SoundDevice::getAudio(int, float*, float*)>:
c0021b24:	55                   	push   ebp
c0021b25:	57                   	push   edi
c0021b26:	56                   	push   esi
c0021b27:	53                   	push   ebx
c0021b28:	31 db                	xor    ebx,ebx
c0021b2a:	83 ec 20             	sub    esp,0x20
c0021b2d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021b31:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021b35:	c1 e0 02             	shl    eax,0x2
c0021b38:	50                   	push   eax
c0021b39:	6a 00                	push   0x0
c0021b3b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021b3f:	e8 92 eb fd ff       	call   c00006d6 <memset>
c0021b44:	83 c4 10             	add    esp,0x10
c0021b47:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021b4b:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0021b52:	85 c0                	test   eax,eax
c0021b54:	0f 84 d7 00 00 00    	je     c0021c31 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021b5a:	83 ec 0c             	sub    esp,0xc
c0021b5d:	50                   	push   eax
c0021b5e:	e8 a5 fb ff ff       	call   c0021708 <SoundChannel::paused()>
c0021b63:	83 c4 10             	add    esp,0x10
c0021b66:	84 c0                	test   al,al
c0021b68:	0f 85 c3 00 00 00    	jne    c0021c31 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021b6e:	83 ec 0c             	sub    esp,0xc
c0021b71:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021b78:	e8 19 fa ff ff       	call   c0021596 <SoundChannel::getVolume()>
c0021b7d:	83 c4 10             	add    esp,0x10
c0021b80:	85 c0                	test   eax,eax
c0021b82:	0f 84 a9 00 00 00    	je     c0021c31 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021b88:	83 ec 0c             	sub    esp,0xc
c0021b8b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021b92:	e8 ff f9 ff ff       	call   c0021596 <SoundChannel::getVolume()>
c0021b97:	83 ec 0c             	sub    esp,0xc
c0021b9a:	50                   	push   eax
c0021b9b:	e8 57 45 00 00       	call   c00260f7 <__floatsisf>
c0021ba0:	59                   	pop    ecx
c0021ba1:	5d                   	pop    ebp
c0021ba2:	31 ed                	xor    ebp,ebp
c0021ba4:	68 00 00 c8 42       	push   0x42c80000
c0021ba9:	50                   	push   eax
c0021baa:	e8 1d 43 00 00       	call   c0025ecc <__divsf3>
c0021baf:	83 c4 10             	add    esp,0x10
c0021bb2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021bb6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0021bba:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0021bc0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0021bc4:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021bcb:	e8 60 fb ff ff       	call   c0021730 <SoundChannel::unbuffer(float*, int, int)>
c0021bd0:	83 c4 20             	add    esp,0x20
c0021bd3:	89 c1                	mov    ecx,eax
c0021bd5:	39 cd                	cmp    ebp,ecx
c0021bd7:	7d 52                	jge    c0021c2b <SoundDevice::getAudio(int, float*, float*)+0x107>
c0021bd9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021bdd:	50                   	push   eax
c0021bde:	50                   	push   eax
c0021bdf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0021be3:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021be6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021bea:	e8 1a 41 00 00       	call   c0025d09 <__mulsf3>
c0021bef:	5a                   	pop    edx
c0021bf0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021bf4:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0021bfa:	e8 f8 44 00 00       	call   c00260f7 <__floatsisf>
c0021bff:	59                   	pop    ecx
c0021c00:	5a                   	pop    edx
c0021c01:	50                   	push   eax
c0021c02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021c06:	e8 c1 42 00 00       	call   c0025ecc <__divsf3>
c0021c0b:	59                   	pop    ecx
c0021c0c:	5a                   	pop    edx
c0021c0d:	50                   	push   eax
c0021c0e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021c12:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021c15:	e8 cc 3d 00 00       	call   c00259e6 <__addsf3>
c0021c1a:	83 c4 10             	add    esp,0x10
c0021c1d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021c21:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021c25:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0021c28:	45                   	inc    ebp
c0021c29:	eb aa                	jmp    c0021bd5 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0021c2b:	39 cf                	cmp    edi,ecx
c0021c2d:	7e 02                	jle    c0021c31 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021c2f:	89 cf                	mov    edi,ecx
c0021c31:	43                   	inc    ebx
c0021c32:	83 fb 20             	cmp    ebx,0x20
c0021c35:	0f 85 10 ff ff ff    	jne    c0021b4b <SoundDevice::getAudio(int, float*, float*)+0x27>
c0021c3b:	83 c4 1c             	add    esp,0x1c
c0021c3e:	89 f8                	mov    eax,edi
c0021c40:	5b                   	pop    ebx
c0021c41:	5e                   	pop    esi
c0021c42:	5f                   	pop    edi
c0021c43:	5d                   	pop    ebp
c0021c44:	c3                   	ret    
c0021c45:	90                   	nop

c0021c46 <PCI::open(int, int, void*)>:
c0021c46:	83 ec 18             	sub    esp,0x18
c0021c49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021c4d:	8b 10                	mov    edx,DWORD PTR [eax]
c0021c4f:	50                   	push   eax
c0021c50:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0021c53:	31 c0                	xor    eax,eax
c0021c55:	83 c4 1c             	add    esp,0x1c
c0021c58:	c3                   	ret    
c0021c59:	90                   	nop

c0021c5a <PCI::close(int, int, void*)>:
c0021c5a:	31 c0                	xor    eax,eax
c0021c5c:	c3                   	ret    
c0021c5d:	90                   	nop

c0021c5e <PCI::PCI()>:
c0021c5e:	83 ec 0c             	sub    esp,0xc
c0021c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c65:	83 ec 08             	sub    esp,0x8
c0021c68:	68 00 b5 02 c0       	push   0xc002b500
c0021c6d:	50                   	push   eax
c0021c6e:	e8 03 19 ff ff       	call   c0013576 <Bus::Bus(char const*)>
c0021c73:	83 c4 10             	add    esp,0x10
c0021c76:	ba 6c b5 02 c0       	mov    edx,0xc002b56c
c0021c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c7f:	89 10                	mov    DWORD PTR [eax],edx
c0021c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c85:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c8b:	0f b6 d0             	movzx  edx,al
c0021c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c92:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0021c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c9d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021ca3:	0f b6 d0             	movzx  edx,al
c0021ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021caa:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0021caf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021cb9:	8d 50 01             	lea    edx,[eax+0x1]
c0021cbc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021cc0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021cc6:	0f b6 d0             	movzx  edx,al
c0021cc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ccd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021cd1:	83 c9 c0             	or     ecx,0xffffffc0
c0021cd4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021cd8:	90                   	nop
c0021cd9:	83 c4 0c             	add    esp,0xc
c0021cdc:	c3                   	ret    
c0021cdd:	90                   	nop

c0021cde <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021cde:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021ce2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021ce7:	89 ca                	mov    edx,ecx
c0021ce9:	c1 e0 10             	shl    eax,0x10
c0021cec:	81 e2 fc 00 00 00    	and    edx,0xfc
c0021cf2:	09 d0                	or     eax,edx
c0021cf4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0021cf9:	c1 e2 08             	shl    edx,0x8
c0021cfc:	09 d0                	or     eax,edx
c0021cfe:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0021d03:	c1 e2 0b             	shl    edx,0xb
c0021d06:	09 d0                	or     eax,edx
c0021d08:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021d0d:	0d 00 00 00 80       	or     eax,0x80000000
c0021d12:	ef                   	out    dx,eax
c0021d13:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021d18:	ed                   	in     eax,dx
c0021d19:	83 e1 02             	and    ecx,0x2
c0021d1c:	0f b6 c9             	movzx  ecx,cl
c0021d1f:	c1 e1 03             	shl    ecx,0x3
c0021d22:	d3 e8                	shr    eax,cl
c0021d24:	c3                   	ret    
c0021d25:	90                   	nop

c0021d26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0021d26:	6a 00                	push   0x0
c0021d28:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021d2d:	50                   	push   eax
c0021d2e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021d33:	50                   	push   eax
c0021d34:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021d39:	50                   	push   eax
c0021d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021d3e:	e8 9b ff ff ff       	call   c0021cde <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021d43:	83 c4 14             	add    esp,0x14
c0021d46:	c3                   	ret    
c0021d47:	90                   	nop

c0021d48 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0021d48:	6a 0e                	push   0xe
c0021d4a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021d4f:	50                   	push   eax
c0021d50:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021d55:	50                   	push   eax
c0021d56:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021d5b:	50                   	push   eax
c0021d5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021d60:	e8 79 ff ff ff       	call   c0021cde <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021d65:	83 c4 14             	add    esp,0x14
c0021d68:	0f b6 c0             	movzx  eax,al
c0021d6b:	c3                   	ret    

c0021d6c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0021d6c:	55                   	push   ebp
c0021d6d:	57                   	push   edi
c0021d6e:	56                   	push   esi
c0021d6f:	53                   	push   ebx
c0021d70:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0021d75:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0021d7a:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0021d7f:	6a 0a                	push   0xa
c0021d81:	56                   	push   esi
c0021d82:	55                   	push   ebp
c0021d83:	57                   	push   edi
c0021d84:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021d88:	e8 51 ff ff ff       	call   c0021cde <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021d8d:	6a 0a                	push   0xa
c0021d8f:	89 c3                	mov    ebx,eax
c0021d91:	56                   	push   esi
c0021d92:	0f b6 db             	movzx  ebx,bl
c0021d95:	55                   	push   ebp
c0021d96:	57                   	push   edi
c0021d97:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021d9b:	e8 3e ff ff ff       	call   c0021cde <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021da0:	83 c4 28             	add    esp,0x28
c0021da3:	25 00 ff 00 00       	and    eax,0xff00
c0021da8:	09 d8                	or     eax,ebx
c0021daa:	5b                   	pop    ebx
c0021dab:	5e                   	pop    esi
c0021dac:	5f                   	pop    edi
c0021dad:	5d                   	pop    ebp
c0021dae:	c3                   	ret    
c0021daf:	90                   	nop

c0021db0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0021db0:	6a 08                	push   0x8
c0021db2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021db7:	50                   	push   eax
c0021db8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021dbd:	50                   	push   eax
c0021dbe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021dc3:	50                   	push   eax
c0021dc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021dc8:	e8 11 ff ff ff       	call   c0021cde <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021dcd:	83 c4 14             	add    esp,0x14
c0021dd0:	0f b6 c4             	movzx  eax,ah
c0021dd3:	c3                   	ret    

c0021dd4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0021dd4:	6a 08                	push   0x8
c0021dd6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ddb:	50                   	push   eax
c0021ddc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021de1:	50                   	push   eax
c0021de2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021de7:	50                   	push   eax
c0021de8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021dec:	e8 ed fe ff ff       	call   c0021cde <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021df1:	83 c4 14             	add    esp,0x14
c0021df4:	c3                   	ret    
c0021df5:	90                   	nop

c0021df6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0021df6:	6a 3c                	push   0x3c
c0021df8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021dfd:	50                   	push   eax
c0021dfe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e03:	50                   	push   eax
c0021e04:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e09:	50                   	push   eax
c0021e0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e0e:	e8 cb fe ff ff       	call   c0021cde <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e13:	83 c4 14             	add    esp,0x14
c0021e16:	c3                   	ret    
c0021e17:	90                   	nop

c0021e18 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0021e18:	6a 18                	push   0x18
c0021e1a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e1f:	50                   	push   eax
c0021e20:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e25:	50                   	push   eax
c0021e26:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e2b:	50                   	push   eax
c0021e2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e30:	e8 a9 fe ff ff       	call   c0021cde <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e35:	83 c4 14             	add    esp,0x14
c0021e38:	0f b6 c4             	movzx  eax,ah
c0021e3b:	c3                   	ret    

c0021e3c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021e3c:	55                   	push   ebp
c0021e3d:	57                   	push   edi
c0021e3e:	56                   	push   esi
c0021e3f:	53                   	push   ebx
c0021e40:	50                   	push   eax
c0021e41:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0021e45:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0021e4a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021e4f:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0021e54:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0021e5b:	8d 43 12             	lea    eax,[ebx+0x12]
c0021e5e:	83 c3 10             	add    ebx,0x10
c0021e61:	0f b6 c0             	movzx  eax,al
c0021e64:	0f b6 db             	movzx  ebx,bl
c0021e67:	50                   	push   eax
c0021e68:	51                   	push   ecx
c0021e69:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021e6d:	57                   	push   edi
c0021e6e:	55                   	push   ebp
c0021e6f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021e73:	e8 66 fe ff ff       	call   c0021cde <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e78:	53                   	push   ebx
c0021e79:	89 c6                	mov    esi,eax
c0021e7b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021e7f:	c1 e6 10             	shl    esi,0x10
c0021e82:	51                   	push   ecx
c0021e83:	57                   	push   edi
c0021e84:	55                   	push   ebp
c0021e85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021e89:	e8 50 fe ff ff       	call   c0021cde <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e8e:	83 c4 2c             	add    esp,0x2c
c0021e91:	0f b7 c0             	movzx  eax,ax
c0021e94:	5b                   	pop    ebx
c0021e95:	09 f0                	or     eax,esi
c0021e97:	5e                   	pop    esi
c0021e98:	5f                   	pop    edi
c0021e99:	5d                   	pop    ebp
c0021e9a:	c3                   	ret    
c0021e9b:	90                   	nop

c0021e9c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0021e9c:	53                   	push   ebx
c0021e9d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021ea2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021ea7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021eab:	c1 e1 10             	shl    ecx,0x10
c0021eae:	25 fc 00 00 00       	and    eax,0xfc
c0021eb3:	09 c1                	or     ecx,eax
c0021eb5:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021eba:	c1 e0 08             	shl    eax,0x8
c0021ebd:	09 c1                	or     ecx,eax
c0021ebf:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0021ec4:	c1 e0 0b             	shl    eax,0xb
c0021ec7:	09 c1                	or     ecx,eax
c0021ec9:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0021ecf:	89 c8                	mov    eax,ecx
c0021ed1:	ef                   	out    dx,eax
c0021ed2:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021ed7:	ed                   	in     eax,dx
c0021ed8:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0021edd:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0021ee2:	74 0a                	je     c0021eee <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0021ee4:	0f b7 d8             	movzx  ebx,ax
c0021ee7:	89 d0                	mov    eax,edx
c0021ee9:	c1 e0 10             	shl    eax,0x10
c0021eec:	eb 05                	jmp    c0021ef3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0021eee:	66 31 c0             	xor    ax,ax
c0021ef1:	89 d3                	mov    ebx,edx
c0021ef3:	09 c3                	or     ebx,eax
c0021ef5:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021efa:	89 c8                	mov    eax,ecx
c0021efc:	ef                   	out    dx,eax
c0021efd:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021f02:	89 d8                	mov    eax,ebx
c0021f04:	ef                   	out    dx,eax
c0021f05:	5b                   	pop    ebx
c0021f06:	c3                   	ret    
c0021f07:	90                   	nop

c0021f08 <PCI::checkBus(unsigned char)>:
c0021f08:	56                   	push   esi
c0021f09:	53                   	push   ebx
c0021f0a:	31 db                	xor    ebx,ebx
c0021f0c:	51                   	push   ecx
c0021f0d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021f12:	52                   	push   edx
c0021f13:	53                   	push   ebx
c0021f14:	43                   	inc    ebx
c0021f15:	56                   	push   esi
c0021f16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f1a:	e8 2b 03 00 00       	call   c002224a <PCI::checkDevice(unsigned char, unsigned char)>
c0021f1f:	83 c4 10             	add    esp,0x10
c0021f22:	83 fb 20             	cmp    ebx,0x20
c0021f25:	75 eb                	jne    c0021f12 <PCI::checkBus(unsigned char)+0xa>
c0021f27:	58                   	pop    eax
c0021f28:	5b                   	pop    ebx
c0021f29:	5e                   	pop    esi
c0021f2a:	c3                   	ret    
c0021f2b:	90                   	nop

c0021f2c <PCI::foundDevice(PCIDeviceInfo)>:
c0021f2c:	55                   	push   ebp
c0021f2d:	57                   	push   edi
c0021f2e:	56                   	push   esi
c0021f2f:	53                   	push   ebx
c0021f30:	83 ec 1c             	sub    esp,0x1c
c0021f33:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021f37:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0021f3d:	0f 84 52 01 00 00    	je     c0022095 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021f43:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0021f47:	66 81 f9 06 04       	cmp    cx,0x406
c0021f4c:	75 2c                	jne    c0021f7a <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0021f4e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0021f53:	50                   	push   eax
c0021f54:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0021f59:	50                   	push   eax
c0021f5a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0021f5f:	50                   	push   eax
c0021f60:	56                   	push   esi
c0021f61:	e8 b2 fe ff ff       	call   c0021e18 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0021f66:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021f6a:	0f b6 c0             	movzx  eax,al
c0021f6d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0021f71:	83 c4 2c             	add    esp,0x2c
c0021f74:	5b                   	pop    ebx
c0021f75:	5e                   	pop    esi
c0021f76:	5f                   	pop    edi
c0021f77:	5d                   	pop    ebp
c0021f78:	eb 8e                	jmp    c0021f08 <PCI::checkBus(unsigned char)>
c0021f7a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021f7e:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0021f84:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021f88:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0021f8c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0021f90:	88 d3                	mov    bl,dl
c0021f92:	85 c0                	test   eax,eax
c0021f94:	74 33                	je     c0021fc9 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0021f96:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0021f99:	85 d2                	test   edx,edx
c0021f9b:	74 28                	je     c0021fc5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021f9d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0021fa3:	31 ef                	xor    edi,ebp
c0021fa5:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0021fab:	75 18                	jne    c0021fc5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021fad:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021fb1:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0021fb7:	75 0c                	jne    c0021fc5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021fb9:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0021fbf:	0f 84 d0 00 00 00    	je     c0022095 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021fc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fc7:	eb c9                	jmp    c0021f92 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0021fc9:	66 81 f9 01 06       	cmp    cx,0x601
c0021fce:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0021fd2:	75 19                	jne    c0021fed <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0021fd4:	83 ec 0c             	sub    esp,0xc
c0021fd7:	68 64 01 00 00       	push   0x164
c0021fdc:	e8 55 d6 fe ff       	call   c000f636 <malloc>
c0021fe1:	89 c5                	mov    ebp,eax
c0021fe3:	89 04 24             	mov    DWORD PTR [esp],eax
c0021fe6:	e8 95 0f 00 00       	call   c0022f80 <SATABus::SATABus()>
c0021feb:	eb 1e                	jmp    c002200b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0021fed:	66 81 f9 01 01       	cmp    cx,0x101
c0021ff2:	75 60                	jne    c0022054 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0021ff4:	83 ec 0c             	sub    esp,0xc
c0021ff7:	68 70 02 00 00       	push   0x270
c0021ffc:	e8 35 d6 fe ff       	call   c000f636 <malloc>
c0022001:	89 c5                	mov    ebp,eax
c0022003:	89 04 24             	mov    DWORD PTR [esp],eax
c0022006:	e8 03 03 00 00       	call   c002230e <IDE::IDE()>
c002200b:	58                   	pop    eax
c002200c:	5a                   	pop    edx
c002200d:	55                   	push   ebp
c002200e:	56                   	push   esi
c002200f:	e8 ee 1c ff ff       	call   c0013d02 <Device::addChild(Device*)>
c0022014:	83 ec 1c             	sub    esp,0x1c
c0022017:	b9 09 00 00 00       	mov    ecx,0x9
c002201c:	fc                   	cld    
c002201d:	89 e7                	mov    edi,esp
c002201f:	89 de                	mov    esi,ebx
c0022021:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022023:	55                   	push   ebp
c0022024:	e8 e3 1b ff ff       	call   c0013c0c <Device::preOpenPCI(PCIDeviceInfo)>
c0022029:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002202c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022030:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022038:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022040:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022048:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002204b:	83 c4 4c             	add    esp,0x4c
c002204e:	5b                   	pop    ebx
c002204f:	5e                   	pop    esi
c0022050:	5f                   	pop    edi
c0022051:	5d                   	pop    ebp
c0022052:	ff e0                	jmp    eax
c0022054:	83 ec 0c             	sub    esp,0xc
c0022057:	68 58 01 00 00       	push   0x158
c002205c:	e8 d5 d5 fe ff       	call   c000f636 <malloc>
c0022061:	89 c5                	mov    ebp,eax
c0022063:	58                   	pop    eax
c0022064:	5a                   	pop    edx
c0022065:	68 08 b5 02 c0       	push   0xc002b508
c002206a:	55                   	push   ebp
c002206b:	e8 88 1f ff ff       	call   c0013ff8 <DriverlessDevice::DriverlessDevice(char const*)>
c0022070:	59                   	pop    ecx
c0022071:	5f                   	pop    edi
c0022072:	55                   	push   ebp
c0022073:	56                   	push   esi
c0022074:	e8 89 1c ff ff       	call   c0013d02 <Device::addChild(Device*)>
c0022079:	b9 09 00 00 00       	mov    ecx,0x9
c002207e:	fc                   	cld    
c002207f:	89 df                	mov    edi,ebx
c0022081:	89 de                	mov    esi,ebx
c0022083:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022085:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022089:	83 c4 2c             	add    esp,0x2c
c002208c:	5b                   	pop    ebx
c002208d:	5e                   	pop    esi
c002208e:	5f                   	pop    edi
c002208f:	5d                   	pop    ebp
c0022090:	e9 77 1b ff ff       	jmp    c0013c0c <Device::preOpenPCI(PCIDeviceInfo)>
c0022095:	83 c4 1c             	add    esp,0x1c
c0022098:	5b                   	pop    ebx
c0022099:	5e                   	pop    esi
c002209a:	5f                   	pop    edi
c002209b:	5d                   	pop    ebp
c002209c:	c3                   	ret    
c002209d:	90                   	nop

c002209e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002209e:	55                   	push   ebp
c002209f:	57                   	push   edi
c00220a0:	56                   	push   esi
c00220a1:	53                   	push   ebx
c00220a2:	83 ec 5c             	sub    esp,0x5c
c00220a5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00220a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00220ad:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00220b1:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c00220b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00220ba:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00220be:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c00220c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00220c7:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00220cc:	6a 0c                	push   0xc
c00220ce:	55                   	push   ebp
c00220cf:	53                   	push   ebx
c00220d0:	57                   	push   edi
c00220d1:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c00220d8:	e8 01 fc ff ff       	call   c0021cde <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00220dd:	55                   	push   ebp
c00220de:	53                   	push   ebx
c00220df:	57                   	push   edi
c00220e0:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00220e7:	e8 80 fc ff ff       	call   c0021d6c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00220ec:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c00220f1:	83 c4 24             	add    esp,0x24
c00220f4:	55                   	push   ebp
c00220f5:	53                   	push   ebx
c00220f6:	57                   	push   edi
c00220f7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00220fb:	e8 f6 fc ff ff       	call   c0021df6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022100:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022104:	6a 3c                	push   0x3c
c0022106:	55                   	push   ebp
c0022107:	53                   	push   ebx
c0022108:	57                   	push   edi
c0022109:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022110:	e8 c9 fb ff ff       	call   c0021cde <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022115:	0f b6 c4             	movzx  eax,ah
c0022118:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002211c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022120:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022124:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0022129:	83 c4 24             	add    esp,0x24
c002212c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022132:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0022139:	74 6c                	je     c00221a7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c002213b:	31 f6                	xor    esi,esi
c002213d:	8b 15 c8 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002cec8
c0022143:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022149:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c002214f:	7e 56                	jle    c00221a7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022151:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022154:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c002215b:	39 cb                	cmp    ebx,ecx
c002215d:	75 45                	jne    c00221a4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c002215f:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022166:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c002216a:	75 38                	jne    c00221a4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c002216c:	83 ec 0c             	sub    esp,0xc
c002216f:	68 22 b5 02 c0       	push   0xc002b522
c0022174:	e8 62 07 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0022179:	8b 15 c8 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002cec8
c002217f:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022185:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c002218d:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022191:	52                   	push   edx
c0022192:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022196:	53                   	push   ebx
c0022197:	68 47 b5 02 c0       	push   0xc002b547
c002219c:	e8 3a 07 ff ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00221a1:	83 c4 20             	add    esp,0x20
c00221a4:	46                   	inc    esi
c00221a5:	eb 96                	jmp    c002213d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c00221a7:	31 d2                	xor    edx,edx
c00221a9:	83 ec 0c             	sub    esp,0xc
c00221ac:	55                   	push   ebp
c00221ad:	53                   	push   ebx
c00221ae:	57                   	push   edi
c00221af:	52                   	push   edx
c00221b0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00221b4:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00221bb:	e8 7c fc ff ff       	call   c0021e3c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00221c0:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c00221c4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00221c8:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00221cc:	42                   	inc    edx
c00221cd:	83 c4 20             	add    esp,0x20
c00221d0:	83 fa 06             	cmp    edx,0x6
c00221d3:	75 d4                	jne    c00221a9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c00221d5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00221d9:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c00221dd:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c00221e1:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c00221e5:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00221e9:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00221ed:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00221f2:	86 e0                	xchg   al,ah
c00221f4:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00221f9:	55                   	push   ebp
c00221fa:	53                   	push   ebx
c00221fb:	57                   	push   edi
c00221fc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022200:	e8 ab fb ff ff       	call   c0021db0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022205:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022209:	55                   	push   ebp
c002220a:	53                   	push   ebx
c002220b:	57                   	push   edi
c002220c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022213:	e8 0e fb ff ff       	call   c0021d26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022218:	83 ec 0c             	sub    esp,0xc
c002221b:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022220:	b9 09 00 00 00       	mov    ecx,0x9
c0022225:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022229:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c002222d:	fc                   	cld    
c002222e:	89 e7                	mov    edi,esp
c0022230:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022232:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022239:	e8 ee fc ff ff       	call   c0021f2c <PCI::foundDevice(PCIDeviceInfo)>
c002223e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022244:	5b                   	pop    ebx
c0022245:	5e                   	pop    esi
c0022246:	5f                   	pop    edi
c0022247:	5d                   	pop    ebp
c0022248:	c3                   	ret    
c0022249:	90                   	nop

c002224a <PCI::checkDevice(unsigned char, unsigned char)>:
c002224a:	55                   	push   ebp
c002224b:	57                   	push   edi
c002224c:	56                   	push   esi
c002224d:	53                   	push   ebx
c002224e:	83 ec 0c             	sub    esp,0xc
c0022251:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022255:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002225a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002225f:	6a 00                	push   0x0
c0022261:	56                   	push   esi
c0022262:	57                   	push   edi
c0022263:	55                   	push   ebp
c0022264:	e8 bd fa ff ff       	call   c0021d26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022269:	6a 00                	push   0x0
c002226b:	56                   	push   esi
c002226c:	57                   	push   edi
c002226d:	55                   	push   ebp
c002226e:	e8 2b fe ff ff       	call   c002209e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022273:	83 c4 20             	add    esp,0x20
c0022276:	6a 00                	push   0x0
c0022278:	56                   	push   esi
c0022279:	57                   	push   edi
c002227a:	55                   	push   ebp
c002227b:	e8 c8 fa ff ff       	call   c0021d48 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022280:	83 c4 10             	add    esp,0x10
c0022283:	84 c0                	test   al,al
c0022285:	79 27                	jns    c00222ae <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022287:	bb 01 00 00 00       	mov    ebx,0x1
c002228c:	53                   	push   ebx
c002228d:	56                   	push   esi
c002228e:	57                   	push   edi
c002228f:	55                   	push   ebp
c0022290:	e8 91 fa ff ff       	call   c0021d26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022295:	83 c4 10             	add    esp,0x10
c0022298:	66 40                	inc    ax
c002229a:	74 0c                	je     c00222a8 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c002229c:	53                   	push   ebx
c002229d:	56                   	push   esi
c002229e:	57                   	push   edi
c002229f:	55                   	push   ebp
c00222a0:	e8 f9 fd ff ff       	call   c002209e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00222a5:	83 c4 10             	add    esp,0x10
c00222a8:	43                   	inc    ebx
c00222a9:	83 fb 08             	cmp    ebx,0x8
c00222ac:	75 de                	jne    c002228c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00222ae:	83 c4 0c             	add    esp,0xc
c00222b1:	5b                   	pop    ebx
c00222b2:	5e                   	pop    esi
c00222b3:	5f                   	pop    edi
c00222b4:	5d                   	pop    ebp
c00222b5:	c3                   	ret    

c00222b6 <PCI::detect()>:
c00222b6:	56                   	push   esi
c00222b7:	53                   	push   ebx
c00222b8:	53                   	push   ebx
c00222b9:	31 db                	xor    ebx,ebx
c00222bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00222bf:	6a 00                	push   0x0
c00222c1:	6a 00                	push   0x0
c00222c3:	6a 00                	push   0x0
c00222c5:	56                   	push   esi
c00222c6:	e8 7d fa ff ff       	call   c0021d48 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00222cb:	83 c4 10             	add    esp,0x10
c00222ce:	a8 80                	test   al,0x80
c00222d0:	75 21                	jne    c00222f3 <PCI::detect()+0x3d>
c00222d2:	51                   	push   ecx
c00222d3:	51                   	push   ecx
c00222d4:	6a 00                	push   0x0
c00222d6:	56                   	push   esi
c00222d7:	e8 2c fc ff ff       	call   c0021f08 <PCI::checkBus(unsigned char)>
c00222dc:	83 c4 10             	add    esp,0x10
c00222df:	eb 24                	jmp    c0022305 <PCI::detect()+0x4f>
c00222e1:	52                   	push   edx
c00222e2:	52                   	push   edx
c00222e3:	53                   	push   ebx
c00222e4:	43                   	inc    ebx
c00222e5:	56                   	push   esi
c00222e6:	e8 1d fc ff ff       	call   c0021f08 <PCI::checkBus(unsigned char)>
c00222eb:	83 c4 10             	add    esp,0x10
c00222ee:	83 fb 08             	cmp    ebx,0x8
c00222f1:	74 12                	je     c0022305 <PCI::detect()+0x4f>
c00222f3:	53                   	push   ebx
c00222f4:	6a 00                	push   0x0
c00222f6:	6a 00                	push   0x0
c00222f8:	56                   	push   esi
c00222f9:	e8 28 fa ff ff       	call   c0021d26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00222fe:	83 c4 10             	add    esp,0x10
c0022301:	66 40                	inc    ax
c0022303:	74 dc                	je     c00222e1 <PCI::detect()+0x2b>
c0022305:	58                   	pop    eax
c0022306:	5b                   	pop    ebx
c0022307:	5e                   	pop    esi
c0022308:	c3                   	ret    
c0022309:	90                   	nop

c002230a <IDE::close(int, int, void*)>:
c002230a:	83 c8 ff             	or     eax,0xffffffff
c002230d:	c3                   	ret    

c002230e <IDE::IDE()>:
c002230e:	83 ec 0c             	sub    esp,0xc
c0022311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022315:	83 ec 08             	sub    esp,0x8
c0022318:	68 90 b5 02 c0       	push   0xc002b590
c002231d:	50                   	push   eax
c002231e:	e8 6b 1d ff ff       	call   c001408e <HardDiskController::HardDiskController(char const*)>
c0022323:	83 c4 10             	add    esp,0x10
c0022326:	ba d0 b7 02 c0       	mov    edx,0xc002b7d0
c002232b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002232f:	89 10                	mov    DWORD PTR [eax],edx
c0022331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022335:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002233c:	90                   	nop
c002233d:	83 c4 0c             	add    esp,0xc
c0022340:	c3                   	ret    
c0022341:	90                   	nop

c0022342 <IDE::prepareInterrupt(unsigned char)>:
c0022342:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022347:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002234b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022353:	c3                   	ret    

c0022354 <selectDrive(unsigned char, unsigned char)>:
c0022354:	c3                   	ret    
c0022355:	90                   	nop

c0022356 <IDE::getBase(unsigned char)>:
c0022356:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002235b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002235f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022367:	c3                   	ret    

c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022368:	55                   	push   ebp
c0022369:	57                   	push   edi
c002236a:	56                   	push   esi
c002236b:	53                   	push   ebx
c002236c:	83 ec 1c             	sub    esp,0x1c
c002236f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022373:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022377:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002237a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002237e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022382:	80 f9 03             	cmp    cl,0x3
c0022385:	77 51                	ja     c00223d8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002238b:	0f b6 f2             	movzx  esi,dl
c002238e:	0f b6 db             	movzx  ebx,bl
c0022391:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022394:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022398:	83 ca 80             	or     edx,0xffffff80
c002239b:	0f b6 d2             	movzx  edx,dl
c002239e:	52                   	push   edx
c002239f:	6a 0c                	push   0xc
c00223a1:	56                   	push   esi
c00223a2:	57                   	push   edi
c00223a3:	e8 c0 ff ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00223a8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00223ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00223b1:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00223b5:	ee                   	out    dx,al
c00223b6:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00223bb:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00223bf:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00223c3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00223c7:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00223cf:	83 c4 2c             	add    esp,0x2c
c00223d2:	5b                   	pop    ebx
c00223d3:	5e                   	pop    esi
c00223d4:	5f                   	pop    edi
c00223d5:	5d                   	pop    ebp
c00223d6:	eb 90                	jmp    c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00223d8:	80 fb 07             	cmp    bl,0x7
c00223db:	77 12                	ja     c00223ef <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00223dd:	0f b6 d2             	movzx  edx,dl
c00223e0:	0f b6 db             	movzx  ebx,bl
c00223e3:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00223eb:	89 da                	mov    edx,ebx
c00223ed:	eb 2f                	jmp    c002241e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00223ef:	80 fb 0d             	cmp    bl,0xd
c00223f2:	77 13                	ja     c0022407 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00223f4:	0f b6 d2             	movzx  edx,dl
c00223f7:	0f b6 db             	movzx  ebx,bl
c00223fa:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022401:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022405:	eb 17                	jmp    c002241e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022407:	80 fb 15             	cmp    bl,0x15
c002240a:	77 13                	ja     c002241f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002240c:	0f b6 d2             	movzx  edx,dl
c002240f:	0f b6 db             	movzx  ebx,bl
c0022412:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002241a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002241e:	ee                   	out    dx,al
c002241f:	83 c4 1c             	add    esp,0x1c
c0022422:	5b                   	pop    ebx
c0022423:	5e                   	pop    esi
c0022424:	5f                   	pop    edi
c0022425:	5d                   	pop    ebp
c0022426:	c3                   	ret    
c0022427:	90                   	nop

c0022428 <IDE::read(unsigned char, unsigned char)>:
c0022428:	55                   	push   ebp
c0022429:	57                   	push   edi
c002242a:	56                   	push   esi
c002242b:	53                   	push   ebx
c002242c:	83 ec 1c             	sub    esp,0x1c
c002242f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022433:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022437:	8d 43 f8             	lea    eax,[ebx-0x8]
c002243a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002243e:	3c 03                	cmp    al,0x3
c0022440:	77 43                	ja     c0022485 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022442:	0f b6 f2             	movzx  esi,dl
c0022445:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022448:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002244c:	83 c8 80             	or     eax,0xffffff80
c002244f:	0f b6 c0             	movzx  eax,al
c0022452:	50                   	push   eax
c0022453:	6a 0c                	push   0xc
c0022455:	56                   	push   esi
c0022456:	57                   	push   edi
c0022457:	e8 0c ff ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002245c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022461:	0f b6 c3             	movzx  eax,bl
c0022464:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022468:	ec                   	in     al,dx
c0022469:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002246d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022472:	52                   	push   edx
c0022473:	6a 0c                	push   0xc
c0022475:	56                   	push   esi
c0022476:	57                   	push   edi
c0022477:	e8 ec fe ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002247c:	83 c4 20             	add    esp,0x20
c002247f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022483:	eb 49                	jmp    c00224ce <IDE::read(unsigned char, unsigned char)+0xa6>
c0022485:	80 fb 07             	cmp    bl,0x7
c0022488:	77 12                	ja     c002249c <IDE::read(unsigned char, unsigned char)+0x74>
c002248a:	0f b6 d2             	movzx  edx,dl
c002248d:	0f b6 c3             	movzx  eax,bl
c0022490:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022498:	89 c2                	mov    edx,eax
c002249a:	eb 31                	jmp    c00224cd <IDE::read(unsigned char, unsigned char)+0xa5>
c002249c:	80 fb 0d             	cmp    bl,0xd
c002249f:	77 13                	ja     c00224b4 <IDE::read(unsigned char, unsigned char)+0x8c>
c00224a1:	0f b6 d2             	movzx  edx,dl
c00224a4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00224ab:	0f b6 d3             	movzx  edx,bl
c00224ae:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00224b2:	eb 19                	jmp    c00224cd <IDE::read(unsigned char, unsigned char)+0xa5>
c00224b4:	31 c0                	xor    eax,eax
c00224b6:	80 fb 15             	cmp    bl,0x15
c00224b9:	77 13                	ja     c00224ce <IDE::read(unsigned char, unsigned char)+0xa6>
c00224bb:	0f b6 d2             	movzx  edx,dl
c00224be:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00224c6:	0f b6 d3             	movzx  edx,bl
c00224c9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00224cd:	ec                   	in     al,dx
c00224ce:	83 c4 1c             	add    esp,0x1c
c00224d1:	5b                   	pop    ebx
c00224d2:	5e                   	pop    esi
c00224d3:	5f                   	pop    edi
c00224d4:	5d                   	pop    ebp
c00224d5:	c3                   	ret    

c00224d6 <IDE::waitInterrupt(unsigned char)>:
c00224d6:	55                   	push   ebp
c00224d7:	57                   	push   edi
c00224d8:	56                   	push   esi
c00224d9:	53                   	push   ebx
c00224da:	31 db                	xor    ebx,ebx
c00224dc:	83 ec 0c             	sub    esp,0xc
c00224df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00224e3:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00224e8:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00224f0:	89 e8                	mov    eax,ebp
c00224f2:	84 c0                	test   al,al
c00224f4:	75 34                	jne    c002252a <IDE::waitInterrupt(unsigned char)+0x54>
c00224f6:	52                   	push   edx
c00224f7:	6a 0c                	push   0xc
c00224f9:	56                   	push   esi
c00224fa:	57                   	push   edi
c00224fb:	e8 28 ff ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0022500:	83 c4 10             	add    esp,0x10
c0022503:	a8 01                	test   al,0x1
c0022505:	75 2b                	jne    c0022532 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022507:	f6 c3 04             	test   bl,0x4
c002250a:	75 16                	jne    c0022522 <IDE::waitInterrupt(unsigned char)+0x4c>
c002250c:	83 fb 32             	cmp    ebx,0x32
c002250f:	7e 11                	jle    c0022522 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022511:	50                   	push   eax
c0022512:	50                   	push   eax
c0022513:	6a 00                	push   0x0
c0022515:	68 80 96 98 00       	push   0x989680
c002251a:	e8 8b b1 ff ff       	call   c001d6aa <nanoSleep(unsigned long long)>
c002251f:	83 c4 10             	add    esp,0x10
c0022522:	83 fb 3c             	cmp    ebx,0x3c
c0022525:	74 0b                	je     c0022532 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022527:	43                   	inc    ebx
c0022528:	eb be                	jmp    c00224e8 <IDE::waitInterrupt(unsigned char)+0x12>
c002252a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022532:	83 c4 0c             	add    esp,0xc
c0022535:	89 e8                	mov    eax,ebp
c0022537:	5b                   	pop    ebx
c0022538:	5e                   	pop    esi
c0022539:	5f                   	pop    edi
c002253a:	5d                   	pop    ebp
c002253b:	c3                   	ret    

c002253c <ideChannel0IRQHandler(regs*, void*)>:
c002253c:	83 ec 10             	sub    esp,0x10
c002253f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022543:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002254a:	6a 07                	push   0x7
c002254c:	6a 00                	push   0x0
c002254e:	50                   	push   eax
c002254f:	e8 d4 fe ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0022554:	83 c4 1c             	add    esp,0x1c
c0022557:	c3                   	ret    

c0022558 <ideChannel1IRQHandler(regs*, void*)>:
c0022558:	83 ec 10             	sub    esp,0x10
c002255b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002255f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022566:	6a 07                	push   0x7
c0022568:	6a 01                	push   0x1
c002256a:	50                   	push   eax
c002256b:	e8 b8 fe ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0022570:	83 c4 1c             	add    esp,0x1c
c0022573:	c3                   	ret    

c0022574 <IDE::enableIRQs(unsigned char, bool)>:
c0022574:	57                   	push   edi
c0022575:	56                   	push   esi
c0022576:	be 04 00 00 00       	mov    esi,0x4
c002257b:	53                   	push   ebx
c002257c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022581:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022585:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002258a:	0f 94 c0             	sete   al
c002258d:	d1 e0                	shl    eax,1
c002258f:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022596:	0f b6 c0             	movzx  eax,al
c0022599:	50                   	push   eax
c002259a:	6a 0c                	push   0xc
c002259c:	57                   	push   edi
c002259d:	53                   	push   ebx
c002259e:	e8 c5 fd ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00225a3:	83 c4 10             	add    esp,0x10
c00225a6:	50                   	push   eax
c00225a7:	6a 0c                	push   0xc
c00225a9:	57                   	push   edi
c00225aa:	53                   	push   ebx
c00225ab:	e8 78 fe ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c00225b0:	83 c4 10             	add    esp,0x10
c00225b3:	4e                   	dec    esi
c00225b4:	75 f0                	jne    c00225a6 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00225b6:	5b                   	pop    ebx
c00225b7:	5e                   	pop    esi
c00225b8:	5f                   	pop    edi
c00225b9:	c3                   	ret    

c00225ba <IDE::open(int, int, void*)>:
c00225ba:	55                   	push   ebp
c00225bb:	57                   	push   edi
c00225bc:	56                   	push   esi
c00225bd:	53                   	push   ebx
c00225be:	83 ec 1c             	sub    esp,0x1c
c00225c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00225c5:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00225ce:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00225d7:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00225de:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00225e5:	0f 85 b0 02 00 00    	jne    c002289b <IDE::open(int, int, void*)+0x2e1>
c00225eb:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00225f1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00225f5:	83 e0 7f             	and    eax,0x7f
c00225f8:	3c 05                	cmp    al,0x5
c00225fa:	74 04                	je     c0022600 <IDE::open(int, int, void*)+0x46>
c00225fc:	3c 0f                	cmp    al,0xf
c00225fe:	75 32                	jne    c0022632 <IDE::open(int, int, void*)+0x78>
c0022600:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022606:	83 e0 fc             	and    eax,0xfffffffc
c0022609:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0022610:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0022616:	83 e0 fc             	and    eax,0xfffffffc
c0022619:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0022620:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022626:	83 e0 fc             	and    eax,0xfffffffc
c0022629:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022630:	eb 14                	jmp    c0022646 <IDE::open(int, int, void*)+0x8c>
c0022632:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002263c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022646:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002264d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0022654:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022658:	89 c6                	mov    esi,eax
c002265a:	bf f8 0c 00 00       	mov    edi,0xcf8
c002265f:	c1 e6 10             	shl    esi,0x10
c0022662:	89 e8                	mov    eax,ebp
c0022664:	89 fa                	mov    edx,edi
c0022666:	c1 e0 0b             	shl    eax,0xb
c0022669:	09 f0                	or     eax,esi
c002266b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0022672:	c1 e6 08             	shl    esi,0x8
c0022675:	09 c6                	or     esi,eax
c0022677:	89 f0                	mov    eax,esi
c0022679:	0d 08 00 00 80       	or     eax,0x80000008
c002267e:	ef                   	out    dx,eax
c002267f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0022684:	89 ca                	mov    edx,ecx
c0022686:	ed                   	in     eax,dx
c0022687:	c1 e8 10             	shr    eax,0x10
c002268a:	3d ff ff 00 00       	cmp    eax,0xffff
c002268f:	0f 84 f5 00 00 00    	je     c002278a <IDE::open(int, int, void*)+0x1d0>
c0022695:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002269b:	89 fa                	mov    edx,edi
c002269d:	89 f0                	mov    eax,esi
c002269f:	ef                   	out    dx,eax
c00226a0:	b0 fe                	mov    al,0xfe
c00226a2:	89 ca                	mov    edx,ecx
c00226a4:	ee                   	out    dx,al
c00226a5:	89 f0                	mov    eax,esi
c00226a7:	89 fa                	mov    edx,edi
c00226a9:	ef                   	out    dx,eax
c00226aa:	89 ca                	mov    edx,ecx
c00226ac:	ed                   	in     eax,dx
c00226ad:	3c fe                	cmp    al,0xfe
c00226af:	0f 85 a9 00 00 00    	jne    c002275e <IDE::open(int, int, void*)+0x1a4>
c00226b5:	8b 15 c8 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002cec8
c00226bb:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00226c2:	74 33                	je     c00226f7 <IDE::open(int, int, void*)+0x13d>
c00226c4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00226ca:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00226ce:	40                   	inc    eax
c00226cf:	83 ec 0c             	sub    esp,0xc
c00226d2:	0f b6 c0             	movzx  eax,al
c00226d5:	50                   	push   eax
c00226d6:	55                   	push   ebp
c00226d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00226db:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00226e1:	51                   	push   ecx
c00226e2:	e8 45 52 ff ff       	call   c001792c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00226e7:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00226ec:	83 c4 1c             	add    esp,0x1c
c00226ef:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00226f5:	eb 0a                	jmp    c0022701 <IDE::open(int, int, void*)+0x147>
c00226f7:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0022701:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0022708:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002270f:	c1 e1 10             	shl    ecx,0x10
c0022712:	c1 e0 08             	shl    eax,0x8
c0022715:	bf f8 0c 00 00       	mov    edi,0xcf8
c002271a:	09 c1                	or     ecx,eax
c002271c:	89 fa                	mov    edx,edi
c002271e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0022725:	c1 e0 0b             	shl    eax,0xb
c0022728:	09 c1                	or     ecx,eax
c002272a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0022730:	89 c8                	mov    eax,ecx
c0022732:	ef                   	out    dx,eax
c0022733:	be fc 0c 00 00       	mov    esi,0xcfc
c0022738:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002273e:	89 f2                	mov    edx,esi
c0022740:	ee                   	out    dx,al
c0022741:	89 c8                	mov    eax,ecx
c0022743:	89 fa                	mov    edx,edi
c0022745:	ef                   	out    dx,eax
c0022746:	89 f2                	mov    edx,esi
c0022748:	ed                   	in     eax,dx
c0022749:	0f b6 c0             	movzx  eax,al
c002274c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0022752:	74 46                	je     c002279a <IDE::open(int, int, void*)+0x1e0>
c0022754:	83 ec 0c             	sub    esp,0xc
c0022757:	68 a8 b5 02 c0       	push   0xc002b5a8
c002275c:	eb 34                	jmp    c0022792 <IDE::open(int, int, void*)+0x1d8>
c002275e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0022767:	75 17                	jne    c0022780 <IDE::open(int, int, void*)+0x1c6>
c0022769:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002276e:	74 07                	je     c0022777 <IDE::open(int, int, void*)+0x1bd>
c0022770:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0022775:	75 09                	jne    c0022780 <IDE::open(int, int, void*)+0x1c6>
c0022777:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002277e:	eb 1a                	jmp    c002279a <IDE::open(int, int, void*)+0x1e0>
c0022780:	83 ec 0c             	sub    esp,0xc
c0022783:	68 b0 b5 02 c0       	push   0xc002b5b0
c0022788:	eb 08                	jmp    c0022792 <IDE::open(int, int, void*)+0x1d8>
c002278a:	83 ec 0c             	sub    esp,0xc
c002278d:	68 e1 b5 02 c0       	push   0xc002b5e1
c0022792:	e8 14 74 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c0022797:	83 c4 10             	add    esp,0x10
c002279a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00227a1:	79 1a                	jns    c00227bd <IDE::open(int, int, void*)+0x203>
c00227a3:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00227a9:	83 e0 fc             	and    eax,0xfffffffc
c00227ac:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00227b3:	83 c0 08             	add    eax,0x8
c00227b6:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00227bd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00227c3:	89 c2                	mov    edx,eax
c00227c5:	83 e2 0f             	and    edx,0xf
c00227c8:	66 83 fa 08          	cmp    dx,0x8
c00227cc:	75 0a                	jne    c00227d8 <IDE::open(int, int, void*)+0x21e>
c00227ce:	83 e8 02             	sub    eax,0x2
c00227d1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00227d8:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00227de:	89 c2                	mov    edx,eax
c00227e0:	83 e2 0f             	and    edx,0xf
c00227e3:	66 83 fa 08          	cmp    dx,0x8
c00227e7:	75 0a                	jne    c00227f3 <IDE::open(int, int, void*)+0x239>
c00227e9:	83 e8 02             	sub    eax,0x2
c00227ec:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00227f3:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00227fa:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0022801:	89 d0                	mov    eax,edx
c0022803:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022806:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002280a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002280e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0022811:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022816:	0f b6 c9             	movzx  ecx,cl
c0022819:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0022820:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022823:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022827:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002282b:	8d 50 02             	lea    edx,[eax+0x2]
c002282e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022833:	0f b6 d2             	movzx  edx,dl
c0022836:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002283c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002283f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022843:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0022847:	8d 48 03             	lea    ecx,[eax+0x3]
c002284a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002284f:	0f b6 c9             	movzx  ecx,cl
c0022852:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0022858:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002285b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002285f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0022863:	8d 50 04             	lea    edx,[eax+0x4]
c0022866:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002286c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022871:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0022878:	66 85 f6             	test   si,si
c002287b:	74 3e                	je     c00228bb <IDE::open(int, int, void*)+0x301>
c002287d:	0f b6 d2             	movzx  edx,dl
c0022880:	83 c0 05             	add    eax,0x5
c0022883:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022886:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002288a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002288e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0022894:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022899:	eb 20                	jmp    c00228bb <IDE::open(int, int, void*)+0x301>
c002289b:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00228a5:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00228af:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00228b6:	e9 02 ff ff ff       	jmp    c00227bd <IDE::open(int, int, void*)+0x203>
c00228bb:	52                   	push   edx
c00228bc:	52                   	push   edx
c00228bd:	6a 00                	push   0x0
c00228bf:	53                   	push   ebx
c00228c0:	e8 7d fa ff ff       	call   c0022342 <IDE::prepareInterrupt(unsigned char)>
c00228c5:	59                   	pop    ecx
c00228c6:	5e                   	pop    esi
c00228c7:	6a 01                	push   0x1
c00228c9:	53                   	push   ebx
c00228ca:	e8 73 fa ff ff       	call   c0022342 <IDE::prepareInterrupt(unsigned char)>
c00228cf:	83 c4 0c             	add    esp,0xc
c00228d2:	6a 00                	push   0x0
c00228d4:	6a 00                	push   0x0
c00228d6:	53                   	push   ebx
c00228d7:	e8 98 fc ff ff       	call   c0022574 <IDE::enableIRQs(unsigned char, bool)>
c00228dc:	83 c4 0c             	add    esp,0xc
c00228df:	6a 00                	push   0x0
c00228e1:	6a 01                	push   0x1
c00228e3:	53                   	push   ebx
c00228e4:	e8 8b fc ff ff       	call   c0022574 <IDE::enableIRQs(unsigned char, bool)>
c00228e9:	83 c4 10             	add    esp,0x10
c00228ec:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00228f3:	74 40                	je     c0022935 <IDE::open(int, int, void*)+0x37b>
c00228f5:	83 ec 0c             	sub    esp,0xc
c00228f8:	68 0b b6 02 c0       	push   0xc002b60b
c00228fd:	e8 d9 ff fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0022902:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022905:	6a 01                	push   0x1
c0022907:	68 3c 25 02 c0       	push   0xc002253c
c002290c:	6a 0e                	push   0xe
c002290e:	53                   	push   ebx
c002290f:	e8 72 13 ff ff       	call   c0013c86 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022914:	83 c4 14             	add    esp,0x14
c0022917:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002291d:	53                   	push   ebx
c002291e:	6a 01                	push   0x1
c0022920:	68 58 25 02 c0       	push   0xc0022558
c0022925:	6a 0f                	push   0xf
c0022927:	53                   	push   ebx
c0022928:	e8 59 13 ff ff       	call   c0013c86 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002292d:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0022933:	eb 4a                	jmp    c002297f <IDE::open(int, int, void*)+0x3c5>
c0022935:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002293f:	50                   	push   eax
c0022940:	6a 0f                	push   0xf
c0022942:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022948:	68 27 b6 02 c0       	push   0xc002b627
c002294d:	e8 89 ff fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0022952:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022955:	6a 00                	push   0x0
c0022957:	68 3c 25 02 c0       	push   0xc002253c
c002295c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022962:	53                   	push   ebx
c0022963:	e8 1e 13 ff ff       	call   c0013c86 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022968:	83 c4 14             	add    esp,0x14
c002296b:	53                   	push   ebx
c002296c:	6a 00                	push   0x0
c002296e:	68 58 25 02 c0       	push   0xc0022558
c0022973:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0022979:	53                   	push   ebx
c002297a:	e8 07 13 ff ff       	call   c0013c86 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002297f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022981:	83 c4 20             	add    esp,0x20
c0022984:	83 ec 0c             	sub    esp,0xc
c0022987:	53                   	push   ebx
c0022988:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002298b:	83 c4 0c             	add    esp,0xc
c002298e:	6a 07                	push   0x7
c0022990:	6a 00                	push   0x0
c0022992:	53                   	push   ebx
c0022993:	e8 90 fa ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0022998:	83 c4 0c             	add    esp,0xc
c002299b:	6a 07                	push   0x7
c002299d:	6a 01                	push   0x1
c002299f:	53                   	push   ebx
c00229a0:	e8 83 fa ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c00229a5:	83 c4 0c             	add    esp,0xc
c00229a8:	6a 01                	push   0x1
c00229aa:	6a 00                	push   0x0
c00229ac:	53                   	push   ebx
c00229ad:	e8 c2 fb ff ff       	call   c0022574 <IDE::enableIRQs(unsigned char, bool)>
c00229b2:	83 c4 0c             	add    esp,0xc
c00229b5:	6a 01                	push   0x1
c00229b7:	6a 01                	push   0x1
c00229b9:	53                   	push   ebx
c00229ba:	e8 b5 fb ff ff       	call   c0022574 <IDE::enableIRQs(unsigned char, bool)>
c00229bf:	83 c4 2c             	add    esp,0x2c
c00229c2:	31 c0                	xor    eax,eax
c00229c4:	5b                   	pop    ebx
c00229c5:	5e                   	pop    esi
c00229c6:	5f                   	pop    edi
c00229c7:	5d                   	pop    ebp
c00229c8:	c3                   	ret    
c00229c9:	90                   	nop

c00229ca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00229ca:	55                   	push   ebp
c00229cb:	57                   	push   edi
c00229cc:	56                   	push   esi
c00229cd:	53                   	push   ebx
c00229ce:	83 ec 1c             	sub    esp,0x1c
c00229d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00229d5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00229d9:	8d 50 f8             	lea    edx,[eax-0x8]
c00229dc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00229e0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00229e4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00229e8:	80 fa 03             	cmp    dl,0x3
c00229eb:	77 5d                	ja     c0022a4a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00229ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00229f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00229f5:	0f b6 db             	movzx  ebx,bl
c00229f8:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00229fb:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00229ff:	83 ca 80             	or     edx,0xffffff80
c0022a02:	0f b6 d2             	movzx  edx,dl
c0022a05:	52                   	push   edx
c0022a06:	6a 0c                	push   0xc
c0022a08:	53                   	push   ebx
c0022a09:	56                   	push   esi
c0022a0a:	e8 59 f9 ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022a0f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0022a14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022a18:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022a1c:	0f b6 c0             	movzx  eax,al
c0022a1f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0022a23:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022a25:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0022a2a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0022a2e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022a32:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022a36:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022a3e:	83 c4 2c             	add    esp,0x2c
c0022a41:	5b                   	pop    ebx
c0022a42:	5e                   	pop    esi
c0022a43:	5f                   	pop    edi
c0022a44:	5d                   	pop    ebp
c0022a45:	e9 1e f9 ff ff       	jmp    c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022a4a:	3c 07                	cmp    al,0x7
c0022a4c:	77 10                	ja     c0022a5e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0022a4e:	0f b6 db             	movzx  ebx,bl
c0022a51:	0f b6 d0             	movzx  edx,al
c0022a54:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0022a5c:	eb 2d                	jmp    c0022a8b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022a5e:	3c 0d                	cmp    al,0xd
c0022a60:	77 13                	ja     c0022a75 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0022a62:	0f b6 db             	movzx  ebx,bl
c0022a65:	0f b6 c0             	movzx  eax,al
c0022a68:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0022a6f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0022a73:	eb 16                	jmp    c0022a8b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022a75:	3c 15                	cmp    al,0x15
c0022a77:	77 14                	ja     c0022a8d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0022a79:	0f b6 db             	movzx  ebx,bl
c0022a7c:	0f b6 c0             	movzx  eax,al
c0022a7f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0022a87:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0022a8b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022a8d:	83 c4 1c             	add    esp,0x1c
c0022a90:	5b                   	pop    ebx
c0022a91:	5e                   	pop    esi
c0022a92:	5f                   	pop    edi
c0022a93:	5d                   	pop    ebp
c0022a94:	c3                   	ret    
c0022a95:	90                   	nop

c0022a96 <IDE::detect()>:
c0022a96:	55                   	push   ebp
c0022a97:	57                   	push   edi
c0022a98:	56                   	push   esi
c0022a99:	53                   	push   ebx
c0022a9a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0022aa0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0022aa7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0022aae:	0f 85 be 02 00 00    	jne    c0022d72 <IDE::detect()+0x2dc>
c0022ab4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0022abb:	31 f6                	xor    esi,esi
c0022abd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0022ac5:	31 ed                	xor    ebp,ebp
c0022ac7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022acb:	c1 e0 06             	shl    eax,0x6
c0022ace:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0022ad6:	89 e8                	mov    eax,ebp
c0022ad8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0022adc:	c1 e0 04             	shl    eax,0x4
c0022adf:	83 c8 a0             	or     eax,0xffffffa0
c0022ae2:	0f b6 c0             	movzx  eax,al
c0022ae5:	50                   	push   eax
c0022ae6:	6a 06                	push   0x6
c0022ae8:	56                   	push   esi
c0022ae9:	53                   	push   ebx
c0022aea:	e8 79 f8 ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022aef:	83 c4 0c             	add    esp,0xc
c0022af2:	6a 0c                	push   0xc
c0022af4:	56                   	push   esi
c0022af5:	53                   	push   ebx
c0022af6:	e8 2d f9 ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0022afb:	83 c4 0c             	add    esp,0xc
c0022afe:	6a 0c                	push   0xc
c0022b00:	56                   	push   esi
c0022b01:	53                   	push   ebx
c0022b02:	e8 21 f9 ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0022b07:	83 c4 0c             	add    esp,0xc
c0022b0a:	6a 0c                	push   0xc
c0022b0c:	56                   	push   esi
c0022b0d:	53                   	push   ebx
c0022b0e:	e8 15 f9 ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0022b13:	83 c4 0c             	add    esp,0xc
c0022b16:	6a 0c                	push   0xc
c0022b18:	56                   	push   esi
c0022b19:	53                   	push   ebx
c0022b1a:	e8 09 f9 ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0022b1f:	68 ec 00 00 00       	push   0xec
c0022b24:	6a 07                	push   0x7
c0022b26:	56                   	push   esi
c0022b27:	53                   	push   ebx
c0022b28:	e8 3b f8 ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022b2d:	83 c4 1c             	add    esp,0x1c
c0022b30:	6a 0c                	push   0xc
c0022b32:	56                   	push   esi
c0022b33:	53                   	push   ebx
c0022b34:	e8 ef f8 ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0022b39:	83 c4 0c             	add    esp,0xc
c0022b3c:	6a 0c                	push   0xc
c0022b3e:	56                   	push   esi
c0022b3f:	53                   	push   ebx
c0022b40:	e8 e3 f8 ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0022b45:	83 c4 0c             	add    esp,0xc
c0022b48:	6a 0c                	push   0xc
c0022b4a:	56                   	push   esi
c0022b4b:	53                   	push   ebx
c0022b4c:	e8 d7 f8 ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0022b51:	83 c4 0c             	add    esp,0xc
c0022b54:	6a 0c                	push   0xc
c0022b56:	56                   	push   esi
c0022b57:	53                   	push   ebx
c0022b58:	e8 cb f8 ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0022b5d:	83 c4 0c             	add    esp,0xc
c0022b60:	6a 0c                	push   0xc
c0022b62:	56                   	push   esi
c0022b63:	53                   	push   ebx
c0022b64:	e8 bf f8 ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0022b69:	83 c4 10             	add    esp,0x10
c0022b6c:	84 c0                	test   al,al
c0022b6e:	0f 84 8b 01 00 00    	je     c0022cff <IDE::detect()+0x269>
c0022b74:	31 ff                	xor    edi,edi
c0022b76:	50                   	push   eax
c0022b77:	6a 0c                	push   0xc
c0022b79:	56                   	push   esi
c0022b7a:	53                   	push   ebx
c0022b7b:	e8 a8 f8 ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0022b80:	83 c4 10             	add    esp,0x10
c0022b83:	a8 01                	test   al,0x1
c0022b85:	0f 85 8e 01 00 00    	jne    c0022d19 <IDE::detect()+0x283>
c0022b8b:	84 c0                	test   al,al
c0022b8d:	78 04                	js     c0022b93 <IDE::detect()+0xfd>
c0022b8f:	a8 08                	test   al,0x8
c0022b91:	75 27                	jne    c0022bba <IDE::detect()+0x124>
c0022b93:	47                   	inc    edi
c0022b94:	81 ff 17 01 00 00    	cmp    edi,0x117
c0022b9a:	7e da                	jle    c0022b76 <IDE::detect()+0xe0>
c0022b9c:	50                   	push   eax
c0022b9d:	50                   	push   eax
c0022b9e:	6a 00                	push   0x0
c0022ba0:	68 40 4b 4c 00       	push   0x4c4b40
c0022ba5:	e8 00 ab ff ff       	call   c001d6aa <nanoSleep(unsigned long long)>
c0022baa:	83 c4 10             	add    esp,0x10
c0022bad:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0022bb3:	75 c1                	jne    c0022b76 <IDE::detect()+0xe0>
c0022bb5:	e9 5f 01 00 00       	jmp    c0022d19 <IDE::detect()+0x283>
c0022bba:	31 c9                	xor    ecx,ecx
c0022bbc:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0022bc0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022bc4:	83 ec 0c             	sub    esp,0xc
c0022bc7:	68 80 00 00 00       	push   0x80
c0022bcc:	57                   	push   edi
c0022bcd:	6a 00                	push   0x0
c0022bcf:	56                   	push   esi
c0022bd0:	53                   	push   ebx
c0022bd1:	e8 f4 fd ff ff       	call   c00229ca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0022bd6:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0022bdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022bdf:	89 d1                	mov    ecx,edx
c0022be1:	c1 e0 06             	shl    eax,0x6
c0022be4:	01 d8                	add    eax,ebx
c0022be6:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0022bed:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0022bf4:	89 f2                	mov    edx,esi
c0022bf6:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0022bfc:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0022c00:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0022c06:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022c0a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0022c11:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0022c19:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0022c20:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0022c28:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0022c2e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0022c35:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0022c3b:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022c3f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022c43:	83 c4 20             	add    esp,0x20
c0022c46:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0022c49:	83 c0 02             	add    eax,0x2
c0022c4c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0022c52:	83 c7 02             	add    edi,0x2
c0022c55:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0022c58:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0022c5e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0022c62:	75 e2                	jne    c0022c46 <IDE::detect()+0x1b0>
c0022c64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c68:	c1 e0 06             	shl    eax,0x6
c0022c6b:	01 d8                	add    eax,ebx
c0022c6d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0022c73:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0022c7a:	66 c1 ea 09          	shr    dx,0x9
c0022c7e:	83 e2 01             	and    edx,0x1
c0022c81:	84 c9                	test   cl,cl
c0022c83:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0022c89:	75 2f                	jne    c0022cba <IDE::detect()+0x224>
c0022c8b:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0022c91:	85 c0                	test   eax,eax
c0022c93:	74 66                	je     c0022cfb <IDE::detect()+0x265>
c0022c95:	50                   	push   eax
c0022c96:	55                   	push   ebp
c0022c97:	56                   	push   esi
c0022c98:	68 43 b6 02 c0       	push   0xc002b643
c0022c9d:	e8 39 fc fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0022ca2:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0022ca9:	e8 88 c9 fe ff       	call   c000f636 <malloc>
c0022cae:	89 c7                	mov    edi,eax
c0022cb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0022cb3:	e8 62 06 00 00       	call   c002331a <ATA::ATA()>
c0022cb8:	eb 28                	jmp    c0022ce2 <IDE::detect()+0x24c>
c0022cba:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0022cc0:	55                   	push   ebp
c0022cc1:	56                   	push   esi
c0022cc2:	68 72 b6 02 c0       	push   0xc002b672
c0022cc7:	e8 0f fc fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0022ccc:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0022cd3:	e8 5e c9 fe ff       	call   c000f636 <malloc>
c0022cd8:	89 c7                	mov    edi,eax
c0022cda:	89 04 24             	mov    DWORD PTR [esp],eax
c0022cdd:	e8 68 0c 00 00       	call   c002394a <ATAPI::ATAPI()>
c0022ce2:	5a                   	pop    edx
c0022ce3:	59                   	pop    ecx
c0022ce4:	57                   	push   edi
c0022ce5:	53                   	push   ebx
c0022ce6:	e8 17 10 ff ff       	call   c0013d02 <Device::addChild(Device*)>
c0022ceb:	8b 07                	mov    eax,DWORD PTR [edi]
c0022ced:	53                   	push   ebx
c0022cee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022cf2:	6a 00                	push   0x0
c0022cf4:	57                   	push   edi
c0022cf5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022cf8:	83 c4 20             	add    esp,0x20
c0022cfb:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0022cff:	4d                   	dec    ebp
c0022d00:	74 0a                	je     c0022d0c <IDE::detect()+0x276>
c0022d02:	bd 01 00 00 00       	mov    ebp,0x1
c0022d07:	e9 bb fd ff ff       	jmp    c0022ac7 <IDE::detect()+0x31>
c0022d0c:	4e                   	dec    esi
c0022d0d:	74 63                	je     c0022d72 <IDE::detect()+0x2dc>
c0022d0f:	be 01 00 00 00       	mov    esi,0x1
c0022d14:	e9 ac fd ff ff       	jmp    c0022ac5 <IDE::detect()+0x2f>
c0022d19:	50                   	push   eax
c0022d1a:	6a 04                	push   0x4
c0022d1c:	56                   	push   esi
c0022d1d:	53                   	push   ebx
c0022d1e:	e8 05 f7 ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0022d23:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022d27:	83 c4 0c             	add    esp,0xc
c0022d2a:	6a 05                	push   0x5
c0022d2c:	56                   	push   esi
c0022d2d:	53                   	push   ebx
c0022d2e:	e8 f5 f6 ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0022d33:	83 c4 10             	add    esp,0x10
c0022d36:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0022d3a:	80 fa 14             	cmp    dl,0x14
c0022d3d:	75 04                	jne    c0022d43 <IDE::detect()+0x2ad>
c0022d3f:	3c eb                	cmp    al,0xeb
c0022d41:	eb 07                	jmp    c0022d4a <IDE::detect()+0x2b4>
c0022d43:	3c 96                	cmp    al,0x96
c0022d45:	75 b8                	jne    c0022cff <IDE::detect()+0x269>
c0022d47:	80 fa 69             	cmp    dl,0x69
c0022d4a:	75 b3                	jne    c0022cff <IDE::detect()+0x269>
c0022d4c:	68 a1 00 00 00       	push   0xa1
c0022d51:	6a 07                	push   0x7
c0022d53:	56                   	push   esi
c0022d54:	53                   	push   ebx
c0022d55:	e8 0e f6 ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d5a:	5f                   	pop    edi
c0022d5b:	58                   	pop    eax
c0022d5c:	6a 00                	push   0x0
c0022d5e:	68 40 42 0f 00       	push   0xf4240
c0022d63:	e8 42 a9 ff ff       	call   c001d6aa <nanoSleep(unsigned long long)>
c0022d68:	83 c4 10             	add    esp,0x10
c0022d6b:	b1 01                	mov    cl,0x1
c0022d6d:	e9 4a fe ff ff       	jmp    c0022bbc <IDE::detect()+0x126>
c0022d72:	81 c4 1c 02 00 00    	add    esp,0x21c
c0022d78:	5b                   	pop    ebx
c0022d79:	5e                   	pop    esi
c0022d7a:	5f                   	pop    edi
c0022d7b:	5d                   	pop    ebp
c0022d7c:	c3                   	ret    
c0022d7d:	90                   	nop

c0022d7e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0022d7e:	55                   	push   ebp
c0022d7f:	57                   	push   edi
c0022d80:	56                   	push   esi
c0022d81:	53                   	push   ebx
c0022d82:	83 ec 1c             	sub    esp,0x1c
c0022d85:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022d89:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022d8d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022d91:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022d95:	88 c3                	mov    bl,al
c0022d97:	84 c0                	test   al,al
c0022d99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022d9d:	0f 84 67 01 00 00    	je     c0022f0a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0022da3:	83 ec 0c             	sub    esp,0xc
c0022da6:	68 a3 b6 02 c0       	push   0xc002b6a3
c0022dab:	e8 2b fb fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0022db0:	83 c4 10             	add    esp,0x10
c0022db3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022db7:	3c 01                	cmp    al,0x1
c0022db9:	75 17                	jne    c0022dd2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0022dbb:	83 ec 0c             	sub    esp,0xc
c0022dbe:	b3 13                	mov    bl,0x13
c0022dc0:	68 af b6 02 c0       	push   0xc002b6af
c0022dc5:	e8 11 fb fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0022dca:	83 c4 10             	add    esp,0x10
c0022dcd:	e9 25 01 00 00       	jmp    c0022ef7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022dd2:	3c 02                	cmp    al,0x2
c0022dd4:	0f 85 ef 00 00 00    	jne    c0022ec9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0022dda:	d1 e6                	shl    esi,1
c0022ddc:	09 ee                	or     esi,ebp
c0022dde:	52                   	push   edx
c0022ddf:	89 f0                	mov    eax,esi
c0022de1:	6a 01                	push   0x1
c0022de3:	0f b6 f0             	movzx  esi,al
c0022de6:	c1 e6 06             	shl    esi,0x6
c0022de9:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0022df1:	50                   	push   eax
c0022df2:	57                   	push   edi
c0022df3:	e8 30 f6 ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0022df8:	83 c4 10             	add    esp,0x10
c0022dfb:	89 c6                	mov    esi,eax
c0022dfd:	a8 01                	test   al,0x1
c0022dff:	74 12                	je     c0022e13 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0022e01:	83 ec 0c             	sub    esp,0xc
c0022e04:	b3 07                	mov    bl,0x7
c0022e06:	68 c4 b6 02 c0       	push   0xc002b6c4
c0022e0b:	e8 cb fa fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0022e10:	83 c4 10             	add    esp,0x10
c0022e13:	f7 c6 02 00 00 00    	test   esi,0x2
c0022e19:	74 12                	je     c0022e2d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0022e1b:	83 ec 0c             	sub    esp,0xc
c0022e1e:	b3 03                	mov    bl,0x3
c0022e20:	68 e2 b6 02 c0       	push   0xc002b6e2
c0022e25:	e8 b1 fa fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0022e2a:	83 c4 10             	add    esp,0x10
c0022e2d:	f7 c6 04 00 00 00    	test   esi,0x4
c0022e33:	74 12                	je     c0022e47 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0022e35:	83 ec 0c             	sub    esp,0xc
c0022e38:	b3 14                	mov    bl,0x14
c0022e3a:	68 02 b7 02 c0       	push   0xc002b702
c0022e3f:	e8 97 fa fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0022e44:	83 c4 10             	add    esp,0x10
c0022e47:	f7 c6 08 00 00 00    	test   esi,0x8
c0022e4d:	74 12                	je     c0022e61 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0022e4f:	83 ec 0c             	sub    esp,0xc
c0022e52:	b3 03                	mov    bl,0x3
c0022e54:	68 e2 b6 02 c0       	push   0xc002b6e2
c0022e59:	e8 7d fa fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0022e5e:	83 c4 10             	add    esp,0x10
c0022e61:	f7 c6 10 00 00 00    	test   esi,0x10
c0022e67:	74 12                	je     c0022e7b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0022e69:	83 ec 0c             	sub    esp,0xc
c0022e6c:	b3 15                	mov    bl,0x15
c0022e6e:	68 1a b7 02 c0       	push   0xc002b71a
c0022e73:	e8 63 fa fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0022e78:	83 c4 10             	add    esp,0x10
c0022e7b:	f7 c6 20 00 00 00    	test   esi,0x20
c0022e81:	74 12                	je     c0022e95 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0022e83:	83 ec 0c             	sub    esp,0xc
c0022e86:	b3 03                	mov    bl,0x3
c0022e88:	68 e2 b6 02 c0       	push   0xc002b6e2
c0022e8d:	e8 49 fa fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0022e92:	83 c4 10             	add    esp,0x10
c0022e95:	f7 c6 40 00 00 00    	test   esi,0x40
c0022e9b:	74 12                	je     c0022eaf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0022e9d:	83 ec 0c             	sub    esp,0xc
c0022ea0:	b3 16                	mov    bl,0x16
c0022ea2:	68 34 b7 02 c0       	push   0xc002b734
c0022ea7:	e8 2f fa fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0022eac:	83 c4 10             	add    esp,0x10
c0022eaf:	89 f0                	mov    eax,esi
c0022eb1:	84 c0                	test   al,al
c0022eb3:	79 42                	jns    c0022ef7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022eb5:	83 ec 0c             	sub    esp,0xc
c0022eb8:	b3 0d                	mov    bl,0xd
c0022eba:	68 55 b7 02 c0       	push   0xc002b755
c0022ebf:	e8 17 fa fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0022ec4:	83 c4 10             	add    esp,0x10
c0022ec7:	eb 2e                	jmp    c0022ef7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022ec9:	3c 03                	cmp    al,0x3
c0022ecb:	75 14                	jne    c0022ee1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0022ecd:	83 ec 0c             	sub    esp,0xc
c0022ed0:	b3 17                	mov    bl,0x17
c0022ed2:	68 69 b7 02 c0       	push   0xc002b769
c0022ed7:	e8 ff f9 fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0022edc:	83 c4 10             	add    esp,0x10
c0022edf:	eb 16                	jmp    c0022ef7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022ee1:	3c 04                	cmp    al,0x4
c0022ee3:	75 12                	jne    c0022ef7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022ee5:	83 ec 0c             	sub    esp,0xc
c0022ee8:	b3 08                	mov    bl,0x8
c0022eea:	68 7f b7 02 c0       	push   0xc002b77f
c0022eef:	e8 e7 f9 fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0022ef4:	83 c4 10             	add    esp,0x10
c0022ef7:	50                   	push   eax
c0022ef8:	50                   	push   eax
c0022ef9:	0f b6 c3             	movzx  eax,bl
c0022efc:	50                   	push   eax
c0022efd:	68 97 b7 02 c0       	push   0xc002b797
c0022f02:	e8 d4 f9 fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0022f07:	83 c4 10             	add    esp,0x10
c0022f0a:	83 c4 1c             	add    esp,0x1c
c0022f0d:	88 d8                	mov    al,bl
c0022f0f:	5b                   	pop    ebx
c0022f10:	5e                   	pop    esi
c0022f11:	5f                   	pop    edi
c0022f12:	5d                   	pop    ebp
c0022f13:	c3                   	ret    

c0022f14 <IDE::polling(unsigned char, unsigned int)>:
c0022f14:	57                   	push   edi
c0022f15:	56                   	push   esi
c0022f16:	53                   	push   ebx
c0022f17:	bb 04 00 00 00       	mov    ebx,0x4
c0022f1c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022f20:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022f25:	52                   	push   edx
c0022f26:	6a 0c                	push   0xc
c0022f28:	56                   	push   esi
c0022f29:	57                   	push   edi
c0022f2a:	e8 f9 f4 ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0022f2f:	83 c4 10             	add    esp,0x10
c0022f32:	4b                   	dec    ebx
c0022f33:	75 f0                	jne    c0022f25 <IDE::polling(unsigned char, unsigned int)+0x11>
c0022f35:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022f3a:	50                   	push   eax
c0022f3b:	6a 0c                	push   0xc
c0022f3d:	56                   	push   esi
c0022f3e:	57                   	push   edi
c0022f3f:	e8 e4 f4 ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0022f44:	83 c4 10             	add    esp,0x10
c0022f47:	a8 01                	test   al,0x1
c0022f49:	74 12                	je     c0022f5d <IDE::polling(unsigned char, unsigned int)+0x49>
c0022f4b:	83 ec 0c             	sub    esp,0xc
c0022f4e:	68 b1 b7 02 c0       	push   0xc002b7b1
c0022f53:	e8 83 f9 fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0022f58:	83 c4 10             	add    esp,0x10
c0022f5b:	eb 17                	jmp    c0022f74 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022f5d:	a8 20                	test   al,0x20
c0022f5f:	75 0f                	jne    c0022f70 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0022f61:	4b                   	dec    ebx
c0022f62:	74 10                	je     c0022f74 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022f64:	84 c0                	test   al,al
c0022f66:	78 d2                	js     c0022f3a <IDE::polling(unsigned char, unsigned int)+0x26>
c0022f68:	a8 08                	test   al,0x8
c0022f6a:	74 ce                	je     c0022f3a <IDE::polling(unsigned char, unsigned int)+0x26>
c0022f6c:	31 c0                	xor    eax,eax
c0022f6e:	eb 06                	jmp    c0022f76 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022f70:	b0 01                	mov    al,0x1
c0022f72:	eb 02                	jmp    c0022f76 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022f74:	b0 02                	mov    al,0x2
c0022f76:	5b                   	pop    ebx
c0022f77:	5e                   	pop    esi
c0022f78:	5f                   	pop    edi
c0022f79:	c3                   	ret    

c0022f7a <SATABus::close(int, int, void*)>:
c0022f7a:	31 c0                	xor    eax,eax
c0022f7c:	c3                   	ret    
c0022f7d:	90                   	nop

c0022f7e <SATABus::detect()>:
c0022f7e:	c3                   	ret    
c0022f7f:	90                   	nop

c0022f80 <SATABus::SATABus()>:
c0022f80:	83 ec 0c             	sub    esp,0xc
c0022f83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f87:	83 ec 08             	sub    esp,0x8
c0022f8a:	68 f4 b7 02 c0       	push   0xc002b7f4
c0022f8f:	50                   	push   eax
c0022f90:	e8 f9 10 ff ff       	call   c001408e <HardDiskController::HardDiskController(char const*)>
c0022f95:	83 c4 10             	add    esp,0x10
c0022f98:	ba b0 b8 02 c0       	mov    edx,0xc002b8b0
c0022f9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fa1:	89 10                	mov    DWORD PTR [eax],edx
c0022fa3:	83 ec 0c             	sub    esp,0xc
c0022fa6:	6a 50                	push   0x50
c0022fa8:	e8 c4 cd fe ff       	call   c000fd71 <Phys::allocateContiguousPages(int)>
c0022fad:	83 c4 10             	add    esp,0x10
c0022fb0:	89 c2                	mov    edx,eax
c0022fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fb6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022fbc:	83 ec 0c             	sub    esp,0xc
c0022fbf:	6a 50                	push   0x50
c0022fc1:	e8 25 e9 fe ff       	call   c00118eb <Virt::allocateKernelVirtualPages(int)>
c0022fc6:	83 c4 10             	add    esp,0x10
c0022fc9:	89 c2                	mov    edx,eax
c0022fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fcf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022fd5:	e8 a1 ea fe ff       	call   c0011a7b <Virt::getAKernelVAS()>
c0022fda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022fde:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0022fe4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022fe8:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022fee:	83 ec 0c             	sub    esp,0xc
c0022ff1:	6a 03                	push   0x3
c0022ff3:	6a 50                	push   0x50
c0022ff5:	51                   	push   ecx
c0022ff6:	52                   	push   edx
c0022ff7:	50                   	push   eax
c0022ff8:	e8 ad f2 fe ff       	call   c00122aa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0022ffd:	83 c4 20             	add    esp,0x20
c0023000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023004:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c002300a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002300e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023014:	83 ec 04             	sub    esp,0x4
c0023017:	52                   	push   edx
c0023018:	50                   	push   eax
c0023019:	68 18 b8 02 c0       	push   0xc002b818
c002301e:	e8 b8 f8 fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0023023:	83 c4 10             	add    esp,0x10
c0023026:	90                   	nop
c0023027:	83 c4 0c             	add    esp,0xc
c002302a:	c3                   	ret    
c002302b:	90                   	nop

c002302c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002302c:	83 ec 0c             	sub    esp,0xc
c002302f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023033:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023036:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023039:	09 c2                	or     edx,eax
c002303b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002303f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023045:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023047:	31 c0                	xor    eax,eax
c0023049:	c1 e9 08             	shr    ecx,0x8
c002304c:	83 e1 0f             	and    ecx,0xf
c002304f:	39 c8                	cmp    eax,ecx
c0023051:	74 0a                	je     c002305d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023053:	f6 c2 01             	test   dl,0x1
c0023056:	74 18                	je     c0023070 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023058:	d1 ea                	shr    edx,1
c002305a:	40                   	inc    eax
c002305b:	eb f2                	jmp    c002304f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c002305d:	83 ec 0c             	sub    esp,0xc
c0023060:	68 3c b8 02 c0       	push   0xc002b83c
c0023065:	e8 41 6b ff ff       	call   c0019bab <Krnl::panic(char const*)>
c002306a:	83 c4 10             	add    esp,0x10
c002306d:	83 c8 ff             	or     eax,0xffffffff
c0023070:	83 c4 0c             	add    esp,0xc
c0023073:	c3                   	ret    

c0023074 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023074:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023078:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002307b:	89 c2                	mov    edx,eax
c002307d:	c1 ea 08             	shr    edx,0x8
c0023080:	83 e2 0f             	and    edx,0xf
c0023083:	fe ca                	dec    dl
c0023085:	75 31                	jne    c00230b8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023087:	83 e0 0f             	and    eax,0xf
c002308a:	3c 03                	cmp    al,0x3
c002308c:	75 2a                	jne    c00230b8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002308e:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023091:	b8 02 00 00 00       	mov    eax,0x2
c0023096:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002309c:	74 1c                	je     c00230ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002309e:	b8 04 00 00 00       	mov    eax,0x4
c00230a3:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00230a9:	74 0f                	je     c00230ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00230ab:	31 c0                	xor    eax,eax
c00230ad:	83 fa 03             	cmp    edx,0x3
c00230b0:	0f 94 c0             	sete   al
c00230b3:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00230b7:	c3                   	ret    
c00230b8:	31 c0                	xor    eax,eax
c00230ba:	c3                   	ret    
c00230bb:	90                   	nop

c00230bc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00230bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00230c0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00230c3:	0f ba e2 0f          	bt     edx,0xf
c00230c7:	72 f7                	jb     c00230c0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00230c9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00230cc:	83 ca 10             	or     edx,0x10
c00230cf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00230d2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00230d5:	83 ca 01             	or     edx,0x1
c00230d8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00230db:	c3                   	ret    

c00230dc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00230dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00230e0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00230e3:	83 e2 fe             	and    edx,0xfffffffe
c00230e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00230e9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00230ec:	83 e2 ef             	and    edx,0xffffffef
c00230ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00230f2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00230f5:	0f ba e2 0e          	bt     edx,0xe
c00230f9:	72 f7                	jb     c00230f2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00230fb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00230fe:	0f ba e2 0f          	bt     edx,0xf
c0023102:	72 ee                	jb     c00230f2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023104:	c3                   	ret    
c0023105:	90                   	nop

c0023106 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023106:	55                   	push   ebp
c0023107:	57                   	push   edi
c0023108:	56                   	push   esi
c0023109:	53                   	push   ebx
c002310a:	83 ec 1c             	sub    esp,0x1c
c002310d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023111:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023115:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023119:	53                   	push   ebx
c002311a:	89 fd                	mov    ebp,edi
c002311c:	56                   	push   esi
c002311d:	c1 e5 0a             	shl    ebp,0xa
c0023120:	e8 b7 ff ff ff       	call   c00230dc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023125:	83 ec 0c             	sub    esp,0xc
c0023128:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002312e:	01 e8                	add    eax,ebp
c0023130:	89 03                	mov    DWORD PTR [ebx],eax
c0023132:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023134:	68 00 04 00 00       	push   0x400
c0023139:	6a 00                	push   0x0
c002313b:	50                   	push   eax
c002313c:	e8 95 d5 fd ff       	call   c00006d6 <memset>
c0023141:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023147:	89 fa                	mov    edx,edi
c0023149:	01 e8                	add    eax,ebp
c002314b:	c1 e7 0d             	shl    edi,0xd
c002314e:	89 03                	mov    DWORD PTR [ebx],eax
c0023150:	c1 e2 08             	shl    edx,0x8
c0023153:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002315a:	81 c2 00 80 00 00    	add    edx,0x8000
c0023160:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023164:	89 d0                	mov    eax,edx
c0023166:	83 c4 1c             	add    esp,0x1c
c0023169:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002316f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023172:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023175:	68 00 01 00 00       	push   0x100
c002317a:	6a 00                	push   0x0
c002317c:	50                   	push   eax
c002317d:	e8 54 d5 fd ff       	call   c00006d6 <memset>
c0023182:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023186:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c002318c:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023192:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023196:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023199:	83 c4 10             	add    esp,0x10
c002319c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00231a3:	31 ff                	xor    edi,edi
c00231a5:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00231ab:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00231b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00231b5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00231bb:	83 c5 20             	add    ebp,0x20
c00231be:	01 f8                	add    eax,edi
c00231c0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00231c3:	52                   	push   edx
c00231c4:	68 00 01 00 00       	push   0x100
c00231c9:	6a 00                	push   0x0
c00231cb:	50                   	push   eax
c00231cc:	e8 05 d5 fd ff       	call   c00006d6 <memset>
c00231d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00231d5:	83 c4 10             	add    esp,0x10
c00231d8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00231de:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00231e5:	01 f8                	add    eax,edi
c00231e7:	81 c7 00 01 00 00    	add    edi,0x100
c00231ed:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00231f0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00231f6:	75 b3                	jne    c00231ab <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c00231f8:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00231fc:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023200:	83 c4 1c             	add    esp,0x1c
c0023203:	5b                   	pop    ebx
c0023204:	5e                   	pop    esi
c0023205:	5f                   	pop    edi
c0023206:	5d                   	pop    ebp
c0023207:	e9 b0 fe ff ff       	jmp    c00230bc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c002320c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002320c:	55                   	push   ebp
c002320d:	57                   	push   edi
c002320e:	56                   	push   esi
c002320f:	53                   	push   ebx
c0023210:	31 db                	xor    ebx,ebx
c0023212:	83 ec 0c             	sub    esp,0xc
c0023215:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023219:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002321d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023220:	f7 c7 01 00 00 00    	test   edi,0x1
c0023226:	0f 84 94 00 00 00    	je     c00232c0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c002322c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023230:	89 d8                	mov    eax,ebx
c0023232:	c1 e0 07             	shl    eax,0x7
c0023235:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c002323c:	55                   	push   ebp
c002323d:	56                   	push   esi
c002323e:	e8 31 fe ff ff       	call   c0023074 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023243:	59                   	pop    ecx
c0023244:	83 f8 01             	cmp    eax,0x1
c0023247:	5a                   	pop    edx
c0023248:	75 47                	jne    c0023291 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x85>
c002324a:	51                   	push   ecx
c002324b:	51                   	push   ecx
c002324c:	53                   	push   ebx
c002324d:	68 61 b8 02 c0       	push   0xc002b861
c0023252:	e8 84 f6 fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0023257:	83 c4 0c             	add    esp,0xc
c002325a:	53                   	push   ebx
c002325b:	55                   	push   ebp
c002325c:	56                   	push   esi
c002325d:	e8 a4 fe ff ff       	call   c0023106 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023262:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0023269:	e8 c8 c3 fe ff       	call   c000f636 <malloc>
c002326e:	89 04 24             	mov    DWORD PTR [esp],eax
c0023271:	89 c5                	mov    ebp,eax
c0023273:	e8 de 0c 00 00       	call   c0023f56 <SATA::SATA()>
c0023278:	58                   	pop    eax
c0023279:	5a                   	pop    edx
c002327a:	55                   	push   ebp
c002327b:	56                   	push   esi
c002327c:	e8 81 0a ff ff       	call   c0013d02 <Device::addChild(Device*)>
c0023281:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023284:	56                   	push   esi
c0023285:	6a 00                	push   0x0
c0023287:	53                   	push   ebx
c0023288:	55                   	push   ebp
c0023289:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002328c:	83 c4 20             	add    esp,0x20
c002328f:	eb 2f                	jmp    c00232c0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0023291:	83 f8 04             	cmp    eax,0x4
c0023294:	75 1a                	jne    c00232b0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c0023296:	52                   	push   edx
c0023297:	52                   	push   edx
c0023298:	53                   	push   ebx
c0023299:	68 78 b8 02 c0       	push   0xc002b878
c002329e:	e8 38 f6 fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00232a3:	83 c4 0c             	add    esp,0xc
c00232a6:	53                   	push   ebx
c00232a7:	55                   	push   ebp
c00232a8:	56                   	push   esi
c00232a9:	e8 58 fe ff ff       	call   c0023106 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00232ae:	eb 0d                	jmp    c00232bd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb1>
c00232b0:	50                   	push   eax
c00232b1:	50                   	push   eax
c00232b2:	53                   	push   ebx
c00232b3:	68 91 b8 02 c0       	push   0xc002b891
c00232b8:	e8 1e f6 fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00232bd:	83 c4 10             	add    esp,0x10
c00232c0:	d1 ef                	shr    edi,1
c00232c2:	43                   	inc    ebx
c00232c3:	83 fb 20             	cmp    ebx,0x20
c00232c6:	0f 85 54 ff ff ff    	jne    c0023220 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00232cc:	83 c4 0c             	add    esp,0xc
c00232cf:	5b                   	pop    ebx
c00232d0:	5e                   	pop    esi
c00232d1:	5f                   	pop    edi
c00232d2:	5d                   	pop    ebp
c00232d3:	c3                   	ret    

c00232d4 <SATABus::open(int, int, void*)>:
c00232d4:	83 ec 14             	sub    esp,0x14
c00232d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00232db:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00232e1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00232e7:	52                   	push   edx
c00232e8:	50                   	push   eax
c00232e9:	e8 1e ff ff ff       	call   c002320c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00232ee:	31 c0                	xor    eax,eax
c00232f0:	83 c4 1c             	add    esp,0x1c
c00232f3:	c3                   	ret    

c00232f4 <ATA::close(int, int, void*)>:
c00232f4:	83 ec 0c             	sub    esp,0xc
c00232f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232fb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023301:	85 c0                	test   eax,eax
c0023303:	74 0c                	je     c0023311 <ATA::close(int, int, void*)+0x1d>
c0023305:	83 ec 0c             	sub    esp,0xc
c0023308:	8b 10                	mov    edx,DWORD PTR [eax]
c002330a:	50                   	push   eax
c002330b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002330e:	83 c4 10             	add    esp,0x10
c0023311:	31 c0                	xor    eax,eax
c0023313:	83 c4 0c             	add    esp,0xc
c0023316:	c3                   	ret    
c0023317:	90                   	nop

c0023318 <ATA::powerSaving(PowerSavingLevel)>:
c0023318:	c3                   	ret    
c0023319:	90                   	nop

c002331a <ATA::ATA()>:
c002331a:	83 ec 0c             	sub    esp,0xc
c002331d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023321:	83 ec 04             	sub    esp,0x4
c0023324:	68 00 02 00 00       	push   0x200
c0023329:	68 a4 b9 02 c0       	push   0xc002b9a4
c002332e:	50                   	push   eax
c002332f:	e8 de 0d ff ff       	call   c0014112 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023334:	83 c4 10             	add    esp,0x10
c0023337:	ba f0 b8 02 c0       	mov    edx,0xc002b8f0
c002333c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023340:	89 10                	mov    DWORD PTR [eax],edx
c0023342:	90                   	nop
c0023343:	83 c4 0c             	add    esp,0xc
c0023346:	c3                   	ret    
c0023347:	90                   	nop

c0023348 <ATA::flush(bool)>:
c0023348:	53                   	push   ebx
c0023349:	83 ec 08             	sub    esp,0x8
c002334c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023351:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023355:	19 c0                	sbb    eax,eax
c0023357:	83 e0 fd             	and    eax,0xfffffffd
c002335a:	05 ea 00 00 00       	add    eax,0xea
c002335f:	50                   	push   eax
c0023360:	6a 07                	push   0x7
c0023362:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023369:	50                   	push   eax
c002336a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023370:	e8 f3 ef ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023375:	83 c4 0c             	add    esp,0xc
c0023378:	6a 00                	push   0x0
c002337a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023381:	50                   	push   eax
c0023382:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023388:	e8 87 fb ff ff       	call   c0022f14 <IDE::polling(unsigned char, unsigned int)>
c002338d:	83 c4 18             	add    esp,0x18
c0023390:	5b                   	pop    ebx
c0023391:	c3                   	ret    

c0023392 <ATA::readyForCommand()>:
c0023392:	56                   	push   esi
c0023393:	53                   	push   ebx
c0023394:	31 db                	xor    ebx,ebx
c0023396:	50                   	push   eax
c0023397:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002339b:	50                   	push   eax
c002339c:	6a 0c                	push   0xc
c002339e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00233a5:	50                   	push   eax
c00233a6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00233ac:	e8 77 f0 ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c00233b1:	83 c4 10             	add    esp,0x10
c00233b4:	a8 88                	test   al,0x88
c00233b6:	74 23                	je     c00233db <ATA::readyForCommand()+0x49>
c00233b8:	43                   	inc    ebx
c00233b9:	83 fb 63             	cmp    ebx,0x63
c00233bc:	7e dd                	jle    c002339b <ATA::readyForCommand()+0x9>
c00233be:	51                   	push   ecx
c00233bf:	51                   	push   ecx
c00233c0:	6a 00                	push   0x0
c00233c2:	68 40 42 0f 00       	push   0xf4240
c00233c7:	e8 de a2 ff ff       	call   c001d6aa <nanoSleep(unsigned long long)>
c00233cc:	83 c4 10             	add    esp,0x10
c00233cf:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00233d5:	75 c4                	jne    c002339b <ATA::readyForCommand()+0x9>
c00233d7:	31 c0                	xor    eax,eax
c00233d9:	eb 02                	jmp    c00233dd <ATA::readyForCommand()+0x4b>
c00233db:	b0 01                	mov    al,0x1
c00233dd:	5a                   	pop    edx
c00233de:	5b                   	pop    ebx
c00233df:	5e                   	pop    esi
c00233e0:	c3                   	ret    
c00233e1:	90                   	nop

c00233e2 <ATA::access(unsigned long long, int, void*, bool)>:
c00233e2:	55                   	push   ebp
c00233e3:	57                   	push   edi
c00233e4:	56                   	push   esi
c00233e5:	53                   	push   ebx
c00233e6:	83 ec 2c             	sub    esp,0x2c
c00233e9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00233ed:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00233f1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00233f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00233f9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00233fd:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023401:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023405:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002340b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002340f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023415:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023419:	c1 e0 06             	shl    eax,0x6
c002341c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023424:	74 5d                	je     c0023483 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023426:	89 fa                	mov    edx,edi
c0023428:	89 f0                	mov    eax,esi
c002342a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002342e:	c1 ea 1c             	shr    edx,0x1c
c0023431:	89 d1                	mov    ecx,edx
c0023433:	09 c1                	or     ecx,eax
c0023435:	74 25                	je     c002345c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023437:	31 ed                	xor    ebp,ebp
c0023439:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023440:	89 fa                	mov    edx,edi
c0023442:	89 f0                	mov    eax,esi
c0023444:	0f ad d0             	shrd   eax,edx,cl
c0023447:	d3 ea                	shr    edx,cl
c0023449:	f6 c1 20             	test   cl,0x20
c002344c:	74 02                	je     c0023450 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002344e:	89 d0                	mov    eax,edx
c0023450:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023454:	45                   	inc    ebp
c0023455:	83 fd 06             	cmp    ebp,0x6
c0023458:	75 df                	jne    c0023439 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002345a:	eb 76                	jmp    c00234d2 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002345c:	89 f0                	mov    eax,esi
c002345e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023463:	89 fa                	mov    edx,edi
c0023465:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002346c:	0f ac d0 10          	shrd   eax,edx,0x10
c0023470:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023475:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023479:	c1 ee 18             	shr    esi,0x18
c002347c:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023481:	eb 56                	jmp    c00234d9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023483:	6a 00                	push   0x0
c0023485:	6a 3f                	push   0x3f
c0023487:	57                   	push   edi
c0023488:	56                   	push   esi
c0023489:	e8 3e 24 00 00       	call   c00258cc <__umoddi3>
c002348e:	83 c4 10             	add    esp,0x10
c0023491:	40                   	inc    eax
c0023492:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023496:	6a 00                	push   0x0
c0023498:	68 f0 03 00 00       	push   0x3f0
c002349d:	57                   	push   edi
c002349e:	56                   	push   esi
c002349f:	e8 28 23 00 00       	call   c00257cc <__udivdi3>
c00234a4:	83 c4 10             	add    esp,0x10
c00234a7:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00234ac:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00234b3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00234b8:	6a 00                	push   0x0
c00234ba:	6a 3f                	push   0x3f
c00234bc:	57                   	push   edi
c00234bd:	56                   	push   esi
c00234be:	e8 09 23 00 00       	call   c00257cc <__udivdi3>
c00234c3:	83 c4 10             	add    esp,0x10
c00234c6:	89 c6                	mov    esi,eax
c00234c8:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00234cd:	83 e6 0f             	and    esi,0xf
c00234d0:	eb 07                	jmp    c00234d9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00234d2:	31 f6                	xor    esi,esi
c00234d4:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00234d9:	bf 01 00 00 00       	mov    edi,0x1
c00234de:	50                   	push   eax
c00234df:	6a 00                	push   0x0
c00234e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00234e8:	50                   	push   eax
c00234e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00234ed:	e8 82 f0 ff ff       	call   c0022574 <IDE::enableIRQs(unsigned char, bool)>
c00234f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00234f5:	e8 98 fe ff ff       	call   c0023392 <ATA::readyForCommand()>
c00234fa:	83 c4 10             	add    esp,0x10
c00234fd:	84 c0                	test   al,al
c00234ff:	0f 84 50 02 00 00    	je     c0023755 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0023505:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002350b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023511:	c1 e0 04             	shl    eax,0x4
c0023514:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002351b:	09 c6                	or     esi,eax
c002351d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023522:	75 05                	jne    c0023529 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023524:	83 ce a0             	or     esi,0xffffffa0
c0023527:	eb 03                	jmp    c002352c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023529:	83 ce e0             	or     esi,0xffffffe0
c002352c:	89 f0                	mov    eax,esi
c002352e:	0f b6 f0             	movzx  esi,al
c0023531:	56                   	push   esi
c0023532:	6a 06                	push   0x6
c0023534:	51                   	push   ecx
c0023535:	52                   	push   edx
c0023536:	e8 2d ee ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002353b:	83 c4 10             	add    esp,0x10
c002353e:	6a 00                	push   0x0
c0023540:	6a 01                	push   0x1
c0023542:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023549:	50                   	push   eax
c002354a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023550:	e8 13 ee ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023555:	83 c4 10             	add    esp,0x10
c0023558:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002355d:	75 6e                	jne    c00235cd <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002355f:	6a 00                	push   0x0
c0023561:	6a 08                	push   0x8
c0023563:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002356a:	50                   	push   eax
c002356b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023571:	e8 f2 ed ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023576:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002357b:	50                   	push   eax
c002357c:	6a 09                	push   0x9
c002357e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023585:	50                   	push   eax
c0023586:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002358c:	e8 d7 ed ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023591:	83 c4 20             	add    esp,0x20
c0023594:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023599:	50                   	push   eax
c002359a:	6a 0a                	push   0xa
c002359c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00235a3:	50                   	push   eax
c00235a4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00235aa:	e8 b9 ed ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235af:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00235b4:	50                   	push   eax
c00235b5:	6a 0b                	push   0xb
c00235b7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00235be:	50                   	push   eax
c00235bf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00235c5:	e8 9e ed ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235ca:	83 c4 20             	add    esp,0x20
c00235cd:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00235d2:	50                   	push   eax
c00235d3:	6a 02                	push   0x2
c00235d5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00235dc:	50                   	push   eax
c00235dd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00235e3:	e8 80 ed ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235e8:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00235ed:	50                   	push   eax
c00235ee:	6a 03                	push   0x3
c00235f0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00235f7:	50                   	push   eax
c00235f8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00235fe:	e8 65 ed ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023603:	83 c4 20             	add    esp,0x20
c0023606:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002360b:	50                   	push   eax
c002360c:	6a 04                	push   0x4
c002360e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023615:	50                   	push   eax
c0023616:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002361c:	e8 47 ed ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023621:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023626:	50                   	push   eax
c0023627:	6a 05                	push   0x5
c0023629:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023630:	50                   	push   eax
c0023631:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023637:	e8 2c ed ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002363c:	83 c4 20             	add    esp,0x20
c002363f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023644:	0f 94 c0             	sete   al
c0023647:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002364c:	74 09                	je     c0023657 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002364e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023655:	eb 07                	jmp    c002365e <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023657:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002365e:	0f b6 c0             	movzx  eax,al
c0023661:	50                   	push   eax
c0023662:	6a 07                	push   0x7
c0023664:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002366b:	50                   	push   eax
c002366c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023672:	e8 f1 ec ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023677:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002367b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002367f:	83 c4 10             	add    esp,0x10
c0023682:	85 f6                	test   esi,esi
c0023684:	0f 84 ac 00 00 00    	je     c0023736 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c002368a:	50                   	push   eax
c002368b:	6a 01                	push   0x1
c002368d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023694:	50                   	push   eax
c0023695:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002369b:	e8 74 f8 ff ff       	call   c0022f14 <IDE::polling(unsigned char, unsigned int)>
c00236a0:	83 c4 10             	add    esp,0x10
c00236a3:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00236a9:	84 c0                	test   al,al
c00236ab:	74 20                	je     c00236cd <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c00236ad:	0f b6 f8             	movzx  edi,al
c00236b0:	0f b6 d2             	movzx  edx,dl
c00236b3:	57                   	push   edi
c00236b4:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00236bb:	50                   	push   eax
c00236bc:	52                   	push   edx
c00236bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00236c3:	e8 b6 f6 ff ff       	call   c0022d7e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00236c8:	e9 85 00 00 00       	jmp    c0023752 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00236cd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00236d2:	74 41                	je     c0023715 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00236d4:	31 c9                	xor    ecx,ecx
c00236d6:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00236da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00236de:	50                   	push   eax
c00236df:	50                   	push   eax
c00236e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00236e7:	50                   	push   eax
c00236e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00236ee:	e8 63 ec ff ff       	call   c0022356 <IDE::getBase(unsigned char)>
c00236f3:	89 c2                	mov    edx,eax
c00236f5:	89 e8                	mov    eax,ebp
c00236f7:	66 ef                	out    dx,ax
c00236f9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00236fd:	83 c4 10             	add    esp,0x10
c0023700:	41                   	inc    ecx
c0023701:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0023707:	75 cd                	jne    c00236d6 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c0023709:	4e                   	dec    esi
c002370a:	81 c7 00 02 00 00    	add    edi,0x200
c0023710:	e9 6d ff ff ff       	jmp    c0023682 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c0023715:	0f b6 d2             	movzx  edx,dl
c0023718:	51                   	push   ecx
c0023719:	51                   	push   ecx
c002371a:	52                   	push   edx
c002371b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023721:	e8 30 ec ff ff       	call   c0022356 <IDE::getBase(unsigned char)>
c0023726:	b9 00 01 00 00       	mov    ecx,0x100
c002372b:	89 c2                	mov    edx,eax
c002372d:	fc                   	cld    
c002372e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023731:	83 c4 10             	add    esp,0x10
c0023734:	eb d3                	jmp    c0023709 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0023736:	31 ff                	xor    edi,edi
c0023738:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002373d:	74 16                	je     c0023755 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c002373f:	50                   	push   eax
c0023740:	50                   	push   eax
c0023741:	31 c0                	xor    eax,eax
c0023743:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0023748:	0f 94 c0             	sete   al
c002374b:	50                   	push   eax
c002374c:	53                   	push   ebx
c002374d:	e8 f6 fb ff ff       	call   c0023348 <ATA::flush(bool)>
c0023752:	83 c4 10             	add    esp,0x10
c0023755:	83 c4 2c             	add    esp,0x2c
c0023758:	89 f8                	mov    eax,edi
c002375a:	5b                   	pop    ebx
c002375b:	5e                   	pop    esi
c002375c:	5f                   	pop    edi
c002375d:	5d                   	pop    ebp
c002375e:	c3                   	ret    
c002375f:	90                   	nop

c0023760 <ATA::read(unsigned long long, int, void*)>:
c0023760:	57                   	push   edi
c0023761:	b8 04 00 00 00       	mov    eax,0x4
c0023766:	56                   	push   esi
c0023767:	53                   	push   ebx
c0023768:	83 ec 10             	sub    esp,0x10
c002376b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002376f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023773:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023776:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002377a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002377e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023784:	77 3b                	ja     c00237c1 <ATA::read(unsigned long long, int, void*)+0x61>
c0023786:	b8 06 00 00 00       	mov    eax,0x6
c002378b:	85 d2                	test   edx,edx
c002378d:	74 32                	je     c00237c1 <ATA::read(unsigned long long, int, void*)+0x61>
c002378f:	50                   	push   eax
c0023790:	50                   	push   eax
c0023791:	6a 00                	push   0x0
c0023793:	52                   	push   edx
c0023794:	53                   	push   ebx
c0023795:	57                   	push   edi
c0023796:	56                   	push   esi
c0023797:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002379b:	e8 42 fc ff ff       	call   c00233e2 <ATA::access(unsigned long long, int, void*, bool)>
c00237a0:	83 c4 20             	add    esp,0x20
c00237a3:	85 c0                	test   eax,eax
c00237a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00237a9:	75 11                	jne    c00237bc <ATA::read(unsigned long long, int, void*)+0x5c>
c00237ab:	01 1d 08 f2 02 c0    	add    DWORD PTR ds:0xc002f208,ebx
c00237b1:	e8 8a cf fe ff       	call   c0010740 <VgaText::updateDiskUsage()>
c00237b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00237ba:	eb 05                	jmp    c00237c1 <ATA::read(unsigned long long, int, void*)+0x61>
c00237bc:	b8 01 00 00 00       	mov    eax,0x1
c00237c1:	83 c4 10             	add    esp,0x10
c00237c4:	5b                   	pop    ebx
c00237c5:	5e                   	pop    esi
c00237c6:	5f                   	pop    edi
c00237c7:	c3                   	ret    

c00237c8 <ATA::write(unsigned long long, int, void*)>:
c00237c8:	57                   	push   edi
c00237c9:	b8 04 00 00 00       	mov    eax,0x4
c00237ce:	56                   	push   esi
c00237cf:	53                   	push   ebx
c00237d0:	83 ec 10             	sub    esp,0x10
c00237d3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00237d7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00237db:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00237de:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00237e2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00237e6:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00237ec:	77 3b                	ja     c0023829 <ATA::write(unsigned long long, int, void*)+0x61>
c00237ee:	b8 06 00 00 00       	mov    eax,0x6
c00237f3:	85 d2                	test   edx,edx
c00237f5:	74 32                	je     c0023829 <ATA::write(unsigned long long, int, void*)+0x61>
c00237f7:	50                   	push   eax
c00237f8:	50                   	push   eax
c00237f9:	6a 01                	push   0x1
c00237fb:	52                   	push   edx
c00237fc:	53                   	push   ebx
c00237fd:	57                   	push   edi
c00237fe:	56                   	push   esi
c00237ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023803:	e8 da fb ff ff       	call   c00233e2 <ATA::access(unsigned long long, int, void*, bool)>
c0023808:	83 c4 20             	add    esp,0x20
c002380b:	85 c0                	test   eax,eax
c002380d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023811:	75 11                	jne    c0023824 <ATA::write(unsigned long long, int, void*)+0x5c>
c0023813:	01 1d 04 f2 02 c0    	add    DWORD PTR ds:0xc002f204,ebx
c0023819:	e8 22 cf fe ff       	call   c0010740 <VgaText::updateDiskUsage()>
c002381e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023822:	eb 05                	jmp    c0023829 <ATA::write(unsigned long long, int, void*)+0x61>
c0023824:	b8 01 00 00 00       	mov    eax,0x1
c0023829:	83 c4 10             	add    esp,0x10
c002382c:	5b                   	pop    ebx
c002382d:	5e                   	pop    esi
c002382e:	5f                   	pop    edi
c002382f:	c3                   	ret    

c0023830 <ATA::detectCHS()>:
c0023830:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023834:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002383a:	c1 e0 06             	shl    eax,0x6
c002383d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023843:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002384d:	c7 44 24 04 d4 b8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b8d4
c0023855:	e9 51 63 ff ff       	jmp    c0019bab <Krnl::panic(char const*)>

c002385a <ATA::open(int, int, void*)>:
c002385a:	53                   	push   ebx
c002385b:	83 ec 08             	sub    esp,0x8
c002385e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023862:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023866:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002386a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023870:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023876:	c1 e0 06             	shl    eax,0x6
c0023879:	01 d0                	add    eax,edx
c002387b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0023882:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0023888:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002388f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023899:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002389f:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00238a6:	75 0c                	jne    c00238b4 <ATA::open(int, int, void*)+0x5a>
c00238a8:	83 ec 0c             	sub    esp,0xc
c00238ab:	53                   	push   ebx
c00238ac:	e8 7f ff ff ff       	call   c0023830 <ATA::detectCHS()>
c00238b1:	83 c4 10             	add    esp,0x10
c00238b4:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00238ba:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00238c0:	c1 e0 06             	shl    eax,0x6
c00238c3:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00238ca:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00238d4:	d1 e8                	shr    eax,1
c00238d6:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00238dc:	6a 04                	push   0x4
c00238de:	6a 0c                	push   0xc
c00238e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00238e7:	50                   	push   eax
c00238e8:	52                   	push   edx
c00238e9:	e8 7a ea ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238ee:	90                   	nop
c00238ef:	90                   	nop
c00238f0:	6a 00                	push   0x0
c00238f2:	6a 0c                	push   0xc
c00238f4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00238fb:	50                   	push   eax
c00238fc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023902:	e8 61 ea ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023907:	83 c4 14             	add    esp,0x14
c002390a:	53                   	push   ebx
c002390b:	e8 6a 08 ff ff       	call   c001417a <PhysicalDisk::startCache()>
c0023910:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023913:	e8 8c 28 ff ff       	call   c00161a4 <createPartitionsForDisk(PhysicalDisk*)>
c0023918:	31 c0                	xor    eax,eax
c002391a:	83 c4 18             	add    esp,0x18
c002391d:	5b                   	pop    ebx
c002391e:	c3                   	ret    
c002391f:	90                   	nop

c0023920 <ATAPI::write(unsigned long long, int, void*)>:
c0023920:	b8 03 00 00 00       	mov    eax,0x3
c0023925:	c3                   	ret    

c0023926 <ATAPI::close(int, int, void*)>:
c0023926:	83 ec 0c             	sub    esp,0xc
c0023929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002392d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023933:	85 c0                	test   eax,eax
c0023935:	74 0c                	je     c0023943 <ATAPI::close(int, int, void*)+0x1d>
c0023937:	83 ec 0c             	sub    esp,0xc
c002393a:	8b 10                	mov    edx,DWORD PTR [eax]
c002393c:	50                   	push   eax
c002393d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023940:	83 c4 10             	add    esp,0x10
c0023943:	31 c0                	xor    eax,eax
c0023945:	83 c4 0c             	add    esp,0xc
c0023948:	c3                   	ret    
c0023949:	90                   	nop

c002394a <ATAPI::ATAPI()>:
c002394a:	83 ec 0c             	sub    esp,0xc
c002394d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023951:	83 ec 04             	sub    esp,0x4
c0023954:	68 00 08 00 00       	push   0x800
c0023959:	68 1c b9 02 c0       	push   0xc002b91c
c002395e:	50                   	push   eax
c002395f:	e8 ae 07 ff ff       	call   c0014112 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023964:	83 c4 10             	add    esp,0x10
c0023967:	ba 5c b9 02 c0       	mov    edx,0xc002b95c
c002396c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023970:	89 10                	mov    DWORD PTR [eax],edx
c0023972:	90                   	nop
c0023973:	83 c4 0c             	add    esp,0xc
c0023976:	c3                   	ret    
c0023977:	90                   	nop

c0023978 <ATAPI::readyForCommand()>:
c0023978:	56                   	push   esi
c0023979:	53                   	push   ebx
c002397a:	31 db                	xor    ebx,ebx
c002397c:	50                   	push   eax
c002397d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023981:	50                   	push   eax
c0023982:	6a 0c                	push   0xc
c0023984:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002398b:	50                   	push   eax
c002398c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023992:	e8 91 ea ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0023997:	83 c4 10             	add    esp,0x10
c002399a:	a8 88                	test   al,0x88
c002399c:	74 23                	je     c00239c1 <ATAPI::readyForCommand()+0x49>
c002399e:	43                   	inc    ebx
c002399f:	83 fb 63             	cmp    ebx,0x63
c00239a2:	7e dd                	jle    c0023981 <ATAPI::readyForCommand()+0x9>
c00239a4:	51                   	push   ecx
c00239a5:	51                   	push   ecx
c00239a6:	6a 00                	push   0x0
c00239a8:	68 40 42 0f 00       	push   0xf4240
c00239ad:	e8 f8 9c ff ff       	call   c001d6aa <nanoSleep(unsigned long long)>
c00239b2:	83 c4 10             	add    esp,0x10
c00239b5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00239bb:	75 c4                	jne    c0023981 <ATAPI::readyForCommand()+0x9>
c00239bd:	31 c0                	xor    eax,eax
c00239bf:	eb 02                	jmp    c00239c3 <ATAPI::readyForCommand()+0x4b>
c00239c1:	b0 01                	mov    al,0x1
c00239c3:	5a                   	pop    edx
c00239c4:	5b                   	pop    ebx
c00239c5:	5e                   	pop    esi
c00239c6:	c3                   	ret    
c00239c7:	90                   	nop

c00239c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00239c8:	55                   	push   ebp
c00239c9:	57                   	push   edi
c00239ca:	56                   	push   esi
c00239cb:	53                   	push   ebx
c00239cc:	83 ec 20             	sub    esp,0x20
c00239cf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00239d3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00239d7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00239db:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00239df:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00239e3:	6a 01                	push   0x1
c00239e5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00239ec:	50                   	push   eax
c00239ed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00239f3:	e8 7c eb ff ff       	call   c0022574 <IDE::enableIRQs(unsigned char, bool)>
c00239f8:	5e                   	pop    esi
c00239f9:	58                   	pop    eax
c00239fa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023a01:	50                   	push   eax
c0023a02:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023a08:	e8 35 e9 ff ff       	call   c0022342 <IDE::prepareInterrupt(unsigned char)>
c0023a0d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023a10:	e8 63 ff ff ff       	call   c0023978 <ATAPI::readyForCommand()>
c0023a15:	83 c4 10             	add    esp,0x10
c0023a18:	84 c0                	test   al,al
c0023a1a:	75 0a                	jne    c0023a26 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0023a1c:	bb 01 00 00 00       	mov    ebx,0x1
c0023a21:	e9 57 02 00 00       	jmp    c0023c7d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023a26:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0023a2c:	c1 e0 04             	shl    eax,0x4
c0023a2f:	0f b6 c0             	movzx  eax,al
c0023a32:	50                   	push   eax
c0023a33:	6a 06                	push   0x6
c0023a35:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023a3c:	50                   	push   eax
c0023a3d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023a43:	e8 20 e9 ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a48:	6a 00                	push   0x0
c0023a4a:	6a 01                	push   0x1
c0023a4c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023a53:	50                   	push   eax
c0023a54:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023a5a:	e8 09 e9 ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a5f:	83 c4 20             	add    esp,0x20
c0023a62:	0f b6 c3             	movzx  eax,bl
c0023a65:	0f b6 df             	movzx  ebx,bh
c0023a68:	50                   	push   eax
c0023a69:	6a 04                	push   0x4
c0023a6b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023a72:	50                   	push   eax
c0023a73:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023a79:	e8 ea e8 ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a7e:	53                   	push   ebx
c0023a7f:	6a 05                	push   0x5
c0023a81:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023a88:	50                   	push   eax
c0023a89:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023a8f:	e8 d4 e8 ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a94:	83 c4 20             	add    esp,0x20
c0023a97:	68 a0 00 00 00       	push   0xa0
c0023a9c:	6a 07                	push   0x7
c0023a9e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023aa5:	50                   	push   eax
c0023aa6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023aac:	e8 b7 e8 ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ab1:	83 c4 0c             	add    esp,0xc
c0023ab4:	6a 01                	push   0x1
c0023ab6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023abd:	50                   	push   eax
c0023abe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023ac4:	e8 4b f4 ff ff       	call   c0022f14 <IDE::polling(unsigned char, unsigned int)>
c0023ac9:	83 c4 10             	add    esp,0x10
c0023acc:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0023ad2:	84 c0                	test   al,al
c0023ad4:	74 23                	je     c0023af9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0023ad6:	0f b6 d8             	movzx  ebx,al
c0023ad9:	0f b6 d2             	movzx  edx,dl
c0023adc:	53                   	push   ebx
c0023add:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0023ae4:	50                   	push   eax
c0023ae5:	52                   	push   edx
c0023ae6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023aec:	e8 8d f2 ff ff       	call   c0022d7e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023af1:	83 c4 10             	add    esp,0x10
c0023af4:	e9 84 01 00 00       	jmp    c0023c7d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023af9:	0f b6 d2             	movzx  edx,dl
c0023afc:	53                   	push   ebx
c0023afd:	53                   	push   ebx
c0023afe:	52                   	push   edx
c0023aff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b05:	e8 4c e8 ff ff       	call   c0022356 <IDE::getBase(unsigned char)>
c0023b0a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023b0e:	b9 06 00 00 00       	mov    ecx,0x6
c0023b13:	89 c2                	mov    edx,eax
c0023b15:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0023b18:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0023b1c:	83 c4 10             	add    esp,0x10
c0023b1f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023b25:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023b2c:	85 db                	test   ebx,ebx
c0023b2e:	0f 84 ec 00 00 00    	je     c0023c20 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0023b34:	51                   	push   ecx
c0023b35:	51                   	push   ecx
c0023b36:	52                   	push   edx
c0023b37:	50                   	push   eax
c0023b38:	e8 99 e9 ff ff       	call   c00224d6 <IDE::waitInterrupt(unsigned char)>
c0023b3d:	83 c4 10             	add    esp,0x10
c0023b40:	84 c0                	test   al,al
c0023b42:	0f 84 d4 fe ff ff    	je     c0023a1c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023b48:	56                   	push   esi
c0023b49:	56                   	push   esi
c0023b4a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b51:	50                   	push   eax
c0023b52:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b58:	e8 e5 e7 ff ff       	call   c0022342 <IDE::prepareInterrupt(unsigned char)>
c0023b5d:	83 c4 0c             	add    esp,0xc
c0023b60:	6a 04                	push   0x4
c0023b62:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b69:	50                   	push   eax
c0023b6a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b70:	e8 b3 e8 ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0023b75:	83 c4 0c             	add    esp,0xc
c0023b78:	89 c6                	mov    esi,eax
c0023b7a:	6a 05                	push   0x5
c0023b7c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b83:	50                   	push   eax
c0023b84:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b8a:	e8 99 e8 ff ff       	call   c0022428 <IDE::read(unsigned char, unsigned char)>
c0023b8f:	89 f1                	mov    ecx,esi
c0023b91:	0f b6 c0             	movzx  eax,al
c0023b94:	0f b6 f1             	movzx  esi,cl
c0023b97:	c1 e0 08             	shl    eax,0x8
c0023b9a:	09 c6                	or     esi,eax
c0023b9c:	d1 fe                	sar    esi,1
c0023b9e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0023ba2:	83 c4 10             	add    esp,0x10
c0023ba5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0023baa:	74 41                	je     c0023bed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0023bac:	31 c9                	xor    ecx,ecx
c0023bae:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023bb4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023bbb:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0023bbf:	75 0a                	jne    c0023bcb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0023bc1:	01 c9                	add    ecx,ecx
c0023bc3:	01 cd                	add    ebp,ecx
c0023bc5:	4b                   	dec    ebx
c0023bc6:	e9 54 ff ff ff       	jmp    c0023b1f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0023bcb:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0023bd0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023bd4:	51                   	push   ecx
c0023bd5:	51                   	push   ecx
c0023bd6:	52                   	push   edx
c0023bd7:	50                   	push   eax
c0023bd8:	e8 79 e7 ff ff       	call   c0022356 <IDE::getBase(unsigned char)>
c0023bdd:	89 c2                	mov    edx,eax
c0023bdf:	89 f0                	mov    eax,esi
c0023be1:	66 ef                	out    dx,ax
c0023be3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023be7:	83 c4 10             	add    esp,0x10
c0023bea:	41                   	inc    ecx
c0023beb:	eb c1                	jmp    c0023bae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0023bed:	31 f6                	xor    esi,esi
c0023bef:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023bf5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023bfc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0023c00:	75 06                	jne    c0023c08 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0023c02:	01 f6                	add    esi,esi
c0023c04:	01 f5                	add    ebp,esi
c0023c06:	eb bd                	jmp    c0023bc5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0023c08:	51                   	push   ecx
c0023c09:	51                   	push   ecx
c0023c0a:	52                   	push   edx
c0023c0b:	50                   	push   eax
c0023c0c:	e8 45 e7 ff ff       	call   c0022356 <IDE::getBase(unsigned char)>
c0023c11:	89 c2                	mov    edx,eax
c0023c13:	66 ed                	in     ax,dx
c0023c15:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0023c1a:	83 c4 10             	add    esp,0x10
c0023c1d:	46                   	inc    esi
c0023c1e:	eb cf                	jmp    c0023bef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0023c20:	51                   	push   ecx
c0023c21:	51                   	push   ecx
c0023c22:	52                   	push   edx
c0023c23:	50                   	push   eax
c0023c24:	e8 ad e8 ff ff       	call   c00224d6 <IDE::waitInterrupt(unsigned char)>
c0023c29:	83 c4 10             	add    esp,0x10
c0023c2c:	84 c0                	test   al,al
c0023c2e:	0f 84 e8 fd ff ff    	je     c0023a1c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023c34:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023c39:	52                   	push   edx
c0023c3a:	52                   	push   edx
c0023c3b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023c42:	50                   	push   eax
c0023c43:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023c49:	e8 f4 e6 ff ff       	call   c0022342 <IDE::prepareInterrupt(unsigned char)>
c0023c4e:	83 c4 10             	add    esp,0x10
c0023c51:	50                   	push   eax
c0023c52:	50                   	push   eax
c0023c53:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023c5a:	50                   	push   eax
c0023c5b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023c61:	e8 f0 e6 ff ff       	call   c0022356 <IDE::getBase(unsigned char)>
c0023c66:	8d 50 07             	lea    edx,[eax+0x7]
c0023c69:	ec                   	in     al,dx
c0023c6a:	83 c4 10             	add    esp,0x10
c0023c6d:	a8 88                	test   al,0x88
c0023c6f:	74 0a                	je     c0023c7b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0023c71:	4b                   	dec    ebx
c0023c72:	75 dd                	jne    c0023c51 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0023c74:	bb 02 00 00 00       	mov    ebx,0x2
c0023c79:	eb 02                	jmp    c0023c7d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023c7b:	31 db                	xor    ebx,ebx
c0023c7d:	83 c4 1c             	add    esp,0x1c
c0023c80:	89 d8                	mov    eax,ebx
c0023c82:	5b                   	pop    ebx
c0023c83:	5e                   	pop    esi
c0023c84:	5f                   	pop    edi
c0023c85:	5d                   	pop    ebp
c0023c86:	c3                   	ret    
c0023c87:	90                   	nop

c0023c88 <ATAPI::diskRemoved()>:
c0023c88:	83 ec 18             	sub    esp,0x18
c0023c8b:	68 27 b9 02 c0       	push   0xc002b927
c0023c90:	e8 46 ec fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0023c95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023c99:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0023ca0:	83 c4 1c             	add    esp,0x1c
c0023ca3:	c3                   	ret    

c0023ca4 <ATAPI::eject()>:
c0023ca4:	57                   	push   edi
c0023ca5:	b9 03 00 00 00       	mov    ecx,0x3
c0023caa:	53                   	push   ebx
c0023cab:	83 ec 14             	sub    esp,0x14
c0023cae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023cb2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023cb6:	fc                   	cld    
c0023cb7:	31 c0                	xor    eax,eax
c0023cb9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023cbb:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0023cc0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0023cc5:	50                   	push   eax
c0023cc6:	50                   	push   eax
c0023cc7:	6a 00                	push   0x0
c0023cc9:	6a 00                	push   0x0
c0023ccb:	6a 00                	push   0x0
c0023ccd:	6a 02                	push   0x2
c0023ccf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023cd3:	50                   	push   eax
c0023cd4:	53                   	push   ebx
c0023cd5:	e8 ee fc ff ff       	call   c00239c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023cda:	83 c4 14             	add    esp,0x14
c0023cdd:	53                   	push   ebx
c0023cde:	e8 a5 ff ff ff       	call   c0023c88 <ATAPI::diskRemoved()>
c0023ce3:	83 c4 24             	add    esp,0x24
c0023ce6:	5b                   	pop    ebx
c0023ce7:	5f                   	pop    edi
c0023ce8:	c3                   	ret    
c0023ce9:	90                   	nop

c0023cea <ATAPI::diskInserted()>:
c0023cea:	53                   	push   ebx
c0023ceb:	83 ec 14             	sub    esp,0x14
c0023cee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023cf2:	68 3d b9 02 c0       	push   0xc002b93d
c0023cf7:	e8 df eb fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0023cfc:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0023d03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023d06:	e8 6f 04 ff ff       	call   c001417a <PhysicalDisk::startCache()>
c0023d0b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0023d0f:	83 c4 18             	add    esp,0x18
c0023d12:	5b                   	pop    ebx
c0023d13:	e9 8c 24 ff ff       	jmp    c00161a4 <createPartitionsForDisk(PhysicalDisk*)>

c0023d18 <ATAPI::detectMedia()>:
c0023d18:	56                   	push   esi
c0023d19:	53                   	push   ebx
c0023d1a:	83 ec 28             	sub    esp,0x28
c0023d1d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023d21:	6a 0c                	push   0xc
c0023d23:	6a 00                	push   0x0
c0023d25:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0023d29:	56                   	push   esi
c0023d2a:	e8 a7 c9 fd ff       	call   c00006d6 <memset>
c0023d2f:	58                   	pop    eax
c0023d30:	5a                   	pop    edx
c0023d31:	6a 00                	push   0x0
c0023d33:	6a 00                	push   0x0
c0023d35:	6a 00                	push   0x0
c0023d37:	6a 00                	push   0x0
c0023d39:	56                   	push   esi
c0023d3a:	53                   	push   ebx
c0023d3b:	e8 88 fc ff ff       	call   c00239c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023d40:	83 c4 1c             	add    esp,0x1c
c0023d43:	6a 0c                	push   0xc
c0023d45:	6a 00                	push   0x0
c0023d47:	56                   	push   esi
c0023d48:	e8 89 c9 fd ff       	call   c00006d6 <memset>
c0023d4d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0023d52:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0023d57:	59                   	pop    ecx
c0023d58:	58                   	pop    eax
c0023d59:	6a 01                	push   0x1
c0023d5b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0023d5f:	50                   	push   eax
c0023d60:	6a 00                	push   0x0
c0023d62:	6a 12                	push   0x12
c0023d64:	56                   	push   esi
c0023d65:	53                   	push   ebx
c0023d66:	e8 5d fc ff ff       	call   c00239c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023d6b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0023d6f:	83 c4 20             	add    esp,0x20
c0023d72:	83 e0 7f             	and    eax,0x7f
c0023d75:	3c 70                	cmp    al,0x70
c0023d77:	74 15                	je     c0023d8e <ATAPI::detectMedia()+0x76>
c0023d79:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023d80:	75 0c                	jne    c0023d8e <ATAPI::detectMedia()+0x76>
c0023d82:	83 ec 0c             	sub    esp,0xc
c0023d85:	53                   	push   ebx
c0023d86:	e8 5f ff ff ff       	call   c0023cea <ATAPI::diskInserted()>
c0023d8b:	83 c4 10             	add    esp,0x10
c0023d8e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023d92:	83 e0 0f             	and    eax,0xf
c0023d95:	3c 02                	cmp    al,0x2
c0023d97:	75 1b                	jne    c0023db4 <ATAPI::detectMedia()+0x9c>
c0023d99:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0023d9e:	75 2d                	jne    c0023dcd <ATAPI::detectMedia()+0xb5>
c0023da0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023da7:	74 24                	je     c0023dcd <ATAPI::detectMedia()+0xb5>
c0023da9:	83 ec 0c             	sub    esp,0xc
c0023dac:	53                   	push   ebx
c0023dad:	e8 d6 fe ff ff       	call   c0023c88 <ATAPI::diskRemoved()>
c0023db2:	eb 16                	jmp    c0023dca <ATAPI::detectMedia()+0xb2>
c0023db4:	84 c0                	test   al,al
c0023db6:	75 15                	jne    c0023dcd <ATAPI::detectMedia()+0xb5>
c0023db8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023dbf:	75 0c                	jne    c0023dcd <ATAPI::detectMedia()+0xb5>
c0023dc1:	83 ec 0c             	sub    esp,0xc
c0023dc4:	53                   	push   ebx
c0023dc5:	e8 20 ff ff ff       	call   c0023cea <ATAPI::diskInserted()>
c0023dca:	83 c4 10             	add    esp,0x10
c0023dcd:	83 c4 24             	add    esp,0x24
c0023dd0:	5b                   	pop    ebx
c0023dd1:	5e                   	pop    esi
c0023dd2:	c3                   	ret    
c0023dd3:	90                   	nop

c0023dd4 <ATAPI::open(int, int, void*)>:
c0023dd4:	53                   	push   ebx
c0023dd5:	83 ec 08             	sub    esp,0x8
c0023dd8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023ddc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023de0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023de4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023dea:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023df0:	c1 e0 06             	shl    eax,0x6
c0023df3:	01 d0                	add    eax,edx
c0023df5:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0023dfc:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0023e02:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0023e09:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0023e13:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0023e19:	6a 04                	push   0x4
c0023e1b:	6a 0c                	push   0xc
c0023e1d:	51                   	push   ecx
c0023e1e:	52                   	push   edx
c0023e1f:	e8 44 e5 ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e24:	90                   	nop
c0023e25:	90                   	nop
c0023e26:	6a 00                	push   0x0
c0023e28:	6a 0c                	push   0xc
c0023e2a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e31:	50                   	push   eax
c0023e32:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e38:	e8 2b e5 ff ff       	call   c0022368 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e3d:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0023e44:	83 c4 14             	add    esp,0x14
c0023e47:	53                   	push   ebx
c0023e48:	e8 cb fe ff ff       	call   c0023d18 <ATAPI::detectMedia()>
c0023e4d:	31 c0                	xor    eax,eax
c0023e4f:	83 c4 18             	add    esp,0x18
c0023e52:	5b                   	pop    ebx
c0023e53:	c3                   	ret    

c0023e54 <ATAPI::read(unsigned long long, int, void*)>:
c0023e54:	55                   	push   ebp
c0023e55:	57                   	push   edi
c0023e56:	56                   	push   esi
c0023e57:	53                   	push   ebx
c0023e58:	83 ec 1c             	sub    esp,0x1c
c0023e5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e63:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0023e67:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023e6e:	74 41                	je     c0023eb1 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0023e70:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023e74:	b9 03 00 00 00       	mov    ecx,0x3
c0023e79:	fc                   	cld    
c0023e7a:	31 c0                	xor    eax,eax
c0023e7c:	86 fb                	xchg   bl,bh
c0023e7e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023e80:	c1 c3 10             	rol    ebx,0x10
c0023e83:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0023e88:	89 e8                	mov    eax,ebp
c0023e8a:	86 fb                	xchg   bl,bh
c0023e8c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0023e90:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0023e94:	50                   	push   eax
c0023e95:	50                   	push   eax
c0023e96:	55                   	push   ebp
c0023e97:	c1 e5 0b             	shl    ebp,0xb
c0023e9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023e9e:	6a 00                	push   0x0
c0023ea0:	55                   	push   ebp
c0023ea1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023ea5:	50                   	push   eax
c0023ea6:	56                   	push   esi
c0023ea7:	e8 1c fb ff ff       	call   c00239c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023eac:	83 c4 20             	add    esp,0x20
c0023eaf:	eb 1a                	jmp    c0023ecb <ATAPI::read(unsigned long long, int, void*)+0x77>
c0023eb1:	83 ec 0c             	sub    esp,0xc
c0023eb4:	56                   	push   esi
c0023eb5:	e8 5e fe ff ff       	call   c0023d18 <ATAPI::detectMedia()>
c0023eba:	83 c4 10             	add    esp,0x10
c0023ebd:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023ec4:	75 aa                	jne    c0023e70 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0023ec6:	b8 02 00 00 00       	mov    eax,0x2
c0023ecb:	83 c4 1c             	add    esp,0x1c
c0023ece:	5b                   	pop    ebx
c0023ecf:	5e                   	pop    esi
c0023ed0:	5f                   	pop    edi
c0023ed1:	5d                   	pop    ebp
c0023ed2:	c3                   	ret    
c0023ed3:	90                   	nop

c0023ed4 <SATA::close(int, int, void*)>:
c0023ed4:	83 ec 0c             	sub    esp,0xc
c0023ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023edb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023ee1:	85 c0                	test   eax,eax
c0023ee3:	74 0c                	je     c0023ef1 <SATA::close(int, int, void*)+0x1d>
c0023ee5:	83 ec 0c             	sub    esp,0xc
c0023ee8:	8b 10                	mov    edx,DWORD PTR [eax]
c0023eea:	50                   	push   eax
c0023eeb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023eee:	83 c4 10             	add    esp,0x10
c0023ef1:	31 c0                	xor    eax,eax
c0023ef3:	83 c4 0c             	add    esp,0xc
c0023ef6:	c3                   	ret    
c0023ef7:	90                   	nop

c0023ef8 <SATA::powerSaving(PowerSavingLevel)>:
c0023ef8:	c3                   	ret    
c0023ef9:	90                   	nop

c0023efa <SATA::open(int, int, void*)>:
c0023efa:	53                   	push   ebx
c0023efb:	83 ec 14             	sub    esp,0x14
c0023efe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023f02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023f06:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023f10:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0023f16:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
c0023f20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023f24:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023f2e:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0023f34:	68 88 b9 02 c0       	push   0xc002b988
c0023f39:	e8 9d e9 fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0023f3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f41:	e8 34 02 ff ff       	call   c001417a <PhysicalDisk::startCache()>
c0023f46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f49:	e8 56 22 ff ff       	call   c00161a4 <createPartitionsForDisk(PhysicalDisk*)>
c0023f4e:	31 c0                	xor    eax,eax
c0023f50:	83 c4 18             	add    esp,0x18
c0023f53:	5b                   	pop    ebx
c0023f54:	c3                   	ret    
c0023f55:	90                   	nop

c0023f56 <SATA::SATA()>:
c0023f56:	83 ec 0c             	sub    esp,0xc
c0023f59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f5d:	83 ec 04             	sub    esp,0x4
c0023f60:	68 00 02 00 00       	push   0x200
c0023f65:	68 a3 b9 02 c0       	push   0xc002b9a3
c0023f6a:	50                   	push   eax
c0023f6b:	e8 a2 01 ff ff       	call   c0014112 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023f70:	83 c4 10             	add    esp,0x10
c0023f73:	ba 80 ba 02 c0       	mov    edx,0xc002ba80
c0023f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f7c:	89 10                	mov    DWORD PTR [eax],edx
c0023f7e:	90                   	nop
c0023f7f:	83 c4 0c             	add    esp,0xc
c0023f82:	c3                   	ret    
c0023f83:	90                   	nop

c0023f84 <SATA::access(unsigned long long, int, void*, bool)>:
c0023f84:	55                   	push   ebp
c0023f85:	57                   	push   edi
c0023f86:	56                   	push   esi
c0023f87:	53                   	push   ebx
c0023f88:	81 ec 2c 04 00 00    	sub    esp,0x42c
c0023f8e:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0023f95:	8b bc 24 4c 04 00 00 	mov    edi,DWORD PTR [esp+0x44c]
c0023f9c:	8b 9c 24 40 04 00 00 	mov    ebx,DWORD PTR [esp+0x440]
c0023fa3:	8b b4 24 44 04 00 00 	mov    esi,DWORD PTR [esp+0x444]
c0023faa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023fae:	83 ff 08             	cmp    edi,0x8
c0023fb1:	7e 10                	jle    c0023fc3 <SATA::access(unsigned long long, int, void*, bool)+0x3f>
c0023fb3:	83 ec 0c             	sub    esp,0xc
c0023fb6:	68 b3 b9 02 c0       	push   0xc002b9b3
c0023fbb:	e8 eb 5b ff ff       	call   c0019bab <Krnl::panic(char const*)>
c0023fc0:	83 c4 10             	add    esp,0x10
c0023fc3:	51                   	push   ecx
c0023fc4:	68 00 02 00 00       	push   0x200
c0023fc9:	68 ee 00 00 00       	push   0xee
c0023fce:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0023fd2:	55                   	push   ebp
c0023fd3:	e8 fe c6 fd ff       	call   c00006d6 <memset>
c0023fd8:	83 c4 0c             	add    esp,0xc
c0023fdb:	68 00 02 00 00       	push   0x200
c0023fe0:	68 ee 00 00 00       	push   0xee
c0023fe5:	8d 84 24 2c 02 00 00 	lea    eax,[esp+0x22c]
c0023fec:	50                   	push   eax
c0023fed:	e8 e4 c6 fd ff       	call   c00006d6 <memset>
c0023ff2:	55                   	push   ebp
c0023ff3:	57                   	push   edi
c0023ff4:	56                   	push   esi
c0023ff5:	68 e5 b9 02 c0       	push   0xc002b9e5
c0023ffa:	e8 dc e8 fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0023fff:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024005:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002400b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002400f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024015:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0024019:	c1 e0 07             	shl    eax,0x7
c002401c:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c0024020:	83 c4 18             	add    esp,0x18
c0024023:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002402d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024031:	8d 50 02             	lea    edx,[eax+0x2]
c0024034:	c1 e2 07             	shl    edx,0x7
c0024037:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c002403b:	52                   	push   edx
c002403c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0024040:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024046:	e8 e1 ef ff ff       	call   c002302c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002404b:	89 c1                	mov    ecx,eax
c002404d:	58                   	pop    eax
c002404e:	5a                   	pop    edx
c002404f:	51                   	push   ecx
c0024050:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0024054:	68 1a ba 02 c0       	push   0xc002ba1a
c0024059:	e8 7d e8 fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c002405e:	83 c4 10             	add    esp,0x10
c0024061:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0024065:	83 f9 ff             	cmp    ecx,0xffffffff
c0024068:	0f 84 9a 01 00 00    	je     c0024208 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c002406e:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024074:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024078:	8b 12                	mov    edx,DWORD PTR [edx]
c002407a:	2b 90 5c 01 00 00    	sub    edx,DWORD PTR [eax+0x15c]
c0024080:	03 90 58 01 00 00    	add    edx,DWORD PTR [eax+0x158]
c0024086:	89 c8                	mov    eax,ecx
c0024088:	c1 e0 05             	shl    eax,0x5
c002408b:	01 c2                	add    edx,eax
c002408d:	8a 02                	mov    al,BYTE PTR [edx]
c002408f:	83 e0 a0             	and    eax,0xffffffa0
c0024092:	83 c8 05             	or     eax,0x5
c0024095:	88 02                	mov    BYTE PTR [edx],al
c0024097:	8d 47 ff             	lea    eax,[edi-0x1]
c002409a:	c1 f8 04             	sar    eax,0x4
c002409d:	40                   	inc    eax
c002409e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00240a2:	0f b7 c0             	movzx  eax,ax
c00240a5:	8b 9b 70 01 00 00    	mov    ebx,DWORD PTR [ebx+0x170]
c00240ab:	83 c0 08             	add    eax,0x8
c00240ae:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c00240b4:	c1 e0 04             	shl    eax,0x4
c00240b7:	2b 8b 5c 01 00 00    	sub    ecx,DWORD PTR [ebx+0x15c]
c00240bd:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c00240c0:	01 cb                	add    ebx,ecx
c00240c2:	52                   	push   edx
c00240c3:	50                   	push   eax
c00240c4:	6a 00                	push   0x0
c00240c6:	53                   	push   ebx
c00240c7:	e8 0a c6 fd ff       	call   c00006d6 <memset>
c00240cc:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00240d2:	83 c4 10             	add    esp,0x10
c00240d5:	89 ab 80 00 00 00    	mov    DWORD PTR [ebx+0x80],ebp
c00240db:	25 00 00 c0 7f       	and    eax,0x7fc00000
c00240e0:	8d ac 24 20 02 00 00 	lea    ebp,[esp+0x220]
c00240e7:	0d ff 01 00 80       	or     eax,0x800001ff
c00240ec:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00240f0:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00240f6:	b8 01 00 00 00       	mov    eax,0x1
c00240fb:	89 c2                	mov    edx,eax
c00240fd:	c1 e2 04             	shl    edx,0x4
c0024100:	89 ac 13 80 00 00 00 	mov    DWORD PTR [ebx+edx*1+0x80],ebp
c0024107:	8d 50 08             	lea    edx,[eax+0x8]
c002410a:	40                   	inc    eax
c002410b:	c1 e2 04             	shl    edx,0x4
c002410e:	81 64 13 0c 00 00 c0 7f 	and    DWORD PTR [ebx+edx*1+0xc],0x7fc00000
c0024116:	83 f8 10             	cmp    eax,0x10
c0024119:	75 e0                	jne    c00240fb <SATA::access(unsigned long long, int, void*, bool)+0x177>
c002411b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002411e:	c6 43 02 25          	mov    BYTE PTR [ebx+0x2],0x25
c0024122:	66 25 00 7f          	and    ax,0x7f00
c0024126:	66 89 73 04          	mov    WORD PTR [ebx+0x4],si
c002412a:	66 0d 27 80          	or     ax,0x8027
c002412e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024132:	66 89 03             	mov    WORD PTR [ebx],ax
c0024135:	66 89 7b 0c          	mov    WORD PTR [ebx+0xc],di
c0024139:	89 f0                	mov    eax,esi
c002413b:	31 d2                	xor    edx,edx
c002413d:	c1 e8 10             	shr    eax,0x10
c0024140:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024143:	89 f0                	mov    eax,esi
c0024145:	c1 e8 18             	shr    eax,0x18
c0024148:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c002414b:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c002414f:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024152:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024156:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002415d:	c1 e0 07             	shl    eax,0x7
c0024160:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024164:	8b 98 20 01 00 00    	mov    ebx,DWORD PTR [eax+0x120]
c002416a:	80 e3 88             	and    bl,0x88
c002416d:	74 0b                	je     c002417a <SATA::access(unsigned long long, int, void*, bool)+0x1f6>
c002416f:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0024175:	74 0b                	je     c0024182 <SATA::access(unsigned long long, int, void*, bool)+0x1fe>
c0024177:	42                   	inc    edx
c0024178:	eb ea                	jmp    c0024164 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c002417a:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0024180:	75 0a                	jne    c002418c <SATA::access(unsigned long long, int, void*, bool)+0x208>
c0024182:	83 ec 0c             	sub    esp,0xc
c0024185:	68 23 ba 02 c0       	push   0xc002ba23
c002418a:	eb 60                	jmp    c00241ec <SATA::access(unsigned long long, int, void*, bool)+0x268>
c002418c:	be 01 00 00 00       	mov    esi,0x1
c0024191:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024195:	d3 e6                	shl    esi,cl
c0024197:	c1 e3 07             	shl    ebx,0x7
c002419a:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c00241a0:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c00241a4:	83 ec 0c             	sub    esp,0xc
c00241a7:	68 31 ba 02 c0       	push   0xc002ba31
c00241ac:	e8 2a e7 fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c00241b1:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c00241b7:	83 c4 10             	add    esp,0x10
c00241ba:	85 c6                	test   esi,eax
c00241bc:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c00241c2:	74 1a                	je     c00241de <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c00241c4:	0f ba e0 1e          	bt     eax,0x1e
c00241c8:	73 da                	jae    c00241a4 <SATA::access(unsigned long long, int, void*, bool)+0x220>
c00241ca:	83 ec 0c             	sub    esp,0xc
c00241cd:	68 3e ba 02 c0       	push   0xc002ba3e
c00241d2:	e8 d4 59 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c00241d7:	83 c4 10             	add    esp,0x10
c00241da:	31 c0                	xor    eax,eax
c00241dc:	eb 2f                	jmp    c002420d <SATA::access(unsigned long long, int, void*, bool)+0x289>
c00241de:	0f ba e0 1e          	bt     eax,0x1e
c00241e2:	73 12                	jae    c00241f6 <SATA::access(unsigned long long, int, void*, bool)+0x272>
c00241e4:	83 ec 0c             	sub    esp,0xc
c00241e7:	68 3e ba 02 c0       	push   0xc002ba3e
c00241ec:	e8 ba 59 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c00241f1:	83 c4 10             	add    esp,0x10
c00241f4:	eb 12                	jmp    c0024208 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c00241f6:	83 ec 0c             	sub    esp,0xc
c00241f9:	68 4f ba 02 c0       	push   0xc002ba4f
c00241fe:	e8 a8 59 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c0024203:	83 c4 10             	add    esp,0x10
c0024206:	eb fe                	jmp    c0024206 <SATA::access(unsigned long long, int, void*, bool)+0x282>
c0024208:	b8 01 00 00 00       	mov    eax,0x1
c002420d:	81 c4 2c 04 00 00    	add    esp,0x42c
c0024213:	5b                   	pop    ebx
c0024214:	5e                   	pop    esi
c0024215:	5f                   	pop    edi
c0024216:	5d                   	pop    ebp
c0024217:	c3                   	ret    

c0024218 <SATA::read(unsigned long long, int, void*)>:
c0024218:	57                   	push   edi
c0024219:	b8 04 00 00 00       	mov    eax,0x4
c002421e:	56                   	push   esi
c002421f:	53                   	push   ebx
c0024220:	83 ec 10             	sub    esp,0x10
c0024223:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024227:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002422b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002422e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024232:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024236:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002423c:	77 3b                	ja     c0024279 <SATA::read(unsigned long long, int, void*)+0x61>
c002423e:	b8 06 00 00 00       	mov    eax,0x6
c0024243:	85 d2                	test   edx,edx
c0024245:	74 32                	je     c0024279 <SATA::read(unsigned long long, int, void*)+0x61>
c0024247:	50                   	push   eax
c0024248:	50                   	push   eax
c0024249:	6a 00                	push   0x0
c002424b:	52                   	push   edx
c002424c:	53                   	push   ebx
c002424d:	57                   	push   edi
c002424e:	56                   	push   esi
c002424f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024253:	e8 2c fd ff ff       	call   c0023f84 <SATA::access(unsigned long long, int, void*, bool)>
c0024258:	83 c4 20             	add    esp,0x20
c002425b:	85 c0                	test   eax,eax
c002425d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024261:	75 11                	jne    c0024274 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024263:	01 1d 08 f2 02 c0    	add    DWORD PTR ds:0xc002f208,ebx
c0024269:	e8 d2 c4 fe ff       	call   c0010740 <VgaText::updateDiskUsage()>
c002426e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024272:	eb 05                	jmp    c0024279 <SATA::read(unsigned long long, int, void*)+0x61>
c0024274:	b8 01 00 00 00       	mov    eax,0x1
c0024279:	83 c4 10             	add    esp,0x10
c002427c:	5b                   	pop    ebx
c002427d:	5e                   	pop    esi
c002427e:	5f                   	pop    edi
c002427f:	c3                   	ret    

c0024280 <SATA::write(unsigned long long, int, void*)>:
c0024280:	57                   	push   edi
c0024281:	b8 04 00 00 00       	mov    eax,0x4
c0024286:	56                   	push   esi
c0024287:	53                   	push   ebx
c0024288:	83 ec 10             	sub    esp,0x10
c002428b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002428f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024293:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024296:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002429a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002429e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00242a4:	77 3b                	ja     c00242e1 <SATA::write(unsigned long long, int, void*)+0x61>
c00242a6:	b8 06 00 00 00       	mov    eax,0x6
c00242ab:	85 d2                	test   edx,edx
c00242ad:	74 32                	je     c00242e1 <SATA::write(unsigned long long, int, void*)+0x61>
c00242af:	50                   	push   eax
c00242b0:	50                   	push   eax
c00242b1:	6a 01                	push   0x1
c00242b3:	52                   	push   edx
c00242b4:	53                   	push   ebx
c00242b5:	57                   	push   edi
c00242b6:	56                   	push   esi
c00242b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00242bb:	e8 c4 fc ff ff       	call   c0023f84 <SATA::access(unsigned long long, int, void*, bool)>
c00242c0:	83 c4 20             	add    esp,0x20
c00242c3:	85 c0                	test   eax,eax
c00242c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00242c9:	75 11                	jne    c00242dc <SATA::write(unsigned long long, int, void*)+0x5c>
c00242cb:	01 1d 04 f2 02 c0    	add    DWORD PTR ds:0xc002f204,ebx
c00242d1:	e8 6a c4 fe ff       	call   c0010740 <VgaText::updateDiskUsage()>
c00242d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00242da:	eb 05                	jmp    c00242e1 <SATA::write(unsigned long long, int, void*)+0x61>
c00242dc:	b8 01 00 00 00       	mov    eax,0x1
c00242e1:	83 c4 10             	add    esp,0x10
c00242e4:	5b                   	pop    ebx
c00242e5:	5e                   	pop    esi
c00242e6:	5f                   	pop    edi
c00242e7:	c3                   	ret    

c00242e8 <AVX::open(int, int, void*)>:
c00242e8:	83 ec 0c             	sub    esp,0xc
c00242eb:	e8 48 11 00 00       	call   c0025438 <avxInit>
c00242f0:	b8 00 00 00 00       	mov    eax,0x0
c00242f5:	83 c4 0c             	add    esp,0xc
c00242f8:	c3                   	ret    
c00242f9:	90                   	nop

c00242fa <AVX::close(int, int, void*)>:
c00242fa:	83 ec 0c             	sub    esp,0xc
c00242fd:	e8 37 11 00 00       	call   c0025439 <avxClose>
c0024302:	b8 00 00 00 00       	mov    eax,0x0
c0024307:	83 c4 0c             	add    esp,0xc
c002430a:	c3                   	ret    
c002430b:	90                   	nop

c002430c <AVX::available()>:
c002430c:	83 ec 0c             	sub    esp,0xc
c002430f:	e8 1c 11 00 00       	call   c0025430 <avxDetect>
c0024314:	85 c0                	test   eax,eax
c0024316:	0f 95 c0             	setne  al
c0024319:	83 c4 0c             	add    esp,0xc
c002431c:	c3                   	ret    
c002431d:	90                   	nop

c002431e <AVX::save(void*)>:
c002431e:	83 ec 0c             	sub    esp,0xc
c0024321:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024325:	83 ec 0c             	sub    esp,0xc
c0024328:	50                   	push   eax
c0024329:	e8 08 11 00 00       	call   c0025436 <avxSave>
c002432e:	83 c4 10             	add    esp,0x10
c0024331:	90                   	nop
c0024332:	83 c4 0c             	add    esp,0xc
c0024335:	c3                   	ret    

c0024336 <AVX::load(void*)>:
c0024336:	83 ec 0c             	sub    esp,0xc
c0024339:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002433d:	83 ec 0c             	sub    esp,0xc
c0024340:	50                   	push   eax
c0024341:	e8 f1 10 00 00       	call   c0025437 <avxLoad>
c0024346:	83 c4 10             	add    esp,0x10
c0024349:	90                   	nop
c002434a:	83 c4 0c             	add    esp,0xc
c002434d:	c3                   	ret    

c002434e <AVX::AVX()>:
c002434e:	83 ec 0c             	sub    esp,0xc
c0024351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024355:	83 ec 08             	sub    esp,0x8
c0024358:	68 ac ba 02 c0       	push   0xc002baac
c002435d:	50                   	push   eax
c002435e:	e8 8d fe fe ff       	call   c00141f0 <FPU::FPU(char const*)>
c0024363:	83 c4 10             	add    esp,0x10
c0024366:	ba bc ba 02 c0       	mov    edx,0xc002babc
c002436b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002436f:	89 10                	mov    DWORD PTR [eax],edx
c0024371:	90                   	nop
c0024372:	83 c4 0c             	add    esp,0xc
c0024375:	c3                   	ret    

c0024376 <MMX::available()>:
c0024376:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c002437b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024381:	83 e0 20             	and    eax,0x20
c0024384:	84 c0                	test   al,al
c0024386:	0f 95 c0             	setne  al
c0024389:	c3                   	ret    

c002438a <MMX::open(int, int, void*)>:
c002438a:	83 ec 0c             	sub    esp,0xc
c002438d:	e8 2a 11 00 00       	call   c00254bc <x87Init>
c0024392:	b8 00 00 00 00       	mov    eax,0x0
c0024397:	83 c4 0c             	add    esp,0xc
c002439a:	c3                   	ret    
c002439b:	90                   	nop

c002439c <MMX::close(int, int, void*)>:
c002439c:	83 ec 0c             	sub    esp,0xc
c002439f:	e8 32 11 00 00       	call   c00254d6 <x87Close>
c00243a4:	b8 00 00 00 00       	mov    eax,0x0
c00243a9:	83 c4 0c             	add    esp,0xc
c00243ac:	c3                   	ret    
c00243ad:	90                   	nop

c00243ae <MMX::save(void*)>:
c00243ae:	83 ec 0c             	sub    esp,0xc
c00243b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00243b5:	83 ec 0c             	sub    esp,0xc
c00243b8:	50                   	push   eax
c00243b9:	e8 f3 10 00 00       	call   c00254b1 <x87Save>
c00243be:	83 c4 10             	add    esp,0x10
c00243c1:	90                   	nop
c00243c2:	83 c4 0c             	add    esp,0xc
c00243c5:	c3                   	ret    

c00243c6 <MMX::load(void*)>:
c00243c6:	83 ec 0c             	sub    esp,0xc
c00243c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00243cd:	83 ec 0c             	sub    esp,0xc
c00243d0:	50                   	push   eax
c00243d1:	e8 e1 10 00 00       	call   c00254b7 <x87Load>
c00243d6:	83 c4 10             	add    esp,0x10
c00243d9:	90                   	nop
c00243da:	83 c4 0c             	add    esp,0xc
c00243dd:	c3                   	ret    

c00243de <MMX::MMX()>:
c00243de:	83 ec 0c             	sub    esp,0xc
c00243e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243e5:	83 ec 08             	sub    esp,0x8
c00243e8:	68 ec ba 02 c0       	push   0xc002baec
c00243ed:	50                   	push   eax
c00243ee:	e8 fd fd fe ff       	call   c00141f0 <FPU::FPU(char const*)>
c00243f3:	83 c4 10             	add    esp,0x10
c00243f6:	ba fc ba 02 c0       	mov    edx,0xc002bafc
c00243fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243ff:	89 10                	mov    DWORD PTR [eax],edx
c0024401:	90                   	nop
c0024402:	83 c4 0c             	add    esp,0xc
c0024405:	c3                   	ret    

c0024406 <SSE::open(int, int, void*)>:
c0024406:	83 ec 0c             	sub    esp,0xc
c0024409:	e8 66 10 00 00       	call   c0025474 <sseInit>
c002440e:	b8 00 00 00 00       	mov    eax,0x0
c0024413:	83 c4 0c             	add    esp,0xc
c0024416:	c3                   	ret    
c0024417:	90                   	nop

c0024418 <SSE::close(int, int, void*)>:
c0024418:	83 ec 0c             	sub    esp,0xc
c002441b:	e8 64 10 00 00       	call   c0025484 <sseClose>
c0024420:	b8 00 00 00 00       	mov    eax,0x0
c0024425:	83 c4 0c             	add    esp,0xc
c0024428:	c3                   	ret    
c0024429:	90                   	nop

c002442a <SSE::available()>:
c002442a:	83 ec 1c             	sub    esp,0x1c
c002442d:	e8 1e 10 00 00       	call   c0025450 <absolutelyNoChanceInHell>
c0024432:	85 c0                	test   eax,eax
c0024434:	0f 95 c0             	setne  al
c0024437:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002443b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002443f:	83 c4 1c             	add    esp,0x1c
c0024442:	c3                   	ret    
c0024443:	90                   	nop

c0024444 <SSE::save(void*)>:
c0024444:	83 ec 0c             	sub    esp,0xc
c0024447:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002444b:	83 ec 0c             	sub    esp,0xc
c002444e:	50                   	push   eax
c002444f:	e8 14 10 00 00       	call   c0025468 <sseSave>
c0024454:	83 c4 10             	add    esp,0x10
c0024457:	90                   	nop
c0024458:	83 c4 0c             	add    esp,0xc
c002445b:	c3                   	ret    

c002445c <SSE::load(void*)>:
c002445c:	83 ec 0c             	sub    esp,0xc
c002445f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024463:	83 ec 0c             	sub    esp,0xc
c0024466:	50                   	push   eax
c0024467:	e8 02 10 00 00       	call   c002546e <sseLoad>
c002446c:	83 c4 10             	add    esp,0x10
c002446f:	90                   	nop
c0024470:	83 c4 0c             	add    esp,0xc
c0024473:	c3                   	ret    

c0024474 <SSE::SSE()>:
c0024474:	83 ec 0c             	sub    esp,0xc
c0024477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002447b:	83 ec 08             	sub    esp,0x8
c002447e:	68 2c bb 02 c0       	push   0xc002bb2c
c0024483:	50                   	push   eax
c0024484:	e8 67 fd fe ff       	call   c00141f0 <FPU::FPU(char const*)>
c0024489:	83 c4 10             	add    esp,0x10
c002448c:	ba 3c bb 02 c0       	mov    edx,0xc002bb3c
c0024491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024495:	89 10                	mov    DWORD PTR [eax],edx
c0024497:	90                   	nop
c0024498:	83 c4 0c             	add    esp,0xc
c002449b:	c3                   	ret    

c002449c <x87::open(int, int, void*)>:
c002449c:	83 ec 0c             	sub    esp,0xc
c002449f:	e8 18 10 00 00       	call   c00254bc <x87Init>
c00244a4:	b8 00 00 00 00       	mov    eax,0x0
c00244a9:	83 c4 0c             	add    esp,0xc
c00244ac:	c3                   	ret    
c00244ad:	90                   	nop

c00244ae <x87::close(int, int, void*)>:
c00244ae:	83 ec 0c             	sub    esp,0xc
c00244b1:	e8 20 10 00 00       	call   c00254d6 <x87Close>
c00244b6:	b8 00 00 00 00       	mov    eax,0x0
c00244bb:	83 c4 0c             	add    esp,0xc
c00244be:	c3                   	ret    
c00244bf:	90                   	nop

c00244c0 <x87::available()>:
c00244c0:	83 ec 0c             	sub    esp,0xc
c00244c3:	e8 ce 0f 00 00       	call   c0025496 <x87Detect>
c00244c8:	85 c0                	test   eax,eax
c00244ca:	0f 95 c0             	setne  al
c00244cd:	83 c4 0c             	add    esp,0xc
c00244d0:	c3                   	ret    
c00244d1:	90                   	nop

c00244d2 <x87::save(void*)>:
c00244d2:	83 ec 0c             	sub    esp,0xc
c00244d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00244d9:	83 ec 0c             	sub    esp,0xc
c00244dc:	50                   	push   eax
c00244dd:	e8 cf 0f 00 00       	call   c00254b1 <x87Save>
c00244e2:	83 c4 10             	add    esp,0x10
c00244e5:	90                   	nop
c00244e6:	83 c4 0c             	add    esp,0xc
c00244e9:	c3                   	ret    

c00244ea <x87::load(void*)>:
c00244ea:	83 ec 0c             	sub    esp,0xc
c00244ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00244f1:	83 ec 0c             	sub    esp,0xc
c00244f4:	50                   	push   eax
c00244f5:	e8 bd 0f 00 00       	call   c00254b7 <x87Load>
c00244fa:	83 c4 10             	add    esp,0x10
c00244fd:	90                   	nop
c00244fe:	83 c4 0c             	add    esp,0xc
c0024501:	c3                   	ret    

c0024502 <x87::x87()>:
c0024502:	83 ec 0c             	sub    esp,0xc
c0024505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024509:	83 ec 08             	sub    esp,0x8
c002450c:	68 6c bb 02 c0       	push   0xc002bb6c
c0024511:	50                   	push   eax
c0024512:	e8 d9 fc fe ff       	call   c00141f0 <FPU::FPU(char const*)>
c0024517:	83 c4 10             	add    esp,0x10
c002451a:	ba 7c bb 02 c0       	mov    edx,0xc002bb7c
c002451f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024523:	89 10                	mov    DWORD PTR [eax],edx
c0024525:	90                   	nop
c0024526:	83 c4 0c             	add    esp,0xc
c0024529:	c3                   	ret    

c002452a <APIC::disable()>:
c002452a:	90                   	nop
c002452b:	c3                   	ret    

c002452c <APIC::close(int, int, void*)>:
c002452c:	55                   	push   ebp
c002452d:	89 e5                	mov    ebp,esp
c002452f:	83 ec 08             	sub    esp,0x8
c0024532:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024535:	8b 00                	mov    eax,DWORD PTR [eax]
c0024537:	83 c0 3c             	add    eax,0x3c
c002453a:	8b 00                	mov    eax,DWORD PTR [eax]
c002453c:	83 ec 0c             	sub    esp,0xc
c002453f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024542:	ff d0                	call   eax
c0024544:	83 c4 10             	add    esp,0x10
c0024547:	b8 00 00 00 00       	mov    eax,0x0
c002454c:	c9                   	leave  
c002454d:	c3                   	ret    

c002454e <IOAPIC::close(int, int, void*)>:
c002454e:	b8 00 00 00 00       	mov    eax,0x0
c0024553:	c3                   	ret    

c0024554 <APIC::io_wait()>:
c0024554:	eb 00                	jmp    c0024556 <APIC::io_wait()+0x2>
c0024556:	eb 00                	jmp    c0024558 <APIC::io_wait()+0x4>
c0024558:	90                   	nop
c0024559:	c3                   	ret    

c002455a <APIC::getBase()>:
c002455a:	55                   	push   ebp
c002455b:	89 e5                	mov    ebp,esp
c002455d:	83 ec 18             	sub    esp,0x18
c0024560:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0024565:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002456b:	83 e0 08             	and    eax,0x8
c002456e:	84 c0                	test   al,al
c0024570:	75 07                	jne    c0024579 <APIC::getBase()+0x1f>
c0024572:	b8 00 00 00 00       	mov    eax,0x0
c0024577:	eb 21                	jmp    c002459a <APIC::getBase()+0x40>
c0024579:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c002457e:	83 ec 08             	sub    esp,0x8
c0024581:	6a 1b                	push   0x1b
c0024583:	50                   	push   eax
c0024584:	e8 55 a6 fe ff       	call   c000ebde <Computer::rdmsr(unsigned int)>
c0024589:	83 c4 10             	add    esp,0x10
c002458c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002458f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024592:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024595:	25 00 f0 ff ff       	and    eax,0xfffff000
c002459a:	c9                   	leave  
c002459b:	c3                   	ret    

c002459c <APIC::eoi(unsigned char)>:
c002459c:	55                   	push   ebp
c002459d:	89 e5                	mov    ebp,esp
c002459f:	83 ec 28             	sub    esp,0x28
c00245a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00245a5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00245a8:	83 ec 0c             	sub    esp,0xc
c00245ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00245ae:	e8 a7 ff ff ff       	call   c002455a <APIC::getBase()>
c00245b3:	83 c4 10             	add    esp,0x10
c00245b6:	05 b0 00 00 00       	add    eax,0xb0
c00245bb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00245be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00245c1:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00245c7:	90                   	nop
c00245c8:	c9                   	leave  
c00245c9:	c3                   	ret    

c00245ca <APIC::open(int, int, void*)>:
c00245ca:	55                   	push   ebp
c00245cb:	89 e5                	mov    ebp,esp
c00245cd:	57                   	push   edi
c00245ce:	56                   	push   esi
c00245cf:	53                   	push   ebx
c00245d0:	83 ec 2c             	sub    esp,0x2c
c00245d3:	83 ec 0c             	sub    esp,0xc
c00245d6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00245d9:	e8 7c ff ff ff       	call   c002455a <APIC::getBase()>
c00245de:	83 c4 10             	add    esp,0x10
c00245e1:	89 c2                	mov    edx,eax
c00245e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00245e6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00245ec:	0f b6 f8             	movzx  edi,al
c00245ef:	89 d0                	mov    eax,edx
c00245f1:	ba 00 00 00 00       	mov    edx,0x0
c00245f6:	89 c1                	mov    ecx,eax
c00245f8:	80 e5 ff             	and    ch,0xff
c00245fb:	89 cb                	mov    ebx,ecx
c00245fd:	0f b6 f2             	movzx  esi,dl
c0024600:	89 d8                	mov    eax,ebx
c0024602:	89 f2                	mov    edx,esi
c0024604:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024607:	8d 5f 08             	lea    ebx,[edi+0x8]
c002460a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002460e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024612:	83 e0 00             	and    eax,0x0
c0024615:	09 d0                	or     eax,edx
c0024617:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002461b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002461e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024624:	8d 50 01             	lea    edx,[eax+0x1]
c0024627:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002462a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024630:	0f b6 d0             	movzx  edx,al
c0024633:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024636:	83 c2 08             	add    edx,0x8
c0024639:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002463d:	0f b6 c9             	movzx  ecx,cl
c0024640:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024646:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002464a:	83 ec 0c             	sub    esp,0xc
c002464d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024650:	e8 05 ff ff ff       	call   c002455a <APIC::getBase()>
c0024655:	83 c4 10             	add    esp,0x10
c0024658:	05 f0 00 00 00       	add    eax,0xf0
c002465d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0024660:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024663:	8b 00                	mov    eax,DWORD PTR [eax]
c0024665:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024668:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002466f:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0024676:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024679:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002467c:	89 10                	mov    DWORD PTR [eax],edx
c002467e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0024685:	a1 90 d7 02 c0       	mov    eax,ds:0xc002d790
c002468a:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002468d:	7d 7c                	jge    c002470b <APIC::open(int, int, void*)+0x141>
c002468f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024692:	8b 04 85 a0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2860]
c0024699:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002469c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002469f:	8b 04 85 a0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2860]
c00246a6:	c1 e8 08             	shr    eax,0x8
c00246a9:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00246ad:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00246b0:	8b 04 85 a0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2860]
c00246b7:	c1 e8 18             	shr    eax,0x18
c00246ba:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00246bd:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00246c1:	75 40                	jne    c0024703 <APIC::open(int, int, void*)+0x139>
c00246c3:	83 ec 0c             	sub    esp,0xc
c00246c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00246c9:	e8 8c fe ff ff       	call   c002455a <APIC::getBase()>
c00246ce:	83 c4 10             	add    esp,0x10
c00246d1:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00246d5:	75 07                	jne    c00246de <APIC::open(int, int, void*)+0x114>
c00246d7:	ba 60 03 00 00       	mov    edx,0x360
c00246dc:	eb 05                	jmp    c00246e3 <APIC::open(int, int, void*)+0x119>
c00246de:	ba 50 03 00 00       	mov    edx,0x350
c00246e3:	01 d0                	add    eax,edx
c00246e5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00246e8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00246eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00246ed:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00246f0:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00246f7:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00246fb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00246fe:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024701:	89 10                	mov    DWORD PTR [eax],edx
c0024703:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0024706:	e9 7a ff ff ff       	jmp    c0024685 <APIC::open(int, int, void*)+0xbb>
c002470b:	b8 00 00 00 00       	mov    eax,0x0
c0024710:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024713:	5b                   	pop    ebx
c0024714:	5e                   	pop    esi
c0024715:	5f                   	pop    edi
c0024716:	5d                   	pop    ebp
c0024717:	c3                   	ret    

c0024718 <IOAPIC::IOAPIC()>:
c0024718:	83 ec 0c             	sub    esp,0xc
c002471b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002471f:	83 ec 08             	sub    esp,0x8
c0024722:	68 ac bb 02 c0       	push   0xc002bbac
c0024727:	50                   	push   eax
c0024728:	e8 c5 f7 fe ff       	call   c0013ef2 <Device::Device(char const*)>
c002472d:	83 c4 10             	add    esp,0x10
c0024730:	ba d4 bc 02 c0       	mov    edx,0xc002bcd4
c0024735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024739:	89 10                	mov    DWORD PTR [eax],edx
c002473b:	90                   	nop
c002473c:	83 c4 0c             	add    esp,0xc
c002473f:	c3                   	ret    

c0024740 <APIC::APIC()>:
c0024740:	53                   	push   ebx
c0024741:	83 ec 18             	sub    esp,0x18
c0024744:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024748:	83 ec 08             	sub    esp,0x8
c002474b:	68 b4 bb 02 c0       	push   0xc002bbb4
c0024750:	50                   	push   eax
c0024751:	e8 f4 fe fe ff       	call   c001464a <InterruptController::InterruptController(char const*)>
c0024756:	83 c4 10             	add    esp,0x10
c0024759:	ba 8c bc 02 c0       	mov    edx,0xc002bc8c
c002475e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024762:	89 10                	mov    DWORD PTR [eax],edx
c0024764:	a0 60 f2 02 c0       	mov    al,ds:0xc002f260
c0024769:	83 f0 01             	xor    eax,0x1
c002476c:	84 c0                	test   al,al
c002476e:	0f 84 a1 00 00 00    	je     c0024815 <APIC::APIC()+0xd5>
c0024774:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0024779:	a0 40 d8 02 c0       	mov    al,ds:0xc002d840
c002477e:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0024782:	0f 83 86 00 00 00    	jae    c002480e <APIC::APIC()+0xce>
c0024788:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0024790:	83 ec 0c             	sub    esp,0xc
c0024793:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024797:	e8 9a ae fe ff       	call   c000f636 <malloc>
c002479c:	83 c4 10             	add    esp,0x10
c002479f:	89 c3                	mov    ebx,eax
c00247a1:	83 ec 0c             	sub    esp,0xc
c00247a4:	53                   	push   ebx
c00247a5:	e8 6e ff ff ff       	call   c0024718 <IOAPIC::IOAPIC()>
c00247aa:	83 c4 10             	add    esp,0x10
c00247ad:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00247b1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00247b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00247ba:	89 14 85 40 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0dc0],edx
c00247c1:	a1 20 f2 02 c0       	mov    eax,ds:0xc002f220
c00247c6:	40                   	inc    eax
c00247c7:	a3 20 f2 02 c0       	mov    ds:0xc002f220,eax
c00247cc:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c00247d1:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00247d7:	83 ec 08             	sub    esp,0x8
c00247da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00247de:	50                   	push   eax
c00247df:	e8 1e f5 fe ff       	call   c0013d02 <Device::addChild(Device*)>
c00247e4:	83 c4 10             	add    esp,0x10
c00247e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00247eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00247ed:	83 c0 08             	add    eax,0x8
c00247f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00247f2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00247f7:	6a 00                	push   0x0
c00247f9:	6a 00                	push   0x0
c00247fb:	52                   	push   edx
c00247fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024800:	ff d0                	call   eax
c0024802:	83 c4 10             	add    esp,0x10
c0024805:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0024809:	e9 6b ff ff ff       	jmp    c0024779 <APIC::APIC()+0x39>
c002480e:	c6 05 60 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f260,0x1
c0024815:	90                   	nop
c0024816:	83 c4 18             	add    esp,0x18
c0024819:	5b                   	pop    ebx
c002481a:	c3                   	ret    
c002481b:	90                   	nop

c002481c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002481c:	55                   	push   ebp
c002481d:	89 e5                	mov    ebp,esp
c002481f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024822:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024828:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002482b:	72 1d                	jb     c002484a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002482d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024830:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0024836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024839:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002483f:	01 d0                	add    eax,edx
c0024841:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024844:	73 04                	jae    c002484a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0024846:	b0 01                	mov    al,0x1
c0024848:	eb 02                	jmp    c002484c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002484a:	b0 00                	mov    al,0x0
c002484c:	5d                   	pop    ebp
c002484d:	c3                   	ret    

c002484e <IOAPIC::read(int)>:
c002484e:	55                   	push   ebp
c002484f:	89 e5                	mov    ebp,esp
c0024851:	83 ec 10             	sub    esp,0x10
c0024854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024857:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002485d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0024860:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024863:	0f b6 d0             	movzx  edx,al
c0024866:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024869:	89 10                	mov    DWORD PTR [eax],edx
c002486b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002486e:	83 c0 10             	add    eax,0x10
c0024871:	8b 00                	mov    eax,DWORD PTR [eax]
c0024873:	c9                   	leave  
c0024874:	c3                   	ret    
c0024875:	90                   	nop

c0024876 <IOAPIC::open(int, int, void*)>:
c0024876:	55                   	push   ebp
c0024877:	89 e5                	mov    ebp,esp
c0024879:	57                   	push   edi
c002487a:	56                   	push   esi
c002487b:	53                   	push   ebx
c002487c:	83 ec 0c             	sub    esp,0xc
c002487f:	83 ec 0c             	sub    esp,0xc
c0024882:	68 df bb 02 c0       	push   0xc002bbdf
c0024887:	e8 4f e0 fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c002488c:	83 c4 10             	add    esp,0x10
c002488f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024892:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024895:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002489b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002489e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00248a4:	8b 14 85 80 d8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2780]
c00248ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00248ae:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00248b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00248b7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00248bd:	8b 14 85 00 d9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2700]
c00248c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00248c7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00248cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00248d0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00248d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00248d9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00248df:	0f b6 f8             	movzx  edi,al
c00248e2:	89 d0                	mov    eax,edx
c00248e4:	ba 00 00 00 00       	mov    edx,0x0
c00248e9:	89 c1                	mov    ecx,eax
c00248eb:	80 e5 ff             	and    ch,0xff
c00248ee:	89 cb                	mov    ebx,ecx
c00248f0:	0f b6 f2             	movzx  esi,dl
c00248f3:	89 d8                	mov    eax,ebx
c00248f5:	89 f2                	mov    edx,esi
c00248f7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00248fa:	8d 5f 08             	lea    ebx,[edi+0x8]
c00248fd:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024901:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024905:	83 e0 00             	and    eax,0x0
c0024908:	09 d0                	or     eax,edx
c002490a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002490e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024911:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024917:	8d 50 01             	lea    edx,[eax+0x1]
c002491a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002491d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024923:	0f b6 d0             	movzx  edx,al
c0024926:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024929:	83 c2 08             	add    edx,0x8
c002492c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024930:	0f b6 c9             	movzx  ecx,cl
c0024933:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0024939:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002493d:	83 ec 08             	sub    esp,0x8
c0024940:	6a 01                	push   0x1
c0024942:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024945:	e8 04 ff ff ff       	call   c002484e <IOAPIC::read(int)>
c002494a:	83 c4 10             	add    esp,0x10
c002494d:	c1 f8 10             	sar    eax,0x10
c0024950:	0f b6 c0             	movzx  eax,al
c0024953:	8d 50 01             	lea    edx,[eax+0x1]
c0024956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024959:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002495f:	b8 00 00 00 00       	mov    eax,0x0
c0024964:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024967:	5b                   	pop    ebx
c0024968:	5e                   	pop    esi
c0024969:	5f                   	pop    edi
c002496a:	5d                   	pop    ebp
c002496b:	c3                   	ret    

c002496c <IOAPIC::write(int, int)>:
c002496c:	55                   	push   ebp
c002496d:	89 e5                	mov    ebp,esp
c002496f:	83 ec 10             	sub    esp,0x10
c0024972:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024975:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002497b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002497e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024981:	0f b6 d0             	movzx  edx,al
c0024984:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024987:	89 10                	mov    DWORD PTR [eax],edx
c0024989:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002498c:	8d 50 10             	lea    edx,[eax+0x10]
c002498f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024992:	89 02                	mov    DWORD PTR [edx],eax
c0024994:	90                   	nop
c0024995:	c9                   	leave  
c0024996:	c3                   	ret    
c0024997:	90                   	nop

c0024998 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0024998:	55                   	push   ebp
c0024999:	89 e5                	mov    ebp,esp
c002499b:	53                   	push   ebx
c002499c:	83 ec 2c             	sub    esp,0x2c
c002499f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00249a2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00249a5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00249a8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00249ab:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00249ae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00249b1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00249b4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00249b7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00249ba:	88 d8                	mov    al,bl
c00249bc:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00249bf:	88 c8                	mov    al,cl
c00249c1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00249c4:	88 d0                	mov    al,dl
c00249c6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00249c9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00249cd:	83 c0 08             	add    eax,0x8
c00249d0:	01 c0                	add    eax,eax
c00249d2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00249d5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00249d9:	83 c0 08             	add    eax,0x8
c00249dc:	01 c0                	add    eax,eax
c00249de:	40                   	inc    eax
c00249df:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00249e2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00249e5:	50                   	push   eax
c00249e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00249e9:	e8 60 fe ff ff       	call   c002484e <IOAPIC::read(int)>
c00249ee:	83 c4 08             	add    esp,0x8
c00249f1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00249f4:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00249fb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00249fe:	c1 e0 18             	shl    eax,0x18
c0024a01:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0024a04:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024a07:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024a0a:	52                   	push   edx
c0024a0b:	50                   	push   eax
c0024a0c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a0f:	e8 58 ff ff ff       	call   c002496c <IOAPIC::write(int, int)>
c0024a14:	83 c4 0c             	add    esp,0xc
c0024a17:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024a1a:	50                   	push   eax
c0024a1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a1e:	e8 2b fe ff ff       	call   c002484e <IOAPIC::read(int)>
c0024a23:	83 c4 08             	add    esp,0x8
c0024a26:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0024a29:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0024a30:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0024a37:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0024a3e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0024a42:	74 09                	je     c0024a4d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0024a44:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0024a4b:	eb 07                	jmp    c0024a54 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0024a4d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0024a54:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0024a58:	74 09                	je     c0024a63 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0024a5a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0024a61:	eb 07                	jmp    c0024a6a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0024a63:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0024a6a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0024a71:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0024a75:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0024a78:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0024a7b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024a7e:	52                   	push   edx
c0024a7f:	50                   	push   eax
c0024a80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a83:	e8 e4 fe ff ff       	call   c002496c <IOAPIC::write(int, int)>
c0024a88:	83 c4 0c             	add    esp,0xc
c0024a8b:	90                   	nop
c0024a8c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0024a8f:	c9                   	leave  
c0024a90:	c3                   	ret    
c0024a91:	90                   	nop

c0024a92 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0024a92:	55                   	push   ebp
c0024a93:	89 e5                	mov    ebp,esp
c0024a95:	57                   	push   edi
c0024a96:	56                   	push   esi
c0024a97:	53                   	push   ebx
c0024a98:	83 ec 2c             	sub    esp,0x2c
c0024a9b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0024a9e:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0024aa1:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0024aa5:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0024aa9:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0024aad:	74 5a                	je     c0024b09 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0024aaf:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0024ab3:	7f 44                	jg     c0024af9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0024ab5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024ab8:	05 20 c1 02 c0       	add    eax,0xc002c120
c0024abd:	8a 00                	mov    al,BYTE PTR [eax]
c0024abf:	0f b6 c0             	movzx  eax,al
c0024ac2:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0024ac5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024ac8:	66 8b 84 00 20 d8 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd27e0]
c0024ad0:	0f b7 c0             	movzx  eax,ax
c0024ad3:	83 e0 02             	and    eax,0x2
c0024ad6:	85 c0                	test   eax,eax
c0024ad8:	74 04                	je     c0024ade <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0024ada:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0024ade:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024ae1:	66 8b 84 00 20 d8 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd27e0]
c0024ae9:	0f b7 c0             	movzx  eax,ax
c0024aec:	83 e0 08             	and    eax,0x8
c0024aef:	85 c0                	test   eax,eax
c0024af1:	74 16                	je     c0024b09 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0024af3:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0024af7:	eb 10                	jmp    c0024b09 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0024af9:	83 ec 0c             	sub    esp,0xc
c0024afc:	68 f0 bb 02 c0       	push   0xc002bbf0
c0024b01:	e8 a5 50 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c0024b06:	83 c4 10             	add    esp,0x10
c0024b09:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0024b0d:	a1 20 f2 02 c0       	mov    eax,ds:0xc002f220
c0024b12:	83 ec 08             	sub    esp,0x8
c0024b15:	50                   	push   eax
c0024b16:	68 28 bc 02 c0       	push   0xc002bc28
c0024b1b:	e8 bb dd fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0024b20:	83 c4 10             	add    esp,0x10
c0024b23:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0024b2a:	a1 20 f2 02 c0       	mov    eax,ds:0xc002f220
c0024b2f:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0024b32:	7d 67                	jge    c0024b9b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024b34:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024b37:	8b 04 85 40 f2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0dc0]
c0024b3e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024b41:	83 ec 08             	sub    esp,0x8
c0024b44:	52                   	push   edx
c0024b45:	50                   	push   eax
c0024b46:	e8 d1 fc ff ff       	call   c002481c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0024b4b:	83 c4 10             	add    esp,0x10
c0024b4e:	84 c0                	test   al,al
c0024b50:	74 44                	je     c0024b96 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0024b52:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024b55:	8b 1c 85 40 f2 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd0dc0]
c0024b5c:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0024b60:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024b63:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0024b67:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024b6a:	83 c0 20             	add    eax,0x20
c0024b6d:	0f b6 f0             	movzx  esi,al
c0024b70:	b8 00 00 00 00       	mov    eax,0x0
c0024b75:	99                   	cdq    
c0024b76:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024b79:	0f b6 c9             	movzx  ecx,cl
c0024b7c:	83 ec 04             	sub    esp,0x4
c0024b7f:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0024b82:	57                   	push   edi
c0024b83:	56                   	push   esi
c0024b84:	52                   	push   edx
c0024b85:	50                   	push   eax
c0024b86:	51                   	push   ecx
c0024b87:	53                   	push   ebx
c0024b88:	e8 0b fe ff ff       	call   c0024998 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0024b8d:	83 c4 20             	add    esp,0x20
c0024b90:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0024b94:	eb 05                	jmp    c0024b9b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024b96:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0024b99:	eb 8f                	jmp    c0024b2a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0024b9b:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0024b9e:	83 f0 01             	xor    eax,0x1
c0024ba1:	84 c0                	test   al,al
c0024ba3:	74 10                	je     c0024bb5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0024ba5:	83 ec 0c             	sub    esp,0xc
c0024ba8:	68 3f bc 02 c0       	push   0xc002bc3f
c0024bad:	e8 f9 4f ff ff       	call   c0019bab <Krnl::panic(char const*)>
c0024bb2:	83 c4 10             	add    esp,0x10
c0024bb5:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0024bb9:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0024bc0:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0024bc4:	7f 65                	jg     c0024c2b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0024bc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024bc9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024bcc:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024bd3:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024bd6:	01 ca                	add    edx,ecx
c0024bd8:	83 c2 54             	add    edx,0x54
c0024bdb:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0024bdf:	85 c0                	test   eax,eax
c0024be1:	75 43                	jne    c0024c26 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0024be3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024be6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024be9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024bf0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024bf3:	01 ca                	add    edx,ecx
c0024bf5:	8d 4a 54             	lea    ecx,[edx+0x54]
c0024bf8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0024bfb:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0024bff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024c02:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024c05:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024c0c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024c0f:	01 ca                	add    edx,ecx
c0024c11:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0024c17:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0024c1a:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0024c1e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024c21:	83 e8 20             	sub    eax,0x20
c0024c24:	eb 1a                	jmp    c0024c40 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0024c26:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0024c29:	eb 95                	jmp    c0024bc0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0024c2b:	83 ec 0c             	sub    esp,0xc
c0024c2e:	68 4c bc 02 c0       	push   0xc002bc4c
c0024c33:	e8 73 4f ff ff       	call   c0019bab <Krnl::panic(char const*)>
c0024c38:	83 c4 10             	add    esp,0x10
c0024c3b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024c40:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024c43:	5b                   	pop    ebx
c0024c44:	5e                   	pop    esi
c0024c45:	5f                   	pop    edi
c0024c46:	5d                   	pop    ebp
c0024c47:	c3                   	ret    

c0024c48 <PIC::disable()>:
c0024c48:	55                   	push   ebp
c0024c49:	89 e5                	mov    ebp,esp
c0024c4b:	83 ec 10             	sub    esp,0x10
c0024c4e:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0024c54:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0024c58:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024c5b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024c5f:	ee                   	out    dx,al
c0024c60:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0024c66:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0024c6a:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0024c6d:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0024c71:	ee                   	out    dx,al
c0024c72:	90                   	nop
c0024c73:	c9                   	leave  
c0024c74:	c3                   	ret    
c0024c75:	90                   	nop

c0024c76 <PIC::close(int, int, void*)>:
c0024c76:	55                   	push   ebp
c0024c77:	89 e5                	mov    ebp,esp
c0024c79:	83 ec 08             	sub    esp,0x8
c0024c7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024c7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c81:	83 c0 3c             	add    eax,0x3c
c0024c84:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c86:	83 ec 0c             	sub    esp,0xc
c0024c89:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024c8c:	ff d0                	call   eax
c0024c8e:	83 c4 10             	add    esp,0x10
c0024c91:	b8 00 00 00 00       	mov    eax,0x0
c0024c96:	c9                   	leave  
c0024c97:	c3                   	ret    

c0024c98 <PIC::PIC()>:
c0024c98:	83 ec 0c             	sub    esp,0xc
c0024c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c9f:	83 ec 08             	sub    esp,0x8
c0024ca2:	68 f8 bc 02 c0       	push   0xc002bcf8
c0024ca7:	50                   	push   eax
c0024ca8:	e8 9d f9 fe ff       	call   c001464a <InterruptController::InterruptController(char const*)>
c0024cad:	83 c4 10             	add    esp,0x10
c0024cb0:	ba 24 bd 02 c0       	mov    edx,0xc002bd24
c0024cb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cb9:	89 10                	mov    DWORD PTR [eax],edx
c0024cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cbf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024cc5:	0f b6 d0             	movzx  edx,al
c0024cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ccc:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0024cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cd7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024cdd:	0f b6 d0             	movzx  edx,al
c0024ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ce4:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0024ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ced:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024cf3:	8d 50 01             	lea    edx,[eax+0x1]
c0024cf6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024cfa:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024d00:	0f b6 d0             	movzx  edx,al
c0024d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d07:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024d0b:	83 e1 3f             	and    ecx,0x3f
c0024d0e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d16:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024d1c:	0f b6 d0             	movzx  edx,al
c0024d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d23:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0024d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d2e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024d34:	0f b6 d0             	movzx  edx,al
c0024d37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d3b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0024d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d44:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024d4a:	8d 50 01             	lea    edx,[eax+0x1]
c0024d4d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024d51:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024d57:	0f b6 d0             	movzx  edx,al
c0024d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d5e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024d62:	83 e1 3f             	and    ecx,0x3f
c0024d65:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024d69:	90                   	nop
c0024d6a:	83 c4 0c             	add    esp,0xc
c0024d6d:	c3                   	ret    

c0024d6e <PIC::ioWait()>:
c0024d6e:	eb 00                	jmp    c0024d70 <PIC::ioWait()+0x2>
c0024d70:	eb 00                	jmp    c0024d72 <PIC::ioWait()+0x4>
c0024d72:	90                   	nop
c0024d73:	c3                   	ret    

c0024d74 <PIC::getIRQReg(int)>:
c0024d74:	55                   	push   ebp
c0024d75:	89 e5                	mov    ebp,esp
c0024d77:	83 ec 10             	sub    esp,0x10
c0024d7a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024d7d:	0f b6 c0             	movzx  eax,al
c0024d80:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024d86:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0024d89:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024d8c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024d90:	ee                   	out    dx,al
c0024d91:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024d94:	0f b6 c0             	movzx  eax,al
c0024d97:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024d9d:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0024da0:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024da3:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024da7:	ee                   	out    dx,al
c0024da8:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0024dae:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0024db2:	89 c2                	mov    edx,eax
c0024db4:	ec                   	in     al,dx
c0024db5:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0024db8:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024dbb:	0f b6 c0             	movzx  eax,al
c0024dbe:	c1 e0 08             	shl    eax,0x8
c0024dc1:	89 c1                	mov    ecx,eax
c0024dc3:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0024dc9:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0024dcd:	89 c2                	mov    edx,eax
c0024dcf:	ec                   	in     al,dx
c0024dd0:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0024dd3:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0024dd6:	0f b6 c0             	movzx  eax,al
c0024dd9:	09 c8                	or     eax,ecx
c0024ddb:	c9                   	leave  
c0024ddc:	c3                   	ret    
c0024ddd:	90                   	nop

c0024dde <PIC::eoi(unsigned char)>:
c0024dde:	55                   	push   ebp
c0024ddf:	89 e5                	mov    ebp,esp
c0024de1:	83 ec 14             	sub    esp,0x14
c0024de4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024de7:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0024dea:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024dee:	75 1e                	jne    c0024e0e <PIC::eoi(unsigned char)+0x30>
c0024df0:	6a 0b                	push   0xb
c0024df2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024df5:	e8 7a ff ff ff       	call   c0024d74 <PIC::getIRQReg(int)>
c0024dfa:	83 c4 08             	add    esp,0x8
c0024dfd:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0024e01:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0024e05:	25 80 00 00 00       	and    eax,0x80
c0024e0a:	85 c0                	test   eax,eax
c0024e0c:	74 5f                	je     c0024e6d <PIC::eoi(unsigned char)+0x8f>
c0024e0e:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0024e12:	75 2d                	jne    c0024e41 <PIC::eoi(unsigned char)+0x63>
c0024e14:	6a 0b                	push   0xb
c0024e16:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024e19:	e8 56 ff ff ff       	call   c0024d74 <PIC::getIRQReg(int)>
c0024e1e:	83 c4 08             	add    esp,0x8
c0024e21:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0024e25:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024e28:	66 85 c0             	test   ax,ax
c0024e2b:	78 14                	js     c0024e41 <PIC::eoi(unsigned char)+0x63>
c0024e2d:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0024e33:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0024e37:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024e3a:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024e3e:	ee                   	out    dx,al
c0024e3f:	eb 2d                	jmp    c0024e6e <PIC::eoi(unsigned char)+0x90>
c0024e41:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024e45:	76 12                	jbe    c0024e59 <PIC::eoi(unsigned char)+0x7b>
c0024e47:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024e4d:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0024e51:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024e54:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024e58:	ee                   	out    dx,al
c0024e59:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024e5f:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0024e63:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024e66:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024e6a:	ee                   	out    dx,al
c0024e6b:	eb 01                	jmp    c0024e6e <PIC::eoi(unsigned char)+0x90>
c0024e6d:	90                   	nop
c0024e6e:	c9                   	leave  
c0024e6f:	c3                   	ret    

c0024e70 <PIC::remap()>:
c0024e70:	55                   	push   ebp
c0024e71:	89 e5                	mov    ebp,esp
c0024e73:	83 ec 48             	sub    esp,0x48
c0024e76:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0024e7d:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0024e84:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0024e8a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0024e8d:	89 c2                	mov    edx,eax
c0024e8f:	ec                   	in     al,dx
c0024e90:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0024e93:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0024e96:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0024e99:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0024e9f:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0024ea2:	89 c2                	mov    edx,eax
c0024ea4:	ec                   	in     al,dx
c0024ea5:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0024ea8:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0024eab:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0024eae:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0024eb4:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0024eb8:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0024ebb:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0024ebe:	ee                   	out    dx,al
c0024ebf:	83 ec 0c             	sub    esp,0xc
c0024ec2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ec5:	e8 a4 fe ff ff       	call   c0024d6e <PIC::ioWait()>
c0024eca:	83 c4 10             	add    esp,0x10
c0024ecd:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0024ed3:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0024ed7:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0024eda:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024edd:	ee                   	out    dx,al
c0024ede:	83 ec 0c             	sub    esp,0xc
c0024ee1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ee4:	e8 85 fe ff ff       	call   c0024d6e <PIC::ioWait()>
c0024ee9:	83 c4 10             	add    esp,0x10
c0024eec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024eef:	0f b6 c0             	movzx  eax,al
c0024ef2:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0024ef8:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0024efb:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0024efe:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0024f01:	ee                   	out    dx,al
c0024f02:	83 ec 0c             	sub    esp,0xc
c0024f05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f08:	e8 61 fe ff ff       	call   c0024d6e <PIC::ioWait()>
c0024f0d:	83 c4 10             	add    esp,0x10
c0024f10:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024f13:	0f b6 c0             	movzx  eax,al
c0024f16:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0024f1c:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0024f1f:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0024f22:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024f25:	ee                   	out    dx,al
c0024f26:	83 ec 0c             	sub    esp,0xc
c0024f29:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f2c:	e8 3d fe ff ff       	call   c0024d6e <PIC::ioWait()>
c0024f31:	83 c4 10             	add    esp,0x10
c0024f34:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0024f3a:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0024f3e:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0024f41:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0024f44:	ee                   	out    dx,al
c0024f45:	83 ec 0c             	sub    esp,0xc
c0024f48:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f4b:	e8 1e fe ff ff       	call   c0024d6e <PIC::ioWait()>
c0024f50:	83 c4 10             	add    esp,0x10
c0024f53:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0024f59:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0024f5d:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0024f60:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024f63:	ee                   	out    dx,al
c0024f64:	83 ec 0c             	sub    esp,0xc
c0024f67:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f6a:	e8 ff fd ff ff       	call   c0024d6e <PIC::ioWait()>
c0024f6f:	83 c4 10             	add    esp,0x10
c0024f72:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0024f78:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0024f7c:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0024f7f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024f82:	ee                   	out    dx,al
c0024f83:	83 ec 0c             	sub    esp,0xc
c0024f86:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f89:	e8 e0 fd ff ff       	call   c0024d6e <PIC::ioWait()>
c0024f8e:	83 c4 10             	add    esp,0x10
c0024f91:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0024f97:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0024f9b:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0024f9e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024fa1:	ee                   	out    dx,al
c0024fa2:	83 ec 0c             	sub    esp,0xc
c0024fa5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024fa8:	e8 c1 fd ff ff       	call   c0024d6e <PIC::ioWait()>
c0024fad:	83 c4 10             	add    esp,0x10
c0024fb0:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0024fb4:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0024fba:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0024fbd:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0024fc0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024fc3:	ee                   	out    dx,al
c0024fc4:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0024fc8:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0024fce:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0024fd1:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0024fd4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024fd7:	ee                   	out    dx,al
c0024fd8:	90                   	nop
c0024fd9:	c9                   	leave  
c0024fda:	c3                   	ret    
c0024fdb:	90                   	nop

c0024fdc <PIC::open(int, int, void*)>:
c0024fdc:	55                   	push   ebp
c0024fdd:	89 e5                	mov    ebp,esp
c0024fdf:	83 ec 18             	sub    esp,0x18
c0024fe2:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0024fe8:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0024fec:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024fef:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024ff3:	ee                   	out    dx,al
c0024ff4:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0024ffa:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0024ffe:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025001:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025005:	ee                   	out    dx,al
c0025006:	83 ec 0c             	sub    esp,0xc
c0025009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002500c:	e8 5f fe ff ff       	call   c0024e70 <PIC::remap()>
c0025011:	83 c4 10             	add    esp,0x10
c0025014:	b8 00 00 00 00       	mov    eax,0x0
c0025019:	c9                   	leave  
c002501a:	c3                   	ret    
c002501b:	90                   	nop

c002501c <APICTimer::close(int, int, void*)>:
c002501c:	b8 00 00 00 00       	mov    eax,0x0
c0025021:	c3                   	ret    

c0025022 <apicTimerHandler(regs*, void*)>:
c0025022:	83 ec 0c             	sub    esp,0xc
c0025025:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025029:	8b 00                	mov    eax,DWORD PTR [eax]
c002502b:	99                   	cdq    
c002502c:	52                   	push   edx
c002502d:	50                   	push   eax
c002502e:	6a 00                	push   0x0
c0025030:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025035:	e8 92 07 00 00       	call   c00257cc <__udivdi3>
c002503a:	83 c4 10             	add    esp,0x10
c002503d:	83 ec 08             	sub    esp,0x8
c0025040:	52                   	push   edx
c0025041:	50                   	push   eax
c0025042:	e8 02 15 ff ff       	call   c0016549 <timerHandler(unsigned long long)>
c0025047:	83 c4 10             	add    esp,0x10
c002504a:	90                   	nop
c002504b:	83 c4 0c             	add    esp,0xc
c002504e:	c3                   	ret    
c002504f:	90                   	nop

c0025050 <APICTimer::write(int)>:
c0025050:	53                   	push   ebx
c0025051:	83 ec 28             	sub    esp,0x28
c0025054:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025058:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002505c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025062:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0025067:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002506d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025073:	83 ec 0c             	sub    esp,0xc
c0025076:	50                   	push   eax
c0025077:	e8 de f4 ff ff       	call   c002455a <APIC::getBase()>
c002507c:	83 c4 10             	add    esp,0x10
c002507f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025083:	a1 50 d5 02 c0       	mov    eax,ds:0xc002d550
c0025088:	8b 15 54 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d554
c002508e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025092:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025096:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002509a:	05 e0 03 00 00       	add    eax,0x3e0
c002509f:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00250a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00250a9:	05 80 03 00 00       	add    eax,0x380
c00250ae:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00250b4:	fb                   	sti    
c00250b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00250bd:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00250c2:	83 d2 00             	adc    edx,0x0
c00250c5:	89 c1                	mov    ecx,eax
c00250c7:	89 d3                	mov    ebx,edx
c00250c9:	a1 50 d5 02 c0       	mov    eax,ds:0xc002d550
c00250ce:	8b 15 54 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d554
c00250d4:	39 c8                	cmp    eax,ecx
c00250d6:	89 d0                	mov    eax,edx
c00250d8:	19 d8                	sbb    eax,ebx
c00250da:	73 02                	jae    c00250de <APICTimer::write(int)+0x8e>
c00250dc:	eb d7                	jmp    c00250b5 <APICTimer::write(int)+0x65>
c00250de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00250e2:	05 20 03 00 00       	add    eax,0x320
c00250e7:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00250ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00250f1:	05 90 03 00 00       	add    eax,0x390
c00250f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00250f8:	f7 d0                	not    eax
c00250fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00250fe:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025102:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025106:	ba 00 00 00 00       	mov    edx,0x0
c002510b:	f7 f3                	div    ebx
c002510d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025111:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025115:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002511b:	0d 00 00 02 00       	or     eax,0x20000
c0025120:	89 c2                	mov    edx,eax
c0025122:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025126:	05 20 03 00 00       	add    eax,0x320
c002512b:	89 10                	mov    DWORD PTR [eax],edx
c002512d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025131:	05 e0 03 00 00       	add    eax,0x3e0
c0025136:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002513c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025140:	05 80 03 00 00       	add    eax,0x380
c0025145:	89 c2                	mov    edx,eax
c0025147:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002514b:	89 02                	mov    DWORD PTR [edx],eax
c002514d:	90                   	nop
c002514e:	83 c4 28             	add    esp,0x28
c0025151:	5b                   	pop    ebx
c0025152:	c3                   	ret    
c0025153:	90                   	nop

c0025154 <APICTimer::open(int, int, void*)>:
c0025154:	57                   	push   edi
c0025155:	56                   	push   esi
c0025156:	53                   	push   ebx
c0025157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002515b:	8b 00                	mov    eax,DWORD PTR [eax]
c002515d:	83 c0 24             	add    eax,0x24
c0025160:	8b 00                	mov    eax,DWORD PTR [eax]
c0025162:	83 ec 08             	sub    esp,0x8
c0025165:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025169:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002516d:	ff d0                	call   eax
c002516f:	83 c4 10             	add    esp,0x10
c0025172:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0025177:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002517d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025183:	83 ec 0c             	sub    esp,0xc
c0025186:	50                   	push   eax
c0025187:	e8 ce f3 ff ff       	call   c002455a <APIC::getBase()>
c002518c:	83 c4 10             	add    esp,0x10
c002518f:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025199:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002519f:	0f b6 f8             	movzx  edi,al
c00251a2:	89 d0                	mov    eax,edx
c00251a4:	ba 00 00 00 00       	mov    edx,0x0
c00251a9:	89 c1                	mov    ecx,eax
c00251ab:	80 e5 ff             	and    ch,0xff
c00251ae:	89 cb                	mov    ebx,ecx
c00251b0:	0f b6 f2             	movzx  esi,dl
c00251b3:	89 d8                	mov    eax,ebx
c00251b5:	89 f2                	mov    edx,esi
c00251b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00251bb:	8d 5f 08             	lea    ebx,[edi+0x8]
c00251be:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00251c2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00251c6:	83 e0 00             	and    eax,0x0
c00251c9:	09 d0                	or     eax,edx
c00251cb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00251cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251d3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00251d9:	8d 50 01             	lea    edx,[eax+0x1]
c00251dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00251e0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00251e6:	0f b6 d0             	movzx  edx,al
c00251e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251ed:	83 c2 08             	add    edx,0x8
c00251f0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00251f4:	0f b6 c9             	movzx  ecx,cl
c00251f7:	81 c9 00 00 01 00    	or     ecx,0x10000
c00251fd:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025205:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025209:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002520f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025213:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025217:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002521d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025221:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0025227:	83 ec 0c             	sub    esp,0xc
c002522a:	51                   	push   ecx
c002522b:	6a 01                	push   0x1
c002522d:	68 22 50 02 c0       	push   0xc0025022
c0025232:	52                   	push   edx
c0025233:	50                   	push   eax
c0025234:	e8 4d ea fe ff       	call   c0013c86 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025239:	83 c4 20             	add    esp,0x20
c002523c:	89 c2                	mov    edx,eax
c002523e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025242:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025248:	b8 00 00 00 00       	mov    eax,0x0
c002524d:	5b                   	pop    ebx
c002524e:	5e                   	pop    esi
c002524f:	5f                   	pop    edi
c0025250:	c3                   	ret    
c0025251:	90                   	nop

c0025252 <APICTimer::APICTimer()>:
c0025252:	83 ec 0c             	sub    esp,0xc
c0025255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025259:	83 ec 08             	sub    esp,0x8
c002525c:	68 64 bd 02 c0       	push   0xc002bd64
c0025261:	50                   	push   eax
c0025262:	e8 53 12 ff ff       	call   c00164ba <Timer::Timer(char const*)>
c0025267:	83 c4 10             	add    esp,0x10
c002526a:	ba 78 bd 02 c0       	mov    edx,0xc002bd78
c002526f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025273:	89 10                	mov    DWORD PTR [eax],edx
c0025275:	90                   	nop
c0025276:	83 c4 0c             	add    esp,0xc
c0025279:	c3                   	ret    

c002527a <PIT::write(int)>:
c002527a:	83 ec 10             	sub    esp,0x10
c002527d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025281:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025285:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002528b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002528f:	a3 64 f2 02 c0       	mov    ds:0xc002f264,eax
c0025294:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0025299:	99                   	cdq    
c002529a:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002529e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00252a2:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00252a9:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00252ae:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00252b2:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00252b7:	ee                   	out    dx,al
c00252b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00252bc:	0f b6 c0             	movzx  eax,al
c00252bf:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00252c6:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00252ca:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00252ce:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00252d3:	ee                   	out    dx,al
c00252d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00252d8:	c1 f8 08             	sar    eax,0x8
c00252db:	0f b6 c0             	movzx  eax,al
c00252de:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00252e5:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00252e9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00252ed:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00252f2:	ee                   	out    dx,al
c00252f3:	90                   	nop
c00252f4:	83 c4 10             	add    esp,0x10
c00252f7:	c3                   	ret    

c00252f8 <pitHandler(regs*, void*)>:
c00252f8:	83 ec 0c             	sub    esp,0xc
c00252fb:	a1 64 f2 02 c0       	mov    eax,ds:0xc002f264
c0025300:	99                   	cdq    
c0025301:	52                   	push   edx
c0025302:	50                   	push   eax
c0025303:	6a 00                	push   0x0
c0025305:	68 00 ca 9a 3b       	push   0x3b9aca00
c002530a:	e8 bd 04 00 00       	call   c00257cc <__udivdi3>
c002530f:	83 c4 10             	add    esp,0x10
c0025312:	83 ec 08             	sub    esp,0x8
c0025315:	52                   	push   edx
c0025316:	50                   	push   eax
c0025317:	e8 2d 12 ff ff       	call   c0016549 <timerHandler(unsigned long long)>
c002531c:	83 c4 10             	add    esp,0x10
c002531f:	90                   	nop
c0025320:	83 c4 0c             	add    esp,0xc
c0025323:	c3                   	ret    

c0025324 <PIT::open(int, int, void*)>:
c0025324:	83 ec 0c             	sub    esp,0xc
c0025327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002532b:	8b 00                	mov    eax,DWORD PTR [eax]
c002532d:	83 c0 24             	add    eax,0x24
c0025330:	8b 00                	mov    eax,DWORD PTR [eax]
c0025332:	83 ec 08             	sub    esp,0x8
c0025335:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025339:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002533d:	ff d0                	call   eax
c002533f:	83 c4 10             	add    esp,0x10
c0025342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025346:	83 ec 0c             	sub    esp,0xc
c0025349:	6a 00                	push   0x0
c002534b:	6a 01                	push   0x1
c002534d:	68 f8 52 02 c0       	push   0xc00252f8
c0025352:	6a 00                	push   0x0
c0025354:	50                   	push   eax
c0025355:	e8 2c e9 fe ff       	call   c0013c86 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002535a:	83 c4 20             	add    esp,0x20
c002535d:	89 c2                	mov    edx,eax
c002535f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025363:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025369:	b8 00 00 00 00       	mov    eax,0x0
c002536e:	83 c4 0c             	add    esp,0xc
c0025371:	c3                   	ret    

c0025372 <PIT::close(int, int, void*)>:
c0025372:	83 ec 0c             	sub    esp,0xc
c0025375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025379:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0025383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025387:	6a 01                	push   0x1
c0025389:	68 f8 52 02 c0       	push   0xc00252f8
c002538e:	6a 00                	push   0x0
c0025390:	50                   	push   eax
c0025391:	e8 2e e9 fe ff       	call   c0013cc4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0025396:	83 c4 10             	add    esp,0x10
c0025399:	b8 00 00 00 00       	mov    eax,0x0
c002539e:	83 c4 0c             	add    esp,0xc
c00253a1:	c3                   	ret    

c00253a2 <PIT::PIT()>:
c00253a2:	83 ec 0c             	sub    esp,0xc
c00253a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253a9:	83 ec 08             	sub    esp,0x8
c00253ac:	68 a0 bd 02 c0       	push   0xc002bda0
c00253b1:	50                   	push   eax
c00253b2:	e8 03 11 ff ff       	call   c00164ba <Timer::Timer(char const*)>
c00253b7:	83 c4 10             	add    esp,0x10
c00253ba:	ba c8 bd 02 c0       	mov    edx,0xc002bdc8
c00253bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253c3:	89 10                	mov    DWORD PTR [eax],edx
c00253c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253c9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00253cf:	0f b6 d0             	movzx  edx,al
c00253d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253d6:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00253dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253e1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00253e7:	0f b6 d0             	movzx  edx,al
c00253ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253ee:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00253f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253f7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00253fd:	8d 50 01             	lea    edx,[eax+0x1]
c0025400:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025404:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002540a:	0f b6 d0             	movzx  edx,al
c002540d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025411:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025415:	83 e1 3f             	and    ecx,0x3f
c0025418:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002541c:	90                   	nop
c002541d:	83 c4 0c             	add    esp,0xc
c0025420:	c3                   	ret    
c0025421:	66 90                	xchg   ax,ax
c0025423:	66 90                	xchg   ax,ax
c0025425:	66 90                	xchg   ax,ax
c0025427:	66 90                	xchg   ax,ax
c0025429:	66 90                	xchg   ax,ax
c002542b:	66 90                	xchg   ax,ax
c002542d:	66 90                	xchg   ax,ax
c002542f:	90                   	nop

c0025430 <avxDetect>:
c0025430:	b8 00 00 00 00       	mov    eax,0x0
c0025435:	c3                   	ret    

c0025436 <avxSave>:
c0025436:	c3                   	ret    

c0025437 <avxLoad>:
c0025437:	c3                   	ret    

c0025438 <avxInit>:
c0025438:	c3                   	ret    

c0025439 <avxClose>:
c0025439:	c3                   	ret    

c002543a <wouldSheSayYes>:
c002543a:	c3                   	ret    
c002543b:	49                   	dec    ecx
c002543c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0025440:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0025444:	75 20                	jne    c0025466 <sseDetect.noSSE+0x1>
c0025446:	4e                   	dec    esi
c0025447:	79 61                	jns    c00254aa <x87Detect+0x14>
c0025449:	68 2e 2e 2e 00       	push   0x2e2e2e
c002544e:	66 90                	xchg   ax,ax

c0025450 <absolutelyNoChanceInHell>:
c0025450:	b8 01 00 00 00       	mov    eax,0x1
c0025455:	0f a2                	cpuid  
c0025457:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002545d:	74 06                	je     c0025465 <sseDetect.noSSE>
c002545f:	b8 01 00 00 00       	mov    eax,0x1
c0025464:	c3                   	ret    

c0025465 <sseDetect.noSSE>:
c0025465:	31 c0                	xor    eax,eax
c0025467:	c3                   	ret    

c0025468 <sseSave>:
c0025468:	0f ae 44 24 08       	fxsave [esp+0x8]
c002546d:	c3                   	ret    

c002546e <sseLoad>:
c002546e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0025473:	c3                   	ret    

c0025474 <sseInit>:
c0025474:	e8 43 00 00 00       	call   c00254bc <x87Init>
c0025479:	0f 20 e0             	mov    eax,cr4
c002547c:	66 0d 00 06          	or     ax,0x600
c0025480:	0f 22 e0             	mov    cr4,eax
c0025483:	c3                   	ret    

c0025484 <sseClose>:
c0025484:	c3                   	ret    
c0025485:	66 90                	xchg   ax,ax
c0025487:	66 90                	xchg   ax,ax
c0025489:	66 90                	xchg   ax,ax
c002548b:	66 90                	xchg   ax,ax
c002548d:	66 90                	xchg   ax,ax
c002548f:	90                   	nop

c0025490 <value_37F>:
c0025490:	7f 03                	jg     c0025495 <value_37A+0x1>

c0025492 <value_37E>:
c0025492:	7e 03                	jle    c0025497 <x87Detect+0x1>

c0025494 <value_37A>:
c0025494:	7a 03                	jp     c0025499 <x87Detect+0x3>

c0025496 <x87Detect>:
c0025496:	b8 01 00 00 00       	mov    eax,0x1
c002549b:	0f a2                	cpuid  
c002549d:	f7 c2 01 00 00 00    	test   edx,0x1
c00254a3:	74 06                	je     c00254ab <x87Detect.nox87>
c00254a5:	b8 01 00 00 00       	mov    eax,0x1
c00254aa:	c3                   	ret    

c00254ab <x87Detect.nox87>:
c00254ab:	b8 00 00 00 00       	mov    eax,0x0
c00254b0:	c3                   	ret    

c00254b1 <x87Save>:
c00254b1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00254b6:	c3                   	ret    

c00254b7 <x87Load>:
c00254b7:	dd 64 24 08          	frstor [esp+0x8]
c00254bb:	c3                   	ret    

c00254bc <x87Init>:
c00254bc:	9b db e3             	finit  
c00254bf:	0f 20 c0             	mov    eax,cr0
c00254c2:	66 25 fb ff          	and    ax,0xfffb
c00254c6:	66 0d 22 00          	or     ax,0x22
c00254ca:	0f 22 c0             	mov    cr0,eax
c00254cd:	0f 06                	clts   
c00254cf:	d9 2d 94 54 02 c0    	fldcw  WORD PTR ds:0xc0025494
c00254d5:	c3                   	ret    

c00254d6 <x87Close>:
c00254d6:	c3                   	ret    
c00254d7:	90                   	nop

c00254d8 <__do_global_ctors_aux>:
c00254d8:	a1 cc 7f 02 c0       	mov    eax,ds:0xc0027fcc
c00254dd:	83 f8 ff             	cmp    eax,0xffffffff
c00254e0:	74 1a                	je     c00254fc <__do_global_ctors_aux+0x24>
c00254e2:	55                   	push   ebp
c00254e3:	89 e5                	mov    ebp,esp
c00254e5:	53                   	push   ebx
c00254e6:	52                   	push   edx
c00254e7:	bb cc 7f 02 c0       	mov    ebx,0xc0027fcc
c00254ec:	ff d0                	call   eax
c00254ee:	83 eb 04             	sub    ebx,0x4
c00254f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00254f3:	83 f8 ff             	cmp    eax,0xffffffff
c00254f6:	75 f4                	jne    c00254ec <__do_global_ctors_aux+0x14>
c00254f8:	58                   	pop    eax
c00254f9:	5b                   	pop    ebx
c00254fa:	5d                   	pop    ebp
c00254fb:	c3                   	ret    
c00254fc:	c3                   	ret    
c00254fd:	66 90                	xchg   ax,ax
c00254ff:	90                   	nop

c0025500 <__divdi3>:
c0025500:	55                   	push   ebp
c0025501:	57                   	push   edi
c0025502:	56                   	push   esi
c0025503:	53                   	push   ebx
c0025504:	83 ec 1c             	sub    esp,0x1c
c0025507:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002550b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002550f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025512:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025516:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002551a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002551e:	85 db                	test   ebx,ebx
c0025520:	0f 88 8e 00 00 00    	js     c00255b4 <__divdi3+0xb4>
c0025526:	89 dd                	mov    ebp,ebx
c0025528:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0025530:	89 d3                	mov    ebx,edx
c0025532:	85 d2                	test   edx,edx
c0025534:	79 0d                	jns    c0025543 <__divdi3+0x43>
c0025536:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002553a:	f7 d8                	neg    eax
c002553c:	83 d2 00             	adc    edx,0x0
c002553f:	f7 da                	neg    edx
c0025541:	89 d3                	mov    ebx,edx
c0025543:	89 c7                	mov    edi,eax
c0025545:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025548:	85 db                	test   ebx,ebx
c002554a:	75 48                	jne    c0025594 <__divdi3+0x94>
c002554c:	39 ef                	cmp    edi,ebp
c002554e:	76 24                	jbe    c0025574 <__divdi3+0x74>
c0025550:	89 ea                	mov    edx,ebp
c0025552:	f7 f7                	div    edi
c0025554:	89 c1                	mov    ecx,eax
c0025556:	31 f6                	xor    esi,esi
c0025558:	89 c8                	mov    eax,ecx
c002555a:	89 f2                	mov    edx,esi
c002555c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025560:	85 c9                	test   ecx,ecx
c0025562:	74 07                	je     c002556b <__divdi3+0x6b>
c0025564:	f7 d8                	neg    eax
c0025566:	83 d2 00             	adc    edx,0x0
c0025569:	f7 da                	neg    edx
c002556b:	83 c4 1c             	add    esp,0x1c
c002556e:	5b                   	pop    ebx
c002556f:	5e                   	pop    esi
c0025570:	5f                   	pop    edi
c0025571:	5d                   	pop    ebp
c0025572:	c3                   	ret    
c0025573:	90                   	nop
c0025574:	85 ff                	test   edi,edi
c0025576:	75 0b                	jne    c0025583 <__divdi3+0x83>
c0025578:	b8 01 00 00 00       	mov    eax,0x1
c002557d:	31 d2                	xor    edx,edx
c002557f:	f7 f3                	div    ebx
c0025581:	89 c7                	mov    edi,eax
c0025583:	31 d2                	xor    edx,edx
c0025585:	89 e8                	mov    eax,ebp
c0025587:	f7 f7                	div    edi
c0025589:	89 c6                	mov    esi,eax
c002558b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002558e:	f7 f7                	div    edi
c0025590:	89 c1                	mov    ecx,eax
c0025592:	eb c4                	jmp    c0025558 <__divdi3+0x58>
c0025594:	39 eb                	cmp    ebx,ebp
c0025596:	77 3c                	ja     c00255d4 <__divdi3+0xd4>
c0025598:	0f bd f3             	bsr    esi,ebx
c002559b:	83 f6 1f             	xor    esi,0x1f
c002559e:	75 40                	jne    c00255e0 <__divdi3+0xe0>
c00255a0:	39 eb                	cmp    ebx,ebp
c00255a2:	72 09                	jb     c00255ad <__divdi3+0xad>
c00255a4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00255a7:	0f 87 97 00 00 00    	ja     c0025644 <__divdi3+0x144>
c00255ad:	b9 01 00 00 00       	mov    ecx,0x1
c00255b2:	eb a4                	jmp    c0025558 <__divdi3+0x58>
c00255b4:	f7 d9                	neg    ecx
c00255b6:	83 d3 00             	adc    ebx,0x0
c00255b9:	f7 db                	neg    ebx
c00255bb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00255be:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00255c2:	89 dd                	mov    ebp,ebx
c00255c4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00255cc:	e9 5f ff ff ff       	jmp    c0025530 <__divdi3+0x30>
c00255d1:	8d 76 00             	lea    esi,[esi+0x0]
c00255d4:	31 f6                	xor    esi,esi
c00255d6:	31 c9                	xor    ecx,ecx
c00255d8:	e9 7b ff ff ff       	jmp    c0025558 <__divdi3+0x58>
c00255dd:	8d 76 00             	lea    esi,[esi+0x0]
c00255e0:	b8 20 00 00 00       	mov    eax,0x20
c00255e5:	29 f0                	sub    eax,esi
c00255e7:	89 f1                	mov    ecx,esi
c00255e9:	d3 e3                	shl    ebx,cl
c00255eb:	89 fa                	mov    edx,edi
c00255ed:	88 c1                	mov    cl,al
c00255ef:	d3 ea                	shr    edx,cl
c00255f1:	09 da                	or     edx,ebx
c00255f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00255f7:	89 f1                	mov    ecx,esi
c00255f9:	d3 e7                	shl    edi,cl
c00255fb:	89 eb                	mov    ebx,ebp
c00255fd:	88 c1                	mov    cl,al
c00255ff:	d3 eb                	shr    ebx,cl
c0025601:	89 f1                	mov    ecx,esi
c0025603:	d3 e5                	shl    ebp,cl
c0025605:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0025608:	88 c1                	mov    cl,al
c002560a:	d3 ea                	shr    edx,cl
c002560c:	09 d5                	or     ebp,edx
c002560e:	89 e8                	mov    eax,ebp
c0025610:	89 da                	mov    edx,ebx
c0025612:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0025616:	89 d3                	mov    ebx,edx
c0025618:	89 c5                	mov    ebp,eax
c002561a:	f7 e7                	mul    edi
c002561c:	39 d3                	cmp    ebx,edx
c002561e:	72 18                	jb     c0025638 <__divdi3+0x138>
c0025620:	74 0a                	je     c002562c <__divdi3+0x12c>
c0025622:	89 e9                	mov    ecx,ebp
c0025624:	31 f6                	xor    esi,esi
c0025626:	e9 2d ff ff ff       	jmp    c0025558 <__divdi3+0x58>
c002562b:	90                   	nop
c002562c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002562f:	89 f1                	mov    ecx,esi
c0025631:	d3 e7                	shl    edi,cl
c0025633:	39 c7                	cmp    edi,eax
c0025635:	73 eb                	jae    c0025622 <__divdi3+0x122>
c0025637:	90                   	nop
c0025638:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002563b:	31 f6                	xor    esi,esi
c002563d:	e9 16 ff ff ff       	jmp    c0025558 <__divdi3+0x58>
c0025642:	66 90                	xchg   ax,ax
c0025644:	31 c9                	xor    ecx,ecx
c0025646:	e9 0d ff ff ff       	jmp    c0025558 <__divdi3+0x58>
c002564b:	90                   	nop

c002564c <__moddi3>:
c002564c:	55                   	push   ebp
c002564d:	57                   	push   edi
c002564e:	56                   	push   esi
c002564f:	53                   	push   ebx
c0025650:	83 ec 2c             	sub    esp,0x2c
c0025653:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0025657:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002565b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002565f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0025663:	85 db                	test   ebx,ebx
c0025665:	0f 88 85 00 00 00    	js     c00256f0 <__moddi3+0xa4>
c002566b:	89 de                	mov    esi,ebx
c002566d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0025675:	89 d7                	mov    edi,edx
c0025677:	85 d2                	test   edx,edx
c0025679:	79 09                	jns    c0025684 <__moddi3+0x38>
c002567b:	f7 d8                	neg    eax
c002567d:	83 d2 00             	adc    edx,0x0
c0025680:	f7 da                	neg    edx
c0025682:	89 d7                	mov    edi,edx
c0025684:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025688:	89 cd                	mov    ebp,ecx
c002568a:	85 ff                	test   edi,edi
c002568c:	75 52                	jne    c00256e0 <__moddi3+0x94>
c002568e:	89 c3                	mov    ebx,eax
c0025690:	39 f0                	cmp    eax,esi
c0025692:	76 24                	jbe    c00256b8 <__moddi3+0x6c>
c0025694:	89 c8                	mov    eax,ecx
c0025696:	89 f2                	mov    edx,esi
c0025698:	f7 f3                	div    ebx
c002569a:	89 d6                	mov    esi,edx
c002569c:	89 f0                	mov    eax,esi
c002569e:	31 d2                	xor    edx,edx
c00256a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00256a4:	85 c9                	test   ecx,ecx
c00256a6:	74 07                	je     c00256af <__moddi3+0x63>
c00256a8:	f7 d8                	neg    eax
c00256aa:	83 d2 00             	adc    edx,0x0
c00256ad:	f7 da                	neg    edx
c00256af:	83 c4 2c             	add    esp,0x2c
c00256b2:	5b                   	pop    ebx
c00256b3:	5e                   	pop    esi
c00256b4:	5f                   	pop    edi
c00256b5:	5d                   	pop    ebp
c00256b6:	c3                   	ret    
c00256b7:	90                   	nop
c00256b8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00256bc:	85 db                	test   ebx,ebx
c00256be:	75 0d                	jne    c00256cd <__moddi3+0x81>
c00256c0:	b8 01 00 00 00       	mov    eax,0x1
c00256c5:	31 d2                	xor    edx,edx
c00256c7:	f7 f7                	div    edi
c00256c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00256cd:	89 f0                	mov    eax,esi
c00256cf:	31 d2                	xor    edx,edx
c00256d1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00256d5:	f7 f7                	div    edi
c00256d7:	89 e8                	mov    eax,ebp
c00256d9:	f7 f7                	div    edi
c00256db:	89 d6                	mov    esi,edx
c00256dd:	eb bd                	jmp    c002569c <__moddi3+0x50>
c00256df:	90                   	nop
c00256e0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00256e4:	39 f7                	cmp    edi,esi
c00256e6:	76 20                	jbe    c0025708 <__moddi3+0xbc>
c00256e8:	89 c8                	mov    eax,ecx
c00256ea:	89 f2                	mov    edx,esi
c00256ec:	eb b2                	jmp    c00256a0 <__moddi3+0x54>
c00256ee:	66 90                	xchg   ax,ax
c00256f0:	f7 d9                	neg    ecx
c00256f2:	83 d3 00             	adc    ebx,0x0
c00256f5:	f7 db                	neg    ebx
c00256f7:	89 de                	mov    esi,ebx
c00256f9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0025701:	e9 6f ff ff ff       	jmp    c0025675 <__moddi3+0x29>
c0025706:	66 90                	xchg   ax,ax
c0025708:	0f bd c7             	bsr    eax,edi
c002570b:	83 f0 1f             	xor    eax,0x1f
c002570e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025712:	75 24                	jne    c0025738 <__moddi3+0xec>
c0025714:	39 f7                	cmp    edi,esi
c0025716:	72 06                	jb     c002571e <__moddi3+0xd2>
c0025718:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002571c:	77 0c                	ja     c002572a <__moddi3+0xde>
c002571e:	89 e9                	mov    ecx,ebp
c0025720:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0025724:	19 fe                	sbb    esi,edi
c0025726:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002572a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002572e:	89 f2                	mov    edx,esi
c0025730:	e9 6b ff ff ff       	jmp    c00256a0 <__moddi3+0x54>
c0025735:	8d 76 00             	lea    esi,[esi+0x0]
c0025738:	b8 20 00 00 00       	mov    eax,0x20
c002573d:	89 c2                	mov    edx,eax
c002573f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025743:	29 da                	sub    edx,ebx
c0025745:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025749:	88 d9                	mov    cl,bl
c002574b:	d3 e7                	shl    edi,cl
c002574d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025751:	88 d1                	mov    cl,dl
c0025753:	d3 e8                	shr    eax,cl
c0025755:	09 c7                	or     edi,eax
c0025757:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002575b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002575f:	89 d8                	mov    eax,ebx
c0025761:	88 d9                	mov    cl,bl
c0025763:	d3 e7                	shl    edi,cl
c0025765:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0025769:	89 f3                	mov    ebx,esi
c002576b:	88 d1                	mov    cl,dl
c002576d:	d3 eb                	shr    ebx,cl
c002576f:	89 c7                	mov    edi,eax
c0025771:	88 c1                	mov    cl,al
c0025773:	d3 e6                	shl    esi,cl
c0025775:	89 e8                	mov    eax,ebp
c0025777:	88 d1                	mov    cl,dl
c0025779:	d3 e8                	shr    eax,cl
c002577b:	09 f0                	or     eax,esi
c002577d:	89 f9                	mov    ecx,edi
c002577f:	d3 e5                	shl    ebp,cl
c0025781:	89 da                	mov    edx,ebx
c0025783:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0025787:	89 d3                	mov    ebx,edx
c0025789:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002578d:	89 c6                	mov    esi,eax
c002578f:	89 d1                	mov    ecx,edx
c0025791:	39 d3                	cmp    ebx,edx
c0025793:	72 27                	jb     c00257bc <__moddi3+0x170>
c0025795:	74 21                	je     c00257b8 <__moddi3+0x16c>
c0025797:	29 f5                	sub    ebp,esi
c0025799:	19 cb                	sbb    ebx,ecx
c002579b:	89 de                	mov    esi,ebx
c002579d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00257a1:	d3 e6                	shl    esi,cl
c00257a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00257a7:	89 f9                	mov    ecx,edi
c00257a9:	d3 ed                	shr    ebp,cl
c00257ab:	09 ee                	or     esi,ebp
c00257ad:	89 f0                	mov    eax,esi
c00257af:	d3 eb                	shr    ebx,cl
c00257b1:	89 da                	mov    edx,ebx
c00257b3:	e9 e8 fe ff ff       	jmp    c00256a0 <__moddi3+0x54>
c00257b8:	39 c5                	cmp    ebp,eax
c00257ba:	73 db                	jae    c0025797 <__moddi3+0x14b>
c00257bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00257c0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00257c4:	89 d1                	mov    ecx,edx
c00257c6:	89 c6                	mov    esi,eax
c00257c8:	eb cd                	jmp    c0025797 <__moddi3+0x14b>
c00257ca:	66 90                	xchg   ax,ax

c00257cc <__udivdi3>:
c00257cc:	55                   	push   ebp
c00257cd:	57                   	push   edi
c00257ce:	56                   	push   esi
c00257cf:	53                   	push   ebx
c00257d0:	83 ec 1c             	sub    esp,0x1c
c00257d3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00257d7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00257db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00257df:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00257e3:	85 d2                	test   edx,edx
c00257e5:	75 41                	jne    c0025828 <__udivdi3+0x5c>
c00257e7:	39 f7                	cmp    edi,esi
c00257e9:	76 15                	jbe    c0025800 <__udivdi3+0x34>
c00257eb:	89 e8                	mov    eax,ebp
c00257ed:	89 f2                	mov    edx,esi
c00257ef:	f7 f7                	div    edi
c00257f1:	31 db                	xor    ebx,ebx
c00257f3:	89 da                	mov    edx,ebx
c00257f5:	83 c4 1c             	add    esp,0x1c
c00257f8:	5b                   	pop    ebx
c00257f9:	5e                   	pop    esi
c00257fa:	5f                   	pop    edi
c00257fb:	5d                   	pop    ebp
c00257fc:	c3                   	ret    
c00257fd:	8d 76 00             	lea    esi,[esi+0x0]
c0025800:	89 f9                	mov    ecx,edi
c0025802:	85 ff                	test   edi,edi
c0025804:	75 0b                	jne    c0025811 <__udivdi3+0x45>
c0025806:	b8 01 00 00 00       	mov    eax,0x1
c002580b:	31 d2                	xor    edx,edx
c002580d:	f7 f7                	div    edi
c002580f:	89 c1                	mov    ecx,eax
c0025811:	31 d2                	xor    edx,edx
c0025813:	89 f0                	mov    eax,esi
c0025815:	f7 f1                	div    ecx
c0025817:	89 c3                	mov    ebx,eax
c0025819:	89 e8                	mov    eax,ebp
c002581b:	f7 f1                	div    ecx
c002581d:	89 da                	mov    edx,ebx
c002581f:	83 c4 1c             	add    esp,0x1c
c0025822:	5b                   	pop    ebx
c0025823:	5e                   	pop    esi
c0025824:	5f                   	pop    edi
c0025825:	5d                   	pop    ebp
c0025826:	c3                   	ret    
c0025827:	90                   	nop
c0025828:	39 f2                	cmp    edx,esi
c002582a:	77 1c                	ja     c0025848 <__udivdi3+0x7c>
c002582c:	0f bd da             	bsr    ebx,edx
c002582f:	83 f3 1f             	xor    ebx,0x1f
c0025832:	75 24                	jne    c0025858 <__udivdi3+0x8c>
c0025834:	39 f2                	cmp    edx,esi
c0025836:	72 08                	jb     c0025840 <__udivdi3+0x74>
c0025838:	39 ef                	cmp    edi,ebp
c002583a:	0f 87 84 00 00 00    	ja     c00258c4 <__udivdi3+0xf8>
c0025840:	b8 01 00 00 00       	mov    eax,0x1
c0025845:	eb ac                	jmp    c00257f3 <__udivdi3+0x27>
c0025847:	90                   	nop
c0025848:	31 db                	xor    ebx,ebx
c002584a:	31 c0                	xor    eax,eax
c002584c:	89 da                	mov    edx,ebx
c002584e:	83 c4 1c             	add    esp,0x1c
c0025851:	5b                   	pop    ebx
c0025852:	5e                   	pop    esi
c0025853:	5f                   	pop    edi
c0025854:	5d                   	pop    ebp
c0025855:	c3                   	ret    
c0025856:	66 90                	xchg   ax,ax
c0025858:	b8 20 00 00 00       	mov    eax,0x20
c002585d:	29 d8                	sub    eax,ebx
c002585f:	88 d9                	mov    cl,bl
c0025861:	d3 e2                	shl    edx,cl
c0025863:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0025867:	89 fa                	mov    edx,edi
c0025869:	88 c1                	mov    cl,al
c002586b:	d3 ea                	shr    edx,cl
c002586d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025871:	09 d1                	or     ecx,edx
c0025873:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025877:	88 d9                	mov    cl,bl
c0025879:	d3 e7                	shl    edi,cl
c002587b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002587f:	89 f7                	mov    edi,esi
c0025881:	88 c1                	mov    cl,al
c0025883:	d3 ef                	shr    edi,cl
c0025885:	88 d9                	mov    cl,bl
c0025887:	d3 e6                	shl    esi,cl
c0025889:	89 ea                	mov    edx,ebp
c002588b:	88 c1                	mov    cl,al
c002588d:	d3 ea                	shr    edx,cl
c002588f:	09 d6                	or     esi,edx
c0025891:	89 f0                	mov    eax,esi
c0025893:	89 fa                	mov    edx,edi
c0025895:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025899:	89 d7                	mov    edi,edx
c002589b:	89 c6                	mov    esi,eax
c002589d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00258a1:	39 d7                	cmp    edi,edx
c00258a3:	72 13                	jb     c00258b8 <__udivdi3+0xec>
c00258a5:	74 09                	je     c00258b0 <__udivdi3+0xe4>
c00258a7:	89 f0                	mov    eax,esi
c00258a9:	31 db                	xor    ebx,ebx
c00258ab:	e9 43 ff ff ff       	jmp    c00257f3 <__udivdi3+0x27>
c00258b0:	88 d9                	mov    cl,bl
c00258b2:	d3 e5                	shl    ebp,cl
c00258b4:	39 c5                	cmp    ebp,eax
c00258b6:	73 ef                	jae    c00258a7 <__udivdi3+0xdb>
c00258b8:	8d 46 ff             	lea    eax,[esi-0x1]
c00258bb:	31 db                	xor    ebx,ebx
c00258bd:	e9 31 ff ff ff       	jmp    c00257f3 <__udivdi3+0x27>
c00258c2:	66 90                	xchg   ax,ax
c00258c4:	31 c0                	xor    eax,eax
c00258c6:	e9 28 ff ff ff       	jmp    c00257f3 <__udivdi3+0x27>
c00258cb:	90                   	nop

c00258cc <__umoddi3>:
c00258cc:	55                   	push   ebp
c00258cd:	57                   	push   edi
c00258ce:	56                   	push   esi
c00258cf:	53                   	push   ebx
c00258d0:	83 ec 1c             	sub    esp,0x1c
c00258d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00258d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00258db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00258df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00258e3:	89 da                	mov    edx,ebx
c00258e5:	85 c0                	test   eax,eax
c00258e7:	75 37                	jne    c0025920 <__umoddi3+0x54>
c00258e9:	39 df                	cmp    edi,ebx
c00258eb:	76 13                	jbe    c0025900 <__umoddi3+0x34>
c00258ed:	89 f0                	mov    eax,esi
c00258ef:	f7 f7                	div    edi
c00258f1:	89 d0                	mov    eax,edx
c00258f3:	31 d2                	xor    edx,edx
c00258f5:	83 c4 1c             	add    esp,0x1c
c00258f8:	5b                   	pop    ebx
c00258f9:	5e                   	pop    esi
c00258fa:	5f                   	pop    edi
c00258fb:	5d                   	pop    ebp
c00258fc:	c3                   	ret    
c00258fd:	8d 76 00             	lea    esi,[esi+0x0]
c0025900:	89 fd                	mov    ebp,edi
c0025902:	85 ff                	test   edi,edi
c0025904:	75 0b                	jne    c0025911 <__umoddi3+0x45>
c0025906:	b8 01 00 00 00       	mov    eax,0x1
c002590b:	31 d2                	xor    edx,edx
c002590d:	f7 f7                	div    edi
c002590f:	89 c5                	mov    ebp,eax
c0025911:	89 d8                	mov    eax,ebx
c0025913:	31 d2                	xor    edx,edx
c0025915:	f7 f5                	div    ebp
c0025917:	89 f0                	mov    eax,esi
c0025919:	f7 f5                	div    ebp
c002591b:	89 d0                	mov    eax,edx
c002591d:	eb d4                	jmp    c00258f3 <__umoddi3+0x27>
c002591f:	90                   	nop
c0025920:	89 f1                	mov    ecx,esi
c0025922:	39 d8                	cmp    eax,ebx
c0025924:	76 0a                	jbe    c0025930 <__umoddi3+0x64>
c0025926:	89 f0                	mov    eax,esi
c0025928:	83 c4 1c             	add    esp,0x1c
c002592b:	5b                   	pop    ebx
c002592c:	5e                   	pop    esi
c002592d:	5f                   	pop    edi
c002592e:	5d                   	pop    ebp
c002592f:	c3                   	ret    
c0025930:	0f bd e8             	bsr    ebp,eax
c0025933:	83 f5 1f             	xor    ebp,0x1f
c0025936:	75 1c                	jne    c0025954 <__umoddi3+0x88>
c0025938:	39 d8                	cmp    eax,ebx
c002593a:	72 04                	jb     c0025940 <__umoddi3+0x74>
c002593c:	39 f7                	cmp    edi,esi
c002593e:	77 08                	ja     c0025948 <__umoddi3+0x7c>
c0025940:	89 da                	mov    edx,ebx
c0025942:	29 fe                	sub    esi,edi
c0025944:	19 c2                	sbb    edx,eax
c0025946:	89 f1                	mov    ecx,esi
c0025948:	89 c8                	mov    eax,ecx
c002594a:	83 c4 1c             	add    esp,0x1c
c002594d:	5b                   	pop    ebx
c002594e:	5e                   	pop    esi
c002594f:	5f                   	pop    edi
c0025950:	5d                   	pop    ebp
c0025951:	c3                   	ret    
c0025952:	66 90                	xchg   ax,ax
c0025954:	ba 20 00 00 00       	mov    edx,0x20
c0025959:	29 ea                	sub    edx,ebp
c002595b:	89 e9                	mov    ecx,ebp
c002595d:	d3 e0                	shl    eax,cl
c002595f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025963:	89 f8                	mov    eax,edi
c0025965:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025969:	88 d1                	mov    cl,dl
c002596b:	d3 e8                	shr    eax,cl
c002596d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025971:	09 c1                	or     ecx,eax
c0025973:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025977:	89 e9                	mov    ecx,ebp
c0025979:	d3 e7                	shl    edi,cl
c002597b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002597f:	89 d8                	mov    eax,ebx
c0025981:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025985:	88 d1                	mov    cl,dl
c0025987:	d3 e8                	shr    eax,cl
c0025989:	89 c7                	mov    edi,eax
c002598b:	89 e9                	mov    ecx,ebp
c002598d:	d3 e3                	shl    ebx,cl
c002598f:	89 f0                	mov    eax,esi
c0025991:	88 d1                	mov    cl,dl
c0025993:	d3 e8                	shr    eax,cl
c0025995:	09 d8                	or     eax,ebx
c0025997:	89 e9                	mov    ecx,ebp
c0025999:	d3 e6                	shl    esi,cl
c002599b:	89 f3                	mov    ebx,esi
c002599d:	89 fa                	mov    edx,edi
c002599f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00259a3:	89 d1                	mov    ecx,edx
c00259a5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00259a9:	89 c6                	mov    esi,eax
c00259ab:	89 d7                	mov    edi,edx
c00259ad:	39 d1                	cmp    ecx,edx
c00259af:	72 27                	jb     c00259d8 <__umoddi3+0x10c>
c00259b1:	74 21                	je     c00259d4 <__umoddi3+0x108>
c00259b3:	89 ca                	mov    edx,ecx
c00259b5:	29 f3                	sub    ebx,esi
c00259b7:	19 fa                	sbb    edx,edi
c00259b9:	89 d0                	mov    eax,edx
c00259bb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00259bf:	d3 e0                	shl    eax,cl
c00259c1:	89 e9                	mov    ecx,ebp
c00259c3:	d3 eb                	shr    ebx,cl
c00259c5:	09 d8                	or     eax,ebx
c00259c7:	d3 ea                	shr    edx,cl
c00259c9:	83 c4 1c             	add    esp,0x1c
c00259cc:	5b                   	pop    ebx
c00259cd:	5e                   	pop    esi
c00259ce:	5f                   	pop    edi
c00259cf:	5d                   	pop    ebp
c00259d0:	c3                   	ret    
c00259d1:	8d 76 00             	lea    esi,[esi+0x0]
c00259d4:	39 c3                	cmp    ebx,eax
c00259d6:	73 db                	jae    c00259b3 <__umoddi3+0xe7>
c00259d8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00259dc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00259e0:	89 d7                	mov    edi,edx
c00259e2:	89 c6                	mov    esi,eax
c00259e4:	eb cd                	jmp    c00259b3 <__umoddi3+0xe7>

c00259e6 <__addsf3>:
c00259e6:	55                   	push   ebp
c00259e7:	89 e5                	mov    ebp,esp
c00259e9:	57                   	push   edi
c00259ea:	56                   	push   esi
c00259eb:	53                   	push   ebx
c00259ec:	83 ec 08             	sub    esp,0x8
c00259ef:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00259f2:	89 fa                	mov    edx,edi
c00259f4:	89 f8                	mov    eax,edi
c00259f6:	c1 f8 17             	sar    eax,0x17
c00259f9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00259fc:	c1 e2 08             	shl    edx,0x8
c00259ff:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025a05:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025a08:	89 de                	mov    esi,ebx
c0025a0a:	c1 fe 17             	sar    esi,0x17
c0025a0d:	c1 e3 08             	shl    ebx,0x8
c0025a10:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025a16:	31 f0                	xor    eax,esi
c0025a18:	0f 88 3b 01 00 00    	js     c0025b59 <__addsf3+0x173>
c0025a1e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0025a21:	29 f1                	sub    ecx,esi
c0025a23:	85 c9                	test   ecx,ecx
c0025a25:	7e 54                	jle    c0025a7b <__addsf3+0x95>
c0025a27:	89 f0                	mov    eax,esi
c0025a29:	84 c0                	test   al,al
c0025a2b:	75 10                	jne    c0025a3d <__addsf3+0x57>
c0025a2d:	85 db                	test   ebx,ebx
c0025a2f:	0f 84 aa 02 00 00    	je     c0025cdf <__addsf3+0x2f9>
c0025a35:	49                   	dec    ecx
c0025a36:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025a39:	74 38                	je     c0025a73 <__addsf3+0x8d>
c0025a3b:	eb 13                	jmp    c0025a50 <__addsf3+0x6a>
c0025a3d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025a40:	f7 d0                	not    eax
c0025a42:	84 c0                	test   al,al
c0025a44:	0f 84 95 02 00 00    	je     c0025cdf <__addsf3+0x2f9>
c0025a4a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025a50:	83 f9 1f             	cmp    ecx,0x1f
c0025a53:	0f 8f 86 02 00 00    	jg     c0025cdf <__addsf3+0x2f9>
c0025a59:	89 de                	mov    esi,ebx
c0025a5b:	d3 ee                	shr    esi,cl
c0025a5d:	b8 20 00 00 00       	mov    eax,0x20
c0025a62:	29 c8                	sub    eax,ecx
c0025a64:	89 c1                	mov    ecx,eax
c0025a66:	d3 e3                	shl    ebx,cl
c0025a68:	31 c0                	xor    eax,eax
c0025a6a:	85 db                	test   ebx,ebx
c0025a6c:	0f 95 c0             	setne  al
c0025a6f:	09 f0                	or     eax,esi
c0025a71:	01 d0                	add    eax,edx
c0025a73:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025a76:	e9 b6 00 00 00       	jmp    c0025b31 <__addsf3+0x14b>
c0025a7b:	74 5c                	je     c0025ad9 <__addsf3+0xf3>
c0025a7d:	89 f1                	mov    ecx,esi
c0025a7f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0025a82:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025a85:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0025a89:	75 14                	jne    c0025a9f <__addsf3+0xb9>
c0025a8b:	85 d2                	test   edx,edx
c0025a8d:	0f 84 4c 02 00 00    	je     c0025cdf <__addsf3+0x2f9>
c0025a93:	49                   	dec    ecx
c0025a94:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025a97:	0f 84 94 00 00 00    	je     c0025b31 <__addsf3+0x14b>
c0025a9d:	eb 12                	jmp    c0025ab1 <__addsf3+0xcb>
c0025a9f:	89 f0                	mov    eax,esi
c0025aa1:	f7 d0                	not    eax
c0025aa3:	84 c0                	test   al,al
c0025aa5:	0f 84 34 02 00 00    	je     c0025cdf <__addsf3+0x2f9>
c0025aab:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025ab1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025ab4:	83 f9 1f             	cmp    ecx,0x1f
c0025ab7:	0f 8f 22 02 00 00    	jg     c0025cdf <__addsf3+0x2f9>
c0025abd:	89 d7                	mov    edi,edx
c0025abf:	d3 ef                	shr    edi,cl
c0025ac1:	b8 20 00 00 00       	mov    eax,0x20
c0025ac6:	29 c8                	sub    eax,ecx
c0025ac8:	89 c1                	mov    ecx,eax
c0025aca:	d3 e2                	shl    edx,cl
c0025acc:	31 c0                	xor    eax,eax
c0025ace:	85 d2                	test   edx,edx
c0025ad0:	0f 95 c0             	setne  al
c0025ad3:	09 f8                	or     eax,edi
c0025ad5:	01 d8                	add    eax,ebx
c0025ad7:	eb 58                	jmp    c0025b31 <__addsf3+0x14b>
c0025ad9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025adc:	8d 70 01             	lea    esi,[eax+0x1]
c0025adf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0025ae5:	75 32                	jne    c0025b19 <__addsf3+0x133>
c0025ae7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0025aeb:	75 1f                	jne    c0025b0c <__addsf3+0x126>
c0025aed:	85 d2                	test   edx,edx
c0025aef:	0f 84 e0 01 00 00    	je     c0025cd5 <__addsf3+0x2ef>
c0025af5:	85 db                	test   ebx,ebx
c0025af7:	0f 84 e2 01 00 00    	je     c0025cdf <__addsf3+0x2f9>
c0025afd:	89 d0                	mov    eax,edx
c0025aff:	01 d8                	add    eax,ebx
c0025b01:	0f 89 a9 01 00 00    	jns    c0025cb0 <__addsf3+0x2ca>
c0025b07:	e9 9d 01 00 00       	jmp    c0025ca9 <__addsf3+0x2c3>
c0025b0c:	85 d2                	test   edx,edx
c0025b0e:	0f 85 cb 01 00 00    	jne    c0025cdf <__addsf3+0x2f9>
c0025b14:	e9 bc 01 00 00       	jmp    c0025cd5 <__addsf3+0x2ef>
c0025b19:	31 c0                	xor    eax,eax
c0025b1b:	89 f1                	mov    ecx,esi
c0025b1d:	f7 d1                	not    ecx
c0025b1f:	84 c9                	test   cl,cl
c0025b21:	0f 84 90 01 00 00    	je     c0025cb7 <__addsf3+0x2d1>
c0025b27:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025b2a:	d1 e8                	shr    eax,1
c0025b2c:	e9 86 01 00 00       	jmp    c0025cb7 <__addsf3+0x2d1>
c0025b31:	85 c0                	test   eax,eax
c0025b33:	0f 89 7e 01 00 00    	jns    c0025cb7 <__addsf3+0x2d1>
c0025b39:	46                   	inc    esi
c0025b3a:	89 f2                	mov    edx,esi
c0025b3c:	f7 d2                	not    edx
c0025b3e:	84 d2                	test   dl,dl
c0025b40:	0f 84 6f 01 00 00    	je     c0025cb5 <__addsf3+0x2cf>
c0025b46:	89 c2                	mov    edx,eax
c0025b48:	83 e2 01             	and    edx,0x1
c0025b4b:	d1 e8                	shr    eax,1
c0025b4d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0025b52:	09 d0                	or     eax,edx
c0025b54:	e9 5e 01 00 00       	jmp    c0025cb7 <__addsf3+0x2d1>
c0025b59:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0025b5d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025b60:	89 f0                	mov    eax,esi
c0025b62:	0f b6 c0             	movzx  eax,al
c0025b65:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025b68:	29 c1                	sub    ecx,eax
c0025b6a:	85 c9                	test   ecx,ecx
c0025b6c:	7e 55                	jle    c0025bc3 <__addsf3+0x1dd>
c0025b6e:	85 c0                	test   eax,eax
c0025b70:	75 11                	jne    c0025b83 <__addsf3+0x19d>
c0025b72:	85 db                	test   ebx,ebx
c0025b74:	0f 84 65 01 00 00    	je     c0025cdf <__addsf3+0x2f9>
c0025b7a:	49                   	dec    ecx
c0025b7b:	75 19                	jne    c0025b96 <__addsf3+0x1b0>
c0025b7d:	89 d0                	mov    eax,edx
c0025b7f:	29 d8                	sub    eax,ebx
c0025b81:	eb 38                	jmp    c0025bbb <__addsf3+0x1d5>
c0025b83:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b86:	f7 d0                	not    eax
c0025b88:	84 c0                	test   al,al
c0025b8a:	0f 84 4f 01 00 00    	je     c0025cdf <__addsf3+0x2f9>
c0025b90:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025b96:	83 f9 1f             	cmp    ecx,0x1f
c0025b99:	0f 8f 40 01 00 00    	jg     c0025cdf <__addsf3+0x2f9>
c0025b9f:	89 de                	mov    esi,ebx
c0025ba1:	d3 ee                	shr    esi,cl
c0025ba3:	b8 20 00 00 00       	mov    eax,0x20
c0025ba8:	29 c8                	sub    eax,ecx
c0025baa:	89 c1                	mov    ecx,eax
c0025bac:	d3 e3                	shl    ebx,cl
c0025bae:	31 c0                	xor    eax,eax
c0025bb0:	85 db                	test   ebx,ebx
c0025bb2:	0f 95 c0             	setne  al
c0025bb5:	09 f0                	or     eax,esi
c0025bb7:	29 c2                	sub    edx,eax
c0025bb9:	89 d0                	mov    eax,edx
c0025bbb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025bbe:	e9 af 00 00 00       	jmp    c0025c72 <__addsf3+0x28c>
c0025bc3:	74 5c                	je     c0025c21 <__addsf3+0x23b>
c0025bc5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0025bc8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025bcb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0025bcf:	75 14                	jne    c0025be5 <__addsf3+0x1ff>
c0025bd1:	85 d2                	test   edx,edx
c0025bd3:	0f 84 06 01 00 00    	je     c0025cdf <__addsf3+0x2f9>
c0025bd9:	48                   	dec    eax
c0025bda:	75 1b                	jne    c0025bf7 <__addsf3+0x211>
c0025bdc:	89 d8                	mov    eax,ebx
c0025bde:	29 d0                	sub    eax,edx
c0025be0:	e9 8d 00 00 00       	jmp    c0025c72 <__addsf3+0x28c>
c0025be5:	89 f1                	mov    ecx,esi
c0025be7:	f7 d1                	not    ecx
c0025be9:	84 c9                	test   cl,cl
c0025beb:	0f 84 ee 00 00 00    	je     c0025cdf <__addsf3+0x2f9>
c0025bf1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025bf7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025bfa:	83 f8 1f             	cmp    eax,0x1f
c0025bfd:	0f 8f dc 00 00 00    	jg     c0025cdf <__addsf3+0x2f9>
c0025c03:	89 d7                	mov    edi,edx
c0025c05:	88 c1                	mov    cl,al
c0025c07:	d3 ef                	shr    edi,cl
c0025c09:	b9 20 00 00 00       	mov    ecx,0x20
c0025c0e:	29 c1                	sub    ecx,eax
c0025c10:	d3 e2                	shl    edx,cl
c0025c12:	31 c0                	xor    eax,eax
c0025c14:	85 d2                	test   edx,edx
c0025c16:	0f 95 c0             	setne  al
c0025c19:	09 f8                	or     eax,edi
c0025c1b:	29 c3                	sub    ebx,eax
c0025c1d:	89 d8                	mov    eax,ebx
c0025c1f:	eb 51                	jmp    c0025c72 <__addsf3+0x28c>
c0025c21:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c24:	40                   	inc    eax
c0025c25:	a8 fe                	test   al,0xfe
c0025c27:	75 3d                	jne    c0025c66 <__addsf3+0x280>
c0025c29:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0025c2d:	0f 85 a7 00 00 00    	jne    c0025cda <__addsf3+0x2f4>
c0025c33:	85 d2                	test   edx,edx
c0025c35:	75 12                	jne    c0025c49 <__addsf3+0x263>
c0025c37:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025c3a:	85 db                	test   ebx,ebx
c0025c3c:	0f 85 9d 00 00 00    	jne    c0025cdf <__addsf3+0x2f9>
c0025c42:	31 ff                	xor    edi,edi
c0025c44:	e9 96 00 00 00       	jmp    c0025cdf <__addsf3+0x2f9>
c0025c49:	85 db                	test   ebx,ebx
c0025c4b:	0f 84 8e 00 00 00    	je     c0025cdf <__addsf3+0x2f9>
c0025c51:	89 d0                	mov    eax,edx
c0025c53:	29 d8                	sub    eax,ebx
c0025c55:	79 06                	jns    c0025c5d <__addsf3+0x277>
c0025c57:	89 d8                	mov    eax,ebx
c0025c59:	29 d0                	sub    eax,edx
c0025c5b:	eb 5a                	jmp    c0025cb7 <__addsf3+0x2d1>
c0025c5d:	bf 00 00 00 00       	mov    edi,0x0
c0025c62:	74 7b                	je     c0025cdf <__addsf3+0x2f9>
c0025c64:	eb 4a                	jmp    c0025cb0 <__addsf3+0x2ca>
c0025c66:	89 d0                	mov    eax,edx
c0025c68:	29 d8                	sub    eax,ebx
c0025c6a:	79 12                	jns    c0025c7e <__addsf3+0x298>
c0025c6c:	89 d8                	mov    eax,ebx
c0025c6e:	29 d0                	sub    eax,edx
c0025c70:	eb 09                	jmp    c0025c7b <__addsf3+0x295>
c0025c72:	85 c0                	test   eax,eax
c0025c74:	79 41                	jns    c0025cb7 <__addsf3+0x2d1>
c0025c76:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025c7b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0025c7e:	31 f6                	xor    esi,esi
c0025c80:	85 c0                	test   eax,eax
c0025c82:	74 33                	je     c0025cb7 <__addsf3+0x2d1>
c0025c84:	0f bd c8             	bsr    ecx,eax
c0025c87:	83 f1 1f             	xor    ecx,0x1f
c0025c8a:	d3 e0                	shl    eax,cl
c0025c8c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0025c90:	39 ca                	cmp    edx,ecx
c0025c92:	7f 10                	jg     c0025ca4 <__addsf3+0x2be>
c0025c94:	29 d1                	sub    ecx,edx
c0025c96:	41                   	inc    ecx
c0025c97:	d3 e8                	shr    eax,cl
c0025c99:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025c9c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0025ca2:	eb 13                	jmp    c0025cb7 <__addsf3+0x2d1>
c0025ca4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025ca7:	29 ce                	sub    esi,ecx
c0025ca9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025cae:	eb 07                	jmp    c0025cb7 <__addsf3+0x2d1>
c0025cb0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025cb3:	eb 02                	jmp    c0025cb7 <__addsf3+0x2d1>
c0025cb5:	31 c0                	xor    eax,eax
c0025cb7:	89 c2                	mov    edx,eax
c0025cb9:	c1 ea 08             	shr    edx,0x8
c0025cbc:	a8 7f                	test   al,0x7f
c0025cbe:	0f 95 c1             	setne  cl
c0025cc1:	09 d1                	or     ecx,edx
c0025cc3:	83 e1 01             	and    ecx,0x1
c0025cc6:	c1 e8 07             	shr    eax,0x7
c0025cc9:	21 c8                	and    eax,ecx
c0025ccb:	c1 e6 17             	shl    esi,0x17
c0025cce:	09 d6                	or     esi,edx
c0025cd0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0025cd3:	eb 0a                	jmp    c0025cdf <__addsf3+0x2f9>
c0025cd5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025cd8:	eb 05                	jmp    c0025cdf <__addsf3+0x2f9>
c0025cda:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0025cdf:	89 f8                	mov    eax,edi
c0025ce1:	5a                   	pop    edx
c0025ce2:	59                   	pop    ecx
c0025ce3:	5b                   	pop    ebx
c0025ce4:	5e                   	pop    esi
c0025ce5:	5f                   	pop    edi
c0025ce6:	5d                   	pop    ebp
c0025ce7:	c3                   	ret    

c0025ce8 <__subsf3>:
c0025ce8:	55                   	push   ebp
c0025ce9:	89 e5                	mov    ebp,esp
c0025ceb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cee:	05 00 00 00 80       	add    eax,0x80000000
c0025cf3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025cf6:	5d                   	pop    ebp
c0025cf7:	e9 ea fc ff ff       	jmp    c00259e6 <__addsf3>

c0025cfc <__negsf2>:
c0025cfc:	55                   	push   ebp
c0025cfd:	89 e5                	mov    ebp,esp
c0025cff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d02:	05 00 00 00 80       	add    eax,0x80000000
c0025d07:	5d                   	pop    ebp
c0025d08:	c3                   	ret    

c0025d09 <__mulsf3>:
c0025d09:	55                   	push   ebp
c0025d0a:	89 e5                	mov    ebp,esp
c0025d0c:	57                   	push   edi
c0025d0d:	56                   	push   esi
c0025d0e:	53                   	push   ebx
c0025d0f:	83 ec 1c             	sub    esp,0x1c
c0025d12:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0025d15:	89 f0                	mov    eax,esi
c0025d17:	89 f1                	mov    ecx,esi
c0025d19:	c1 f9 17             	sar    ecx,0x17
c0025d1c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025d1f:	c1 e0 08             	shl    eax,0x8
c0025d22:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025d27:	89 c1                	mov    ecx,eax
c0025d29:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d2c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025d2f:	89 c7                	mov    edi,eax
c0025d31:	c1 ff 17             	sar    edi,0x17
c0025d34:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025d38:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025d3b:	89 f8                	mov    eax,edi
c0025d3d:	0f b6 c0             	movzx  eax,al
c0025d40:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0025d43:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0025d47:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025d4a:	42                   	inc    edx
c0025d4b:	80 e2 fe             	and    dl,0xfe
c0025d4e:	75 7b                	jne    c0025dcb <__mulsf3+0xc2>
c0025d50:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025d54:	74 54                	je     c0025daa <__mulsf3+0xa1>
c0025d56:	85 c9                	test   ecx,ecx
c0025d58:	0f 85 64 01 00 00    	jne    c0025ec2 <__mulsf3+0x1b9>
c0025d5e:	8d 57 01             	lea    edx,[edi+0x1]
c0025d61:	80 e2 fe             	and    dl,0xfe
c0025d64:	75 1f                	jne    c0025d85 <__mulsf3+0x7c>
c0025d66:	85 c0                	test   eax,eax
c0025d68:	b8 00 00 00 00       	mov    eax,0x0
c0025d6d:	74 29                	je     c0025d98 <__mulsf3+0x8f>
c0025d6f:	53                   	push   ebx
c0025d70:	53                   	push   ebx
c0025d71:	50                   	push   eax
c0025d72:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025d75:	e8 96 05 00 00       	call   c0026310 <__nesf2>
c0025d7a:	83 c4 10             	add    esp,0x10
c0025d7d:	85 c0                	test   eax,eax
c0025d7f:	0f 85 3a 01 00 00    	jne    c0025ebf <__mulsf3+0x1b6>
c0025d85:	85 ff                	test   edi,edi
c0025d87:	0f 89 35 01 00 00    	jns    c0025ec2 <__mulsf3+0x1b9>
c0025d8d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0025d93:	e9 2a 01 00 00       	jmp    c0025ec2 <__mulsf3+0x1b9>
c0025d98:	51                   	push   ecx
c0025d99:	51                   	push   ecx
c0025d9a:	50                   	push   eax
c0025d9b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025d9e:	e8 6d 05 00 00       	call   c0026310 <__nesf2>
c0025da3:	83 c4 10             	add    esp,0x10
c0025da6:	85 c0                	test   eax,eax
c0025da8:	eb 15                	jmp    c0025dbf <__mulsf3+0xb6>
c0025daa:	85 c9                	test   ecx,ecx
c0025dac:	74 0b                	je     c0025db9 <__mulsf3+0xb0>
c0025dae:	8d 53 ff             	lea    edx,[ebx-0x1]
c0025db1:	01 c9                	add    ecx,ecx
c0025db3:	78 16                	js     c0025dcb <__mulsf3+0xc2>
c0025db5:	89 d3                	mov    ebx,edx
c0025db7:	eb f5                	jmp    c0025dae <__mulsf3+0xa5>
c0025db9:	89 f8                	mov    eax,edi
c0025dbb:	f7 d0                	not    eax
c0025dbd:	84 c0                	test   al,al
c0025dbf:	75 c4                	jne    c0025d85 <__mulsf3+0x7c>
c0025dc1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0025dc6:	e9 f7 00 00 00       	jmp    c0025ec2 <__mulsf3+0x1b9>
c0025dcb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0025dce:	c1 e6 08             	shl    esi,0x8
c0025dd1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0025dd7:	8d 57 01             	lea    edx,[edi+0x1]
c0025dda:	80 e2 fe             	and    dl,0xfe
c0025ddd:	75 63                	jne    c0025e42 <__mulsf3+0x139>
c0025ddf:	85 c0                	test   eax,eax
c0025de1:	74 2f                	je     c0025e12 <__mulsf3+0x109>
c0025de3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025de7:	0f 89 d2 00 00 00    	jns    c0025ebf <__mulsf3+0x1b6>
c0025ded:	52                   	push   edx
c0025dee:	52                   	push   edx
c0025def:	6a 00                	push   0x0
c0025df1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025df4:	e8 dc 04 00 00       	call   c00262d5 <__eqsf2>
c0025df9:	83 c4 10             	add    esp,0x10
c0025dfc:	85 c0                	test   eax,eax
c0025dfe:	0f 85 bb 00 00 00    	jne    c0025ebf <__mulsf3+0x1b6>
c0025e04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e07:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0025e0d:	e9 b0 00 00 00       	jmp    c0025ec2 <__mulsf3+0x1b9>
c0025e12:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025e15:	50                   	push   eax
c0025e16:	50                   	push   eax
c0025e17:	6a 00                	push   0x0
c0025e19:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025e1c:	e8 b4 04 00 00       	call   c00262d5 <__eqsf2>
c0025e21:	83 c4 10             	add    esp,0x10
c0025e24:	85 c0                	test   eax,eax
c0025e26:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025e29:	75 0c                	jne    c0025e37 <__mulsf3+0x12e>
c0025e2b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025e2f:	0f 89 8a 00 00 00    	jns    c0025ebf <__mulsf3+0x1b6>
c0025e35:	eb cd                	jmp    c0025e04 <__mulsf3+0xfb>
c0025e37:	8d 43 ff             	lea    eax,[ebx-0x1]
c0025e3a:	01 f6                	add    esi,esi
c0025e3c:	78 04                	js     c0025e42 <__mulsf3+0x139>
c0025e3e:	89 c3                	mov    ebx,eax
c0025e40:	eb f5                	jmp    c0025e37 <__mulsf3+0x12e>
c0025e42:	89 c8                	mov    eax,ecx
c0025e44:	0d 00 00 00 80       	or     eax,0x80000000
c0025e49:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025e4f:	f7 e6                	mul    esi
c0025e51:	85 c0                	test   eax,eax
c0025e53:	0f 95 c0             	setne  al
c0025e56:	0f b6 c0             	movzx  eax,al
c0025e59:	09 c2                	or     edx,eax
c0025e5b:	78 03                	js     c0025e60 <__mulsf3+0x157>
c0025e5d:	01 d2                	add    edx,edx
c0025e5f:	4b                   	dec    ebx
c0025e60:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0025e66:	7f 22                	jg     c0025e8a <__mulsf3+0x181>
c0025e68:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025e6e:	85 db                	test   ebx,ebx
c0025e70:	7f 23                	jg     c0025e95 <__mulsf3+0x18c>
c0025e72:	83 fb e9             	cmp    ebx,0xffffffe9
c0025e75:	7c 1a                	jl     c0025e91 <__mulsf3+0x188>
c0025e77:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025e7d:	b9 01 00 00 00       	mov    ecx,0x1
c0025e82:	29 d9                	sub    ecx,ebx
c0025e84:	d3 ea                	shr    edx,cl
c0025e86:	31 db                	xor    ebx,ebx
c0025e88:	eb 0b                	jmp    c0025e95 <__mulsf3+0x18c>
c0025e8a:	bb ff 00 00 00       	mov    ebx,0xff
c0025e8f:	eb 02                	jmp    c0025e93 <__mulsf3+0x18a>
c0025e91:	31 db                	xor    ebx,ebx
c0025e93:	31 d2                	xor    edx,edx
c0025e95:	89 d0                	mov    eax,edx
c0025e97:	c1 e8 08             	shr    eax,0x8
c0025e9a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025e9d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025ea3:	09 fb                	or     ebx,edi
c0025ea5:	c1 e3 17             	shl    ebx,0x17
c0025ea8:	09 c3                	or     ebx,eax
c0025eaa:	f6 c2 7f             	test   dl,0x7f
c0025ead:	0f 95 c1             	setne  cl
c0025eb0:	09 c8                	or     eax,ecx
c0025eb2:	83 e0 01             	and    eax,0x1
c0025eb5:	c1 ea 07             	shr    edx,0x7
c0025eb8:	21 c2                	and    edx,eax
c0025eba:	8d 34 13             	lea    esi,[ebx+edx*1]
c0025ebd:	eb 03                	jmp    c0025ec2 <__mulsf3+0x1b9>
c0025ebf:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0025ec2:	89 f0                	mov    eax,esi
c0025ec4:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ec7:	5b                   	pop    ebx
c0025ec8:	5e                   	pop    esi
c0025ec9:	5f                   	pop    edi
c0025eca:	5d                   	pop    ebp
c0025ecb:	c3                   	ret    

c0025ecc <__divsf3>:
c0025ecc:	55                   	push   ebp
c0025ecd:	89 e5                	mov    ebp,esp
c0025ecf:	57                   	push   edi
c0025ed0:	56                   	push   esi
c0025ed1:	53                   	push   ebx
c0025ed2:	83 ec 1c             	sub    esp,0x1c
c0025ed5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025ed8:	89 d8                	mov    eax,ebx
c0025eda:	89 d9                	mov    ecx,ebx
c0025edc:	c1 f9 17             	sar    ecx,0x17
c0025edf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025ee2:	c1 e0 08             	shl    eax,0x8
c0025ee5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025eea:	89 c1                	mov    ecx,eax
c0025eec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025eef:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025ef2:	89 c7                	mov    edi,eax
c0025ef4:	c1 ff 17             	sar    edi,0x17
c0025ef7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025efb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025efe:	89 f8                	mov    eax,edi
c0025f00:	0f b6 c0             	movzx  eax,al
c0025f03:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025f06:	29 c6                	sub    esi,eax
c0025f08:	83 c6 7f             	add    esi,0x7f
c0025f0b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025f0e:	42                   	inc    edx
c0025f0f:	80 e2 fe             	and    dl,0xfe
c0025f12:	0f 85 9c 00 00 00    	jne    c0025fb4 <__divsf3+0xe8>
c0025f18:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025f1c:	74 33                	je     c0025f51 <__divsf3+0x85>
c0025f1e:	85 c9                	test   ecx,ecx
c0025f20:	0f 85 c7 01 00 00    	jne    c00260ed <__divsf3+0x221>
c0025f26:	8d 57 01             	lea    edx,[edi+0x1]
c0025f29:	80 e2 fe             	and    dl,0xfe
c0025f2c:	75 2f                	jne    c0025f5d <__divsf3+0x91>
c0025f2e:	85 c0                	test   eax,eax
c0025f30:	74 2b                	je     c0025f5d <__divsf3+0x91>
c0025f32:	51                   	push   ecx
c0025f33:	51                   	push   ecx
c0025f34:	6a 00                	push   0x0
c0025f36:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025f39:	e8 d2 03 00 00       	call   c0026310 <__nesf2>
c0025f3e:	83 c4 10             	add    esp,0x10
c0025f41:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025f44:	85 c0                	test   eax,eax
c0025f46:	0f 85 a1 01 00 00    	jne    c00260ed <__divsf3+0x221>
c0025f4c:	e9 92 01 00 00       	jmp    c00260e3 <__divsf3+0x217>
c0025f51:	85 c9                	test   ecx,ecx
c0025f53:	75 1b                	jne    c0025f70 <__divsf3+0xa4>
c0025f55:	8d 57 01             	lea    edx,[edi+0x1]
c0025f58:	80 e2 fe             	and    dl,0xfe
c0025f5b:	74 1e                	je     c0025f7b <__divsf3+0xaf>
c0025f5d:	85 ff                	test   edi,edi
c0025f5f:	0f 89 88 01 00 00    	jns    c00260ed <__divsf3+0x221>
c0025f65:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0025f6b:	e9 7d 01 00 00       	jmp    c00260ed <__divsf3+0x221>
c0025f70:	8d 56 ff             	lea    edx,[esi-0x1]
c0025f73:	01 c9                	add    ecx,ecx
c0025f75:	78 3d                	js     c0025fb4 <__divsf3+0xe8>
c0025f77:	89 d6                	mov    esi,edx
c0025f79:	eb f5                	jmp    c0025f70 <__divsf3+0xa4>
c0025f7b:	85 c0                	test   eax,eax
c0025f7d:	b8 00 00 00 00       	mov    eax,0x0
c0025f82:	74 18                	je     c0025f9c <__divsf3+0xd0>
c0025f84:	52                   	push   edx
c0025f85:	52                   	push   edx
c0025f86:	50                   	push   eax
c0025f87:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025f8a:	e8 81 03 00 00       	call   c0026310 <__nesf2>
c0025f8f:	83 c4 10             	add    esp,0x10
c0025f92:	85 c0                	test   eax,eax
c0025f94:	0f 85 50 01 00 00    	jne    c00260ea <__divsf3+0x21e>
c0025f9a:	eb c1                	jmp    c0025f5d <__divsf3+0x91>
c0025f9c:	56                   	push   esi
c0025f9d:	56                   	push   esi
c0025f9e:	50                   	push   eax
c0025f9f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025fa2:	e8 69 03 00 00       	call   c0026310 <__nesf2>
c0025fa7:	83 c4 10             	add    esp,0x10
c0025faa:	85 c0                	test   eax,eax
c0025fac:	0f 84 31 01 00 00    	je     c00260e3 <__divsf3+0x217>
c0025fb2:	eb a9                	jmp    c0025f5d <__divsf3+0x91>
c0025fb4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0025fb7:	c1 e3 08             	shl    ebx,0x8
c0025fba:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025fc0:	8d 57 01             	lea    edx,[edi+0x1]
c0025fc3:	80 e2 fe             	and    dl,0xfe
c0025fc6:	75 71                	jne    c0026039 <__divsf3+0x16d>
c0025fc8:	85 c0                	test   eax,eax
c0025fca:	ba 00 00 00 00       	mov    edx,0x0
c0025fcf:	74 2f                	je     c0026000 <__divsf3+0x134>
c0025fd1:	51                   	push   ecx
c0025fd2:	51                   	push   ecx
c0025fd3:	52                   	push   edx
c0025fd4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025fd7:	e8 f9 02 00 00       	call   c00262d5 <__eqsf2>
c0025fdc:	83 c4 10             	add    esp,0x10
c0025fdf:	85 c0                	test   eax,eax
c0025fe1:	0f 85 03 01 00 00    	jne    c00260ea <__divsf3+0x21e>
c0025fe7:	31 d2                	xor    edx,edx
c0025fe9:	89 d3                	mov    ebx,edx
c0025feb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025fee:	31 f8                	xor    eax,edi
c0025ff0:	0f 89 f7 00 00 00    	jns    c00260ed <__divsf3+0x221>
c0025ff6:	bb 00 00 00 80       	mov    ebx,0x80000000
c0025ffb:	e9 ed 00 00 00       	jmp    c00260ed <__divsf3+0x221>
c0026000:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026003:	50                   	push   eax
c0026004:	50                   	push   eax
c0026005:	52                   	push   edx
c0026006:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026009:	e8 c7 02 00 00       	call   c00262d5 <__eqsf2>
c002600e:	83 c4 10             	add    esp,0x10
c0026011:	85 c0                	test   eax,eax
c0026013:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026016:	75 16                	jne    c002602e <__divsf3+0x162>
c0026018:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002601b:	31 fb                	xor    ebx,edi
c002601d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026023:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026029:	e9 bf 00 00 00       	jmp    c00260ed <__divsf3+0x221>
c002602e:	8d 46 01             	lea    eax,[esi+0x1]
c0026031:	01 db                	add    ebx,ebx
c0026033:	78 04                	js     c0026039 <__divsf3+0x16d>
c0026035:	89 c6                	mov    esi,eax
c0026037:	eb f5                	jmp    c002602e <__divsf3+0x162>
c0026039:	89 c8                	mov    eax,ecx
c002603b:	0d 00 00 00 80       	or     eax,0x80000000
c0026040:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026046:	31 d2                	xor    edx,edx
c0026048:	39 d8                	cmp    eax,ebx
c002604a:	72 07                	jb     c0026053 <__divsf3+0x187>
c002604c:	29 d8                	sub    eax,ebx
c002604e:	ba 01 00 00 00       	mov    edx,0x1
c0026053:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002605a:	01 d2                	add    edx,edx
c002605c:	89 c1                	mov    ecx,eax
c002605e:	01 c0                	add    eax,eax
c0026060:	85 c9                	test   ecx,ecx
c0026062:	78 04                	js     c0026068 <__divsf3+0x19c>
c0026064:	39 c3                	cmp    ebx,eax
c0026066:	77 05                	ja     c002606d <__divsf3+0x1a1>
c0026068:	29 d8                	sub    eax,ebx
c002606a:	83 ca 01             	or     edx,0x1
c002606d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026070:	75 e8                	jne    c002605a <__divsf3+0x18e>
c0026072:	85 c0                	test   eax,eax
c0026074:	0f 95 c0             	setne  al
c0026077:	0f b6 c0             	movzx  eax,al
c002607a:	c1 e2 06             	shl    edx,0x6
c002607d:	09 c2                	or     edx,eax
c002607f:	78 03                	js     c0026084 <__divsf3+0x1b8>
c0026081:	01 d2                	add    edx,edx
c0026083:	4e                   	dec    esi
c0026084:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002608a:	7f 22                	jg     c00260ae <__divsf3+0x1e2>
c002608c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026092:	85 f6                	test   esi,esi
c0026094:	7f 23                	jg     c00260b9 <__divsf3+0x1ed>
c0026096:	83 fe e9             	cmp    esi,0xffffffe9
c0026099:	7c 1a                	jl     c00260b5 <__divsf3+0x1e9>
c002609b:	81 ca 00 00 00 80    	or     edx,0x80000000
c00260a1:	b9 01 00 00 00       	mov    ecx,0x1
c00260a6:	29 f1                	sub    ecx,esi
c00260a8:	d3 ea                	shr    edx,cl
c00260aa:	31 f6                	xor    esi,esi
c00260ac:	eb 0b                	jmp    c00260b9 <__divsf3+0x1ed>
c00260ae:	be ff 00 00 00       	mov    esi,0xff
c00260b3:	eb 02                	jmp    c00260b7 <__divsf3+0x1eb>
c00260b5:	31 f6                	xor    esi,esi
c00260b7:	31 d2                	xor    edx,edx
c00260b9:	89 d0                	mov    eax,edx
c00260bb:	c1 e8 08             	shr    eax,0x8
c00260be:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00260c1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00260c7:	09 fe                	or     esi,edi
c00260c9:	c1 e6 17             	shl    esi,0x17
c00260cc:	09 c6                	or     esi,eax
c00260ce:	f6 c2 7f             	test   dl,0x7f
c00260d1:	0f 95 c1             	setne  cl
c00260d4:	09 c8                	or     eax,ecx
c00260d6:	83 e0 01             	and    eax,0x1
c00260d9:	c1 ea 07             	shr    edx,0x7
c00260dc:	21 c2                	and    edx,eax
c00260de:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00260e1:	eb 0a                	jmp    c00260ed <__divsf3+0x221>
c00260e3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00260e8:	eb 03                	jmp    c00260ed <__divsf3+0x221>
c00260ea:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00260ed:	89 d8                	mov    eax,ebx
c00260ef:	8d 65 f4             	lea    esp,[ebp-0xc]
c00260f2:	5b                   	pop    ebx
c00260f3:	5e                   	pop    esi
c00260f4:	5f                   	pop    edi
c00260f5:	5d                   	pop    ebp
c00260f6:	c3                   	ret    

c00260f7 <__floatsisf>:
c00260f7:	55                   	push   ebp
c00260f8:	89 e5                	mov    ebp,esp
c00260fa:	53                   	push   ebx
c00260fb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00260fe:	85 d2                	test   edx,edx
c0026100:	7e 2b                	jle    c002612d <__floatsisf+0x36>
c0026102:	0f bd ca             	bsr    ecx,edx
c0026105:	83 f1 1f             	xor    ecx,0x1f
c0026108:	d3 e2                	shl    edx,cl
c002610a:	89 d0                	mov    eax,edx
c002610c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026111:	89 c3                	mov    ebx,eax
c0026113:	c1 eb 08             	shr    ebx,0x8
c0026116:	80 e2 7f             	and    dl,0x7f
c0026119:	0f 95 c2             	setne  dl
c002611c:	09 da                	or     edx,ebx
c002611e:	83 e2 01             	and    edx,0x1
c0026121:	c1 e8 07             	shr    eax,0x7
c0026124:	21 c2                	and    edx,eax
c0026126:	b8 9e 00 00 00       	mov    eax,0x9e
c002612b:	eb 32                	jmp    c002615f <__floatsisf+0x68>
c002612d:	b8 00 00 00 00       	mov    eax,0x0
c0026132:	74 34                	je     c0026168 <__floatsisf+0x71>
c0026134:	f7 da                	neg    edx
c0026136:	0f bd ca             	bsr    ecx,edx
c0026139:	83 f1 1f             	xor    ecx,0x1f
c002613c:	d3 e2                	shl    edx,cl
c002613e:	89 d0                	mov    eax,edx
c0026140:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026145:	89 c3                	mov    ebx,eax
c0026147:	c1 eb 08             	shr    ebx,0x8
c002614a:	80 e2 7f             	and    dl,0x7f
c002614d:	0f 95 c2             	setne  dl
c0026150:	09 da                	or     edx,ebx
c0026152:	83 e2 01             	and    edx,0x1
c0026155:	c1 e8 07             	shr    eax,0x7
c0026158:	21 c2                	and    edx,eax
c002615a:	b8 9e 01 00 00       	mov    eax,0x19e
c002615f:	29 c8                	sub    eax,ecx
c0026161:	c1 e0 17             	shl    eax,0x17
c0026164:	09 d8                	or     eax,ebx
c0026166:	01 d0                	add    eax,edx
c0026168:	5b                   	pop    ebx
c0026169:	5d                   	pop    ebp
c002616a:	c3                   	ret    

c002616b <__floatunsisf>:
c002616b:	55                   	push   ebp
c002616c:	89 e5                	mov    ebp,esp
c002616e:	53                   	push   ebx
c002616f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026172:	31 c0                	xor    eax,eax
c0026174:	85 d2                	test   edx,edx
c0026176:	74 32                	je     c00261aa <__floatunsisf+0x3f>
c0026178:	0f bd ca             	bsr    ecx,edx
c002617b:	83 f1 1f             	xor    ecx,0x1f
c002617e:	d3 e2                	shl    edx,cl
c0026180:	89 d0                	mov    eax,edx
c0026182:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026187:	89 c3                	mov    ebx,eax
c0026189:	c1 eb 08             	shr    ebx,0x8
c002618c:	80 e2 7f             	and    dl,0x7f
c002618f:	0f 95 c2             	setne  dl
c0026192:	09 da                	or     edx,ebx
c0026194:	83 e2 01             	and    edx,0x1
c0026197:	c1 e8 07             	shr    eax,0x7
c002619a:	21 c2                	and    edx,eax
c002619c:	b8 9e 00 00 00       	mov    eax,0x9e
c00261a1:	29 c8                	sub    eax,ecx
c00261a3:	c1 e0 17             	shl    eax,0x17
c00261a6:	09 d8                	or     eax,ebx
c00261a8:	01 d0                	add    eax,edx
c00261aa:	5b                   	pop    ebx
c00261ab:	5d                   	pop    ebp
c00261ac:	c3                   	ret    

c00261ad <__fixsfsi>:
c00261ad:	55                   	push   ebp
c00261ae:	89 e5                	mov    ebp,esp
c00261b0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00261b3:	89 d1                	mov    ecx,edx
c00261b5:	c1 e1 08             	shl    ecx,0x8
c00261b8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00261be:	c1 fa 17             	sar    edx,0x17
c00261c1:	78 1c                	js     c00261df <__fixsfsi+0x32>
c00261c3:	83 ea 7f             	sub    edx,0x7f
c00261c6:	31 c0                	xor    eax,eax
c00261c8:	83 fa 1e             	cmp    edx,0x1e
c00261cb:	77 40                	ja     c002620d <__fixsfsi+0x60>
c00261cd:	89 c8                	mov    eax,ecx
c00261cf:	0d 00 00 00 80       	or     eax,0x80000000
c00261d4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00261d9:	29 d1                	sub    ecx,edx
c00261db:	d3 e8                	shr    eax,cl
c00261dd:	eb 2e                	jmp    c002620d <__fixsfsi+0x60>
c00261df:	31 c0                	xor    eax,eax
c00261e1:	81 c2 81 00 00 00    	add    edx,0x81
c00261e7:	78 24                	js     c002620d <__fixsfsi+0x60>
c00261e9:	83 fa 1e             	cmp    edx,0x1e
c00261ec:	7e 09                	jle    c00261f7 <__fixsfsi+0x4a>
c00261ee:	83 fa 1f             	cmp    edx,0x1f
c00261f1:	75 18                	jne    c002620b <__fixsfsi+0x5e>
c00261f3:	85 c9                	test   ecx,ecx
c00261f5:	75 14                	jne    c002620b <__fixsfsi+0x5e>
c00261f7:	89 c8                	mov    eax,ecx
c00261f9:	0d 00 00 00 80       	or     eax,0x80000000
c00261fe:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026203:	29 d1                	sub    ecx,edx
c0026205:	d3 e8                	shr    eax,cl
c0026207:	f7 d8                	neg    eax
c0026209:	eb 02                	jmp    c002620d <__fixsfsi+0x60>
c002620b:	31 c0                	xor    eax,eax
c002620d:	5d                   	pop    ebp
c002620e:	c3                   	ret    

c002620f <__fixunssfsi>:
c002620f:	55                   	push   ebp
c0026210:	89 e5                	mov    ebp,esp
c0026212:	53                   	push   ebx
c0026213:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026216:	89 d3                	mov    ebx,edx
c0026218:	c1 fb 17             	sar    ebx,0x17
c002621b:	83 eb 7f             	sub    ebx,0x7f
c002621e:	31 c0                	xor    eax,eax
c0026220:	83 fb 1f             	cmp    ebx,0x1f
c0026223:	77 18                	ja     c002623d <__fixunssfsi+0x2e>
c0026225:	89 d0                	mov    eax,edx
c0026227:	c1 e0 08             	shl    eax,0x8
c002622a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002622f:	0d 00 00 00 80       	or     eax,0x80000000
c0026234:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026239:	29 d9                	sub    ecx,ebx
c002623b:	d3 e8                	shr    eax,cl
c002623d:	5b                   	pop    ebx
c002623e:	5d                   	pop    ebp
c002623f:	c3                   	ret    

c0026240 <__cmpsf2>:
c0026240:	55                   	push   ebp
c0026241:	89 e5                	mov    ebp,esp
c0026243:	57                   	push   edi
c0026244:	56                   	push   esi
c0026245:	53                   	push   ebx
c0026246:	83 ec 24             	sub    esp,0x24
c0026249:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002624c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002624f:	e8 4f 10 00 00       	call   c00272a3 <__truncdfsf2>
c0026254:	5a                   	pop    edx
c0026255:	59                   	pop    ecx
c0026256:	89 c3                	mov    ebx,eax
c0026258:	c1 e8 17             	shr    eax,0x17
c002625b:	0f b6 f0             	movzx  esi,al
c002625e:	89 d8                	mov    eax,ebx
c0026260:	c1 e8 1f             	shr    eax,0x1f
c0026263:	31 c6                	xor    esi,eax
c0026265:	c1 e3 08             	shl    ebx,0x8
c0026268:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002626b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002626e:	e8 30 10 00 00       	call   c00272a3 <__truncdfsf2>
c0026273:	83 c4 10             	add    esp,0x10
c0026276:	89 c1                	mov    ecx,eax
c0026278:	c1 e9 17             	shr    ecx,0x17
c002627b:	0f b6 c9             	movzx  ecx,cl
c002627e:	89 c7                	mov    edi,eax
c0026280:	c1 ef 1f             	shr    edi,0x1f
c0026283:	89 ca                	mov    edx,ecx
c0026285:	31 fa                	xor    edx,edi
c0026287:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002628a:	c1 e0 08             	shl    eax,0x8
c002628d:	89 c2                	mov    edx,eax
c002628f:	89 d8                	mov    eax,ebx
c0026291:	09 d0                	or     eax,edx
c0026293:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026298:	09 f0                	or     eax,esi
c002629a:	75 08                	jne    c00262a4 <__cmpsf2+0x64>
c002629c:	31 c0                	xor    eax,eax
c002629e:	39 f9                	cmp    ecx,edi
c00262a0:	75 0c                	jne    c00262ae <__cmpsf2+0x6e>
c00262a2:	eb 29                	jmp    c00262cd <__cmpsf2+0x8d>
c00262a4:	b8 01 00 00 00       	mov    eax,0x1
c00262a9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00262ac:	7f 1f                	jg     c00262cd <__cmpsf2+0x8d>
c00262ae:	83 c8 ff             	or     eax,0xffffffff
c00262b1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00262b4:	7c 17                	jl     c00262cd <__cmpsf2+0x8d>
c00262b6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00262bc:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00262c2:	b8 01 00 00 00       	mov    eax,0x1
c00262c7:	39 d3                	cmp    ebx,edx
c00262c9:	77 02                	ja     c00262cd <__cmpsf2+0x8d>
c00262cb:	19 c0                	sbb    eax,eax
c00262cd:	8d 65 f4             	lea    esp,[ebp-0xc]
c00262d0:	5b                   	pop    ebx
c00262d1:	5e                   	pop    esi
c00262d2:	5f                   	pop    edi
c00262d3:	5d                   	pop    ebp
c00262d4:	c3                   	ret    

c00262d5 <__eqsf2>:
c00262d5:	55                   	push   ebp
c00262d6:	89 e5                	mov    ebp,esp
c00262d8:	83 ec 24             	sub    esp,0x24
c00262db:	6a 01                	push   0x1
c00262dd:	83 ec 0c             	sub    esp,0xc
c00262e0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00262e3:	e8 df 10 00 00       	call   c00273c7 <__extendsfdf2>
c00262e8:	83 c4 10             	add    esp,0x10
c00262eb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00262ee:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00262f1:	52                   	push   edx
c00262f2:	50                   	push   eax
c00262f3:	50                   	push   eax
c00262f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262f7:	e8 cb 10 00 00       	call   c00273c7 <__extendsfdf2>
c00262fc:	59                   	pop    ecx
c00262fd:	59                   	pop    ecx
c00262fe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026301:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026304:	52                   	push   edx
c0026305:	50                   	push   eax
c0026306:	e8 35 ff ff ff       	call   c0026240 <__cmpsf2>
c002630b:	83 c4 20             	add    esp,0x20
c002630e:	c9                   	leave  
c002630f:	c3                   	ret    

c0026310 <__nesf2>:
c0026310:	eb c3                	jmp    c00262d5 <__eqsf2>

c0026312 <__gtsf2>:
c0026312:	55                   	push   ebp
c0026313:	89 e5                	mov    ebp,esp
c0026315:	83 ec 24             	sub    esp,0x24
c0026318:	6a ff                	push   0xffffffff
c002631a:	83 ec 0c             	sub    esp,0xc
c002631d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026320:	e8 a2 10 00 00       	call   c00273c7 <__extendsfdf2>
c0026325:	83 c4 10             	add    esp,0x10
c0026328:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002632b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002632e:	52                   	push   edx
c002632f:	50                   	push   eax
c0026330:	50                   	push   eax
c0026331:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026334:	e8 8e 10 00 00       	call   c00273c7 <__extendsfdf2>
c0026339:	59                   	pop    ecx
c002633a:	59                   	pop    ecx
c002633b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002633e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026341:	52                   	push   edx
c0026342:	50                   	push   eax
c0026343:	e8 f8 fe ff ff       	call   c0026240 <__cmpsf2>
c0026348:	83 c4 20             	add    esp,0x20
c002634b:	c9                   	leave  
c002634c:	c3                   	ret    

c002634d <__gesf2>:
c002634d:	eb c3                	jmp    c0026312 <__gtsf2>

c002634f <__ltsf2>:
c002634f:	eb 84                	jmp    c00262d5 <__eqsf2>

c0026351 <__lesf2>:
c0026351:	eb 82                	jmp    c00262d5 <__eqsf2>

c0026353 <__adddf3>:
c0026353:	55                   	push   ebp
c0026354:	89 e5                	mov    ebp,esp
c0026356:	57                   	push   edi
c0026357:	56                   	push   esi
c0026358:	53                   	push   ebx
c0026359:	83 ec 24             	sub    esp,0x24
c002635c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002635f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026362:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026365:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026368:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002636b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002636e:	89 c8                	mov    eax,ecx
c0026370:	89 ce                	mov    esi,ecx
c0026372:	c1 fe 14             	sar    esi,0x14
c0026375:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0026378:	89 fb                	mov    ebx,edi
c002637a:	89 fa                	mov    edx,edi
c002637c:	c1 e2 0b             	shl    edx,0xb
c002637f:	c1 e0 0b             	shl    eax,0xb
c0026382:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026387:	c1 eb 15             	shr    ebx,0x15
c002638a:	09 d8                	or     eax,ebx
c002638c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002638f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0026392:	c1 fe 14             	sar    esi,0x14
c0026395:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0026398:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002639b:	89 f3                	mov    ebx,esi
c002639d:	c1 e3 0b             	shl    ebx,0xb
c00263a0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00263a3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00263a6:	c1 e3 0b             	shl    ebx,0xb
c00263a9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00263af:	c1 ee 15             	shr    esi,0x15
c00263b2:	09 f3                	or     ebx,esi
c00263b4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00263b7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00263ba:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00263bd:	0f 88 5f 02 00 00    	js     c0026622 <__adddf3+0x2cf>
c00263c3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00263c6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00263c9:	85 db                	test   ebx,ebx
c00263cb:	0f 8e c7 00 00 00    	jle    c0026498 <__adddf3+0x145>
c00263d1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00263d8:	75 1a                	jne    c00263f4 <__adddf3+0xa1>
c00263da:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00263dd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00263e0:	0f 84 b2 05 00 00    	je     c0026998 <__adddf3+0x645>
c00263e6:	4b                   	dec    ebx
c00263e7:	75 23                	jne    c002640c <__adddf3+0xb9>
c00263e9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00263ec:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00263ef:	e9 99 00 00 00       	jmp    c002648d <__adddf3+0x13a>
c00263f4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00263f7:	f7 d6                	not    esi
c00263f9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00263ff:	0f 84 93 05 00 00    	je     c0026998 <__adddf3+0x645>
c0026405:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002640c:	83 fb 1f             	cmp    ebx,0x1f
c002640f:	7e 42                	jle    c0026453 <__adddf3+0x100>
c0026411:	83 fb 3f             	cmp    ebx,0x3f
c0026414:	0f 8f 7e 05 00 00    	jg     c0026998 <__adddf3+0x645>
c002641a:	83 e3 1f             	and    ebx,0x1f
c002641d:	89 d9                	mov    ecx,ebx
c002641f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026422:	d3 ef                	shr    edi,cl
c0026424:	31 db                	xor    ebx,ebx
c0026426:	85 c9                	test   ecx,ecx
c0026428:	74 15                	je     c002643f <__adddf3+0xec>
c002642a:	be 20 00 00 00       	mov    esi,0x20
c002642f:	29 ce                	sub    esi,ecx
c0026431:	89 f1                	mov    ecx,esi
c0026433:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026436:	d3 e6                	shl    esi,cl
c0026438:	31 db                	xor    ebx,ebx
c002643a:	85 f6                	test   esi,esi
c002643c:	0f 95 c3             	setne  bl
c002643f:	31 c9                	xor    ecx,ecx
c0026441:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026445:	0f 95 c1             	setne  cl
c0026448:	09 cf                	or     edi,ecx
c002644a:	09 fb                	or     ebx,edi
c002644c:	01 da                	add    edx,ebx
c002644e:	83 d0 00             	adc    eax,0x0
c0026451:	eb 3a                	jmp    c002648d <__adddf3+0x13a>
c0026453:	bf 20 00 00 00       	mov    edi,0x20
c0026458:	29 df                	sub    edi,ebx
c002645a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002645d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026460:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026463:	d3 e6                	shl    esi,cl
c0026465:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026468:	88 d9                	mov    cl,bl
c002646a:	d3 ef                	shr    edi,cl
c002646c:	09 fe                	or     esi,edi
c002646e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026471:	88 d9                	mov    cl,bl
c0026473:	d3 ef                	shr    edi,cl
c0026475:	89 fb                	mov    ebx,edi
c0026477:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002647a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002647d:	d3 e7                	shl    edi,cl
c002647f:	85 ff                	test   edi,edi
c0026481:	0f 95 c1             	setne  cl
c0026484:	0f b6 c9             	movzx  ecx,cl
c0026487:	09 ce                	or     esi,ecx
c0026489:	01 f2                	add    edx,esi
c002648b:	11 d8                	adc    eax,ebx
c002648d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026490:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026493:	e9 52 01 00 00       	jmp    c00265ea <__adddf3+0x297>
c0026498:	0f 84 d5 00 00 00    	je     c0026573 <__adddf3+0x220>
c002649e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00264a1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00264a4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00264a7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00264aa:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00264b1:	75 20                	jne    c00264d3 <__adddf3+0x180>
c00264b3:	89 d6                	mov    esi,edx
c00264b5:	09 c6                	or     esi,eax
c00264b7:	0f 84 db 04 00 00    	je     c0026998 <__adddf3+0x645>
c00264bd:	4b                   	dec    ebx
c00264be:	75 29                	jne    c00264e9 <__adddf3+0x196>
c00264c0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00264c3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00264c6:	01 d1                	add    ecx,edx
c00264c8:	11 c6                	adc    esi,eax
c00264ca:	89 f0                	mov    eax,esi
c00264cc:	89 ca                	mov    edx,ecx
c00264ce:	e9 17 01 00 00       	jmp    c00265ea <__adddf3+0x297>
c00264d3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00264d6:	f7 d6                	not    esi
c00264d8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00264de:	0f 84 b4 04 00 00    	je     c0026998 <__adddf3+0x645>
c00264e4:	0d 00 00 00 80       	or     eax,0x80000000
c00264e9:	83 fb 1f             	cmp    ebx,0x1f
c00264ec:	7e 48                	jle    c0026536 <__adddf3+0x1e3>
c00264ee:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00264f1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00264f4:	83 fb 3f             	cmp    ebx,0x3f
c00264f7:	0f 8f 9b 04 00 00    	jg     c0026998 <__adddf3+0x645>
c00264fd:	83 e3 1f             	and    ebx,0x1f
c0026500:	89 d9                	mov    ecx,ebx
c0026502:	89 c7                	mov    edi,eax
c0026504:	d3 ef                	shr    edi,cl
c0026506:	31 db                	xor    ebx,ebx
c0026508:	85 c9                	test   ecx,ecx
c002650a:	74 12                	je     c002651e <__adddf3+0x1cb>
c002650c:	be 20 00 00 00       	mov    esi,0x20
c0026511:	29 ce                	sub    esi,ecx
c0026513:	89 f1                	mov    ecx,esi
c0026515:	d3 e0                	shl    eax,cl
c0026517:	31 db                	xor    ebx,ebx
c0026519:	85 c0                	test   eax,eax
c002651b:	0f 95 c3             	setne  bl
c002651e:	31 c0                	xor    eax,eax
c0026520:	85 d2                	test   edx,edx
c0026522:	0f 95 c0             	setne  al
c0026525:	09 c7                	or     edi,eax
c0026527:	09 fb                	or     ebx,edi
c0026529:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002652c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002652f:	01 da                	add    edx,ebx
c0026531:	83 d6 00             	adc    esi,0x0
c0026534:	eb 39                	jmp    c002656f <__adddf3+0x21c>
c0026536:	be 20 00 00 00       	mov    esi,0x20
c002653b:	29 de                	sub    esi,ebx
c002653d:	89 c7                	mov    edi,eax
c002653f:	89 f1                	mov    ecx,esi
c0026541:	d3 e7                	shl    edi,cl
c0026543:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026546:	89 d7                	mov    edi,edx
c0026548:	88 d9                	mov    cl,bl
c002654a:	d3 ef                	shr    edi,cl
c002654c:	89 f9                	mov    ecx,edi
c002654e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026551:	09 cf                	or     edi,ecx
c0026553:	88 d9                	mov    cl,bl
c0026555:	d3 e8                	shr    eax,cl
c0026557:	89 f1                	mov    ecx,esi
c0026559:	d3 e2                	shl    edx,cl
c002655b:	85 d2                	test   edx,edx
c002655d:	0f 95 c2             	setne  dl
c0026560:	0f b6 d2             	movzx  edx,dl
c0026563:	09 d7                	or     edi,edx
c0026565:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026568:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002656b:	01 fa                	add    edx,edi
c002656d:	11 c6                	adc    esi,eax
c002656f:	89 f0                	mov    eax,esi
c0026571:	eb 77                	jmp    c00265ea <__adddf3+0x297>
c0026573:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026576:	46                   	inc    esi
c0026577:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002657a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026580:	75 41                	jne    c00265c3 <__adddf3+0x270>
c0026582:	89 d3                	mov    ebx,edx
c0026584:	09 c3                	or     ebx,eax
c0026586:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002658d:	75 27                	jne    c00265b6 <__adddf3+0x263>
c002658f:	85 db                	test   ebx,ebx
c0026591:	0f 84 fb 03 00 00    	je     c0026992 <__adddf3+0x63f>
c0026597:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002659a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002659d:	0f 84 f5 03 00 00    	je     c0026998 <__adddf3+0x645>
c00265a3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00265a6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00265a9:	85 c0                	test   eax,eax
c00265ab:	0f 89 91 03 00 00    	jns    c0026942 <__adddf3+0x5ef>
c00265b1:	e9 85 03 00 00       	jmp    c002693b <__adddf3+0x5e8>
c00265b6:	85 db                	test   ebx,ebx
c00265b8:	0f 85 da 03 00 00    	jne    c0026998 <__adddf3+0x645>
c00265be:	e9 cf 03 00 00       	jmp    c0026992 <__adddf3+0x63f>
c00265c3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00265c6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00265c9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00265cc:	f7 d1                	not    ecx
c00265ce:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00265d4:	0f 84 70 03 00 00    	je     c002694a <__adddf3+0x5f7>
c00265da:	d1 ea                	shr    edx,1
c00265dc:	89 c1                	mov    ecx,eax
c00265de:	c1 e1 1f             	shl    ecx,0x1f
c00265e1:	09 ca                	or     edx,ecx
c00265e3:	d1 e8                	shr    eax,1
c00265e5:	e9 6f 03 00 00       	jmp    c0026959 <__adddf3+0x606>
c00265ea:	85 c0                	test   eax,eax
c00265ec:	0f 89 67 03 00 00    	jns    c0026959 <__adddf3+0x606>
c00265f2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00265f5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00265f8:	f7 d1                	not    ecx
c00265fa:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026600:	0f 84 44 03 00 00    	je     c002694a <__adddf3+0x5f7>
c0026606:	89 d1                	mov    ecx,edx
c0026608:	d1 e9                	shr    ecx,1
c002660a:	83 e2 01             	and    edx,0x1
c002660d:	09 ca                	or     edx,ecx
c002660f:	89 c1                	mov    ecx,eax
c0026611:	c1 e1 1f             	shl    ecx,0x1f
c0026614:	09 ca                	or     edx,ecx
c0026616:	d1 e8                	shr    eax,1
c0026618:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002661d:	e9 37 03 00 00       	jmp    c0026959 <__adddf3+0x606>
c0026622:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026625:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002662b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002662e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026631:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026637:	29 de                	sub    esi,ebx
c0026639:	85 f6                	test   esi,esi
c002663b:	0f 8e bd 00 00 00    	jle    c00266fe <__adddf3+0x3ab>
c0026641:	85 db                	test   ebx,ebx
c0026643:	75 17                	jne    c002665c <__adddf3+0x309>
c0026645:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026648:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002664b:	0f 84 47 03 00 00    	je     c0026998 <__adddf3+0x645>
c0026651:	4e                   	dec    esi
c0026652:	75 20                	jne    c0026674 <__adddf3+0x321>
c0026654:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026657:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002665a:	eb 5b                	jmp    c00266b7 <__adddf3+0x364>
c002665c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002665f:	f7 d3                	not    ebx
c0026661:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026667:	0f 84 2b 03 00 00    	je     c0026998 <__adddf3+0x645>
c002666d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026674:	83 fe 1f             	cmp    esi,0x1f
c0026677:	7e 49                	jle    c00266c2 <__adddf3+0x36f>
c0026679:	83 fe 3f             	cmp    esi,0x3f
c002667c:	0f 8f 16 03 00 00    	jg     c0026998 <__adddf3+0x645>
c0026682:	83 e6 1f             	and    esi,0x1f
c0026685:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026688:	89 f1                	mov    ecx,esi
c002668a:	d3 ef                	shr    edi,cl
c002668c:	31 db                	xor    ebx,ebx
c002668e:	85 f6                	test   esi,esi
c0026690:	74 13                	je     c00266a5 <__adddf3+0x352>
c0026692:	b9 20 00 00 00       	mov    ecx,0x20
c0026697:	29 f1                	sub    ecx,esi
c0026699:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002669c:	d3 e6                	shl    esi,cl
c002669e:	31 db                	xor    ebx,ebx
c00266a0:	85 f6                	test   esi,esi
c00266a2:	0f 95 c3             	setne  bl
c00266a5:	31 c9                	xor    ecx,ecx
c00266a7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00266ab:	0f 95 c1             	setne  cl
c00266ae:	09 cf                	or     edi,ecx
c00266b0:	09 fb                	or     ebx,edi
c00266b2:	29 da                	sub    edx,ebx
c00266b4:	83 d8 00             	sbb    eax,0x0
c00266b7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00266ba:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00266bd:	e9 aa 01 00 00       	jmp    c002686c <__adddf3+0x519>
c00266c2:	bf 20 00 00 00       	mov    edi,0x20
c00266c7:	29 f7                	sub    edi,esi
c00266c9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00266cc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00266cf:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00266d2:	d3 e3                	shl    ebx,cl
c00266d4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00266d7:	89 f1                	mov    ecx,esi
c00266d9:	d3 ef                	shr    edi,cl
c00266db:	09 fb                	or     ebx,edi
c00266dd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00266e0:	89 f1                	mov    ecx,esi
c00266e2:	d3 ef                	shr    edi,cl
c00266e4:	89 fe                	mov    esi,edi
c00266e6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00266e9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00266ec:	d3 e7                	shl    edi,cl
c00266ee:	85 ff                	test   edi,edi
c00266f0:	0f 95 c1             	setne  cl
c00266f3:	0f b6 c9             	movzx  ecx,cl
c00266f6:	09 cb                	or     ebx,ecx
c00266f8:	29 da                	sub    edx,ebx
c00266fa:	19 f0                	sbb    eax,esi
c00266fc:	eb b9                	jmp    c00266b7 <__adddf3+0x364>
c00266fe:	0f 84 cd 00 00 00    	je     c00267d1 <__adddf3+0x47e>
c0026704:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0026707:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002670a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002670d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026711:	75 1b                	jne    c002672e <__adddf3+0x3db>
c0026713:	89 d6                	mov    esi,edx
c0026715:	09 c6                	or     esi,eax
c0026717:	0f 84 7b 02 00 00    	je     c0026998 <__adddf3+0x645>
c002671d:	4b                   	dec    ebx
c002671e:	75 24                	jne    c0026744 <__adddf3+0x3f1>
c0026720:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026723:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026726:	29 d1                	sub    ecx,edx
c0026728:	19 c6                	sbb    esi,eax
c002672a:	89 ca                	mov    edx,ecx
c002672c:	eb 61                	jmp    c002678f <__adddf3+0x43c>
c002672e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026731:	f7 d6                	not    esi
c0026733:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026739:	0f 84 59 02 00 00    	je     c0026998 <__adddf3+0x645>
c002673f:	0d 00 00 00 80       	or     eax,0x80000000
c0026744:	83 fb 1f             	cmp    ebx,0x1f
c0026747:	7e 4d                	jle    c0026796 <__adddf3+0x443>
c0026749:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002674c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002674f:	83 fb 3f             	cmp    ebx,0x3f
c0026752:	0f 8f 40 02 00 00    	jg     c0026998 <__adddf3+0x645>
c0026758:	83 e3 1f             	and    ebx,0x1f
c002675b:	89 d9                	mov    ecx,ebx
c002675d:	89 c7                	mov    edi,eax
c002675f:	d3 ef                	shr    edi,cl
c0026761:	31 db                	xor    ebx,ebx
c0026763:	85 c9                	test   ecx,ecx
c0026765:	74 12                	je     c0026779 <__adddf3+0x426>
c0026767:	be 20 00 00 00       	mov    esi,0x20
c002676c:	29 ce                	sub    esi,ecx
c002676e:	89 f1                	mov    ecx,esi
c0026770:	d3 e0                	shl    eax,cl
c0026772:	31 db                	xor    ebx,ebx
c0026774:	85 c0                	test   eax,eax
c0026776:	0f 95 c3             	setne  bl
c0026779:	31 c0                	xor    eax,eax
c002677b:	85 d2                	test   edx,edx
c002677d:	0f 95 c0             	setne  al
c0026780:	09 c7                	or     edi,eax
c0026782:	09 fb                	or     ebx,edi
c0026784:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026787:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002678a:	29 da                	sub    edx,ebx
c002678c:	83 de 00             	sbb    esi,0x0
c002678f:	89 f0                	mov    eax,esi
c0026791:	e9 d6 00 00 00       	jmp    c002686c <__adddf3+0x519>
c0026796:	be 20 00 00 00       	mov    esi,0x20
c002679b:	29 de                	sub    esi,ebx
c002679d:	89 c7                	mov    edi,eax
c002679f:	89 f1                	mov    ecx,esi
c00267a1:	d3 e7                	shl    edi,cl
c00267a3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00267a6:	89 d7                	mov    edi,edx
c00267a8:	88 d9                	mov    cl,bl
c00267aa:	d3 ef                	shr    edi,cl
c00267ac:	89 f9                	mov    ecx,edi
c00267ae:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00267b1:	09 cf                	or     edi,ecx
c00267b3:	88 d9                	mov    cl,bl
c00267b5:	d3 e8                	shr    eax,cl
c00267b7:	89 f1                	mov    ecx,esi
c00267b9:	d3 e2                	shl    edx,cl
c00267bb:	85 d2                	test   edx,edx
c00267bd:	0f 95 c2             	setne  dl
c00267c0:	0f b6 d2             	movzx  edx,dl
c00267c3:	09 d7                	or     edi,edx
c00267c5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00267c8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00267cb:	29 fa                	sub    edx,edi
c00267cd:	19 c6                	sbb    esi,eax
c00267cf:	eb be                	jmp    c002678f <__adddf3+0x43c>
c00267d1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00267d4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00267d7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00267dd:	75 6a                	jne    c0026849 <__adddf3+0x4f6>
c00267df:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00267e3:	75 58                	jne    c002683d <__adddf3+0x4ea>
c00267e5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00267e8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00267eb:	89 d6                	mov    esi,edx
c00267ed:	09 c6                	or     esi,eax
c00267ef:	75 17                	jne    c0026808 <__adddf3+0x4b5>
c00267f1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00267f4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00267f7:	85 db                	test   ebx,ebx
c00267f9:	0f 85 99 01 00 00    	jne    c0026998 <__adddf3+0x645>
c00267ff:	31 ff                	xor    edi,edi
c0026801:	31 c9                	xor    ecx,ecx
c0026803:	e9 90 01 00 00       	jmp    c0026998 <__adddf3+0x645>
c0026808:	85 db                	test   ebx,ebx
c002680a:	0f 84 88 01 00 00    	je     c0026998 <__adddf3+0x645>
c0026810:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026813:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0026816:	85 c0                	test   eax,eax
c0026818:	79 10                	jns    c002682a <__adddf3+0x4d7>
c002681a:	31 c9                	xor    ecx,ecx
c002681c:	f7 da                	neg    edx
c002681e:	0f 95 c1             	setne  cl
c0026821:	01 c8                	add    eax,ecx
c0026823:	f7 d8                	neg    eax
c0026825:	e9 2f 01 00 00       	jmp    c0026959 <__adddf3+0x606>
c002682a:	31 ff                	xor    edi,edi
c002682c:	31 c9                	xor    ecx,ecx
c002682e:	89 c3                	mov    ebx,eax
c0026830:	09 d3                	or     ebx,edx
c0026832:	0f 84 60 01 00 00    	je     c0026998 <__adddf3+0x645>
c0026838:	e9 05 01 00 00       	jmp    c0026942 <__adddf3+0x5ef>
c002683d:	31 ff                	xor    edi,edi
c002683f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026844:	e9 4f 01 00 00       	jmp    c0026998 <__adddf3+0x645>
c0026849:	89 c1                	mov    ecx,eax
c002684b:	89 d0                	mov    eax,edx
c002684d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0026850:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0026853:	89 ca                	mov    edx,ecx
c0026855:	85 c9                	test   ecx,ecx
c0026857:	79 2c                	jns    c0026885 <__adddf3+0x532>
c0026859:	31 c9                	xor    ecx,ecx
c002685b:	f7 d8                	neg    eax
c002685d:	0f 95 c1             	setne  cl
c0026860:	01 ca                	add    edx,ecx
c0026862:	f7 da                	neg    edx
c0026864:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026867:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002686a:	eb 19                	jmp    c0026885 <__adddf3+0x532>
c002686c:	85 c0                	test   eax,eax
c002686e:	0f 89 e5 00 00 00    	jns    c0026959 <__adddf3+0x606>
c0026874:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026879:	89 c1                	mov    ecx,eax
c002687b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002687e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026881:	89 d0                	mov    eax,edx
c0026883:	89 ca                	mov    edx,ecx
c0026885:	85 d2                	test   edx,edx
c0026887:	74 59                	je     c00268e2 <__adddf3+0x58f>
c0026889:	0f bd da             	bsr    ebx,edx
c002688c:	83 f3 1f             	xor    ebx,0x1f
c002688f:	88 d9                	mov    cl,bl
c0026891:	d3 e2                	shl    edx,cl
c0026893:	bf 20 00 00 00       	mov    edi,0x20
c0026898:	89 f9                	mov    ecx,edi
c002689a:	29 d9                	sub    ecx,ebx
c002689c:	89 c6                	mov    esi,eax
c002689e:	d3 ee                	shr    esi,cl
c00268a0:	09 d6                	or     esi,edx
c00268a2:	88 d9                	mov    cl,bl
c00268a4:	d3 e0                	shl    eax,cl
c00268a6:	89 c2                	mov    edx,eax
c00268a8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00268ab:	25 ff 07 00 00       	and    eax,0x7ff
c00268b0:	39 d8                	cmp    eax,ebx
c00268b2:	7f 22                	jg     c00268d6 <__adddf3+0x583>
c00268b4:	29 c3                	sub    ebx,eax
c00268b6:	43                   	inc    ebx
c00268b7:	88 d9                	mov    cl,bl
c00268b9:	d3 ea                	shr    edx,cl
c00268bb:	29 df                	sub    edi,ebx
c00268bd:	89 f9                	mov    ecx,edi
c00268bf:	89 f0                	mov    eax,esi
c00268c1:	d3 e0                	shl    eax,cl
c00268c3:	09 c2                	or     edx,eax
c00268c5:	89 f0                	mov    eax,esi
c00268c7:	88 d9                	mov    cl,bl
c00268c9:	d3 e8                	shr    eax,cl
c00268cb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00268ce:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00268d4:	eb 6f                	jmp    c0026945 <__adddf3+0x5f2>
c00268d6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00268d9:	29 d8                	sub    eax,ebx
c00268db:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00268de:	89 f0                	mov    eax,esi
c00268e0:	eb 59                	jmp    c002693b <__adddf3+0x5e8>
c00268e2:	85 c0                	test   eax,eax
c00268e4:	74 6a                	je     c0026950 <__adddf3+0x5fd>
c00268e6:	0f bd c8             	bsr    ecx,eax
c00268e9:	83 f1 1f             	xor    ecx,0x1f
c00268ec:	d3 e0                	shl    eax,cl
c00268ee:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00268f1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00268f7:	83 c1 20             	add    ecx,0x20
c00268fa:	39 cb                	cmp    ebx,ecx
c00268fc:	7f 35                	jg     c0026933 <__adddf3+0x5e0>
c00268fe:	29 d9                	sub    ecx,ebx
c0026900:	8d 71 01             	lea    esi,[ecx+0x1]
c0026903:	83 fe 1f             	cmp    esi,0x1f
c0026906:	7e 09                	jle    c0026911 <__adddf3+0x5be>
c0026908:	83 e9 1f             	sub    ecx,0x1f
c002690b:	d3 e8                	shr    eax,cl
c002690d:	89 c3                	mov    ebx,eax
c002690f:	eb 11                	jmp    c0026922 <__adddf3+0x5cf>
c0026911:	b9 20 00 00 00       	mov    ecx,0x20
c0026916:	29 f1                	sub    ecx,esi
c0026918:	89 c3                	mov    ebx,eax
c002691a:	d3 e3                	shl    ebx,cl
c002691c:	89 f1                	mov    ecx,esi
c002691e:	d3 e8                	shr    eax,cl
c0026920:	89 c2                	mov    edx,eax
c0026922:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026925:	25 00 f8 ff ff       	and    eax,0xfffff800
c002692a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002692d:	89 d0                	mov    eax,edx
c002692f:	89 da                	mov    edx,ebx
c0026931:	eb 26                	jmp    c0026959 <__adddf3+0x606>
c0026933:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026936:	29 cf                	sub    edi,ecx
c0026938:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002693b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026940:	eb 17                	jmp    c0026959 <__adddf3+0x606>
c0026942:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026945:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026948:	eb 0f                	jmp    c0026959 <__adddf3+0x606>
c002694a:	31 d2                	xor    edx,edx
c002694c:	31 c0                	xor    eax,eax
c002694e:	eb 09                	jmp    c0026959 <__adddf3+0x606>
c0026950:	89 c2                	mov    edx,eax
c0026952:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0026959:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002695c:	c1 e1 14             	shl    ecx,0x14
c002695f:	89 c3                	mov    ebx,eax
c0026961:	c1 eb 0b             	shr    ebx,0xb
c0026964:	09 d9                	or     ecx,ebx
c0026966:	89 d3                	mov    ebx,edx
c0026968:	c1 eb 0b             	shr    ebx,0xb
c002696b:	c1 e0 15             	shl    eax,0x15
c002696e:	09 d8                	or     eax,ebx
c0026970:	89 c7                	mov    edi,eax
c0026972:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0026978:	0f 95 c0             	setne  al
c002697b:	89 c6                	mov    esi,eax
c002697d:	09 f3                	or     ebx,esi
c002697f:	83 e3 01             	and    ebx,0x1
c0026982:	c1 ea 0a             	shr    edx,0xa
c0026985:	21 da                	and    edx,ebx
c0026987:	89 f8                	mov    eax,edi
c0026989:	01 d0                	add    eax,edx
c002698b:	83 d1 00             	adc    ecx,0x0
c002698e:	89 c7                	mov    edi,eax
c0026990:	eb 06                	jmp    c0026998 <__adddf3+0x645>
c0026992:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026995:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026998:	89 f8                	mov    eax,edi
c002699a:	89 ca                	mov    edx,ecx
c002699c:	83 c4 24             	add    esp,0x24
c002699f:	5b                   	pop    ebx
c00269a0:	5e                   	pop    esi
c00269a1:	5f                   	pop    edi
c00269a2:	5d                   	pop    ebp
c00269a3:	c3                   	ret    

c00269a4 <__subdf3>:
c00269a4:	55                   	push   ebp
c00269a5:	89 e5                	mov    ebp,esp
c00269a7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00269aa:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00269ad:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00269b3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00269b6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00269b9:	5d                   	pop    ebp
c00269ba:	e9 94 f9 ff ff       	jmp    c0026353 <__adddf3>

c00269bf <__negdf2>:
c00269bf:	55                   	push   ebp
c00269c0:	89 e5                	mov    ebp,esp
c00269c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00269c5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00269c8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00269ce:	5d                   	pop    ebp
c00269cf:	c3                   	ret    

c00269d0 <__muldf3>:
c00269d0:	55                   	push   ebp
c00269d1:	89 e5                	mov    ebp,esp
c00269d3:	57                   	push   edi
c00269d4:	56                   	push   esi
c00269d5:	53                   	push   ebx
c00269d6:	83 ec 24             	sub    esp,0x24
c00269d9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00269dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00269df:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00269e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00269e5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00269e8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00269eb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00269ee:	89 c8                	mov    eax,ecx
c00269f0:	c1 f8 14             	sar    eax,0x14
c00269f3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00269f6:	89 f8                	mov    eax,edi
c00269f8:	89 fb                	mov    ebx,edi
c00269fa:	c1 e3 0b             	shl    ebx,0xb
c00269fd:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0026a00:	c1 e1 0b             	shl    ecx,0xb
c0026a03:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026a09:	c1 e8 15             	shr    eax,0x15
c0026a0c:	09 c1                	or     ecx,eax
c0026a0e:	89 d6                	mov    esi,edx
c0026a10:	89 d0                	mov    eax,edx
c0026a12:	c1 f8 14             	sar    eax,0x14
c0026a15:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026a18:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0026a1b:	89 c3                	mov    ebx,eax
c0026a1d:	c1 e3 0b             	shl    ebx,0xb
c0026a20:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026a23:	c1 e6 0b             	shl    esi,0xb
c0026a26:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0026a2c:	c1 e8 15             	shr    eax,0x15
c0026a2f:	09 c6                	or     esi,eax
c0026a31:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026a34:	25 ff 07 00 00       	and    eax,0x7ff
c0026a39:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026a3c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026a3f:	25 ff 07 00 00       	and    eax,0x7ff
c0026a44:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026a47:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026a4a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0026a4d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0026a54:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026a57:	40                   	inc    eax
c0026a58:	a9 fe 07 00 00       	test   eax,0x7fe
c0026a5d:	0f 85 8d 00 00 00    	jne    c0026af0 <__muldf3+0x120>
c0026a63:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026a66:	09 c8                	or     eax,ecx
c0026a68:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0026a6c:	74 44                	je     c0026ab2 <__muldf3+0xe2>
c0026a6e:	85 c0                	test   eax,eax
c0026a70:	0f 85 31 02 00 00    	jne    c0026ca7 <__muldf3+0x2d7>
c0026a76:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026a79:	40                   	inc    eax
c0026a7a:	a9 fe 07 00 00       	test   eax,0x7fe
c0026a7f:	75 13                	jne    c0026a94 <__muldf3+0xc4>
c0026a81:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026a84:	09 f1                	or     ecx,esi
c0026a86:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026a8a:	74 22                	je     c0026aae <__muldf3+0xde>
c0026a8c:	85 c9                	test   ecx,ecx
c0026a8e:	0f 85 0d 02 00 00    	jne    c0026ca1 <__muldf3+0x2d1>
c0026a94:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0026a98:	0f 89 09 02 00 00    	jns    c0026ca7 <__muldf3+0x2d7>
c0026a9e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026aa1:	05 00 00 00 80       	add    eax,0x80000000
c0026aa6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026aa9:	e9 f9 01 00 00       	jmp    c0026ca7 <__muldf3+0x2d7>
c0026aae:	85 c9                	test   ecx,ecx
c0026ab0:	eb 2e                	jmp    c0026ae0 <__muldf3+0x110>
c0026ab2:	85 c0                	test   eax,eax
c0026ab4:	74 20                	je     c0026ad6 <__muldf3+0x106>
c0026ab6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0026ab9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026abc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026abf:	c1 ef 1f             	shr    edi,0x1f
c0026ac2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0026ac5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0026ac8:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026acb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026ace:	09 f9                	or     ecx,edi
c0026ad0:	78 1e                	js     c0026af0 <__muldf3+0x120>
c0026ad2:	89 c3                	mov    ebx,eax
c0026ad4:	eb e0                	jmp    c0026ab6 <__muldf3+0xe6>
c0026ad6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026ad9:	f7 d0                	not    eax
c0026adb:	a9 ff 07 00 00       	test   eax,0x7ff
c0026ae0:	75 b2                	jne    c0026a94 <__muldf3+0xc4>
c0026ae2:	31 ff                	xor    edi,edi
c0026ae4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0026aeb:	e9 b7 01 00 00       	jmp    c0026ca7 <__muldf3+0x2d7>
c0026af0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026af3:	40                   	inc    eax
c0026af4:	a9 fe 07 00 00       	test   eax,0x7fe
c0026af9:	75 57                	jne    c0026b52 <__muldf3+0x182>
c0026afb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026afe:	09 f0                	or     eax,esi
c0026b00:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026b04:	74 23                	je     c0026b29 <__muldf3+0x159>
c0026b06:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0026b0a:	0f 89 91 01 00 00    	jns    c0026ca1 <__muldf3+0x2d1>
c0026b10:	85 c0                	test   eax,eax
c0026b12:	0f 85 89 01 00 00    	jne    c0026ca1 <__muldf3+0x2d1>
c0026b18:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0026b1b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0026b21:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026b24:	e9 7e 01 00 00       	jmp    c0026ca7 <__muldf3+0x2d7>
c0026b29:	85 c0                	test   eax,eax
c0026b2b:	75 0c                	jne    c0026b39 <__muldf3+0x169>
c0026b2d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0026b31:	0f 89 6a 01 00 00    	jns    c0026ca1 <__muldf3+0x2d1>
c0026b37:	eb df                	jmp    c0026b18 <__muldf3+0x148>
c0026b39:	01 f6                	add    esi,esi
c0026b3b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026b3e:	c1 ea 1f             	shr    edx,0x1f
c0026b41:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026b44:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0026b47:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026b4a:	09 d6                	or     esi,edx
c0026b4c:	78 04                	js     c0026b52 <__muldf3+0x182>
c0026b4e:	89 c3                	mov    ebx,eax
c0026b50:	eb e7                	jmp    c0026b39 <__muldf3+0x169>
c0026b52:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0026b58:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026b5e:	89 c8                	mov    eax,ecx
c0026b60:	f7 e6                	mul    esi
c0026b62:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0026b65:	89 c7                	mov    edi,eax
c0026b67:	89 c8                	mov    eax,ecx
c0026b69:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0026b6c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0026b6f:	89 c1                	mov    ecx,eax
c0026b71:	89 f0                	mov    eax,esi
c0026b73:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0026b76:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0026b79:	89 c6                	mov    esi,eax
c0026b7b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026b7e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0026b81:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026b84:	31 c0                	xor    eax,eax
c0026b86:	01 f1                	add    ecx,esi
c0026b88:	0f 92 c0             	setb   al
c0026b8b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0026b8e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026b91:	83 d6 00             	adc    esi,0x0
c0026b94:	01 c7                	add    edi,eax
c0026b96:	83 d6 00             	adc    esi,0x0
c0026b99:	01 ca                	add    edx,ecx
c0026b9b:	0f 92 c1             	setb   cl
c0026b9e:	0f b6 c9             	movzx  ecx,cl
c0026ba1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0026ba4:	83 d6 00             	adc    esi,0x0
c0026ba7:	01 cf                	add    edi,ecx
c0026ba9:	83 d6 00             	adc    esi,0x0
c0026bac:	31 c9                	xor    ecx,ecx
c0026bae:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0026bb1:	0f 95 c1             	setne  cl
c0026bb4:	09 cf                	or     edi,ecx
c0026bb6:	85 f6                	test   esi,esi
c0026bb8:	78 0c                	js     c0026bc6 <__muldf3+0x1f6>
c0026bba:	01 f6                	add    esi,esi
c0026bbc:	89 f8                	mov    eax,edi
c0026bbe:	c1 e8 1f             	shr    eax,0x1f
c0026bc1:	09 c6                	or     esi,eax
c0026bc3:	01 ff                	add    edi,edi
c0026bc5:	4b                   	dec    ebx
c0026bc6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0026bcc:	0f 8f 85 00 00 00    	jg     c0026c57 <__muldf3+0x287>
c0026bd2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0026bd8:	85 db                	test   ebx,ebx
c0026bda:	0f 8f 84 00 00 00    	jg     c0026c64 <__muldf3+0x294>
c0026be0:	83 fb cc             	cmp    ebx,0xffffffcc
c0026be3:	7c 79                	jl     c0026c5e <__muldf3+0x28e>
c0026be5:	ba 01 00 00 00       	mov    edx,0x1
c0026bea:	29 da                	sub    edx,ebx
c0026bec:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026bf2:	83 fa 1f             	cmp    edx,0x1f
c0026bf5:	7e 30                	jle    c0026c27 <__muldf3+0x257>
c0026bf7:	83 fa 20             	cmp    edx,0x20
c0026bfa:	75 0b                	jne    c0026c07 <__muldf3+0x237>
c0026bfc:	31 c0                	xor    eax,eax
c0026bfe:	85 ff                	test   edi,edi
c0026c00:	0f 95 c0             	setne  al
c0026c03:	89 c7                	mov    edi,eax
c0026c05:	eb 1a                	jmp    c0026c21 <__muldf3+0x251>
c0026c07:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0026c0a:	89 f0                	mov    eax,esi
c0026c0c:	d3 e0                	shl    eax,cl
c0026c0e:	09 f8                	or     eax,edi
c0026c10:	0f 95 c0             	setne  al
c0026c13:	0f b6 c0             	movzx  eax,al
c0026c16:	89 c7                	mov    edi,eax
c0026c18:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0026c1d:	29 d9                	sub    ecx,ebx
c0026c1f:	d3 ee                	shr    esi,cl
c0026c21:	09 f7                	or     edi,esi
c0026c23:	31 db                	xor    ebx,ebx
c0026c25:	eb 3b                	jmp    c0026c62 <__muldf3+0x292>
c0026c27:	83 c3 1f             	add    ebx,0x1f
c0026c2a:	89 f0                	mov    eax,esi
c0026c2c:	88 d9                	mov    cl,bl
c0026c2e:	d3 e0                	shl    eax,cl
c0026c30:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026c33:	89 f8                	mov    eax,edi
c0026c35:	88 d1                	mov    cl,dl
c0026c37:	d3 e8                	shr    eax,cl
c0026c39:	89 c1                	mov    ecx,eax
c0026c3b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026c3e:	09 c8                	or     eax,ecx
c0026c40:	88 d9                	mov    cl,bl
c0026c42:	d3 e7                	shl    edi,cl
c0026c44:	31 db                	xor    ebx,ebx
c0026c46:	85 ff                	test   edi,edi
c0026c48:	0f 95 c3             	setne  bl
c0026c4b:	89 df                	mov    edi,ebx
c0026c4d:	09 c7                	or     edi,eax
c0026c4f:	88 d1                	mov    cl,dl
c0026c51:	d3 ee                	shr    esi,cl
c0026c53:	31 db                	xor    ebx,ebx
c0026c55:	eb 0d                	jmp    c0026c64 <__muldf3+0x294>
c0026c57:	bb ff 07 00 00       	mov    ebx,0x7ff
c0026c5c:	eb 02                	jmp    c0026c60 <__muldf3+0x290>
c0026c5e:	31 db                	xor    ebx,ebx
c0026c60:	31 ff                	xor    edi,edi
c0026c62:	31 f6                	xor    esi,esi
c0026c64:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026c67:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0026c6a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0026c6f:	09 c3                	or     ebx,eax
c0026c71:	c1 e3 14             	shl    ebx,0x14
c0026c74:	89 f0                	mov    eax,esi
c0026c76:	c1 e8 0b             	shr    eax,0xb
c0026c79:	09 c3                	or     ebx,eax
c0026c7b:	89 f8                	mov    eax,edi
c0026c7d:	c1 e8 0b             	shr    eax,0xb
c0026c80:	c1 e6 15             	shl    esi,0x15
c0026c83:	09 c6                	or     esi,eax
c0026c85:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0026c8b:	0f 95 c1             	setne  cl
c0026c8e:	09 c8                	or     eax,ecx
c0026c90:	83 e0 01             	and    eax,0x1
c0026c93:	c1 ef 0a             	shr    edi,0xa
c0026c96:	21 c7                	and    edi,eax
c0026c98:	01 f7                	add    edi,esi
c0026c9a:	83 d3 00             	adc    ebx,0x0
c0026c9d:	89 da                	mov    edx,ebx
c0026c9f:	eb 03                	jmp    c0026ca4 <__muldf3+0x2d4>
c0026ca1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0026ca4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026ca7:	89 f8                	mov    eax,edi
c0026ca9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026cac:	83 c4 24             	add    esp,0x24
c0026caf:	5b                   	pop    ebx
c0026cb0:	5e                   	pop    esi
c0026cb1:	5f                   	pop    edi
c0026cb2:	5d                   	pop    ebp
c0026cb3:	c3                   	ret    

c0026cb4 <__divdf3>:
c0026cb4:	55                   	push   ebp
c0026cb5:	89 e5                	mov    ebp,esp
c0026cb7:	57                   	push   edi
c0026cb8:	56                   	push   esi
c0026cb9:	53                   	push   ebx
c0026cba:	83 ec 2c             	sub    esp,0x2c
c0026cbd:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026cc0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026cc3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026cc6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026cc9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026ccc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026ccf:	89 ce                	mov    esi,ecx
c0026cd1:	89 c8                	mov    eax,ecx
c0026cd3:	c1 f8 14             	sar    eax,0x14
c0026cd6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026cd9:	89 f8                	mov    eax,edi
c0026cdb:	89 fb                	mov    ebx,edi
c0026cdd:	c1 e3 0b             	shl    ebx,0xb
c0026ce0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0026ce3:	c1 e6 0b             	shl    esi,0xb
c0026ce6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0026cec:	c1 e8 15             	shr    eax,0x15
c0026cef:	09 c6                	or     esi,eax
c0026cf1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0026cf4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026cf7:	89 c2                	mov    edx,eax
c0026cf9:	c1 fa 14             	sar    edx,0x14
c0026cfc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0026cff:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0026d02:	89 de                	mov    esi,ebx
c0026d04:	c1 e6 0b             	shl    esi,0xb
c0026d07:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0026d0a:	c1 e0 0b             	shl    eax,0xb
c0026d0d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026d12:	c1 eb 15             	shr    ebx,0x15
c0026d15:	09 d8                	or     eax,ebx
c0026d17:	89 c2                	mov    edx,eax
c0026d19:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026d1c:	25 ff 07 00 00       	and    eax,0x7ff
c0026d21:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026d24:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026d27:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026d2d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0026d30:	29 d8                	sub    eax,ebx
c0026d32:	05 ff 03 00 00       	add    eax,0x3ff
c0026d37:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026d3a:	46                   	inc    esi
c0026d3b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026d41:	0f 85 a5 00 00 00    	jne    c0026dec <__divdf3+0x138>
c0026d47:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026d4a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0026d4d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0026d51:	74 2a                	je     c0026d7d <__divdf3+0xc9>
c0026d53:	85 f6                	test   esi,esi
c0026d55:	0f 85 cc 02 00 00    	jne    c0027027 <__divdf3+0x373>
c0026d5b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026d5e:	40                   	inc    eax
c0026d5f:	a9 fe 07 00 00       	test   eax,0x7fe
c0026d64:	75 26                	jne    c0026d8c <__divdf3+0xd8>
c0026d66:	85 db                	test   ebx,ebx
c0026d68:	74 22                	je     c0026d8c <__divdf3+0xd8>
c0026d6a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026d6d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026d70:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026d73:	09 d0                	or     eax,edx
c0026d75:	0f 85 ac 02 00 00    	jne    c0027027 <__divdf3+0x373>
c0026d7b:	eb 63                	jmp    c0026de0 <__divdf3+0x12c>
c0026d7d:	85 f6                	test   esi,esi
c0026d7f:	75 22                	jne    c0026da3 <__divdf3+0xef>
c0026d81:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026d84:	40                   	inc    eax
c0026d85:	a9 fe 07 00 00       	test   eax,0x7fe
c0026d8a:	74 36                	je     c0026dc2 <__divdf3+0x10e>
c0026d8c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026d90:	0f 89 91 02 00 00    	jns    c0027027 <__divdf3+0x373>
c0026d96:	89 f8                	mov    eax,edi
c0026d98:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0026d9e:	e9 80 02 00 00       	jmp    c0027023 <__divdf3+0x36f>
c0026da3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026da6:	01 f6                	add    esi,esi
c0026da8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026dab:	c1 ef 1f             	shr    edi,0x1f
c0026dae:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026db1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0026db4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0026db7:	09 f7                	or     edi,esi
c0026db9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0026dbc:	78 2e                	js     c0026dec <__divdf3+0x138>
c0026dbe:	89 c8                	mov    eax,ecx
c0026dc0:	eb e1                	jmp    c0026da3 <__divdf3+0xef>
c0026dc2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026dc5:	09 d0                	or     eax,edx
c0026dc7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0026dcb:	74 0f                	je     c0026ddc <__divdf3+0x128>
c0026dcd:	85 c0                	test   eax,eax
c0026dcf:	74 bb                	je     c0026d8c <__divdf3+0xd8>
c0026dd1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026dd4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026dd7:	e9 4b 02 00 00       	jmp    c0027027 <__divdf3+0x373>
c0026ddc:	85 c0                	test   eax,eax
c0026dde:	75 ac                	jne    c0026d8c <__divdf3+0xd8>
c0026de0:	31 ff                	xor    edi,edi
c0026de2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026de7:	e9 3b 02 00 00       	jmp    c0027027 <__divdf3+0x373>
c0026dec:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026def:	8d 4f 01             	lea    ecx,[edi+0x1]
c0026df2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0026df8:	75 6b                	jne    c0026e65 <__divdf3+0x1b1>
c0026dfa:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026dfd:	09 d6                	or     esi,edx
c0026dff:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0026e03:	74 28                	je     c0026e2d <__divdf3+0x179>
c0026e05:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026e08:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026e0b:	85 f6                	test   esi,esi
c0026e0d:	0f 85 14 02 00 00    	jne    c0027027 <__divdf3+0x373>
c0026e13:	31 ff                	xor    edi,edi
c0026e15:	31 c9                	xor    ecx,ecx
c0026e17:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026e1a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026e1d:	0f 89 04 02 00 00    	jns    c0027027 <__divdf3+0x373>
c0026e23:	b9 00 00 00 80       	mov    ecx,0x80000000
c0026e28:	e9 fa 01 00 00       	jmp    c0027027 <__divdf3+0x373>
c0026e2d:	85 f6                	test   esi,esi
c0026e2f:	75 1b                	jne    c0026e4c <__divdf3+0x198>
c0026e31:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026e34:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026e37:	25 00 00 00 80       	and    eax,0x80000000
c0026e3c:	31 c9                	xor    ecx,ecx
c0026e3e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0026e43:	89 cf                	mov    edi,ecx
c0026e45:	89 c1                	mov    ecx,eax
c0026e47:	e9 db 01 00 00       	jmp    c0027027 <__divdf3+0x373>
c0026e4c:	01 d2                	add    edx,edx
c0026e4e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026e51:	c1 eb 1f             	shr    ebx,0x1f
c0026e54:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026e57:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0026e5a:	8d 48 01             	lea    ecx,[eax+0x1]
c0026e5d:	09 da                	or     edx,ebx
c0026e5f:	78 04                	js     c0026e65 <__divdf3+0x1b1>
c0026e61:	89 c8                	mov    eax,ecx
c0026e63:	eb e7                	jmp    c0026e4c <__divdf3+0x198>
c0026e65:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026e68:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026e6e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e74:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0026e77:	39 d6                	cmp    esi,edx
c0026e79:	77 0d                	ja     c0026e88 <__divdf3+0x1d4>
c0026e7b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026e7e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0026e81:	72 1b                	jb     c0026e9e <__divdf3+0x1ea>
c0026e83:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0026e86:	75 16                	jne    c0026e9e <__divdf3+0x1ea>
c0026e88:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026e8b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026e8e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0026e91:	83 de 00             	sbb    esi,0x0
c0026e94:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0026e97:	ba 01 00 00 00       	mov    edx,0x1
c0026e9c:	eb 02                	jmp    c0026ea0 <__divdf3+0x1ec>
c0026e9e:	31 d2                	xor    edx,edx
c0026ea0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0026ea7:	31 ff                	xor    edi,edi
c0026ea9:	01 ff                	add    edi,edi
c0026eab:	89 d1                	mov    ecx,edx
c0026ead:	c1 e9 1f             	shr    ecx,0x1f
c0026eb0:	09 cf                	or     edi,ecx
c0026eb2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0026eb5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0026eb8:	89 da                	mov    edx,ebx
c0026eba:	89 f3                	mov    ebx,esi
c0026ebc:	8d 34 36             	lea    esi,[esi+esi*1]
c0026ebf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026ec2:	c1 e9 1f             	shr    ecx,0x1f
c0026ec5:	09 ce                	or     esi,ecx
c0026ec7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026eca:	01 c9                	add    ecx,ecx
c0026ecc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0026ecf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026ed2:	85 db                	test   ebx,ebx
c0026ed4:	78 29                	js     c0026eff <__divdf3+0x24b>
c0026ed6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0026ed9:	72 07                	jb     c0026ee2 <__divdf3+0x22e>
c0026edb:	75 3c                	jne    c0026f19 <__divdf3+0x265>
c0026edd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026ee0:	77 37                	ja     c0026f19 <__divdf3+0x265>
c0026ee2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026ee5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0026ee8:	31 d2                	xor    edx,edx
c0026eea:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0026eed:	0f 97 c2             	seta   dl
c0026ef0:	29 d6                	sub    esi,edx
c0026ef2:	89 d9                	mov    ecx,ebx
c0026ef4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0026ef7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026efa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026efd:	eb 17                	jmp    c0026f16 <__divdf3+0x262>
c0026eff:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026f02:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026f05:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026f08:	0f 97 c1             	seta   cl
c0026f0b:	0f b6 c9             	movzx  ecx,cl
c0026f0e:	29 ce                	sub    esi,ecx
c0026f10:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0026f13:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0026f16:	83 ca 01             	or     edx,0x1
c0026f19:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0026f1c:	75 8b                	jne    c0026ea9 <__divdf3+0x1f5>
c0026f1e:	c1 e7 09             	shl    edi,0x9
c0026f21:	89 d1                	mov    ecx,edx
c0026f23:	c1 e9 17             	shr    ecx,0x17
c0026f26:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026f29:	09 f3                	or     ebx,esi
c0026f2b:	0f 95 c3             	setne  bl
c0026f2e:	0f b6 db             	movzx  ebx,bl
c0026f31:	c1 e2 09             	shl    edx,0x9
c0026f34:	09 d3                	or     ebx,edx
c0026f36:	89 ca                	mov    edx,ecx
c0026f38:	09 fa                	or     edx,edi
c0026f3a:	78 0c                	js     c0026f48 <__divdf3+0x294>
c0026f3c:	01 d2                	add    edx,edx
c0026f3e:	89 d9                	mov    ecx,ebx
c0026f40:	c1 e9 1f             	shr    ecx,0x1f
c0026f43:	09 ca                	or     edx,ecx
c0026f45:	01 db                	add    ebx,ebx
c0026f47:	48                   	dec    eax
c0026f48:	3d fe 07 00 00       	cmp    eax,0x7fe
c0026f4d:	0f 8f 83 00 00 00    	jg     c0026fd6 <__divdf3+0x322>
c0026f53:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026f59:	85 c0                	test   eax,eax
c0026f5b:	0f 8f 82 00 00 00    	jg     c0026fe3 <__divdf3+0x32f>
c0026f61:	83 f8 cc             	cmp    eax,0xffffffcc
c0026f64:	7c 77                	jl     c0026fdd <__divdf3+0x329>
c0026f66:	be 01 00 00 00       	mov    esi,0x1
c0026f6b:	29 c6                	sub    esi,eax
c0026f6d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026f73:	83 fe 1f             	cmp    esi,0x1f
c0026f76:	7e 2f                	jle    c0026fa7 <__divdf3+0x2f3>
c0026f78:	83 fe 20             	cmp    esi,0x20
c0026f7b:	75 0a                	jne    c0026f87 <__divdf3+0x2d3>
c0026f7d:	85 db                	test   ebx,ebx
c0026f7f:	0f 95 c3             	setne  bl
c0026f82:	0f b6 db             	movzx  ebx,bl
c0026f85:	eb 1a                	jmp    c0026fa1 <__divdf3+0x2ed>
c0026f87:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0026f8a:	89 d7                	mov    edi,edx
c0026f8c:	d3 e7                	shl    edi,cl
c0026f8e:	89 f9                	mov    ecx,edi
c0026f90:	09 d9                	or     ecx,ebx
c0026f92:	0f 95 c3             	setne  bl
c0026f95:	0f b6 db             	movzx  ebx,bl
c0026f98:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0026f9d:	29 c1                	sub    ecx,eax
c0026f9f:	d3 ea                	shr    edx,cl
c0026fa1:	09 d3                	or     ebx,edx
c0026fa3:	31 c0                	xor    eax,eax
c0026fa5:	eb 3a                	jmp    c0026fe1 <__divdf3+0x32d>
c0026fa7:	83 c0 1f             	add    eax,0x1f
c0026faa:	89 d7                	mov    edi,edx
c0026fac:	88 c1                	mov    cl,al
c0026fae:	d3 e7                	shl    edi,cl
c0026fb0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026fb3:	89 df                	mov    edi,ebx
c0026fb5:	89 f1                	mov    ecx,esi
c0026fb7:	d3 ef                	shr    edi,cl
c0026fb9:	89 f9                	mov    ecx,edi
c0026fbb:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026fbe:	09 cf                	or     edi,ecx
c0026fc0:	88 c1                	mov    cl,al
c0026fc2:	d3 e3                	shl    ebx,cl
c0026fc4:	85 db                	test   ebx,ebx
c0026fc6:	0f 95 c3             	setne  bl
c0026fc9:	0f b6 db             	movzx  ebx,bl
c0026fcc:	09 fb                	or     ebx,edi
c0026fce:	89 f1                	mov    ecx,esi
c0026fd0:	d3 ea                	shr    edx,cl
c0026fd2:	31 c0                	xor    eax,eax
c0026fd4:	eb 0d                	jmp    c0026fe3 <__divdf3+0x32f>
c0026fd6:	b8 ff 07 00 00       	mov    eax,0x7ff
c0026fdb:	eb 02                	jmp    c0026fdf <__divdf3+0x32b>
c0026fdd:	31 c0                	xor    eax,eax
c0026fdf:	31 db                	xor    ebx,ebx
c0026fe1:	31 d2                	xor    edx,edx
c0026fe3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0026fe6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0026fe9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0026fef:	09 c8                	or     eax,ecx
c0026ff1:	c1 e0 14             	shl    eax,0x14
c0026ff4:	89 d1                	mov    ecx,edx
c0026ff6:	c1 e9 0b             	shr    ecx,0xb
c0026ff9:	09 c8                	or     eax,ecx
c0026ffb:	89 c6                	mov    esi,eax
c0026ffd:	89 d9                	mov    ecx,ebx
c0026fff:	c1 e9 0b             	shr    ecx,0xb
c0027002:	c1 e2 15             	shl    edx,0x15
c0027005:	09 ca                	or     edx,ecx
c0027007:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002700d:	0f 95 c0             	setne  al
c0027010:	09 c1                	or     ecx,eax
c0027012:	83 e1 01             	and    ecx,0x1
c0027015:	c1 eb 0a             	shr    ebx,0xa
c0027018:	21 cb                	and    ebx,ecx
c002701a:	01 d3                	add    ebx,edx
c002701c:	89 d8                	mov    eax,ebx
c002701e:	83 d6 00             	adc    esi,0x0
c0027021:	89 f2                	mov    edx,esi
c0027023:	89 c7                	mov    edi,eax
c0027025:	89 d1                	mov    ecx,edx
c0027027:	89 f8                	mov    eax,edi
c0027029:	89 ca                	mov    edx,ecx
c002702b:	83 c4 2c             	add    esp,0x2c
c002702e:	5b                   	pop    ebx
c002702f:	5e                   	pop    esi
c0027030:	5f                   	pop    edi
c0027031:	5d                   	pop    ebp
c0027032:	c3                   	ret    

c0027033 <__floatsidf>:
c0027033:	55                   	push   ebp
c0027034:	89 e5                	mov    ebp,esp
c0027036:	56                   	push   esi
c0027037:	53                   	push   ebx
c0027038:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002703b:	85 db                	test   ebx,ebx
c002703d:	7e 15                	jle    c0027054 <__floatsidf+0x21>
c002703f:	0f bd cb             	bsr    ecx,ebx
c0027042:	83 f1 1f             	xor    ecx,0x1f
c0027045:	d3 e3                	shl    ebx,cl
c0027047:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002704d:	b8 1e 04 00 00       	mov    eax,0x41e
c0027052:	eb 21                	jmp    c0027075 <__floatsidf+0x42>
c0027054:	b8 00 00 00 00       	mov    eax,0x0
c0027059:	ba 00 00 00 00       	mov    edx,0x0
c002705e:	74 2a                	je     c002708a <__floatsidf+0x57>
c0027060:	f7 db                	neg    ebx
c0027062:	0f bd cb             	bsr    ecx,ebx
c0027065:	83 f1 1f             	xor    ecx,0x1f
c0027068:	d3 e3                	shl    ebx,cl
c002706a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027070:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027075:	29 c8                	sub    eax,ecx
c0027077:	c1 e0 14             	shl    eax,0x14
c002707a:	89 c1                	mov    ecx,eax
c002707c:	89 de                	mov    esi,ebx
c002707e:	c1 ee 0b             	shr    esi,0xb
c0027081:	09 f1                	or     ecx,esi
c0027083:	89 ca                	mov    edx,ecx
c0027085:	c1 e3 15             	shl    ebx,0x15
c0027088:	89 d8                	mov    eax,ebx
c002708a:	5b                   	pop    ebx
c002708b:	5e                   	pop    esi
c002708c:	5d                   	pop    ebp
c002708d:	c3                   	ret    

c002708e <__floatunsidf>:
c002708e:	55                   	push   ebp
c002708f:	89 e5                	mov    ebp,esp
c0027091:	56                   	push   esi
c0027092:	53                   	push   ebx
c0027093:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027096:	85 db                	test   ebx,ebx
c0027098:	74 2a                	je     c00270c4 <__floatunsidf+0x36>
c002709a:	0f bd cb             	bsr    ecx,ebx
c002709d:	83 f1 1f             	xor    ecx,0x1f
c00270a0:	d3 e3                	shl    ebx,cl
c00270a2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00270a8:	b8 1e 04 00 00       	mov    eax,0x41e
c00270ad:	29 c8                	sub    eax,ecx
c00270af:	c1 e0 14             	shl    eax,0x14
c00270b2:	89 c1                	mov    ecx,eax
c00270b4:	89 de                	mov    esi,ebx
c00270b6:	c1 ee 0b             	shr    esi,0xb
c00270b9:	09 f1                	or     ecx,esi
c00270bb:	89 ca                	mov    edx,ecx
c00270bd:	c1 e3 15             	shl    ebx,0x15
c00270c0:	89 d8                	mov    eax,ebx
c00270c2:	eb 04                	jmp    c00270c8 <__floatunsidf+0x3a>
c00270c4:	31 c0                	xor    eax,eax
c00270c6:	31 d2                	xor    edx,edx
c00270c8:	5b                   	pop    ebx
c00270c9:	5e                   	pop    esi
c00270ca:	5d                   	pop    ebp
c00270cb:	c3                   	ret    

c00270cc <__fixdfsi>:
c00270cc:	55                   	push   ebp
c00270cd:	89 e5                	mov    ebp,esp
c00270cf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00270d2:	89 d1                	mov    ecx,edx
c00270d4:	c1 e1 0b             	shl    ecx,0xb
c00270d7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00270dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00270e0:	c1 e8 15             	shr    eax,0x15
c00270e3:	09 c1                	or     ecx,eax
c00270e5:	c1 fa 14             	sar    edx,0x14
c00270e8:	78 1f                	js     c0027109 <__fixdfsi+0x3d>
c00270ea:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00270f0:	31 c0                	xor    eax,eax
c00270f2:	83 fa 1e             	cmp    edx,0x1e
c00270f5:	77 40                	ja     c0027137 <__fixdfsi+0x6b>
c00270f7:	89 c8                	mov    eax,ecx
c00270f9:	0d 00 00 00 80       	or     eax,0x80000000
c00270fe:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027103:	29 d1                	sub    ecx,edx
c0027105:	d3 e8                	shr    eax,cl
c0027107:	eb 2e                	jmp    c0027137 <__fixdfsi+0x6b>
c0027109:	31 c0                	xor    eax,eax
c002710b:	81 c2 01 04 00 00    	add    edx,0x401
c0027111:	78 24                	js     c0027137 <__fixdfsi+0x6b>
c0027113:	83 fa 1e             	cmp    edx,0x1e
c0027116:	7e 09                	jle    c0027121 <__fixdfsi+0x55>
c0027118:	83 fa 1f             	cmp    edx,0x1f
c002711b:	75 18                	jne    c0027135 <__fixdfsi+0x69>
c002711d:	85 c9                	test   ecx,ecx
c002711f:	75 14                	jne    c0027135 <__fixdfsi+0x69>
c0027121:	89 c8                	mov    eax,ecx
c0027123:	0d 00 00 00 80       	or     eax,0x80000000
c0027128:	b9 1f 00 00 00       	mov    ecx,0x1f
c002712d:	29 d1                	sub    ecx,edx
c002712f:	d3 e8                	shr    eax,cl
c0027131:	f7 d8                	neg    eax
c0027133:	eb 02                	jmp    c0027137 <__fixdfsi+0x6b>
c0027135:	31 c0                	xor    eax,eax
c0027137:	5d                   	pop    ebp
c0027138:	c3                   	ret    

c0027139 <__fixunsdfsi>:
c0027139:	55                   	push   ebp
c002713a:	89 e5                	mov    ebp,esp
c002713c:	53                   	push   ebx
c002713d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027140:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027143:	89 d3                	mov    ebx,edx
c0027145:	c1 fb 14             	sar    ebx,0x14
c0027148:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002714e:	31 c0                	xor    eax,eax
c0027150:	83 fb 1f             	cmp    ebx,0x1f
c0027153:	77 1d                	ja     c0027172 <__fixunsdfsi+0x39>
c0027155:	89 d0                	mov    eax,edx
c0027157:	c1 e0 0b             	shl    eax,0xb
c002715a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002715f:	c1 e9 15             	shr    ecx,0x15
c0027162:	09 c8                	or     eax,ecx
c0027164:	0d 00 00 00 80       	or     eax,0x80000000
c0027169:	b9 1f 00 00 00       	mov    ecx,0x1f
c002716e:	29 d9                	sub    ecx,ebx
c0027170:	d3 e8                	shr    eax,cl
c0027172:	5b                   	pop    ebx
c0027173:	5d                   	pop    ebp
c0027174:	c3                   	ret    

c0027175 <__cmpdf2>:
c0027175:	55                   	push   ebp
c0027176:	89 e5                	mov    ebp,esp
c0027178:	57                   	push   edi
c0027179:	56                   	push   esi
c002717a:	53                   	push   ebx
c002717b:	83 ec 0c             	sub    esp,0xc
c002717e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027181:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027184:	89 ca                	mov    edx,ecx
c0027186:	c1 ea 14             	shr    edx,0x14
c0027189:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002718f:	89 cb                	mov    ebx,ecx
c0027191:	c1 fb 1f             	sar    ebx,0x1f
c0027194:	31 da                	xor    edx,ebx
c0027196:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027199:	89 df                	mov    edi,ebx
c002719b:	c1 e7 0b             	shl    edi,0xb
c002719e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00271a1:	c1 e1 0b             	shl    ecx,0xb
c00271a4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00271aa:	c1 eb 15             	shr    ebx,0x15
c00271ad:	09 d9                	or     ecx,ebx
c00271af:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00271b2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00271b5:	89 ce                	mov    esi,ecx
c00271b7:	c1 ee 14             	shr    esi,0x14
c00271ba:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00271c0:	89 cb                	mov    ebx,ecx
c00271c2:	c1 fb 1f             	sar    ebx,0x1f
c00271c5:	31 de                	xor    esi,ebx
c00271c7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00271ca:	89 df                	mov    edi,ebx
c00271cc:	c1 e7 0b             	shl    edi,0xb
c00271cf:	c1 e1 0b             	shl    ecx,0xb
c00271d2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00271d8:	c1 eb 15             	shr    ebx,0x15
c00271db:	09 d9                	or     ecx,ebx
c00271dd:	89 d3                	mov    ebx,edx
c00271df:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00271e5:	43                   	inc    ebx
c00271e6:	83 fb 01             	cmp    ebx,0x1
c00271e9:	77 08                	ja     c00271f3 <__cmpdf2+0x7e>
c00271eb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00271ee:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00271f1:	75 68                	jne    c002725b <__cmpdf2+0xe6>
c00271f3:	89 f3                	mov    ebx,esi
c00271f5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00271fb:	43                   	inc    ebx
c00271fc:	83 fb 01             	cmp    ebx,0x1
c00271ff:	77 06                	ja     c0027207 <__cmpdf2+0x92>
c0027201:	89 fb                	mov    ebx,edi
c0027203:	09 cb                	or     ebx,ecx
c0027205:	75 54                	jne    c002725b <__cmpdf2+0xe6>
c0027207:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002720a:	09 f8                	or     eax,edi
c002720c:	09 c8                	or     eax,ecx
c002720e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0027211:	75 12                	jne    c0027225 <__cmpdf2+0xb0>
c0027213:	8d 42 01             	lea    eax,[edx+0x1]
c0027216:	83 f8 01             	cmp    eax,0x1
c0027219:	77 0a                	ja     c0027225 <__cmpdf2+0xb0>
c002721b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002721e:	31 c0                	xor    eax,eax
c0027220:	83 fb 01             	cmp    ebx,0x1
c0027223:	76 36                	jbe    c002725b <__cmpdf2+0xe6>
c0027225:	b8 01 00 00 00       	mov    eax,0x1
c002722a:	39 f2                	cmp    edx,esi
c002722c:	7f 2d                	jg     c002725b <__cmpdf2+0xe6>
c002722e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027233:	7c 26                	jl     c002725b <__cmpdf2+0xe6>
c0027235:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027238:	77 07                	ja     c0027241 <__cmpdf2+0xcc>
c002723a:	72 16                	jb     c0027252 <__cmpdf2+0xdd>
c002723c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002723f:	76 0a                	jbe    c002724b <__cmpdf2+0xd6>
c0027241:	89 d0                	mov    eax,edx
c0027243:	c1 f8 1f             	sar    eax,0x1f
c0027246:	83 c8 01             	or     eax,0x1
c0027249:	eb 10                	jmp    c002725b <__cmpdf2+0xe6>
c002724b:	b8 00 00 00 00       	mov    eax,0x0
c0027250:	73 09                	jae    c002725b <__cmpdf2+0xe6>
c0027252:	89 d0                	mov    eax,edx
c0027254:	c1 f8 1f             	sar    eax,0x1f
c0027257:	83 e0 02             	and    eax,0x2
c002725a:	48                   	dec    eax
c002725b:	83 c4 0c             	add    esp,0xc
c002725e:	5b                   	pop    ebx
c002725f:	5e                   	pop    esi
c0027260:	5f                   	pop    edi
c0027261:	5d                   	pop    ebp
c0027262:	c3                   	ret    

c0027263 <__eqdf2>:
c0027263:	55                   	push   ebp
c0027264:	89 e5                	mov    ebp,esp
c0027266:	50                   	push   eax
c0027267:	6a 01                	push   0x1
c0027269:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002726c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002726f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027272:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027275:	e8 fb fe ff ff       	call   c0027175 <__cmpdf2>
c002727a:	83 c4 18             	add    esp,0x18
c002727d:	c9                   	leave  
c002727e:	c3                   	ret    

c002727f <__nedf2>:
c002727f:	eb e2                	jmp    c0027263 <__eqdf2>

c0027281 <__gtdf2>:
c0027281:	55                   	push   ebp
c0027282:	89 e5                	mov    ebp,esp
c0027284:	50                   	push   eax
c0027285:	6a ff                	push   0xffffffff
c0027287:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002728a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002728d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027290:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027293:	e8 dd fe ff ff       	call   c0027175 <__cmpdf2>
c0027298:	83 c4 18             	add    esp,0x18
c002729b:	c9                   	leave  
c002729c:	c3                   	ret    

c002729d <__gedf2>:
c002729d:	eb e2                	jmp    c0027281 <__gtdf2>

c002729f <__ltdf2>:
c002729f:	eb c2                	jmp    c0027263 <__eqdf2>

c00272a1 <__ledf2>:
c00272a1:	eb c0                	jmp    c0027263 <__eqdf2>

c00272a3 <__truncdfsf2>:
c00272a3:	55                   	push   ebp
c00272a4:	89 e5                	mov    ebp,esp
c00272a6:	57                   	push   edi
c00272a7:	56                   	push   esi
c00272a8:	53                   	push   ebx
c00272a9:	83 ec 0c             	sub    esp,0xc
c00272ac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00272af:	89 d1                	mov    ecx,edx
c00272b1:	c1 f9 14             	sar    ecx,0x14
c00272b4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00272b7:	89 df                	mov    edi,ebx
c00272b9:	c1 e7 0b             	shl    edi,0xb
c00272bc:	89 d0                	mov    eax,edx
c00272be:	c1 e0 0b             	shl    eax,0xb
c00272c1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00272c6:	c1 eb 15             	shr    ebx,0x15
c00272c9:	09 d8                	or     eax,ebx
c00272cb:	89 cb                	mov    ebx,ecx
c00272cd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00272d3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00272d9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00272df:	0f 86 9e 00 00 00    	jbe    c0027383 <__truncdfsf2+0xe0>
c00272e5:	85 db                	test   ebx,ebx
c00272e7:	75 0a                	jne    c00272f3 <__truncdfsf2+0x50>
c00272e9:	c1 fa 17             	sar    edx,0x17
c00272ec:	30 d2                	xor    dl,dl
c00272ee:	e9 84 00 00 00       	jmp    c0027377 <__truncdfsf2+0xd4>
c00272f3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00272f9:	83 fe 83             	cmp    esi,0xffffff83
c00272fc:	7d 4b                	jge    c0027349 <__truncdfsf2+0xa6>
c00272fe:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0027303:	29 f1                	sub    ecx,esi
c0027305:	83 f9 1f             	cmp    ecx,0x1f
c0027308:	7f 6b                	jg     c0027375 <__truncdfsf2+0xd2>
c002730a:	0d 00 00 00 80       	or     eax,0x80000000
c002730f:	89 c3                	mov    ebx,eax
c0027311:	d3 eb                	shr    ebx,cl
c0027313:	be 01 00 00 00       	mov    esi,0x1
c0027318:	d3 e6                	shl    esi,cl
c002731a:	4e                   	dec    esi
c002731b:	21 f0                	and    eax,esi
c002731d:	09 f8                	or     eax,edi
c002731f:	0f 95 c0             	setne  al
c0027322:	0f b6 c0             	movzx  eax,al
c0027325:	09 c3                	or     ebx,eax
c0027327:	89 d9                	mov    ecx,ebx
c0027329:	c1 e9 08             	shr    ecx,0x8
c002732c:	f6 c3 7f             	test   bl,0x7f
c002732f:	0f 95 c0             	setne  al
c0027332:	09 c8                	or     eax,ecx
c0027334:	83 e0 01             	and    eax,0x1
c0027337:	c1 eb 07             	shr    ebx,0x7
c002733a:	21 c3                	and    ebx,eax
c002733c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0027342:	09 d1                	or     ecx,edx
c0027344:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0027347:	eb 76                	jmp    c00273bf <__truncdfsf2+0x11c>
c0027349:	83 c6 80             	add    esi,0xffffff80
c002734c:	7e 1d                	jle    c002736b <__truncdfsf2+0xc8>
c002734e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0027354:	75 0b                	jne    c0027361 <__truncdfsf2+0xbe>
c0027356:	09 f8                	or     eax,edi
c0027358:	74 09                	je     c0027363 <__truncdfsf2+0xc0>
c002735a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002735f:	eb 02                	jmp    c0027363 <__truncdfsf2+0xc0>
c0027361:	31 c0                	xor    eax,eax
c0027363:	c1 fa 17             	sar    edx,0x17
c0027366:	80 ca ff             	or     dl,0xff
c0027369:	eb 0e                	jmp    c0027379 <__truncdfsf2+0xd6>
c002736b:	c1 fa 1f             	sar    edx,0x1f
c002736e:	c1 e2 08             	shl    edx,0x8
c0027371:	09 ca                	or     edx,ecx
c0027373:	eb 04                	jmp    c0027379 <__truncdfsf2+0xd6>
c0027375:	31 d2                	xor    edx,edx
c0027377:	31 c0                	xor    eax,eax
c0027379:	c1 e2 17             	shl    edx,0x17
c002737c:	c1 e8 08             	shr    eax,0x8
c002737f:	09 d0                	or     eax,edx
c0027381:	eb 3c                	jmp    c00273bf <__truncdfsf2+0x11c>
c0027383:	81 e9 80 03 00 00    	sub    ecx,0x380
c0027389:	89 ca                	mov    edx,ecx
c002738b:	c1 fa 0b             	sar    edx,0xb
c002738e:	c1 e2 08             	shl    edx,0x8
c0027391:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027394:	31 db                	xor    ebx,ebx
c0027396:	85 ff                	test   edi,edi
c0027398:	0f 95 c3             	setne  bl
c002739b:	09 d8                	or     eax,ebx
c002739d:	89 c3                	mov    ebx,eax
c002739f:	c1 eb 08             	shr    ebx,0x8
c00273a2:	a8 7f                	test   al,0x7f
c00273a4:	0f 95 c2             	setne  dl
c00273a7:	89 d6                	mov    esi,edx
c00273a9:	09 de                	or     esi,ebx
c00273ab:	83 e6 01             	and    esi,0x1
c00273ae:	c1 e8 07             	shr    eax,0x7
c00273b1:	21 f0                	and    eax,esi
c00273b3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00273b6:	09 ca                	or     edx,ecx
c00273b8:	c1 e2 17             	shl    edx,0x17
c00273bb:	09 da                	or     edx,ebx
c00273bd:	01 d0                	add    eax,edx
c00273bf:	83 c4 0c             	add    esp,0xc
c00273c2:	5b                   	pop    ebx
c00273c3:	5e                   	pop    esi
c00273c4:	5f                   	pop    edi
c00273c5:	5d                   	pop    ebp
c00273c6:	c3                   	ret    

c00273c7 <__extendsfdf2>:
c00273c7:	55                   	push   ebp
c00273c8:	89 e5                	mov    ebp,esp
c00273ca:	57                   	push   edi
c00273cb:	56                   	push   esi
c00273cc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273cf:	89 d1                	mov    ecx,edx
c00273d1:	c1 f9 17             	sar    ecx,0x17
c00273d4:	c1 e2 08             	shl    edx,0x8
c00273d7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00273dd:	89 c8                	mov    eax,ecx
c00273df:	80 e4 f8             	and    ah,0xf8
c00273e2:	8d 71 01             	lea    esi,[ecx+0x1]
c00273e5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00273eb:	75 27                	jne    c0027414 <__extendsfdf2+0x4d>
c00273ed:	81 e1 ff 00 00 00    	and    ecx,0xff
c00273f3:	75 18                	jne    c002740d <__extendsfdf2+0x46>
c00273f5:	85 d2                	test   edx,edx
c00273f7:	74 20                	je     c0027419 <__extendsfdf2+0x52>
c00273f9:	41                   	inc    ecx
c00273fa:	01 d2                	add    edx,edx
c00273fc:	79 fb                	jns    c00273f9 <__extendsfdf2+0x32>
c00273fe:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027404:	29 c8                	sub    eax,ecx
c0027406:	05 81 03 00 00       	add    eax,0x381
c002740b:	eb 0c                	jmp    c0027419 <__extendsfdf2+0x52>
c002740d:	05 00 07 00 00       	add    eax,0x700
c0027412:	eb 05                	jmp    c0027419 <__extendsfdf2+0x52>
c0027414:	05 80 03 00 00       	add    eax,0x380
c0027419:	c1 e0 14             	shl    eax,0x14
c002741c:	89 c1                	mov    ecx,eax
c002741e:	89 d0                	mov    eax,edx
c0027420:	c1 e8 0b             	shr    eax,0xb
c0027423:	09 c1                	or     ecx,eax
c0027425:	c1 e2 15             	shl    edx,0x15
c0027428:	89 d0                	mov    eax,edx
c002742a:	89 ca                	mov    edx,ecx
c002742c:	5e                   	pop    esi
c002742d:	5f                   	pop    edi
c002742e:	5d                   	pop    ebp
c002742f:	c3                   	ret    

c0027430 <fabs>:
c0027430:	83 ec 0c             	sub    esp,0xc
c0027433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027437:	89 04 24             	mov    DWORD PTR [esp],eax
c002743a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002743e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027443:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027447:	dd 04 24             	fld    QWORD PTR [esp]
c002744a:	83 c4 0c             	add    esp,0xc
c002744d:	c3                   	ret    
c002744e:	66 90                	xchg   ax,ax

c0027450 <lrint>:
c0027450:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027454:	83 ec 04             	sub    esp,0x4
c0027457:	db 1c 24             	fistp  DWORD PTR [esp]
c002745a:	58                   	pop    eax
c002745b:	c3                   	ret    

c002745c <lrintf>:
c002745c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0027460:	83 ec 04             	sub    esp,0x4
c0027463:	db 1c 24             	fistp  DWORD PTR [esp]
c0027466:	58                   	pop    eax
c0027467:	c3                   	ret    

Disassembly of section .init:

c0027468 <_init>:
c0027468:	55                   	push   ebp
c0027469:	89 e5                	mov    ebp,esp
c002746b:	e8 a8 8c fd ff       	call   c0000118 <frame_dummy>
c0027470:	e8 63 e0 ff ff       	call   c00254d8 <__do_global_ctors_aux>
c0027475:	5d                   	pop    ebp
c0027476:	c3                   	ret    

Disassembly of section .fini:

c0027477 <_fini>:
c0027477:	55                   	push   ebp
c0027478:	89 e5                	mov    ebp,esp
c002747a:	e8 29 8c fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002747f:	5d                   	pop    ebp
c0027480:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027482 <Computer::~Computer()>:
c0027482:	83 ec 0c             	sub    esp,0xc
c0027485:	ba 68 8f 02 c0       	mov    edx,0xc0028f68
c002748a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002748e:	89 10                	mov    DWORD PTR [eax],edx
c0027490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027494:	83 ec 0c             	sub    esp,0xc
c0027497:	50                   	push   eax
c0027498:	e8 37 c7 fe ff       	call   c0013bd4 <Device::~Device()>
c002749d:	83 c4 10             	add    esp,0x10
c00274a0:	90                   	nop
c00274a1:	83 c4 0c             	add    esp,0xc
c00274a4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00274a6 <Computer::~Computer()>:
c00274a6:	83 ec 0c             	sub    esp,0xc
c00274a9:	83 ec 0c             	sub    esp,0xc
c00274ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00274b0:	e8 cd ff ff ff       	call   c0027482 <Computer::~Computer()>
c00274b5:	83 c4 10             	add    esp,0x10
c00274b8:	83 ec 08             	sub    esp,0x8
c00274bb:	68 ec 01 00 00       	push   0x1ec
c00274c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00274c4:	e8 32 b3 fe ff       	call   c00127fb <operator delete(void*, unsigned long)>
c00274c9:	83 c4 10             	add    esp,0x10
c00274cc:	83 c4 0c             	add    esp,0xc
c00274cf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00274d0 <idleCommon()>:
c00274d0:	83 ec 0c             	sub    esp,0xc
c00274d3:	e8 82 5c ff ff       	call   c001d15a <lockScheduler()>
c00274d8:	e8 b9 5f ff ff       	call   c001d496 <schedule()>
c00274dd:	83 c4 0c             	add    esp,0xc
c00274e0:	e9 77 5c ff ff       	jmp    c001d15c <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00274e6 <LinkedList<UnixFile>::~LinkedList()>:
c00274e6:	90                   	nop
c00274e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00274e8 <LinkedList<UnixFile>::LinkedList()>:
c00274e8:	83 ec 0c             	sub    esp,0xc
c00274eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00274f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027504:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002750b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002750f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027519:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027524:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002752b:	83 ec 0c             	sub    esp,0xc
c002752e:	68 de 91 02 c0       	push   0xc00291de
c0027533:	e8 a3 b3 fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0027538:	83 c4 10             	add    esp,0x10
c002753b:	90                   	nop
c002753c:	83 c4 0c             	add    esp,0xc
c002753f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027540 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027540:	83 ec 0c             	sub    esp,0xc
c0027543:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027548:	75 10                	jne    c002755a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002754a:	83 ec 0c             	sub    esp,0xc
c002754d:	68 f8 91 02 c0       	push   0xc00291f8
c0027552:	e8 54 26 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c0027557:	83 c4 10             	add    esp,0x10
c002755a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002755e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027560:	85 c0                	test   eax,eax
c0027562:	74 34                	je     c0027598 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027568:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002756b:	85 c0                	test   eax,eax
c002756d:	74 29                	je     c0027598 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002756f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027573:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027576:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002757a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002757d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027581:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027585:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002758c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002758f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027596:	eb 65                	jmp    c00275fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002759c:	8b 00                	mov    eax,DWORD PTR [eax]
c002759e:	85 c0                	test   eax,eax
c00275a0:	75 4b                	jne    c00275ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00275a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00275a9:	85 c0                	test   eax,eax
c00275ab:	75 40                	jne    c00275ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00275ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00275b5:	89 10                	mov    DWORD PTR [eax],edx
c00275b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00275bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00275c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00275c9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00275d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00275d7:	85 c0                	test   eax,eax
c00275d9:	74 22                	je     c00275fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00275db:	83 ec 0c             	sub    esp,0xc
c00275de:	68 1a 92 02 c0       	push   0xc002921a
c00275e3:	e8 c3 25 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c00275e8:	83 c4 10             	add    esp,0x10
c00275eb:	eb 10                	jmp    c00275fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00275ed:	83 ec 0c             	sub    esp,0xc
c00275f0:	68 24 92 02 c0       	push   0xc0029224
c00275f5:	e8 b1 25 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c00275fa:	83 c4 10             	add    esp,0x10
c00275fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027601:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027604:	8d 50 01             	lea    edx,[eax+0x1]
c0027607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002760b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002760e:	90                   	nop
c002760f:	83 c4 0c             	add    esp,0xc
c0027612:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0027614 <LinkedList<UnixFile>::getFirstElement()>:
c0027614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027618:	8b 00                	mov    eax,DWORD PTR [eax]
c002761a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002761c <LinkedList<UnixFile>::removeFirst()>:
c002761c:	83 ec 0c             	sub    esp,0xc
c002761f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027623:	8b 00                	mov    eax,DWORD PTR [eax]
c0027625:	85 c0                	test   eax,eax
c0027627:	75 12                	jne    c002763b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0027629:	83 ec 0c             	sub    esp,0xc
c002762c:	68 30 92 02 c0       	push   0xc0029230
c0027631:	e8 75 25 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c0027636:	83 c4 10             	add    esp,0x10
c0027639:	eb 7e                	jmp    c00276b9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002763b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002763f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027642:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027645:	85 c0                	test   eax,eax
c0027647:	74 10                	je     c0027659 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0027649:	83 ec 0c             	sub    esp,0xc
c002764c:	68 7b 92 02 c0       	push   0xc002927b
c0027651:	e8 55 25 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c0027656:	83 c4 10             	add    esp,0x10
c0027659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002765d:	8b 00                	mov    eax,DWORD PTR [eax]
c002765f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027662:	85 c0                	test   eax,eax
c0027664:	75 33                	jne    c0027699 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002766a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027674:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002767b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002767f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027682:	83 f8 01             	cmp    eax,0x1
c0027685:	74 21                	je     c00276a8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027687:	83 ec 0c             	sub    esp,0xc
c002768a:	68 54 92 02 c0       	push   0xc0029254
c002768f:	e8 17 25 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c0027694:	83 c4 10             	add    esp,0x10
c0027697:	eb 0f                	jmp    c00276a8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027699:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002769d:	8b 00                	mov    eax,DWORD PTR [eax]
c002769f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00276a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276a6:	89 10                	mov    DWORD PTR [eax],edx
c00276a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00276af:	8d 50 ff             	lea    edx,[eax-0x1]
c00276b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00276b9:	83 c4 0c             	add    esp,0xc
c00276bc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00276be <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00276be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00276c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00276c5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00276c6 <DriverlessDevice::~DriverlessDevice()>:
c00276c6:	ba 64 99 02 c0       	mov    edx,0xc0029964
c00276cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00276cf:	89 10                	mov    DWORD PTR [eax],edx
c00276d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00276d5:	50                   	push   eax
c00276d6:	e8 f9 c4 fe ff       	call   c0013bd4 <Device::~Device()>
c00276db:	83 c4 04             	add    esp,0x4
c00276de:	90                   	nop
c00276df:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00276e0 <DriverlessDevice::~DriverlessDevice()>:
c00276e0:	83 ec 0c             	sub    esp,0xc
c00276e3:	83 ec 0c             	sub    esp,0xc
c00276e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276ea:	e8 d7 ff ff ff       	call   c00276c6 <DriverlessDevice::~DriverlessDevice()>
c00276ef:	83 c4 10             	add    esp,0x10
c00276f2:	83 ec 08             	sub    esp,0x8
c00276f5:	68 58 01 00 00       	push   0x158
c00276fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276fe:	e8 f8 b0 fe ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0027703:	83 c4 10             	add    esp,0x10
c0027706:	83 c4 0c             	add    esp,0xc
c0027709:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002770a <LinkedList<Device>::addElement(Device*)>:
c002770a:	83 ec 0c             	sub    esp,0xc
c002770d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027712:	75 10                	jne    c0027724 <LinkedList<Device>::addElement(Device*)+0x1a>
c0027714:	83 ec 0c             	sub    esp,0xc
c0027717:	68 f8 91 02 c0       	push   0xc00291f8
c002771c:	e8 8a 24 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c0027721:	83 c4 10             	add    esp,0x10
c0027724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027728:	8b 00                	mov    eax,DWORD PTR [eax]
c002772a:	85 c0                	test   eax,eax
c002772c:	74 3a                	je     c0027768 <LinkedList<Device>::addElement(Device*)+0x5e>
c002772e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027732:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027735:	85 c0                	test   eax,eax
c0027737:	74 2f                	je     c0027768 <LinkedList<Device>::addElement(Device*)+0x5e>
c0027739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002773d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027740:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027744:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002774a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002774e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027752:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027759:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002775c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027766:	eb 68                	jmp    c00277d0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002776c:	8b 00                	mov    eax,DWORD PTR [eax]
c002776e:	85 c0                	test   eax,eax
c0027770:	75 4e                	jne    c00277c0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0027772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027776:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027779:	85 c0                	test   eax,eax
c002777b:	75 43                	jne    c00277c0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002777d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027785:	89 10                	mov    DWORD PTR [eax],edx
c0027787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002778b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002778f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027796:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027799:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00277a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00277aa:	85 c0                	test   eax,eax
c00277ac:	74 22                	je     c00277d0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00277ae:	83 ec 0c             	sub    esp,0xc
c00277b1:	68 1a 92 02 c0       	push   0xc002921a
c00277b6:	e8 f0 23 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c00277bb:	83 c4 10             	add    esp,0x10
c00277be:	eb 10                	jmp    c00277d0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00277c0:	83 ec 0c             	sub    esp,0xc
c00277c3:	68 24 92 02 c0       	push   0xc0029224
c00277c8:	e8 de 23 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c00277cd:	83 c4 10             	add    esp,0x10
c00277d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00277d7:	8d 50 01             	lea    edx,[eax+0x1]
c00277da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00277e1:	90                   	nop
c00277e2:	83 c4 0c             	add    esp,0xc
c00277e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00277e6 <LinkedList<Device>::LinkedList()>:
c00277e6:	83 ec 0c             	sub    esp,0xc
c00277e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00277f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00277fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027802:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002780d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027817:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002781e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027822:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027829:	83 ec 0c             	sub    esp,0xc
c002782c:	68 de 91 02 c0       	push   0xc00291de
c0027831:	e8 a5 b0 fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0027836:	83 c4 10             	add    esp,0x10
c0027839:	90                   	nop
c002783a:	83 c4 0c             	add    esp,0xc
c002783d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002783e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027842:	8b 00                	mov    eax,DWORD PTR [eax]
c0027844:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0027846 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0027846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002784a:	8b 00                	mov    eax,DWORD PTR [eax]
c002784c:	85 c0                	test   eax,eax
c002784e:	75 0e                	jne    c002785e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0027850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027854:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027857:	85 c0                	test   eax,eax
c0027859:	75 03                	jne    c002785e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002785b:	b0 01                	mov    al,0x1
c002785d:	c3                   	ret    
c002785e:	b0 00                	mov    al,0x0
c0027860:	90                   	nop
c0027861:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0027862 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0027862:	83 ec 0c             	sub    esp,0xc
c0027865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027869:	8b 00                	mov    eax,DWORD PTR [eax]
c002786b:	85 c0                	test   eax,eax
c002786d:	75 15                	jne    c0027884 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002786f:	83 ec 0c             	sub    esp,0xc
c0027872:	68 30 92 02 c0       	push   0xc0029230
c0027877:	e8 2f 23 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c002787c:	83 c4 10             	add    esp,0x10
c002787f:	e9 88 00 00 00       	jmp    c002790c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0027884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027888:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002788b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002788e:	85 c0                	test   eax,eax
c0027890:	0f 95 c0             	setne  al
c0027893:	84 c0                	test   al,al
c0027895:	74 10                	je     c00278a7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0027897:	83 ec 0c             	sub    esp,0xc
c002789a:	68 7b 92 02 c0       	push   0xc002927b
c002789f:	e8 07 23 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c00278a4:	83 c4 10             	add    esp,0x10
c00278a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00278ad:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00278b0:	85 c0                	test   eax,eax
c00278b2:	0f 94 c0             	sete   al
c00278b5:	84 c0                	test   al,al
c00278b7:	74 33                	je     c00278ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00278b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00278c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00278ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00278d5:	83 f8 01             	cmp    eax,0x1
c00278d8:	74 21                	je     c00278fb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00278da:	83 ec 0c             	sub    esp,0xc
c00278dd:	68 54 92 02 c0       	push   0xc0029254
c00278e2:	e8 c4 22 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c00278e7:	83 c4 10             	add    esp,0x10
c00278ea:	eb 0f                	jmp    c00278fb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00278ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00278f2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00278f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278f9:	89 10                	mov    DWORD PTR [eax],edx
c00278fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027902:	8d 50 ff             	lea    edx,[eax-0x1]
c0027905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027909:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002790c:	83 c4 0c             	add    esp,0xc
c002790f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0027910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0027910:	83 ec 0c             	sub    esp,0xc
c0027913:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027918:	75 10                	jne    c002792a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002791a:	83 ec 0c             	sub    esp,0xc
c002791d:	68 f8 91 02 c0       	push   0xc00291f8
c0027922:	e8 84 22 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c0027927:	83 c4 10             	add    esp,0x10
c002792a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002792e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027930:	85 c0                	test   eax,eax
c0027932:	74 34                	je     c0027968 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0027934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027938:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002793b:	85 c0                	test   eax,eax
c002793d:	74 29                	je     c0027968 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002793f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027943:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027946:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002794a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002794d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027951:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027955:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002795c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002795f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027966:	eb 65                	jmp    c00279cd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0027968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002796c:	8b 00                	mov    eax,DWORD PTR [eax]
c002796e:	85 c0                	test   eax,eax
c0027970:	75 4b                	jne    c00279bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0027972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027976:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027979:	85 c0                	test   eax,eax
c002797b:	75 40                	jne    c00279bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002797d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027985:	89 10                	mov    DWORD PTR [eax],edx
c0027987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002798b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002798f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027999:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00279a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00279a7:	85 c0                	test   eax,eax
c00279a9:	74 22                	je     c00279cd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00279ab:	83 ec 0c             	sub    esp,0xc
c00279ae:	68 1a 92 02 c0       	push   0xc002921a
c00279b3:	e8 f3 21 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c00279b8:	83 c4 10             	add    esp,0x10
c00279bb:	eb 10                	jmp    c00279cd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00279bd:	83 ec 0c             	sub    esp,0xc
c00279c0:	68 24 92 02 c0       	push   0xc0029224
c00279c5:	e8 e1 21 ff ff       	call   c0019bab <Krnl::panic(char const*)>
c00279ca:	83 c4 10             	add    esp,0x10
c00279cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00279d4:	8d 50 01             	lea    edx,[eax+0x1]
c00279d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279db:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00279de:	90                   	nop
c00279df:	83 c4 0c             	add    esp,0xc
c00279e2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00279e4 <ACPI::~ACPI()>:
c00279e4:	83 ec 0c             	sub    esp,0xc
c00279e7:	ba 58 a2 02 c0       	mov    edx,0xc002a258
c00279ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279f0:	89 10                	mov    DWORD PTR [eax],edx
c00279f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279f6:	83 ec 0c             	sub    esp,0xc
c00279f9:	50                   	push   eax
c00279fa:	e8 d5 c1 fe ff       	call   c0013bd4 <Device::~Device()>
c00279ff:	83 c4 10             	add    esp,0x10
c0027a02:	90                   	nop
c0027a03:	83 c4 0c             	add    esp,0xc
c0027a06:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0027a08 <ACPI::~ACPI()>:
c0027a08:	83 ec 0c             	sub    esp,0xc
c0027a0b:	83 ec 0c             	sub    esp,0xc
c0027a0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a12:	e8 cd ff ff ff       	call   c00279e4 <ACPI::~ACPI()>
c0027a17:	83 c4 10             	add    esp,0x10
c0027a1a:	83 ec 08             	sub    esp,0x8
c0027a1d:	68 68 22 00 00       	push   0x2268
c0027a22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a26:	e8 d0 ad fe ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0027a2b:	83 c4 10             	add    esp,0x10
c0027a2e:	83 c4 0c             	add    esp,0xc
c0027a31:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0027a32 <CPU::~CPU()>:
c0027a32:	83 ec 0c             	sub    esp,0xc
c0027a35:	ba 48 a6 02 c0       	mov    edx,0xc002a648
c0027a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a3e:	89 10                	mov    DWORD PTR [eax],edx
c0027a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a44:	83 ec 0c             	sub    esp,0xc
c0027a47:	50                   	push   eax
c0027a48:	e8 87 c1 fe ff       	call   c0013bd4 <Device::~Device()>
c0027a4d:	83 c4 10             	add    esp,0x10
c0027a50:	90                   	nop
c0027a51:	83 c4 0c             	add    esp,0xc
c0027a54:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0027a56 <CPU::~CPU()>:
c0027a56:	83 ec 0c             	sub    esp,0xc
c0027a59:	83 ec 0c             	sub    esp,0xc
c0027a5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a60:	e8 cd ff ff ff       	call   c0027a32 <CPU::~CPU()>
c0027a65:	83 c4 10             	add    esp,0x10
c0027a68:	83 ec 08             	sub    esp,0x8
c0027a6b:	68 98 11 00 00       	push   0x1198
c0027a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a74:	e8 82 ad fe ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0027a79:	83 c4 10             	add    esp,0x10
c0027a7c:	83 c4 0c             	add    esp,0xc
c0027a7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0027a80 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0027a80:	90                   	nop
c0027a81:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0027a82 <ThreadControlBlock::ThreadControlBlock()>:
c0027a82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027a86:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027a8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027a91:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0027a98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027a9c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0027aa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027aa7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0027aae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027ab2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0027ab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027aba:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0027abe:	90                   	nop
c0027abf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0027ac0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0027ac0:	83 ec 0c             	sub    esp,0xc
c0027ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ac7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027acd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ad1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027adc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027af1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027afc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027b03:	83 ec 0c             	sub    esp,0xc
c0027b06:	68 de 91 02 c0       	push   0xc00291de
c0027b0b:	e8 cb ad fe ff       	call   c00128db <Dbg::kprintf(char const*, ...)>
c0027b10:	83 c4 10             	add    esp,0x10
c0027b13:	90                   	nop
c0027b14:	83 c4 0c             	add    esp,0xc
c0027b17:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0027b18 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0027b18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027b1c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0027b1f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0027b20 <Vm::_FPUState::_FPUState()>:
c0027b20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027b24:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0027b2b:	90                   	nop
c0027b2c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0027b2e <PCI::~PCI()>:
c0027b2e:	83 ec 0c             	sub    esp,0xc
c0027b31:	ba 6c b5 02 c0       	mov    edx,0xc002b56c
c0027b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b3a:	89 10                	mov    DWORD PTR [eax],edx
c0027b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b40:	83 ec 0c             	sub    esp,0xc
c0027b43:	50                   	push   eax
c0027b44:	e8 63 ba fe ff       	call   c00135ac <Bus::~Bus()>
c0027b49:	83 c4 10             	add    esp,0x10
c0027b4c:	90                   	nop
c0027b4d:	83 c4 0c             	add    esp,0xc
c0027b50:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0027b52 <PCI::~PCI()>:
c0027b52:	83 ec 0c             	sub    esp,0xc
c0027b55:	83 ec 0c             	sub    esp,0xc
c0027b58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b5c:	e8 cd ff ff ff       	call   c0027b2e <PCI::~PCI()>
c0027b61:	83 c4 10             	add    esp,0x10
c0027b64:	83 ec 08             	sub    esp,0x8
c0027b67:	68 58 01 00 00       	push   0x158
c0027b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b70:	e8 86 ac fe ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0027b75:	83 c4 10             	add    esp,0x10
c0027b78:	83 c4 0c             	add    esp,0xc
c0027b7b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0027b7c <IDE::~IDE()>:
c0027b7c:	83 ec 0c             	sub    esp,0xc
c0027b7f:	ba d0 b7 02 c0       	mov    edx,0xc002b7d0
c0027b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b88:	89 10                	mov    DWORD PTR [eax],edx
c0027b8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b8e:	83 ec 0c             	sub    esp,0xc
c0027b91:	50                   	push   eax
c0027b92:	e8 2d c5 fe ff       	call   c00140c4 <HardDiskController::~HardDiskController()>
c0027b97:	83 c4 10             	add    esp,0x10
c0027b9a:	90                   	nop
c0027b9b:	83 c4 0c             	add    esp,0xc
c0027b9e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0027ba0 <IDE::~IDE()>:
c0027ba0:	83 ec 0c             	sub    esp,0xc
c0027ba3:	83 ec 0c             	sub    esp,0xc
c0027ba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027baa:	e8 cd ff ff ff       	call   c0027b7c <IDE::~IDE()>
c0027baf:	83 c4 10             	add    esp,0x10
c0027bb2:	83 ec 08             	sub    esp,0x8
c0027bb5:	68 70 02 00 00       	push   0x270
c0027bba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027bbe:	e8 38 ac fe ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0027bc3:	83 c4 10             	add    esp,0x10
c0027bc6:	83 c4 0c             	add    esp,0xc
c0027bc9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0027bca <SATABus::~SATABus()>:
c0027bca:	83 ec 0c             	sub    esp,0xc
c0027bcd:	ba b0 b8 02 c0       	mov    edx,0xc002b8b0
c0027bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bd6:	89 10                	mov    DWORD PTR [eax],edx
c0027bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bdc:	83 ec 0c             	sub    esp,0xc
c0027bdf:	50                   	push   eax
c0027be0:	e8 df c4 fe ff       	call   c00140c4 <HardDiskController::~HardDiskController()>
c0027be5:	83 c4 10             	add    esp,0x10
c0027be8:	90                   	nop
c0027be9:	83 c4 0c             	add    esp,0xc
c0027bec:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0027bee <SATABus::~SATABus()>:
c0027bee:	83 ec 0c             	sub    esp,0xc
c0027bf1:	83 ec 0c             	sub    esp,0xc
c0027bf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027bf8:	e8 cd ff ff ff       	call   c0027bca <SATABus::~SATABus()>
c0027bfd:	83 c4 10             	add    esp,0x10
c0027c00:	83 ec 08             	sub    esp,0x8
c0027c03:	68 64 01 00 00       	push   0x164
c0027c08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c0c:	e8 ea ab fe ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0027c11:	83 c4 10             	add    esp,0x10
c0027c14:	83 c4 0c             	add    esp,0xc
c0027c17:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0027c18 <ATA::~ATA()>:
c0027c18:	83 ec 0c             	sub    esp,0xc
c0027c1b:	ba f0 b8 02 c0       	mov    edx,0xc002b8f0
c0027c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c24:	89 10                	mov    DWORD PTR [eax],edx
c0027c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c2a:	83 ec 0c             	sub    esp,0xc
c0027c2d:	50                   	push   eax
c0027c2e:	e8 6f c5 fe ff       	call   c00141a2 <PhysicalDisk::~PhysicalDisk()>
c0027c33:	83 c4 10             	add    esp,0x10
c0027c36:	90                   	nop
c0027c37:	83 c4 0c             	add    esp,0xc
c0027c3a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0027c3c <ATA::~ATA()>:
c0027c3c:	83 ec 0c             	sub    esp,0xc
c0027c3f:	83 ec 0c             	sub    esp,0xc
c0027c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c46:	e8 cd ff ff ff       	call   c0027c18 <ATA::~ATA()>
c0027c4b:	83 c4 10             	add    esp,0x10
c0027c4e:	83 ec 08             	sub    esp,0x8
c0027c51:	68 7c 01 00 00       	push   0x17c
c0027c56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c5a:	e8 9c ab fe ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0027c5f:	83 c4 10             	add    esp,0x10
c0027c62:	83 c4 0c             	add    esp,0xc
c0027c65:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0027c66 <ATAPI::~ATAPI()>:
c0027c66:	83 ec 0c             	sub    esp,0xc
c0027c69:	ba 5c b9 02 c0       	mov    edx,0xc002b95c
c0027c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c72:	89 10                	mov    DWORD PTR [eax],edx
c0027c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c78:	83 ec 0c             	sub    esp,0xc
c0027c7b:	50                   	push   eax
c0027c7c:	e8 21 c5 fe ff       	call   c00141a2 <PhysicalDisk::~PhysicalDisk()>
c0027c81:	83 c4 10             	add    esp,0x10
c0027c84:	90                   	nop
c0027c85:	83 c4 0c             	add    esp,0xc
c0027c88:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0027c8a <ATAPI::~ATAPI()>:
c0027c8a:	83 ec 0c             	sub    esp,0xc
c0027c8d:	83 ec 0c             	sub    esp,0xc
c0027c90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c94:	e8 cd ff ff ff       	call   c0027c66 <ATAPI::~ATAPI()>
c0027c99:	83 c4 10             	add    esp,0x10
c0027c9c:	83 ec 08             	sub    esp,0x8
c0027c9f:	68 80 01 00 00       	push   0x180
c0027ca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ca8:	e8 4e ab fe ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0027cad:	83 c4 10             	add    esp,0x10
c0027cb0:	83 c4 0c             	add    esp,0xc
c0027cb3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0027cb4 <SATA::~SATA()>:
c0027cb4:	83 ec 0c             	sub    esp,0xc
c0027cb7:	ba 80 ba 02 c0       	mov    edx,0xc002ba80
c0027cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cc0:	89 10                	mov    DWORD PTR [eax],edx
c0027cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cc6:	83 ec 0c             	sub    esp,0xc
c0027cc9:	50                   	push   eax
c0027cca:	e8 d3 c4 fe ff       	call   c00141a2 <PhysicalDisk::~PhysicalDisk()>
c0027ccf:	83 c4 10             	add    esp,0x10
c0027cd2:	90                   	nop
c0027cd3:	83 c4 0c             	add    esp,0xc
c0027cd6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0027cd8 <SATA::~SATA()>:
c0027cd8:	83 ec 0c             	sub    esp,0xc
c0027cdb:	83 ec 0c             	sub    esp,0xc
c0027cde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ce2:	e8 cd ff ff ff       	call   c0027cb4 <SATA::~SATA()>
c0027ce7:	83 c4 10             	add    esp,0x10
c0027cea:	83 ec 08             	sub    esp,0x8
c0027ced:	68 74 01 00 00       	push   0x174
c0027cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027cf6:	e8 00 ab fe ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0027cfb:	83 c4 10             	add    esp,0x10
c0027cfe:	83 c4 0c             	add    esp,0xc
c0027d01:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0027d02 <AVX::~AVX()>:
c0027d02:	83 ec 0c             	sub    esp,0xc
c0027d05:	ba bc ba 02 c0       	mov    edx,0xc002babc
c0027d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d0e:	89 10                	mov    DWORD PTR [eax],edx
c0027d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d14:	83 ec 0c             	sub    esp,0xc
c0027d17:	50                   	push   eax
c0027d18:	e8 09 c5 fe ff       	call   c0014226 <FPU::~FPU()>
c0027d1d:	83 c4 10             	add    esp,0x10
c0027d20:	90                   	nop
c0027d21:	83 c4 0c             	add    esp,0xc
c0027d24:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0027d26 <AVX::~AVX()>:
c0027d26:	83 ec 0c             	sub    esp,0xc
c0027d29:	83 ec 0c             	sub    esp,0xc
c0027d2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d30:	e8 cd ff ff ff       	call   c0027d02 <AVX::~AVX()>
c0027d35:	83 c4 10             	add    esp,0x10
c0027d38:	83 ec 08             	sub    esp,0x8
c0027d3b:	68 58 01 00 00       	push   0x158
c0027d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d44:	e8 b2 aa fe ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0027d49:	83 c4 10             	add    esp,0x10
c0027d4c:	83 c4 0c             	add    esp,0xc
c0027d4f:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0027d50 <MMX::~MMX()>:
c0027d50:	83 ec 0c             	sub    esp,0xc
c0027d53:	ba fc ba 02 c0       	mov    edx,0xc002bafc
c0027d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d5c:	89 10                	mov    DWORD PTR [eax],edx
c0027d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d62:	83 ec 0c             	sub    esp,0xc
c0027d65:	50                   	push   eax
c0027d66:	e8 bb c4 fe ff       	call   c0014226 <FPU::~FPU()>
c0027d6b:	83 c4 10             	add    esp,0x10
c0027d6e:	90                   	nop
c0027d6f:	83 c4 0c             	add    esp,0xc
c0027d72:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0027d74 <MMX::~MMX()>:
c0027d74:	83 ec 0c             	sub    esp,0xc
c0027d77:	83 ec 0c             	sub    esp,0xc
c0027d7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d7e:	e8 cd ff ff ff       	call   c0027d50 <MMX::~MMX()>
c0027d83:	83 c4 10             	add    esp,0x10
c0027d86:	83 ec 08             	sub    esp,0x8
c0027d89:	68 58 01 00 00       	push   0x158
c0027d8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d92:	e8 64 aa fe ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0027d97:	83 c4 10             	add    esp,0x10
c0027d9a:	83 c4 0c             	add    esp,0xc
c0027d9d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0027d9e <SSE::~SSE()>:
c0027d9e:	83 ec 0c             	sub    esp,0xc
c0027da1:	ba 3c bb 02 c0       	mov    edx,0xc002bb3c
c0027da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027daa:	89 10                	mov    DWORD PTR [eax],edx
c0027dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027db0:	83 ec 0c             	sub    esp,0xc
c0027db3:	50                   	push   eax
c0027db4:	e8 6d c4 fe ff       	call   c0014226 <FPU::~FPU()>
c0027db9:	83 c4 10             	add    esp,0x10
c0027dbc:	90                   	nop
c0027dbd:	83 c4 0c             	add    esp,0xc
c0027dc0:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0027dc2 <SSE::~SSE()>:
c0027dc2:	83 ec 0c             	sub    esp,0xc
c0027dc5:	83 ec 0c             	sub    esp,0xc
c0027dc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027dcc:	e8 cd ff ff ff       	call   c0027d9e <SSE::~SSE()>
c0027dd1:	83 c4 10             	add    esp,0x10
c0027dd4:	83 ec 08             	sub    esp,0x8
c0027dd7:	68 58 01 00 00       	push   0x158
c0027ddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027de0:	e8 16 aa fe ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0027de5:	83 c4 10             	add    esp,0x10
c0027de8:	83 c4 0c             	add    esp,0xc
c0027deb:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0027dec <x87::~x87()>:
c0027dec:	83 ec 0c             	sub    esp,0xc
c0027def:	ba 7c bb 02 c0       	mov    edx,0xc002bb7c
c0027df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027df8:	89 10                	mov    DWORD PTR [eax],edx
c0027dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027dfe:	83 ec 0c             	sub    esp,0xc
c0027e01:	50                   	push   eax
c0027e02:	e8 1f c4 fe ff       	call   c0014226 <FPU::~FPU()>
c0027e07:	83 c4 10             	add    esp,0x10
c0027e0a:	90                   	nop
c0027e0b:	83 c4 0c             	add    esp,0xc
c0027e0e:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0027e10 <x87::~x87()>:
c0027e10:	83 ec 0c             	sub    esp,0xc
c0027e13:	83 ec 0c             	sub    esp,0xc
c0027e16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e1a:	e8 cd ff ff ff       	call   c0027dec <x87::~x87()>
c0027e1f:	83 c4 10             	add    esp,0x10
c0027e22:	83 ec 08             	sub    esp,0x8
c0027e25:	68 58 01 00 00       	push   0x158
c0027e2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e2e:	e8 c8 a9 fe ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0027e33:	83 c4 10             	add    esp,0x10
c0027e36:	83 c4 0c             	add    esp,0xc
c0027e39:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0027e3a <IOAPIC::~IOAPIC()>:
c0027e3a:	83 ec 0c             	sub    esp,0xc
c0027e3d:	ba d4 bc 02 c0       	mov    edx,0xc002bcd4
c0027e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e46:	89 10                	mov    DWORD PTR [eax],edx
c0027e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e4c:	83 ec 0c             	sub    esp,0xc
c0027e4f:	50                   	push   eax
c0027e50:	e8 7f bd fe ff       	call   c0013bd4 <Device::~Device()>
c0027e55:	83 c4 10             	add    esp,0x10
c0027e58:	90                   	nop
c0027e59:	83 c4 0c             	add    esp,0xc
c0027e5c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0027e5e <IOAPIC::~IOAPIC()>:
c0027e5e:	83 ec 0c             	sub    esp,0xc
c0027e61:	83 ec 0c             	sub    esp,0xc
c0027e64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e68:	e8 cd ff ff ff       	call   c0027e3a <IOAPIC::~IOAPIC()>
c0027e6d:	83 c4 10             	add    esp,0x10
c0027e70:	83 ec 08             	sub    esp,0x8
c0027e73:	68 68 01 00 00       	push   0x168
c0027e78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e7c:	e8 7a a9 fe ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0027e81:	83 c4 10             	add    esp,0x10
c0027e84:	83 c4 0c             	add    esp,0xc
c0027e87:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0027e88 <APIC::~APIC()>:
c0027e88:	83 ec 0c             	sub    esp,0xc
c0027e8b:	ba 8c bc 02 c0       	mov    edx,0xc002bc8c
c0027e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e94:	89 10                	mov    DWORD PTR [eax],edx
c0027e96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e9a:	83 ec 0c             	sub    esp,0xc
c0027e9d:	50                   	push   eax
c0027e9e:	e8 4d c8 fe ff       	call   c00146f0 <InterruptController::~InterruptController()>
c0027ea3:	83 c4 10             	add    esp,0x10
c0027ea6:	90                   	nop
c0027ea7:	83 c4 0c             	add    esp,0xc
c0027eaa:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0027eac <APIC::~APIC()>:
c0027eac:	83 ec 0c             	sub    esp,0xc
c0027eaf:	83 ec 0c             	sub    esp,0xc
c0027eb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027eb6:	e8 cd ff ff ff       	call   c0027e88 <APIC::~APIC()>
c0027ebb:	83 c4 10             	add    esp,0x10
c0027ebe:	83 ec 08             	sub    esp,0x8
c0027ec1:	68 58 21 00 00       	push   0x2158
c0027ec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027eca:	e8 2c a9 fe ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0027ecf:	83 c4 10             	add    esp,0x10
c0027ed2:	83 c4 0c             	add    esp,0xc
c0027ed5:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0027ed6 <PIC::~PIC()>:
c0027ed6:	83 ec 0c             	sub    esp,0xc
c0027ed9:	ba 24 bd 02 c0       	mov    edx,0xc002bd24
c0027ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ee2:	89 10                	mov    DWORD PTR [eax],edx
c0027ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ee8:	83 ec 0c             	sub    esp,0xc
c0027eeb:	50                   	push   eax
c0027eec:	e8 ff c7 fe ff       	call   c00146f0 <InterruptController::~InterruptController()>
c0027ef1:	83 c4 10             	add    esp,0x10
c0027ef4:	90                   	nop
c0027ef5:	83 c4 0c             	add    esp,0xc
c0027ef8:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0027efa <PIC::~PIC()>:
c0027efa:	83 ec 0c             	sub    esp,0xc
c0027efd:	83 ec 0c             	sub    esp,0xc
c0027f00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f04:	e8 cd ff ff ff       	call   c0027ed6 <PIC::~PIC()>
c0027f09:	83 c4 10             	add    esp,0x10
c0027f0c:	83 ec 08             	sub    esp,0x8
c0027f0f:	68 58 21 00 00       	push   0x2158
c0027f14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f18:	e8 de a8 fe ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0027f1d:	83 c4 10             	add    esp,0x10
c0027f20:	83 c4 0c             	add    esp,0xc
c0027f23:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0027f24 <APICTimer::~APICTimer()>:
c0027f24:	83 ec 0c             	sub    esp,0xc
c0027f27:	ba 78 bd 02 c0       	mov    edx,0xc002bd78
c0027f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f30:	89 10                	mov    DWORD PTR [eax],edx
c0027f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f36:	83 ec 0c             	sub    esp,0xc
c0027f39:	50                   	push   eax
c0027f3a:	e8 b1 e5 fe ff       	call   c00164f0 <Timer::~Timer()>
c0027f3f:	83 c4 10             	add    esp,0x10
c0027f42:	90                   	nop
c0027f43:	83 c4 0c             	add    esp,0xc
c0027f46:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0027f48 <APICTimer::~APICTimer()>:
c0027f48:	83 ec 0c             	sub    esp,0xc
c0027f4b:	83 ec 0c             	sub    esp,0xc
c0027f4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f52:	e8 cd ff ff ff       	call   c0027f24 <APICTimer::~APICTimer()>
c0027f57:	83 c4 10             	add    esp,0x10
c0027f5a:	83 ec 08             	sub    esp,0x8
c0027f5d:	68 60 01 00 00       	push   0x160
c0027f62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f66:	e8 90 a8 fe ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0027f6b:	83 c4 10             	add    esp,0x10
c0027f6e:	83 c4 0c             	add    esp,0xc
c0027f71:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0027f72 <PIT::~PIT()>:
c0027f72:	83 ec 0c             	sub    esp,0xc
c0027f75:	ba c8 bd 02 c0       	mov    edx,0xc002bdc8
c0027f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f7e:	89 10                	mov    DWORD PTR [eax],edx
c0027f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f84:	83 ec 0c             	sub    esp,0xc
c0027f87:	50                   	push   eax
c0027f88:	e8 63 e5 fe ff       	call   c00164f0 <Timer::~Timer()>
c0027f8d:	83 c4 10             	add    esp,0x10
c0027f90:	90                   	nop
c0027f91:	83 c4 0c             	add    esp,0xc
c0027f94:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0027f96 <PIT::~PIT()>:
c0027f96:	83 ec 0c             	sub    esp,0xc
c0027f99:	83 ec 0c             	sub    esp,0xc
c0027f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027fa0:	e8 cd ff ff ff       	call   c0027f72 <PIT::~PIT()>
c0027fa5:	83 c4 10             	add    esp,0x10
c0027fa8:	83 ec 08             	sub    esp,0x8
c0027fab:	68 5c 01 00 00       	push   0x15c
c0027fb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027fb4:	e8 42 a8 fe ff       	call   c00127fb <operator delete(void*, unsigned long)>
c0027fb9:	83 c4 10             	add    esp,0x10
c0027fbc:	83 c4 0c             	add    esp,0xc
c0027fbf:	c3                   	ret    
