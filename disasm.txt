
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 9f 78 00 00       	call   c00078bf <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 48 1a 02 c0       	mov    eax,0xc0021a48
c0000025:	3d 48 1a 02 c0       	cmp    eax,0xc0021a48
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 48 1a 02 c0       	push   0xc0021a48
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 48 1a 02 c0       	mov    eax,0xc0021a48
c0000051:	2d 48 1a 02 c0       	sub    eax,0xc0021a48
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 48 1a 02 c0       	push   0xc0021a48
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 30 02 c0 00 	cmp    BYTE PTR ds:0xc00230c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb a8 e9 01 c0       	mov    ebx,0xc001e9a8
c0000097:	81 eb a4 e9 01 c0    	sub    ebx,0xc001e9a4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be a4 e9 01 c0       	mov    esi,0xc001e9a4
c00000a6:	a1 c4 30 02 c0       	mov    eax,ds:0xc00230c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 30 02 c0       	mov    ds:0xc00230c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 30 02 c0       	mov    eax,ds:0xc00230c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 48 1a 02 c0       	push   0xc0021a48
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 30 02 c0 01 	mov    BYTE PTR ds:0xc00230c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 30 02 c0       	push   0xc00230c8
c0000108:	68 48 1a 02 c0       	push   0xc0021a48
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 6f 3f 01 00       	call   c001421c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 05 a1 00 00       	call   c000a3ca <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 4d 3f 01 00       	call   c001421c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 56 44 01 00       	call   c0014744 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 cd 4a 01 00       	call   c0014dc4 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 3e 02 c0 	lgdtd  ds:0xc0023ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 33 00 01 00       	jmp    c00103b2 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 1c                	je     c00003ae <memcmp+0x2e>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000396:	38 cb                	cmp    bl,cl
c0000398:	75 26                	jne    c00003c0 <memcmp+0x40>
c000039a:	01 c6                	add    esi,eax
c000039c:	eb 0a                	jmp    c00003a8 <memcmp+0x28>
c000039e:	66 90                	xchg   ax,ax
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a4:	38 d9                	cmp    cl,bl
c00003a6:	75 18                	jne    c00003c0 <memcmp+0x40>
c00003a8:	40                   	inc    eax
c00003a9:	42                   	inc    edx
c00003aa:	39 f0                	cmp    eax,esi
c00003ac:	75 f2                	jne    c00003a0 <memcmp+0x20>
c00003ae:	31 c0                	xor    eax,eax
c00003b0:	5b                   	pop    ebx
c00003b1:	5e                   	pop    esi
c00003b2:	c3                   	ret    
c00003b3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003c0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003c6:	31 c0                	xor    eax,eax
c00003c8:	88 c8                	mov    al,cl
c00003ca:	29 d8                	sub    eax,ebx
c00003cc:	5b                   	pop    ebx
c00003cd:	5e                   	pop    esi
c00003ce:	c3                   	ret    
c00003cf:	90                   	nop

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 98 00 00 00    	jae    c0000480 <memmove+0xb0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 7c 00 00 00    	je     c000046c <memmove+0x9c>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	09 ce                	or     esi,ecx
c0000404:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000407:	89 f0                	mov    eax,esi
c0000409:	83 f9 0c             	cmp    ecx,0xc
c000040c:	0f 97 c1             	seta   cl
c000040f:	84 c8                	test   al,cl
c0000411:	0f 84 89 00 00 00    	je     c00004a0 <memmove+0xd0>
c0000417:	89 e9                	mov    ecx,ebp
c0000419:	09 d9                	or     ecx,ebx
c000041b:	83 e1 03             	and    ecx,0x3
c000041e:	0f 85 7c 00 00 00    	jne    c00004a0 <memmove+0xd0>
c0000424:	89 d7                	mov    edi,edx
c0000426:	89 d9                	mov    ecx,ebx
c0000428:	83 e7 fc             	and    edi,0xfffffffc
c000042b:	89 ee                	mov    esi,ebp
c000042d:	01 df                	add    edi,ebx
c000042f:	90                   	nop
c0000430:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000432:	83 c6 04             	add    esi,0x4
c0000435:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000438:	83 c1 04             	add    ecx,0x4
c000043b:	39 f9                	cmp    ecx,edi
c000043d:	75 f1                	jne    c0000430 <memmove+0x60>
c000043f:	89 d1                	mov    ecx,edx
c0000441:	89 d7                	mov    edi,edx
c0000443:	83 e1 fc             	and    ecx,0xfffffffc
c0000446:	29 cf                	sub    edi,ecx
c0000448:	01 cb                	add    ebx,ecx
c000044a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000044e:	39 ca                	cmp    edx,ecx
c0000450:	74 1a                	je     c000046c <memmove+0x9c>
c0000452:	8a 03                	mov    al,BYTE PTR [ebx]
c0000454:	83 ff 01             	cmp    edi,0x1
c0000457:	88 06                	mov    BYTE PTR [esi],al
c0000459:	74 11                	je     c000046c <memmove+0x9c>
c000045b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000045e:	83 ff 02             	cmp    edi,0x2
c0000461:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000464:	74 06                	je     c000046c <memmove+0x9c>
c0000466:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000469:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000046c:	5b                   	pop    ebx
c000046d:	89 e8                	mov    eax,ebp
c000046f:	5e                   	pop    esi
c0000470:	5f                   	pop    edi
c0000471:	5d                   	pop    ebp
c0000472:	c3                   	ret    
c0000473:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000479:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000480:	76 ea                	jbe    c000046c <memmove+0x9c>
c0000482:	85 d2                	test   edx,edx
c0000484:	74 e6                	je     c000046c <memmove+0x9c>
c0000486:	4b                   	dec    ebx
c0000487:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000048a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000490:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000493:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000496:	4a                   	dec    edx
c0000497:	75 f7                	jne    c0000490 <memmove+0xc0>
c0000499:	5b                   	pop    ebx
c000049a:	89 e8                	mov    eax,ebp
c000049c:	5e                   	pop    esi
c000049d:	5f                   	pop    edi
c000049e:	5d                   	pop    ebp
c000049f:	c3                   	ret    
c00004a0:	01 ea                	add    edx,ebp
c00004a2:	89 e9                	mov    ecx,ebp
c00004a4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004aa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004b0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004b2:	41                   	inc    ecx
c00004b3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004b6:	43                   	inc    ebx
c00004b7:	39 d1                	cmp    ecx,edx
c00004b9:	75 f5                	jne    c00004b0 <memmove+0xe0>
c00004bb:	eb af                	jmp    c000046c <memmove+0x9c>
c00004bd:	8d 76 00             	lea    esi,[esi+0x0]

c00004c0 <memset>:
c00004c0:	57                   	push   edi
c00004c1:	53                   	push   ebx
c00004c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004c6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004ca:	85 d2                	test   edx,edx
c00004cc:	74 1f                	je     c00004ed <memset+0x2d>
c00004ce:	31 c0                	xor    eax,eax
c00004d0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004d4:	88 c4                	mov    ah,al
c00004d6:	89 c1                	mov    ecx,eax
c00004d8:	c1 e1 10             	shl    ecx,0x10
c00004db:	09 c8                	or     eax,ecx
c00004dd:	83 fa 04             	cmp    edx,0x4
c00004e0:	73 1e                	jae    c0000500 <memset+0x40>
c00004e2:	85 d2                	test   edx,edx
c00004e4:	74 07                	je     c00004ed <memset+0x2d>
c00004e6:	88 03                	mov    BYTE PTR [ebx],al
c00004e8:	f6 c2 02             	test   dl,0x2
c00004eb:	75 30                	jne    c000051d <memset+0x5d>
c00004ed:	89 d8                	mov    eax,ebx
c00004ef:	5b                   	pop    ebx
c00004f0:	5f                   	pop    edi
c00004f1:	c3                   	ret    
c00004f2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000500:	89 03                	mov    DWORD PTR [ebx],eax
c0000502:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000505:	89 d9                	mov    ecx,ebx
c0000507:	83 e7 fc             	and    edi,0xfffffffc
c000050a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000050e:	29 f9                	sub    ecx,edi
c0000510:	01 d1                	add    ecx,edx
c0000512:	c1 e9 02             	shr    ecx,0x2
c0000515:	fc                   	cld    
c0000516:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000518:	89 d8                	mov    eax,ebx
c000051a:	5b                   	pop    ebx
c000051b:	5f                   	pop    edi
c000051c:	c3                   	ret    
c000051d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000522:	eb c9                	jmp    c00004ed <memset+0x2d>
c0000524:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000052a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000530 <strlen>:
c0000530:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000534:	31 c0                	xor    eax,eax
c0000536:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000539:	74 15                	je     c0000550 <strlen+0x20>
c000053b:	90                   	nop
c000053c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000540:	40                   	inc    eax
c0000541:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000545:	75 f9                	jne    c0000540 <strlen+0x10>
c0000547:	c3                   	ret    
c0000548:	90                   	nop
c0000549:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000550:	c3                   	ret    
c0000551:	eb 0d                	jmp    c0000560 <strpbrk>
c0000553:	90                   	nop
c0000554:	90                   	nop
c0000555:	90                   	nop
c0000556:	90                   	nop
c0000557:	90                   	nop
c0000558:	90                   	nop
c0000559:	90                   	nop
c000055a:	90                   	nop
c000055b:	90                   	nop
c000055c:	90                   	nop
c000055d:	90                   	nop
c000055e:	90                   	nop
c000055f:	90                   	nop

c0000560 <strpbrk>:
c0000560:	57                   	push   edi
c0000561:	56                   	push   esi
c0000562:	53                   	push   ebx
c0000563:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000567:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000056b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000056d:	84 db                	test   bl,bl
c000056f:	74 21                	je     c0000592 <strpbrk+0x32>
c0000571:	8a 07                	mov    al,BYTE PTR [edi]
c0000573:	84 c0                	test   al,al
c0000575:	74 14                	je     c000058b <strpbrk+0x2b>
c0000577:	38 d8                	cmp    al,bl
c0000579:	74 19                	je     c0000594 <strpbrk+0x34>
c000057b:	89 fa                	mov    edx,edi
c000057d:	eb 05                	jmp    c0000584 <strpbrk+0x24>
c000057f:	90                   	nop
c0000580:	38 d9                	cmp    cl,bl
c0000582:	74 10                	je     c0000594 <strpbrk+0x34>
c0000584:	42                   	inc    edx
c0000585:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000587:	84 c9                	test   cl,cl
c0000589:	75 f5                	jne    c0000580 <strpbrk+0x20>
c000058b:	46                   	inc    esi
c000058c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000058e:	84 db                	test   bl,bl
c0000590:	75 e1                	jne    c0000573 <strpbrk+0x13>
c0000592:	31 f6                	xor    esi,esi
c0000594:	89 f0                	mov    eax,esi
c0000596:	5b                   	pop    ebx
c0000597:	5e                   	pop    esi
c0000598:	5f                   	pop    edi
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005a0 <strtok>:
c00005a0:	56                   	push   esi
c00005a1:	53                   	push   ebx
c00005a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005aa:	85 db                	test   ebx,ebx
c00005ac:	75 07                	jne    c00005b5 <strtok+0x15>
c00005ae:	eb 30                	jmp    c00005e0 <strtok+0x40>
c00005b0:	43                   	inc    ebx
c00005b1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005b5:	56                   	push   esi
c00005b6:	53                   	push   ebx
c00005b7:	e8 a4 ff ff ff       	call   c0000560 <strpbrk>
c00005bc:	5a                   	pop    edx
c00005bd:	a3 e0 30 02 c0       	mov    ds:0xc00230e0,eax
c00005c2:	59                   	pop    ecx
c00005c3:	39 d8                	cmp    eax,ebx
c00005c5:	74 e9                	je     c00005b0 <strtok+0x10>
c00005c7:	85 c0                	test   eax,eax
c00005c9:	74 1f                	je     c00005ea <strtok+0x4a>
c00005cb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005ce:	8d 50 01             	lea    edx,[eax+0x1]
c00005d1:	89 d8                	mov    eax,ebx
c00005d3:	89 15 e0 30 02 c0    	mov    DWORD PTR ds:0xc00230e0,edx
c00005d9:	5b                   	pop    ebx
c00005da:	5e                   	pop    esi
c00005db:	c3                   	ret    
c00005dc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005e0:	8b 1d e0 30 02 c0    	mov    ebx,DWORD PTR ds:0xc00230e0
c00005e6:	85 db                	test   ebx,ebx
c00005e8:	75 cb                	jne    c00005b5 <strtok+0x15>
c00005ea:	31 c0                	xor    eax,eax
c00005ec:	5b                   	pop    ebx
c00005ed:	5e                   	pop    esi
c00005ee:	c3                   	ret    
c00005ef:	90                   	nop

c00005f0 <strcpy>:
c00005f0:	53                   	push   ebx
c00005f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00005f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00005f9:	89 c3                	mov    ebx,eax
c00005fb:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005fd:	84 d2                	test   dl,dl
c00005ff:	74 19                	je     c000061a <strcpy+0x2a>
c0000601:	eb 0d                	jmp    c0000610 <strcpy+0x20>
c0000603:	90                   	nop
c0000604:	90                   	nop
c0000605:	90                   	nop
c0000606:	90                   	nop
c0000607:	90                   	nop
c0000608:	90                   	nop
c0000609:	90                   	nop
c000060a:	90                   	nop
c000060b:	90                   	nop
c000060c:	90                   	nop
c000060d:	90                   	nop
c000060e:	90                   	nop
c000060f:	90                   	nop
c0000610:	88 13                	mov    BYTE PTR [ebx],dl
c0000612:	41                   	inc    ecx
c0000613:	43                   	inc    ebx
c0000614:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000616:	84 d2                	test   dl,dl
c0000618:	75 f6                	jne    c0000610 <strcpy+0x20>
c000061a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000061d:	5b                   	pop    ebx
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strncpy>:
c0000620:	57                   	push   edi
c0000621:	56                   	push   esi
c0000622:	53                   	push   ebx
c0000623:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000627:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000062b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000062f:	85 ff                	test   edi,edi
c0000631:	74 3e                	je     c0000671 <strncpy+0x51>
c0000633:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000635:	8d 47 ff             	lea    eax,[edi-0x1]
c0000638:	8d 4a 01             	lea    ecx,[edx+0x1]
c000063b:	88 1a                	mov    BYTE PTR [edx],bl
c000063d:	84 db                	test   bl,bl
c000063f:	74 3f                	je     c0000680 <strncpy+0x60>
c0000641:	85 c0                	test   eax,eax
c0000643:	74 2c                	je     c0000671 <strncpy+0x51>
c0000645:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000648:	8d 47 fe             	lea    eax,[edi-0x2]
c000064b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000064e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000651:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000654:	84 db                	test   bl,bl
c0000656:	75 15                	jne    c000066d <strncpy+0x4d>
c0000658:	eb 26                	jmp    c0000680 <strncpy+0x60>
c000065a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000660:	47                   	inc    edi
c0000661:	41                   	inc    ecx
c0000662:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000665:	48                   	dec    eax
c0000666:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000669:	84 db                	test   bl,bl
c000066b:	74 13                	je     c0000680 <strncpy+0x60>
c000066d:	85 c0                	test   eax,eax
c000066f:	75 ef                	jne    c0000660 <strncpy+0x40>
c0000671:	5b                   	pop    ebx
c0000672:	89 d0                	mov    eax,edx
c0000674:	5e                   	pop    esi
c0000675:	5f                   	pop    edi
c0000676:	c3                   	ret    
c0000677:	89 f6                	mov    esi,esi
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000680:	85 c0                	test   eax,eax
c0000682:	74 ed                	je     c0000671 <strncpy+0x51>
c0000684:	83 f8 04             	cmp    eax,0x4
c0000687:	73 17                	jae    c00006a0 <strncpy+0x80>
c0000689:	85 c0                	test   eax,eax
c000068b:	74 e4                	je     c0000671 <strncpy+0x51>
c000068d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0000690:	a8 02                	test   al,0x2
c0000692:	74 dd                	je     c0000671 <strncpy+0x51>
c0000694:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c000069b:	eb d4                	jmp    c0000671 <strncpy+0x51>
c000069d:	8d 76 00             	lea    esi,[esi+0x0]
c00006a0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006a6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006a9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006b1:	83 e7 fc             	and    edi,0xfffffffc
c00006b4:	29 f9                	sub    ecx,edi
c00006b6:	01 c1                	add    ecx,eax
c00006b8:	c1 e9 02             	shr    ecx,0x2
c00006bb:	fc                   	cld    
c00006bc:	31 c0                	xor    eax,eax
c00006be:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006c0:	89 d0                	mov    eax,edx
c00006c2:	5b                   	pop    ebx
c00006c3:	5e                   	pop    esi
c00006c4:	5f                   	pop    edi
c00006c5:	c3                   	ret    
c00006c6:	8d 76 00             	lea    esi,[esi+0x0]
c00006c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006d0 <strcmp>:
c00006d0:	56                   	push   esi
c00006d1:	53                   	push   ebx
c00006d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006da:	8a 16                	mov    dl,BYTE PTR [esi]
c00006dc:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006de:	38 d1                	cmp    cl,dl
c00006e0:	75 1d                	jne    c00006ff <strcmp+0x2f>
c00006e2:	84 c9                	test   cl,cl
c00006e4:	74 2a                	je     c0000710 <strcmp+0x40>
c00006e6:	b8 01 00 00 00       	mov    eax,0x1
c00006eb:	eb 08                	jmp    c00006f5 <strcmp+0x25>
c00006ed:	8d 76 00             	lea    esi,[esi+0x0]
c00006f0:	40                   	inc    eax
c00006f1:	84 d2                	test   dl,dl
c00006f3:	74 1b                	je     c0000710 <strcmp+0x40>
c00006f5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00006f8:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c00006fb:	38 ca                	cmp    dl,cl
c00006fd:	74 f1                	je     c00006f0 <strcmp+0x20>
c00006ff:	31 c0                	xor    eax,eax
c0000701:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000707:	88 d0                	mov    al,dl
c0000709:	5b                   	pop    ebx
c000070a:	29 c8                	sub    eax,ecx
c000070c:	5e                   	pop    esi
c000070d:	c3                   	ret    
c000070e:	66 90                	xchg   ax,ax
c0000710:	31 c0                	xor    eax,eax
c0000712:	5b                   	pop    ebx
c0000713:	5e                   	pop    esi
c0000714:	c3                   	ret    
c0000715:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000719:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000720 <strchr>:
c0000720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000724:	8a 10                	mov    dl,BYTE PTR [eax]
c0000726:	84 d2                	test   dl,dl
c0000728:	74 21                	je     c000074b <strchr+0x2b>
c000072a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000072e:	38 ca                	cmp    dl,cl
c0000730:	75 12                	jne    c0000744 <strchr+0x24>
c0000732:	eb 1a                	jmp    c000074e <strchr+0x2e>
c0000734:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000073a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000740:	38 ca                	cmp    dl,cl
c0000742:	74 09                	je     c000074d <strchr+0x2d>
c0000744:	40                   	inc    eax
c0000745:	8a 10                	mov    dl,BYTE PTR [eax]
c0000747:	84 d2                	test   dl,dl
c0000749:	75 f5                	jne    c0000740 <strchr+0x20>
c000074b:	31 c0                	xor    eax,eax
c000074d:	c3                   	ret    
c000074e:	c3                   	ret    
c000074f:	90                   	nop

c0000750 <strncmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000757:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000075b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000075f:	85 ff                	test   edi,edi
c0000761:	74 2f                	je     c0000792 <strncmp+0x42>
c0000763:	8a 16                	mov    dl,BYTE PTR [esi]
c0000765:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000767:	38 d1                	cmp    cl,dl
c0000769:	75 35                	jne    c00007a0 <strncmp+0x50>
c000076b:	8d 46 01             	lea    eax,[esi+0x1]
c000076e:	84 c9                	test   cl,cl
c0000770:	74 20                	je     c0000792 <strncmp+0x42>
c0000772:	01 fe                	add    esi,edi
c0000774:	eb 17                	jmp    c000078d <strncmp+0x3d>
c0000776:	8d 76 00             	lea    esi,[esi+0x0]
c0000779:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000780:	8a 10                	mov    dl,BYTE PTR [eax]
c0000782:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000784:	38 ca                	cmp    dl,cl
c0000786:	75 18                	jne    c00007a0 <strncmp+0x50>
c0000788:	40                   	inc    eax
c0000789:	84 d2                	test   dl,dl
c000078b:	74 05                	je     c0000792 <strncmp+0x42>
c000078d:	43                   	inc    ebx
c000078e:	39 c6                	cmp    esi,eax
c0000790:	75 ee                	jne    c0000780 <strncmp+0x30>
c0000792:	5b                   	pop    ebx
c0000793:	31 c0                	xor    eax,eax
c0000795:	5e                   	pop    esi
c0000796:	5f                   	pop    edi
c0000797:	c3                   	ret    
c0000798:	90                   	nop
c0000799:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007a0:	5b                   	pop    ebx
c00007a1:	31 c0                	xor    eax,eax
c00007a3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007a9:	88 d0                	mov    al,dl
c00007ab:	5e                   	pop    esi
c00007ac:	29 c8                	sub    eax,ecx
c00007ae:	5f                   	pop    edi
c00007af:	c3                   	ret    

c00007b0 <strcat>:
c00007b0:	56                   	push   esi
c00007b1:	53                   	push   ebx
c00007b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ba:	89 c3                	mov    ebx,eax
c00007bc:	eb 04                	jmp    c00007c2 <strcat+0x12>
c00007be:	66 90                	xchg   ax,ax
c00007c0:	89 d3                	mov    ebx,edx
c00007c2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007c9:	75 f5                	jne    c00007c0 <strcat+0x10>
c00007cb:	31 d2                	xor    edx,edx
c00007cd:	8d 76 00             	lea    esi,[esi+0x0]
c00007d0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007d3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007d6:	42                   	inc    edx
c00007d7:	84 c9                	test   cl,cl
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x20>
c00007db:	5b                   	pop    ebx
c00007dc:	5e                   	pop    esi
c00007dd:	c3                   	ret    
c00007de:	66 90                	xchg   ax,ax

c00007e0 <strncat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007ee:	85 f6                	test   esi,esi
c00007f0:	74 2e                	je     c0000820 <strncat+0x40>
c00007f2:	89 c2                	mov    edx,eax
c00007f4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00007fa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000800:	42                   	inc    edx
c0000801:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000805:	75 f9                	jne    c0000800 <strncat+0x20>
c0000807:	01 ce                	add    esi,ecx
c0000809:	eb 0a                	jmp    c0000815 <strncat+0x35>
c000080b:	90                   	nop
c000080c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000810:	39 f1                	cmp    ecx,esi
c0000812:	74 1c                	je     c0000830 <strncat+0x50>
c0000814:	42                   	inc    edx
c0000815:	41                   	inc    ecx
c0000816:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000819:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000081c:	84 db                	test   bl,bl
c000081e:	75 f0                	jne    c0000810 <strncat+0x30>
c0000820:	5b                   	pop    ebx
c0000821:	5e                   	pop    esi
c0000822:	c3                   	ret    
c0000823:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000829:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000830:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000833:	5b                   	pop    ebx
c0000834:	5e                   	pop    esi
c0000835:	c3                   	ret    
c0000836:	8d 76 00             	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000840 <strstr>:
c0000840:	57                   	push   edi
c0000841:	56                   	push   esi
c0000842:	53                   	push   ebx
c0000843:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000847:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000084b:	57                   	push   edi
c000084c:	e8 df fc ff ff       	call   c0000530 <strlen>
c0000851:	59                   	pop    ecx
c0000852:	85 c0                	test   eax,eax
c0000854:	74 3a                	je     c0000890 <strstr+0x50>
c0000856:	89 c6                	mov    esi,eax
c0000858:	eb 16                	jmp    c0000870 <strstr+0x30>
c000085a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000860:	56                   	push   esi
c0000861:	57                   	push   edi
c0000862:	53                   	push   ebx
c0000863:	e8 18 fb ff ff       	call   c0000380 <memcmp>
c0000868:	83 c4 0c             	add    esp,0xc
c000086b:	85 c0                	test   eax,eax
c000086d:	74 21                	je     c0000890 <strstr+0x50>
c000086f:	43                   	inc    ebx
c0000870:	53                   	push   ebx
c0000871:	e8 ba fc ff ff       	call   c0000530 <strlen>
c0000876:	5a                   	pop    edx
c0000877:	39 f0                	cmp    eax,esi
c0000879:	73 e5                	jae    c0000860 <strstr+0x20>
c000087b:	5b                   	pop    ebx
c000087c:	31 c0                	xor    eax,eax
c000087e:	5e                   	pop    esi
c000087f:	5f                   	pop    edi
c0000880:	c3                   	ret    
c0000881:	eb 0d                	jmp    c0000890 <strstr+0x50>
c0000883:	90                   	nop
c0000884:	90                   	nop
c0000885:	90                   	nop
c0000886:	90                   	nop
c0000887:	90                   	nop
c0000888:	90                   	nop
c0000889:	90                   	nop
c000088a:	90                   	nop
c000088b:	90                   	nop
c000088c:	90                   	nop
c000088d:	90                   	nop
c000088e:	90                   	nop
c000088f:	90                   	nop
c0000890:	89 d8                	mov    eax,ebx
c0000892:	5b                   	pop    ebx
c0000893:	5e                   	pop    esi
c0000894:	5f                   	pop    edi
c0000895:	c3                   	ret    
c0000896:	8d 76 00             	lea    esi,[esi+0x0]
c0000899:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008a0 <toupper>:
c00008a0:	31 d2                	xor    edx,edx
c00008a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008a6:	88 c2                	mov    dl,al
c00008a8:	f6 82 c0 e9 01 c0 02 	test   BYTE PTR [edx-0x3ffe1640],0x2
c00008af:	74 03                	je     c00008b4 <toupper+0x14>
c00008b1:	83 e8 20             	sub    eax,0x20
c00008b4:	c3                   	ret    
c00008b5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008c0 <tolower>:
c00008c0:	31 d2                	xor    edx,edx
c00008c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008c6:	88 c2                	mov    dl,al
c00008c8:	f6 82 c0 e9 01 c0 01 	test   BYTE PTR [edx-0x3ffe1640],0x1
c00008cf:	74 03                	je     c00008d4 <tolower+0x14>
c00008d1:	83 c0 20             	add    eax,0x20
c00008d4:	c3                   	ret    
c00008d5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008e0 <simple_strtoul>:
c00008e0:	55                   	push   ebp
c00008e1:	57                   	push   edi
c00008e2:	56                   	push   esi
c00008e3:	53                   	push   ebx
c00008e4:	83 ec 08             	sub    esp,0x8
c00008e7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ef:	90                   	nop
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8a 01                	mov    al,BYTE PTR [ecx]
c00008f4:	88 c2                	mov    dl,al
c00008f6:	f6 82 c0 e9 01 c0 08 	test   BYTE PTR [edx-0x3ffe1640],0x8
c00008fd:	75 04                	jne    c0000903 <simple_strtoul+0x23>
c00008ff:	3c 09                	cmp    al,0x9
c0000901:	75 0d                	jne    c0000910 <simple_strtoul+0x30>
c0000903:	41                   	inc    ecx
c0000904:	eb ea                	jmp    c00008f0 <simple_strtoul+0x10>
c0000906:	8d 76 00             	lea    esi,[esi+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000910:	3c 2d                	cmp    al,0x2d
c0000912:	0f 84 48 01 00 00    	je     c0000a60 <simple_strtoul+0x180>
c0000918:	3c 2b                	cmp    al,0x2b
c000091a:	0f 84 e0 00 00 00    	je     c0000a00 <simple_strtoul+0x120>
c0000920:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000928:	85 f6                	test   esi,esi
c000092a:	0f 85 e1 00 00 00    	jne    c0000a11 <simple_strtoul+0x131>
c0000930:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000933:	80 fa 30             	cmp    dl,0x30
c0000936:	0f 84 75 01 00 00    	je     c0000ab1 <simple_strtoul+0x1d1>
c000093c:	be 0a 00 00 00       	mov    esi,0xa
c0000941:	84 d2                	test   dl,dl
c0000943:	0f 84 9f 01 00 00    	je     c0000ae8 <simple_strtoul+0x208>
c0000949:	31 ed                	xor    ebp,ebp
c000094b:	31 ff                	xor    edi,edi
c000094d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000954:	eb 35                	jmp    c000098b <simple_strtoul+0xab>
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000960:	83 eb 30             	sub    ebx,0x30
c0000963:	39 f3                	cmp    ebx,esi
c0000965:	73 59                	jae    c00009c0 <simple_strtoul+0xe0>
c0000967:	31 d2                	xor    edx,edx
c0000969:	89 d8                	mov    eax,ebx
c000096b:	f7 d0                	not    eax
c000096d:	f7 f6                	div    esi
c000096f:	39 f8                	cmp    eax,edi
c0000971:	0f 82 c9 00 00 00    	jb     c0000a40 <simple_strtoul+0x160>
c0000977:	0f af fe             	imul   edi,esi
c000097a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000981:	01 df                	add    edi,ebx
c0000983:	41                   	inc    ecx
c0000984:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000987:	84 d2                	test   dl,dl
c0000989:	74 35                	je     c00009c0 <simple_strtoul+0xe0>
c000098b:	31 db                	xor    ebx,ebx
c000098d:	88 d3                	mov    bl,dl
c000098f:	f6 83 c0 e9 01 c0 04 	test   BYTE PTR [ebx-0x3ffe1640],0x4
c0000996:	75 c8                	jne    c0000960 <simple_strtoul+0x80>
c0000998:	52                   	push   edx
c0000999:	e8 02 ff ff ff       	call   c00008a0 <toupper>
c000099e:	31 d2                	xor    edx,edx
c00009a0:	5b                   	pop    ebx
c00009a1:	88 c2                	mov    dl,al
c00009a3:	f6 82 c0 e9 01 c0 01 	test   BYTE PTR [edx-0x3ffe1640],0x1
c00009aa:	74 14                	je     c00009c0 <simple_strtoul+0xe0>
c00009ac:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009af:	39 f3                	cmp    ebx,esi
c00009b1:	72 b4                	jb     c0000967 <simple_strtoul+0x87>
c00009b3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009c4:	85 c0                	test   eax,eax
c00009c6:	74 18                	je     c00009e0 <simple_strtoul+0x100>
c00009c8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009cb:	09 f8                	or     eax,edi
c00009cd:	0f 85 7d 00 00 00    	jne    c0000a50 <simple_strtoul+0x170>
c00009d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009db:	31 ff                	xor    edi,edi
c00009dd:	89 30                	mov    DWORD PTR [eax],esi
c00009df:	90                   	nop
c00009e0:	4d                   	dec    ebp
c00009e1:	75 05                	jne    c00009e8 <simple_strtoul+0x108>
c00009e3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009e8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009ed:	75 02                	jne    c00009f1 <simple_strtoul+0x111>
c00009ef:	f7 df                	neg    edi
c00009f1:	83 c4 08             	add    esp,0x8
c00009f4:	89 f8                	mov    eax,edi
c00009f6:	5b                   	pop    ebx
c00009f7:	5e                   	pop    esi
c00009f8:	5f                   	pop    edi
c00009f9:	5d                   	pop    ebp
c00009fa:	c3                   	ret    
c00009fb:	90                   	nop
c00009fc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a00:	41                   	inc    ecx
c0000a01:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a09:	85 f6                	test   esi,esi
c0000a0b:	0f 84 1f ff ff ff    	je     c0000930 <simple_strtoul+0x50>
c0000a11:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a14:	83 f8 22             	cmp    eax,0x22
c0000a17:	77 7b                	ja     c0000a94 <simple_strtoul+0x1b4>
c0000a19:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a1c:	83 fe 08             	cmp    esi,0x8
c0000a1f:	0f 84 b3 00 00 00    	je     c0000ad8 <simple_strtoul+0x1f8>
c0000a25:	83 fe 10             	cmp    esi,0x10
c0000a28:	0f 85 13 ff ff ff    	jne    c0000941 <simple_strtoul+0x61>
c0000a2e:	80 fa 30             	cmp    dl,0x30
c0000a31:	74 3b                	je     c0000a6e <simple_strtoul+0x18e>
c0000a33:	be 10 00 00 00       	mov    esi,0x10
c0000a38:	e9 04 ff ff ff       	jmp    c0000941 <simple_strtoul+0x61>
c0000a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a40:	bd 01 00 00 00       	mov    ebp,0x1
c0000a45:	31 ff                	xor    edi,edi
c0000a47:	e9 37 ff ff ff       	jmp    c0000983 <simple_strtoul+0xa3>
c0000a4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a54:	89 08                	mov    DWORD PTR [eax],ecx
c0000a56:	eb 88                	jmp    c00009e0 <simple_strtoul+0x100>
c0000a58:	90                   	nop
c0000a59:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a60:	41                   	inc    ecx
c0000a61:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a69:	e9 ba fe ff ff       	jmp    c0000928 <simple_strtoul+0x48>
c0000a6e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a72:	88 04 24             	mov    BYTE PTR [esp],al
c0000a75:	50                   	push   eax
c0000a76:	e8 45 fe ff ff       	call   c00008c0 <tolower>
c0000a7b:	5e                   	pop    esi
c0000a7c:	83 f8 78             	cmp    eax,0x78
c0000a7f:	0f 84 88 00 00 00    	je     c0000b0d <simple_strtoul+0x22d>
c0000a85:	41                   	inc    ecx
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a8f:	e9 ad fe ff ff       	jmp    c0000941 <simple_strtoul+0x61>
c0000a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000a98:	85 ff                	test   edi,edi
c0000a9a:	74 5e                	je     c0000afa <simple_strtoul+0x21a>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	85 c9                	test   ecx,ecx
c0000aa2:	75 50                	jne    c0000af4 <simple_strtoul+0x214>
c0000aa4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aaa:	31 ff                	xor    edi,edi
c0000aac:	e9 37 ff ff ff       	jmp    c00009e8 <simple_strtoul+0x108>
c0000ab1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab8:	50                   	push   eax
c0000ab9:	e8 02 fe ff ff       	call   c00008c0 <tolower>
c0000abe:	5d                   	pop    ebp
c0000abf:	83 f8 78             	cmp    eax,0x78
c0000ac2:	74 3d                	je     c0000b01 <simple_strtoul+0x221>
c0000ac4:	41                   	inc    ecx
c0000ac5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ac9:	80 fa 30             	cmp    dl,0x30
c0000acc:	74 13                	je     c0000ae1 <simple_strtoul+0x201>
c0000ace:	be 08 00 00 00       	mov    esi,0x8
c0000ad3:	e9 69 fe ff ff       	jmp    c0000941 <simple_strtoul+0x61>
c0000ad8:	80 fa 30             	cmp    dl,0x30
c0000adb:	0f 85 60 fe ff ff    	jne    c0000941 <simple_strtoul+0x61>
c0000ae1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000ae5:	41                   	inc    ecx
c0000ae6:	eb e6                	jmp    c0000ace <simple_strtoul+0x1ee>
c0000ae8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aec:	85 d2                	test   edx,edx
c0000aee:	74 0a                	je     c0000afa <simple_strtoul+0x21a>
c0000af0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000af4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000af8:	89 30                	mov    DWORD PTR [eax],esi
c0000afa:	31 ff                	xor    edi,edi
c0000afc:	e9 e7 fe ff ff       	jmp    c00009e8 <simple_strtoul+0x108>
c0000b01:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b05:	83 c1 02             	add    ecx,0x2
c0000b08:	e9 21 ff ff ff       	jmp    c0000a2e <simple_strtoul+0x14e>
c0000b0d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b11:	be 10 00 00 00       	mov    esi,0x10
c0000b16:	83 c1 02             	add    ecx,0x2
c0000b19:	e9 23 fe ff ff       	jmp    c0000941 <simple_strtoul+0x61>

c0000b1e <largebin_index>:
c0000b1e:	89 c2                	mov    edx,eax
c0000b20:	c1 ea 08             	shr    edx,0x8
c0000b23:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b29:	77 10                	ja     c0000b3b <largebin_index+0x1d>
c0000b2b:	0f bd d2             	bsr    edx,edx
c0000b2e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b31:	d3 e8                	shr    eax,cl
c0000b33:	83 e0 03             	and    eax,0x3
c0000b36:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b3a:	c3                   	ret    
c0000b3b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b40:	c3                   	ret    

c0000b41 <malloc_init_state>:
c0000b41:	53                   	push   ebx
c0000b42:	8d 50 34             	lea    edx,[eax+0x34]
c0000b45:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b4b:	89 d1                	mov    ecx,edx
c0000b4d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b50:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b53:	83 c2 08             	add    edx,0x8
c0000b56:	39 da                	cmp    edx,ebx
c0000b58:	75 f3                	jne    c0000b4d <malloc_init_state+0xc>
c0000b5a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b5c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b66:	83 e2 03             	and    edx,0x3
c0000b69:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b73:	83 ca 48             	or     edx,0x48
c0000b76:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b80:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b8a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000b91:	89 10                	mov    DWORD PTR [eax],edx
c0000b93:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000b96:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ba0:	5b                   	pop    ebx
c0000ba1:	c3                   	ret    

c0000ba2 <malloc_consolidate>:
c0000ba2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ba4:	85 d2                	test   edx,edx
c0000ba6:	0f 84 d8 00 00 00    	je     c0000c84 <malloc_consolidate+0xe2>
c0000bac:	55                   	push   ebp
c0000bad:	83 e2 fd             	and    edx,0xfffffffd
c0000bb0:	57                   	push   edi
c0000bb1:	89 c5                	mov    ebp,eax
c0000bb3:	56                   	push   esi
c0000bb4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bb7:	53                   	push   ebx
c0000bb8:	83 ec 10             	sub    esp,0x10
c0000bbb:	89 10                	mov    DWORD PTR [eax],edx
c0000bbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bc1:	c1 ea 03             	shr    edx,0x3
c0000bc4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bc8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bcc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bcf:	85 d2                	test   edx,edx
c0000bd1:	0f 84 98 00 00 00    	je     c0000c6f <malloc_consolidate+0xcd>
c0000bd7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bde:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000be1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000be4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000be8:	89 f9                	mov    ecx,edi
c0000bea:	83 e1 fe             	and    ecx,0xfffffffe
c0000bed:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000bf0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000bf3:	83 e3 fc             	and    ebx,0xfffffffc
c0000bf6:	83 e7 01             	and    edi,0x1
c0000bf9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000bfc:	75 14                	jne    c0000c12 <malloc_consolidate+0x70>
c0000bfe:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c00:	29 fa                	sub    edx,edi
c0000c02:	01 f9                	add    ecx,edi
c0000c04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c07:	89 fb                	mov    ebx,edi
c0000c09:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c0c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c0f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c12:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c15:	74 40                	je     c0000c57 <malloc_consolidate+0xb5>
c0000c17:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c1a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c1d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c21:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c24:	83 e7 01             	and    edi,0x1
c0000c27:	75 0e                	jne    c0000c37 <malloc_consolidate+0x95>
c0000c29:	01 d9                	add    ecx,ebx
c0000c2b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c2e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c31:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c34:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c37:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c3a:	89 ce                	mov    esi,ecx
c0000c3c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c3f:	83 ce 01             	or     esi,0x1
c0000c42:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c45:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c48:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c4b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c4f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c52:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c55:	eb 0c                	jmp    c0000c63 <malloc_consolidate+0xc1>
c0000c57:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c5a:	83 c9 01             	or     ecx,0x1
c0000c5d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c60:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c67:	85 d2                	test   edx,edx
c0000c69:	0f 85 6f ff ff ff    	jne    c0000bde <malloc_consolidate+0x3c>
c0000c6f:	83 c5 04             	add    ebp,0x4
c0000c72:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c76:	0f 85 50 ff ff ff    	jne    c0000bcc <malloc_consolidate+0x2a>
c0000c7c:	83 c4 10             	add    esp,0x10
c0000c7f:	5b                   	pop    ebx
c0000c80:	5e                   	pop    esi
c0000c81:	5f                   	pop    edi
c0000c82:	5d                   	pop    ebp
c0000c83:	c3                   	ret    
c0000c84:	e9 b8 fe ff ff       	jmp    c0000b41 <malloc_init_state>

c0000c89 <dlfree>:
c0000c89:	57                   	push   edi
c0000c8a:	56                   	push   esi
c0000c8b:	53                   	push   ebx
c0000c8c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000c90:	85 db                	test   ebx,ebx
c0000c92:	0f 84 e2 00 00 00    	je     c0000d7a <dlfree+0xf1>
c0000c98:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000c9b:	8b 0d 00 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023100
c0000ca1:	89 f0                	mov    eax,esi
c0000ca3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ca6:	83 e0 fc             	and    eax,0xfffffffc
c0000ca9:	39 c1                	cmp    ecx,eax
c0000cab:	72 24                	jb     c0000cd1 <dlfree+0x48>
c0000cad:	83 c9 03             	or     ecx,0x3
c0000cb0:	c1 e8 03             	shr    eax,0x3
c0000cb3:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000cb9:	83 e8 02             	sub    eax,0x2
c0000cbc:	8b 0c 85 04 31 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcefc]
c0000cc3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cc5:	89 14 85 04 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcefc],edx
c0000ccc:	e9 a9 00 00 00       	jmp    c0000d7a <dlfree+0xf1>
c0000cd1:	83 e6 02             	and    esi,0x2
c0000cd4:	0f 85 a0 00 00 00    	jne    c0000d7a <dlfree+0xf1>
c0000cda:	83 c9 01             	or     ecx,0x1
c0000cdd:	8d 34 02             	lea    esi,[edx+eax*1]
c0000ce0:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000ce6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000ce9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cec:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000cf0:	75 13                	jne    c0000d05 <dlfree+0x7c>
c0000cf2:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000cf5:	29 da                	sub    edx,ebx
c0000cf7:	01 d8                	add    eax,ebx
c0000cf9:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cfc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000cff:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d02:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d05:	39 35 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,esi
c0000d0b:	74 40                	je     c0000d4d <dlfree+0xc4>
c0000d0d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d11:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d14:	80 e3 01             	and    bl,0x1
c0000d17:	75 0e                	jne    c0000d27 <dlfree+0x9e>
c0000d19:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d1c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d1f:	01 c8                	add    eax,ecx
c0000d21:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d24:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d27:	8b 0d 3c 31 02 c0    	mov    ecx,DWORD PTR ds:0xc002313c
c0000d2d:	c7 42 0c 34 31 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023134
c0000d34:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d37:	89 15 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edx
c0000d3d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d40:	89 c1                	mov    ecx,eax
c0000d42:	83 c9 01             	or     ecx,0x1
c0000d45:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d48:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d4b:	eb 10                	jmp    c0000d5d <dlfree+0xd4>
c0000d4d:	01 c8                	add    eax,ecx
c0000d4f:	89 c1                	mov    ecx,eax
c0000d51:	83 c9 01             	or     ecx,0x1
c0000d54:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d57:	89 15 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edx
c0000d5d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d62:	76 16                	jbe    c0000d7a <dlfree+0xf1>
c0000d64:	f6 05 00 31 02 c0 02 	test   BYTE PTR ds:0xc0023100,0x2
c0000d6b:	74 0d                	je     c0000d7a <dlfree+0xf1>
c0000d6d:	5b                   	pop    ebx
c0000d6e:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0000d73:	5e                   	pop    esi
c0000d74:	5f                   	pop    edi
c0000d75:	e9 28 fe ff ff       	jmp    c0000ba2 <malloc_consolidate>
c0000d7a:	5b                   	pop    ebx
c0000d7b:	5e                   	pop    esi
c0000d7c:	5f                   	pop    edi
c0000d7d:	c3                   	ret    

c0000d7e <sYSMALLOc>:
c0000d7e:	55                   	push   ebp
c0000d7f:	57                   	push   edi
c0000d80:	56                   	push   esi
c0000d81:	53                   	push   ebx
c0000d82:	89 d3                	mov    ebx,edx
c0000d84:	83 ec 2c             	sub    esp,0x2c
c0000d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d8b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000d91:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000d94:	8d 42 ff             	lea    eax,[edx-0x1]
c0000d97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000d9b:	74 1f                	je     c0000dbc <sYSMALLOc+0x3e>
c0000d9d:	89 d8                	mov    eax,ebx
c0000d9f:	e8 fe fd ff ff       	call   c0000ba2 <malloc_consolidate>
c0000da4:	83 ec 0c             	sub    esp,0xc
c0000da7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dab:	83 e8 07             	sub    eax,0x7
c0000dae:	50                   	push   eax
c0000daf:	e8 30 02 00 00       	call   c0000fe4 <dlmalloc>
c0000db4:	83 c4 10             	add    esp,0x10
c0000db7:	e9 20 02 00 00       	jmp    c0000fdc <sYSMALLOc+0x25e>
c0000dbc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dbf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dc5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dc8:	83 e0 fc             	and    eax,0xfffffffc
c0000dcb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000dd3:	83 c0 10             	add    eax,0x10
c0000dd6:	01 c1                	add    ecx,eax
c0000dd8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ddc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000de3:	74 04                	je     c0000de9 <sYSMALLOc+0x6b>
c0000de5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000de9:	f7 da                	neg    edx
c0000deb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000def:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000df3:	21 d1                	and    ecx,edx
c0000df5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000df9:	7f 07                	jg     c0000e02 <sYSMALLOc+0x84>
c0000dfb:	31 c0                	xor    eax,eax
c0000dfd:	e9 da 01 00 00       	jmp    c0000fdc <sYSMALLOc+0x25e>
c0000e02:	83 ec 0c             	sub    esp,0xc
c0000e05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e09:	e8 2e 69 00 00       	call   c000773c <sbrk>
c0000e0e:	83 c4 10             	add    esp,0x10
c0000e11:	89 c6                	mov    esi,eax
c0000e13:	83 f8 ff             	cmp    eax,0xffffffff
c0000e16:	74 e3                	je     c0000dfb <sYSMALLOc+0x7d>
c0000e18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e1c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e20:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e23:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e29:	39 f1                	cmp    ecx,esi
c0000e2b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e31:	75 13                	jne    c0000e46 <sYSMALLOc+0xc8>
c0000e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e37:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e3b:	83 c8 01             	or     eax,0x1
c0000e3e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e41:	e9 3e 01 00 00       	jmp    c0000f84 <sYSMALLOc+0x206>
c0000e46:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e4c:	88 d0                	mov    al,dl
c0000e4e:	83 e0 01             	and    eax,0x1
c0000e51:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e56:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e5a:	0f 95 c0             	setne  al
c0000e5d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e61:	39 f1                	cmp    ecx,esi
c0000e63:	76 12                	jbe    c0000e77 <sYSMALLOc+0xf9>
c0000e65:	84 c0                	test   al,al
c0000e67:	74 0e                	je     c0000e77 <sYSMALLOc+0xf9>
c0000e69:	83 e2 fe             	and    edx,0xfffffffe
c0000e6c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e72:	e9 83 00 00 00       	jmp    c0000efa <sYSMALLOc+0x17c>
c0000e77:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e7c:	74 7c                	je     c0000efa <sYSMALLOc+0x17c>
c0000e7e:	84 c0                	test   al,al
c0000e80:	74 0c                	je     c0000e8e <sYSMALLOc+0x110>
c0000e82:	89 f0                	mov    eax,esi
c0000e84:	29 c8                	sub    eax,ecx
c0000e86:	01 e8                	add    eax,ebp
c0000e88:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e8e:	89 f2                	mov    edx,esi
c0000e90:	83 e2 07             	and    edx,0x7
c0000e93:	74 0c                	je     c0000ea1 <sYSMALLOc+0x123>
c0000e95:	b8 08 00 00 00       	mov    eax,0x8
c0000e9a:	29 d0                	sub    eax,edx
c0000e9c:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000e9f:	eb 04                	jmp    c0000ea5 <sYSMALLOc+0x127>
c0000ea1:	89 f5                	mov    ebp,esi
c0000ea3:	31 c0                	xor    eax,eax
c0000ea5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ea9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000eb1:	01 c1                	add    ecx,eax
c0000eb3:	83 ec 0c             	sub    esp,0xc
c0000eb6:	01 f1                	add    ecx,esi
c0000eb8:	01 ca                	add    edx,ecx
c0000eba:	29 c8                	sub    eax,ecx
c0000ebc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ec0:	01 c2                	add    edx,eax
c0000ec2:	52                   	push   edx
c0000ec3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ec7:	e8 70 68 00 00       	call   c000773c <sbrk>
c0000ecc:	83 c4 10             	add    esp,0x10
c0000ecf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ed2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ed6:	75 0f                	jne    c0000ee7 <sYSMALLOc+0x169>
c0000ed8:	83 ec 0c             	sub    esp,0xc
c0000edb:	6a 00                	push   0x0
c0000edd:	e8 5a 68 00 00       	call   c000773c <sbrk>
c0000ee2:	83 c4 10             	add    esp,0x10
c0000ee5:	eb 30                	jmp    c0000f17 <sYSMALLOc+0x199>
c0000ee7:	39 c6                	cmp    esi,eax
c0000ee9:	76 33                	jbe    c0000f1e <sYSMALLOc+0x1a0>
c0000eeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eef:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000ef6:	01 f0                	add    eax,esi
c0000ef8:	eb 1d                	jmp    c0000f17 <sYSMALLOc+0x199>
c0000efa:	83 ec 0c             	sub    esp,0xc
c0000efd:	89 f5                	mov    ebp,esi
c0000eff:	6a 00                	push   0x0
c0000f01:	e8 36 68 00 00       	call   c000773c <sbrk>
c0000f06:	89 c2                	mov    edx,eax
c0000f08:	29 f2                	sub    edx,esi
c0000f0a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f0e:	83 c4 10             	add    esp,0x10
c0000f11:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f17:	31 d2                	xor    edx,edx
c0000f19:	83 f8 ff             	cmp    eax,0xffffffff
c0000f1c:	74 66                	je     c0000f84 <sYSMALLOc+0x206>
c0000f1e:	29 e8                	sub    eax,ebp
c0000f20:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f23:	01 d0                	add    eax,edx
c0000f25:	83 c8 01             	or     eax,0x1
c0000f28:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f2b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f31:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f36:	74 4c                	je     c0000f84 <sYSMALLOc+0x206>
c0000f38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f3c:	83 e8 0c             	sub    eax,0xc
c0000f3f:	83 e0 f8             	and    eax,0xfffffff8
c0000f42:	89 c2                	mov    edx,eax
c0000f44:	83 ca 01             	or     edx,0x1
c0000f47:	83 f8 0f             	cmp    eax,0xf
c0000f4a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f4d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f55:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f5d:	76 25                	jbe    c0000f84 <sYSMALLOc+0x206>
c0000f5f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f65:	83 ec 0c             	sub    esp,0xc
c0000f68:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f72:	83 c7 08             	add    edi,0x8
c0000f75:	57                   	push   edi
c0000f76:	e8 0e fd ff ff       	call   c0000c89 <dlfree>
c0000f7b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f81:	83 c4 10             	add    esp,0x10
c0000f84:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f8a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000f90:	73 06                	jae    c0000f98 <sYSMALLOc+0x21a>
c0000f92:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000f98:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000f9e:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fa4:	73 06                	jae    c0000fac <sYSMALLOc+0x22e>
c0000fa6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fb2:	83 e2 fc             	and    edx,0xfffffffc
c0000fb5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fb9:	0f 82 3c fe ff ff    	jb     c0000dfb <sYSMALLOc+0x7d>
c0000fbf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fc3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fc6:	29 fa                	sub    edx,edi
c0000fc8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fcb:	83 ca 01             	or     edx,0x1
c0000fce:	89 fb                	mov    ebx,edi
c0000fd0:	83 c0 08             	add    eax,0x8
c0000fd3:	83 cb 01             	or     ebx,0x1
c0000fd6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fd9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fdc:	83 c4 2c             	add    esp,0x2c
c0000fdf:	5b                   	pop    ebx
c0000fe0:	5e                   	pop    esi
c0000fe1:	5f                   	pop    edi
c0000fe2:	5d                   	pop    ebp
c0000fe3:	c3                   	ret    

c0000fe4 <dlmalloc>:
c0000fe4:	55                   	push   ebp
c0000fe5:	57                   	push   edi
c0000fe6:	56                   	push   esi
c0000fe7:	53                   	push   ebx
c0000fe8:	83 ec 1c             	sub    esp,0x1c
c0000feb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fef:	83 f8 df             	cmp    eax,0xffffffdf
c0000ff2:	0f 87 70 03 00 00    	ja     c0001368 <dlmalloc+0x384>
c0000ff8:	83 c0 0b             	add    eax,0xb
c0000ffb:	be 10 00 00 00       	mov    esi,0x10
c0001000:	83 f8 0f             	cmp    eax,0xf
c0001003:	76 05                	jbe    c000100a <dlmalloc+0x26>
c0001005:	83 e0 f8             	and    eax,0xfffffff8
c0001008:	89 c6                	mov    esi,eax
c000100a:	8b 3d 00 31 02 c0    	mov    edi,DWORD PTR ds:0xc0023100
c0001010:	f7 c7 01 00 00 00    	test   edi,0x1
c0001016:	75 17                	jne    c000102f <dlmalloc+0x4b>
c0001018:	85 ff                	test   edi,edi
c000101a:	0f 85 05 03 00 00    	jne    c0001325 <dlmalloc+0x341>
c0001020:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001025:	e8 78 fb ff ff       	call   c0000ba2 <malloc_consolidate>
c000102a:	e9 f6 02 00 00       	jmp    c0001325 <dlmalloc+0x341>
c000102f:	39 f7                	cmp    edi,esi
c0001031:	72 1f                	jb     c0001052 <dlmalloc+0x6e>
c0001033:	89 f2                	mov    edx,esi
c0001035:	c1 ea 03             	shr    edx,0x3
c0001038:	83 ea 02             	sub    edx,0x2
c000103b:	8b 04 95 04 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcefc]
c0001042:	85 c0                	test   eax,eax
c0001044:	74 0c                	je     c0001052 <dlmalloc+0x6e>
c0001046:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001049:	89 0c 95 04 31 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcefc],ecx
c0001050:	eb 30                	jmp    c0001082 <dlmalloc+0x9e>
c0001052:	89 f0                	mov    eax,esi
c0001054:	81 fe ff 00 00 00    	cmp    esi,0xff
c000105a:	77 2e                	ja     c000108a <dlmalloc+0xa6>
c000105c:	c1 e8 03             	shr    eax,0x3
c000105f:	8d 14 c5 34 31 02 c0 	lea    edx,[eax*8-0x3ffdcecc]
c0001066:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000106a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000106d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001070:	39 c3                	cmp    ebx,eax
c0001072:	74 2e                	je     c00010a2 <dlmalloc+0xbe>
c0001074:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001077:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000107c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000107f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001082:	83 c0 08             	add    eax,0x8
c0001085:	e9 e0 02 00 00       	jmp    c000136a <dlmalloc+0x386>
c000108a:	e8 8f fa ff ff       	call   c0000b1e <largebin_index>
c000108f:	83 e7 02             	and    edi,0x2
c0001092:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001096:	74 0a                	je     c00010a2 <dlmalloc+0xbe>
c0001098:	b8 00 31 02 c0       	mov    eax,0xc0023100
c000109d:	e8 00 fb ff ff       	call   c0000ba2 <malloc_consolidate>
c00010a2:	8d 46 10             	lea    eax,[esi+0x10]
c00010a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010a9:	8b 1d 40 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023140
c00010af:	81 fb 34 31 02 c0    	cmp    ebx,0xc0023134
c00010b5:	0f 84 13 01 00 00    	je     c00011ce <dlmalloc+0x1ea>
c00010bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010c1:	83 e7 fc             	and    edi,0xfffffffc
c00010c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010ca:	77 4c                	ja     c0001118 <dlmalloc+0x134>
c00010cc:	3d 34 31 02 c0       	cmp    eax,0xc0023134
c00010d1:	75 45                	jne    c0001118 <dlmalloc+0x134>
c00010d3:	39 1d 30 31 02 c0    	cmp    DWORD PTR ds:0xc0023130,ebx
c00010d9:	75 3d                	jne    c0001118 <dlmalloc+0x134>
c00010db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010df:	73 37                	jae    c0001118 <dlmalloc+0x134>
c00010e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010e4:	89 fa                	mov    edx,edi
c00010e6:	a3 3c 31 02 c0       	mov    ds:0xc002313c,eax
c00010eb:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c00010f0:	a3 30 31 02 c0       	mov    ds:0xc0023130,eax
c00010f5:	29 f2                	sub    edx,esi
c00010f7:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c00010fe:	c7 40 0c 34 31 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023134
c0001105:	83 ce 01             	or     esi,0x1
c0001108:	89 d1                	mov    ecx,edx
c000110a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000110d:	83 c9 01             	or     ecx,0x1
c0001110:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001113:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001116:	eb 15                	jmp    c000112d <dlmalloc+0x149>
c0001118:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c000111d:	39 fe                	cmp    esi,edi
c000111f:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c0001126:	75 0d                	jne    c0001135 <dlmalloc+0x151>
c0001128:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000112d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001130:	e9 35 02 00 00       	jmp    c000136a <dlmalloc+0x386>
c0001135:	89 f8                	mov    eax,edi
c0001137:	81 ff ff 00 00 00    	cmp    edi,0xff
c000113d:	77 19                	ja     c0001158 <dlmalloc+0x174>
c000113f:	c1 e8 03             	shr    eax,0x3
c0001142:	8d 14 00             	lea    edx,[eax+eax*1]
c0001145:	83 c2 0d             	add    edx,0xd
c0001148:	8d 2c 95 f8 30 02 c0 	lea    ebp,[edx*4-0x3ffdcf08]
c000114f:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c0001156:	eb 46                	jmp    c000119e <dlmalloc+0x1ba>
c0001158:	e8 c1 f9 ff ff       	call   c0000b1e <largebin_index>
c000115d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001160:	83 c2 0d             	add    edx,0xd
c0001163:	8d 0c 95 00 31 02 c0 	lea    ecx,[edx*4-0x3ffdcf00]
c000116a:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c0001171:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001174:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001178:	89 d5                	mov    ebp,edx
c000117a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000117e:	74 1e                	je     c000119e <dlmalloc+0x1ba>
c0001180:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001183:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001186:	77 12                	ja     c000119a <dlmalloc+0x1b6>
c0001188:	83 cf 01             	or     edi,0x1
c000118b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000118e:	76 05                	jbe    c0001195 <dlmalloc+0x1b1>
c0001190:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001193:	eb f6                	jmp    c000118b <dlmalloc+0x1a7>
c0001195:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001198:	eb 04                	jmp    c000119e <dlmalloc+0x1ba>
c000119a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000119e:	89 c7                	mov    edi,eax
c00011a0:	88 c1                	mov    cl,al
c00011a2:	c1 ff 05             	sar    edi,0x5
c00011a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011a9:	bf 01 00 00 00       	mov    edi,0x1
c00011ae:	d3 e7                	shl    edi,cl
c00011b0:	89 f8                	mov    eax,edi
c00011b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011b6:	09 04 bd 34 34 02 c0 	or     DWORD PTR [edi*4-0x3ffdcbcc],eax
c00011bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011c9:	e9 db fe ff ff       	jmp    c00010a9 <dlmalloc+0xc5>
c00011ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d4:	76 78                	jbe    c000124e <dlmalloc+0x26a>
c00011d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011da:	8d 04 c5 34 31 02 c0 	lea    eax,[eax*8-0x3ffdcecc]
c00011e1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011e7:	39 ca                	cmp    edx,ecx
c00011e9:	74 63                	je     c000124e <dlmalloc+0x26a>
c00011eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00011f1:	83 e3 fc             	and    ebx,0xfffffffc
c00011f4:	39 de                	cmp    esi,ebx
c00011f6:	77 52                	ja     c000124a <dlmalloc+0x266>
c00011f8:	89 df                	mov    edi,ebx
c00011fa:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00011fd:	29 f7                	sub    edi,esi
c00011ff:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001202:	01 d3                	add    ebx,edx
c0001204:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001207:	83 ff 0f             	cmp    edi,0xf
c000120a:	8d 42 08             	lea    eax,[edx+0x8]
c000120d:	77 09                	ja     c0001218 <dlmalloc+0x234>
c000120f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001213:	e9 52 01 00 00       	jmp    c000136a <dlmalloc+0x386>
c0001218:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000121b:	83 ce 01             	or     esi,0x1
c000121e:	89 0d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,ecx
c0001224:	89 0d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,ecx
c000122a:	c7 41 08 34 31 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023134
c0001231:	c7 41 0c 34 31 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023134
c0001238:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000123b:	89 fa                	mov    edx,edi
c000123d:	83 ca 01             	or     edx,0x1
c0001240:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001243:	89 3b                	mov    DWORD PTR [ebx],edi
c0001245:	e9 20 01 00 00       	jmp    c000136a <dlmalloc+0x386>
c000124a:	89 c2                	mov    edx,eax
c000124c:	eb 99                	jmp    c00011e7 <dlmalloc+0x203>
c000124e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001252:	b8 01 00 00 00       	mov    eax,0x1
c0001257:	41                   	inc    ecx
c0001258:	89 cb                	mov    ebx,ecx
c000125a:	8d 14 cd 2c 31 02 c0 	lea    edx,[ecx*8-0x3ffdced4]
c0001261:	c1 eb 05             	shr    ebx,0x5
c0001264:	d3 e0                	shl    eax,cl
c0001266:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c000126d:	39 f8                	cmp    eax,edi
c000126f:	77 04                	ja     c0001275 <dlmalloc+0x291>
c0001271:	85 c0                	test   eax,eax
c0001273:	75 26                	jne    c000129b <dlmalloc+0x2b7>
c0001275:	43                   	inc    ebx
c0001276:	83 fb 02             	cmp    ebx,0x2
c0001279:	0f 87 a6 00 00 00    	ja     c0001325 <dlmalloc+0x341>
c000127f:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c0001286:	85 ff                	test   edi,edi
c0001288:	74 eb                	je     c0001275 <dlmalloc+0x291>
c000128a:	89 d8                	mov    eax,ebx
c000128c:	c1 e0 06             	shl    eax,0x6
c000128f:	8d 14 85 2c 31 02 c0 	lea    edx,[eax*4-0x3ffdced4]
c0001296:	b8 01 00 00 00       	mov    eax,0x1
c000129b:	85 f8                	test   eax,edi
c000129d:	75 07                	jne    c00012a6 <dlmalloc+0x2c2>
c000129f:	83 c2 08             	add    edx,0x8
c00012a2:	01 c0                	add    eax,eax
c00012a4:	eb f5                	jmp    c000129b <dlmalloc+0x2b7>
c00012a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012a9:	39 ca                	cmp    edx,ecx
c00012ab:	75 14                	jne    c00012c1 <dlmalloc+0x2dd>
c00012ad:	89 c1                	mov    ecx,eax
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	f7 d1                	not    ecx
c00012b4:	01 c0                	add    eax,eax
c00012b6:	21 cf                	and    edi,ecx
c00012b8:	89 3c 9d 34 34 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcbcc],edi
c00012bf:	eb ac                	jmp    c000126d <dlmalloc+0x289>
c00012c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012c7:	83 e0 fc             	and    eax,0xfffffffc
c00012ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012cd:	89 c3                	mov    ebx,eax
c00012cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012d2:	29 f3                	sub    ebx,esi
c00012d4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012d7:	83 fb 0f             	cmp    ebx,0xf
c00012da:	8d 41 08             	lea    eax,[ecx+0x8]
c00012dd:	77 09                	ja     c00012e8 <dlmalloc+0x304>
c00012df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012e3:	e9 82 00 00 00       	jmp    c000136a <dlmalloc+0x386>
c00012e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012f1:	89 3d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edi
c00012f7:	89 3d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,edi
c00012fd:	c7 47 08 34 31 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023134
c0001304:	c7 47 0c 34 31 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023134
c000130b:	77 06                	ja     c0001313 <dlmalloc+0x32f>
c000130d:	89 3d 30 31 02 c0    	mov    DWORD PTR ds:0xc0023130,edi
c0001313:	83 ce 01             	or     esi,0x1
c0001316:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001319:	89 d9                	mov    ecx,ebx
c000131b:	83 c9 01             	or     ecx,0x1
c000131e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001321:	89 1a                	mov    DWORD PTR [edx],ebx
c0001323:	eb 45                	jmp    c000136a <dlmalloc+0x386>
c0001325:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c000132a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000132d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001330:	83 e2 fc             	and    edx,0xfffffffc
c0001333:	39 d1                	cmp    ecx,edx
c0001335:	77 1e                	ja     c0001355 <dlmalloc+0x371>
c0001337:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000133a:	89 f3                	mov    ebx,esi
c000133c:	89 0d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,ecx
c0001342:	83 cb 01             	or     ebx,0x1
c0001345:	29 f2                	sub    edx,esi
c0001347:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000134a:	83 ca 01             	or     edx,0x1
c000134d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001350:	e9 2d fd ff ff       	jmp    c0001082 <dlmalloc+0x9e>
c0001355:	83 c4 1c             	add    esp,0x1c
c0001358:	89 f0                	mov    eax,esi
c000135a:	5b                   	pop    ebx
c000135b:	ba 00 31 02 c0       	mov    edx,0xc0023100
c0001360:	5e                   	pop    esi
c0001361:	5f                   	pop    edi
c0001362:	5d                   	pop    ebp
c0001363:	e9 16 fa ff ff       	jmp    c0000d7e <sYSMALLOc>
c0001368:	31 c0                	xor    eax,eax
c000136a:	83 c4 1c             	add    esp,0x1c
c000136d:	5b                   	pop    ebx
c000136e:	5e                   	pop    esi
c000136f:	5f                   	pop    edi
c0001370:	5d                   	pop    ebp
c0001371:	c3                   	ret    

c0001372 <iALLOc>:
c0001372:	55                   	push   ebp
c0001373:	89 c5                	mov    ebp,eax
c0001375:	57                   	push   edi
c0001376:	56                   	push   esi
c0001377:	53                   	push   ebx
c0001378:	83 ec 2c             	sub    esp,0x2c
c000137b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000137f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001383:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001387:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c000138e:	75 12                	jne    c00013a2 <iALLOc+0x30>
c0001390:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001394:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001399:	e8 04 f8 ff ff       	call   c0000ba2 <malloc_consolidate>
c000139e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013a7:	74 12                	je     c00013bb <iALLOc+0x49>
c00013a9:	85 ed                	test   ebp,ebp
c00013ab:	0f 84 64 01 00 00    	je     c0001515 <iALLOc+0x1a3>
c00013b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013b9:	eb 33                	jmp    c00013ee <iALLOc+0x7c>
c00013bb:	85 ed                	test   ebp,ebp
c00013bd:	75 14                	jne    c00013d3 <iALLOc+0x61>
c00013bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013c7:	83 c4 2c             	add    esp,0x2c
c00013ca:	5b                   	pop    ebx
c00013cb:	5e                   	pop    esi
c00013cc:	5f                   	pop    edi
c00013cd:	5d                   	pop    ebp
c00013ce:	e9 11 fc ff ff       	jmp    c0000fe4 <dlmalloc>
c00013d3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013da:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013e2:	83 f8 0f             	cmp    eax,0xf
c00013e5:	76 07                	jbe    c00013ee <iALLOc+0x7c>
c00013e7:	83 e0 f8             	and    eax,0xfffffff8
c00013ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00013f3:	75 09                	jne    c00013fe <iALLOc+0x8c>
c00013f5:	89 d0                	mov    eax,edx
c00013f7:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00013fa:	31 f6                	xor    esi,esi
c00013fc:	eb 3b                	jmp    c0001439 <iALLOc+0xc7>
c00013fe:	8b 02                	mov    eax,DWORD PTR [edx]
c0001400:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001408:	83 c0 0b             	add    eax,0xb
c000140b:	83 f8 0f             	cmp    eax,0xf
c000140e:	76 07                	jbe    c0001417 <iALLOc+0xa5>
c0001410:	83 e0 f8             	and    eax,0xfffffff8
c0001413:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001417:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000141b:	0f af f5             	imul   esi,ebp
c000141e:	eb 25                	jmp    c0001445 <iALLOc+0xd3>
c0001420:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001422:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001425:	bb 10 00 00 00       	mov    ebx,0x10
c000142a:	83 f9 0f             	cmp    ecx,0xf
c000142d:	76 05                	jbe    c0001434 <iALLOc+0xc2>
c000142f:	83 e1 f8             	and    ecx,0xfffffff8
c0001432:	89 cb                	mov    ebx,ecx
c0001434:	01 de                	add    esi,ebx
c0001436:	83 c0 04             	add    eax,0x4
c0001439:	39 c7                	cmp    edi,eax
c000143b:	75 e3                	jne    c0001420 <iALLOc+0xae>
c000143d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001445:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001449:	8b 1d 54 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023454
c000144f:	83 ec 0c             	sub    esp,0xc
c0001452:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c000145c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001460:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001464:	50                   	push   eax
c0001465:	e8 7a fb ff ff       	call   c0000fe4 <dlmalloc>
c000146a:	83 c4 10             	add    esp,0x10
c000146d:	89 1d 54 34 02 c0    	mov    DWORD PTR ds:0xc0023454,ebx
c0001473:	85 c0                	test   eax,eax
c0001475:	0f 84 92 00 00 00    	je     c000150d <iALLOc+0x19b>
c000147b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000147e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001481:	83 e3 fc             	and    ebx,0xfffffffc
c0001484:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001488:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000148d:	74 1e                	je     c00014ad <iALLOc+0x13b>
c000148f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001493:	89 d9                	mov    ecx,ebx
c0001495:	52                   	push   edx
c0001496:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000149a:	83 e9 04             	sub    ecx,0x4
c000149d:	51                   	push   ecx
c000149e:	6a 00                	push   0x0
c00014a0:	50                   	push   eax
c00014a1:	e8 1a f0 ff ff       	call   c00004c0 <memset>
c00014a6:	83 c4 10             	add    esp,0x10
c00014a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	75 14                	jne    c00014c8 <iALLOc+0x156>
c00014b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014b7:	29 f3                	sub    ebx,esi
c00014b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014bc:	83 cb 01             	or     ebx,0x1
c00014bf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014c3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014c6:	89 f3                	mov    ebx,esi
c00014c8:	31 c0                	xor    eax,eax
c00014ca:	4d                   	dec    ebp
c00014cb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014d2:	39 c5                	cmp    ebp,eax
c00014d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014d7:	74 2c                	je     c0001505 <iALLOc+0x193>
c00014d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014dd:	85 c9                	test   ecx,ecx
c00014df:	75 15                	jne    c00014f6 <iALLOc+0x184>
c00014e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014e7:	b9 10 00 00 00       	mov    ecx,0x10
c00014ec:	83 fe 0f             	cmp    esi,0xf
c00014ef:	76 05                	jbe    c00014f6 <iALLOc+0x184>
c00014f1:	83 e6 f8             	and    esi,0xfffffff8
c00014f4:	89 f1                	mov    ecx,esi
c00014f6:	89 ce                	mov    esi,ecx
c00014f8:	29 cb                	sub    ebx,ecx
c00014fa:	83 ce 01             	or     esi,0x1
c00014fd:	40                   	inc    eax
c00014fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001501:	01 cf                	add    edi,ecx
c0001503:	eb c6                	jmp    c00014cb <iALLOc+0x159>
c0001505:	83 cb 01             	or     ebx,0x1
c0001508:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000150b:	eb 08                	jmp    c0001515 <iALLOc+0x1a3>
c000150d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001515:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001519:	83 c4 2c             	add    esp,0x2c
c000151c:	5b                   	pop    ebx
c000151d:	5e                   	pop    esi
c000151e:	5f                   	pop    edi
c000151f:	5d                   	pop    ebp
c0001520:	c3                   	ret    

c0001521 <dlrealloc>:
c0001521:	55                   	push   ebp
c0001522:	57                   	push   edi
c0001523:	56                   	push   esi
c0001524:	53                   	push   ebx
c0001525:	83 ec 1c             	sub    esp,0x1c
c0001528:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000152c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001530:	85 db                	test   ebx,ebx
c0001532:	75 10                	jne    c0001544 <dlrealloc+0x23>
c0001534:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001538:	83 c4 1c             	add    esp,0x1c
c000153b:	5b                   	pop    ebx
c000153c:	5e                   	pop    esi
c000153d:	5f                   	pop    edi
c000153e:	5d                   	pop    ebp
c000153f:	e9 a0 fa ff ff       	jmp    c0000fe4 <dlmalloc>
c0001544:	83 f8 df             	cmp    eax,0xffffffdf
c0001547:	76 07                	jbe    c0001550 <dlrealloc+0x2f>
c0001549:	31 db                	xor    ebx,ebx
c000154b:	e9 6a 01 00 00       	jmp    c00016ba <dlrealloc+0x199>
c0001550:	83 c0 0b             	add    eax,0xb
c0001553:	bd 10 00 00 00       	mov    ebp,0x10
c0001558:	83 f8 0f             	cmp    eax,0xf
c000155b:	76 05                	jbe    c0001562 <dlrealloc+0x41>
c000155d:	83 e0 f8             	and    eax,0xfffffff8
c0001560:	89 c5                	mov    ebp,eax
c0001562:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001565:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001568:	89 c6                	mov    esi,eax
c000156a:	83 e6 fc             	and    esi,0xfffffffc
c000156d:	a8 02                	test   al,0x2
c000156f:	75 d8                	jne    c0001549 <dlrealloc+0x28>
c0001571:	39 f5                	cmp    ebp,esi
c0001573:	0f 86 04 01 00 00    	jbe    c000167d <dlrealloc+0x15c>
c0001579:	8d 14 37             	lea    edx,[edi+esi*1]
c000157c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000157f:	39 15 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,edx
c0001585:	75 33                	jne    c00015ba <dlrealloc+0x99>
c0001587:	83 e1 fc             	and    ecx,0xfffffffc
c000158a:	01 f1                	add    ecx,esi
c000158c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001590:	8d 4d 10             	lea    ecx,[ebp+0x10]
c0001593:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001597:	77 49                	ja     c00015e2 <dlrealloc+0xc1>
c0001599:	01 ef                	add    edi,ebp
c000159b:	83 e0 01             	and    eax,0x1
c000159e:	09 e8                	or     eax,ebp
c00015a0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015a3:	89 3d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edi
c00015a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ad:	29 e8                	sub    eax,ebp
c00015af:	83 c8 01             	or     eax,0x1
c00015b2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015b5:	e9 00 01 00 00       	jmp    c00016ba <dlrealloc+0x199>
c00015ba:	89 c8                	mov    eax,ecx
c00015bc:	83 e0 fe             	and    eax,0xfffffffe
c00015bf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015c4:	75 1c                	jne    c00015e2 <dlrealloc+0xc1>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	39 cd                	cmp    ebp,ecx
c00015cd:	77 13                	ja     c00015e2 <dlrealloc+0xc1>
c00015cf:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015d2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015d5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015d8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015db:	89 ce                	mov    esi,ecx
c00015dd:	e9 9b 00 00 00       	jmp    c000167d <dlrealloc+0x15c>
c00015e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015e6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015e9:	83 ec 0c             	sub    esp,0xc
c00015ec:	50                   	push   eax
c00015ed:	e8 f2 f9 ff ff       	call   c0000fe4 <dlmalloc>
c00015f2:	83 c4 10             	add    esp,0x10
c00015f5:	85 c0                	test   eax,eax
c00015f7:	0f 84 4c ff ff ff    	je     c0001549 <dlrealloc+0x28>
c00015fd:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001600:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001604:	39 ca                	cmp    edx,ecx
c0001606:	75 0a                	jne    c0001612 <dlrealloc+0xf1>
c0001608:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000160b:	83 e0 fc             	and    eax,0xfffffffc
c000160e:	01 c6                	add    esi,eax
c0001610:	eb 6b                	jmp    c000167d <dlrealloc+0x15c>
c0001612:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001615:	83 f9 27             	cmp    ecx,0x27
c0001618:	76 08                	jbe    c0001622 <dlrealloc+0x101>
c000161a:	89 de                	mov    esi,ebx
c000161c:	89 c7                	mov    edi,eax
c000161e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001620:	eb 43                	jmp    c0001665 <dlrealloc+0x144>
c0001622:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001624:	83 f9 13             	cmp    ecx,0x13
c0001627:	89 10                	mov    DWORD PTR [eax],edx
c0001629:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000162c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000162f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001632:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001635:	76 2e                	jbe    c0001665 <dlrealloc+0x144>
c0001637:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000163a:	83 f9 1b             	cmp    ecx,0x1b
c000163d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001640:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001643:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001646:	76 1d                	jbe    c0001665 <dlrealloc+0x144>
c0001648:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000164b:	83 f9 23             	cmp    ecx,0x23
c000164e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001651:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001654:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001657:	76 0c                	jbe    c0001665 <dlrealloc+0x144>
c0001659:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000165c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000165f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001662:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001665:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001669:	83 ec 0c             	sub    esp,0xc
c000166c:	53                   	push   ebx
c000166d:	e8 17 f6 ff ff       	call   c0000c89 <dlfree>
c0001672:	83 c4 10             	add    esp,0x10
c0001675:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001679:	89 c3                	mov    ebx,eax
c000167b:	eb 3d                	jmp    c00016ba <dlrealloc+0x199>
c000167d:	89 f2                	mov    edx,esi
c000167f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001682:	29 ea                	sub    edx,ebp
c0001684:	83 e1 01             	and    ecx,0x1
c0001687:	8d 04 37             	lea    eax,[edi+esi*1]
c000168a:	83 fa 0f             	cmp    edx,0xf
c000168d:	77 0b                	ja     c000169a <dlrealloc+0x179>
c000168f:	09 ce                	or     esi,ecx
c0001691:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001694:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001698:	eb 20                	jmp    c00016ba <dlrealloc+0x199>
c000169a:	01 ef                	add    edi,ebp
c000169c:	83 ec 0c             	sub    esp,0xc
c000169f:	09 cd                	or     ebp,ecx
c00016a1:	83 ca 01             	or     edx,0x1
c00016a4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016a7:	83 c7 08             	add    edi,0x8
c00016aa:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ad:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016b1:	57                   	push   edi
c00016b2:	e8 d2 f5 ff ff       	call   c0000c89 <dlfree>
c00016b7:	83 c4 10             	add    esp,0x10
c00016ba:	83 c4 1c             	add    esp,0x1c
c00016bd:	89 d8                	mov    eax,ebx
c00016bf:	5b                   	pop    ebx
c00016c0:	5e                   	pop    esi
c00016c1:	5f                   	pop    edi
c00016c2:	5d                   	pop    ebp
c00016c3:	c3                   	ret    

c00016c4 <dlmemalign>:
c00016c4:	55                   	push   ebp
c00016c5:	57                   	push   edi
c00016c6:	56                   	push   esi
c00016c7:	53                   	push   ebx
c00016c8:	83 ec 0c             	sub    esp,0xc
c00016cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016d3:	83 fa 08             	cmp    edx,0x8
c00016d6:	77 10                	ja     c00016e8 <dlmemalign+0x24>
c00016d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016dc:	83 c4 0c             	add    esp,0xc
c00016df:	5b                   	pop    ebx
c00016e0:	5e                   	pop    esi
c00016e1:	5f                   	pop    edi
c00016e2:	5d                   	pop    ebp
c00016e3:	e9 fc f8 ff ff       	jmp    c0000fe4 <dlmalloc>
c00016e8:	bf 10 00 00 00       	mov    edi,0x10
c00016ed:	83 fa 0f             	cmp    edx,0xf
c00016f0:	76 13                	jbe    c0001705 <dlmemalign+0x41>
c00016f2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00016f5:	85 d1                	test   ecx,edx
c00016f7:	75 04                	jne    c00016fd <dlmemalign+0x39>
c00016f9:	89 d7                	mov    edi,edx
c00016fb:	eb 08                	jmp    c0001705 <dlmemalign+0x41>
c00016fd:	39 d7                	cmp    edi,edx
c00016ff:	73 04                	jae    c0001705 <dlmemalign+0x41>
c0001701:	01 ff                	add    edi,edi
c0001703:	eb f8                	jmp    c00016fd <dlmemalign+0x39>
c0001705:	83 f8 df             	cmp    eax,0xffffffdf
c0001708:	76 07                	jbe    c0001711 <dlmemalign+0x4d>
c000170a:	31 c0                	xor    eax,eax
c000170c:	e9 ce 00 00 00       	jmp    c00017df <dlmemalign+0x11b>
c0001711:	83 c0 0b             	add    eax,0xb
c0001714:	bd 10 00 00 00       	mov    ebp,0x10
c0001719:	83 f8 0f             	cmp    eax,0xf
c000171c:	76 05                	jbe    c0001723 <dlmemalign+0x5f>
c000171e:	83 e0 f8             	and    eax,0xfffffff8
c0001721:	89 c5                	mov    ebp,eax
c0001723:	83 ec 0c             	sub    esp,0xc
c0001726:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000172a:	50                   	push   eax
c000172b:	e8 b4 f8 ff ff       	call   c0000fe4 <dlmalloc>
c0001730:	83 c4 10             	add    esp,0x10
c0001733:	89 c1                	mov    ecx,eax
c0001735:	85 c0                	test   eax,eax
c0001737:	74 d1                	je     c000170a <dlmemalign+0x46>
c0001739:	31 d2                	xor    edx,edx
c000173b:	8d 70 f8             	lea    esi,[eax-0x8]
c000173e:	f7 f7                	div    edi
c0001740:	85 d2                	test   edx,edx
c0001742:	74 62                	je     c00017a6 <dlmemalign+0xe2>
c0001744:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001748:	89 f8                	mov    eax,edi
c000174a:	f7 d8                	neg    eax
c000174c:	21 c3                	and    ebx,eax
c000174e:	83 eb 08             	sub    ebx,0x8
c0001751:	89 d8                	mov    eax,ebx
c0001753:	29 f0                	sub    eax,esi
c0001755:	83 f8 0f             	cmp    eax,0xf
c0001758:	77 02                	ja     c000175c <dlmemalign+0x98>
c000175a:	01 fb                	add    ebx,edi
c000175c:	89 d8                	mov    eax,ebx
c000175e:	29 f0                	sub    eax,esi
c0001760:	89 c6                	mov    esi,eax
c0001762:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001765:	89 c2                	mov    edx,eax
c0001767:	83 e2 fc             	and    edx,0xfffffffc
c000176a:	29 f2                	sub    edx,esi
c000176c:	a8 02                	test   al,0x2
c000176e:	74 10                	je     c0001780 <dlmemalign+0xbc>
c0001770:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001773:	83 ca 02             	or     edx,0x2
c0001776:	8d 43 08             	lea    eax,[ebx+0x8]
c0001779:	89 33                	mov    DWORD PTR [ebx],esi
c000177b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000177e:	eb 5f                	jmp    c00017df <dlmemalign+0x11b>
c0001780:	83 ec 0c             	sub    esp,0xc
c0001783:	89 d0                	mov    eax,edx
c0001785:	83 c8 01             	or     eax,0x1
c0001788:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000178b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001790:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001793:	83 e0 01             	and    eax,0x1
c0001796:	09 f0                	or     eax,esi
c0001798:	89 de                	mov    esi,ebx
c000179a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000179d:	51                   	push   ecx
c000179e:	e8 e6 f4 ff ff       	call   c0000c89 <dlfree>
c00017a3:	83 c4 10             	add    esp,0x10
c00017a6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017a9:	a8 02                	test   al,0x2
c00017ab:	75 2f                	jne    c00017dc <dlmemalign+0x118>
c00017ad:	83 e0 fc             	and    eax,0xfffffffc
c00017b0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017b3:	39 c2                	cmp    edx,eax
c00017b5:	73 25                	jae    c00017dc <dlmemalign+0x118>
c00017b7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ba:	83 ec 0c             	sub    esp,0xc
c00017bd:	29 e8                	sub    eax,ebp
c00017bf:	83 c2 08             	add    edx,0x8
c00017c2:	83 c8 01             	or     eax,0x1
c00017c5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017c8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017cb:	83 e0 01             	and    eax,0x1
c00017ce:	09 c5                	or     ebp,eax
c00017d0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017d3:	52                   	push   edx
c00017d4:	e8 b0 f4 ff ff       	call   c0000c89 <dlfree>
c00017d9:	83 c4 10             	add    esp,0x10
c00017dc:	8d 46 08             	lea    eax,[esi+0x8]
c00017df:	83 c4 0c             	add    esp,0xc
c00017e2:	5b                   	pop    ebx
c00017e3:	5e                   	pop    esi
c00017e4:	5f                   	pop    edi
c00017e5:	5d                   	pop    ebp
c00017e6:	c3                   	ret    

c00017e7 <dlcalloc>:
c00017e7:	53                   	push   ebx
c00017e8:	83 ec 14             	sub    esp,0x14
c00017eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ef:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00017f4:	50                   	push   eax
c00017f5:	e8 ea f7 ff ff       	call   c0000fe4 <dlmalloc>
c00017fa:	83 c4 10             	add    esp,0x10
c00017fd:	89 c3                	mov    ebx,eax
c00017ff:	85 c0                	test   eax,eax
c0001801:	74 77                	je     c000187a <dlcalloc+0x93>
c0001803:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001806:	89 d0                	mov    eax,edx
c0001808:	83 e0 fc             	and    eax,0xfffffffc
c000180b:	80 e2 02             	and    dl,0x2
c000180e:	75 5a                	jne    c000186a <dlcalloc+0x83>
c0001810:	83 e8 04             	sub    eax,0x4
c0001813:	83 f8 27             	cmp    eax,0x27
c0001816:	76 03                	jbe    c000181b <dlcalloc+0x34>
c0001818:	51                   	push   ecx
c0001819:	eb 53                	jmp    c000186e <dlcalloc+0x87>
c000181b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001821:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001828:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000182f:	83 f8 13             	cmp    eax,0x13
c0001832:	76 46                	jbe    c000187a <dlcalloc+0x93>
c0001834:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000183b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001842:	83 f8 1b             	cmp    eax,0x1b
c0001845:	76 33                	jbe    c000187a <dlcalloc+0x93>
c0001847:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000184e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001855:	83 f8 23             	cmp    eax,0x23
c0001858:	76 20                	jbe    c000187a <dlcalloc+0x93>
c000185a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001861:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001868:	eb 10                	jmp    c000187a <dlcalloc+0x93>
c000186a:	83 e8 08             	sub    eax,0x8
c000186d:	52                   	push   edx
c000186e:	50                   	push   eax
c000186f:	6a 00                	push   0x0
c0001871:	53                   	push   ebx
c0001872:	e8 49 ec ff ff       	call   c00004c0 <memset>
c0001877:	83 c4 10             	add    esp,0x10
c000187a:	89 d8                	mov    eax,ebx
c000187c:	83 c4 08             	add    esp,0x8
c000187f:	5b                   	pop    ebx
c0001880:	c3                   	ret    

c0001881 <dlcfree>:
c0001881:	e9 03 f4 ff ff       	jmp    c0000c89 <dlfree>

c0001886 <dlindependent_calloc>:
c0001886:	83 ec 28             	sub    esp,0x28
c0001889:	b9 03 00 00 00       	mov    ecx,0x3
c000188e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001892:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001896:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000189a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	e8 cb fa ff ff       	call   c0001372 <iALLOc>
c00018a7:	83 c4 2c             	add    esp,0x2c
c00018aa:	c3                   	ret    

c00018ab <dlindependent_comalloc>:
c00018ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018b3:	31 c9                	xor    ecx,ecx
c00018b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018bd:	e9 b0 fa ff ff       	jmp    c0001372 <iALLOc>

c00018c2 <dlvalloc>:
c00018c2:	83 ec 0c             	sub    esp,0xc
c00018c5:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c00018cc:	75 0a                	jne    c00018d8 <dlvalloc+0x16>
c00018ce:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00018d3:	e8 ca f2 ff ff       	call   c0000ba2 <malloc_consolidate>
c00018d8:	50                   	push   eax
c00018d9:	50                   	push   eax
c00018da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018de:	ff 35 5c 34 02 c0    	push   DWORD PTR ds:0xc002345c
c00018e4:	e8 db fd ff ff       	call   c00016c4 <dlmemalign>
c00018e9:	83 c4 1c             	add    esp,0x1c
c00018ec:	c3                   	ret    

c00018ed <dlpvalloc>:
c00018ed:	83 ec 0c             	sub    esp,0xc
c00018f0:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c00018f7:	75 0a                	jne    c0001903 <dlpvalloc+0x16>
c00018f9:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00018fe:	e8 9f f2 ff ff       	call   c0000ba2 <malloc_consolidate>
c0001903:	a1 5c 34 02 c0       	mov    eax,ds:0xc002345c
c0001908:	89 c1                	mov    ecx,eax
c000190a:	52                   	push   edx
c000190b:	f7 d9                	neg    ecx
c000190d:	52                   	push   edx
c000190e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001912:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001916:	21 ca                	and    edx,ecx
c0001918:	52                   	push   edx
c0001919:	50                   	push   eax
c000191a:	e8 a5 fd ff ff       	call   c00016c4 <dlmemalign>
c000191f:	83 c4 1c             	add    esp,0x1c
c0001922:	c3                   	ret    

c0001923 <dlmalloc_trim>:
c0001923:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001928:	e8 75 f2 ff ff       	call   c0000ba2 <malloc_consolidate>
c000192d:	31 c0                	xor    eax,eax
c000192f:	c3                   	ret    

c0001930 <dlmalloc_usable_size>:
c0001930:	53                   	push   ebx
c0001931:	31 c0                	xor    eax,eax
c0001933:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001937:	85 c9                	test   ecx,ecx
c0001939:	74 24                	je     c000195f <dlmalloc_usable_size+0x2f>
c000193b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000193e:	f6 c2 02             	test   dl,0x2
c0001941:	74 08                	je     c000194b <dlmalloc_usable_size+0x1b>
c0001943:	83 e2 fc             	and    edx,0xfffffffc
c0001946:	8d 42 f8             	lea    eax,[edx-0x8]
c0001949:	eb 14                	jmp    c000195f <dlmalloc_usable_size+0x2f>
c000194b:	89 d3                	mov    ebx,edx
c000194d:	31 c0                	xor    eax,eax
c000194f:	83 e3 fe             	and    ebx,0xfffffffe
c0001952:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001957:	74 06                	je     c000195f <dlmalloc_usable_size+0x2f>
c0001959:	83 e2 fc             	and    edx,0xfffffffc
c000195c:	8d 42 fc             	lea    eax,[edx-0x4]
c000195f:	5b                   	pop    ebx
c0001960:	c3                   	ret    

c0001961 <dlmallinfo>:
c0001961:	55                   	push   ebp
c0001962:	57                   	push   edi
c0001963:	56                   	push   esi
c0001964:	53                   	push   ebx
c0001965:	83 ec 08             	sub    esp,0x8
c0001968:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000196c:	83 3d 2c 31 02 c0 00 	cmp    DWORD PTR ds:0xc002312c,0x0
c0001973:	75 0a                	jne    c000197f <dlmallinfo+0x1e>
c0001975:	b8 00 31 02 c0       	mov    eax,0xc0023100
c000197a:	e8 23 f2 ff ff       	call   c0000ba2 <malloc_consolidate>
c000197f:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c0001984:	31 ed                	xor    ebp,ebp
c0001986:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001989:	31 c9                	xor    ecx,ecx
c000198b:	83 e0 fc             	and    eax,0xfffffffc
c000198e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001992:	31 c0                	xor    eax,eax
c0001994:	8b 14 85 04 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcefc]
c000199b:	85 d2                	test   edx,edx
c000199d:	74 0e                	je     c00019ad <dlmallinfo+0x4c>
c000199f:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019a2:	45                   	inc    ebp
c00019a3:	83 e6 fc             	and    esi,0xfffffffc
c00019a6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019a9:	01 f1                	add    ecx,esi
c00019ab:	eb ee                	jmp    c000199b <dlmallinfo+0x3a>
c00019ad:	40                   	inc    eax
c00019ae:	83 f8 0a             	cmp    eax,0xa
c00019b1:	75 e1                	jne    c0001994 <dlmallinfo+0x33>
c00019b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019be:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019c1:	b8 34 31 02 c0       	mov    eax,0xc0023134
c00019c6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019c9:	39 f0                	cmp    eax,esi
c00019cb:	74 10                	je     c00019dd <dlmallinfo+0x7c>
c00019cd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019d0:	ff 04 24             	inc    DWORD PTR [esp]
c00019d3:	83 e7 fc             	and    edi,0xfffffffc
c00019d6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019d9:	01 fa                	add    edx,edi
c00019db:	eb ec                	jmp    c00019c9 <dlmallinfo+0x68>
c00019dd:	83 c0 08             	add    eax,0x8
c00019e0:	3d 2c 34 02 c0       	cmp    eax,0xc002342c
c00019e5:	75 df                	jne    c00019c6 <dlmallinfo+0x65>
c00019e7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019ea:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019ed:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00019f0:	a1 68 34 02 c0       	mov    eax,ds:0xc0023468
c00019f5:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00019f8:	89 03                	mov    DWORD PTR [ebx],eax
c00019fa:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00019fd:	8b 35 50 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023450
c0001a03:	29 d0                	sub    eax,edx
c0001a05:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a08:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a0b:	8b 35 64 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023464
c0001a11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a15:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a18:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a1b:	8b 35 74 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023474
c0001a21:	89 d8                	mov    eax,ebx
c0001a23:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a26:	83 c4 08             	add    esp,0x8
c0001a29:	5b                   	pop    ebx
c0001a2a:	5e                   	pop    esi
c0001a2b:	5f                   	pop    edi
c0001a2c:	5d                   	pop    ebp
c0001a2d:	c2 04 00             	ret    0x4

c0001a30 <dlmalloc_stats>:
c0001a30:	83 ec 30             	sub    esp,0x30
c0001a33:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a37:	50                   	push   eax
c0001a38:	e8 24 ff ff ff       	call   c0001961 <dlmallinfo>
c0001a3d:	83 c4 30             	add    esp,0x30
c0001a40:	c3                   	ret    

c0001a41 <dlmallopt>:
c0001a41:	56                   	push   esi
c0001a42:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001a47:	53                   	push   ebx
c0001a48:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a50:	e8 4d f1 ff ff       	call   c0000ba2 <malloc_consolidate>
c0001a55:	8d 46 04             	lea    eax,[esi+0x4]
c0001a58:	83 f8 05             	cmp    eax,0x5
c0001a5b:	77 67                	ja     c0001ac4 <dlmallopt+0x83>
c0001a5d:	ff 24 85 c4 ea 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe153c]
c0001a64:	83 fb 50             	cmp    ebx,0x50
c0001a67:	77 5b                	ja     c0001ac4 <dlmallopt+0x83>
c0001a69:	ba 08 00 00 00       	mov    edx,0x8
c0001a6e:	85 db                	test   ebx,ebx
c0001a70:	74 12                	je     c0001a84 <dlmallopt+0x43>
c0001a72:	83 c3 0b             	add    ebx,0xb
c0001a75:	ba 10 00 00 00       	mov    edx,0x10
c0001a7a:	83 fb 0f             	cmp    ebx,0xf
c0001a7d:	76 05                	jbe    c0001a84 <dlmallopt+0x43>
c0001a7f:	89 da                	mov    edx,ebx
c0001a81:	83 e2 f8             	and    edx,0xfffffff8
c0001a84:	a1 00 31 02 c0       	mov    eax,ds:0xc0023100
c0001a89:	83 e0 03             	and    eax,0x3
c0001a8c:	09 d0                	or     eax,edx
c0001a8e:	a3 00 31 02 c0       	mov    ds:0xc0023100,eax
c0001a93:	eb 31                	jmp    c0001ac6 <dlmallopt+0x85>
c0001a95:	89 1d 44 34 02 c0    	mov    DWORD PTR ds:0xc0023444,ebx
c0001a9b:	eb 06                	jmp    c0001aa3 <dlmallopt+0x62>
c0001a9d:	89 1d 48 34 02 c0    	mov    DWORD PTR ds:0xc0023448,ebx
c0001aa3:	be 01 00 00 00       	mov    esi,0x1
c0001aa8:	eb 1c                	jmp    c0001ac6 <dlmallopt+0x85>
c0001aaa:	89 1d 4c 34 02 c0    	mov    DWORD PTR ds:0xc002344c,ebx
c0001ab0:	eb f1                	jmp    c0001aa3 <dlmallopt+0x62>
c0001ab2:	31 f6                	xor    esi,esi
c0001ab4:	85 db                	test   ebx,ebx
c0001ab6:	75 0e                	jne    c0001ac6 <dlmallopt+0x85>
c0001ab8:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c0001ac2:	eb df                	jmp    c0001aa3 <dlmallopt+0x62>
c0001ac4:	31 f6                	xor    esi,esi
c0001ac6:	89 f0                	mov    eax,esi
c0001ac8:	5b                   	pop    ebx
c0001ac9:	5e                   	pop    esi
c0001aca:	c3                   	ret    
c0001acb:	90                   	nop

c0001acc <isblank>:
c0001acc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ad1:	74 09                	je     c0001adc <isblank+0x10>
c0001ad3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ad8:	75 0a                	jne    c0001ae4 <isblank+0x18>
c0001ada:	66 90                	xchg   ax,ax
c0001adc:	b8 01 00 00 00       	mov    eax,0x1
c0001ae1:	c3                   	ret    
c0001ae2:	66 90                	xchg   ax,ax
c0001ae4:	b8 00 00 00 00       	mov    eax,0x0
c0001ae9:	c3                   	ret    
c0001aea:	66 90                	xchg   ax,ax

c0001aec <iscntrl>:
c0001aec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001af1:	7e 09                	jle    c0001afc <iscntrl+0x10>
c0001af3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001af8:	75 0a                	jne    c0001b04 <iscntrl+0x18>
c0001afa:	66 90                	xchg   ax,ax
c0001afc:	b8 01 00 00 00       	mov    eax,0x1
c0001b01:	c3                   	ret    
c0001b02:	66 90                	xchg   ax,ax
c0001b04:	b8 00 00 00 00       	mov    eax,0x0
c0001b09:	c3                   	ret    
c0001b0a:	66 90                	xchg   ax,ax

c0001b0c <isdigit>:
c0001b0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b11:	7e 0d                	jle    c0001b20 <isdigit+0x14>
c0001b13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b18:	7f 06                	jg     c0001b20 <isdigit+0x14>
c0001b1a:	b8 01 00 00 00       	mov    eax,0x1
c0001b1f:	c3                   	ret    
c0001b20:	b8 00 00 00 00       	mov    eax,0x0
c0001b25:	c3                   	ret    
c0001b26:	66 90                	xchg   ax,ax

c0001b28 <islower>:
c0001b28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b2d:	7e 0d                	jle    c0001b3c <islower+0x14>
c0001b2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b34:	7f 06                	jg     c0001b3c <islower+0x14>
c0001b36:	b8 01 00 00 00       	mov    eax,0x1
c0001b3b:	c3                   	ret    
c0001b3c:	b8 00 00 00 00       	mov    eax,0x0
c0001b41:	c3                   	ret    
c0001b42:	66 90                	xchg   ax,ax

c0001b44 <isspace>:
c0001b44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b49:	7c 19                	jl     c0001b64 <isspace+0x20>
c0001b4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b50:	7e 0a                	jle    c0001b5c <isspace+0x18>
c0001b52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b57:	75 0b                	jne    c0001b64 <isspace+0x20>
c0001b59:	8d 76 00             	lea    esi,[esi+0x0]
c0001b5c:	b8 01 00 00 00       	mov    eax,0x1
c0001b61:	c3                   	ret    
c0001b62:	66 90                	xchg   ax,ax
c0001b64:	b8 00 00 00 00       	mov    eax,0x0
c0001b69:	c3                   	ret    
c0001b6a:	66 90                	xchg   ax,ax

c0001b6c <isupper>:
c0001b6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b71:	7e 0d                	jle    c0001b80 <isupper+0x14>
c0001b73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b78:	7f 06                	jg     c0001b80 <isupper+0x14>
c0001b7a:	b8 01 00 00 00       	mov    eax,0x1
c0001b7f:	c3                   	ret    
c0001b80:	b8 00 00 00 00       	mov    eax,0x0
c0001b85:	c3                   	ret    
c0001b86:	66 90                	xchg   ax,ax

c0001b88 <isalpha>:
c0001b88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b8c:	e8 db ff ff ff       	call   c0001b6c <isupper>
c0001b91:	83 c4 04             	add    esp,0x4
c0001b94:	85 c0                	test   eax,eax
c0001b96:	75 10                	jne    c0001ba8 <isalpha+0x20>
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 87 ff ff ff       	call   c0001b28 <islower>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	74 08                	je     c0001bb0 <isalpha+0x28>
c0001ba8:	b8 01 00 00 00       	mov    eax,0x1
c0001bad:	c3                   	ret    
c0001bae:	66 90                	xchg   ax,ax
c0001bb0:	b8 00 00 00 00       	mov    eax,0x0
c0001bb5:	c3                   	ret    
c0001bb6:	66 90                	xchg   ax,ax

c0001bb8 <isalnum>:
c0001bb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bbc:	e8 c7 ff ff ff       	call   c0001b88 <isalpha>
c0001bc1:	83 c4 04             	add    esp,0x4
c0001bc4:	85 c0                	test   eax,eax
c0001bc6:	75 10                	jne    c0001bd8 <isalnum+0x20>
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 3b ff ff ff       	call   c0001b0c <isdigit>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	74 08                	je     c0001be0 <isalnum+0x28>
c0001bd8:	b8 01 00 00 00       	mov    eax,0x1
c0001bdd:	c3                   	ret    
c0001bde:	66 90                	xchg   ax,ax
c0001be0:	b8 00 00 00 00       	mov    eax,0x0
c0001be5:	c3                   	ret    
c0001be6:	66 90                	xchg   ax,ax

c0001be8 <ispunct>:
c0001be8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bec:	e8 c7 ff ff ff       	call   c0001bb8 <isalnum>
c0001bf1:	83 c4 04             	add    esp,0x4
c0001bf4:	85 c0                	test   eax,eax
c0001bf6:	75 28                	jne    c0001c20 <ispunct+0x38>
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 43 ff ff ff       	call   c0001b44 <isspace>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 18                	jne    c0001c20 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 db fe ff ff       	call   c0001aec <iscntrl>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 08                	jne    c0001c20 <ispunct+0x38>
c0001c18:	b8 01 00 00 00       	mov    eax,0x1
c0001c1d:	c3                   	ret    
c0001c1e:	66 90                	xchg   ax,ax
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <isgraph>:
c0001c28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c2c:	e8 87 ff ff ff       	call   c0001bb8 <isalnum>
c0001c31:	83 c4 04             	add    esp,0x4
c0001c34:	85 c0                	test   eax,eax
c0001c36:	75 10                	jne    c0001c48 <isgraph+0x20>
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 a7 ff ff ff       	call   c0001be8 <ispunct>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	74 08                	je     c0001c50 <isgraph+0x28>
c0001c48:	b8 01 00 00 00       	mov    eax,0x1
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax
c0001c50:	b8 00 00 00 00       	mov    eax,0x0
c0001c55:	c3                   	ret    
c0001c56:	66 90                	xchg   ax,ax

c0001c58 <isprint>:
c0001c58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c5c:	e8 c7 ff ff ff       	call   c0001c28 <isgraph>
c0001c61:	83 c4 04             	add    esp,0x4
c0001c64:	85 c0                	test   eax,eax
c0001c66:	75 08                	jne    c0001c70 <isprint+0x18>
c0001c68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c6d:	75 09                	jne    c0001c78 <isprint+0x20>
c0001c6f:	90                   	nop
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isxdigit>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 83 fe ff ff       	call   c0001b0c <isdigit>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 20                	jne    c0001cb0 <isxdigit+0x30>
c0001c90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c95:	7e 09                	jle    c0001ca0 <isxdigit+0x20>
c0001c97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001c9c:	7e 12                	jle    c0001cb0 <isxdigit+0x30>
c0001c9e:	66 90                	xchg   ax,ax
c0001ca0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001ca5:	7e 11                	jle    c0001cb8 <isxdigit+0x38>
c0001ca7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cac:	7f 0a                	jg     c0001cb8 <isxdigit+0x38>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 01 00 00 00       	mov    eax,0x1
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax
c0001cb8:	b8 00 00 00 00       	mov    eax,0x0
c0001cbd:	c3                   	ret    

c0001cbe <disk_status>:
c0001cbe:	31 c0                	xor    eax,eax
c0001cc0:	c3                   	ret    

c0001cc1 <disk_initialize>:
c0001cc1:	31 c0                	xor    eax,eax
c0001cc3:	c3                   	ret    

c0001cc4 <disk_read>:
c0001cc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cc9:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001cd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cd5:	e9 b6 64 01 00       	jmp    c0018190 <fatWrapperReadDisk>

c0001cda <disk_write>:
c0001cda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cdf:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001ce7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ceb:	e9 e4 64 01 00       	jmp    c00181d4 <fatWrapperWriteDisk>

c0001cf0 <disk_ioctl>:
c0001cf0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001cf5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001cf9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cfe:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001d06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d0a:	e9 09 65 01 00       	jmp    c0018218 <fatWrapperIoctl>

c0001d0f <ld_word>:
c0001d0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d16:	c1 e2 08             	shl    edx,0x8
c0001d19:	09 d0                	or     eax,edx
c0001d1b:	c3                   	ret    

c0001d1c <ld_dword>:
c0001d1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d20:	89 d1                	mov    ecx,edx
c0001d22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d26:	c1 e1 08             	shl    ecx,0x8
c0001d29:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d2c:	09 ca                	or     edx,ecx
c0001d2e:	c1 e2 08             	shl    edx,0x8
c0001d31:	09 d0                	or     eax,edx
c0001d33:	c3                   	ret    

c0001d34 <st_word>:
c0001d34:	66 89 10             	mov    WORD PTR [eax],dx
c0001d37:	c3                   	ret    

c0001d38 <st_dword>:
c0001d38:	89 10                	mov    DWORD PTR [eax],edx
c0001d3a:	c3                   	ret    

c0001d3b <mem_cpy>:
c0001d3b:	85 c9                	test   ecx,ecx
c0001d3d:	74 10                	je     c0001d4f <mem_cpy+0x14>
c0001d3f:	57                   	push   edi
c0001d40:	01 c1                	add    ecx,eax
c0001d42:	56                   	push   esi
c0001d43:	89 c7                	mov    edi,eax
c0001d45:	89 d6                	mov    esi,edx
c0001d47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d48:	39 f9                	cmp    ecx,edi
c0001d4a:	75 fb                	jne    c0001d47 <mem_cpy+0xc>
c0001d4c:	5e                   	pop    esi
c0001d4d:	5f                   	pop    edi
c0001d4e:	c3                   	ret    
c0001d4f:	c3                   	ret    

c0001d50 <mem_set>:
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	40                   	inc    eax
c0001d53:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d56:	39 c8                	cmp    eax,ecx
c0001d58:	75 f8                	jne    c0001d52 <mem_set+0x2>
c0001d5a:	c3                   	ret    

c0001d5b <mem_cmp>:
c0001d5b:	57                   	push   edi
c0001d5c:	56                   	push   esi
c0001d5d:	89 c6                	mov    esi,eax
c0001d5f:	53                   	push   ebx
c0001d60:	46                   	inc    esi
c0001d61:	42                   	inc    edx
c0001d62:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d66:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d6a:	29 fb                	sub    ebx,edi
c0001d6c:	89 cf                	mov    edi,ecx
c0001d6e:	29 f7                	sub    edi,esi
c0001d70:	01 c7                	add    edi,eax
c0001d72:	74 04                	je     c0001d78 <mem_cmp+0x1d>
c0001d74:	85 db                	test   ebx,ebx
c0001d76:	74 e8                	je     c0001d60 <mem_cmp+0x5>
c0001d78:	89 d8                	mov    eax,ebx
c0001d7a:	5b                   	pop    ebx
c0001d7b:	5e                   	pop    esi
c0001d7c:	5f                   	pop    edi
c0001d7d:	c3                   	ret    

c0001d7e <chk_chr>:
c0001d7e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d81:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d84:	74 07                	je     c0001d8d <chk_chr+0xf>
c0001d86:	39 d1                	cmp    ecx,edx
c0001d88:	74 03                	je     c0001d8d <chk_chr+0xf>
c0001d8a:	40                   	inc    eax
c0001d8b:	eb f1                	jmp    c0001d7e <chk_chr>
c0001d8d:	89 c8                	mov    eax,ecx
c0001d8f:	c3                   	ret    

c0001d90 <dbc_1st>:
c0001d90:	31 c0                	xor    eax,eax
c0001d92:	c3                   	ret    

c0001d93 <dbc_2nd>:
c0001d93:	31 c0                	xor    eax,eax
c0001d95:	c3                   	ret    

c0001d96 <tchar2uni>:
c0001d96:	57                   	push   edi
c0001d97:	89 c7                	mov    edi,eax
c0001d99:	56                   	push   esi
c0001d9a:	53                   	push   ebx
c0001d9b:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d9d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d9f:	8d 73 01             	lea    esi,[ebx+0x1]
c0001da2:	84 c9                	test   cl,cl
c0001da4:	78 0a                	js     c0001db0 <tchar2uni+0x1a>
c0001da6:	0f b6 d1             	movzx  edx,cl
c0001da9:	89 f3                	mov    ebx,esi
c0001dab:	e9 9f 00 00 00       	jmp    c0001e4f <tchar2uni+0xb9>
c0001db0:	88 ca                	mov    dl,cl
c0001db2:	83 e2 e0             	and    edx,0xffffffe0
c0001db5:	80 fa c0             	cmp    dl,0xc0
c0001db8:	75 0c                	jne    c0001dc6 <tchar2uni+0x30>
c0001dba:	89 ca                	mov    edx,ecx
c0001dbc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dc1:	83 e2 1f             	and    edx,0x1f
c0001dc4:	eb 2e                	jmp    c0001df4 <tchar2uni+0x5e>
c0001dc6:	88 ca                	mov    dl,cl
c0001dc8:	83 e2 f0             	and    edx,0xfffffff0
c0001dcb:	80 fa e0             	cmp    dl,0xe0
c0001dce:	75 0c                	jne    c0001ddc <tchar2uni+0x46>
c0001dd0:	89 ca                	mov    edx,ecx
c0001dd2:	b9 02 00 00 00       	mov    ecx,0x2
c0001dd7:	83 e2 0f             	and    edx,0xf
c0001dda:	eb 18                	jmp    c0001df4 <tchar2uni+0x5e>
c0001ddc:	88 ca                	mov    dl,cl
c0001dde:	83 e2 f8             	and    edx,0xfffffff8
c0001de1:	88 d0                	mov    al,dl
c0001de3:	83 ca ff             	or     edx,0xffffffff
c0001de6:	3c f0                	cmp    al,0xf0
c0001de8:	75 6c                	jne    c0001e56 <tchar2uni+0xc0>
c0001dea:	89 ca                	mov    edx,ecx
c0001dec:	b9 03 00 00 00       	mov    ecx,0x3
c0001df1:	83 e2 07             	and    edx,0x7
c0001df4:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001df8:	46                   	inc    esi
c0001df9:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001dfc:	88 c8                	mov    al,cl
c0001dfe:	83 e0 c0             	and    eax,0xffffffc0
c0001e01:	3c 80                	cmp    al,0x80
c0001e03:	75 4e                	jne    c0001e53 <tchar2uni+0xbd>
c0001e05:	c1 e2 06             	shl    edx,0x6
c0001e08:	83 e1 3f             	and    ecx,0x3f
c0001e0b:	09 ca                	or     edx,ecx
c0001e0d:	39 de                	cmp    esi,ebx
c0001e0f:	75 e7                	jne    c0001df8 <tchar2uni+0x62>
c0001e11:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e14:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e1a:	77 37                	ja     c0001e53 <tchar2uni+0xbd>
c0001e1c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e22:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e28:	76 29                	jbe    c0001e53 <tchar2uni+0xbd>
c0001e2a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e30:	76 1d                	jbe    c0001e4f <tchar2uni+0xb9>
c0001e32:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e38:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e3e:	c1 e1 06             	shl    ecx,0x6
c0001e41:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e47:	09 ca                	or     edx,ecx
c0001e49:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e4f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e51:	eb 03                	jmp    c0001e56 <tchar2uni+0xc0>
c0001e53:	83 ca ff             	or     edx,0xffffffff
c0001e56:	5b                   	pop    ebx
c0001e57:	89 d0                	mov    eax,edx
c0001e59:	5e                   	pop    esi
c0001e5a:	5f                   	pop    edi
c0001e5b:	c3                   	ret    

c0001e5c <put_utf>:
c0001e5c:	53                   	push   ebx
c0001e5d:	83 f8 7f             	cmp    eax,0x7f
c0001e60:	89 c3                	mov    ebx,eax
c0001e62:	b0 00                	mov    al,0x0
c0001e64:	77 11                	ja     c0001e77 <put_utf+0x1b>
c0001e66:	85 c9                	test   ecx,ecx
c0001e68:	0f 84 e5 00 00 00    	je     c0001f53 <put_utf+0xf7>
c0001e6e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e70:	b0 01                	mov    al,0x1
c0001e72:	e9 dc 00 00 00       	jmp    c0001f53 <put_utf+0xf7>
c0001e77:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e7d:	77 23                	ja     c0001ea2 <put_utf+0x46>
c0001e7f:	83 f9 01             	cmp    ecx,0x1
c0001e82:	0f 86 cb 00 00 00    	jbe    c0001f53 <put_utf+0xf7>
c0001e88:	89 d8                	mov    eax,ebx
c0001e8a:	83 e3 3f             	and    ebx,0x3f
c0001e8d:	c1 e8 06             	shr    eax,0x6
c0001e90:	83 cb 80             	or     ebx,0xffffff80
c0001e93:	83 c8 c0             	or     eax,0xffffffc0
c0001e96:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e99:	88 02                	mov    BYTE PTR [edx],al
c0001e9b:	b0 02                	mov    al,0x2
c0001e9d:	e9 b1 00 00 00       	jmp    c0001f53 <put_utf+0xf7>
c0001ea2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ea8:	77 40                	ja     c0001eea <put_utf+0x8e>
c0001eaa:	83 f9 02             	cmp    ecx,0x2
c0001ead:	0f 86 a0 00 00 00    	jbe    c0001f53 <put_utf+0xf7>
c0001eb3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001eb9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ebf:	0f 86 8e 00 00 00    	jbe    c0001f53 <put_utf+0xf7>
c0001ec5:	89 d8                	mov    eax,ebx
c0001ec7:	c1 e8 0c             	shr    eax,0xc
c0001eca:	83 c8 e0             	or     eax,0xffffffe0
c0001ecd:	88 02                	mov    BYTE PTR [edx],al
c0001ecf:	89 d8                	mov    eax,ebx
c0001ed1:	83 e3 3f             	and    ebx,0x3f
c0001ed4:	c1 e8 06             	shr    eax,0x6
c0001ed7:	83 cb 80             	or     ebx,0xffffff80
c0001eda:	83 e0 3f             	and    eax,0x3f
c0001edd:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ee0:	83 c8 80             	or     eax,0xffffff80
c0001ee3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ee6:	b0 03                	mov    al,0x3
c0001ee8:	eb 69                	jmp    c0001f53 <put_utf+0xf7>
c0001eea:	83 f9 03             	cmp    ecx,0x3
c0001eed:	76 64                	jbe    c0001f53 <put_utf+0xf7>
c0001eef:	89 d9                	mov    ecx,ebx
c0001ef1:	0f b7 c3             	movzx  eax,bx
c0001ef4:	66 31 c9             	xor    cx,cx
c0001ef7:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001efd:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f03:	c1 e9 06             	shr    ecx,0x6
c0001f06:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f0c:	77 43                	ja     c0001f51 <put_utf+0xf5>
c0001f0e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f14:	77 3b                	ja     c0001f51 <put_utf+0xf5>
c0001f16:	09 cb                	or     ebx,ecx
c0001f18:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f1e:	89 d8                	mov    eax,ebx
c0001f20:	c1 e8 12             	shr    eax,0x12
c0001f23:	83 c8 f0             	or     eax,0xfffffff0
c0001f26:	88 02                	mov    BYTE PTR [edx],al
c0001f28:	89 d8                	mov    eax,ebx
c0001f2a:	c1 e8 0c             	shr    eax,0xc
c0001f2d:	83 e0 3f             	and    eax,0x3f
c0001f30:	83 c8 80             	or     eax,0xffffff80
c0001f33:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f36:	89 d8                	mov    eax,ebx
c0001f38:	83 e3 3f             	and    ebx,0x3f
c0001f3b:	c1 e8 06             	shr    eax,0x6
c0001f3e:	83 cb 80             	or     ebx,0xffffff80
c0001f41:	83 e0 3f             	and    eax,0x3f
c0001f44:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f47:	83 c8 80             	or     eax,0xffffff80
c0001f4a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f4d:	b0 04                	mov    al,0x4
c0001f4f:	eb 02                	jmp    c0001f53 <put_utf+0xf7>
c0001f51:	31 c0                	xor    eax,eax
c0001f53:	5b                   	pop    ebx
c0001f54:	c3                   	ret    

c0001f55 <clst2sect>:
c0001f55:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f58:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f5b:	83 ea 02             	sub    edx,0x2
c0001f5e:	39 ca                	cmp    edx,ecx
c0001f60:	76 0d                	jbe    c0001f6f <clst2sect+0x1a>
c0001f62:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f66:	0f af d1             	imul   edx,ecx
c0001f69:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f6c:	89 d0                	mov    eax,edx
c0001f6e:	c3                   	ret    
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <pick_lfn>:
c0001f72:	55                   	push   ebp
c0001f73:	57                   	push   edi
c0001f74:	56                   	push   esi
c0001f75:	89 d6                	mov    esi,edx
c0001f77:	53                   	push   ebx
c0001f78:	89 c3                	mov    ebx,eax
c0001f7a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f7d:	e8 8d fd ff ff       	call   c0001d0f <ld_word>
c0001f82:	66 85 c0             	test   ax,ax
c0001f85:	74 04                	je     c0001f8b <pick_lfn+0x19>
c0001f87:	31 c0                	xor    eax,eax
c0001f89:	eb 5c                	jmp    c0001fe7 <pick_lfn+0x75>
c0001f8b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f8e:	bd 01 00 00 00       	mov    ebp,0x1
c0001f93:	83 e1 bf             	and    ecx,0xffffffbf
c0001f96:	31 ff                	xor    edi,edi
c0001f98:	49                   	dec    ecx
c0001f99:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f9c:	0f b6 87 20 ec 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe13e0]
c0001fa3:	01 f0                	add    eax,esi
c0001fa5:	e8 65 fd ff ff       	call   c0001d0f <ld_word>
c0001faa:	66 85 ed             	test   bp,bp
c0001fad:	74 11                	je     c0001fc0 <pick_lfn+0x4e>
c0001faf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fb5:	77 d0                	ja     c0001f87 <pick_lfn+0x15>
c0001fb7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fbb:	89 c5                	mov    ebp,eax
c0001fbd:	41                   	inc    ecx
c0001fbe:	eb 04                	jmp    c0001fc4 <pick_lfn+0x52>
c0001fc0:	66 40                	inc    ax
c0001fc2:	75 c3                	jne    c0001f87 <pick_lfn+0x15>
c0001fc4:	47                   	inc    edi
c0001fc5:	83 ff 0d             	cmp    edi,0xd
c0001fc8:	75 d2                	jne    c0001f9c <pick_lfn+0x2a>
c0001fca:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fcd:	74 13                	je     c0001fe2 <pick_lfn+0x70>
c0001fcf:	66 85 ed             	test   bp,bp
c0001fd2:	74 0e                	je     c0001fe2 <pick_lfn+0x70>
c0001fd4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fda:	77 ab                	ja     c0001f87 <pick_lfn+0x15>
c0001fdc:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fe2:	b8 01 00 00 00       	mov    eax,0x1
c0001fe7:	5b                   	pop    ebx
c0001fe8:	5e                   	pop    esi
c0001fe9:	5f                   	pop    edi
c0001fea:	5d                   	pop    ebp
c0001feb:	c3                   	ret    

c0001fec <put_lfn>:
c0001fec:	55                   	push   ebp
c0001fed:	31 ed                	xor    ebp,ebp
c0001fef:	57                   	push   edi
c0001ff0:	89 d7                	mov    edi,edx
c0001ff2:	56                   	push   esi
c0001ff3:	31 f6                	xor    esi,esi
c0001ff5:	53                   	push   ebx
c0001ff6:	83 ec 08             	sub    esp,0x8
c0001ff9:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ffc:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002000:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002004:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000200a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000200d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002010:	31 d2                	xor    edx,edx
c0002012:	e8 1d fd ff ff       	call   c0001d34 <st_word>
c0002017:	0f b6 d9             	movzx  ebx,cl
c000201a:	4b                   	dec    ebx
c000201b:	6b db 0d             	imul   ebx,ebx,0xd
c000201e:	66 83 fe ff          	cmp    si,0xffff
c0002022:	74 08                	je     c000202c <put_lfn+0x40>
c0002024:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002027:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000202b:	43                   	inc    ebx
c000202c:	0f b6 85 20 ec 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe13e0]
c0002033:	0f b7 d6             	movzx  edx,si
c0002036:	01 f8                	add    eax,edi
c0002038:	e8 f7 fc ff ff       	call   c0001d34 <st_word>
c000203d:	66 85 f6             	test   si,si
c0002040:	75 03                	jne    c0002045 <put_lfn+0x59>
c0002042:	83 ce ff             	or     esi,0xffffffff
c0002045:	45                   	inc    ebp
c0002046:	83 fd 0d             	cmp    ebp,0xd
c0002049:	75 d3                	jne    c000201e <put_lfn+0x32>
c000204b:	66 46                	inc    si
c000204d:	74 0a                	je     c0002059 <put_lfn+0x6d>
c000204f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002052:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002057:	75 09                	jne    c0002062 <put_lfn+0x76>
c0002059:	88 c8                	mov    al,cl
c000205b:	83 c8 40             	or     eax,0x40
c000205e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002062:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002066:	88 07                	mov    BYTE PTR [edi],al
c0002068:	83 c4 08             	add    esp,0x8
c000206b:	5b                   	pop    ebx
c000206c:	5e                   	pop    esi
c000206d:	5f                   	pop    edi
c000206e:	5d                   	pop    ebp
c000206f:	c3                   	ret    

c0002070 <gen_numname>:
c0002070:	57                   	push   edi
c0002071:	89 cf                	mov    edi,ecx
c0002073:	56                   	push   esi
c0002074:	b9 0b 00 00 00       	mov    ecx,0xb
c0002079:	53                   	push   ebx
c000207a:	89 c6                	mov    esi,eax
c000207c:	83 ec 10             	sub    esp,0x10
c000207f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002083:	e8 b3 fc ff ff       	call   c0001d3b <mem_cpy>
c0002088:	83 fb 05             	cmp    ebx,0x5
c000208b:	76 2d                	jbe    c00020ba <gen_numname+0x4a>
c000208d:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002090:	66 85 c0             	test   ax,ax
c0002093:	74 25                	je     c00020ba <gen_numname+0x4a>
c0002095:	83 c7 02             	add    edi,0x2
c0002098:	ba 10 00 00 00       	mov    edx,0x10
c000209d:	01 db                	add    ebx,ebx
c000209f:	89 c1                	mov    ecx,eax
c00020a1:	66 d1 e8             	shr    ax,1
c00020a4:	83 e1 01             	and    ecx,0x1
c00020a7:	01 cb                	add    ebx,ecx
c00020a9:	0f ba e3 10          	bt     ebx,0x10
c00020ad:	73 06                	jae    c00020b5 <gen_numname+0x45>
c00020af:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020b5:	4a                   	dec    edx
c00020b6:	75 e5                	jne    c000209d <gen_numname+0x2d>
c00020b8:	eb d3                	jmp    c000208d <gen_numname+0x1d>
c00020ba:	b8 07 00 00 00       	mov    eax,0x7
c00020bf:	88 d9                	mov    cl,bl
c00020c1:	83 e1 0f             	and    ecx,0xf
c00020c4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020c7:	80 fa 39             	cmp    dl,0x39
c00020ca:	76 03                	jbe    c00020cf <gen_numname+0x5f>
c00020cc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020cf:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020d2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020d6:	89 da                	mov    edx,ebx
c00020d8:	c1 ea 04             	shr    edx,0x4
c00020db:	83 fb 0f             	cmp    ebx,0xf
c00020de:	76 06                	jbe    c00020e6 <gen_numname+0x76>
c00020e0:	89 c8                	mov    eax,ecx
c00020e2:	89 d3                	mov    ebx,edx
c00020e4:	eb d9                	jmp    c00020bf <gen_numname+0x4f>
c00020e6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020eb:	31 d2                	xor    edx,edx
c00020ed:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020f0:	8d 04 16             	lea    eax,[esi+edx*1]
c00020f3:	39 ca                	cmp    edx,ecx
c00020f5:	73 18                	jae    c000210f <gen_numname+0x9f>
c00020f7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020fa:	3c 20                	cmp    al,0x20
c00020fc:	74 11                	je     c000210f <gen_numname+0x9f>
c00020fe:	e8 8d fc ff ff       	call   c0001d90 <dbc_1st>
c0002103:	85 c0                	test   eax,eax
c0002105:	74 05                	je     c000210c <gen_numname+0x9c>
c0002107:	39 d3                	cmp    ebx,edx
c0002109:	74 04                	je     c000210f <gen_numname+0x9f>
c000210b:	42                   	inc    edx
c000210c:	42                   	inc    edx
c000210d:	eb e1                	jmp    c00020f0 <gen_numname+0x80>
c000210f:	b0 20                	mov    al,0x20
c0002111:	83 f9 07             	cmp    ecx,0x7
c0002114:	77 05                	ja     c000211b <gen_numname+0xab>
c0002116:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000211a:	41                   	inc    ecx
c000211b:	42                   	inc    edx
c000211c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002120:	83 fa 07             	cmp    edx,0x7
c0002123:	76 ea                	jbe    c000210f <gen_numname+0x9f>
c0002125:	83 c4 10             	add    esp,0x10
c0002128:	5b                   	pop    ebx
c0002129:	5e                   	pop    esi
c000212a:	5f                   	pop    edi
c000212b:	c3                   	ret    

c000212c <sum_sfn>:
c000212c:	31 c9                	xor    ecx,ecx
c000212e:	31 d2                	xor    edx,edx
c0002130:	d0 ca                	ror    dl,1
c0002132:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002135:	41                   	inc    ecx
c0002136:	83 f9 0b             	cmp    ecx,0xb
c0002139:	75 f5                	jne    c0002130 <sum_sfn+0x4>
c000213b:	88 d0                	mov    al,dl
c000213d:	c3                   	ret    

c000213e <get_ldnumber>:
c000213e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002140:	85 d2                	test   edx,edx
c0002142:	74 14                	je     c0002158 <get_ldnumber+0x1a>
c0002144:	56                   	push   esi
c0002145:	53                   	push   ebx
c0002146:	89 d3                	mov    ebx,edx
c0002148:	43                   	inc    ebx
c0002149:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214c:	80 f9 1f             	cmp    cl,0x1f
c000214f:	76 0d                	jbe    c000215e <get_ldnumber+0x20>
c0002151:	80 f9 3a             	cmp    cl,0x3a
c0002154:	75 f2                	jne    c0002148 <get_ldnumber+0xa>
c0002156:	eb 0a                	jmp    c0002162 <get_ldnumber+0x24>
c0002158:	83 c9 ff             	or     ecx,0xffffffff
c000215b:	89 c8                	mov    eax,ecx
c000215d:	c3                   	ret    
c000215e:	31 c9                	xor    ecx,ecx
c0002160:	eb 24                	jmp    c0002186 <get_ldnumber+0x48>
c0002162:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002165:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002168:	80 f9 09             	cmp    cl,0x9
c000216b:	77 16                	ja     c0002183 <get_ldnumber+0x45>
c000216d:	83 c2 02             	add    edx,0x2
c0002170:	83 c9 ff             	or     ecx,0xffffffff
c0002173:	39 d3                	cmp    ebx,edx
c0002175:	75 0f                	jne    c0002186 <get_ldnumber+0x48>
c0002177:	89 f2                	mov    edx,esi
c0002179:	89 18                	mov    DWORD PTR [eax],ebx
c000217b:	0f be ca             	movsx  ecx,dl
c000217e:	83 e9 30             	sub    ecx,0x30
c0002181:	eb 03                	jmp    c0002186 <get_ldnumber+0x48>
c0002183:	83 c9 ff             	or     ecx,0xffffffff
c0002186:	89 c8                	mov    eax,ecx
c0002188:	5b                   	pop    ebx
c0002189:	5e                   	pop    esi
c000218a:	c3                   	ret    

c000218b <validate>:
c000218b:	56                   	push   esi
c000218c:	53                   	push   ebx
c000218d:	89 d6                	mov    esi,edx
c000218f:	51                   	push   ecx
c0002190:	85 c0                	test   eax,eax
c0002192:	75 09                	jne    c000219d <validate+0x12>
c0002194:	b8 09 00 00 00       	mov    eax,0x9
c0002199:	31 c9                	xor    ecx,ecx
c000219b:	eb 2f                	jmp    c00021cc <validate+0x41>
c000219d:	89 c3                	mov    ebx,eax
c000219f:	8b 00                	mov    eax,DWORD PTR [eax]
c00021a1:	85 c0                	test   eax,eax
c00021a3:	74 ef                	je     c0002194 <validate+0x9>
c00021a5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021a8:	74 ea                	je     c0002194 <validate+0x9>
c00021aa:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021ae:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021b2:	75 e0                	jne    c0002194 <validate+0x9>
c00021b4:	83 ec 0c             	sub    esp,0xc
c00021b7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021bb:	50                   	push   eax
c00021bc:	e8 fd fa ff ff       	call   c0001cbe <disk_status>
c00021c1:	83 c4 10             	add    esp,0x10
c00021c4:	a8 01                	test   al,0x1
c00021c6:	75 cc                	jne    c0002194 <validate+0x9>
c00021c8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021ca:	31 c0                	xor    eax,eax
c00021cc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021ce:	5a                   	pop    edx
c00021cf:	5b                   	pop    ebx
c00021d0:	5e                   	pop    esi
c00021d1:	c3                   	ret    

c00021d2 <sync_window>:
c00021d2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021d6:	74 58                	je     c0002230 <sync_window+0x5e>
c00021d8:	56                   	push   esi
c00021d9:	53                   	push   ebx
c00021da:	8d 70 34             	lea    esi,[eax+0x34]
c00021dd:	51                   	push   ecx
c00021de:	89 c3                	mov    ebx,eax
c00021e0:	6a 01                	push   0x1
c00021e2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021e5:	56                   	push   esi
c00021e6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021ea:	50                   	push   eax
c00021eb:	e8 ea fa ff ff       	call   c0001cda <disk_write>
c00021f0:	83 c4 10             	add    esp,0x10
c00021f3:	ba 01 00 00 00       	mov    edx,0x1
c00021f8:	85 c0                	test   eax,eax
c00021fa:	75 2e                	jne    c000222a <sync_window+0x58>
c00021fc:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00021ff:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002202:	89 c1                	mov    ecx,eax
c0002204:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002208:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000220b:	39 d1                	cmp    ecx,edx
c000220d:	73 19                	jae    c0002228 <sync_window+0x56>
c000220f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002213:	75 13                	jne    c0002228 <sync_window+0x56>
c0002215:	6a 01                	push   0x1
c0002217:	01 d0                	add    eax,edx
c0002219:	50                   	push   eax
c000221a:	56                   	push   esi
c000221b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000221f:	50                   	push   eax
c0002220:	e8 b5 fa ff ff       	call   c0001cda <disk_write>
c0002225:	83 c4 10             	add    esp,0x10
c0002228:	31 d2                	xor    edx,edx
c000222a:	89 d0                	mov    eax,edx
c000222c:	5a                   	pop    edx
c000222d:	5b                   	pop    ebx
c000222e:	5e                   	pop    esi
c000222f:	c3                   	ret    
c0002230:	31 d2                	xor    edx,edx
c0002232:	89 d0                	mov    eax,edx
c0002234:	c3                   	ret    

c0002235 <move_window>:
c0002235:	57                   	push   edi
c0002236:	56                   	push   esi
c0002237:	31 f6                	xor    esi,esi
c0002239:	53                   	push   ebx
c000223a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000223d:	74 32                	je     c0002271 <move_window+0x3c>
c000223f:	89 c3                	mov    ebx,eax
c0002241:	89 d7                	mov    edi,edx
c0002243:	e8 8a ff ff ff       	call   c00021d2 <sync_window>
c0002248:	89 c6                	mov    esi,eax
c000224a:	85 c0                	test   eax,eax
c000224c:	75 23                	jne    c0002271 <move_window+0x3c>
c000224e:	6a 01                	push   0x1
c0002250:	8d 43 34             	lea    eax,[ebx+0x34]
c0002253:	57                   	push   edi
c0002254:	50                   	push   eax
c0002255:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002259:	50                   	push   eax
c000225a:	e8 65 fa ff ff       	call   c0001cc4 <disk_read>
c000225f:	83 c4 10             	add    esp,0x10
c0002262:	85 c0                	test   eax,eax
c0002264:	74 08                	je     c000226e <move_window+0x39>
c0002266:	be 01 00 00 00       	mov    esi,0x1
c000226b:	83 cf ff             	or     edi,0xffffffff
c000226e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002271:	89 f0                	mov    eax,esi
c0002273:	5b                   	pop    ebx
c0002274:	5e                   	pop    esi
c0002275:	5f                   	pop    edi
c0002276:	c3                   	ret    

c0002277 <check_fs>:
c0002277:	53                   	push   ebx
c0002278:	89 c3                	mov    ebx,eax
c000227a:	83 ec 08             	sub    esp,0x8
c000227d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002281:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002288:	e8 a8 ff ff ff       	call   c0002235 <move_window>
c000228d:	ba 04 00 00 00       	mov    edx,0x4
c0002292:	85 c0                	test   eax,eax
c0002294:	75 68                	jne    c00022fe <check_fs+0x87>
c0002296:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000229c:	e8 6e fa ff ff       	call   c0001d0f <ld_word>
c00022a1:	ba 03 00 00 00       	mov    edx,0x3
c00022a6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022aa:	75 52                	jne    c00022fe <check_fs+0x87>
c00022ac:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022af:	8d 50 18             	lea    edx,[eax+0x18]
c00022b2:	80 fa 01             	cmp    dl,0x1
c00022b5:	76 09                	jbe    c00022c0 <check_fs+0x49>
c00022b7:	ba 02 00 00 00       	mov    edx,0x2
c00022bc:	3c eb                	cmp    al,0xeb
c00022be:	75 3e                	jne    c00022fe <check_fs+0x87>
c00022c0:	ba 4c 0d 02 c0       	mov    edx,0xc0020d4c
c00022c5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022c8:	b9 03 00 00 00       	mov    ecx,0x3
c00022cd:	e8 89 fa ff ff       	call   c0001d5b <mem_cmp>
c00022d2:	31 d2                	xor    edx,edx
c00022d4:	85 c0                	test   eax,eax
c00022d6:	74 26                	je     c00022fe <check_fs+0x87>
c00022d8:	ba dc ea 01 c0       	mov    edx,0xc001eadc
c00022dd:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022e3:	b9 05 00 00 00       	mov    ecx,0x5
c00022e8:	e8 6e fa ff ff       	call   c0001d5b <mem_cmp>
c00022ed:	31 d2                	xor    edx,edx
c00022ef:	85 c0                	test   eax,eax
c00022f1:	74 0b                	je     c00022fe <check_fs+0x87>
c00022f3:	31 d2                	xor    edx,edx
c00022f5:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00022f9:	0f 95 c2             	setne  dl
c00022fc:	01 d2                	add    edx,edx
c00022fe:	89 d0                	mov    eax,edx
c0002300:	83 c4 08             	add    esp,0x8
c0002303:	5b                   	pop    ebx
c0002304:	c3                   	ret    

c0002305 <find_volume>:
c0002305:	55                   	push   ebp
c0002306:	57                   	push   edi
c0002307:	56                   	push   esi
c0002308:	89 c6                	mov    esi,eax
c000230a:	53                   	push   ebx
c000230b:	89 d3                	mov    ebx,edx
c000230d:	83 ec 2c             	sub    esp,0x2c
c0002310:	31 d2                	xor    edx,edx
c0002312:	e8 60 ff ff ff       	call   c0002277 <check_fs>
c0002317:	83 f8 02             	cmp    eax,0x2
c000231a:	74 06                	je     c0002322 <find_volume+0x1d>
c000231c:	77 62                	ja     c0002380 <find_volume+0x7b>
c000231e:	85 db                	test   ebx,ebx
c0002320:	74 5e                	je     c0002380 <find_volume+0x7b>
c0002322:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002326:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000232c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002332:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002336:	89 cf                	mov    edi,ecx
c0002338:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000233c:	89 e8                	mov    eax,ebp
c000233e:	83 c5 10             	add    ebp,0x10
c0002341:	e8 d6 f9 ff ff       	call   c0001d1c <ld_dword>
c0002346:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000234a:	89 01                	mov    DWORD PTR [ecx],eax
c000234c:	83 c1 04             	add    ecx,0x4
c000234f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002353:	75 e3                	jne    c0002338 <find_volume+0x33>
c0002355:	31 ed                	xor    ebp,ebp
c0002357:	85 db                	test   ebx,ebx
c0002359:	74 03                	je     c000235e <find_volume+0x59>
c000235b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000235e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002361:	b8 03 00 00 00       	mov    eax,0x3
c0002366:	85 d2                	test   edx,edx
c0002368:	74 0c                	je     c0002376 <find_volume+0x71>
c000236a:	89 f0                	mov    eax,esi
c000236c:	e8 06 ff ff ff       	call   c0002277 <check_fs>
c0002371:	83 f8 01             	cmp    eax,0x1
c0002374:	76 0a                	jbe    c0002380 <find_volume+0x7b>
c0002376:	85 db                	test   ebx,ebx
c0002378:	75 06                	jne    c0002380 <find_volume+0x7b>
c000237a:	45                   	inc    ebp
c000237b:	83 fd 03             	cmp    ebp,0x3
c000237e:	76 de                	jbe    c000235e <find_volume+0x59>
c0002380:	83 c4 2c             	add    esp,0x2c
c0002383:	5b                   	pop    ebx
c0002384:	5e                   	pop    esi
c0002385:	5f                   	pop    edi
c0002386:	5d                   	pop    ebp
c0002387:	c3                   	ret    

c0002388 <mount_volume>:
c0002388:	55                   	push   ebp
c0002389:	89 d5                	mov    ebp,edx
c000238b:	57                   	push   edi
c000238c:	89 cf                	mov    edi,ecx
c000238e:	56                   	push   esi
c000238f:	53                   	push   ebx
c0002390:	bb 0b 00 00 00       	mov    ebx,0xb
c0002395:	83 ec 2c             	sub    esp,0x2c
c0002398:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000239e:	e8 9b fd ff ff       	call   c000213e <get_ldnumber>
c00023a3:	85 c0                	test   eax,eax
c00023a5:	0f 88 d6 02 00 00    	js     c0002681 <mount_volume+0x2f9>
c00023ab:	8b 34 85 a0 34 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcb60]
c00023b2:	89 c2                	mov    edx,eax
c00023b4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023b9:	85 f6                	test   esi,esi
c00023bb:	0f 84 c0 02 00 00    	je     c0002681 <mount_volume+0x2f9>
c00023c1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023c4:	83 e7 fe             	and    edi,0xfffffffe
c00023c7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023ca:	74 3a                	je     c0002406 <mount_volume+0x7e>
c00023cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023d0:	83 ec 0c             	sub    esp,0xc
c00023d3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023d7:	50                   	push   eax
c00023d8:	e8 e1 f8 ff ff       	call   c0001cbe <disk_status>
c00023dd:	83 c4 10             	add    esp,0x10
c00023e0:	a8 01                	test   al,0x1
c00023e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023e6:	75 1e                	jne    c0002406 <mount_volume+0x7e>
c00023e8:	31 db                	xor    ebx,ebx
c00023ea:	89 f9                	mov    ecx,edi
c00023ec:	84 c9                	test   cl,cl
c00023ee:	0f 84 8d 02 00 00    	je     c0002681 <mount_volume+0x2f9>
c00023f4:	a8 04                	test   al,0x4
c00023f6:	0f 84 85 02 00 00    	je     c0002681 <mount_volume+0x2f9>
c00023fc:	bb 0a 00 00 00       	mov    ebx,0xa
c0002401:	e9 7b 02 00 00       	jmp    c0002681 <mount_volume+0x2f9>
c0002406:	83 ec 0c             	sub    esp,0xc
c0002409:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000240c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000240f:	0f b6 c2             	movzx  eax,dl
c0002412:	bb 03 00 00 00       	mov    ebx,0x3
c0002417:	50                   	push   eax
c0002418:	e8 a4 f8 ff ff       	call   c0001cc1 <disk_initialize>
c000241d:	83 c4 10             	add    esp,0x10
c0002420:	a8 01                	test   al,0x1
c0002422:	0f 85 59 02 00 00    	jne    c0002681 <mount_volume+0x2f9>
c0002428:	89 f9                	mov    ecx,edi
c000242a:	84 c9                	test   cl,cl
c000242c:	74 04                	je     c0002432 <mount_volume+0xaa>
c000242e:	a8 04                	test   al,0x4
c0002430:	75 ca                	jne    c00023fc <mount_volume+0x74>
c0002432:	31 d2                	xor    edx,edx
c0002434:	89 f0                	mov    eax,esi
c0002436:	bb 01 00 00 00       	mov    ebx,0x1
c000243b:	e8 c5 fe ff ff       	call   c0002305 <find_volume>
c0002440:	83 f8 04             	cmp    eax,0x4
c0002443:	0f 84 38 02 00 00    	je     c0002681 <mount_volume+0x2f9>
c0002449:	83 f8 01             	cmp    eax,0x1
c000244c:	76 0a                	jbe    c0002458 <mount_volume+0xd0>
c000244e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002453:	e9 29 02 00 00       	jmp    c0002681 <mount_volume+0x2f9>
c0002458:	8d 46 3f             	lea    eax,[esi+0x3f]
c000245b:	e8 af f8 ff ff       	call   c0001d0f <ld_word>
c0002460:	66 3d 00 02          	cmp    ax,0x200
c0002464:	75 e8                	jne    c000244e <mount_volume+0xc6>
c0002466:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002469:	e8 a1 f8 ff ff       	call   c0001d0f <ld_word>
c000246e:	0f b7 c0             	movzx  eax,ax
c0002471:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002475:	85 c0                	test   eax,eax
c0002477:	75 0c                	jne    c0002485 <mount_volume+0xfd>
c0002479:	8d 46 58             	lea    eax,[esi+0x58]
c000247c:	e8 9b f8 ff ff       	call   c0001d1c <ld_dword>
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002488:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000248b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000248f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002493:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002496:	89 e8                	mov    eax,ebp
c0002498:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000249b:	8d 45 ff             	lea    eax,[ebp-0x1]
c000249e:	3c 01                	cmp    al,0x1
c00024a0:	77 ac                	ja     c000244e <mount_volume+0xc6>
c00024a2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024a6:	89 c3                	mov    ebx,eax
c00024a8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024ac:	66 85 c0             	test   ax,ax
c00024af:	74 9d                	je     c000244e <mount_volume+0xc6>
c00024b1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024b4:	85 d8                	test   eax,ebx
c00024b6:	75 96                	jne    c000244e <mount_volume+0xc6>
c00024b8:	8d 46 45             	lea    eax,[esi+0x45]
c00024bb:	e8 4f f8 ff ff       	call   c0001d0f <ld_word>
c00024c0:	89 c7                	mov    edi,eax
c00024c2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024c6:	a8 0f                	test   al,0xf
c00024c8:	75 84                	jne    c000244e <mount_volume+0xc6>
c00024ca:	8d 46 47             	lea    eax,[esi+0x47]
c00024cd:	e8 3d f8 ff ff       	call   c0001d0f <ld_word>
c00024d2:	0f b7 d0             	movzx  edx,ax
c00024d5:	85 d2                	test   edx,edx
c00024d7:	75 0a                	jne    c00024e3 <mount_volume+0x15b>
c00024d9:	8d 46 54             	lea    eax,[esi+0x54]
c00024dc:	e8 3b f8 ff ff       	call   c0001d1c <ld_dword>
c00024e1:	89 c2                	mov    edx,eax
c00024e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024e7:	8d 46 42             	lea    eax,[esi+0x42]
c00024ea:	e8 20 f8 ff ff       	call   c0001d0f <ld_word>
c00024ef:	66 85 c0             	test   ax,ax
c00024f2:	0f 84 56 ff ff ff    	je     c000244e <mount_volume+0xc6>
c00024f8:	89 e9                	mov    ecx,ebp
c00024fa:	0f b7 c0             	movzx  eax,ax
c00024fd:	0f b6 e9             	movzx  ebp,cl
c0002500:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002504:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002508:	89 f8                	mov    eax,edi
c000250a:	0f af cd             	imul   ecx,ebp
c000250d:	66 c1 e8 04          	shr    ax,0x4
c0002511:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002515:	0f b7 c0             	movzx  eax,ax
c0002518:	01 c8                	add    eax,ecx
c000251a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000251e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002522:	39 c2                	cmp    edx,eax
c0002524:	0f 82 24 ff ff ff    	jb     c000244e <mount_volume+0xc6>
c000252a:	29 c2                	sub    edx,eax
c000252c:	89 d5                	mov    ebp,edx
c000252e:	89 d0                	mov    eax,edx
c0002530:	31 d2                	xor    edx,edx
c0002532:	f7 f3                	div    ebx
c0002534:	39 dd                	cmp    ebp,ebx
c0002536:	0f 82 12 ff ff ff    	jb     c000244e <mount_volume+0xc6>
c000253c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002541:	0f 87 07 ff ff ff    	ja     c000244e <mount_volume+0xc6>
c0002547:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000254c:	0f 86 1f 01 00 00    	jbe    c0002671 <mount_volume+0x2e9>
c0002552:	bb 03 00 00 00       	mov    ebx,0x3
c0002557:	8d 68 02             	lea    ebp,[eax+0x2]
c000255a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000255e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002562:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002566:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002569:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000256c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002570:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002573:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002577:	83 fb 03             	cmp    ebx,0x3
c000257a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000257d:	75 21                	jne    c00025a0 <mount_volume+0x218>
c000257f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002582:	e8 88 f7 ff ff       	call   c0001d0f <ld_word>
c0002587:	66 09 c7             	or     di,ax
c000258a:	0f 85 be fe ff ff    	jne    c000244e <mount_volume+0xc6>
c0002590:	8d 46 60             	lea    eax,[esi+0x60]
c0002593:	c1 e5 02             	shl    ebp,0x2
c0002596:	e8 81 f7 ff ff       	call   c0001d1c <ld_dword>
c000259b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000259e:	eb 22                	jmp    c00025c2 <mount_volume+0x23a>
c00025a0:	66 85 ff             	test   di,di
c00025a3:	0f 84 a5 fe ff ff    	je     c000244e <mount_volume+0xc6>
c00025a9:	01 c8                	add    eax,ecx
c00025ab:	83 fb 02             	cmp    ebx,0x2
c00025ae:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025b1:	75 04                	jne    c00025b7 <mount_volume+0x22f>
c00025b3:	01 ed                	add    ebp,ebp
c00025b5:	eb 0b                	jmp    c00025c2 <mount_volume+0x23a>
c00025b7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025bb:	83 e5 01             	and    ebp,0x1
c00025be:	d1 e8                	shr    eax,1
c00025c0:	01 c5                	add    ebp,eax
c00025c2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025c8:	c1 ed 09             	shr    ebp,0x9
c00025cb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025cf:	0f 87 79 fe ff ff    	ja     c000244e <mount_volume+0xc6>
c00025d5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025dc:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025e3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025e7:	83 fb 03             	cmp    ebx,0x3
c00025ea:	75 6e                	jne    c000265a <mount_volume+0x2d2>
c00025ec:	8d 46 64             	lea    eax,[esi+0x64]
c00025ef:	e8 1b f7 ff ff       	call   c0001d0f <ld_word>
c00025f4:	66 48                	dec    ax
c00025f6:	75 62                	jne    c000265a <mount_volume+0x2d2>
c00025f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00025fc:	89 f0                	mov    eax,esi
c00025fe:	42                   	inc    edx
c00025ff:	e8 31 fc ff ff       	call   c0002235 <move_window>
c0002604:	85 c0                	test   eax,eax
c0002606:	75 52                	jne    c000265a <mount_volume+0x2d2>
c0002608:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000260c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002612:	e8 f8 f6 ff ff       	call   c0001d0f <ld_word>
c0002617:	66 3d 55 aa          	cmp    ax,0xaa55
c000261b:	75 3d                	jne    c000265a <mount_volume+0x2d2>
c000261d:	8d 46 34             	lea    eax,[esi+0x34]
c0002620:	e8 f7 f6 ff ff       	call   c0001d1c <ld_dword>
c0002625:	3d 52 52 61 41       	cmp    eax,0x41615252
c000262a:	75 2e                	jne    c000265a <mount_volume+0x2d2>
c000262c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002632:	e8 e5 f6 ff ff       	call   c0001d1c <ld_dword>
c0002637:	3d 72 72 41 61       	cmp    eax,0x61417272
c000263c:	75 1c                	jne    c000265a <mount_volume+0x2d2>
c000263e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002644:	e8 d3 f6 ff ff       	call   c0001d1c <ld_dword>
c0002649:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000264c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002652:	e8 c5 f6 ff ff       	call   c0001d1c <ld_dword>
c0002657:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000265a:	66 a1 80 34 02 c0    	mov    ax,ds:0xc0023480
c0002660:	88 1e                	mov    BYTE PTR [esi],bl
c0002662:	40                   	inc    eax
c0002663:	31 db                	xor    ebx,ebx
c0002665:	66 a3 80 34 02 c0    	mov    ds:0xc0023480,ax
c000266b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000266f:	eb 10                	jmp    c0002681 <mount_volume+0x2f9>
c0002671:	31 db                	xor    ebx,ebx
c0002673:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002678:	0f 97 c3             	seta   bl
c000267b:	43                   	inc    ebx
c000267c:	e9 d6 fe ff ff       	jmp    c0002557 <mount_volume+0x1cf>
c0002681:	83 c4 2c             	add    esp,0x2c
c0002684:	89 d8                	mov    eax,ebx
c0002686:	5b                   	pop    ebx
c0002687:	5e                   	pop    esi
c0002688:	5f                   	pop    edi
c0002689:	5d                   	pop    ebp
c000268a:	c3                   	ret    

c000268b <put_fat>:
c000268b:	55                   	push   ebp
c000268c:	bd 02 00 00 00       	mov    ebp,0x2
c0002691:	57                   	push   edi
c0002692:	56                   	push   esi
c0002693:	53                   	push   ebx
c0002694:	83 ec 1c             	sub    esp,0x1c
c0002697:	83 fa 01             	cmp    edx,0x1
c000269a:	0f 86 31 01 00 00    	jbe    c00027d1 <put_fat+0x146>
c00026a0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026a3:	0f 86 28 01 00 00    	jbe    c00027d1 <put_fat+0x146>
c00026a9:	89 c6                	mov    esi,eax
c00026ab:	89 cf                	mov    edi,ecx
c00026ad:	8a 00                	mov    al,BYTE PTR [eax]
c00026af:	89 d3                	mov    ebx,edx
c00026b1:	3c 02                	cmp    al,0x2
c00026b3:	0f 84 ac 00 00 00    	je     c0002765 <put_fat+0xda>
c00026b9:	3c 03                	cmp    al,0x3
c00026bb:	0f 84 d1 00 00 00    	je     c0002792 <put_fat+0x107>
c00026c1:	fe c8                	dec    al
c00026c3:	0f 85 08 01 00 00    	jne    c00027d1 <put_fat+0x146>
c00026c9:	89 d1                	mov    ecx,edx
c00026cb:	89 f0                	mov    eax,esi
c00026cd:	d1 e9                	shr    ecx,1
c00026cf:	01 d1                	add    ecx,edx
c00026d1:	89 ca                	mov    edx,ecx
c00026d3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026d7:	c1 ea 09             	shr    edx,0x9
c00026da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026dd:	e8 53 fb ff ff       	call   c0002235 <move_window>
c00026e2:	89 c5                	mov    ebp,eax
c00026e4:	85 c0                	test   eax,eax
c00026e6:	0f 85 e5 00 00 00    	jne    c00027d1 <put_fat+0x146>
c00026ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026f0:	8d 46 34             	lea    eax,[esi+0x34]
c00026f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026f7:	8d 41 01             	lea    eax,[ecx+0x1]
c00026fa:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002700:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002704:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002708:	89 f8                	mov    eax,edi
c000270a:	83 e3 01             	and    ebx,0x1
c000270d:	74 0c                	je     c000271b <put_fat+0x90>
c000270f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002711:	89 f8                	mov    eax,edi
c0002713:	83 e2 0f             	and    edx,0xf
c0002716:	c1 e0 04             	shl    eax,0x4
c0002719:	09 d0                	or     eax,edx
c000271b:	88 01                	mov    BYTE PTR [ecx],al
c000271d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002721:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002725:	c1 ea 09             	shr    edx,0x9
c0002728:	89 f0                	mov    eax,esi
c000272a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000272d:	e8 03 fb ff ff       	call   c0002235 <move_window>
c0002732:	89 c5                	mov    ebp,eax
c0002734:	85 c0                	test   eax,eax
c0002736:	0f 85 95 00 00 00    	jne    c00027d1 <put_fat+0x146>
c000273c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002740:	25 ff 01 00 00       	and    eax,0x1ff
c0002745:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002749:	85 db                	test   ebx,ebx
c000274b:	74 07                	je     c0002754 <put_fat+0xc9>
c000274d:	c1 ef 04             	shr    edi,0x4
c0002750:	89 f9                	mov    ecx,edi
c0002752:	eb 0d                	jmp    c0002761 <put_fat+0xd6>
c0002754:	8a 08                	mov    cl,BYTE PTR [eax]
c0002756:	c1 ef 08             	shr    edi,0x8
c0002759:	83 e1 f0             	and    ecx,0xfffffff0
c000275c:	83 e7 0f             	and    edi,0xf
c000275f:	09 f9                	or     ecx,edi
c0002761:	88 08                	mov    BYTE PTR [eax],cl
c0002763:	eb 27                	jmp    c000278c <put_fat+0x101>
c0002765:	c1 ea 08             	shr    edx,0x8
c0002768:	89 f0                	mov    eax,esi
c000276a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000276d:	e8 c3 fa ff ff       	call   c0002235 <move_window>
c0002772:	89 c5                	mov    ebp,eax
c0002774:	85 c0                	test   eax,eax
c0002776:	75 59                	jne    c00027d1 <put_fat+0x146>
c0002778:	01 db                	add    ebx,ebx
c000277a:	0f b7 d7             	movzx  edx,di
c000277d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002783:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002787:	e8 a8 f5 ff ff       	call   c0001d34 <st_word>
c000278c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002790:	eb 3f                	jmp    c00027d1 <put_fat+0x146>
c0002792:	c1 ea 07             	shr    edx,0x7
c0002795:	89 f0                	mov    eax,esi
c0002797:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000279a:	e8 96 fa ff ff       	call   c0002235 <move_window>
c000279f:	89 c5                	mov    ebp,eax
c00027a1:	85 c0                	test   eax,eax
c00027a3:	75 2c                	jne    c00027d1 <put_fat+0x146>
c00027a5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027ab:	c1 e3 02             	shl    ebx,0x2
c00027ae:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027b4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027b8:	89 d8                	mov    eax,ebx
c00027ba:	e8 5d f5 ff ff       	call   c0001d1c <ld_dword>
c00027bf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027c4:	09 f8                	or     eax,edi
c00027c6:	89 c2                	mov    edx,eax
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 69 f5 ff ff       	call   c0001d38 <st_dword>
c00027cf:	eb bb                	jmp    c000278c <put_fat+0x101>
c00027d1:	83 c4 1c             	add    esp,0x1c
c00027d4:	89 e8                	mov    eax,ebp
c00027d6:	5b                   	pop    ebx
c00027d7:	5e                   	pop    esi
c00027d8:	5f                   	pop    edi
c00027d9:	5d                   	pop    ebp
c00027da:	c3                   	ret    

c00027db <dir_clear>:
c00027db:	55                   	push   ebp
c00027dc:	57                   	push   edi
c00027dd:	56                   	push   esi
c00027de:	89 c6                	mov    esi,eax
c00027e0:	53                   	push   ebx
c00027e1:	83 ec 1c             	sub    esp,0x1c
c00027e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027e8:	e8 e5 f9 ff ff       	call   c00021d2 <sync_window>
c00027ed:	85 c0                	test   eax,eax
c00027ef:	0f 85 c0 00 00 00    	jne    c00028b5 <dir_clear+0xda>
c00027f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027f9:	89 f0                	mov    eax,esi
c00027fb:	e8 55 f7 ff ff       	call   c0001f55 <clst2sect>
c0002800:	31 d2                	xor    edx,edx
c0002802:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002805:	89 c5                	mov    ebp,eax
c0002807:	b9 00 02 00 00       	mov    ecx,0x200
c000280c:	8d 46 34             	lea    eax,[esi+0x34]
c000280f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002813:	e8 38 f5 ff ff       	call   c0001d50 <mem_set>
c0002818:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000281c:	c1 e3 09             	shl    ebx,0x9
c000281f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002825:	76 1b                	jbe    c0002842 <dir_clear+0x67>
c0002827:	bb 00 80 00 00       	mov    ebx,0x8000
c000282c:	eb 14                	jmp    c0002842 <dir_clear+0x67>
c000282e:	83 ec 0c             	sub    esp,0xc
c0002831:	53                   	push   ebx
c0002832:	e8 25 32 00 00       	call   c0005a5c <ff_memalloc>
c0002837:	83 c4 10             	add    esp,0x10
c000283a:	89 c7                	mov    edi,eax
c000283c:	85 c0                	test   eax,eax
c000283e:	75 7c                	jne    c00028bc <dir_clear+0xe1>
c0002840:	d1 eb                	shr    ebx,1
c0002842:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002848:	77 e4                	ja     c000282e <dir_clear+0x53>
c000284a:	31 db                	xor    ebx,ebx
c000284c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002850:	39 d8                	cmp    eax,ebx
c0002852:	76 53                	jbe    c00028a7 <dir_clear+0xcc>
c0002854:	6a 01                	push   0x1
c0002856:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002859:	50                   	push   eax
c000285a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000285e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002862:	50                   	push   eax
c0002863:	e8 72 f4 ff ff       	call   c0001cda <disk_write>
c0002868:	83 c4 10             	add    esp,0x10
c000286b:	85 c0                	test   eax,eax
c000286d:	75 38                	jne    c00028a7 <dir_clear+0xcc>
c000286f:	43                   	inc    ebx
c0002870:	eb da                	jmp    c000284c <dir_clear+0x71>
c0002872:	52                   	push   edx
c0002873:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002876:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000287a:	50                   	push   eax
c000287b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000287f:	57                   	push   edi
c0002880:	50                   	push   eax
c0002881:	e8 54 f4 ff ff       	call   c0001cda <disk_write>
c0002886:	83 c4 10             	add    esp,0x10
c0002889:	85 c0                	test   eax,eax
c000288b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000288f:	75 0a                	jne    c000289b <dir_clear+0xc0>
c0002891:	01 d3                	add    ebx,edx
c0002893:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002897:	39 d8                	cmp    eax,ebx
c0002899:	77 d7                	ja     c0002872 <dir_clear+0x97>
c000289b:	83 ec 0c             	sub    esp,0xc
c000289e:	57                   	push   edi
c000289f:	e8 d0 31 00 00       	call   c0005a74 <ff_memfree>
c00028a4:	83 c4 10             	add    esp,0x10
c00028a7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028ab:	39 d8                	cmp    eax,ebx
c00028ad:	0f 95 c0             	setne  al
c00028b0:	0f b6 c0             	movzx  eax,al
c00028b3:	eb 19                	jmp    c00028ce <dir_clear+0xf3>
c00028b5:	b8 01 00 00 00       	mov    eax,0x1
c00028ba:	eb 12                	jmp    c00028ce <dir_clear+0xf3>
c00028bc:	89 d9                	mov    ecx,ebx
c00028be:	31 d2                	xor    edx,edx
c00028c0:	e8 8b f4 ff ff       	call   c0001d50 <mem_set>
c00028c5:	89 da                	mov    edx,ebx
c00028c7:	31 db                	xor    ebx,ebx
c00028c9:	c1 ea 09             	shr    edx,0x9
c00028cc:	eb c5                	jmp    c0002893 <dir_clear+0xb8>
c00028ce:	83 c4 1c             	add    esp,0x1c
c00028d1:	5b                   	pop    ebx
c00028d2:	5e                   	pop    esi
c00028d3:	5f                   	pop    edi
c00028d4:	5d                   	pop    ebp
c00028d5:	c3                   	ret    

c00028d6 <create_name>:
c00028d6:	55                   	push   ebp
c00028d7:	89 d5                	mov    ebp,edx
c00028d9:	57                   	push   edi
c00028da:	89 c7                	mov    edi,eax
c00028dc:	56                   	push   esi
c00028dd:	31 f6                	xor    esi,esi
c00028df:	53                   	push   ebx
c00028e0:	83 ec 3c             	sub    esp,0x3c
c00028e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028e9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028eb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028f2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00028f6:	e8 9b f4 ff ff       	call   c0001d96 <tchar2uni>
c00028fb:	89 c3                	mov    ebx,eax
c00028fd:	83 f8 ff             	cmp    eax,0xffffffff
c0002900:	75 0a                	jne    c000290c <create_name+0x36>
c0002902:	b8 06 00 00 00       	mov    eax,0x6
c0002907:	e9 9e 02 00 00       	jmp    c0002baa <create_name+0x2d4>
c000290c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002911:	76 0c                	jbe    c000291f <create_name+0x49>
c0002913:	c1 e8 10             	shr    eax,0x10
c0002916:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000291a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000291e:	46                   	inc    esi
c000291f:	66 83 fb 1f          	cmp    bx,0x1f
c0002923:	76 4f                	jbe    c0002974 <create_name+0x9e>
c0002925:	66 83 fb 5c          	cmp    bx,0x5c
c0002929:	74 35                	je     c0002960 <create_name+0x8a>
c000292b:	66 83 fb 2f          	cmp    bx,0x2f
c000292f:	74 2f                	je     c0002960 <create_name+0x8a>
c0002931:	66 83 fb 7f          	cmp    bx,0x7f
c0002935:	77 11                	ja     c0002948 <create_name+0x72>
c0002937:	0f b7 d3             	movzx  edx,bx
c000293a:	b8 e2 ea 01 c0       	mov    eax,0xc001eae2
c000293f:	e8 3a f4 ff ff       	call   c0001d7e <chk_chr>
c0002944:	85 c0                	test   eax,eax
c0002946:	75 ba                	jne    c0002902 <create_name+0x2c>
c0002948:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000294e:	77 b2                	ja     c0002902 <create_name+0x2c>
c0002950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002954:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002958:	46                   	inc    esi
c0002959:	eb 97                	jmp    c00028f2 <create_name+0x1c>
c000295b:	40                   	inc    eax
c000295c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	8a 10                	mov    dl,BYTE PTR [eax]
c0002966:	80 fa 2f             	cmp    dl,0x2f
c0002969:	74 f0                	je     c000295b <create_name+0x85>
c000296b:	80 fa 5c             	cmp    dl,0x5c
c000296e:	74 eb                	je     c000295b <create_name+0x85>
c0002970:	31 db                	xor    ebx,ebx
c0002972:	eb 02                	jmp    c0002976 <create_name+0xa0>
c0002974:	b3 04                	mov    bl,0x4
c0002976:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000297a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000297d:	85 f6                	test   esi,esi
c000297f:	74 18                	je     c0002999 <create_name+0xc3>
c0002981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002985:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000298a:	66 83 f8 20          	cmp    ax,0x20
c000298e:	74 06                	je     c0002996 <create_name+0xc0>
c0002990:	66 83 f8 2e          	cmp    ax,0x2e
c0002994:	75 03                	jne    c0002999 <create_name+0xc3>
c0002996:	4e                   	dec    esi
c0002997:	eb e4                	jmp    c000297d <create_name+0xa7>
c0002999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000299d:	31 ed                	xor    ebp,ebp
c000299f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029a5:	85 f6                	test   esi,esi
c00029a7:	0f 84 55 ff ff ff    	je     c0002902 <create_name+0x2c>
c00029ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029b1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029b4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029b8:	66 83 f8 20          	cmp    ax,0x20
c00029bc:	75 04                	jne    c00029c2 <create_name+0xec>
c00029be:	89 d5                	mov    ebp,edx
c00029c0:	eb eb                	jmp    c00029ad <create_name+0xd7>
c00029c2:	85 ed                	test   ebp,ebp
c00029c4:	75 06                	jne    c00029cc <create_name+0xf6>
c00029c6:	66 83 f8 2e          	cmp    ax,0x2e
c00029ca:	75 08                	jne    c00029d4 <create_name+0xfe>
c00029cc:	83 cb 03             	or     ebx,0x3
c00029cf:	eb 03                	jmp    c00029d4 <create_name+0xfe>
c00029d1:	4e                   	dec    esi
c00029d2:	74 0c                	je     c00029e0 <create_name+0x10a>
c00029d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029d8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029de:	75 f1                	jne    c00029d1 <create_name+0xfb>
c00029e0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029e5:	8d 47 20             	lea    eax,[edi+0x20]
c00029e8:	ba 20 00 00 00       	mov    edx,0x20
c00029ed:	e8 5e f3 ff ff       	call   c0001d50 <mem_set>
c00029f2:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00029fa:	31 c9                	xor    ecx,ecx
c00029fc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a01:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a0c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a10:	66 85 ed             	test   bp,bp
c0002a13:	0f 84 30 01 00 00    	je     c0002b49 <create_name+0x273>
c0002a19:	66 83 fd 20          	cmp    bp,0x20
c0002a1d:	74 10                	je     c0002a2f <create_name+0x159>
c0002a1f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a23:	75 13                	jne    c0002a38 <create_name+0x162>
c0002a25:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a29:	0f 84 6b 01 00 00    	je     c0002b9a <create_name+0x2c4>
c0002a2f:	83 cb 03             	or     ebx,0x3
c0002a32:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a36:	eb c9                	jmp    c0002a01 <create_name+0x12b>
c0002a38:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a3c:	73 0b                	jae    c0002a49 <create_name+0x173>
c0002a3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a42:	75 47                	jne    c0002a8b <create_name+0x1b5>
c0002a44:	e9 51 01 00 00       	jmp    c0002b9a <create_name+0x2c4>
c0002a49:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a4e:	75 10                	jne    c0002a60 <create_name+0x18a>
c0002a50:	83 cb 03             	or     ebx,0x3
c0002a53:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a5b:	e9 e9 00 00 00       	jmp    c0002b49 <create_name+0x273>
c0002a60:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a64:	74 0d                	je     c0002a73 <create_name+0x19d>
c0002a66:	83 cb 03             	or     ebx,0x3
c0002a69:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a6d:	0f 87 d6 00 00 00    	ja     c0002b49 <create_name+0x273>
c0002a73:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a78:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a7c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a84:	b9 08 00 00 00       	mov    ecx,0x8
c0002a89:	eb a7                	jmp    c0002a32 <create_name+0x15c>
c0002a8b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a8f:	76 68                	jbe    c0002af9 <create_name+0x223>
c0002a91:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002a95:	88 da                	mov    dl,bl
c0002a97:	83 ca 02             	or     edx,0x2
c0002a9a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002a9e:	50                   	push   eax
c0002a9f:	50                   	push   eax
c0002aa0:	68 b5 01 00 00       	push   0x1b5
c0002aa5:	55                   	push   ebp
c0002aa6:	e8 e1 2f 00 00       	call   c0005a8c <ff_uni2oem>
c0002aab:	83 c4 10             	add    esp,0x10
c0002aae:	89 c5                	mov    ebp,eax
c0002ab0:	a8 80                	test   al,0x80
c0002ab2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ab6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aba:	74 0c                	je     c0002ac8 <create_name+0x1f2>
c0002abc:	83 e5 7f             	and    ebp,0x7f
c0002abf:	0f b6 ad a0 eb 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe1460]
c0002ac6:	eb 2a                	jmp    c0002af2 <create_name+0x21c>
c0002ac8:	66 3d ff 00          	cmp    ax,0xff
c0002acc:	76 24                	jbe    c0002af2 <create_name+0x21c>
c0002ace:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ad2:	48                   	dec    eax
c0002ad3:	39 c8                	cmp    eax,ecx
c0002ad5:	77 0c                	ja     c0002ae3 <create_name+0x20d>
c0002ad7:	83 cb 03             	or     ebx,0x3
c0002ada:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002ade:	e9 4f ff ff ff       	jmp    c0002a32 <create_name+0x15c>
c0002ae3:	89 e8                	mov    eax,ebp
c0002ae5:	88 d3                	mov    bl,dl
c0002ae7:	66 c1 e8 08          	shr    ax,0x8
c0002aeb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aef:	41                   	inc    ecx
c0002af0:	eb 4b                	jmp    c0002b3d <create_name+0x267>
c0002af2:	88 d3                	mov    bl,dl
c0002af4:	66 85 ed             	test   bp,bp
c0002af7:	74 19                	je     c0002b12 <create_name+0x23c>
c0002af9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002afd:	0f b7 d5             	movzx  edx,bp
c0002b00:	b8 eb ea 01 c0       	mov    eax,0xc001eaeb
c0002b05:	e8 74 f2 ff ff       	call   c0001d7e <chk_chr>
c0002b0a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b0e:	85 c0                	test   eax,eax
c0002b10:	74 0a                	je     c0002b1c <create_name+0x246>
c0002b12:	83 cb 03             	or     ebx,0x3
c0002b15:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b1a:	eb 21                	jmp    c0002b3d <create_name+0x267>
c0002b1c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b1f:	66 83 f8 19          	cmp    ax,0x19
c0002b23:	77 07                	ja     c0002b2c <create_name+0x256>
c0002b25:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b2a:	eb 11                	jmp    c0002b3d <create_name+0x267>
c0002b2c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 08                	ja     c0002b3d <create_name+0x267>
c0002b35:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b3a:	83 ed 20             	sub    ebp,0x20
c0002b3d:	89 e8                	mov    eax,ebp
c0002b3f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b43:	41                   	inc    ecx
c0002b44:	e9 e9 fe ff ff       	jmp    c0002a32 <create_name+0x15c>
c0002b49:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b4d:	75 04                	jne    c0002b53 <create_name+0x27d>
c0002b4f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b53:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b58:	75 05                	jne    c0002b5f <create_name+0x289>
c0002b5a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b5f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b63:	83 e0 0c             	and    eax,0xc
c0002b66:	3c 0c                	cmp    al,0xc
c0002b68:	74 0b                	je     c0002b75 <create_name+0x29f>
c0002b6a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b6e:	83 e0 03             	and    eax,0x3
c0002b71:	3c 03                	cmp    al,0x3
c0002b73:	75 05                	jne    c0002b7a <create_name+0x2a4>
c0002b75:	83 cb 02             	or     ebx,0x2
c0002b78:	eb 19                	jmp    c0002b93 <create_name+0x2bd>
c0002b7a:	f6 c3 02             	test   bl,0x2
c0002b7d:	75 14                	jne    c0002b93 <create_name+0x2bd>
c0002b7f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b84:	74 03                	je     c0002b89 <create_name+0x2b3>
c0002b86:	83 cb 10             	or     ebx,0x10
c0002b89:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b8e:	74 03                	je     c0002b93 <create_name+0x2bd>
c0002b90:	83 cb 08             	or     ebx,0x8
c0002b93:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002b96:	31 c0                	xor    eax,eax
c0002b98:	eb 10                	jmp    c0002baa <create_name+0x2d4>
c0002b9a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002b9f:	0f 85 ce fe ff ff    	jne    c0002a73 <create_name+0x19d>
c0002ba5:	e9 a6 fe ff ff       	jmp    c0002a50 <create_name+0x17a>
c0002baa:	83 c4 3c             	add    esp,0x3c
c0002bad:	5b                   	pop    ebx
c0002bae:	5e                   	pop    esi
c0002baf:	5f                   	pop    edi
c0002bb0:	5d                   	pop    ebp
c0002bb1:	c3                   	ret    

c0002bb2 <cmp_lfn>:
c0002bb2:	55                   	push   ebp
c0002bb3:	57                   	push   edi
c0002bb4:	89 d7                	mov    edi,edx
c0002bb6:	56                   	push   esi
c0002bb7:	53                   	push   ebx
c0002bb8:	83 ec 1c             	sub    esp,0x1c
c0002bbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bbf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bc2:	e8 48 f1 ff ff       	call   c0001d0f <ld_word>
c0002bc7:	66 85 c0             	test   ax,ax
c0002bca:	74 07                	je     c0002bd3 <cmp_lfn+0x21>
c0002bcc:	31 c0                	xor    eax,eax
c0002bce:	e9 9a 00 00 00       	jmp    c0002c6d <cmp_lfn+0xbb>
c0002bd3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002bd5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bda:	83 e3 3f             	and    ebx,0x3f
c0002bdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002be5:	4b                   	dec    ebx
c0002be6:	6b db 0d             	imul   ebx,ebx,0xd
c0002be9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bed:	0f b6 80 20 ec 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe13e0]
c0002bf4:	01 f8                	add    eax,edi
c0002bf6:	e8 14 f1 ff ff       	call   c0001d0f <ld_word>
c0002bfb:	66 85 ed             	test   bp,bp
c0002bfe:	89 c6                	mov    esi,eax
c0002c00:	74 3c                	je     c0002c3e <cmp_lfn+0x8c>
c0002c02:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c08:	77 c2                	ja     c0002bcc <cmp_lfn+0x1a>
c0002c0a:	83 ec 0c             	sub    esp,0xc
c0002c0d:	0f b7 c0             	movzx  eax,ax
c0002c10:	50                   	push   eax
c0002c11:	e8 8e 2f 00 00       	call   c0005ba4 <ff_wtoupper>
c0002c16:	89 c5                	mov    ebp,eax
c0002c18:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c1b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c23:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c27:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c2a:	e8 75 2f 00 00       	call   c0005ba4 <ff_wtoupper>
c0002c2f:	83 c4 10             	add    esp,0x10
c0002c32:	39 c5                	cmp    ebp,eax
c0002c34:	75 96                	jne    c0002bcc <cmp_lfn+0x1a>
c0002c36:	89 f5                	mov    ebp,esi
c0002c38:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c3c:	eb 04                	jmp    c0002c42 <cmp_lfn+0x90>
c0002c3e:	66 46                	inc    si
c0002c40:	75 8a                	jne    c0002bcc <cmp_lfn+0x1a>
c0002c42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c4b:	75 9c                	jne    c0002be9 <cmp_lfn+0x37>
c0002c4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c50:	74 16                	je     c0002c68 <cmp_lfn+0xb6>
c0002c52:	66 85 ed             	test   bp,bp
c0002c55:	74 11                	je     c0002c68 <cmp_lfn+0xb6>
c0002c57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c60:	0f 94 c0             	sete   al
c0002c63:	0f b6 c0             	movzx  eax,al
c0002c66:	eb 05                	jmp    c0002c6d <cmp_lfn+0xbb>
c0002c68:	b8 01 00 00 00       	mov    eax,0x1
c0002c6d:	83 c4 1c             	add    esp,0x1c
c0002c70:	5b                   	pop    ebx
c0002c71:	5e                   	pop    esi
c0002c72:	5f                   	pop    edi
c0002c73:	5d                   	pop    ebp
c0002c74:	c3                   	ret    

c0002c75 <sync_fs>:
c0002c75:	56                   	push   esi
c0002c76:	53                   	push   ebx
c0002c77:	53                   	push   ebx
c0002c78:	89 c3                	mov    ebx,eax
c0002c7a:	e8 53 f5 ff ff       	call   c00021d2 <sync_window>
c0002c7f:	85 c0                	test   eax,eax
c0002c81:	0f 85 9a 00 00 00    	jne    c0002d21 <sync_fs+0xac>
c0002c87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c8a:	75 7b                	jne    c0002d07 <sync_fs+0x92>
c0002c8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002c90:	75 75                	jne    c0002d07 <sync_fs+0x92>
c0002c92:	b9 00 02 00 00       	mov    ecx,0x200
c0002c97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002c9a:	31 d2                	xor    edx,edx
c0002c9c:	89 f0                	mov    eax,esi
c0002c9e:	e8 ad f0 ff ff       	call   c0001d50 <mem_set>
c0002ca3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ca9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cae:	e8 81 f0 ff ff       	call   c0001d34 <st_word>
c0002cb3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cb8:	89 f0                	mov    eax,esi
c0002cba:	e8 79 f0 ff ff       	call   c0001d38 <st_dword>
c0002cbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cca:	e8 69 f0 ff ff       	call   c0001d38 <st_dword>
c0002ccf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002cd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002cd8:	e8 5b f0 ff ff       	call   c0001d38 <st_dword>
c0002cdd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ce0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ce6:	e8 4d f0 ff ff       	call   c0001d38 <st_dword>
c0002ceb:	6a 01                	push   0x1
c0002ced:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002cf0:	40                   	inc    eax
c0002cf1:	50                   	push   eax
c0002cf2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002cf5:	56                   	push   esi
c0002cf6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002cfa:	50                   	push   eax
c0002cfb:	e8 da ef ff ff       	call   c0001cda <disk_write>
c0002d00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d04:	83 c4 10             	add    esp,0x10
c0002d07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0b:	51                   	push   ecx
c0002d0c:	6a 00                	push   0x0
c0002d0e:	6a 00                	push   0x0
c0002d10:	50                   	push   eax
c0002d11:	e8 da ef ff ff       	call   c0001cf0 <disk_ioctl>
c0002d16:	83 c4 10             	add    esp,0x10
c0002d19:	85 c0                	test   eax,eax
c0002d1b:	0f 95 c0             	setne  al
c0002d1e:	0f b6 c0             	movzx  eax,al
c0002d21:	5a                   	pop    edx
c0002d22:	5b                   	pop    ebx
c0002d23:	5e                   	pop    esi
c0002d24:	c3                   	ret    

c0002d25 <create_partition>:
c0002d25:	55                   	push   ebp
c0002d26:	0f b6 c0             	movzx  eax,al
c0002d29:	57                   	push   edi
c0002d2a:	56                   	push   esi
c0002d2b:	53                   	push   ebx
c0002d2c:	83 ec 40             	sub    esp,0x40
c0002d2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d3f:	50                   	push   eax
c0002d40:	6a 01                	push   0x1
c0002d42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d46:	e8 a5 ef ff ff       	call   c0001cf0 <disk_ioctl>
c0002d4b:	83 c4 10             	add    esp,0x10
c0002d4e:	85 c0                	test   eax,eax
c0002d50:	0f 85 69 01 00 00    	jne    c0002ebf <create_partition+0x19a>
c0002d56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d63:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d68:	31 d2                	xor    edx,edx
c0002d6a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d73:	f7 f3                	div    ebx
c0002d75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d7a:	76 0c                	jbe    c0002d88 <create_partition+0x63>
c0002d7c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d80:	49                   	dec    ecx
c0002d81:	75 e5                	jne    c0002d68 <create_partition+0x43>
c0002d83:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d88:	b9 00 02 00 00       	mov    ecx,0x200
c0002d8d:	31 d2                	xor    edx,edx
c0002d8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002d93:	e8 b8 ef ff ff       	call   c0001d50 <mem_set>
c0002d98:	b9 64 00 00 00       	mov    ecx,0x64
c0002d9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002da1:	31 d2                	xor    edx,edx
c0002da3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dab:	f7 f1                	div    ecx
c0002dad:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002db2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002db6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dba:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dc0:	85 c9                	test   ecx,ecx
c0002dc2:	75 34                	jne    c0002df8 <create_partition+0xd3>
c0002dc4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dc8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dcd:	05 fe 01 00 00       	add    eax,0x1fe
c0002dd2:	e8 5d ef ff ff       	call   c0001d34 <st_word>
c0002dd7:	6a 01                	push   0x1
c0002dd9:	6a 00                	push   0x0
c0002ddb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ddf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002de3:	e8 f2 ee ff ff       	call   c0001cda <disk_write>
c0002de8:	83 c4 10             	add    esp,0x10
c0002deb:	85 c0                	test   eax,eax
c0002ded:	0f 95 c0             	setne  al
c0002df0:	0f b6 c0             	movzx  eax,al
c0002df3:	e9 cc 00 00 00       	jmp    c0002ec4 <create_partition+0x19f>
c0002df8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002dfc:	76 c6                	jbe    c0002dc4 <create_partition+0x9f>
c0002dfe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e02:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e06:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e09:	83 fe 64             	cmp    esi,0x64
c0002e0c:	77 0d                	ja     c0002e1b <create_partition+0xf6>
c0002e0e:	74 07                	je     c0002e17 <create_partition+0xf2>
c0002e10:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e15:	eb 04                	jmp    c0002e1b <create_partition+0xf6>
c0002e17:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e1b:	31 c0                	xor    eax,eax
c0002e1d:	89 f2                	mov    edx,esi
c0002e1f:	01 ca                	add    edx,ecx
c0002e21:	0f 92 c0             	setb   al
c0002e24:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e28:	77 04                	ja     c0002e2e <create_partition+0x109>
c0002e2a:	85 c0                	test   eax,eax
c0002e2c:	74 08                	je     c0002e36 <create_partition+0x111>
c0002e2e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e32:	29 ce                	sub    esi,ecx
c0002e34:	eb 04                	jmp    c0002e3a <create_partition+0x115>
c0002e36:	85 f6                	test   esi,esi
c0002e38:	74 8a                	je     c0002dc4 <create_partition+0x9f>
c0002e3a:	89 ca                	mov    edx,ecx
c0002e3c:	89 d8                	mov    eax,ebx
c0002e3e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e43:	e8 f0 ee ff ff       	call   c0001d38 <st_dword>
c0002e48:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e4b:	89 f2                	mov    edx,esi
c0002e4d:	83 c3 10             	add    ebx,0x10
c0002e50:	e8 e3 ee ff ff       	call   c0001d38 <st_dword>
c0002e55:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e5a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e5e:	31 d2                	xor    edx,edx
c0002e60:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e63:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e67:	89 c8                	mov    eax,ecx
c0002e69:	01 f1                	add    ecx,esi
c0002e6b:	f7 f5                	div    ebp
c0002e6d:	89 d5                	mov    ebp,edx
c0002e6f:	31 d2                	xor    edx,edx
c0002e71:	45                   	inc    ebp
c0002e72:	f7 f7                	div    edi
c0002e74:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e77:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e7a:	89 c2                	mov    edx,eax
c0002e7c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e7f:	c1 ea 02             	shr    edx,0x2
c0002e82:	83 e2 c0             	and    edx,0xffffffc0
c0002e85:	09 ea                	or     edx,ebp
c0002e87:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e8c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e8f:	31 d2                	xor    edx,edx
c0002e91:	f7 f5                	div    ebp
c0002e93:	89 d6                	mov    esi,edx
c0002e95:	31 d2                	xor    edx,edx
c0002e97:	46                   	inc    esi
c0002e98:	f7 f7                	div    edi
c0002e9a:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002e9d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002ea0:	89 c7                	mov    edi,eax
c0002ea2:	c1 ef 02             	shr    edi,0x2
c0002ea5:	83 e7 c0             	and    edi,0xffffffc0
c0002ea8:	09 fe                	or     esi,edi
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002eaf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002eb4:	0f 85 06 ff ff ff    	jne    c0002dc0 <create_partition+0x9b>
c0002eba:	e9 05 ff ff ff       	jmp    c0002dc4 <create_partition+0x9f>
c0002ebf:	b8 01 00 00 00       	mov    eax,0x1
c0002ec4:	83 c4 3c             	add    esp,0x3c
c0002ec7:	5b                   	pop    ebx
c0002ec8:	5e                   	pop    esi
c0002ec9:	5f                   	pop    edi
c0002eca:	5d                   	pop    ebp
c0002ecb:	c3                   	ret    

c0002ecc <get_fileinfo>:
c0002ecc:	55                   	push   ebp
c0002ecd:	57                   	push   edi
c0002ece:	56                   	push   esi
c0002ecf:	53                   	push   ebx
c0002ed0:	83 ec 1c             	sub    esp,0x1c
c0002ed3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ed5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ed9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002edd:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ee1:	0f 84 c1 01 00 00    	je     c00030a8 <get_fileinfo+0x1dc>
c0002ee7:	89 d3                	mov    ebx,edx
c0002ee9:	89 c6                	mov    esi,eax
c0002eeb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eef:	74 6a                	je     c0002f5b <get_fileinfo+0x8f>
c0002ef1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ef9:	31 ed                	xor    ebp,ebp
c0002efb:	31 ff                	xor    edi,edi
c0002efd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f01:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f08:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f0c:	66 85 d2             	test   dx,dx
c0002f0f:	74 3e                	je     c0002f4f <get_fileinfo+0x83>
c0002f11:	66 85 ed             	test   bp,bp
c0002f14:	75 0c                	jne    c0002f22 <get_fileinfo+0x56>
c0002f16:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f1c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f20:	76 22                	jbe    c0002f44 <get_fileinfo+0x78>
c0002f22:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f27:	89 e8                	mov    eax,ebp
c0002f29:	29 f9                	sub    ecx,edi
c0002f2b:	c1 e0 10             	shl    eax,0x10
c0002f2e:	09 d0                	or     eax,edx
c0002f30:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f34:	e8 23 ef ff ff       	call   c0001e5c <put_utf>
c0002f39:	84 c0                	test   al,al
c0002f3b:	74 10                	je     c0002f4d <get_fileinfo+0x81>
c0002f3d:	0f b6 c0             	movzx  eax,al
c0002f40:	31 d2                	xor    edx,edx
c0002f42:	01 c7                	add    edi,eax
c0002f44:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f49:	89 d5                	mov    ebp,edx
c0002f4b:	eb b0                	jmp    c0002efd <get_fileinfo+0x31>
c0002f4d:	31 ff                	xor    edi,edi
c0002f4f:	66 85 ed             	test   bp,bp
c0002f52:	74 02                	je     c0002f56 <get_fileinfo+0x8a>
c0002f54:	31 ff                	xor    edi,edi
c0002f56:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f5b:	31 ff                	xor    edi,edi
c0002f5d:	31 c9                	xor    ecx,ecx
c0002f5f:	83 f9 0a             	cmp    ecx,0xa
c0002f62:	0f 87 ad 00 00 00    	ja     c0003015 <get_fileinfo+0x149>
c0002f68:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f6b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f6e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f72:	66 83 fa 20          	cmp    dx,0x20
c0002f76:	0f 84 92 00 00 00    	je     c000300e <get_fileinfo+0x142>
c0002f7c:	66 83 fa 05          	cmp    dx,0x5
c0002f80:	75 05                	jne    c0002f87 <get_fileinfo+0xbb>
c0002f82:	ba e5 00 00 00       	mov    edx,0xe5
c0002f87:	83 ff 0b             	cmp    edi,0xb
c0002f8a:	77 0b                	ja     c0002f97 <get_fileinfo+0xcb>
c0002f8c:	83 fd 09             	cmp    ebp,0x9
c0002f8f:	75 06                	jne    c0002f97 <get_fileinfo+0xcb>
c0002f91:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002f96:	47                   	inc    edi
c0002f97:	0f b7 c2             	movzx  eax,dx
c0002f9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002f9e:	e8 ed ed ff ff       	call   c0001d90 <dbc_1st>
c0002fa3:	85 c0                	test   eax,eax
c0002fa5:	74 2f                	je     c0002fd6 <get_fileinfo+0x10a>
c0002fa7:	83 fd 08             	cmp    ebp,0x8
c0002faa:	74 2a                	je     c0002fd6 <get_fileinfo+0x10a>
c0002fac:	83 fd 0b             	cmp    ebp,0xb
c0002faf:	74 25                	je     c0002fd6 <get_fileinfo+0x10a>
c0002fb1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fb4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fb8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fbc:	e8 d2 ed ff ff       	call   c0001d93 <dbc_2nd>
c0002fc1:	85 c0                	test   eax,eax
c0002fc3:	74 11                	je     c0002fd6 <get_fileinfo+0x10a>
c0002fc5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fc9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fce:	c1 e2 08             	shl    edx,0x8
c0002fd1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fd4:	09 c2                	or     edx,eax
c0002fd6:	0f b7 d2             	movzx  edx,dx
c0002fd9:	50                   	push   eax
c0002fda:	50                   	push   eax
c0002fdb:	68 b5 01 00 00       	push   0x1b5
c0002fe0:	52                   	push   edx
c0002fe1:	e8 46 2b 00 00       	call   c0005b2c <ff_oem2uni>
c0002fe6:	83 c4 10             	add    esp,0x10
c0002fe9:	66 85 c0             	test   ax,ax
c0002fec:	75 04                	jne    c0002ff2 <get_fileinfo+0x126>
c0002fee:	31 ff                	xor    edi,edi
c0002ff0:	eb 23                	jmp    c0003015 <get_fileinfo+0x149>
c0002ff2:	b9 0c 00 00 00       	mov    ecx,0xc
c0002ff7:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0002ffb:	29 f9                	sub    ecx,edi
c0002ffd:	0f b7 c0             	movzx  eax,ax
c0003000:	e8 57 ee ff ff       	call   c0001e5c <put_utf>
c0003005:	84 c0                	test   al,al
c0003007:	74 e5                	je     c0002fee <get_fileinfo+0x122>
c0003009:	0f b6 c0             	movzx  eax,al
c000300c:	01 c7                	add    edi,eax
c000300e:	89 e9                	mov    ecx,ebp
c0003010:	e9 4a ff ff ff       	jmp    c0002f5f <get_fileinfo+0x93>
c0003015:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000301a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000301e:	75 54                	jne    c0003074 <get_fileinfo+0x1a8>
c0003020:	85 ff                	test   edi,edi
c0003022:	75 0b                	jne    c000302f <get_fileinfo+0x163>
c0003024:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003028:	ba 01 00 00 00       	mov    edx,0x1
c000302d:	eb 33                	jmp    c0003062 <get_fileinfo+0x196>
c000302f:	b1 08                	mov    cl,0x8
c0003031:	31 d2                	xor    edx,edx
c0003033:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003039:	84 c0                	test   al,al
c000303b:	74 25                	je     c0003062 <get_fileinfo+0x196>
c000303d:	66 83 f8 2e          	cmp    ax,0x2e
c0003041:	74 16                	je     c0003059 <get_fileinfo+0x18d>
c0003043:	8d 78 bf             	lea    edi,[eax-0x41]
c0003046:	66 83 ff 19          	cmp    di,0x19
c000304a:	77 0f                	ja     c000305b <get_fileinfo+0x18f>
c000304c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000304f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003052:	74 07                	je     c000305b <get_fileinfo+0x18f>
c0003054:	83 c0 20             	add    eax,0x20
c0003057:	eb 02                	jmp    c000305b <get_fileinfo+0x18f>
c0003059:	b1 10                	mov    cl,0x10
c000305b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000305f:	42                   	inc    edx
c0003060:	eb d1                	jmp    c0003033 <get_fileinfo+0x167>
c0003062:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003067:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000306a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000306e:	75 04                	jne    c0003074 <get_fileinfo+0x1a8>
c0003070:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003074:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003077:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000307a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000307d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003080:	83 c0 1c             	add    eax,0x1c
c0003083:	e8 94 ec ff ff       	call   c0001d1c <ld_dword>
c0003088:	89 03                	mov    DWORD PTR [ebx],eax
c000308a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000308d:	83 c0 16             	add    eax,0x16
c0003090:	e8 7a ec ff ff       	call   c0001d0f <ld_word>
c0003095:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003099:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309c:	83 c0 18             	add    eax,0x18
c000309f:	e8 6b ec ff ff       	call   c0001d0f <ld_word>
c00030a4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030a8:	83 c4 1c             	add    esp,0x1c
c00030ab:	5b                   	pop    ebx
c00030ac:	5e                   	pop    esi
c00030ad:	5f                   	pop    edi
c00030ae:	5d                   	pop    ebp
c00030af:	c3                   	ret    

c00030b0 <ld_clust.isra.0>:
c00030b0:	56                   	push   esi
c00030b1:	89 c6                	mov    esi,eax
c00030b3:	53                   	push   ebx
c00030b4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030b7:	89 d3                	mov    ebx,edx
c00030b9:	e8 51 ec ff ff       	call   c0001d0f <ld_word>
c00030be:	0f b7 c8             	movzx  ecx,ax
c00030c1:	89 f0                	mov    eax,esi
c00030c3:	3c 03                	cmp    al,0x3
c00030c5:	75 0d                	jne    c00030d4 <ld_clust.isra.0+0x24>
c00030c7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030ca:	e8 40 ec ff ff       	call   c0001d0f <ld_word>
c00030cf:	c1 e0 10             	shl    eax,0x10
c00030d2:	09 c1                	or     ecx,eax
c00030d4:	89 c8                	mov    eax,ecx
c00030d6:	5b                   	pop    ebx
c00030d7:	5e                   	pop    esi
c00030d8:	c3                   	ret    

c00030d9 <st_clust.isra.1>:
c00030d9:	56                   	push   esi
c00030da:	89 c6                	mov    esi,eax
c00030dc:	53                   	push   ebx
c00030dd:	89 d3                	mov    ebx,edx
c00030df:	0f b7 d1             	movzx  edx,cx
c00030e2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030e5:	e8 4a ec ff ff       	call   c0001d34 <st_word>
c00030ea:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030ed:	75 0f                	jne    c00030fe <st_clust.isra.1+0x25>
c00030ef:	c1 e9 10             	shr    ecx,0x10
c00030f2:	8d 43 14             	lea    eax,[ebx+0x14]
c00030f5:	89 ca                	mov    edx,ecx
c00030f7:	5b                   	pop    ebx
c00030f8:	5e                   	pop    esi
c00030f9:	e9 36 ec ff ff       	jmp    c0001d34 <st_word>
c00030fe:	5b                   	pop    ebx
c00030ff:	5e                   	pop    esi
c0003100:	c3                   	ret    

c0003101 <get_fat.isra.2>:
c0003101:	b9 01 00 00 00       	mov    ecx,0x1
c0003106:	83 fa 01             	cmp    edx,0x1
c0003109:	0f 86 f1 00 00 00    	jbe    c0003200 <get_fat.isra.2+0xff>
c000310f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003112:	0f 83 e8 00 00 00    	jae    c0003200 <get_fat.isra.2+0xff>
c0003118:	55                   	push   ebp
c0003119:	57                   	push   edi
c000311a:	89 c7                	mov    edi,eax
c000311c:	56                   	push   esi
c000311d:	89 d6                	mov    esi,edx
c000311f:	53                   	push   ebx
c0003120:	83 ec 0c             	sub    esp,0xc
c0003123:	8a 00                	mov    al,BYTE PTR [eax]
c0003125:	3c 02                	cmp    al,0x2
c0003127:	74 78                	je     c00031a1 <get_fat.isra.2+0xa0>
c0003129:	3c 03                	cmp    al,0x3
c000312b:	0f 84 97 00 00 00    	je     c00031c8 <get_fat.isra.2+0xc7>
c0003131:	fe c8                	dec    al
c0003133:	0f 85 bd 00 00 00    	jne    c00031f6 <get_fat.isra.2+0xf5>
c0003139:	89 d3                	mov    ebx,edx
c000313b:	89 f8                	mov    eax,edi
c000313d:	d1 eb                	shr    ebx,1
c000313f:	01 d3                	add    ebx,edx
c0003141:	89 da                	mov    edx,ebx
c0003143:	c1 ea 09             	shr    edx,0x9
c0003146:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003149:	e8 e7 f0 ff ff       	call   c0002235 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	74 08                	je     c000315a <get_fat.isra.2+0x59>
c0003152:	83 c9 ff             	or     ecx,0xffffffff
c0003155:	e9 9c 00 00 00       	jmp    c00031f6 <get_fat.isra.2+0xf5>
c000315a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000315d:	89 f8                	mov    eax,edi
c000315f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003165:	89 ea                	mov    edx,ebp
c0003167:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000316b:	c1 ea 09             	shr    edx,0x9
c000316e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003171:	e8 bf f0 ff ff       	call   c0002235 <move_window>
c0003176:	85 c0                	test   eax,eax
c0003178:	75 d8                	jne    c0003152 <get_fat.isra.2+0x51>
c000317a:	0f b6 c3             	movzx  eax,bl
c000317d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003183:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003188:	c1 e3 08             	shl    ebx,0x8
c000318b:	09 c3                	or     ebx,eax
c000318d:	89 d9                	mov    ecx,ebx
c000318f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003195:	83 e6 01             	and    esi,0x1
c0003198:	74 5c                	je     c00031f6 <get_fat.isra.2+0xf5>
c000319a:	89 d9                	mov    ecx,ebx
c000319c:	c1 e9 04             	shr    ecx,0x4
c000319f:	eb 55                	jmp    c00031f6 <get_fat.isra.2+0xf5>
c00031a1:	c1 ea 08             	shr    edx,0x8
c00031a4:	89 f8                	mov    eax,edi
c00031a6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031a9:	e8 87 f0 ff ff       	call   c0002235 <move_window>
c00031ae:	85 c0                	test   eax,eax
c00031b0:	75 a0                	jne    c0003152 <get_fat.isra.2+0x51>
c00031b2:	01 f6                	add    esi,esi
c00031b4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ba:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031be:	e8 4c eb ff ff       	call   c0001d0f <ld_word>
c00031c3:	0f b7 c8             	movzx  ecx,ax
c00031c6:	eb 2e                	jmp    c00031f6 <get_fat.isra.2+0xf5>
c00031c8:	c1 ea 07             	shr    edx,0x7
c00031cb:	89 f8                	mov    eax,edi
c00031cd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031d0:	e8 60 f0 ff ff       	call   c0002235 <move_window>
c00031d5:	85 c0                	test   eax,eax
c00031d7:	0f 85 75 ff ff ff    	jne    c0003152 <get_fat.isra.2+0x51>
c00031dd:	c1 e6 02             	shl    esi,0x2
c00031e0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031e6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ea:	e8 2d eb ff ff       	call   c0001d1c <ld_dword>
c00031ef:	25 ff ff ff 0f       	and    eax,0xfffffff
c00031f4:	89 c1                	mov    ecx,eax
c00031f6:	83 c4 0c             	add    esp,0xc
c00031f9:	89 c8                	mov    eax,ecx
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    
c0003200:	89 c8                	mov    eax,ecx
c0003202:	c3                   	ret    

c0003203 <dir_sdi>:
c0003203:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003209:	0f 87 b6 00 00 00    	ja     c00032c5 <dir_sdi+0xc2>
c000320f:	55                   	push   ebp
c0003210:	57                   	push   edi
c0003211:	56                   	push   esi
c0003212:	53                   	push   ebx
c0003213:	89 d3                	mov    ebx,edx
c0003215:	83 ec 1c             	sub    esp,0x1c
c0003218:	f6 c2 1f             	test   dl,0x1f
c000321b:	74 0a                	je     c0003227 <dir_sdi+0x24>
c000321d:	b8 02 00 00 00       	mov    eax,0x2
c0003222:	e9 96 00 00 00       	jmp    c00032bd <dir_sdi+0xba>
c0003227:	89 c6                	mov    esi,eax
c0003229:	8b 38                	mov    edi,DWORD PTR [eax]
c000322b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000322e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003231:	85 c9                	test   ecx,ecx
c0003233:	75 23                	jne    c0003258 <dir_sdi+0x55>
c0003235:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003238:	76 07                	jbe    c0003241 <dir_sdi+0x3e>
c000323a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000323d:	85 c0                	test   eax,eax
c000323f:	75 15                	jne    c0003256 <dir_sdi+0x53>
c0003241:	89 da                	mov    edx,ebx
c0003243:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003247:	c1 ea 05             	shr    edx,0x5
c000324a:	39 c2                	cmp    edx,eax
c000324c:	73 cf                	jae    c000321d <dir_sdi+0x1a>
c000324e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003251:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003254:	eb 3d                	jmp    c0003293 <dir_sdi+0x90>
c0003256:	89 c1                	mov    ecx,eax
c0003258:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000325c:	c1 e5 09             	shl    ebp,0x9
c000325f:	89 ca                	mov    edx,ecx
c0003261:	39 eb                	cmp    ebx,ebp
c0003263:	72 1c                	jb     c0003281 <dir_sdi+0x7e>
c0003265:	8b 06                	mov    eax,DWORD PTR [esi]
c0003267:	e8 95 fe ff ff       	call   c0003101 <get_fat.isra.2>
c000326c:	89 c1                	mov    ecx,eax
c000326e:	83 f8 ff             	cmp    eax,0xffffffff
c0003271:	74 45                	je     c00032b8 <dir_sdi+0xb5>
c0003273:	83 f8 01             	cmp    eax,0x1
c0003276:	76 a5                	jbe    c000321d <dir_sdi+0x1a>
c0003278:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000327b:	76 a0                	jbe    c000321d <dir_sdi+0x1a>
c000327d:	29 eb                	sub    ebx,ebp
c000327f:	eb de                	jmp    c000325f <dir_sdi+0x5c>
c0003281:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003285:	89 f8                	mov    eax,edi
c0003287:	e8 c9 ec ff ff       	call   c0001f55 <clst2sect>
c000328c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003290:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003293:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003296:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003299:	85 d2                	test   edx,edx
c000329b:	74 80                	je     c000321d <dir_sdi+0x1a>
c000329d:	89 d8                	mov    eax,ebx
c000329f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032a5:	c1 e8 09             	shr    eax,0x9
c00032a8:	01 d0                	add    eax,edx
c00032aa:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032ad:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032b1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032b4:	31 c0                	xor    eax,eax
c00032b6:	eb 05                	jmp    c00032bd <dir_sdi+0xba>
c00032b8:	b8 01 00 00 00       	mov    eax,0x1
c00032bd:	83 c4 1c             	add    esp,0x1c
c00032c0:	5b                   	pop    ebx
c00032c1:	5e                   	pop    esi
c00032c2:	5f                   	pop    edi
c00032c3:	5d                   	pop    ebp
c00032c4:	c3                   	ret    
c00032c5:	b8 02 00 00 00       	mov    eax,0x2
c00032ca:	c3                   	ret    

c00032cb <create_chain>:
c00032cb:	55                   	push   ebp
c00032cc:	89 c5                	mov    ebp,eax
c00032ce:	57                   	push   edi
c00032cf:	89 d7                	mov    edi,edx
c00032d1:	56                   	push   esi
c00032d2:	53                   	push   ebx
c00032d3:	83 ec 1c             	sub    esp,0x1c
c00032d6:	85 d2                	test   edx,edx
c00032d8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032da:	75 0e                	jne    c00032ea <create_chain+0x1f>
c00032dc:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032df:	85 c9                	test   ecx,ecx
c00032e1:	74 34                	je     c0003317 <create_chain+0x4c>
c00032e3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032e6:	77 34                	ja     c000331c <create_chain+0x51>
c00032e8:	eb 2d                	jmp    c0003317 <create_chain+0x4c>
c00032ea:	89 f0                	mov    eax,esi
c00032ec:	e8 10 fe ff ff       	call   c0003101 <get_fat.isra.2>
c00032f1:	89 c3                	mov    ebx,eax
c00032f3:	83 f8 01             	cmp    eax,0x1
c00032f6:	77 0a                	ja     c0003302 <create_chain+0x37>
c00032f8:	bb 01 00 00 00       	mov    ebx,0x1
c00032fd:	e9 f9 00 00 00       	jmp    c00033fb <create_chain+0x130>
c0003302:	83 f8 ff             	cmp    eax,0xffffffff
c0003305:	0f 84 ed 00 00 00    	je     c00033f8 <create_chain+0x12d>
c000330b:	89 f9                	mov    ecx,edi
c000330d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003310:	76 0a                	jbe    c000331c <create_chain+0x51>
c0003312:	e9 e4 00 00 00       	jmp    c00033fb <create_chain+0x130>
c0003317:	b9 01 00 00 00       	mov    ecx,0x1
c000331c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003320:	75 07                	jne    c0003329 <create_chain+0x5e>
c0003322:	31 db                	xor    ebx,ebx
c0003324:	e9 d2 00 00 00       	jmp    c00033fb <create_chain+0x130>
c0003329:	39 f9                	cmp    ecx,edi
c000332b:	75 46                	jne    c0003373 <create_chain+0xa8>
c000332d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003330:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003333:	77 05                	ja     c000333a <create_chain+0x6f>
c0003335:	bb 02 00 00 00       	mov    ebx,0x2
c000333a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000333e:	89 da                	mov    edx,ebx
c0003340:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003343:	e8 b9 fd ff ff       	call   c0003101 <get_fat.isra.2>
c0003348:	83 f8 01             	cmp    eax,0x1
c000334b:	74 ab                	je     c00032f8 <create_chain+0x2d>
c000334d:	83 f8 ff             	cmp    eax,0xffffffff
c0003350:	0f 84 a2 00 00 00    	je     c00033f8 <create_chain+0x12d>
c0003356:	85 c0                	test   eax,eax
c0003358:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335c:	74 11                	je     c000336f <create_chain+0xa4>
c000335e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003361:	83 f8 01             	cmp    eax,0x1
c0003364:	76 0d                	jbe    c0003373 <create_chain+0xa8>
c0003366:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003369:	73 08                	jae    c0003373 <create_chain+0xa8>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	eb 04                	jmp    c0003373 <create_chain+0xa8>
c000336f:	85 db                	test   ebx,ebx
c0003371:	75 3d                	jne    c00033b0 <create_chain+0xe5>
c0003373:	89 cb                	mov    ebx,ecx
c0003375:	43                   	inc    ebx
c0003376:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003379:	77 0a                	ja     c0003385 <create_chain+0xba>
c000337b:	83 f9 01             	cmp    ecx,0x1
c000337e:	76 a2                	jbe    c0003322 <create_chain+0x57>
c0003380:	bb 02 00 00 00       	mov    ebx,0x2
c0003385:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003389:	89 da                	mov    edx,ebx
c000338b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000338e:	e8 6e fd ff ff       	call   c0003101 <get_fat.isra.2>
c0003393:	85 c0                	test   eax,eax
c0003395:	74 19                	je     c00033b0 <create_chain+0xe5>
c0003397:	83 f8 01             	cmp    eax,0x1
c000339a:	0f 84 58 ff ff ff    	je     c00032f8 <create_chain+0x2d>
c00033a0:	40                   	inc    eax
c00033a1:	74 55                	je     c00033f8 <create_chain+0x12d>
c00033a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a7:	39 cb                	cmp    ebx,ecx
c00033a9:	75 ca                	jne    c0003375 <create_chain+0xaa>
c00033ab:	e9 72 ff ff ff       	jmp    c0003322 <create_chain+0x57>
c00033b0:	83 c9 ff             	or     ecx,0xffffffff
c00033b3:	89 da                	mov    edx,ebx
c00033b5:	89 f0                	mov    eax,esi
c00033b7:	e8 cf f2 ff ff       	call   c000268b <put_fat>
c00033bc:	85 c0                	test   eax,eax
c00033be:	75 31                	jne    c00033f1 <create_chain+0x126>
c00033c0:	85 ff                	test   edi,edi
c00033c2:	75 16                	jne    c00033da <create_chain+0x10f>
c00033c4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033ca:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033cd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033d0:	39 d0                	cmp    eax,edx
c00033d2:	77 17                	ja     c00033eb <create_chain+0x120>
c00033d4:	48                   	dec    eax
c00033d5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033d8:	eb 11                	jmp    c00033eb <create_chain+0x120>
c00033da:	89 d9                	mov    ecx,ebx
c00033dc:	89 fa                	mov    edx,edi
c00033de:	89 f0                	mov    eax,esi
c00033e0:	e8 a6 f2 ff ff       	call   c000268b <put_fat>
c00033e5:	85 c0                	test   eax,eax
c00033e7:	74 db                	je     c00033c4 <create_chain+0xf9>
c00033e9:	eb 06                	jmp    c00033f1 <create_chain+0x126>
c00033eb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ef:	eb 0a                	jmp    c00033fb <create_chain+0x130>
c00033f1:	48                   	dec    eax
c00033f2:	0f 85 00 ff ff ff    	jne    c00032f8 <create_chain+0x2d>
c00033f8:	83 cb ff             	or     ebx,0xffffffff
c00033fb:	83 c4 1c             	add    esp,0x1c
c00033fe:	89 d8                	mov    eax,ebx
c0003400:	5b                   	pop    ebx
c0003401:	5e                   	pop    esi
c0003402:	5f                   	pop    edi
c0003403:	5d                   	pop    ebp
c0003404:	c3                   	ret    

c0003405 <remove_chain>:
c0003405:	55                   	push   ebp
c0003406:	57                   	push   edi
c0003407:	56                   	push   esi
c0003408:	89 d6                	mov    esi,edx
c000340a:	53                   	push   ebx
c000340b:	83 ec 0c             	sub    esp,0xc
c000340e:	83 fa 01             	cmp    edx,0x1
c0003411:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003413:	76 65                	jbe    c000347a <remove_chain+0x75>
c0003415:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003418:	76 60                	jbe    c000347a <remove_chain+0x75>
c000341a:	89 c5                	mov    ebp,eax
c000341c:	89 ca                	mov    edx,ecx
c000341e:	85 c9                	test   ecx,ecx
c0003420:	74 0e                	je     c0003430 <remove_chain+0x2b>
c0003422:	83 c9 ff             	or     ecx,0xffffffff
c0003425:	89 d8                	mov    eax,ebx
c0003427:	e8 5f f2 ff ff       	call   c000268b <put_fat>
c000342c:	85 c0                	test   eax,eax
c000342e:	75 56                	jne    c0003486 <remove_chain+0x81>
c0003430:	89 f2                	mov    edx,esi
c0003432:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003435:	e8 c7 fc ff ff       	call   c0003101 <get_fat.isra.2>
c000343a:	89 c7                	mov    edi,eax
c000343c:	85 c0                	test   eax,eax
c000343e:	75 04                	jne    c0003444 <remove_chain+0x3f>
c0003440:	31 c0                	xor    eax,eax
c0003442:	eb 42                	jmp    c0003486 <remove_chain+0x81>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	74 31                	je     c000347a <remove_chain+0x75>
c0003449:	83 f8 ff             	cmp    eax,0xffffffff
c000344c:	74 33                	je     c0003481 <remove_chain+0x7c>
c000344e:	31 c9                	xor    ecx,ecx
c0003450:	89 f2                	mov    edx,esi
c0003452:	89 d8                	mov    eax,ebx
c0003454:	e8 32 f2 ff ff       	call   c000268b <put_fat>
c0003459:	85 c0                	test   eax,eax
c000345b:	75 29                	jne    c0003486 <remove_chain+0x81>
c000345d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003460:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003463:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003466:	39 c8                	cmp    eax,ecx
c0003468:	73 08                	jae    c0003472 <remove_chain+0x6d>
c000346a:	40                   	inc    eax
c000346b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000346f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003472:	89 fe                	mov    esi,edi
c0003474:	39 fa                	cmp    edx,edi
c0003476:	77 b8                	ja     c0003430 <remove_chain+0x2b>
c0003478:	eb c6                	jmp    c0003440 <remove_chain+0x3b>
c000347a:	b8 02 00 00 00       	mov    eax,0x2
c000347f:	eb 05                	jmp    c0003486 <remove_chain+0x81>
c0003481:	b8 01 00 00 00       	mov    eax,0x1
c0003486:	83 c4 0c             	add    esp,0xc
c0003489:	5b                   	pop    ebx
c000348a:	5e                   	pop    esi
c000348b:	5f                   	pop    edi
c000348c:	5d                   	pop    ebp
c000348d:	c3                   	ret    

c000348e <dir_next>:
c000348e:	55                   	push   ebp
c000348f:	57                   	push   edi
c0003490:	56                   	push   esi
c0003491:	53                   	push   ebx
c0003492:	83 ec 1c             	sub    esp,0x1c
c0003495:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003498:	8b 28                	mov    ebp,DWORD PTR [eax]
c000349a:	83 c7 20             	add    edi,0x20
c000349d:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034a3:	76 07                	jbe    c00034ac <dir_next+0x1e>
c00034a5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034ac:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034af:	b9 04 00 00 00       	mov    ecx,0x4
c00034b4:	85 f6                	test   esi,esi
c00034b6:	0f 84 cd 00 00 00    	je     c0003589 <dir_next+0xfb>
c00034bc:	89 c3                	mov    ebx,eax
c00034be:	89 d1                	mov    ecx,edx
c00034c0:	89 f8                	mov    eax,edi
c00034c2:	25 ff 01 00 00       	and    eax,0x1ff
c00034c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034cb:	0f 85 a8 00 00 00    	jne    c0003579 <dir_next+0xeb>
c00034d1:	46                   	inc    esi
c00034d2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034d5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034d8:	85 d2                	test   edx,edx
c00034da:	75 22                	jne    c00034fe <dir_next+0x70>
c00034dc:	89 fa                	mov    edx,edi
c00034de:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034e2:	c1 ea 05             	shr    edx,0x5
c00034e5:	39 c2                	cmp    edx,eax
c00034e7:	0f 82 8c 00 00 00    	jb     c0003579 <dir_next+0xeb>
c00034ed:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00034f4:	b9 04 00 00 00       	mov    ecx,0x4
c00034f9:	e9 8b 00 00 00       	jmp    c0003589 <dir_next+0xfb>
c00034fe:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003502:	89 fe                	mov    esi,edi
c0003504:	48                   	dec    eax
c0003505:	c1 ee 09             	shr    esi,0x9
c0003508:	85 f0                	test   eax,esi
c000350a:	75 6d                	jne    c0003579 <dir_next+0xeb>
c000350c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003510:	89 e8                	mov    eax,ebp
c0003512:	e8 ea fb ff ff       	call   c0003101 <get_fat.isra.2>
c0003517:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000351b:	89 c6                	mov    esi,eax
c000351d:	83 f8 01             	cmp    eax,0x1
c0003520:	77 07                	ja     c0003529 <dir_next+0x9b>
c0003522:	b9 02 00 00 00       	mov    ecx,0x2
c0003527:	eb 60                	jmp    c0003589 <dir_next+0xfb>
c0003529:	83 f8 ff             	cmp    eax,0xffffffff
c000352c:	75 07                	jne    c0003535 <dir_next+0xa7>
c000352e:	b9 01 00 00 00       	mov    ecx,0x1
c0003533:	eb 54                	jmp    c0003589 <dir_next+0xfb>
c0003535:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003538:	77 30                	ja     c000356a <dir_next+0xdc>
c000353a:	85 c9                	test   ecx,ecx
c000353c:	74 af                	je     c00034ed <dir_next+0x5f>
c000353e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003541:	89 d8                	mov    eax,ebx
c0003543:	e8 83 fd ff ff       	call   c00032cb <create_chain>
c0003548:	b9 07 00 00 00       	mov    ecx,0x7
c000354d:	89 c6                	mov    esi,eax
c000354f:	85 c0                	test   eax,eax
c0003551:	74 36                	je     c0003589 <dir_next+0xfb>
c0003553:	83 f8 01             	cmp    eax,0x1
c0003556:	74 ca                	je     c0003522 <dir_next+0x94>
c0003558:	83 f8 ff             	cmp    eax,0xffffffff
c000355b:	74 d1                	je     c000352e <dir_next+0xa0>
c000355d:	89 c2                	mov    edx,eax
c000355f:	89 e8                	mov    eax,ebp
c0003561:	e8 75 f2 ff ff       	call   c00027db <dir_clear>
c0003566:	85 c0                	test   eax,eax
c0003568:	75 c4                	jne    c000352e <dir_next+0xa0>
c000356a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000356d:	89 f2                	mov    edx,esi
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 df e9 ff ff       	call   c0001f55 <clst2sect>
c0003576:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003579:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000357d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003580:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003584:	31 c9                	xor    ecx,ecx
c0003586:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003589:	83 c4 1c             	add    esp,0x1c
c000358c:	89 c8                	mov    eax,ecx
c000358e:	5b                   	pop    ebx
c000358f:	5e                   	pop    esi
c0003590:	5f                   	pop    edi
c0003591:	5d                   	pop    ebp
c0003592:	c3                   	ret    

c0003593 <dir_alloc>:
c0003593:	55                   	push   ebp
c0003594:	89 c5                	mov    ebp,eax
c0003596:	57                   	push   edi
c0003597:	89 d7                	mov    edi,edx
c0003599:	56                   	push   esi
c000359a:	31 d2                	xor    edx,edx
c000359c:	53                   	push   ebx
c000359d:	83 ec 0c             	sub    esp,0xc
c00035a0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035a2:	e8 5c fc ff ff       	call   c0003203 <dir_sdi>
c00035a7:	85 c0                	test   eax,eax
c00035a9:	75 37                	jne    c00035e2 <dir_alloc+0x4f>
c00035ab:	31 db                	xor    ebx,ebx
c00035ad:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035b0:	89 f0                	mov    eax,esi
c00035b2:	e8 7e ec ff ff       	call   c0002235 <move_window>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 27                	jne    c00035e2 <dir_alloc+0x4f>
c00035bb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035be:	8a 12                	mov    dl,BYTE PTR [edx]
c00035c0:	84 d2                	test   dl,dl
c00035c2:	74 05                	je     c00035c9 <dir_alloc+0x36>
c00035c4:	80 fa e5             	cmp    dl,0xe5
c00035c7:	75 07                	jne    c00035d0 <dir_alloc+0x3d>
c00035c9:	43                   	inc    ebx
c00035ca:	39 fb                	cmp    ebx,edi
c00035cc:	75 04                	jne    c00035d2 <dir_alloc+0x3f>
c00035ce:	eb 1c                	jmp    c00035ec <dir_alloc+0x59>
c00035d0:	31 db                	xor    ebx,ebx
c00035d2:	ba 01 00 00 00       	mov    edx,0x1
c00035d7:	89 e8                	mov    eax,ebp
c00035d9:	e8 b0 fe ff ff       	call   c000348e <dir_next>
c00035de:	85 c0                	test   eax,eax
c00035e0:	74 cb                	je     c00035ad <dir_alloc+0x1a>
c00035e2:	83 f8 04             	cmp    eax,0x4
c00035e5:	75 05                	jne    c00035ec <dir_alloc+0x59>
c00035e7:	b8 07 00 00 00       	mov    eax,0x7
c00035ec:	83 c4 0c             	add    esp,0xc
c00035ef:	5b                   	pop    ebx
c00035f0:	5e                   	pop    esi
c00035f1:	5f                   	pop    edi
c00035f2:	5d                   	pop    ebp
c00035f3:	c3                   	ret    

c00035f4 <dir_read>:
c00035f4:	55                   	push   ebp
c00035f5:	57                   	push   edi
c00035f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00035fb:	56                   	push   esi
c00035fc:	be 04 00 00 00       	mov    esi,0x4
c0003601:	53                   	push   ebx
c0003602:	89 c3                	mov    ebx,eax
c0003604:	83 ec 1c             	sub    esp,0x1c
c0003607:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000360b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000360d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003612:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003615:	85 d2                	test   edx,edx
c0003617:	0f 84 d8 00 00 00    	je     c00036f5 <dir_read+0x101>
c000361d:	89 e8                	mov    eax,ebp
c000361f:	e8 11 ec ff ff       	call   c0002235 <move_window>
c0003624:	89 c6                	mov    esi,eax
c0003626:	85 c0                	test   eax,eax
c0003628:	0f 85 d2 00 00 00    	jne    c0003700 <dir_read+0x10c>
c000362e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003631:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003633:	84 c9                	test   cl,cl
c0003635:	0f 84 c0 00 00 00    	je     c00036fb <dir_read+0x107>
c000363b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000363e:	83 e0 3f             	and    eax,0x3f
c0003641:	80 f9 2e             	cmp    cl,0x2e
c0003644:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003648:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000364b:	0f 84 8a 00 00 00    	je     c00036db <dir_read+0xe7>
c0003651:	80 f9 e5             	cmp    cl,0xe5
c0003654:	0f 84 81 00 00 00    	je     c00036db <dir_read+0xe7>
c000365a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000365e:	83 e0 1f             	and    eax,0x1f
c0003661:	83 f8 08             	cmp    eax,0x8
c0003664:	0f 94 c0             	sete   al
c0003667:	0f b6 c0             	movzx  eax,al
c000366a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000366e:	75 6b                	jne    c00036db <dir_read+0xe7>
c0003670:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003675:	75 44                	jne    c00036bb <dir_read+0xc7>
c0003677:	f6 c1 40             	test   cl,0x40
c000367a:	74 12                	je     c000368e <dir_read+0x9a>
c000367c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000367f:	83 e1 bf             	and    ecx,0xffffffbf
c0003682:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003686:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003689:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000368c:	eb 06                	jmp    c0003694 <dir_read+0xa0>
c000368e:	89 f8                	mov    eax,edi
c0003690:	38 c8                	cmp    al,cl
c0003692:	75 47                	jne    c00036db <dir_read+0xe7>
c0003694:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003698:	bf ff ff ff ff       	mov    edi,0xffffffff
c000369d:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036a0:	75 3e                	jne    c00036e0 <dir_read+0xec>
c00036a2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036a9:	e8 c4 e8 ff ff       	call   c0001f72 <pick_lfn>
c00036ae:	85 c0                	test   eax,eax
c00036b0:	74 2e                	je     c00036e0 <dir_read+0xec>
c00036b2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036b6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036b9:	eb 25                	jmp    c00036e0 <dir_read+0xec>
c00036bb:	89 f8                	mov    eax,edi
c00036bd:	84 c0                	test   al,al
c00036bf:	75 11                	jne    c00036d2 <dir_read+0xde>
c00036c1:	89 d0                	mov    eax,edx
c00036c3:	e8 64 ea ff ff       	call   c000212c <sum_sfn>
c00036c8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036cc:	75 04                	jne    c00036d2 <dir_read+0xde>
c00036ce:	31 f6                	xor    esi,esi
c00036d0:	eb 35                	jmp    c0003707 <dir_read+0x113>
c00036d2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036d9:	eb 2c                	jmp    c0003707 <dir_read+0x113>
c00036db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036e0:	31 d2                	xor    edx,edx
c00036e2:	89 d8                	mov    eax,ebx
c00036e4:	e8 a5 fd ff ff       	call   c000348e <dir_next>
c00036e9:	89 c6                	mov    esi,eax
c00036eb:	85 c0                	test   eax,eax
c00036ed:	0f 84 1f ff ff ff    	je     c0003612 <dir_read+0x1e>
c00036f3:	eb 0b                	jmp    c0003700 <dir_read+0x10c>
c00036f5:	85 f6                	test   esi,esi
c00036f7:	74 d5                	je     c00036ce <dir_read+0xda>
c00036f9:	eb 05                	jmp    c0003700 <dir_read+0x10c>
c00036fb:	be 04 00 00 00       	mov    esi,0x4
c0003700:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003707:	83 c4 1c             	add    esp,0x1c
c000370a:	89 f0                	mov    eax,esi
c000370c:	5b                   	pop    ebx
c000370d:	5e                   	pop    esi
c000370e:	5f                   	pop    edi
c000370f:	5d                   	pop    ebp
c0003710:	c3                   	ret    

c0003711 <dir_remove>:
c0003711:	57                   	push   edi
c0003712:	56                   	push   esi
c0003713:	53                   	push   ebx
c0003714:	89 c3                	mov    ebx,eax
c0003716:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003719:	8b 30                	mov    esi,DWORD PTR [eax]
c000371b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000371e:	83 fa ff             	cmp    edx,0xffffffff
c0003721:	74 09                	je     c000372c <dir_remove+0x1b>
c0003723:	e8 db fa ff ff       	call   c0003203 <dir_sdi>
c0003728:	85 c0                	test   eax,eax
c000372a:	75 34                	jne    c0003760 <dir_remove+0x4f>
c000372c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000372f:	89 f0                	mov    eax,esi
c0003731:	e8 ff ea ff ff       	call   c0002235 <move_window>
c0003736:	85 c0                	test   eax,eax
c0003738:	75 1c                	jne    c0003756 <dir_remove+0x45>
c000373a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000373d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003740:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003744:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003747:	73 17                	jae    c0003760 <dir_remove+0x4f>
c0003749:	31 d2                	xor    edx,edx
c000374b:	89 d8                	mov    eax,ebx
c000374d:	e8 3c fd ff ff       	call   c000348e <dir_next>
c0003752:	85 c0                	test   eax,eax
c0003754:	74 d6                	je     c000372c <dir_remove+0x1b>
c0003756:	83 f8 04             	cmp    eax,0x4
c0003759:	75 05                	jne    c0003760 <dir_remove+0x4f>
c000375b:	b8 02 00 00 00       	mov    eax,0x2
c0003760:	5b                   	pop    ebx
c0003761:	5e                   	pop    esi
c0003762:	5f                   	pop    edi
c0003763:	c3                   	ret    

c0003764 <dir_find>:
c0003764:	55                   	push   ebp
c0003765:	31 d2                	xor    edx,edx
c0003767:	57                   	push   edi
c0003768:	56                   	push   esi
c0003769:	53                   	push   ebx
c000376a:	89 c3                	mov    ebx,eax
c000376c:	83 ec 1c             	sub    esp,0x1c
c000376f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003771:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003775:	89 d8                	mov    eax,ebx
c0003777:	e8 87 fa ff ff       	call   c0003203 <dir_sdi>
c000377c:	89 c6                	mov    esi,eax
c000377e:	85 c0                	test   eax,eax
c0003780:	0f 85 02 01 00 00    	jne    c0003888 <dir_find+0x124>
c0003786:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000378d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c0003792:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003797:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000379a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000379e:	e8 92 ea ff ff       	call   c0002235 <move_window>
c00037a3:	89 c6                	mov    esi,eax
c00037a5:	85 c0                	test   eax,eax
c00037a7:	0f 85 db 00 00 00    	jne    c0003888 <dir_find+0x124>
c00037ad:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037b0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037b3:	84 c9                	test   cl,cl
c00037b5:	0f 84 c8 00 00 00    	je     c0003883 <dir_find+0x11f>
c00037bb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037be:	88 d0                	mov    al,dl
c00037c0:	83 e0 3f             	and    eax,0x3f
c00037c3:	80 f9 e5             	cmp    cl,0xe5
c00037c6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037c9:	0f 84 93 00 00 00    	je     c0003862 <dir_find+0xfe>
c00037cf:	80 e2 08             	and    dl,0x8
c00037d2:	74 0a                	je     c00037de <dir_find+0x7a>
c00037d4:	3c 0f                	cmp    al,0xf
c00037d6:	0f 85 86 00 00 00    	jne    c0003862 <dir_find+0xfe>
c00037dc:	eb 04                	jmp    c00037e2 <dir_find+0x7e>
c00037de:	3c 0f                	cmp    al,0xf
c00037e0:	75 54                	jne    c0003836 <dir_find+0xd2>
c00037e2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037e6:	0f 85 82 00 00 00    	jne    c000386e <dir_find+0x10a>
c00037ec:	f6 c1 40             	test   cl,0x40
c00037ef:	74 12                	je     c0003803 <dir_find+0x9f>
c00037f1:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c00037f4:	83 e1 bf             	and    ecx,0xffffffbf
c00037f7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00037fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037fe:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003801:	eb 06                	jmp    c0003809 <dir_find+0xa5>
c0003803:	89 f8                	mov    eax,edi
c0003805:	38 c8                	cmp    al,cl
c0003807:	75 60                	jne    c0003869 <dir_find+0x105>
c0003809:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000380d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003812:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003815:	75 57                	jne    c000386e <dir_find+0x10a>
c0003817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000381b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000381f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003822:	89 ea                	mov    edx,ebp
c0003824:	e8 89 f3 ff ff       	call   c0002bb2 <cmp_lfn>
c0003829:	85 c0                	test   eax,eax
c000382b:	74 41                	je     c000386e <dir_find+0x10a>
c000382d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003831:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003834:	eb 38                	jmp    c000386e <dir_find+0x10a>
c0003836:	89 f8                	mov    eax,edi
c0003838:	84 c0                	test   al,al
c000383a:	75 0d                	jne    c0003849 <dir_find+0xe5>
c000383c:	89 e8                	mov    eax,ebp
c000383e:	e8 e9 e8 ff ff       	call   c000212c <sum_sfn>
c0003843:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003847:	74 3f                	je     c0003888 <dir_find+0x124>
c0003849:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000384d:	75 13                	jne    c0003862 <dir_find+0xfe>
c000384f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003852:	b9 0b 00 00 00       	mov    ecx,0xb
c0003857:	89 e8                	mov    eax,ebp
c0003859:	e8 fd e4 ff ff       	call   c0001d5b <mem_cmp>
c000385e:	85 c0                	test   eax,eax
c0003860:	74 26                	je     c0003888 <dir_find+0x124>
c0003862:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003869:	bf ff ff ff ff       	mov    edi,0xffffffff
c000386e:	31 d2                	xor    edx,edx
c0003870:	89 d8                	mov    eax,ebx
c0003872:	e8 17 fc ff ff       	call   c000348e <dir_next>
c0003877:	89 c6                	mov    esi,eax
c0003879:	85 c0                	test   eax,eax
c000387b:	0f 84 16 ff ff ff    	je     c0003797 <dir_find+0x33>
c0003881:	eb 05                	jmp    c0003888 <dir_find+0x124>
c0003883:	be 04 00 00 00       	mov    esi,0x4
c0003888:	83 c4 1c             	add    esp,0x1c
c000388b:	89 f0                	mov    eax,esi
c000388d:	5b                   	pop    ebx
c000388e:	5e                   	pop    esi
c000388f:	5f                   	pop    edi
c0003890:	5d                   	pop    ebp
c0003891:	c3                   	ret    

c0003892 <follow_path>:
c0003892:	56                   	push   esi
c0003893:	53                   	push   ebx
c0003894:	89 c3                	mov    ebx,eax
c0003896:	83 ec 14             	sub    esp,0x14
c0003899:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000389d:	8b 30                	mov    esi,DWORD PTR [eax]
c000389f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038a3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038a5:	80 fa 5c             	cmp    dl,0x5c
c00038a8:	75 07                	jne    c00038b1 <follow_path+0x1f>
c00038aa:	40                   	inc    eax
c00038ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038af:	eb ee                	jmp    c000389f <follow_path+0xd>
c00038b1:	80 fa 2f             	cmp    dl,0x2f
c00038b4:	74 f4                	je     c00038aa <follow_path+0x18>
c00038b6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038bd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038c0:	77 3e                	ja     c0003900 <follow_path+0x6e>
c00038c2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038c6:	31 d2                	xor    edx,edx
c00038c8:	89 d8                	mov    eax,ebx
c00038ca:	e8 34 f9 ff ff       	call   c0003203 <dir_sdi>
c00038cf:	eb 4f                	jmp    c0003920 <follow_path+0x8e>
c00038d1:	89 d8                	mov    eax,ebx
c00038d3:	e8 8c fe ff ff       	call   c0003764 <dir_find>
c00038d8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038db:	85 c0                	test   eax,eax
c00038dd:	75 32                	jne    c0003911 <follow_path+0x7f>
c00038df:	80 e2 04             	and    dl,0x4
c00038e2:	75 3c                	jne    c0003920 <follow_path+0x8e>
c00038e4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038e8:	74 31                	je     c000391b <follow_path+0x89>
c00038ea:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038ed:	25 ff 01 00 00       	and    eax,0x1ff
c00038f2:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c00038f6:	8a 06                	mov    al,BYTE PTR [esi]
c00038f8:	e8 b3 f7 ff ff       	call   c00030b0 <ld_clust.isra.0>
c00038fd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003900:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003904:	89 d8                	mov    eax,ebx
c0003906:	e8 cb ef ff ff       	call   c00028d6 <create_name>
c000390b:	85 c0                	test   eax,eax
c000390d:	74 c2                	je     c00038d1 <follow_path+0x3f>
c000390f:	eb 0f                	jmp    c0003920 <follow_path+0x8e>
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	75 0a                	jne    c0003920 <follow_path+0x8e>
c0003916:	80 e2 04             	and    dl,0x4
c0003919:	75 05                	jne    c0003920 <follow_path+0x8e>
c000391b:	b8 05 00 00 00       	mov    eax,0x5
c0003920:	83 c4 14             	add    esp,0x14
c0003923:	5b                   	pop    ebx
c0003924:	5e                   	pop    esi
c0003925:	c3                   	ret    

c0003926 <dir_register>:
c0003926:	55                   	push   ebp
c0003927:	57                   	push   edi
c0003928:	56                   	push   esi
c0003929:	be 06 00 00 00       	mov    esi,0x6
c000392e:	53                   	push   ebx
c000392f:	83 ec 2c             	sub    esp,0x2c
c0003932:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003936:	0f 85 65 01 00 00    	jne    c0003aa1 <dir_register+0x17b>
c000393c:	8b 38                	mov    edi,DWORD PTR [eax]
c000393e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003946:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003949:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000394d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003952:	74 06                	je     c000395a <dir_register+0x34>
c0003954:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003958:	eb ef                	jmp    c0003949 <dir_register+0x23>
c000395a:	89 c3                	mov    ebx,eax
c000395c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003961:	8d 40 20             	lea    eax,[eax+0x20]
c0003964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003968:	89 c2                	mov    edx,eax
c000396a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000396e:	e8 c8 e3 ff ff       	call   c0001d3b <mem_cpy>
c0003973:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003978:	74 48                	je     c00039c2 <dir_register+0x9c>
c000397a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000397e:	bd 01 00 00 00       	mov    ebp,0x1
c0003983:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003986:	55                   	push   ebp
c0003987:	8d 54 24 18          	lea    edx,[esp+0x18]
c000398b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000398f:	e8 dc e6 ff ff       	call   c0002070 <gen_numname>
c0003994:	58                   	pop    eax
c0003995:	89 d8                	mov    eax,ebx
c0003997:	e8 c8 fd ff ff       	call   c0003764 <dir_find>
c000399c:	89 c6                	mov    esi,eax
c000399e:	85 c0                	test   eax,eax
c00039a0:	75 10                	jne    c00039b2 <dir_register+0x8c>
c00039a2:	45                   	inc    ebp
c00039a3:	83 fd 64             	cmp    ebp,0x64
c00039a6:	75 db                	jne    c0003983 <dir_register+0x5d>
c00039a8:	be 07 00 00 00       	mov    esi,0x7
c00039ad:	e9 ef 00 00 00       	jmp    c0003aa1 <dir_register+0x17b>
c00039b2:	83 f8 04             	cmp    eax,0x4
c00039b5:	0f 85 e6 00 00 00    	jne    c0003aa1 <dir_register+0x17b>
c00039bb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039bf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039c2:	bd 01 00 00 00       	mov    ebp,0x1
c00039c7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039cc:	74 13                	je     c00039e1 <dir_register+0xbb>
c00039ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039d2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039d7:	83 c0 0c             	add    eax,0xc
c00039da:	31 d2                	xor    edx,edx
c00039dc:	f7 f1                	div    ecx
c00039de:	8d 68 01             	lea    ebp,[eax+0x1]
c00039e1:	89 ea                	mov    edx,ebp
c00039e3:	89 d8                	mov    eax,ebx
c00039e5:	e8 a9 fb ff ff       	call   c0003593 <dir_alloc>
c00039ea:	89 c6                	mov    esi,eax
c00039ec:	85 c0                	test   eax,eax
c00039ee:	0f 85 ad 00 00 00    	jne    c0003aa1 <dir_register+0x17b>
c00039f4:	4d                   	dec    ebp
c00039f5:	74 6a                	je     c0003a61 <dir_register+0x13b>
c00039f7:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00039fa:	89 e8                	mov    eax,ebp
c00039fc:	c1 e0 05             	shl    eax,0x5
c00039ff:	29 c2                	sub    edx,eax
c0003a01:	89 d8                	mov    eax,ebx
c0003a03:	e8 fb f7 ff ff       	call   c0003203 <dir_sdi>
c0003a08:	89 c6                	mov    esi,eax
c0003a0a:	85 c0                	test   eax,eax
c0003a0c:	0f 85 8f 00 00 00    	jne    c0003aa1 <dir_register+0x17b>
c0003a12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a16:	e8 11 e7 ff ff       	call   c000212c <sum_sfn>
c0003a1b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a1f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a22:	89 f8                	mov    eax,edi
c0003a24:	e8 0c e8 ff ff       	call   c0002235 <move_window>
c0003a29:	89 c6                	mov    esi,eax
c0003a2b:	85 c0                	test   eax,eax
c0003a2d:	75 72                	jne    c0003aa1 <dir_register+0x17b>
c0003a2f:	83 ec 0c             	sub    esp,0xc
c0003a32:	89 e8                	mov    eax,ebp
c0003a34:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a39:	0f b6 c8             	movzx  ecx,al
c0003a3c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a3f:	52                   	push   edx
c0003a40:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a43:	e8 a4 e5 ff ff       	call   c0001fec <put_lfn>
c0003a48:	31 d2                	xor    edx,edx
c0003a4a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 39 fa ff ff       	call   c000348e <dir_next>
c0003a55:	83 c4 10             	add    esp,0x10
c0003a58:	89 c6                	mov    esi,eax
c0003a5a:	85 c0                	test   eax,eax
c0003a5c:	75 43                	jne    c0003aa1 <dir_register+0x17b>
c0003a5e:	4d                   	dec    ebp
c0003a5f:	75 be                	jne    c0003a1f <dir_register+0xf9>
c0003a61:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a64:	89 f8                	mov    eax,edi
c0003a66:	e8 ca e7 ff ff       	call   c0002235 <move_window>
c0003a6b:	89 c6                	mov    esi,eax
c0003a6d:	85 c0                	test   eax,eax
c0003a6f:	75 30                	jne    c0003aa1 <dir_register+0x17b>
c0003a71:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a74:	b9 20 00 00 00       	mov    ecx,0x20
c0003a79:	31 d2                	xor    edx,edx
c0003a7b:	e8 d0 e2 ff ff       	call   c0001d50 <mem_set>
c0003a80:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a83:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a87:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a8c:	e8 aa e2 ff ff       	call   c0001d3b <mem_cpy>
c0003a91:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003a94:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a97:	83 e0 18             	and    eax,0x18
c0003a9a:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003a9d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003aa1:	83 c4 2c             	add    esp,0x2c
c0003aa4:	89 f0                	mov    eax,esi
c0003aa6:	5b                   	pop    ebx
c0003aa7:	5e                   	pop    esi
c0003aa8:	5f                   	pop    edi
c0003aa9:	5d                   	pop    ebp
c0003aaa:	c3                   	ret    

c0003aab <f_mount>:
c0003aab:	53                   	push   ebx
c0003aac:	83 ec 18             	sub    esp,0x18
c0003aaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ab3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ab7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003abf:	e8 7a e6 ff ff       	call   c000213e <get_ldnumber>
c0003ac4:	89 c2                	mov    edx,eax
c0003ac6:	b8 0b 00 00 00       	mov    eax,0xb
c0003acb:	85 d2                	test   edx,edx
c0003acd:	78 39                	js     c0003b08 <f_mount+0x5d>
c0003acf:	8b 04 95 a0 34 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcb60]
c0003ad6:	85 c0                	test   eax,eax
c0003ad8:	74 03                	je     c0003add <f_mount+0x32>
c0003ada:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003add:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003ae1:	85 c0                	test   eax,eax
c0003ae3:	74 03                	je     c0003ae8 <f_mount+0x3d>
c0003ae5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003aec:	89 04 95 a0 34 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcb60],eax
c0003af3:	31 c0                	xor    eax,eax
c0003af5:	84 db                	test   bl,bl
c0003af7:	74 0f                	je     c0003b08 <f_mount+0x5d>
c0003af9:	31 c9                	xor    ecx,ecx
c0003afb:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003aff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b03:	e8 80 e8 ff ff       	call   c0002388 <mount_volume>
c0003b08:	83 c4 18             	add    esp,0x18
c0003b0b:	5b                   	pop    ebx
c0003b0c:	c3                   	ret    

c0003b0d <f_open>:
c0003b0d:	55                   	push   ebp
c0003b0e:	b8 09 00 00 00       	mov    eax,0x9
c0003b13:	57                   	push   edi
c0003b14:	56                   	push   esi
c0003b15:	53                   	push   ebx
c0003b16:	83 ec 5c             	sub    esp,0x5c
c0003b19:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b1d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b21:	85 db                	test   ebx,ebx
c0003b23:	0f 84 a7 02 00 00    	je     c0003dd0 <f_open+0x2c3>
c0003b29:	89 fe                	mov    esi,edi
c0003b2b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b2f:	83 e6 3f             	and    esi,0x3f
c0003b32:	89 f0                	mov    eax,esi
c0003b34:	0f b6 c8             	movzx  ecx,al
c0003b37:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b3b:	e8 48 e8 ff ff       	call   c0002388 <mount_volume>
c0003b40:	85 c0                	test   eax,eax
c0003b42:	0f 85 82 02 00 00    	jne    c0003dca <f_open+0x2bd>
c0003b48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b4c:	83 ec 0c             	sub    esp,0xc
c0003b4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b53:	68 00 02 00 00       	push   0x200
c0003b58:	e8 ff 1e 00 00       	call   c0005a5c <ff_memalloc>
c0003b5d:	83 c4 10             	add    esp,0x10
c0003b60:	89 c5                	mov    ebp,eax
c0003b62:	b8 11 00 00 00       	mov    eax,0x11
c0003b67:	85 ed                	test   ebp,ebp
c0003b69:	0f 84 61 02 00 00    	je     c0003dd0 <f_open+0x2c3>
c0003b6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b73:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b77:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b7a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b7e:	e8 0f fd ff ff       	call   c0003892 <follow_path>
c0003b83:	85 c0                	test   eax,eax
c0003b85:	75 0c                	jne    c0003b93 <f_open+0x86>
c0003b87:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b8c:	79 05                	jns    c0003b93 <f_open+0x86>
c0003b8e:	b8 06 00 00 00       	mov    eax,0x6
c0003b93:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003b99:	0f 84 de 00 00 00    	je     c0003c7d <f_open+0x170>
c0003b9f:	85 c0                	test   eax,eax
c0003ba1:	74 1e                	je     c0003bc1 <f_open+0xb4>
c0003ba3:	83 f8 04             	cmp    eax,0x4
c0003ba6:	0f 85 06 02 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003bac:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bb0:	83 ce 08             	or     esi,0x8
c0003bb3:	e8 6e fd ff ff       	call   c0003926 <dir_register>
c0003bb8:	85 c0                	test   eax,eax
c0003bba:	74 2f                	je     c0003beb <f_open+0xde>
c0003bbc:	e9 f1 01 00 00       	jmp    c0003db2 <f_open+0x2a5>
c0003bc1:	b8 07 00 00 00       	mov    eax,0x7
c0003bc6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bcb:	0f 85 e1 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003bd1:	b8 08 00 00 00       	mov    eax,0x8
c0003bd6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bdc:	0f 85 d0 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003be2:	83 e7 08             	and    edi,0x8
c0003be5:	0f 84 bf 00 00 00    	je     c0003caa <f_open+0x19d>
c0003beb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003bf3:	89 ca                	mov    edx,ecx
c0003bf5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003bf9:	8a 00                	mov    al,BYTE PTR [eax]
c0003bfb:	e8 b0 f4 ff ff       	call   c00030b0 <ld_clust.isra.0>
c0003c00:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c04:	89 c7                	mov    edi,eax
c0003c06:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c0b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c0e:	e8 25 e1 ff ff       	call   c0001d38 <st_dword>
c0003c13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c17:	31 c9                	xor    ecx,ecx
c0003c19:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c21:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c25:	e8 af f4 ff ff       	call   c00030d9 <st_clust.isra.1>
c0003c2a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c2e:	31 d2                	xor    edx,edx
c0003c30:	83 c0 1c             	add    eax,0x1c
c0003c33:	e8 00 e1 ff ff       	call   c0001d38 <st_dword>
c0003c38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c3c:	85 ff                	test   edi,edi
c0003c3e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c42:	74 66                	je     c0003caa <f_open+0x19d>
c0003c44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c48:	31 c9                	xor    ecx,ecx
c0003c4a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c4d:	89 fa                	mov    edx,edi
c0003c4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c53:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c57:	e8 a9 f7 ff ff       	call   c0003405 <remove_chain>
c0003c5c:	85 c0                	test   eax,eax
c0003c5e:	0f 85 4e 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003c64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c68:	4f                   	dec    edi
c0003c69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c6d:	e8 c3 e5 ff ff       	call   c0002235 <move_window>
c0003c72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c76:	85 c0                	test   eax,eax
c0003c78:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c7b:	eb 27                	jmp    c0003ca4 <f_open+0x197>
c0003c7d:	85 c0                	test   eax,eax
c0003c7f:	0f 85 2d 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003c85:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c89:	b8 04 00 00 00       	mov    eax,0x4
c0003c8e:	f6 c2 10             	test   dl,0x10
c0003c91:	0f 85 1b 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003c97:	83 e7 02             	and    edi,0x2
c0003c9a:	74 0e                	je     c0003caa <f_open+0x19d>
c0003c9c:	b8 07 00 00 00       	mov    eax,0x7
c0003ca1:	80 e2 01             	and    dl,0x1
c0003ca4:	0f 85 08 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003caa:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cb0:	74 03                	je     c0003cb5 <f_open+0x1a8>
c0003cb2:	83 ce 40             	or     esi,0x40
c0003cb5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cb9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003cbd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cc0:	89 fa                	mov    edx,edi
c0003cc2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cc6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cc9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ccc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cce:	e8 dd f3 ff ff       	call   c00030b0 <ld_clust.isra.0>
c0003cd3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003cd6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003cd9:	e8 3e e0 ff ff       	call   c0001d1c <ld_dword>
c0003cde:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ce2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003ce5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003ce7:	31 d2                	xor    edx,edx
c0003ce9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003ced:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003cf1:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003cf5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003cfc:	89 f0                	mov    eax,esi
c0003cfe:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d05:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d08:	b9 00 02 00 00       	mov    ecx,0x200
c0003d0d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d14:	e8 37 e0 ff ff       	call   c0001d50 <mem_set>
c0003d19:	83 e6 20             	and    esi,0x20
c0003d1c:	75 07                	jne    c0003d25 <f_open+0x218>
c0003d1e:	31 c0                	xor    eax,eax
c0003d20:	e9 8d 00 00 00       	jmp    c0003db2 <f_open+0x2a5>
c0003d25:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d28:	85 ff                	test   edi,edi
c0003d2a:	74 f2                	je     c0003d1e <f_open+0x211>
c0003d2c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d33:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d36:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d3a:	c1 e6 09             	shl    esi,0x9
c0003d3d:	39 fe                	cmp    esi,edi
c0003d3f:	73 1c                	jae    c0003d5d <f_open+0x250>
c0003d41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d43:	29 f7                	sub    edi,esi
c0003d45:	e8 b7 f3 ff ff       	call   c0003101 <get_fat.isra.2>
c0003d4a:	89 c2                	mov    edx,eax
c0003d4c:	83 f8 01             	cmp    eax,0x1
c0003d4f:	76 10                	jbe    c0003d61 <f_open+0x254>
c0003d51:	83 f8 ff             	cmp    eax,0xffffffff
c0003d54:	75 e7                	jne    c0003d3d <f_open+0x230>
c0003d56:	b8 01 00 00 00       	mov    eax,0x1
c0003d5b:	eb 09                	jmp    c0003d66 <f_open+0x259>
c0003d5d:	31 c0                	xor    eax,eax
c0003d5f:	eb 05                	jmp    c0003d66 <f_open+0x259>
c0003d61:	b8 02 00 00 00       	mov    eax,0x2
c0003d66:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d69:	85 c0                	test   eax,eax
c0003d6b:	75 45                	jne    c0003db2 <f_open+0x2a5>
c0003d6d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d73:	74 a9                	je     c0003d1e <f_open+0x211>
c0003d75:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d79:	89 f0                	mov    eax,esi
c0003d7b:	e8 d5 e1 ff ff       	call   c0001f55 <clst2sect>
c0003d80:	89 c2                	mov    edx,eax
c0003d82:	b8 02 00 00 00       	mov    eax,0x2
c0003d87:	85 d2                	test   edx,edx
c0003d89:	74 27                	je     c0003db2 <f_open+0x2a5>
c0003d8b:	89 f9                	mov    ecx,edi
c0003d8d:	c1 e9 09             	shr    ecx,0x9
c0003d90:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003d93:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003d96:	6a 01                	push   0x1
c0003d98:	50                   	push   eax
c0003d99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003d9d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003da1:	50                   	push   eax
c0003da2:	e8 1d df ff ff       	call   c0001cc4 <disk_read>
c0003da7:	83 c4 10             	add    esp,0x10
c0003daa:	85 c0                	test   eax,eax
c0003dac:	0f 95 c0             	setne  al
c0003daf:	0f b6 c0             	movzx  eax,al
c0003db2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003db6:	83 ec 0c             	sub    esp,0xc
c0003db9:	55                   	push   ebp
c0003dba:	e8 b5 1c 00 00       	call   c0005a74 <ff_memfree>
c0003dbf:	83 c4 10             	add    esp,0x10
c0003dc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dc6:	85 c0                	test   eax,eax
c0003dc8:	74 06                	je     c0003dd0 <f_open+0x2c3>
c0003dca:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003dd0:	83 c4 5c             	add    esp,0x5c
c0003dd3:	5b                   	pop    ebx
c0003dd4:	5e                   	pop    esi
c0003dd5:	5f                   	pop    edi
c0003dd6:	5d                   	pop    ebp
c0003dd7:	c3                   	ret    

c0003dd8 <f_read>:
c0003dd8:	55                   	push   ebp
c0003dd9:	57                   	push   edi
c0003dda:	56                   	push   esi
c0003ddb:	53                   	push   ebx
c0003ddc:	83 ec 2c             	sub    esp,0x2c
c0003ddf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003de3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003de7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ded:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003df1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003df5:	89 d8                	mov    eax,ebx
c0003df7:	e8 8f e3 ff ff       	call   c000218b <validate>
c0003dfc:	89 c5                	mov    ebp,eax
c0003dfe:	85 c0                	test   eax,eax
c0003e00:	0f 85 c7 01 00 00    	jne    c0003fcd <f_read+0x1f5>
c0003e06:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e0a:	85 ed                	test   ebp,ebp
c0003e0c:	0f 85 bb 01 00 00    	jne    c0003fcd <f_read+0x1f5>
c0003e12:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e16:	0f 84 ac 01 00 00    	je     c0003fc8 <f_read+0x1f0>
c0003e1c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e1f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e22:	89 c7                	mov    edi,eax
c0003e24:	39 f0                	cmp    eax,esi
c0003e26:	0f 86 ad 00 00 00    	jbe    c0003ed9 <f_read+0x101>
c0003e2c:	89 f7                	mov    edi,esi
c0003e2e:	e9 a6 00 00 00       	jmp    c0003ed9 <f_read+0x101>
c0003e33:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e36:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e3c:	0f 85 5b 01 00 00    	jne    c0003f9d <f_read+0x1c5>
c0003e42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e46:	89 d1                	mov    ecx,edx
c0003e48:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e4c:	c1 e9 09             	shr    ecx,0x9
c0003e4f:	48                   	dec    eax
c0003e50:	21 c8                	and    eax,ecx
c0003e52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e56:	0f 84 8a 00 00 00    	je     c0003ee6 <f_read+0x10e>
c0003e5c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e60:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e63:	89 c8                	mov    eax,ecx
c0003e65:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e69:	e8 e7 e0 ff ff       	call   c0001f55 <clst2sect>
c0003e6e:	85 c0                	test   eax,eax
c0003e70:	0f 84 88 00 00 00    	je     c0003efe <f_read+0x126>
c0003e76:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e7a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e82:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e88:	0f 86 bd 00 00 00    	jbe    c0003f4b <f_read+0x173>
c0003e8e:	89 fe                	mov    esi,edi
c0003e90:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003e94:	c1 ee 09             	shr    esi,0x9
c0003e97:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e9b:	01 f2                	add    edx,esi
c0003e9d:	39 c2                	cmp    edx,eax
c0003e9f:	76 06                	jbe    c0003ea7 <f_read+0xcf>
c0003ea1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ea5:	89 c6                	mov    esi,eax
c0003ea7:	56                   	push   esi
c0003ea8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003eac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003eb0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003eb4:	50                   	push   eax
c0003eb5:	e8 0a de ff ff       	call   c0001cc4 <disk_read>
c0003eba:	83 c4 10             	add    esp,0x10
c0003ebd:	85 c0                	test   eax,eax
c0003ebf:	75 50                	jne    c0003f11 <f_read+0x139>
c0003ec1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ec5:	78 60                	js     c0003f27 <f_read+0x14f>
c0003ec7:	c1 e6 09             	shl    esi,0x9
c0003eca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ece:	29 f7                	sub    edi,esi
c0003ed0:	01 30                	add    DWORD PTR [eax],esi
c0003ed2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ed6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ed9:	85 ff                	test   edi,edi
c0003edb:	0f 85 52 ff ff ff    	jne    c0003e33 <f_read+0x5b>
c0003ee1:	e9 e7 00 00 00       	jmp    c0003fcd <f_read+0x1f5>
c0003ee6:	85 d2                	test   edx,edx
c0003ee8:	75 05                	jne    c0003eef <f_read+0x117>
c0003eea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003eed:	eb 0a                	jmp    c0003ef9 <f_read+0x121>
c0003eef:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ef2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ef4:	e8 08 f2 ff ff       	call   c0003101 <get_fat.isra.2>
c0003ef9:	83 f8 01             	cmp    eax,0x1
c0003efc:	77 0e                	ja     c0003f0c <f_read+0x134>
c0003efe:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f02:	bd 02 00 00 00       	mov    ebp,0x2
c0003f07:	e9 c1 00 00 00       	jmp    c0003fcd <f_read+0x1f5>
c0003f0c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f0f:	75 0e                	jne    c0003f1f <f_read+0x147>
c0003f11:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f15:	bd 01 00 00 00       	mov    ebp,0x1
c0003f1a:	e9 ae 00 00 00       	jmp    c0003fcd <f_read+0x1f5>
c0003f1f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f22:	e9 35 ff ff ff       	jmp    c0003e5c <f_read+0x84>
c0003f27:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f2a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f2e:	39 f0                	cmp    eax,esi
c0003f30:	73 95                	jae    c0003ec7 <f_read+0xef>
c0003f32:	c1 e0 09             	shl    eax,0x9
c0003f35:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f38:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f3c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f41:	e8 f5 dd ff ff       	call   c0001d3b <mem_cpy>
c0003f46:	e9 7c ff ff ff       	jmp    c0003ec7 <f_read+0xef>
c0003f4b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f4e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f52:	74 42                	je     c0003f96 <f_read+0x1be>
c0003f54:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f57:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f5b:	79 19                	jns    c0003f76 <f_read+0x19e>
c0003f5d:	6a 01                	push   0x1
c0003f5f:	50                   	push   eax
c0003f60:	56                   	push   esi
c0003f61:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f65:	50                   	push   eax
c0003f66:	e8 6f dd ff ff       	call   c0001cda <disk_write>
c0003f6b:	83 c4 10             	add    esp,0x10
c0003f6e:	85 c0                	test   eax,eax
c0003f70:	75 9f                	jne    c0003f11 <f_read+0x139>
c0003f72:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f76:	6a 01                	push   0x1
c0003f78:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f7c:	56                   	push   esi
c0003f7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f81:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f85:	50                   	push   eax
c0003f86:	e8 39 dd ff ff       	call   c0001cc4 <disk_read>
c0003f8b:	83 c4 10             	add    esp,0x10
c0003f8e:	85 c0                	test   eax,eax
c0003f90:	0f 85 7b ff ff ff    	jne    c0003f11 <f_read+0x139>
c0003f96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f9a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f9d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fa0:	ba 00 02 00 00       	mov    edx,0x200
c0003fa5:	25 ff 01 00 00       	and    eax,0x1ff
c0003faa:	89 fe                	mov    esi,edi
c0003fac:	29 c2                	sub    edx,eax
c0003fae:	39 d7                	cmp    edi,edx
c0003fb0:	76 02                	jbe    c0003fb4 <f_read+0x1dc>
c0003fb2:	89 d6                	mov    esi,edx
c0003fb4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fb8:	89 f1                	mov    ecx,esi
c0003fba:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fbe:	e8 78 dd ff ff       	call   c0001d3b <mem_cpy>
c0003fc3:	e9 02 ff ff ff       	jmp    c0003eca <f_read+0xf2>
c0003fc8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fcd:	83 c4 2c             	add    esp,0x2c
c0003fd0:	89 e8                	mov    eax,ebp
c0003fd2:	5b                   	pop    ebx
c0003fd3:	5e                   	pop    esi
c0003fd4:	5f                   	pop    edi
c0003fd5:	5d                   	pop    ebp
c0003fd6:	c3                   	ret    

c0003fd7 <f_write>:
c0003fd7:	55                   	push   ebp
c0003fd8:	57                   	push   edi
c0003fd9:	56                   	push   esi
c0003fda:	53                   	push   ebx
c0003fdb:	83 ec 2c             	sub    esp,0x2c
c0003fde:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003fe2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003fe6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003fec:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ff0:	89 d8                	mov    eax,ebx
c0003ff2:	e8 94 e1 ff ff       	call   c000218b <validate>
c0003ff7:	89 c5                	mov    ebp,eax
c0003ff9:	85 c0                	test   eax,eax
c0003ffb:	0f 85 00 02 00 00    	jne    c0004201 <f_write+0x22a>
c0004001:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004005:	85 ed                	test   ebp,ebp
c0004007:	0f 85 f4 01 00 00    	jne    c0004201 <f_write+0x22a>
c000400d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004011:	0f 84 e5 01 00 00    	je     c00041fc <f_write+0x225>
c0004017:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000401a:	89 c7                	mov    edi,eax
c000401c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004020:	0f 83 ea 00 00 00    	jae    c0004110 <f_write+0x139>
c0004026:	f7 d0                	not    eax
c0004028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000402c:	e9 df 00 00 00       	jmp    c0004110 <f_write+0x139>
c0004031:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004034:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000403a:	0f 85 8b 01 00 00    	jne    c00041cb <f_write+0x1f4>
c0004040:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004044:	89 d1                	mov    ecx,edx
c0004046:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000404a:	c1 e9 09             	shr    ecx,0x9
c000404d:	48                   	dec    eax
c000404e:	21 c8                	and    eax,ecx
c0004050:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004054:	0f 84 c3 00 00 00    	je     c000411d <f_write+0x146>
c000405a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000405e:	0f 88 18 01 00 00    	js     c000417c <f_write+0x1a5>
c0004064:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004068:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000406b:	89 c8                	mov    eax,ecx
c000406d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004071:	e8 df de ff ff       	call   c0001f55 <clst2sect>
c0004076:	85 c0                	test   eax,eax
c0004078:	0f 84 c8 00 00 00    	je     c0004146 <f_write+0x16f>
c000407e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004082:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004086:	01 c7                	add    edi,eax
c0004088:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0004090:	0f 86 0d 01 00 00    	jbe    c00041a3 <f_write+0x1cc>
c0004096:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000409a:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000409e:	c1 ee 09             	shr    esi,0x9
c00040a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040a5:	01 f2                	add    edx,esi
c00040a7:	39 c2                	cmp    edx,eax
c00040a9:	76 06                	jbe    c00040b1 <f_write+0xda>
c00040ab:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040af:	89 c6                	mov    esi,eax
c00040b1:	56                   	push   esi
c00040b2:	57                   	push   edi
c00040b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bb:	50                   	push   eax
c00040bc:	e8 19 dc ff ff       	call   c0001cda <disk_write>
c00040c1:	83 c4 10             	add    esp,0x10
c00040c4:	85 c0                	test   eax,eax
c00040c6:	0f 85 8d 00 00 00    	jne    c0004159 <f_write+0x182>
c00040cc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040cf:	29 fa                	sub    edx,edi
c00040d1:	39 f2                	cmp    edx,esi
c00040d3:	73 18                	jae    c00040ed <f_write+0x116>
c00040d5:	c1 e2 09             	shl    edx,0x9
c00040d8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040db:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040df:	b9 00 02 00 00       	mov    ecx,0x200
c00040e4:	e8 52 dc ff ff       	call   c0001d3b <mem_cpy>
c00040e9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040ed:	c1 e6 09             	shl    esi,0x9
c00040f0:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00040f4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00040f8:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00040fc:	01 30                	add    DWORD PTR [eax],esi
c00040fe:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004101:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004104:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004107:	39 f0                	cmp    eax,esi
c0004109:	73 02                	jae    c000410d <f_write+0x136>
c000410b:	89 f0                	mov    eax,esi
c000410d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004110:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004115:	0f 85 16 ff ff ff    	jne    c0004031 <f_write+0x5a>
c000411b:	eb 1b                	jmp    c0004138 <f_write+0x161>
c000411d:	85 d2                	test   edx,edx
c000411f:	75 09                	jne    c000412a <f_write+0x153>
c0004121:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004124:	85 c0                	test   eax,eax
c0004126:	75 19                	jne    c0004141 <f_write+0x16a>
c0004128:	eb 03                	jmp    c000412d <f_write+0x156>
c000412a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000412d:	89 d8                	mov    eax,ebx
c000412f:	e8 97 f1 ff ff       	call   c00032cb <create_chain>
c0004134:	85 c0                	test   eax,eax
c0004136:	75 09                	jne    c0004141 <f_write+0x16a>
c0004138:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000413c:	e9 c0 00 00 00       	jmp    c0004201 <f_write+0x22a>
c0004141:	83 f8 01             	cmp    eax,0x1
c0004144:	75 0e                	jne    c0004154 <f_write+0x17d>
c0004146:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000414a:	bd 02 00 00 00       	mov    ebp,0x2
c000414f:	e9 ad 00 00 00       	jmp    c0004201 <f_write+0x22a>
c0004154:	83 f8 ff             	cmp    eax,0xffffffff
c0004157:	75 0e                	jne    c0004167 <f_write+0x190>
c0004159:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000415d:	bd 01 00 00 00       	mov    ebp,0x1
c0004162:	e9 9a 00 00 00       	jmp    c0004201 <f_write+0x22a>
c0004167:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000416a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000416e:	0f 85 e6 fe ff ff    	jne    c000405a <f_write+0x83>
c0004174:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004177:	e9 de fe ff ff       	jmp    c000405a <f_write+0x83>
c000417c:	6a 01                	push   0x1
c000417e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004181:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004184:	50                   	push   eax
c0004185:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004189:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000418d:	50                   	push   eax
c000418e:	e8 47 db ff ff       	call   c0001cda <disk_write>
c0004193:	83 c4 10             	add    esp,0x10
c0004196:	85 c0                	test   eax,eax
c0004198:	75 bf                	jne    c0004159 <f_write+0x182>
c000419a:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000419e:	e9 c1 fe ff ff       	jmp    c0004064 <f_write+0x8d>
c00041a3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041a6:	74 20                	je     c00041c8 <f_write+0x1f1>
c00041a8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041ab:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041ae:	76 18                	jbe    c00041c8 <f_write+0x1f1>
c00041b0:	6a 01                	push   0x1
c00041b2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041b5:	57                   	push   edi
c00041b6:	50                   	push   eax
c00041b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041bb:	50                   	push   eax
c00041bc:	e8 03 db ff ff       	call   c0001cc4 <disk_read>
c00041c1:	83 c4 10             	add    esp,0x10
c00041c4:	85 c0                	test   eax,eax
c00041c6:	75 91                	jne    c0004159 <f_write+0x182>
c00041c8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041ce:	ba 00 02 00 00       	mov    edx,0x200
c00041d3:	25 ff 01 00 00       	and    eax,0x1ff
c00041d8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041dc:	29 c2                	sub    edx,eax
c00041de:	39 d6                	cmp    esi,edx
c00041e0:	76 02                	jbe    c00041e4 <f_write+0x20d>
c00041e2:	89 d6                	mov    esi,edx
c00041e4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041e8:	89 f1                	mov    ecx,esi
c00041ea:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041ee:	e8 48 db ff ff       	call   c0001d3b <mem_cpy>
c00041f3:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c00041f7:	e9 f4 fe ff ff       	jmp    c00040f0 <f_write+0x119>
c00041fc:	bd 07 00 00 00       	mov    ebp,0x7
c0004201:	83 c4 2c             	add    esp,0x2c
c0004204:	89 e8                	mov    eax,ebp
c0004206:	5b                   	pop    ebx
c0004207:	5e                   	pop    esi
c0004208:	5f                   	pop    edi
c0004209:	5d                   	pop    ebp
c000420a:	c3                   	ret    

c000420b <f_sync>:
c000420b:	56                   	push   esi
c000420c:	53                   	push   ebx
c000420d:	83 ec 14             	sub    esp,0x14
c0004210:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004214:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004218:	89 d8                	mov    eax,ebx
c000421a:	e8 6c df ff ff       	call   c000218b <validate>
c000421f:	85 c0                	test   eax,eax
c0004221:	0f 85 93 00 00 00    	jne    c00042ba <f_sync+0xaf>
c0004227:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000422a:	f6 c2 40             	test   dl,0x40
c000422d:	0f 84 87 00 00 00    	je     c00042ba <f_sync+0xaf>
c0004233:	84 d2                	test   dl,dl
c0004235:	79 29                	jns    c0004260 <f_sync+0x55>
c0004237:	6a 01                	push   0x1
c0004239:	8d 43 28             	lea    eax,[ebx+0x28]
c000423c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000423f:	50                   	push   eax
c0004240:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004244:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004248:	50                   	push   eax
c0004249:	e8 8c da ff ff       	call   c0001cda <disk_write>
c000424e:	83 c4 10             	add    esp,0x10
c0004251:	89 c2                	mov    edx,eax
c0004253:	b8 01 00 00 00       	mov    eax,0x1
c0004258:	85 d2                	test   edx,edx
c000425a:	75 5e                	jne    c00042ba <f_sync+0xaf>
c000425c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004260:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004263:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004267:	e8 c9 df ff ff       	call   c0002235 <move_window>
c000426c:	85 c0                	test   eax,eax
c000426e:	75 4a                	jne    c00042ba <f_sync+0xaf>
c0004270:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004273:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004277:	89 f2                	mov    edx,esi
c0004279:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000427c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000427e:	e8 56 ee ff ff       	call   c00030d9 <st_clust.isra.1>
c0004283:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004286:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004289:	e8 aa da ff ff       	call   c0001d38 <st_dword>
c000428e:	8d 46 16             	lea    eax,[esi+0x16]
c0004291:	ba 00 00 21 50       	mov    edx,0x50210000
c0004296:	e8 9d da ff ff       	call   c0001d38 <st_dword>
c000429b:	8d 46 12             	lea    eax,[esi+0x12]
c000429e:	31 d2                	xor    edx,edx
c00042a0:	e8 8f da ff ff       	call   c0001d34 <st_word>
c00042a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042a9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b1:	e8 bf e9 ff ff       	call   c0002c75 <sync_fs>
c00042b6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ba:	83 c4 14             	add    esp,0x14
c00042bd:	5b                   	pop    ebx
c00042be:	5e                   	pop    esi
c00042bf:	c3                   	ret    

c00042c0 <f_close>:
c00042c0:	53                   	push   ebx
c00042c1:	83 ec 24             	sub    esp,0x24
c00042c4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042c8:	53                   	push   ebx
c00042c9:	e8 3d ff ff ff       	call   c000420b <f_sync>
c00042ce:	83 c4 10             	add    esp,0x10
c00042d1:	85 c0                	test   eax,eax
c00042d3:	75 15                	jne    c00042ea <f_close+0x2a>
c00042d5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042d9:	89 d8                	mov    eax,ebx
c00042db:	e8 ab de ff ff       	call   c000218b <validate>
c00042e0:	85 c0                	test   eax,eax
c00042e2:	75 06                	jne    c00042ea <f_close+0x2a>
c00042e4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042ea:	83 c4 18             	add    esp,0x18
c00042ed:	5b                   	pop    ebx
c00042ee:	c3                   	ret    

c00042ef <f_lseek>:
c00042ef:	55                   	push   ebp
c00042f0:	57                   	push   edi
c00042f1:	56                   	push   esi
c00042f2:	53                   	push   ebx
c00042f3:	83 ec 2c             	sub    esp,0x2c
c00042f6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00042fa:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00042fe:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004302:	89 d8                	mov    eax,ebx
c0004304:	e8 82 de ff ff       	call   c000218b <validate>
c0004309:	89 c5                	mov    ebp,eax
c000430b:	85 c0                	test   eax,eax
c000430d:	0f 85 79 01 00 00    	jne    c000448c <f_lseek+0x19d>
c0004313:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004317:	85 ed                	test   ebp,ebp
c0004319:	0f 85 6d 01 00 00    	jne    c000448c <f_lseek+0x19d>
c000431f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004322:	39 f0                	cmp    eax,esi
c0004324:	73 08                	jae    c000432e <f_lseek+0x3f>
c0004326:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000432a:	75 02                	jne    c000432e <f_lseek+0x3f>
c000432c:	89 c6                	mov    esi,eax
c000432e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004331:	85 f6                	test   esi,esi
c0004333:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000433a:	75 07                	jne    c0004343 <f_lseek+0x54>
c000433c:	31 f6                	xor    esi,esi
c000433e:	e9 e2 00 00 00       	jmp    c0004425 <f_lseek+0x136>
c0004343:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004347:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000434b:	c1 e7 09             	shl    edi,0x9
c000434e:	85 c9                	test   ecx,ecx
c0004350:	74 28                	je     c000437a <f_lseek+0x8b>
c0004352:	49                   	dec    ecx
c0004353:	31 d2                	xor    edx,edx
c0004355:	8d 46 ff             	lea    eax,[esi-0x1]
c0004358:	f7 f7                	div    edi
c000435a:	31 d2                	xor    edx,edx
c000435c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004360:	89 c8                	mov    eax,ecx
c0004362:	f7 f7                	div    edi
c0004364:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004368:	72 10                	jb     c000437a <f_lseek+0x8b>
c000436a:	89 f8                	mov    eax,edi
c000436c:	f7 d8                	neg    eax
c000436e:	21 c1                	and    ecx,eax
c0004370:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004373:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004376:	29 ce                	sub    esi,ecx
c0004378:	eb 3c                	jmp    c00043b6 <f_lseek+0xc7>
c000437a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000437d:	85 c0                	test   eax,eax
c000437f:	75 32                	jne    c00043b3 <f_lseek+0xc4>
c0004381:	31 d2                	xor    edx,edx
c0004383:	89 d8                	mov    eax,ebx
c0004385:	e8 41 ef ff ff       	call   c00032cb <create_chain>
c000438a:	83 f8 01             	cmp    eax,0x1
c000438d:	75 0e                	jne    c000439d <f_lseek+0xae>
c000438f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004393:	bd 02 00 00 00       	mov    ebp,0x2
c0004398:	e9 ef 00 00 00       	jmp    c000448c <f_lseek+0x19d>
c000439d:	83 f8 ff             	cmp    eax,0xffffffff
c00043a0:	75 0e                	jne    c00043b0 <f_lseek+0xc1>
c00043a2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043a6:	bd 01 00 00 00       	mov    ebp,0x1
c00043ab:	e9 dc 00 00 00       	jmp    c000448c <f_lseek+0x19d>
c00043b0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043b3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043b6:	85 c0                	test   eax,eax
c00043b8:	74 82                	je     c000433c <f_lseek+0x4d>
c00043ba:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043bd:	39 fe                	cmp    esi,edi
c00043bf:	76 3d                	jbe    c00043fe <f_lseek+0x10f>
c00043c1:	01 fa                	add    edx,edi
c00043c3:	29 fe                	sub    esi,edi
c00043c5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043c8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043cc:	89 c2                	mov    edx,eax
c00043ce:	74 0d                	je     c00043dd <f_lseek+0xee>
c00043d0:	89 d8                	mov    eax,ebx
c00043d2:	e8 f4 ee ff ff       	call   c00032cb <create_chain>
c00043d7:	85 c0                	test   eax,eax
c00043d9:	75 09                	jne    c00043e4 <f_lseek+0xf5>
c00043db:	eb 1f                	jmp    c00043fc <f_lseek+0x10d>
c00043dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043df:	e8 1d ed ff ff       	call   c0003101 <get_fat.isra.2>
c00043e4:	83 f8 ff             	cmp    eax,0xffffffff
c00043e7:	74 b9                	je     c00043a2 <f_lseek+0xb3>
c00043e9:	83 f8 01             	cmp    eax,0x1
c00043ec:	76 a1                	jbe    c000438f <f_lseek+0xa0>
c00043ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043f2:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c00043f5:	76 98                	jbe    c000438f <f_lseek+0xa0>
c00043f7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043fa:	eb be                	jmp    c00043ba <f_lseek+0xcb>
c00043fc:	31 f6                	xor    esi,esi
c00043fe:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004401:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004407:	0f 84 2f ff ff ff    	je     c000433c <f_lseek+0x4d>
c000440d:	89 c2                	mov    edx,eax
c000440f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004413:	e8 3d db ff ff       	call   c0001f55 <clst2sect>
c0004418:	85 c0                	test   eax,eax
c000441a:	0f 84 6f ff ff ff    	je     c000438f <f_lseek+0xa0>
c0004420:	c1 ee 09             	shr    esi,0x9
c0004423:	01 c6                	add    esi,eax
c0004425:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004428:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000442b:	76 07                	jbe    c0004434 <f_lseek+0x145>
c000442d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004430:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004434:	a9 ff 01 00 00       	test   eax,0x1ff
c0004439:	74 51                	je     c000448c <f_lseek+0x19d>
c000443b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000443e:	39 f0                	cmp    eax,esi
c0004440:	74 4a                	je     c000448c <f_lseek+0x19d>
c0004442:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004445:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004449:	79 21                	jns    c000446c <f_lseek+0x17d>
c000444b:	6a 01                	push   0x1
c000444d:	50                   	push   eax
c000444e:	57                   	push   edi
c000444f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004453:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004457:	50                   	push   eax
c0004458:	e8 7d d8 ff ff       	call   c0001cda <disk_write>
c000445d:	83 c4 10             	add    esp,0x10
c0004460:	85 c0                	test   eax,eax
c0004462:	0f 85 3a ff ff ff    	jne    c00043a2 <f_lseek+0xb3>
c0004468:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000446c:	6a 01                	push   0x1
c000446e:	56                   	push   esi
c000446f:	57                   	push   edi
c0004470:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004474:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004478:	50                   	push   eax
c0004479:	e8 46 d8 ff ff       	call   c0001cc4 <disk_read>
c000447e:	83 c4 10             	add    esp,0x10
c0004481:	85 c0                	test   eax,eax
c0004483:	0f 85 19 ff ff ff    	jne    c00043a2 <f_lseek+0xb3>
c0004489:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000448c:	83 c4 2c             	add    esp,0x2c
c000448f:	89 e8                	mov    eax,ebp
c0004491:	5b                   	pop    ebx
c0004492:	5e                   	pop    esi
c0004493:	5f                   	pop    edi
c0004494:	5d                   	pop    ebp
c0004495:	c3                   	ret    

c0004496 <f_opendir>:
c0004496:	56                   	push   esi
c0004497:	b8 09 00 00 00       	mov    eax,0x9
c000449c:	53                   	push   ebx
c000449d:	83 ec 24             	sub    esp,0x24
c00044a0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044a4:	85 db                	test   ebx,ebx
c00044a6:	0f 84 af 00 00 00    	je     c000455b <f_opendir+0xc5>
c00044ac:	31 c9                	xor    ecx,ecx
c00044ae:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044b2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044b6:	e8 cd de ff ff       	call   c0002388 <mount_volume>
c00044bb:	85 c0                	test   eax,eax
c00044bd:	0f 85 92 00 00 00    	jne    c0004555 <f_opendir+0xbf>
c00044c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044c7:	83 ec 0c             	sub    esp,0xc
c00044ca:	89 03                	mov    DWORD PTR [ebx],eax
c00044cc:	68 00 02 00 00       	push   0x200
c00044d1:	e8 86 15 00 00       	call   c0005a5c <ff_memalloc>
c00044d6:	83 c4 10             	add    esp,0x10
c00044d9:	89 c6                	mov    esi,eax
c00044db:	b8 11 00 00 00       	mov    eax,0x11
c00044e0:	85 f6                	test   esi,esi
c00044e2:	74 77                	je     c000455b <f_opendir+0xc5>
c00044e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044e8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044ec:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ef:	89 d8                	mov    eax,ebx
c00044f1:	e8 9c f3 ff ff       	call   c0003892 <follow_path>
c00044f6:	85 c0                	test   eax,eax
c00044f8:	75 37                	jne    c0004531 <f_opendir+0x9b>
c00044fa:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c00044fe:	78 1c                	js     c000451c <f_opendir+0x86>
c0004500:	b8 05 00 00 00       	mov    eax,0x5
c0004505:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004509:	74 26                	je     c0004531 <f_opendir+0x9b>
c000450b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000450e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004512:	8a 00                	mov    al,BYTE PTR [eax]
c0004514:	e8 97 eb ff ff       	call   c00030b0 <ld_clust.isra.0>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004520:	31 d2                	xor    edx,edx
c0004522:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004526:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000452a:	89 d8                	mov    eax,ebx
c000452c:	e8 d2 ec ff ff       	call   c0003203 <dir_sdi>
c0004531:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004535:	83 ec 0c             	sub    esp,0xc
c0004538:	56                   	push   esi
c0004539:	e8 36 15 00 00       	call   c0005a74 <ff_memfree>
c000453e:	83 c4 10             	add    esp,0x10
c0004541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004545:	83 f8 04             	cmp    eax,0x4
c0004548:	74 06                	je     c0004550 <f_opendir+0xba>
c000454a:	85 c0                	test   eax,eax
c000454c:	74 0d                	je     c000455b <f_opendir+0xc5>
c000454e:	eb 05                	jmp    c0004555 <f_opendir+0xbf>
c0004550:	b8 05 00 00 00       	mov    eax,0x5
c0004555:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000455b:	83 c4 24             	add    esp,0x24
c000455e:	5b                   	pop    ebx
c000455f:	5e                   	pop    esi
c0004560:	c3                   	ret    

c0004561 <f_closedir>:
c0004561:	53                   	push   ebx
c0004562:	83 ec 18             	sub    esp,0x18
c0004565:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004569:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000456d:	89 d8                	mov    eax,ebx
c000456f:	e8 17 dc ff ff       	call   c000218b <validate>
c0004574:	85 c0                	test   eax,eax
c0004576:	75 06                	jne    c000457e <f_closedir+0x1d>
c0004578:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000457e:	83 c4 18             	add    esp,0x18
c0004581:	5b                   	pop    ebx
c0004582:	c3                   	ret    

c0004583 <f_readdir>:
c0004583:	57                   	push   edi
c0004584:	56                   	push   esi
c0004585:	53                   	push   ebx
c0004586:	83 ec 20             	sub    esp,0x20
c0004589:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000458d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004591:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004595:	89 d8                	mov    eax,ebx
c0004597:	e8 ef db ff ff       	call   c000218b <validate>
c000459c:	85 c0                	test   eax,eax
c000459e:	75 6e                	jne    c000460e <f_readdir+0x8b>
c00045a0:	85 ff                	test   edi,edi
c00045a2:	75 0b                	jne    c00045af <f_readdir+0x2c>
c00045a4:	31 d2                	xor    edx,edx
c00045a6:	89 d8                	mov    eax,ebx
c00045a8:	e8 56 ec ff ff       	call   c0003203 <dir_sdi>
c00045ad:	eb 5f                	jmp    c000460e <f_readdir+0x8b>
c00045af:	83 ec 0c             	sub    esp,0xc
c00045b2:	68 00 02 00 00       	push   0x200
c00045b7:	e8 a0 14 00 00       	call   c0005a5c <ff_memalloc>
c00045bc:	83 c4 10             	add    esp,0x10
c00045bf:	89 c6                	mov    esi,eax
c00045c1:	b8 11 00 00 00       	mov    eax,0x11
c00045c6:	85 f6                	test   esi,esi
c00045c8:	74 44                	je     c000460e <f_readdir+0x8b>
c00045ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045ce:	31 d2                	xor    edx,edx
c00045d0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045d3:	89 d8                	mov    eax,ebx
c00045d5:	e8 1a f0 ff ff       	call   c00035f4 <dir_read>
c00045da:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045df:	75 19                	jne    c00045fa <f_readdir+0x77>
c00045e1:	89 fa                	mov    edx,edi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 e2 e8 ff ff       	call   c0002ecc <get_fileinfo>
c00045ea:	31 d2                	xor    edx,edx
c00045ec:	89 d8                	mov    eax,ebx
c00045ee:	e8 9b ee ff ff       	call   c000348e <dir_next>
c00045f3:	83 f8 04             	cmp    eax,0x4
c00045f6:	75 02                	jne    c00045fa <f_readdir+0x77>
c00045f8:	31 c0                	xor    eax,eax
c00045fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00045fe:	83 ec 0c             	sub    esp,0xc
c0004601:	56                   	push   esi
c0004602:	e8 6d 14 00 00       	call   c0005a74 <ff_memfree>
c0004607:	83 c4 10             	add    esp,0x10
c000460a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000460e:	83 c4 20             	add    esp,0x20
c0004611:	5b                   	pop    ebx
c0004612:	5e                   	pop    esi
c0004613:	5f                   	pop    edi
c0004614:	c3                   	ret    

c0004615 <f_stat>:
c0004615:	57                   	push   edi
c0004616:	31 c9                	xor    ecx,ecx
c0004618:	56                   	push   esi
c0004619:	53                   	push   ebx
c000461a:	83 ec 30             	sub    esp,0x30
c000461d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004621:	89 e2                	mov    edx,esp
c0004623:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004627:	e8 5c dd ff ff       	call   c0002388 <mount_volume>
c000462c:	89 c3                	mov    ebx,eax
c000462e:	85 c0                	test   eax,eax
c0004630:	75 59                	jne    c000468b <f_stat+0x76>
c0004632:	83 ec 0c             	sub    esp,0xc
c0004635:	bb 11 00 00 00       	mov    ebx,0x11
c000463a:	68 00 02 00 00       	push   0x200
c000463f:	e8 18 14 00 00       	call   c0005a5c <ff_memalloc>
c0004644:	83 c4 10             	add    esp,0x10
c0004647:	89 c6                	mov    esi,eax
c0004649:	85 c0                	test   eax,eax
c000464b:	74 3e                	je     c000468b <f_stat+0x76>
c000464d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004650:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004654:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004657:	89 e0                	mov    eax,esp
c0004659:	e8 34 f2 ff ff       	call   c0003892 <follow_path>
c000465e:	89 c3                	mov    ebx,eax
c0004660:	85 c0                	test   eax,eax
c0004662:	75 1b                	jne    c000467f <f_stat+0x6a>
c0004664:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004669:	78 0f                	js     c000467a <f_stat+0x65>
c000466b:	85 ff                	test   edi,edi
c000466d:	74 10                	je     c000467f <f_stat+0x6a>
c000466f:	89 fa                	mov    edx,edi
c0004671:	89 e0                	mov    eax,esp
c0004673:	e8 54 e8 ff ff       	call   c0002ecc <get_fileinfo>
c0004678:	eb 05                	jmp    c000467f <f_stat+0x6a>
c000467a:	bb 06 00 00 00       	mov    ebx,0x6
c000467f:	83 ec 0c             	sub    esp,0xc
c0004682:	56                   	push   esi
c0004683:	e8 ec 13 00 00       	call   c0005a74 <ff_memfree>
c0004688:	83 c4 10             	add    esp,0x10
c000468b:	83 c4 30             	add    esp,0x30
c000468e:	89 d8                	mov    eax,ebx
c0004690:	5b                   	pop    ebx
c0004691:	5e                   	pop    esi
c0004692:	5f                   	pop    edi
c0004693:	c3                   	ret    

c0004694 <f_getfree>:
c0004694:	55                   	push   ebp
c0004695:	31 c9                	xor    ecx,ecx
c0004697:	57                   	push   edi
c0004698:	56                   	push   esi
c0004699:	53                   	push   ebx
c000469a:	83 ec 2c             	sub    esp,0x2c
c000469d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046a1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046a5:	e8 de dc ff ff       	call   c0002388 <mount_volume>
c00046aa:	89 c7                	mov    edi,eax
c00046ac:	85 c0                	test   eax,eax
c00046ae:	0f 85 d8 00 00 00    	jne    c000478c <f_getfree+0xf8>
c00046b4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046b8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046bc:	89 30                	mov    DWORD PTR [eax],esi
c00046be:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046c1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046c4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046c7:	39 d0                	cmp    eax,edx
c00046c9:	77 0b                	ja     c00046d6 <f_getfree+0x42>
c00046cb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046cf:	89 01                	mov    DWORD PTR [ecx],eax
c00046d1:	e9 b6 00 00 00       	jmp    c000478c <f_getfree+0xf8>
c00046d6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046d9:	75 29                	jne    c0004704 <f_getfree+0x70>
c00046db:	bd 02 00 00 00       	mov    ebp,0x2
c00046e0:	31 db                	xor    ebx,ebx
c00046e2:	89 ea                	mov    edx,ebp
c00046e4:	89 f0                	mov    eax,esi
c00046e6:	e8 16 ea ff ff       	call   c0003101 <get_fat.isra.2>
c00046eb:	83 f8 ff             	cmp    eax,0xffffffff
c00046ee:	74 7b                	je     c000476b <f_getfree+0xd7>
c00046f0:	83 f8 01             	cmp    eax,0x1
c00046f3:	74 7d                	je     c0004772 <f_getfree+0xde>
c00046f5:	83 d3 00             	adc    ebx,0x0
c00046f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046fc:	45                   	inc    ebp
c00046fd:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004700:	77 e0                	ja     c00046e2 <f_getfree+0x4e>
c0004702:	eb 77                	jmp    c000477b <f_getfree+0xe7>
c0004704:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004707:	31 db                	xor    ebx,ebx
c0004709:	31 f6                	xor    esi,esi
c000470b:	85 f6                	test   esi,esi
c000470d:	75 18                	jne    c0004727 <f_getfree+0x93>
c000470f:	8d 42 01             	lea    eax,[edx+0x1]
c0004712:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004716:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000471a:	e8 16 db ff ff       	call   c0002235 <move_window>
c000471f:	85 c0                	test   eax,eax
c0004721:	75 56                	jne    c0004779 <f_getfree+0xe5>
c0004723:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004727:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000472b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000472f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004733:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004736:	75 11                	jne    c0004749 <f_getfree+0xb5>
c0004738:	e8 d2 d5 ff ff       	call   c0001d0f <ld_word>
c000473d:	66 83 f8 01          	cmp    ax,0x1
c0004741:	83 d3 00             	adc    ebx,0x0
c0004744:	83 c6 02             	add    esi,0x2
c0004747:	eb 13                	jmp    c000475c <f_getfree+0xc8>
c0004749:	e8 ce d5 ff ff       	call   c0001d1c <ld_dword>
c000474e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004753:	83 f8 01             	cmp    eax,0x1
c0004756:	83 d3 00             	adc    ebx,0x0
c0004759:	83 c6 04             	add    esi,0x4
c000475c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004762:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004766:	4d                   	dec    ebp
c0004767:	75 a2                	jne    c000470b <f_getfree+0x77>
c0004769:	eb 10                	jmp    c000477b <f_getfree+0xe7>
c000476b:	bf 01 00 00 00       	mov    edi,0x1
c0004770:	eb 09                	jmp    c000477b <f_getfree+0xe7>
c0004772:	bf 02 00 00 00       	mov    edi,0x2
c0004777:	eb 02                	jmp    c000477b <f_getfree+0xe7>
c0004779:	89 c7                	mov    edi,eax
c000477b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000477f:	89 18                	mov    DWORD PTR [eax],ebx
c0004781:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004785:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004788:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000478c:	83 c4 2c             	add    esp,0x2c
c000478f:	89 f8                	mov    eax,edi
c0004791:	5b                   	pop    ebx
c0004792:	5e                   	pop    esi
c0004793:	5f                   	pop    edi
c0004794:	5d                   	pop    ebp
c0004795:	c3                   	ret    

c0004796 <f_truncate>:
c0004796:	56                   	push   esi
c0004797:	53                   	push   ebx
c0004798:	83 ec 14             	sub    esp,0x14
c000479b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000479f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047a3:	89 d8                	mov    eax,ebx
c00047a5:	e8 e1 d9 ff ff       	call   c000218b <validate>
c00047aa:	89 c6                	mov    esi,eax
c00047ac:	85 c0                	test   eax,eax
c00047ae:	0f 85 be 00 00 00    	jne    c0004872 <f_truncate+0xdc>
c00047b4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047b8:	85 f6                	test   esi,esi
c00047ba:	0f 85 b2 00 00 00    	jne    c0004872 <f_truncate+0xdc>
c00047c0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047c4:	0f 84 a3 00 00 00    	je     c000486d <f_truncate+0xd7>
c00047ca:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047cd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047d0:	0f 83 9c 00 00 00    	jae    c0004872 <f_truncate+0xdc>
c00047d6:	85 c0                	test   eax,eax
c00047d8:	75 15                	jne    c00047ef <f_truncate+0x59>
c00047da:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047dd:	31 c9                	xor    ecx,ecx
c00047df:	89 d8                	mov    eax,ebx
c00047e1:	e8 1f ec ff ff       	call   c0003405 <remove_chain>
c00047e6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047ed:	eb 35                	jmp    c0004824 <f_truncate+0x8e>
c00047ef:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00047f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00047f4:	e8 08 e9 ff ff       	call   c0003101 <get_fat.isra.2>
c00047f9:	89 c2                	mov    edx,eax
c00047fb:	b8 01 00 00 00       	mov    eax,0x1
c0004800:	83 fa ff             	cmp    edx,0xffffffff
c0004803:	74 1f                	je     c0004824 <f_truncate+0x8e>
c0004805:	b8 02 00 00 00       	mov    eax,0x2
c000480a:	83 fa 01             	cmp    edx,0x1
c000480d:	74 15                	je     c0004824 <f_truncate+0x8e>
c000480f:	31 c0                	xor    eax,eax
c0004811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004815:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004818:	76 0a                	jbe    c0004824 <f_truncate+0x8e>
c000481a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000481d:	89 d8                	mov    eax,ebx
c000481f:	e8 e1 eb ff ff       	call   c0003405 <remove_chain>
c0004824:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004827:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000482a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000482d:	83 ca 40             	or     edx,0x40
c0004830:	85 c0                	test   eax,eax
c0004832:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004835:	75 2f                	jne    c0004866 <f_truncate+0xd0>
c0004837:	84 d2                	test   dl,dl
c0004839:	79 37                	jns    c0004872 <f_truncate+0xdc>
c000483b:	6a 01                	push   0x1
c000483d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004840:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004843:	50                   	push   eax
c0004844:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004848:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000484c:	50                   	push   eax
c000484d:	e8 88 d4 ff ff       	call   c0001cda <disk_write>
c0004852:	83 c4 10             	add    esp,0x10
c0004855:	85 c0                	test   eax,eax
c0004857:	75 08                	jne    c0004861 <f_truncate+0xcb>
c0004859:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000485d:	31 f6                	xor    esi,esi
c000485f:	eb 11                	jmp    c0004872 <f_truncate+0xdc>
c0004861:	b8 01 00 00 00       	mov    eax,0x1
c0004866:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004869:	89 c6                	mov    esi,eax
c000486b:	eb 05                	jmp    c0004872 <f_truncate+0xdc>
c000486d:	be 07 00 00 00       	mov    esi,0x7
c0004872:	89 f0                	mov    eax,esi
c0004874:	83 c4 14             	add    esp,0x14
c0004877:	5b                   	pop    ebx
c0004878:	5e                   	pop    esi
c0004879:	c3                   	ret    

c000487a <f_unlink>:
c000487a:	55                   	push   ebp
c000487b:	b9 02 00 00 00       	mov    ecx,0x2
c0004880:	57                   	push   edi
c0004881:	56                   	push   esi
c0004882:	53                   	push   ebx
c0004883:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004889:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000488d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004894:	e8 ef da ff ff       	call   c0002388 <mount_volume>
c0004899:	85 c0                	test   eax,eax
c000489b:	0f 85 f0 00 00 00    	jne    c0004991 <f_unlink+0x117>
c00048a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048a5:	83 ec 0c             	sub    esp,0xc
c00048a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048ac:	68 00 02 00 00       	push   0x200
c00048b1:	e8 a6 11 00 00       	call   c0005a5c <ff_memalloc>
c00048b6:	83 c4 10             	add    esp,0x10
c00048b9:	89 c3                	mov    ebx,eax
c00048bb:	b8 11 00 00 00       	mov    eax,0x11
c00048c0:	85 db                	test   ebx,ebx
c00048c2:	0f 84 c9 00 00 00    	je     c0004991 <f_unlink+0x117>
c00048c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048cc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048d3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048d6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048da:	e8 b3 ef ff ff       	call   c0003892 <follow_path>
c00048df:	85 c0                	test   eax,eax
c00048e1:	0f 85 96 00 00 00    	jne    c000497d <f_unlink+0x103>
c00048e7:	b8 06 00 00 00       	mov    eax,0x6
c00048ec:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00048f1:	0f 88 86 00 00 00    	js     c000497d <f_unlink+0x103>
c00048f7:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c00048fc:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004902:	74 07                	je     c000490b <f_unlink+0x91>
c0004904:	b8 07 00 00 00       	mov    eax,0x7
c0004909:	eb 72                	jmp    c000497d <f_unlink+0x103>
c000490b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000490f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004913:	8a 07                	mov    al,BYTE PTR [edi]
c0004915:	e8 96 e7 ff ff       	call   c00030b0 <ld_clust.isra.0>
c000491a:	83 e5 10             	and    ebp,0x10
c000491d:	89 c6                	mov    esi,eax
c000491f:	75 0f                	jne    c0004930 <f_unlink+0xb6>
c0004921:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004925:	e8 e7 ed ff ff       	call   c0003711 <dir_remove>
c000492a:	85 c0                	test   eax,eax
c000492c:	74 2f                	je     c000495d <f_unlink+0xe3>
c000492e:	eb 4d                	jmp    c000497d <f_unlink+0x103>
c0004930:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004934:	31 d2                	xor    edx,edx
c0004936:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000493a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000493e:	e8 c0 e8 ff ff       	call   c0003203 <dir_sdi>
c0004943:	85 c0                	test   eax,eax
c0004945:	75 36                	jne    c000497d <f_unlink+0x103>
c0004947:	31 d2                	xor    edx,edx
c0004949:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494d:	e8 a2 ec ff ff       	call   c00035f4 <dir_read>
c0004952:	85 c0                	test   eax,eax
c0004954:	74 ae                	je     c0004904 <f_unlink+0x8a>
c0004956:	83 f8 04             	cmp    eax,0x4
c0004959:	75 22                	jne    c000497d <f_unlink+0x103>
c000495b:	eb c4                	jmp    c0004921 <f_unlink+0xa7>
c000495d:	85 f6                	test   esi,esi
c000495f:	75 0b                	jne    c000496c <f_unlink+0xf2>
c0004961:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004965:	e8 0b e3 ff ff       	call   c0002c75 <sync_fs>
c000496a:	eb 11                	jmp    c000497d <f_unlink+0x103>
c000496c:	31 c9                	xor    ecx,ecx
c000496e:	89 f2                	mov    edx,esi
c0004970:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004974:	e8 8c ea ff ff       	call   c0003405 <remove_chain>
c0004979:	85 c0                	test   eax,eax
c000497b:	74 e4                	je     c0004961 <f_unlink+0xe7>
c000497d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004981:	83 ec 0c             	sub    esp,0xc
c0004984:	53                   	push   ebx
c0004985:	e8 ea 10 00 00       	call   c0005a74 <ff_memfree>
c000498a:	83 c4 10             	add    esp,0x10
c000498d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004991:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004997:	5b                   	pop    ebx
c0004998:	5e                   	pop    esi
c0004999:	5f                   	pop    edi
c000499a:	5d                   	pop    ebp
c000499b:	c3                   	ret    

c000499c <f_mkdir>:
c000499c:	57                   	push   edi
c000499d:	b9 02 00 00 00       	mov    ecx,0x2
c00049a2:	56                   	push   esi
c00049a3:	53                   	push   ebx
c00049a4:	83 ec 50             	sub    esp,0x50
c00049a7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049ab:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049af:	e8 d4 d9 ff ff       	call   c0002388 <mount_volume>
c00049b4:	89 c3                	mov    ebx,eax
c00049b6:	85 c0                	test   eax,eax
c00049b8:	0f 85 70 01 00 00    	jne    c0004b2e <f_mkdir+0x192>
c00049be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049c2:	bb 11 00 00 00       	mov    ebx,0x11
c00049c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049cb:	83 ec 0c             	sub    esp,0xc
c00049ce:	68 00 02 00 00       	push   0x200
c00049d3:	e8 84 10 00 00       	call   c0005a5c <ff_memalloc>
c00049d8:	83 c4 10             	add    esp,0x10
c00049db:	89 c7                	mov    edi,eax
c00049dd:	85 c0                	test   eax,eax
c00049df:	0f 84 49 01 00 00    	je     c0004b2e <f_mkdir+0x192>
c00049e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049e9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049ed:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00049f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049f4:	e8 99 ee ff ff       	call   c0003892 <follow_path>
c00049f9:	89 c3                	mov    ebx,eax
c00049fb:	85 c0                	test   eax,eax
c00049fd:	74 3e                	je     c0004a3d <f_mkdir+0xa1>
c00049ff:	83 f8 04             	cmp    eax,0x4
c0004a02:	75 3e                	jne    c0004a42 <f_mkdir+0xa6>
c0004a04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a08:	31 d2                	xor    edx,edx
c0004a0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a0e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a12:	e8 b4 e8 ff ff       	call   c00032cb <create_chain>
c0004a17:	89 c6                	mov    esi,eax
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	74 0c                	je     c0004a29 <f_mkdir+0x8d>
c0004a1d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a22:	83 f8 01             	cmp    eax,0x1
c0004a25:	74 07                	je     c0004a2e <f_mkdir+0x92>
c0004a27:	eb 2a                	jmp    c0004a53 <f_mkdir+0xb7>
c0004a29:	bb 07 00 00 00       	mov    ebx,0x7
c0004a2e:	31 c9                	xor    ecx,ecx
c0004a30:	89 f2                	mov    edx,esi
c0004a32:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a36:	e8 ca e9 ff ff       	call   c0003405 <remove_chain>
c0004a3b:	eb 05                	jmp    c0004a42 <f_mkdir+0xa6>
c0004a3d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a42:	83 ec 0c             	sub    esp,0xc
c0004a45:	57                   	push   edi
c0004a46:	e8 29 10 00 00       	call   c0005a74 <ff_memfree>
c0004a4b:	83 c4 10             	add    esp,0x10
c0004a4e:	e9 db 00 00 00       	jmp    c0004b2e <f_mkdir+0x192>
c0004a53:	bb 01 00 00 00       	mov    ebx,0x1
c0004a58:	83 f8 ff             	cmp    eax,0xffffffff
c0004a5b:	74 d1                	je     c0004a2e <f_mkdir+0x92>
c0004a5d:	89 f2                	mov    edx,esi
c0004a5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a63:	e8 73 dd ff ff       	call   c00027db <dir_clear>
c0004a68:	89 c3                	mov    ebx,eax
c0004a6a:	85 c0                	test   eax,eax
c0004a6c:	75 c0                	jne    c0004a2e <f_mkdir+0x92>
c0004a6e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a77:	ba 20 00 00 00       	mov    edx,0x20
c0004a7c:	83 c0 34             	add    eax,0x34
c0004a7f:	e8 cc d2 ff ff       	call   c0001d50 <mem_set>
c0004a84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a88:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a8d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004a91:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004a95:	83 c0 4a             	add    eax,0x4a
c0004a98:	e8 9b d2 ff ff       	call   c0001d38 <st_dword>
c0004a9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aa1:	89 f1                	mov    ecx,esi
c0004aa3:	8d 50 34             	lea    edx,[eax+0x34]
c0004aa6:	e8 2e e6 ff ff       	call   c00030d9 <st_clust.isra.1>
c0004aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aaf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ab4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab7:	83 c0 54             	add    eax,0x54
c0004aba:	e8 7c d2 ff ff       	call   c0001d3b <mem_cpy>
c0004abf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ac3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ac7:	8d 50 54             	lea    edx,[eax+0x54]
c0004aca:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ace:	e8 06 e6 ff ff       	call   c00030d9 <st_clust.isra.1>
c0004ad3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004adb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004adf:	e8 42 ee ff ff       	call   c0003926 <dir_register>
c0004ae4:	89 c3                	mov    ebx,eax
c0004ae6:	85 c0                	test   eax,eax
c0004ae8:	0f 85 40 ff ff ff    	jne    c0004a2e <f_mkdir+0x92>
c0004aee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004af2:	ba 00 00 21 50       	mov    edx,0x50210000
c0004af7:	83 c0 16             	add    eax,0x16
c0004afa:	e8 39 d2 ff ff       	call   c0001d38 <st_dword>
c0004aff:	89 f1                	mov    ecx,esi
c0004b01:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b09:	e8 cb e5 ff ff       	call   c00030d9 <st_clust.isra.1>
c0004b0e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b12:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b1a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b22:	e8 4e e1 ff ff       	call   c0002c75 <sync_fs>
c0004b27:	89 c3                	mov    ebx,eax
c0004b29:	e9 14 ff ff ff       	jmp    c0004a42 <f_mkdir+0xa6>
c0004b2e:	83 c4 50             	add    esp,0x50
c0004b31:	89 d8                	mov    eax,ebx
c0004b33:	5b                   	pop    ebx
c0004b34:	5e                   	pop    esi
c0004b35:	5f                   	pop    edi
c0004b36:	c3                   	ret    

c0004b37 <f_rename>:
c0004b37:	57                   	push   edi
c0004b38:	56                   	push   esi
c0004b39:	53                   	push   ebx
c0004b3a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b40:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b47:	e8 f2 d5 ff ff       	call   c000213e <get_ldnumber>
c0004b4c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b51:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b55:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b5c:	e8 27 d8 ff ff       	call   c0002388 <mount_volume>
c0004b61:	85 c0                	test   eax,eax
c0004b63:	0f 85 7a 01 00 00    	jne    c0004ce3 <f_rename+0x1ac>
c0004b69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b6d:	83 ec 0c             	sub    esp,0xc
c0004b70:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b74:	68 00 02 00 00       	push   0x200
c0004b79:	e8 de 0e 00 00       	call   c0005a5c <ff_memalloc>
c0004b7e:	83 c4 10             	add    esp,0x10
c0004b81:	89 c6                	mov    esi,eax
c0004b83:	b8 11 00 00 00       	mov    eax,0x11
c0004b88:	85 f6                	test   esi,esi
c0004b8a:	0f 84 53 01 00 00    	je     c0004ce3 <f_rename+0x1ac>
c0004b90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b94:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b9e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ba2:	e8 eb ec ff ff       	call   c0003892 <follow_path>
c0004ba7:	85 c0                	test   eax,eax
c0004ba9:	0f 85 20 01 00 00    	jne    c0004ccf <f_rename+0x198>
c0004baf:	b8 06 00 00 00       	mov    eax,0x6
c0004bb4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bb9:	0f 85 10 01 00 00    	jne    c0004ccf <f_rename+0x198>
c0004bbf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bc4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bc8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bcc:	e8 6a d1 ff ff       	call   c0001d3b <mem_cpy>
c0004bd1:	b9 30 00 00 00       	mov    ecx,0x30
c0004bd6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bda:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bde:	e8 58 d1 ff ff       	call   c0001d3b <mem_cpy>
c0004be3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 9f ec ff ff       	call   c0003892 <follow_path>
c0004bf3:	85 c0                	test   eax,eax
c0004bf5:	75 20                	jne    c0004c17 <f_rename+0xe0>
c0004bf7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004bfb:	b8 08 00 00 00       	mov    eax,0x8
c0004c00:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c04:	0f 85 c5 00 00 00    	jne    c0004ccf <f_rename+0x198>
c0004c0a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c0e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c15:	eb 03                	jmp    c0004c1a <f_rename+0xe3>
c0004c17:	83 f8 04             	cmp    eax,0x4
c0004c1a:	0f 85 af 00 00 00    	jne    c0004ccf <f_rename+0x198>
c0004c20:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c24:	e8 fd ec ff ff       	call   c0003926 <dir_register>
c0004c29:	85 c0                	test   eax,eax
c0004c2b:	0f 85 9e 00 00 00    	jne    c0004ccf <f_rename+0x198>
c0004c31:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c38:	b9 13 00 00 00       	mov    ecx,0x13
c0004c3d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c40:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c44:	e8 f2 d0 ff ff       	call   c0001d3b <mem_cpy>
c0004c49:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c4d:	a8 10                	test   al,0x10
c0004c4f:	75 03                	jne    c0004c54 <f_rename+0x11d>
c0004c51:	83 c8 20             	or     eax,0x20
c0004c54:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c63:	74 54                	je     c0004cb9 <f_rename+0x182>
c0004c65:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c69:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c6d:	74 4a                	je     c0004cb9 <f_rename+0x182>
c0004c6f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c73:	89 da                	mov    edx,ebx
c0004c75:	8a 07                	mov    al,BYTE PTR [edi]
c0004c77:	e8 34 e4 ff ff       	call   c00030b0 <ld_clust.isra.0>
c0004c7c:	89 c2                	mov    edx,eax
c0004c7e:	89 f8                	mov    eax,edi
c0004c80:	e8 d0 d2 ff ff       	call   c0001f55 <clst2sect>
c0004c85:	89 c2                	mov    edx,eax
c0004c87:	b8 02 00 00 00       	mov    eax,0x2
c0004c8c:	85 d2                	test   edx,edx
c0004c8e:	74 3f                	je     c0004ccf <f_rename+0x198>
c0004c90:	89 f8                	mov    eax,edi
c0004c92:	e8 9e d5 ff ff       	call   c0002235 <move_window>
c0004c97:	85 c0                	test   eax,eax
c0004c99:	75 34                	jne    c0004ccf <f_rename+0x198>
c0004c9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c9f:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004ca3:	75 14                	jne    c0004cb9 <f_rename+0x182>
c0004ca5:	8d 50 54             	lea    edx,[eax+0x54]
c0004ca8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cac:	e8 28 e4 ff ff       	call   c00030d9 <st_clust.isra.1>
c0004cb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cb5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cb9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004cbd:	e8 4f ea ff ff       	call   c0003711 <dir_remove>
c0004cc2:	85 c0                	test   eax,eax
c0004cc4:	75 09                	jne    c0004ccf <f_rename+0x198>
c0004cc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cca:	e8 a6 df ff ff       	call   c0002c75 <sync_fs>
c0004ccf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cd3:	83 ec 0c             	sub    esp,0xc
c0004cd6:	56                   	push   esi
c0004cd7:	e8 98 0d 00 00       	call   c0005a74 <ff_memfree>
c0004cdc:	83 c4 10             	add    esp,0x10
c0004cdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ce3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004ce9:	5b                   	pop    ebx
c0004cea:	5e                   	pop    esi
c0004ceb:	5f                   	pop    edi
c0004cec:	c3                   	ret    

c0004ced <f_chmod>:
c0004ced:	57                   	push   edi
c0004cee:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf3:	56                   	push   esi
c0004cf4:	53                   	push   ebx
c0004cf5:	83 ec 50             	sub    esp,0x50
c0004cf8:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004cfc:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d00:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d04:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d08:	e8 7b d6 ff ff       	call   c0002388 <mount_volume>
c0004d0d:	85 c0                	test   eax,eax
c0004d0f:	75 7e                	jne    c0004d8f <f_chmod+0xa2>
c0004d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d15:	83 ec 0c             	sub    esp,0xc
c0004d18:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d1c:	68 00 02 00 00       	push   0x200
c0004d21:	e8 36 0d 00 00       	call   c0005a5c <ff_memalloc>
c0004d26:	83 c4 10             	add    esp,0x10
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	b8 11 00 00 00       	mov    eax,0x11
c0004d30:	85 f6                	test   esi,esi
c0004d32:	74 5b                	je     c0004d8f <f_chmod+0xa2>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d3c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d43:	e8 4a eb ff ff       	call   c0003892 <follow_path>
c0004d48:	85 c0                	test   eax,eax
c0004d4a:	75 2f                	jne    c0004d7b <f_chmod+0x8e>
c0004d4c:	b8 06 00 00 00       	mov    eax,0x6
c0004d51:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d56:	75 23                	jne    c0004d7b <f_chmod+0x8e>
c0004d58:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d5c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d5f:	21 fb                	and    ebx,edi
c0004d61:	83 e3 27             	and    ebx,0x27
c0004d64:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d67:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d6e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d76:	e8 fa de ff ff       	call   c0002c75 <sync_fs>
c0004d7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7f:	83 ec 0c             	sub    esp,0xc
c0004d82:	56                   	push   esi
c0004d83:	e8 ec 0c 00 00       	call   c0005a74 <ff_memfree>
c0004d88:	83 c4 10             	add    esp,0x10
c0004d8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8f:	83 c4 50             	add    esp,0x50
c0004d92:	5b                   	pop    ebx
c0004d93:	5e                   	pop    esi
c0004d94:	5f                   	pop    edi
c0004d95:	c3                   	ret    

c0004d96 <f_utime>:
c0004d96:	56                   	push   esi
c0004d97:	b9 02 00 00 00       	mov    ecx,0x2
c0004d9c:	53                   	push   ebx
c0004d9d:	83 ec 54             	sub    esp,0x54
c0004da0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004da4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004da8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dac:	e8 d7 d5 ff ff       	call   c0002388 <mount_volume>
c0004db1:	85 c0                	test   eax,eax
c0004db3:	0f 85 85 00 00 00    	jne    c0004e3e <f_utime+0xa8>
c0004db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dbd:	83 ec 0c             	sub    esp,0xc
c0004dc0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dc4:	68 00 02 00 00       	push   0x200
c0004dc9:	e8 8e 0c 00 00       	call   c0005a5c <ff_memalloc>
c0004dce:	83 c4 10             	add    esp,0x10
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	b8 11 00 00 00       	mov    eax,0x11
c0004dd8:	85 db                	test   ebx,ebx
c0004dda:	74 62                	je     c0004e3e <f_utime+0xa8>
c0004ddc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004de0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004de4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004de7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004deb:	e8 a2 ea ff ff       	call   c0003892 <follow_path>
c0004df0:	85 c0                	test   eax,eax
c0004df2:	75 36                	jne    c0004e2a <f_utime+0x94>
c0004df4:	b8 06 00 00 00       	mov    eax,0x6
c0004df9:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004dfe:	75 2a                	jne    c0004e2a <f_utime+0x94>
c0004e00:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e04:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e08:	c1 e2 10             	shl    edx,0x10
c0004e0b:	09 c2                	or     edx,eax
c0004e0d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e11:	83 c0 16             	add    eax,0x16
c0004e14:	e8 1f cf ff ff       	call   c0001d38 <st_dword>
c0004e19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e1d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e25:	e8 4b de ff ff       	call   c0002c75 <sync_fs>
c0004e2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e2e:	83 ec 0c             	sub    esp,0xc
c0004e31:	53                   	push   ebx
c0004e32:	e8 3d 0c 00 00       	call   c0005a74 <ff_memfree>
c0004e37:	83 c4 10             	add    esp,0x10
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	83 c4 54             	add    esp,0x54
c0004e41:	5b                   	pop    ebx
c0004e42:	5e                   	pop    esi
c0004e43:	c3                   	ret    

c0004e44 <f_getlabel>:
c0004e44:	55                   	push   ebp
c0004e45:	31 c9                	xor    ecx,ecx
c0004e47:	57                   	push   edi
c0004e48:	56                   	push   esi
c0004e49:	53                   	push   ebx
c0004e4a:	83 ec 5c             	sub    esp,0x5c
c0004e4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e51:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e55:	e8 2e d5 ff ff       	call   c0002388 <mount_volume>
c0004e5a:	89 c6                	mov    esi,eax
c0004e5c:	85 c0                	test   eax,eax
c0004e5e:	0f 85 27 01 00 00    	jne    c0004f8b <f_getlabel+0x147>
c0004e64:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e69:	0f 84 d1 00 00 00    	je     c0004f40 <f_getlabel+0xfc>
c0004e6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e73:	31 d2                	xor    edx,edx
c0004e75:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e79:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e81:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e85:	e8 79 e3 ff ff       	call   c0003203 <dir_sdi>
c0004e8a:	85 c0                	test   eax,eax
c0004e8c:	0f 85 a2 00 00 00    	jne    c0004f34 <f_getlabel+0xf0>
c0004e92:	ba 01 00 00 00       	mov    edx,0x1
c0004e97:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e9b:	e8 54 e7 ff ff       	call   c00035f4 <dir_read>
c0004ea0:	85 c0                	test   eax,eax
c0004ea2:	0f 85 8c 00 00 00    	jne    c0004f34 <f_getlabel+0xf0>
c0004ea8:	31 db                	xor    ebx,ebx
c0004eaa:	31 c9                	xor    ecx,ecx
c0004eac:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004eb0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004eb3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004eb8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ebd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ec1:	e8 ca ce ff ff       	call   c0001d90 <dbc_1st>
c0004ec6:	85 c0                	test   eax,eax
c0004ec8:	74 16                	je     c0004ee0 <f_getlabel+0x9c>
c0004eca:	83 ff 0b             	cmp    edi,0xb
c0004ecd:	74 11                	je     c0004ee0 <f_getlabel+0x9c>
c0004ecf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ed4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ed8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004edb:	c1 e0 08             	shl    eax,0x8
c0004ede:	09 c2                	or     edx,eax
c0004ee0:	0f b7 d2             	movzx  edx,dx
c0004ee3:	50                   	push   eax
c0004ee4:	50                   	push   eax
c0004ee5:	68 b5 01 00 00       	push   0x1b5
c0004eea:	52                   	push   edx
c0004eeb:	e8 3c 0c 00 00       	call   c0005b2c <ff_oem2uni>
c0004ef0:	83 c4 10             	add    esp,0x10
c0004ef3:	66 85 c0             	test   ax,ax
c0004ef6:	74 25                	je     c0004f1d <f_getlabel+0xd9>
c0004ef8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004efc:	0f b7 c0             	movzx  eax,ax
c0004eff:	01 da                	add    edx,ebx
c0004f01:	b9 04 00 00 00       	mov    ecx,0x4
c0004f06:	e8 51 cf ff ff       	call   c0001e5c <put_utf>
c0004f0b:	84 c0                	test   al,al
c0004f0d:	74 0e                	je     c0004f1d <f_getlabel+0xd9>
c0004f0f:	0f b6 c0             	movzx  eax,al
c0004f12:	01 c3                	add    ebx,eax
c0004f14:	83 ff 0b             	cmp    edi,0xb
c0004f17:	74 06                	je     c0004f1f <f_getlabel+0xdb>
c0004f19:	89 f9                	mov    ecx,edi
c0004f1b:	eb 8f                	jmp    c0004eac <f_getlabel+0x68>
c0004f1d:	31 db                	xor    ebx,ebx
c0004f1f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f23:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f26:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f2a:	74 14                	je     c0004f40 <f_getlabel+0xfc>
c0004f2c:	4b                   	dec    ebx
c0004f2d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f30:	74 f1                	je     c0004f23 <f_getlabel+0xdf>
c0004f32:	eb 0c                	jmp    c0004f40 <f_getlabel+0xfc>
c0004f34:	83 f8 04             	cmp    eax,0x4
c0004f37:	75 50                	jne    c0004f89 <f_getlabel+0x145>
c0004f39:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f3d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f40:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f45:	74 44                	je     c0004f8b <f_getlabel+0x147>
c0004f47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f4b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f4e:	e8 e2 d2 ff ff       	call   c0002235 <move_window>
c0004f53:	89 c6                	mov    esi,eax
c0004f55:	85 c0                	test   eax,eax
c0004f57:	75 32                	jne    c0004f8b <f_getlabel+0x147>
c0004f59:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f5d:	b8 43 00 00 00       	mov    eax,0x43
c0004f62:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f64:	80 f9 03             	cmp    cl,0x3
c0004f67:	74 0f                	je     c0004f78 <f_getlabel+0x134>
c0004f69:	31 c0                	xor    eax,eax
c0004f6b:	80 f9 04             	cmp    cl,0x4
c0004f6e:	0f 94 c0             	sete   al
c0004f71:	48                   	dec    eax
c0004f72:	83 e0 c3             	and    eax,0xffffffc3
c0004f75:	83 c0 64             	add    eax,0x64
c0004f78:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f7c:	e8 9b cd ff ff       	call   c0001d1c <ld_dword>
c0004f81:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f85:	89 07                	mov    DWORD PTR [edi],eax
c0004f87:	eb 02                	jmp    c0004f8b <f_getlabel+0x147>
c0004f89:	89 c6                	mov    esi,eax
c0004f8b:	83 c4 5c             	add    esp,0x5c
c0004f8e:	89 f0                	mov    eax,esi
c0004f90:	5b                   	pop    ebx
c0004f91:	5e                   	pop    esi
c0004f92:	5f                   	pop    edi
c0004f93:	5d                   	pop    ebp
c0004f94:	c3                   	ret    

c0004f95 <f_setlabel>:
c0004f95:	56                   	push   esi
c0004f96:	b9 02 00 00 00       	mov    ecx,0x2
c0004f9b:	53                   	push   ebx
c0004f9c:	83 ec 54             	sub    esp,0x54
c0004f9f:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fa3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fa7:	e8 dc d3 ff ff       	call   c0002388 <mount_volume>
c0004fac:	89 c6                	mov    esi,eax
c0004fae:	85 c0                	test   eax,eax
c0004fb0:	0f 85 67 01 00 00    	jne    c000511d <f_setlabel+0x188>
c0004fb6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fbb:	ba 20 00 00 00       	mov    edx,0x20
c0004fc0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fc4:	31 db                	xor    ebx,ebx
c0004fc6:	e8 85 cd ff ff       	call   c0001d50 <mem_set>
c0004fcb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fcf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fd2:	76 5b                	jbe    c000502f <f_setlabel+0x9a>
c0004fd4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fd8:	e8 b9 cd ff ff       	call   c0001d96 <tchar2uni>
c0004fdd:	3d ff ff 00 00       	cmp    eax,0xffff
c0004fe2:	76 0a                	jbe    c0004fee <f_setlabel+0x59>
c0004fe4:	be 06 00 00 00       	mov    esi,0x6
c0004fe9:	e9 2f 01 00 00       	jmp    c000511d <f_setlabel+0x188>
c0004fee:	83 ec 0c             	sub    esp,0xc
c0004ff1:	50                   	push   eax
c0004ff2:	e8 ad 0b 00 00       	call   c0005ba4 <ff_wtoupper>
c0004ff7:	5a                   	pop    edx
c0004ff8:	59                   	pop    ecx
c0004ff9:	68 b5 01 00 00       	push   0x1b5
c0004ffe:	50                   	push   eax
c0004fff:	e8 88 0a 00 00       	call   c0005a8c <ff_uni2oem>
c0005004:	83 c4 10             	add    esp,0x10
c0005007:	89 c6                	mov    esi,eax
c0005009:	66 85 c0             	test   ax,ax
c000500c:	74 d6                	je     c0004fe4 <f_setlabel+0x4f>
c000500e:	0f b7 d0             	movzx  edx,ax
c0005011:	b8 70 eb 01 c0       	mov    eax,0xc001eb70
c0005016:	e8 63 cd ff ff       	call   c0001d7e <chk_chr>
c000501b:	85 c0                	test   eax,eax
c000501d:	75 c5                	jne    c0004fe4 <f_setlabel+0x4f>
c000501f:	66 81 fe ff 00       	cmp    si,0xff
c0005024:	0f 87 c9 00 00 00    	ja     c00050f3 <f_setlabel+0x15e>
c000502a:	e9 e4 00 00 00       	jmp    c0005113 <f_setlabel+0x17e>
c000502f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005034:	74 ae                	je     c0004fe4 <f_setlabel+0x4f>
c0005036:	85 db                	test   ebx,ebx
c0005038:	74 0e                	je     c0005048 <f_setlabel+0xb3>
c000503a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000503d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005042:	75 04                	jne    c0005048 <f_setlabel+0xb3>
c0005044:	89 c3                	mov    ebx,eax
c0005046:	eb ee                	jmp    c0005036 <f_setlabel+0xa1>
c0005048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000504c:	31 d2                	xor    edx,edx
c000504e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005052:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000505a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000505e:	e8 a0 e1 ff ff       	call   c0003203 <dir_sdi>
c0005063:	89 c6                	mov    esi,eax
c0005065:	85 c0                	test   eax,eax
c0005067:	0f 85 b0 00 00 00    	jne    c000511d <f_setlabel+0x188>
c000506d:	ba 01 00 00 00       	mov    edx,0x1
c0005072:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005076:	e8 79 e5 ff ff       	call   c00035f4 <dir_read>
c000507b:	85 c0                	test   eax,eax
c000507d:	75 18                	jne    c0005097 <f_setlabel+0x102>
c000507f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005083:	85 db                	test   ebx,ebx
c0005085:	74 0b                	je     c0005092 <f_setlabel+0xfd>
c0005087:	b9 0b 00 00 00       	mov    ecx,0xb
c000508c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005090:	eb 47                	jmp    c00050d9 <f_setlabel+0x144>
c0005092:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005095:	eb 47                	jmp    c00050de <f_setlabel+0x149>
c0005097:	83 f8 04             	cmp    eax,0x4
c000509a:	75 53                	jne    c00050ef <f_setlabel+0x15a>
c000509c:	85 db                	test   ebx,ebx
c000509e:	74 7d                	je     c000511d <f_setlabel+0x188>
c00050a0:	ba 01 00 00 00       	mov    edx,0x1
c00050a5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a9:	e8 e5 e4 ff ff       	call   c0003593 <dir_alloc>
c00050ae:	89 c6                	mov    esi,eax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	75 69                	jne    c000511d <f_setlabel+0x188>
c00050b4:	b9 20 00 00 00       	mov    ecx,0x20
c00050b9:	31 d2                	xor    edx,edx
c00050bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050bf:	e8 8c cc ff ff       	call   c0001d50 <mem_set>
c00050c4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050c8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050cd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050d1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050d5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d9:	e8 5d cc ff ff       	call   c0001d3b <mem_cpy>
c00050de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050ea:	e8 86 db ff ff       	call   c0002c75 <sync_fs>
c00050ef:	89 c6                	mov    esi,eax
c00050f1:	eb 2a                	jmp    c000511d <f_setlabel+0x188>
c00050f3:	83 fb 09             	cmp    ebx,0x9
c00050f6:	0f 87 e8 fe ff ff    	ja     c0004fe4 <f_setlabel+0x4f>
c00050fc:	89 f0                	mov    eax,esi
c00050fe:	66 c1 e8 08          	shr    ax,0x8
c0005102:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005106:	43                   	inc    ebx
c0005107:	89 f0                	mov    eax,esi
c0005109:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000510d:	43                   	inc    ebx
c000510e:	e9 b8 fe ff ff       	jmp    c0004fcb <f_setlabel+0x36>
c0005113:	83 fb 0a             	cmp    ebx,0xa
c0005116:	76 ef                	jbe    c0005107 <f_setlabel+0x172>
c0005118:	e9 c7 fe ff ff       	jmp    c0004fe4 <f_setlabel+0x4f>
c000511d:	89 f0                	mov    eax,esi
c000511f:	83 c4 54             	add    esp,0x54
c0005122:	5b                   	pop    ebx
c0005123:	5e                   	pop    esi
c0005124:	c3                   	ret    

c0005125 <f_expand>:
c0005125:	55                   	push   ebp
c0005126:	57                   	push   edi
c0005127:	56                   	push   esi
c0005128:	53                   	push   ebx
c0005129:	83 ec 2c             	sub    esp,0x2c
c000512c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005130:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005134:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005138:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000513c:	89 d8                	mov    eax,ebx
c000513e:	e8 48 d0 ff ff       	call   c000218b <validate>
c0005143:	89 c6                	mov    esi,eax
c0005145:	85 c0                	test   eax,eax
c0005147:	0f 85 2e 01 00 00    	jne    c000527b <f_expand+0x156>
c000514d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005151:	85 f6                	test   esi,esi
c0005153:	0f 85 22 01 00 00    	jne    c000527b <f_expand+0x156>
c0005159:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000515e:	75 0a                	jne    c000516a <f_expand+0x45>
c0005160:	be 07 00 00 00       	mov    esi,0x7
c0005165:	e9 11 01 00 00       	jmp    c000527b <f_expand+0x156>
c000516a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000516e:	75 f0                	jne    c0005160 <f_expand+0x3b>
c0005170:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005174:	74 ea                	je     c0005160 <f_expand+0x3b>
c0005176:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000517a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000517e:	c1 e1 09             	shl    ecx,0x9
c0005181:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005184:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005188:	0f 95 c0             	setne  al
c000518b:	31 d2                	xor    edx,edx
c000518d:	0f b6 c0             	movzx  eax,al
c0005190:	89 c7                	mov    edi,eax
c0005192:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005196:	f7 f1                	div    ecx
c0005198:	01 f8                	add    eax,edi
c000519a:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c000519d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051a1:	83 ff 01             	cmp    edi,0x1
c00051a4:	76 05                	jbe    c00051ab <f_expand+0x86>
c00051a6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051a9:	77 05                	ja     c00051b0 <f_expand+0x8b>
c00051ab:	bf 02 00 00 00       	mov    edi,0x2
c00051b0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051b3:	89 fd                	mov    ebp,edi
c00051b5:	31 c9                	xor    ecx,ecx
c00051b7:	89 ea                	mov    edx,ebp
c00051b9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051bf:	45                   	inc    ebp
c00051c0:	e8 3c df ff ff       	call   c0003101 <get_fat.isra.2>
c00051c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051cd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051d0:	77 05                	ja     c00051d7 <f_expand+0xb2>
c00051d2:	bd 02 00 00 00       	mov    ebp,0x2
c00051d7:	83 f8 01             	cmp    eax,0x1
c00051da:	74 20                	je     c00051fc <f_expand+0xd7>
c00051dc:	83 f8 ff             	cmp    eax,0xffffffff
c00051df:	74 22                	je     c0005203 <f_expand+0xde>
c00051e1:	85 c0                	test   eax,eax
c00051e3:	75 09                	jne    c00051ee <f_expand+0xc9>
c00051e5:	41                   	inc    ecx
c00051e6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051ea:	75 07                	jne    c00051f3 <f_expand+0xce>
c00051ec:	eb 1c                	jmp    c000520a <f_expand+0xe5>
c00051ee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00051f1:	31 c9                	xor    ecx,ecx
c00051f3:	39 fd                	cmp    ebp,edi
c00051f5:	75 c0                	jne    c00051b7 <f_expand+0x92>
c00051f7:	e9 64 ff ff ff       	jmp    c0005160 <f_expand+0x3b>
c00051fc:	be 02 00 00 00       	mov    esi,0x2
c0005201:	eb 78                	jmp    c000527b <f_expand+0x156>
c0005203:	be 01 00 00 00       	mov    esi,0x1
c0005208:	eb 71                	jmp    c000527b <f_expand+0x156>
c000520a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000520f:	74 2b                	je     c000523c <f_expand+0x117>
c0005211:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005214:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005218:	85 ed                	test   ebp,ebp
c000521a:	74 24                	je     c0005240 <f_expand+0x11b>
c000521c:	83 c9 ff             	or     ecx,0xffffffff
c000521f:	83 fd 01             	cmp    ebp,0x1
c0005222:	74 03                	je     c0005227 <f_expand+0x102>
c0005224:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005227:	89 fa                	mov    edx,edi
c0005229:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000522d:	e8 59 d4 ff ff       	call   c000268b <put_fat>
c0005232:	85 c0                	test   eax,eax
c0005234:	75 43                	jne    c0005279 <f_expand+0x154>
c0005236:	89 f8                	mov    eax,edi
c0005238:	4d                   	dec    ebp
c0005239:	47                   	inc    edi
c000523a:	eb dc                	jmp    c0005218 <f_expand+0xf3>
c000523c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000523f:	48                   	dec    eax
c0005240:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005244:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005249:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000524c:	74 2d                	je     c000527b <f_expand+0x156>
c000524e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005252:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005255:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005258:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000525c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000525f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005262:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005265:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005268:	39 c8                	cmp    eax,ecx
c000526a:	77 0f                	ja     c000527b <f_expand+0x156>
c000526c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005270:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005274:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005277:	eb 02                	jmp    c000527b <f_expand+0x156>
c0005279:	89 c6                	mov    esi,eax
c000527b:	83 c4 2c             	add    esp,0x2c
c000527e:	89 f0                	mov    eax,esi
c0005280:	5b                   	pop    ebx
c0005281:	5e                   	pop    esi
c0005282:	5f                   	pop    edi
c0005283:	5d                   	pop    ebp
c0005284:	c3                   	ret    

c0005285 <f_mkfs>:
c0005285:	55                   	push   ebp
c0005286:	57                   	push   edi
c0005287:	bf 0b 00 00 00       	mov    edi,0xb
c000528c:	56                   	push   esi
c000528d:	53                   	push   ebx
c000528e:	83 ec 4c             	sub    esp,0x4c
c0005291:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0005295:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c0005299:	8d 44 24 60          	lea    eax,[esp+0x60]
c000529d:	e8 9c ce ff ff       	call   c000213e <get_ldnumber>
c00052a2:	85 c0                	test   eax,eax
c00052a4:	0f 88 a6 07 00 00    	js     c0005a50 <f_mkfs+0x7cb>
c00052aa:	8b 14 85 a0 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb60]
c00052b1:	85 d2                	test   edx,edx
c00052b3:	74 03                	je     c00052b8 <f_mkfs+0x33>
c00052b5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052b8:	85 db                	test   ebx,ebx
c00052ba:	75 05                	jne    c00052c1 <f_mkfs+0x3c>
c00052bc:	bb 60 eb 01 c0       	mov    ebx,0xc001eb60
c00052c1:	83 ec 0c             	sub    esp,0xc
c00052c4:	0f b6 c0             	movzx  eax,al
c00052c7:	bf 03 00 00 00       	mov    edi,0x3
c00052cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052d4:	e8 e8 c9 ff ff       	call   c0001cc1 <disk_initialize>
c00052d9:	83 c4 10             	add    esp,0x10
c00052dc:	a8 01                	test   al,0x1
c00052de:	0f 85 6c 07 00 00    	jne    c0005a50 <f_mkfs+0x7cb>
c00052e4:	bf 0a 00 00 00       	mov    edi,0xa
c00052e9:	a8 04                	test   al,0x4
c00052eb:	0f 85 5f 07 00 00    	jne    c0005a50 <f_mkfs+0x7cb>
c00052f1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00052f4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00052f8:	85 c0                	test   eax,eax
c00052fa:	75 20                	jne    c000531c <f_mkfs+0x97>
c00052fc:	51                   	push   ecx
c00052fd:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005301:	50                   	push   eax
c0005302:	6a 03                	push   0x3
c0005304:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005308:	e8 e3 c9 ff ff       	call   c0001cf0 <disk_ioctl>
c000530d:	83 c4 10             	add    esp,0x10
c0005310:	85 c0                	test   eax,eax
c0005312:	74 08                	je     c000531c <f_mkfs+0x97>
c0005314:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000531c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005320:	8d 42 ff             	lea    eax,[edx-0x1]
c0005323:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005328:	77 04                	ja     c000532e <f_mkfs+0xa9>
c000532a:	85 c2                	test   edx,eax
c000532c:	74 08                	je     c0005336 <f_mkfs+0xb1>
c000532e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005336:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005339:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000533d:	48                   	dec    eax
c000533e:	3c 01                	cmp    al,0x1
c0005340:	76 05                	jbe    c0005347 <f_mkfs+0xc2>
c0005342:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005347:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000534a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000534e:	48                   	dec    eax
c000534f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005354:	77 07                	ja     c000535d <f_mkfs+0xd8>
c0005356:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000535b:	74 08                	je     c0005365 <f_mkfs+0xe0>
c000535d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005365:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005368:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000536e:	77 07                	ja     c0005377 <f_mkfs+0xf2>
c0005370:	8d 47 ff             	lea    eax,[edi-0x1]
c0005373:	85 f8                	test   eax,edi
c0005375:	74 02                	je     c0005379 <f_mkfs+0xf4>
c0005377:	31 ff                	xor    edi,edi
c0005379:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005381:	77 0a                	ja     c000538d <f_mkfs+0x108>
c0005383:	bf 11 00 00 00       	mov    edi,0x11
c0005388:	e9 c3 06 00 00       	jmp    c0005a50 <f_mkfs+0x7cb>
c000538d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000538f:	89 ee                	mov    esi,ebp
c0005391:	85 ed                	test   ebp,ebp
c0005393:	75 1b                	jne    c00053b0 <f_mkfs+0x12b>
c0005395:	83 ec 0c             	sub    esp,0xc
c0005398:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000539c:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053a1:	50                   	push   eax
c00053a2:	e8 b5 06 00 00       	call   c0005a5c <ff_memalloc>
c00053a7:	83 c4 10             	add    esp,0x10
c00053aa:	89 c6                	mov    esi,eax
c00053ac:	85 c0                	test   eax,eax
c00053ae:	74 d3                	je     c0005383 <f_mkfs+0xfe>
c00053b0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053b8:	52                   	push   edx
c00053b9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053bd:	50                   	push   eax
c00053be:	6a 01                	push   0x1
c00053c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053c4:	e8 27 c9 ff ff       	call   c0001cf0 <disk_ioctl>
c00053c9:	83 c4 10             	add    esp,0x10
c00053cc:	85 c0                	test   eax,eax
c00053ce:	0f 85 25 06 00 00    	jne    c00059f9 <f_mkfs+0x774>
c00053d4:	88 d8                	mov    al,bl
c00053d6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053de:	24 08                	and    al,0x8
c00053e0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053e4:	75 18                	jne    c00053fe <f_mkfs+0x179>
c00053e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053ea:	83 f8 3f             	cmp    eax,0x3f
c00053ed:	76 0f                	jbe    c00053fe <f_mkfs+0x179>
c00053ef:	83 e8 3f             	sub    eax,0x3f
c00053f2:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c00053fa:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00053fe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005402:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005406:	83 f8 7f             	cmp    eax,0x7f
c0005409:	0f 86 52 02 00 00    	jbe    c0005661 <f_mkfs+0x3dc>
c000540f:	b9 80 00 00 00       	mov    ecx,0x80
c0005414:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000541a:	77 05                	ja     c0005421 <f_mkfs+0x19c>
c000541c:	89 f9                	mov    ecx,edi
c000541e:	c1 e9 09             	shr    ecx,0x9
c0005421:	88 d8                	mov    al,bl
c0005423:	83 e0 01             	and    eax,0x1
c0005426:	80 e3 02             	and    bl,0x2
c0005429:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000542d:	74 0a                	je     c0005439 <f_mkfs+0x1b4>
c000542f:	84 c0                	test   al,al
c0005431:	0f 84 4c 01 00 00    	je     c0005583 <f_mkfs+0x2fe>
c0005437:	eb 38                	jmp    c0005471 <f_mkfs+0x1ec>
c0005439:	bf 13 00 00 00       	mov    edi,0x13
c000543e:	84 c0                	test   al,al
c0005440:	75 2f                	jne    c0005471 <f_mkfs+0x1ec>
c0005442:	e9 c9 05 00 00       	jmp    c0005a10 <f_mkfs+0x78b>
c0005447:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000544c:	0f 85 08 02 00 00    	jne    c000565a <f_mkfs+0x3d5>
c0005452:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005457:	0f 86 e1 01 00 00    	jbe    c000563e <f_mkfs+0x3b9>
c000545d:	85 c9                	test   ecx,ecx
c000545f:	0f 85 bd 05 00 00    	jne    c0005a22 <f_mkfs+0x79d>
c0005465:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005468:	83 f9 40             	cmp    ecx,0x40
c000546b:	0f 87 c1 05 00 00    	ja     c0005a32 <f_mkfs+0x7ad>
c0005471:	89 cf                	mov    edi,ecx
c0005473:	85 c9                	test   ecx,ecx
c0005475:	75 1d                	jne    c0005494 <f_mkfs+0x20f>
c0005477:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000547b:	ba 40 eb 01 c0       	mov    edx,0xc001eb40
c0005480:	c1 eb 0c             	shr    ebx,0xc
c0005483:	bf 01 00 00 00       	mov    edi,0x1
c0005488:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000548b:	66 85 c0             	test   ax,ax
c000548e:	0f 85 5f 01 00 00    	jne    c00055f3 <f_mkfs+0x36e>
c0005494:	31 d2                	xor    edx,edx
c0005496:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000549a:	f7 f7                	div    edi
c000549c:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054a1:	0f 86 5e 01 00 00    	jbe    c0005605 <f_mkfs+0x380>
c00054a7:	83 c0 02             	add    eax,0x2
c00054aa:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054af:	01 c0                	add    eax,eax
c00054b1:	05 ff 01 00 00       	add    eax,0x1ff
c00054b6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054be:	c1 e8 09             	shr    eax,0x9
c00054c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054c9:	c1 e0 05             	shl    eax,0x5
c00054cc:	c1 e8 09             	shr    eax,0x9
c00054cf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054d3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054e0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054ec:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c00054f1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00054f5:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00054f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00054fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005501:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005505:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005509:	f7 d8                	neg    eax
c000550b:	21 c3                	and    ebx,eax
c000550d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005511:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005516:	0f 85 fc 00 00 00    	jne    c0005618 <f_mkfs+0x393>
c000551c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005520:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005524:	89 f8                	mov    eax,edi
c0005526:	c1 e0 04             	shl    eax,0x4
c0005529:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000552d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005531:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005535:	0f 82 26 01 00 00    	jb     c0005661 <f_mkfs+0x3dc>
c000553b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000553f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005543:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005547:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000554c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005550:	29 d0                	sub    eax,edx
c0005552:	31 d2                	xor    edx,edx
c0005554:	f7 f7                	div    edi
c0005556:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000555b:	89 c3                	mov    ebx,eax
c000555d:	0f 85 e4 fe ff ff    	jne    c0005447 <f_mkfs+0x1c2>
c0005563:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005568:	0f 87 02 01 00 00    	ja     c0005670 <f_mkfs+0x3eb>
c000556e:	85 c9                	test   ecx,ecx
c0005570:	0f 85 eb 00 00 00    	jne    c0005661 <f_mkfs+0x3dc>
c0005576:	83 ff 01             	cmp    edi,0x1
c0005579:	0f 86 e2 00 00 00    	jbe    c0005661 <f_mkfs+0x3dc>
c000557f:	89 f9                	mov    ecx,edi
c0005581:	d1 e9                	shr    ecx,1
c0005583:	89 cb                	mov    ebx,ecx
c0005585:	85 c9                	test   ecx,ecx
c0005587:	75 26                	jne    c00055af <f_mkfs+0x32a>
c0005589:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000558d:	ba 50 eb 01 c0       	mov    edx,0xc001eb50
c0005592:	c1 eb 11             	shr    ebx,0x11
c0005595:	b9 01 00 00 00       	mov    ecx,0x1
c000559a:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000559d:	66 85 c0             	test   ax,ax
c00055a0:	74 0b                	je     c00055ad <f_mkfs+0x328>
c00055a2:	83 c2 02             	add    edx,0x2
c00055a5:	39 d8                	cmp    eax,ebx
c00055a7:	77 04                	ja     c00055ad <f_mkfs+0x328>
c00055a9:	01 c9                	add    ecx,ecx
c00055ab:	eb ed                	jmp    c000559a <f_mkfs+0x315>
c00055ad:	31 db                	xor    ebx,ebx
c00055af:	31 d2                	xor    edx,edx
c00055b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055b5:	f7 f1                	div    ecx
c00055b7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055be:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055c3:	c1 ea 09             	shr    edx,0x9
c00055c6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055cb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055cf:	0f 87 8c 00 00 00    	ja     c0005661 <f_mkfs+0x3dc>
c00055d5:	89 cf                	mov    edi,ecx
c00055d7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055df:	89 d9                	mov    ecx,ebx
c00055e1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055e9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055ee:	e9 e0 fe ff ff       	jmp    c00054d3 <f_mkfs+0x24e>
c00055f3:	83 c2 02             	add    edx,0x2
c00055f6:	39 d8                	cmp    eax,ebx
c00055f8:	0f 87 96 fe ff ff    	ja     c0005494 <f_mkfs+0x20f>
c00055fe:	01 ff                	add    edi,edi
c0005600:	e9 83 fe ff ff       	jmp    c0005488 <f_mkfs+0x203>
c0005605:	8d 04 40             	lea    eax,[eax+eax*2]
c0005608:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000560d:	40                   	inc    eax
c000560e:	d1 e8                	shr    eax,1
c0005610:	83 c0 03             	add    eax,0x3
c0005613:	e9 99 fe ff ff       	jmp    c00054b1 <f_mkfs+0x22c>
c0005618:	31 d2                	xor    edx,edx
c000561a:	89 d8                	mov    eax,ebx
c000561c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005620:	85 d2                	test   edx,edx
c0005622:	74 09                	je     c000562d <f_mkfs+0x3a8>
c0005624:	4b                   	dec    ebx
c0005625:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005629:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000562d:	89 d8                	mov    eax,ebx
c000562f:	31 d2                	xor    edx,edx
c0005631:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005635:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005639:	e9 e6 fe ff ff       	jmp    c0005524 <f_mkfs+0x29f>
c000563e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005643:	77 2b                	ja     c0005670 <f_mkfs+0x3eb>
c0005645:	85 c9                	test   ecx,ecx
c0005647:	75 18                	jne    c0005661 <f_mkfs+0x3dc>
c0005649:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000564c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005652:	0f 86 19 fe ff ff    	jbe    c0005471 <f_mkfs+0x1ec>
c0005658:	eb 07                	jmp    c0005661 <f_mkfs+0x3dc>
c000565a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000565f:	76 0a                	jbe    c000566b <f_mkfs+0x3e6>
c0005661:	bf 0e 00 00 00       	mov    edi,0xe
c0005666:	e9 a5 03 00 00       	jmp    c0005a10 <f_mkfs+0x78b>
c000566b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005670:	31 d2                	xor    edx,edx
c0005672:	b9 00 02 00 00       	mov    ecx,0x200
c0005677:	89 f0                	mov    eax,esi
c0005679:	e8 d2 c6 ff ff       	call   c0001d50 <mem_set>
c000567e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005683:	ba f2 ea 01 c0       	mov    edx,0xc001eaf2
c0005688:	89 f0                	mov    eax,esi
c000568a:	e8 ac c6 ff ff       	call   c0001d3b <mem_cpy>
c000568f:	8d 46 0b             	lea    eax,[esi+0xb]
c0005692:	ba 00 02 00 00       	mov    edx,0x200
c0005697:	e8 98 c6 ff ff       	call   c0001d34 <st_word>
c000569c:	89 f8                	mov    eax,edi
c000569e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056a3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056a6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056a9:	e8 86 c6 ff ff       	call   c0001d34 <st_word>
c00056ae:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056b2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056b7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ba:	75 08                	jne    c00056c4 <f_mkfs+0x43f>
c00056bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056c8:	8d 46 11             	lea    eax,[esi+0x11]
c00056cb:	e8 64 c6 ff ff       	call   c0001d34 <st_word>
c00056d0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056d4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056da:	77 0a                	ja     c00056e6 <f_mkfs+0x461>
c00056dc:	8d 46 13             	lea    eax,[esi+0x13]
c00056df:	e8 50 c6 ff ff       	call   c0001d34 <st_word>
c00056e4:	eb 08                	jmp    c00056ee <f_mkfs+0x469>
c00056e6:	8d 46 20             	lea    eax,[esi+0x20]
c00056e9:	e8 4a c6 ff ff       	call   c0001d38 <st_dword>
c00056ee:	8d 46 18             	lea    eax,[esi+0x18]
c00056f1:	ba 3f 00 00 00       	mov    edx,0x3f
c00056f6:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c00056fa:	e8 35 c6 ff ff       	call   c0001d34 <st_word>
c00056ff:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005702:	ba ff 00 00 00       	mov    edx,0xff
c0005707:	e8 28 c6 ff ff       	call   c0001d34 <st_word>
c000570c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000570f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005713:	e8 20 c6 ff ff       	call   c0001d38 <st_dword>
c0005718:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000571d:	75 57                	jne    c0005776 <f_mkfs+0x4f1>
c000571f:	8d 46 43             	lea    eax,[esi+0x43]
c0005722:	ba 00 00 21 50       	mov    edx,0x50210000
c0005727:	e8 0c c6 ff ff       	call   c0001d38 <st_dword>
c000572c:	8d 46 24             	lea    eax,[esi+0x24]
c000572f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005733:	e8 00 c6 ff ff       	call   c0001d38 <st_dword>
c0005738:	8d 46 2c             	lea    eax,[esi+0x2c]
c000573b:	ba 02 00 00 00       	mov    edx,0x2
c0005740:	e8 f3 c5 ff ff       	call   c0001d38 <st_dword>
c0005745:	8d 46 30             	lea    eax,[esi+0x30]
c0005748:	ba 01 00 00 00       	mov    edx,0x1
c000574d:	e8 e2 c5 ff ff       	call   c0001d34 <st_word>
c0005752:	8d 46 32             	lea    eax,[esi+0x32]
c0005755:	ba 06 00 00 00       	mov    edx,0x6
c000575a:	e8 d5 c5 ff ff       	call   c0001d34 <st_word>
c000575f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005763:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005767:	8d 46 47             	lea    eax,[esi+0x47]
c000576a:	b9 13 00 00 00       	mov    ecx,0x13
c000576f:	ba fe ea 01 c0       	mov    edx,0xc001eafe
c0005774:	eb 2f                	jmp    c00057a5 <f_mkfs+0x520>
c0005776:	8d 46 27             	lea    eax,[esi+0x27]
c0005779:	ba 00 00 21 50       	mov    edx,0x50210000
c000577e:	e8 b5 c5 ff ff       	call   c0001d38 <st_dword>
c0005783:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005788:	8d 46 16             	lea    eax,[esi+0x16]
c000578b:	e8 a4 c5 ff ff       	call   c0001d34 <st_word>
c0005790:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c0005794:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c0005798:	8d 46 2b             	lea    eax,[esi+0x2b]
c000579b:	b9 13 00 00 00       	mov    ecx,0x13
c00057a0:	ba 12 eb 01 c0       	mov    edx,0xc001eb12
c00057a5:	e8 91 c5 ff ff       	call   c0001d3b <mem_cpy>
c00057aa:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057b0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057b9:	e8 76 c5 ff ff       	call   c0001d34 <st_word>
c00057be:	6a 01                	push   0x1
c00057c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057c4:	56                   	push   esi
c00057c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057c9:	e8 0c c5 ff ff       	call   c0001cda <disk_write>
c00057ce:	83 c4 10             	add    esp,0x10
c00057d1:	85 c0                	test   eax,eax
c00057d3:	0f 85 20 02 00 00    	jne    c00059f9 <f_mkfs+0x774>
c00057d9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057de:	0f 85 98 00 00 00    	jne    c000587c <f_mkfs+0x5f7>
c00057e4:	6a 01                	push   0x1
c00057e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057ea:	83 c0 06             	add    eax,0x6
c00057ed:	50                   	push   eax
c00057ee:	56                   	push   esi
c00057ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057f3:	e8 e2 c4 ff ff       	call   c0001cda <disk_write>
c00057f8:	b9 00 02 00 00       	mov    ecx,0x200
c00057fd:	31 d2                	xor    edx,edx
c00057ff:	89 f0                	mov    eax,esi
c0005801:	e8 4a c5 ff ff       	call   c0001d50 <mem_set>
c0005806:	ba 52 52 61 41       	mov    edx,0x41615252
c000580b:	89 f0                	mov    eax,esi
c000580d:	e8 26 c5 ff ff       	call   c0001d38 <st_dword>
c0005812:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005818:	ba 72 72 41 61       	mov    edx,0x61417272
c000581d:	e8 16 c5 ff ff       	call   c0001d38 <st_dword>
c0005822:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005825:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000582b:	e8 08 c5 ff ff       	call   c0001d38 <st_dword>
c0005830:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005836:	ba 02 00 00 00       	mov    edx,0x2
c000583b:	e8 f8 c4 ff ff       	call   c0001d38 <st_dword>
c0005840:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005845:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000584b:	e8 e4 c4 ff ff       	call   c0001d34 <st_word>
c0005850:	6a 01                	push   0x1
c0005852:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005856:	83 c0 07             	add    eax,0x7
c0005859:	50                   	push   eax
c000585a:	56                   	push   esi
c000585b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000585f:	e8 76 c4 ff ff       	call   c0001cda <disk_write>
c0005864:	83 c4 20             	add    esp,0x20
c0005867:	6a 01                	push   0x1
c0005869:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000586d:	40                   	inc    eax
c000586e:	50                   	push   eax
c000586f:	56                   	push   esi
c0005870:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005874:	e8 61 c4 ff ff       	call   c0001cda <disk_write>
c0005879:	83 c4 10             	add    esp,0x10
c000587c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005880:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005884:	c1 e8 09             	shr    eax,0x9
c0005887:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000588d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005891:	31 d2                	xor    edx,edx
c0005893:	31 db                	xor    ebx,ebx
c0005895:	89 f0                	mov    eax,esi
c0005897:	e8 b4 c4 ff ff       	call   c0001d50 <mem_set>
c000589c:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058a1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058a9:	0f 94 c3             	sete   bl
c00058ac:	4b                   	dec    ebx
c00058ad:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058b3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058b9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058be:	75 21                	jne    c00058e1 <f_mkfs+0x65c>
c00058c0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058c5:	89 f0                	mov    eax,esi
c00058c7:	e8 6c c4 ff ff       	call   c0001d38 <st_dword>
c00058cc:	8d 46 04             	lea    eax,[esi+0x4]
c00058cf:	83 ca ff             	or     edx,0xffffffff
c00058d2:	e8 61 c4 ff ff       	call   c0001d38 <st_dword>
c00058d7:	8d 46 08             	lea    eax,[esi+0x8]
c00058da:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058df:	eb 04                	jmp    c00058e5 <f_mkfs+0x660>
c00058e1:	89 da                	mov    edx,ebx
c00058e3:	89 f0                	mov    eax,esi
c00058e5:	e8 4e c4 ff ff       	call   c0001d38 <st_dword>
c00058ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00058f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00058fa:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00058fe:	76 08                	jbe    c0005908 <f_mkfs+0x683>
c0005900:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005904:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005908:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000590c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005910:	56                   	push   esi
c0005911:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005915:	e8 c0 c3 ff ff       	call   c0001cda <disk_write>
c000591a:	83 c4 10             	add    esp,0x10
c000591d:	85 c0                	test   eax,eax
c000591f:	0f 85 d4 00 00 00    	jne    c00059f9 <f_mkfs+0x774>
c0005925:	b9 00 02 00 00       	mov    ecx,0x200
c000592a:	31 d2                	xor    edx,edx
c000592c:	89 f0                	mov    eax,esi
c000592e:	e8 1d c4 ff ff       	call   c0001d50 <mem_set>
c0005933:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005937:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000593b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000593f:	75 b1                	jne    c00058f2 <f_mkfs+0x66d>
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000594d:	40                   	inc    eax
c000594e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005952:	0f 87 61 ff ff ff    	ja     c00058b9 <f_mkfs+0x634>
c0005958:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000595d:	74 04                	je     c0005963 <f_mkfs+0x6de>
c000595f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005963:	89 fb                	mov    ebx,edi
c0005965:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005969:	76 04                	jbe    c000596f <f_mkfs+0x6ea>
c000596b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000596f:	53                   	push   ebx
c0005970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005974:	56                   	push   esi
c0005975:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005979:	e8 5c c3 ff ff       	call   c0001cda <disk_write>
c000597e:	83 c4 10             	add    esp,0x10
c0005981:	85 c0                	test   eax,eax
c0005983:	75 74                	jne    c00059f9 <f_mkfs+0x774>
c0005985:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005989:	29 df                	sub    edi,ebx
c000598b:	75 d6                	jne    c0005963 <f_mkfs+0x6de>
c000598d:	b1 0c                	mov    cl,0xc
c000598f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005994:	74 18                	je     c00059ae <f_mkfs+0x729>
c0005996:	b1 06                	mov    cl,0x6
c0005998:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059a0:	77 0c                	ja     c00059ae <f_mkfs+0x729>
c00059a2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059a7:	0f 94 c1             	sete   cl
c00059aa:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059ae:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059b3:	75 2d                	jne    c00059e2 <f_mkfs+0x75d>
c00059b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059b9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059c1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059c5:	0f b6 c9             	movzx  ecx,cl
c00059c8:	83 ec 0c             	sub    esp,0xc
c00059cb:	56                   	push   esi
c00059cc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059d4:	e8 4c d3 ff ff       	call   c0002d25 <create_partition>
c00059d9:	83 c4 10             	add    esp,0x10
c00059dc:	89 c7                	mov    edi,eax
c00059de:	85 c0                	test   eax,eax
c00059e0:	75 2e                	jne    c0005a10 <f_mkfs+0x78b>
c00059e2:	31 ff                	xor    edi,edi
c00059e4:	50                   	push   eax
c00059e5:	6a 00                	push   0x0
c00059e7:	6a 00                	push   0x0
c00059e9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059ed:	e8 fe c2 ff ff       	call   c0001cf0 <disk_ioctl>
c00059f2:	83 c4 10             	add    esp,0x10
c00059f5:	85 c0                	test   eax,eax
c00059f7:	74 17                	je     c0005a10 <f_mkfs+0x78b>
c00059f9:	85 ed                	test   ebp,ebp
c00059fb:	75 0c                	jne    c0005a09 <f_mkfs+0x784>
c00059fd:	83 ec 0c             	sub    esp,0xc
c0005a00:	56                   	push   esi
c0005a01:	e8 6e 00 00 00       	call   c0005a74 <ff_memfree>
c0005a06:	83 c4 10             	add    esp,0x10
c0005a09:	bf 01 00 00 00       	mov    edi,0x1
c0005a0e:	eb 40                	jmp    c0005a50 <f_mkfs+0x7cb>
c0005a10:	85 ed                	test   ebp,ebp
c0005a12:	75 3c                	jne    c0005a50 <f_mkfs+0x7cb>
c0005a14:	83 ec 0c             	sub    esp,0xc
c0005a17:	56                   	push   esi
c0005a18:	e8 57 00 00 00       	call   c0005a74 <ff_memfree>
c0005a1d:	83 c4 10             	add    esp,0x10
c0005a20:	eb 2e                	jmp    c0005a50 <f_mkfs+0x7cb>
c0005a22:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a27:	0f 85 56 fb ff ff    	jne    c0005583 <f_mkfs+0x2fe>
c0005a2d:	e9 2f fc ff ff       	jmp    c0005661 <f_mkfs+0x3dc>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 4c fb ff ff    	jne    c0005589 <f_mkfs+0x304>
c0005a3d:	89 cf                	mov    edi,ecx
c0005a3f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a45:	0f 86 49 fa ff ff    	jbe    c0005494 <f_mkfs+0x20f>
c0005a4b:	e9 11 fc ff ff       	jmp    c0005661 <f_mkfs+0x3dc>
c0005a50:	83 c4 4c             	add    esp,0x4c
c0005a53:	89 f8                	mov    eax,edi
c0005a55:	5b                   	pop    ebx
c0005a56:	5e                   	pop    esi
c0005a57:	5f                   	pop    edi
c0005a58:	5d                   	pop    ebp
c0005a59:	c3                   	ret    
c0005a5a:	66 90                	xchg   ax,ax

c0005a5c <ff_memalloc>:
c0005a5c:	83 ec 0c             	sub    esp,0xc
c0005a5f:	83 ec 0c             	sub    esp,0xc
c0005a62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a66:	e8 fa 1d 00 00       	call   c0007865 <malloc>
c0005a6b:	83 c4 10             	add    esp,0x10
c0005a6e:	83 c4 0c             	add    esp,0xc
c0005a71:	c3                   	ret    
c0005a72:	66 90                	xchg   ax,ax

c0005a74 <ff_memfree>:
c0005a74:	83 ec 0c             	sub    esp,0xc
c0005a77:	83 ec 0c             	sub    esp,0xc
c0005a7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a7e:	e8 f2 1d 00 00       	call   c0007875 <free>
c0005a83:	83 c4 10             	add    esp,0x10
c0005a86:	90                   	nop
c0005a87:	83 c4 0c             	add    esp,0xc
c0005a8a:	c3                   	ret    
c0005a8b:	90                   	nop

c0005a8c <ff_uni2oem>:
c0005a8c:	83 ec 14             	sub    esp,0x14
c0005a8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005a93:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005a97:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005a9e:	c7 44 24 0c 40 ef 01 c0 	mov    DWORD PTR [esp+0xc],0xc001ef40
c0005aa6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005aab:	77 0b                	ja     c0005ab8 <ff_uni2oem+0x2c>
c0005aad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ab6:	eb 68                	jmp    c0005b20 <ff_uni2oem+0x94>
c0005ab8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ac0:	77 5e                	ja     c0005b20 <ff_uni2oem+0x94>
c0005ac2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ac8:	75 56                	jne    c0005b20 <ff_uni2oem+0x94>
c0005aca:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ad1:	eb 0d                	jmp    c0005ae0 <ff_uni2oem+0x54>
c0005ad3:	90                   	nop
c0005ad4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ad9:	40                   	inc    eax
c0005ada:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005adf:	90                   	nop
c0005ae0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005ae6:	77 24                	ja     c0005b0c <ff_uni2oem+0x80>
c0005ae8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005aed:	25 ff ff 00 00       	and    eax,0xffff
c0005af2:	01 c0                	add    eax,eax
c0005af4:	89 c2                	mov    edx,eax
c0005af6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005afa:	01 d0                	add    eax,edx
c0005afc:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005aff:	25 ff ff 00 00       	and    eax,0xffff
c0005b04:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b08:	75 ca                	jne    c0005ad4 <ff_uni2oem+0x48>
c0005b0a:	66 90                	xchg   ax,ax
c0005b0c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b11:	83 e8 80             	sub    eax,0xffffff80
c0005b14:	25 ff 00 00 00       	and    eax,0xff
c0005b19:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b1e:	66 90                	xchg   ax,ax
c0005b20:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b25:	83 c4 14             	add    esp,0x14
c0005b28:	c3                   	ret    
c0005b29:	8d 76 00             	lea    esi,[esi+0x0]

c0005b2c <ff_oem2uni>:
c0005b2c:	83 ec 18             	sub    esp,0x18
c0005b2f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b37:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b3c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b40:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b47:	c7 44 24 10 40 ef 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ef40
c0005b4f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b55:	77 0d                	ja     c0005b64 <ff_oem2uni+0x38>
c0005b57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b5b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b60:	eb 36                	jmp    c0005b98 <ff_oem2uni+0x6c>
c0005b62:	66 90                	xchg   ax,ax
c0005b64:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b6a:	75 2c                	jne    c0005b98 <ff_oem2uni+0x6c>
c0005b6c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b73:	77 23                	ja     c0005b98 <ff_oem2uni+0x6c>
c0005b75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b79:	25 ff ff 00 00       	and    eax,0xffff
c0005b7e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b83:	01 c0                	add    eax,eax
c0005b85:	89 c2                	mov    edx,eax
c0005b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b8b:	01 d0                	add    eax,edx
c0005b8d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b90:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b95:	8d 76 00             	lea    esi,[esi+0x0]
c0005b98:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005b9d:	83 c4 18             	add    esp,0x18
c0005ba0:	c3                   	ret    
c0005ba1:	8d 76 00             	lea    esi,[esi+0x0]

c0005ba4 <ff_wtoupper>:
c0005ba4:	83 ec 10             	sub    esp,0x10
c0005ba7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005baf:	0f 87 77 01 00 00    	ja     c0005d2c <ff_wtoupper+0x188>
c0005bb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bb9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bbe:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bc5:	77 09                	ja     c0005bd0 <ff_wtoupper+0x2c>
c0005bc7:	b8 40 ed 01 c0       	mov    eax,0xc001ed40
c0005bcc:	eb 0a                	jmp    c0005bd8 <ff_wtoupper+0x34>
c0005bce:	66 90                	xchg   ax,ax
c0005bd0:	b8 80 ec 01 c0       	mov    eax,0xc001ec80
c0005bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005be0:	8d 50 02             	lea    edx,[eax+0x2]
c0005be3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005be7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bea:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bef:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005bf5:	0f 84 21 01 00 00    	je     c0005d1c <ff_wtoupper+0x178>
c0005bfb:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c00:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c05:	0f 82 11 01 00 00    	jb     c0005d1c <ff_wtoupper+0x178>
c0005c0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c0f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c16:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c19:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c1e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c23:	66 c1 e8 08          	shr    ax,0x8
c0005c27:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c2c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c33:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c38:	31 d2                	xor    edx,edx
c0005c3a:	66 89 c2             	mov    dx,ax
c0005c3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c41:	31 c9                	xor    ecx,ecx
c0005c43:	66 89 c1             	mov    cx,ax
c0005c46:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c4b:	25 ff ff 00 00       	and    eax,0xffff
c0005c50:	01 c8                	add    eax,ecx
c0005c52:	39 c2                	cmp    edx,eax
c0005c54:	0f 8d 9a 00 00 00    	jge    c0005cf4 <ff_wtoupper+0x150>
c0005c5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c5e:	25 ff ff 00 00       	and    eax,0xffff
c0005c63:	83 f8 08             	cmp    eax,0x8
c0005c66:	0f 87 ac 00 00 00    	ja     c0005d18 <ff_wtoupper+0x174>
c0005c6c:	8b 04 85 40 ec 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe13c0]
c0005c73:	ff e0                	jmp    eax
c0005c75:	8d 76 00             	lea    esi,[esi+0x0]
c0005c78:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c7d:	31 d2                	xor    edx,edx
c0005c7f:	66 89 c2             	mov    dx,ax
c0005c82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c86:	25 ff ff 00 00       	and    eax,0xffff
c0005c8b:	29 c2                	sub    edx,eax
c0005c8d:	89 d0                	mov    eax,edx
c0005c8f:	01 c0                	add    eax,eax
c0005c91:	89 c2                	mov    edx,eax
c0005c93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c97:	01 d0                	add    eax,edx
c0005c99:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c9c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ca1:	eb 4d                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005ca3:	90                   	nop
c0005ca4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ca9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cad:	83 e0 01             	and    eax,0x1
c0005cb0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cb5:	eb 39                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cb7:	90                   	nop
c0005cb8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cbe:	eb 30                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cc0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cc6:	eb 28                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cc8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cce:	eb 20                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005cd6:	eb 18                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cd8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cde:	eb 10                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005ce6:	eb 08                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005ce8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cef:	90                   	nop
c0005cf0:	eb 26                	jmp    c0005d18 <ff_wtoupper+0x174>
c0005cf2:	66 90                	xchg   ax,ax
c0005cf4:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005cfa:	0f 85 dc fe ff ff    	jne    c0005bdc <ff_wtoupper+0x38>
c0005d00:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d05:	25 ff ff 00 00       	and    eax,0xffff
c0005d0a:	01 c0                	add    eax,eax
c0005d0c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d10:	e9 c7 fe ff ff       	jmp    c0005bdc <ff_wtoupper+0x38>
c0005d15:	8d 76 00             	lea    esi,[esi+0x0]
c0005d18:	90                   	nop
c0005d19:	8d 76 00             	lea    esi,[esi+0x0]
c0005d1c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d21:	25 ff ff 00 00       	and    eax,0xffff
c0005d26:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d2a:	66 90                	xchg   ax,ax
c0005d2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d30:	83 c4 10             	add    esp,0x10
c0005d33:	c3                   	ret    

c0005d34 <utf2ucs>:
c0005d34:	57                   	push   edi
c0005d35:	31 c9                	xor    ecx,ecx
c0005d37:	56                   	push   esi
c0005d38:	89 d7                	mov    edi,edx
c0005d3a:	53                   	push   ebx
c0005d3b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d3f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d43:	89 de                	mov    esi,ebx
c0005d45:	c1 fe 08             	sar    esi,0x8
c0005d48:	89 f2                	mov    edx,esi
c0005d4a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d4d:	41                   	inc    ecx
c0005d4e:	85 db                	test   ebx,ebx
c0005d50:	75 e9                	jne    c0005d3b <utf2ucs+0x7>
c0005d52:	5b                   	pop    ebx
c0005d53:	5e                   	pop    esi
c0005d54:	5f                   	pop    edi
c0005d55:	c3                   	ret    

c0005d56 <ucs2utfn>:
c0005d56:	83 e1 fe             	and    ecx,0xfffffffe
c0005d59:	01 d1                	add    ecx,edx
c0005d5b:	39 d1                	cmp    ecx,edx
c0005d5d:	75 04                	jne    c0005d63 <ucs2utfn+0xd>
c0005d5f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d62:	c3                   	ret    
c0005d63:	57                   	push   edi
c0005d64:	56                   	push   esi
c0005d65:	53                   	push   ebx
c0005d66:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d69:	83 c2 02             	add    edx,0x2
c0005d6c:	89 de                	mov    esi,ebx
c0005d6e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d72:	c1 e6 08             	shl    esi,0x8
c0005d75:	09 f3                	or     ebx,esi
c0005d77:	83 fb 3b             	cmp    ebx,0x3b
c0005d7a:	74 51                	je     c0005dcd <ucs2utfn+0x77>
c0005d7c:	83 fb 7f             	cmp    ebx,0x7f
c0005d7f:	7f 05                	jg     c0005d86 <ucs2utfn+0x30>
c0005d81:	88 18                	mov    BYTE PTR [eax],bl
c0005d83:	40                   	inc    eax
c0005d84:	eb 43                	jmp    c0005dc9 <ucs2utfn+0x73>
c0005d86:	89 de                	mov    esi,ebx
c0005d88:	89 df                	mov    edi,ebx
c0005d8a:	c1 fe 06             	sar    esi,0x6
c0005d8d:	83 e7 3f             	and    edi,0x3f
c0005d90:	83 cf 80             	or     edi,0xffffff80
c0005d93:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005d99:	7f 12                	jg     c0005dad <ucs2utfn+0x57>
c0005d9b:	89 f3                	mov    ebx,esi
c0005d9d:	83 c0 02             	add    eax,0x2
c0005da0:	83 cb c0             	or     ebx,0xffffffc0
c0005da3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005da6:	89 fb                	mov    ebx,edi
c0005da8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dab:	eb 1c                	jmp    c0005dc9 <ucs2utfn+0x73>
c0005dad:	c1 fb 0c             	sar    ebx,0xc
c0005db0:	83 e6 3f             	and    esi,0x3f
c0005db3:	83 cb e0             	or     ebx,0xffffffe0
c0005db6:	83 c0 03             	add    eax,0x3
c0005db9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dbc:	89 f3                	mov    ebx,esi
c0005dbe:	83 cb 80             	or     ebx,0xffffff80
c0005dc1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dc4:	89 fb                	mov    ebx,edi
c0005dc6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dc9:	39 d1                	cmp    ecx,edx
c0005dcb:	75 99                	jne    c0005d66 <ucs2utfn+0x10>
c0005dcd:	5b                   	pop    ebx
c0005dce:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005dd1:	5e                   	pop    esi
c0005dd2:	5f                   	pop    edi
c0005dd3:	c3                   	ret    

c0005dd4 <isjoliet>:
c0005dd4:	31 d2                	xor    edx,edx
c0005dd6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005dd9:	75 22                	jne    c0005dfd <isjoliet+0x29>
c0005ddb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005ddf:	75 1c                	jne    c0005dfd <isjoliet+0x29>
c0005de1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005de4:	ba 02 00 00 00       	mov    edx,0x2
c0005de9:	3c 43                	cmp    al,0x43
c0005deb:	74 10                	je     c0005dfd <isjoliet+0x29>
c0005ded:	ba 03 00 00 00       	mov    edx,0x3
c0005df2:	3c 45                	cmp    al,0x45
c0005df4:	74 07                	je     c0005dfd <isjoliet+0x29>
c0005df6:	31 d2                	xor    edx,edx
c0005df8:	3c 40                	cmp    al,0x40
c0005dfa:	0f 94 c2             	sete   dl
c0005dfd:	89 d0                	mov    eax,edx
c0005dff:	c3                   	ret    

c0005e00 <htohl_32>:
c0005e00:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e02:	c3                   	ret    

c0005e03 <iso_733>:
c0005e03:	eb fb                	jmp    c0005e00 <htohl_32>

c0005e05 <bgrad_cache>:
c0005e05:	83 fa 0e             	cmp    edx,0xe
c0005e08:	77 16                	ja     c0005e20 <bgrad_cache+0x1b>
c0005e0a:	53                   	push   ebx
c0005e0b:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e0e:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e12:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e15:	42                   	inc    edx
c0005e16:	83 fa 0f             	cmp    edx,0xf
c0005e19:	75 f3                	jne    c0005e0e <bgrad_cache+0x9>
c0005e1b:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e1e:	5b                   	pop    ebx
c0005e1f:	c3                   	ret    
c0005e20:	c3                   	ret    

c0005e21 <ucscompare>:
c0005e21:	55                   	push   ebp
c0005e22:	57                   	push   edi
c0005e23:	89 c7                	mov    edi,eax
c0005e25:	56                   	push   esi
c0005e26:	89 d6                	mov    esi,edx
c0005e28:	53                   	push   ebx
c0005e29:	31 d2                	xor    edx,edx
c0005e2b:	83 ec 1c             	sub    esp,0x1c
c0005e2e:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e32:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e37:	c1 e3 08             	shl    ebx,0x8
c0005e3a:	09 c3                	or     ebx,eax
c0005e3c:	39 ca                	cmp    edx,ecx
c0005e3e:	7d 42                	jge    c0005e82 <ucscompare+0x61>
c0005e40:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e44:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e49:	c1 e0 08             	shl    eax,0x8
c0005e4c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e50:	09 e8                	or     eax,ebp
c0005e52:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e56:	83 f8 3b             	cmp    eax,0x3b
c0005e59:	74 27                	je     c0005e82 <ucscompare+0x61>
c0005e5b:	83 ec 0c             	sub    esp,0xc
c0005e5e:	50                   	push   eax
c0005e5f:	e8 5c aa ff ff       	call   c00008c0 <tolower>
c0005e64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005e67:	89 c5                	mov    ebp,eax
c0005e69:	e8 52 aa ff ff       	call   c00008c0 <tolower>
c0005e6e:	83 c4 10             	add    esp,0x10
c0005e71:	39 c5                	cmp    ebp,eax
c0005e73:	75 20                	jne    c0005e95 <ucscompare+0x74>
c0005e75:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005e79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005e7d:	83 c2 02             	add    edx,0x2
c0005e80:	eb ac                	jmp    c0005e2e <ucscompare+0xd>
c0005e82:	85 db                	test   ebx,ebx
c0005e84:	0f 95 c2             	setne  dl
c0005e87:	31 c0                	xor    eax,eax
c0005e89:	83 fb 2f             	cmp    ebx,0x2f
c0005e8c:	0f 95 c0             	setne  al
c0005e8f:	21 d0                	and    eax,edx
c0005e91:	f7 d8                	neg    eax
c0005e93:	eb 03                	jmp    c0005e98 <ucscompare+0x77>
c0005e95:	83 c8 ff             	or     eax,0xffffffff
c0005e98:	83 c4 1c             	add    esp,0x1c
c0005e9b:	5b                   	pop    ebx
c0005e9c:	5e                   	pop    esi
c0005e9d:	5f                   	pop    edi
c0005e9e:	5d                   	pop    ebp
c0005e9f:	c3                   	ret    

c0005ea0 <fncompare>:
c0005ea0:	55                   	push   ebp
c0005ea1:	57                   	push   edi
c0005ea2:	89 c7                	mov    edi,eax
c0005ea4:	56                   	push   esi
c0005ea5:	89 ce                	mov    esi,ecx
c0005ea7:	53                   	push   ebx
c0005ea8:	31 db                	xor    ebx,ebx
c0005eaa:	83 ec 1c             	sub    esp,0x1c
c0005ead:	39 d3                	cmp    ebx,edx
c0005eaf:	7d 43                	jge    c0005ef4 <fncompare+0x54>
c0005eb1:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005eb5:	3c 3b                	cmp    al,0x3b
c0005eb7:	74 3b                	je     c0005ef4 <fncompare+0x54>
c0005eb9:	3c 2e                	cmp    al,0x2e
c0005ebb:	75 0e                	jne    c0005ecb <fncompare+0x2b>
c0005ebd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005ec0:	39 d9                	cmp    ecx,ebx
c0005ec2:	74 30                	je     c0005ef4 <fncompare+0x54>
c0005ec4:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005ec9:	74 29                	je     c0005ef4 <fncompare+0x54>
c0005ecb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ecf:	83 ec 0c             	sub    esp,0xc
c0005ed2:	50                   	push   eax
c0005ed3:	e8 e8 a9 ff ff       	call   c00008c0 <tolower>
c0005ed8:	89 c5                	mov    ebp,eax
c0005eda:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005ede:	89 04 24             	mov    DWORD PTR [esp],eax
c0005ee1:	e8 da a9 ff ff       	call   c00008c0 <tolower>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	39 c5                	cmp    ebp,eax
c0005eeb:	75 1d                	jne    c0005f0a <fncompare+0x6a>
c0005eed:	43                   	inc    ebx
c0005eee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005ef2:	eb b9                	jmp    c0005ead <fncompare+0xd>
c0005ef4:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005ef7:	84 d2                	test   dl,dl
c0005ef9:	0f 95 c1             	setne  cl
c0005efc:	31 c0                	xor    eax,eax
c0005efe:	80 fa 2f             	cmp    dl,0x2f
c0005f01:	0f 95 c0             	setne  al
c0005f04:	21 c8                	and    eax,ecx
c0005f06:	f7 d8                	neg    eax
c0005f08:	eb 03                	jmp    c0005f0d <fncompare+0x6d>
c0005f0a:	83 c8 ff             	or     eax,0xffffffff
c0005f0d:	83 c4 1c             	add    esp,0x1c
c0005f10:	5b                   	pop    ebx
c0005f11:	5e                   	pop    esi
c0005f12:	5f                   	pop    edi
c0005f13:	5d                   	pop    ebp
c0005f14:	c3                   	ret    

c0005f15 <bclear_cache>:
c0005f15:	83 ec 18             	sub    esp,0x18
c0005f18:	68 40 f0 01 c0       	push   0xc001f040
c0005f1d:	e8 a6 2b 01 00       	call   c0018ac8 <iso_kprintf>
c0005f22:	83 c4 10             	add    esp,0x10
c0005f25:	31 c0                	xor    eax,eax
c0005f27:	8b 14 85 20 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcfe0]
c0005f2e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f34:	8b 14 85 80 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcf80]
c0005f3b:	40                   	inc    eax
c0005f3c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f42:	83 f8 10             	cmp    eax,0x10
c0005f45:	75 e0                	jne    c0005f27 <bclear_cache+0x12>
c0005f47:	83 c4 0c             	add    esp,0xc
c0005f4a:	c3                   	ret    

c0005f4b <bclear>:
c0005f4b:	eb c8                	jmp    c0005f15 <bclear_cache>

c0005f4d <iso_break_all>:
c0005f4d:	83 ec 18             	sub    esp,0x18
c0005f50:	68 4e f0 01 c0       	push   0xc001f04e
c0005f55:	e8 6e 2b 01 00       	call   c0018ac8 <iso_kprintf>
c0005f5a:	83 c4 10             	add    esp,0x10
c0005f5d:	31 c0                	xor    eax,eax
c0005f5f:	c7 80 d0 35 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdca30],0x1
c0005f69:	05 94 00 00 00       	add    eax,0x94
c0005f6e:	3d 40 09 00 00       	cmp    eax,0x940
c0005f73:	75 ea                	jne    c0005f5f <iso_break_all+0x12>
c0005f75:	83 c4 0c             	add    esp,0xc
c0005f78:	c3                   	ret    

c0005f79 <isoReadDiscSector>:
c0005f79:	83 ec 0c             	sub    esp,0xc
c0005f7c:	0f be 05 60 30 02 c0 	movsx  eax,BYTE PTR ds:0xc0023060
c0005f83:	50                   	push   eax
c0005f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f90:	e8 d7 2a 01 00       	call   c0018a6c <isoReadDiscSectorHelper>
c0005f95:	83 c4 1c             	add    esp,0x1c
c0005f98:	c3                   	ret    

c0005f99 <bread_cache>:
c0005f99:	55                   	push   ebp
c0005f9a:	57                   	push   edi
c0005f9b:	89 d7                	mov    edi,edx
c0005f9d:	56                   	push   esi
c0005f9e:	ba 0f 00 00 00       	mov    edx,0xf
c0005fa3:	53                   	push   ebx
c0005fa4:	89 c6                	mov    esi,eax
c0005fa6:	83 ec 0c             	sub    esp,0xc
c0005fa9:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005fac:	39 38                	cmp    DWORD PTR [eax],edi
c0005fae:	74 3c                	je     c0005fec <bread_cache+0x53>
c0005fb0:	4a                   	dec    edx
c0005fb1:	83 fa ff             	cmp    edx,0xffffffff
c0005fb4:	75 f3                	jne    c0005fa9 <bread_cache+0x10>
c0005fb6:	31 db                	xor    ebx,ebx
c0005fb8:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fbb:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fbe:	74 08                	je     c0005fc8 <bread_cache+0x2f>
c0005fc0:	43                   	inc    ebx
c0005fc1:	83 fb 10             	cmp    ebx,0x10
c0005fc4:	75 f2                	jne    c0005fb8 <bread_cache+0x1f>
c0005fc6:	31 db                	xor    ebx,ebx
c0005fc8:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fcb:	50                   	push   eax
c0005fcc:	6a 01                	push   0x1
c0005fce:	57                   	push   edi
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	83 c0 04             	add    eax,0x4
c0005fd5:	50                   	push   eax
c0005fd6:	e8 9e ff ff ff       	call   c0005f79 <isoReadDiscSector>
c0005fdb:	83 c4 10             	add    esp,0x10
c0005fde:	83 c9 ff             	or     ecx,0xffffffff
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	78 13                	js     c0005ff8 <bread_cache+0x5f>
c0005fe5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fe8:	89 da                	mov    edx,ebx
c0005fea:	89 38                	mov    DWORD PTR [eax],edi
c0005fec:	89 f0                	mov    eax,esi
c0005fee:	e8 12 fe ff ff       	call   c0005e05 <bgrad_cache>
c0005ff3:	b9 0f 00 00 00       	mov    ecx,0xf
c0005ff8:	83 c4 0c             	add    esp,0xc
c0005ffb:	89 c8                	mov    eax,ecx
c0005ffd:	5b                   	pop    ebx
c0005ffe:	5e                   	pop    esi
c0005fff:	5f                   	pop    edi
c0006000:	5d                   	pop    ebp
c0006001:	c3                   	ret    

c0006002 <biread>:
c0006002:	89 c2                	mov    edx,eax
c0006004:	b8 80 30 02 c0       	mov    eax,0xc0023080
c0006009:	eb 8e                	jmp    c0005f99 <bread_cache>

c000600b <bdread>:
c000600b:	89 c2                	mov    edx,eax
c000600d:	b8 20 30 02 c0       	mov    eax,0xc0023020
c0006012:	eb 85                	jmp    c0005f99 <bread_cache>

c0006014 <strnicmp>:
c0006014:	55                   	push   ebp
c0006015:	57                   	push   edi
c0006016:	56                   	push   esi
c0006017:	31 f6                	xor    esi,esi
c0006019:	53                   	push   ebx
c000601a:	83 ec 0c             	sub    esp,0xc
c000601d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0006021:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c0006025:	74 42                	je     c0006069 <strnicmp+0x55>
c0006027:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000602b:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c000602f:	84 c0                	test   al,al
c0006031:	74 36                	je     c0006069 <strnicmp+0x55>
c0006033:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006036:	84 d2                	test   dl,dl
c0006038:	74 2f                	je     c0006069 <strnicmp+0x55>
c000603a:	38 d0                	cmp    al,dl
c000603c:	8d 6e 01             	lea    ebp,[esi+0x1]
c000603f:	75 04                	jne    c0006045 <strnicmp+0x31>
c0006041:	89 ee                	mov    esi,ebp
c0006043:	eb dc                	jmp    c0006021 <strnicmp+0xd>
c0006045:	83 ec 0c             	sub    esp,0xc
c0006048:	50                   	push   eax
c0006049:	e8 72 a8 ff ff       	call   c00008c0 <tolower>
c000604e:	89 c7                	mov    edi,eax
c0006050:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c0006054:	89 ee                	mov    esi,ebp
c0006056:	89 04 24             	mov    DWORD PTR [esp],eax
c0006059:	e8 62 a8 ff ff       	call   c00008c0 <tolower>
c000605e:	83 c4 10             	add    esp,0x10
c0006061:	29 c7                	sub    edi,eax
c0006063:	89 f8                	mov    eax,edi
c0006065:	74 ba                	je     c0006021 <strnicmp+0xd>
c0006067:	eb 02                	jmp    c000606b <strnicmp+0x57>
c0006069:	31 c0                	xor    eax,eax
c000606b:	83 c4 0c             	add    esp,0xc
c000606e:	5b                   	pop    ebx
c000606f:	5e                   	pop    esi
c0006070:	5f                   	pop    edi
c0006071:	5d                   	pop    ebp
c0006072:	c3                   	ret    

c0006073 <find_object>:
c0006073:	55                   	push   ebp
c0006074:	89 c5                	mov    ebp,eax
c0006076:	57                   	push   edi
c0006077:	56                   	push   esi
c0006078:	53                   	push   ebx
c0006079:	89 d3                	mov    ebx,edx
c000607b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006081:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006088:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000608c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006090:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c0006097:	74 0b                	je     c00060a4 <find_object+0x31>
c0006099:	89 ea                	mov    edx,ebp
c000609b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000609f:	e8 90 fc ff ff       	call   c0005d34 <utf2ucs>
c00060a4:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00060a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00060ab:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00060b0:	7e 11                	jle    c00060c3 <find_object+0x50>
c00060b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060b6:	e8 47 ff ff ff       	call   c0006002 <biread>
c00060bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060bf:	85 c0                	test   eax,eax
c00060c1:	79 07                	jns    c00060ca <find_object+0x57>
c00060c3:	31 db                	xor    ebx,ebx
c00060c5:	e9 5b 01 00 00       	jmp    c0006225 <find_object+0x1b2>
c00060ca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060d6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060da:	8b 04 85 80 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf80]
c00060e1:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060e5:	8a 03                	mov    al,BYTE PTR [ebx]
c00060e7:	84 c0                	test   al,al
c00060e9:	75 0e                	jne    c00060f9 <find_object+0x86>
c00060eb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060ef:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060f7:	eb b2                	jmp    c00060ab <find_object+0x38>
c00060f9:	8b 35 b4 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023eb4
c00060ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006103:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006107:	89 ca                	mov    edx,ecx
c0006109:	85 f6                	test   esi,esi
c000610b:	74 2b                	je     c0006138 <find_object+0xc5>
c000610d:	8d 43 21             	lea    eax,[ebx+0x21]
c0006110:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006114:	e8 08 fd ff ff       	call   c0005e21 <ucscompare>
c0006119:	85 c0                	test   eax,eax
c000611b:	0f 84 c1 00 00 00    	je     c00061e2 <find_object+0x16f>
c0006121:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006124:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006128:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c0006130:	0f 8e dc 00 00 00    	jle    c0006212 <find_object+0x19f>
c0006136:	eb b3                	jmp    c00060eb <find_object+0x78>
c0006138:	0f b6 f0             	movzx  esi,al
c000613b:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c000613f:	29 ce                	sub    esi,ecx
c0006141:	80 e2 01             	and    dl,0x1
c0006144:	74 05                	je     c000614b <find_object+0xd8>
c0006146:	83 ee 21             	sub    esi,0x21
c0006149:	eb 55                	jmp    c00061a0 <find_object+0x12d>
c000614b:	47                   	inc    edi
c000614c:	83 ee 22             	sub    esi,0x22
c000614f:	eb 4f                	jmp    c00061a0 <find_object+0x12d>
c0006151:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006154:	48                   	dec    eax
c0006155:	3c 01                	cmp    al,0x1
c0006157:	77 4c                	ja     c00061a5 <find_object+0x132>
c0006159:	50                   	push   eax
c000615a:	6a 02                	push   0x2
c000615c:	68 5d f0 01 c0       	push   0xc001f05d
c0006161:	57                   	push   edi
c0006162:	e8 e9 a5 ff ff       	call   c0000750 <strncmp>
c0006167:	83 c4 10             	add    esp,0x10
c000616a:	85 c0                	test   eax,eax
c000616c:	75 2a                	jne    c0006198 <find_object+0x125>
c000616e:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c0006172:	8d 42 fb             	lea    eax,[edx-0x5]
c0006175:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006179:	50                   	push   eax
c000617a:	8d 47 05             	lea    eax,[edi+0x5]
c000617d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0006181:	50                   	push   eax
c0006182:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006186:	50                   	push   eax
c0006187:	e8 94 a4 ff ff       	call   c0000620 <strncpy>
c000618c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006190:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c0006195:	83 c4 10             	add    esp,0x10
c0006198:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c000619c:	29 c6                	sub    esi,eax
c000619e:	01 c7                	add    edi,eax
c00061a0:	83 fe 03             	cmp    esi,0x3
c00061a3:	7f ac                	jg     c0006151 <find_object+0xde>
c00061a5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00061aa:	7e 40                	jle    c00061ec <find_object+0x179>
c00061ac:	51                   	push   ecx
c00061ad:	51                   	push   ecx
c00061ae:	6a 2f                	push   0x2f
c00061b0:	55                   	push   ebp
c00061b1:	e8 6a a5 ff ff       	call   c0000720 <strchr>
c00061b6:	83 c4 10             	add    esp,0x10
c00061b9:	85 c0                	test   eax,eax
c00061bb:	74 04                	je     c00061c1 <find_object+0x14e>
c00061bd:	29 e8                	sub    eax,ebp
c00061bf:	eb 0c                	jmp    c00061cd <find_object+0x15a>
c00061c1:	83 ec 0c             	sub    esp,0xc
c00061c4:	55                   	push   ebp
c00061c5:	e8 66 a3 ff ff       	call   c0000530 <strlen>
c00061ca:	83 c4 10             	add    esp,0x10
c00061cd:	52                   	push   edx
c00061ce:	50                   	push   eax
c00061cf:	55                   	push   ebp
c00061d0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061d4:	50                   	push   eax
c00061d5:	e8 3a fe ff ff       	call   c0006014 <strnicmp>
c00061da:	83 c4 10             	add    esp,0x10
c00061dd:	e9 37 ff ff ff       	jmp    c0006119 <find_object+0xa6>
c00061e2:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061e6:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061ea:	eb 1e                	jmp    c000620a <find_object+0x197>
c00061ec:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061f0:	8d 43 21             	lea    eax,[ebx+0x21]
c00061f3:	89 e9                	mov    ecx,ebp
c00061f5:	e8 a6 fc ff ff       	call   c0005ea0 <fncompare>
c00061fa:	85 c0                	test   eax,eax
c00061fc:	0f 85 1f ff ff ff    	jne    c0006121 <find_object+0xae>
c0006202:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006206:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000620a:	0f 85 11 ff ff ff    	jne    c0006121 <find_object+0xae>
c0006210:	eb 13                	jmp    c0006225 <find_object+0x1b2>
c0006212:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006216:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c000621a:	0f 8f b2 fe ff ff    	jg     c00060d2 <find_object+0x5f>
c0006220:	e9 c6 fe ff ff       	jmp    c00060eb <find_object+0x78>
c0006225:	81 c4 2c 01 00 00    	add    esp,0x12c
c000622b:	89 d8                	mov    eax,ebx
c000622d:	5b                   	pop    ebx
c000622e:	5e                   	pop    esi
c000622f:	5f                   	pop    edi
c0006230:	5d                   	pop    ebp
c0006231:	c3                   	ret    

c0006232 <find_object_path>:
c0006232:	55                   	push   ebp
c0006233:	57                   	push   edi
c0006234:	89 d7                	mov    edi,edx
c0006236:	56                   	push   esi
c0006237:	89 c6                	mov    esi,eax
c0006239:	53                   	push   ebx
c000623a:	89 cb                	mov    ebx,ecx
c000623c:	83 ec 0c             	sub    esp,0xc
c000623f:	50                   	push   eax
c0006240:	50                   	push   eax
c0006241:	6a 2f                	push   0x2f
c0006243:	56                   	push   esi
c0006244:	e8 d7 a4 ff ff       	call   c0000720 <strchr>
c0006249:	83 c4 10             	add    esp,0x10
c000624c:	89 c5                	mov    ebp,eax
c000624e:	85 c0                	test   eax,eax
c0006250:	74 3a                	je     c000628c <find_object_path+0x5a>
c0006252:	39 ee                	cmp    esi,ebp
c0006254:	74 31                	je     c0006287 <find_object_path+0x55>
c0006256:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006259:	e8 a5 fb ff ff       	call   c0005e03 <iso_733>
c000625e:	89 c2                	mov    edx,eax
c0006260:	8d 43 02             	lea    eax,[ebx+0x2]
c0006263:	e8 9b fb ff ff       	call   c0005e03 <iso_733>
c0006268:	83 ec 0c             	sub    esp,0xc
c000626b:	89 c1                	mov    ecx,eax
c000626d:	52                   	push   edx
c000626e:	89 f0                	mov    eax,esi
c0006270:	ba 01 00 00 00       	mov    edx,0x1
c0006275:	e8 f9 fd ff ff       	call   c0006073 <find_object>
c000627a:	83 c4 10             	add    esp,0x10
c000627d:	89 c3                	mov    ebx,eax
c000627f:	85 c0                	test   eax,eax
c0006281:	75 04                	jne    c0006287 <find_object_path+0x55>
c0006283:	31 db                	xor    ebx,ebx
c0006285:	eb 36                	jmp    c00062bd <find_object_path+0x8b>
c0006287:	8d 75 01             	lea    esi,[ebp+0x1]
c000628a:	eb b3                	jmp    c000623f <find_object_path+0xd>
c000628c:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000628f:	74 28                	je     c00062b9 <find_object_path+0x87>
c0006291:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006294:	e8 6a fb ff ff       	call   c0005e03 <iso_733>
c0006299:	89 c2                	mov    edx,eax
c000629b:	8d 43 02             	lea    eax,[ebx+0x2]
c000629e:	e8 60 fb ff ff       	call   c0005e03 <iso_733>
c00062a3:	83 ec 0c             	sub    esp,0xc
c00062a6:	89 c1                	mov    ecx,eax
c00062a8:	52                   	push   edx
c00062a9:	89 f0                	mov    eax,esi
c00062ab:	89 fa                	mov    edx,edi
c00062ad:	e8 c1 fd ff ff       	call   c0006073 <find_object>
c00062b2:	83 c4 10             	add    esp,0x10
c00062b5:	89 c3                	mov    ebx,eax
c00062b7:	eb 04                	jmp    c00062bd <find_object_path+0x8b>
c00062b9:	85 ff                	test   edi,edi
c00062bb:	74 c6                	je     c0006283 <find_object_path+0x51>
c00062bd:	83 c4 0c             	add    esp,0xc
c00062c0:	89 d8                	mov    eax,ebx
c00062c2:	5b                   	pop    ebx
c00062c3:	5e                   	pop    esi
c00062c4:	5f                   	pop    edi
c00062c5:	5d                   	pop    ebp
c00062c6:	c3                   	ret    

c00062c7 <stricmp>:
c00062c7:	57                   	push   edi
c00062c8:	56                   	push   esi
c00062c9:	31 f6                	xor    esi,esi
c00062cb:	53                   	push   ebx
c00062cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d0:	83 ec 0c             	sub    esp,0xc
c00062d3:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062db:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062df:	50                   	push   eax
c00062e0:	e8 bb a5 ff ff       	call   c00008a0 <toupper>
c00062e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e8:	e8 d3 a5 ff ff       	call   c00008c0 <tolower>
c00062ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062f0:	89 c3                	mov    ebx,eax
c00062f2:	e8 a9 a5 ff ff       	call   c00008a0 <toupper>
c00062f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062fa:	e8 c1 a5 ff ff       	call   c00008c0 <tolower>
c00062ff:	83 c4 10             	add    esp,0x10
c0006302:	39 c3                	cmp    ebx,eax
c0006304:	75 05                	jne    c000630b <stricmp+0x44>
c0006306:	46                   	inc    esi
c0006307:	85 db                	test   ebx,ebx
c0006309:	75 c1                	jne    c00062cc <stricmp+0x5>
c000630b:	29 c3                	sub    ebx,eax
c000630d:	89 d8                	mov    eax,ebx
c000630f:	5b                   	pop    ebx
c0006310:	5e                   	pop    esi
c0006311:	5f                   	pop    edi
c0006312:	c3                   	ret    

c0006313 <iso_open>:
c0006313:	57                   	push   edi
c0006314:	31 c0                	xor    eax,eax
c0006316:	56                   	push   esi
c0006317:	b9 80 3e 02 c0       	mov    ecx,0xc0023e80
c000631c:	53                   	push   ebx
c000631d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006322:	0f 95 c0             	setne  al
c0006325:	89 c2                	mov    edx,eax
c0006327:	89 c6                	mov    esi,eax
c0006329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000632d:	e8 00 ff ff ff       	call   c0006232 <find_object_path>
c0006332:	83 ca ff             	or     edx,0xffffffff
c0006335:	85 c0                	test   eax,eax
c0006337:	74 5e                	je     c0006397 <iso_open+0x84>
c0006339:	89 c1                	mov    ecx,eax
c000633b:	31 d2                	xor    edx,edx
c000633d:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006343:	83 bf 40 35 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdcac0],0x0
c000634a:	75 42                	jne    c000638e <iso_open+0x7b>
c000634c:	8d 41 02             	lea    eax,[ecx+0x2]
c000634f:	c7 87 40 35 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdcac0],0xffffffff
c0006359:	e8 a5 fa ff ff       	call   c0005e03 <iso_733>
c000635e:	89 b7 44 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcabc],esi
c0006364:	89 87 40 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcac0],eax
c000636a:	c7 87 48 35 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdcab8],0x0
c0006374:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006377:	e8 87 fa ff ff       	call   c0005e03 <iso_733>
c000637c:	c7 87 d0 35 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdca30],0x0
c0006386:	89 87 4c 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcab4],eax
c000638c:	eb 09                	jmp    c0006397 <iso_open+0x84>
c000638e:	42                   	inc    edx
c000638f:	83 fa 10             	cmp    edx,0x10
c0006392:	75 a9                	jne    c000633d <iso_open+0x2a>
c0006394:	83 ca ff             	or     edx,0xffffffff
c0006397:	5b                   	pop    ebx
c0006398:	89 d0                	mov    eax,edx
c000639a:	5e                   	pop    esi
c000639b:	5f                   	pop    edi
c000639c:	c3                   	ret    

c000639d <iso_close>:
c000639d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063a1:	83 f8 0f             	cmp    eax,0xf
c00063a4:	7f 10                	jg     c00063b6 <iso_close+0x19>
c00063a6:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00063ac:	c7 80 40 35 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdcac0],0x0
c00063b6:	e9 5a fb ff ff       	jmp    c0005f15 <bclear_cache>

c00063bb <iso_read>:
c00063bb:	55                   	push   ebp
c00063bc:	57                   	push   edi
c00063bd:	56                   	push   esi
c00063be:	53                   	push   ebx
c00063bf:	83 ec 1c             	sub    esp,0x1c
c00063c2:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063c6:	83 fd 0f             	cmp    ebp,0xf
c00063c9:	7e 0a                	jle    c00063d5 <iso_read+0x1a>
c00063cb:	83 c8 ff             	or     eax,0xffffffff
c00063ce:	89 c2                	mov    edx,eax
c00063d0:	e9 f4 00 00 00       	jmp    c00064c9 <iso_read+0x10e>
c00063d5:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063db:	83 bd 40 35 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdcac0],0x0
c00063e2:	74 e7                	je     c00063cb <iso_read+0x10>
c00063e4:	8b 95 d0 35 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdca30]
c00063ea:	85 d2                	test   edx,edx
c00063ec:	75 dd                	jne    c00063cb <iso_read+0x10>
c00063ee:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063f3:	0f 84 cd 00 00 00    	je     c00064c6 <iso_read+0x10b>
c00063f9:	8b 85 48 35 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdcab8]
c00063ff:	8b 8d 4c 35 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdcab4]
c0006405:	29 c1                	sub    ecx,eax
c0006407:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c000640b:	76 04                	jbe    c0006411 <iso_read+0x56>
c000640d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006411:	85 c9                	test   ecx,ecx
c0006413:	0f 84 ad 00 00 00    	je     c00064c6 <iso_read+0x10b>
c0006419:	89 c6                	mov    esi,eax
c000641b:	bb 00 08 00 00       	mov    ebx,0x800
c0006420:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006426:	c1 e8 0b             	shr    eax,0xb
c0006429:	29 f3                	sub    ebx,esi
c000642b:	03 85 40 35 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdcac0]
c0006431:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006437:	7e 3f                	jle    c0006478 <iso_read+0xbd>
c0006439:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000643f:	75 37                	jne    c0006478 <iso_read+0xbd>
c0006441:	be 20 00 00 00       	mov    esi,0x20
c0006446:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000644c:	7f 05                	jg     c0006453 <iso_read+0x98>
c000644e:	89 ce                	mov    esi,ecx
c0006450:	c1 fe 0b             	sar    esi,0xb
c0006453:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006457:	89 f3                	mov    ebx,esi
c0006459:	c1 e3 0b             	shl    ebx,0xb
c000645c:	52                   	push   edx
c000645d:	56                   	push   esi
c000645e:	50                   	push   eax
c000645f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006463:	e8 11 fb ff ff       	call   c0005f79 <isoReadDiscSector>
c0006468:	83 c4 10             	add    esp,0x10
c000646b:	85 c0                	test   eax,eax
c000646d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006471:	7f 3e                	jg     c00064b1 <iso_read+0xf6>
c0006473:	e9 53 ff ff ff       	jmp    c00063cb <iso_read+0x10>
c0006478:	39 cb                	cmp    ebx,ecx
c000647a:	7e 02                	jle    c000647e <iso_read+0xc3>
c000647c:	89 cb                	mov    ebx,ecx
c000647e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006482:	e8 84 fb ff ff       	call   c000600b <bdread>
c0006487:	85 c0                	test   eax,eax
c0006489:	0f 88 3c ff ff ff    	js     c00063cb <iso_read+0x10>
c000648f:	8b 0c 85 20 30 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcfe0]
c0006496:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000649a:	8b 85 48 35 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdcab8]
c00064a0:	25 ff 07 00 00       	and    eax,0x7ff
c00064a5:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00064a9:	89 d9                	mov    ecx,ebx
c00064ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00064ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00064b1:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00064b5:	01 9d 48 35 02 c0    	add    DWORD PTR [ebp-0x3ffdcab8],ebx
c00064bb:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064bf:	01 da                	add    edx,ebx
c00064c1:	e9 28 ff ff ff       	jmp    c00063ee <iso_read+0x33>
c00064c6:	89 d0                	mov    eax,edx
c00064c8:	99                   	cdq    
c00064c9:	83 c4 1c             	add    esp,0x1c
c00064cc:	5b                   	pop    ebx
c00064cd:	5e                   	pop    esi
c00064ce:	5f                   	pop    edi
c00064cf:	5d                   	pop    ebp
c00064d0:	c3                   	ret    

c00064d1 <iso_seek>:
c00064d1:	55                   	push   ebp
c00064d2:	83 c8 ff             	or     eax,0xffffffff
c00064d5:	57                   	push   edi
c00064d6:	89 c2                	mov    edx,eax
c00064d8:	56                   	push   esi
c00064d9:	53                   	push   ebx
c00064da:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064de:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064e2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064e6:	83 fe 0f             	cmp    esi,0xf
c00064e9:	7f 65                	jg     c0006550 <iso_seek+0x7f>
c00064eb:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064f1:	8d 8d 40 35 02 c0    	lea    ecx,[ebp-0x3ffdcac0]
c00064f7:	83 bd 40 35 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdcac0],0x0
c00064fe:	74 50                	je     c0006550 <iso_seek+0x7f>
c0006500:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006507:	75 47                	jne    c0006550 <iso_seek+0x7f>
c0006509:	83 fb 01             	cmp    ebx,0x1
c000650c:	74 0e                	je     c000651c <iso_seek+0x4b>
c000650e:	83 fb 02             	cmp    ebx,0x2
c0006511:	74 0e                	je     c0006521 <iso_seek+0x50>
c0006513:	85 db                	test   ebx,ebx
c0006515:	75 39                	jne    c0006550 <iso_seek+0x7f>
c0006517:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c000651a:	eb 0d                	jmp    c0006529 <iso_seek+0x58>
c000651c:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c000651f:	eb 08                	jmp    c0006529 <iso_seek+0x58>
c0006521:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006524:	01 f8                	add    eax,edi
c0006526:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006529:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c000652f:	8b 88 4c 35 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdcab4]
c0006535:	05 40 35 02 c0       	add    eax,0xc0023540
c000653a:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000653d:	76 03                	jbe    c0006542 <iso_seek+0x71>
c000653f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006542:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006548:	8b 82 48 35 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdcab8]
c000654e:	31 d2                	xor    edx,edx
c0006550:	5b                   	pop    ebx
c0006551:	5e                   	pop    esi
c0006552:	5f                   	pop    edi
c0006553:	5d                   	pop    ebp
c0006554:	c3                   	ret    

c0006555 <iso_tell>:
c0006555:	83 c8 ff             	or     eax,0xffffffff
c0006558:	53                   	push   ebx
c0006559:	89 c2                	mov    edx,eax
c000655b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000655f:	83 f9 0f             	cmp    ecx,0xf
c0006562:	7f 20                	jg     c0006584 <iso_tell+0x2f>
c0006564:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000656a:	83 bb 40 35 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdcac0],0x0
c0006571:	74 11                	je     c0006584 <iso_tell+0x2f>
c0006573:	83 bb d0 35 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdca30],0x0
c000657a:	75 08                	jne    c0006584 <iso_tell+0x2f>
c000657c:	8b 83 48 35 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdcab8]
c0006582:	31 d2                	xor    edx,edx
c0006584:	5b                   	pop    ebx
c0006585:	c3                   	ret    

c0006586 <iso_total>:
c0006586:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000658a:	83 c8 ff             	or     eax,0xffffffff
c000658d:	83 fa 0f             	cmp    edx,0xf
c0006590:	7f 1e                	jg     c00065b0 <iso_total+0x2a>
c0006592:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006598:	83 ba 40 35 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdcac0],0x0
c000659f:	74 0f                	je     c00065b0 <iso_total+0x2a>
c00065a1:	83 ba d0 35 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdca30],0x0
c00065a8:	75 06                	jne    c00065b0 <iso_total+0x2a>
c00065aa:	8b 82 4c 35 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdcab4]
c00065b0:	c3                   	ret    

c00065b1 <fn_postprocess>:
c00065b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00065b5:	89 d0                	mov    eax,edx
c00065b7:	8a 08                	mov    cl,BYTE PTR [eax]
c00065b9:	80 f9 3b             	cmp    cl,0x3b
c00065bc:	74 07                	je     c00065c5 <fn_postprocess+0x14>
c00065be:	84 c9                	test   cl,cl
c00065c0:	74 03                	je     c00065c5 <fn_postprocess+0x14>
c00065c2:	40                   	inc    eax
c00065c3:	eb f2                	jmp    c00065b7 <fn_postprocess+0x6>
c00065c5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065c8:	39 d0                	cmp    eax,edx
c00065ca:	76 0a                	jbe    c00065d6 <fn_postprocess+0x25>
c00065cc:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065d0:	75 04                	jne    c00065d6 <fn_postprocess+0x25>
c00065d2:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065d6:	c3                   	ret    

c00065d7 <iso_readdir>:
c00065d7:	55                   	push   ebp
c00065d8:	57                   	push   edi
c00065d9:	56                   	push   esi
c00065da:	53                   	push   ebx
c00065db:	83 ec 1c             	sub    esp,0x1c
c00065de:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00065e2:	83 fb 0f             	cmp    ebx,0xf
c00065e5:	7f 28                	jg     c000660f <iso_readdir+0x38>
c00065e7:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00065ed:	8d b8 40 35 02 c0    	lea    edi,[eax-0x3ffdcac0]
c00065f3:	83 b8 40 35 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdcac0],0x0
c00065fa:	74 13                	je     c000660f <iso_readdir+0x38>
c00065fc:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006600:	74 0d                	je     c000660f <iso_readdir+0x38>
c0006602:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006609:	0f 84 b1 00 00 00    	je     c00066c0 <iso_readdir+0xe9>
c000660f:	83 ec 0c             	sub    esp,0xc
c0006612:	68 60 f0 01 c0       	push   0xc001f060
c0006617:	e8 ac 24 01 00       	call   c0018ac8 <iso_kprintf>
c000661c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000661f:	e8 c0 24 01 00       	call   c0018ae4 <iso_kprintfd>
c0006624:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000662a:	c7 04 24 65 f0 01 c0 	mov    DWORD PTR [esp],0xc001f065
c0006631:	e8 92 24 01 00       	call   c0018ac8 <iso_kprintf>
c0006636:	5d                   	pop    ebp
c0006637:	ff b3 40 35 02 c0    	push   DWORD PTR [ebx-0x3ffdcac0]
c000663d:	e8 a2 24 01 00       	call   c0018ae4 <iso_kprintfd>
c0006642:	c7 04 24 6b f0 01 c0 	mov    DWORD PTR [esp],0xc001f06b
c0006649:	e8 7a 24 01 00       	call   c0018ac8 <iso_kprintf>
c000664e:	58                   	pop    eax
c000664f:	ff b3 44 35 02 c0    	push   DWORD PTR [ebx-0x3ffdcabc]
c0006655:	e8 8a 24 01 00       	call   c0018ae4 <iso_kprintfd>
c000665a:	c7 04 24 71 f0 01 c0 	mov    DWORD PTR [esp],0xc001f071
c0006661:	e8 62 24 01 00       	call   c0018ac8 <iso_kprintf>
c0006666:	58                   	pop    eax
c0006667:	ff b3 d0 35 02 c0    	push   DWORD PTR [ebx-0x3ffdca30]
c000666d:	e8 72 24 01 00       	call   c0018ae4 <iso_kprintfd>
c0006672:	83 c4 10             	add    esp,0x10
c0006675:	eb 42                	jmp    c00066b9 <iso_readdir+0xe2>
c0006677:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000667a:	8b 34 85 80 30 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcf80]
c0006681:	89 d1                	mov    ecx,edx
c0006683:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006689:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c000668d:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006690:	75 35                	jne    c00066c7 <iso_readdir+0xf0>
c0006692:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006698:	81 c2 00 08 00 00    	add    edx,0x800
c000669e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00066a1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00066a4:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00066a7:	73 1e                	jae    c00066c7 <iso_readdir+0xf0>
c00066a9:	c1 ea 0b             	shr    edx,0xb
c00066ac:	8b 07                	mov    eax,DWORD PTR [edi]
c00066ae:	01 d0                	add    eax,edx
c00066b0:	e8 4d f9 ff ff       	call   c0006002 <biread>
c00066b5:	85 c0                	test   eax,eax
c00066b7:	79 be                	jns    c0006677 <iso_readdir+0xa0>
c00066b9:	31 c0                	xor    eax,eax
c00066bb:	e9 66 01 00 00       	jmp    c0006826 <iso_readdir+0x24f>
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	83 c8 ff             	or     eax,0xffffffff
c00066c5:	eb da                	jmp    c00066a1 <iso_readdir+0xca>
c00066c7:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00066cd:	8b ba 48 35 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdcab8]
c00066d3:	81 c2 40 35 02 c0    	add    edx,0xc0023540
c00066d9:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00066dc:	73 db                	jae    c00066b9 <iso_readdir+0xe2>
c00066de:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00066e2:	75 34                	jne    c0006718 <iso_readdir+0x141>
c00066e4:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00066e8:	75 2e                	jne    c0006718 <iso_readdir+0x141>
c00066ea:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00066ed:	8b 34 85 80 30 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcf80]
c00066f4:	01 f9                	add    ecx,edi
c00066f6:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00066f9:	89 c8                	mov    eax,ecx
c00066fb:	25 ff 07 00 00       	and    eax,0x7ff
c0006700:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006705:	01 c8                	add    eax,ecx
c0006707:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000670a:	25 ff 07 00 00       	and    eax,0x7ff
c000670f:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006713:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006716:	74 a1                	je     c00066b9 <iso_readdir+0xe2>
c0006718:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000671e:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006722:	8d 56 21             	lea    edx,[esi+0x21]
c0006725:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006729:	8d a8 58 35 02 c0    	lea    ebp,[eax-0x3ffdcaa8]
c000672f:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c0006736:	74 0c                	je     c0006744 <iso_readdir+0x16d>
c0006738:	89 e8                	mov    eax,ebp
c000673a:	e8 17 f6 ff ff       	call   c0005d56 <ucs2utfn>
c000673f:	e9 a6 00 00 00       	jmp    c00067ea <iso_readdir+0x213>
c0006744:	57                   	push   edi
c0006745:	51                   	push   ecx
c0006746:	52                   	push   edx
c0006747:	55                   	push   ebp
c0006748:	e8 d3 9e ff ff       	call   c0000620 <strncpy>
c000674d:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006751:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006757:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000675a:	c6 84 01 58 35 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdcaa8],0x0
c0006762:	e8 4a fe ff ff       	call   c00065b1 <fn_postprocess>
c0006767:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c000676b:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000676e:	83 c4 10             	add    esp,0x10
c0006771:	29 d0                	sub    eax,edx
c0006773:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006777:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c000677b:	74 05                	je     c0006782 <iso_readdir+0x1ab>
c000677d:	83 e8 21             	sub    eax,0x21
c0006780:	eb 04                	jmp    c0006786 <iso_readdir+0x1af>
c0006782:	47                   	inc    edi
c0006783:	83 e8 22             	sub    eax,0x22
c0006786:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000678a:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006790:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006794:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006799:	7e 4f                	jle    c00067ea <iso_readdir+0x213>
c000679b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000679e:	48                   	dec    eax
c000679f:	3c 01                	cmp    al,0x1
c00067a1:	77 47                	ja     c00067ea <iso_readdir+0x213>
c00067a3:	52                   	push   edx
c00067a4:	6a 02                	push   0x2
c00067a6:	68 5d f0 01 c0       	push   0xc001f05d
c00067ab:	57                   	push   edi
c00067ac:	e8 9f 9f ff ff       	call   c0000750 <strncmp>
c00067b1:	83 c4 10             	add    esp,0x10
c00067b4:	85 c0                	test   eax,eax
c00067b6:	75 26                	jne    c00067de <iso_readdir+0x207>
c00067b8:	50                   	push   eax
c00067b9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067bd:	83 e8 05             	sub    eax,0x5
c00067c0:	50                   	push   eax
c00067c1:	8d 47 05             	lea    eax,[edi+0x5]
c00067c4:	50                   	push   eax
c00067c5:	55                   	push   ebp
c00067c6:	e8 55 9e ff ff       	call   c0000620 <strncpy>
c00067cb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00067cf:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067d3:	83 c4 10             	add    esp,0x10
c00067d6:	c6 84 08 53 35 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdcaad],0x0
c00067de:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067e2:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00067e6:	01 c7                	add    edi,eax
c00067e8:	eb aa                	jmp    c0006794 <iso_readdir+0x1bd>
c00067ea:	83 c8 ff             	or     eax,0xffffffff
c00067ed:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00067f1:	89 c2                	mov    edx,eax
c00067f3:	75 0a                	jne    c00067ff <iso_readdir+0x228>
c00067f5:	8d 46 0a             	lea    eax,[esi+0xa]
c00067f8:	e8 06 f6 ff ff       	call   c0005e03 <iso_733>
c00067fd:	31 d2                	xor    edx,edx
c00067ff:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006805:	89 83 50 35 02 c0    	mov    DWORD PTR [ebx-0x3ffdcab0],eax
c000680b:	89 93 54 35 02 c0    	mov    DWORD PTR [ebx-0x3ffdcaac],edx
c0006811:	81 c3 40 35 02 c0    	add    ebx,0xc0023540
c0006817:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000681a:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c000681d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006821:	05 50 35 02 c0       	add    eax,0xc0023550
c0006826:	83 c4 1c             	add    esp,0x1c
c0006829:	5b                   	pop    ebx
c000682a:	5e                   	pop    esi
c000682b:	5f                   	pop    edi
c000682c:	5d                   	pop    ebp
c000682d:	c3                   	ret    

c000682e <iso_reset>:
c000682e:	83 ec 18             	sub    esp,0x18
c0006831:	68 7a f0 01 c0       	push   0xc001f07a
c0006836:	e8 8d 22 01 00       	call   c0018ac8 <iso_kprintf>
c000683b:	e8 0d f7 ff ff       	call   c0005f4d <iso_break_all>
c0006840:	e8 06 f7 ff ff       	call   c0005f4b <bclear>
c0006845:	31 c0                	xor    eax,eax
c0006847:	83 c4 1c             	add    esp,0x1c
c000684a:	c3                   	ret    

c000684b <init_percd>:
c000684b:	57                   	push   edi
c000684c:	56                   	push   esi
c000684d:	53                   	push   ebx
c000684e:	bb 01 00 00 00       	mov    ebx,0x1
c0006853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006857:	a2 60 30 02 c0       	mov    ds:0xc0023060,al
c000685c:	e8 cd ff ff ff       	call   c000682e <iso_reset>
c0006861:	c7 05 b4 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eb4,0x0
c000686b:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c0006870:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006874:	e8 89 f7 ff ff       	call   c0006002 <biread>
c0006879:	89 c6                	mov    esi,eax
c000687b:	85 c0                	test   eax,eax
c000687d:	0f 88 ba 00 00 00    	js     c000693d <init_percd+0xf2>
c0006883:	8b 04 85 80 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf80]
c000688a:	83 c0 04             	add    eax,0x4
c000688d:	52                   	push   edx
c000688e:	6a 06                	push   0x6
c0006890:	68 85 f0 01 c0       	push   0xc001f085
c0006895:	50                   	push   eax
c0006896:	e8 e5 9a ff ff       	call   c0000380 <memcmp>
c000689b:	83 c4 10             	add    esp,0x10
c000689e:	85 c0                	test   eax,eax
c00068a0:	74 08                	je     c00068aa <init_percd+0x5f>
c00068a2:	43                   	inc    ebx
c00068a3:	83 fb 04             	cmp    ebx,0x4
c00068a6:	75 c3                	jne    c000686b <init_percd+0x20>
c00068a8:	eb 1a                	jmp    c00068c4 <init_percd+0x79>
c00068aa:	8b 04 b5 80 30 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdcf80]
c00068b1:	83 c0 5c             	add    eax,0x5c
c00068b4:	e8 1b f5 ff ff       	call   c0005dd4 <isjoliet>
c00068b9:	a3 b4 3e 02 c0       	mov    ds:0xc0023eb4,eax
c00068be:	85 c0                	test   eax,eax
c00068c0:	74 e0                	je     c00068a2 <init_percd+0x57>
c00068c2:	eb 3e                	jmp    c0006902 <init_percd+0xb7>
c00068c4:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c00068cb:	75 35                	jne    c0006902 <init_percd+0xb7>
c00068cd:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c00068d2:	83 c0 10             	add    eax,0x10
c00068d5:	e8 28 f7 ff ff       	call   c0006002 <biread>
c00068da:	89 c6                	mov    esi,eax
c00068dc:	85 c0                	test   eax,eax
c00068de:	78 5f                	js     c000693f <init_percd+0xf4>
c00068e0:	83 cb ff             	or     ebx,0xffffffff
c00068e3:	50                   	push   eax
c00068e4:	8b 04 b5 80 30 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdcf80]
c00068eb:	6a 06                	push   0x6
c00068ed:	83 c0 04             	add    eax,0x4
c00068f0:	68 8c f0 01 c0       	push   0xc001f08c
c00068f5:	50                   	push   eax
c00068f6:	e8 85 9a ff ff       	call   c0000380 <memcmp>
c00068fb:	83 c4 10             	add    esp,0x10
c00068fe:	85 c0                	test   eax,eax
c0006900:	75 3d                	jne    c000693f <init_percd+0xf4>
c0006902:	8b 34 b5 80 30 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdcf80]
c0006909:	bf 80 3e 02 c0       	mov    edi,0xc0023e80
c000690e:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006914:	b9 22 00 00 00       	mov    ecx,0x22
c0006919:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000691b:	b8 82 3e 02 c0       	mov    eax,0xc0023e82
c0006920:	31 db                	xor    ebx,ebx
c0006922:	e8 dc f4 ff ff       	call   c0005e03 <iso_733>
c0006927:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000692c:	b8 8a 3e 02 c0       	mov    eax,0xc0023e8a
c0006931:	e8 cd f4 ff ff       	call   c0005e03 <iso_733>
c0006936:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c000693b:	eb 02                	jmp    c000693f <init_percd+0xf4>
c000693d:	89 c3                	mov    ebx,eax
c000693f:	89 d8                	mov    eax,ebx
c0006941:	5b                   	pop    ebx
c0006942:	5e                   	pop    esi
c0006943:	5f                   	pop    edi
c0006944:	c3                   	ret    

c0006945 <iso_ioctl>:
c0006945:	83 ec 18             	sub    esp,0x18
c0006948:	68 93 f0 01 c0       	push   0xc001f093
c000694d:	e8 76 21 01 00       	call   c0018ac8 <iso_kprintf>
c0006952:	e8 d7 fe ff ff       	call   c000682e <iso_reset>
c0006957:	31 c0                	xor    eax,eax
c0006959:	83 c4 1c             	add    esp,0x1c
c000695c:	c3                   	ret    

c000695d <fs_iso9660_init>:
c000695d:	53                   	push   ebx
c000695e:	31 db                	xor    ebx,ebx
c0006960:	83 ec 14             	sub    esp,0x14
c0006963:	68 9e f0 01 c0       	push   0xc001f09e
c0006968:	e8 5b 21 01 00       	call   c0018ac8 <iso_kprintf>
c000696d:	83 c4 0c             	add    esp,0xc
c0006970:	68 40 09 00 00       	push   0x940
c0006975:	6a 00                	push   0x0
c0006977:	68 40 35 02 c0       	push   0xc0023540
c000697c:	e8 3f 9b ff ff       	call   c00004c0 <memset>
c0006981:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006988:	c7 05 40 35 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0023540,0xffffffff
c0006992:	e8 ce 0e 00 00       	call   c0007865 <malloc>
c0006997:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000699e:	a3 b0 3e 02 c0       	mov    ds:0xc0023eb0,eax
c00069a3:	e8 bd 0e 00 00       	call   c0007865 <malloc>
c00069a8:	83 c4 10             	add    esp,0x10
c00069ab:	a3 20 35 02 c0       	mov    ds:0xc0023520,eax
c00069b0:	83 ec 0c             	sub    esp,0xc
c00069b3:	68 04 08 00 00       	push   0x804
c00069b8:	e8 a8 0e 00 00       	call   c0007865 <malloc>
c00069bd:	89 04 9d 80 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcf80],eax
c00069c4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069ca:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c00069d1:	e8 8f 0e 00 00       	call   c0007865 <malloc>
c00069d6:	83 c4 10             	add    esp,0x10
c00069d9:	89 04 9d 20 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcfe0],eax
c00069e0:	43                   	inc    ebx
c00069e1:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069e7:	83 fb 10             	cmp    ebx,0x10
c00069ea:	75 c4                	jne    c00069b0 <fs_iso9660_init+0x53>
c00069ec:	31 c0                	xor    eax,eax
c00069ee:	83 c4 08             	add    esp,0x8
c00069f1:	5b                   	pop    ebx
c00069f2:	c3                   	ret    

c00069f3 <fs_iso9660_shutdown>:
c00069f3:	53                   	push   ebx
c00069f4:	31 db                	xor    ebx,ebx
c00069f6:	83 ec 08             	sub    esp,0x8
c00069f9:	83 ec 0c             	sub    esp,0xc
c00069fc:	ff 34 9d 80 30 02 c0 	push   DWORD PTR [ebx*4-0x3ffdcf80]
c0006a03:	e8 6d 0e 00 00       	call   c0007875 <free>
c0006a08:	58                   	pop    eax
c0006a09:	ff 34 9d 20 30 02 c0 	push   DWORD PTR [ebx*4-0x3ffdcfe0]
c0006a10:	43                   	inc    ebx
c0006a11:	e8 5f 0e 00 00       	call   c0007875 <free>
c0006a16:	83 c4 10             	add    esp,0x10
c0006a19:	83 fb 10             	cmp    ebx,0x10
c0006a1c:	75 db                	jne    c00069f9 <fs_iso9660_shutdown+0x6>
c0006a1e:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0006a23:	85 c0                	test   eax,eax
c0006a25:	74 0c                	je     c0006a33 <fs_iso9660_shutdown+0x40>
c0006a27:	83 ec 0c             	sub    esp,0xc
c0006a2a:	50                   	push   eax
c0006a2b:	e8 45 0e 00 00       	call   c0007875 <free>
c0006a30:	83 c4 10             	add    esp,0x10
c0006a33:	a1 20 35 02 c0       	mov    eax,ds:0xc0023520
c0006a38:	85 c0                	test   eax,eax
c0006a3a:	74 0c                	je     c0006a48 <fs_iso9660_shutdown+0x55>
c0006a3c:	83 ec 0c             	sub    esp,0xc
c0006a3f:	50                   	push   eax
c0006a40:	e8 30 0e 00 00       	call   c0007875 <free>
c0006a45:	83 c4 10             	add    esp,0x10
c0006a48:	c7 05 20 35 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023520,0x0
c0006a52:	c7 05 b0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eb0,0x0
c0006a5c:	31 c0                	xor    eax,eax
c0006a5e:	83 c4 08             	add    esp,0x8
c0006a61:	5b                   	pop    ebx
c0006a62:	c3                   	ret    
c0006a63:	90                   	nop

c0006a64 <Computer::close(int, int, void*)>:
c0006a64:	57                   	push   edi
c0006a65:	56                   	push   esi
c0006a66:	53                   	push   ebx
c0006a67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006a6b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a6f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006a73:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a79:	83 ec 0c             	sub    esp,0xc
c0006a7c:	50                   	push   eax
c0006a7d:	e8 e0 50 00 00       	call   c000bb62 <Device::closeAll()>
c0006a82:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a88:	83 c4 10             	add    esp,0x10
c0006a8b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a8d:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006a91:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006a99:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006a9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006aa1:	5b                   	pop    ebx
c0006aa2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006aa5:	5e                   	pop    esi
c0006aa6:	5f                   	pop    edi
c0006aa7:	ff e0                	jmp    eax

c0006aa9 <Krnl::firstTask()>:
c0006aa9:	53                   	push   ebx
c0006aaa:	83 ec 14             	sub    esp,0x14
c0006aad:	fb                   	sti    
c0006aae:	68 af f0 01 c0       	push   0xc001f0af
c0006ab3:	e8 97 92 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c0006ab8:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006abf:	e8 a1 0d 00 00       	call   c0007865 <malloc>
c0006ac4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006acb:	89 c3                	mov    ebx,eax
c0006acd:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0006ad2:	50                   	push   eax
c0006ad3:	68 c8 f0 01 c0       	push   0xc001f0c8
c0006ad8:	6a 01                	push   0x1
c0006ada:	53                   	push   ebx
c0006adb:	e8 8c da 00 00       	call   c001456c <Process::Process(bool, char const*, Process*, char**)>
c0006ae0:	83 c4 20             	add    esp,0x20
c0006ae3:	68 ff 00 00 00       	push   0xff
c0006ae8:	6a 00                	push   0x0
c0006aea:	68 b9 72 00 c0       	push   0xc00072b9
c0006aef:	53                   	push   ebx
c0006af0:	e8 9f dc 00 00       	call   c0014794 <Process::createThread(void (*)(void*), void*, int)>
c0006af5:	8b 15 90 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027190
c0006afb:	6a 7a                	push   0x7a
c0006afd:	6a 00                	push   0x0
c0006aff:	68 10 52 01 c0       	push   0xc0015210
c0006b04:	52                   	push   edx
c0006b05:	e8 8a dc 00 00       	call   c0014794 <Process::createThread(void (*)(void*), void*, int)>
c0006b0a:	83 c4 14             	add    esp,0x14
c0006b0d:	a3 48 71 02 c0       	mov    ds:0xc0027148,eax
c0006b12:	68 c4 f1 01 c0       	push   0xc001f1c4
c0006b17:	c6 05 bd 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ebd,0x1
c0006b1e:	e8 2c 92 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c0006b23:	e8 c7 ea 00 00       	call   c00155ef <Vm::initialise8086()>
c0006b28:	e8 7b 3e 00 00       	call   c000a9a8 <Fs::initVFS()>
c0006b2d:	c7 04 24 d5 f0 01 c0 	mov    DWORD PTR [esp],0xc001f0d5
c0006b34:	e8 16 92 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c0006b39:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0006b3e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006b44:	8b 10                	mov    edx,DWORD PTR [eax]
c0006b46:	6a 00                	push   0x0
c0006b48:	6a 00                	push   0x0
c0006b4a:	6a 00                	push   0x0
c0006b4c:	50                   	push   eax
c0006b4d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006b50:	83 c4 14             	add    esp,0x14
c0006b53:	68 c4 f1 01 c0       	push   0xc001f1c4
c0006b58:	e8 f2 91 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c0006b5d:	e8 c8 96 00 00       	call   c001022a <Krnl::loadSystemEnv()>
c0006b62:	e8 25 99 00 00       	call   c001048c <Krnl::setupPowerManager()>
c0006b67:	83 c4 0c             	add    esp,0xc
c0006b6a:	6a 3a                	push   0x3a
c0006b6c:	68 ef f0 01 c0       	push   0xc001f0ef
c0006b71:	68 f8 f0 01 c0       	push   0xc001f0f8
c0006b76:	e8 6a bd 00 00       	call   c00128e5 <Reg::readIntWithDefault(char*, char*, int)>
c0006b7b:	89 04 24             	mov    DWORD PTR [esp],eax
c0006b7e:	e8 31 49 00 00       	call   c000b4b4 <User::loadClockSettings(int)>
c0006b83:	c7 04 24 e8 f1 01 c0 	mov    DWORD PTR [esp],0xc001f1e8
c0006b8a:	e8 c0 91 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c0006b8f:	59                   	pop    ecx
c0006b90:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0006b95:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006b9b:	53                   	push   ebx
c0006b9c:	e8 bf 4f 00 00       	call   c000bb60 <Device::loadDriversForAll()>
c0006ba1:	c7 04 24 00 f1 01 c0 	mov    DWORD PTR [esp],0xc001f100
c0006ba8:	e8 a2 91 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c0006bad:	58                   	pop    eax
c0006bae:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c0006bb4:	5a                   	pop    edx
c0006bb5:	6a 01                	push   0x1
c0006bb7:	68 11 f1 01 c0       	push   0xc001f111
c0006bbc:	e8 c9 d3 00 00       	call   c0013f8a <Thr::loadDLL(char const*, bool)>
c0006bc1:	59                   	pop    ecx
c0006bc2:	5a                   	pop    edx
c0006bc3:	53                   	push   ebx
c0006bc4:	50                   	push   eax
c0006bc5:	e8 f1 d5 00 00       	call   c00141bb <Thr::executeDLL(unsigned long, void*)>
c0006bca:	83 c4 10             	add    esp,0x10
c0006bcd:	83 ec 0c             	sub    esp,0xc
c0006bd0:	6a 02                	push   0x2
c0006bd2:	e8 01 e0 00 00       	call   c0014bd8 <blockTask(TaskState)>
c0006bd7:	83 c4 10             	add    esp,0x10
c0006bda:	eb f1                	jmp    c0006bcd <Krnl::firstTask()+0x124>

c0006bdc <Computer::Computer()>:
c0006bdc:	83 ec 0c             	sub    esp,0xc
c0006bdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006be3:	83 ec 08             	sub    esp,0x8
c0006be6:	68 2d f1 01 c0       	push   0xc001f12d
c0006beb:	50                   	push   eax
c0006bec:	e8 eb 4f 00 00       	call   c000bbdc <Device::Device(char const*)>
c0006bf1:	83 c4 10             	add    esp,0x10
c0006bf4:	ba 34 f2 01 c0       	mov    edx,0xc001f234
c0006bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfd:	89 10                	mov    DWORD PTR [eax],edx
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c11:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006c1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006c25:	83 ca 04             	or     edx,0x4
c0006c28:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c32:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c38:	31 d2                	xor    edx,edx
c0006c3a:	88 c2                	mov    dl,al
c0006c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c40:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c4b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c51:	31 d2                	xor    edx,edx
c0006c53:	88 c2                	mov    dl,al
c0006c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c59:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c68:	8d 50 01             	lea    edx,[eax+0x1]
c0006c6b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006c6f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006c75:	31 d2                	xor    edx,edx
c0006c77:	88 c2                	mov    dl,al
c0006c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c7d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006c81:	83 e1 3f             	and    ecx,0x3f
c0006c84:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006c88:	90                   	nop
c0006c89:	83 c4 0c             	add    esp,0xc
c0006c8c:	c3                   	ret    
c0006c8d:	90                   	nop

c0006c8e <Computer::setBootMessage(char const*)>:
c0006c8e:	c3                   	ret    
c0006c8f:	90                   	nop

c0006c90 <Computer::detectFeatures()>:
c0006c90:	55                   	push   ebp
c0006c91:	57                   	push   edi
c0006c92:	56                   	push   esi
c0006c93:	53                   	push   ebx
c0006c94:	83 ec 1c             	sub    esp,0x1c
c0006c97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006c9b:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006ca5:	e8 4f 95 ff ff       	call   c00001f9 <detectCPUID>
c0006caa:	85 c0                	test   eax,eax
c0006cac:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cb2:	0f 95 c2             	setne  dl
c0006cb5:	83 e0 fd             	and    eax,0xfffffffd
c0006cb8:	01 d2                	add    edx,edx
c0006cba:	09 d0                	or     eax,edx
c0006cbc:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cc2:	a8 02                	test   al,0x2
c0006cc4:	75 46                	jne    c0006d0c <Computer::detectFeatures()+0x7c>
c0006cc6:	f6 05 d1 3e 02 c0 04 	test   BYTE PTR ds:0xc0023ed1,0x4
c0006ccd:	74 07                	je     c0006cd6 <Computer::detectFeatures()+0x46>
c0006ccf:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006cd6:	e8 cb 6c 01 00       	call   c001d9a6 <x87Detect>
c0006cdb:	83 e0 01             	and    eax,0x1
c0006cde:	c1 e0 04             	shl    eax,0x4
c0006ce1:	88 c2                	mov    dl,al
c0006ce3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce9:	83 e0 ef             	and    eax,0xffffffef
c0006cec:	09 d0                	or     eax,edx
c0006cee:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cf4:	a8 10                	test   al,0x10
c0006cf6:	0f 85 2a 01 00 00    	jne    c0006e26 <Computer::detectFeatures()+0x196>
c0006cfc:	84 c0                	test   al,al
c0006cfe:	0f 88 45 01 00 00    	js     c0006e49 <Computer::detectFeatures()+0x1b9>
c0006d04:	83 c4 1c             	add    esp,0x1c
c0006d07:	5b                   	pop    ebx
c0006d08:	5e                   	pop    esi
c0006d09:	5f                   	pop    edi
c0006d0a:	5d                   	pop    ebp
c0006d0b:	c3                   	ret    
c0006d0c:	83 ec 0c             	sub    esp,0xc
c0006d0f:	6a 20                	push   0x20
c0006d11:	e8 66 85 00 00       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c0006d16:	83 e0 01             	and    eax,0x1
c0006d19:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006d20:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d26:	83 e0 f7             	and    eax,0xfffffff7
c0006d29:	09 d0                	or     eax,edx
c0006d2b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d31:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006d38:	e8 3f 85 00 00       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c0006d3d:	83 e0 01             	and    eax,0x1
c0006d40:	88 c2                	mov    dl,al
c0006d42:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d48:	83 e0 fe             	and    eax,0xfffffffe
c0006d4b:	09 d0                	or     eax,edx
c0006d4d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d53:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006d5a:	e8 1d 85 00 00       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c0006d5f:	c1 e0 07             	shl    eax,0x7
c0006d62:	88 c2                	mov    dl,al
c0006d64:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d6a:	83 e0 7f             	and    eax,0x7f
c0006d6d:	09 d0                	or     eax,edx
c0006d6f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d75:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006d7c:	e8 fb 84 00 00       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c0006d81:	83 c4 10             	add    esp,0x10
c0006d84:	83 e0 01             	and    eax,0x1
c0006d87:	c1 e0 05             	shl    eax,0x5
c0006d8a:	88 c2                	mov    dl,al
c0006d8c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d92:	83 e0 df             	and    eax,0xffffffdf
c0006d95:	09 d0                	or     eax,edx
c0006d97:	f7 05 d0 3e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023ed0,0x401
c0006da1:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006da7:	0f 84 c2 00 00 00    	je     c0006e6f <Computer::detectFeatures()+0x1df>
c0006dad:	83 e0 fe             	and    eax,0xfffffffe
c0006db0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006db6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006dbc:	88 c2                	mov    dl,al
c0006dbe:	83 e2 09             	and    edx,0x9
c0006dc1:	fe ca                	dec    dl
c0006dc3:	75 09                	jne    c0006dce <Computer::detectFeatures()+0x13e>
c0006dc5:	83 e0 fe             	and    eax,0xfffffffe
c0006dc8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dce:	83 ec 0c             	sub    esp,0xc
c0006dd1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006dd5:	50                   	push   eax
c0006dd6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006dda:	55                   	push   ebp
c0006ddb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ddf:	57                   	push   edi
c0006de0:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006de4:	56                   	push   esi
c0006de5:	68 00 00 00 80       	push   0x80000000
c0006dea:	e8 09 84 00 00       	call   c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006def:	83 c4 20             	add    esp,0x20
c0006df2:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006df9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006dfd:	0f 86 c3 fe ff ff    	jbe    c0006cc6 <Computer::detectFeatures()+0x36>
c0006e03:	83 ec 0c             	sub    esp,0xc
c0006e06:	50                   	push   eax
c0006e07:	55                   	push   ebp
c0006e08:	57                   	push   edi
c0006e09:	56                   	push   esi
c0006e0a:	68 01 00 00 80       	push   0x80000001
c0006e0f:	e8 e4 83 00 00       	call   c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006e14:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006e1e:	83 c4 20             	add    esp,0x20
c0006e21:	e9 a0 fe ff ff       	jmp    c0006cc6 <Computer::detectFeatures()+0x36>
c0006e26:	e8 35 6b 01 00       	call   c001d960 <absolutelyNoChanceInHell>
c0006e2b:	88 c2                	mov    dl,al
c0006e2d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e33:	c1 e2 07             	shl    edx,0x7
c0006e36:	83 e0 7f             	and    eax,0x7f
c0006e39:	09 d0                	or     eax,edx
c0006e3b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e41:	84 c0                	test   al,al
c0006e43:	0f 89 bb fe ff ff    	jns    c0006d04 <Computer::detectFeatures()+0x74>
c0006e49:	e8 82 67 01 00       	call   c001d5d0 <avxDetect>
c0006e4e:	83 e0 01             	and    eax,0x1
c0006e51:	c1 e0 05             	shl    eax,0x5
c0006e54:	88 c2                	mov    dl,al
c0006e56:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006e5c:	83 e0 df             	and    eax,0xffffffdf
c0006e5f:	09 d0                	or     eax,edx
c0006e61:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006e67:	83 c4 1c             	add    esp,0x1c
c0006e6a:	5b                   	pop    ebx
c0006e6b:	5e                   	pop    esi
c0006e6c:	5f                   	pop    edi
c0006e6d:	5d                   	pop    ebp
c0006e6e:	c3                   	ret    
c0006e6f:	83 ec 0c             	sub    esp,0xc
c0006e72:	68 00 02 00 00       	push   0x200
c0006e77:	e8 00 84 00 00       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c0006e7c:	83 c4 10             	add    esp,0x10
c0006e7f:	83 e0 01             	and    eax,0x1
c0006e82:	88 c2                	mov    dl,al
c0006e84:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e8a:	83 e0 fe             	and    eax,0xfffffffe
c0006e8d:	09 d0                	or     eax,edx
c0006e8f:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e95:	e9 1c ff ff ff       	jmp    c0006db6 <Computer::detectFeatures()+0x126>

c0006e9a <Computer::displayFeatures()>:
c0006e9a:	c3                   	ret    
c0006e9b:	90                   	nop

c0006e9c <Computer::rdmsr(unsigned int)>:
c0006e9c:	83 ec 0c             	sub    esp,0xc
c0006e9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea3:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006eaa:	74 0a                	je     c0006eb6 <Computer::rdmsr(unsigned int)+0x1a>
c0006eac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006eb0:	0f 32                	rdmsr  
c0006eb2:	83 c4 0c             	add    esp,0xc
c0006eb5:	c3                   	ret    
c0006eb6:	83 ec 0c             	sub    esp,0xc
c0006eb9:	68 36 f1 01 c0       	push   0xc001f136
c0006ebe:	e8 04 95 00 00       	call   c00103c7 <KePanic(char const*)>
c0006ec3:	83 c4 10             	add    esp,0x10
c0006ec6:	eb e4                	jmp    c0006eac <Computer::rdmsr(unsigned int)+0x10>

c0006ec8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006ec8:	57                   	push   edi
c0006ec9:	56                   	push   esi
c0006eca:	52                   	push   edx
c0006ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ecf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006ed3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006ed7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006ede:	74 0e                	je     c0006eee <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006ee0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006ee4:	89 f0                	mov    eax,esi
c0006ee6:	89 fa                	mov    edx,edi
c0006ee8:	0f 30                	wrmsr  
c0006eea:	58                   	pop    eax
c0006eeb:	5e                   	pop    esi
c0006eec:	5f                   	pop    edi
c0006eed:	c3                   	ret    
c0006eee:	83 ec 0c             	sub    esp,0xc
c0006ef1:	68 3c f1 01 c0       	push   0xc001f13c
c0006ef6:	e8 cc 94 00 00       	call   c00103c7 <KePanic(char const*)>
c0006efb:	83 c4 10             	add    esp,0x10
c0006efe:	eb e0                	jmp    c0006ee0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006f00 <Computer::shutdown()>:
c0006f00:	83 ec 0c             	sub    esp,0xc
c0006f03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f07:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f09:	6a 00                	push   0x0
c0006f0b:	6a 00                	push   0x0
c0006f0d:	6a 00                	push   0x0
c0006f0f:	50                   	push   eax
c0006f10:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f13:	83 c4 1c             	add    esp,0x1c
c0006f16:	c3                   	ret    
c0006f17:	90                   	nop

c0006f18 <Computer::restart()>:
c0006f18:	83 ec 0c             	sub    esp,0xc
c0006f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f21:	6a 00                	push   0x0
c0006f23:	6a 00                	push   0x0
c0006f25:	6a 01                	push   0x1
c0006f27:	50                   	push   eax
c0006f28:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f2b:	83 c4 1c             	add    esp,0x1c
c0006f2e:	c3                   	ret    
c0006f2f:	90                   	nop

c0006f30 <Computer::sleep()>:
c0006f30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f34:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006f3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f3e:	e9 b1 7d 00 00       	jmp    c000ecf4 <ACPI::sleep()>
c0006f43:	90                   	nop

c0006f44 <Computer::nmiEnabled()>:
c0006f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f48:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006f4e:	c3                   	ret    
c0006f4f:	90                   	nop

c0006f50 <Computer::readCMOS(unsigned char)>:
c0006f50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f54:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006f5b:	19 c0                	sbb    eax,eax
c0006f5d:	83 e0 80             	and    eax,0xffffff80
c0006f60:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006f64:	e6 70                	out    0x70,al
c0006f66:	e4 71                	in     al,0x71
c0006f68:	c3                   	ret    
c0006f69:	90                   	nop

c0006f6a <Computer::enableNMI(bool)>:
c0006f6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006f6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f72:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006f78:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006f80:	eb ce                	jmp    c0006f50 <Computer::readCMOS(unsigned char)>

c0006f82 <Computer::open(int, int, void*)>:
c0006f82:	56                   	push   esi
c0006f83:	53                   	push   ebx
c0006f84:	83 ec 10             	sub    esp,0x10
c0006f87:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006f8b:	f6 05 d0 3e 02 c0 04 	test   BYTE PTR ds:0xc0023ed0,0x4
c0006f92:	68 42 f1 01 c0       	push   0xc001f142
c0006f97:	0f 94 05 80 15 02 c0 	sete   BYTE PTR ds:0xc0021580
c0006f9e:	e8 ac 8d 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c0006fa3:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006faa:	e8 b6 08 00 00       	call   c0007865 <malloc>
c0006faf:	89 04 24             	mov    DWORD PTR [esp],eax
c0006fb2:	89 c6                	mov    esi,eax
c0006fb4:	e8 d3 78 00 00       	call   c000e88c <ACPI::ACPI()>
c0006fb9:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006fbf:	58                   	pop    eax
c0006fc0:	5a                   	pop    edx
c0006fc1:	56                   	push   esi
c0006fc2:	53                   	push   ebx
c0006fc3:	e8 7c 4a 00 00       	call   c000ba44 <Device::addChild(Device*)>
c0006fc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006fcb:	e8 c0 fc ff ff       	call   c0006c90 <Computer::detectFeatures()>
c0006fd0:	59                   	pop    ecx
c0006fd1:	5e                   	pop    esi
c0006fd2:	6a 01                	push   0x1
c0006fd4:	53                   	push   ebx
c0006fd5:	e8 90 ff ff ff       	call   c0006f6a <Computer::enableNMI(bool)>
c0006fda:	c7 04 24 5a f1 01 c0 	mov    DWORD PTR [esp],0xc001f15a
c0006fe1:	e8 69 8d 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c0006fe6:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006fed:	e8 73 08 00 00       	call   c0007865 <malloc>
c0006ff2:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ff5:	89 c6                	mov    esi,eax
c0006ff7:	e8 38 83 00 00       	call   c000f334 <CPU::CPU()>
c0006ffc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007002:	58                   	pop    eax
c0007003:	5a                   	pop    edx
c0007004:	56                   	push   esi
c0007005:	53                   	push   ebx
c0007006:	e8 39 4a 00 00       	call   c000ba44 <Device::addChild(Device*)>
c000700b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007011:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007015:	8b 10                	mov    edx,DWORD PTR [eax]
c0007017:	51                   	push   ecx
c0007018:	6a 00                	push   0x0
c000701a:	6a 00                	push   0x0
c000701c:	50                   	push   eax
c000701d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007020:	83 c4 14             	add    esp,0x14
c0007023:	68 08 f2 01 c0       	push   0xc001f208
c0007028:	e8 22 8d 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c000702d:	e8 2f f7 00 00       	call   c0016761 <HalInitialiseCoprocessor()>
c0007032:	c7 04 24 74 f1 01 c0 	mov    DWORD PTR [esp],0xc001f174
c0007039:	e8 11 8d 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c000703e:	c7 04 24 a9 6a 00 c0 	mov    DWORD PTR [esp],0xc0006aa9
c0007045:	e8 76 d8 00 00       	call   c00148c0 <setupMultitasking(void (*)())>
c000704a:	83 c4 14             	add    esp,0x14
c000704d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007052:	5b                   	pop    ebx
c0007053:	5e                   	pop    esi
c0007054:	c3                   	ret    
c0007055:	90                   	nop

c0007056 <Computer::disableNMI()>:
c0007056:	6a 00                	push   0x0
c0007058:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000705c:	50                   	push   eax
c000705d:	e8 08 ff ff ff       	call   c0006f6a <Computer::enableNMI(bool)>
c0007062:	5a                   	pop    edx
c0007063:	59                   	pop    ecx
c0007064:	c3                   	ret    
c0007065:	90                   	nop

c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000706a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007071:	19 c0                	sbb    eax,eax
c0007073:	83 e0 80             	and    eax,0xffffff80
c0007076:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000707a:	e6 70                	out    0x70,al
c000707c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007080:	e6 71                	out    0x71,al
c0007082:	c3                   	ret    
c0007083:	90                   	nop

c0007084 <Computer::handleNMI()>:
c0007084:	56                   	push   esi
c0007085:	53                   	push   ebx
c0007086:	83 ec 10             	sub    esp,0x10
c0007089:	e4 92                	in     al,0x92
c000708b:	89 c6                	mov    esi,eax
c000708d:	e4 61                	in     al,0x61
c000708f:	68 8f f1 01 c0       	push   0xc001f18f
c0007094:	88 c3                	mov    bl,al
c0007096:	e8 6b 35 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000709b:	83 c4 10             	add    esp,0x10
c000709e:	83 e6 10             	and    esi,0x10
c00070a1:	75 0d                	jne    c00070b0 <Computer::handleNMI()+0x2c>
c00070a3:	f6 c3 40             	test   bl,0x40
c00070a6:	75 1d                	jne    c00070c5 <Computer::handleNMI()+0x41>
c00070a8:	84 db                	test   bl,bl
c00070aa:	78 2d                	js     c00070d9 <Computer::handleNMI()+0x55>
c00070ac:	58                   	pop    eax
c00070ad:	5b                   	pop    ebx
c00070ae:	5e                   	pop    esi
c00070af:	c3                   	ret    
c00070b0:	83 ec 0c             	sub    esp,0xc
c00070b3:	68 a0 f1 01 c0       	push   0xc001f1a0
c00070b8:	e8 0a 93 00 00       	call   c00103c7 <KePanic(char const*)>
c00070bd:	83 c4 10             	add    esp,0x10
c00070c0:	f6 c3 40             	test   bl,0x40
c00070c3:	74 e3                	je     c00070a8 <Computer::handleNMI()+0x24>
c00070c5:	83 ec 0c             	sub    esp,0xc
c00070c8:	68 ad f1 01 c0       	push   0xc001f1ad
c00070cd:	e8 f5 92 00 00       	call   c00103c7 <KePanic(char const*)>
c00070d2:	83 c4 10             	add    esp,0x10
c00070d5:	84 db                	test   bl,bl
c00070d7:	79 d3                	jns    c00070ac <Computer::handleNMI()+0x28>
c00070d9:	c7 44 24 10 b7 f1 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f1b7
c00070e1:	5a                   	pop    edx
c00070e2:	5b                   	pop    ebx
c00070e3:	5e                   	pop    esi
c00070e4:	e9 de 92 00 00       	jmp    c00103c7 <KePanic(char const*)>
c00070e9:	90                   	nop

c00070ea <GDTEntry::setBase(unsigned int)>:
c00070ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00070f2:	89 c1                	mov    ecx,eax
c00070f4:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00070f8:	c1 e9 10             	shr    ecx,0x10
c00070fb:	c1 e8 18             	shr    eax,0x18
c00070fe:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007101:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007104:	c3                   	ret    
c0007105:	90                   	nop

c0007106 <GDTEntry::setLimit(unsigned int)>:
c0007106:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000710a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000710e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007111:	66 89 01             	mov    WORD PTR [ecx],ax
c0007114:	83 e2 f0             	and    edx,0xfffffff0
c0007117:	c1 e8 10             	shr    eax,0x10
c000711a:	83 e0 0f             	and    eax,0xf
c000711d:	09 d0                	or     eax,edx
c000711f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007122:	c3                   	ret    
c0007123:	90                   	nop

c0007124 <GDT::GDT()>:
c0007124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007128:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000712e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007132:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007138:	90                   	nop
c0007139:	c3                   	ret    

c000713a <GDT::addEntry(GDTEntry)>:
c000713a:	53                   	push   ebx
c000713b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000713f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007143:	8b 02                	mov    eax,DWORD PTR [edx]
c0007145:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007149:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000714d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007151:	8d 48 01             	lea    ecx,[eax+0x1]
c0007154:	c1 e0 03             	shl    eax,0x3
c0007157:	89 0a                	mov    DWORD PTR [edx],ecx
c0007159:	5b                   	pop    ebx
c000715a:	c3                   	ret    
c000715b:	90                   	nop

c000715c <GDT::getNumberOfEntries()>:
c000715c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007160:	8b 00                	mov    eax,DWORD PTR [eax]
c0007162:	c3                   	ret    
c0007163:	90                   	nop

c0007164 <GDT::flush()>:
c0007164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007168:	8b 10                	mov    edx,DWORD PTR [eax]
c000716a:	83 c0 04             	add    eax,0x4
c000716d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007174:	a3 c2 3e 02 c0       	mov    ds:0xc0023ec2,eax
c0007179:	66 89 15 c0 3e 02 c0 	mov    WORD PTR ds:0xc0023ec0,dx
c0007180:	e9 d5 91 ff ff       	jmp    c000035a <loadGDT>
c0007185:	90                   	nop

c0007186 <GDT::setup()>:
c0007186:	57                   	push   edi
c0007187:	56                   	push   esi
c0007188:	53                   	push   ebx
c0007189:	83 ec 30             	sub    esp,0x30
c000718c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007190:	6a 00                	push   0x0
c0007192:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007196:	56                   	push   esi
c0007197:	e8 4e ff ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c000719c:	6a 00                	push   0x0
c000719e:	56                   	push   esi
c000719f:	e8 62 ff ff ff       	call   c0007106 <GDTEntry::setLimit(unsigned int)>
c00071a4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00071ac:	6a 00                	push   0x0
c00071ae:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00071b2:	56                   	push   esi
c00071b3:	e8 32 ff ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c00071b8:	68 ff ff ff 00       	push   0xffffff
c00071bd:	56                   	push   esi
c00071be:	e8 43 ff ff ff       	call   c0007106 <GDTEntry::setLimit(unsigned int)>
c00071c3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00071c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00071cb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00071cf:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00071d3:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00071d8:	0d 00 9a c0 00       	or     eax,0xc09a00
c00071dd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00071e1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00071e5:	89 f8                	mov    eax,edi
c00071e7:	89 fa                	mov    edx,edi
c00071e9:	80 e4 f7             	and    ah,0xf7
c00071ec:	80 ce 60             	or     dh,0x60
c00071ef:	89 c7                	mov    edi,eax
c00071f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00071f5:	80 cc 60             	or     ah,0x60
c00071f8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00071fc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007200:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007204:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007208:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000720c:	83 c4 20             	add    esp,0x20
c000720f:	6a 00                	push   0x0
c0007211:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007215:	50                   	push   eax
c0007216:	e8 cf fe ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c000721b:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000721f:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007223:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007228:	6a 00                	push   0x0
c000722a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000722e:	50                   	push   eax
c000722f:	e8 b6 fe ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c0007234:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007239:	83 c4 0c             	add    esp,0xc
c000723c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007240:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007244:	53                   	push   ebx
c0007245:	e8 f0 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c000724a:	83 c4 0c             	add    esp,0xc
c000724d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007251:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007255:	53                   	push   ebx
c0007256:	e8 df fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c000725b:	83 c4 0c             	add    esp,0xc
c000725e:	57                   	push   edi
c000725f:	56                   	push   esi
c0007260:	53                   	push   ebx
c0007261:	e8 d4 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0007266:	83 c4 0c             	add    esp,0xc
c0007269:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000726d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007271:	53                   	push   ebx
c0007272:	e8 c3 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0007277:	83 c4 0c             	add    esp,0xc
c000727a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000727e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007282:	53                   	push   ebx
c0007283:	e8 b2 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0007288:	83 c4 0c             	add    esp,0xc
c000728b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000728f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007293:	53                   	push   ebx
c0007294:	e8 a1 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0007299:	83 c4 0c             	add    esp,0xc
c000729c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072a4:	53                   	push   ebx
c00072a5:	e8 90 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c00072aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00072ad:	e8 b2 fe ff ff       	call   c0007164 <GDT::flush()>
c00072b2:	83 c4 40             	add    esp,0x40
c00072b5:	5b                   	pop    ebx
c00072b6:	5e                   	pop    esi
c00072b7:	5f                   	pop    edi
c00072b8:	c3                   	ret    

c00072b9 <idleFunction(void*)>:
c00072b9:	83 ec 0c             	sub    esp,0xc
c00072bc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00072c1:	48                   	dec    eax
c00072c2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00072c7:	75 01                	jne    c00072ca <idleFunction(void*)+0x11>
c00072c9:	fb                   	sti    
c00072ca:	e8 6c f1 00 00       	call   c001643b <HalSystemIdle()>
c00072cf:	e8 8e 6c 01 00       	call   c001df62 <idleCommon()>
c00072d4:	eb f4                	jmp    c00072ca <idleFunction(void*)+0x11>
c00072d6:	66 90                	xchg   ax,ax

c00072d8 <IDTEntry::IDTEntry(bool)>:
c00072d8:	83 ec 04             	sub    esp,0x4
c00072db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072df:	88 04 24             	mov    BYTE PTR [esp],al
c00072e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072e6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00072ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072f0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00072f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072f8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00072fb:	83 e2 f0             	and    edx,0xfffffff0
c00072fe:	83 ca 0e             	or     edx,0xe
c0007301:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007304:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007308:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000730b:	83 e2 ef             	and    edx,0xffffffef
c000730e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007311:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007315:	74 05                	je     c000731c <IDTEntry::IDTEntry(bool)+0x44>
c0007317:	b2 03                	mov    dl,0x3
c0007319:	eb 05                	jmp    c0007320 <IDTEntry::IDTEntry(bool)+0x48>
c000731b:	90                   	nop
c000731c:	b2 00                	mov    dl,0x0
c000731e:	66 90                	xchg   ax,ax
c0007320:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007324:	83 e2 03             	and    edx,0x3
c0007327:	88 d1                	mov    cl,dl
c0007329:	c1 e1 05             	shl    ecx,0x5
c000732c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000732f:	83 e2 9f             	and    edx,0xffffff9f
c0007332:	09 ca                	or     edx,ecx
c0007334:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007337:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000733e:	83 ca 80             	or     edx,0xffffff80
c0007341:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007344:	90                   	nop
c0007345:	83 c4 04             	add    esp,0x4
c0007348:	c3                   	ret    
c0007349:	90                   	nop

c000734a <IDTEntry::setOffset(unsigned int)>:
c000734a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007352:	66 89 02             	mov    WORD PTR [edx],ax
c0007355:	c1 e8 10             	shr    eax,0x10
c0007358:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000735c:	c3                   	ret    
c000735d:	90                   	nop
c000735e:	66 90                	xchg   ax,ax

c0007360 <IDT::IDT()>:
c0007360:	90                   	nop
c0007361:	c3                   	ret    

c0007362 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007366:	83 c0 30             	add    eax,0x30
c0007369:	c3                   	ret    

c000736a <IDT::addEntry(IDTEntry, int)>:
c000736a:	53                   	push   ebx
c000736b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000736f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007373:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007377:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000737b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000737e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0007382:	5b                   	pop    ebx
c0007383:	c3                   	ret    

c0007384 <IDT::addEntry(int, void (*)(), bool)>:
c0007384:	53                   	push   ebx
c0007385:	83 ec 10             	sub    esp,0x10
c0007388:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000738d:	50                   	push   eax
c000738e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0007392:	53                   	push   ebx
c0007393:	e8 40 ff ff ff       	call   c00072d8 <IDTEntry::IDTEntry(bool)>
c0007398:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000739c:	53                   	push   ebx
c000739d:	e8 a8 ff ff ff       	call   c000734a <IDTEntry::setOffset(unsigned int)>
c00073a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00073a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00073b2:	e8 b3 ff ff ff       	call   c000736a <IDT::addEntry(IDTEntry, int)>
c00073b7:	83 c4 30             	add    esp,0x30
c00073ba:	5b                   	pop    ebx
c00073bb:	c3                   	ret    

c00073bc <IDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	66 c7 05 c8 3e 02 c0 ff 07 	mov    WORD PTR ds:0xc0023ec8,0x7ff
c00073c9:	a3 ca 3e 02 c0       	mov    ds:0xc0023eca,eax
c00073ce:	0f 01 1d c8 3e 02 c0 	lidtd  ds:0xc0023ec8
c00073d5:	c3                   	ret    

c00073d6 <IDT::setup()>:
c00073d6:	57                   	push   edi
c00073d7:	56                   	push   esi
c00073d8:	53                   	push   ebx
c00073d9:	83 ec 10             	sub    esp,0x10
c00073dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00073e0:	6a 00                	push   0x0
c00073e2:	68 60 d6 01 c0       	push   0xc001d660
c00073e7:	6a 00                	push   0x0
c00073e9:	53                   	push   ebx
c00073ea:	e8 95 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00073ef:	6a 00                	push   0x0
c00073f1:	68 70 d6 01 c0       	push   0xc001d670
c00073f6:	6a 01                	push   0x1
c00073f8:	53                   	push   ebx
c00073f9:	e8 86 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00073fe:	83 c4 20             	add    esp,0x20
c0007401:	6a 00                	push   0x0
c0007403:	68 7a d6 01 c0       	push   0xc001d67a
c0007408:	6a 02                	push   0x2
c000740a:	53                   	push   ebx
c000740b:	e8 74 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007410:	6a 00                	push   0x0
c0007412:	68 84 d6 01 c0       	push   0xc001d684
c0007417:	6a 03                	push   0x3
c0007419:	53                   	push   ebx
c000741a:	e8 65 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000741f:	83 c4 20             	add    esp,0x20
c0007422:	6a 00                	push   0x0
c0007424:	68 8e d6 01 c0       	push   0xc001d68e
c0007429:	6a 04                	push   0x4
c000742b:	53                   	push   ebx
c000742c:	e8 53 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007431:	6a 00                	push   0x0
c0007433:	68 98 d6 01 c0       	push   0xc001d698
c0007438:	6a 05                	push   0x5
c000743a:	53                   	push   ebx
c000743b:	e8 44 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007440:	83 c4 20             	add    esp,0x20
c0007443:	6a 00                	push   0x0
c0007445:	68 a2 d6 01 c0       	push   0xc001d6a2
c000744a:	6a 06                	push   0x6
c000744c:	53                   	push   ebx
c000744d:	e8 32 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007452:	6a 00                	push   0x0
c0007454:	68 ac d6 01 c0       	push   0xc001d6ac
c0007459:	6a 07                	push   0x7
c000745b:	53                   	push   ebx
c000745c:	e8 23 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	6a 00                	push   0x0
c0007466:	68 b6 d6 01 c0       	push   0xc001d6b6
c000746b:	6a 08                	push   0x8
c000746d:	53                   	push   ebx
c000746e:	e8 11 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007473:	6a 00                	push   0x0
c0007475:	68 be d6 01 c0       	push   0xc001d6be
c000747a:	6a 09                	push   0x9
c000747c:	53                   	push   ebx
c000747d:	e8 02 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007482:	83 c4 20             	add    esp,0x20
c0007485:	6a 00                	push   0x0
c0007487:	68 c8 d6 01 c0       	push   0xc001d6c8
c000748c:	6a 0a                	push   0xa
c000748e:	53                   	push   ebx
c000748f:	e8 f0 fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007494:	6a 00                	push   0x0
c0007496:	68 d0 d6 01 c0       	push   0xc001d6d0
c000749b:	6a 0b                	push   0xb
c000749d:	53                   	push   ebx
c000749e:	e8 e1 fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074a3:	83 c4 20             	add    esp,0x20
c00074a6:	6a 00                	push   0x0
c00074a8:	68 d8 d6 01 c0       	push   0xc001d6d8
c00074ad:	6a 0c                	push   0xc
c00074af:	53                   	push   ebx
c00074b0:	e8 cf fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074b5:	6a 00                	push   0x0
c00074b7:	68 e0 d6 01 c0       	push   0xc001d6e0
c00074bc:	6a 0d                	push   0xd
c00074be:	53                   	push   ebx
c00074bf:	e8 c0 fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074c4:	83 c4 20             	add    esp,0x20
c00074c7:	6a 00                	push   0x0
c00074c9:	68 fa d6 01 c0       	push   0xc001d6fa
c00074ce:	6a 0e                	push   0xe
c00074d0:	53                   	push   ebx
c00074d1:	e8 ae fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074d6:	6a 00                	push   0x0
c00074d8:	68 02 d7 01 c0       	push   0xc001d702
c00074dd:	6a 0f                	push   0xf
c00074df:	53                   	push   ebx
c00074e0:	e8 9f fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074e5:	83 c4 20             	add    esp,0x20
c00074e8:	6a 00                	push   0x0
c00074ea:	68 0c d7 01 c0       	push   0xc001d70c
c00074ef:	6a 10                	push   0x10
c00074f1:	53                   	push   ebx
c00074f2:	e8 8d fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074f7:	6a 00                	push   0x0
c00074f9:	68 16 d7 01 c0       	push   0xc001d716
c00074fe:	6a 11                	push   0x11
c0007500:	53                   	push   ebx
c0007501:	e8 7e fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007506:	83 c4 20             	add    esp,0x20
c0007509:	6a 00                	push   0x0
c000750b:	68 20 d7 01 c0       	push   0xc001d720
c0007510:	6a 12                	push   0x12
c0007512:	53                   	push   ebx
c0007513:	e8 6c fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007518:	6a 01                	push   0x1
c000751a:	68 ba d7 01 c0       	push   0xc001d7ba
c000751f:	6a 60                	push   0x60
c0007521:	53                   	push   ebx
c0007522:	e8 5d fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007527:	83 c4 20             	add    esp,0x20
c000752a:	6a 00                	push   0x0
c000752c:	68 c1 d7 01 c0       	push   0xc001d7c1
c0007531:	6a 20                	push   0x20
c0007533:	53                   	push   ebx
c0007534:	e8 4b fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007539:	6a 00                	push   0x0
c000753b:	68 ac d7 01 c0       	push   0xc001d7ac
c0007540:	6a 21                	push   0x21
c0007542:	53                   	push   ebx
c0007543:	e8 3c fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007548:	83 c4 20             	add    esp,0x20
c000754b:	6a 00                	push   0x0
c000754d:	68 b3 d7 01 c0       	push   0xc001d7b3
c0007552:	6a 22                	push   0x22
c0007554:	53                   	push   ebx
c0007555:	e8 2a fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000755a:	6a 00                	push   0x0
c000755c:	68 2a d7 01 c0       	push   0xc001d72a
c0007561:	6a 23                	push   0x23
c0007563:	53                   	push   ebx
c0007564:	e8 1b fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007569:	83 c4 20             	add    esp,0x20
c000756c:	6a 00                	push   0x0
c000756e:	68 34 d7 01 c0       	push   0xc001d734
c0007573:	6a 24                	push   0x24
c0007575:	53                   	push   ebx
c0007576:	e8 09 fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000757b:	6a 00                	push   0x0
c000757d:	68 3e d7 01 c0       	push   0xc001d73e
c0007582:	6a 25                	push   0x25
c0007584:	53                   	push   ebx
c0007585:	e8 fa fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000758a:	83 c4 20             	add    esp,0x20
c000758d:	6a 00                	push   0x0
c000758f:	68 48 d7 01 c0       	push   0xc001d748
c0007594:	6a 26                	push   0x26
c0007596:	53                   	push   ebx
c0007597:	e8 e8 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000759c:	6a 00                	push   0x0
c000759e:	68 52 d7 01 c0       	push   0xc001d752
c00075a3:	6a 27                	push   0x27
c00075a5:	53                   	push   ebx
c00075a6:	e8 d9 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075ab:	83 c4 20             	add    esp,0x20
c00075ae:	6a 00                	push   0x0
c00075b0:	68 5c d7 01 c0       	push   0xc001d75c
c00075b5:	6a 28                	push   0x28
c00075b7:	53                   	push   ebx
c00075b8:	e8 c7 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075bd:	6a 00                	push   0x0
c00075bf:	68 66 d7 01 c0       	push   0xc001d766
c00075c4:	6a 29                	push   0x29
c00075c6:	53                   	push   ebx
c00075c7:	e8 b8 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075cc:	83 c4 20             	add    esp,0x20
c00075cf:	6a 00                	push   0x0
c00075d1:	68 70 d7 01 c0       	push   0xc001d770
c00075d6:	6a 2a                	push   0x2a
c00075d8:	53                   	push   ebx
c00075d9:	e8 a6 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075de:	6a 00                	push   0x0
c00075e0:	68 7a d7 01 c0       	push   0xc001d77a
c00075e5:	6a 2b                	push   0x2b
c00075e7:	53                   	push   ebx
c00075e8:	e8 97 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075ed:	83 c4 20             	add    esp,0x20
c00075f0:	6a 00                	push   0x0
c00075f2:	68 84 d7 01 c0       	push   0xc001d784
c00075f7:	6a 2c                	push   0x2c
c00075f9:	53                   	push   ebx
c00075fa:	e8 85 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075ff:	6a 00                	push   0x0
c0007601:	68 8e d7 01 c0       	push   0xc001d78e
c0007606:	6a 2d                	push   0x2d
c0007608:	53                   	push   ebx
c0007609:	e8 76 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000760e:	83 c4 20             	add    esp,0x20
c0007611:	6a 00                	push   0x0
c0007613:	68 98 d7 01 c0       	push   0xc001d798
c0007618:	6a 2e                	push   0x2e
c000761a:	53                   	push   ebx
c000761b:	e8 64 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007620:	6a 00                	push   0x0
c0007622:	68 a2 d7 01 c0       	push   0xc001d7a2
c0007627:	6a 2f                	push   0x2f
c0007629:	53                   	push   ebx
c000762a:	e8 55 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000762f:	83 c4 20             	add    esp,0x20
c0007632:	6a 00                	push   0x0
c0007634:	68 fc d8 01 c0       	push   0xc001d8fc
c0007639:	6a 30                	push   0x30
c000763b:	53                   	push   ebx
c000763c:	e8 43 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007641:	6a 00                	push   0x0
c0007643:	68 06 d9 01 c0       	push   0xc001d906
c0007648:	6a 31                	push   0x31
c000764a:	53                   	push   ebx
c000764b:	e8 34 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007650:	83 c4 20             	add    esp,0x20
c0007653:	6a 00                	push   0x0
c0007655:	68 10 d9 01 c0       	push   0xc001d910
c000765a:	6a 32                	push   0x32
c000765c:	53                   	push   ebx
c000765d:	e8 22 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007662:	6a 00                	push   0x0
c0007664:	68 1a d9 01 c0       	push   0xc001d91a
c0007669:	6a 33                	push   0x33
c000766b:	53                   	push   ebx
c000766c:	e8 13 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007671:	83 c4 20             	add    esp,0x20
c0007674:	6a 00                	push   0x0
c0007676:	68 24 d9 01 c0       	push   0xc001d924
c000767b:	6a 34                	push   0x34
c000767d:	53                   	push   ebx
c000767e:	e8 01 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007683:	6a 00                	push   0x0
c0007685:	68 2e d9 01 c0       	push   0xc001d92e
c000768a:	6a 35                	push   0x35
c000768c:	53                   	push   ebx
c000768d:	e8 f2 fc ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007692:	83 c4 20             	add    esp,0x20
c0007695:	6a 00                	push   0x0
c0007697:	68 38 d9 01 c0       	push   0xc001d938
c000769c:	6a 36                	push   0x36
c000769e:	53                   	push   ebx
c000769f:	e8 e0 fc ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00076a4:	6a 00                	push   0x0
c00076a6:	68 42 d9 01 c0       	push   0xc001d942
c00076ab:	6a 37                	push   0x37
c00076ad:	53                   	push   ebx
c00076ae:	e8 d1 fc ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00076b3:	83 c4 1c             	add    esp,0x1c
c00076b6:	6a 03                	push   0x3
c00076b8:	6a 02                	push   0x2
c00076ba:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c00076c0:	e8 4b 24 00 00       	call   c0009b10 <VAS::allocatePages(int, int)>
c00076c5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00076cc:	89 c6                	mov    esi,eax
c00076ce:	e8 92 01 00 00       	call   c0007865 <malloc>
c00076d3:	81 c6 00 20 00 00    	add    esi,0x2000
c00076d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00076dc:	89 c7                	mov    edi,eax
c00076de:	e8 a9 15 00 00       	call   c0008c8c <TSS::TSS()>
c00076e3:	83 c4 0c             	add    esp,0xc
c00076e6:	68 b6 d6 01 c0       	push   0xc001d6b6
c00076eb:	56                   	push   esi
c00076ec:	57                   	push   edi
c00076ed:	e8 de 15 00 00       	call   c0008cd0 <TSS::setup(unsigned long, unsigned long)>
c00076f2:	89 c6                	mov    esi,eax
c00076f4:	58                   	pop    eax
c00076f5:	5a                   	pop    edx
c00076f6:	6a 00                	push   0x0
c00076f8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00076fc:	50                   	push   eax
c00076fd:	e8 d6 fb ff ff       	call   c00072d8 <IDTEntry::IDTEntry(bool)>
c0007702:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007706:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000770b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007712:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007718:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000771c:	80 ce 05             	or     dh,0x5
c000771f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007722:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007726:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000772a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000772d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007730:	e8 87 fc ff ff       	call   c00073bc <IDT::flush()>
c0007735:	83 c4 20             	add    esp,0x20
c0007738:	5b                   	pop    ebx
c0007739:	5e                   	pop    esi
c000773a:	5f                   	pop    edi
c000773b:	c3                   	ret    

c000773c <sbrk>:
c000773c:	55                   	push   ebp
c000773d:	57                   	push   edi
c000773e:	56                   	push   esi
c000773f:	53                   	push   ebx
c0007740:	83 ec 1c             	sub    esp,0x1c
c0007743:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007747:	85 c0                	test   eax,eax
c0007749:	74 5f                	je     c00077aa <sbrk+0x6e>
c000774b:	78 64                	js     c00077b1 <sbrk+0x75>
c000774d:	8b 15 74 15 02 c0    	mov    edx,DWORD PTR ds:0xc0021574
c0007753:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007757:	05 ff 0f 00 00       	add    eax,0xfff
c000775c:	89 c5                	mov    ebp,eax
c000775e:	78 69                	js     c00077c9 <sbrk+0x8d>
c0007760:	c1 fd 0c             	sar    ebp,0xc
c0007763:	bb 00 00 00 00       	mov    ebx,0x0
c0007768:	8b 35 b0 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023fb0
c000776e:	8b 3d 74 15 02 c0    	mov    edi,DWORD PTR ds:0xc0021574
c0007774:	e8 c8 03 00 00       	call   c0007b41 <Phys::allocatePage()>
c0007779:	68 01 04 00 00       	push   0x401
c000777e:	57                   	push   edi
c000777f:	50                   	push   eax
c0007780:	56                   	push   esi
c0007781:	e8 86 22 00 00       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c0007786:	81 05 74 15 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021574,0x1000
c0007790:	43                   	inc    ebx
c0007791:	83 c4 10             	add    esp,0x10
c0007794:	39 dd                	cmp    ebp,ebx
c0007796:	75 d0                	jne    c0007768 <sbrk+0x2c>
c0007798:	0f 20 d8             	mov    eax,cr3
c000779b:	0f 22 d8             	mov    cr3,eax
c000779e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00077a2:	83 c4 1c             	add    esp,0x1c
c00077a5:	5b                   	pop    ebx
c00077a6:	5e                   	pop    esi
c00077a7:	5f                   	pop    edi
c00077a8:	5d                   	pop    ebp
c00077a9:	c3                   	ret    
c00077aa:	a1 74 15 02 c0       	mov    eax,ds:0xc0021574
c00077af:	eb f1                	jmp    c00077a2 <sbrk+0x66>
c00077b1:	83 ec 08             	sub    esp,0x8
c00077b4:	50                   	push   eax
c00077b5:	68 58 f2 01 c0       	push   0xc001f258
c00077ba:	e8 47 2e 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00077bf:	83 c4 10             	add    esp,0x10
c00077c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00077c7:	eb d9                	jmp    c00077a2 <sbrk+0x66>
c00077c9:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c00077cf:	eb 8f                	jmp    c0007760 <sbrk+0x24>

c00077d1 <mmap>:
c00077d1:	83 ec 18             	sub    esp,0x18
c00077d4:	68 88 f2 01 c0       	push   0xc001f288
c00077d9:	e8 e9 8b 00 00       	call   c00103c7 <KePanic(char const*)>
c00077de:	b8 00 00 00 00       	mov    eax,0x0
c00077e3:	83 c4 1c             	add    esp,0x1c
c00077e6:	c3                   	ret    

c00077e7 <munmap>:
c00077e7:	83 ec 18             	sub    esp,0x18
c00077ea:	68 8d f2 01 c0       	push   0xc001f28d
c00077ef:	e8 d3 8b 00 00       	call   c00103c7 <KePanic(char const*)>
c00077f4:	b8 00 00 00 00       	mov    eax,0x0
c00077f9:	83 c4 1c             	add    esp,0x1c
c00077fc:	c3                   	ret    

c00077fd <liballoc_lock()>:
c00077fd:	fa                   	cli    
c00077fe:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0007804:	b8 00 00 00 00       	mov    eax,0x0
c0007809:	c3                   	ret    

c000780a <liballoc_unlock()>:
c000780a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000780f:	48                   	dec    eax
c0007810:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0007815:	75 01                	jne    c0007818 <liballoc_unlock()+0xe>
c0007817:	fb                   	sti    
c0007818:	b8 00 00 00 00       	mov    eax,0x0
c000781d:	c3                   	ret    

c000781e <liballoc_alloc(int)>:
c000781e:	83 ec 10             	sub    esp,0x10
c0007821:	6a 01                	push   0x1
c0007823:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007827:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c000782d:	e8 de 22 00 00       	call   c0009b10 <VAS::allocatePages(int, int)>
c0007832:	83 c4 1c             	add    esp,0x1c
c0007835:	c3                   	ret    

c0007836 <liballoc_free(void*, int)>:
c0007836:	83 ec 14             	sub    esp,0x14
c0007839:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000783d:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c0007843:	e8 1a 1f 00 00       	call   c0009762 <VAS::freeAllocatedPages(unsigned long)>
c0007848:	b8 00 00 00 00       	mov    eax,0x0
c000784d:	83 c4 1c             	add    esp,0x1c
c0007850:	c3                   	ret    

c0007851 <realloc>:
c0007851:	83 ec 14             	sub    esp,0x14
c0007854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000785c:	e8 c0 9c ff ff       	call   c0001521 <dlrealloc>
c0007861:	83 c4 1c             	add    esp,0x1c
c0007864:	c3                   	ret    

c0007865 <malloc>:
c0007865:	83 ec 18             	sub    esp,0x18
c0007868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000786c:	e8 73 97 ff ff       	call   c0000fe4 <dlmalloc>
c0007871:	83 c4 1c             	add    esp,0x1c
c0007874:	c3                   	ret    

c0007875 <free>:
c0007875:	83 ec 18             	sub    esp,0x18
c0007878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000787c:	e8 08 94 ff ff       	call   c0000c89 <dlfree>
c0007881:	83 c4 1c             	add    esp,0x1c
c0007884:	c3                   	ret    

c0007885 <rfree>:
c0007885:	83 ec 18             	sub    esp,0x18
c0007888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000788c:	e8 f8 93 ff ff       	call   c0000c89 <dlfree>
c0007891:	83 c4 1c             	add    esp,0x1c
c0007894:	c3                   	ret    

c0007895 <calloc>:
c0007895:	56                   	push   esi
c0007896:	53                   	push   ebx
c0007897:	83 ec 10             	sub    esp,0x10
c000789a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000789e:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00078a3:	53                   	push   ebx
c00078a4:	e8 bc ff ff ff       	call   c0007865 <malloc>
c00078a9:	89 c6                	mov    esi,eax
c00078ab:	83 c4 0c             	add    esp,0xc
c00078ae:	53                   	push   ebx
c00078af:	6a 00                	push   0x0
c00078b1:	50                   	push   eax
c00078b2:	e8 09 8c ff ff       	call   c00004c0 <memset>
c00078b7:	89 f0                	mov    eax,esi
c00078b9:	83 c4 14             	add    esp,0x14
c00078bc:	5b                   	pop    ebx
c00078bd:	5e                   	pop    esi
c00078be:	c3                   	ret    

c00078bf <KeEntryPoint>:
c00078bf:	57                   	push   edi
c00078c0:	bf f9 03 00 00       	mov    edi,0x3f9
c00078c5:	56                   	push   esi
c00078c6:	89 fa                	mov    edx,edi
c00078c8:	53                   	push   ebx
c00078c9:	31 f6                	xor    esi,esi
c00078cb:	83 ec 2c             	sub    esp,0x2c
c00078ce:	a1 00 05 00 00       	mov    eax,ds:0x500
c00078d3:	a3 d0 3e 02 c0       	mov    ds:0xc0023ed0,eax
c00078d8:	89 f0                	mov    eax,esi
c00078da:	ee                   	out    dx,al
c00078db:	bb fb 03 00 00       	mov    ebx,0x3fb
c00078e0:	b0 80                	mov    al,0x80
c00078e2:	89 da                	mov    edx,ebx
c00078e4:	ee                   	out    dx,al
c00078e5:	b1 03                	mov    cl,0x3
c00078e7:	ba f8 03 00 00       	mov    edx,0x3f8
c00078ec:	88 c8                	mov    al,cl
c00078ee:	ee                   	out    dx,al
c00078ef:	89 f0                	mov    eax,esi
c00078f1:	89 fa                	mov    edx,edi
c00078f3:	ee                   	out    dx,al
c00078f4:	88 c8                	mov    al,cl
c00078f6:	89 da                	mov    edx,ebx
c00078f8:	ee                   	out    dx,al
c00078f9:	b0 c7                	mov    al,0xc7
c00078fb:	ba fa 03 00 00       	mov    edx,0x3fa
c0007900:	ee                   	out    dx,al
c0007901:	b0 0b                	mov    al,0xb
c0007903:	ba fc 03 00 00       	mov    edx,0x3fc
c0007908:	ee                   	out    dx,al
c0007909:	68 94 f2 01 c0       	push   0xc001f294
c000790e:	e8 f3 2c 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0007913:	e8 c9 83 00 00       	call   c000fce1 <KeDisplaySplashScreen()>
c0007918:	a1 24 05 00 00       	mov    eax,ds:0x524
c000791d:	05 ff 0f 00 00       	add    eax,0xfff
c0007922:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007927:	89 04 24             	mov    DWORD PTR [esp],eax
c000792a:	e8 64 03 00 00       	call   c0007c93 <Phys::physicalMemorySetup(unsigned int)>
c000792f:	e8 d4 1b 00 00       	call   c0009508 <Virt::virtualMemorySetup()>
c0007934:	58                   	pop    eax
c0007935:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007939:	53                   	push   ebx
c000793a:	e8 a1 1e 00 00       	call   c00097e0 <VAS::VAS()>
c000793f:	89 1d b0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fb0,ebx
c0007945:	e8 b0 65 01 00       	call   c001defa <_init>
c000794a:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007951:	e8 0f ff ff ff       	call   c0007865 <malloc>
c0007956:	89 04 24             	mov    DWORD PTR [esp],eax
c0007959:	89 c6                	mov    esi,eax
c000795b:	e8 7c f2 ff ff       	call   c0006bdc <Computer::Computer()>
c0007960:	6a 00                	push   0x0
c0007962:	89 35 b8 3e 02 c0    	mov    DWORD PTR ds:0xc0023eb8,esi
c0007968:	6a 00                	push   0x0
c000796a:	6a 00                	push   0x0
c000796c:	56                   	push   esi
c000796d:	e8 10 f6 ff ff       	call   c0006f82 <Computer::open(int, int, void*)>
c0007972:	83 c4 14             	add    esp,0x14
c0007975:	53                   	push   ebx
c0007976:	e8 2d 1f 00 00       	call   c00098a8 <VAS::~VAS()>
c000797b:	83 c4 30             	add    esp,0x30
c000797e:	5b                   	pop    ebx
c000797f:	5e                   	pop    esi
c0007980:	5f                   	pop    edi
c0007981:	c3                   	ret    

c0007982 <Phys::allocateDMA(unsigned long)>:
c0007982:	55                   	push   ebp
c0007983:	31 ed                	xor    ebp,ebp
c0007985:	57                   	push   edi
c0007986:	56                   	push   esi
c0007987:	53                   	push   ebx
c0007988:	31 db                	xor    ebx,ebx
c000798a:	83 ec 1c             	sub    esp,0x1c
c000798d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007991:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007999:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000799f:	31 c0                	xor    eax,eax
c00079a1:	c1 ef 0c             	shr    edi,0xc
c00079a4:	eb 19                	jmp    c00079bf <Phys::allocateDMA(unsigned long)+0x3d>
c00079a6:	85 c0                	test   eax,eax
c00079a8:	75 06                	jne    c00079b0 <Phys::allocateDMA(unsigned long)+0x2e>
c00079aa:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00079ae:	89 dd                	mov    ebp,ebx
c00079b0:	8d 70 01             	lea    esi,[eax+0x1]
c00079b3:	39 f7                	cmp    edi,esi
c00079b5:	74 33                	je     c00079ea <Phys::allocateDMA(unsigned long)+0x68>
c00079b7:	89 f0                	mov    eax,esi
c00079b9:	43                   	inc    ebx
c00079ba:	83 fb 0f             	cmp    ebx,0xf
c00079bd:	7f 11                	jg     c00079d0 <Phys::allocateDMA(unsigned long)+0x4e>
c00079bf:	80 bb ec 3e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdc114],0x0
c00079c6:	74 de                	je     c00079a6 <Phys::allocateDMA(unsigned long)+0x24>
c00079c8:	31 c0                	xor    eax,eax
c00079ca:	43                   	inc    ebx
c00079cb:	83 fb 0f             	cmp    ebx,0xf
c00079ce:	7e ef                	jle    c00079bf <Phys::allocateDMA(unsigned long)+0x3d>
c00079d0:	83 ec 0c             	sub    esp,0xc
c00079d3:	68 ac f2 01 c0       	push   0xc001f2ac
c00079d8:	e8 ea 89 00 00       	call   c00103c7 <KePanic(char const*)>
c00079dd:	83 c4 10             	add    esp,0x10
c00079e0:	31 c0                	xor    eax,eax
c00079e2:	83 c4 1c             	add    esp,0x1c
c00079e5:	5b                   	pop    ebx
c00079e6:	5e                   	pop    esi
c00079e7:	5f                   	pop    edi
c00079e8:	5d                   	pop    ebp
c00079e9:	c3                   	ret    
c00079ea:	89 e9                	mov    ecx,ebp
c00079ec:	c1 f9 04             	sar    ecx,0x4
c00079ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00079f3:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c00079f7:	89 ca                	mov    edx,ecx
c00079f9:	4a                   	dec    edx
c00079fa:	79 03                	jns    c00079ff <Phys::allocateDMA(unsigned long)+0x7d>
c00079fc:	8d 51 0e             	lea    edx,[ecx+0xe]
c00079ff:	c1 fa 04             	sar    edx,0x4
c0007a02:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007a06:	74 08                	je     c0007a10 <Phys::allocateDMA(unsigned long)+0x8e>
c0007a08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007a0c:	31 c0                	xor    eax,eax
c0007a0e:	eb ba                	jmp    c00079ca <Phys::allocateDMA(unsigned long)+0x48>
c0007a10:	85 f6                	test   esi,esi
c0007a12:	74 15                	je     c0007a29 <Phys::allocateDMA(unsigned long)+0xa7>
c0007a14:	8d 95 ec 3e 02 c0    	lea    edx,[ebp-0x3ffdc114]
c0007a1a:	8d 84 05 ed 3e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdc113]
c0007a21:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007a24:	42                   	inc    edx
c0007a25:	39 d0                	cmp    eax,edx
c0007a27:	75 f8                	jne    c0007a21 <Phys::allocateDMA(unsigned long)+0x9f>
c0007a29:	01 3d e4 3e 02 c0    	add    DWORD PTR ds:0xc0023ee4,edi
c0007a2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a33:	85 c0                	test   eax,eax
c0007a35:	74 17                	je     c0007a4e <Phys::allocateDMA(unsigned long)+0xcc>
c0007a37:	83 ec 0c             	sub    esp,0xc
c0007a3a:	68 ac f2 01 c0       	push   0xc001f2ac
c0007a3f:	e8 83 89 00 00       	call   c00103c7 <KePanic(char const*)>
c0007a44:	83 c4 10             	add    esp,0x10
c0007a47:	89 f0                	mov    eax,esi
c0007a49:	e9 6b ff ff ff       	jmp    c00079b9 <Phys::allocateDMA(unsigned long)+0x37>
c0007a4e:	c1 e5 0c             	shl    ebp,0xc
c0007a51:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007a57:	eb 89                	jmp    c00079e2 <Phys::allocateDMA(unsigned long)+0x60>

c0007a59 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007a59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a5d:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007a63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a67:	c1 ea 0c             	shr    edx,0xc
c0007a6a:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007a6f:	29 15 e4 3e 02 c0    	sub    DWORD PTR ds:0xc0023ee4,edx
c0007a75:	c1 e8 0c             	shr    eax,0xc
c0007a78:	85 d2                	test   edx,edx
c0007a7a:	74 0f                	je     c0007a8b <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007a7c:	05 ec 3e 02 c0       	add    eax,0xc0023eec
c0007a81:	01 c2                	add    edx,eax
c0007a83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007a86:	40                   	inc    eax
c0007a87:	39 d0                	cmp    eax,edx
c0007a89:	75 f8                	jne    c0007a83 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007a8b:	c3                   	ret    

c0007a8c <Phys::setPageState(unsigned long, bool)>:
c0007a8c:	56                   	push   esi
c0007a8d:	ba 01 00 00 00       	mov    edx,0x1
c0007a92:	53                   	push   ebx
c0007a93:	8b 35 78 15 02 c0    	mov    esi,DWORD PTR ds:0xc0021578
c0007a99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007a9d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007aa1:	89 c8                	mov    eax,ecx
c0007aa3:	83 e1 07             	and    ecx,0x7
c0007aa6:	c1 e8 03             	shr    eax,0x3
c0007aa9:	d3 e3                	shl    ebx,cl
c0007aab:	01 c6                	add    esi,eax
c0007aad:	d3 e2                	shl    edx,cl
c0007aaf:	f7 d2                	not    edx
c0007ab1:	20 16                	and    BYTE PTR [esi],dl
c0007ab3:	03 05 78 15 02 c0    	add    eax,DWORD PTR ds:0xc0021578
c0007ab9:	08 18                	or     BYTE PTR [eax],bl
c0007abb:	5b                   	pop    ebx
c0007abc:	5e                   	pop    esi
c0007abd:	c3                   	ret    

c0007abe <Phys::getPageState(unsigned long)>:
c0007abe:	53                   	push   ebx
c0007abf:	8b 15 78 15 02 c0    	mov    edx,DWORD PTR ds:0xc0021578
c0007ac5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007ac9:	31 db                	xor    ebx,ebx
c0007acb:	89 c8                	mov    eax,ecx
c0007acd:	83 e1 07             	and    ecx,0x7
c0007ad0:	c1 e8 03             	shr    eax,0x3
c0007ad3:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007ad6:	89 d8                	mov    eax,ebx
c0007ad8:	5b                   	pop    ebx
c0007ad9:	d3 f8                	sar    eax,cl
c0007adb:	83 e0 01             	and    eax,0x1
c0007ade:	c3                   	ret    

c0007adf <Phys::freePage(unsigned long)>:
c0007adf:	53                   	push   ebx
c0007ae0:	83 ec 08             	sub    esp,0x8
c0007ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ae7:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007aed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007af3:	76 3a                	jbe    c0007b2f <Phys::freePage(unsigned long)+0x50>
c0007af5:	c1 e8 0c             	shr    eax,0xc
c0007af8:	50                   	push   eax
c0007af9:	89 c3                	mov    ebx,eax
c0007afb:	e8 be ff ff ff       	call   c0007abe <Phys::getPageState(unsigned long)>
c0007b00:	5a                   	pop    edx
c0007b01:	84 c0                	test   al,al
c0007b03:	74 19                	je     c0007b1e <Phys::freePage(unsigned long)+0x3f>
c0007b05:	83 ec 08             	sub    esp,0x8
c0007b08:	ff 0d e4 3e 02 c0    	dec    DWORD PTR ds:0xc0023ee4
c0007b0e:	6a 00                	push   0x0
c0007b10:	53                   	push   ebx
c0007b11:	e8 76 ff ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007b16:	83 c4 10             	add    esp,0x10
c0007b19:	83 c4 08             	add    esp,0x8
c0007b1c:	5b                   	pop    ebx
c0007b1d:	c3                   	ret    
c0007b1e:	c7 44 24 10 51 f3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f351
c0007b26:	83 c4 08             	add    esp,0x8
c0007b29:	5b                   	pop    ebx
c0007b2a:	e9 98 88 00 00       	jmp    c00103c7 <KePanic(char const*)>
c0007b2f:	68 00 10 00 00       	push   0x1000
c0007b34:	50                   	push   eax
c0007b35:	e8 1f ff ff ff       	call   c0007a59 <Phys::freeDMA(unsigned long, unsigned long)>
c0007b3a:	59                   	pop    ecx
c0007b3b:	5b                   	pop    ebx
c0007b3c:	83 c4 08             	add    esp,0x8
c0007b3f:	5b                   	pop    ebx
c0007b40:	c3                   	ret    

c0007b41 <Phys::allocatePage()>:
c0007b41:	56                   	push   esi
c0007b42:	53                   	push   ebx
c0007b43:	83 ec 14             	sub    esp,0x14
c0007b46:	8b 35 d8 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023ed8
c0007b4c:	89 f3                	mov    ebx,esi
c0007b4e:	eb 0a                	jmp    c0007b5a <Phys::allocatePage()+0x19>
c0007b50:	89 1d d8 3e 02 c0    	mov    DWORD PTR ds:0xc0023ed8,ebx
c0007b56:	39 de                	cmp    esi,ebx
c0007b58:	74 24                	je     c0007b7e <Phys::allocatePage()+0x3d>
c0007b5a:	53                   	push   ebx
c0007b5b:	e8 5e ff ff ff       	call   c0007abe <Phys::getPageState(unsigned long)>
c0007b60:	5a                   	pop    edx
c0007b61:	84 c0                	test   al,al
c0007b63:	74 5f                	je     c0007bc4 <Phys::allocatePage()+0x83>
c0007b65:	43                   	inc    ebx
c0007b66:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007b6c:	75 e2                	jne    c0007b50 <Phys::allocatePage()+0xf>
c0007b6e:	31 db                	xor    ebx,ebx
c0007b70:	c7 05 d8 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ed8,0x0
c0007b7a:	39 de                	cmp    esi,ebx
c0007b7c:	75 dc                	jne    c0007b5a <Phys::allocatePage()+0x19>
c0007b7e:	83 ec 0c             	sub    esp,0xc
c0007b81:	80 35 fc 3e 02 c0 01 	xor    BYTE PTR ds:0xc0023efc,0x1
c0007b88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007b8d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007b90:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007b96:	50                   	push   eax
c0007b97:	e8 4e 27 00 00       	call   c000a2ea <VAS::scanForEviction()>
c0007b9c:	83 c4 10             	add    esp,0x10
c0007b9f:	85 c0                	test   eax,eax
c0007ba1:	75 3f                	jne    c0007be2 <Phys::allocatePage()+0xa1>
c0007ba3:	83 ec 0c             	sub    esp,0xc
c0007ba6:	68 d4 f2 01 c0       	push   0xc001f2d4
c0007bab:	e8 17 88 00 00       	call   c00103c7 <KePanic(char const*)>
c0007bb0:	83 c4 10             	add    esp,0x10
c0007bb3:	8b 1d d8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ed8
c0007bb9:	53                   	push   ebx
c0007bba:	e8 ff fe ff ff       	call   c0007abe <Phys::getPageState(unsigned long)>
c0007bbf:	5a                   	pop    edx
c0007bc0:	84 c0                	test   al,al
c0007bc2:	75 a1                	jne    c0007b65 <Phys::allocatePage()+0x24>
c0007bc4:	6a 01                	push   0x1
c0007bc6:	53                   	push   ebx
c0007bc7:	e8 c0 fe ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007bcc:	a1 d8 3e 02 c0       	mov    eax,ds:0xc0023ed8
c0007bd1:	5a                   	pop    edx
c0007bd2:	ff 05 e4 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee4
c0007bd8:	c1 e0 0c             	shl    eax,0xc
c0007bdb:	59                   	pop    ecx
c0007bdc:	83 c4 14             	add    esp,0x14
c0007bdf:	5b                   	pop    ebx
c0007be0:	5e                   	pop    esi
c0007be1:	c3                   	ret    
c0007be2:	83 ec 08             	sub    esp,0x8
c0007be5:	89 c2                	mov    edx,eax
c0007be7:	6a 01                	push   0x1
c0007be9:	c1 ea 0c             	shr    edx,0xc
c0007bec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bf0:	52                   	push   edx
c0007bf1:	e8 96 fe ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007bf6:	83 c4 10             	add    esp,0x10
c0007bf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bfd:	eb dd                	jmp    c0007bdc <Phys::allocatePage()+0x9b>

c0007bff <Phys::allocateContiguousPages(int)>:
c0007bff:	57                   	push   edi
c0007c00:	56                   	push   esi
c0007c01:	53                   	push   ebx
c0007c02:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c06:	fa                   	cli    
c0007c07:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0007c0d:	31 db                	xor    ebx,ebx
c0007c0f:	85 db                	test   ebx,ebx
c0007c11:	75 11                	jne    c0007c24 <Phys::allocateContiguousPages(int)+0x25>
c0007c13:	e8 29 ff ff ff       	call   c0007b41 <Phys::allocatePage()>
c0007c18:	83 fe 01             	cmp    esi,0x1
c0007c1b:	89 c7                	mov    edi,eax
c0007c1d:	74 21                	je     c0007c40 <Phys::allocateContiguousPages(int)+0x41>
c0007c1f:	bb 01 00 00 00       	mov    ebx,0x1
c0007c24:	e8 18 ff ff ff       	call   c0007b41 <Phys::allocatePage()>
c0007c29:	89 da                	mov    edx,ebx
c0007c2b:	c1 e2 0c             	shl    edx,0xc
c0007c2e:	01 fa                	add    edx,edi
c0007c30:	39 c2                	cmp    edx,eax
c0007c32:	74 20                	je     c0007c54 <Phys::allocateContiguousPages(int)+0x55>
c0007c34:	bb 01 00 00 00       	mov    ebx,0x1
c0007c39:	89 c7                	mov    edi,eax
c0007c3b:	83 fe 01             	cmp    esi,0x1
c0007c3e:	75 e4                	jne    c0007c24 <Phys::allocateContiguousPages(int)+0x25>
c0007c40:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0007c45:	48                   	dec    eax
c0007c46:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0007c4b:	75 01                	jne    c0007c4e <Phys::allocateContiguousPages(int)+0x4f>
c0007c4d:	fb                   	sti    
c0007c4e:	89 f8                	mov    eax,edi
c0007c50:	5b                   	pop    ebx
c0007c51:	5e                   	pop    esi
c0007c52:	5f                   	pop    edi
c0007c53:	c3                   	ret    
c0007c54:	43                   	inc    ebx
c0007c55:	39 f3                	cmp    ebx,esi
c0007c57:	75 b6                	jne    c0007c0f <Phys::allocateContiguousPages(int)+0x10>
c0007c59:	eb e5                	jmp    c0007c40 <Phys::allocateContiguousPages(int)+0x41>

c0007c5b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007c5b:	56                   	push   esi
c0007c5c:	53                   	push   ebx
c0007c5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007c61:	39 1d dc 3e 02 c0    	cmp    DWORD PTR ds:0xc0023edc,ebx
c0007c67:	73 06                	jae    c0007c6f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007c69:	89 1d dc 3e 02 c0    	mov    DWORD PTR ds:0xc0023edc,ebx
c0007c6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c73:	c1 eb 0c             	shr    ebx,0xc
c0007c76:	c1 e8 0c             	shr    eax,0xc
c0007c79:	39 d8                	cmp    eax,ebx
c0007c7b:	73 13                	jae    c0007c90 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007c7d:	6a 00                	push   0x0
c0007c7f:	8d 70 01             	lea    esi,[eax+0x1]
c0007c82:	50                   	push   eax
c0007c83:	e8 04 fe ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007c88:	5a                   	pop    edx
c0007c89:	89 f0                	mov    eax,esi
c0007c8b:	59                   	pop    ecx
c0007c8c:	39 f3                	cmp    ebx,esi
c0007c8e:	75 ed                	jne    c0007c7d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007c90:	5b                   	pop    ebx
c0007c91:	5e                   	pop    esi
c0007c92:	c3                   	ret    

c0007c93 <Phys::physicalMemorySetup(unsigned int)>:
c0007c93:	55                   	push   ebp
c0007c94:	57                   	push   edi
c0007c95:	56                   	push   esi
c0007c96:	53                   	push   ebx
c0007c97:	31 db                	xor    ebx,ebx
c0007c99:	83 ec 40             	sub    esp,0x40
c0007c9c:	6a 10                	push   0x10
c0007c9e:	6a 00                	push   0x0
c0007ca0:	68 ec 3e 02 c0       	push   0xc0023eec
c0007ca5:	e8 16 88 ff ff       	call   c00004c0 <memset>
c0007caa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007cae:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007cb3:	05 00 10 00 00       	add    eax,0x1000
c0007cb8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007cbc:	5a                   	pop    edx
c0007cbd:	59                   	pop    ecx
c0007cbe:	50                   	push   eax
c0007cbf:	68 67 f3 01 c0       	push   0xc001f367
c0007cc4:	e8 3d 29 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0007cc9:	83 c4 10             	add    esp,0x10
c0007ccc:	83 ec 08             	sub    esp,0x8
c0007ccf:	6a 01                	push   0x1
c0007cd1:	53                   	push   ebx
c0007cd2:	43                   	inc    ebx
c0007cd3:	e8 b4 fd ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007cd8:	83 c4 10             	add    esp,0x10
c0007cdb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ce1:	75 e9                	jne    c0007ccc <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007ce3:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007ce9:	66 85 c0             	test   ax,ax
c0007cec:	0f 84 97 01 00 00    	je     c0007e89 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007cf2:	89 c7                	mov    edi,eax
c0007cf4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007cfc:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007d02:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007d07:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007d0b:	eb 15                	jmp    c0007d22 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007d0d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007d11:	83 c3 18             	add    ebx,0x18
c0007d14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d18:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007d1c:	0f 84 77 01 00 00    	je     c0007e99 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007d22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007d25:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007d28:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007d2b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007d2f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007d33:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007d35:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007d38:	01 f0                	add    eax,esi
c0007d3a:	55                   	push   ebp
c0007d3b:	11 fa                	adc    edx,edi
c0007d3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d41:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007d45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d49:	50                   	push   eax
c0007d4a:	56                   	push   esi
c0007d4b:	68 04 f3 01 c0       	push   0xc001f304
c0007d50:	e8 b1 28 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0007d55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007d59:	83 c4 10             	add    esp,0x10
c0007d5c:	09 f8                	or     eax,edi
c0007d5e:	0f 85 35 01 00 00    	jne    c0007e99 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007d64:	4d                   	dec    ebp
c0007d65:	75 a6                	jne    c0007d0d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d67:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007d6b:	ba 00 00 08 00       	mov    edx,0x80000
c0007d70:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007d74:	39 f2                	cmp    edx,esi
c0007d76:	89 c1                	mov    ecx,eax
c0007d78:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007d80:	19 f9                	sbb    ecx,edi
c0007d82:	0f 82 a7 00 00 00    	jb     c0007e2f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007d88:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007d8c:	89 c1                	mov    ecx,eax
c0007d8e:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007d92:	0f 83 97 00 00 00    	jae    c0007e2f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007d98:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007d9d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007da1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007da5:	39 fa                	cmp    edx,edi
c0007da7:	19 e8                	sbb    eax,ebp
c0007da9:	0f 82 9a 01 00 00    	jb     c0007f49 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007daf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007db3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007db7:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007dbd:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007dc2:	83 d5 ff             	adc    ebp,0xffffffff
c0007dc5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007dc9:	31 c0                	xor    eax,eax
c0007dcb:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007dcf:	39 fa                	cmp    edx,edi
c0007dd1:	89 c1                	mov    ecx,eax
c0007dd3:	19 e9                	sbb    ecx,ebp
c0007dd5:	0f 83 32 ff ff ff    	jae    c0007d0d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007ddb:	be 00 00 08 00       	mov    esi,0x80000
c0007de0:	51                   	push   ecx
c0007de1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007de5:	57                   	push   edi
c0007de6:	56                   	push   esi
c0007de7:	68 28 f3 01 c0       	push   0xc001f328
c0007dec:	e8 15 28 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0007df1:	5d                   	pop    ebp
c0007df2:	58                   	pop    eax
c0007df3:	57                   	push   edi
c0007df4:	56                   	push   esi
c0007df5:	e8 61 fe ff ff       	call   c0007c5b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007dfa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dfe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e02:	83 c4 0c             	add    esp,0xc
c0007e05:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007e09:	03 05 e8 3e 02 c0    	add    eax,DWORD PTR ds:0xc0023ee8
c0007e0f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007e16:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007e1b:	52                   	push   edx
c0007e1c:	50                   	push   eax
c0007e1d:	68 8d f3 01 c0       	push   0xc001f38d
c0007e22:	e8 df 27 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0007e27:	83 c4 10             	add    esp,0x10
c0007e2a:	e9 de fe ff ff       	jmp    c0007d0d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e2f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007e33:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e37:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007e3b:	39 ea                	cmp    edx,ebp
c0007e3d:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007e41:	0f 82 c6 fe ff ff    	jb     c0007d0d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e47:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007e4c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007e50:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007e54:	0f 83 b3 fe ff ff    	jae    c0007d0d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e5a:	39 ee                	cmp    esi,ebp
c0007e5c:	89 f8                	mov    eax,edi
c0007e5e:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007e62:	0f 83 78 ff ff ff    	jae    c0007de0 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007e70:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007e74:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007e78:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007e7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e80:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007e84:	e9 57 ff ff ff       	jmp    c0007de0 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e89:	83 ec 0c             	sub    esp,0xc
c0007e8c:	68 7f f3 01 c0       	push   0xc001f37f
c0007e91:	e8 31 85 00 00       	call   c00103c7 <KePanic(char const*)>
c0007e96:	83 c4 10             	add    esp,0x10
c0007e99:	83 ec 08             	sub    esp,0x8
c0007e9c:	bb 60 00 00 00       	mov    ebx,0x60
c0007ea1:	6a 00                	push   0x0
c0007ea3:	6a 06                	push   0x6
c0007ea5:	e8 e2 fb ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007eaa:	58                   	pop    eax
c0007eab:	5a                   	pop    edx
c0007eac:	6a 00                	push   0x0
c0007eae:	6a 07                	push   0x7
c0007eb0:	e8 d7 fb ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007eb5:	83 05 e8 3e 02 c0 02 	add    DWORD PTR ds:0xc0023ee8,0x2
c0007ebc:	83 c4 10             	add    esp,0x10
c0007ebf:	83 ec 08             	sub    esp,0x8
c0007ec2:	6a 00                	push   0x0
c0007ec4:	53                   	push   ebx
c0007ec5:	43                   	inc    ebx
c0007ec6:	e8 c1 fb ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007ecb:	83 c4 10             	add    esp,0x10
c0007ece:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007ed4:	75 e9                	jne    c0007ebf <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007ed6:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007edb:	bb 40 01 00 00       	mov    ebx,0x140
c0007ee0:	83 c0 20             	add    eax,0x20
c0007ee3:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007ee8:	eb 22                	jmp    c0007f0c <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007eea:	83 ec 08             	sub    esp,0x8
c0007eed:	6a 00                	push   0x0
c0007eef:	53                   	push   ebx
c0007ef0:	43                   	inc    ebx
c0007ef1:	e8 96 fb ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007ef6:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007efb:	83 c4 10             	add    esp,0x10
c0007efe:	40                   	inc    eax
c0007eff:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007f05:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007f0a:	74 07                	je     c0007f13 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007f0c:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007f11:	7e d7                	jle    c0007eea <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007f13:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007f18:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007f1d:	7f 22                	jg     c0007f41 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007f1f:	83 ec 08             	sub    esp,0x8
c0007f22:	6a 00                	push   0x0
c0007f24:	53                   	push   ebx
c0007f25:	43                   	inc    ebx
c0007f26:	e8 61 fb ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007f2b:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007f30:	83 c4 10             	add    esp,0x10
c0007f33:	40                   	inc    eax
c0007f34:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007f3a:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007f3f:	75 d7                	jne    c0007f18 <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007f41:	83 c4 3c             	add    esp,0x3c
c0007f44:	5b                   	pop    ebx
c0007f45:	5e                   	pop    esi
c0007f46:	5f                   	pop    edi
c0007f47:	5d                   	pop    ebp
c0007f48:	c3                   	ret    
c0007f49:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007f51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007f59:	e9 51 fe ff ff       	jmp    c0007daf <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007f5e <Pipe::isAtty()>:
c0007f5e:	31 c0                	xor    eax,eax
c0007f60:	c3                   	ret    
c0007f61:	90                   	nop

c0007f62 <Pipe::~Pipe()>:
c0007f62:	83 ec 0c             	sub    esp,0xc
c0007f65:	ba ec f3 01 c0       	mov    edx,0xc001f3ec
c0007f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f6e:	89 10                	mov    DWORD PTR [eax],edx
c0007f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f74:	83 ec 0c             	sub    esp,0xc
c0007f77:	50                   	push   eax
c0007f78:	e8 6b 11 00 00       	call   c00090e8 <UnixFile::~UnixFile()>
c0007f7d:	83 c4 10             	add    esp,0x10
c0007f80:	90                   	nop
c0007f81:	83 c4 0c             	add    esp,0xc
c0007f84:	c3                   	ret    
c0007f85:	90                   	nop

c0007f86 <Pipe::~Pipe()>:
c0007f86:	83 ec 0c             	sub    esp,0xc
c0007f89:	83 ec 0c             	sub    esp,0xc
c0007f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f90:	e8 cd ff ff ff       	call   c0007f62 <Pipe::~Pipe()>
c0007f95:	83 c4 10             	add    esp,0x10
c0007f98:	83 ec 08             	sub    esp,0x8
c0007f9b:	6a 20                	push   0x20
c0007f9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007fa1:	e8 6a 25 00 00       	call   c000a510 <operator delete(void*, unsigned long)>
c0007fa6:	83 c4 10             	add    esp,0x10
c0007fa9:	83 c4 0c             	add    esp,0xc
c0007fac:	c3                   	ret    
c0007fad:	90                   	nop

c0007fae <Pipe::write(unsigned long long, void*, int*)>:
c0007fae:	55                   	push   ebp
c0007faf:	57                   	push   edi
c0007fb0:	56                   	push   esi
c0007fb1:	53                   	push   ebx
c0007fb2:	83 ec 1c             	sub    esp,0x1c
c0007fb5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007fb9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007fbd:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007fc0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007fc4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007fc7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007fcb:	89 d8                	mov    eax,ebx
c0007fcd:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007fd0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fd4:	89 d6                	mov    esi,edx
c0007fd6:	89 d7                	mov    edi,edx
c0007fd8:	c1 ff 1f             	sar    edi,0x1f
c0007fdb:	03 34 24             	add    esi,DWORD PTR [esp]
c0007fde:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007fe2:	c1 f8 1f             	sar    eax,0x1f
c0007fe5:	39 f3                	cmp    ebx,esi
c0007fe7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007feb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007fef:	19 f8                	sbb    eax,edi
c0007ff1:	b8 01 00 00 00       	mov    eax,0x1
c0007ff6:	72 6e                	jb     c0008066 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007ff8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007ffb:	01 d0                	add    eax,edx
c0007ffd:	99                   	cdq    
c0007ffe:	f7 fb                	idiv   ebx
c0008000:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008004:	29 d3                	sub    ebx,edx
c0008006:	89 d7                	mov    edi,edx
c0008008:	89 de                	mov    esi,ebx
c000800a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000800d:	c1 fb 1f             	sar    ebx,0x1f
c0008010:	39 f2                	cmp    edx,esi
c0008012:	19 d8                	sbb    eax,ebx
c0008014:	b8 00 00 00 00       	mov    eax,0x0
c0008019:	72 04                	jb     c000801f <Pipe::write(unsigned long long, void*, int*)+0x71>
c000801b:	89 d0                	mov    eax,edx
c000801d:	29 f0                	sub    eax,esi
c000801f:	89 d3                	mov    ebx,edx
c0008021:	29 c3                	sub    ebx,eax
c0008023:	74 0b                	je     c0008030 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0008025:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008028:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000802c:	89 d9                	mov    ecx,ebx
c000802e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008030:	85 c0                	test   eax,eax
c0008032:	74 0d                	je     c0008041 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0008034:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008038:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000803b:	89 de                	mov    esi,ebx
c000803d:	89 c1                	mov    ecx,eax
c000803f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008041:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008044:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008049:	75 10                	jne    c000805b <Pipe::write(unsigned long long, void*, int*)+0xad>
c000804b:	83 ec 0c             	sub    esp,0xc
c000804e:	68 a9 f3 01 c0       	push   0xc001f3a9
c0008053:	e8 6f 83 00 00       	call   c00103c7 <KePanic(char const*)>
c0008058:	83 c4 10             	add    esp,0x10
c000805b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000805f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008062:	89 08                	mov    DWORD PTR [eax],ecx
c0008064:	31 c0                	xor    eax,eax
c0008066:	83 c4 1c             	add    esp,0x1c
c0008069:	5b                   	pop    ebx
c000806a:	5e                   	pop    esi
c000806b:	5f                   	pop    edi
c000806c:	5d                   	pop    ebp
c000806d:	c3                   	ret    

c000806e <Pipe::read(unsigned long long, void*, int*)>:
c000806e:	55                   	push   ebp
c000806f:	57                   	push   edi
c0008070:	56                   	push   esi
c0008071:	53                   	push   ebx
c0008072:	83 ec 1c             	sub    esp,0x1c
c0008075:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008079:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000807d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008081:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008084:	89 c8                	mov    eax,ecx
c0008086:	99                   	cdq    
c0008087:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000808b:	74 24                	je     c00080b1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000808d:	39 f9                	cmp    ecx,edi
c000808f:	89 d1                	mov    ecx,edx
c0008091:	19 f1                	sbb    ecx,esi
c0008093:	73 1c                	jae    c00080b1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008095:	fa                   	cli    
c0008096:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000809c:	e8 3b c9 00 00       	call   c00149dc <schedule()>
c00080a1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00080a6:	48                   	dec    eax
c00080a7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00080ac:	75 d3                	jne    c0008081 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080ae:	fb                   	sti    
c00080af:	eb d0                	jmp    c0008081 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080b1:	39 f8                	cmp    eax,edi
c00080b3:	89 d1                	mov    ecx,edx
c00080b5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00080b8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00080bc:	19 f1                	sbb    ecx,esi
c00080be:	73 07                	jae    c00080c7 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00080c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00080c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00080c7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00080ca:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00080cd:	29 f7                	sub    edi,esi
c00080cf:	89 f8                	mov    eax,edi
c00080d1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00080d5:	99                   	cdq    
c00080d6:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00080d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00080dd:	19 d0                	sbb    eax,edx
c00080df:	73 07                	jae    c00080e8 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00080e1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00080e8:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00080eb:	89 ea                	mov    edx,ebp
c00080ed:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00080f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080f6:	74 0d                	je     c0008105 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00080f8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00080fb:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00080ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008103:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008105:	85 d2                	test   edx,edx
c0008107:	74 11                	je     c000811a <Pipe::read(unsigned long long, void*, int*)+0xac>
c0008109:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000810d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008110:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008114:	89 d1                	mov    ecx,edx
c0008116:	89 c7                	mov    edi,eax
c0008118:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000811a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000811d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008120:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008123:	99                   	cdq    
c0008124:	89 f7                	mov    edi,esi
c0008126:	03 04 24             	add    eax,DWORD PTR [esp]
c0008129:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000812d:	c1 ff 1f             	sar    edi,0x1f
c0008130:	57                   	push   edi
c0008131:	56                   	push   esi
c0008132:	52                   	push   edx
c0008133:	50                   	push   eax
c0008134:	e8 a7 5c 01 00       	call   c001dde0 <__umoddi3>
c0008139:	83 c4 10             	add    esp,0x10
c000813c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000813f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008144:	75 10                	jne    c0008156 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008146:	83 ec 0c             	sub    esp,0xc
c0008149:	68 c6 f3 01 c0       	push   0xc001f3c6
c000814e:	e8 74 82 00 00       	call   c00103c7 <KePanic(char const*)>
c0008153:	83 c4 10             	add    esp,0x10
c0008156:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000815a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000815d:	89 10                	mov    DWORD PTR [eax],edx
c000815f:	83 c4 1c             	add    esp,0x1c
c0008162:	31 c0                	xor    eax,eax
c0008164:	5b                   	pop    ebx
c0008165:	5e                   	pop    esi
c0008166:	5f                   	pop    edi
c0008167:	5d                   	pop    ebp
c0008168:	c3                   	ret    
c0008169:	90                   	nop

c000816a <Pipe::Pipe(int)>:
c000816a:	83 ec 0c             	sub    esp,0xc
c000816d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008171:	83 ec 08             	sub    esp,0x8
c0008174:	6a 00                	push   0x0
c0008176:	50                   	push   eax
c0008177:	e8 8a 0d 00 00       	call   c0008f06 <UnixFile::UnixFile(int)>
c000817c:	83 c4 10             	add    esp,0x10
c000817f:	ba ec f3 01 c0       	mov    edx,0xc001f3ec
c0008184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008188:	89 10                	mov    DWORD PTR [eax],edx
c000818a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000818e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008192:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008199:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00081a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081a4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00081ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00081af:	83 ec 0c             	sub    esp,0xc
c00081b2:	50                   	push   eax
c00081b3:	e8 ad f6 ff ff       	call   c0007865 <malloc>
c00081b8:	83 c4 10             	add    esp,0x10
c00081bb:	89 c2                	mov    edx,eax
c00081bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00081c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081c8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00081cc:	90                   	nop
c00081cd:	83 c4 0c             	add    esp,0xc
c00081d0:	c3                   	ret    
c00081d1:	90                   	nop

c00081d2 <VgaText::isAtty()>:
c00081d2:	b0 01                	mov    al,0x1
c00081d4:	c3                   	ret    
c00081d5:	90                   	nop

c00081d6 <VgaText::~VgaText()>:
c00081d6:	83 ec 0c             	sub    esp,0xc
c00081d9:	ba 34 f4 01 c0       	mov    edx,0xc001f434
c00081de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081e2:	89 10                	mov    DWORD PTR [eax],edx
c00081e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081e8:	83 ec 0c             	sub    esp,0xc
c00081eb:	50                   	push   eax
c00081ec:	e8 f7 0e 00 00       	call   c00090e8 <UnixFile::~UnixFile()>
c00081f1:	83 c4 10             	add    esp,0x10
c00081f4:	90                   	nop
c00081f5:	83 c4 0c             	add    esp,0xc
c00081f8:	c3                   	ret    
c00081f9:	90                   	nop

c00081fa <VgaText::~VgaText()>:
c00081fa:	83 ec 0c             	sub    esp,0xc
c00081fd:	83 ec 0c             	sub    esp,0xc
c0008200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008204:	e8 cd ff ff ff       	call   c00081d6 <VgaText::~VgaText()>
c0008209:	83 c4 10             	add    esp,0x10
c000820c:	83 ec 08             	sub    esp,0x8
c000820f:	68 84 01 00 00       	push   0x184
c0008214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008218:	e8 f3 22 00 00       	call   c000a510 <operator delete(void*, unsigned long)>
c000821d:	83 c4 10             	add    esp,0x10
c0008220:	83 c4 0c             	add    esp,0xc
c0008223:	c3                   	ret    

c0008224 <VgaText::read(unsigned long long, void*, int*)>:
c0008224:	83 ec 10             	sub    esp,0x10
c0008227:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000822b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000822f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008233:	e8 32 46 00 00       	call   c000c86a <readKeyboard(VgaText*, char*, unsigned long)>
c0008238:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000823c:	89 02                	mov    DWORD PTR [edx],eax
c000823e:	31 c0                	xor    eax,eax
c0008240:	83 c4 1c             	add    esp,0x1c
c0008243:	c3                   	ret    

c0008244 <setTerminalScrollLock(bool)>:
c0008244:	c3                   	ret    

c0008245 <doTerminalCycle()>:
c0008245:	c3                   	ret    

c0008246 <addToTerminalCycle(VgaText*)>:
c0008246:	c3                   	ret    

c0008247 <scrollTerminalScrollLock(int)>:
c0008247:	c3                   	ret    

c0008248 <VgaText::updateTitle()>:
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::load()>:
c000824a:	c3                   	ret    
c000824b:	90                   	nop

c000824c <VgaText::updateCursor()>:
c000824c:	83 ec 14             	sub    esp,0x14
c000824f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008253:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008256:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008259:	e8 96 f3 00 00       	call   c00175f4 <HalConsoleCursorUpdate(int, int)>
c000825e:	83 c4 1c             	add    esp,0x1c
c0008261:	c3                   	ret    

c0008262 <VgaText::doANSI_SGR(int)>:
c0008262:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008266:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826a:	85 d2                	test   edx,edx
c000826c:	75 0b                	jne    c0008279 <VgaText::doANSI_SGR(int)+0x17>
c000826e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008271:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008274:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008277:	eb 59                	jmp    c00082d2 <VgaText::doANSI_SGR(int)+0x70>
c0008279:	83 fa 07             	cmp    edx,0x7
c000827c:	75 0b                	jne    c0008289 <VgaText::doANSI_SGR(int)+0x27>
c000827e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008281:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008284:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008287:	eb 49                	jmp    c00082d2 <VgaText::doANSI_SGR(int)+0x70>
c0008289:	83 fa 1b             	cmp    edx,0x1b
c000828c:	74 e0                	je     c000826e <VgaText::doANSI_SGR(int)+0xc>
c000828e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008291:	83 f9 07             	cmp    ecx,0x7
c0008294:	77 09                	ja     c000829f <VgaText::doANSI_SGR(int)+0x3d>
c0008296:	8b 14 8d a0 15 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdea60]
c000829d:	eb 20                	jmp    c00082bf <VgaText::doANSI_SGR(int)+0x5d>
c000829f:	8d 4a d8             	lea    ecx,[edx-0x28]
c00082a2:	83 f9 07             	cmp    ecx,0x7
c00082a5:	77 09                	ja     c00082b0 <VgaText::doANSI_SGR(int)+0x4e>
c00082a7:	8b 14 8d a0 15 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdea60]
c00082ae:	eb 22                	jmp    c00082d2 <VgaText::doANSI_SGR(int)+0x70>
c00082b0:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00082b3:	83 f9 07             	cmp    ecx,0x7
c00082b6:	77 0b                	ja     c00082c3 <VgaText::doANSI_SGR(int)+0x61>
c00082b8:	8b 14 95 58 14 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdeba8]
c00082bf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00082c2:	c3                   	ret    
c00082c3:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00082c6:	83 f9 07             	cmp    ecx,0x7
c00082c9:	77 0a                	ja     c00082d5 <VgaText::doANSI_SGR(int)+0x73>
c00082cb:	8b 14 95 30 14 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdebd0]
c00082d2:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00082d5:	c3                   	ret    

c00082d6 <VgaText::setDefaultBgColour(VgaColour)>:
c00082d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082de:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00082e1:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00082e4:	c3                   	ret    
c00082e5:	90                   	nop

c00082e6 <VgaText::setDefaultFgColour(VgaColour)>:
c00082e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082ee:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00082f1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00082f4:	c3                   	ret    
c00082f5:	90                   	nop

c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00082f6:	53                   	push   ebx
c00082f7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00082fb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00082ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008303:	51                   	push   ecx
c0008304:	e8 cd ff ff ff       	call   c00082d6 <VgaText::setDefaultBgColour(VgaColour)>
c0008309:	58                   	pop    eax
c000830a:	5a                   	pop    edx
c000830b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000830f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008313:	5b                   	pop    ebx
c0008314:	eb d0                	jmp    c00082e6 <VgaText::setDefaultFgColour(VgaColour)>

c0008316 <VgaText::setTitleTextColour(VgaColour)>:
c0008316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000831a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000831e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008321:	c3                   	ret    

c0008322 <VgaText::setTitleColour(VgaColour)>:
c0008322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008326:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000832a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000832d:	c3                   	ret    

c000832e <VgaText::setTitle(char*)>:
c000832e:	c3                   	ret    
c000832f:	90                   	nop

c0008330 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008330:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008334:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008339:	83 e0 0f             	and    eax,0xf
c000833c:	c1 e2 04             	shl    edx,0x4
c000833f:	09 d0                	or     eax,edx
c0008341:	c3                   	ret    

c0008342 <VgaText::scrollScreen()>:
c0008342:	55                   	push   ebp
c0008343:	57                   	push   edi
c0008344:	56                   	push   esi
c0008345:	be 01 00 00 00       	mov    esi,0x1
c000834a:	53                   	push   ebx
c000834b:	83 ec 0c             	sub    esp,0xc
c000834e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008352:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008355:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000835b:	31 ff                	xor    edi,edi
c000835d:	01 e9                	add    ecx,ebp
c000835f:	8a 01                	mov    al,BYTE PTR [ecx]
c0008361:	83 fe 18             	cmp    esi,0x18
c0008364:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000836a:	75 20                	jne    c000838c <VgaText::scrollScreen()+0x4a>
c000836c:	f7 c7 01 00 00 00    	test   edi,0x1
c0008372:	74 15                	je     c0008389 <VgaText::scrollScreen()+0x47>
c0008374:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008378:	50                   	push   eax
c0008379:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000837d:	50                   	push   eax
c000837e:	e8 ad ff ff ff       	call   c0008330 <VgaText::combineColours(unsigned char, unsigned char)>
c0008383:	5a                   	pop    edx
c0008384:	5a                   	pop    edx
c0008385:	88 01                	mov    BYTE PTR [ecx],al
c0008387:	eb 03                	jmp    c000838c <VgaText::scrollScreen()+0x4a>
c0008389:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000838c:	47                   	inc    edi
c000838d:	41                   	inc    ecx
c000838e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008394:	75 c9                	jne    c000835f <VgaText::scrollScreen()+0x1d>
c0008396:	46                   	inc    esi
c0008397:	83 fe 19             	cmp    esi,0x19
c000839a:	75 b9                	jne    c0008355 <VgaText::scrollScreen()+0x13>
c000839c:	39 1d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebx
c00083a2:	75 1f                	jne    c00083c3 <VgaText::scrollScreen()+0x81>
c00083a4:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00083a8:	74 05                	je     c00083af <VgaText::scrollScreen()+0x6d>
c00083aa:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00083ad:	eb 14                	jmp    c00083c3 <VgaText::scrollScreen()+0x81>
c00083af:	50                   	push   eax
c00083b0:	50                   	push   eax
c00083b1:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00083b5:	50                   	push   eax
c00083b6:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00083ba:	50                   	push   eax
c00083bb:	e8 c0 f0 00 00       	call   c0017480 <HalConsoleScroll(int, int)>
c00083c0:	83 c4 10             	add    esp,0x10
c00083c3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00083c7:	83 c4 0c             	add    esp,0xc
c00083ca:	5b                   	pop    ebx
c00083cb:	5e                   	pop    esi
c00083cc:	5f                   	pop    edi
c00083cd:	5d                   	pop    ebp
c00083ce:	e9 79 fe ff ff       	jmp    c000824c <VgaText::updateCursor()>
c00083d3:	90                   	nop

c00083d4 <VgaText::combineCharAndColour(char, unsigned char)>:
c00083d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00083d9:	c1 e0 08             	shl    eax,0x8
c00083dc:	89 c2                	mov    edx,eax
c00083de:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00083e3:	09 d0                	or     eax,edx
c00083e5:	c3                   	ret    

c00083e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00083e6:	55                   	push   ebp
c00083e7:	57                   	push   edi
c00083e8:	56                   	push   esi
c00083e9:	53                   	push   ebx
c00083ea:	83 ec 1c             	sub    esp,0x1c
c00083ed:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00083f1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00083f5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00083f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083fd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008401:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008405:	0f b6 c3             	movzx  eax,bl
c0008408:	50                   	push   eax
c0008409:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c000840e:	50                   	push   eax
c000840f:	e8 1c ff ff ff       	call   c0008330 <VgaText::combineColours(unsigned char, unsigned char)>
c0008414:	5a                   	pop    edx
c0008415:	0f b6 c0             	movzx  eax,al
c0008418:	59                   	pop    ecx
c0008419:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c000841e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008422:	50                   	push   eax
c0008423:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008427:	e8 a8 ff ff ff       	call   c00083d4 <VgaText::combineCharAndColour(char, unsigned char)>
c000842c:	5a                   	pop    edx
c000842d:	66 6b d7 50          	imul   dx,di,0x50
c0008431:	59                   	pop    ecx
c0008432:	01 f2                	add    edx,esi
c0008434:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008437:	0f b7 d2             	movzx  edx,dx
c000843a:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000843e:	39 2d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebp
c0008444:	75 28                	jne    c000846e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0008446:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000844a:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000844e:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008452:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008456:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000845a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000845e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008462:	83 c4 1c             	add    esp,0x1c
c0008465:	5b                   	pop    ebx
c0008466:	5e                   	pop    esi
c0008467:	5f                   	pop    edi
c0008468:	5d                   	pop    ebp
c0008469:	e9 1a f1 00 00       	jmp    c0017588 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000846e:	83 c4 1c             	add    esp,0x1c
c0008471:	5b                   	pop    ebx
c0008472:	5e                   	pop    esi
c0008473:	5f                   	pop    edi
c0008474:	5d                   	pop    ebp
c0008475:	c3                   	ret    

c0008476 <VgaText::getCursorX()>:
c0008476:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000847a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000847d:	c3                   	ret    

c000847e <VgaText::getCursorY()>:
c000847e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008482:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008485:	c3                   	ret    

c0008486 <VgaText::setCursor(int, int)>:
c0008486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000848a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000848e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008491:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008495:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008498:	e9 af fd ff ff       	jmp    c000824c <VgaText::updateCursor()>

c000849d <setActiveTerminal(VgaText*)>:
c000849d:	53                   	push   ebx
c000849e:	83 ec 08             	sub    esp,0x8
c00084a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084a5:	85 db                	test   ebx,ebx
c00084a7:	75 11                	jne    c00084ba <setActiveTerminal(VgaText*)+0x1d>
c00084a9:	c7 44 24 10 00 f4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f400
c00084b1:	83 c4 08             	add    esp,0x8
c00084b4:	5b                   	pop    ebx
c00084b5:	e9 0d 7f 00 00       	jmp    c00103c7 <KePanic(char const*)>
c00084ba:	a1 04 3f 02 c0       	mov    eax,ds:0xc0023f04
c00084bf:	85 c0                	test   eax,eax
c00084c1:	74 0c                	je     c00084cf <setActiveTerminal(VgaText*)+0x32>
c00084c3:	83 ec 0c             	sub    esp,0xc
c00084c6:	50                   	push   eax
c00084c7:	e8 80 fd ff ff       	call   c000824c <VgaText::updateCursor()>
c00084cc:	83 c4 10             	add    esp,0x10
c00084cf:	89 1d 04 3f 02 c0    	mov    DWORD PTR ds:0xc0023f04,ebx
c00084d5:	50                   	push   eax
c00084d6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00084d9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00084dc:	53                   	push   ebx
c00084dd:	e8 a4 ff ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c00084e2:	83 c4 18             	add    esp,0x18
c00084e5:	5b                   	pop    ebx
c00084e6:	c3                   	ret    
c00084e7:	90                   	nop

c00084e8 <VgaText::clearScreen()>:
c00084e8:	57                   	push   edi
c00084e9:	56                   	push   esi
c00084ea:	31 f6                	xor    esi,esi
c00084ec:	53                   	push   ebx
c00084ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084f1:	52                   	push   edx
c00084f2:	6a 00                	push   0x0
c00084f4:	6a 00                	push   0x0
c00084f6:	53                   	push   ebx
c00084f7:	e8 8a ff ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c00084fc:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008503:	83 c4 10             	add    esp,0x10
c0008506:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008509:	7e 20                	jle    c000852b <VgaText::clearScreen()+0x43>
c000850b:	31 ff                	xor    edi,edi
c000850d:	50                   	push   eax
c000850e:	50                   	push   eax
c000850f:	56                   	push   esi
c0008510:	57                   	push   edi
c0008511:	47                   	inc    edi
c0008512:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008515:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008518:	6a 20                	push   0x20
c000851a:	53                   	push   ebx
c000851b:	e8 c6 fe ff ff       	call   c00083e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008520:	83 c4 20             	add    esp,0x20
c0008523:	83 ff 50             	cmp    edi,0x50
c0008526:	75 e5                	jne    c000850d <VgaText::clearScreen()+0x25>
c0008528:	46                   	inc    esi
c0008529:	eb db                	jmp    c0008506 <VgaText::clearScreen()+0x1e>
c000852b:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008532:	5b                   	pop    ebx
c0008533:	5e                   	pop    esi
c0008534:	5f                   	pop    edi
c0008535:	c3                   	ret    

c0008536 <VgaText::setCursorX(int)>:
c0008536:	83 ec 10             	sub    esp,0x10
c0008539:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008544:	50                   	push   eax
c0008545:	e8 3c ff ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c000854a:	83 c4 1c             	add    esp,0x1c
c000854d:	c3                   	ret    

c000854e <VgaText::setCursorY(int)>:
c000854e:	83 ec 10             	sub    esp,0x10
c0008551:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008555:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008559:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000855c:	50                   	push   eax
c000855d:	e8 24 ff ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c0008562:	83 c4 1c             	add    esp,0x1c
c0008565:	c3                   	ret    

c0008566 <VgaText::incrementCursor(bool)>:
c0008566:	56                   	push   esi
c0008567:	53                   	push   ebx
c0008568:	51                   	push   ecx
c0008569:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000856d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008571:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008574:	40                   	inc    eax
c0008575:	83 f8 50             	cmp    eax,0x50
c0008578:	74 05                	je     c000857f <VgaText::incrementCursor(bool)+0x19>
c000857a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000857d:	eb 24                	jmp    c00085a3 <VgaText::incrementCursor(bool)+0x3d>
c000857f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008582:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008589:	8d 50 01             	lea    edx,[eax+0x1]
c000858c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000858f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008592:	75 0f                	jne    c00085a3 <VgaText::incrementCursor(bool)+0x3d>
c0008594:	83 ec 0c             	sub    esp,0xc
c0008597:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859a:	53                   	push   ebx
c000859b:	e8 a2 fd ff ff       	call   c0008342 <VgaText::scrollScreen()>
c00085a0:	83 c4 10             	add    esp,0x10
c00085a3:	89 f0                	mov    eax,esi
c00085a5:	84 c0                	test   al,al
c00085a7:	74 0c                	je     c00085b5 <VgaText::incrementCursor(bool)+0x4f>
c00085a9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085ad:	5a                   	pop    edx
c00085ae:	5b                   	pop    ebx
c00085af:	5e                   	pop    esi
c00085b0:	e9 97 fc ff ff       	jmp    c000824c <VgaText::updateCursor()>
c00085b5:	58                   	pop    eax
c00085b6:	5b                   	pop    ebx
c00085b7:	5e                   	pop    esi
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::decrementCursor(bool)>:
c00085ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00085be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085c2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00085c5:	85 c0                	test   eax,eax
c00085c7:	74 04                	je     c00085cd <VgaText::decrementCursor(bool)+0x13>
c00085c9:	48                   	dec    eax
c00085ca:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00085cd:	84 c9                	test   cl,cl
c00085cf:	74 09                	je     c00085da <VgaText::decrementCursor(bool)+0x20>
c00085d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00085d5:	e9 72 fc ff ff       	jmp    c000824c <VgaText::updateCursor()>
c00085da:	c3                   	ret    
c00085db:	90                   	nop

c00085dc <VgaText::putchar(char, VgaColour, VgaColour)>:
c00085dc:	53                   	push   ebx
c00085dd:	83 ec 08             	sub    esp,0x8
c00085e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00085ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00085f0:	3c 07                	cmp    al,0x7
c00085f2:	75 21                	jne    c0008615 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c00085f4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00085fc:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008604:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000860c:	83 c4 08             	add    esp,0x8
c000860f:	5b                   	pop    ebx
c0008610:	e9 46 2e 00 00       	jmp    c000b45b <Krnl::beep(int, int, bool)>
c0008615:	3c 0d                	cmp    al,0xd
c0008617:	75 09                	jne    c0008622 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008619:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008620:	eb 2c                	jmp    c000864e <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008622:	3c 0a                	cmp    al,0xa
c0008624:	75 31                	jne    c0008657 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008626:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008629:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008630:	8d 50 01             	lea    edx,[eax+0x1]
c0008633:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008636:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008639:	75 0f                	jne    c000864a <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c000863b:	83 ec 0c             	sub    esp,0xc
c000863e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008641:	53                   	push   ebx
c0008642:	e8 fb fc ff ff       	call   c0008342 <VgaText::scrollScreen()>
c0008647:	83 c4 10             	add    esp,0x10
c000864a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000864e:	83 c4 08             	add    esp,0x8
c0008651:	5b                   	pop    ebx
c0008652:	e9 f5 fb ff ff       	jmp    c000824c <VgaText::updateCursor()>
c0008657:	3c 08                	cmp    al,0x8
c0008659:	75 25                	jne    c0008680 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c000865b:	50                   	push   eax
c000865c:	50                   	push   eax
c000865d:	6a 01                	push   0x1
c000865f:	53                   	push   ebx
c0008660:	e8 55 ff ff ff       	call   c00085ba <VgaText::decrementCursor(bool)>
c0008665:	5a                   	pop    edx
c0008666:	59                   	pop    ecx
c0008667:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000866a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000866d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008670:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008673:	6a 20                	push   0x20
c0008675:	53                   	push   ebx
c0008676:	e8 6b fd ff ff       	call   c00083e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000867b:	83 c4 28             	add    esp,0x28
c000867e:	5b                   	pop    ebx
c000867f:	c3                   	ret    
c0008680:	83 ec 08             	sub    esp,0x8
c0008683:	0f be c0             	movsx  eax,al
c0008686:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008689:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000868c:	51                   	push   ecx
c000868d:	52                   	push   edx
c000868e:	50                   	push   eax
c000868f:	53                   	push   ebx
c0008690:	e8 51 fd ff ff       	call   c00083e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008695:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008699:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00086a1:	83 c4 28             	add    esp,0x28
c00086a4:	5b                   	pop    ebx
c00086a5:	e9 bc fe ff ff       	jmp    c0008566 <VgaText::incrementCursor(bool)>

c00086aa <VgaText::putchar(char)>:
c00086aa:	56                   	push   esi
c00086ab:	53                   	push   ebx
c00086ac:	83 ec 14             	sub    esp,0x14
c00086af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00086b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00086b7:	3c 5b                	cmp    al,0x5b
c00086b9:	75 18                	jne    c00086d3 <VgaText::putchar(char)+0x29>
c00086bb:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00086bf:	74 1f                	je     c00086e0 <VgaText::putchar(char)+0x36>
c00086c1:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00086c7:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00086ce:	e9 bd 00 00 00       	jmp    c0008790 <VgaText::putchar(char)+0xe6>
c00086d3:	3c 1b                	cmp    al,0x1b
c00086d5:	75 09                	jne    c00086e0 <VgaText::putchar(char)+0x36>
c00086d7:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00086db:	e9 b0 00 00 00       	jmp    c0008790 <VgaText::putchar(char)+0xe6>
c00086e0:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00086e3:	84 c9                	test   cl,cl
c00086e5:	0f 84 92 00 00 00    	je     c000877d <VgaText::putchar(char)+0xd3>
c00086eb:	8d 50 c0             	lea    edx,[eax-0x40]
c00086ee:	80 fa 3e             	cmp    dl,0x3e
c00086f1:	77 76                	ja     c0008769 <VgaText::putchar(char)+0xbf>
c00086f3:	3c 6d                	cmp    al,0x6d
c00086f5:	75 47                	jne    c000873e <VgaText::putchar(char)+0x94>
c00086f7:	31 f6                	xor    esi,esi
c00086f9:	31 d2                	xor    edx,edx
c00086fb:	31 c0                	xor    eax,eax
c00086fd:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008700:	7e 2d                	jle    c000872f <VgaText::putchar(char)+0x85>
c0008702:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008707:	80 fa 3b             	cmp    dl,0x3b
c000870a:	75 17                	jne    c0008723 <VgaText::putchar(char)+0x79>
c000870c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008710:	50                   	push   eax
c0008711:	53                   	push   ebx
c0008712:	e8 4b fb ff ff       	call   c0008262 <VgaText::doANSI_SGR(int)>
c0008717:	59                   	pop    ecx
c0008718:	31 d2                	xor    edx,edx
c000871a:	58                   	pop    eax
c000871b:	31 c0                	xor    eax,eax
c000871d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008721:	eb 09                	jmp    c000872c <VgaText::putchar(char)+0x82>
c0008723:	6b c0 0a             	imul   eax,eax,0xa
c0008726:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000872a:	88 ca                	mov    dl,cl
c000872c:	46                   	inc    esi
c000872d:	eb ce                	jmp    c00086fd <VgaText::putchar(char)+0x53>
c000872f:	84 d2                	test   dl,dl
c0008731:	74 2e                	je     c0008761 <VgaText::putchar(char)+0xb7>
c0008733:	50                   	push   eax
c0008734:	53                   	push   ebx
c0008735:	e8 28 fb ff ff       	call   c0008262 <VgaText::doANSI_SGR(int)>
c000873a:	58                   	pop    eax
c000873b:	5a                   	pop    edx
c000873c:	eb 23                	jmp    c0008761 <VgaText::putchar(char)+0xb7>
c000873e:	3c 4a                	cmp    al,0x4a
c0008740:	75 1f                	jne    c0008761 <VgaText::putchar(char)+0xb7>
c0008742:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008746:	75 19                	jne    c0008761 <VgaText::putchar(char)+0xb7>
c0008748:	83 ec 0c             	sub    esp,0xc
c000874b:	53                   	push   ebx
c000874c:	e8 97 fd ff ff       	call   c00084e8 <VgaText::clearScreen()>
c0008751:	83 c4 0c             	add    esp,0xc
c0008754:	6a 00                	push   0x0
c0008756:	6a 00                	push   0x0
c0008758:	53                   	push   ebx
c0008759:	e8 28 fd ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c000875e:	83 c4 10             	add    esp,0x10
c0008761:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008767:	eb 27                	jmp    c0008790 <VgaText::putchar(char)+0xe6>
c0008769:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000876c:	83 fa 0e             	cmp    edx,0xe
c000876f:	7f 1f                	jg     c0008790 <VgaText::putchar(char)+0xe6>
c0008771:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008774:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008777:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000877b:	eb 13                	jmp    c0008790 <VgaText::putchar(char)+0xe6>
c000877d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008780:	0f be c0             	movsx  eax,al
c0008783:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008786:	50                   	push   eax
c0008787:	53                   	push   ebx
c0008788:	e8 4f fe ff ff       	call   c00085dc <VgaText::putchar(char, VgaColour, VgaColour)>
c000878d:	83 c4 10             	add    esp,0x10
c0008790:	83 c4 14             	add    esp,0x14
c0008793:	5b                   	pop    ebx
c0008794:	5e                   	pop    esi
c0008795:	c3                   	ret    

c0008796 <VgaText::putx(unsigned int)>:
c0008796:	57                   	push   edi
c0008797:	b9 11 00 00 00       	mov    ecx,0x11
c000879c:	56                   	push   esi
c000879d:	be 0e f4 01 c0       	mov    esi,0xc001f40e
c00087a2:	53                   	push   ebx
c00087a3:	83 ec 20             	sub    esp,0x20
c00087a6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087aa:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00087ae:	fc                   	cld    
c00087af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087b1:	be 08 00 00 00       	mov    esi,0x8
c00087b6:	50                   	push   eax
c00087b7:	50                   	push   eax
c00087b8:	89 d8                	mov    eax,ebx
c00087ba:	c1 e3 04             	shl    ebx,0x4
c00087bd:	c1 e8 1c             	shr    eax,0x1c
c00087c0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00087c5:	50                   	push   eax
c00087c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00087ca:	e8 db fe ff ff       	call   c00086aa <VgaText::putchar(char)>
c00087cf:	83 c4 10             	add    esp,0x10
c00087d2:	4e                   	dec    esi
c00087d3:	75 e1                	jne    c00087b6 <VgaText::putx(unsigned int)+0x20>
c00087d5:	83 c4 20             	add    esp,0x20
c00087d8:	5b                   	pop    ebx
c00087d9:	5e                   	pop    esi
c00087da:	5f                   	pop    edi
c00087db:	c3                   	ret    

c00087dc <VgaText::puts(char const*)>:
c00087dc:	53                   	push   ebx
c00087dd:	83 ec 08             	sub    esp,0x8
c00087e0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00087e4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00087e7:	84 c0                	test   al,al
c00087e9:	74 12                	je     c00087fd <VgaText::puts(char const*)+0x21>
c00087eb:	43                   	inc    ebx
c00087ec:	51                   	push   ecx
c00087ed:	51                   	push   ecx
c00087ee:	50                   	push   eax
c00087ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087f3:	e8 b2 fe ff ff       	call   c00086aa <VgaText::putchar(char)>
c00087f8:	83 c4 10             	add    esp,0x10
c00087fb:	eb e7                	jmp    c00087e4 <VgaText::puts(char const*)+0x8>
c00087fd:	83 c4 08             	add    esp,0x8
c0008800:	5b                   	pop    ebx
c0008801:	c3                   	ret    

c0008802 <VgaText::write(unsigned long long, void*, int*)>:
c0008802:	55                   	push   ebp
c0008803:	57                   	push   edi
c0008804:	56                   	push   esi
c0008805:	53                   	push   ebx
c0008806:	83 ec 0c             	sub    esp,0xc
c0008809:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000880d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008811:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008815:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000881c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000881f:	39 eb                	cmp    ebx,ebp
c0008821:	74 13                	je     c0008836 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008823:	43                   	inc    ebx
c0008824:	50                   	push   eax
c0008825:	50                   	push   eax
c0008826:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000882a:	50                   	push   eax
c000882b:	56                   	push   esi
c000882c:	e8 79 fe ff ff       	call   c00086aa <VgaText::putchar(char)>
c0008831:	83 c4 10             	add    esp,0x10
c0008834:	eb e9                	jmp    c000881f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008836:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000883d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008841:	89 38                	mov    DWORD PTR [eax],edi
c0008843:	83 c4 0c             	add    esp,0xc
c0008846:	31 c0                	xor    eax,eax
c0008848:	5b                   	pop    ebx
c0008849:	5e                   	pop    esi
c000884a:	5f                   	pop    edi
c000884b:	5d                   	pop    ebp
c000884c:	c3                   	ret    
c000884d:	90                   	nop

c000884e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000884e:	55                   	push   ebp
c000884f:	57                   	push   edi
c0008850:	56                   	push   esi
c0008851:	53                   	push   ebx
c0008852:	83 ec 0c             	sub    esp,0xc
c0008855:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008859:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000885e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008865:	50                   	push   eax
c0008866:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000886b:	50                   	push   eax
c000886c:	e8 bf fa ff ff       	call   c0008330 <VgaText::combineColours(unsigned char, unsigned char)>
c0008871:	5a                   	pop    edx
c0008872:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008877:	59                   	pop    ecx
c0008878:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000887b:	89 c5                	mov    ebp,eax
c000887d:	0f b7 f6             	movzx  esi,si
c0008880:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008884:	01 f6                	add    esi,esi
c0008886:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008889:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000888c:	84 c0                	test   al,al
c000888e:	0f 84 f4 00 00 00    	je     c0008988 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0008894:	3c 0d                	cmp    al,0xd
c0008896:	75 0c                	jne    c00088a4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008898:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000889f:	e9 de 00 00 00       	jmp    c0008982 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088a4:	3c 0a                	cmp    al,0xa
c00088a6:	75 45                	jne    c00088ed <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00088a8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088ab:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088b2:	8d 48 01             	lea    ecx,[eax+0x1]
c00088b5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00088b8:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00088bb:	75 0f                	jne    c00088cc <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c00088bd:	83 ec 0c             	sub    esp,0xc
c00088c0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088c3:	53                   	push   ebx
c00088c4:	e8 79 fa ff ff       	call   c0008342 <VgaText::scrollScreen()>
c00088c9:	83 c4 10             	add    esp,0x10
c00088cc:	83 ec 0c             	sub    esp,0xc
c00088cf:	53                   	push   ebx
c00088d0:	e8 77 f9 ff ff       	call   c000824c <VgaText::updateCursor()>
c00088d5:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088da:	83 c4 10             	add    esp,0x10
c00088dd:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00088e0:	0f b7 f6             	movzx  esi,si
c00088e3:	01 f6                	add    esi,esi
c00088e5:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088e8:	e9 95 00 00 00       	jmp    c0008982 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088ed:	3c 08                	cmp    al,0x8
c00088ef:	75 35                	jne    c0008926 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c00088f1:	51                   	push   ecx
c00088f2:	51                   	push   ecx
c00088f3:	6a 01                	push   0x1
c00088f5:	53                   	push   ebx
c00088f6:	e8 bf fc ff ff       	call   c00085ba <VgaText::decrementCursor(bool)>
c00088fb:	5e                   	pop    esi
c00088fc:	58                   	pop    eax
c00088fd:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008900:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008903:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008906:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008909:	6a 20                	push   0x20
c000890b:	53                   	push   ebx
c000890c:	e8 d5 fa ff ff       	call   c00083e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008911:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008916:	83 c4 20             	add    esp,0x20
c0008919:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000891c:	0f b7 f6             	movzx  esi,si
c000891f:	01 f6                	add    esi,esi
c0008921:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008924:	eb 5c                	jmp    c0008982 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008926:	52                   	push   edx
c0008927:	52                   	push   edx
c0008928:	89 ea                	mov    edx,ebp
c000892a:	0f b6 ca             	movzx  ecx,dl
c000892d:	51                   	push   ecx
c000892e:	50                   	push   eax
c000892f:	e8 a0 fa ff ff       	call   c00083d4 <VgaText::combineCharAndColour(char, unsigned char)>
c0008934:	83 c4 10             	add    esp,0x10
c0008937:	66 89 06             	mov    WORD PTR [esi],ax
c000893a:	39 1d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebx
c0008940:	75 1d                	jne    c000895f <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0008942:	83 ec 0c             	sub    esp,0xc
c0008945:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008948:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000894f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008953:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008956:	50                   	push   eax
c0008957:	e8 2c ec 00 00       	call   c0017588 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000895c:	83 c4 20             	add    esp,0x20
c000895f:	83 c6 02             	add    esi,0x2
c0008962:	50                   	push   eax
c0008963:	50                   	push   eax
c0008964:	6a 00                	push   0x0
c0008966:	53                   	push   ebx
c0008967:	e8 fa fb ff ff       	call   c0008566 <VgaText::incrementCursor(bool)>
c000896c:	83 c4 10             	add    esp,0x10
c000896f:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008973:	75 0d                	jne    c0008982 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008975:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000897a:	0f b7 f6             	movzx  esi,si
c000897d:	01 f6                	add    esi,esi
c000897f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008982:	47                   	inc    edi
c0008983:	e9 01 ff ff ff       	jmp    c0008889 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008988:	83 ec 0c             	sub    esp,0xc
c000898b:	53                   	push   ebx
c000898c:	e8 bb f8 ff ff       	call   c000824c <VgaText::updateCursor()>
c0008991:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008998:	83 c4 1c             	add    esp,0x1c
c000899b:	5b                   	pop    ebx
c000899c:	5e                   	pop    esi
c000899d:	5f                   	pop    edi
c000899e:	5d                   	pop    ebp
c000899f:	c3                   	ret    

c00089a0 <VgaText::VgaText(char const*)>:
c00089a0:	56                   	push   esi
c00089a1:	53                   	push   ebx
c00089a2:	83 ec 04             	sub    esp,0x4
c00089a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a9:	83 ec 08             	sub    esp,0x8
c00089ac:	6a 00                	push   0x0
c00089ae:	50                   	push   eax
c00089af:	e8 52 05 00 00       	call   c0008f06 <UnixFile::UnixFile(int)>
c00089b4:	83 c4 10             	add    esp,0x10
c00089b7:	ba 34 f4 01 c0       	mov    edx,0xc001f434
c00089bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089c0:	89 10                	mov    DWORD PTR [eax],edx
c00089c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089c6:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00089cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089d1:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00089d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089dc:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00089e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089e4:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00089e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ec:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00089f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00089fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a02:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0d:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a18:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008a1f:	83 ec 0c             	sub    esp,0xc
c0008a22:	6a 01                	push   0x1
c0008a24:	e8 20 09 00 00       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c0008a29:	83 c4 10             	add    esp,0x10
c0008a2c:	89 c2                	mov    edx,eax
c0008a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a32:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008a35:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c0008a3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a3f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a42:	89 c6                	mov    esi,eax
c0008a44:	e8 f8 f0 ff ff       	call   c0007b41 <Phys::allocatePage()>
c0008a49:	68 05 0c 00 00       	push   0xc05
c0008a4e:	56                   	push   esi
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 b6 0f 00 00       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a5d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a60:	83 ec 04             	sub    esp,0x4
c0008a63:	68 a0 0f 00 00       	push   0xfa0
c0008a68:	6a 00                	push   0x0
c0008a6a:	50                   	push   eax
c0008a6b:	e8 50 7a ff ff       	call   c00004c0 <memset>
c0008a70:	83 c4 10             	add    esp,0x10
c0008a73:	83 ec 04             	sub    esp,0x4
c0008a76:	6a 00                	push   0x0
c0008a78:	6a 07                	push   0x7
c0008a7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a7e:	e8 73 f8 ff ff       	call   c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008a83:	83 c4 10             	add    esp,0x10
c0008a86:	83 ec 04             	sub    esp,0x4
c0008a89:	6a 00                	push   0x0
c0008a8b:	6a 00                	push   0x0
c0008a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a91:	e8 f0 f9 ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c0008a96:	83 c4 10             	add    esp,0x10
c0008a99:	83 ec 0c             	sub    esp,0xc
c0008a9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aa0:	e8 43 fa ff ff       	call   c00084e8 <VgaText::clearScreen()>
c0008aa5:	83 c4 10             	add    esp,0x10
c0008aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008aac:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ab4:	05 82 00 00 00       	add    eax,0x82
c0008ab9:	83 ec 04             	sub    esp,0x4
c0008abc:	68 80 00 00 00       	push   0x80
c0008ac1:	6a 00                	push   0x0
c0008ac3:	50                   	push   eax
c0008ac4:	e8 f7 79 ff ff       	call   c00004c0 <memset>
c0008ac9:	83 c4 10             	add    esp,0x10
c0008acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ad0:	05 02 01 00 00       	add    eax,0x102
c0008ad5:	83 ec 04             	sub    esp,0x4
c0008ad8:	68 80 00 00 00       	push   0x80
c0008add:	6a 00                	push   0x0
c0008adf:	50                   	push   eax
c0008ae0:	e8 db 79 ff ff       	call   c00004c0 <memset>
c0008ae5:	83 c4 10             	add    esp,0x10
c0008ae8:	90                   	nop
c0008ae9:	83 c4 04             	add    esp,0x4
c0008aec:	5b                   	pop    ebx
c0008aed:	5e                   	pop    esi
c0008aee:	c3                   	ret    
c0008aef:	90                   	nop

c0008af0 <VgaText::receiveKey(unsigned char)>:
c0008af0:	55                   	push   ebp
c0008af1:	57                   	push   edi
c0008af2:	56                   	push   esi
c0008af3:	53                   	push   ebx
c0008af4:	83 ec 1c             	sub    esp,0x1c
c0008af7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008afb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008aff:	89 f0                	mov    eax,esi
c0008b01:	84 c0                	test   al,al
c0008b03:	0f 84 54 01 00 00    	je     c0008c5d <VgaText::receiveKey(unsigned char)+0x16d>
c0008b09:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008b0f:	3c 08                	cmp    al,0x8
c0008b11:	75 6b                	jne    c0008b7e <VgaText::receiveKey(unsigned char)+0x8e>
c0008b13:	83 ec 0c             	sub    esp,0xc
c0008b16:	57                   	push   edi
c0008b17:	e8 14 7a ff ff       	call   c0000530 <strlen>
c0008b1c:	83 c4 10             	add    esp,0x10
c0008b1f:	85 c0                	test   eax,eax
c0008b21:	0f 84 f1 00 00 00    	je     c0008c18 <VgaText::receiveKey(unsigned char)+0x128>
c0008b27:	50                   	push   eax
c0008b28:	50                   	push   eax
c0008b29:	6a 08                	push   0x8
c0008b2b:	53                   	push   ebx
c0008b2c:	e8 79 fb ff ff       	call   c00086aa <VgaText::putchar(char)>
c0008b31:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b34:	e8 f7 79 ff ff       	call   c0000530 <strlen>
c0008b39:	83 c4 10             	add    esp,0x10
c0008b3c:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008b43:	3c 0d                	cmp    al,0xd
c0008b45:	0f 95 c1             	setne  cl
c0008b48:	3c 1f                	cmp    al,0x1f
c0008b4a:	0f 9e c2             	setle  dl
c0008b4d:	84 d1                	test   cl,dl
c0008b4f:	74 17                	je     c0008b68 <VgaText::receiveKey(unsigned char)+0x78>
c0008b51:	83 e8 08             	sub    eax,0x8
c0008b54:	3c 02                	cmp    al,0x2
c0008b56:	76 10                	jbe    c0008b68 <VgaText::receiveKey(unsigned char)+0x78>
c0008b58:	55                   	push   ebp
c0008b59:	55                   	push   ebp
c0008b5a:	68 1f f4 01 c0       	push   0xc001f41f
c0008b5f:	53                   	push   ebx
c0008b60:	e8 77 fc ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0008b65:	83 c4 10             	add    esp,0x10
c0008b68:	83 ec 0c             	sub    esp,0xc
c0008b6b:	57                   	push   edi
c0008b6c:	e8 bf 79 ff ff       	call   c0000530 <strlen>
c0008b71:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008b79:	e9 97 00 00 00       	jmp    c0008c15 <VgaText::receiveKey(unsigned char)+0x125>
c0008b7e:	83 ec 0c             	sub    esp,0xc
c0008b81:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008b87:	50                   	push   eax
c0008b88:	e8 a3 79 ff ff       	call   c0000530 <strlen>
c0008b8d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b90:	89 c5                	mov    ebp,eax
c0008b92:	e8 99 79 ff ff       	call   c0000530 <strlen>
c0008b97:	83 c4 10             	add    esp,0x10
c0008b9a:	8d 44 05 03          	lea    eax,[ebp+eax*1+0x3]
c0008b9e:	3d 80 00 00 00       	cmp    eax,0x80
c0008ba3:	0f 87 b4 00 00 00    	ja     c0008c5d <VgaText::receiveKey(unsigned char)+0x16d>
c0008ba9:	8d 46 ff             	lea    eax,[esi-0x1]
c0008bac:	3c 1e                	cmp    al,0x1e
c0008bae:	8d 46 f7             	lea    eax,[esi-0x9]
c0008bb1:	0f 96 c2             	setbe  dl
c0008bb4:	3c 01                	cmp    al,0x1
c0008bb6:	0f 97 c0             	seta   al
c0008bb9:	84 c2                	test   dl,al
c0008bbb:	74 2f                	je     c0008bec <VgaText::receiveKey(unsigned char)+0xfc>
c0008bbd:	89 f0                	mov    eax,esi
c0008bbf:	3c 0d                	cmp    al,0xd
c0008bc1:	74 29                	je     c0008bec <VgaText::receiveKey(unsigned char)+0xfc>
c0008bc3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bc6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bc9:	68 25 f4 01 c0       	push   0xc001f425
c0008bce:	53                   	push   ebx
c0008bcf:	e8 7a fc ff ff       	call   c000884e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008bd4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd7:	8d 46 40             	lea    eax,[esi+0x40]
c0008bda:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bdd:	0f b6 c0             	movzx  eax,al
c0008be0:	50                   	push   eax
c0008be1:	53                   	push   ebx
c0008be2:	e8 f5 f9 ff ff       	call   c00085dc <VgaText::putchar(char, VgaColour, VgaColour)>
c0008be7:	83 c4 20             	add    esp,0x20
c0008bea:	eb 11                	jmp    c0008bfd <VgaText::receiveKey(unsigned char)+0x10d>
c0008bec:	89 f0                	mov    eax,esi
c0008bee:	51                   	push   ecx
c0008bef:	0f be c0             	movsx  eax,al
c0008bf2:	51                   	push   ecx
c0008bf3:	50                   	push   eax
c0008bf4:	53                   	push   ebx
c0008bf5:	e8 b0 fa ff ff       	call   c00086aa <VgaText::putchar(char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008c02:	89 f0                	mov    eax,esi
c0008c04:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008c08:	52                   	push   edx
c0008c09:	52                   	push   edx
c0008c0a:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008c0e:	50                   	push   eax
c0008c0f:	57                   	push   edi
c0008c10:	e8 9b 7b ff ff       	call   c00007b0 <strcat>
c0008c15:	83 c4 10             	add    esp,0x10
c0008c18:	89 f1                	mov    ecx,esi
c0008c1a:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008c20:	b0 01                	mov    al,0x1
c0008c22:	80 f9 1c             	cmp    cl,0x1c
c0008c25:	77 0c                	ja     c0008c33 <VgaText::receiveKey(unsigned char)+0x143>
c0008c27:	b8 08 04 00 10       	mov    eax,0x10000408
c0008c2c:	d3 e8                	shr    eax,cl
c0008c2e:	f7 d0                	not    eax
c0008c30:	83 e0 01             	and    eax,0x1
c0008c33:	84 c0                	test   al,al
c0008c35:	74 04                	je     c0008c3b <VgaText::receiveKey(unsigned char)+0x14b>
c0008c37:	84 d2                	test   dl,dl
c0008c39:	74 22                	je     c0008c5d <VgaText::receiveKey(unsigned char)+0x16d>
c0008c3b:	81 c3 02 01 00 00    	add    ebx,0x102
c0008c41:	50                   	push   eax
c0008c42:	50                   	push   eax
c0008c43:	57                   	push   edi
c0008c44:	53                   	push   ebx
c0008c45:	e8 66 7b ff ff       	call   c00007b0 <strcat>
c0008c4a:	83 c4 0c             	add    esp,0xc
c0008c4d:	68 80 00 00 00       	push   0x80
c0008c52:	6a 00                	push   0x0
c0008c54:	57                   	push   edi
c0008c55:	e8 66 78 ff ff       	call   c00004c0 <memset>
c0008c5a:	83 c4 10             	add    esp,0x10
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::doUpdate()>:
c0008c66:	c3                   	ret    

c0008c67 <newTerminal(char*)>:
c0008c67:	83 ec 28             	sub    esp,0x28
c0008c6a:	68 84 01 00 00       	push   0x184
c0008c6f:	e8 f1 eb ff ff       	call   c0007865 <malloc>
c0008c74:	5a                   	pop    edx
c0008c75:	59                   	pop    ecx
c0008c76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008c7a:	50                   	push   eax
c0008c7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008c7f:	e8 1c fd ff ff       	call   c00089a0 <VgaText::VgaText(char const*)>
c0008c84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c88:	83 c4 2c             	add    esp,0x2c
c0008c8b:	c3                   	ret    

c0008c8c <TSS::TSS()>:
c0008c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c90:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008c97:	90                   	nop
c0008c98:	c3                   	ret    
c0008c99:	90                   	nop
c0008c9a:	66 90                	xchg   ax,ax

c0008c9c <TSS::setESP(unsigned long)>:
c0008c9c:	55                   	push   ebp
c0008c9d:	89 e5                	mov    ebp,esp
c0008c9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008ca8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008cab:	90                   	nop
c0008cac:	5d                   	pop    ebp
c0008cad:	c3                   	ret    
c0008cae:	66 90                	xchg   ax,ax

c0008cb0 <TSS::flush()>:
c0008cb0:	55                   	push   ebp
c0008cb1:	89 e5                	mov    ebp,esp
c0008cb3:	83 ec 10             	sub    esp,0x10
c0008cb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0008cbb:	83 c8 03             	or     eax,0x3
c0008cbe:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008cc2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008cc6:	66 89 d0             	mov    ax,dx
c0008cc9:	0f 00 d8             	ltr    ax
c0008ccc:	90                   	nop
c0008ccd:	c9                   	leave  
c0008cce:	c3                   	ret    
c0008ccf:	90                   	nop

c0008cd0 <TSS::setup(unsigned long, unsigned long)>:
c0008cd0:	55                   	push   ebp
c0008cd1:	89 e5                	mov    ebp,esp
c0008cd3:	83 ec 18             	sub    esp,0x18
c0008cd6:	83 ec 0c             	sub    esp,0xc
c0008cd9:	6a 68                	push   0x68
c0008cdb:	e8 85 eb ff ff       	call   c0007865 <malloc>
c0008ce0:	83 c4 10             	add    esp,0x10
c0008ce3:	89 c2                	mov    edx,eax
c0008ce5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008ceb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cf1:	83 ec 04             	sub    esp,0x4
c0008cf4:	6a 68                	push   0x68
c0008cf6:	6a 00                	push   0x0
c0008cf8:	50                   	push   eax
c0008cf9:	e8 c2 77 ff ff       	call   c00004c0 <memset>
c0008cfe:	83 c4 10             	add    esp,0x10
c0008d01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d07:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008d0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d13:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008d19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d1f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008d25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d2b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008d31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d37:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008d3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d43:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008d49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d4f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008d55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d5b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008d61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d67:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008d6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d73:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008d76:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d7f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d82:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d8b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d98:	0f 20 da             	mov    edx,cr3
c0008d9b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008d9e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008da1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008da4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008da7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008daa:	83 ec 08             	sub    esp,0x8
c0008dad:	50                   	push   eax
c0008dae:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008db1:	50                   	push   eax
c0008db2:	e8 33 e3 ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c0008db7:	83 c4 10             	add    esp,0x10
c0008dba:	83 ec 08             	sub    esp,0x8
c0008dbd:	6a 68                	push   0x68
c0008dbf:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008dc2:	50                   	push   eax
c0008dc3:	e8 3e e3 ff ff       	call   c0007106 <GDTEntry::setLimit(unsigned int)>
c0008dc8:	83 c4 10             	add    esp,0x10
c0008dcb:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008dcf:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008dd2:	83 e0 0f             	and    eax,0xf
c0008dd5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008dd8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008ddb:	83 c8 40             	or     eax,0x40
c0008dde:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008de1:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0008de6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008dec:	05 78 01 00 00       	add    eax,0x178
c0008df1:	83 ec 04             	sub    esp,0x4
c0008df4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008df7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008dfa:	50                   	push   eax
c0008dfb:	e8 3a e3 ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0008e00:	83 c4 10             	add    esp,0x10
c0008e03:	89 c2                	mov    edx,eax
c0008e05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e08:	89 10                	mov    DWORD PTR [eax],edx
c0008e0a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0008e0f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008e15:	05 78 01 00 00       	add    eax,0x178
c0008e1a:	83 ec 0c             	sub    esp,0xc
c0008e1d:	50                   	push   eax
c0008e1e:	e8 41 e3 ff ff       	call   c0007164 <GDT::flush()>
c0008e23:	83 c4 10             	add    esp,0x10
c0008e26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e29:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e2b:	c9                   	leave  
c0008e2c:	c3                   	ret    
c0008e2d:	90                   	nop

c0008e2e <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008e2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e32:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008e36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e39:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008e3e:	75 08                	jne    c0008e48 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008e40:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008e46:	eb 38                	jmp    c0008e80 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008e48:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e4d:	75 17                	jne    c0008e66 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008e4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e54:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e57:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e63:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008e66:	89 c1                	mov    ecx,eax
c0008e68:	83 e1 fd             	and    ecx,0xfffffffd
c0008e6b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008e71:	74 cd                	je     c0008e40 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e73:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e78:	83 e0 ef             	and    eax,0xffffffef
c0008e7b:	83 f8 08             	cmp    eax,0x8
c0008e7e:	76 c0                	jbe    c0008e40 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e80:	31 c0                	xor    eax,eax
c0008e82:	c3                   	ret    
c0008e83:	90                   	nop

c0008e84 <ReservedFilename::isAtty()>:
c0008e84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e88:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e8b:	31 c0                	xor    eax,eax
c0008e8d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008e93:	74 09                	je     c0008e9e <ReservedFilename::isAtty()+0x1a>
c0008e95:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008e9b:	0f 94 c0             	sete   al
c0008e9e:	c3                   	ret    
c0008e9f:	90                   	nop

c0008ea0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ea0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008ea4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008ea8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008eab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008eaf:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008eb4:	75 08                	jne    c0008ebe <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008eb6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008ebc:	eb 3d                	jmp    c0008efb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008ebe:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008ec3:	75 17                	jne    c0008edc <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008ec5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008eca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008ecd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008ed3:	8b 10                	mov    edx,DWORD PTR [eax]
c0008ed5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ed9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008edc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008ee1:	75 04                	jne    c0008ee7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008ee3:	89 0a                	mov    DWORD PTR [edx],ecx
c0008ee5:	eb 14                	jmp    c0008efb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008ee7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008eec:	74 c8                	je     c0008eb6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008eee:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008ef3:	83 e0 ef             	and    eax,0xffffffef
c0008ef6:	83 f8 08             	cmp    eax,0x8
c0008ef9:	76 bb                	jbe    c0008eb6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008efb:	31 c0                	xor    eax,eax
c0008efd:	c3                   	ret    

c0008efe <UnixFile::getFileDescriptor()>:
c0008efe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f05:	c3                   	ret    

c0008f06 <UnixFile::UnixFile(int)>:
c0008f06:	53                   	push   ebx
c0008f07:	83 ec 28             	sub    esp,0x28
c0008f0a:	ba fc f4 01 c0       	mov    edx,0xc001f4fc
c0008f0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f13:	89 10                	mov    DWORD PTR [eax],edx
c0008f15:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008f1d:	0f 8f 8c 01 00 00    	jg     c00090af <UnixFile::UnixFile(int)+0x1a9>
c0008f23:	a1 e0 15 02 c0       	mov    eax,ds:0xc00215e0
c0008f28:	8d 50 01             	lea    edx,[eax+0x1]
c0008f2b:	89 15 e0 15 02 c0    	mov    DWORD PTR ds:0xc00215e0,edx
c0008f31:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008f35:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f38:	83 ec 08             	sub    esp,0x8
c0008f3b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008f3f:	68 98 3f 02 c0       	push   0xc0023f98
c0008f44:	e8 7f 50 01 00       	call   c001dfc8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008f49:	83 c4 10             	add    esp,0x10
c0008f4c:	a0 94 3f 02 c0       	mov    al,ds:0xc0023f94
c0008f51:	83 f0 01             	xor    eax,0x1
c0008f54:	84 c0                	test   al,al
c0008f56:	0f 84 54 01 00 00    	je     c00090b0 <UnixFile::UnixFile(int)+0x1aa>
c0008f5c:	c6 05 94 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023f94,0x1
c0008f63:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008f6b:	83 ec 0c             	sub    esp,0xc
c0008f6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008f72:	e8 ee e8 ff ff       	call   c0007865 <malloc>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 c3                	mov    ebx,eax
c0008f7c:	83 ec 08             	sub    esp,0x8
c0008f7f:	68 03 ff ff 0f       	push   0xfffff03
c0008f84:	53                   	push   ebx
c0008f85:	e8 2c 01 00 00       	call   c00090b6 <ReservedFilename::ReservedFilename(int)>
c0008f8a:	83 c4 10             	add    esp,0x10
c0008f8d:	89 1d 8c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f8c,ebx
c0008f93:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008f9b:	83 ec 0c             	sub    esp,0xc
c0008f9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008fa2:	e8 be e8 ff ff       	call   c0007865 <malloc>
c0008fa7:	83 c4 10             	add    esp,0x10
c0008faa:	89 c3                	mov    ebx,eax
c0008fac:	83 ec 08             	sub    esp,0x8
c0008faf:	68 01 ff ff 0f       	push   0xfffff01
c0008fb4:	53                   	push   ebx
c0008fb5:	e8 fc 00 00 00       	call   c00090b6 <ReservedFilename::ReservedFilename(int)>
c0008fba:	83 c4 10             	add    esp,0x10
c0008fbd:	89 1d 90 3f 02 c0    	mov    DWORD PTR ds:0xc0023f90,ebx
c0008fc3:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008fcb:	83 ec 0c             	sub    esp,0xc
c0008fce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008fd2:	e8 8e e8 ff ff       	call   c0007865 <malloc>
c0008fd7:	83 c4 10             	add    esp,0x10
c0008fda:	89 c3                	mov    ebx,eax
c0008fdc:	83 ec 08             	sub    esp,0x8
c0008fdf:	68 00 ff ff 0f       	push   0xfffff00
c0008fe4:	53                   	push   ebx
c0008fe5:	e8 cc 00 00 00       	call   c00090b6 <ReservedFilename::ReservedFilename(int)>
c0008fea:	83 c4 10             	add    esp,0x10
c0008fed:	89 1d 84 3f 02 c0    	mov    DWORD PTR ds:0xc0023f84,ebx
c0008ff3:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008ffb:	83 ec 0c             	sub    esp,0xc
c0008ffe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009002:	e8 5e e8 ff ff       	call   c0007865 <malloc>
c0009007:	83 c4 10             	add    esp,0x10
c000900a:	89 c3                	mov    ebx,eax
c000900c:	83 ec 08             	sub    esp,0x8
c000900f:	68 02 ff ff 0f       	push   0xfffff02
c0009014:	53                   	push   ebx
c0009015:	e8 9c 00 00 00       	call   c00090b6 <ReservedFilename::ReservedFilename(int)>
c000901a:	83 c4 10             	add    esp,0x10
c000901d:	89 1d 88 3f 02 c0    	mov    DWORD PTR ds:0xc0023f88,ebx
c0009023:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000902b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0009030:	7f 7e                	jg     c00090b0 <UnixFile::UnixFile(int)+0x1aa>
c0009032:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000903a:	83 ec 0c             	sub    esp,0xc
c000903d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009041:	e8 1f e8 ff ff       	call   c0007865 <malloc>
c0009046:	83 c4 10             	add    esp,0x10
c0009049:	89 c3                	mov    ebx,eax
c000904b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000904f:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009054:	83 ec 08             	sub    esp,0x8
c0009057:	50                   	push   eax
c0009058:	53                   	push   ebx
c0009059:	e8 58 00 00 00       	call   c00090b6 <ReservedFilename::ReservedFilename(int)>
c000905e:	83 c4 10             	add    esp,0x10
c0009061:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009065:	89 1c 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],ebx
c000906c:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009074:	83 ec 0c             	sub    esp,0xc
c0009077:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000907b:	e8 e5 e7 ff ff       	call   c0007865 <malloc>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	89 c3                	mov    ebx,eax
c0009085:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009089:	05 20 ff ff 0f       	add    eax,0xfffff20
c000908e:	83 ec 08             	sub    esp,0x8
c0009091:	50                   	push   eax
c0009092:	53                   	push   ebx
c0009093:	e8 1e 00 00 00       	call   c00090b6 <ReservedFilename::ReservedFilename(int)>
c0009098:	83 c4 10             	add    esp,0x10
c000909b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000909f:	89 1c 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],ebx
c00090a6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00090aa:	e9 7c ff ff ff       	jmp    c000902b <UnixFile::UnixFile(int)+0x125>
c00090af:	90                   	nop
c00090b0:	83 c4 28             	add    esp,0x28
c00090b3:	5b                   	pop    ebx
c00090b4:	c3                   	ret    
c00090b5:	90                   	nop

c00090b6 <ReservedFilename::ReservedFilename(int)>:
c00090b6:	83 ec 0c             	sub    esp,0xc
c00090b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c4:	50                   	push   eax
c00090c5:	e8 3c fe ff ff       	call   c0008f06 <UnixFile::UnixFile(int)>
c00090ca:	83 c4 10             	add    esp,0x10
c00090cd:	ba 18 f5 01 c0       	mov    edx,0xc001f518
c00090d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d6:	89 10                	mov    DWORD PTR [eax],edx
c00090d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090e0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00090e3:	90                   	nop
c00090e4:	83 c4 0c             	add    esp,0xc
c00090e7:	c3                   	ret    

c00090e8 <UnixFile::~UnixFile()>:
c00090e8:	83 ec 1c             	sub    esp,0x1c
c00090eb:	ba fc f4 01 c0       	mov    edx,0xc001f4fc
c00090f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090f4:	89 10                	mov    DWORD PTR [eax],edx
c00090f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090fd:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009102:	7f 73                	jg     c0009177 <UnixFile::~UnixFile()+0x8f>
c0009104:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000910c:	83 ec 0c             	sub    esp,0xc
c000910f:	68 98 3f 02 c0       	push   0xc0023f98
c0009114:	e8 83 4f 01 00       	call   c001e09c <LinkedList<UnixFile>::getFirstElement()>
c0009119:	83 c4 10             	add    esp,0x10
c000911c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009120:	83 ec 0c             	sub    esp,0xc
c0009123:	68 98 3f 02 c0       	push   0xc0023f98
c0009128:	e8 77 4f 01 00       	call   c001e0a4 <LinkedList<UnixFile>::removeFirst()>
c000912d:	83 c4 10             	add    esp,0x10
c0009130:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009134:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009138:	74 40                	je     c000917a <UnixFile::~UnixFile()+0x92>
c000913a:	83 ec 08             	sub    esp,0x8
c000913d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009141:	68 98 3f 02 c0       	push   0xc0023f98
c0009146:	e8 7d 4e 01 00       	call   c001dfc8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000914b:	83 c4 10             	add    esp,0x10
c000914e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009152:	8d 50 01             	lea    edx,[eax+0x1]
c0009155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009159:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000915e:	0f 94 c0             	sete   al
c0009161:	84 c0                	test   al,al
c0009163:	74 a7                	je     c000910c <UnixFile::~UnixFile()+0x24>
c0009165:	83 ec 0c             	sub    esp,0xc
c0009168:	68 d4 f4 01 c0       	push   0xc001f4d4
c000916d:	e8 55 72 00 00       	call   c00103c7 <KePanic(char const*)>
c0009172:	83 c4 10             	add    esp,0x10
c0009175:	eb 95                	jmp    c000910c <UnixFile::~UnixFile()+0x24>
c0009177:	90                   	nop
c0009178:	eb 01                	jmp    c000917b <UnixFile::~UnixFile()+0x93>
c000917a:	90                   	nop
c000917b:	90                   	nop
c000917c:	83 c4 1c             	add    esp,0x1c
c000917f:	c3                   	ret    

c0009180 <UnixFile::~UnixFile()>:
c0009180:	83 ec 0c             	sub    esp,0xc
c0009183:	83 ec 0c             	sub    esp,0xc
c0009186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000918a:	e8 59 ff ff ff       	call   c00090e8 <UnixFile::~UnixFile()>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	83 ec 08             	sub    esp,0x8
c0009195:	6a 0c                	push   0xc
c0009197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000919b:	e8 70 13 00 00       	call   c000a510 <operator delete(void*, unsigned long)>
c00091a0:	83 c4 10             	add    esp,0x10
c00091a3:	83 c4 0c             	add    esp,0xc
c00091a6:	c3                   	ret    
c00091a7:	90                   	nop

c00091a8 <ReservedFilename::~ReservedFilename()>:
c00091a8:	83 ec 0c             	sub    esp,0xc
c00091ab:	ba 18 f5 01 c0       	mov    edx,0xc001f518
c00091b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091b4:	89 10                	mov    DWORD PTR [eax],edx
c00091b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091ba:	83 ec 0c             	sub    esp,0xc
c00091bd:	50                   	push   eax
c00091be:	e8 25 ff ff ff       	call   c00090e8 <UnixFile::~UnixFile()>
c00091c3:	83 c4 10             	add    esp,0x10
c00091c6:	90                   	nop
c00091c7:	83 c4 0c             	add    esp,0xc
c00091ca:	c3                   	ret    
c00091cb:	90                   	nop

c00091cc <ReservedFilename::~ReservedFilename()>:
c00091cc:	83 ec 0c             	sub    esp,0xc
c00091cf:	83 ec 0c             	sub    esp,0xc
c00091d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091d6:	e8 cd ff ff ff       	call   c00091a8 <ReservedFilename::~ReservedFilename()>
c00091db:	83 c4 10             	add    esp,0x10
c00091de:	83 ec 08             	sub    esp,0x8
c00091e1:	6a 0c                	push   0xc
c00091e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091e7:	e8 24 13 00 00       	call   c000a510 <operator delete(void*, unsigned long)>
c00091ec:	83 c4 10             	add    esp,0x10
c00091ef:	83 c4 0c             	add    esp,0xc
c00091f2:	c3                   	ret    

c00091f3 <getFromFileDescriptor(int)>:
c00091f3:	53                   	push   ebx
c00091f4:	83 ec 08             	sub    esp,0x8
c00091f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00091fb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009201:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009207:	7f 2c                	jg     c0009235 <getFromFileDescriptor(int)+0x42>
c0009209:	83 ec 0c             	sub    esp,0xc
c000920c:	68 98 3f 02 c0       	push   0xc0023f98
c0009211:	e8 86 4e 01 00       	call   c001e09c <LinkedList<UnixFile>::getFirstElement()>
c0009216:	83 c4 10             	add    esp,0x10
c0009219:	85 c0                	test   eax,eax
c000921b:	75 04                	jne    c0009221 <getFromFileDescriptor(int)+0x2e>
c000921d:	31 c0                	xor    eax,eax
c000921f:	eb 6e                	jmp    c000928f <getFromFileDescriptor(int)+0x9c>
c0009221:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009224:	74 69                	je     c000928f <getFromFileDescriptor(int)+0x9c>
c0009226:	52                   	push   edx
c0009227:	52                   	push   edx
c0009228:	50                   	push   eax
c0009229:	68 98 3f 02 c0       	push   0xc0023f98
c000922e:	e8 13 4f 01 00       	call   c001e146 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009233:	eb e1                	jmp    c0009216 <getFromFileDescriptor(int)+0x23>
c0009235:	a1 8c 3f 02 c0       	mov    eax,ds:0xc0023f8c
c000923a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009240:	74 4d                	je     c000928f <getFromFileDescriptor(int)+0x9c>
c0009242:	a1 90 3f 02 c0       	mov    eax,ds:0xc0023f90
c0009247:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000924d:	74 40                	je     c000928f <getFromFileDescriptor(int)+0x9c>
c000924f:	a1 88 3f 02 c0       	mov    eax,ds:0xc0023f88
c0009254:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000925a:	74 33                	je     c000928f <getFromFileDescriptor(int)+0x9c>
c000925c:	a1 84 3f 02 c0       	mov    eax,ds:0xc0023f84
c0009261:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009267:	74 26                	je     c000928f <getFromFileDescriptor(int)+0x9c>
c0009269:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000926f:	83 f8 08             	cmp    eax,0x8
c0009272:	77 09                	ja     c000927d <getFromFileDescriptor(int)+0x8a>
c0009274:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c000927b:	eb 12                	jmp    c000928f <getFromFileDescriptor(int)+0x9c>
c000927d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009283:	83 fb 08             	cmp    ebx,0x8
c0009286:	77 95                	ja     c000921d <getFromFileDescriptor(int)+0x2a>
c0009288:	8b 04 9d 20 3f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdc0e0]
c000928f:	83 c4 08             	add    esp,0x8
c0009292:	5b                   	pop    ebx
c0009293:	c3                   	ret    

c0009294 <__static_initialization_and_destruction_0(int, int)>:
c0009294:	83 ec 0c             	sub    esp,0xc
c0009297:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000929c:	75 34                	jne    c00092d2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000929e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00092a6:	75 2a                	jne    c00092d2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00092a8:	83 ec 0c             	sub    esp,0xc
c00092ab:	68 98 3f 02 c0       	push   0xc0023f98
c00092b0:	e8 d1 4c 01 00       	call   c001df86 <LinkedList<UnixFile>::LinkedList()>
c00092b5:	83 c4 10             	add    esp,0x10
c00092b8:	83 ec 04             	sub    esp,0x4
c00092bb:	68 70 15 02 c0       	push   0xc0021570
c00092c0:	68 98 3f 02 c0       	push   0xc0023f98
c00092c5:	68 84 df 01 c0       	push   0xc001df84
c00092ca:	e8 f1 11 00 00       	call   c000a4c0 <__cxa_atexit>
c00092cf:	83 c4 10             	add    esp,0x10
c00092d2:	90                   	nop
c00092d3:	83 c4 0c             	add    esp,0xc
c00092d6:	c3                   	ret    

c00092d7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00092d7:	83 ec 0c             	sub    esp,0xc
c00092da:	83 ec 08             	sub    esp,0x8
c00092dd:	68 ff ff 00 00       	push   0xffff
c00092e2:	6a 01                	push   0x1
c00092e4:	e8 ab ff ff ff       	call   c0009294 <__static_initialization_and_destruction_0(int, int)>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	83 c4 0c             	add    esp,0xc
c00092ef:	c3                   	ret    

c00092f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00092f0:	53                   	push   ebx
c00092f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00092f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00092f9:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00092ff:	89 c8                	mov    eax,ecx
c0009301:	d1 e8                	shr    eax,1
c0009303:	03 05 e8 15 02 c0    	add    eax,DWORD PTR ds:0xc00215e8
c0009309:	83 e1 01             	and    ecx,0x1
c000930c:	8a 10                	mov    dl,BYTE PTR [eax]
c000930e:	75 09                	jne    c0009319 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009310:	83 e2 f0             	and    edx,0xfffffff0
c0009313:	09 da                	or     edx,ebx
c0009315:	88 10                	mov    BYTE PTR [eax],dl
c0009317:	5b                   	pop    ebx
c0009318:	c3                   	ret    
c0009319:	c1 e3 04             	shl    ebx,0x4
c000931c:	83 e2 0f             	and    edx,0xf
c000931f:	09 da                	or     edx,ebx
c0009321:	88 10                	mov    BYTE PTR [eax],dl
c0009323:	5b                   	pop    ebx
c0009324:	c3                   	ret    

c0009325 <Virt::getPageState(unsigned long)>:
c0009325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009329:	8b 0d e8 15 02 c0    	mov    ecx,DWORD PTR ds:0xc00215e8
c000932f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009335:	89 d0                	mov    eax,edx
c0009337:	d1 e8                	shr    eax,1
c0009339:	83 e2 01             	and    edx,0x1
c000933c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000933f:	75 04                	jne    c0009345 <Virt::getPageState(unsigned long)+0x20>
c0009341:	83 e0 0f             	and    eax,0xf
c0009344:	c3                   	ret    
c0009345:	c0 e8 04             	shr    al,0x4
c0009348:	c3                   	ret    

c0009349 <Virt::allocateKernelVirtualPages(int)>:
c0009349:	55                   	push   ebp
c000934a:	31 ed                	xor    ebp,ebp
c000934c:	57                   	push   edi
c000934d:	56                   	push   esi
c000934e:	53                   	push   ebx
c000934f:	31 db                	xor    ebx,ebx
c0009351:	83 ec 1c             	sub    esp,0x1c
c0009354:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009358:	8b 3d e4 15 02 c0    	mov    edi,DWORD PTR ds:0xc00215e4
c000935e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009363:	57                   	push   edi
c0009364:	e8 bc ff ff ff       	call   c0009325 <Virt::getPageState(unsigned long)>
c0009369:	5a                   	pop    edx
c000936a:	84 c0                	test   al,al
c000936c:	75 3a                	jne    c00093a8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000936e:	85 db                	test   ebx,ebx
c0009370:	75 02                	jne    c0009374 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0009372:	89 fd                	mov    ebp,edi
c0009374:	43                   	inc    ebx
c0009375:	39 f3                	cmp    ebx,esi
c0009377:	74 5a                	je     c00093d3 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0009379:	47                   	inc    edi
c000937a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009380:	76 31                	jbe    c00093b3 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0009382:	c7 05 e4 15 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00215e4,0xc8000
c000938c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0009391:	75 28                	jne    c00093bb <Virt::allocateKernelVirtualPages(int)+0x72>
c0009393:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009398:	bf 00 80 0c 00       	mov    edi,0xc8000
c000939d:	57                   	push   edi
c000939e:	e8 82 ff ff ff       	call   c0009325 <Virt::getPageState(unsigned long)>
c00093a3:	5a                   	pop    edx
c00093a4:	84 c0                	test   al,al
c00093a6:	74 c6                	je     c000936e <Virt::allocateKernelVirtualPages(int)+0x25>
c00093a8:	31 db                	xor    ebx,ebx
c00093aa:	47                   	inc    edi
c00093ab:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00093b1:	77 cf                	ja     c0009382 <Virt::allocateKernelVirtualPages(int)+0x39>
c00093b3:	89 3d e4 15 02 c0    	mov    DWORD PTR ds:0xc00215e4,edi
c00093b9:	eb a8                	jmp    c0009363 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093bb:	83 ec 0c             	sub    esp,0xc
c00093be:	68 2c f5 01 c0       	push   0xc001f52c
c00093c3:	e8 ff 6f 00 00       	call   c00103c7 <KePanic(char const*)>
c00093c8:	8b 3d e4 15 02 c0    	mov    edi,DWORD PTR ds:0xc00215e4
c00093ce:	83 c4 10             	add    esp,0x10
c00093d1:	eb 90                	jmp    c0009363 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093d3:	89 2d e4 15 02 c0    	mov    DWORD PTR ds:0xc00215e4,ebp
c00093d9:	4b                   	dec    ebx
c00093da:	74 5f                	je     c000943b <Virt::allocateKernelVirtualPages(int)+0xf2>
c00093dc:	85 f6                	test   esi,esi
c00093de:	74 3d                	je     c000941d <Virt::allocateKernelVirtualPages(int)+0xd4>
c00093e0:	89 e8                	mov    eax,ebp
c00093e2:	31 db                	xor    ebx,ebx
c00093e4:	8d 7e ff             	lea    edi,[esi-0x1]
c00093e7:	eb 14                	jmp    c00093fd <Virt::allocateKernelVirtualPages(int)+0xb4>
c00093e9:	6a 01                	push   0x1
c00093eb:	43                   	inc    ebx
c00093ec:	50                   	push   eax
c00093ed:	e8 fe fe ff ff       	call   c00092f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093f2:	58                   	pop    eax
c00093f3:	39 f3                	cmp    ebx,esi
c00093f5:	5a                   	pop    edx
c00093f6:	74 25                	je     c000941d <Virt::allocateKernelVirtualPages(int)+0xd4>
c00093f8:	a1 e4 15 02 c0       	mov    eax,ds:0xc00215e4
c00093fd:	8d 50 01             	lea    edx,[eax+0x1]
c0009400:	85 db                	test   ebx,ebx
c0009402:	89 15 e4 15 02 c0    	mov    DWORD PTR ds:0xc00215e4,edx
c0009408:	74 20                	je     c000942a <Virt::allocateKernelVirtualPages(int)+0xe1>
c000940a:	39 df                	cmp    edi,ebx
c000940c:	75 db                	jne    c00093e9 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000940e:	6a 03                	push   0x3
c0009410:	43                   	inc    ebx
c0009411:	50                   	push   eax
c0009412:	e8 d9 fe ff ff       	call   c00092f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009417:	59                   	pop    ecx
c0009418:	39 f3                	cmp    ebx,esi
c000941a:	58                   	pop    eax
c000941b:	75 db                	jne    c00093f8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000941d:	83 c4 1c             	add    esp,0x1c
c0009420:	89 e8                	mov    eax,ebp
c0009422:	5b                   	pop    ebx
c0009423:	c1 e0 0c             	shl    eax,0xc
c0009426:	5e                   	pop    esi
c0009427:	5f                   	pop    edi
c0009428:	5d                   	pop    ebp
c0009429:	c3                   	ret    
c000942a:	6a 02                	push   0x2
c000942c:	bb 01 00 00 00       	mov    ebx,0x1
c0009431:	50                   	push   eax
c0009432:	e8 b9 fe ff ff       	call   c00092f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009437:	58                   	pop    eax
c0009438:	5a                   	pop    edx
c0009439:	eb bd                	jmp    c00093f8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000943b:	6a 04                	push   0x4
c000943d:	8d 45 01             	lea    eax,[ebp+0x1]
c0009440:	55                   	push   ebp
c0009441:	a3 e4 15 02 c0       	mov    ds:0xc00215e4,eax
c0009446:	e8 a5 fe ff ff       	call   c00092f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000944b:	59                   	pop    ecx
c000944c:	89 e8                	mov    eax,ebp
c000944e:	5b                   	pop    ebx
c000944f:	c1 e0 0c             	shl    eax,0xc
c0009452:	83 c4 1c             	add    esp,0x1c
c0009455:	5b                   	pop    ebx
c0009456:	5e                   	pop    esi
c0009457:	5f                   	pop    edi
c0009458:	5d                   	pop    ebp
c0009459:	c3                   	ret    

c000945a <Virt::freeSwapfilePage(unsigned long)>:
c000945a:	53                   	push   ebx
c000945b:	8b 15 ac 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fac
c0009461:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009465:	b8 01 00 00 00       	mov    eax,0x1
c000946a:	89 cb                	mov    ebx,ecx
c000946c:	d3 e0                	shl    eax,cl
c000946e:	c1 eb 05             	shr    ebx,0x5
c0009471:	f7 d0                	not    eax
c0009473:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0009476:	5b                   	pop    ebx
c0009477:	c3                   	ret    

c0009478 <Virt::swapIDToSector(unsigned long)>:
c0009478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000947c:	0f af 05 ec 15 02 c0 	imul   eax,DWORD PTR ds:0xc00215ec
c0009483:	03 05 f4 15 02 c0    	add    eax,DWORD PTR ds:0xc00215f4
c0009489:	c3                   	ret    

c000948a <Virt::allocateSwapfilePage()>:
c000948a:	55                   	push   ebp
c000948b:	31 d2                	xor    edx,edx
c000948d:	57                   	push   edi
c000948e:	56                   	push   esi
c000948f:	53                   	push   ebx
c0009490:	83 ec 0c             	sub    esp,0xc
c0009493:	8b 0d ec 15 02 c0    	mov    ecx,DWORD PTR ds:0xc00215ec
c0009499:	a1 f0 15 02 c0       	mov    eax,ds:0xc00215f0
c000949e:	f7 f1                	div    ecx
c00094a0:	39 0d f0 15 02 c0    	cmp    DWORD PTR ds:0xc00215f0,ecx
c00094a6:	72 2d                	jb     c00094d5 <Virt::allocateSwapfilePage()+0x4b>
c00094a8:	8b 35 ac 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023fac
c00094ae:	8b 16                	mov    edx,DWORD PTR [esi]
c00094b0:	f6 c2 01             	test   dl,0x1
c00094b3:	74 3c                	je     c00094f1 <Virt::allocateSwapfilePage()+0x67>
c00094b5:	31 c9                	xor    ecx,ecx
c00094b7:	bf 01 00 00 00       	mov    edi,0x1
c00094bc:	eb 12                	jmp    c00094d0 <Virt::allocateSwapfilePage()+0x46>
c00094be:	89 fd                	mov    ebp,edi
c00094c0:	89 ca                	mov    edx,ecx
c00094c2:	d3 e5                	shl    ebp,cl
c00094c4:	c1 ea 05             	shr    edx,0x5
c00094c7:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00094ca:	8b 13                	mov    edx,DWORD PTR [ebx]
c00094cc:	85 ea                	test   edx,ebp
c00094ce:	74 2a                	je     c00094fa <Virt::allocateSwapfilePage()+0x70>
c00094d0:	41                   	inc    ecx
c00094d1:	39 c8                	cmp    eax,ecx
c00094d3:	77 e9                	ja     c00094be <Virt::allocateSwapfilePage()+0x34>
c00094d5:	83 ec 0c             	sub    esp,0xc
c00094d8:	68 93 f6 01 c0       	push   0xc001f693
c00094dd:	e8 e5 6e 00 00       	call   c00103c7 <KePanic(char const*)>
c00094e2:	83 c4 10             	add    esp,0x10
c00094e5:	31 c9                	xor    ecx,ecx
c00094e7:	83 c4 0c             	add    esp,0xc
c00094ea:	89 c8                	mov    eax,ecx
c00094ec:	5b                   	pop    ebx
c00094ed:	5e                   	pop    esi
c00094ee:	5f                   	pop    edi
c00094ef:	5d                   	pop    ebp
c00094f0:	c3                   	ret    
c00094f1:	89 f3                	mov    ebx,esi
c00094f3:	bd 01 00 00 00       	mov    ebp,0x1
c00094f8:	31 c9                	xor    ecx,ecx
c00094fa:	09 ea                	or     edx,ebp
c00094fc:	89 c8                	mov    eax,ecx
c00094fe:	89 13                	mov    DWORD PTR [ebx],edx
c0009500:	83 c4 0c             	add    esp,0xc
c0009503:	5b                   	pop    ebx
c0009504:	5e                   	pop    esi
c0009505:	5f                   	pop    edi
c0009506:	5d                   	pop    ebp
c0009507:	c3                   	ret    

c0009508 <Virt::virtualMemorySetup()>:
c0009508:	53                   	push   ebx
c0009509:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000950e:	6a 0f                	push   0xf
c0009510:	53                   	push   ebx
c0009511:	43                   	inc    ebx
c0009512:	e8 d9 fd ff ff       	call   c00092f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009517:	58                   	pop    eax
c0009518:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000951e:	5a                   	pop    edx
c000951f:	75 ed                	jne    c000950e <Virt::virtualMemorySetup()+0x6>
c0009521:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009526:	6a 00                	push   0x0
c0009528:	53                   	push   ebx
c0009529:	43                   	inc    ebx
c000952a:	e8 c1 fd ff ff       	call   c00092f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000952f:	59                   	pop    ecx
c0009530:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009536:	58                   	pop    eax
c0009537:	75 ed                	jne    c0009526 <Virt::virtualMemorySetup()+0x1e>
c0009539:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000953e:	6a 0f                	push   0xf
c0009540:	53                   	push   ebx
c0009541:	43                   	inc    ebx
c0009542:	e8 a9 fd ff ff       	call   c00092f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009547:	58                   	pop    eax
c0009548:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000954e:	5a                   	pop    edx
c000954f:	75 ed                	jne    c000953e <Virt::virtualMemorySetup()+0x36>
c0009551:	5b                   	pop    ebx
c0009552:	c3                   	ret    

c0009553 <Virt::setupPageSwapping(int)>:
c0009553:	53                   	push   ebx
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000955b:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0009560:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009566:	8b 10                	mov    edx,DWORD PTR [eax]
c0009568:	53                   	push   ebx
c0009569:	c1 e3 0b             	shl    ebx,0xb
c000956c:	68 aa f6 01 c0       	push   0xc001f6aa
c0009571:	50                   	push   eax
c0009572:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009575:	89 1d f0 15 02 c0    	mov    DWORD PTR ds:0xc00215f0,ebx
c000957b:	c6 05 f8 15 02 c0 43 	mov    BYTE PTR ds:0xc00215f8,0x43
c0009582:	c1 eb 08             	shr    ebx,0x8
c0009585:	a3 f4 15 02 c0       	mov    ds:0xc00215f4,eax
c000958a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000958d:	c7 05 ec 15 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00215ec,0x8
c0009597:	e8 c9 e2 ff ff       	call   c0007865 <malloc>
c000959c:	83 c4 0c             	add    esp,0xc
c000959f:	89 c1                	mov    ecx,eax
c00095a1:	a3 ac 3f 02 c0       	mov    ds:0xc0023fac,eax
c00095a6:	31 d2                	xor    edx,edx
c00095a8:	a1 f0 15 02 c0       	mov    eax,ds:0xc00215f0
c00095ad:	f7 35 ec 15 02 c0    	div    DWORD PTR ds:0xc00215ec
c00095b3:	c1 e8 05             	shr    eax,0x5
c00095b6:	50                   	push   eax
c00095b7:	6a 00                	push   0x0
c00095b9:	51                   	push   ecx
c00095ba:	e8 01 6f ff ff       	call   c00004c0 <memset>
c00095bf:	83 c4 18             	add    esp,0x18
c00095c2:	5b                   	pop    ebx
c00095c3:	c3                   	ret    

c00095c4 <VAS::VAS(VAS*)>:
c00095c4:	83 ec 0c             	sub    esp,0xc
c00095c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00095d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095d6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00095dd:	83 ec 0c             	sub    esp,0xc
c00095e0:	68 4c f5 01 c0       	push   0xc001f54c
c00095e5:	e8 dd 6d 00 00       	call   c00103c7 <KePanic(char const*)>
c00095ea:	83 c4 10             	add    esp,0x10
c00095ed:	90                   	nop
c00095ee:	83 c4 0c             	add    esp,0xc
c00095f1:	c3                   	ret    

c00095f2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00095f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095f6:	89 c2                	mov    edx,eax
c00095f8:	c1 e8 0a             	shr    eax,0xa
c00095fb:	c1 ea 16             	shr    edx,0x16
c00095fe:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009603:	19 c9                	sbb    ecx,ecx
c0009605:	c1 e2 0c             	shl    edx,0xc
c0009608:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000960e:	25 fc 0f 00 00       	and    eax,0xffc
c0009613:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000961a:	01 d0                	add    eax,edx
c000961c:	c3                   	ret    
c000961d:	90                   	nop

c000961e <VAS::getPageTableEntry(unsigned long)>:
c000961e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009622:	89 ca                	mov    edx,ecx
c0009624:	c1 e9 0a             	shr    ecx,0xa
c0009627:	c1 ea 16             	shr    edx,0x16
c000962a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009630:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009636:	c1 e0 0c             	shl    eax,0xc
c0009639:	8d 04 08             	lea    eax,[eax+ecx*1]
c000963c:	c3                   	ret    

c000963d <Virt::freeKernelVirtualPages(unsigned long)>:
c000963d:	57                   	push   edi
c000963e:	56                   	push   esi
c000963f:	be 01 00 00 00       	mov    esi,0x1
c0009644:	53                   	push   ebx
c0009645:	83 ec 10             	sub    esp,0x10
c0009648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000964c:	c1 eb 0c             	shr    ebx,0xc
c000964f:	eb 3f                	jmp    c0009690 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009651:	83 ec 08             	sub    esp,0x8
c0009654:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c0009659:	57                   	push   edi
c000965a:	50                   	push   eax
c000965b:	e8 be ff ff ff       	call   c000961e <VAS::getPageTableEntry(unsigned long)>
c0009660:	83 c4 10             	add    esp,0x10
c0009663:	8b 00                	mov    eax,DWORD PTR [eax]
c0009665:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009669:	f6 c4 04             	test   ah,0x4
c000966c:	75 60                	jne    c00096ce <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c000966e:	80 fa 04             	cmp    dl,0x4
c0009671:	74 79                	je     c00096ec <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009673:	80 fa 02             	cmp    dl,0x2
c0009676:	0f 84 89 00 00 00    	je     c0009705 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c000967c:	80 fa 03             	cmp    dl,0x3
c000967f:	0f 84 ae 00 00 00    	je     c0009733 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009685:	fe ca                	dec    dl
c0009687:	0f 84 93 00 00 00    	je     c0009720 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c000968d:	43                   	inc    ebx
c000968e:	31 f6                	xor    esi,esi
c0009690:	53                   	push   ebx
c0009691:	89 df                	mov    edi,ebx
c0009693:	e8 8d fc ff ff       	call   c0009325 <Virt::getPageState(unsigned long)>
c0009698:	c1 e7 0c             	shl    edi,0xc
c000969b:	5a                   	pop    edx
c000969c:	84 c0                	test   al,al
c000969e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00096a2:	75 ad                	jne    c0009651 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00096a4:	83 ec 0c             	sub    esp,0xc
c00096a7:	68 c1 f6 01 c0       	push   0xc001f6c1
c00096ac:	e8 16 6d 00 00       	call   c00103c7 <KePanic(char const*)>
c00096b1:	5a                   	pop    edx
c00096b2:	59                   	pop    ecx
c00096b3:	57                   	push   edi
c00096b4:	8b 3d b0 3f 02 c0    	mov    edi,DWORD PTR ds:0xc0023fb0
c00096ba:	57                   	push   edi
c00096bb:	e8 5e ff ff ff       	call   c000961e <VAS::getPageTableEntry(unsigned long)>
c00096c0:	83 c4 10             	add    esp,0x10
c00096c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00096c5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00096c9:	f6 c4 04             	test   ah,0x4
c00096cc:	74 bf                	je     c000968d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096ce:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00096d2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096d7:	83 ec 0c             	sub    esp,0xc
c00096da:	50                   	push   eax
c00096db:	e8 ff e3 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00096e7:	80 fa 04             	cmp    dl,0x4
c00096ea:	75 87                	jne    c0009673 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00096ec:	89 f0                	mov    eax,esi
c00096ee:	84 c0                	test   al,al
c00096f0:	75 47                	jne    c0009739 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c00096f2:	c7 44 24 20 70 f5 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f570
c00096fa:	83 c4 10             	add    esp,0x10
c00096fd:	5b                   	pop    ebx
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	e9 c2 6c 00 00       	jmp    c00103c7 <KePanic(char const*)>
c0009705:	89 f0                	mov    eax,esi
c0009707:	84 c0                	test   al,al
c0009709:	75 15                	jne    c0009720 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c000970b:	83 ec 0c             	sub    esp,0xc
c000970e:	68 dd f6 01 c0       	push   0xc001f6dd
c0009713:	e8 af 6c 00 00       	call   c00103c7 <KePanic(char const*)>
c0009718:	83 c4 10             	add    esp,0x10
c000971b:	e9 6d ff ff ff       	jmp    c000968d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009720:	83 ec 08             	sub    esp,0x8
c0009723:	6a 00                	push   0x0
c0009725:	53                   	push   ebx
c0009726:	e8 c5 fb ff ff       	call   c00092f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000972b:	83 c4 10             	add    esp,0x10
c000972e:	e9 5a ff ff ff       	jmp    c000968d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009733:	89 f0                	mov    eax,esi
c0009735:	84 c0                	test   al,al
c0009737:	75 15                	jne    c000974e <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009739:	83 ec 08             	sub    esp,0x8
c000973c:	6a 00                	push   0x0
c000973e:	53                   	push   ebx
c000973f:	e8 ac fb ff ff       	call   c00092f0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009744:	83 c4 10             	add    esp,0x10
c0009747:	83 c4 10             	add    esp,0x10
c000974a:	5b                   	pop    ebx
c000974b:	5e                   	pop    esi
c000974c:	5f                   	pop    edi
c000974d:	c3                   	ret    
c000974e:	c7 44 24 20 f9 f6 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f6f9
c0009756:	83 c4 10             	add    esp,0x10
c0009759:	5b                   	pop    ebx
c000975a:	5e                   	pop    esi
c000975b:	5f                   	pop    edi
c000975c:	e9 66 6c 00 00       	jmp    c00103c7 <KePanic(char const*)>
c0009761:	90                   	nop

c0009762 <VAS::freeAllocatedPages(unsigned long)>:
c0009762:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009766:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000976a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000976e:	74 09                	je     c0009779 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009770:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009774:	e9 c4 fe ff ff       	jmp    c000963d <Virt::freeKernelVirtualPages(unsigned long)>
c0009779:	c7 44 24 04 94 f5 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f594
c0009781:	e9 80 0e 00 00       	jmp    c000a606 <Dbg::kprintf(char const*, ...)>

c0009786 <VAS::virtualToPhysical(unsigned long)>:
c0009786:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000978a:	50                   	push   eax
c000978b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000978f:	52                   	push   edx
c0009790:	e8 89 fe ff ff       	call   c000961e <VAS::getPageTableEntry(unsigned long)>
c0009795:	59                   	pop    ecx
c0009796:	8b 00                	mov    eax,DWORD PTR [eax]
c0009798:	5a                   	pop    edx
c0009799:	25 00 f0 ff ff       	and    eax,0xfffff000
c000979e:	c3                   	ret    
c000979f:	90                   	nop

c00097a0 <VAS::reflagRange(unsigned long, int, int, int)>:
c00097a0:	55                   	push   ebp
c00097a1:	57                   	push   edi
c00097a2:	56                   	push   esi
c00097a3:	53                   	push   ebx
c00097a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00097a8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00097ac:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00097b0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00097b4:	85 db                	test   ebx,ebx
c00097b6:	7e 22                	jle    c00097da <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00097b8:	c1 e3 0c             	shl    ebx,0xc
c00097bb:	01 f3                	add    ebx,esi
c00097bd:	56                   	push   esi
c00097be:	81 c6 00 10 00 00    	add    esi,0x1000
c00097c4:	55                   	push   ebp
c00097c5:	e8 54 fe ff ff       	call   c000961e <VAS::getPageTableEntry(unsigned long)>
c00097ca:	5a                   	pop    edx
c00097cb:	59                   	pop    ecx
c00097cc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00097ce:	21 f9                	and    ecx,edi
c00097d0:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00097d4:	39 f3                	cmp    ebx,esi
c00097d6:	89 08                	mov    DWORD PTR [eax],ecx
c00097d8:	75 e3                	jne    c00097bd <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00097da:	5b                   	pop    ebx
c00097db:	5e                   	pop    esi
c00097dc:	5f                   	pop    edi
c00097dd:	5d                   	pop    ebp
c00097de:	c3                   	ret    
c00097df:	90                   	nop

c00097e0 <VAS::VAS()>:
c00097e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00097eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00097f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097fa:	a3 b0 3f 02 c0       	mov    ds:0xc0023fb0,eax
c00097ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009803:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009807:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000980b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000980e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009812:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009819:	ba 7d 20 02 c0       	mov    edx,0xc002207d
c000981e:	b8 00 20 02 c0       	mov    eax,0xc0022000
c0009823:	29 c2                	sub    edx,eax
c0009825:	89 d0                	mov    eax,edx
c0009827:	05 ff 0f 00 00       	add    eax,0xfff
c000982c:	c1 e8 0c             	shr    eax,0xc
c000982f:	89 c2                	mov    edx,eax
c0009831:	b8 00 20 02 c0       	mov    eax,0xc0022000
c0009836:	6a 04                	push   0x4
c0009838:	6a ff                	push   0xffffffff
c000983a:	52                   	push   edx
c000983b:	50                   	push   eax
c000983c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009840:	e8 5b ff ff ff       	call   c00097a0 <VAS::reflagRange(unsigned long, int, int, int)>
c0009845:	83 c4 14             	add    esp,0x14
c0009848:	90                   	nop
c0009849:	c3                   	ret    

c000984a <VAS::setToWriteCombining(unsigned long, int)>:
c000984a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000984f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009855:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000985c:	75 01                	jne    c000985f <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000985e:	c3                   	ret    
c000985f:	68 80 00 00 00       	push   0x80
c0009864:	6a ff                	push   0xffffffff
c0009866:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000986a:	50                   	push   eax
c000986b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000986f:	52                   	push   edx
c0009870:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009874:	51                   	push   ecx
c0009875:	e8 26 ff ff ff       	call   c00097a0 <VAS::reflagRange(unsigned long, int, int, int)>
c000987a:	83 c4 14             	add    esp,0x14
c000987d:	c3                   	ret    

c000987e <VAS::mapOtherVASIn(bool, VAS*)>:
c000987e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009883:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009887:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000988a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000988e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009891:	19 c0                	sbb    eax,eax
c0009893:	83 ca 03             	or     edx,0x3
c0009896:	83 e0 fc             	and    eax,0xfffffffc
c0009899:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00098a0:	0f 20 d8             	mov    eax,cr3
c00098a3:	0f 22 d8             	mov    cr3,eax
c00098a6:	c3                   	ret    
c00098a7:	90                   	nop

c00098a8 <VAS::~VAS()>:
c00098a8:	83 ec 2c             	sub    esp,0x2c
c00098ab:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00098b3:	fa                   	cli    
c00098b4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00098b9:	40                   	inc    eax
c00098ba:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00098bf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00098c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00098c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00098c9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00098cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00098d3:	6a 01                	push   0x1
c00098d5:	50                   	push   eax
c00098d6:	e8 a3 ff ff ff       	call   c000987e <VAS::mapOtherVASIn(bool, VAS*)>
c00098db:	83 c4 0c             	add    esp,0xc
c00098de:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00098e6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00098ee:	0f 8f d4 00 00 00    	jg     c00099c8 <VAS::~VAS()+0x120>
c00098f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098f8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098ff:	c1 e2 02             	shl    edx,0x2
c0009902:	01 d0                	add    eax,edx
c0009904:	8b 00                	mov    eax,DWORD PTR [eax]
c0009906:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000990a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000990e:	83 e0 01             	and    eax,0x1
c0009911:	0f 84 a8 00 00 00    	je     c00099bf <VAS::~VAS()+0x117>
c0009917:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000991f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009927:	7f 72                	jg     c000999b <VAS::~VAS()+0xf3>
c0009929:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000992d:	c1 e0 0a             	shl    eax,0xa
c0009930:	89 c2                	mov    edx,eax
c0009932:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009936:	01 d0                	add    eax,edx
c0009938:	c1 e0 0c             	shl    eax,0xc
c000993b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000993f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009944:	8b 00                	mov    eax,DWORD PTR [eax]
c0009946:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009949:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000994f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009953:	6a 01                	push   0x1
c0009955:	50                   	push   eax
c0009956:	e8 97 fc ff ff       	call   c00095f2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000995b:	83 c4 0c             	add    esp,0xc
c000995e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009962:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009966:	8b 00                	mov    eax,DWORD PTR [eax]
c0009968:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000996c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009970:	25 01 04 00 00       	and    eax,0x401
c0009975:	3d 01 04 00 00       	cmp    eax,0x401
c000997a:	75 19                	jne    c0009995 <VAS::~VAS()+0xed>
c000997c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009980:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009985:	83 ec 0c             	sub    esp,0xc
c0009988:	50                   	push   eax
c0009989:	e8 51 e1 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c000998e:	83 c4 10             	add    esp,0x10
c0009991:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009995:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009999:	eb 84                	jmp    c000991f <VAS::~VAS()+0x77>
c000999b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000999f:	25 00 04 00 00       	and    eax,0x400
c00099a4:	74 19                	je     c00099bf <VAS::~VAS()+0x117>
c00099a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099aa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099af:	83 ec 0c             	sub    esp,0xc
c00099b2:	50                   	push   eax
c00099b3:	e8 27 e1 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c00099b8:	83 c4 10             	add    esp,0x10
c00099bb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099bf:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00099c3:	e9 1e ff ff ff       	jmp    c00098e6 <VAS::~VAS()+0x3e>
c00099c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00099cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099cf:	83 ec 0c             	sub    esp,0xc
c00099d2:	50                   	push   eax
c00099d3:	e8 65 fc ff ff       	call   c000963d <Virt::freeKernelVirtualPages(unsigned long)>
c00099d8:	83 c4 10             	add    esp,0x10
c00099db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00099df:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00099e2:	83 ec 0c             	sub    esp,0xc
c00099e5:	50                   	push   eax
c00099e6:	e8 f4 e0 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c00099eb:	83 c4 10             	add    esp,0x10
c00099ee:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099f2:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00099f7:	48                   	dec    eax
c00099f8:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00099fd:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0009a02:	85 c0                	test   eax,eax
c0009a04:	75 01                	jne    c0009a07 <VAS::~VAS()+0x15f>
c0009a06:	fb                   	sti    
c0009a07:	90                   	nop
c0009a08:	83 c4 2c             	add    esp,0x2c
c0009a0b:	c3                   	ret    

c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009a0c:	55                   	push   ebp
c0009a0d:	57                   	push   edi
c0009a0e:	56                   	push   esi
c0009a0f:	53                   	push   ebx
c0009a10:	83 ec 1c             	sub    esp,0x1c
c0009a13:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009a17:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a1b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009a21:	77 0b                	ja     c0009a2e <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009a23:	0f 20 d8             	mov    eax,cr3
c0009a26:	0f 20 d8             	mov    eax,cr3
c0009a29:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009a2c:	75 47                	jne    c0009a75 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009a2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a32:	09 d8                	or     eax,ebx
c0009a34:	a9 ff 0f 00 00       	test   eax,0xfff
c0009a39:	75 57                	jne    c0009a92 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009a3b:	89 de                	mov    esi,ebx
c0009a3d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a40:	c1 ee 16             	shr    esi,0x16
c0009a43:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009a4a:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009a4e:	74 54                	je     c0009aa4 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009a50:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009a54:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009a5a:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0009a5e:	c1 e6 0c             	shl    esi,0xc
c0009a61:	c1 eb 0a             	shr    ebx,0xa
c0009a64:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009a6a:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009a6d:	83 c4 1c             	add    esp,0x1c
c0009a70:	5b                   	pop    ebx
c0009a71:	5e                   	pop    esi
c0009a72:	5f                   	pop    edi
c0009a73:	5d                   	pop    ebp
c0009a74:	c3                   	ret    
c0009a75:	83 ec 0c             	sub    esp,0xc
c0009a78:	68 b8 f5 01 c0       	push   0xc001f5b8
c0009a7d:	e8 84 0b 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0009a82:	83 c4 10             	add    esp,0x10
c0009a85:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a89:	09 d8                	or     eax,ebx
c0009a8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009a90:	74 a9                	je     c0009a3b <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009a92:	83 ec 0c             	sub    esp,0xc
c0009a95:	68 20 f6 01 c0       	push   0xc001f620
c0009a9a:	e8 28 69 00 00       	call   c00103c7 <KePanic(char const*)>
c0009a9f:	83 c4 10             	add    esp,0x10
c0009aa2:	eb 97                	jmp    c0009a3b <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009aa4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009aa8:	e8 94 e0 ff ff       	call   c0007b41 <Phys::allocatePage()>
c0009aad:	83 ec 0c             	sub    esp,0xc
c0009ab0:	89 c5                	mov    ebp,eax
c0009ab2:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c0009ab8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009abc:	6a 01                	push   0x1
c0009abe:	e8 86 f8 ff ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c0009ac3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009aca:	6a 01                	push   0x1
c0009acc:	50                   	push   eax
c0009acd:	55                   	push   ebp
c0009ace:	81 cd 07 04 00 00    	or     ebp,0x407
c0009ad4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009ad8:	51                   	push   ecx
c0009ad9:	e8 28 02 00 00       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009ade:	83 c4 1c             	add    esp,0x1c
c0009ae1:	68 00 10 00 00       	push   0x1000
c0009ae6:	6a 00                	push   0x0
c0009ae8:	50                   	push   eax
c0009ae9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009aed:	e8 ce 69 ff ff       	call   c00004c0 <memset>
c0009af2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009af6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009af9:	e8 3f fb ff ff       	call   c000963d <Virt::freeKernelVirtualPages(unsigned long)>
c0009afe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b02:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009b05:	83 c4 10             	add    esp,0x10
c0009b08:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009b0b:	e9 40 ff ff ff       	jmp    c0009a50 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009b10 <VAS::allocatePages(int, int)>:
c0009b10:	55                   	push   ebp
c0009b11:	57                   	push   edi
c0009b12:	56                   	push   esi
c0009b13:	53                   	push   ebx
c0009b14:	83 ec 1c             	sub    esp,0x1c
c0009b17:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009b1b:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009b20:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b26:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009b2c:	83 e0 01             	and    eax,0x1
c0009b2f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009b33:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009b37:	0f 85 cc 00 00 00    	jne    c0009c09 <VAS::allocatePages(int, int)+0xf9>
c0009b3d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b44:	85 c0                	test   eax,eax
c0009b46:	0f 84 a1 00 00 00    	je     c0009bed <VAS::allocatePages(int, int)+0xdd>
c0009b4c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009b50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b54:	c1 e6 0c             	shl    esi,0xc
c0009b57:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009b5b:	85 c0                	test   eax,eax
c0009b5d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009b60:	7e 33                	jle    c0009b95 <VAS::allocatePages(int, int)+0x85>
c0009b62:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009b66:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b6a:	81 cd 00 04 00 00    	or     ebp,0x400
c0009b70:	e8 cc df ff ff       	call   c0007b41 <Phys::allocatePage()>
c0009b75:	55                   	push   ebp
c0009b76:	53                   	push   ebx
c0009b77:	50                   	push   eax
c0009b78:	57                   	push   edi
c0009b79:	e8 8e fe ff ff       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b7e:	83 c4 10             	add    esp,0x10
c0009b81:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b86:	74 03                	je     c0009b8b <VAS::allocatePages(int, int)+0x7b>
c0009b88:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b8b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b91:	39 de                	cmp    esi,ebx
c0009b93:	75 db                	jne    c0009b70 <VAS::allocatePages(int, int)+0x60>
c0009b95:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b9a:	75 12                	jne    c0009bae <VAS::allocatePages(int, int)+0x9e>
c0009b9c:	0f 20 d8             	mov    eax,cr3
c0009b9f:	0f 22 d8             	mov    cr3,eax
c0009ba2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ba6:	83 c4 1c             	add    esp,0x1c
c0009ba9:	5b                   	pop    ebx
c0009baa:	5e                   	pop    esi
c0009bab:	5f                   	pop    edi
c0009bac:	5d                   	pop    ebp
c0009bad:	c3                   	ret    
c0009bae:	c1 ee 0a             	shr    esi,0xa
c0009bb1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009bb5:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009bbb:	c1 eb 0a             	shr    ebx,0xa
c0009bbe:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009bc4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009bca:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009bd0:	39 c3                	cmp    ebx,eax
c0009bd2:	77 ce                	ja     c0009ba2 <VAS::allocatePages(int, int)+0x92>
c0009bd4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bd7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bdd:	39 d8                	cmp    eax,ebx
c0009bdf:	73 f3                	jae    c0009bd4 <VAS::allocatePages(int, int)+0xc4>
c0009be1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009be5:	83 c4 1c             	add    esp,0x1c
c0009be8:	5b                   	pop    ebx
c0009be9:	5e                   	pop    esi
c0009bea:	5f                   	pop    edi
c0009beb:	5d                   	pop    ebp
c0009bec:	c3                   	ret    
c0009bed:	83 ec 0c             	sub    esp,0xc
c0009bf0:	68 44 f6 01 c0       	push   0xc001f644
c0009bf5:	e8 cd 67 00 00       	call   c00103c7 <KePanic(char const*)>
c0009bfa:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009bfd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c01:	83 c4 10             	add    esp,0x10
c0009c04:	e9 43 ff ff ff       	jmp    c0009b4c <VAS::allocatePages(int, int)+0x3c>
c0009c09:	83 ec 0c             	sub    esp,0xc
c0009c0c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009c10:	51                   	push   ecx
c0009c11:	e8 33 f7 ff ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c0009c16:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c1a:	83 c4 10             	add    esp,0x10
c0009c1d:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009c22:	0f 87 9b 00 00 00    	ja     c0009cc3 <VAS::allocatePages(int, int)+0x1b3>
c0009c28:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009c2c:	85 d2                	test   edx,edx
c0009c2e:	7e 3c                	jle    c0009c6c <VAS::allocatePages(int, int)+0x15c>
c0009c30:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c34:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009c38:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009c3c:	c1 e5 0c             	shl    ebp,0xc
c0009c3f:	81 ce 00 04 00 00    	or     esi,0x400
c0009c45:	01 dd                	add    ebp,ebx
c0009c47:	e8 f5 de ff ff       	call   c0007b41 <Phys::allocatePage()>
c0009c4c:	56                   	push   esi
c0009c4d:	53                   	push   ebx
c0009c4e:	50                   	push   eax
c0009c4f:	57                   	push   edi
c0009c50:	e8 b7 fd ff ff       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c55:	83 c4 10             	add    esp,0x10
c0009c58:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c5d:	74 03                	je     c0009c62 <VAS::allocatePages(int, int)+0x152>
c0009c5f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c62:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c68:	39 dd                	cmp    ebp,ebx
c0009c6a:	75 db                	jne    c0009c47 <VAS::allocatePages(int, int)+0x137>
c0009c6c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c71:	0f 84 25 ff ff ff    	je     c0009b9c <VAS::allocatePages(int, int)+0x8c>
c0009c77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c7b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c7f:	89 d3                	mov    ebx,edx
c0009c81:	c1 e0 0c             	shl    eax,0xc
c0009c84:	c1 eb 0a             	shr    ebx,0xa
c0009c87:	01 d0                	add    eax,edx
c0009c89:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c8f:	c1 e8 0a             	shr    eax,0xa
c0009c92:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009c98:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9d:	2d 00 00 40 00       	sub    eax,0x400000
c0009ca2:	39 c3                	cmp    ebx,eax
c0009ca4:	0f 87 f8 fe ff ff    	ja     c0009ba2 <VAS::allocatePages(int, int)+0x92>
c0009caa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cad:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009cb3:	39 d8                	cmp    eax,ebx
c0009cb5:	73 f3                	jae    c0009caa <VAS::allocatePages(int, int)+0x19a>
c0009cb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009cbb:	83 c4 1c             	add    esp,0x1c
c0009cbe:	5b                   	pop    ebx
c0009cbf:	5e                   	pop    esi
c0009cc0:	5f                   	pop    edi
c0009cc1:	5d                   	pop    ebp
c0009cc2:	c3                   	ret    
c0009cc3:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009cc8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009cce:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009cd5:	0f 84 4d ff ff ff    	je     c0009c28 <VAS::allocatePages(int, int)+0x118>
c0009cdb:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009ce3:	e9 40 ff ff ff       	jmp    c0009c28 <VAS::allocatePages(int, int)+0x118>

c0009ce8 <VAS::setCPUSpecific(unsigned long)>:
c0009ce8:	83 ec 0c             	sub    esp,0xc
c0009ceb:	6a 05                	push   0x5
c0009ced:	68 00 00 40 c2       	push   0xc2400000
c0009cf2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009cf6:	50                   	push   eax
c0009cf7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009cfb:	52                   	push   edx
c0009cfc:	e8 0b fd ff ff       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d01:	83 c4 1c             	add    esp,0x1c
c0009d04:	c3                   	ret    
c0009d05:	90                   	nop

c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009d06:	55                   	push   ebp
c0009d07:	57                   	push   edi
c0009d08:	56                   	push   esi
c0009d09:	53                   	push   ebx
c0009d0a:	83 ec 1c             	sub    esp,0x1c
c0009d0d:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009d12:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d16:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009d1c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009d20:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009d26:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009d2a:	83 e0 01             	and    eax,0x1
c0009d2d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009d31:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d35:	85 c0                	test   eax,eax
c0009d37:	7e 39                	jle    c0009d72 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009d39:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d3d:	89 f3                	mov    ebx,esi
c0009d3f:	c1 e0 0c             	shl    eax,0xc
c0009d42:	01 f0                	add    eax,esi
c0009d44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009d48:	55                   	push   ebp
c0009d49:	53                   	push   ebx
c0009d4a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d4e:	29 f0                	sub    eax,esi
c0009d50:	01 d8                	add    eax,ebx
c0009d52:	50                   	push   eax
c0009d53:	57                   	push   edi
c0009d54:	e8 b3 fc ff ff       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d59:	83 c4 10             	add    esp,0x10
c0009d5c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d61:	74 03                	je     c0009d66 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009d63:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009d66:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009d6c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009d70:	75 d6                	jne    c0009d48 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009d72:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d77:	75 10                	jne    c0009d89 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009d79:	0f 20 d8             	mov    eax,cr3
c0009d7c:	0f 22 d8             	mov    cr3,eax
c0009d7f:	83 c4 1c             	add    esp,0x1c
c0009d82:	89 f0                	mov    eax,esi
c0009d84:	5b                   	pop    ebx
c0009d85:	5e                   	pop    esi
c0009d86:	5f                   	pop    edi
c0009d87:	5d                   	pop    ebp
c0009d88:	c3                   	ret    
c0009d89:	89 f3                	mov    ebx,esi
c0009d8b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d8f:	c1 eb 0a             	shr    ebx,0xa
c0009d92:	c1 e0 0c             	shl    eax,0xc
c0009d95:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009d9b:	01 f0                	add    eax,esi
c0009d9d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009da3:	c1 e8 0a             	shr    eax,0xa
c0009da6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009dab:	2d 00 00 40 00       	sub    eax,0x400000
c0009db0:	39 c3                	cmp    ebx,eax
c0009db2:	77 cb                	ja     c0009d7f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009db4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009db7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009dbd:	39 d8                	cmp    eax,ebx
c0009dbf:	73 f3                	jae    c0009db4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009dc1:	83 c4 1c             	add    esp,0x1c
c0009dc4:	89 f0                	mov    eax,esi
c0009dc6:	5b                   	pop    ebx
c0009dc7:	5e                   	pop    esi
c0009dc8:	5f                   	pop    edi
c0009dc9:	5d                   	pop    ebp
c0009dca:	c3                   	ret    
c0009dcb:	90                   	nop

c0009dcc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009dcc:	55                   	push   ebp
c0009dcd:	57                   	push   edi
c0009dce:	56                   	push   esi
c0009dcf:	53                   	push   ebx
c0009dd0:	83 ec 1c             	sub    esp,0x1c
c0009dd3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009dd7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ddb:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009ddf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009de3:	a9 ff 0f 00 00       	test   eax,0xfff
c0009de8:	75 4a                	jne    c0009e34 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009dea:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009dee:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009df1:	c1 eb 16             	shr    ebx,0x16
c0009df4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009dfb:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009dff:	74 4d                	je     c0009e4e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009e01:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e05:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009e09:	c1 e8 0a             	shr    eax,0xa
c0009e0c:	80 fa 01             	cmp    dl,0x1
c0009e0f:	19 d2                	sbb    edx,edx
c0009e11:	c1 e3 0c             	shl    ebx,0xc
c0009e14:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009e18:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009e1e:	25 fc 0f 00 00       	and    eax,0xffc
c0009e23:	01 d8                	add    eax,ebx
c0009e25:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009e2c:	83 c4 1c             	add    esp,0x1c
c0009e2f:	5b                   	pop    ebx
c0009e30:	5e                   	pop    esi
c0009e31:	5f                   	pop    edi
c0009e32:	5d                   	pop    ebp
c0009e33:	c3                   	ret    
c0009e34:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009e38:	83 ec 0c             	sub    esp,0xc
c0009e3b:	68 70 f6 01 c0       	push   0xc001f670
c0009e40:	e8 82 65 00 00       	call   c00103c7 <KePanic(char const*)>
c0009e45:	83 c4 10             	add    esp,0x10
c0009e48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e4c:	eb 9c                	jmp    c0009dea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009e4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e52:	e8 ea dc ff ff       	call   c0007b41 <Phys::allocatePage()>
c0009e57:	83 ec 0c             	sub    esp,0xc
c0009e5a:	89 c5                	mov    ebp,eax
c0009e5c:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c0009e62:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009e66:	6a 01                	push   0x1
c0009e68:	e8 dc f4 ff ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c0009e6d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009e74:	6a 01                	push   0x1
c0009e76:	50                   	push   eax
c0009e77:	55                   	push   ebp
c0009e78:	81 cd 07 04 00 00    	or     ebp,0x407
c0009e7e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009e82:	51                   	push   ecx
c0009e83:	e8 7e fe ff ff       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e88:	83 c4 1c             	add    esp,0x1c
c0009e8b:	68 00 10 00 00       	push   0x1000
c0009e90:	6a 00                	push   0x0
c0009e92:	50                   	push   eax
c0009e93:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e97:	e8 24 66 ff ff       	call   c00004c0 <memset>
c0009e9c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009ea0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ea3:	e8 95 f7 ff ff       	call   c000963d <Virt::freeKernelVirtualPages(unsigned long)>
c0009ea8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009eab:	83 c4 10             	add    esp,0x10
c0009eae:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009eb1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009eb5:	e9 47 ff ff ff       	jmp    c0009e01 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009eba <VAS::VAS(bool)>:
c0009eba:	53                   	push   ebx
c0009ebb:	83 ec 28             	sub    esp,0x28
c0009ebe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ec2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009ec6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009eca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ed1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ed5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009edc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ee0:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009ee4:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009ee7:	e8 55 dc ff ff       	call   c0007b41 <Phys::allocatePage()>
c0009eec:	89 c2                	mov    edx,eax
c0009eee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ef2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009ef5:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c0009efb:	83 ec 0c             	sub    esp,0xc
c0009efe:	6a 01                	push   0x1
c0009f00:	e8 44 f4 ff ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c0009f05:	83 c4 10             	add    esp,0x10
c0009f08:	89 c2                	mov    edx,eax
c0009f0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f0e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009f11:	83 ec 0c             	sub    esp,0xc
c0009f14:	6a 03                	push   0x3
c0009f16:	6a 01                	push   0x1
c0009f18:	52                   	push   edx
c0009f19:	50                   	push   eax
c0009f1a:	53                   	push   ebx
c0009f1b:	e8 e6 fd ff ff       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009f20:	83 c4 20             	add    esp,0x20
c0009f23:	89 c2                	mov    edx,eax
c0009f25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f29:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009f2c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009f34:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009f3c:	7f 1c                	jg     c0009f5a <VAS::VAS(bool)+0xa0>
c0009f3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f42:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f45:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009f49:	c1 e2 02             	shl    edx,0x2
c0009f4c:	01 d0                	add    eax,edx
c0009f4e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f54:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009f58:	eb da                	jmp    c0009f34 <VAS::VAS(bool)+0x7a>
c0009f5a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009f62:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009f6a:	7f 7a                	jg     c0009fe6 <VAS::VAS(bool)+0x12c>
c0009f6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f70:	2d 00 02 00 00       	sub    eax,0x200
c0009f75:	c1 e0 0c             	shl    eax,0xc
c0009f78:	83 c8 05             	or     eax,0x5
c0009f7b:	89 c2                	mov    edx,eax
c0009f7d:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009f82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f88:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f8e:	83 e0 10             	and    eax,0x10
c0009f91:	84 c0                	test   al,al
c0009f93:	74 07                	je     c0009f9c <VAS::VAS(bool)+0xe2>
c0009f95:	b8 00 01 00 00       	mov    eax,0x100
c0009f9a:	eb 05                	jmp    c0009fa1 <VAS::VAS(bool)+0xe7>
c0009f9c:	b8 00 00 00 00       	mov    eax,0x0
c0009fa1:	09 d0                	or     eax,edx
c0009fa3:	89 c1                	mov    ecx,eax
c0009fa5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fa9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009fb0:	c1 e2 02             	shl    edx,0x2
c0009fb3:	01 d0                	add    eax,edx
c0009fb5:	89 ca                	mov    edx,ecx
c0009fb7:	89 10                	mov    DWORD PTR [eax],edx
c0009fb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009fbd:	2d 40 03 00 00       	sub    eax,0x340
c0009fc2:	83 f8 7f             	cmp    eax,0x7f
c0009fc5:	77 16                	ja     c0009fdd <VAS::VAS(bool)+0x123>
c0009fc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fcb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009fd2:	c1 e2 02             	shl    edx,0x2
c0009fd5:	01 d0                	add    eax,edx
c0009fd7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009fdd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009fe1:	e9 7c ff ff ff       	jmp    c0009f62 <VAS::VAS(bool)+0xa8>
c0009fe6:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009feb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ff1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009ff7:	83 e0 10             	and    eax,0x10
c0009ffa:	84 c0                	test   al,al
c0009ffc:	74 07                	je     c000a005 <VAS::VAS(bool)+0x14b>
c0009ffe:	b8 03 41 00 00       	mov    eax,0x4103
c000a003:	eb 05                	jmp    c000a00a <VAS::VAS(bool)+0x150>
c000a005:	b8 03 40 00 00       	mov    eax,0x4003
c000a00a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a00e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a011:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a017:	89 02                	mov    DWORD PTR [edx],eax
c000a019:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a01e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a024:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a02a:	83 ec 08             	sub    esp,0x8
c000a02d:	50                   	push   eax
c000a02e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a032:	e8 b1 fc ff ff       	call   c0009ce8 <VAS::setCPUSpecific(unsigned long)>
c000a037:	83 c4 10             	add    esp,0x10
c000a03a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a03e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a041:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a046:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a04c:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a052:	83 e0 10             	and    eax,0x10
c000a055:	84 c0                	test   al,al
c000a057:	74 07                	je     c000a060 <VAS::VAS(bool)+0x1a6>
c000a059:	b8 00 01 00 00       	mov    eax,0x100
c000a05e:	eb 05                	jmp    c000a065 <VAS::VAS(bool)+0x1ab>
c000a060:	b8 00 00 00 00       	mov    eax,0x0
c000a065:	09 c2                	or     edx,eax
c000a067:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a06e:	05 fc 0f 00 00       	add    eax,0xffc
c000a073:	83 ca 03             	or     edx,0x3
c000a076:	89 10                	mov    DWORD PTR [eax],edx
c000a078:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a07d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a083:	83 ec 0c             	sub    esp,0xc
c000a086:	50                   	push   eax
c000a087:	e8 4c 1c 00 00       	call   c000bcd8 <Device::getName()>
c000a08c:	83 c4 10             	add    esp,0x10
c000a08f:	83 ec 08             	sub    esp,0x8
c000a092:	68 13 f7 01 c0       	push   0xc001f713
c000a097:	50                   	push   eax
c000a098:	e8 33 66 ff ff       	call   c00006d0 <strcmp>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	85 c0                	test   eax,eax
c000a0a2:	0f 94 c0             	sete   al
c000a0a5:	84 c0                	test   al,al
c000a0a7:	0f 84 87 00 00 00    	je     c000a134 <VAS::VAS(bool)+0x27a>
c000a0ad:	fa                   	cli    
c000a0ae:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a0b3:	40                   	inc    eax
c000a0b4:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a0b9:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a0be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0c4:	05 7c 09 00 00       	add    eax,0x97c
c000a0c9:	83 ec 0c             	sub    esp,0xc
c000a0cc:	50                   	push   eax
c000a0cd:	e8 90 d2 ff ff       	call   c0007362 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a0d2:	83 c4 10             	add    esp,0x10
c000a0d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0da:	89 c3                	mov    ebx,eax
c000a0dc:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a0e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0e7:	05 7c 09 00 00       	add    eax,0x97c
c000a0ec:	83 ec 0c             	sub    esp,0xc
c000a0ef:	50                   	push   eax
c000a0f0:	e8 6d d2 ff ff       	call   c0007362 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a0f5:	83 c4 10             	add    esp,0x10
c000a0f8:	83 ec 08             	sub    esp,0x8
c000a0fb:	50                   	push   eax
c000a0fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a100:	e8 19 f5 ff ff       	call   c000961e <VAS::getPageTableEntry(unsigned long)>
c000a105:	83 c4 10             	add    esp,0x10
c000a108:	8b 00                	mov    eax,DWORD PTR [eax]
c000a10a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a10f:	6a 11                	push   0x11
c000a111:	53                   	push   ebx
c000a112:	50                   	push   eax
c000a113:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a117:	e8 f0 f8 ff ff       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c000a11c:	83 c4 10             	add    esp,0x10
c000a11f:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a124:	48                   	dec    eax
c000a125:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a12a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a12f:	85 c0                	test   eax,eax
c000a131:	75 01                	jne    c000a134 <VAS::VAS(bool)+0x27a>
c000a133:	fb                   	sti    
c000a134:	90                   	nop
c000a135:	83 c4 28             	add    esp,0x28
c000a138:	5b                   	pop    ebx
c000a139:	c3                   	ret    

c000a13a <VAS::evict(unsigned long)>:
c000a13a:	55                   	push   ebp
c000a13b:	57                   	push   edi
c000a13c:	56                   	push   esi
c000a13d:	53                   	push   ebx
c000a13e:	83 ec 1c             	sub    esp,0x1c
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a149:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a14d:	e8 38 f3 ff ff       	call   c000948a <Virt::allocateSwapfilePage()>
c000a152:	8b 0d ec 15 02 c0    	mov    ecx,DWORD PTR ds:0xc00215ec
c000a158:	89 c7                	mov    edi,eax
c000a15a:	85 c9                	test   ecx,ecx
c000a15c:	7e 3e                	jle    c000a19c <VAS::evict(unsigned long)+0x62>
c000a15e:	89 ee                	mov    esi,ebp
c000a160:	31 db                	xor    ebx,ebx
c000a162:	83 ec 0c             	sub    esp,0xc
c000a165:	57                   	push   edi
c000a166:	e8 0d f3 ff ff       	call   c0009478 <Virt::swapIDToSector(unsigned long)>
c000a16b:	89 34 24             	mov    DWORD PTR [esp],esi
c000a16e:	01 d8                	add    eax,ebx
c000a170:	6a 01                	push   0x1
c000a172:	31 d2                	xor    edx,edx
c000a174:	43                   	inc    ebx
c000a175:	52                   	push   edx
c000a176:	81 c6 00 02 00 00    	add    esi,0x200
c000a17c:	50                   	push   eax
c000a17d:	0f be 05 f8 15 02 c0 	movsx  eax,BYTE PTR ds:0xc00215f8
c000a184:	8b 14 85 1c 63 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9ce4]
c000a18b:	52                   	push   edx
c000a18c:	e8 31 2c 00 00       	call   c000cdc2 <LogicalDisk::write(unsigned long long, int, void*)>
c000a191:	83 c4 20             	add    esp,0x20
c000a194:	39 1d ec 15 02 c0    	cmp    DWORD PTR ds:0xc00215ec,ebx
c000a19a:	7f c6                	jg     c000a162 <VAS::evict(unsigned long)+0x28>
c000a19c:	83 ec 08             	sub    esp,0x8
c000a19f:	c1 e7 0b             	shl    edi,0xb
c000a1a2:	55                   	push   ebp
c000a1a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a1a7:	50                   	push   eax
c000a1a8:	e8 71 f4 ff ff       	call   c000961e <VAS::getPageTableEntry(unsigned long)>
c000a1ad:	8b 10                	mov    edx,DWORD PTR [eax]
c000a1af:	89 d1                	mov    ecx,edx
c000a1b1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a1b7:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a1bd:	09 cf                	or     edi,ecx
c000a1bf:	89 38                	mov    DWORD PTR [eax],edi
c000a1c1:	89 14 24             	mov    DWORD PTR [esp],edx
c000a1c4:	ff 05 a8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fa8
c000a1ca:	e8 10 d9 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c000a1cf:	0f 20 d8             	mov    eax,cr3
c000a1d2:	0f 22 d8             	mov    cr3,eax
c000a1d5:	a1 a4 3f 02 c0       	mov    eax,ds:0xc0023fa4
c000a1da:	c7 44 24 40 21 f7 01 c0 	mov    DWORD PTR [esp+0x40],0xc001f721
c000a1e2:	8d 50 01             	lea    edx,[eax+0x1]
c000a1e5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a1e9:	89 15 a4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa4,edx
c000a1ef:	83 c4 2c             	add    esp,0x2c
c000a1f2:	5b                   	pop    ebx
c000a1f3:	5e                   	pop    esi
c000a1f4:	5f                   	pop    edi
c000a1f5:	5d                   	pop    ebp
c000a1f6:	e9 0b 04 00 00       	jmp    c000a606 <Dbg::kprintf(char const*, ...)>
c000a1fb:	90                   	nop

c000a1fc <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a1fc:	55                   	push   ebp
c000a1fd:	57                   	push   edi
c000a1fe:	56                   	push   esi
c000a1ff:	53                   	push   ebx
c000a200:	83 ec 14             	sub    esp,0x14
c000a203:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a207:	53                   	push   ebx
c000a208:	68 32 f7 01 c0       	push   0xc001f732
c000a20d:	e8 f4 03 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000a212:	83 c4 10             	add    esp,0x10
c000a215:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a21b:	74 21                	je     c000a23e <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a21d:	83 ec 08             	sub    esp,0x8
c000a220:	53                   	push   ebx
c000a221:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a225:	57                   	push   edi
c000a226:	e8 f3 f3 ff ff       	call   c000961e <VAS::getPageTableEntry(unsigned long)>
c000a22b:	83 c4 10             	add    esp,0x10
c000a22e:	89 c6                	mov    esi,eax
c000a230:	85 c0                	test   eax,eax
c000a232:	74 0a                	je     c000a23e <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a234:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a236:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a23c:	74 0a                	je     c000a248 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a23e:	31 c0                	xor    eax,eax
c000a240:	83 c4 0c             	add    esp,0xc
c000a243:	5b                   	pop    ebx
c000a244:	5e                   	pop    esi
c000a245:	5f                   	pop    edi
c000a246:	5d                   	pop    ebp
c000a247:	c3                   	ret    
c000a248:	e8 f4 d8 ff ff       	call   c0007b41 <Phys::allocatePage()>
c000a24d:	c1 ed 0b             	shr    ebp,0xb
c000a250:	8b 16                	mov    edx,DWORD PTR [esi]
c000a252:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a258:	09 c2                	or     edx,eax
c000a25a:	81 ca 01 08 00 00    	or     edx,0x801
c000a260:	89 16                	mov    DWORD PTR [esi],edx
c000a262:	8b 35 ec 15 02 c0    	mov    esi,DWORD PTR ds:0xc00215ec
c000a268:	85 f6                	test   esi,esi
c000a26a:	7e 3e                	jle    c000a2aa <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a26c:	89 df                	mov    edi,ebx
c000a26e:	31 f6                	xor    esi,esi
c000a270:	83 ec 0c             	sub    esp,0xc
c000a273:	55                   	push   ebp
c000a274:	e8 ff f1 ff ff       	call   c0009478 <Virt::swapIDToSector(unsigned long)>
c000a279:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a27c:	01 f0                	add    eax,esi
c000a27e:	6a 01                	push   0x1
c000a280:	31 d2                	xor    edx,edx
c000a282:	46                   	inc    esi
c000a283:	52                   	push   edx
c000a284:	81 c7 00 02 00 00    	add    edi,0x200
c000a28a:	50                   	push   eax
c000a28b:	0f be 05 f8 15 02 c0 	movsx  eax,BYTE PTR ds:0xc00215f8
c000a292:	8b 0c 85 1c 63 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9ce4]
c000a299:	51                   	push   ecx
c000a29a:	e8 b7 2a 00 00       	call   c000cd56 <LogicalDisk::read(unsigned long long, int, void*)>
c000a29f:	83 c4 20             	add    esp,0x20
c000a2a2:	39 35 ec 15 02 c0    	cmp    DWORD PTR ds:0xc00215ec,esi
c000a2a8:	7f c6                	jg     c000a270 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a2aa:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000a2af:	48                   	dec    eax
c000a2b0:	52                   	push   edx
c000a2b1:	a3 a8 3f 02 c0       	mov    ds:0xc0023fa8,eax
c000a2b6:	50                   	push   eax
c000a2b7:	53                   	push   ebx
c000a2b8:	68 45 f7 01 c0       	push   0xc001f745
c000a2bd:	e8 44 03 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000a2c2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a2c5:	e8 90 f1 ff ff       	call   c000945a <Virt::freeSwapfilePage(unsigned long)>
c000a2ca:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a2cf:	83 c4 10             	add    esp,0x10
c000a2d2:	48                   	dec    eax
c000a2d3:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a2d8:	85 c0                	test   eax,eax
c000a2da:	75 01                	jne    c000a2dd <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a2dc:	fb                   	sti    
c000a2dd:	0f 20 d8             	mov    eax,cr3
c000a2e0:	0f 22 d8             	mov    cr3,eax
c000a2e3:	b0 01                	mov    al,0x1
c000a2e5:	e9 56 ff ff ff       	jmp    c000a240 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a2ea <VAS::scanForEviction()>:
c000a2ea:	57                   	push   edi
c000a2eb:	31 ff                	xor    edi,edi
c000a2ed:	56                   	push   esi
c000a2ee:	53                   	push   ebx
c000a2ef:	83 ec 10             	sub    esp,0x10
c000a2f2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a2f6:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a2f9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a2ff:	75 0e                	jne    c000a30f <VAS::scanForEviction()+0x25>
c000a301:	89 da                	mov    edx,ebx
c000a303:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a306:	c1 ea 16             	shr    edx,0x16
c000a309:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a30d:	74 4e                	je     c000a35d <VAS::scanForEviction()+0x73>
c000a30f:	53                   	push   ebx
c000a310:	56                   	push   esi
c000a311:	e8 08 f3 ff ff       	call   c000961e <VAS::getPageTableEntry(unsigned long)>
c000a316:	5a                   	pop    edx
c000a317:	8b 10                	mov    edx,DWORD PTR [eax]
c000a319:	59                   	pop    ecx
c000a31a:	89 d1                	mov    ecx,edx
c000a31c:	81 e1 01 08 00 00    	and    ecx,0x801
c000a322:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a328:	74 3e                	je     c000a368 <VAS::scanForEviction()+0x7e>
c000a32a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a330:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a336:	76 2b                	jbe    c000a363 <VAS::scanForEviction()+0x79>
c000a338:	47                   	inc    edi
c000a339:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a340:	83 ff 03             	cmp    edi,0x3
c000a343:	74 32                	je     c000a377 <VAS::scanForEviction()+0x8d>
c000a345:	31 db                	xor    ebx,ebx
c000a347:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a34d:	75 c0                	jne    c000a30f <VAS::scanForEviction()+0x25>
c000a34f:	89 da                	mov    edx,ebx
c000a351:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a354:	c1 ea 16             	shr    edx,0x16
c000a357:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a35b:	75 b2                	jne    c000a30f <VAS::scanForEviction()+0x25>
c000a35d:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a363:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a366:	eb 91                	jmp    c000a2f9 <VAS::scanForEviction()+0xf>
c000a368:	f6 c2 20             	test   dl,0x20
c000a36b:	74 13                	je     c000a380 <VAS::scanForEviction()+0x96>
c000a36d:	83 e2 df             	and    edx,0xffffffdf
c000a370:	89 10                	mov    DWORD PTR [eax],edx
c000a372:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a375:	eb b3                	jmp    c000a32a <VAS::scanForEviction()+0x40>
c000a377:	83 c4 10             	add    esp,0x10
c000a37a:	31 c0                	xor    eax,eax
c000a37c:	5b                   	pop    ebx
c000a37d:	5e                   	pop    esi
c000a37e:	5f                   	pop    edi
c000a37f:	c3                   	ret    
c000a380:	83 ec 08             	sub    esp,0x8
c000a383:	89 d0                	mov    eax,edx
c000a385:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a38a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a38e:	53                   	push   ebx
c000a38f:	68 5a f7 01 c0       	push   0xc001f75a
c000a394:	e8 6d 02 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000a399:	58                   	pop    eax
c000a39a:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a39d:	5a                   	pop    edx
c000a39e:	51                   	push   ecx
c000a39f:	56                   	push   esi
c000a3a0:	e8 95 fd ff ff       	call   c000a13a <VAS::evict(unsigned long)>
c000a3a5:	5b                   	pop    ebx
c000a3a6:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a3a9:	5f                   	pop    edi
c000a3aa:	50                   	push   eax
c000a3ab:	68 6e f7 01 c0       	push   0xc001f76e
c000a3b0:	e8 51 02 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000a3b5:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a3bc:	83 c4 10             	add    esp,0x10
c000a3bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a3c3:	83 c4 10             	add    esp,0x10
c000a3c6:	5b                   	pop    ebx
c000a3c7:	5e                   	pop    esi
c000a3c8:	5f                   	pop    edi
c000a3c9:	c3                   	ret    

c000a3ca <mapVASFirstTime>:
c000a3ca:	55                   	push   ebp
c000a3cb:	57                   	push   edi
c000a3cc:	56                   	push   esi
c000a3cd:	53                   	push   ebx
c000a3ce:	83 ec 0c             	sub    esp,0xc
c000a3d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a3d6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a3d9:	4a                   	dec    edx
c000a3da:	0f 84 c8 00 00 00    	je     c000a4a8 <mapVASFirstTime+0xde>
c000a3e0:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a3e3:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a3e6:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a3eb:	c1 e5 15             	shl    ebp,0x15
c000a3ee:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a3f3:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a3f9:	29 eb                	sub    ebx,ebp
c000a3fb:	29 ef                	sub    edi,ebp
c000a3fd:	e8 3f d7 ff ff       	call   c0007b41 <Phys::allocatePage()>
c000a402:	83 ec 0c             	sub    esp,0xc
c000a405:	68 03 04 00 00       	push   0x403
c000a40a:	6a 01                	push   0x1
c000a40c:	53                   	push   ebx
c000a40d:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a413:	50                   	push   eax
c000a414:	56                   	push   esi
c000a415:	e8 ec f8 ff ff       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a41a:	83 c4 20             	add    esp,0x20
c000a41d:	39 fb                	cmp    ebx,edi
c000a41f:	75 dc                	jne    c000a3fd <mapVASFirstTime+0x33>
c000a421:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a426:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a42b:	29 eb                	sub    ebx,ebp
c000a42d:	29 ef                	sub    edi,ebp
c000a42f:	e8 0d d7 ff ff       	call   c0007b41 <Phys::allocatePage()>
c000a434:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a438:	19 d2                	sbb    edx,edx
c000a43a:	83 ec 0c             	sub    esp,0xc
c000a43d:	83 e2 04             	and    edx,0x4
c000a440:	81 c2 03 04 00 00    	add    edx,0x403
c000a446:	52                   	push   edx
c000a447:	6a 01                	push   0x1
c000a449:	53                   	push   ebx
c000a44a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a450:	50                   	push   eax
c000a451:	56                   	push   esi
c000a452:	e8 af f8 ff ff       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a457:	83 c4 20             	add    esp,0x20
c000a45a:	39 df                	cmp    edi,ebx
c000a45c:	75 d1                	jne    c000a42f <mapVASFirstTime+0x65>
c000a45e:	83 ec 0c             	sub    esp,0xc
c000a461:	bb 7c 30 02 c0       	mov    ebx,0xc002307c
c000a466:	6a 04                	push   0x4
c000a468:	81 eb 00 20 02 c0    	sub    ebx,0xc0022000
c000a46e:	6a ff                	push   0xffffffff
c000a470:	c1 eb 0c             	shr    ebx,0xc
c000a473:	53                   	push   ebx
c000a474:	68 00 20 02 c0       	push   0xc0022000
c000a479:	56                   	push   esi
c000a47a:	e8 21 f3 ff ff       	call   c00097a0 <VAS::reflagRange(unsigned long, int, int, int)>
c000a47f:	83 c4 14             	add    esp,0x14
c000a482:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c000a487:	6a 04                	push   0x4
c000a489:	6a ff                	push   0xffffffff
c000a48b:	53                   	push   ebx
c000a48c:	68 00 20 02 c0       	push   0xc0022000
c000a491:	50                   	push   eax
c000a492:	e8 09 f3 ff ff       	call   c00097a0 <VAS::reflagRange(unsigned long, int, int, int)>
c000a497:	0f 20 d8             	mov    eax,cr3
c000a49a:	0f 22 d8             	mov    cr3,eax
c000a49d:	83 c4 20             	add    esp,0x20
c000a4a0:	83 c4 0c             	add    esp,0xc
c000a4a3:	5b                   	pop    ebx
c000a4a4:	5e                   	pop    esi
c000a4a5:	5f                   	pop    edi
c000a4a6:	5d                   	pop    ebp
c000a4a7:	c3                   	ret    
c000a4a8:	83 ec 0c             	sub    esp,0xc
c000a4ab:	68 81 f7 01 c0       	push   0xc001f781
c000a4b0:	e8 51 01 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000a4b5:	83 c4 10             	add    esp,0x10
c000a4b8:	83 c4 0c             	add    esp,0xc
c000a4bb:	5b                   	pop    ebx
c000a4bc:	5e                   	pop    esi
c000a4bd:	5f                   	pop    edi
c000a4be:	5d                   	pop    ebp
c000a4bf:	c3                   	ret    

c000a4c0 <__cxa_atexit>:
c000a4c0:	31 c0                	xor    eax,eax
c000a4c2:	c3                   	ret    

c000a4c3 <__cxa_finalize>:
c000a4c3:	c3                   	ret    

c000a4c4 <__stack_chk_fail>:
c000a4c4:	55                   	push   ebp
c000a4c5:	89 e5                	mov    ebp,esp
c000a4c7:	83 ec 10             	sub    esp,0x10
c000a4ca:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a4cd:	68 9a f7 01 c0       	push   0xc001f79a
c000a4d2:	e8 2f 01 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000a4d7:	58                   	pop    eax
c000a4d8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a4db:	5a                   	pop    edx
c000a4dc:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a4df:	68 9a f7 01 c0       	push   0xc001f79a
c000a4e4:	e8 1d 01 00 00       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000a4e9:	c7 04 24 a2 f7 01 c0 	mov    DWORD PTR [esp],0xc001f7a2
c000a4f0:	e8 d2 5e 00 00       	call   c00103c7 <KePanic(char const*)>
c000a4f5:	83 c4 10             	add    esp,0x10
c000a4f8:	c9                   	leave  
c000a4f9:	c3                   	ret    

c000a4fa <__cxa_pure_virtual>:
c000a4fa:	83 ec 18             	sub    esp,0x18
c000a4fd:	68 ba f7 01 c0       	push   0xc001f7ba
c000a502:	e8 c0 5e 00 00       	call   c00103c7 <KePanic(char const*)>
c000a507:	83 c4 1c             	add    esp,0x1c
c000a50a:	c3                   	ret    

c000a50b <operator new[](unsigned long)>:
c000a50b:	e9 55 d3 ff ff       	jmp    c0007865 <malloc>

c000a510 <operator delete(void*, unsigned long)>:
c000a510:	e9 70 d3 ff ff       	jmp    c0007885 <rfree>

c000a515 <operator delete[](void*)>:
c000a515:	e9 6b d3 ff ff       	jmp    c0007885 <rfree>

c000a51a <operator delete[](void*, unsigned long)>:
c000a51a:	e9 66 d3 ff ff       	jmp    c0007885 <rfree>

c000a51f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a51f:	55                   	push   ebp
c000a520:	b9 04 00 00 00       	mov    ecx,0x4
c000a525:	57                   	push   edi
c000a526:	56                   	push   esi
c000a527:	be 0f f4 01 c0       	mov    esi,0xc001f40f
c000a52c:	53                   	push   ebx
c000a52d:	83 ec 20             	sub    esp,0x20
c000a530:	a1 0e f4 01 c0       	mov    eax,ds:0xc001f40e
c000a535:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a539:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a53d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a541:	a1 1b f4 01 c0       	mov    eax,ds:0xc001f41b
c000a546:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a54a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a54e:	fc                   	cld    
c000a54f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a551:	89 ee                	mov    esi,ebp
c000a553:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a557:	eb 02                	jmp    c000a55b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a559:	89 c6                	mov    esi,eax
c000a55b:	31 d2                	xor    edx,edx
c000a55d:	41                   	inc    ecx
c000a55e:	89 f0                	mov    eax,esi
c000a560:	f7 f3                	div    ebx
c000a562:	39 de                	cmp    esi,ebx
c000a564:	73 f3                	jae    c000a559 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a566:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a569:	eb 02                	jmp    c000a56d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a56b:	89 c5                	mov    ebp,eax
c000a56d:	31 d2                	xor    edx,edx
c000a56f:	49                   	dec    ecx
c000a570:	89 e8                	mov    eax,ebp
c000a572:	f7 f3                	div    ebx
c000a574:	39 dd                	cmp    ebp,ebx
c000a576:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a57a:	88 11                	mov    BYTE PTR [ecx],dl
c000a57c:	73 ed                	jae    c000a56b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a57e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a582:	83 c4 20             	add    esp,0x20
c000a585:	5b                   	pop    ebx
c000a586:	5e                   	pop    esi
c000a587:	5f                   	pop    edi
c000a588:	5d                   	pop    ebp
c000a589:	c3                   	ret    

c000a58a <Dbg::logc(char)>:
c000a58a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a58e:	f6 05 d0 3e 02 c0 10 	test   BYTE PTR ds:0xc0023ed0,0x10
c000a595:	75 12                	jne    c000a5a9 <Dbg::logc(char)+0x1f>
c000a597:	ba fd 03 00 00       	mov    edx,0x3fd
c000a59c:	ec                   	in     al,dx
c000a59d:	a8 20                	test   al,0x20
c000a59f:	74 fb                	je     c000a59c <Dbg::logc(char)+0x12>
c000a5a1:	ba f8 03 00 00       	mov    edx,0x3f8
c000a5a6:	88 c8                	mov    al,cl
c000a5a8:	ee                   	out    dx,al
c000a5a9:	c3                   	ret    

c000a5aa <Dbg::logs(char*)>:
c000a5aa:	53                   	push   ebx
c000a5ab:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a5af:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5b2:	84 c0                	test   al,al
c000a5b4:	74 0f                	je     c000a5c5 <Dbg::logs(char*)+0x1b>
c000a5b6:	50                   	push   eax
c000a5b7:	43                   	inc    ebx
c000a5b8:	e8 cd ff ff ff       	call   c000a58a <Dbg::logc(char)>
c000a5bd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5c0:	5a                   	pop    edx
c000a5c1:	84 c0                	test   al,al
c000a5c3:	75 f1                	jne    c000a5b6 <Dbg::logs(char*)+0xc>
c000a5c5:	5b                   	pop    ebx
c000a5c6:	c3                   	ret    

c000a5c7 <Dbg::logWriteInt(unsigned int)>:
c000a5c7:	83 ec 10             	sub    esp,0x10
c000a5ca:	6a 0a                	push   0xa
c000a5cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5d0:	50                   	push   eax
c000a5d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5d5:	50                   	push   eax
c000a5d6:	e8 44 ff ff ff       	call   c000a51f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a5db:	50                   	push   eax
c000a5dc:	e8 c9 ff ff ff       	call   c000a5aa <Dbg::logs(char*)>
c000a5e1:	83 c4 20             	add    esp,0x20
c000a5e4:	c3                   	ret    

c000a5e5 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a5e5:	83 ec 10             	sub    esp,0x10
c000a5e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5ec:	50                   	push   eax
c000a5ed:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5f1:	50                   	push   eax
c000a5f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5f6:	52                   	push   edx
c000a5f7:	e8 23 ff ff ff       	call   c000a51f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a5fc:	50                   	push   eax
c000a5fd:	e8 a8 ff ff ff       	call   c000a5aa <Dbg::logs(char*)>
c000a602:	83 c4 20             	add    esp,0x20
c000a605:	c3                   	ret    

c000a606 <Dbg::kprintf(char const*, ...)>:
c000a606:	55                   	push   ebp
c000a607:	57                   	push   edi
c000a608:	56                   	push   esi
c000a609:	53                   	push   ebx
c000a60a:	83 ec 0c             	sub    esp,0xc
c000a60d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a611:	f6 05 d0 3e 02 c0 10 	test   BYTE PTR ds:0xc0023ed0,0x10
c000a618:	74 08                	je     c000a622 <Dbg::kprintf(char const*, ...)+0x1c>
c000a61a:	83 c4 0c             	add    esp,0xc
c000a61d:	5b                   	pop    ebx
c000a61e:	5e                   	pop    esi
c000a61f:	5f                   	pop    edi
c000a620:	5d                   	pop    ebp
c000a621:	c3                   	ret    
c000a622:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a626:	31 ff                	xor    edi,edi
c000a628:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a62c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a62f:	84 c0                	test   al,al
c000a631:	74 e7                	je     c000a61a <Dbg::kprintf(char const*, ...)+0x14>
c000a633:	8d 77 01             	lea    esi,[edi+0x1]
c000a636:	3c 25                	cmp    al,0x25
c000a638:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a63b:	75 47                	jne    c000a684 <Dbg::kprintf(char const*, ...)+0x7e>
c000a63d:	83 c7 02             	add    edi,0x2
c000a640:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a643:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a646:	83 e8 25             	sub    eax,0x25
c000a649:	3c 53                	cmp    al,0x53
c000a64b:	0f 87 d2 00 00 00    	ja     c000a723 <Dbg::kprintf(char const*, ...)+0x11d>
c000a651:	25 ff 00 00 00       	and    eax,0xff
c000a656:	ff 24 85 d0 f7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0830]
c000a65d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a661:	89 c8                	mov    eax,ecx
c000a663:	83 c1 04             	add    ecx,0x4
c000a666:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a66a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a66c:	55                   	push   ebp
c000a66d:	e8 55 ff ff ff       	call   c000a5c7 <Dbg::logWriteInt(unsigned int)>
c000a672:	58                   	pop    eax
c000a673:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a676:	84 c0                	test   al,al
c000a678:	74 a0                	je     c000a61a <Dbg::kprintf(char const*, ...)+0x14>
c000a67a:	8d 77 01             	lea    esi,[edi+0x1]
c000a67d:	3c 25                	cmp    al,0x25
c000a67f:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a682:	74 b9                	je     c000a63d <Dbg::kprintf(char const*, ...)+0x37>
c000a684:	50                   	push   eax
c000a685:	89 f7                	mov    edi,esi
c000a687:	e8 fe fe ff ff       	call   c000a58a <Dbg::logc(char)>
c000a68c:	89 ee                	mov    esi,ebp
c000a68e:	58                   	pop    eax
c000a68f:	eb e2                	jmp    c000a673 <Dbg::kprintf(char const*, ...)+0x6d>
c000a691:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a695:	89 c8                	mov    eax,ecx
c000a697:	83 c1 04             	add    ecx,0x4
c000a69a:	8b 00                	mov    eax,DWORD PTR [eax]
c000a69c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6a0:	50                   	push   eax
c000a6a1:	e8 04 ff ff ff       	call   c000a5aa <Dbg::logs(char*)>
c000a6a6:	58                   	pop    eax
c000a6a7:	eb ca                	jmp    c000a673 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6ad:	89 d0                	mov    eax,edx
c000a6af:	83 c2 04             	add    edx,0x4
c000a6b2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6b6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6b8:	50                   	push   eax
c000a6b9:	e8 09 ff ff ff       	call   c000a5c7 <Dbg::logWriteInt(unsigned int)>
c000a6be:	58                   	pop    eax
c000a6bf:	eb b2                	jmp    c000a673 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6c5:	89 d0                	mov    eax,edx
c000a6c7:	83 c2 04             	add    edx,0x4
c000a6ca:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a6cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6d1:	50                   	push   eax
c000a6d2:	e8 b3 fe ff ff       	call   c000a58a <Dbg::logc(char)>
c000a6d7:	58                   	pop    eax
c000a6d8:	eb 99                	jmp    c000a673 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6da:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6de:	89 c8                	mov    eax,ecx
c000a6e0:	83 c1 04             	add    ecx,0x4
c000a6e3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6e7:	6a 10                	push   0x10
c000a6e9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6eb:	51                   	push   ecx
c000a6ec:	e8 f4 fe ff ff       	call   c000a5e5 <Dbg::logWriteIntBase(unsigned int, int)>
c000a6f1:	5d                   	pop    ebp
c000a6f2:	58                   	pop    eax
c000a6f3:	e9 7b ff ff ff       	jmp    c000a673 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6fc:	89 d0                	mov    eax,edx
c000a6fe:	83 c2 08             	add    edx,0x8
c000a701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a705:	6a 10                	push   0x10
c000a707:	8b 00                	mov    eax,DWORD PTR [eax]
c000a709:	50                   	push   eax
c000a70a:	e8 d6 fe ff ff       	call   c000a5e5 <Dbg::logWriteIntBase(unsigned int, int)>
c000a70f:	58                   	pop    eax
c000a710:	5a                   	pop    edx
c000a711:	e9 5d ff ff ff       	jmp    c000a673 <Dbg::kprintf(char const*, ...)+0x6d>
c000a716:	6a 25                	push   0x25
c000a718:	e8 6d fe ff ff       	call   c000a58a <Dbg::logc(char)>
c000a71d:	5a                   	pop    edx
c000a71e:	e9 50 ff ff ff       	jmp    c000a673 <Dbg::kprintf(char const*, ...)+0x6d>
c000a723:	6a 25                	push   0x25
c000a725:	e8 60 fe ff ff       	call   c000a58a <Dbg::logc(char)>
c000a72a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a72e:	50                   	push   eax
c000a72f:	e8 56 fe ff ff       	call   c000a58a <Dbg::logc(char)>
c000a734:	5a                   	pop    edx
c000a735:	59                   	pop    ecx
c000a736:	e9 38 ff ff ff       	jmp    c000a673 <Dbg::kprintf(char const*, ...)+0x6d>
c000a73b:	90                   	nop

c000a73c <File::read(unsigned long long, void*, int*)>:
c000a73c:	53                   	push   ebx
c000a73d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a741:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a745:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a74c:	3c 19                	cmp    al,0x19
c000a74e:	77 35                	ja     c000a785 <File::read(unsigned long long, void*, int*)+0x49>
c000a750:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a757:	85 c0                	test   eax,eax
c000a759:	74 2a                	je     c000a785 <File::read(unsigned long long, void*, int*)+0x49>
c000a75b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a761:	85 c0                	test   eax,eax
c000a763:	74 20                	je     c000a785 <File::read(unsigned long long, void*, int*)+0x49>
c000a765:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a769:	74 21                	je     c000a78c <File::read(unsigned long long, void*, int*)+0x50>
c000a76b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a76d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a771:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a77b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a77f:	5b                   	pop    ebx
c000a780:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a783:	ff e0                	jmp    eax
c000a785:	b8 0b 00 00 00       	mov    eax,0xb
c000a78a:	eb 05                	jmp    c000a791 <File::read(unsigned long long, void*, int*)+0x55>
c000a78c:	b8 05 00 00 00       	mov    eax,0x5
c000a791:	5b                   	pop    ebx
c000a792:	c3                   	ret    
c000a793:	90                   	nop

c000a794 <File::write(unsigned long long, void*, int*)>:
c000a794:	53                   	push   ebx
c000a795:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a799:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a79d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a7a4:	3c 19                	cmp    al,0x19
c000a7a6:	77 35                	ja     c000a7dd <File::write(unsigned long long, void*, int*)+0x49>
c000a7a8:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a7af:	85 c0                	test   eax,eax
c000a7b1:	74 2a                	je     c000a7dd <File::write(unsigned long long, void*, int*)+0x49>
c000a7b3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a7b9:	85 c0                	test   eax,eax
c000a7bb:	74 20                	je     c000a7dd <File::write(unsigned long long, void*, int*)+0x49>
c000a7bd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a7c1:	74 21                	je     c000a7e4 <File::write(unsigned long long, void*, int*)+0x50>
c000a7c3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a7c5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7c9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a7cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7d7:	5b                   	pop    ebx
c000a7d8:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a7db:	ff e0                	jmp    eax
c000a7dd:	b8 0b 00 00 00       	mov    eax,0xb
c000a7e2:	eb 05                	jmp    c000a7e9 <File::write(unsigned long long, void*, int*)+0x55>
c000a7e4:	b8 05 00 00 00       	mov    eax,0x5
c000a7e9:	5b                   	pop    ebx
c000a7ea:	c3                   	ret    
c000a7eb:	90                   	nop

c000a7ec <Directory::read(unsigned long long, void*, int*)>:
c000a7ec:	53                   	push   ebx
c000a7ed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7f5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a7fc:	3c 19                	cmp    al,0x19
c000a7fe:	77 35                	ja     c000a835 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a800:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a807:	85 c0                	test   eax,eax
c000a809:	74 2a                	je     c000a835 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a80b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a811:	85 c0                	test   eax,eax
c000a813:	74 20                	je     c000a835 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a815:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a819:	74 21                	je     c000a83c <Directory::read(unsigned long long, void*, int*)+0x50>
c000a81b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a81d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a821:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a827:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a82b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a82f:	5b                   	pop    ebx
c000a830:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a833:	ff e0                	jmp    eax
c000a835:	b8 0b 00 00 00       	mov    eax,0xb
c000a83a:	eb 05                	jmp    c000a841 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a83c:	b8 05 00 00 00       	mov    eax,0x5
c000a841:	5b                   	pop    ebx
c000a842:	c3                   	ret    
c000a843:	90                   	nop

c000a844 <Directory::write(unsigned long long, void*, int*)>:
c000a844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a848:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a84f:	b8 0b 00 00 00       	mov    eax,0xb
c000a854:	80 fa 19             	cmp    dl,0x19
c000a857:	77 18                	ja     c000a871 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a859:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000a860:	85 d2                	test   edx,edx
c000a862:	74 0d                	je     c000a871 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a864:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000a86b:	19 c0                	sbb    eax,eax
c000a86d:	83 e0 0a             	and    eax,0xa
c000a870:	40                   	inc    eax
c000a871:	c3                   	ret    

c000a872 <File::isAtty()>:
c000a872:	31 c0                	xor    eax,eax
c000a874:	c3                   	ret    
c000a875:	90                   	nop

c000a876 <Directory::isAtty()>:
c000a876:	31 c0                	xor    eax,eax
c000a878:	c3                   	ret    
c000a879:	90                   	nop

c000a87a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a87a:	b8 0a 00 00 00       	mov    eax,0xa
c000a87f:	c3                   	ret    

c000a880 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a880:	b8 0a 00 00 00       	mov    eax,0xa
c000a885:	c3                   	ret    

c000a886 <Filesystem::allocateSwapfile(char const*, int)>:
c000a886:	31 c0                	xor    eax,eax
c000a888:	31 d2                	xor    edx,edx
c000a88a:	c3                   	ret    
c000a88b:	90                   	nop

c000a88c <File::~File()>:
c000a88c:	83 ec 0c             	sub    esp,0xc
c000a88f:	ba 90 f9 01 c0       	mov    edx,0xc001f990
c000a894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a898:	89 10                	mov    DWORD PTR [eax],edx
c000a89a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a89e:	83 ec 0c             	sub    esp,0xc
c000a8a1:	50                   	push   eax
c000a8a2:	e8 41 e8 ff ff       	call   c00090e8 <UnixFile::~UnixFile()>
c000a8a7:	83 c4 10             	add    esp,0x10
c000a8aa:	90                   	nop
c000a8ab:	83 c4 0c             	add    esp,0xc
c000a8ae:	c3                   	ret    
c000a8af:	90                   	nop

c000a8b0 <File::~File()>:
c000a8b0:	83 ec 0c             	sub    esp,0xc
c000a8b3:	83 ec 0c             	sub    esp,0xc
c000a8b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ba:	e8 cd ff ff ff       	call   c000a88c <File::~File()>
c000a8bf:	83 c4 10             	add    esp,0x10
c000a8c2:	83 ec 08             	sub    esp,0x8
c000a8c5:	68 14 01 00 00       	push   0x114
c000a8ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ce:	e8 3d fc ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000a8d3:	83 c4 10             	add    esp,0x10
c000a8d6:	83 c4 0c             	add    esp,0xc
c000a8d9:	c3                   	ret    

c000a8da <Directory::~Directory()>:
c000a8da:	83 ec 0c             	sub    esp,0xc
c000a8dd:	ba ac f9 01 c0       	mov    edx,0xc001f9ac
c000a8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8e6:	89 10                	mov    DWORD PTR [eax],edx
c000a8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8ec:	83 ec 0c             	sub    esp,0xc
c000a8ef:	50                   	push   eax
c000a8f0:	e8 f3 e7 ff ff       	call   c00090e8 <UnixFile::~UnixFile()>
c000a8f5:	83 c4 10             	add    esp,0x10
c000a8f8:	90                   	nop
c000a8f9:	83 c4 0c             	add    esp,0xc
c000a8fc:	c3                   	ret    
c000a8fd:	90                   	nop

c000a8fe <Directory::~Directory()>:
c000a8fe:	83 ec 0c             	sub    esp,0xc
c000a901:	83 ec 0c             	sub    esp,0xc
c000a904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a908:	e8 cd ff ff ff       	call   c000a8da <Directory::~Directory()>
c000a90d:	83 c4 10             	add    esp,0x10
c000a910:	83 ec 08             	sub    esp,0x8
c000a913:	68 14 01 00 00       	push   0x114
c000a918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a91c:	e8 ef fb ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000a921:	83 c4 10             	add    esp,0x10
c000a924:	83 c4 0c             	add    esp,0xc
c000a927:	c3                   	ret    

c000a928 <Filesystem::Filesystem()>:
c000a928:	ba 28 f9 01 c0       	mov    edx,0xc001f928
c000a92d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a931:	89 10                	mov    DWORD PTR [eax],edx
c000a933:	8b 15 b4 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fb4
c000a939:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a93d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a944:	a3 b4 3f 02 c0       	mov    ds:0xc0023fb4,eax
c000a949:	90                   	nop
c000a94a:	c3                   	ret    
c000a94b:	90                   	nop

c000a94c <Filesystem::~Filesystem()>:
c000a94c:	ba 28 f9 01 c0       	mov    edx,0xc001f928
c000a951:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a955:	89 10                	mov    DWORD PTR [eax],edx
c000a957:	90                   	nop
c000a958:	c3                   	ret    
c000a959:	90                   	nop

c000a95a <Filesystem::~Filesystem()>:
c000a95a:	83 ec 0c             	sub    esp,0xc
c000a95d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a961:	e8 e6 ff ff ff       	call   c000a94c <Filesystem::~Filesystem()>
c000a966:	83 c4 04             	add    esp,0x4
c000a969:	83 ec 08             	sub    esp,0x8
c000a96c:	6a 08                	push   0x8
c000a96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a972:	e8 99 fb ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	83 c4 0c             	add    esp,0xc
c000a97d:	c3                   	ret    

c000a97e <Fs::getcwd(Process*, char*, int)>:
c000a97e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a982:	31 c0                	xor    eax,eax
c000a984:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a987:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a98b:	7d 15                	jge    c000a9a2 <Fs::getcwd(Process*, char*, int)+0x24>
c000a98d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a991:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a998:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a99b:	84 c9                	test   cl,cl
c000a99d:	74 06                	je     c000a9a5 <Fs::getcwd(Process*, char*, int)+0x27>
c000a99f:	40                   	inc    eax
c000a9a0:	eb e2                	jmp    c000a984 <Fs::getcwd(Process*, char*, int)+0x6>
c000a9a2:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a9a5:	31 c0                	xor    eax,eax
c000a9a7:	c3                   	ret    

c000a9a8 <Fs::initVFS()>:
c000a9a8:	83 ec 18             	sub    esp,0x18
c000a9ab:	6a 08                	push   0x8
c000a9ad:	e8 b3 ce ff ff       	call   c0007865 <malloc>
c000a9b2:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9b5:	e8 7a d9 00 00       	call   c0018334 <FAT::FAT()>
c000a9ba:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a9c1:	e8 9f ce ff ff       	call   c0007865 <malloc>
c000a9c6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9c9:	e8 02 e8 00 00       	call   c00191d0 <ISO9660::ISO9660()>
c000a9ce:	83 c4 1c             	add    esp,0x1c
c000a9d1:	c3                   	ret    

c000a9d2 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a9d2:	55                   	push   ebp
c000a9d3:	57                   	push   edi
c000a9d4:	56                   	push   esi
c000a9d5:	53                   	push   ebx
c000a9d6:	81 ec 10 04 00 00    	sub    esp,0x410
c000a9dc:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a9e3:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a9ea:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a9f1:	68 00 04 00 00       	push   0x400
c000a9f6:	6a 00                	push   0x0
c000a9f8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a9fc:	56                   	push   esi
c000a9fd:	e8 be 5a ff ff       	call   c00004c0 <memset>
c000aa02:	83 c4 10             	add    esp,0x10
c000aa05:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000aa09:	75 0b                	jne    c000aa16 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000aa0b:	50                   	push   eax
c000aa0c:	50                   	push   eax
c000aa0d:	57                   	push   edi
c000aa0e:	56                   	push   esi
c000aa0f:	e8 dc 5b ff ff       	call   c00005f0 <strcpy>
c000aa14:	eb 41                	jmp    c000aa57 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000aa16:	8a 07                	mov    al,BYTE PTR [edi]
c000aa18:	3c 5c                	cmp    al,0x5c
c000aa1a:	74 04                	je     c000aa20 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000aa1c:	3c 2f                	cmp    al,0x2f
c000aa1e:	75 18                	jne    c000aa38 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000aa20:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aa23:	3c 60                	cmp    al,0x60
c000aa25:	7e 03                	jle    c000aa2a <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000aa27:	83 e8 20             	sub    eax,0x20
c000aa2a:	88 04 24             	mov    BYTE PTR [esp],al
c000aa2d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa34:	50                   	push   eax
c000aa35:	50                   	push   eax
c000aa36:	eb 18                	jmp    c000aa50 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000aa38:	50                   	push   eax
c000aa39:	50                   	push   eax
c000aa3a:	55                   	push   ebp
c000aa3b:	56                   	push   esi
c000aa3c:	e8 af 5b ff ff       	call   c00005f0 <strcpy>
c000aa41:	5a                   	pop    edx
c000aa42:	59                   	pop    ecx
c000aa43:	68 a2 08 02 c0       	push   0xc00208a2
c000aa48:	56                   	push   esi
c000aa49:	e8 62 5d ff ff       	call   c00007b0 <strcat>
c000aa4e:	5d                   	pop    ebp
c000aa4f:	58                   	pop    eax
c000aa50:	57                   	push   edi
c000aa51:	56                   	push   esi
c000aa52:	e8 59 5d ff ff       	call   c00007b0 <strcat>
c000aa57:	83 c4 10             	add    esp,0x10
c000aa5a:	8a 04 24             	mov    al,BYTE PTR [esp]
c000aa5d:	3c 60                	cmp    al,0x60
c000aa5f:	7e 03                	jle    c000aa64 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000aa61:	83 e8 20             	sub    eax,0x20
c000aa64:	88 04 24             	mov    BYTE PTR [esp],al
c000aa67:	88 03                	mov    BYTE PTR [ebx],al
c000aa69:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa70:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000aa76:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000aa7a:	bf 03 00 00 00       	mov    edi,0x3
c000aa7f:	b8 03 00 00 00       	mov    eax,0x3
c000aa84:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000aa87:	84 d2                	test   dl,dl
c000aa89:	0f 84 91 00 00 00    	je     c000ab20 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000aa8f:	8d 4f 01             	lea    ecx,[edi+0x1]
c000aa92:	80 fa 5c             	cmp    dl,0x5c
c000aa95:	74 05                	je     c000aa9c <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000aa97:	80 fa 2f             	cmp    dl,0x2f
c000aa9a:	75 12                	jne    c000aaae <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aa9c:	89 c5                	mov    ebp,eax
c000aa9e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aaa3:	74 09                	je     c000aaae <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aaa5:	40                   	inc    eax
c000aaa6:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000aaaa:	89 cf                	mov    edi,ecx
c000aaac:	eb d6                	jmp    c000aa84 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000aaae:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000aab3:	75 5b                	jne    c000ab10 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aab5:	80 fa 2e             	cmp    dl,0x2e
c000aab8:	75 56                	jne    c000ab10 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aaba:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aabe:	74 19                	je     c000aad9 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000aac0:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aac5:	74 53                	je     c000ab1a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aac7:	89 f9                	mov    ecx,edi
c000aac9:	41                   	inc    ecx
c000aaca:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aacd:	80 fa 2f             	cmp    dl,0x2f
c000aad0:	74 f7                	je     c000aac9 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aad2:	80 fa 5c             	cmp    dl,0x5c
c000aad5:	74 f2                	je     c000aac9 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aad7:	eb d1                	jmp    c000aaaa <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aad9:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aade:	74 3a                	je     c000ab1a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aae0:	83 f8 03             	cmp    eax,0x3
c000aae3:	74 c5                	je     c000aaaa <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aae5:	41                   	inc    ecx
c000aae6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aae9:	80 fa 2f             	cmp    dl,0x2f
c000aaec:	74 f7                	je     c000aae5 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aaee:	80 fa 5c             	cmp    dl,0x5c
c000aaf1:	74 f2                	je     c000aae5 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aaf3:	48                   	dec    eax
c000aaf4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aaf8:	75 06                	jne    c000ab00 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aafa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aafe:	eb f3                	jmp    c000aaf3 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000ab00:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ab04:	74 07                	je     c000ab0d <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ab06:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab0a:	48                   	dec    eax
c000ab0b:	eb f3                	jmp    c000ab00 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab0d:	40                   	inc    eax
c000ab0e:	eb 9a                	jmp    c000aaaa <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab10:	80 fa 2f             	cmp    dl,0x2f
c000ab13:	74 95                	je     c000aaaa <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab15:	80 fa 5c             	cmp    dl,0x5c
c000ab18:	74 90                	je     c000aaaa <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab1a:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000ab1d:	40                   	inc    eax
c000ab1e:	eb 8a                	jmp    c000aaaa <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab20:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab24:	83 ec 0c             	sub    esp,0xc
c000ab27:	53                   	push   ebx
c000ab28:	e8 03 5a ff ff       	call   c0000530 <strlen>
c000ab2d:	83 c4 10             	add    esp,0x10
c000ab30:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ab35:	75 26                	jne    c000ab5d <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000ab37:	83 ec 0c             	sub    esp,0xc
c000ab3a:	53                   	push   ebx
c000ab3b:	e8 f0 59 ff ff       	call   c0000530 <strlen>
c000ab40:	83 c4 10             	add    esp,0x10
c000ab43:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ab48:	74 26                	je     c000ab70 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000ab4a:	83 ec 0c             	sub    esp,0xc
c000ab4d:	53                   	push   ebx
c000ab4e:	e8 dd 59 ff ff       	call   c0000530 <strlen>
c000ab53:	83 c4 10             	add    esp,0x10
c000ab56:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ab5b:	eb c7                	jmp    c000ab24 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000ab5d:	83 ec 0c             	sub    esp,0xc
c000ab60:	53                   	push   ebx
c000ab61:	e8 ca 59 ff ff       	call   c0000530 <strlen>
c000ab66:	83 c4 10             	add    esp,0x10
c000ab69:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ab6e:	74 c7                	je     c000ab37 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000ab70:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ab76:	5b                   	pop    ebx
c000ab77:	5e                   	pop    esi
c000ab78:	5f                   	pop    edi
c000ab79:	5d                   	pop    ebp
c000ab7a:	c3                   	ret    
c000ab7b:	90                   	nop

c000ab7c <File::File(char const*, Process*)>:
c000ab7c:	83 ec 0c             	sub    esp,0xc
c000ab7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab83:	83 ec 08             	sub    esp,0x8
c000ab86:	6a 00                	push   0x0
c000ab88:	50                   	push   eax
c000ab89:	e8 78 e3 ff ff       	call   c0008f06 <UnixFile::UnixFile(int)>
c000ab8e:	83 c4 10             	add    esp,0x10
c000ab91:	ba 90 f9 01 c0       	mov    edx,0xc001f990
c000ab96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab9a:	89 10                	mov    DWORD PTR [eax],edx
c000ab9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aba0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abaa:	83 c0 0d             	add    eax,0xd
c000abad:	83 ec 04             	sub    esp,0x4
c000abb0:	52                   	push   edx
c000abb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abb5:	50                   	push   eax
c000abb6:	e8 17 fe ff ff       	call   c000a9d2 <Fs::standardiseFiles(char*, char const*, char const*)>
c000abbb:	83 c4 10             	add    esp,0x10
c000abbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000abc5:	8d 50 bf             	lea    edx,[eax-0x41]
c000abc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abcc:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000abd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000abda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abde:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000abe4:	25 ff 00 00 00       	and    eax,0xff
c000abe9:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000abf0:	85 c0                	test   eax,eax
c000abf2:	74 42                	je     c000ac36 <File::File(char const*, Process*)+0xba>
c000abf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abf8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000abfe:	25 ff 00 00 00       	and    eax,0xff
c000ac03:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000ac0a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ac10:	85 c0                	test   eax,eax
c000ac12:	75 22                	jne    c000ac36 <File::File(char const*, Process*)+0xba>
c000ac14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac18:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac1e:	25 ff 00 00 00       	and    eax,0xff
c000ac23:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000ac2a:	83 ec 0c             	sub    esp,0xc
c000ac2d:	50                   	push   eax
c000ac2e:	e8 61 20 00 00       	call   c000cc94 <LogicalDisk::mount()>
c000ac33:	83 c4 10             	add    esp,0x10
c000ac36:	90                   	nop
c000ac37:	83 c4 0c             	add    esp,0xc
c000ac3a:	c3                   	ret    
c000ac3b:	90                   	nop

c000ac3c <File::open(FileOpenMode)>:
c000ac3c:	53                   	push   ebx
c000ac3d:	b8 0b 00 00 00       	mov    eax,0xb
c000ac42:	83 ec 08             	sub    esp,0x8
c000ac45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac49:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ac50:	80 fa 19             	cmp    dl,0x19
c000ac53:	77 40                	ja     c000ac95 <File::open(FileOpenMode)+0x59>
c000ac55:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ac5c:	85 d2                	test   edx,edx
c000ac5e:	74 35                	je     c000ac95 <File::open(FileOpenMode)+0x59>
c000ac60:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ac66:	85 d2                	test   edx,edx
c000ac68:	74 2b                	je     c000ac95 <File::open(FileOpenMode)+0x59>
c000ac6a:	b8 06 00 00 00       	mov    eax,0x6
c000ac6f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ac73:	75 20                	jne    c000ac95 <File::open(FileOpenMode)+0x59>
c000ac75:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac77:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ac7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac81:	51                   	push   ecx
c000ac82:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ac85:	51                   	push   ecx
c000ac86:	52                   	push   edx
c000ac87:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ac8a:	83 c4 10             	add    esp,0x10
c000ac8d:	85 c0                	test   eax,eax
c000ac8f:	75 04                	jne    c000ac95 <File::open(FileOpenMode)+0x59>
c000ac91:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ac95:	83 c4 08             	add    esp,0x8
c000ac98:	5b                   	pop    ebx
c000ac99:	c3                   	ret    

c000ac9a <File::close()>:
c000ac9a:	53                   	push   ebx
c000ac9b:	b8 0b 00 00 00       	mov    eax,0xb
c000aca0:	83 ec 08             	sub    esp,0x8
c000aca3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aca7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000acae:	80 fa 19             	cmp    dl,0x19
c000acb1:	77 41                	ja     c000acf4 <File::close()+0x5a>
c000acb3:	8b 1c 95 20 64 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9be0]
c000acba:	85 db                	test   ebx,ebx
c000acbc:	74 36                	je     c000acf4 <File::close()+0x5a>
c000acbe:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000acc5:	74 2d                	je     c000acf4 <File::close()+0x5a>
c000acc7:	b8 05 00 00 00       	mov    eax,0x5
c000accc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000acd0:	74 22                	je     c000acf4 <File::close()+0x5a>
c000acd2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000acd6:	8b 04 95 20 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9be0]
c000acdd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ace3:	53                   	push   ebx
c000ace4:	53                   	push   ebx
c000ace5:	8b 10                	mov    edx,DWORD PTR [eax]
c000ace7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000aced:	50                   	push   eax
c000acee:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000acf1:	83 c4 10             	add    esp,0x10
c000acf4:	83 c4 08             	add    esp,0x8
c000acf7:	5b                   	pop    ebx
c000acf8:	c3                   	ret    
c000acf9:	90                   	nop

c000acfa <File::seek(unsigned long long)>:
c000acfa:	56                   	push   esi
c000acfb:	53                   	push   ebx
c000acfc:	b8 0b 00 00 00       	mov    eax,0xb
c000ad01:	51                   	push   ecx
c000ad02:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ad06:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ad0a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ad11:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad15:	80 fa 19             	cmp    dl,0x19
c000ad18:	77 31                	ja     c000ad4b <File::seek(unsigned long long)+0x51>
c000ad1a:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ad21:	85 d2                	test   edx,edx
c000ad23:	74 26                	je     c000ad4b <File::seek(unsigned long long)+0x51>
c000ad25:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ad2b:	85 d2                	test   edx,edx
c000ad2d:	74 1c                	je     c000ad4b <File::seek(unsigned long long)+0x51>
c000ad2f:	b8 05 00 00 00       	mov    eax,0x5
c000ad34:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ad38:	74 11                	je     c000ad4b <File::seek(unsigned long long)+0x51>
c000ad3a:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad3c:	53                   	push   ebx
c000ad3d:	51                   	push   ecx
c000ad3e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ad44:	52                   	push   edx
c000ad45:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	5a                   	pop    edx
c000ad4c:	5b                   	pop    ebx
c000ad4d:	5e                   	pop    esi
c000ad4e:	c3                   	ret    
c000ad4f:	90                   	nop

c000ad50 <File::tell(unsigned long long*)>:
c000ad50:	83 ec 0c             	sub    esp,0xc
c000ad53:	b8 0b 00 00 00       	mov    eax,0xb
c000ad58:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad5c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ad63:	80 fa 19             	cmp    dl,0x19
c000ad66:	77 34                	ja     c000ad9c <File::tell(unsigned long long*)+0x4c>
c000ad68:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ad6f:	85 d2                	test   edx,edx
c000ad71:	74 29                	je     c000ad9c <File::tell(unsigned long long*)+0x4c>
c000ad73:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ad79:	85 d2                	test   edx,edx
c000ad7b:	74 1f                	je     c000ad9c <File::tell(unsigned long long*)+0x4c>
c000ad7d:	b8 05 00 00 00       	mov    eax,0x5
c000ad82:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ad86:	74 14                	je     c000ad9c <File::tell(unsigned long long*)+0x4c>
c000ad88:	50                   	push   eax
c000ad89:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad8b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad8f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ad95:	52                   	push   edx
c000ad96:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad99:	83 c4 10             	add    esp,0x10
c000ad9c:	83 c4 0c             	add    esp,0xc
c000ad9f:	c3                   	ret    

c000ada0 <File::rewind()>:
c000ada0:	83 ec 10             	sub    esp,0x10
c000ada3:	6a 00                	push   0x0
c000ada5:	6a 00                	push   0x0
c000ada7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adab:	e8 4a ff ff ff       	call   c000acfa <File::seek(unsigned long long)>
c000adb0:	83 c4 1c             	add    esp,0x1c
c000adb3:	c3                   	ret    

c000adb4 <File::unlink()>:
c000adb4:	83 ec 0c             	sub    esp,0xc
c000adb7:	b8 0b 00 00 00       	mov    eax,0xb
c000adbc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adc0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000adc7:	80 f9 19             	cmp    cl,0x19
c000adca:	77 2f                	ja     c000adfb <File::unlink()+0x47>
c000adcc:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000add3:	85 c9                	test   ecx,ecx
c000add5:	74 24                	je     c000adfb <File::unlink()+0x47>
c000add7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000addd:	85 c9                	test   ecx,ecx
c000addf:	74 1a                	je     c000adfb <File::unlink()+0x47>
c000ade1:	b8 06 00 00 00       	mov    eax,0x6
c000ade6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adea:	75 0f                	jne    c000adfb <File::unlink()+0x47>
c000adec:	83 c2 0d             	add    edx,0xd
c000adef:	50                   	push   eax
c000adf0:	50                   	push   eax
c000adf1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adf3:	52                   	push   edx
c000adf4:	51                   	push   ecx
c000adf5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000adf8:	83 c4 10             	add    esp,0x10
c000adfb:	83 c4 0c             	add    esp,0xc
c000adfe:	c3                   	ret    
c000adff:	90                   	nop

c000ae00 <File::rename(char const*)>:
c000ae00:	83 ec 0c             	sub    esp,0xc
c000ae03:	b8 0b 00 00 00       	mov    eax,0xb
c000ae08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae0c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae13:	80 f9 19             	cmp    cl,0x19
c000ae16:	77 32                	ja     c000ae4a <File::rename(char const*)+0x4a>
c000ae18:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000ae1f:	85 c9                	test   ecx,ecx
c000ae21:	74 27                	je     c000ae4a <File::rename(char const*)+0x4a>
c000ae23:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae29:	85 c9                	test   ecx,ecx
c000ae2b:	74 1d                	je     c000ae4a <File::rename(char const*)+0x4a>
c000ae2d:	b8 06 00 00 00       	mov    eax,0x6
c000ae32:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae36:	75 12                	jne    c000ae4a <File::rename(char const*)+0x4a>
c000ae38:	83 c2 0d             	add    edx,0xd
c000ae3b:	50                   	push   eax
c000ae3c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae42:	52                   	push   edx
c000ae43:	51                   	push   ecx
c000ae44:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	83 c4 0c             	add    esp,0xc
c000ae4d:	c3                   	ret    

c000ae4e <File::chfatattr(unsigned char, unsigned char)>:
c000ae4e:	57                   	push   edi
c000ae4f:	b8 0b 00 00 00       	mov    eax,0xb
c000ae54:	56                   	push   esi
c000ae55:	53                   	push   ebx
c000ae56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae5a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae5e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae65:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ae69:	80 f9 19             	cmp    cl,0x19
c000ae6c:	77 37                	ja     c000aea5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae6e:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000ae75:	85 c9                	test   ecx,ecx
c000ae77:	74 2c                	je     c000aea5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae79:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae7f:	85 c9                	test   ecx,ecx
c000ae81:	74 22                	je     c000aea5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae83:	b8 06 00 00 00       	mov    eax,0x6
c000ae88:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae8c:	75 17                	jne    c000aea5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae8e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ae90:	89 f0                	mov    eax,esi
c000ae92:	83 c2 0d             	add    edx,0xd
c000ae95:	0f b6 f0             	movzx  esi,al
c000ae98:	0f b6 db             	movzx  ebx,bl
c000ae9b:	56                   	push   esi
c000ae9c:	53                   	push   ebx
c000ae9d:	52                   	push   edx
c000ae9e:	51                   	push   ecx
c000ae9f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000aea2:	83 c4 10             	add    esp,0x10
c000aea5:	5b                   	pop    ebx
c000aea6:	5e                   	pop    esi
c000aea7:	5f                   	pop    edi
c000aea8:	c3                   	ret    
c000aea9:	90                   	nop

c000aeaa <File::exists()>:
c000aeaa:	83 ec 0c             	sub    esp,0xc
c000aead:	31 c0                	xor    eax,eax
c000aeaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aeb3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aeba:	80 f9 19             	cmp    cl,0x19
c000aebd:	77 24                	ja     c000aee3 <File::exists()+0x39>
c000aebf:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000aec6:	85 c9                	test   ecx,ecx
c000aec8:	74 19                	je     c000aee3 <File::exists()+0x39>
c000aeca:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000aed0:	85 c9                	test   ecx,ecx
c000aed2:	74 0f                	je     c000aee3 <File::exists()+0x39>
c000aed4:	83 c2 0d             	add    edx,0xd
c000aed7:	50                   	push   eax
c000aed8:	50                   	push   eax
c000aed9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000aedb:	52                   	push   edx
c000aedc:	51                   	push   ecx
c000aedd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000aee0:	83 c4 10             	add    esp,0x10
c000aee3:	83 c4 0c             	add    esp,0xc
c000aee6:	c3                   	ret    
c000aee7:	90                   	nop

c000aee8 <File::stat(unsigned long long*, bool*)>:
c000aee8:	56                   	push   esi
c000aee9:	53                   	push   ebx
c000aeea:	50                   	push   eax
c000aeeb:	b8 0b 00 00 00       	mov    eax,0xb
c000aef0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aef4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000aef8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aeff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000af03:	80 f9 19             	cmp    cl,0x19
c000af06:	77 3d                	ja     c000af45 <File::stat(unsigned long long*, bool*)+0x5d>
c000af08:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000af0f:	85 c9                	test   ecx,ecx
c000af11:	74 32                	je     c000af45 <File::stat(unsigned long long*, bool*)+0x5d>
c000af13:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000af19:	85 c9                	test   ecx,ecx
c000af1b:	74 28                	je     c000af45 <File::stat(unsigned long long*, bool*)+0x5d>
c000af1d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af1f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000af23:	74 13                	je     c000af38 <File::stat(unsigned long long*, bool*)+0x50>
c000af25:	83 ec 04             	sub    esp,0x4
c000af28:	56                   	push   esi
c000af29:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000af2f:	51                   	push   ecx
c000af30:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000af33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000af36:	eb 0a                	jmp    c000af42 <File::stat(unsigned long long*, bool*)+0x5a>
c000af38:	53                   	push   ebx
c000af39:	83 c2 0d             	add    edx,0xd
c000af3c:	56                   	push   esi
c000af3d:	52                   	push   edx
c000af3e:	51                   	push   ecx
c000af3f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000af42:	83 c4 10             	add    esp,0x10
c000af45:	5a                   	pop    edx
c000af46:	5b                   	pop    ebx
c000af47:	5e                   	pop    esi
c000af48:	c3                   	ret    

c000af49 <Fs::setcwd(Process*, char*)>:
c000af49:	55                   	push   ebp
c000af4a:	57                   	push   edi
c000af4b:	56                   	push   esi
c000af4c:	53                   	push   ebx
c000af4d:	81 ec 20 02 00 00    	sub    esp,0x220
c000af53:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000af5a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000af60:	57                   	push   edi
c000af61:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000af68:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000af6c:	56                   	push   esi
c000af6d:	e8 60 fa ff ff       	call   c000a9d2 <Fs::standardiseFiles(char*, char const*, char const*)>
c000af72:	89 34 24             	mov    DWORD PTR [esp],esi
c000af75:	e8 b6 55 ff ff       	call   c0000530 <strlen>
c000af7a:	83 c4 10             	add    esp,0x10
c000af7d:	83 f8 02             	cmp    eax,0x2
c000af80:	77 15                	ja     c000af97 <Fs::setcwd(Process*, char*)+0x4e>
c000af82:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000af87:	83 eb 41             	sub    ebx,0x41
c000af8a:	8b 04 9d 20 64 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9be0]
c000af91:	85 c0                	test   eax,eax
c000af93:	75 1c                	jne    c000afb1 <Fs::setcwd(Process*, char*)+0x68>
c000af95:	eb 2f                	jmp    c000afc6 <Fs::setcwd(Process*, char*)+0x7d>
c000af97:	83 ec 0c             	sub    esp,0xc
c000af9a:	56                   	push   esi
c000af9b:	e8 90 55 ff ff       	call   c0000530 <strlen>
c000afa0:	83 c4 10             	add    esp,0x10
c000afa3:	83 f8 03             	cmp    eax,0x3
c000afa6:	75 57                	jne    c000afff <Fs::setcwd(Process*, char*)+0xb6>
c000afa8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000afad:	75 50                	jne    c000afff <Fs::setcwd(Process*, char*)+0xb6>
c000afaf:	eb d1                	jmp    c000af82 <Fs::setcwd(Process*, char*)+0x39>
c000afb1:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000afb8:	75 0c                	jne    c000afc6 <Fs::setcwd(Process*, char*)+0x7d>
c000afba:	83 ec 0c             	sub    esp,0xc
c000afbd:	50                   	push   eax
c000afbe:	e8 d1 1c 00 00       	call   c000cc94 <LogicalDisk::mount()>
c000afc3:	83 c4 10             	add    esp,0x10
c000afc6:	b8 03 00 00 00       	mov    eax,0x3
c000afcb:	83 fb 19             	cmp    ebx,0x19
c000afce:	0f 87 c6 00 00 00    	ja     c000b09a <Fs::setcwd(Process*, char*)+0x151>
c000afd4:	8b 14 9d 20 64 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd9be0]
c000afdb:	b8 05 00 00 00       	mov    eax,0x5
c000afe0:	85 d2                	test   edx,edx
c000afe2:	0f 84 b2 00 00 00    	je     c000b09a <Fs::setcwd(Process*, char*)+0x151>
c000afe8:	b8 06 00 00 00       	mov    eax,0x6
c000afed:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000aff4:	0f 85 92 00 00 00    	jne    c000b08c <Fs::setcwd(Process*, char*)+0x143>
c000affa:	e9 9b 00 00 00       	jmp    c000b09a <Fs::setcwd(Process*, char*)+0x151>
c000afff:	83 ec 0c             	sub    esp,0xc
c000b002:	68 14 01 00 00       	push   0x114
c000b007:	e8 59 c8 ff ff       	call   c0007865 <malloc>
c000b00c:	83 c4 0c             	add    esp,0xc
c000b00f:	89 c3                	mov    ebx,eax
c000b011:	55                   	push   ebp
c000b012:	56                   	push   esi
c000b013:	50                   	push   eax
c000b014:	e8 63 fb ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c000b019:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b01e:	83 c4 0c             	add    esp,0xc
c000b021:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b025:	50                   	push   eax
c000b026:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b02a:	50                   	push   eax
c000b02b:	53                   	push   ebx
c000b02c:	e8 b7 fe ff ff       	call   c000aee8 <File::stat(unsigned long long*, bool*)>
c000b031:	83 c4 10             	add    esp,0x10
c000b034:	83 f8 02             	cmp    eax,0x2
c000b037:	74 27                	je     c000b060 <Fs::setcwd(Process*, char*)+0x117>
c000b039:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b03e:	75 1c                	jne    c000b05c <Fs::setcwd(Process*, char*)+0x113>
c000b040:	b8 02 00 00 00       	mov    eax,0x2
c000b045:	85 db                	test   ebx,ebx
c000b047:	74 51                	je     c000b09a <Fs::setcwd(Process*, char*)+0x151>
c000b049:	83 ec 0c             	sub    esp,0xc
c000b04c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b04e:	53                   	push   ebx
c000b04f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b052:	83 c4 10             	add    esp,0x10
c000b055:	b8 02 00 00 00       	mov    eax,0x2
c000b05a:	eb 3e                	jmp    c000b09a <Fs::setcwd(Process*, char*)+0x151>
c000b05c:	85 c0                	test   eax,eax
c000b05e:	74 1c                	je     c000b07c <Fs::setcwd(Process*, char*)+0x133>
c000b060:	b8 01 00 00 00       	mov    eax,0x1
c000b065:	85 db                	test   ebx,ebx
c000b067:	74 31                	je     c000b09a <Fs::setcwd(Process*, char*)+0x151>
c000b069:	83 ec 0c             	sub    esp,0xc
c000b06c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b06e:	53                   	push   ebx
c000b06f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	b8 01 00 00 00       	mov    eax,0x1
c000b07a:	eb 1e                	jmp    c000b09a <Fs::setcwd(Process*, char*)+0x151>
c000b07c:	85 db                	test   ebx,ebx
c000b07e:	74 0c                	je     c000b08c <Fs::setcwd(Process*, char*)+0x143>
c000b080:	83 ec 0c             	sub    esp,0xc
c000b083:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b085:	53                   	push   ebx
c000b086:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b089:	83 c4 10             	add    esp,0x10
c000b08c:	50                   	push   eax
c000b08d:	50                   	push   eax
c000b08e:	56                   	push   esi
c000b08f:	57                   	push   edi
c000b090:	e8 5b 55 ff ff       	call   c00005f0 <strcpy>
c000b095:	83 c4 10             	add    esp,0x10
c000b098:	31 c0                	xor    eax,eax
c000b09a:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b0a0:	5b                   	pop    ebx
c000b0a1:	5e                   	pop    esi
c000b0a2:	5f                   	pop    edi
c000b0a3:	5d                   	pop    ebp
c000b0a4:	c3                   	ret    
c000b0a5:	90                   	nop

c000b0a6 <Directory::Directory(char const*, Process*)>:
c000b0a6:	83 ec 0c             	sub    esp,0xc
c000b0a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0ad:	83 ec 08             	sub    esp,0x8
c000b0b0:	6a 00                	push   0x0
c000b0b2:	50                   	push   eax
c000b0b3:	e8 4e de ff ff       	call   c0008f06 <UnixFile::UnixFile(int)>
c000b0b8:	83 c4 10             	add    esp,0x10
c000b0bb:	ba ac f9 01 c0       	mov    edx,0xc001f9ac
c000b0c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0c4:	89 10                	mov    DWORD PTR [eax],edx
c000b0c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0ca:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b0d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0d4:	83 c0 0d             	add    eax,0xd
c000b0d7:	83 ec 04             	sub    esp,0x4
c000b0da:	52                   	push   edx
c000b0db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0df:	50                   	push   eax
c000b0e0:	e8 ed f8 ff ff       	call   c000a9d2 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b0e5:	83 c4 10             	add    esp,0x10
c000b0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0ec:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b0ef:	8d 50 bf             	lea    edx,[eax-0x41]
c000b0f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b0fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b100:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b108:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b10e:	25 ff 00 00 00       	and    eax,0xff
c000b113:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b11a:	85 c0                	test   eax,eax
c000b11c:	74 42                	je     c000b160 <Directory::Directory(char const*, Process*)+0xba>
c000b11e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b122:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b128:	25 ff 00 00 00       	and    eax,0xff
c000b12d:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b134:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b13a:	85 c0                	test   eax,eax
c000b13c:	75 22                	jne    c000b160 <Directory::Directory(char const*, Process*)+0xba>
c000b13e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b142:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b148:	25 ff 00 00 00       	and    eax,0xff
c000b14d:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b154:	83 ec 0c             	sub    esp,0xc
c000b157:	50                   	push   eax
c000b158:	e8 37 1b 00 00       	call   c000cc94 <LogicalDisk::mount()>
c000b15d:	83 c4 10             	add    esp,0x10
c000b160:	90                   	nop
c000b161:	83 c4 0c             	add    esp,0xc
c000b164:	c3                   	ret    
c000b165:	90                   	nop

c000b166 <Directory::open()>:
c000b166:	53                   	push   ebx
c000b167:	b8 0b 00 00 00       	mov    eax,0xb
c000b16c:	83 ec 08             	sub    esp,0x8
c000b16f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b173:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b17a:	80 fa 19             	cmp    dl,0x19
c000b17d:	77 3d                	ja     c000b1bc <Directory::open()+0x56>
c000b17f:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000b186:	85 d2                	test   edx,edx
c000b188:	74 32                	je     c000b1bc <Directory::open()+0x56>
c000b18a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b190:	85 d2                	test   edx,edx
c000b192:	74 28                	je     c000b1bc <Directory::open()+0x56>
c000b194:	b8 06 00 00 00       	mov    eax,0x6
c000b199:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b19d:	75 1d                	jne    c000b1bc <Directory::open()+0x56>
c000b19f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b1a5:	50                   	push   eax
c000b1a6:	8b 02                	mov    eax,DWORD PTR [edx]
c000b1a8:	51                   	push   ecx
c000b1a9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b1ac:	51                   	push   ecx
c000b1ad:	52                   	push   edx
c000b1ae:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b1b1:	83 c4 10             	add    esp,0x10
c000b1b4:	85 c0                	test   eax,eax
c000b1b6:	75 04                	jne    c000b1bc <Directory::open()+0x56>
c000b1b8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b1bc:	83 c4 08             	add    esp,0x8
c000b1bf:	5b                   	pop    ebx
c000b1c0:	c3                   	ret    
c000b1c1:	90                   	nop

c000b1c2 <Directory::close()>:
c000b1c2:	53                   	push   ebx
c000b1c3:	b8 0b 00 00 00       	mov    eax,0xb
c000b1c8:	83 ec 08             	sub    esp,0x8
c000b1cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b1cf:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1d6:	80 fa 19             	cmp    dl,0x19
c000b1d9:	77 41                	ja     c000b21c <Directory::close()+0x5a>
c000b1db:	8b 1c 95 20 64 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9be0]
c000b1e2:	85 db                	test   ebx,ebx
c000b1e4:	74 36                	je     c000b21c <Directory::close()+0x5a>
c000b1e6:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b1ed:	74 2d                	je     c000b21c <Directory::close()+0x5a>
c000b1ef:	b8 05 00 00 00       	mov    eax,0x5
c000b1f4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b1f8:	74 22                	je     c000b21c <Directory::close()+0x5a>
c000b1fa:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b1fe:	8b 04 95 20 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9be0]
c000b205:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b20b:	53                   	push   ebx
c000b20c:	53                   	push   ebx
c000b20d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b20f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b215:	50                   	push   eax
c000b216:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b219:	83 c4 10             	add    esp,0x10
c000b21c:	83 c4 08             	add    esp,0x8
c000b21f:	5b                   	pop    ebx
c000b220:	c3                   	ret    
c000b221:	90                   	nop

c000b222 <Directory::unlink()>:
c000b222:	83 ec 0c             	sub    esp,0xc
c000b225:	b8 0b 00 00 00       	mov    eax,0xb
c000b22a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b22e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b235:	80 f9 19             	cmp    cl,0x19
c000b238:	77 2f                	ja     c000b269 <Directory::unlink()+0x47>
c000b23a:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b241:	85 c9                	test   ecx,ecx
c000b243:	74 24                	je     c000b269 <Directory::unlink()+0x47>
c000b245:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b24b:	85 c9                	test   ecx,ecx
c000b24d:	74 1a                	je     c000b269 <Directory::unlink()+0x47>
c000b24f:	b8 06 00 00 00       	mov    eax,0x6
c000b254:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b258:	75 0f                	jne    c000b269 <Directory::unlink()+0x47>
c000b25a:	83 c2 0d             	add    edx,0xd
c000b25d:	50                   	push   eax
c000b25e:	50                   	push   eax
c000b25f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b261:	52                   	push   edx
c000b262:	51                   	push   ecx
c000b263:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b266:	83 c4 10             	add    esp,0x10
c000b269:	83 c4 0c             	add    esp,0xc
c000b26c:	c3                   	ret    
c000b26d:	90                   	nop

c000b26e <Directory::rename(char const*)>:
c000b26e:	83 ec 0c             	sub    esp,0xc
c000b271:	b8 0b 00 00 00       	mov    eax,0xb
c000b276:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b27a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b281:	80 f9 19             	cmp    cl,0x19
c000b284:	77 32                	ja     c000b2b8 <Directory::rename(char const*)+0x4a>
c000b286:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b28d:	85 c9                	test   ecx,ecx
c000b28f:	74 27                	je     c000b2b8 <Directory::rename(char const*)+0x4a>
c000b291:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b297:	85 c9                	test   ecx,ecx
c000b299:	74 1d                	je     c000b2b8 <Directory::rename(char const*)+0x4a>
c000b29b:	b8 06 00 00 00       	mov    eax,0x6
c000b2a0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2a4:	75 12                	jne    c000b2b8 <Directory::rename(char const*)+0x4a>
c000b2a6:	83 c2 0d             	add    edx,0xd
c000b2a9:	50                   	push   eax
c000b2aa:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2b0:	52                   	push   edx
c000b2b1:	51                   	push   ecx
c000b2b2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b2b5:	83 c4 10             	add    esp,0x10
c000b2b8:	83 c4 0c             	add    esp,0xc
c000b2bb:	c3                   	ret    

c000b2bc <Directory::exists()>:
c000b2bc:	83 ec 0c             	sub    esp,0xc
c000b2bf:	31 c0                	xor    eax,eax
c000b2c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2c5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2cc:	80 f9 19             	cmp    cl,0x19
c000b2cf:	77 24                	ja     c000b2f5 <Directory::exists()+0x39>
c000b2d1:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b2d8:	85 c9                	test   ecx,ecx
c000b2da:	74 19                	je     c000b2f5 <Directory::exists()+0x39>
c000b2dc:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2e2:	85 c9                	test   ecx,ecx
c000b2e4:	74 0f                	je     c000b2f5 <Directory::exists()+0x39>
c000b2e6:	83 c2 0d             	add    edx,0xd
c000b2e9:	50                   	push   eax
c000b2ea:	50                   	push   eax
c000b2eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2ed:	52                   	push   edx
c000b2ee:	51                   	push   ecx
c000b2ef:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b2f2:	83 c4 10             	add    esp,0x10
c000b2f5:	83 c4 0c             	add    esp,0xc
c000b2f8:	c3                   	ret    
c000b2f9:	90                   	nop

c000b2fa <Directory::read(dirent*)>:
c000b2fa:	83 ec 1c             	sub    esp,0x1c
c000b2fd:	b8 0b 00 00 00       	mov    eax,0xb
c000b302:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b306:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b30d:	80 fa 19             	cmp    dl,0x19
c000b310:	77 30                	ja     c000b342 <Directory::read(dirent*)+0x48>
c000b312:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000b319:	85 d2                	test   edx,edx
c000b31b:	74 25                	je     c000b342 <Directory::read(dirent*)+0x48>
c000b31d:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b324:	74 1c                	je     c000b342 <Directory::read(dirent*)+0x48>
c000b326:	83 ec 0c             	sub    esp,0xc
c000b329:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b32b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b32f:	52                   	push   edx
c000b330:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b334:	6a 00                	push   0x0
c000b336:	68 10 01 00 00       	push   0x110
c000b33b:	51                   	push   ecx
c000b33c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b33f:	83 c4 20             	add    esp,0x20
c000b342:	83 c4 1c             	add    esp,0x1c
c000b345:	c3                   	ret    

c000b346 <Directory::create()>:
c000b346:	83 ec 0c             	sub    esp,0xc
c000b349:	b8 0b 00 00 00       	mov    eax,0xb
c000b34e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b352:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b359:	80 f9 19             	cmp    cl,0x19
c000b35c:	77 2f                	ja     c000b38d <Directory::create()+0x47>
c000b35e:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b365:	85 c9                	test   ecx,ecx
c000b367:	74 24                	je     c000b38d <Directory::create()+0x47>
c000b369:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b36f:	85 c9                	test   ecx,ecx
c000b371:	74 1a                	je     c000b38d <Directory::create()+0x47>
c000b373:	b8 06 00 00 00       	mov    eax,0x6
c000b378:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b37c:	75 0f                	jne    c000b38d <Directory::create()+0x47>
c000b37e:	83 c2 0d             	add    edx,0xd
c000b381:	50                   	push   eax
c000b382:	50                   	push   eax
c000b383:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b385:	52                   	push   edx
c000b386:	51                   	push   ecx
c000b387:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b38a:	83 c4 10             	add    esp,0x10
c000b38d:	83 c4 0c             	add    esp,0xc
c000b390:	c3                   	ret    
c000b391:	90                   	nop

c000b392 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b392:	b8 0a 00 00 00       	mov    eax,0xa
c000b397:	c3                   	ret    

c000b398 <Bus::Bus(char const*)>:
c000b398:	83 ec 0c             	sub    esp,0xc
c000b39b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b39f:	83 ec 08             	sub    esp,0x8
c000b3a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3a6:	50                   	push   eax
c000b3a7:	e8 30 08 00 00       	call   c000bbdc <Device::Device(char const*)>
c000b3ac:	83 c4 10             	add    esp,0x10
c000b3af:	ba c8 f9 01 c0       	mov    edx,0xc001f9c8
c000b3b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3b8:	89 10                	mov    DWORD PTR [eax],edx
c000b3ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3be:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b3c8:	90                   	nop
c000b3c9:	83 c4 0c             	add    esp,0xc
c000b3cc:	c3                   	ret    
c000b3cd:	90                   	nop
c000b3ce:	66 90                	xchg   ax,ax

c000b3d0 <Bus::~Bus()>:
c000b3d0:	83 ec 0c             	sub    esp,0xc
c000b3d3:	ba c8 f9 01 c0       	mov    edx,0xc001f9c8
c000b3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3dc:	89 10                	mov    DWORD PTR [eax],edx
c000b3de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e2:	83 ec 0c             	sub    esp,0xc
c000b3e5:	50                   	push   eax
c000b3e6:	e8 5b 05 00 00       	call   c000b946 <Device::~Device()>
c000b3eb:	83 c4 10             	add    esp,0x10
c000b3ee:	90                   	nop
c000b3ef:	83 c4 0c             	add    esp,0xc
c000b3f2:	c3                   	ret    
c000b3f3:	90                   	nop

c000b3f4 <Bus::~Bus()>:
c000b3f4:	83 ec 0c             	sub    esp,0xc
c000b3f7:	83 ec 0c             	sub    esp,0xc
c000b3fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3fe:	e8 cd ff ff ff       	call   c000b3d0 <Bus::~Bus()>
c000b403:	83 c4 10             	add    esp,0x10
c000b406:	83 ec 08             	sub    esp,0x8
c000b409:	68 58 01 00 00       	push   0x158
c000b40e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b412:	e8 f9 f0 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000b417:	83 c4 10             	add    esp,0x10
c000b41a:	83 c4 0c             	add    esp,0xc
c000b41d:	c3                   	ret    

c000b41e <beepThread(void*)>:
c000b41e:	83 ec 0c             	sub    esp,0xc
c000b421:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000b426:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b42a:	48                   	dec    eax
c000b42b:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000b430:	75 01                	jne    c000b433 <beepThread(void*)+0x15>
c000b432:	fb                   	sti    
c000b433:	83 ec 0c             	sub    esp,0xc
c000b436:	6b c2 0a             	imul   eax,edx,0xa
c000b439:	50                   	push   eax
c000b43a:	e8 9d 98 00 00       	call   c0014cdc <milliTenthSleep(unsigned int)>
c000b43f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b446:	e8 7e b6 00 00       	call   c0016ac9 <HalMakeBeep(int)>
c000b44b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b453:	83 c4 1c             	add    esp,0x1c
c000b456:	e9 7d 97 00 00       	jmp    c0014bd8 <blockTask(TaskState)>

c000b45b <Krnl::beep(int, int, bool)>:
c000b45b:	56                   	push   esi
c000b45c:	53                   	push   ebx
c000b45d:	83 ec 10             	sub    esp,0x10
c000b460:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b464:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46c:	e8 58 b6 00 00       	call   c0016ac9 <HalMakeBeep(int)>
c000b471:	83 c4 10             	add    esp,0x10
c000b474:	89 f0                	mov    eax,esi
c000b476:	84 c0                	test   al,al
c000b478:	74 1e                	je     c000b498 <Krnl::beep(int, int, bool)+0x3d>
c000b47a:	83 ec 0c             	sub    esp,0xc
c000b47d:	6b db 0a             	imul   ebx,ebx,0xa
c000b480:	53                   	push   ebx
c000b481:	e8 56 98 00 00       	call   c0014cdc <milliTenthSleep(unsigned int)>
c000b486:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b48e:	83 c4 14             	add    esp,0x14
c000b491:	5b                   	pop    ebx
c000b492:	5e                   	pop    esi
c000b493:	e9 31 b6 00 00       	jmp    c0016ac9 <HalMakeBeep(int)>
c000b498:	68 e6 00 00 00       	push   0xe6
c000b49d:	53                   	push   ebx
c000b49e:	68 1e b4 00 c0       	push   0xc000b41e
c000b4a3:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c000b4a9:	e8 e6 92 00 00       	call   c0014794 <Process::createThread(void (*)(void*), void*, int)>
c000b4ae:	83 c4 14             	add    esp,0x14
c000b4b1:	5b                   	pop    ebx
c000b4b2:	5e                   	pop    esi
c000b4b3:	c3                   	ret    

c000b4b4 <User::loadClockSettings(int)>:
c000b4b4:	53                   	push   ebx
c000b4b5:	83 ec 14             	sub    esp,0x14
c000b4b8:	68 14 01 00 00       	push   0x114
c000b4bd:	e8 a3 c3 ff ff       	call   c0007865 <malloc>
c000b4c2:	83 c4 0c             	add    esp,0xc
c000b4c5:	89 c3                	mov    ebx,eax
c000b4c7:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c000b4cd:	68 ec f9 01 c0       	push   0xc001f9ec
c000b4d2:	50                   	push   eax
c000b4d3:	e8 a4 f6 ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c000b4d8:	58                   	pop    eax
c000b4d9:	5a                   	pop    edx
c000b4da:	6a 01                	push   0x1
c000b4dc:	53                   	push   ebx
c000b4dd:	e8 5a f7 ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c000b4e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b4e5:	e8 b0 f7 ff ff       	call   c000ac9a <File::close()>
c000b4ea:	83 c4 10             	add    esp,0x10
c000b4ed:	85 db                	test   ebx,ebx
c000b4ef:	74 0f                	je     c000b500 <User::loadClockSettings(int)+0x4c>
c000b4f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4f3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b4f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b4fa:	83 c4 08             	add    esp,0x8
c000b4fd:	5b                   	pop    ebx
c000b4fe:	ff e0                	jmp    eax
c000b500:	83 c4 08             	add    esp,0x8
c000b503:	5b                   	pop    ebx
c000b504:	c3                   	ret    
c000b505:	90                   	nop

c000b506 <Clock::Clock(char const*)>:
c000b506:	83 ec 0c             	sub    esp,0xc
c000b509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b50d:	83 ec 08             	sub    esp,0x8
c000b510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b514:	50                   	push   eax
c000b515:	e8 c2 06 00 00       	call   c000bbdc <Device::Device(char const*)>
c000b51a:	83 c4 10             	add    esp,0x10
c000b51d:	ba 14 fa 01 c0       	mov    edx,0xc001fa14
c000b522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b526:	89 10                	mov    DWORD PTR [eax],edx
c000b528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b52c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b536:	90                   	nop
c000b537:	83 c4 0c             	add    esp,0xc
c000b53a:	c3                   	ret    
c000b53b:	90                   	nop

c000b53c <Clock::~Clock()>:
c000b53c:	83 ec 0c             	sub    esp,0xc
c000b53f:	ba 14 fa 01 c0       	mov    edx,0xc001fa14
c000b544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b548:	89 10                	mov    DWORD PTR [eax],edx
c000b54a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b54e:	83 ec 0c             	sub    esp,0xc
c000b551:	50                   	push   eax
c000b552:	e8 ef 03 00 00       	call   c000b946 <Device::~Device()>
c000b557:	83 c4 10             	add    esp,0x10
c000b55a:	90                   	nop
c000b55b:	83 c4 0c             	add    esp,0xc
c000b55e:	c3                   	ret    
c000b55f:	90                   	nop

c000b560 <Clock::~Clock()>:
c000b560:	83 ec 0c             	sub    esp,0xc
c000b563:	83 ec 0c             	sub    esp,0xc
c000b566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b56a:	e8 cd ff ff ff       	call   c000b53c <Clock::~Clock()>
c000b56f:	83 c4 10             	add    esp,0x10
c000b572:	83 ec 08             	sub    esp,0x8
c000b575:	68 58 01 00 00       	push   0x158
c000b57a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b57e:	e8 8d ef ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000b583:	83 c4 10             	add    esp,0x10
c000b586:	83 c4 0c             	add    esp,0xc
c000b589:	c3                   	ret    

c000b58a <Clock::timeInSecondsLocal()>:
c000b58a:	53                   	push   ebx
c000b58b:	83 ec 14             	sub    esp,0x14
c000b58e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b592:	8b 10                	mov    edx,DWORD PTR [eax]
c000b594:	50                   	push   eax
c000b595:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b598:	0f b6 0d b8 3f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023fb8
c000b59f:	03 0d bc 3f 02 c0    	add    ecx,DWORD PTR ds:0xc0023fbc
c000b5a5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b5ab:	89 cb                	mov    ebx,ecx
c000b5ad:	c1 fb 1f             	sar    ebx,0x1f
c000b5b0:	01 c8                	add    eax,ecx
c000b5b2:	11 da                	adc    edx,ebx
c000b5b4:	83 c4 10             	add    esp,0x10
c000b5b7:	31 c9                	xor    ecx,ecx
c000b5b9:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b5c0:	74 05                	je     c000b5c7 <Clock::timeInSecondsLocal()+0x3d>
c000b5c2:	b9 08 07 00 00       	mov    ecx,0x708
c000b5c7:	31 db                	xor    ebx,ebx
c000b5c9:	01 c8                	add    eax,ecx
c000b5cb:	11 da                	adc    edx,ebx
c000b5cd:	83 c4 08             	add    esp,0x8
c000b5d0:	5b                   	pop    ebx
c000b5d1:	c3                   	ret    

c000b5d2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b5d2:	57                   	push   edi
c000b5d3:	56                   	push   esi
c000b5d4:	53                   	push   ebx
c000b5d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b5d9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b5dd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5df:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b5e3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b5e6:	0f b6 05 b8 3f 02 c0 	movzx  eax,BYTE PTR ds:0xc0023fb8
c000b5ed:	03 05 bc 3f 02 c0    	add    eax,DWORD PTR ds:0xc0023fbc
c000b5f3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b5f9:	99                   	cdq    
c000b5fa:	29 c6                	sub    esi,eax
c000b5fc:	19 d7                	sbb    edi,edx
c000b5fe:	89 f0                	mov    eax,esi
c000b600:	89 fa                	mov    edx,edi
c000b602:	31 f6                	xor    esi,esi
c000b604:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b60b:	74 05                	je     c000b612 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b60d:	be 08 07 00 00       	mov    esi,0x708
c000b612:	31 ff                	xor    edi,edi
c000b614:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b618:	29 f0                	sub    eax,esi
c000b61a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b61e:	19 fa                	sbb    edx,edi
c000b620:	89 d8                	mov    eax,ebx
c000b622:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b626:	5b                   	pop    ebx
c000b627:	5e                   	pop    esi
c000b628:	5f                   	pop    edi
c000b629:	ff e0                	jmp    eax

c000b62b <datetimeToSeconds(datetime_t)>:
c000b62b:	55                   	push   ebp
c000b62c:	57                   	push   edi
c000b62d:	56                   	push   esi
c000b62e:	53                   	push   ebx
c000b62f:	83 ec 14             	sub    esp,0x14
c000b632:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b636:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b63a:	89 d3                	mov    ebx,edx
c000b63c:	0f b6 c6             	movzx  eax,dh
c000b63f:	c1 eb 10             	shr    ebx,0x10
c000b642:	48                   	dec    eax
c000b643:	66 81 eb 6c 07       	sub    bx,0x76c
c000b648:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b64c:	0f b6 f5             	movzx  esi,ch
c000b64f:	89 cf                	mov    edi,ecx
c000b651:	6b f6 3c             	imul   esi,esi,0x3c
c000b654:	c1 ef 10             	shr    edi,0x10
c000b657:	0f b6 c9             	movzx  ecx,cl
c000b65a:	89 f8                	mov    eax,edi
c000b65c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b662:	0f b6 f8             	movzx  edi,al
c000b665:	0f b6 d2             	movzx  edx,dl
c000b668:	01 fe                	add    esi,edi
c000b66a:	01 f1                	add    ecx,esi
c000b66c:	0f b7 f3             	movzx  esi,bx
c000b66f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b673:	c1 f9 1f             	sar    ecx,0x1f
c000b676:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b67b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b67f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b684:	8b 0c 8d 60 fa 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe05a0]
c000b68b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b68f:	76 29                	jbe    c000b6ba <datetimeToSeconds(datetime_t)+0x8f>
c000b691:	f6 c3 03             	test   bl,0x3
c000b694:	75 24                	jne    c000b6ba <datetimeToSeconds(datetime_t)+0x8f>
c000b696:	31 d2                	xor    edx,edx
c000b698:	bf 64 00 00 00       	mov    edi,0x64
c000b69d:	89 d8                	mov    eax,ebx
c000b69f:	66 f7 f7             	div    di
c000b6a2:	66 85 d2             	test   dx,dx
c000b6a5:	75 12                	jne    c000b6b9 <datetimeToSeconds(datetime_t)+0x8e>
c000b6a7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b6ad:	bf 90 01 00 00       	mov    edi,0x190
c000b6b2:	99                   	cdq    
c000b6b3:	f7 ff                	idiv   edi
c000b6b5:	85 d2                	test   edx,edx
c000b6b7:	75 01                	jne    c000b6ba <datetimeToSeconds(datetime_t)+0x8f>
c000b6b9:	41                   	inc    ecx
c000b6ba:	66 83 fb 46          	cmp    bx,0x46
c000b6be:	76 45                	jbe    c000b705 <datetimeToSeconds(datetime_t)+0xda>
c000b6c0:	bb 46 00 00 00       	mov    ebx,0x46
c000b6c5:	bf 64 00 00 00       	mov    edi,0x64
c000b6ca:	bd 90 01 00 00       	mov    ebp,0x190
c000b6cf:	b8 6d 01 00 00       	mov    eax,0x16d
c000b6d4:	f6 c3 03             	test   bl,0x3
c000b6d7:	75 23                	jne    c000b6fc <datetimeToSeconds(datetime_t)+0xd1>
c000b6d9:	89 d8                	mov    eax,ebx
c000b6db:	99                   	cdq    
c000b6dc:	f7 ff                	idiv   edi
c000b6de:	b8 6e 01 00 00       	mov    eax,0x16e
c000b6e3:	85 d2                	test   edx,edx
c000b6e5:	75 15                	jne    c000b6fc <datetimeToSeconds(datetime_t)+0xd1>
c000b6e7:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b6ed:	99                   	cdq    
c000b6ee:	f7 fd                	idiv   ebp
c000b6f0:	31 c0                	xor    eax,eax
c000b6f2:	85 d2                	test   edx,edx
c000b6f4:	0f 94 c0             	sete   al
c000b6f7:	05 6d 01 00 00       	add    eax,0x16d
c000b6fc:	01 c1                	add    ecx,eax
c000b6fe:	43                   	inc    ebx
c000b6ff:	39 f3                	cmp    ebx,esi
c000b701:	7c cc                	jl     c000b6cf <datetimeToSeconds(datetime_t)+0xa4>
c000b703:	eb 3b                	jmp    c000b740 <datetimeToSeconds(datetime_t)+0x115>
c000b705:	74 39                	je     c000b740 <datetimeToSeconds(datetime_t)+0x115>
c000b707:	b8 45 00 00 00       	mov    eax,0x45
c000b70c:	89 c2                	mov    edx,eax
c000b70e:	83 e2 03             	and    edx,0x3
c000b711:	39 f0                	cmp    eax,esi
c000b713:	7e 13                	jle    c000b728 <datetimeToSeconds(datetime_t)+0xfd>
c000b715:	85 d2                	test   edx,edx
c000b717:	0f 94 c2             	sete   dl
c000b71a:	48                   	dec    eax
c000b71b:	0f b6 d2             	movzx  edx,dl
c000b71e:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b724:	29 d1                	sub    ecx,edx
c000b726:	eb e4                	jmp    c000b70c <datetimeToSeconds(datetime_t)+0xe1>
c000b728:	b8 6d 01 00 00       	mov    eax,0x16d
c000b72d:	85 d2                	test   edx,edx
c000b72f:	75 0d                	jne    c000b73e <datetimeToSeconds(datetime_t)+0x113>
c000b731:	31 c0                	xor    eax,eax
c000b733:	66 85 db             	test   bx,bx
c000b736:	0f 95 c0             	setne  al
c000b739:	05 6d 01 00 00       	add    eax,0x16d
c000b73e:	29 c1                	sub    ecx,eax
c000b740:	b8 80 51 01 00       	mov    eax,0x15180
c000b745:	f7 e9                	imul   ecx
c000b747:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b74b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b74f:	83 c4 14             	add    esp,0x14
c000b752:	5b                   	pop    ebx
c000b753:	5e                   	pop    esi
c000b754:	5f                   	pop    edi
c000b755:	5d                   	pop    ebp
c000b756:	c3                   	ret    
c000b757:	90                   	nop

c000b758 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b758:	57                   	push   edi
c000b759:	56                   	push   esi
c000b75a:	53                   	push   ebx
c000b75b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b75f:	8b 06                	mov    eax,DWORD PTR [esi]
c000b761:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b764:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b768:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b76c:	e8 ba fe ff ff       	call   c000b62b <datetimeToSeconds(datetime_t)>
c000b771:	59                   	pop    ecx
c000b772:	0f b6 0d b8 3f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023fb8
c000b779:	5b                   	pop    ebx
c000b77a:	03 0d bc 3f 02 c0    	add    ecx,DWORD PTR ds:0xc0023fbc
c000b780:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b786:	89 cb                	mov    ebx,ecx
c000b788:	c1 fb 1f             	sar    ebx,0x1f
c000b78b:	29 c8                	sub    eax,ecx
c000b78d:	19 da                	sbb    edx,ebx
c000b78f:	31 c9                	xor    ecx,ecx
c000b791:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b798:	74 05                	je     c000b79f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b79a:	b9 08 07 00 00       	mov    ecx,0x708
c000b79f:	31 db                	xor    ebx,ebx
c000b7a1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b7a5:	29 c8                	sub    eax,ecx
c000b7a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b7ab:	19 da                	sbb    edx,ebx
c000b7ad:	89 f8                	mov    eax,edi
c000b7af:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b7b3:	5b                   	pop    ebx
c000b7b4:	5e                   	pop    esi
c000b7b5:	5f                   	pop    edi
c000b7b6:	ff e0                	jmp    eax

c000b7b8 <secondsToDatetime(unsigned long long)>:
c000b7b8:	55                   	push   ebp
c000b7b9:	57                   	push   edi
c000b7ba:	56                   	push   esi
c000b7bb:	53                   	push   ebx
c000b7bc:	83 ec 1c             	sub    esp,0x1c
c000b7bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b7c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7c7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b7cb:	6a 00                	push   0x0
c000b7cd:	68 80 51 01 00       	push   0x15180
c000b7d2:	55                   	push   ebp
c000b7d3:	57                   	push   edi
c000b7d4:	e8 07 25 01 00       	call   c001dce0 <__udivdi3>
c000b7d9:	83 c4 10             	add    esp,0x10
c000b7dc:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b7e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7e6:	6a 00                	push   0x0
c000b7e8:	68 80 51 01 00       	push   0x15180
c000b7ed:	55                   	push   ebp
c000b7ee:	57                   	push   edi
c000b7ef:	bf 10 0e 00 00       	mov    edi,0xe10
c000b7f4:	e8 e7 25 01 00       	call   c001dde0 <__umoddi3>
c000b7f9:	83 c4 10             	add    esp,0x10
c000b7fc:	99                   	cdq    
c000b7fd:	f7 ff                	idiv   edi
c000b7ff:	bf 3c 00 00 00       	mov    edi,0x3c
c000b804:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b807:	89 d0                	mov    eax,edx
c000b809:	99                   	cdq    
c000b80a:	f7 ff                	idiv   edi
c000b80c:	85 db                	test   ebx,ebx
c000b80e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b811:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b814:	79 11                	jns    c000b827 <secondsToDatetime(unsigned long long)+0x6f>
c000b816:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b81a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b820:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b825:	eb 07                	jmp    c000b82e <secondsToDatetime(unsigned long long)+0x76>
c000b827:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b82c:	89 d8                	mov    eax,ebx
c000b82e:	bf b4 05 00 00       	mov    edi,0x5b4
c000b833:	99                   	cdq    
c000b834:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b839:	f7 f9                	idiv   ecx
c000b83b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b840:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b844:	31 d2                	xor    edx,edx
c000b846:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b84e:	01 c3                	add    ebx,eax
c000b850:	89 d8                	mov    eax,ebx
c000b852:	f7 f1                	div    ecx
c000b854:	31 d2                	xor    edx,edx
c000b856:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b859:	89 d8                	mov    eax,ebx
c000b85b:	f7 f7                	div    edi
c000b85d:	31 d2                	xor    edx,edx
c000b85f:	29 c1                	sub    ecx,eax
c000b861:	89 d8                	mov    eax,ebx
c000b863:	f7 f5                	div    ebp
c000b865:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b86a:	29 c1                	sub    ecx,eax
c000b86c:	31 d2                	xor    edx,edx
c000b86e:	89 c8                	mov    eax,ecx
c000b870:	f7 f5                	div    ebp
c000b872:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b877:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b87b:	31 d2                	xor    edx,edx
c000b87d:	89 c8                	mov    eax,ecx
c000b87f:	f7 f5                	div    ebp
c000b881:	31 d2                	xor    edx,edx
c000b883:	01 c3                	add    ebx,eax
c000b885:	89 c8                	mov    eax,ecx
c000b887:	f7 f7                	div    edi
c000b889:	bf 99 00 00 00       	mov    edi,0x99
c000b88e:	29 c3                	sub    ebx,eax
c000b890:	31 d2                	xor    edx,edx
c000b892:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b89a:	29 c3                	sub    ebx,eax
c000b89c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b89f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b8a2:	bb 05 00 00 00       	mov    ebx,0x5
c000b8a7:	83 c1 02             	add    ecx,0x2
c000b8aa:	89 c8                	mov    eax,ecx
c000b8ac:	f7 f7                	div    edi
c000b8ae:	31 d2                	xor    edx,edx
c000b8b0:	89 c7                	mov    edi,eax
c000b8b2:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b8b8:	83 c0 02             	add    eax,0x2
c000b8bb:	f7 f3                	div    ebx
c000b8bd:	89 eb                	mov    ebx,ebp
c000b8bf:	29 c3                	sub    ebx,eax
c000b8c1:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b8c7:	88 1e                	mov    BYTE PTR [esi],bl
c000b8c9:	19 c0                	sbb    eax,eax
c000b8cb:	31 d2                	xor    edx,edx
c000b8cd:	83 e0 0c             	and    eax,0xc
c000b8d0:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b8d4:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b8dc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b8e0:	83 f9 01             	cmp    ecx,0x1
c000b8e3:	0f 96 c2             	setbe  dl
c000b8e6:	41                   	inc    ecx
c000b8e7:	01 d0                	add    eax,edx
c000b8e9:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b8ec:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b8f0:	83 c4 1c             	add    esp,0x1c
c000b8f3:	89 f0                	mov    eax,esi
c000b8f5:	5b                   	pop    ebx
c000b8f6:	5e                   	pop    esi
c000b8f7:	5f                   	pop    edi
c000b8f8:	5d                   	pop    ebp
c000b8f9:	c2 04 00             	ret    0x4

c000b8fc <Clock::timeInDatetimeLocal()>:
c000b8fc:	53                   	push   ebx
c000b8fd:	83 ec 14             	sub    esp,0x14
c000b900:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b904:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b908:	e8 7d fc ff ff       	call   c000b58a <Clock::timeInSecondsLocal()>
c000b90d:	83 c4 0c             	add    esp,0xc
c000b910:	52                   	push   edx
c000b911:	50                   	push   eax
c000b912:	53                   	push   ebx
c000b913:	e8 a0 fe ff ff       	call   c000b7b8 <secondsToDatetime(unsigned long long)>
c000b918:	89 d8                	mov    eax,ebx
c000b91a:	83 c4 14             	add    esp,0x14
c000b91d:	5b                   	pop    ebx
c000b91e:	c2 04 00             	ret    0x4
c000b921:	90                   	nop

c000b922 <Device::hibernate()>:
c000b922:	c3                   	ret    
c000b923:	90                   	nop

c000b924 <Device::wake()>:
c000b924:	c3                   	ret    
c000b925:	90                   	nop

c000b926 <Device::detect()>:
c000b926:	c3                   	ret    
c000b927:	90                   	nop

c000b928 <Device::disableLegacy()>:
c000b928:	c3                   	ret    
c000b929:	90                   	nop

c000b92a <Device::powerSaving(PowerSavingLevel)>:
c000b92a:	c3                   	ret    
c000b92b:	90                   	nop

c000b92c <DriverlessDevice::close(int, int, void*)>:
c000b92c:	31 c0                	xor    eax,eax
c000b92e:	c3                   	ret    
c000b92f:	90                   	nop

c000b930 <DriverlessDevice::detect()>:
c000b930:	c3                   	ret    
c000b931:	90                   	nop

c000b932 <DriverlessDevice::open(int, int, void*)>:
c000b932:	83 ec 18             	sub    esp,0x18
c000b935:	68 90 fa 01 c0       	push   0xc001fa90
c000b93a:	e8 88 4a 00 00       	call   c00103c7 <KePanic(char const*)>
c000b93f:	83 c8 ff             	or     eax,0xffffffff
c000b942:	83 c4 1c             	add    esp,0x1c
c000b945:	c3                   	ret    

c000b946 <Device::~Device()>:
c000b946:	ba f0 fa 01 c0       	mov    edx,0xc001faf0
c000b94b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b94f:	89 10                	mov    DWORD PTR [eax],edx
c000b951:	90                   	nop
c000b952:	c3                   	ret    
c000b953:	90                   	nop

c000b954 <Device::~Device()>:
c000b954:	83 ec 0c             	sub    esp,0xc
c000b957:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b95b:	e8 e6 ff ff ff       	call   c000b946 <Device::~Device()>
c000b960:	83 c4 04             	add    esp,0x4
c000b963:	83 ec 08             	sub    esp,0x8
c000b966:	68 58 01 00 00       	push   0x158
c000b96b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b96f:	e8 9c eb ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000b974:	83 c4 10             	add    esp,0x10
c000b977:	83 c4 0c             	add    esp,0xc
c000b97a:	c3                   	ret    
c000b97b:	90                   	nop

c000b97c <Device::findAndLoadDriver()>:
c000b97c:	c7 44 24 04 ae fa 01 c0 	mov    DWORD PTR [esp+0x4],0xc001faae
c000b984:	e9 7d ec ff ff       	jmp    c000a606 <Dbg::kprintf(char const*, ...)>
c000b989:	90                   	nop

c000b98a <Device::preOpenPCI(PCIDeviceInfo)>:
c000b98a:	57                   	push   edi
c000b98b:	b9 09 00 00 00       	mov    ecx,0x9
c000b990:	56                   	push   esi
c000b991:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b995:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b999:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b9a3:	81 c7 18 01 00 00    	add    edi,0x118
c000b9a9:	fc                   	cld    
c000b9aa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b9ac:	5e                   	pop    esi
c000b9ad:	5f                   	pop    edi
c000b9ae:	c3                   	ret    
c000b9af:	90                   	nop

c000b9b0 <Device::preOpenACPI(void*, char*, char*)>:
c000b9b0:	57                   	push   edi
c000b9b1:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b9b6:	56                   	push   esi
c000b9b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9bf:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b9c9:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b9cf:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b9d5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b9d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9db:	b9 0e 00 00 00       	mov    ecx,0xe
c000b9e0:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b9e6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b9ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9ec:	5e                   	pop    esi
c000b9ed:	5f                   	pop    edi
c000b9ee:	c3                   	ret    
c000b9ef:	90                   	nop

c000b9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b9f0:	53                   	push   ebx
c000b9f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b9f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b9fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba01:	0f b6 c0             	movzx  eax,al
c000ba04:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ba08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba10:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba14:	5b                   	pop    ebx
c000ba15:	e9 a6 05 00 00       	jmp    c000bfc0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ba1a <Device::getParent()>:
c000ba1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba1e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ba24:	c3                   	ret    
c000ba25:	90                   	nop

c000ba26 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ba26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba2e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ba33:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba37:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba3f:	e9 e8 06 00 00       	jmp    c000c12c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ba44 <Device::addChild(Device*)>:
c000ba44:	53                   	push   ebx
c000ba45:	83 ec 08             	sub    esp,0x8
c000ba48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba50:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ba56:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ba5c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ba5e:	85 d2                	test   edx,edx
c000ba60:	74 04                	je     c000ba66 <Device::addChild(Device*)+0x22>
c000ba62:	89 d3                	mov    ebx,edx
c000ba64:	eb f6                	jmp    c000ba5c <Device::addChild(Device*)+0x18>
c000ba66:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ba69:	83 ec 0c             	sub    esp,0xc
c000ba6c:	6a 08                	push   0x8
c000ba6e:	e8 f2 bd ff ff       	call   c0007865 <malloc>
c000ba73:	89 03                	mov    DWORD PTR [ebx],eax
c000ba75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ba7b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba82:	83 c4 18             	add    esp,0x18
c000ba85:	5b                   	pop    ebx
c000ba86:	c3                   	ret    
c000ba87:	90                   	nop

c000ba88 <Device::removeAllChildren()>:
c000ba88:	56                   	push   esi
c000ba89:	53                   	push   ebx
c000ba8a:	52                   	push   edx
c000ba8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba8f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ba95:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba98:	74 17                	je     c000bab1 <Device::removeAllChildren()+0x29>
c000ba9a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ba9d:	85 c0                	test   eax,eax
c000ba9f:	74 0c                	je     c000baad <Device::removeAllChildren()+0x25>
c000baa1:	83 ec 0c             	sub    esp,0xc
c000baa4:	8b 10                	mov    edx,DWORD PTR [eax]
c000baa6:	50                   	push   eax
c000baa7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000baaa:	83 c4 10             	add    esp,0x10
c000baad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baaf:	eb e4                	jmp    c000ba95 <Device::removeAllChildren()+0xd>
c000bab1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bab7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000babd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bac3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000baca:	58                   	pop    eax
c000bacb:	5b                   	pop    ebx
c000bacc:	5e                   	pop    esi
c000bacd:	c3                   	ret    

c000bace <Device::hibernateAll()>:
c000bace:	53                   	push   ebx
c000bacf:	83 ec 14             	sub    esp,0x14
c000bad2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bad6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bad8:	53                   	push   ebx
c000bad9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000badc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bae2:	83 c4 10             	add    esp,0x10
c000bae5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bae8:	74 0f                	je     c000baf9 <Device::hibernateAll()+0x2b>
c000baea:	83 ec 0c             	sub    esp,0xc
c000baed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000baf0:	e8 d9 ff ff ff       	call   c000bace <Device::hibernateAll()>
c000baf5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baf7:	eb e9                	jmp    c000bae2 <Device::hibernateAll()+0x14>
c000baf9:	83 c4 08             	add    esp,0x8
c000bafc:	5b                   	pop    ebx
c000bafd:	c3                   	ret    

c000bafe <Device::wakeAll()>:
c000bafe:	53                   	push   ebx
c000baff:	83 ec 14             	sub    esp,0x14
c000bb02:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb06:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb08:	53                   	push   ebx
c000bb09:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bb0c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb18:	74 0f                	je     c000bb29 <Device::wakeAll()+0x2b>
c000bb1a:	83 ec 0c             	sub    esp,0xc
c000bb1d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb20:	e8 d9 ff ff ff       	call   c000bafe <Device::wakeAll()>
c000bb25:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb27:	eb e9                	jmp    c000bb12 <Device::wakeAll()+0x14>
c000bb29:	83 c4 08             	add    esp,0x8
c000bb2c:	5b                   	pop    ebx
c000bb2d:	c3                   	ret    

c000bb2e <Device::detectAll()>:
c000bb2e:	53                   	push   ebx
c000bb2f:	83 ec 14             	sub    esp,0x14
c000bb32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb36:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb38:	53                   	push   ebx
c000bb39:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bb3c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb48:	74 0f                	je     c000bb59 <Device::detectAll()+0x2b>
c000bb4a:	83 ec 0c             	sub    esp,0xc
c000bb4d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb50:	e8 d9 ff ff ff       	call   c000bb2e <Device::detectAll()>
c000bb55:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb57:	eb e9                	jmp    c000bb42 <Device::detectAll()+0x14>
c000bb59:	83 c4 08             	add    esp,0x8
c000bb5c:	5b                   	pop    ebx
c000bb5d:	c3                   	ret    

c000bb5e <Device::disableLegacyAll()>:
c000bb5e:	c3                   	ret    
c000bb5f:	90                   	nop

c000bb60 <Device::loadDriversForAll()>:
c000bb60:	c3                   	ret    
c000bb61:	90                   	nop

c000bb62 <Device::closeAll()>:
c000bb62:	53                   	push   ebx
c000bb63:	83 ec 08             	sub    esp,0x8
c000bb66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb6c:	6a 00                	push   0x0
c000bb6e:	6a 00                	push   0x0
c000bb70:	6a 00                	push   0x0
c000bb72:	53                   	push   ebx
c000bb73:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb76:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb7c:	83 c4 10             	add    esp,0x10
c000bb7f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb82:	74 0f                	je     c000bb93 <Device::closeAll()+0x31>
c000bb84:	83 ec 0c             	sub    esp,0xc
c000bb87:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb8a:	e8 d3 ff ff ff       	call   c000bb62 <Device::closeAll()>
c000bb8f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb91:	eb e9                	jmp    c000bb7c <Device::closeAll()+0x1a>
c000bb93:	83 c4 08             	add    esp,0x8
c000bb96:	5b                   	pop    ebx
c000bb97:	c3                   	ret    

c000bb98 <Device::powerSavingAll(PowerSavingLevel)>:
c000bb98:	56                   	push   esi
c000bb99:	53                   	push   ebx
c000bb9a:	83 ec 0c             	sub    esp,0xc
c000bb9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bba1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bba5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bba7:	56                   	push   esi
c000bba8:	53                   	push   ebx
c000bba9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bbac:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bbb2:	83 c4 10             	add    esp,0x10
c000bbb5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbb8:	74 0f                	je     c000bbc9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bbba:	52                   	push   edx
c000bbbb:	52                   	push   edx
c000bbbc:	56                   	push   esi
c000bbbd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bbc0:	e8 d3 ff ff ff       	call   c000bb98 <Device::powerSavingAll(PowerSavingLevel)>
c000bbc5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbc7:	eb e9                	jmp    c000bbb2 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bbc9:	58                   	pop    eax
c000bbca:	5b                   	pop    ebx
c000bbcb:	5e                   	pop    esi
c000bbcc:	c3                   	ret    
c000bbcd:	90                   	nop

c000bbce <Device::setName(char const*)>:
c000bbce:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bbd6:	e9 15 4a ff ff       	jmp    c00005f0 <strcpy>
c000bbdb:	90                   	nop

c000bbdc <Device::Device(char const*)>:
c000bbdc:	83 ec 1c             	sub    esp,0x1c
c000bbdf:	ba f0 fa 01 c0       	mov    edx,0xc001faf0
c000bbe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbe8:	89 10                	mov    DWORD PTR [eax],edx
c000bbea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbee:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bbf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbfc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bc06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc0a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc18:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc22:	83 ec 08             	sub    esp,0x8
c000bc25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc2d:	e8 9c ff ff ff       	call   c000bbce <Device::setName(char const*)>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bc3d:	83 ec 0c             	sub    esp,0xc
c000bc40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc44:	e8 1c bc ff ff       	call   c0007865 <malloc>
c000bc49:	83 c4 10             	add    esp,0x10
c000bc4c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc52:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc59:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc5d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bc63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc67:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc77:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc7d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc88:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bc8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc93:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bc9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc9e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcac:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bcb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcba:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bcc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcc8:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000bcd2:	90                   	nop
c000bcd3:	83 c4 1c             	add    esp,0x1c
c000bcd6:	c3                   	ret    
c000bcd7:	90                   	nop

c000bcd8 <Device::getName()>:
c000bcd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bcdc:	05 d0 00 00 00       	add    eax,0xd0
c000bce1:	c3                   	ret    

c000bce2 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bce2:	83 ec 0c             	sub    esp,0xc
c000bce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bce9:	83 ec 08             	sub    esp,0x8
c000bcec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf0:	50                   	push   eax
c000bcf1:	e8 e6 fe ff ff       	call   c000bbdc <Device::Device(char const*)>
c000bcf6:	83 c4 10             	add    esp,0x10
c000bcf9:	ba 1c fb 01 c0       	mov    edx,0xc001fb1c
c000bcfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd02:	89 10                	mov    DWORD PTR [eax],edx
c000bd04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd08:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bd12:	90                   	nop
c000bd13:	83 c4 0c             	add    esp,0xc
c000bd16:	c3                   	ret    
c000bd17:	90                   	nop

c000bd18 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bd18:	57                   	push   edi
c000bd19:	56                   	push   esi
c000bd1a:	53                   	push   ebx
c000bd1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd1f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd23:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd27:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bd2d:	75 0c                	jne    c000bd3b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bd2f:	52                   	push   edx
c000bd30:	52                   	push   edx
c000bd31:	53                   	push   ebx
c000bd32:	56                   	push   esi
c000bd33:	e8 5a 24 01 00       	call   c001e192 <LinkedList<Device>::addElement(Device*)>
c000bd38:	83 c4 10             	add    esp,0x10
c000bd3b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bd41:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bd44:	74 12                	je     c000bd58 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bd46:	50                   	push   eax
c000bd47:	57                   	push   edi
c000bd48:	56                   	push   esi
c000bd49:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bd4c:	e8 c7 ff ff ff       	call   c000bd18 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd51:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bd53:	83 c4 10             	add    esp,0x10
c000bd56:	eb e9                	jmp    c000bd41 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bd58:	5b                   	pop    ebx
c000bd59:	5e                   	pop    esi
c000bd5a:	5f                   	pop    edi
c000bd5b:	c3                   	ret    

c000bd5c <getDevicesOfType(DeviceType)>:
c000bd5c:	53                   	push   ebx
c000bd5d:	83 ec 14             	sub    esp,0x14
c000bd60:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd64:	53                   	push   ebx
c000bd65:	e8 04 25 01 00       	call   c001e26e <LinkedList<Device>::LinkedList()>
c000bd6a:	83 c4 0c             	add    esp,0xc
c000bd6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd71:	53                   	push   ebx
c000bd72:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000bd78:	e8 9b ff ff ff       	call   c000bd18 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd7d:	89 d8                	mov    eax,ebx
c000bd7f:	83 c4 18             	add    esp,0x18
c000bd82:	5b                   	pop    ebx
c000bd83:	c2 04 00             	ret    0x4
c000bd86:	66 90                	xchg   ax,ax

c000bd88 <HardDiskController::HardDiskController(char const*)>:
c000bd88:	83 ec 0c             	sub    esp,0xc
c000bd8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd8f:	83 ec 08             	sub    esp,0x8
c000bd92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd96:	50                   	push   eax
c000bd97:	e8 40 fe ff ff       	call   c000bbdc <Device::Device(char const*)>
c000bd9c:	83 c4 10             	add    esp,0x10
c000bd9f:	ba 48 fb 01 c0       	mov    edx,0xc001fb48
c000bda4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bda8:	89 10                	mov    DWORD PTR [eax],edx
c000bdaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdae:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bdb8:	90                   	nop
c000bdb9:	83 c4 0c             	add    esp,0xc
c000bdbc:	c3                   	ret    
c000bdbd:	90                   	nop
c000bdbe:	66 90                	xchg   ax,ax

c000bdc0 <HardDiskController::~HardDiskController()>:
c000bdc0:	83 ec 0c             	sub    esp,0xc
c000bdc3:	ba 48 fb 01 c0       	mov    edx,0xc001fb48
c000bdc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdcc:	89 10                	mov    DWORD PTR [eax],edx
c000bdce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdd2:	83 ec 0c             	sub    esp,0xc
c000bdd5:	50                   	push   eax
c000bdd6:	e8 6b fb ff ff       	call   c000b946 <Device::~Device()>
c000bddb:	83 c4 10             	add    esp,0x10
c000bdde:	90                   	nop
c000bddf:	83 c4 0c             	add    esp,0xc
c000bde2:	c3                   	ret    
c000bde3:	90                   	nop

c000bde4 <HardDiskController::~HardDiskController()>:
c000bde4:	83 ec 0c             	sub    esp,0xc
c000bde7:	83 ec 0c             	sub    esp,0xc
c000bdea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdee:	e8 cd ff ff ff       	call   c000bdc0 <HardDiskController::~HardDiskController()>
c000bdf3:	83 c4 10             	add    esp,0x10
c000bdf6:	83 ec 08             	sub    esp,0x8
c000bdf9:	68 58 01 00 00       	push   0x158
c000bdfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be02:	e8 09 e7 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000be07:	83 c4 10             	add    esp,0x10
c000be0a:	83 c4 0c             	add    esp,0xc
c000be0d:	c3                   	ret    

c000be0e <PhysicalDisk::eject()>:
c000be0e:	83 c8 ff             	or     eax,0xffffffff
c000be11:	c3                   	ret    

c000be12 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000be12:	83 ec 0c             	sub    esp,0xc
c000be15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be19:	83 ec 08             	sub    esp,0x8
c000be1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be20:	50                   	push   eax
c000be21:	e8 b6 fd ff ff       	call   c000bbdc <Device::Device(char const*)>
c000be26:	83 c4 10             	add    esp,0x10
c000be29:	ba 74 fb 01 c0       	mov    edx,0xc001fb74
c000be2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be32:	89 10                	mov    DWORD PTR [eax],edx
c000be34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be38:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000be3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be43:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000be4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be4e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000be58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be5c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be60:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000be66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be6a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000be74:	90                   	nop
c000be75:	83 c4 0c             	add    esp,0xc
c000be78:	c3                   	ret    
c000be79:	90                   	nop

c000be7a <PhysicalDisk::startCache()>:
c000be7a:	56                   	push   esi
c000be7b:	53                   	push   ebx
c000be7c:	83 ec 10             	sub    esp,0x10
c000be7f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be83:	6a 44                	push   0x44
c000be85:	e8 db b9 ff ff       	call   c0007865 <malloc>
c000be8a:	89 c6                	mov    esi,eax
c000be8c:	58                   	pop    eax
c000be8d:	5a                   	pop    edx
c000be8e:	53                   	push   ebx
c000be8f:	56                   	push   esi
c000be90:	e8 a7 16 00 00       	call   c000d53c <VCache::VCache(PhysicalDisk*)>
c000be95:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000be9b:	83 c4 14             	add    esp,0x14
c000be9e:	5b                   	pop    ebx
c000be9f:	5e                   	pop    esi
c000bea0:	c3                   	ret    
c000bea1:	90                   	nop

c000bea2 <PhysicalDisk::~PhysicalDisk()>:
c000bea2:	83 ec 0c             	sub    esp,0xc
c000bea5:	ba 74 fb 01 c0       	mov    edx,0xc001fb74
c000beaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beae:	89 10                	mov    DWORD PTR [eax],edx
c000beb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beb4:	83 ec 0c             	sub    esp,0xc
c000beb7:	50                   	push   eax
c000beb8:	e8 89 fa ff ff       	call   c000b946 <Device::~Device()>
c000bebd:	83 c4 10             	add    esp,0x10
c000bec0:	90                   	nop
c000bec1:	83 c4 0c             	add    esp,0xc
c000bec4:	c3                   	ret    
c000bec5:	90                   	nop

c000bec6 <PhysicalDisk::~PhysicalDisk()>:
c000bec6:	83 ec 0c             	sub    esp,0xc
c000bec9:	83 ec 0c             	sub    esp,0xc
c000becc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bed0:	e8 cd ff ff ff       	call   c000bea2 <PhysicalDisk::~PhysicalDisk()>
c000bed5:	83 c4 10             	add    esp,0x10
c000bed8:	83 ec 08             	sub    esp,0x8
c000bedb:	68 6c 01 00 00       	push   0x16c
c000bee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bee4:	e8 27 e6 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000bee9:	83 c4 10             	add    esp,0x10
c000beec:	83 c4 0c             	add    esp,0xc
c000beef:	c3                   	ret    

c000bef0 <int_handler>:
c000bef0:	55                   	push   ebp
c000bef1:	57                   	push   edi
c000bef2:	56                   	push   esi
c000bef3:	53                   	push   ebx
c000bef4:	83 ec 0c             	sub    esp,0xc
c000bef7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000befb:	80 3d 38 69 02 c0 00 	cmp    BYTE PTR ds:0xc0026938,0x0
c000bf02:	74 0b                	je     c000bf0f <int_handler+0x1f>
c000bf04:	fa                   	cli    
c000bf05:	f4                   	hlt    
c000bf06:	80 3d 38 69 02 c0 00 	cmp    BYTE PTR ds:0xc0026938,0x0
c000bf0d:	75 f5                	jne    c000bf04 <int_handler+0x14>
c000bf0f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bf12:	8d 46 e0             	lea    eax,[esi-0x20]
c000bf15:	83 f8 17             	cmp    eax,0x17
c000bf18:	76 3e                	jbe    c000bf58 <int_handler+0x68>
c000bf1a:	c1 e6 04             	shl    esi,0x4
c000bf1d:	31 db                	xor    ebx,ebx
c000bf1f:	8d ae c0 4f 02 c0    	lea    ebp,[esi-0x3ffdb040]
c000bf25:	81 c6 c0 3f 02 c0    	add    esi,0xc0023fc0
c000bf2b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bf2f:	85 c0                	test   eax,eax
c000bf31:	74 13                	je     c000bf46 <int_handler+0x56>
c000bf33:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bf36:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bf3a:	74 2a                	je     c000bf66 <int_handler+0x76>
c000bf3c:	83 ec 08             	sub    esp,0x8
c000bf3f:	52                   	push   edx
c000bf40:	57                   	push   edi
c000bf41:	ff d0                	call   eax
c000bf43:	83 c4 10             	add    esp,0x10
c000bf46:	43                   	inc    ebx
c000bf47:	83 fb 04             	cmp    ebx,0x4
c000bf4a:	75 df                	jne    c000bf2b <int_handler+0x3b>
c000bf4c:	83 c4 0c             	add    esp,0xc
c000bf4f:	31 c0                	xor    eax,eax
c000bf51:	5b                   	pop    ebx
c000bf52:	31 d2                	xor    edx,edx
c000bf54:	5e                   	pop    esi
c000bf55:	5f                   	pop    edi
c000bf56:	5d                   	pop    ebp
c000bf57:	c3                   	ret    
c000bf58:	83 ec 0c             	sub    esp,0xc
c000bf5b:	50                   	push   eax
c000bf5c:	e8 a5 ab 00 00       	call   c0016b06 <HalEndOfInterrupt(int)>
c000bf61:	83 c4 10             	add    esp,0x10
c000bf64:	eb b4                	jmp    c000bf1a <int_handler+0x2a>
c000bf66:	83 ec 08             	sub    esp,0x8
c000bf69:	52                   	push   edx
c000bf6a:	57                   	push   edi
c000bf6b:	ff d0                	call   eax
c000bf6d:	83 c4 10             	add    esp,0x10
c000bf70:	83 c4 0c             	add    esp,0xc
c000bf73:	5b                   	pop    ebx
c000bf74:	5e                   	pop    esi
c000bf75:	5f                   	pop    edi
c000bf76:	5d                   	pop    ebp
c000bf77:	c3                   	ret    

c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bf78:	56                   	push   esi
c000bf79:	31 c0                	xor    eax,eax
c000bf7b:	53                   	push   ebx
c000bf7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bf80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf84:	89 ca                	mov    edx,ecx
c000bf86:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bf8a:	c1 e2 04             	shl    edx,0x4
c000bf8d:	83 bc 82 c0 4f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdb040],0x0
c000bf95:	74 15                	je     c000bfac <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bf97:	40                   	inc    eax
c000bf98:	83 f8 04             	cmp    eax,0x4
c000bf9b:	75 f0                	jne    c000bf8d <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bf9d:	c7 44 24 0c a4 fb 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fba4
c000bfa5:	5b                   	pop    ebx
c000bfa6:	5e                   	pop    esi
c000bfa7:	e9 1b 44 00 00       	jmp    c00103c7 <KePanic(char const*)>
c000bfac:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bfaf:	89 1c 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],ebx
c000bfb6:	89 34 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],esi
c000bfbd:	5b                   	pop    ebx
c000bfbe:	5e                   	pop    esi
c000bfbf:	c3                   	ret    

c000bfc0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfc0:	57                   	push   edi
c000bfc1:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000bfc7:	56                   	push   esi
c000bfc8:	53                   	push   ebx
c000bfc9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bfcd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bfd1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bfd8:	74 5b                	je     c000c035 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bfda:	89 c7                	mov    edi,eax
c000bfdc:	84 c0                	test   al,al
c000bfde:	74 24                	je     c000c004 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfe0:	83 fe 0f             	cmp    esi,0xf
c000bfe3:	0f 8f d9 00 00 00    	jg     c000c0c2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bfe9:	8a 86 00 16 02 c0    	mov    al,BYTE PTR [esi-0x3ffdea00]
c000bfef:	25 ff 00 00 00       	and    eax,0xff
c000bff4:	66 8b bc 00 60 67 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffd98a0]
c000bffc:	89 c6                	mov    esi,eax
c000bffe:	66 d1 ef             	shr    di,1
c000c001:	83 e7 01             	and    edi,0x1
c000c004:	83 ec 08             	sub    esp,0x8
c000c007:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c000c00c:	31 db                	xor    ebx,ebx
c000c00e:	50                   	push   eax
c000c00f:	68 b1 fb 01 c0       	push   0xc001fbb1
c000c014:	e8 ed e5 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000c019:	83 c4 10             	add    esp,0x10
c000c01c:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c000c021:	85 c0                	test   eax,eax
c000c023:	7f 51                	jg     c000c076 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c025:	83 ec 0c             	sub    esp,0xc
c000c028:	68 c8 fb 01 c0       	push   0xc001fbc8
c000c02d:	e8 95 43 00 00       	call   c00103c7 <KePanic(char const*)>
c000c032:	83 c4 10             	add    esp,0x10
c000c035:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c038:	31 d2                	xor    edx,edx
c000c03a:	89 c8                	mov    eax,ecx
c000c03c:	c1 e0 04             	shl    eax,0x4
c000c03f:	8b 9c 90 c0 4f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdb040]
c000c046:	85 db                	test   ebx,ebx
c000c048:	0f 84 8b 00 00 00    	je     c000c0d9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c04e:	42                   	inc    edx
c000c04f:	83 fa 04             	cmp    edx,0x4
c000c052:	75 eb                	jne    c000c03f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c054:	83 ec 0c             	sub    esp,0xc
c000c057:	68 1c fc 01 c0       	push   0xc001fc1c
c000c05c:	e8 66 43 00 00       	call   c00103c7 <KePanic(char const*)>
c000c061:	83 c4 10             	add    esp,0x10
c000c064:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c069:	5b                   	pop    ebx
c000c06a:	5e                   	pop    esi
c000c06b:	5f                   	pop    edi
c000c06c:	c3                   	ret    
c000c06d:	43                   	inc    ebx
c000c06e:	39 1d 60 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b60,ebx
c000c074:	7e af                	jle    c000c025 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c076:	83 ec 08             	sub    esp,0x8
c000c079:	8b 04 9d 80 7b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8480]
c000c080:	56                   	push   esi
c000c081:	50                   	push   eax
c000c082:	e8 29 10 01 00       	call   c001d0b0 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c087:	83 c4 10             	add    esp,0x10
c000c08a:	84 c0                	test   al,al
c000c08c:	74 df                	je     c000c06d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c08e:	81 e7 ff 00 00 00    	and    edi,0xff
c000c094:	50                   	push   eax
c000c095:	8d 46 20             	lea    eax,[esi+0x20]
c000c098:	57                   	push   edi
c000c099:	25 ff 00 00 00       	and    eax,0xff
c000c09e:	6a 00                	push   0x0
c000c0a0:	50                   	push   eax
c000c0a1:	89 f0                	mov    eax,esi
c000c0a3:	6a 00                	push   0x0
c000c0a5:	25 ff 00 00 00       	and    eax,0xff
c000c0aa:	6a 00                	push   0x0
c000c0ac:	50                   	push   eax
c000c0ad:	8b 04 9d 80 7b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8480]
c000c0b4:	50                   	push   eax
c000c0b5:	e8 70 11 01 00       	call   c001d22a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c0ba:	83 c4 20             	add    esp,0x20
c000c0bd:	e9 73 ff ff ff       	jmp    c000c035 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c0c2:	83 ec 0c             	sub    esp,0xc
c000c0c5:	31 ff                	xor    edi,edi
c000c0c7:	68 e4 fb 01 c0       	push   0xc001fbe4
c000c0cc:	e8 f6 42 00 00       	call   c00103c7 <KePanic(char const*)>
c000c0d1:	83 c4 10             	add    esp,0x10
c000c0d4:	e9 2b ff ff ff       	jmp    c000c004 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c0d9:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c0dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c0e0:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c0e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c0eb:	5b                   	pop    ebx
c000c0ec:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c000c0f3:	89 f0                	mov    eax,esi
c000c0f5:	5e                   	pop    esi
c000c0f6:	5f                   	pop    edi
c000c0f7:	c3                   	ret    

c000c0f8 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c0f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c100:	c1 e0 04             	shl    eax,0x4
c000c103:	8d 50 10             	lea    edx,[eax+0x10]
c000c106:	39 88 c0 4f 02 c0    	cmp    DWORD PTR [eax-0x3ffdb040],ecx
c000c10c:	74 08                	je     c000c116 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c10e:	83 c0 04             	add    eax,0x4
c000c111:	39 d0                	cmp    eax,edx
c000c113:	75 f1                	jne    c000c106 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c115:	c3                   	ret    
c000c116:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c120:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c12a:	eb e2                	jmp    c000c10e <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c12c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c12c:	53                   	push   ebx
c000c12d:	83 ec 08             	sub    esp,0x8
c000c130:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c134:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c139:	74 0e                	je     c000c149 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c13b:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000c140:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c147:	75 37                	jne    c000c180 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c14d:	83 c0 20             	add    eax,0x20
c000c150:	c1 e0 04             	shl    eax,0x4
c000c153:	8d 50 10             	lea    edx,[eax+0x10]
c000c156:	39 98 c0 4f 02 c0    	cmp    DWORD PTR [eax-0x3ffdb040],ebx
c000c15c:	74 0c                	je     c000c16a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c15e:	83 c0 04             	add    eax,0x4
c000c161:	39 d0                	cmp    eax,edx
c000c163:	75 f1                	jne    c000c156 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c165:	83 c4 08             	add    esp,0x8
c000c168:	5b                   	pop    ebx
c000c169:	c3                   	ret    
c000c16a:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c174:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c17e:	eb de                	jmp    c000c15e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c180:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c185:	7f 12                	jg     c000c199 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c187:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c18b:	31 c0                	xor    eax,eax
c000c18d:	8a 81 00 16 02 c0    	mov    al,BYTE PTR [ecx-0x3ffdea00]
c000c193:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c197:	eb b0                	jmp    c000c149 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c199:	83 ec 0c             	sub    esp,0xc
c000c19c:	68 d5 fb 01 c0       	push   0xc001fbd5
c000c1a1:	e8 21 42 00 00       	call   c00103c7 <KePanic(char const*)>
c000c1a6:	83 c4 10             	add    esp,0x10
c000c1a9:	eb 9e                	jmp    c000c149 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c1ab <setupINTS()>:
c000c1ab:	31 c0                	xor    eax,eax
c000c1ad:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c1b7:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c1c1:	c7 80 c4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb03c],0x0
c000c1cb:	c7 80 c4 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc03c],0x0
c000c1d5:	c7 80 c8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb038],0x0
c000c1df:	c7 80 c8 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc038],0x0
c000c1e9:	c7 80 cc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb034],0x0
c000c1f3:	c7 80 cc 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc034],0x0
c000c1fd:	83 c0 10             	add    eax,0x10
c000c200:	3d 00 10 00 00       	cmp    eax,0x1000
c000c205:	75 a6                	jne    c000c1ad <setupINTS()+0x2>
c000c207:	c3                   	ret    

c000c208 <convertLegacyIRQNumber(int)>:
c000c208:	83 ec 0c             	sub    esp,0xc
c000c20b:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000c211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c215:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c21c:	74 0f                	je     c000c22d <convertLegacyIRQNumber(int)+0x25>
c000c21e:	83 f8 0f             	cmp    eax,0xf
c000c221:	7f 0e                	jg     c000c231 <convertLegacyIRQNumber(int)+0x29>
c000c223:	31 c9                	xor    ecx,ecx
c000c225:	8a 88 00 16 02 c0    	mov    cl,BYTE PTR [eax-0x3ffdea00]
c000c22b:	89 c8                	mov    eax,ecx
c000c22d:	83 c4 0c             	add    esp,0xc
c000c230:	c3                   	ret    
c000c231:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c235:	83 ec 0c             	sub    esp,0xc
c000c238:	68 e4 fb 01 c0       	push   0xc001fbe4
c000c23d:	e8 85 41 00 00       	call   c00103c7 <KePanic(char const*)>
c000c242:	83 c4 10             	add    esp,0x10
c000c245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c249:	83 c4 0c             	add    esp,0xc
c000c24c:	c3                   	ret    
c000c24d:	90                   	nop

c000c24e <startGUI(void*)>:
c000c24e:	55                   	push   ebp
c000c24f:	89 e5                	mov    ebp,esp
c000c251:	53                   	push   ebx
c000c252:	83 ec 04             	sub    esp,0x4
c000c255:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c25a:	48                   	dec    eax
c000c25b:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c260:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c265:	85 c0                	test   eax,eax
c000c267:	75 01                	jne    c000c26a <startGUI(void*)+0x1c>
c000c269:	fb                   	sti    
c000c26a:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c270:	83 ec 08             	sub    esp,0x8
c000c273:	6a 01                	push   0x1
c000c275:	68 41 fc 01 c0       	push   0xc001fc41
c000c27a:	e8 0b 7d 00 00       	call   c0013f8a <Thr::loadDLL(char const*, bool)>
c000c27f:	83 c4 10             	add    esp,0x10
c000c282:	83 ec 08             	sub    esp,0x8
c000c285:	53                   	push   ebx
c000c286:	50                   	push   eax
c000c287:	e8 2f 7f 00 00       	call   c00141bb <Thr::executeDLL(unsigned long, void*)>
c000c28c:	83 c4 10             	add    esp,0x10
c000c28f:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c295:	83 ec 08             	sub    esp,0x8
c000c298:	6a 01                	push   0x1
c000c29a:	68 5b fc 01 c0       	push   0xc001fc5b
c000c29f:	e8 e6 7c 00 00       	call   c0013f8a <Thr::loadDLL(char const*, bool)>
c000c2a4:	83 c4 10             	add    esp,0x10
c000c2a7:	83 ec 08             	sub    esp,0x8
c000c2aa:	53                   	push   ebx
c000c2ab:	50                   	push   eax
c000c2ac:	e8 0a 7f 00 00       	call   c00141bb <Thr::executeDLL(unsigned long, void*)>
c000c2b1:	83 c4 10             	add    esp,0x10
c000c2b4:	90                   	nop
c000c2b5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c2b8:	c9                   	leave  
c000c2b9:	c3                   	ret    

c000c2ba <startGUIVESA(void*)>:
c000c2ba:	55                   	push   ebp
c000c2bb:	89 e5                	mov    ebp,esp
c000c2bd:	53                   	push   ebx
c000c2be:	83 ec 04             	sub    esp,0x4
c000c2c1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c2c6:	48                   	dec    eax
c000c2c7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c2cc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c2d1:	85 c0                	test   eax,eax
c000c2d3:	75 01                	jne    c000c2d6 <startGUIVESA(void*)+0x1c>
c000c2d5:	fb                   	sti    
c000c2d6:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c2dc:	83 ec 08             	sub    esp,0x8
c000c2df:	6a 01                	push   0x1
c000c2e1:	68 79 fc 01 c0       	push   0xc001fc79
c000c2e6:	e8 9f 7c 00 00       	call   c0013f8a <Thr::loadDLL(char const*, bool)>
c000c2eb:	83 c4 10             	add    esp,0x10
c000c2ee:	83 ec 08             	sub    esp,0x8
c000c2f1:	53                   	push   ebx
c000c2f2:	50                   	push   eax
c000c2f3:	e8 c3 7e 00 00       	call   c00141bb <Thr::executeDLL(unsigned long, void*)>
c000c2f8:	83 c4 10             	add    esp,0x10
c000c2fb:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c301:	83 ec 08             	sub    esp,0x8
c000c304:	6a 01                	push   0x1
c000c306:	68 5b fc 01 c0       	push   0xc001fc5b
c000c30b:	e8 7a 7c 00 00       	call   c0013f8a <Thr::loadDLL(char const*, bool)>
c000c310:	83 c4 10             	add    esp,0x10
c000c313:	83 ec 08             	sub    esp,0x8
c000c316:	53                   	push   ebx
c000c317:	50                   	push   eax
c000c318:	e8 9e 7e 00 00       	call   c00141bb <Thr::executeDLL(unsigned long, void*)>
c000c31d:	83 c4 10             	add    esp,0x10
c000c320:	90                   	nop
c000c321:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c324:	c9                   	leave  
c000c325:	c3                   	ret    

c000c326 <sendKeyToTerminal(unsigned char)>:
c000c326:	55                   	push   ebp
c000c327:	89 e5                	mov    ebp,esp
c000c329:	83 ec 28             	sub    esp,0x28
c000c32c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c32f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c332:	8b 15 04 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f04
c000c338:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c33b:	25 ff 00 00 00       	and    eax,0xff
c000c340:	83 ec 08             	sub    esp,0x8
c000c343:	50                   	push   eax
c000c344:	52                   	push   edx
c000c345:	e8 a6 c7 ff ff       	call   c0008af0 <VgaText::receiveKey(unsigned char)>
c000c34a:	83 c4 10             	add    esp,0x10
c000c34d:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c351:	74 10                	je     c000c363 <sendKeyToTerminal(unsigned char)+0x3d>
c000c353:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c357:	74 0a                	je     c000c363 <sendKeyToTerminal(unsigned char)+0x3d>
c000c359:	80 7d e4 1c          	cmp    BYTE PTR [ebp-0x1c],0x1c
c000c35d:	0f 85 8f 00 00 00    	jne    c000c3f2 <sendKeyToTerminal(unsigned char)+0xcc>
c000c363:	fa                   	cli    
c000c364:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c369:	40                   	inc    eax
c000c36a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c36f:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c374:	40                   	inc    eax
c000c375:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000c37a:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000c37f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c382:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000c38c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c390:	74 1f                	je     c000c3b1 <sendKeyToTerminal(unsigned char)+0x8b>
c000c392:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c395:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c398:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c39b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c39e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c3a1:	83 ec 0c             	sub    esp,0xc
c000c3a4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c3a7:	e8 f4 8a 00 00       	call   c0014ea0 <unblockTask(ThreadControlBlock*)>
c000c3ac:	83 c4 10             	add    esp,0x10
c000c3af:	eb db                	jmp    c000c38c <sendKeyToTerminal(unsigned char)+0x66>
c000c3b1:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c3b6:	48                   	dec    eax
c000c3b7:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000c3bc:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c3c1:	85 c0                	test   eax,eax
c000c3c3:	75 18                	jne    c000c3dd <sendKeyToTerminal(unsigned char)+0xb7>
c000c3c5:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c000c3ca:	85 c0                	test   eax,eax
c000c3cc:	74 0f                	je     c000c3dd <sendKeyToTerminal(unsigned char)+0xb7>
c000c3ce:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c000c3d8:	e8 ff 85 00 00       	call   c00149dc <schedule()>
c000c3dd:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c3e2:	48                   	dec    eax
c000c3e3:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c3e8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c3ed:	85 c0                	test   eax,eax
c000c3ef:	75 01                	jne    c000c3f2 <sendKeyToTerminal(unsigned char)+0xcc>
c000c3f1:	fb                   	sti    
c000c3f2:	90                   	nop
c000c3f3:	c9                   	leave  
c000c3f4:	c3                   	ret    

c000c3f5 <sendKeyboardToken(KeyboardToken)>:
c000c3f5:	55                   	push   ebp
c000c3f6:	89 e5                	mov    ebp,esp
c000c3f8:	83 ec 18             	sub    esp,0x18
c000c3fb:	e8 17 40 00 00       	call   c0010417 <Krnl::userIOReceived()>
c000c400:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c406:	25 ff ff 00 00       	and    eax,0xffff
c000c40b:	83 f2 01             	xor    edx,0x1
c000c40e:	88 90 e0 5f 02 c0    	mov    BYTE PTR [eax-0x3ffda020],dl
c000c414:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c419:	85 c0                	test   eax,eax
c000c41b:	74 24                	je     c000c441 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c41d:	8b 0d c8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fc8
c000c423:	83 ec 04             	sub    esp,0x4
c000c426:	68 e0 5f 02 c0       	push   0xc0025fe0
c000c42b:	83 ec 08             	sub    esp,0x8
c000c42e:	89 e2                	mov    edx,esp
c000c430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c433:	89 02                	mov    DWORD PTR [edx],eax
c000c435:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c438:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c43c:	ff d1                	call   ecx
c000c43e:	83 c4 10             	add    esp,0x10
c000c441:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c445:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c448:	a0 e8 63 02 c0       	mov    al,ds:0xc00263e8
c000c44d:	38 c2                	cmp    dl,al
c000c44f:	74 1e                	je     c000c46f <sendKeyboardToken(KeyboardToken)+0x7a>
c000c451:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c454:	a2 e8 63 02 c0       	mov    ds:0xc00263e8,al
c000c459:	a0 e8 63 02 c0       	mov    al,ds:0xc00263e8
c000c45e:	25 ff 00 00 00       	and    eax,0xff
c000c463:	83 ec 0c             	sub    esp,0xc
c000c466:	50                   	push   eax
c000c467:	e8 d8 bd ff ff       	call   c0008244 <setTerminalScrollLock(bool)>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c472:	84 c0                	test   al,al
c000c474:	0f 84 ae 00 00 00    	je     c000c528 <sendKeyboardToken(KeyboardToken)+0x133>
c000c47a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c47d:	66 3d 18 03          	cmp    ax,0x318
c000c481:	75 06                	jne    c000c489 <sendKeyboardToken(KeyboardToken)+0x94>
c000c483:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c48c:	66 3d 19 03          	cmp    ax,0x319
c000c490:	75 06                	jne    c000c498 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c492:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c49b:	66 3d 1a 03          	cmp    ax,0x31a
c000c49f:	75 06                	jne    c000c4a7 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c4a1:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c4a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4aa:	66 3d 1b 03          	cmp    ax,0x31b
c000c4ae:	75 06                	jne    c000c4b6 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c4b0:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c4b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b9:	66 3d 1c 03          	cmp    ax,0x31c
c000c4bd:	75 06                	jne    c000c4c5 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c4bf:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c4c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4c8:	66 3d 1d 03          	cmp    ax,0x31d
c000c4cc:	75 06                	jne    c000c4d4 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c4ce:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c4d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d7:	66 3d 1e 03          	cmp    ax,0x31e
c000c4db:	75 06                	jne    c000c4e3 <sendKeyboardToken(KeyboardToken)+0xee>
c000c4dd:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c4e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4e6:	66 3d 1f 03          	cmp    ax,0x31f
c000c4ea:	75 06                	jne    c000c4f2 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c4ec:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c4f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4f5:	66 3d 20 03          	cmp    ax,0x320
c000c4f9:	75 06                	jne    c000c501 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c4fb:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c504:	66 3d 21 03          	cmp    ax,0x321
c000c508:	75 06                	jne    c000c510 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c50a:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c510:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c513:	66 3d 22 03          	cmp    ax,0x322
c000c517:	0f 85 c9 00 00 00    	jne    c000c5e6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c51d:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c523:	e9 be 00 00 00       	jmp    c000c5e6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c528:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c52b:	66 3d 18 03          	cmp    ax,0x318
c000c52f:	75 0a                	jne    c000c53b <sendKeyboardToken(KeyboardToken)+0x146>
c000c531:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c537:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c53b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c53e:	66 3d 19 03          	cmp    ax,0x319
c000c542:	75 0a                	jne    c000c54e <sendKeyboardToken(KeyboardToken)+0x159>
c000c544:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c54a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c54e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c551:	66 3d 1a 03          	cmp    ax,0x31a
c000c555:	75 0a                	jne    c000c561 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c557:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c55d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c564:	66 3d 1b 03          	cmp    ax,0x31b
c000c568:	75 0a                	jne    c000c574 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c56a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c570:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c577:	66 3d 1c 03          	cmp    ax,0x31c
c000c57b:	75 0a                	jne    c000c587 <sendKeyboardToken(KeyboardToken)+0x192>
c000c57d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c583:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c587:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c58a:	66 3d 1d 03          	cmp    ax,0x31d
c000c58e:	75 0a                	jne    c000c59a <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c590:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c596:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c59a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c59d:	66 3d 1e 03          	cmp    ax,0x31e
c000c5a1:	75 0a                	jne    c000c5ad <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c5a3:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c5a9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5b0:	66 3d 1f 03          	cmp    ax,0x31f
c000c5b4:	75 0a                	jne    c000c5c0 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c5b6:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c5bc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5c3:	66 3d 20 03          	cmp    ax,0x320
c000c5c7:	75 0a                	jne    c000c5d3 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c5c9:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c5cf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5d6:	66 3d 21 03          	cmp    ax,0x321
c000c5da:	75 0a                	jne    c000c5e6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c5dc:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c5e2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5e9:	66 3d 00 02          	cmp    ax,0x200
c000c5ed:	75 2c                	jne    c000c61b <sendKeyboardToken(KeyboardToken)+0x226>
c000c5ef:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000c5f4:	83 f0 01             	xor    eax,0x1
c000c5f7:	84 c0                	test   al,al
c000c5f9:	74 20                	je     c000c61b <sendKeyboardToken(KeyboardToken)+0x226>
c000c5fb:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000c600:	6a 01                	push   0x1
c000c602:	6a 00                	push   0x0
c000c604:	68 4e c2 00 c0       	push   0xc000c24e
c000c609:	50                   	push   eax
c000c60a:	e8 85 81 00 00       	call   c0014794 <Process::createThread(void (*)(void*), void*, int)>
c000c60f:	83 c4 10             	add    esp,0x10
c000c612:	c6 05 e0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263e0,0x1
c000c619:	eb 33                	jmp    c000c64e <sendKeyboardToken(KeyboardToken)+0x259>
c000c61b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c61e:	66 3d 01 02          	cmp    ax,0x201
c000c622:	75 2a                	jne    c000c64e <sendKeyboardToken(KeyboardToken)+0x259>
c000c624:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000c629:	83 f0 01             	xor    eax,0x1
c000c62c:	84 c0                	test   al,al
c000c62e:	74 1e                	je     c000c64e <sendKeyboardToken(KeyboardToken)+0x259>
c000c630:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000c635:	6a 01                	push   0x1
c000c637:	6a 00                	push   0x0
c000c639:	68 ba c2 00 c0       	push   0xc000c2ba
c000c63e:	50                   	push   eax
c000c63f:	e8 50 81 00 00       	call   c0014794 <Process::createThread(void (*)(void*), void*, int)>
c000c644:	83 c4 10             	add    esp,0x10
c000c647:	c6 05 e0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263e0,0x1
c000c64e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c651:	66 3d 25 03          	cmp    ax,0x325
c000c655:	75 06                	jne    c000c65d <sendKeyboardToken(KeyboardToken)+0x268>
c000c657:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c65d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c660:	66 3d 24 03          	cmp    ax,0x324
c000c664:	75 06                	jne    c000c66c <sendKeyboardToken(KeyboardToken)+0x277>
c000c666:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c66c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c66f:	66 3d 23 03          	cmp    ax,0x323
c000c673:	75 06                	jne    c000c67b <sendKeyboardToken(KeyboardToken)+0x286>
c000c675:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c67b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c67e:	66 3d 26 03          	cmp    ax,0x326
c000c682:	75 06                	jne    c000c68a <sendKeyboardToken(KeyboardToken)+0x295>
c000c684:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c68a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c68d:	66 3d 27 03          	cmp    ax,0x327
c000c691:	75 06                	jne    c000c699 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c693:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c69c:	66 3d 22 03          	cmp    ax,0x322
c000c6a0:	75 06                	jne    c000c6a8 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c6a2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c6a8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c6ac:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6af:	83 f0 01             	xor    eax,0x1
c000c6b2:	84 c0                	test   al,al
c000c6b4:	74 7b                	je     c000c731 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c6b6:	a0 e1 60 02 c0       	mov    al,ds:0xc00260e1
c000c6bb:	84 c0                	test   al,al
c000c6bd:	74 43                	je     c000c702 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c6bf:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c6c3:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c6c7:	74 2d                	je     c000c6f6 <sendKeyboardToken(KeyboardToken)+0x301>
c000c6c9:	8b 15 e4 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263e4
c000c6cf:	89 d0                	mov    eax,edx
c000c6d1:	c1 e0 02             	shl    eax,0x2
c000c6d4:	01 d0                	add    eax,edx
c000c6d6:	01 c0                	add    eax,eax
c000c6d8:	a3 e4 63 02 c0       	mov    ds:0xc00263e4,eax
c000c6dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6e0:	25 ff ff 00 00       	and    eax,0xffff
c000c6e5:	8d 50 d0             	lea    edx,[eax-0x30]
c000c6e8:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c6ed:	01 d0                	add    eax,edx
c000c6ef:	a3 e4 63 02 c0       	mov    ds:0xc00263e4,eax
c000c6f4:	eb 71                	jmp    c000c767 <sendKeyboardToken(KeyboardToken)+0x372>
c000c6f6:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c700:	eb 65                	jmp    c000c767 <sendKeyboardToken(KeyboardToken)+0x372>
c000c702:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c707:	85 c0                	test   eax,eax
c000c709:	74 1a                	je     c000c725 <sendKeyboardToken(KeyboardToken)+0x330>
c000c70b:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c710:	25 ff 00 00 00       	and    eax,0xff
c000c715:	83 ec 0c             	sub    esp,0xc
c000c718:	50                   	push   eax
c000c719:	e8 08 fc ff ff       	call   c000c326 <sendKeyToTerminal(unsigned char)>
c000c71e:	83 c4 10             	add    esp,0x10
c000c721:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c725:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c72f:	eb 36                	jmp    c000c767 <sendKeyboardToken(KeyboardToken)+0x372>
c000c731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c734:	66 3d 01 01          	cmp    ax,0x101
c000c738:	75 2d                	jne    c000c767 <sendKeyboardToken(KeyboardToken)+0x372>
c000c73a:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c73f:	85 c0                	test   eax,eax
c000c741:	74 1a                	je     c000c75d <sendKeyboardToken(KeyboardToken)+0x368>
c000c743:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c748:	25 ff 00 00 00       	and    eax,0xff
c000c74d:	83 ec 0c             	sub    esp,0xc
c000c750:	50                   	push   eax
c000c751:	e8 d0 fb ff ff       	call   c000c326 <sendKeyToTerminal(unsigned char)>
c000c756:	83 c4 10             	add    esp,0x10
c000c759:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c75d:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c767:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c76a:	83 f0 01             	xor    eax,0x1
c000c76d:	84 c0                	test   al,al
c000c76f:	74 4e                	je     c000c7bf <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c771:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c774:	83 f0 01             	xor    eax,0x1
c000c777:	84 c0                	test   al,al
c000c779:	74 44                	je     c000c7bf <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c77b:	a0 e0 60 02 c0       	mov    al,ds:0xc00260e0
c000c780:	83 f0 01             	xor    eax,0x1
c000c783:	84 c0                	test   al,al
c000c785:	74 38                	je     c000c7bf <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c787:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c78a:	66 83 f8 1f          	cmp    ax,0x1f
c000c78e:	76 09                	jbe    c000c799 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c793:	66 83 f8 7e          	cmp    ax,0x7e
c000c797:	76 12                	jbe    c000c7ab <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c799:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c79c:	66 83 f8 0a          	cmp    ax,0xa
c000c7a0:	74 09                	je     c000c7ab <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c7a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7a5:	66 83 f8 08          	cmp    ax,0x8
c000c7a9:	75 14                	jne    c000c7bf <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c7ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ae:	25 ff 00 00 00       	and    eax,0xff
c000c7b3:	83 ec 0c             	sub    esp,0xc
c000c7b6:	50                   	push   eax
c000c7b7:	e8 6a fb ff ff       	call   c000c326 <sendKeyToTerminal(unsigned char)>
c000c7bc:	83 c4 10             	add    esp,0x10
c000c7bf:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c7c2:	83 f0 01             	xor    eax,0x1
c000c7c5:	84 c0                	test   al,al
c000c7c7:	74 51                	je     c000c81a <sendKeyboardToken(KeyboardToken)+0x425>
c000c7c9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c7cc:	83 f0 01             	xor    eax,0x1
c000c7cf:	84 c0                	test   al,al
c000c7d1:	74 47                	je     c000c81a <sendKeyboardToken(KeyboardToken)+0x425>
c000c7d3:	a0 e0 60 02 c0       	mov    al,ds:0xc00260e0
c000c7d8:	84 c0                	test   al,al
c000c7da:	74 3e                	je     c000c81a <sendKeyboardToken(KeyboardToken)+0x425>
c000c7dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7df:	66 83 f8 3f          	cmp    ax,0x3f
c000c7e3:	76 35                	jbe    c000c81a <sendKeyboardToken(KeyboardToken)+0x425>
c000c7e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7e8:	66 83 f8 7f          	cmp    ax,0x7f
c000c7ec:	77 2c                	ja     c000c81a <sendKeyboardToken(KeyboardToken)+0x425>
c000c7ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f1:	88 c2                	mov    dl,al
c000c7f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f6:	66 83 f8 5f          	cmp    ax,0x5f
c000c7fa:	76 04                	jbe    c000c800 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c7fc:	b0 20                	mov    al,0x20
c000c7fe:	eb 02                	jmp    c000c802 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c800:	b0 00                	mov    al,0x0
c000c802:	29 c2                	sub    edx,eax
c000c804:	88 d0                	mov    al,dl
c000c806:	83 e8 40             	sub    eax,0x40
c000c809:	25 ff 00 00 00       	and    eax,0xff
c000c80e:	83 ec 0c             	sub    esp,0xc
c000c811:	50                   	push   eax
c000c812:	e8 0f fb ff ff       	call   c000c326 <sendKeyToTerminal(unsigned char)>
c000c817:	83 c4 10             	add    esp,0x10
c000c81a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c81d:	66 3d 00 03          	cmp    ax,0x300
c000c821:	75 0f                	jne    c000c832 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c823:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c826:	83 f0 01             	xor    eax,0x1
c000c829:	84 c0                	test   al,al
c000c82b:	74 05                	je     c000c832 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c82d:	e8 13 ba ff ff       	call   c0008245 <doTerminalCycle()>
c000c832:	90                   	nop
c000c833:	c9                   	leave  
c000c834:	c3                   	ret    

c000c835 <clearInternalKeybuffer(VgaText*)>:
c000c835:	55                   	push   ebp
c000c836:	89 e5                	mov    ebp,esp
c000c838:	83 ec 08             	sub    esp,0x8
c000c83b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c83e:	05 02 01 00 00       	add    eax,0x102
c000c843:	83 ec 0c             	sub    esp,0xc
c000c846:	50                   	push   eax
c000c847:	e8 e4 3c ff ff       	call   c0000530 <strlen>
c000c84c:	83 c4 10             	add    esp,0x10
c000c84f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c852:	81 c2 02 01 00 00    	add    edx,0x102
c000c858:	83 ec 04             	sub    esp,0x4
c000c85b:	50                   	push   eax
c000c85c:	6a 00                	push   0x0
c000c85e:	52                   	push   edx
c000c85f:	e8 5c 3c ff ff       	call   c00004c0 <memset>
c000c864:	83 c4 10             	add    esp,0x10
c000c867:	90                   	nop
c000c868:	c9                   	leave  
c000c869:	c3                   	ret    

c000c86a <readKeyboard(VgaText*, char*, unsigned long)>:
c000c86a:	55                   	push   ebp
c000c86b:	89 e5                	mov    ebp,esp
c000c86d:	83 ec 18             	sub    esp,0x18
c000c870:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c875:	85 c0                	test   eax,eax
c000c877:	74 2a                	je     c000c8a3 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c879:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c87f:	8b 0d c8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fc8
c000c885:	83 ec 04             	sub    esp,0x4
c000c888:	68 e0 5f 02 c0       	push   0xc0025fe0
c000c88d:	83 ec 08             	sub    esp,0x8
c000c890:	89 e2                	mov    edx,esp
c000c892:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c895:	89 02                	mov    DWORD PTR [edx],eax
c000c897:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c89a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c89e:	ff d1                	call   ecx
c000c8a0:	83 c4 10             	add    esp,0x10
c000c8a3:	fb                   	sti    
c000c8a4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c8ab:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c8af:	0f 84 f5 00 00 00    	je     c000c9aa <readKeyboard(VgaText*, char*, unsigned long)+0x140>
c000c8b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8b8:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c8be:	84 c0                	test   al,al
c000c8c0:	75 28                	jne    c000c8ea <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c8c2:	fa                   	cli    
c000c8c3:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c8c8:	40                   	inc    eax
c000c8c9:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c8ce:	e8 09 81 00 00       	call   c00149dc <schedule()>
c000c8d3:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c8d8:	48                   	dec    eax
c000c8d9:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c8de:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c8e3:	85 c0                	test   eax,eax
c000c8e5:	75 ce                	jne    c000c8b5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8e7:	fb                   	sti    
c000c8e8:	eb cb                	jmp    c000c8b5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c8ed:	8d 50 01             	lea    edx,[eax+0x1]
c000c8f0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8f3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8f6:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000c8fc:	88 10                	mov    BYTE PTR [eax],dl
c000c8fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c901:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c907:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c90a:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c90e:	75 1e                	jne    c000c92e <readKeyboard(VgaText*, char*, unsigned long)+0xc4>
c000c910:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c915:	8b 00                	mov    eax,DWORD PTR [eax]
c000c917:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c91a:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c920:	83 ec 08             	sub    esp,0x8
c000c923:	6a 02                	push   0x2
c000c925:	50                   	push   eax
c000c926:	e8 70 3e 00 00       	call   c001079b <KeRaiseSignal(SigHandlerBlock*, int)>
c000c92b:	83 c4 10             	add    esp,0x10
c000c92e:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000c932:	75 1e                	jne    c000c952 <readKeyboard(VgaText*, char*, unsigned long)+0xe8>
c000c934:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c939:	8b 00                	mov    eax,DWORD PTR [eax]
c000c93b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c93e:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c944:	83 ec 08             	sub    esp,0x8
c000c947:	6a 09                	push   0x9
c000c949:	50                   	push   eax
c000c94a:	e8 4c 3e 00 00       	call   c001079b <KeRaiseSignal(SigHandlerBlock*, int)>
c000c94f:	83 c4 10             	add    esp,0x10
c000c952:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c955:	05 02 01 00 00       	add    eax,0x102
c000c95a:	83 ec 0c             	sub    esp,0xc
c000c95d:	50                   	push   eax
c000c95e:	e8 cd 3b ff ff       	call   c0000530 <strlen>
c000c963:	83 c4 10             	add    esp,0x10
c000c966:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c969:	81 c2 02 01 00 00    	add    edx,0x102
c000c96f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c972:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c975:	81 c2 02 01 00 00    	add    edx,0x102
c000c97b:	83 ec 04             	sub    esp,0x4
c000c97e:	50                   	push   eax
c000c97f:	51                   	push   ecx
c000c980:	52                   	push   edx
c000c981:	e8 4a 3a ff ff       	call   c00003d0 <memmove>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c98c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c98f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c993:	74 10                	je     c000c9a5 <readKeyboard(VgaText*, char*, unsigned long)+0x13b>
c000c995:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c999:	74 0a                	je     c000c9a5 <readKeyboard(VgaText*, char*, unsigned long)+0x13b>
c000c99b:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000c99f:	0f 85 06 ff ff ff    	jne    c000c8ab <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c9a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c9a8:	eb 03                	jmp    c000c9ad <readKeyboard(VgaText*, char*, unsigned long)+0x143>
c000c9aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c9ad:	c9                   	leave  
c000c9ae:	c3                   	ret    
c000c9af:	90                   	nop

c000c9b0 <Keyboard::Keyboard(char const*)>:
c000c9b0:	83 ec 0c             	sub    esp,0xc
c000c9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9b7:	83 ec 08             	sub    esp,0x8
c000c9ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9be:	50                   	push   eax
c000c9bf:	e8 18 f2 ff ff       	call   c000bbdc <Device::Device(char const*)>
c000c9c4:	83 c4 10             	add    esp,0x10
c000c9c7:	ba 9c fc 01 c0       	mov    edx,0xc001fc9c
c000c9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d0:	89 10                	mov    DWORD PTR [eax],edx
c000c9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c9e0:	c6 05 c4 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025fc4,0x1
c000c9e7:	90                   	nop
c000c9e8:	83 c4 0c             	add    esp,0xc
c000c9eb:	c3                   	ret    

c000c9ec <Keyboard::~Keyboard()>:
c000c9ec:	83 ec 0c             	sub    esp,0xc
c000c9ef:	ba 9c fc 01 c0       	mov    edx,0xc001fc9c
c000c9f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9f8:	89 10                	mov    DWORD PTR [eax],edx
c000c9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9fe:	83 ec 0c             	sub    esp,0xc
c000ca01:	50                   	push   eax
c000ca02:	e8 3f ef ff ff       	call   c000b946 <Device::~Device()>
c000ca07:	83 c4 10             	add    esp,0x10
c000ca0a:	90                   	nop
c000ca0b:	83 c4 0c             	add    esp,0xc
c000ca0e:	c3                   	ret    
c000ca0f:	90                   	nop

c000ca10 <Keyboard::~Keyboard()>:
c000ca10:	83 ec 0c             	sub    esp,0xc
c000ca13:	83 ec 0c             	sub    esp,0xc
c000ca16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca1a:	e8 cd ff ff ff       	call   c000c9ec <Keyboard::~Keyboard()>
c000ca1f:	83 c4 10             	add    esp,0x10
c000ca22:	83 ec 08             	sub    esp,0x8
c000ca25:	68 5c 01 00 00       	push   0x15c
c000ca2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2e:	e8 dd da ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000ca33:	83 c4 10             	add    esp,0x10
c000ca36:	83 c4 0c             	add    esp,0xc
c000ca39:	c3                   	ret    

c000ca3a <LogicalDisk::close(int, int, void*)>:
c000ca3a:	83 c8 ff             	or     eax,0xffffffff
c000ca3d:	c3                   	ret    

c000ca3e <LogicalDisk::~LogicalDisk()>:
c000ca3e:	83 ec 0c             	sub    esp,0xc
c000ca41:	ba 14 fd 01 c0       	mov    edx,0xc001fd14
c000ca46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca4a:	89 10                	mov    DWORD PTR [eax],edx
c000ca4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca50:	83 ec 0c             	sub    esp,0xc
c000ca53:	50                   	push   eax
c000ca54:	e8 ed ee ff ff       	call   c000b946 <Device::~Device()>
c000ca59:	83 c4 10             	add    esp,0x10
c000ca5c:	90                   	nop
c000ca5d:	83 c4 0c             	add    esp,0xc
c000ca60:	c3                   	ret    
c000ca61:	90                   	nop

c000ca62 <LogicalDisk::~LogicalDisk()>:
c000ca62:	83 ec 0c             	sub    esp,0xc
c000ca65:	83 ec 0c             	sub    esp,0xc
c000ca68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca6c:	e8 cd ff ff ff       	call   c000ca3e <LogicalDisk::~LogicalDisk()>
c000ca71:	83 c4 10             	add    esp,0x10
c000ca74:	83 ec 08             	sub    esp,0x8
c000ca77:	68 78 01 00 00       	push   0x178
c000ca7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca80:	e8 8b da ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000ca85:	83 c4 10             	add    esp,0x10
c000ca88:	83 c4 0c             	add    esp,0xc
c000ca8b:	c3                   	ret    

c000ca8c <LogicalDisk::open(int, int, void*)>:
c000ca8c:	83 ec 18             	sub    esp,0x18
c000ca8f:	68 c8 fc 01 c0       	push   0xc001fcc8
c000ca94:	e8 2e 39 00 00       	call   c00103c7 <KePanic(char const*)>
c000ca99:	83 c8 ff             	or     eax,0xffffffff
c000ca9c:	83 c4 1c             	add    esp,0x1c
c000ca9f:	c3                   	ret    

c000caa0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000caa0:	53                   	push   ebx
c000caa1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000caa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000caa9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000caad:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cab3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cab9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cabf:	77 10                	ja     c000cad1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cac1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cac7:	89 d3                	mov    ebx,edx
c000cac9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cacf:	72 05                	jb     c000cad6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cad1:	83 c8 ff             	or     eax,0xffffffff
c000cad4:	89 c2                	mov    edx,eax
c000cad6:	5b                   	pop    ebx
c000cad7:	c3                   	ret    

c000cad8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cad8:	56                   	push   esi
c000cad9:	83 c8 ff             	or     eax,0xffffffff
c000cadc:	53                   	push   ebx
c000cadd:	89 c2                	mov    edx,eax
c000cadf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cae3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cae7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000caeb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000caf1:	77 27                	ja     c000cb1a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000caf3:	89 d8                	mov    eax,ebx
c000caf5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cafb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cb01:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cb06:	89 c2                	mov    edx,eax
c000cb08:	73 10                	jae    c000cb1a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cb0a:	89 c8                	mov    eax,ecx
c000cb0c:	89 da                	mov    edx,ebx
c000cb0e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cb14:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cb1a:	5b                   	pop    ebx
c000cb1b:	5e                   	pop    esi
c000cb1c:	c3                   	ret    
c000cb1d:	90                   	nop

c000cb1e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cb1e:	83 ec 1c             	sub    esp,0x1c
c000cb21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb31:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cb35:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb38:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cb3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb44:	83 ec 08             	sub    esp,0x8
c000cb47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4b:	50                   	push   eax
c000cb4c:	e8 8b f0 ff ff       	call   c000bbdc <Device::Device(char const*)>
c000cb51:	83 c4 10             	add    esp,0x10
c000cb54:	ba 14 fd 01 c0       	mov    edx,0xc001fd14
c000cb59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb5d:	89 10                	mov    DWORD PTR [eax],edx
c000cb5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb63:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb6e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cb75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb79:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb84:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cb8e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb9a:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cba0:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cba6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cbaa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cbad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cbb1:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cbb7:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cbbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbc1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cbc5:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cbcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbcf:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000cbd9:	90                   	nop
c000cbda:	83 c4 1c             	add    esp,0x1c
c000cbdd:	c3                   	ret    

c000cbde <LogicalDisk::assignDriveLetter()>:
c000cbde:	55                   	push   ebp
c000cbdf:	57                   	push   edi
c000cbe0:	56                   	push   esi
c000cbe1:	53                   	push   ebx
c000cbe2:	83 ec 14             	sub    esp,0x14
c000cbe5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cbe9:	8b 3d 00 64 02 c0    	mov    edi,DWORD PTR ds:0xc0026400
c000cbef:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cbf5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cbf9:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cbff:	8b 3d 04 64 02 c0    	mov    edi,DWORD PTR ds:0xc0026404
c000cc05:	3c 01                	cmp    al,0x1
c000cc07:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cc0b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cc0f:	19 c0                	sbb    eax,eax
c000cc11:	83 e0 02             	and    eax,0x2
c000cc14:	83 c0 41             	add    eax,0x41
c000cc17:	0f be e8             	movsx  ebp,al
c000cc1a:	3c 43                	cmp    al,0x43
c000cc1c:	75 10                	jne    c000cc2e <LogicalDisk::assignDriveLetter()+0x50>
c000cc1e:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cc25:	75 5d                	jne    c000cc84 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc27:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cc2c:	75 56                	jne    c000cc84 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc2e:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cc31:	ba 01 00 00 00       	mov    edx,0x1
c000cc36:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cc3a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cc3e:	d3 e2                	shl    edx,cl
c000cc40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc44:	89 d7                	mov    edi,edx
c000cc46:	89 d6                	mov    esi,edx
c000cc48:	c1 ff 1f             	sar    edi,0x1f
c000cc4b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cc4f:	21 f9                	and    ecx,edi
c000cc51:	09 d1                	or     ecx,edx
c000cc53:	75 2f                	jne    c000cc84 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc55:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cc59:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc5d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cc63:	09 f2                	or     edx,esi
c000cc65:	89 15 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,edx
c000cc6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc6f:	09 fa                	or     edx,edi
c000cc71:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cc75:	89 15 04 64 02 c0    	mov    DWORD PTR ds:0xc0026404,edx
c000cc7b:	89 1c bd 20 64 02 c0 	mov    DWORD PTR [edi*4-0x3ffd9be0],ebx
c000cc82:	eb 08                	jmp    c000cc8c <LogicalDisk::assignDriveLetter()+0xae>
c000cc84:	45                   	inc    ebp
c000cc85:	40                   	inc    eax
c000cc86:	3c 5b                	cmp    al,0x5b
c000cc88:	75 90                	jne    c000cc1a <LogicalDisk::assignDriveLetter()+0x3c>
c000cc8a:	31 c0                	xor    eax,eax
c000cc8c:	83 c4 14             	add    esp,0x14
c000cc8f:	5b                   	pop    ebx
c000cc90:	5e                   	pop    esi
c000cc91:	5f                   	pop    edi
c000cc92:	5d                   	pop    ebp
c000cc93:	c3                   	ret    

c000cc94 <LogicalDisk::mount()>:
c000cc94:	56                   	push   esi
c000cc95:	53                   	push   ebx
c000cc96:	53                   	push   ebx
c000cc97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc9b:	8b 1d b4 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb4
c000cca1:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000ccab:	85 db                	test   ebx,ebx
c000ccad:	74 27                	je     c000ccd6 <LogicalDisk::mount()+0x42>
c000ccaf:	51                   	push   ecx
c000ccb0:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000ccb7:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ccb9:	83 e8 41             	sub    eax,0x41
c000ccbc:	50                   	push   eax
c000ccbd:	56                   	push   esi
c000ccbe:	53                   	push   ebx
c000ccbf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ccc2:	83 c4 10             	add    esp,0x10
c000ccc5:	84 c0                	test   al,al
c000ccc7:	74 08                	je     c000ccd1 <LogicalDisk::mount()+0x3d>
c000ccc9:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000cccf:	eb 07                	jmp    c000ccd8 <LogicalDisk::mount()+0x44>
c000ccd1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ccd4:	eb d5                	jmp    c000ccab <LogicalDisk::mount()+0x17>
c000ccd6:	31 c0                	xor    eax,eax
c000ccd8:	5a                   	pop    edx
c000ccd9:	5b                   	pop    ebx
c000ccda:	5e                   	pop    esi
c000ccdb:	c3                   	ret    

c000ccdc <LogicalDisk::unmount()>:
c000ccdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cce0:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000ccea:	c3                   	ret    
c000cceb:	90                   	nop

c000ccec <LogicalDisk::eject()>:
c000ccec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccf0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ccf6:	8b 10                	mov    edx,DWORD PTR [eax]
c000ccf8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ccfc:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000ccff:	90                   	nop

c000cd00 <LogicalDisk::unassignDriveLetter()>:
c000cd00:	57                   	push   edi
c000cd01:	56                   	push   esi
c000cd02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd06:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cd0d:	84 c9                	test   cl,cl
c000cd0f:	75 0f                	jne    c000cd20 <LogicalDisk::unassignDriveLetter()+0x20>
c000cd11:	c7 44 24 0c ec fc 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fcec
c000cd19:	5e                   	pop    esi
c000cd1a:	5f                   	pop    edi
c000cd1b:	e9 a7 36 00 00       	jmp    c00103c7 <KePanic(char const*)>
c000cd20:	83 e9 41             	sub    ecx,0x41
c000cd23:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cd2a:	b8 01 00 00 00       	mov    eax,0x1
c000cd2f:	c7 04 8d 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd9be0],0x0
c000cd3a:	d3 e0                	shl    eax,cl
c000cd3c:	89 c7                	mov    edi,eax
c000cd3e:	f7 d0                	not    eax
c000cd40:	c1 ff 1f             	sar    edi,0x1f
c000cd43:	21 05 00 64 02 c0    	and    DWORD PTR ds:0xc0026400,eax
c000cd49:	89 fe                	mov    esi,edi
c000cd4b:	f7 d6                	not    esi
c000cd4d:	21 35 04 64 02 c0    	and    DWORD PTR ds:0xc0026404,esi
c000cd53:	5e                   	pop    esi
c000cd54:	5f                   	pop    edi
c000cd55:	c3                   	ret    

c000cd56 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cd56:	57                   	push   edi
c000cd57:	56                   	push   esi
c000cd58:	53                   	push   ebx
c000cd59:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd61:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cd69:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cd6f:	77 41                	ja     c000cdb2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cd71:	99                   	cdq    
c000cd72:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cd78:	01 c8                	add    eax,ecx
c000cd7a:	11 da                	adc    edx,ebx
c000cd7c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cd82:	19 d7                	sbb    edi,edx
c000cd84:	72 33                	jb     c000cdb9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cd86:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cd8c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cd92:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd96:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cd9a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cda0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cda6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdaa:	5b                   	pop    ebx
c000cdab:	5e                   	pop    esi
c000cdac:	5f                   	pop    edi
c000cdad:	e9 c0 0a 00 00       	jmp    c000d872 <VCache::read(unsigned long long, int, void*)>
c000cdb2:	b8 05 00 00 00       	mov    eax,0x5
c000cdb7:	eb 05                	jmp    c000cdbe <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cdb9:	b8 07 00 00 00       	mov    eax,0x7
c000cdbe:	5b                   	pop    ebx
c000cdbf:	5e                   	pop    esi
c000cdc0:	5f                   	pop    edi
c000cdc1:	c3                   	ret    

c000cdc2 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cdc2:	57                   	push   edi
c000cdc3:	56                   	push   esi
c000cdc4:	53                   	push   ebx
c000cdc5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cdc9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cdcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cdd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cdd5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cddb:	77 41                	ja     c000ce1e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cddd:	99                   	cdq    
c000cdde:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cde4:	01 c8                	add    eax,ecx
c000cde6:	11 da                	adc    edx,ebx
c000cde8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cdee:	19 d7                	sbb    edi,edx
c000cdf0:	72 33                	jb     c000ce25 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cdf2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cdf8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cdfe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ce02:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ce06:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ce0c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ce12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce16:	5b                   	pop    ebx
c000ce17:	5e                   	pop    esi
c000ce18:	5f                   	pop    edi
c000ce19:	e9 66 09 00 00       	jmp    c000d784 <VCache::write(unsigned long long, int, void*)>
c000ce1e:	b8 05 00 00 00       	mov    eax,0x5
c000ce23:	eb 05                	jmp    c000ce2a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ce25:	b8 07 00 00 00       	mov    eax,0x7
c000ce2a:	5b                   	pop    ebx
c000ce2b:	5e                   	pop    esi
c000ce2c:	5f                   	pop    edi
c000ce2d:	c3                   	ret    
c000ce2e:	66 90                	xchg   ax,ax

c000ce30 <Mouse::Mouse(char const*)>:
c000ce30:	83 ec 0c             	sub    esp,0xc
c000ce33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce37:	83 ec 08             	sub    esp,0x8
c000ce3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3e:	50                   	push   eax
c000ce3f:	e8 98 ed ff ff       	call   c000bbdc <Device::Device(char const*)>
c000ce44:	83 c4 10             	add    esp,0x10
c000ce47:	ba 40 fd 01 c0       	mov    edx,0xc001fd40
c000ce4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce50:	89 10                	mov    DWORD PTR [eax],edx
c000ce52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce56:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ce60:	90                   	nop
c000ce61:	83 c4 0c             	add    esp,0xc
c000ce64:	c3                   	ret    
c000ce65:	90                   	nop
c000ce66:	66 90                	xchg   ax,ax

c000ce68 <Mouse::~Mouse()>:
c000ce68:	83 ec 0c             	sub    esp,0xc
c000ce6b:	ba 40 fd 01 c0       	mov    edx,0xc001fd40
c000ce70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce74:	89 10                	mov    DWORD PTR [eax],edx
c000ce76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce7a:	83 ec 0c             	sub    esp,0xc
c000ce7d:	50                   	push   eax
c000ce7e:	e8 c3 ea ff ff       	call   c000b946 <Device::~Device()>
c000ce83:	83 c4 10             	add    esp,0x10
c000ce86:	90                   	nop
c000ce87:	83 c4 0c             	add    esp,0xc
c000ce8a:	c3                   	ret    
c000ce8b:	90                   	nop

c000ce8c <Mouse::~Mouse()>:
c000ce8c:	83 ec 0c             	sub    esp,0xc
c000ce8f:	83 ec 0c             	sub    esp,0xc
c000ce92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce96:	e8 cd ff ff ff       	call   c000ce68 <Mouse::~Mouse()>
c000ce9b:	83 c4 10             	add    esp,0x10
c000ce9e:	83 ec 08             	sub    esp,0x8
c000cea1:	68 58 01 00 00       	push   0x158
c000cea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceaa:	e8 61 d6 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000ceaf:	83 c4 10             	add    esp,0x10
c000ceb2:	83 c4 0c             	add    esp,0xc
c000ceb5:	c3                   	ret    

c000ceb6 <NIC::getMAC()>:
c000ceb6:	31 c0                	xor    eax,eax
c000ceb8:	31 d2                	xor    edx,edx
c000ceba:	c3                   	ret    
c000cebb:	90                   	nop

c000cebc <NIC::write(int, unsigned char*, int*)>:
c000cebc:	b8 01 00 00 00       	mov    eax,0x1
c000cec1:	c3                   	ret    

c000cec2 <NIC::NIC(char const*)>:
c000cec2:	83 ec 0c             	sub    esp,0xc
c000cec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cec9:	83 ec 08             	sub    esp,0x8
c000cecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced0:	50                   	push   eax
c000ced1:	e8 06 ed ff ff       	call   c000bbdc <Device::Device(char const*)>
c000ced6:	83 c4 10             	add    esp,0x10
c000ced9:	ba 6c fd 01 c0       	mov    edx,0xc001fd6c
c000cede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cee2:	89 10                	mov    DWORD PTR [eax],edx
c000cee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cee8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000cef2:	90                   	nop
c000cef3:	83 c4 0c             	add    esp,0xc
c000cef6:	c3                   	ret    
c000cef7:	90                   	nop

c000cef8 <NIC::~NIC()>:
c000cef8:	83 ec 0c             	sub    esp,0xc
c000cefb:	ba 6c fd 01 c0       	mov    edx,0xc001fd6c
c000cf00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf04:	89 10                	mov    DWORD PTR [eax],edx
c000cf06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf0a:	83 ec 0c             	sub    esp,0xc
c000cf0d:	50                   	push   eax
c000cf0e:	e8 33 ea ff ff       	call   c000b946 <Device::~Device()>
c000cf13:	83 c4 10             	add    esp,0x10
c000cf16:	90                   	nop
c000cf17:	83 c4 0c             	add    esp,0xc
c000cf1a:	c3                   	ret    
c000cf1b:	90                   	nop

c000cf1c <NIC::~NIC()>:
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	83 ec 0c             	sub    esp,0xc
c000cf22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf26:	e8 cd ff ff ff       	call   c000cef8 <NIC::~NIC()>
c000cf2b:	83 c4 10             	add    esp,0x10
c000cf2e:	83 ec 08             	sub    esp,0x8
c000cf31:	68 58 01 00 00       	push   0x158
c000cf36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3a:	e8 d1 d5 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000cf3f:	83 c4 10             	add    esp,0x10
c000cf42:	83 c4 0c             	add    esp,0xc
c000cf45:	c3                   	ret    

c000cf46 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cf46:	55                   	push   ebp
c000cf47:	57                   	push   edi
c000cf48:	56                   	push   esi
c000cf49:	53                   	push   ebx
c000cf4a:	81 ec 28 01 00 00    	sub    esp,0x128
c000cf50:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cf57:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cf5e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cf65:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cf6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf70:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf74:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cf7b:	e8 58 ed ff ff       	call   c000bcd8 <Device::getName()>
c000cf80:	5a                   	pop    edx
c000cf81:	59                   	pop    ecx
c000cf82:	50                   	push   eax
c000cf83:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cf87:	55                   	push   ebp
c000cf88:	e8 63 36 ff ff       	call   c00005f0 <strcpy>
c000cf8d:	5b                   	pop    ebx
c000cf8e:	58                   	pop    eax
c000cf8f:	68 98 fd 01 c0       	push   0xc001fd98
c000cf94:	55                   	push   ebp
c000cf95:	e8 16 38 ff ff       	call   c00007b0 <strcat>
c000cf9a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000cfa1:	e8 bf a8 ff ff       	call   c0007865 <malloc>
c000cfa6:	83 c4 0c             	add    esp,0xc
c000cfa9:	89 c3                	mov    ebx,eax
c000cfab:	57                   	push   edi
c000cfac:	56                   	push   esi
c000cfad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cfb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cfb5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cfbc:	55                   	push   ebp
c000cfbd:	50                   	push   eax
c000cfbe:	e8 5b fb ff ff       	call   c000cb1e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cfc3:	83 c4 14             	add    esp,0x14
c000cfc6:	53                   	push   ebx
c000cfc7:	e8 12 fc ff ff       	call   c000cbde <LogicalDisk::assignDriveLetter()>
c000cfcc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cfcf:	e8 c0 fc ff ff       	call   c000cc94 <LogicalDisk::mount()>
c000cfd4:	58                   	pop    eax
c000cfd5:	5a                   	pop    edx
c000cfd6:	53                   	push   ebx
c000cfd7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cfde:	e8 61 ea ff ff       	call   c000ba44 <Device::addChild(Device*)>
c000cfe3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cfe9:	5b                   	pop    ebx
c000cfea:	5e                   	pop    esi
c000cfeb:	5f                   	pop    edi
c000cfec:	5d                   	pop    ebp
c000cfed:	c3                   	ret    

c000cfee <createPartitionsForDisk(PhysicalDisk*)>:
c000cfee:	55                   	push   ebp
c000cfef:	57                   	push   edi
c000cff0:	56                   	push   esi
c000cff1:	53                   	push   ebx
c000cff2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cff8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cfff:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d005:	3d 00 02 00 00       	cmp    eax,0x200
c000d00a:	74 27                	je     c000d033 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d00c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d012:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d018:	83 ec 10             	sub    esp,0x10
c000d01b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d01f:	99                   	cdq    
c000d020:	c1 e6 0a             	shl    esi,0xa
c000d023:	52                   	push   edx
c000d024:	89 fd                	mov    ebp,edi
c000d026:	50                   	push   eax
c000d027:	55                   	push   ebp
c000d028:	56                   	push   esi
c000d029:	e8 b2 0c 01 00       	call   c001dce0 <__udivdi3>
c000d02e:	e9 b1 00 00 00       	jmp    c000d0e4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d033:	83 ec 0c             	sub    esp,0xc
c000d036:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d038:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d03c:	56                   	push   esi
c000d03d:	6a 01                	push   0x1
c000d03f:	6a 00                	push   0x0
c000d041:	6a 00                	push   0x0
c000d043:	53                   	push   ebx
c000d044:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d047:	83 c4 20             	add    esp,0x20
c000d04a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d052:	75 0a                	jne    c000d05e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d054:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d05c:	74 2c                	je     c000d08a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d05e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d064:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d06a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d070:	83 ec 10             	sub    esp,0x10
c000d073:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d077:	89 f7                	mov    edi,esi
c000d079:	c1 e0 0a             	shl    eax,0xa
c000d07c:	c1 ff 1f             	sar    edi,0x1f
c000d07f:	57                   	push   edi
c000d080:	56                   	push   esi
c000d081:	52                   	push   edx
c000d082:	50                   	push   eax
c000d083:	e8 58 0c 01 00       	call   c001dce0 <__udivdi3>
c000d088:	eb 5a                	jmp    c000d0e4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d08a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d091:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d098:	83 e1 7f             	and    ecx,0x7f
c000d09b:	83 e0 7f             	and    eax,0x7f
c000d09e:	01 c1                	add    ecx,eax
c000d0a0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d0a7:	83 e0 7f             	and    eax,0x7f
c000d0aa:	01 c1                	add    ecx,eax
c000d0ac:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d0b3:	83 e0 7f             	and    eax,0x7f
c000d0b6:	00 c1                	add    cl,al
c000d0b8:	74 41                	je     c000d0fb <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d0ba:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d0c0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d0c6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d0cc:	83 ec 10             	sub    esp,0x10
c000d0cf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d0d3:	89 f7                	mov    edi,esi
c000d0d5:	c1 e0 0a             	shl    eax,0xa
c000d0d8:	c1 ff 1f             	sar    edi,0x1f
c000d0db:	57                   	push   edi
c000d0dc:	56                   	push   esi
c000d0dd:	52                   	push   edx
c000d0de:	50                   	push   eax
c000d0df:	e8 fc 0b 01 00       	call   c001dce0 <__udivdi3>
c000d0e4:	83 c4 14             	add    esp,0x14
c000d0e7:	52                   	push   edx
c000d0e8:	50                   	push   eax
c000d0e9:	6a 00                	push   0x0
c000d0eb:	6a 00                	push   0x0
c000d0ed:	53                   	push   ebx
c000d0ee:	e8 53 fe ff ff       	call   c000cf46 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d0f3:	83 c4 20             	add    esp,0x20
c000d0f6:	e9 79 01 00 00       	jmp    c000d274 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d0fb:	89 f0                	mov    eax,esi
c000d0fd:	31 f6                	xor    esi,esi
c000d0ff:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d106:	75 02                	jne    c000d10a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d108:	89 f1                	mov    ecx,esi
c000d10a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d111:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d118:	c1 e2 08             	shl    edx,0x8
c000d11b:	c1 e7 10             	shl    edi,0x10
c000d11e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d126:	09 fa                	or     edx,edi
c000d128:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d130:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d137:	83 c0 10             	add    eax,0x10
c000d13a:	09 fa                	or     edx,edi
c000d13c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d143:	c1 e7 18             	shl    edi,0x18
c000d146:	09 fa                	or     edx,edi
c000d148:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d14f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d153:	c1 e7 10             	shl    edi,0x10
c000d156:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d15d:	c1 e2 08             	shl    edx,0x8
c000d160:	09 fa                	or     edx,edi
c000d162:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d169:	09 fa                	or     edx,edi
c000d16b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d172:	c1 e7 18             	shl    edi,0x18
c000d175:	09 fa                	or     edx,edi
c000d177:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d17b:	46                   	inc    esi
c000d17c:	83 fe 04             	cmp    esi,0x4
c000d17f:	0f 85 7a ff ff ff    	jne    c000d0ff <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d189:	83 f0 01             	xor    eax,0x1
c000d18c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d190:	75 57                	jne    c000d1e9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d192:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d196:	83 f0 01             	xor    eax,0x1
c000d199:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d19d:	75 4a                	jne    c000d1e9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d19f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d1a3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d1ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d1b3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d1b9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d1bf:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d1c5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d1c9:	89 f7                	mov    edi,esi
c000d1cb:	c1 e0 0a             	shl    eax,0xa
c000d1ce:	c1 ff 1f             	sar    edi,0x1f
c000d1d1:	57                   	push   edi
c000d1d2:	56                   	push   esi
c000d1d3:	52                   	push   edx
c000d1d4:	50                   	push   eax
c000d1d5:	e8 06 0b 01 00       	call   c001dce0 <__udivdi3>
c000d1da:	83 c4 10             	add    esp,0x10
c000d1dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1e5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d1e9:	84 c9                	test   cl,cl
c000d1eb:	74 53                	je     c000d240 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d1ed:	0f b6 c9             	movzx  ecx,cl
c000d1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1f8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d1fc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d200:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d204:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d208:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d20c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d210:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d214:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d218:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d21c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d220:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d224:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d228:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d22c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d230:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d234:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d238:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d23c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d240:	31 ed                	xor    ebp,ebp
c000d242:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d246:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d24a:	89 f8                	mov    eax,edi
c000d24c:	09 f0                	or     eax,esi
c000d24e:	74 1e                	je     c000d26e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d250:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d254:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d258:	89 d1                	mov    ecx,edx
c000d25a:	09 c1                	or     ecx,eax
c000d25c:	74 10                	je     c000d26e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d25e:	83 ec 0c             	sub    esp,0xc
c000d261:	57                   	push   edi
c000d262:	56                   	push   esi
c000d263:	52                   	push   edx
c000d264:	50                   	push   eax
c000d265:	53                   	push   ebx
c000d266:	e8 db fc ff ff       	call   c000cf46 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d26b:	83 c4 20             	add    esp,0x20
c000d26e:	45                   	inc    ebp
c000d26f:	83 fd 04             	cmp    ebp,0x4
c000d272:	75 ce                	jne    c000d242 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d274:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d27a:	5b                   	pop    ebx
c000d27b:	5e                   	pop    esi
c000d27c:	5f                   	pop    edi
c000d27d:	5d                   	pop    ebp
c000d27e:	c3                   	ret    
c000d27f:	90                   	nop

c000d280 <Serial::Serial(char const*)>:
c000d280:	83 ec 0c             	sub    esp,0xc
c000d283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d287:	83 ec 08             	sub    esp,0x8
c000d28a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d28e:	50                   	push   eax
c000d28f:	e8 48 e9 ff ff       	call   c000bbdc <Device::Device(char const*)>
c000d294:	83 c4 10             	add    esp,0x10
c000d297:	ba ac fd 01 c0       	mov    edx,0xc001fdac
c000d29c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2a0:	89 10                	mov    DWORD PTR [eax],edx
c000d2a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2a6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d2b0:	90                   	nop
c000d2b1:	83 c4 0c             	add    esp,0xc
c000d2b4:	c3                   	ret    
c000d2b5:	90                   	nop
c000d2b6:	66 90                	xchg   ax,ax

c000d2b8 <Serial::~Serial()>:
c000d2b8:	83 ec 0c             	sub    esp,0xc
c000d2bb:	ba ac fd 01 c0       	mov    edx,0xc001fdac
c000d2c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c4:	89 10                	mov    DWORD PTR [eax],edx
c000d2c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ca:	83 ec 0c             	sub    esp,0xc
c000d2cd:	50                   	push   eax
c000d2ce:	e8 73 e6 ff ff       	call   c000b946 <Device::~Device()>
c000d2d3:	83 c4 10             	add    esp,0x10
c000d2d6:	90                   	nop
c000d2d7:	83 c4 0c             	add    esp,0xc
c000d2da:	c3                   	ret    
c000d2db:	90                   	nop

c000d2dc <Serial::~Serial()>:
c000d2dc:	83 ec 0c             	sub    esp,0xc
c000d2df:	83 ec 0c             	sub    esp,0xc
c000d2e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2e6:	e8 cd ff ff ff       	call   c000d2b8 <Serial::~Serial()>
c000d2eb:	83 c4 10             	add    esp,0x10
c000d2ee:	83 ec 08             	sub    esp,0x8
c000d2f1:	68 58 01 00 00       	push   0x158
c000d2f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2fa:	e8 11 d2 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	83 c4 0c             	add    esp,0xc
c000d305:	c3                   	ret    
c000d306:	66 90                	xchg   ax,ax

c000d308 <Timer::Timer(char const*)>:
c000d308:	83 ec 0c             	sub    esp,0xc
c000d30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d30f:	83 ec 08             	sub    esp,0x8
c000d312:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d316:	50                   	push   eax
c000d317:	e8 c0 e8 ff ff       	call   c000bbdc <Device::Device(char const*)>
c000d31c:	83 c4 10             	add    esp,0x10
c000d31f:	ba f0 fd 01 c0       	mov    edx,0xc001fdf0
c000d324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d328:	89 10                	mov    DWORD PTR [eax],edx
c000d32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d32e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d338:	90                   	nop
c000d339:	83 c4 0c             	add    esp,0xc
c000d33c:	c3                   	ret    
c000d33d:	90                   	nop
c000d33e:	66 90                	xchg   ax,ax

c000d340 <Timer::~Timer()>:
c000d340:	83 ec 0c             	sub    esp,0xc
c000d343:	ba f0 fd 01 c0       	mov    edx,0xc001fdf0
c000d348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d34c:	89 10                	mov    DWORD PTR [eax],edx
c000d34e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d352:	83 ec 0c             	sub    esp,0xc
c000d355:	50                   	push   eax
c000d356:	e8 eb e5 ff ff       	call   c000b946 <Device::~Device()>
c000d35b:	83 c4 10             	add    esp,0x10
c000d35e:	90                   	nop
c000d35f:	83 c4 0c             	add    esp,0xc
c000d362:	c3                   	ret    
c000d363:	90                   	nop

c000d364 <Timer::~Timer()>:
c000d364:	83 ec 0c             	sub    esp,0xc
c000d367:	83 ec 0c             	sub    esp,0xc
c000d36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36e:	e8 cd ff ff ff       	call   c000d340 <Timer::~Timer()>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	83 ec 08             	sub    esp,0x8
c000d379:	68 5c 01 00 00       	push   0x15c
c000d37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d382:	e8 89 d1 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000d387:	83 c4 10             	add    esp,0x10
c000d38a:	83 c4 0c             	add    esp,0xc
c000d38d:	c3                   	ret    

c000d38e <Timer::read()>:
c000d38e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d392:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d398:	c3                   	ret    

c000d399 <setupTimer(int)>:
c000d399:	53                   	push   ebx
c000d39a:	83 ec 14             	sub    esp,0x14
c000d39d:	68 5c 01 00 00       	push   0x15c
c000d3a2:	e8 be a4 ff ff       	call   c0007865 <malloc>
c000d3a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3aa:	89 c3                	mov    ebx,eax
c000d3ac:	e8 97 01 01 00       	call   c001d548 <PIT::PIT()>
c000d3b1:	58                   	pop    eax
c000d3b2:	5a                   	pop    edx
c000d3b3:	53                   	push   ebx
c000d3b4:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000d3ba:	e8 85 e6 ff ff       	call   c000ba44 <Device::addChild(Device*)>
c000d3bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3c1:	6a 00                	push   0x0
c000d3c3:	6a 00                	push   0x0
c000d3c5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d3c9:	53                   	push   ebx
c000d3ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d3cd:	89 d8                	mov    eax,ebx
c000d3cf:	83 c4 28             	add    esp,0x28
c000d3d2:	5b                   	pop    ebx
c000d3d3:	c3                   	ret    

c000d3d4 <timerHandler(unsigned int)>:
c000d3d4:	56                   	push   esi
c000d3d5:	53                   	push   ebx
c000d3d6:	51                   	push   ecx
c000d3d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3db:	01 05 8c 64 02 c0    	add    DWORD PTR ds:0xc002648c,eax
c000d3e1:	80 3d bd 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ebd,0x0
c000d3e8:	0f 84 4a 01 00 00    	je     c000d538 <timerHandler(unsigned int)+0x164>
c000d3ee:	fa                   	cli    
c000d3ef:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000d3f5:	83 ec 0c             	sub    esp,0xc
c000d3f8:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c000d3fe:	68 78 71 02 c0       	push   0xc0027178
c000d403:	e8 a8 0e 01 00       	call   c001e2b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d408:	83 c4 10             	add    esp,0x10
c000d40b:	84 c0                	test   al,al
c000d40d:	0f 85 a1 00 00 00    	jne    c000d4b4 <timerHandler(unsigned int)+0xe0>
c000d413:	83 ec 0c             	sub    esp,0xc
c000d416:	68 78 71 02 c0       	push   0xc0027178
c000d41b:	e8 ac 0e 01 00       	call   c001e2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d420:	83 c4 10             	add    esp,0x10
c000d423:	89 c6                	mov    esi,eax
c000d425:	8d 76 00             	lea    esi,[esi+0x0]
c000d428:	83 ec 0c             	sub    esp,0xc
c000d42b:	68 78 71 02 c0       	push   0xc0027178
c000d430:	e8 97 0e 01 00       	call   c001e2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d435:	c7 04 24 78 71 02 c0 	mov    DWORD PTR [esp],0xc0027178
c000d43c:	89 c3                	mov    ebx,eax
c000d43e:	e8 91 0e 01 00       	call   c001e2d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d443:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d446:	83 c4 10             	add    esp,0x10
c000d449:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c000d44f:	77 23                	ja     c000d474 <timerHandler(unsigned int)+0xa0>
c000d451:	83 ec 0c             	sub    esp,0xc
c000d454:	53                   	push   ebx
c000d455:	e8 46 7a 00 00       	call   c0014ea0 <unblockTask(ThreadControlBlock*)>
c000d45a:	83 c4 10             	add    esp,0x10
c000d45d:	39 de                	cmp    esi,ebx
c000d45f:	75 27                	jne    c000d488 <timerHandler(unsigned int)+0xb4>
c000d461:	83 ec 0c             	sub    esp,0xc
c000d464:	68 78 71 02 c0       	push   0xc0027178
c000d469:	e8 5e 0e 01 00       	call   c001e2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d46e:	89 c6                	mov    esi,eax
c000d470:	eb 12                	jmp    c000d484 <timerHandler(unsigned int)+0xb0>
c000d472:	66 90                	xchg   ax,ax
c000d474:	52                   	push   edx
c000d475:	52                   	push   edx
c000d476:	53                   	push   ebx
c000d477:	68 78 71 02 c0       	push   0xc0027178
c000d47c:	e8 0b 0f 01 00       	call   c001e38c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d481:	8d 76 00             	lea    esi,[esi+0x0]
c000d484:	83 c4 10             	add    esp,0x10
c000d487:	90                   	nop
c000d488:	83 ec 0c             	sub    esp,0xc
c000d48b:	68 78 71 02 c0       	push   0xc0027178
c000d490:	e8 1b 0e 01 00       	call   c001e2b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d495:	83 c4 10             	add    esp,0x10
c000d498:	84 c0                	test   al,al
c000d49a:	75 18                	jne    c000d4b4 <timerHandler(unsigned int)+0xe0>
c000d49c:	83 ec 0c             	sub    esp,0xc
c000d49f:	68 78 71 02 c0       	push   0xc0027178
c000d4a4:	e8 23 0e 01 00       	call   c001e2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d4a9:	83 c4 10             	add    esp,0x10
c000d4ac:	39 f0                	cmp    eax,esi
c000d4ae:	0f 85 74 ff ff ff    	jne    c000d428 <timerHandler(unsigned int)+0x54>
c000d4b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d4b9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d4bd:	74 41                	je     c000d500 <timerHandler(unsigned int)+0x12c>
c000d4bf:	80 3d bc 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ebc,0x0
c000d4c6:	74 38                	je     c000d500 <timerHandler(unsigned int)+0x12c>
c000d4c8:	fa                   	cli    
c000d4c9:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000d4cf:	a1 8c 64 02 c0       	mov    eax,ds:0xc002648c
c000d4d4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d4da:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d4dd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d4e3:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d4e6:	72 08                	jb     c000d4f0 <timerHandler(unsigned int)+0x11c>
c000d4e8:	e8 ef 74 00 00       	call   c00149dc <schedule()>
c000d4ed:	8d 76 00             	lea    esi,[esi+0x0]
c000d4f0:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000d4f5:	48                   	dec    eax
c000d4f6:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000d4fb:	75 03                	jne    c000d500 <timerHandler(unsigned int)+0x12c>
c000d4fd:	fb                   	sti    
c000d4fe:	66 90                	xchg   ax,ax
c000d500:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000d505:	48                   	dec    eax
c000d506:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000d50b:	75 1b                	jne    c000d528 <timerHandler(unsigned int)+0x154>
c000d50d:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c000d514:	74 12                	je     c000d528 <timerHandler(unsigned int)+0x154>
c000d516:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c000d520:	e8 b7 74 00 00       	call   c00149dc <schedule()>
c000d525:	8d 76 00             	lea    esi,[esi+0x0]
c000d528:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000d52d:	48                   	dec    eax
c000d52e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000d533:	75 03                	jne    c000d538 <timerHandler(unsigned int)+0x164>
c000d535:	fb                   	sti    
c000d536:	66 90                	xchg   ax,ax
c000d538:	58                   	pop    eax
c000d539:	5b                   	pop    ebx
c000d53a:	5e                   	pop    esi
c000d53b:	c3                   	ret    

c000d53c <VCache::VCache(PhysicalDisk*)>:
c000d53c:	53                   	push   ebx
c000d53d:	83 ec 18             	sub    esp,0x18
c000d540:	ba 20 fe 01 c0       	mov    edx,0xc001fe20
c000d545:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d549:	89 10                	mov    DWORD PTR [eax],edx
c000d54b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d54f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d556:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d55a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d561:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d565:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d56c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d573:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d577:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d57e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d585:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d589:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d590:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d594:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d598:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d59c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d5a3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d5aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5ae:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d5b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5b6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d5ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5be:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d5c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5c6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d5cd:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d5d5:	83 ec 0c             	sub    esp,0xc
c000d5d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d5dc:	e8 84 a2 ff ff       	call   c0007865 <malloc>
c000d5e1:	83 c4 10             	add    esp,0x10
c000d5e4:	89 c3                	mov    ebx,eax
c000d5e6:	83 ec 0c             	sub    esp,0xc
c000d5e9:	53                   	push   ebx
c000d5ea:	e8 91 71 00 00       	call   c0014780 <Mutex::Mutex()>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d5f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5fd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d601:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d604:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d608:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d60f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d613:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d619:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d61d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d620:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d624:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d62a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d630:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d634:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d637:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d63a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d63e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d642:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d646:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d64c:	05 00 02 00 00       	add    eax,0x200
c000d651:	c1 e0 03             	shl    eax,0x3
c000d654:	83 ec 0c             	sub    esp,0xc
c000d657:	50                   	push   eax
c000d658:	e8 08 a2 ff ff       	call   c0007865 <malloc>
c000d65d:	83 c4 10             	add    esp,0x10
c000d660:	89 c2                	mov    edx,eax
c000d662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d666:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d66d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d674:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d678:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d67c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d680:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d686:	89 d0                	mov    eax,edx
c000d688:	c1 e0 02             	shl    eax,0x2
c000d68b:	01 d0                	add    eax,edx
c000d68d:	c1 e0 04             	shl    eax,0x4
c000d690:	83 ec 0c             	sub    esp,0xc
c000d693:	50                   	push   eax
c000d694:	e8 cc a1 ff ff       	call   c0007865 <malloc>
c000d699:	83 c4 10             	add    esp,0x10
c000d69c:	89 c2                	mov    edx,eax
c000d69e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6a2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d6a5:	90                   	nop
c000d6a6:	83 c4 18             	add    esp,0x18
c000d6a9:	5b                   	pop    ebx
c000d6aa:	c3                   	ret    
c000d6ab:	90                   	nop

c000d6ac <VCache::invalidateReadBuffer()>:
c000d6ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d6b0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d6b6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d6ba:	c3                   	ret    
c000d6bb:	90                   	nop

c000d6bc <VCache::writeWriteBuffer()>:
c000d6bc:	53                   	push   ebx
c000d6bd:	83 ec 08             	sub    esp,0x8
c000d6c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d6c4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d6c8:	74 1e                	je     c000d6e8 <VCache::writeWriteBuffer()+0x2c>
c000d6ca:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6cd:	83 ec 0c             	sub    esp,0xc
c000d6d0:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6d2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d6d5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d6d8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d6db:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d6de:	50                   	push   eax
c000d6df:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d6e2:	83 c4 20             	add    esp,0x20
c000d6e5:	8d 76 00             	lea    esi,[esi+0x0]
c000d6e8:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d6ef:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d6f6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d6fa:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d701:	83 c4 08             	add    esp,0x8
c000d704:	5b                   	pop    ebx
c000d705:	c3                   	ret    
c000d706:	66 90                	xchg   ax,ax

c000d708 <VCache::~VCache()>:
c000d708:	83 ec 0c             	sub    esp,0xc
c000d70b:	ba 20 fe 01 c0       	mov    edx,0xc001fe20
c000d710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d714:	89 10                	mov    DWORD PTR [eax],edx
c000d716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d71a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d71d:	84 c0                	test   al,al
c000d71f:	74 0f                	je     c000d730 <VCache::~VCache()+0x28>
c000d721:	83 ec 0c             	sub    esp,0xc
c000d724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d728:	e8 8f ff ff ff       	call   c000d6bc <VCache::writeWriteBuffer()>
c000d72d:	83 c4 10             	add    esp,0x10
c000d730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d734:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d737:	83 ec 0c             	sub    esp,0xc
c000d73a:	50                   	push   eax
c000d73b:	e8 35 a1 ff ff       	call   c0007875 <free>
c000d740:	83 c4 10             	add    esp,0x10
c000d743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d747:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d74a:	83 ec 0c             	sub    esp,0xc
c000d74d:	50                   	push   eax
c000d74e:	e8 22 a1 ff ff       	call   c0007875 <free>
c000d753:	83 c4 10             	add    esp,0x10
c000d756:	90                   	nop
c000d757:	83 c4 0c             	add    esp,0xc
c000d75a:	c3                   	ret    
c000d75b:	90                   	nop

c000d75c <VCache::~VCache()>:
c000d75c:	83 ec 0c             	sub    esp,0xc
c000d75f:	83 ec 0c             	sub    esp,0xc
c000d762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d766:	e8 9d ff ff ff       	call   c000d708 <VCache::~VCache()>
c000d76b:	83 c4 10             	add    esp,0x10
c000d76e:	83 ec 08             	sub    esp,0x8
c000d771:	6a 44                	push   0x44
c000d773:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d777:	e8 94 cd ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000d77c:	83 c4 10             	add    esp,0x10
c000d77f:	83 c4 0c             	add    esp,0xc
c000d782:	c3                   	ret    
c000d783:	90                   	nop

c000d784 <VCache::write(unsigned long long, int, void*)>:
c000d784:	55                   	push   ebp
c000d785:	57                   	push   edi
c000d786:	56                   	push   esi
c000d787:	53                   	push   ebx
c000d788:	83 ec 1c             	sub    esp,0x1c
c000d78b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d78f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d793:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d797:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d79b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000d79f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d7a3:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d7a7:	74 07                	je     c000d7b0 <VCache::write(unsigned long long, int, void*)+0x2c>
c000d7a9:	53                   	push   ebx
c000d7aa:	e8 fd fe ff ff       	call   c000d6ac <VCache::invalidateReadBuffer()>
c000d7af:	58                   	pop    eax
c000d7b0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d7b4:	74 62                	je     c000d818 <VCache::write(unsigned long long, int, void*)+0x94>
c000d7b6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d7b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d7bd:	99                   	cdq    
c000d7be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7c2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d7c5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d7c8:	31 c1                	xor    ecx,eax
c000d7ca:	89 d0                	mov    eax,edx
c000d7cc:	89 ca                	mov    edx,ecx
c000d7ce:	31 e8                	xor    eax,ebp
c000d7d0:	09 c2                	or     edx,eax
c000d7d2:	75 38                	jne    c000d80c <VCache::write(unsigned long long, int, void*)+0x88>
c000d7d4:	83 ff 01             	cmp    edi,0x1
c000d7d7:	75 33                	jne    c000d80c <VCache::write(unsigned long long, int, void*)+0x88>
c000d7d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d7dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d7e0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d7e6:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d7e9:	0f af c8             	imul   ecx,eax
c000d7ec:	01 cf                	add    edi,ecx
c000d7ee:	89 c1                	mov    ecx,eax
c000d7f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7f2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d7f5:	40                   	inc    eax
c000d7f6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d7f9:	83 f8 50             	cmp    eax,0x50
c000d7fc:	75 6a                	jne    c000d868 <VCache::write(unsigned long long, int, void*)+0xe4>
c000d7fe:	83 ec 0c             	sub    esp,0xc
c000d801:	53                   	push   ebx
c000d802:	e8 b5 fe ff ff       	call   c000d6bc <VCache::writeWriteBuffer()>
c000d807:	83 c4 10             	add    esp,0x10
c000d80a:	eb 5c                	jmp    c000d868 <VCache::write(unsigned long long, int, void*)+0xe4>
c000d80c:	83 ec 0c             	sub    esp,0xc
c000d80f:	53                   	push   ebx
c000d810:	e8 a7 fe ff ff       	call   c000d6bc <VCache::writeWriteBuffer()>
c000d815:	83 c4 10             	add    esp,0x10
c000d818:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d81b:	83 ff 4f             	cmp    edi,0x4f
c000d81e:	7f 20                	jg     c000d840 <VCache::write(unsigned long long, int, void*)+0xbc>
c000d820:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000d823:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d827:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000d82a:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d82d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d831:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d834:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d83a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d83c:	eb 2a                	jmp    c000d868 <VCache::write(unsigned long long, int, void*)+0xe4>
c000d83e:	66 90                	xchg   ax,ax
c000d840:	8b 10                	mov    edx,DWORD PTR [eax]
c000d842:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d846:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000d84a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d84e:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000d852:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d856:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d85a:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d85d:	83 c4 1c             	add    esp,0x1c
c000d860:	5b                   	pop    ebx
c000d861:	5e                   	pop    esi
c000d862:	5f                   	pop    edi
c000d863:	5d                   	pop    ebp
c000d864:	ff e0                	jmp    eax
c000d866:	66 90                	xchg   ax,ax
c000d868:	83 c4 1c             	add    esp,0x1c
c000d86b:	31 c0                	xor    eax,eax
c000d86d:	5b                   	pop    ebx
c000d86e:	5e                   	pop    esi
c000d86f:	5f                   	pop    edi
c000d870:	5d                   	pop    ebp
c000d871:	c3                   	ret    

c000d872 <VCache::read(unsigned long long, int, void*)>:
c000d872:	55                   	push   ebp
c000d873:	57                   	push   edi
c000d874:	56                   	push   esi
c000d875:	53                   	push   ebx
c000d876:	83 ec 1c             	sub    esp,0x1c
c000d879:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000d87d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d881:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d885:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000d889:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d88d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d891:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000d895:	74 0d                	je     c000d8a4 <VCache::read(unsigned long long, int, void*)+0x32>
c000d897:	83 ec 0c             	sub    esp,0xc
c000d89a:	57                   	push   edi
c000d89b:	e8 1c fe ff ff       	call   c000d6bc <VCache::writeWriteBuffer()>
c000d8a0:	83 c4 10             	add    esp,0x10
c000d8a3:	90                   	nop
c000d8a4:	83 fd 01             	cmp    ebp,0x1
c000d8a7:	0f 85 93 00 00 00    	jne    c000d940 <VCache::read(unsigned long long, int, void*)+0xce>
c000d8ad:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d8b0:	89 04 24             	mov    DWORD PTR [esp],eax
c000d8b3:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000d8ba:	0f 85 80 00 00 00    	jne    c000d940 <VCache::read(unsigned long long, int, void*)+0xce>
c000d8c0:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000d8c3:	89 e9                	mov    ecx,ebp
c000d8c5:	f7 d9                	neg    ecx
c000d8c7:	89 c8                	mov    eax,ecx
c000d8c9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d8cd:	c1 f8 1f             	sar    eax,0x1f
c000d8d0:	21 d9                	and    ecx,ebx
c000d8d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d8d6:	89 c8                	mov    eax,ecx
c000d8d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d8dc:	21 f1                	and    ecx,esi
c000d8de:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000d8e2:	89 ca                	mov    edx,ecx
c000d8e4:	74 2e                	je     c000d914 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d8e6:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000d8e9:	75 29                	jne    c000d914 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d8eb:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000d8ee:	75 24                	jne    c000d914 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d8f0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d8f3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d8f9:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000d8fc:	8d 70 ff             	lea    esi,[eax-0x1]
c000d8ff:	21 f3                	and    ebx,esi
c000d901:	0f af d9             	imul   ebx,ecx
c000d904:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000d907:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d90b:	89 de                	mov    esi,ebx
c000d90d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d90f:	31 c0                	xor    eax,eax
c000d911:	eb 61                	jmp    c000d974 <VCache::read(unsigned long long, int, void*)+0x102>
c000d913:	90                   	nop
c000d914:	83 ec 0c             	sub    esp,0xc
c000d917:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000d91b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d91f:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000d922:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000d925:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d927:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000d92a:	55                   	push   ebp
c000d92b:	52                   	push   edx
c000d92c:	50                   	push   eax
c000d92d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d931:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000d934:	83 c4 20             	add    esp,0x20
c000d937:	85 c0                	test   eax,eax
c000d939:	75 39                	jne    c000d974 <VCache::read(unsigned long long, int, void*)+0x102>
c000d93b:	eb b3                	jmp    c000d8f0 <VCache::read(unsigned long long, int, void*)+0x7e>
c000d93d:	8d 76 00             	lea    esi,[esi+0x0]
c000d940:	83 ec 0c             	sub    esp,0xc
c000d943:	57                   	push   edi
c000d944:	e8 63 fd ff ff       	call   c000d6ac <VCache::invalidateReadBuffer()>
c000d949:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d94c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d950:	8b 10                	mov    edx,DWORD PTR [eax]
c000d952:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000d956:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000d95a:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000d95e:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000d962:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d966:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d969:	83 c4 2c             	add    esp,0x2c
c000d96c:	5b                   	pop    ebx
c000d96d:	5e                   	pop    esi
c000d96e:	5f                   	pop    edi
c000d96f:	5d                   	pop    ebp
c000d970:	ff e0                	jmp    eax
c000d972:	66 90                	xchg   ax,ax
c000d974:	83 c4 1c             	add    esp,0x1c
c000d977:	5b                   	pop    ebx
c000d978:	5e                   	pop    esi
c000d979:	5f                   	pop    edi
c000d97a:	5d                   	pop    ebp
c000d97b:	c3                   	ret    

c000d97c <Video::putrect(int, int, int, int, unsigned int)>:
c000d97c:	55                   	push   ebp
c000d97d:	57                   	push   edi
c000d97e:	56                   	push   esi
c000d97f:	53                   	push   ebx
c000d980:	83 ec 1c             	sub    esp,0x1c
c000d983:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d987:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d98b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d98f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d993:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d997:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d99b:	01 df                	add    edi,ebx
c000d99d:	39 fb                	cmp    ebx,edi
c000d99f:	7d 1f                	jge    c000d9c0 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d9a1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d9a5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d9a9:	7d 12                	jge    c000d9bd <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d9ab:	8b 16                	mov    edx,DWORD PTR [esi]
c000d9ad:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9b1:	53                   	push   ebx
c000d9b2:	55                   	push   ebp
c000d9b3:	45                   	inc    ebp
c000d9b4:	56                   	push   esi
c000d9b5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d9b8:	83 c4 10             	add    esp,0x10
c000d9bb:	eb e8                	jmp    c000d9a5 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d9bd:	43                   	inc    ebx
c000d9be:	eb dd                	jmp    c000d99d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d9c0:	83 c4 1c             	add    esp,0x1c
c000d9c3:	5b                   	pop    ebx
c000d9c4:	5e                   	pop    esi
c000d9c5:	5f                   	pop    edi
c000d9c6:	5d                   	pop    ebp
c000d9c7:	c3                   	ret    

c000d9c8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d9c8:	55                   	push   ebp
c000d9c9:	57                   	push   edi
c000d9ca:	31 ff                	xor    edi,edi
c000d9cc:	56                   	push   esi
c000d9cd:	53                   	push   ebx
c000d9ce:	83 ec 1c             	sub    esp,0x1c
c000d9d1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d9d5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d9d9:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d9e0:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d9e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9e9:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d9ed:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d9f1:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d9f4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d9f8:	01 f9                	add    ecx,edi
c000d9fa:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d9fe:	7d 2f                	jge    c000da2f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000da00:	31 f6                	xor    esi,esi
c000da02:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000da06:	01 f2                	add    edx,esi
c000da08:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000da0c:	7d 1a                	jge    c000da28 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000da0e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da11:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000da14:	46                   	inc    esi
c000da15:	51                   	push   ecx
c000da16:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da1a:	52                   	push   edx
c000da1b:	55                   	push   ebp
c000da1c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000da26:	eb da                	jmp    c000da02 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000da28:	47                   	inc    edi
c000da29:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000da2d:	eb c5                	jmp    c000d9f4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000da2f:	83 c4 1c             	add    esp,0x1c
c000da32:	5b                   	pop    ebx
c000da33:	5e                   	pop    esi
c000da34:	5f                   	pop    edi
c000da35:	5d                   	pop    ebp
c000da36:	c3                   	ret    
c000da37:	90                   	nop

c000da38 <Video::blit(unsigned int*, int, int, int, int)>:
c000da38:	55                   	push   ebp
c000da39:	57                   	push   edi
c000da3a:	56                   	push   esi
c000da3b:	53                   	push   ebx
c000da3c:	83 ec 1c             	sub    esp,0x1c
c000da3f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da43:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000da47:	85 c0                	test   eax,eax
c000da49:	79 02                	jns    c000da4d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000da4b:	31 c0                	xor    eax,eax
c000da4d:	c1 e0 02             	shl    eax,0x2
c000da50:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000da54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da58:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000da5c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000da60:	39 d8                	cmp    eax,ebx
c000da62:	7e 49                	jle    c000daad <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000da64:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000da6a:	7c 41                	jl     c000daad <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000da6c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000da70:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000da74:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000da78:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000da7c:	39 f9                	cmp    ecx,edi
c000da7e:	7e 22                	jle    c000daa2 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000da80:	83 c5 04             	add    ebp,0x4
c000da83:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000da89:	7c 14                	jl     c000da9f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000da8b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000da8d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000da90:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000da94:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000da98:	56                   	push   esi
c000da99:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000da9c:	83 c4 10             	add    esp,0x10
c000da9f:	47                   	inc    edi
c000daa0:	eb d2                	jmp    c000da74 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000daa2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000daa6:	43                   	inc    ebx
c000daa7:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000daab:	eb ab                	jmp    c000da58 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000daad:	83 c4 1c             	add    esp,0x1c
c000dab0:	5b                   	pop    ebx
c000dab1:	5e                   	pop    esi
c000dab2:	5f                   	pop    edi
c000dab3:	5d                   	pop    ebp
c000dab4:	c3                   	ret    
c000dab5:	90                   	nop

c000dab6 <Video::clearScreen(unsigned int)>:
c000dab6:	57                   	push   edi
c000dab7:	56                   	push   esi
c000dab8:	53                   	push   ebx
c000dab9:	31 db                	xor    ebx,ebx
c000dabb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dabf:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000dac5:	7e 1f                	jle    c000dae6 <Video::clearScreen(unsigned int)+0x30>
c000dac7:	31 ff                	xor    edi,edi
c000dac9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000dacf:	7e 12                	jle    c000dae3 <Video::clearScreen(unsigned int)+0x2d>
c000dad1:	8b 06                	mov    eax,DWORD PTR [esi]
c000dad3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dad7:	53                   	push   ebx
c000dad8:	57                   	push   edi
c000dad9:	47                   	inc    edi
c000dada:	56                   	push   esi
c000dadb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	eb e6                	jmp    c000dac9 <Video::clearScreen(unsigned int)+0x13>
c000dae3:	43                   	inc    ebx
c000dae4:	eb d9                	jmp    c000dabf <Video::clearScreen(unsigned int)+0x9>
c000dae6:	5b                   	pop    ebx
c000dae7:	5e                   	pop    esi
c000dae8:	5f                   	pop    edi
c000dae9:	c3                   	ret    

c000daea <Video::putpixel(int, int, unsigned int)>:
c000daea:	c7 44 24 04 28 fe 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fe28
c000daf2:	e9 d0 28 00 00       	jmp    c00103c7 <KePanic(char const*)>
c000daf7:	90                   	nop

c000daf8 <Video::readPixelApprox(int, int)>:
c000daf8:	83 ec 18             	sub    esp,0x18
c000dafb:	68 49 fe 01 c0       	push   0xc001fe49
c000db00:	e8 c2 28 00 00       	call   c00103c7 <KePanic(char const*)>
c000db05:	31 c0                	xor    eax,eax
c000db07:	83 c4 1c             	add    esp,0x1c
c000db0a:	c3                   	ret    
c000db0b:	90                   	nop

c000db0c <Video::Video(char const*)>:
c000db0c:	83 ec 0c             	sub    esp,0xc
c000db0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db13:	83 ec 08             	sub    esp,0x8
c000db16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db1a:	50                   	push   eax
c000db1b:	e8 bc e0 ff ff       	call   c000bbdc <Device::Device(char const*)>
c000db20:	83 c4 10             	add    esp,0x10
c000db23:	ba c4 fe 01 c0       	mov    edx,0xc001fec4
c000db28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db2c:	89 10                	mov    DWORD PTR [eax],edx
c000db2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db32:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000db3c:	90                   	nop
c000db3d:	83 c4 0c             	add    esp,0xc
c000db40:	c3                   	ret    
c000db41:	90                   	nop

c000db42 <Video::~Video()>:
c000db42:	83 ec 0c             	sub    esp,0xc
c000db45:	ba c4 fe 01 c0       	mov    edx,0xc001fec4
c000db4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db4e:	89 10                	mov    DWORD PTR [eax],edx
c000db50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db54:	83 ec 0c             	sub    esp,0xc
c000db57:	50                   	push   eax
c000db58:	e8 e9 dd ff ff       	call   c000b946 <Device::~Device()>
c000db5d:	83 c4 10             	add    esp,0x10
c000db60:	90                   	nop
c000db61:	83 c4 0c             	add    esp,0xc
c000db64:	c3                   	ret    
c000db65:	90                   	nop

c000db66 <Video::~Video()>:
c000db66:	83 ec 0c             	sub    esp,0xc
c000db69:	83 ec 0c             	sub    esp,0xc
c000db6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db70:	e8 cd ff ff ff       	call   c000db42 <Video::~Video()>
c000db75:	83 c4 10             	add    esp,0x10
c000db78:	83 ec 08             	sub    esp,0x8
c000db7b:	68 64 01 00 00       	push   0x164
c000db80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db84:	e8 87 c9 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c000db89:	83 c4 10             	add    esp,0x10
c000db8c:	83 c4 0c             	add    esp,0xc
c000db8f:	c3                   	ret    

c000db90 <Video::isMonochrome()>:
c000db90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db94:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000db9a:	c3                   	ret    
c000db9b:	90                   	nop

c000db9c <Video::getWidth()>:
c000db9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dba0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dba6:	c3                   	ret    
c000dba7:	90                   	nop

c000dba8 <Video::getHeight()>:
c000dba8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbac:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dbb2:	c3                   	ret    
c000dbb3:	90                   	nop

c000dbb4 <Video::drawCursor(int, int, unsigned int*, int)>:
c000dbb4:	55                   	push   ebp
c000dbb5:	57                   	push   edi
c000dbb6:	56                   	push   esi
c000dbb7:	53                   	push   ebx
c000dbb8:	83 ec 2c             	sub    esp,0x2c
c000dbbb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dbbf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dbc3:	83 f8 01             	cmp    eax,0x1
c000dbc6:	19 c9                	sbb    ecx,ecx
c000dbc8:	31 db                	xor    ebx,ebx
c000dbca:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000dbce:	89 cd                	mov    ebp,ecx
c000dbd0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000dbd8:	f7 d5                	not    ebp
c000dbda:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000dbe0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dbe4:	01 d8                	add    eax,ebx
c000dbe6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbea:	56                   	push   esi
c000dbeb:	e8 b8 ff ff ff       	call   c000dba8 <Video::getHeight()>
c000dbf0:	59                   	pop    ecx
c000dbf1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000dbf5:	7e 70                	jle    c000dc67 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000dbf7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dbfb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000dbff:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000dc02:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dc06:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dc0a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000dc11:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc15:	89 f8                	mov    eax,edi
c000dc17:	83 c0 20             	add    eax,0x20
c000dc1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dc1e:	56                   	push   esi
c000dc1f:	e8 78 ff ff ff       	call   c000db9c <Video::getWidth()>
c000dc24:	5a                   	pop    edx
c000dc25:	39 c7                	cmp    edi,eax
c000dc27:	7d 34                	jge    c000dc5d <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000dc29:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000dc2e:	74 05                	je     c000dc35 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000dc30:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc32:	55                   	push   ebp
c000dc33:	eb 0d                	jmp    c000dc42 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000dc35:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000dc3a:	74 12                	je     c000dc4e <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000dc3c:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc42:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc46:	57                   	push   edi
c000dc47:	56                   	push   esi
c000dc48:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dc4b:	83 c4 10             	add    esp,0x10
c000dc4e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000dc52:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000dc56:	47                   	inc    edi
c000dc57:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000dc5b:	75 c1                	jne    c000dc1e <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000dc5d:	43                   	inc    ebx
c000dc5e:	83 fb 20             	cmp    ebx,0x20
c000dc61:	0f 85 79 ff ff ff    	jne    c000dbe0 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000dc67:	83 c4 2c             	add    esp,0x2c
c000dc6a:	5b                   	pop    ebx
c000dc6b:	5e                   	pop    esi
c000dc6c:	5f                   	pop    edi
c000dc6d:	5d                   	pop    ebp
c000dc6e:	c3                   	ret    
c000dc6f:	90                   	nop

c000dc70 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000dc70:	55                   	push   ebp
c000dc71:	57                   	push   edi
c000dc72:	56                   	push   esi
c000dc73:	53                   	push   ebx
c000dc74:	83 ec 28             	sub    esp,0x28
c000dc77:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000dc7b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000dc7f:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000dc83:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000dc87:	c1 e6 08             	shl    esi,0x8
c000dc8a:	01 c6                	add    esi,eax
c000dc8c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000dc90:	c1 e0 08             	shl    eax,0x8
c000dc93:	01 d0                	add    eax,edx
c000dc95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc9d:	0f af c6             	imul   eax,esi
c000dca0:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000dca7:	50                   	push   eax
c000dca8:	e8 b8 9b ff ff       	call   c0007865 <malloc>
c000dcad:	83 c4 10             	add    esp,0x10
c000dcb0:	89 c7                	mov    edi,eax
c000dcb2:	85 c0                	test   eax,eax
c000dcb4:	75 10                	jne    c000dcc6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000dcb6:	83 ec 0c             	sub    esp,0xc
c000dcb9:	68 74 fe 01 c0       	push   0xc001fe74
c000dcbe:	e8 04 27 00 00       	call   c00103c7 <KePanic(char const*)>
c000dcc3:	83 c4 10             	add    esp,0x10
c000dcc6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000dcc9:	ba 12 00 00 00       	mov    edx,0x12
c000dcce:	84 c0                	test   al,al
c000dcd0:	74 11                	je     c000dce3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000dcd2:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000dcd6:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dcda:	c1 fa 03             	sar    edx,0x3
c000dcdd:	0f af d1             	imul   edx,ecx
c000dce0:	83 c2 12             	add    edx,0x12
c000dce3:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dce7:	74 04                	je     c000dced <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000dce9:	85 f6                	test   esi,esi
c000dceb:	75 12                	jne    c000dcff <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000dced:	83 ec 0c             	sub    esp,0xc
c000dcf0:	68 84 fe 01 c0       	push   0xc001fe84
c000dcf5:	e8 0c c9 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000dcfa:	e9 b8 00 00 00       	jmp    c000ddb7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dcff:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dd03:	80 f9 02             	cmp    cl,0x2
c000dd06:	0f 85 96 00 00 00    	jne    c000dda2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dd0c:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dd11:	75 0e                	jne    c000dd21 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dd13:	84 c0                	test   al,al
c000dd15:	75 0a                	jne    c000dd21 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dd17:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dd1a:	83 e8 18             	sub    eax,0x18
c000dd1d:	a8 f7                	test   al,0xf7
c000dd1f:	74 0a                	je     c000dd2b <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dd21:	83 ec 0c             	sub    esp,0xc
c000dd24:	68 99 fe 01 c0       	push   0xc001fe99
c000dd29:	eb 7f                	jmp    c000ddaa <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dd2b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dd33:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dd3b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dd3f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dd47:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dd4b:	75 0c                	jne    c000dd59 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dd4d:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dd52:	c1 e0 18             	shl    eax,0x18
c000dd55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd59:	45                   	inc    ebp
c000dd5a:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dd5f:	c1 e1 10             	shl    ecx,0x10
c000dd62:	89 c8                	mov    eax,ecx
c000dd64:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dd69:	c1 e1 08             	shl    ecx,0x8
c000dd6c:	09 c1                	or     ecx,eax
c000dd6e:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dd72:	09 c1                	or     ecx,eax
c000dd74:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dd78:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dd7c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dd80:	c1 f8 03             	sar    eax,0x3
c000dd83:	01 c2                	add    edx,eax
c000dd85:	89 e8                	mov    eax,ebp
c000dd87:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dd8b:	39 c6                	cmp    esi,eax
c000dd8d:	7f b0                	jg     c000dd3f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dd8f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dd93:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dd97:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dd9a:	7e 22                	jle    c000ddbe <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dd9c:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dda0:	eb 99                	jmp    c000dd3b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dda2:	50                   	push   eax
c000dda3:	50                   	push   eax
c000dda4:	51                   	push   ecx
c000dda5:	68 a7 fe 01 c0       	push   0xc001fea7
c000ddaa:	e8 57 c8 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000ddaf:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ddb2:	e8 be 9a ff ff       	call   c0007875 <free>
c000ddb7:	83 c4 10             	add    esp,0x10
c000ddba:	31 ff                	xor    edi,edi
c000ddbc:	eb 0f                	jmp    c000ddcd <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000ddbe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ddc2:	89 30                	mov    DWORD PTR [eax],esi
c000ddc4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ddc8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ddcb:	89 30                	mov    DWORD PTR [eax],esi
c000ddcd:	83 c4 1c             	add    esp,0x1c
c000ddd0:	89 f8                	mov    eax,edi
c000ddd2:	5b                   	pop    ebx
c000ddd3:	5e                   	pop    esi
c000ddd4:	5f                   	pop    edi
c000ddd5:	5d                   	pop    ebp
c000ddd6:	c3                   	ret    
c000ddd7:	90                   	nop

c000ddd8 <Video::putTGA(int, int, unsigned char*, int)>:
c000ddd8:	55                   	push   ebp
c000ddd9:	57                   	push   edi
c000ddda:	56                   	push   esi
c000dddb:	53                   	push   ebx
c000dddc:	83 ec 28             	sub    esp,0x28
c000dddf:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dde3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dde7:	50                   	push   eax
c000dde8:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ddec:	50                   	push   eax
c000dded:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ddf1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ddf5:	56                   	push   esi
c000ddf6:	e8 75 fe ff ff       	call   c000dc70 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ddfb:	83 c4 20             	add    esp,0x20
c000ddfe:	85 c0                	test   eax,eax
c000de00:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de04:	74 35                	je     c000de3b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000de06:	89 c7                	mov    edi,eax
c000de08:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000de0c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000de10:	39 d8                	cmp    eax,ebx
c000de12:	7e 27                	jle    c000de3b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000de14:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de18:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de1c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000de20:	39 e8                	cmp    eax,ebp
c000de22:	7e 14                	jle    c000de38 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000de24:	8b 06                	mov    eax,DWORD PTR [esi]
c000de26:	83 c7 04             	add    edi,0x4
c000de29:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000de2c:	53                   	push   ebx
c000de2d:	55                   	push   ebp
c000de2e:	45                   	inc    ebp
c000de2f:	56                   	push   esi
c000de30:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de33:	83 c4 10             	add    esp,0x10
c000de36:	eb e0                	jmp    c000de18 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000de38:	43                   	inc    ebx
c000de39:	eb cd                	jmp    c000de08 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000de3b:	83 c4 1c             	add    esp,0x1c
c000de3e:	5b                   	pop    ebx
c000de3f:	5e                   	pop    esi
c000de40:	5f                   	pop    edi
c000de41:	5d                   	pop    ebp
c000de42:	c3                   	ret    
c000de43:	90                   	nop

c000de44 <ACPI::close(int, int, void*)>:
c000de44:	83 ec 1c             	sub    esp,0x1c
c000de47:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000de4f:	74 0b                	je     c000de5c <ACPI::close(int, int, void*)+0x18>
c000de51:	b8 00 00 00 00       	mov    eax,0x0
c000de56:	e9 9d 00 00 00       	jmp    c000def8 <ACPI::close(int, int, void*)+0xb4>
c000de5b:	90                   	nop
c000de5c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000de61:	75 29                	jne    c000de8c <ACPI::close(int, int, void*)+0x48>
c000de63:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000de68:	85 c0                	test   eax,eax
c000de6a:	74 08                	je     c000de74 <ACPI::close(int, int, void*)+0x30>
c000de6c:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000de71:	ff d0                	call   eax
c000de73:	90                   	nop
c000de74:	83 ec 0c             	sub    esp,0xc
c000de77:	68 08 ff 01 c0       	push   0xc001ff08
c000de7c:	e8 46 25 00 00       	call   c00103c7 <KePanic(char const*)>
c000de81:	83 c4 10             	add    esp,0x10
c000de84:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000de89:	eb 6d                	jmp    c000def8 <ACPI::close(int, int, void*)+0xb4>
c000de8b:	90                   	nop
c000de8c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000de91:	75 5d                	jne    c000def0 <ACPI::close(int, int, void*)+0xac>
c000de93:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000de98:	85 c0                	test   eax,eax
c000de9a:	74 08                	je     c000dea4 <ACPI::close(int, int, void*)+0x60>
c000de9c:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000dea1:	ff d0                	call   eax
c000dea3:	90                   	nop
c000dea4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dea9:	8d 76 00             	lea    esi,[esi+0x0]
c000deac:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000deb0:	25 ff 00 00 00       	and    eax,0xff
c000deb5:	83 e0 02             	and    eax,0x2
c000deb8:	74 1e                	je     c000ded8 <ACPI::close(int, int, void*)+0x94>
c000deba:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dec1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dec5:	89 c2                	mov    edx,eax
c000dec7:	ec                   	in     al,dx
c000dec8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000decc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ded0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ded4:	eb d6                	jmp    c000deac <ACPI::close(int, int, void*)+0x68>
c000ded6:	66 90                	xchg   ax,ax
c000ded8:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dedf:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dee4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dee8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000deec:	ee                   	out    dx,al
c000deed:	8d 76 00             	lea    esi,[esi+0x0]
c000def0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000def5:	8d 76 00             	lea    esi,[esi+0x0]
c000def8:	83 c4 1c             	add    esp,0x1c
c000defb:	c3                   	ret    

c000defc <findRSDP()>:
c000defc:	83 ec 1c             	sub    esp,0x1c
c000deff:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000df04:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df0a:	83 e0 04             	and    eax,0x4
c000df0d:	84 c0                	test   al,al
c000df0f:	75 07                	jne    c000df18 <findRSDP()+0x1c>
c000df11:	b8 00 00 00 00       	mov    eax,0x0
c000df16:	eb 70                	jmp    c000df88 <findRSDP()+0x8c>
c000df18:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000df1d:	3d ff 07 00 00       	cmp    eax,0x7ff
c000df22:	7f 1c                	jg     c000df40 <findRSDP()+0x44>
c000df24:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000df29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000df2f:	83 e2 fb             	and    edx,0xfffffffb
c000df32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000df38:	b8 00 00 00 00       	mov    eax,0x0
c000df3d:	eb 49                	jmp    c000df88 <findRSDP()+0x8c>
c000df3f:	90                   	nop
c000df40:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000df48:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000df50:	77 2e                	ja     c000df80 <findRSDP()+0x84>
c000df52:	83 ec 04             	sub    esp,0x4
c000df55:	6a 08                	push   0x8
c000df57:	68 a3 ff 01 c0       	push   0xc001ffa3
c000df5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df60:	e8 1b 24 ff ff       	call   c0000380 <memcmp>
c000df65:	83 c4 10             	add    esp,0x10
c000df68:	85 c0                	test   eax,eax
c000df6a:	0f 94 c0             	sete   al
c000df6d:	84 c0                	test   al,al
c000df6f:	74 07                	je     c000df78 <findRSDP()+0x7c>
c000df71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df75:	eb 11                	jmp    c000df88 <findRSDP()+0x8c>
c000df77:	90                   	nop
c000df78:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000df7d:	eb c9                	jmp    c000df48 <findRSDP()+0x4c>
c000df7f:	90                   	nop
c000df80:	b8 00 00 00 00       	mov    eax,0x0
c000df85:	8d 76 00             	lea    esi,[esi+0x0]
c000df88:	83 c4 1c             	add    esp,0x1c
c000df8b:	c3                   	ret    

c000df8c <loadACPITables(unsigned char*)>:
c000df8c:	57                   	push   edi
c000df8d:	56                   	push   esi
c000df8e:	53                   	push   ebx
c000df8f:	83 ec 60             	sub    esp,0x60
c000df92:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000df97:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df9d:	83 e0 04             	and    eax,0x4
c000dfa0:	84 c0                	test   al,al
c000dfa2:	0f 84 3c 02 00 00    	je     c000e1e4 <loadACPITables(unsigned char*)+0x258>
c000dfa8:	a0 c0 66 02 c0       	mov    al,ds:0xc00266c0
c000dfad:	84 c0                	test   al,al
c000dfaf:	74 77                	je     c000e028 <loadACPITables(unsigned char*)+0x9c>
c000dfb1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dfb5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dfb9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dfbd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dfc0:	83 e8 24             	sub    eax,0x24
c000dfc3:	c1 e8 03             	shr    eax,0x3
c000dfc6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dfca:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dfd2:	66 90                	xchg   ax,ax
c000dfd4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dfd8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dfdc:	0f 8d b6 00 00 00    	jge    c000e098 <loadACPITables(unsigned char*)+0x10c>
c000dfe2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dfe6:	83 c0 24             	add    eax,0x24
c000dfe9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dfed:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dff1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dff5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dff9:	c1 e0 03             	shl    eax,0x3
c000dffc:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e000:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e004:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e007:	8b 00                	mov    eax,DWORD PTR [eax]
c000e009:	89 c1                	mov    ecx,eax
c000e00b:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e010:	8d 50 01             	lea    edx,[eax+0x1]
c000e013:	89 15 ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,edx
c000e019:	89 ca                	mov    edx,ecx
c000e01b:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e022:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e026:	eb ac                	jmp    c000dfd4 <loadACPITables(unsigned char*)+0x48>
c000e028:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e02c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e030:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e037:	83 e8 24             	sub    eax,0x24
c000e03a:	c1 e8 02             	shr    eax,0x2
c000e03d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e041:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e049:	8d 76 00             	lea    esi,[esi+0x0]
c000e04c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e050:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e054:	7d 42                	jge    c000e098 <loadACPITables(unsigned char*)+0x10c>
c000e056:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e05a:	83 c0 24             	add    eax,0x24
c000e05d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e061:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e065:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e069:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e06d:	c1 e0 02             	shl    eax,0x2
c000e070:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e074:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e078:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e07a:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e07f:	8d 50 01             	lea    edx,[eax+0x1]
c000e082:	89 15 ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,edx
c000e088:	89 ca                	mov    edx,ecx
c000e08a:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e091:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e095:	eb b5                	jmp    c000e04c <loadACPITables(unsigned char*)+0xc0>
c000e097:	90                   	nop
c000e098:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e0a0:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e0a5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e0a9:	0f 8d 39 01 00 00    	jge    c000e1e8 <loadACPITables(unsigned char*)+0x25c>
c000e0af:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e0b3:	8b 04 c5 c4 64 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9b3c]
c000e0ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e0be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0c2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e0c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0ca:	25 ff 0f 00 00       	and    eax,0xfff
c000e0cf:	89 c6                	mov    esi,eax
c000e0d1:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e0d7:	83 ec 0c             	sub    esp,0xc
c000e0da:	6a 01                	push   0x1
c000e0dc:	e8 68 b2 ff ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c000e0e1:	83 c4 10             	add    esp,0x10
c000e0e4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e0e8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e0ee:	83 ec 0c             	sub    esp,0xc
c000e0f1:	6a 01                	push   0x1
c000e0f3:	6a 01                	push   0x1
c000e0f5:	50                   	push   eax
c000e0f6:	52                   	push   edx
c000e0f7:	53                   	push   ebx
c000e0f8:	e8 09 bc ff ff       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e0fd:	83 c4 20             	add    esp,0x20
c000e100:	09 f0                	or     eax,esi
c000e102:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e106:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e10a:	c1 e0 03             	shl    eax,0x3
c000e10d:	05 c0 64 02 c0       	add    eax,0xc00264c0
c000e112:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e116:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e11a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e11e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e12a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e12e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e132:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e136:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e13a:	89 c6                	mov    esi,eax
c000e13c:	89 d7                	mov    edi,edx
c000e13e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e140:	89 c8                	mov    eax,ecx
c000e142:	89 fa                	mov    edx,edi
c000e144:	89 f3                	mov    ebx,esi
c000e146:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e14a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e14e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e152:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e156:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e159:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e15d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e161:	05 00 10 00 00       	add    eax,0x1000
c000e166:	c1 e8 0c             	shr    eax,0xc
c000e169:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e16d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e171:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e175:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e179:	25 ff 0f 00 00       	and    eax,0xfff
c000e17e:	89 c6                	mov    esi,eax
c000e180:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e186:	83 ec 0c             	sub    esp,0xc
c000e189:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e18d:	e8 b7 b1 ff ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c000e192:	83 c4 10             	add    esp,0x10
c000e195:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e199:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e19f:	83 ec 0c             	sub    esp,0xc
c000e1a2:	6a 01                	push   0x1
c000e1a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e1a8:	50                   	push   eax
c000e1a9:	52                   	push   edx
c000e1aa:	53                   	push   ebx
c000e1ab:	e8 56 bb ff ff       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e1b0:	83 c4 20             	add    esp,0x20
c000e1b3:	09 f0                	or     eax,esi
c000e1b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e1b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1bd:	83 ec 0c             	sub    esp,0xc
c000e1c0:	50                   	push   eax
c000e1c1:	e8 77 b4 ff ff       	call   c000963d <Virt::freeKernelVirtualPages(unsigned long)>
c000e1c6:	83 c4 10             	add    esp,0x10
c000e1c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e1cd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e1d1:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e1d8:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e1dc:	e9 bf fe ff ff       	jmp    c000e0a0 <loadACPITables(unsigned char*)+0x114>
c000e1e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e1e4:	90                   	nop
c000e1e5:	8d 76 00             	lea    esi,[esi+0x0]
c000e1e8:	83 c4 60             	add    esp,0x60
c000e1eb:	5b                   	pop    ebx
c000e1ec:	5e                   	pop    esi
c000e1ed:	5f                   	pop    edi
c000e1ee:	c3                   	ret    
c000e1ef:	90                   	nop

c000e1f0 <findRSDT(unsigned char*)>:
c000e1f0:	57                   	push   edi
c000e1f1:	56                   	push   esi
c000e1f2:	53                   	push   ebx
c000e1f3:	83 ec 50             	sub    esp,0x50
c000e1f6:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e1fb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e201:	83 e0 04             	and    eax,0x4
c000e204:	84 c0                	test   al,al
c000e206:	75 0c                	jne    c000e214 <findRSDT(unsigned char*)+0x24>
c000e208:	b8 00 00 00 00       	mov    eax,0x0
c000e20d:	e9 26 01 00 00       	jmp    c000e338 <findRSDT(unsigned char*)+0x148>
c000e212:	66 90                	xchg   ax,ax
c000e214:	89 e0                	mov    eax,esp
c000e216:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e21a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e21e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e222:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e22a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e22e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e232:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e236:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e23a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e23e:	89 c6                	mov    esi,eax
c000e240:	89 d7                	mov    edi,edx
c000e242:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e244:	89 c8                	mov    eax,ecx
c000e246:	89 fa                	mov    edx,edi
c000e248:	89 f3                	mov    ebx,esi
c000e24a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e24e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e252:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e256:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e25a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e25e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e266:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e26a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e26e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e276:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e27a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e27e:	25 ff 0f 00 00       	and    eax,0xfff
c000e283:	89 c6                	mov    esi,eax
c000e285:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e28b:	83 ec 0c             	sub    esp,0xc
c000e28e:	6a 02                	push   0x2
c000e290:	e8 b4 b0 ff ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c000e295:	83 c4 10             	add    esp,0x10
c000e298:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e29c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e2a2:	83 ec 0c             	sub    esp,0xc
c000e2a5:	6a 01                	push   0x1
c000e2a7:	6a 02                	push   0x2
c000e2a9:	50                   	push   eax
c000e2aa:	52                   	push   edx
c000e2ab:	53                   	push   ebx
c000e2ac:	e8 55 ba ff ff       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e2b1:	83 c4 20             	add    esp,0x20
c000e2b4:	09 f0                	or     eax,esi
c000e2b6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e2ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e2be:	25 ff 0f 00 00       	and    eax,0xfff
c000e2c3:	89 c6                	mov    esi,eax
c000e2c5:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e2cb:	83 ec 0c             	sub    esp,0xc
c000e2ce:	6a 02                	push   0x2
c000e2d0:	e8 74 b0 ff ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c000e2d5:	83 c4 10             	add    esp,0x10
c000e2d8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e2dc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e2e2:	83 ec 0c             	sub    esp,0xc
c000e2e5:	6a 01                	push   0x1
c000e2e7:	6a 02                	push   0x2
c000e2e9:	50                   	push   eax
c000e2ea:	52                   	push   edx
c000e2eb:	53                   	push   ebx
c000e2ec:	e8 15 ba ff ff       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e2f1:	83 c4 20             	add    esp,0x20
c000e2f4:	09 f0                	or     eax,esi
c000e2f6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e2fa:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e2ff:	75 13                	jne    c000e314 <findRSDT(unsigned char*)+0x124>
c000e301:	c6 05 c0 66 02 c0 00 	mov    BYTE PTR ds:0xc00266c0,0x0
c000e308:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e30c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e310:	eb 22                	jmp    c000e334 <findRSDT(unsigned char*)+0x144>
c000e312:	66 90                	xchg   ax,ax
c000e314:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e319:	75 11                	jne    c000e32c <findRSDT(unsigned char*)+0x13c>
c000e31b:	c6 05 c0 66 02 c0 01 	mov    BYTE PTR ds:0xc00266c0,0x1
c000e322:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e326:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e32a:	eb 08                	jmp    c000e334 <findRSDT(unsigned char*)+0x144>
c000e32c:	b8 00 00 00 00       	mov    eax,0x0
c000e331:	eb 05                	jmp    c000e338 <findRSDT(unsigned char*)+0x148>
c000e333:	90                   	nop
c000e334:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e338:	83 c4 50             	add    esp,0x50
c000e33b:	5b                   	pop    ebx
c000e33c:	5e                   	pop    esi
c000e33d:	5f                   	pop    edi
c000e33e:	c3                   	ret    
c000e33f:	90                   	nop

c000e340 <findDataTable(unsigned char*, char*)>:
c000e340:	83 ec 1c             	sub    esp,0x1c
c000e343:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e348:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e34e:	83 e0 04             	and    eax,0x4
c000e351:	84 c0                	test   al,al
c000e353:	75 07                	jne    c000e35c <findDataTable(unsigned char*, char*)+0x1c>
c000e355:	b8 00 00 00 00       	mov    eax,0x0
c000e35a:	eb 58                	jmp    c000e3b4 <findDataTable(unsigned char*, char*)+0x74>
c000e35c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e364:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e369:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e36d:	7d 3d                	jge    c000e3ac <findDataTable(unsigned char*, char*)+0x6c>
c000e36f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e373:	c1 e0 03             	shl    eax,0x3
c000e376:	05 c0 64 02 c0       	add    eax,0xc00264c0
c000e37b:	83 ec 04             	sub    esp,0x4
c000e37e:	6a 04                	push   0x4
c000e380:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e384:	50                   	push   eax
c000e385:	e8 f6 1f ff ff       	call   c0000380 <memcmp>
c000e38a:	83 c4 10             	add    esp,0x10
c000e38d:	85 c0                	test   eax,eax
c000e38f:	0f 94 c0             	sete   al
c000e392:	84 c0                	test   al,al
c000e394:	74 0e                	je     c000e3a4 <findDataTable(unsigned char*, char*)+0x64>
c000e396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e39a:	8b 04 c5 c4 64 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9b3c]
c000e3a1:	eb 11                	jmp    c000e3b4 <findDataTable(unsigned char*, char*)+0x74>
c000e3a3:	90                   	nop
c000e3a4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e3a8:	eb ba                	jmp    c000e364 <findDataTable(unsigned char*, char*)+0x24>
c000e3aa:	66 90                	xchg   ax,ax
c000e3ac:	b8 00 00 00 00       	mov    eax,0x0
c000e3b1:	8d 76 00             	lea    esi,[esi+0x0]
c000e3b4:	83 c4 1c             	add    esp,0x1c
c000e3b7:	c3                   	ret    

c000e3b8 <scanMADT()>:
c000e3b8:	53                   	push   ebx
c000e3b9:	83 ec 38             	sub    esp,0x38
c000e3bc:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000e3c1:	25 00 04 00 00       	and    eax,0x400
c000e3c6:	74 14                	je     c000e3dc <scanMADT()+0x24>
c000e3c8:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e3cd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3d3:	83 e2 fb             	and    edx,0xfffffffb
c000e3d6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3dc:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e3e1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3e7:	83 e0 04             	and    eax,0x4
c000e3ea:	84 c0                	test   al,al
c000e3ec:	0f 84 8a 04 00 00    	je     c000e87c <scanMADT()+0x4c4>
c000e3f2:	e8 05 fb ff ff       	call   c000defc <findRSDP()>
c000e3f7:	a3 cc 66 02 c0       	mov    ds:0xc00266cc,eax
c000e3fc:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c000e401:	85 c0                	test   eax,eax
c000e403:	75 1b                	jne    c000e420 <scanMADT()+0x68>
c000e405:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e40a:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e410:	83 e2 fb             	and    edx,0xfffffffb
c000e413:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e419:	e9 66 04 00 00       	jmp    c000e884 <scanMADT()+0x4cc>
c000e41e:	66 90                	xchg   ax,ax
c000e420:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c000e425:	83 ec 0c             	sub    esp,0xc
c000e428:	50                   	push   eax
c000e429:	e8 c2 fd ff ff       	call   c000e1f0 <findRSDT(unsigned char*)>
c000e42e:	83 c4 10             	add    esp,0x10
c000e431:	a3 c8 66 02 c0       	mov    ds:0xc00266c8,eax
c000e436:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e43b:	85 c0                	test   eax,eax
c000e43d:	75 19                	jne    c000e458 <scanMADT()+0xa0>
c000e43f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e444:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e44a:	83 e2 fb             	and    edx,0xfffffffb
c000e44d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e453:	e9 2c 04 00 00       	jmp    c000e884 <scanMADT()+0x4cc>
c000e458:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e45d:	83 ec 0c             	sub    esp,0xc
c000e460:	50                   	push   eax
c000e461:	e8 26 fb ff ff       	call   c000df8c <loadACPITables(unsigned char*)>
c000e466:	83 c4 10             	add    esp,0x10
c000e469:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e46e:	83 ec 08             	sub    esp,0x8
c000e471:	68 ac ff 01 c0       	push   0xc001ffac
c000e476:	50                   	push   eax
c000e477:	e8 c4 fe ff ff       	call   c000e340 <findDataTable(unsigned char*, char*)>
c000e47c:	83 c4 10             	add    esp,0x10
c000e47f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e483:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e488:	75 1a                	jne    c000e4a4 <scanMADT()+0xec>
c000e48a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e48f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e495:	83 e2 fe             	and    edx,0xfffffffe
c000e498:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e49e:	e9 e1 03 00 00       	jmp    c000e884 <scanMADT()+0x4cc>
c000e4a3:	90                   	nop
c000e4a4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e4ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4b3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e4b7:	0f 87 c7 03 00 00    	ja     c000e884 <scanMADT()+0x4cc>
c000e4bd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e4c5:	0f 87 b9 03 00 00    	ja     c000e884 <scanMADT()+0x4cc>
c000e4cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4cf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e4d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4d7:	8d 50 01             	lea    edx,[eax+0x1]
c000e4da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4e2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4e6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e4ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4ee:	8d 50 01             	lea    edx,[eax+0x1]
c000e4f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4f9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4fd:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e501:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e506:	0f 86 74 03 00 00    	jbe    c000e880 <scanMADT()+0x4c8>
c000e50c:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e511:	75 5d                	jne    c000e570 <scanMADT()+0x1b8>
c000e513:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e517:	8d 50 01             	lea    edx,[eax+0x1]
c000e51a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e51e:	8a 15 c0 68 02 c0    	mov    dl,BYTE PTR ds:0xc00268c0
c000e524:	81 e2 ff 00 00 00    	and    edx,0xff
c000e52a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e52e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e532:	88 82 00 69 02 c0    	mov    BYTE PTR [edx-0x3ffd9700],al
c000e538:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e53c:	8d 42 01             	lea    eax,[edx+0x1]
c000e53f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e543:	a0 c0 68 02 c0       	mov    al,ds:0xc00268c0
c000e548:	8d 48 01             	lea    ecx,[eax+0x1]
c000e54b:	88 0d c0 68 02 c0    	mov    BYTE PTR ds:0xc00268c0,cl
c000e551:	25 ff 00 00 00       	and    eax,0xff
c000e556:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e55a:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e55e:	88 90 e0 68 02 c0    	mov    BYTE PTR [eax-0x3ffd9720],dl
c000e564:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e569:	e9 f6 02 00 00       	jmp    c000e864 <scanMADT()+0x4ac>
c000e56e:	66 90                	xchg   ax,ax
c000e570:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e575:	0f 85 29 01 00 00    	jne    c000e6a4 <scanMADT()+0x2ec>
c000e57b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e57f:	8d 50 01             	lea    edx,[eax+0x1]
c000e582:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e586:	8a 15 80 67 02 c0    	mov    dl,BYTE PTR ds:0xc0026780
c000e58c:	81 e2 ff 00 00 00    	and    edx,0xff
c000e592:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e596:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e59a:	88 82 a0 67 02 c0    	mov    BYTE PTR [edx-0x3ffd9860],al
c000e5a0:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e5a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5ac:	01 d0                	add    eax,edx
c000e5ae:	83 c0 2c             	add    eax,0x2c
c000e5b1:	8a 00                	mov    al,BYTE PTR [eax]
c000e5b3:	31 d2                	xor    edx,edx
c000e5b5:	88 c2                	mov    dl,al
c000e5b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5bb:	8d 48 01             	lea    ecx,[eax+0x1]
c000e5be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5c2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e5c6:	25 ff 00 00 00       	and    eax,0xff
c000e5cb:	c1 e0 08             	shl    eax,0x8
c000e5ce:	89 d1                	mov    ecx,edx
c000e5d0:	09 c1                	or     ecx,eax
c000e5d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5d6:	8d 50 02             	lea    edx,[eax+0x2]
c000e5d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5dd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5e1:	25 ff 00 00 00       	and    eax,0xff
c000e5e6:	c1 e0 10             	shl    eax,0x10
c000e5e9:	09 c1                	or     ecx,eax
c000e5eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5ef:	8d 50 03             	lea    edx,[eax+0x3]
c000e5f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5f6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5fa:	25 ff 00 00 00       	and    eax,0xff
c000e5ff:	c1 e0 18             	shl    eax,0x18
c000e602:	09 c1                	or     ecx,eax
c000e604:	89 ca                	mov    edx,ecx
c000e606:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e60b:	25 ff 00 00 00       	and    eax,0xff
c000e610:	89 14 85 c0 67 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9840],edx
c000e617:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e61c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e620:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e624:	01 d0                	add    eax,edx
c000e626:	83 c0 2c             	add    eax,0x2c
c000e629:	8a 00                	mov    al,BYTE PTR [eax]
c000e62b:	31 d2                	xor    edx,edx
c000e62d:	88 c2                	mov    dl,al
c000e62f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e633:	8d 48 01             	lea    ecx,[eax+0x1]
c000e636:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e63a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e63e:	25 ff 00 00 00       	and    eax,0xff
c000e643:	c1 e0 08             	shl    eax,0x8
c000e646:	89 d1                	mov    ecx,edx
c000e648:	09 c1                	or     ecx,eax
c000e64a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e64e:	8d 50 02             	lea    edx,[eax+0x2]
c000e651:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e655:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e659:	25 ff 00 00 00       	and    eax,0xff
c000e65e:	c1 e0 10             	shl    eax,0x10
c000e661:	09 c1                	or     ecx,eax
c000e663:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e667:	8d 50 03             	lea    edx,[eax+0x3]
c000e66a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e66e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e672:	25 ff 00 00 00       	and    eax,0xff
c000e677:	c1 e0 18             	shl    eax,0x18
c000e67a:	09 c1                	or     ecx,eax
c000e67c:	89 ca                	mov    edx,ecx
c000e67e:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e683:	25 ff 00 00 00       	and    eax,0xff
c000e688:	89 14 85 40 68 02 c0 	mov    DWORD PTR [eax*4-0x3ffd97c0],edx
c000e68f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e694:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e699:	40                   	inc    eax
c000e69a:	a2 80 67 02 c0       	mov    ds:0xc0026780,al
c000e69f:	e9 c0 01 00 00       	jmp    c000e864 <scanMADT()+0x4ac>
c000e6a4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e6a9:	0f 85 fd 00 00 00    	jne    c000e7ac <scanMADT()+0x3f4>
c000e6af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6b3:	8d 50 01             	lea    edx,[eax+0x1]
c000e6b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6be:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6c2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e6c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6ca:	8d 50 01             	lea    edx,[eax+0x1]
c000e6cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6d5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6d9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e6dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6e5:	01 d0                	add    eax,edx
c000e6e7:	83 c0 2c             	add    eax,0x2c
c000e6ea:	8a 00                	mov    al,BYTE PTR [eax]
c000e6ec:	31 d2                	xor    edx,edx
c000e6ee:	88 c2                	mov    dl,al
c000e6f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6f4:	8d 48 01             	lea    ecx,[eax+0x1]
c000e6f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e6fb:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e6ff:	25 ff 00 00 00       	and    eax,0xff
c000e704:	c1 e0 08             	shl    eax,0x8
c000e707:	89 d1                	mov    ecx,edx
c000e709:	09 c1                	or     ecx,eax
c000e70b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e70f:	8d 50 02             	lea    edx,[eax+0x2]
c000e712:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e716:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e71a:	25 ff 00 00 00       	and    eax,0xff
c000e71f:	c1 e0 10             	shl    eax,0x10
c000e722:	09 c1                	or     ecx,eax
c000e724:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e728:	8d 50 03             	lea    edx,[eax+0x3]
c000e72b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e72f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e733:	25 ff 00 00 00       	and    eax,0xff
c000e738:	c1 e0 18             	shl    eax,0x18
c000e73b:	09 c8                	or     eax,ecx
c000e73d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e741:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e746:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e74a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e74e:	01 d0                	add    eax,edx
c000e750:	83 c0 2c             	add    eax,0x2c
c000e753:	8a 00                	mov    al,BYTE PTR [eax]
c000e755:	25 ff 00 00 00       	and    eax,0xff
c000e75a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e75e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e761:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e765:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e769:	81 e2 ff 00 00 00    	and    edx,0xff
c000e76f:	c1 e2 08             	shl    edx,0x8
c000e772:	09 d0                	or     eax,edx
c000e774:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e779:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e77e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e782:	25 ff 00 00 00       	and    eax,0xff
c000e787:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e78b:	88 90 00 16 02 c0    	mov    BYTE PTR [eax-0x3ffdea00],dl
c000e791:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e795:	31 d2                	xor    edx,edx
c000e797:	88 c2                	mov    dl,al
c000e799:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e79e:	66 89 84 12 60 67 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd98a0],ax
c000e7a6:	e9 b9 00 00 00       	jmp    c000e864 <scanMADT()+0x4ac>
c000e7ab:	90                   	nop
c000e7ac:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e7b1:	0f 85 a1 00 00 00    	jne    c000e858 <scanMADT()+0x4a0>
c000e7b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7bb:	8d 50 01             	lea    edx,[eax+0x1]
c000e7be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e7c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7c6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e7ca:	25 ff 00 00 00       	and    eax,0xff
c000e7cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e7d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7db:	01 d0                	add    eax,edx
c000e7dd:	83 c0 2c             	add    eax,0x2c
c000e7e0:	8a 00                	mov    al,BYTE PTR [eax]
c000e7e2:	31 d2                	xor    edx,edx
c000e7e4:	88 c2                	mov    dl,al
c000e7e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7ea:	8d 48 01             	lea    ecx,[eax+0x1]
c000e7ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e7f1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e7f5:	25 ff 00 00 00       	and    eax,0xff
c000e7fa:	c1 e0 08             	shl    eax,0x8
c000e7fd:	09 d0                	or     eax,edx
c000e7ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e803:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e808:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e80c:	8d 50 01             	lea    edx,[eax+0x1]
c000e80f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e813:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e817:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e81b:	25 ff 00 00 00       	and    eax,0xff
c000e820:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e828:	c1 e0 08             	shl    eax,0x8
c000e82b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e82f:	89 c1                	mov    ecx,eax
c000e831:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e835:	c1 e0 18             	shl    eax,0x18
c000e838:	89 c3                	mov    ebx,eax
c000e83a:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c000e83f:	8d 50 01             	lea    edx,[eax+0x1]
c000e842:	89 15 d0 66 02 c0    	mov    DWORD PTR ds:0xc00266d0,edx
c000e848:	09 d9                	or     ecx,ebx
c000e84a:	89 ca                	mov    edx,ecx
c000e84c:	89 14 85 e0 66 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9920],edx
c000e853:	eb 0f                	jmp    c000e864 <scanMADT()+0x4ac>
c000e855:	8d 76 00             	lea    esi,[esi+0x0]
c000e858:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e85d:	75 05                	jne    c000e864 <scanMADT()+0x4ac>
c000e85f:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e864:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e868:	31 d2                	xor    edx,edx
c000e86a:	88 c2                	mov    dl,al
c000e86c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e870:	01 d0                	add    eax,edx
c000e872:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e876:	e9 31 fc ff ff       	jmp    c000e4ac <scanMADT()+0xf4>
c000e87b:	90                   	nop
c000e87c:	90                   	nop
c000e87d:	eb 05                	jmp    c000e884 <scanMADT()+0x4cc>
c000e87f:	90                   	nop
c000e880:	90                   	nop
c000e881:	8d 76 00             	lea    esi,[esi+0x0]
c000e884:	83 c4 38             	add    esp,0x38
c000e887:	5b                   	pop    ebx
c000e888:	c3                   	ret    
c000e889:	90                   	nop
c000e88a:	66 90                	xchg   ax,ax

c000e88c <ACPI::ACPI()>:
c000e88c:	83 ec 0c             	sub    esp,0xc
c000e88f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e893:	83 ec 08             	sub    esp,0x8
c000e896:	68 b1 ff 01 c0       	push   0xc001ffb1
c000e89b:	50                   	push   eax
c000e89c:	e8 3b d3 ff ff       	call   c000bbdc <Device::Device(char const*)>
c000e8a1:	83 c4 10             	add    esp,0x10
c000e8a4:	ba e8 00 02 c0       	mov    edx,0xc00200e8
c000e8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ad:	89 10                	mov    DWORD PTR [eax],edx
c000e8af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8be:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e8c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e8d6:	e8 dd fa ff ff       	call   c000e3b8 <scanMADT()>
c000e8db:	90                   	nop
c000e8dc:	83 c4 0c             	add    esp,0xc
c000e8df:	c3                   	ret    

c000e8e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e8e0:	83 ec 2c             	sub    esp,0x2c
c000e8e3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e8e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e8eb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e8ef:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e8f3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e8f8:	88 d0                	mov    al,dl
c000e8fa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e8fe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e903:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e90b:	90                   	nop
c000e90c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e910:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e916:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e91a:	0f 8d 9c 00 00 00    	jge    c000e9bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e920:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e924:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e928:	83 c2 2a             	add    edx,0x2a
c000e92b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e92f:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e934:	75 7a                	jne    c000e9b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e936:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e93a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e93e:	83 c2 2a             	add    edx,0x2a
c000e941:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e945:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e949:	75 65                	jne    c000e9b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e94b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e950:	74 3a                	je     c000e98c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e952:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e956:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e95a:	83 c2 2a             	add    edx,0x2a
c000e95d:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e961:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e965:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e968:	39 c2                	cmp    edx,eax
c000e96a:	74 10                	je     c000e97c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e96c:	83 ec 0c             	sub    esp,0xc
c000e96f:	68 2c ff 01 c0       	push   0xc001ff2c
c000e974:	e8 4e 1a 00 00       	call   c00103c7 <KePanic(char const*)>
c000e979:	83 c4 10             	add    esp,0x10
c000e97c:	83 ec 0c             	sub    esp,0xc
c000e97f:	68 b6 ff 01 c0       	push   0xc001ffb6
c000e984:	e8 3e 1a 00 00       	call   c00103c7 <KePanic(char const*)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e990:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e994:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e998:	83 c2 2a             	add    edx,0x2a
c000e99b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e99f:	8b 02                	mov    eax,DWORD PTR [edx]
c000e9a1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e9a4:	89 01                	mov    DWORD PTR [ecx],eax
c000e9a6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e9a9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9ae:	66 90                	xchg   ax,ax
c000e9b0:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e9b4:	e9 53 ff ff ff       	jmp    c000e90c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e9b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e9bc:	90                   	nop
c000e9bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9c1:	83 c4 2c             	add    esp,0x2c
c000e9c4:	c2 04 00             	ret    0x4
c000e9c7:	90                   	nop

c000e9c8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e9c8:	83 ec 1c             	sub    esp,0x1c
c000e9cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e9cf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e9d3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e9d7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e9dc:	88 c8                	mov    al,cl
c000e9de:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e9e2:	88 d0                	mov    al,dl
c000e9e4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e9e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9ec:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e9f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9f6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e9f9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e9fd:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000ea01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea05:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea0b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ea0f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ea12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea16:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ea1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea1f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea25:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ea29:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea30:	83 c2 2a             	add    edx,0x2a
c000ea33:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ea37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea3b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea45:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ea48:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ea4c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ea50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea54:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea5a:	8d 50 01             	lea    edx,[eax+0x1]
c000ea5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea61:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ea67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea6b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea71:	3d 00 02 00 00       	cmp    eax,0x200
c000ea76:	75 10                	jne    c000ea88 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ea78:	83 ec 0c             	sub    esp,0xc
c000ea7b:	68 c5 ff 01 c0       	push   0xc001ffc5
c000ea80:	e8 42 19 00 00       	call   c00103c7 <KePanic(char const*)>
c000ea85:	83 c4 10             	add    esp,0x10
c000ea88:	90                   	nop
c000ea89:	83 c4 1c             	add    esp,0x1c
c000ea8c:	c3                   	ret    
c000ea8d:	90                   	nop
c000ea8e:	66 90                	xchg   ax,ax

c000ea90 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ea90:	b8 00 00 00 00       	mov    eax,0x0
c000ea95:	c3                   	ret    
c000ea96:	66 90                	xchg   ax,ax

c000ea98 <ACPI::detectPCI()>:
c000ea98:	53                   	push   ebx
c000ea99:	83 ec 28             	sub    esp,0x28
c000ea9c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000eaa1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000eaa6:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000eaab:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eab1:	83 e0 04             	and    eax,0x4
c000eab4:	84 c0                	test   al,al
c000eab6:	74 2c                	je     c000eae4 <ACPI::detectPCI()+0x4c>
c000eab8:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000eabd:	83 ec 08             	sub    esp,0x8
c000eac0:	68 e2 ff 01 c0       	push   0xc001ffe2
c000eac5:	50                   	push   eax
c000eac6:	e8 75 f8 ff ff       	call   c000e340 <findDataTable(unsigned char*, char*)>
c000eacb:	83 c4 10             	add    esp,0x10
c000eace:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ead2:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ead7:	74 0b                	je     c000eae4 <ACPI::detectPCI()+0x4c>
c000ead9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eade:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eae3:	90                   	nop
c000eae4:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000eaec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eaf0:	8a 00                	mov    al,BYTE PTR [eax]
c000eaf2:	3c 01                	cmp    al,0x1
c000eaf4:	75 0e                	jne    c000eb04 <ACPI::detectPCI()+0x6c>
c000eaf6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eafb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eb00:	eb 2a                	jmp    c000eb2c <ACPI::detectPCI()+0x94>
c000eb02:	66 90                	xchg   ax,ax
c000eb04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb08:	8a 00                	mov    al,BYTE PTR [eax]
c000eb0a:	3c 02                	cmp    al,0x2
c000eb0c:	75 1e                	jne    c000eb2c <ACPI::detectPCI()+0x94>
c000eb0e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb13:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eb18:	74 12                	je     c000eb2c <ACPI::detectPCI()+0x94>
c000eb1a:	83 ec 0c             	sub    esp,0xc
c000eb1d:	68 5c ff 01 c0       	push   0xc001ff5c
c000eb22:	e8 a0 18 00 00       	call   c00103c7 <KePanic(char const*)>
c000eb27:	83 c4 10             	add    esp,0x10
c000eb2a:	66 90                	xchg   ax,ax
c000eb2c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000eb30:	83 f0 01             	xor    eax,0x1
c000eb33:	84 c0                	test   al,al
c000eb35:	74 41                	je     c000eb78 <ACPI::detectPCI()+0xe0>
c000eb37:	e8 f4 15 ff ff       	call   c0000130 <manualPCIProbe>
c000eb3c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eb40:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000eb45:	75 0d                	jne    c000eb54 <ACPI::detectPCI()+0xbc>
c000eb47:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb4c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eb51:	eb 25                	jmp    c000eb78 <ACPI::detectPCI()+0xe0>
c000eb53:	90                   	nop
c000eb54:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000eb59:	75 1d                	jne    c000eb78 <ACPI::detectPCI()+0xe0>
c000eb5b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb60:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eb65:	74 11                	je     c000eb78 <ACPI::detectPCI()+0xe0>
c000eb67:	83 ec 0c             	sub    esp,0xc
c000eb6a:	68 5c ff 01 c0       	push   0xc001ff5c
c000eb6f:	e8 53 18 00 00       	call   c00103c7 <KePanic(char const*)>
c000eb74:	83 c4 10             	add    esp,0x10
c000eb77:	90                   	nop
c000eb78:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000eb7d:	0f 84 85 00 00 00    	je     c000ec08 <ACPI::detectPCI()+0x170>
c000eb83:	83 ec 0c             	sub    esp,0xc
c000eb86:	68 e7 ff 01 c0       	push   0xc001ffe7
c000eb8b:	e8 bf 11 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c000eb90:	83 c4 10             	add    esp,0x10
c000eb93:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000eb9b:	83 ec 0c             	sub    esp,0xc
c000eb9e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eba2:	e8 be 8c ff ff       	call   c0007865 <malloc>
c000eba7:	83 c4 10             	add    esp,0x10
c000ebaa:	89 c3                	mov    ebx,eax
c000ebac:	83 ec 0c             	sub    esp,0xc
c000ebaf:	53                   	push   ebx
c000ebb0:	e8 49 ac 00 00       	call   c00197fe <PCI::PCI()>
c000ebb5:	83 c4 10             	add    esp,0x10
c000ebb8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ebbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebc0:	83 ec 08             	sub    esp,0x8
c000ebc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ebc7:	50                   	push   eax
c000ebc8:	e8 77 ce ff ff       	call   c000ba44 <Device::addChild(Device*)>
c000ebcd:	83 c4 10             	add    esp,0x10
c000ebd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ebd4:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebd6:	83 c0 08             	add    eax,0x8
c000ebd9:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebdb:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ebe0:	74 0a                	je     c000ebec <ACPI::detectPCI()+0x154>
c000ebe2:	ba 01 00 00 00       	mov    edx,0x1
c000ebe7:	eb 0b                	jmp    c000ebf4 <ACPI::detectPCI()+0x15c>
c000ebe9:	8d 76 00             	lea    esi,[esi+0x0]
c000ebec:	ba 02 00 00 00       	mov    edx,0x2
c000ebf1:	8d 76 00             	lea    esi,[esi+0x0]
c000ebf4:	6a 00                	push   0x0
c000ebf6:	6a 00                	push   0x0
c000ebf8:	52                   	push   edx
c000ebf9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ebfd:	ff d0                	call   eax
c000ebff:	83 c4 10             	add    esp,0x10
c000ec02:	e9 91 00 00 00       	jmp    c000ec98 <ACPI::detectPCI()+0x200>
c000ec07:	90                   	nop
c000ec08:	83 ec 0c             	sub    esp,0xc
c000ec0b:	68 ff ff 01 c0       	push   0xc001ffff
c000ec10:	e8 3a 11 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c000ec15:	83 c4 10             	add    esp,0x10
c000ec18:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000ec1f:	83 ec 0c             	sub    esp,0xc
c000ec22:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ec26:	e8 3a 8c ff ff       	call   c0007865 <malloc>
c000ec2b:	83 c4 10             	add    esp,0x10
c000ec2e:	89 c3                	mov    ebx,eax
c000ec30:	83 ec 0c             	sub    esp,0xc
c000ec33:	53                   	push   ebx
c000ec34:	e8 2b b7 00 00       	call   c001a364 <IDE::IDE()>
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ec40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec44:	83 ec 08             	sub    esp,0x8
c000ec47:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec4b:	50                   	push   eax
c000ec4c:	e8 f3 cd ff ff       	call   c000ba44 <Device::addChild(Device*)>
c000ec51:	83 c4 10             	add    esp,0x10
c000ec54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec58:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000ec62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec66:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ec6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec73:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ec7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec80:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec82:	83 c0 08             	add    eax,0x8
c000ec85:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec87:	6a 00                	push   0x0
c000ec89:	6a 00                	push   0x0
c000ec8b:	6a 00                	push   0x0
c000ec8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ec91:	ff d0                	call   eax
c000ec93:	83 c4 10             	add    esp,0x10
c000ec96:	66 90                	xchg   ax,ax
c000ec98:	90                   	nop
c000ec99:	83 c4 28             	add    esp,0x28
c000ec9c:	5b                   	pop    ebx
c000ec9d:	c3                   	ret    
c000ec9e:	66 90                	xchg   ax,ax

c000eca0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000eca0:	83 ec 1c             	sub    esp,0x1c
c000eca3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000eca7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ecaa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ecae:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000ecb4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ecb8:	25 ff 00 00 00       	and    eax,0xff
c000ecbd:	83 ec 08             	sub    esp,0x8
c000ecc0:	50                   	push   eax
c000ecc1:	52                   	push   edx
c000ecc2:	e8 89 82 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c000ecc7:	83 c4 10             	add    esp,0x10
c000ecca:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ecce:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000ecd4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ecd8:	25 ff 00 00 00       	and    eax,0xff
c000ecdd:	83 ec 04             	sub    esp,0x4
c000ece0:	6a 01                	push   0x1
c000ece2:	50                   	push   eax
c000ece3:	52                   	push   edx
c000ece4:	e8 7d 83 ff ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c000ece9:	83 c4 10             	add    esp,0x10
c000ecec:	90                   	nop
c000eced:	83 c4 1c             	add    esp,0x1c
c000ecf0:	c3                   	ret    
c000ecf1:	90                   	nop
c000ecf2:	66 90                	xchg   ax,ax

c000ecf4 <ACPI::sleep()>:
c000ecf4:	83 ec 0c             	sub    esp,0xc
c000ecf7:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c000ecfc:	85 c0                	test   eax,eax
c000ecfe:	74 08                	je     c000ed08 <ACPI::sleep()+0x14>
c000ed00:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c000ed05:	ff d0                	call   eax
c000ed07:	90                   	nop
c000ed08:	90                   	nop
c000ed09:	83 c4 0c             	add    esp,0xc
c000ed0c:	c3                   	ret    
c000ed0d:	90                   	nop
c000ed0e:	66 90                	xchg   ax,ax

c000ed10 <ACPI::open(int, int, void*)>:
c000ed10:	57                   	push   edi
c000ed11:	56                   	push   esi
c000ed12:	53                   	push   ebx
c000ed13:	81 ec 70 01 00 00    	sub    esp,0x170
c000ed19:	83 ec 0c             	sub    esp,0xc
c000ed1c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ed23:	e8 70 fd ff ff       	call   c000ea98 <ACPI::detectPCI()>
c000ed28:	83 c4 10             	add    esp,0x10
c000ed2b:	83 ec 0c             	sub    esp,0xc
c000ed2e:	68 84 ff 01 c0       	push   0xc001ff84
c000ed33:	e8 17 10 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c000ed38:	83 c4 10             	add    esp,0x10
c000ed3b:	83 ec 0c             	sub    esp,0xc
c000ed3e:	68 14 00 02 c0       	push   0xc0020014
c000ed43:	e8 cb 47 00 00       	call   c0013513 <Thr::loadKernelSymbolTable(char const*)>
c000ed48:	83 c4 10             	add    esp,0x10
c000ed4b:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ed53:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ed5e:	83 ec 0c             	sub    esp,0xc
c000ed61:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ed68:	e8 f8 8a ff ff       	call   c0007865 <malloc>
c000ed6d:	83 c4 10             	add    esp,0x10
c000ed70:	89 c3                	mov    ebx,eax
c000ed72:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000ed77:	83 ec 04             	sub    esp,0x4
c000ed7a:	50                   	push   eax
c000ed7b:	68 32 00 02 c0       	push   0xc0020032
c000ed80:	53                   	push   ebx
c000ed81:	e8 f6 bd ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c000ed86:	83 c4 10             	add    esp,0x10
c000ed89:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ed90:	83 ec 08             	sub    esp,0x8
c000ed93:	6a 01                	push   0x1
c000ed95:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ed9c:	e8 9b be ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c000eda1:	83 c4 10             	add    esp,0x10
c000eda4:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000edab:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000edb3:	75 17                	jne    c000edcc <ACPI::open(int, int, void*)+0xbc>
c000edb5:	83 ec 0c             	sub    esp,0xc
c000edb8:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000edbf:	e8 d6 be ff ff       	call   c000ac9a <File::close()>
c000edc4:	83 c4 10             	add    esp,0x10
c000edc7:	eb 0b                	jmp    c000edd4 <ACPI::open(int, int, void*)+0xc4>
c000edc9:	8d 76 00             	lea    esi,[esi+0x0]
c000edcc:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000edd4:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000eddc:	74 1e                	je     c000edfc <ACPI::open(int, int, void*)+0xec>
c000edde:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ede5:	8b 00                	mov    eax,DWORD PTR [eax]
c000ede7:	83 c0 08             	add    eax,0x8
c000edea:	8b 00                	mov    eax,DWORD PTR [eax]
c000edec:	83 ec 0c             	sub    esp,0xc
c000edef:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000edf6:	ff d0                	call   eax
c000edf8:	83 c4 10             	add    esp,0x10
c000edfb:	90                   	nop
c000edfc:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ee03:	83 f0 01             	xor    eax,0x1
c000ee06:	84 c0                	test   al,al
c000ee08:	74 42                	je     c000ee4c <ACPI::open(int, int, void*)+0x13c>
c000ee0a:	83 ec 0c             	sub    esp,0xc
c000ee0d:	68 50 00 02 c0       	push   0xc0020050
c000ee12:	e8 38 0f 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c000ee17:	83 c4 10             	add    esp,0x10
c000ee1a:	83 ec 04             	sub    esp,0x4
c000ee1d:	6a 0c                	push   0xc
c000ee1f:	68 6b 00 02 c0       	push   0xc002006b
c000ee24:	68 7c 00 02 c0       	push   0xc002007c
c000ee29:	e8 b7 3a 00 00       	call   c00128e5 <Reg::readIntWithDefault(char*, char*, int)>
c000ee2e:	83 c4 10             	add    esp,0x10
c000ee31:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ee38:	83 ec 0c             	sub    esp,0xc
c000ee3b:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ee42:	e8 0c a7 ff ff       	call   c0009553 <Virt::setupPageSwapping(int)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	66 90                	xchg   ax,ax
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	68 d5 f0 01 c0       	push   0xc001f0d5
c000ee54:	e8 f6 0e 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c000ee59:	83 c4 10             	add    esp,0x10
c000ee5c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ee63:	83 ec 08             	sub    esp,0x8
c000ee66:	6a 13                	push   0x13
c000ee68:	50                   	push   eax
c000ee69:	e8 ee ce ff ff       	call   c000bd5c <getDevicesOfType(DeviceType)>
c000ee6e:	83 c4 0c             	add    esp,0xc
c000ee71:	8d 76 00             	lea    esi,[esi+0x0]
c000ee74:	83 ec 0c             	sub    esp,0xc
c000ee77:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee7e:	50                   	push   eax
c000ee7f:	e8 38 f6 00 00       	call   c001e4bc <LinkedList<Device>::isEmpty()>
c000ee84:	83 c4 10             	add    esp,0x10
c000ee87:	83 f0 01             	xor    eax,0x1
c000ee8a:	84 c0                	test   al,al
c000ee8c:	0f 84 46 01 00 00    	je     c000efd8 <ACPI::open(int, int, void*)+0x2c8>
c000ee92:	83 ec 0c             	sub    esp,0xc
c000ee95:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee9c:	50                   	push   eax
c000ee9d:	e8 36 f6 00 00       	call   c001e4d8 <LinkedList<Device>::getFirstElement()>
c000eea2:	83 c4 10             	add    esp,0x10
c000eea5:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000eeac:	83 ec 0c             	sub    esp,0xc
c000eeaf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eeb6:	50                   	push   eax
c000eeb7:	e8 24 f6 00 00       	call   c001e4e0 <LinkedList<Device>::removeFirst()>
c000eebc:	83 c4 10             	add    esp,0x10
c000eebf:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000eec6:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000eecd:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000eed4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eed8:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000eede:	ba 09 00 00 00       	mov    edx,0x9
c000eee3:	fc                   	cld    
c000eee4:	89 c7                	mov    edi,eax
c000eee6:	89 de                	mov    esi,ebx
c000eee8:	89 d1                	mov    ecx,edx
c000eeea:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000eeec:	83 ec 08             	sub    esp,0x8
c000eeef:	8d 44 24 38          	lea    eax,[esp+0x38]
c000eef3:	50                   	push   eax
c000eef4:	83 ec 24             	sub    esp,0x24
c000eef7:	89 e0                	mov    eax,esp
c000eef9:	89 c3                	mov    ebx,eax
c000eefb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000eeff:	ba 09 00 00 00       	mov    edx,0x9
c000ef04:	89 df                	mov    edi,ebx
c000ef06:	89 c6                	mov    esi,eax
c000ef08:	89 d1                	mov    ecx,edx
c000ef0a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ef0c:	e8 cf ad 00 00       	call   c0019ce0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ef11:	83 c4 30             	add    esp,0x30
c000ef14:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ef1b:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ef23:	0f 84 4b ff ff ff    	je     c000ee74 <ACPI::open(int, int, void*)+0x164>
c000ef29:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ef34:	83 ec 0c             	sub    esp,0xc
c000ef37:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ef3e:	e8 22 89 ff ff       	call   c0007865 <malloc>
c000ef43:	83 c4 10             	add    esp,0x10
c000ef46:	89 c3                	mov    ebx,eax
c000ef48:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000ef4d:	83 ec 04             	sub    esp,0x4
c000ef50:	50                   	push   eax
c000ef51:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ef58:	53                   	push   ebx
c000ef59:	e8 1e bc ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c000ef5e:	83 c4 10             	add    esp,0x10
c000ef61:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ef68:	83 ec 0c             	sub    esp,0xc
c000ef6b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ef72:	e8 33 bf ff ff       	call   c000aeaa <File::exists()>
c000ef77:	83 c4 10             	add    esp,0x10
c000ef7a:	84 c0                	test   al,al
c000ef7c:	74 2a                	je     c000efa8 <ACPI::open(int, int, void*)+0x298>
c000ef7e:	83 ec 08             	sub    esp,0x8
c000ef81:	6a 01                	push   0x1
c000ef83:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ef8a:	e8 fb 4f 00 00       	call   c0013f8a <Thr::loadDLL(char const*, bool)>
c000ef8f:	83 c4 10             	add    esp,0x10
c000ef92:	83 ec 08             	sub    esp,0x8
c000ef95:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ef9c:	50                   	push   eax
c000ef9d:	e8 19 52 00 00       	call   c00141bb <Thr::executeDLL(unsigned long, void*)>
c000efa2:	83 c4 10             	add    esp,0x10
c000efa5:	8d 76 00             	lea    esi,[esi+0x0]
c000efa8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000efb0:	0f 84 be fe ff ff    	je     c000ee74 <ACPI::open(int, int, void*)+0x164>
c000efb6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000efbd:	8b 00                	mov    eax,DWORD PTR [eax]
c000efbf:	83 c0 08             	add    eax,0x8
c000efc2:	8b 00                	mov    eax,DWORD PTR [eax]
c000efc4:	83 ec 0c             	sub    esp,0xc
c000efc7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000efce:	ff d0                	call   eax
c000efd0:	83 c4 10             	add    esp,0x10
c000efd3:	e9 9c fe ff ff       	jmp    c000ee74 <ACPI::open(int, int, void*)+0x164>
c000efd8:	83 ec 0c             	sub    esp,0xc
c000efdb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000efe2:	50                   	push   eax
c000efe3:	e8 d0 f4 00 00       	call   c001e4b8 <LinkedList<Device>::~LinkedList()>
c000efe8:	83 c4 10             	add    esp,0x10
c000efeb:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000eff1:	83 ec 08             	sub    esp,0x8
c000eff4:	6a 01                	push   0x1
c000eff6:	68 83 00 02 c0       	push   0xc0020083
c000effb:	e8 8a 4f 00 00       	call   c0013f8a <Thr::loadDLL(char const*, bool)>
c000f000:	83 c4 10             	add    esp,0x10
c000f003:	83 ec 08             	sub    esp,0x8
c000f006:	53                   	push   ebx
c000f007:	50                   	push   eax
c000f008:	e8 ae 51 00 00       	call   c00141bb <Thr::executeDLL(unsigned long, void*)>
c000f00d:	83 c4 10             	add    esp,0x10
c000f010:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000f015:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f01b:	83 e0 04             	and    eax,0x4
c000f01e:	84 c0                	test   al,al
c000f020:	0f 84 16 01 00 00    	je     c000f13c <ACPI::open(int, int, void*)+0x42c>
c000f026:	83 ec 0c             	sub    esp,0xc
c000f029:	68 a0 00 02 c0       	push   0xc00200a0
c000f02e:	e8 1c 0d 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c000f033:	83 c4 10             	add    esp,0x10
c000f036:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f041:	83 ec 0c             	sub    esp,0xc
c000f044:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f04b:	e8 15 88 ff ff       	call   c0007865 <malloc>
c000f050:	83 c4 10             	add    esp,0x10
c000f053:	89 c3                	mov    ebx,eax
c000f055:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000f05a:	83 ec 04             	sub    esp,0x4
c000f05d:	50                   	push   eax
c000f05e:	68 bd 00 02 c0       	push   0xc00200bd
c000f063:	53                   	push   ebx
c000f064:	e8 13 bb ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c000f069:	83 c4 10             	add    esp,0x10
c000f06c:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f073:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f07b:	74 1b                	je     c000f098 <ACPI::open(int, int, void*)+0x388>
c000f07d:	83 ec 0c             	sub    esp,0xc
c000f080:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f087:	e8 1e be ff ff       	call   c000aeaa <File::exists()>
c000f08c:	83 c4 10             	add    esp,0x10
c000f08f:	84 c0                	test   al,al
c000f091:	74 05                	je     c000f098 <ACPI::open(int, int, void*)+0x388>
c000f093:	b0 01                	mov    al,0x1
c000f095:	eb 05                	jmp    c000f09c <ACPI::open(int, int, void*)+0x38c>
c000f097:	90                   	nop
c000f098:	b0 00                	mov    al,0x0
c000f09a:	66 90                	xchg   ax,ax
c000f09c:	84 c0                	test   al,al
c000f09e:	74 28                	je     c000f0c8 <ACPI::open(int, int, void*)+0x3b8>
c000f0a0:	83 ec 08             	sub    esp,0x8
c000f0a3:	6a 01                	push   0x1
c000f0a5:	68 bd 00 02 c0       	push   0xc00200bd
c000f0aa:	e8 db 4e 00 00       	call   c0013f8a <Thr::loadDLL(char const*, bool)>
c000f0af:	83 c4 10             	add    esp,0x10
c000f0b2:	83 ec 08             	sub    esp,0x8
c000f0b5:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f0bc:	50                   	push   eax
c000f0bd:	e8 f9 50 00 00       	call   c00141bb <Thr::executeDLL(unsigned long, void*)>
c000f0c2:	83 c4 10             	add    esp,0x10
c000f0c5:	8d 76 00             	lea    esi,[esi+0x0]
c000f0c8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f0d0:	74 2a                	je     c000f0fc <ACPI::open(int, int, void*)+0x3ec>
c000f0d2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f0da:	74 20                	je     c000f0fc <ACPI::open(int, int, void*)+0x3ec>
c000f0dc:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f0e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0e5:	83 c0 08             	add    eax,0x8
c000f0e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0ea:	83 ec 0c             	sub    esp,0xc
c000f0ed:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f0f4:	ff d0                	call   eax
c000f0f6:	83 c4 10             	add    esp,0x10
c000f0f9:	8d 76 00             	lea    esi,[esi+0x0]
c000f0fc:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000f101:	83 ec 08             	sub    esp,0x8
c000f104:	68 da 00 02 c0       	push   0xc00200da
c000f109:	50                   	push   eax
c000f10a:	e8 31 f2 ff ff       	call   c000e340 <findDataTable(unsigned char*, char*)>
c000f10f:	83 c4 10             	add    esp,0x10
c000f112:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f119:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f121:	74 19                	je     c000f13c <ACPI::open(int, int, void*)+0x42c>
c000f123:	83 ec 08             	sub    esp,0x8
c000f126:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f12d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f134:	e8 67 fb ff ff       	call   c000eca0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f139:	83 c4 10             	add    esp,0x10
c000f13c:	b8 00 00 00 00       	mov    eax,0x0
c000f141:	81 c4 70 01 00 00    	add    esp,0x170
c000f147:	5b                   	pop    ebx
c000f148:	5e                   	pop    esi
c000f149:	5f                   	pop    edi
c000f14a:	c3                   	ret    
c000f14b:	90                   	nop

c000f14c <CPU::close(int, int, void*)>:
c000f14c:	31 c0                	xor    eax,eax
c000f14e:	c3                   	ret    
c000f14f:	90                   	nop

c000f150 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f150:	60                   	pusha  
c000f151:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f155:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f159:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f15d:	9c                   	pushf  
c000f15e:	fa                   	cli    
c000f15f:	0f 09                	wbinvd 
c000f161:	0f 30                	wrmsr  
c000f163:	9d                   	popf   
c000f164:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f168:	89 02                	mov    DWORD PTR [edx],eax
c000f16a:	61                   	popa   
c000f16b:	c3                   	ret    

c000f16c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f16c:	60                   	pusha  
c000f16d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f171:	9c                   	pushf  
c000f172:	fa                   	cli    
c000f173:	0f 09                	wbinvd 
c000f175:	31 c0                	xor    eax,eax
c000f177:	31 d2                	xor    edx,edx
c000f179:	0f 32                	rdmsr  
c000f17b:	9d                   	popf   
c000f17c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f180:	89 02                	mov    DWORD PTR [edx],eax
c000f182:	61                   	popa   
c000f183:	c3                   	ret    

c000f184 <CPU::AMD_K6_writeback(int, int, int)>:
c000f184:	56                   	push   esi
c000f185:	53                   	push   ebx
c000f186:	83 ec 10             	sub    esp,0x10
c000f189:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f18d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f192:	75 5d                	jne    c000f1f1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f194:	83 f8 08             	cmp    eax,0x8
c000f197:	75 09                	jne    c000f1a2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f199:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f19e:	7e 13                	jle    c000f1b3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f1a0:	eb 30                	jmp    c000f1d2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f1a2:	83 f8 06             	cmp    eax,0x6
c000f1a5:	7c 4a                	jl     c000f1f1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f1a7:	83 f8 07             	cmp    eax,0x7
c000f1aa:	7e 07                	jle    c000f1b3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f1ac:	83 f8 09             	cmp    eax,0x9
c000f1af:	74 21                	je     c000f1d2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f1b1:	eb 3e                	jmp    c000f1f1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f1b3:	89 e6                	mov    esi,esp
c000f1b5:	8b 1d dc 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023edc
c000f1bb:	56                   	push   esi
c000f1bc:	c1 eb 15             	shr    ebx,0x15
c000f1bf:	68 82 00 00 c0       	push   0xc0000082
c000f1c4:	83 e3 7e             	and    ebx,0x7e
c000f1c7:	e8 a0 ff ff ff       	call   c000f16c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f1cc:	56                   	push   esi
c000f1cd:	6a 00                	push   0x0
c000f1cf:	53                   	push   ebx
c000f1d0:	eb 12                	jmp    c000f1e4 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f1d2:	89 e3                	mov    ebx,esp
c000f1d4:	53                   	push   ebx
c000f1d5:	68 82 00 00 c0       	push   0xc0000082
c000f1da:	e8 8d ff ff ff       	call   c000f16c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f1df:	53                   	push   ebx
c000f1e0:	6a 00                	push   0x0
c000f1e2:	6a 00                	push   0x0
c000f1e4:	68 82 00 00 c0       	push   0xc0000082
c000f1e9:	e8 62 ff ff ff       	call   c000f150 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f1ee:	83 c4 18             	add    esp,0x18
c000f1f1:	83 c4 10             	add    esp,0x10
c000f1f4:	5b                   	pop    ebx
c000f1f5:	5e                   	pop    esi
c000f1f6:	c3                   	ret    
c000f1f7:	90                   	nop

c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f1f8:	55                   	push   ebp
c000f1f9:	57                   	push   edi
c000f1fa:	56                   	push   esi
c000f1fb:	53                   	push   ebx
c000f1fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f200:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f204:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f208:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f20c:	39 05 10 16 02 c0    	cmp    DWORD PTR ds:0xc0021610,eax
c000f212:	75 23                	jne    c000f237 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f214:	a1 2c 69 02 c0       	mov    eax,ds:0xc002692c
c000f219:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f21d:	89 06                	mov    DWORD PTR [esi],eax
c000f21f:	a1 28 69 02 c0       	mov    eax,ds:0xc0026928
c000f224:	89 07                	mov    DWORD PTR [edi],eax
c000f226:	a1 24 69 02 c0       	mov    eax,ds:0xc0026924
c000f22b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f22e:	a1 20 69 02 c0       	mov    eax,ds:0xc0026920
c000f233:	89 02                	mov    DWORD PTR [edx],eax
c000f235:	eb 3f                	jmp    c000f276 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f237:	31 c9                	xor    ecx,ecx
c000f239:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f23d:	0f a2                	cpuid  
c000f23f:	89 06                	mov    DWORD PTR [esi],eax
c000f241:	89 1f                	mov    DWORD PTR [edi],ebx
c000f243:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f247:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f24a:	89 10                	mov    DWORD PTR [eax],edx
c000f24c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f250:	a3 10 16 02 c0       	mov    ds:0xc0021610,eax
c000f255:	8b 06                	mov    eax,DWORD PTR [esi]
c000f257:	a3 2c 69 02 c0       	mov    ds:0xc002692c,eax
c000f25c:	8b 07                	mov    eax,DWORD PTR [edi]
c000f25e:	a3 28 69 02 c0       	mov    ds:0xc0026928,eax
c000f263:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f266:	a3 24 69 02 c0       	mov    ds:0xc0026924,eax
c000f26b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f26f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f271:	a3 20 69 02 c0       	mov    ds:0xc0026920,eax
c000f276:	5b                   	pop    ebx
c000f277:	5e                   	pop    esi
c000f278:	5f                   	pop    edi
c000f279:	5d                   	pop    ebp
c000f27a:	c3                   	ret    
c000f27b:	90                   	nop

c000f27c <CPU::cpuidCheckEDX(unsigned int)>:
c000f27c:	83 ec 10             	sub    esp,0x10
c000f27f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f283:	50                   	push   eax
c000f284:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f288:	50                   	push   eax
c000f289:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f28d:	50                   	push   eax
c000f28e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f292:	50                   	push   eax
c000f293:	6a 01                	push   0x1
c000f295:	e8 5e ff ff ff       	call   c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f29a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f29e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f2a2:	0f 95 c0             	setne  al
c000f2a5:	83 c4 24             	add    esp,0x24
c000f2a8:	c3                   	ret    
c000f2a9:	90                   	nop

c000f2aa <CPU::cpuidCheckECX(unsigned int)>:
c000f2aa:	83 ec 10             	sub    esp,0x10
c000f2ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2b1:	50                   	push   eax
c000f2b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2b6:	50                   	push   eax
c000f2b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2bb:	50                   	push   eax
c000f2bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2c0:	50                   	push   eax
c000f2c1:	6a 01                	push   0x1
c000f2c3:	e8 30 ff ff ff       	call   c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2cc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f2d0:	0f 95 c0             	setne  al
c000f2d3:	83 c4 24             	add    esp,0x24
c000f2d6:	c3                   	ret    
c000f2d7:	90                   	nop

c000f2d8 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f2d8:	83 ec 10             	sub    esp,0x10
c000f2db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2df:	50                   	push   eax
c000f2e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2e4:	50                   	push   eax
c000f2e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2e9:	50                   	push   eax
c000f2ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2ee:	50                   	push   eax
c000f2ef:	6a 07                	push   0x7
c000f2f1:	e8 02 ff ff ff       	call   c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2fa:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f2fe:	0f 95 c0             	setne  al
c000f301:	83 c4 24             	add    esp,0x24
c000f304:	c3                   	ret    
c000f305:	90                   	nop

c000f306 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f306:	83 ec 10             	sub    esp,0x10
c000f309:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f30d:	50                   	push   eax
c000f30e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f312:	50                   	push   eax
c000f313:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f317:	50                   	push   eax
c000f318:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f31c:	50                   	push   eax
c000f31d:	6a 07                	push   0x7
c000f31f:	e8 d4 fe ff ff       	call   c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f324:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f328:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f32c:	0f 95 c0             	setne  al
c000f32f:	83 c4 24             	add    esp,0x24
c000f332:	c3                   	ret    
c000f333:	90                   	nop

c000f334 <CPU::CPU()>:
c000f334:	83 ec 0c             	sub    esp,0xc
c000f337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f33b:	83 ec 08             	sub    esp,0x8
c000f33e:	68 fd 01 02 c0       	push   0xc00201fd
c000f343:	50                   	push   eax
c000f344:	e8 93 c8 ff ff       	call   c000bbdc <Device::Device(char const*)>
c000f349:	83 c4 10             	add    esp,0x10
c000f34c:	ba 84 02 02 c0       	mov    edx,0xc0020284
c000f351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f355:	89 10                	mov    DWORD PTR [eax],edx
c000f357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f35b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f369:	05 78 01 00 00       	add    eax,0x178
c000f36e:	83 ec 0c             	sub    esp,0xc
c000f371:	50                   	push   eax
c000f372:	e8 ad 7d ff ff       	call   c0007124 <GDT::GDT()>
c000f377:	83 c4 10             	add    esp,0x10
c000f37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f37e:	05 7c 09 00 00       	add    eax,0x97c
c000f383:	83 ec 0c             	sub    esp,0xc
c000f386:	50                   	push   eax
c000f387:	e8 d4 7f ff ff       	call   c0007360 <IDT::IDT()>
c000f38c:	83 c4 10             	add    esp,0x10
c000f38f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f393:	05 7c 11 00 00       	add    eax,0x117c
c000f398:	83 ec 0c             	sub    esp,0xc
c000f39b:	50                   	push   eax
c000f39c:	e8 eb 98 ff ff       	call   c0008c8c <TSS::TSS()>
c000f3a1:	83 c4 10             	add    esp,0x10
c000f3a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3a8:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f3af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3b3:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f3bd:	90                   	nop
c000f3be:	83 c4 0c             	add    esp,0xc
c000f3c1:	c3                   	ret    

c000f3c2 <CPU::displayFeatures()>:
c000f3c2:	c3                   	ret    
c000f3c3:	90                   	nop

c000f3c4 <CPU::detectFeatures()>:
c000f3c4:	55                   	push   ebp
c000f3c5:	57                   	push   edi
c000f3c6:	56                   	push   esi
c000f3c7:	53                   	push   ebx
c000f3c8:	83 ec 30             	sub    esp,0x30
c000f3cb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f3cf:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f3d9:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f3e0:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f3e6:	6a 0d                	push   0xd
c000f3e8:	6a 00                	push   0x0
c000f3ea:	55                   	push   ebp
c000f3eb:	e8 d0 10 ff ff       	call   c00004c0 <memset>
c000f3f0:	83 c4 10             	add    esp,0x10
c000f3f3:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000f3f8:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f3ff:	0f 84 d5 05 00 00    	je     c000f9da <CPU::detectFeatures()+0x616>
c000f405:	83 ec 0c             	sub    esp,0xc
c000f408:	89 ef                	mov    edi,ebp
c000f40a:	6a 10                	push   0x10
c000f40c:	e8 6b fe ff ff       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c000f411:	83 e0 01             	and    eax,0x1
c000f414:	8d 14 00             	lea    edx,[eax+eax*1]
c000f417:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f41d:	83 e0 fd             	and    eax,0xfffffffd
c000f420:	09 d0                	or     eax,edx
c000f422:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f428:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f42f:	e8 48 fe ff ff       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c000f434:	83 e0 01             	and    eax,0x1
c000f437:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f43e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f444:	83 e0 fb             	and    eax,0xfffffffb
c000f447:	09 d0                	or     eax,edx
c000f449:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f44f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f456:	e8 21 fe ff ff       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c000f45b:	83 e0 01             	and    eax,0x1
c000f45e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f465:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f46b:	83 e0 f7             	and    eax,0xfffffff7
c000f46e:	09 d0                	or     eax,edx
c000f470:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f476:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f47d:	e8 fa fd ff ff       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c000f482:	83 e0 01             	and    eax,0x1
c000f485:	c1 e0 04             	shl    eax,0x4
c000f488:	88 c2                	mov    dl,al
c000f48a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f490:	83 e0 ef             	and    eax,0xffffffef
c000f493:	09 d0                	or     eax,edx
c000f495:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f49b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f4a2:	e8 d5 fd ff ff       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c000f4a7:	83 e0 01             	and    eax,0x1
c000f4aa:	c1 e0 05             	shl    eax,0x5
c000f4ad:	88 c2                	mov    dl,al
c000f4af:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f4b5:	83 e0 df             	and    eax,0xffffffdf
c000f4b8:	09 d0                	or     eax,edx
c000f4ba:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f4c0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f4c7:	e8 b0 fd ff ff       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c000f4cc:	83 e0 01             	and    eax,0x1
c000f4cf:	8d 14 00             	lea    edx,[eax+eax*1]
c000f4d2:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f4d8:	83 e0 fd             	and    eax,0xfffffffd
c000f4db:	09 d0                	or     eax,edx
c000f4dd:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f4e3:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f4ea:	e8 8d fd ff ff       	call   c000f27c <CPU::cpuidCheckEDX(unsigned int)>
c000f4ef:	83 e0 01             	and    eax,0x1
c000f4f2:	c1 e0 06             	shl    eax,0x6
c000f4f5:	88 c2                	mov    dl,al
c000f4f7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f4fd:	83 e0 bf             	and    eax,0xffffffbf
c000f500:	09 d0                	or     eax,edx
c000f502:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f508:	58                   	pop    eax
c000f509:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f50d:	50                   	push   eax
c000f50e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f512:	50                   	push   eax
c000f513:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f517:	56                   	push   esi
c000f518:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f51c:	50                   	push   eax
c000f51d:	6a 00                	push   0x0
c000f51f:	e8 d4 fc ff ff       	call   c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f524:	b8 04 00 00 00       	mov    eax,0x4
c000f529:	89 c1                	mov    ecx,eax
c000f52b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f52d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f533:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f537:	89 c1                	mov    ecx,eax
c000f539:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f53b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f541:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f545:	89 c1                	mov    ecx,eax
c000f547:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f549:	83 c4 18             	add    esp,0x18
c000f54c:	68 0c 01 02 c0       	push   0xc002010c
c000f551:	55                   	push   ebp
c000f552:	e8 79 11 ff ff       	call   c00006d0 <strcmp>
c000f557:	83 c4 10             	add    esp,0x10
c000f55a:	85 c0                	test   eax,eax
c000f55c:	75 0f                	jne    c000f56d <CPU::detectFeatures()+0x1a9>
c000f55e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f568:	e9 22 02 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f56d:	50                   	push   eax
c000f56e:	50                   	push   eax
c000f56f:	68 19 01 02 c0       	push   0xc0020119
c000f574:	55                   	push   ebp
c000f575:	e8 56 11 ff ff       	call   c00006d0 <strcmp>
c000f57a:	83 c4 10             	add    esp,0x10
c000f57d:	85 c0                	test   eax,eax
c000f57f:	74 dd                	je     c000f55e <CPU::detectFeatures()+0x19a>
c000f581:	50                   	push   eax
c000f582:	50                   	push   eax
c000f583:	68 26 01 02 c0       	push   0xc0020126
c000f588:	55                   	push   ebp
c000f589:	e8 42 11 ff ff       	call   c00006d0 <strcmp>
c000f58e:	83 c4 10             	add    esp,0x10
c000f591:	85 c0                	test   eax,eax
c000f593:	74 2a                	je     c000f5bf <CPU::detectFeatures()+0x1fb>
c000f595:	50                   	push   eax
c000f596:	50                   	push   eax
c000f597:	68 33 01 02 c0       	push   0xc0020133
c000f59c:	55                   	push   ebp
c000f59d:	e8 2e 11 ff ff       	call   c00006d0 <strcmp>
c000f5a2:	83 c4 10             	add    esp,0x10
c000f5a5:	85 c0                	test   eax,eax
c000f5a7:	74 16                	je     c000f5bf <CPU::detectFeatures()+0x1fb>
c000f5a9:	50                   	push   eax
c000f5aa:	50                   	push   eax
c000f5ab:	68 40 01 02 c0       	push   0xc0020140
c000f5b0:	55                   	push   ebp
c000f5b1:	e8 1a 11 ff ff       	call   c00006d0 <strcmp>
c000f5b6:	83 c4 10             	add    esp,0x10
c000f5b9:	85 c0                	test   eax,eax
c000f5bb:	74 48                	je     c000f605 <CPU::detectFeatures()+0x241>
c000f5bd:	eb 0f                	jmp    c000f5ce <CPU::detectFeatures()+0x20a>
c000f5bf:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f5c9:	e9 c1 01 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f5ce:	50                   	push   eax
c000f5cf:	50                   	push   eax
c000f5d0:	68 4d 01 02 c0       	push   0xc002014d
c000f5d5:	55                   	push   ebp
c000f5d6:	e8 f5 10 ff ff       	call   c00006d0 <strcmp>
c000f5db:	83 c4 10             	add    esp,0x10
c000f5de:	85 c0                	test   eax,eax
c000f5e0:	74 23                	je     c000f605 <CPU::detectFeatures()+0x241>
c000f5e2:	57                   	push   edi
c000f5e3:	57                   	push   edi
c000f5e4:	68 5a 01 02 c0       	push   0xc002015a
c000f5e9:	55                   	push   ebp
c000f5ea:	e8 e1 10 ff ff       	call   c00006d0 <strcmp>
c000f5ef:	83 c4 10             	add    esp,0x10
c000f5f2:	85 c0                	test   eax,eax
c000f5f4:	75 1e                	jne    c000f614 <CPU::detectFeatures()+0x250>
c000f5f6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f600:	e9 8a 01 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f605:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f60f:	e9 7b 01 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f614:	56                   	push   esi
c000f615:	56                   	push   esi
c000f616:	68 67 01 02 c0       	push   0xc0020167
c000f61b:	55                   	push   ebp
c000f61c:	e8 af 10 ff ff       	call   c00006d0 <strcmp>
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	85 c0                	test   eax,eax
c000f626:	75 0f                	jne    c000f637 <CPU::detectFeatures()+0x273>
c000f628:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f632:	e9 58 01 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f637:	51                   	push   ecx
c000f638:	51                   	push   ecx
c000f639:	68 26 01 02 c0       	push   0xc0020126
c000f63e:	55                   	push   ebp
c000f63f:	e8 8c 10 ff ff       	call   c00006d0 <strcmp>
c000f644:	83 c4 10             	add    esp,0x10
c000f647:	85 c0                	test   eax,eax
c000f649:	75 0f                	jne    c000f65a <CPU::detectFeatures()+0x296>
c000f64b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f655:	e9 35 01 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f65a:	52                   	push   edx
c000f65b:	52                   	push   edx
c000f65c:	68 74 01 02 c0       	push   0xc0020174
c000f661:	55                   	push   ebp
c000f662:	e8 69 10 ff ff       	call   c00006d0 <strcmp>
c000f667:	83 c4 10             	add    esp,0x10
c000f66a:	85 c0                	test   eax,eax
c000f66c:	75 0f                	jne    c000f67d <CPU::detectFeatures()+0x2b9>
c000f66e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f678:	e9 12 01 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f67d:	50                   	push   eax
c000f67e:	50                   	push   eax
c000f67f:	68 81 01 02 c0       	push   0xc0020181
c000f684:	55                   	push   ebp
c000f685:	e8 46 10 ff ff       	call   c00006d0 <strcmp>
c000f68a:	83 c4 10             	add    esp,0x10
c000f68d:	85 c0                	test   eax,eax
c000f68f:	75 0f                	jne    c000f6a0 <CPU::detectFeatures()+0x2dc>
c000f691:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f69b:	e9 ef 00 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f6a0:	50                   	push   eax
c000f6a1:	50                   	push   eax
c000f6a2:	68 8e 01 02 c0       	push   0xc002018e
c000f6a7:	55                   	push   ebp
c000f6a8:	e8 23 10 ff ff       	call   c00006d0 <strcmp>
c000f6ad:	83 c4 10             	add    esp,0x10
c000f6b0:	85 c0                	test   eax,eax
c000f6b2:	75 0f                	jne    c000f6c3 <CPU::detectFeatures()+0x2ff>
c000f6b4:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f6be:	e9 cc 00 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f6c3:	50                   	push   eax
c000f6c4:	50                   	push   eax
c000f6c5:	68 9b 01 02 c0       	push   0xc002019b
c000f6ca:	55                   	push   ebp
c000f6cb:	e8 00 10 ff ff       	call   c00006d0 <strcmp>
c000f6d0:	83 c4 10             	add    esp,0x10
c000f6d3:	85 c0                	test   eax,eax
c000f6d5:	75 0f                	jne    c000f6e6 <CPU::detectFeatures()+0x322>
c000f6d7:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f6e1:	e9 a9 00 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f6e6:	50                   	push   eax
c000f6e7:	50                   	push   eax
c000f6e8:	68 a8 01 02 c0       	push   0xc00201a8
c000f6ed:	55                   	push   ebp
c000f6ee:	e8 dd 0f ff ff       	call   c00006d0 <strcmp>
c000f6f3:	83 c4 10             	add    esp,0x10
c000f6f6:	85 c0                	test   eax,eax
c000f6f8:	75 0f                	jne    c000f709 <CPU::detectFeatures()+0x345>
c000f6fa:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f704:	e9 86 00 00 00       	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f709:	50                   	push   eax
c000f70a:	50                   	push   eax
c000f70b:	68 b5 01 02 c0       	push   0xc00201b5
c000f710:	55                   	push   ebp
c000f711:	e8 ba 0f ff ff       	call   c00006d0 <strcmp>
c000f716:	83 c4 10             	add    esp,0x10
c000f719:	85 c0                	test   eax,eax
c000f71b:	75 0c                	jne    c000f729 <CPU::detectFeatures()+0x365>
c000f71d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f727:	eb 66                	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f729:	50                   	push   eax
c000f72a:	50                   	push   eax
c000f72b:	68 c2 01 02 c0       	push   0xc00201c2
c000f730:	55                   	push   ebp
c000f731:	e8 9a 0f ff ff       	call   c00006d0 <strcmp>
c000f736:	83 c4 10             	add    esp,0x10
c000f739:	85 c0                	test   eax,eax
c000f73b:	75 0c                	jne    c000f749 <CPU::detectFeatures()+0x385>
c000f73d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f747:	eb 46                	jmp    c000f78f <CPU::detectFeatures()+0x3cb>
c000f749:	57                   	push   edi
c000f74a:	57                   	push   edi
c000f74b:	68 cf 01 02 c0       	push   0xc00201cf
c000f750:	55                   	push   ebp
c000f751:	e8 7a 0f ff ff       	call   c00006d0 <strcmp>
c000f756:	83 c4 10             	add    esp,0x10
c000f759:	85 c0                	test   eax,eax
c000f75b:	74 e0                	je     c000f73d <CPU::detectFeatures()+0x379>
c000f75d:	56                   	push   esi
c000f75e:	56                   	push   esi
c000f75f:	68 dc 01 02 c0       	push   0xc00201dc
c000f764:	55                   	push   ebp
c000f765:	e8 66 0f ff ff       	call   c00006d0 <strcmp>
c000f76a:	83 c4 10             	add    esp,0x10
c000f76d:	85 c0                	test   eax,eax
c000f76f:	74 cc                	je     c000f73d <CPU::detectFeatures()+0x379>
c000f771:	51                   	push   ecx
c000f772:	51                   	push   ecx
c000f773:	68 e9 01 02 c0       	push   0xc00201e9
c000f778:	55                   	push   ebp
c000f779:	e8 52 0f ff ff       	call   c00006d0 <strcmp>
c000f77e:	83 c4 10             	add    esp,0x10
c000f781:	85 c0                	test   eax,eax
c000f783:	74 b8                	je     c000f73d <CPU::detectFeatures()+0x379>
c000f785:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f78f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f794:	0f 86 be 00 00 00    	jbe    c000f858 <CPU::detectFeatures()+0x494>
c000f79a:	83 ec 0c             	sub    esp,0xc
c000f79d:	68 80 00 00 00       	push   0x80
c000f7a2:	e8 31 fb ff ff       	call   c000f2d8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f7a7:	83 e0 01             	and    eax,0x1
c000f7aa:	c1 e0 06             	shl    eax,0x6
c000f7ad:	88 c2                	mov    dl,al
c000f7af:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7b5:	83 e0 bf             	and    eax,0xffffffbf
c000f7b8:	09 d0                	or     eax,edx
c000f7ba:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f7c0:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f7c7:	e8 0c fb ff ff       	call   c000f2d8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f7cc:	83 e0 01             	and    eax,0x1
c000f7cf:	c1 e0 04             	shl    eax,0x4
c000f7d2:	88 c2                	mov    dl,al
c000f7d4:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f7da:	83 e0 ef             	and    eax,0xffffffef
c000f7dd:	09 d0                	or     eax,edx
c000f7df:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f7e5:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f7ec:	e8 e7 fa ff ff       	call   c000f2d8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f7f1:	c1 e0 07             	shl    eax,0x7
c000f7f4:	88 c2                	mov    dl,al
c000f7f6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7fc:	83 e0 7f             	and    eax,0x7f
c000f7ff:	09 d0                	or     eax,edx
c000f801:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f807:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f80e:	e8 f3 fa ff ff       	call   c000f306 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f813:	83 e0 01             	and    eax,0x1
c000f816:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f81d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f823:	83 e0 f7             	and    eax,0xfffffff7
c000f826:	09 d0                	or     eax,edx
c000f828:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f82e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f835:	e8 cc fa ff ff       	call   c000f306 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f83a:	83 c4 10             	add    esp,0x10
c000f83d:	83 e0 01             	and    eax,0x1
c000f840:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f847:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f84d:	83 e0 fb             	and    eax,0xfffffffb
c000f850:	09 d0                	or     eax,edx
c000f852:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f858:	83 ec 0c             	sub    esp,0xc
c000f85b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f85f:	50                   	push   eax
c000f860:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f864:	50                   	push   eax
c000f865:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f869:	56                   	push   esi
c000f86a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f86e:	50                   	push   eax
c000f86f:	6a 01                	push   0x1
c000f871:	e8 82 f9 ff ff       	call   c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f876:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f87a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f880:	88 ca                	mov    dl,cl
c000f882:	83 e0 f0             	and    eax,0xfffffff0
c000f885:	83 e2 0f             	and    edx,0xf
c000f888:	09 d0                	or     eax,edx
c000f88a:	88 ca                	mov    dl,cl
c000f88c:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f892:	c0 ea 04             	shr    dl,0x4
c000f895:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f899:	0f b6 c2             	movzx  eax,dl
c000f89c:	83 c4 20             	add    esp,0x20
c000f89f:	c1 e0 06             	shl    eax,0x6
c000f8a2:	89 c7                	mov    edi,eax
c000f8a4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f8aa:	66 25 3f c0          	and    ax,0xc03f
c000f8ae:	09 f8                	or     eax,edi
c000f8b0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f8b7:	89 c8                	mov    eax,ecx
c000f8b9:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f8c0:	c1 e8 08             	shr    eax,0x8
c000f8c3:	83 e5 3f             	and    ebp,0x3f
c000f8c6:	83 e0 0f             	and    eax,0xf
c000f8c9:	89 c7                	mov    edi,eax
c000f8cb:	c1 e7 06             	shl    edi,0x6
c000f8ce:	09 ef                	or     edi,ebp
c000f8d0:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f8d7:	89 fa                	mov    edx,edi
c000f8d9:	83 e5 c0             	and    ebp,0xffffffc0
c000f8dc:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f8e2:	88 c2                	mov    dl,al
c000f8e4:	c0 ea 02             	shr    dl,0x2
c000f8e7:	89 d7                	mov    edi,edx
c000f8e9:	09 ef                	or     edi,ebp
c000f8eb:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f8f1:	89 fa                	mov    edx,edi
c000f8f3:	83 e5 cf             	and    ebp,0xffffffcf
c000f8f6:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f8fc:	89 cf                	mov    edi,ecx
c000f8fe:	c1 ef 0c             	shr    edi,0xc
c000f901:	83 e7 03             	and    edi,0x3
c000f904:	c1 e7 04             	shl    edi,0x4
c000f907:	09 ef                	or     edi,ebp
c000f909:	3c 06                	cmp    al,0x6
c000f90b:	89 fa                	mov    edx,edi
c000f90d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f913:	74 04                	je     c000f919 <CPU::detectFeatures()+0x555>
c000f915:	3c 0f                	cmp    al,0xf
c000f917:	75 5c                	jne    c000f975 <CPU::detectFeatures()+0x5b1>
c000f919:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f91d:	89 cf                	mov    edi,ecx
c000f91f:	c1 ef 10             	shr    edi,0x10
c000f922:	c1 e7 04             	shl    edi,0x4
c000f925:	09 fa                	or     edx,edi
c000f927:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f92d:	0f b6 d2             	movzx  edx,dl
c000f930:	66 81 e7 3f c0       	and    di,0xc03f
c000f935:	c1 e2 06             	shl    edx,0x6
c000f938:	09 fa                	or     edx,edi
c000f93a:	3c 0f                	cmp    al,0xf
c000f93c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f943:	75 30                	jne    c000f975 <CPU::detectFeatures()+0x5b1>
c000f945:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f94b:	c1 e9 14             	shr    ecx,0x14
c000f94e:	83 e0 3f             	and    eax,0x3f
c000f951:	83 c1 0f             	add    ecx,0xf
c000f954:	88 ca                	mov    dl,cl
c000f956:	c0 e9 02             	shr    cl,0x2
c000f959:	c1 e2 06             	shl    edx,0x6
c000f95c:	09 d0                	or     eax,edx
c000f95e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f964:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f96a:	83 e0 c0             	and    eax,0xffffffc0
c000f96d:	09 c1                	or     ecx,eax
c000f96f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f975:	83 ec 0c             	sub    esp,0xc
c000f978:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f97f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f983:	50                   	push   eax
c000f984:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f988:	55                   	push   ebp
c000f989:	56                   	push   esi
c000f98a:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f98e:	57                   	push   edi
c000f98f:	68 00 00 00 80       	push   0x80000000
c000f994:	e8 5f f8 ff ff       	call   c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f999:	83 c4 20             	add    esp,0x20
c000f99c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f9a4:	76 22                	jbe    c000f9c8 <CPU::detectFeatures()+0x604>
c000f9a6:	83 ec 0c             	sub    esp,0xc
c000f9a9:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9ad:	50                   	push   eax
c000f9ae:	55                   	push   ebp
c000f9af:	56                   	push   esi
c000f9b0:	57                   	push   edi
c000f9b1:	68 01 00 00 80       	push   0x80000001
c000f9b6:	e8 3d f8 ff ff       	call   c000f1f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9bb:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f9c5:	83 c4 20             	add    esp,0x20
c000f9c8:	52                   	push   edx
c000f9c9:	52                   	push   edx
c000f9ca:	68 f5 01 02 c0       	push   0xc00201f5
c000f9cf:	53                   	push   ebx
c000f9d0:	e8 f9 c1 ff ff       	call   c000bbce <Device::setName(char const*)>
c000f9d5:	83 c4 10             	add    esp,0x10
c000f9d8:	eb 67                	jmp    c000fa41 <CPU::detectFeatures()+0x67d>
c000f9da:	50                   	push   eax
c000f9db:	50                   	push   eax
c000f9dc:	68 5a 01 02 c0       	push   0xc002015a
c000f9e1:	55                   	push   ebp
c000f9e2:	e8 09 0c ff ff       	call   c00005f0 <strcpy>
c000f9e7:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f9f1:	e8 cd 07 ff ff       	call   c00001c3 <is486>
c000f9f6:	83 c4 10             	add    esp,0x10
c000f9f9:	85 c0                	test   eax,eax
c000f9fb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fa01:	74 1d                	je     c000fa20 <CPU::detectFeatures()+0x65c>
c000fa03:	83 c8 07             	or     eax,0x7
c000fa06:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fa0c:	0f 20 c0             	mov    eax,cr0
c000fa0f:	83 e0 14             	and    eax,0x14
c000fa12:	83 f8 04             	cmp    eax,0x4
c000fa15:	75 0e                	jne    c000fa25 <CPU::detectFeatures()+0x661>
c000fa17:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fa1e:	eb 21                	jmp    c000fa41 <CPU::detectFeatures()+0x67d>
c000fa20:	83 e0 f8             	and    eax,0xfffffff8
c000fa23:	eb e1                	jmp    c000fa06 <CPU::detectFeatures()+0x642>
c000fa25:	e8 74 07 ff ff       	call   c000019e <hasLegacyFPU>
c000fa2a:	83 e0 01             	and    eax,0x1
c000fa2d:	8d 14 00             	lea    edx,[eax+eax*1]
c000fa30:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fa36:	83 e0 fd             	and    eax,0xfffffffd
c000fa39:	09 d0                	or     eax,edx
c000fa3b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fa41:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fa48:	74 0e                	je     c000fa58 <CPU::detectFeatures()+0x694>
c000fa4a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000fa4f:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000fa56:	eb 20                	jmp    c000fa78 <CPU::detectFeatures()+0x6b4>
c000fa58:	e8 41 07 ff ff       	call   c000019e <hasLegacyFPU>
c000fa5d:	83 e0 01             	and    eax,0x1
c000fa60:	8d 14 00             	lea    edx,[eax+eax*1]
c000fa63:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fa69:	83 e0 fd             	and    eax,0xfffffffd
c000fa6c:	09 d0                	or     eax,edx
c000fa6e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fa74:	a8 02                	test   al,0x2
c000fa76:	75 d2                	jne    c000fa4a <CPU::detectFeatures()+0x686>
c000fa78:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fa7f:	83 c4 2c             	add    esp,0x2c
c000fa82:	5b                   	pop    ebx
c000fa83:	5e                   	pop    esi
c000fa84:	5f                   	pop    edi
c000fa85:	5d                   	pop    ebp
c000fa86:	c3                   	ret    
c000fa87:	90                   	nop

c000fa88 <CPU::setupSMEP()>:
c000fa88:	0f 20 e0             	mov    eax,cr4
c000fa8b:	0d 00 00 10 00       	or     eax,0x100000
c000fa90:	0f 22 e0             	mov    cr4,eax
c000fa93:	c3                   	ret    

c000fa94 <CPU::setupUMIP()>:
c000fa94:	0f 20 e0             	mov    eax,cr4
c000fa97:	80 cc 08             	or     ah,0x8
c000fa9a:	0f 22 e0             	mov    cr4,eax
c000fa9d:	c3                   	ret    

c000fa9e <CPU::setupTSC()>:
c000fa9e:	0f 20 e0             	mov    eax,cr4
c000faa1:	83 c8 04             	or     eax,0x4
c000faa4:	0f 22 e0             	mov    cr4,eax
c000faa7:	c3                   	ret    

c000faa8 <CPU::setupLargePages()>:
c000faa8:	0f 20 e0             	mov    eax,cr4
c000faab:	83 c8 10             	or     eax,0x10
c000faae:	0f 22 e0             	mov    cr4,eax
c000fab1:	c3                   	ret    

c000fab2 <CPU::setupPAT()>:
c000fab2:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000fab7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000fabe:	74 2c                	je     c000faec <CPU::setupPAT()+0x3a>
c000fac0:	53                   	push   ebx
c000fac1:	83 ec 10             	sub    esp,0x10
c000fac4:	68 77 02 00 00       	push   0x277
c000fac9:	50                   	push   eax
c000faca:	e8 cd 73 ff ff       	call   c0006e9c <Computer::rdmsr(unsigned int)>
c000facf:	83 e2 f8             	and    edx,0xfffffff8
c000fad2:	83 ca 01             	or     edx,0x1
c000fad5:	52                   	push   edx
c000fad6:	50                   	push   eax
c000fad7:	68 77 02 00 00       	push   0x277
c000fadc:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000fae2:	e8 e1 73 ff ff       	call   c0006ec8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000fae7:	83 c4 28             	add    esp,0x28
c000faea:	5b                   	pop    ebx
c000faeb:	c3                   	ret    
c000faec:	c3                   	ret    
c000faed:	90                   	nop

c000faee <CPU::setupMTRR()>:
c000faee:	c3                   	ret    
c000faef:	90                   	nop

c000faf0 <CPU::setupGlobalPages()>:
c000faf0:	0f 20 e0             	mov    eax,cr4
c000faf3:	0c 80                	or     al,0x80
c000faf5:	0f 22 e0             	mov    cr4,eax
c000faf8:	c3                   	ret    
c000faf9:	90                   	nop

c000fafa <CPU::allowUsermodeDataAccess()>:
c000fafa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fafe:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fb05:	74 03                	je     c000fb0a <CPU::allowUsermodeDataAccess()+0x10>
c000fb07:	0f 01 cb             	stac   
c000fb0a:	c3                   	ret    
c000fb0b:	90                   	nop

c000fb0c <CPU::prohibitUsermodeDataAccess()>:
c000fb0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb10:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fb17:	74 03                	je     c000fb1c <CPU::prohibitUsermodeDataAccess()+0x10>
c000fb19:	0f 01 ca             	clac   
c000fb1c:	c3                   	ret    
c000fb1d:	90                   	nop

c000fb1e <CPU::setupSMAP()>:
c000fb1e:	0f 20 e0             	mov    eax,cr4
c000fb21:	0d 00 00 20 00       	or     eax,0x200000
c000fb26:	0f 22 e0             	mov    cr4,eax
c000fb29:	eb e1                	jmp    c000fb0c <CPU::prohibitUsermodeDataAccess()>
c000fb2b:	90                   	nop

c000fb2c <CPU::setupFeatures()>:
c000fb2c:	53                   	push   ebx
c000fb2d:	83 ec 08             	sub    esp,0x8
c000fb30:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb34:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fb3b:	74 18                	je     c000fb55 <CPU::setupFeatures()+0x29>
c000fb3d:	83 ec 0c             	sub    esp,0xc
c000fb40:	68 01 02 02 c0       	push   0xc0020201
c000fb45:	e8 bc aa ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000fb4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb4d:	e8 42 ff ff ff       	call   c000fa94 <CPU::setupUMIP()>
c000fb52:	83 c4 10             	add    esp,0x10
c000fb55:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fb5c:	74 18                	je     c000fb76 <CPU::setupFeatures()+0x4a>
c000fb5e:	83 ec 0c             	sub    esp,0xc
c000fb61:	68 0b 02 02 c0       	push   0xc002020b
c000fb66:	e8 9b aa ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000fb6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb6e:	e8 2b ff ff ff       	call   c000fa9e <CPU::setupTSC()>
c000fb73:	83 c4 10             	add    esp,0x10
c000fb76:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fb7d:	74 18                	je     c000fb97 <CPU::setupFeatures()+0x6b>
c000fb7f:	83 ec 0c             	sub    esp,0xc
c000fb82:	68 14 02 02 c0       	push   0xc0020214
c000fb87:	e8 7a aa ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000fb8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb8f:	e8 14 ff ff ff       	call   c000faa8 <CPU::setupLargePages()>
c000fb94:	83 c4 10             	add    esp,0x10
c000fb97:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fb9e:	74 18                	je     c000fbb8 <CPU::setupFeatures()+0x8c>
c000fba0:	83 ec 0c             	sub    esp,0xc
c000fba3:	68 1d 02 02 c0       	push   0xc002021d
c000fba8:	e8 59 aa ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000fbad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbb0:	e8 3b ff ff ff       	call   c000faf0 <CPU::setupGlobalPages()>
c000fbb5:	83 c4 10             	add    esp,0x10
c000fbb8:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fbbf:	74 18                	je     c000fbd9 <CPU::setupFeatures()+0xad>
c000fbc1:	83 ec 0c             	sub    esp,0xc
c000fbc4:	68 2f 02 02 c0       	push   0xc002022f
c000fbc9:	e8 38 aa ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c000fbce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbd1:	e8 dc fe ff ff       	call   c000fab2 <CPU::setupPAT()>
c000fbd6:	83 c4 10             	add    esp,0x10
c000fbd9:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fbe0:	74 11                	je     c000fbf3 <CPU::setupFeatures()+0xc7>
c000fbe2:	c7 44 24 10 38 02 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020238
c000fbea:	83 c4 08             	add    esp,0x8
c000fbed:	5b                   	pop    ebx
c000fbee:	e9 13 aa ff ff       	jmp    c000a606 <Dbg::kprintf(char const*, ...)>
c000fbf3:	83 c4 08             	add    esp,0x8
c000fbf6:	5b                   	pop    ebx
c000fbf7:	c3                   	ret    

c000fbf8 <CPU::open(int, int, void*)>:
c000fbf8:	57                   	push   edi
c000fbf9:	56                   	push   esi
c000fbfa:	53                   	push   ebx
c000fbfb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fc03:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fc09:	83 ec 0c             	sub    esp,0xc
c000fc0c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fc12:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fc18:	50                   	push   eax
c000fc19:	e8 68 75 ff ff       	call   c0007186 <GDT::setup()>
c000fc1e:	83 c4 0c             	add    esp,0xc
c000fc21:	6a 00                	push   0x0
c000fc23:	68 ef be ad de       	push   0xdeadbeef
c000fc28:	57                   	push   edi
c000fc29:	e8 a2 90 ff ff       	call   c0008cd0 <TSS::setup(unsigned long, unsigned long)>
c000fc2e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fc31:	e8 7a 90 ff ff       	call   c0008cb0 <TSS::flush()>
c000fc36:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fc3c:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc3f:	e8 92 77 ff ff       	call   c00073d6 <IDT::setup()>
c000fc44:	b8 00 04 00 00       	mov    eax,0x400
c000fc49:	0f 23 f8             	mov    db7,eax
c000fc4c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fc56:	e8 e6 7e ff ff       	call   c0007b41 <Phys::allocatePage()>
c000fc5b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fc61:	89 30                	mov    DWORD PTR [eax],esi
c000fc63:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fc69:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fc6c:	58                   	pop    eax
c000fc6d:	5a                   	pop    edx
c000fc6e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fc74:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fc78:	e8 6b a0 ff ff       	call   c0009ce8 <VAS::setCPUSpecific(unsigned long)>
c000fc7d:	c7 04 24 42 02 02 c0 	mov    DWORD PTR [esp],0xc0020242
c000fc84:	e8 c6 00 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c000fc89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc8c:	e8 33 f7 ff ff       	call   c000f3c4 <CPU::detectFeatures()>
c000fc91:	c7 04 24 65 02 02 c0 	mov    DWORD PTR [esp],0xc0020265
c000fc98:	e8 b2 00 00 00       	call   c000fd4f <KeSetBootMessage(char const*)>
c000fc9d:	e8 81 6c 00 00       	call   c0016923 <HalInitialise()>
c000fca2:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000fca7:	83 e0 10             	and    eax,0x10
c000fcaa:	83 f8 01             	cmp    eax,0x1
c000fcad:	19 c0                	sbb    eax,eax
c000fcaf:	83 e0 46             	and    eax,0x46
c000fcb2:	83 c0 1e             	add    eax,0x1e
c000fcb5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcb8:	e8 dc d6 ff ff       	call   c000d399 <setupTimer(int)>
c000fcbd:	83 c4 10             	add    esp,0x10
c000fcc0:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fcc6:	f6 05 d0 3e 02 c0 20 	test   BYTE PTR ds:0xc0023ed0,0x20
c000fccd:	74 0c                	je     c000fcdb <CPU::open(int, int, void*)+0xe3>
c000fccf:	83 ec 0c             	sub    esp,0xc
c000fcd2:	53                   	push   ebx
c000fcd3:	e8 54 fe ff ff       	call   c000fb2c <CPU::setupFeatures()>
c000fcd8:	83 c4 10             	add    esp,0x10
c000fcdb:	5b                   	pop    ebx
c000fcdc:	31 c0                	xor    eax,eax
c000fcde:	5e                   	pop    esi
c000fcdf:	5f                   	pop    edi
c000fce0:	c3                   	ret    

c000fce1 <KeDisplaySplashScreen()>:
c000fce1:	55                   	push   ebp
c000fce2:	bd 05 00 00 00       	mov    ebp,0x5
c000fce7:	57                   	push   edi
c000fce8:	bf 20 16 02 c0       	mov    edi,0xc0021620
c000fced:	56                   	push   esi
c000fcee:	be 0a 00 00 00       	mov    esi,0xa
c000fcf3:	53                   	push   ebx
c000fcf4:	31 db                	xor    ebx,ebx
c000fcf6:	83 ec 0c             	sub    esp,0xc
c000fcf9:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fcfc:	84 c0                	test   al,al
c000fcfe:	74 47                	je     c000fd47 <KeDisplaySplashScreen()+0x66>
c000fd00:	80 bb 56 16 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde9aa],0xdb
c000fd07:	75 13                	jne    c000fd1c <KeDisplaySplashScreen()+0x3b>
c000fd09:	0f b6 93 55 16 02 c0 	movzx  edx,BYTE PTR [ebx-0x3ffde9ab]
c000fd10:	83 e2 fe             	and    edx,0xfffffffe
c000fd13:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fd19:	75 01                	jne    c000fd1c <KeDisplaySplashScreen()+0x3b>
c000fd1b:	46                   	inc    esi
c000fd1c:	3c 0d                	cmp    al,0xd
c000fd1e:	74 24                	je     c000fd44 <KeDisplaySplashScreen()+0x63>
c000fd20:	3c 0a                	cmp    al,0xa
c000fd22:	75 0a                	jne    c000fd2e <KeDisplaySplashScreen()+0x4d>
c000fd24:	45                   	inc    ebp
c000fd25:	be 0a 00 00 00       	mov    esi,0xa
c000fd2a:	31 db                	xor    ebx,ebx
c000fd2c:	eb 16                	jmp    c000fd44 <KeDisplaySplashScreen()+0x63>
c000fd2e:	83 ec 0c             	sub    esp,0xc
c000fd31:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fd34:	55                   	push   ebp
c000fd35:	43                   	inc    ebx
c000fd36:	52                   	push   edx
c000fd37:	6a 00                	push   0x0
c000fd39:	6a 0e                	push   0xe
c000fd3b:	50                   	push   eax
c000fd3c:	e8 47 78 00 00       	call   c0017588 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fd41:	83 c4 20             	add    esp,0x20
c000fd44:	47                   	inc    edi
c000fd45:	eb b2                	jmp    c000fcf9 <KeDisplaySplashScreen()+0x18>
c000fd47:	83 c4 0c             	add    esp,0xc
c000fd4a:	5b                   	pop    ebx
c000fd4b:	5e                   	pop    esi
c000fd4c:	5f                   	pop    edi
c000fd4d:	5d                   	pop    ebp
c000fd4e:	c3                   	ret    

c000fd4f <KeSetBootMessage(char const*)>:
c000fd4f:	57                   	push   edi
c000fd50:	56                   	push   esi
c000fd51:	53                   	push   ebx
c000fd52:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fd58:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fd5f:	68 9e 00 00 00       	push   0x9e
c000fd64:	6a 00                	push   0x0
c000fd66:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fd6a:	56                   	push   esi
c000fd6b:	e8 50 07 ff ff       	call   c00004c0 <memset>
c000fd70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd73:	e8 b8 07 ff ff       	call   c0000530 <strlen>
c000fd78:	ba 50 00 00 00       	mov    edx,0x50
c000fd7d:	83 c4 10             	add    esp,0x10
c000fd80:	29 c2                	sub    edx,eax
c000fd82:	31 c9                	xor    ecx,ecx
c000fd84:	83 e2 fe             	and    edx,0xfffffffe
c000fd87:	01 f2                	add    edx,esi
c000fd89:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fd8e:	84 c0                	test   al,al
c000fd90:	74 0a                	je     c000fd9c <KeSetBootMessage(char const*)+0x4d>
c000fd92:	80 cc 0f             	or     ah,0xf
c000fd95:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fd99:	41                   	inc    ecx
c000fd9a:	eb ed                	jmp    c000fd89 <KeSetBootMessage(char const*)+0x3a>
c000fd9c:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fda1:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fda6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fda8:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fdae:	5b                   	pop    ebx
c000fdaf:	5e                   	pop    esi
c000fdb0:	5f                   	pop    edi
c000fdb1:	c3                   	ret    

c000fdb2 <EnvVarContainer::getEnv(char const*)>:
c000fdb2:	57                   	push   edi
c000fdb3:	56                   	push   esi
c000fdb4:	53                   	push   ebx
c000fdb5:	31 db                	xor    ebx,ebx
c000fdb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fdbb:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fdbd:	7e 2b                	jle    c000fdea <EnvVarContainer::getEnv(char const*)+0x38>
c000fdbf:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fdc6:	50                   	push   eax
c000fdc7:	50                   	push   eax
c000fdc8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fdcb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fdce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fdd2:	e8 f9 08 ff ff       	call   c00006d0 <strcmp>
c000fdd7:	83 c4 10             	add    esp,0x10
c000fdda:	85 c0                	test   eax,eax
c000fddc:	75 09                	jne    c000fde7 <EnvVarContainer::getEnv(char const*)+0x35>
c000fdde:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fde1:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fde5:	eb 05                	jmp    c000fdec <EnvVarContainer::getEnv(char const*)+0x3a>
c000fde7:	43                   	inc    ebx
c000fde8:	eb d1                	jmp    c000fdbb <EnvVarContainer::getEnv(char const*)+0x9>
c000fdea:	31 c0                	xor    eax,eax
c000fdec:	5b                   	pop    ebx
c000fded:	5e                   	pop    esi
c000fdee:	5f                   	pop    edi
c000fdef:	c3                   	ret    

c000fdf0 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fdf0:	55                   	push   ebp
c000fdf1:	57                   	push   edi
c000fdf2:	56                   	push   esi
c000fdf3:	53                   	push   ebx
c000fdf4:	83 ec 28             	sub    esp,0x28
c000fdf7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fdfb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fdff:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fe03:	56                   	push   esi
c000fe04:	e8 27 07 ff ff       	call   c0000530 <strlen>
c000fe09:	40                   	inc    eax
c000fe0a:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe0d:	e8 53 7a ff ff       	call   c0007865 <malloc>
c000fe12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe15:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe19:	e8 12 07 ff ff       	call   c0000530 <strlen>
c000fe1e:	40                   	inc    eax
c000fe1f:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe22:	e8 3e 7a ff ff       	call   c0007865 <malloc>
c000fe27:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe2a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fe2e:	e8 fd 06 ff ff       	call   c0000530 <strlen>
c000fe33:	83 c4 0c             	add    esp,0xc
c000fe36:	40                   	inc    eax
c000fe37:	50                   	push   eax
c000fe38:	6a 00                	push   0x0
c000fe3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fe3e:	e8 7d 06 ff ff       	call   c00004c0 <memset>
c000fe43:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe46:	e8 e5 06 ff ff       	call   c0000530 <strlen>
c000fe4b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fe4f:	8d 48 01             	lea    ecx,[eax+0x1]
c000fe52:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe57:	89 de                	mov    esi,ebx
c000fe59:	e8 d2 06 ff ff       	call   c0000530 <strlen>
c000fe5e:	83 c4 0c             	add    esp,0xc
c000fe61:	40                   	inc    eax
c000fe62:	50                   	push   eax
c000fe63:	6a 00                	push   0x0
c000fe65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe69:	e8 52 06 ff ff       	call   c00004c0 <memset>
c000fe6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe71:	e8 ba 06 ff ff       	call   c0000530 <strlen>
c000fe76:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fe7a:	8d 48 01             	lea    ecx,[eax+0x1]
c000fe7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe7f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fe82:	40                   	inc    eax
c000fe83:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fe86:	c1 e0 03             	shl    eax,0x3
c000fe89:	5a                   	pop    edx
c000fe8a:	59                   	pop    ecx
c000fe8b:	50                   	push   eax
c000fe8c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fe8f:	e8 bd 79 ff ff       	call   c0007851 <realloc>
c000fe94:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fe98:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fe9b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fe9e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fea2:	b9 08 00 00 00       	mov    ecx,0x8
c000fea7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fea9:	83 c4 2c             	add    esp,0x2c
c000feac:	5b                   	pop    ebx
c000fead:	5e                   	pop    esi
c000feae:	5f                   	pop    edi
c000feaf:	5d                   	pop    ebp
c000feb0:	c3                   	ret    
c000feb1:	90                   	nop

c000feb2 <EnvVarContainer::deleteEnv(char const*)>:
c000feb2:	c3                   	ret    
c000feb3:	90                   	nop

c000feb4 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000feb4:	55                   	push   ebp
c000feb5:	57                   	push   edi
c000feb6:	56                   	push   esi
c000feb7:	53                   	push   ebx
c000feb8:	81 ec 38 01 00 00    	sub    esp,0x138
c000febe:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fec5:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fecc:	68 14 01 00 00       	push   0x114
c000fed1:	e8 8f 79 ff ff       	call   c0007865 <malloc>
c000fed6:	83 c4 0c             	add    esp,0xc
c000fed9:	89 c3                	mov    ebx,eax
c000fedb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fede:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fee5:	50                   	push   eax
c000fee6:	e8 91 ac ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c000feeb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000feee:	e8 b7 af ff ff       	call   c000aeaa <File::exists()>
c000fef3:	83 c4 10             	add    esp,0x10
c000fef6:	84 c0                	test   al,al
c000fef8:	75 31                	jne    c000ff2b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fefa:	50                   	push   eax
c000fefb:	50                   	push   eax
c000fefc:	6a 12                	push   0x12
c000fefe:	53                   	push   ebx
c000feff:	e8 38 ad ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c000ff04:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ff06:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000ff09:	89 34 24             	mov    DWORD PTR [esp],esi
c000ff0c:	e8 1f 06 ff ff       	call   c0000530 <strlen>
c000ff11:	5a                   	pop    edx
c000ff12:	31 d2                	xor    edx,edx
c000ff14:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000ff18:	51                   	push   ecx
c000ff19:	56                   	push   esi
c000ff1a:	52                   	push   edx
c000ff1b:	50                   	push   eax
c000ff1c:	53                   	push   ebx
c000ff1d:	ff d7                	call   edi
c000ff1f:	83 c4 14             	add    esp,0x14
c000ff22:	53                   	push   ebx
c000ff23:	e8 72 ad ff ff       	call   c000ac9a <File::close()>
c000ff28:	83 c4 10             	add    esp,0x10
c000ff2b:	56                   	push   esi
c000ff2c:	31 f6                	xor    esi,esi
c000ff2e:	68 00 01 00 00       	push   0x100
c000ff33:	6a 00                	push   0x0
c000ff35:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ff39:	50                   	push   eax
c000ff3a:	e8 81 05 ff ff       	call   c00004c0 <memset>
c000ff3f:	5f                   	pop    edi
c000ff40:	58                   	pop    eax
c000ff41:	6a 01                	push   0x1
c000ff43:	53                   	push   ebx
c000ff44:	e8 f3 ac ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c000ff49:	83 c4 10             	add    esp,0x10
c000ff4c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ff54:	83 ec 0c             	sub    esp,0xc
c000ff57:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ff59:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000ff5d:	51                   	push   ecx
c000ff5e:	8d 54 24 23          	lea    edx,[esp+0x23]
c000ff62:	52                   	push   edx
c000ff63:	6a 00                	push   0x0
c000ff65:	6a 01                	push   0x1
c000ff67:	53                   	push   ebx
c000ff68:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ff6b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000ff6f:	83 c4 20             	add    esp,0x20
c000ff72:	3c 0d                	cmp    al,0xd
c000ff74:	0f 84 09 01 00 00    	je     c0010083 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ff7a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ff7f:	0f 84 ef 00 00 00    	je     c0010074 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000ff85:	3c 0a                	cmp    al,0xa
c000ff87:	74 13                	je     c000ff9c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000ff89:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ff8e:	74 0c                	je     c000ff9c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000ff90:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000ff96:	0f 8e d8 00 00 00    	jle    c0010074 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000ff9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffa0:	83 ec 0c             	sub    esp,0xc
c000ffa3:	8d 78 01             	lea    edi,[eax+0x1]
c000ffa6:	57                   	push   edi
c000ffa7:	e8 b9 78 ff ff       	call   c0007865 <malloc>
c000ffac:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000ffb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ffb4:	8d 56 04             	lea    edx,[esi+0x4]
c000ffb7:	89 14 24             	mov    DWORD PTR [esp],edx
c000ffba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ffbe:	e8 a2 78 ff ff       	call   c0007865 <malloc>
c000ffc3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ffc7:	83 c4 0c             	add    esp,0xc
c000ffca:	57                   	push   edi
c000ffcb:	6a 00                	push   0x0
c000ffcd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ffd1:	e8 ea 04 ff ff       	call   c00004c0 <memset>
c000ffd6:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ffda:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000ffde:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ffe2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffe4:	83 c4 0c             	add    esp,0xc
c000ffe7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ffeb:	52                   	push   edx
c000ffec:	6a 00                	push   0x0
c000ffee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fff2:	e8 c9 04 ff ff       	call   c00004c0 <memset>
c000fff7:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fffb:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000ffff:	89 34 24             	mov    DWORD PTR [esp],esi
c0010002:	e8 29 05 ff ff       	call   c0000530 <strlen>
c0010007:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001000b:	89 c1                	mov    ecx,eax
c001000d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001000f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010012:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010015:	40                   	inc    eax
c0010016:	83 c4 10             	add    esp,0x10
c0010019:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001001c:	85 d2                	test   edx,edx
c001001e:	75 0c                	jne    c001002c <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0010020:	83 ec 0c             	sub    esp,0xc
c0010023:	6a 08                	push   0x8
c0010025:	e8 3b 78 ff ff       	call   c0007865 <malloc>
c001002a:	eb 0c                	jmp    c0010038 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001002c:	c1 e0 03             	shl    eax,0x3
c001002f:	51                   	push   ecx
c0010030:	51                   	push   ecx
c0010031:	50                   	push   eax
c0010032:	52                   	push   edx
c0010033:	e8 19 78 ff ff       	call   c0007851 <realloc>
c0010038:	83 c4 10             	add    esp,0x10
c001003b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001003e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010041:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010044:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010048:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001004c:	b9 08 00 00 00       	mov    ecx,0x8
c0010051:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010053:	31 f6                	xor    esi,esi
c0010055:	50                   	push   eax
c0010056:	68 00 01 00 00       	push   0x100
c001005b:	6a 00                	push   0x0
c001005d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010061:	50                   	push   eax
c0010062:	e8 59 04 ff ff       	call   c00004c0 <memset>
c0010067:	83 c4 10             	add    esp,0x10
c001006a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010072:	eb 0f                	jmp    c0010083 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010074:	3c 3d                	cmp    al,0x3d
c0010076:	74 07                	je     c001007f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0010078:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001007c:	46                   	inc    esi
c001007d:	eb 04                	jmp    c0010083 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001007f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010083:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010088:	0f 85 c6 fe ff ff    	jne    c000ff54 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001008e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010094:	5b                   	pop    ebx
c0010095:	5e                   	pop    esi
c0010096:	5f                   	pop    edi
c0010097:	5d                   	pop    ebp
c0010098:	c3                   	ret    
c0010099:	90                   	nop

c001009a <EnvVarContainer::__loadSystem()>:
c001009a:	83 ec 10             	sub    esp,0x10
c001009d:	68 80 17 02 c0       	push   0xc0021780
c00100a2:	68 a8 02 02 c0       	push   0xc00202a8
c00100a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100ab:	e8 04 fe ff ff       	call   c000feb4 <EnvVarContainer::loadFrom(char const*, char const*)>
c00100b0:	83 c4 1c             	add    esp,0x1c
c00100b3:	c3                   	ret    

c00100b4 <EnvVarContainer::__loadUser()>:
c00100b4:	c3                   	ret    
c00100b5:	90                   	nop

c00100b6 <EnvVarContainer::EnvVarContainer(Process*)>:
c00100b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00100c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100c8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00100cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100cf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00100d6:	90                   	nop
c00100d7:	c3                   	ret    

c00100d8 <EnvVarContainer::~EnvVarContainer()>:
c00100d8:	83 ec 0c             	sub    esp,0xc
c00100db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100e2:	85 c0                	test   eax,eax
c00100e4:	74 1d                	je     c0010103 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00100e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00100ec:	85 c0                	test   eax,eax
c00100ee:	74 13                	je     c0010103 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00100f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100f7:	83 ec 0c             	sub    esp,0xc
c00100fa:	50                   	push   eax
c00100fb:	e8 75 77 ff ff       	call   c0007875 <free>
c0010100:	83 c4 10             	add    esp,0x10
c0010103:	90                   	nop
c0010104:	83 c4 0c             	add    esp,0xc
c0010107:	c3                   	ret    

c0010108 <Krnl::getEnv(Process*, char const*)>:
c0010108:	53                   	push   ebx
c0010109:	83 ec 08             	sub    esp,0x8
c001010c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010110:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010114:	39 05 90 71 02 c0    	cmp    DWORD PTR ds:0xc0027190,eax
c001011a:	74 04                	je     c0010120 <Krnl::getEnv(Process*, char const*)+0x18>
c001011c:	85 c0                	test   eax,eax
c001011e:	75 0b                	jne    c001012b <Krnl::getEnv(Process*, char const*)+0x23>
c0010120:	a1 30 69 02 c0       	mov    eax,ds:0xc0026930
c0010125:	85 c0                	test   eax,eax
c0010127:	75 19                	jne    c0010142 <Krnl::getEnv(Process*, char const*)+0x3a>
c0010129:	eb 27                	jmp    c0010152 <Krnl::getEnv(Process*, char const*)+0x4a>
c001012b:	52                   	push   edx
c001012c:	52                   	push   edx
c001012d:	53                   	push   ebx
c001012e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010134:	e8 79 fc ff ff       	call   c000fdb2 <EnvVarContainer::getEnv(char const*)>
c0010139:	83 c4 10             	add    esp,0x10
c001013c:	85 c0                	test   eax,eax
c001013e:	75 28                	jne    c0010168 <Krnl::getEnv(Process*, char const*)+0x60>
c0010140:	eb de                	jmp    c0010120 <Krnl::getEnv(Process*, char const*)+0x18>
c0010142:	52                   	push   edx
c0010143:	52                   	push   edx
c0010144:	53                   	push   ebx
c0010145:	50                   	push   eax
c0010146:	e8 67 fc ff ff       	call   c000fdb2 <EnvVarContainer::getEnv(char const*)>
c001014b:	83 c4 10             	add    esp,0x10
c001014e:	85 c0                	test   eax,eax
c0010150:	75 16                	jne    c0010168 <Krnl::getEnv(Process*, char const*)+0x60>
c0010152:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010156:	a1 34 69 02 c0       	mov    eax,ds:0xc0026934
c001015b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001015f:	83 c4 08             	add    esp,0x8
c0010162:	5b                   	pop    ebx
c0010163:	e9 4a fc ff ff       	jmp    c000fdb2 <EnvVarContainer::getEnv(char const*)>
c0010168:	83 c4 08             	add    esp,0x8
c001016b:	5b                   	pop    ebx
c001016c:	c3                   	ret    

c001016d <Krnl::setEnvSystem(char const*, char const*)>:
c001016d:	83 ec 10             	sub    esp,0x10
c0010170:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010174:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010178:	ff 35 34 69 02 c0    	push   DWORD PTR ds:0xc0026934
c001017e:	e8 6d fc ff ff       	call   c000fdf0 <EnvVarContainer::setEnv(char const*, char const*)>
c0010183:	83 c4 1c             	add    esp,0x1c
c0010186:	c3                   	ret    

c0010187 <Krnl::setEnvUser(char const*, char const*)>:
c0010187:	a1 30 69 02 c0       	mov    eax,ds:0xc0026930
c001018c:	85 c0                	test   eax,eax
c001018e:	74 15                	je     c00101a5 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010190:	83 ec 10             	sub    esp,0x10
c0010193:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010197:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001019b:	50                   	push   eax
c001019c:	e8 4f fc ff ff       	call   c000fdf0 <EnvVarContainer::setEnv(char const*, char const*)>
c00101a1:	83 c4 1c             	add    esp,0x1c
c00101a4:	c3                   	ret    
c00101a5:	c3                   	ret    

c00101a6 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00101a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101aa:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00101b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00101b4:	e9 37 fc ff ff       	jmp    c000fdf0 <EnvVarContainer::setEnv(char const*, char const*)>

c00101b9 <Krnl::deleteEnvSystem(char const*)>:
c00101b9:	c3                   	ret    

c00101ba <Krnl::deleteEnvUser(char const*)>:
c00101ba:	c3                   	ret    

c00101bb <Krnl::deleteEnvProcess(Process*, char const*)>:
c00101bb:	c3                   	ret    

c00101bc <Krnl::newProcessEnv(Process*)>:
c00101bc:	83 ec 28             	sub    esp,0x28
c00101bf:	6a 0c                	push   0xc
c00101c1:	e8 9f 76 ff ff       	call   c0007865 <malloc>
c00101c6:	5a                   	pop    edx
c00101c7:	59                   	pop    ecx
c00101c8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00101cc:	50                   	push   eax
c00101cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00101d1:	e8 e0 fe ff ff       	call   c00100b6 <EnvVarContainer::EnvVarContainer(Process*)>
c00101d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101da:	83 c4 2c             	add    esp,0x2c
c00101dd:	c3                   	ret    

c00101de <Krnl::copyProcessEnv(Process*, Process*)>:
c00101de:	57                   	push   edi
c00101df:	56                   	push   esi
c00101e0:	53                   	push   ebx
c00101e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101e5:	83 ec 0c             	sub    esp,0xc
c00101e8:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00101ee:	6a 0c                	push   0xc
c00101f0:	e8 70 76 ff ff       	call   c0007865 <malloc>
c00101f5:	89 c3                	mov    ebx,eax
c00101f7:	58                   	pop    eax
c00101f8:	5a                   	pop    edx
c00101f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101fd:	53                   	push   ebx
c00101fe:	e8 b3 fe ff ff       	call   c00100b6 <EnvVarContainer::EnvVarContainer(Process*)>
c0010203:	8b 07                	mov    eax,DWORD PTR [edi]
c0010205:	89 03                	mov    DWORD PTR [ebx],eax
c0010207:	c1 e0 03             	shl    eax,0x3
c001020a:	89 04 24             	mov    DWORD PTR [esp],eax
c001020d:	e8 53 76 ff ff       	call   c0007865 <malloc>
c0010212:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010215:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010217:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001021a:	c1 e1 03             	shl    ecx,0x3
c001021d:	89 c7                	mov    edi,eax
c001021f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010221:	83 c4 10             	add    esp,0x10
c0010224:	89 d8                	mov    eax,ebx
c0010226:	5b                   	pop    ebx
c0010227:	5e                   	pop    esi
c0010228:	5f                   	pop    edi
c0010229:	c3                   	ret    

c001022a <Krnl::loadSystemEnv()>:
c001022a:	53                   	push   ebx
c001022b:	83 ec 14             	sub    esp,0x14
c001022e:	6a 0c                	push   0xc
c0010230:	e8 30 76 ff ff       	call   c0007865 <malloc>
c0010235:	89 c3                	mov    ebx,eax
c0010237:	58                   	pop    eax
c0010238:	5a                   	pop    edx
c0010239:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c001023f:	53                   	push   ebx
c0010240:	e8 71 fe ff ff       	call   c00100b6 <EnvVarContainer::EnvVarContainer(Process*)>
c0010245:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010248:	89 1d 34 69 02 c0    	mov    DWORD PTR ds:0xc0026934,ebx
c001024e:	e8 47 fe ff ff       	call   c001009a <EnvVarContainer::__loadSystem()>
c0010253:	83 c4 18             	add    esp,0x18
c0010256:	5b                   	pop    ebx
c0010257:	c3                   	ret    

c0010258 <Krnl::loadUserEnv()>:
c0010258:	53                   	push   ebx
c0010259:	83 ec 14             	sub    esp,0x14
c001025c:	6a 0c                	push   0xc
c001025e:	e8 02 76 ff ff       	call   c0007865 <malloc>
c0010263:	89 c3                	mov    ebx,eax
c0010265:	58                   	pop    eax
c0010266:	5a                   	pop    edx
c0010267:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c001026d:	53                   	push   ebx
c001026e:	e8 43 fe ff ff       	call   c00100b6 <EnvVarContainer::EnvVarContainer(Process*)>
c0010273:	89 1d 30 69 02 c0    	mov    DWORD PTR ds:0xc0026930,ebx
c0010279:	83 c4 18             	add    esp,0x18
c001027c:	5b                   	pop    ebx
c001027d:	c3                   	ret    

c001027e <Krnl::flushEnv()>:
c001027e:	c3                   	ret    

c001027f <Krnl::getProcessTotalEnvCount(Process*)>:
c001027f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010283:	8b 15 30 69 02 c0    	mov    edx,DWORD PTR ds:0xc0026930
c0010289:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001028f:	a1 34 69 02 c0       	mov    eax,ds:0xc0026934
c0010294:	8b 00                	mov    eax,DWORD PTR [eax]
c0010296:	03 01                	add    eax,DWORD PTR [ecx]
c0010298:	85 d2                	test   edx,edx
c001029a:	74 02                	je     c001029e <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001029c:	03 02                	add    eax,DWORD PTR [edx]
c001029e:	c3                   	ret    

c001029f <Krnl::getProcessEnvPair(Process*, int)>:
c001029f:	57                   	push   edi
c00102a0:	56                   	push   esi
c00102a1:	8b 35 30 69 02 c0    	mov    esi,DWORD PTR ds:0xc0026930
c00102a7:	53                   	push   ebx
c00102a8:	85 f6                	test   esi,esi
c00102aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102b2:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00102b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00102bc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00102be:	75 16                	jne    c00102d6 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00102c0:	39 c2                	cmp    edx,eax
c00102c2:	7c 16                	jl     c00102da <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00102c4:	8b 0d 34 69 02 c0    	mov    ecx,DWORD PTR ds:0xc0026934
c00102ca:	8b 31                	mov    esi,DWORD PTR [ecx]
c00102cc:	01 c6                	add    esi,eax
c00102ce:	39 d6                	cmp    esi,edx
c00102d0:	7e 3c                	jle    c001030e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00102d2:	29 c2                	sub    edx,eax
c00102d4:	eb 04                	jmp    c00102da <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00102d6:	39 c2                	cmp    edx,eax
c00102d8:	7d 05                	jge    c00102df <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00102da:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00102dd:	eb 20                	jmp    c00102ff <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00102df:	8b 3e                	mov    edi,DWORD PTR [esi]
c00102e1:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00102e4:	39 d1                	cmp    ecx,edx
c00102e6:	7e 04                	jle    c00102ec <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00102e8:	29 c2                	sub    edx,eax
c00102ea:	eb 10                	jmp    c00102fc <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00102ec:	8b 35 34 69 02 c0    	mov    esi,DWORD PTR ds:0xc0026934
c00102f2:	03 0e                	add    ecx,DWORD PTR [esi]
c00102f4:	39 d1                	cmp    ecx,edx
c00102f6:	7e 16                	jle    c001030e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00102f8:	29 c2                	sub    edx,eax
c00102fa:	29 fa                	sub    edx,edi
c00102fc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00102ff:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010302:	8b 02                	mov    eax,DWORD PTR [edx]
c0010304:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010307:	89 03                	mov    DWORD PTR [ebx],eax
c0010309:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001030c:	eb 1d                	jmp    c001032b <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001030e:	83 ec 0c             	sub    esp,0xc
c0010311:	68 ca 02 02 c0       	push   0xc00202ca
c0010316:	e8 ac 00 00 00       	call   c00103c7 <KePanic(char const*)>
c001031b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010321:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010328:	83 c4 10             	add    esp,0x10
c001032b:	89 d8                	mov    eax,ebx
c001032d:	5b                   	pop    ebx
c001032e:	5e                   	pop    esi
c001032f:	5f                   	pop    edi
c0010330:	c2 04 00             	ret    0x4

c0010333 <CPU::current()>:
c0010333:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010338:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001033e:	c3                   	ret    

c001033f <operator new(unsigned long)>:
c001033f:	e9 21 75 ff ff       	jmp    c0007865 <malloc>

c0010344 <operator delete(void*)>:
c0010344:	e9 3c 75 ff ff       	jmp    c0007885 <rfree>

c0010349 <disableIRQs()>:
c0010349:	fa                   	cli    
c001034a:	c3                   	ret    

c001034b <enableIRQs()>:
c001034b:	fb                   	sti    
c001034c:	c3                   	ret    

c001034d <lockScheduler()>:
c001034d:	fa                   	cli    
c001034e:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0010354:	c3                   	ret    

c0010355 <unlockScheduler()>:
c0010355:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001035a:	48                   	dec    eax
c001035b:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0010360:	75 01                	jne    c0010363 <unlockScheduler()+0xe>
c0010362:	fb                   	sti    
c0010363:	c3                   	ret    

c0010364 <lockStuff()>:
c0010364:	fa                   	cli    
c0010365:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001036b:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0010371:	c3                   	ret    

c0010372 <unlockStuff()>:
c0010372:	83 ec 0c             	sub    esp,0xc
c0010375:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c001037a:	48                   	dec    eax
c001037b:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0010380:	75 18                	jne    c001039a <unlockStuff()+0x28>
c0010382:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c0010389:	74 0f                	je     c001039a <unlockStuff()+0x28>
c001038b:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0010395:	e8 42 46 00 00       	call   c00149dc <schedule()>
c001039a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001039f:	48                   	dec    eax
c00103a0:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00103a5:	75 01                	jne    c00103a8 <unlockStuff()+0x36>
c00103a7:	fb                   	sti    
c00103a8:	83 c4 0c             	add    esp,0xc
c00103ab:	c3                   	ret    

c00103ac <Virt::getAKernelVAS()>:
c00103ac:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c00103b1:	c3                   	ret    

c00103b2 <__not_memcpy>:
c00103b2:	57                   	push   edi
c00103b3:	56                   	push   esi
c00103b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103b8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00103bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00103c0:	89 c7                	mov    edi,eax
c00103c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103c4:	5e                   	pop    esi
c00103c5:	5f                   	pop    edi
c00103c6:	c3                   	ret    

c00103c7 <KePanic(char const*)>:
c00103c7:	c6 05 38 69 02 c0 01 	mov    BYTE PTR ds:0xc0026938,0x1
c00103ce:	e9 3c 64 00 00       	jmp    c001680f <HalPanic(char const*)>

c00103d3 <Krnl::powerThread(void*)>:
c00103d3:	83 ec 0c             	sub    esp,0xc
c00103d6:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00103db:	48                   	dec    eax
c00103dc:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00103e1:	75 01                	jne    c00103e4 <Krnl::powerThread(void*)+0x11>
c00103e3:	fb                   	sti    
c00103e4:	83 ec 0c             	sub    esp,0xc
c00103e7:	c6 05 40 69 02 c0 00 	mov    BYTE PTR ds:0xc0026940,0x0
c00103ee:	6a 0a                	push   0xa
c00103f0:	e8 f7 48 00 00       	call   c0014cec <sleep(unsigned int)>
c00103f5:	83 05 84 69 02 c0 0a 	add    DWORD PTR ds:0xc0026984,0xa
c00103fc:	83 c4 10             	add    esp,0x10
c00103ff:	eb e3                	jmp    c00103e4 <Krnl::powerThread(void*)+0x11>

c0010401 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010401:	57                   	push   edi
c0010402:	b9 09 00 00 00       	mov    ecx,0x9
c0010407:	56                   	push   esi
c0010408:	bf 60 69 02 c0       	mov    edi,0xc0026960
c001040d:	fc                   	cld    
c001040e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010412:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010414:	5e                   	pop    esi
c0010415:	5f                   	pop    edi
c0010416:	c3                   	ret    

c0010417 <Krnl::userIOReceived()>:
c0010417:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c0010421:	c3                   	ret    

c0010422 <Krnl::handlePowerButton()>:
c0010422:	83 ec 0c             	sub    esp,0xc
c0010425:	a1 60 69 02 c0       	mov    eax,ds:0xc0026960
c001042a:	83 f8 02             	cmp    eax,0x2
c001042d:	75 10                	jne    c001043f <Krnl::handlePowerButton()+0x1d>
c001042f:	83 ec 0c             	sub    esp,0xc
c0010432:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0010438:	e8 c3 6a ff ff       	call   c0006f00 <Computer::shutdown()>
c001043d:	eb 11                	jmp    c0010450 <Krnl::handlePowerButton()+0x2e>
c001043f:	48                   	dec    eax
c0010440:	75 11                	jne    c0010453 <Krnl::handlePowerButton()+0x31>
c0010442:	83 ec 0c             	sub    esp,0xc
c0010445:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001044b:	e8 e0 6a ff ff       	call   c0006f30 <Computer::sleep()>
c0010450:	83 c4 10             	add    esp,0x10
c0010453:	83 c4 0c             	add    esp,0xc
c0010456:	c3                   	ret    

c0010457 <Krnl::handleSleepButton()>:
c0010457:	83 ec 0c             	sub    esp,0xc
c001045a:	a1 64 69 02 c0       	mov    eax,ds:0xc0026964
c001045f:	83 f8 02             	cmp    eax,0x2
c0010462:	75 10                	jne    c0010474 <Krnl::handleSleepButton()+0x1d>
c0010464:	83 ec 0c             	sub    esp,0xc
c0010467:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001046d:	e8 8e 6a ff ff       	call   c0006f00 <Computer::shutdown()>
c0010472:	eb 11                	jmp    c0010485 <Krnl::handleSleepButton()+0x2e>
c0010474:	48                   	dec    eax
c0010475:	75 11                	jne    c0010488 <Krnl::handleSleepButton()+0x31>
c0010477:	83 ec 0c             	sub    esp,0xc
c001047a:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0010480:	e8 ab 6a ff ff       	call   c0006f30 <Computer::sleep()>
c0010485:	83 c4 10             	add    esp,0x10
c0010488:	83 c4 0c             	add    esp,0xc
c001048b:	c3                   	ret    

c001048c <Krnl::setupPowerManager()>:
c001048c:	83 ec 0c             	sub    esp,0xc
c001048f:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c0010499:	68 f0 00 00 00       	push   0xf0
c001049e:	c6 05 40 69 02 c0 00 	mov    BYTE PTR ds:0xc0026940,0x0
c00104a5:	6a 00                	push   0x0
c00104a7:	68 d3 03 01 c0       	push   0xc00103d3
c00104ac:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00104b2:	e8 dd 42 00 00       	call   c0014794 <Process::createThread(void (*)(void*), void*, int)>
c00104b7:	c7 05 60 69 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0026960,0x2
c00104c1:	c7 05 64 69 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0026964,0x1
c00104cb:	c7 05 68 69 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0026968,0x3
c00104d5:	c7 05 6c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002696c,0x0
c00104df:	c7 05 78 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026978,0x0
c00104e9:	c7 05 70 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026970,0x0
c00104f3:	c7 05 7c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002697c,0x0
c00104fd:	c7 05 74 69 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026974,0x3c
c0010507:	c7 05 80 69 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026980,0x3c
c0010511:	83 c4 1c             	add    esp,0x1c
c0010514:	c3                   	ret    
c0010515:	66 90                	xchg   ax,ax
c0010517:	90                   	nop

c0010518 <KeResolveCompatibilitySymbol(char*)>:
c0010518:	83 ec 0c             	sub    esp,0xc
c001051b:	83 ec 08             	sub    esp,0x8
c001051e:	68 e4 02 02 c0       	push   0xc00202e4
c0010523:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010527:	e8 a4 01 ff ff       	call   c00006d0 <strcmp>
c001052c:	83 c4 10             	add    esp,0x10
c001052f:	85 c0                	test   eax,eax
c0010531:	0f 94 c0             	sete   al
c0010534:	84 c0                	test   al,al
c0010536:	74 0c                	je     c0010544 <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010538:	b8 b8 3e 02 c0       	mov    eax,0xc0023eb8
c001053d:	e9 62 01 00 00       	jmp    c00106a4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010542:	66 90                	xchg   ax,ax
c0010544:	83 ec 08             	sub    esp,0x8
c0010547:	68 ed 02 02 c0       	push   0xc00202ed
c001054c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010550:	e8 7b 01 ff ff       	call   c00006d0 <strcmp>
c0010555:	83 c4 10             	add    esp,0x10
c0010558:	85 c0                	test   eax,eax
c001055a:	0f 94 c0             	sete   al
c001055d:	84 c0                	test   al,al
c001055f:	74 0b                	je     c001056c <KeResolveCompatibilitySymbol(char*)+0x54>
c0010561:	b8 e0 dc 01 c0       	mov    eax,0xc001dce0
c0010566:	e9 39 01 00 00       	jmp    c00106a4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001056b:	90                   	nop
c001056c:	83 ec 08             	sub    esp,0x8
c001056f:	68 f7 02 02 c0       	push   0xc00202f7
c0010574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010578:	e8 53 01 ff ff       	call   c00006d0 <strcmp>
c001057d:	83 c4 10             	add    esp,0x10
c0010580:	85 c0                	test   eax,eax
c0010582:	0f 94 c0             	sete   al
c0010585:	84 c0                	test   al,al
c0010587:	74 0b                	je     c0010594 <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010589:	b8 14 da 01 c0       	mov    eax,0xc001da14
c001058e:	e9 11 01 00 00       	jmp    c00106a4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010593:	90                   	nop
c0010594:	83 ec 08             	sub    esp,0x8
c0010597:	68 00 03 02 c0       	push   0xc0020300
c001059c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a0:	e8 2b 01 ff ff       	call   c00006d0 <strcmp>
c00105a5:	83 c4 10             	add    esp,0x10
c00105a8:	85 c0                	test   eax,eax
c00105aa:	0f 94 c0             	sete   al
c00105ad:	84 c0                	test   al,al
c00105af:	74 0b                	je     c00105bc <KeResolveCompatibilitySymbol(char*)+0xa4>
c00105b1:	b8 c7 03 01 c0       	mov    eax,0xc00103c7
c00105b6:	e9 e9 00 00 00       	jmp    c00106a4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105bb:	90                   	nop
c00105bc:	83 ec 08             	sub    esp,0x8
c00105bf:	68 13 03 02 c0       	push   0xc0020313
c00105c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105c8:	e8 03 01 ff ff       	call   c00006d0 <strcmp>
c00105cd:	83 c4 10             	add    esp,0x10
c00105d0:	85 c0                	test   eax,eax
c00105d2:	0f 94 c0             	sete   al
c00105d5:	84 c0                	test   al,al
c00105d7:	74 0b                	je     c00105e4 <KeResolveCompatibilitySymbol(char*)+0xcc>
c00105d9:	b8 4f fd 00 c0       	mov    eax,0xc000fd4f
c00105de:	e9 c1 00 00 00       	jmp    c00106a4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105e3:	90                   	nop
c00105e4:	83 ec 08             	sub    esp,0x8
c00105e7:	68 30 03 02 c0       	push   0xc0020330
c00105ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105f0:	e8 db 00 ff ff       	call   c00006d0 <strcmp>
c00105f5:	83 c4 10             	add    esp,0x10
c00105f8:	85 c0                	test   eax,eax
c00105fa:	0f 94 c0             	sete   al
c00105fd:	84 c0                	test   al,al
c00105ff:	74 0b                	je     c001060c <KeResolveCompatibilitySymbol(char*)+0xf4>
c0010601:	b8 e0 dd 01 c0       	mov    eax,0xc001dde0
c0010606:	e9 99 00 00 00       	jmp    c00106a4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001060b:	90                   	nop
c001060c:	83 ec 08             	sub    esp,0x8
c001060f:	68 3a 03 02 c0       	push   0xc002033a
c0010614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010618:	e8 b3 00 ff ff       	call   c00006d0 <strcmp>
c001061d:	83 c4 10             	add    esp,0x10
c0010620:	85 c0                	test   eax,eax
c0010622:	0f 94 c0             	sete   al
c0010625:	84 c0                	test   al,al
c0010627:	74 07                	je     c0010630 <KeResolveCompatibilitySymbol(char*)+0x118>
c0010629:	b8 60 db 01 c0       	mov    eax,0xc001db60
c001062e:	eb 74                	jmp    c00106a4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010630:	83 ec 08             	sub    esp,0x8
c0010633:	68 43 03 02 c0       	push   0xc0020343
c0010638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001063c:	e8 8f 00 ff ff       	call   c00006d0 <strcmp>
c0010641:	83 c4 10             	add    esp,0x10
c0010644:	85 c0                	test   eax,eax
c0010646:	0f 94 c0             	sete   al
c0010649:	84 c0                	test   al,al
c001064b:	74 07                	je     c0010654 <KeResolveCompatibilitySymbol(char*)+0x13c>
c001064d:	b8 bc 3e 02 c0       	mov    eax,0xc0023ebc
c0010652:	eb 50                	jmp    c00106a4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010654:	83 ec 08             	sub    esp,0x8
c0010657:	68 5b 03 02 c0       	push   0xc002035b
c001065c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010660:	e8 6b 00 ff ff       	call   c00006d0 <strcmp>
c0010665:	83 c4 10             	add    esp,0x10
c0010668:	85 c0                	test   eax,eax
c001066a:	0f 94 c0             	sete   al
c001066d:	84 c0                	test   al,al
c001066f:	74 07                	je     c0010678 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010671:	b8 bc 3e 02 c0       	mov    eax,0xc0023ebc
c0010676:	eb 2c                	jmp    c00106a4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010678:	83 ec 08             	sub    esp,0x8
c001067b:	68 68 03 02 c0       	push   0xc0020368
c0010680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010684:	e8 47 00 ff ff       	call   c00006d0 <strcmp>
c0010689:	83 c4 10             	add    esp,0x10
c001068c:	85 c0                	test   eax,eax
c001068e:	0f 94 c0             	sete   al
c0010691:	84 c0                	test   al,al
c0010693:	74 07                	je     c001069c <KeResolveCompatibilitySymbol(char*)+0x184>
c0010695:	b8 bd 3e 02 c0       	mov    eax,0xc0023ebd
c001069a:	eb 08                	jmp    c00106a4 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001069c:	b8 00 00 00 00       	mov    eax,0x0
c00106a1:	8d 76 00             	lea    esi,[esi+0x0]
c00106a4:	83 c4 0c             	add    esp,0xc
c00106a7:	c3                   	ret    

c00106a8 <KiSigKill(int)>:
c00106a8:	83 ec 0c             	sub    esp,0xc
c00106ab:	6a 00                	push   0x0
c00106ad:	6a 00                	push   0x0
c00106af:	6a ff                	push   0xffffffff
c00106b1:	6a 01                	push   0x1
c00106b3:	e8 9a 19 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00106b8:	83 c4 1c             	add    esp,0x1c
c00106bb:	c3                   	ret    

c00106bc <KiDefaultSignalHandlerIgnore(int)>:
c00106bc:	c3                   	ret    

c00106bd <KiDefaultSignalHandlerPause(int)>:
c00106bd:	57                   	push   edi
c00106be:	b9 07 00 00 00       	mov    ecx,0x7
c00106c3:	56                   	push   esi
c00106c4:	be b1 03 02 c0       	mov    esi,0xc00203b1
c00106c9:	83 ec 24             	sub    esp,0x24
c00106cc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00106d0:	fc                   	cld    
c00106d1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00106d3:	8d 44 24 04          	lea    eax,[esp+0x4]
c00106d7:	50                   	push   eax
c00106d8:	6a 00                	push   0x0
c00106da:	6a 00                	push   0x0
c00106dc:	6a 27                	push   0x27
c00106de:	e8 6f 19 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00106e3:	83 c4 34             	add    esp,0x34
c00106e6:	5e                   	pop    esi
c00106e7:	5f                   	pop    edi
c00106e8:	c3                   	ret    

c00106e9 <KiDefaultSignalHandlerResume(int)>:
c00106e9:	57                   	push   edi
c00106ea:	b9 1d 00 00 00       	mov    ecx,0x1d
c00106ef:	56                   	push   esi
c00106f0:	be cd 03 02 c0       	mov    esi,0xc00203cd
c00106f5:	83 ec 24             	sub    esp,0x24
c00106f8:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00106fc:	fc                   	cld    
c00106fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106ff:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010703:	50                   	push   eax
c0010704:	6a 00                	push   0x0
c0010706:	6a 00                	push   0x0
c0010708:	6a 27                	push   0x27
c001070a:	e8 43 19 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001070f:	83 c4 34             	add    esp,0x34
c0010712:	5e                   	pop    esi
c0010713:	5f                   	pop    edi
c0010714:	c3                   	ret    

c0010715 <KeDeinitSignals(SigHandlerBlock*)>:
c0010715:	e9 5b 71 ff ff       	jmp    c0007875 <free>

c001071a <KeInitSignals()>:
c001071a:	53                   	push   ebx
c001071b:	83 ec 14             	sub    esp,0x14
c001071e:	68 c8 00 00 00       	push   0xc8
c0010723:	e8 3d 71 ff ff       	call   c0007865 <malloc>
c0010728:	83 c4 0c             	add    esp,0xc
c001072b:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010735:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001073f:	89 c3                	mov    ebx,eax
c0010741:	6a 20                	push   0x20
c0010743:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010749:	6a 00                	push   0x0
c001074b:	50                   	push   eax
c001074c:	e8 6f fd fe ff       	call   c00004c0 <memset>
c0010751:	83 c4 0c             	add    esp,0xc
c0010754:	6a 44                	push   0x44
c0010756:	6a 00                	push   0x0
c0010758:	53                   	push   ebx
c0010759:	e8 62 fd fe ff       	call   c00004c0 <memset>
c001075e:	89 d8                	mov    eax,ebx
c0010760:	83 c4 18             	add    esp,0x18
c0010763:	5b                   	pop    ebx
c0010764:	c3                   	ret    

c0010765 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010765:	53                   	push   ebx
c0010766:	b8 01 00 00 00       	mov    eax,0x1
c001076b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001076f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010773:	83 f9 10             	cmp    ecx,0x10
c0010776:	7f 21                	jg     c0010799 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010778:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001077b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001077f:	89 03                	mov    DWORD PTR [ebx],eax
c0010781:	b8 01 00 00 00       	mov    eax,0x1
c0010786:	d3 e0                	shl    eax,cl
c0010788:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001078c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001078f:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010797:	31 c0                	xor    eax,eax
c0010799:	5b                   	pop    ebx
c001079a:	c3                   	ret    

c001079b <KeRaiseSignal(SigHandlerBlock*, int)>:
c001079b:	55                   	push   ebp
c001079c:	57                   	push   edi
c001079d:	bf 08 00 00 00       	mov    edi,0x8
c00107a2:	56                   	push   esi
c00107a3:	53                   	push   ebx
c00107a4:	83 ec 18             	sub    esp,0x18
c00107a7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00107ab:	68 ea 03 02 c0       	push   0xc00203ea
c00107b0:	e8 51 9e ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00107b5:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00107bc:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00107c2:	83 c4 10             	add    esp,0x10
c00107c5:	31 c9                	xor    ecx,ecx
c00107c7:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00107cb:	99                   	cdq    
c00107cc:	f7 ff                	idiv   edi
c00107ce:	8d 42 24             	lea    eax,[edx+0x24]
c00107d1:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00107d5:	85 f6                	test   esi,esi
c00107d7:	75 1a                	jne    c00107f3 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00107d9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00107dd:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00107e1:	50                   	push   eax
c00107e2:	50                   	push   eax
c00107e3:	52                   	push   edx
c00107e4:	68 fb 03 02 c0       	push   0xc00203fb
c00107e9:	e8 18 9e ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00107ee:	83 c4 10             	add    esp,0x10
c00107f1:	eb 1b                	jmp    c001080e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00107f3:	41                   	inc    ecx
c00107f4:	83 f9 08             	cmp    ecx,0x8
c00107f7:	75 ce                	jne    c00107c7 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00107f9:	83 ec 0c             	sub    esp,0xc
c00107fc:	be 01 00 00 00       	mov    esi,0x1
c0010801:	68 1c 04 02 c0       	push   0xc002041c
c0010806:	e8 fb 9d ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001080b:	83 c4 10             	add    esp,0x10
c001080e:	83 c4 0c             	add    esp,0xc
c0010811:	89 f0                	mov    eax,esi
c0010813:	5b                   	pop    ebx
c0010814:	5e                   	pop    esi
c0010815:	5f                   	pop    edi
c0010816:	5d                   	pop    ebp
c0010817:	c3                   	ret    

c0010818 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010818:	55                   	push   ebp
c0010819:	57                   	push   edi
c001081a:	56                   	push   esi
c001081b:	53                   	push   ebx
c001081c:	51                   	push   ecx
c001081d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010821:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010828:	0f 84 af 00 00 00    	je     c00108dd <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c001082e:	31 c9                	xor    ecx,ecx
c0010830:	bf 08 00 00 00       	mov    edi,0x8
c0010835:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001083b:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001083e:	99                   	cdq    
c001083f:	f7 ff                	idiv   edi
c0010841:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010848:	85 ed                	test   ebp,ebp
c001084a:	0f 84 9e 00 00 00    	je     c00108ee <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010850:	89 e9                	mov    ecx,ebp
c0010852:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010858:	bf 01 00 00 00       	mov    edi,0x1
c001085d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010860:	d3 e7                	shl    edi,cl
c0010862:	31 c9                	xor    ecx,ecx
c0010864:	b8 01 00 00 00       	mov    eax,0x1
c0010869:	d3 e0                	shl    eax,cl
c001086b:	85 04 24             	test   DWORD PTR [esp],eax
c001086e:	74 06                	je     c0010876 <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c0010870:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010874:	75 67                	jne    c00108dd <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010876:	41                   	inc    ecx
c0010877:	83 f9 11             	cmp    ecx,0x11
c001087a:	75 e8                	jne    c0010864 <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c001087c:	46                   	inc    esi
c001087d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010880:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010886:	09 f8                	or     eax,edi
c0010888:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010893:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010899:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00108a0:	31 c0                	xor    eax,eax
c00108a2:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00108aa:	74 09                	je     c00108b5 <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c00108ac:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00108b3:	eb 06                	jmp    c00108bb <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c00108b5:	40                   	inc    eax
c00108b6:	83 f8 08             	cmp    eax,0x8
c00108b9:	75 e7                	jne    c00108a2 <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c00108bb:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00108be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00108c2:	83 fd 09             	cmp    ebp,0x9
c00108c5:	89 2a                	mov    DWORD PTR [edx],ebp
c00108c7:	75 07                	jne    c00108d0 <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c00108c9:	b8 a8 06 01 c0       	mov    eax,0xc00106a8
c00108ce:	eb 31                	jmp    c0010901 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00108d0:	83 f8 01             	cmp    eax,0x1
c00108d3:	75 0c                	jne    c00108e1 <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c00108d5:	f7 d7                	not    edi
c00108d7:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00108dd:	31 c0                	xor    eax,eax
c00108df:	eb 20                	jmp    c0010901 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00108e1:	85 c0                	test   eax,eax
c00108e3:	75 1c                	jne    c0010901 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00108e5:	8b 04 ad e0 17 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffde820]
c00108ec:	eb 13                	jmp    c0010901 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00108ee:	46                   	inc    esi
c00108ef:	41                   	inc    ecx
c00108f0:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00108f6:	83 f9 08             	cmp    ecx,0x8
c00108f9:	0f 85 36 ff ff ff    	jne    c0010835 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c00108ff:	eb dc                	jmp    c00108dd <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010901:	5a                   	pop    edx
c0010902:	5b                   	pop    ebx
c0010903:	5e                   	pop    esi
c0010904:	5f                   	pop    edi
c0010905:	5d                   	pop    ebp
c0010906:	c3                   	ret    

c0010907 <KiCheckSignalZ>:
c0010907:	83 ec 10             	sub    esp,0x10
c001090a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001090e:	50                   	push   eax
c001090f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010914:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010917:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001091d:	e8 f6 fe ff ff       	call   c0010818 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010922:	5a                   	pop    edx
c0010923:	31 d2                	xor    edx,edx
c0010925:	59                   	pop    ecx
c0010926:	85 c0                	test   eax,eax
c0010928:	74 19                	je     c0010943 <KiCheckSignalZ+0x3c>
c001092a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010930:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010933:	89 02                	mov    DWORD PTR [edx],eax
c0010935:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c001093c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010940:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010943:	89 d0                	mov    eax,edx
c0010945:	83 c4 10             	add    esp,0x10
c0010948:	c3                   	ret    

c0010949 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010949:	56                   	push   esi
c001094a:	53                   	push   ebx
c001094b:	bb 01 00 00 00       	mov    ebx,0x1
c0010950:	52                   	push   edx
c0010951:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010955:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010959:	d3 e3                	shl    ebx,cl
c001095b:	83 f9 10             	cmp    ecx,0x10
c001095e:	7f 08                	jg     c0010968 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010960:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010966:	75 10                	jne    c0010978 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010968:	83 ec 0c             	sub    esp,0xc
c001096b:	68 2d 04 02 c0       	push   0xc002042d
c0010970:	e8 52 fa ff ff       	call   c00103c7 <KePanic(char const*)>
c0010975:	83 c4 10             	add    esp,0x10
c0010978:	f7 d3                	not    ebx
c001097a:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010980:	58                   	pop    eax
c0010981:	5b                   	pop    ebx
c0010982:	5e                   	pop    esi
c0010983:	c3                   	ret    

c0010984 <KiFinishSignalZ>:
c0010984:	53                   	push   ebx
c0010985:	83 ec 10             	sub    esp,0x10
c0010988:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001098c:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001098f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010994:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010997:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001099d:	e8 a7 ff ff ff       	call   c0010949 <KeCompleteSignal(SigHandlerBlock*, int)>
c00109a2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00109a8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00109af:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00109b6:	83 c4 18             	add    esp,0x18
c00109b9:	5b                   	pop    ebx
c00109ba:	c3                   	ret    

c00109bb <SysSeekDir(regs*)>:
c00109bb:	31 c0                	xor    eax,eax
c00109bd:	31 d2                	xor    edx,edx
c00109bf:	c3                   	ret    

c00109c0 <SysTellDir(regs*)>:
c00109c0:	31 c0                	xor    eax,eax
c00109c2:	31 d2                	xor    edx,edx
c00109c4:	c3                   	ret    

c00109c5 <SysVerify(regs*)>:
c00109c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109c9:	31 d2                	xor    edx,edx
c00109cb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109ce:	c3                   	ret    

c00109cf <SysGetArgc(regs*)>:
c00109cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109d7:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00109dd:	99                   	cdq    
c00109de:	c3                   	ret    

c00109df <SysTTYName(regs*)>:
c00109df:	b8 01 00 00 00       	mov    eax,0x1
c00109e4:	31 d2                	xor    edx,edx
c00109e6:	c3                   	ret    

c00109e7 <SysFormatDisk(regs*)>:
c00109e7:	56                   	push   esi
c00109e8:	53                   	push   ebx
c00109e9:	50                   	push   eax
c00109ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00109ee:	8b 1d b4 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb4
c00109f4:	eb 28                	jmp    c0010a1e <SysFormatDisk(regs*)+0x37>
c00109f6:	83 ec 0c             	sub    esp,0xc
c00109f9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00109fc:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00109ff:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010a01:	51                   	push   ecx
c0010a02:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010a05:	51                   	push   ecx
c0010a06:	50                   	push   eax
c0010a07:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0010a0e:	50                   	push   eax
c0010a0f:	53                   	push   ebx
c0010a10:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010a13:	83 c4 20             	add    esp,0x20
c0010a16:	83 f8 08             	cmp    eax,0x8
c0010a19:	75 12                	jne    c0010a2d <SysFormatDisk(regs*)+0x46>
c0010a1b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010a1e:	85 db                	test   ebx,ebx
c0010a20:	75 d4                	jne    c00109f6 <SysFormatDisk(regs*)+0xf>
c0010a22:	59                   	pop    ecx
c0010a23:	b8 03 00 00 00       	mov    eax,0x3
c0010a28:	31 d2                	xor    edx,edx
c0010a2a:	5b                   	pop    ebx
c0010a2b:	5e                   	pop    esi
c0010a2c:	c3                   	ret    
c0010a2d:	85 c0                	test   eax,eax
c0010a2f:	74 1b                	je     c0010a4c <SysFormatDisk(regs*)+0x65>
c0010a31:	83 f8 09             	cmp    eax,0x9
c0010a34:	74 0b                	je     c0010a41 <SysFormatDisk(regs*)+0x5a>
c0010a36:	59                   	pop    ecx
c0010a37:	b8 02 00 00 00       	mov    eax,0x2
c0010a3c:	31 d2                	xor    edx,edx
c0010a3e:	5b                   	pop    ebx
c0010a3f:	5e                   	pop    esi
c0010a40:	c3                   	ret    
c0010a41:	59                   	pop    ecx
c0010a42:	b8 01 00 00 00       	mov    eax,0x1
c0010a47:	31 d2                	xor    edx,edx
c0010a49:	5b                   	pop    ebx
c0010a4a:	5e                   	pop    esi
c0010a4b:	c3                   	ret    
c0010a4c:	59                   	pop    ecx
c0010a4d:	31 c0                	xor    eax,eax
c0010a4f:	31 d2                	xor    edx,edx
c0010a51:	5b                   	pop    ebx
c0010a52:	5e                   	pop    esi
c0010a53:	c3                   	ret    

c0010a54 <SysSetDiskVolumeLabel(regs*)>:
c0010a54:	56                   	push   esi
c0010a55:	53                   	push   ebx
c0010a56:	53                   	push   ebx
c0010a57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010a5b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010a5e:	83 f8 19             	cmp    eax,0x19
c0010a61:	77 2d                	ja     c0010a90 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010a63:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0010a6a:	85 c9                	test   ecx,ecx
c0010a6c:	74 22                	je     c0010a90 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010a6e:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010a71:	85 db                	test   ebx,ebx
c0010a73:	74 1b                	je     c0010a90 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010a75:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010a7b:	85 d2                	test   edx,edx
c0010a7d:	74 11                	je     c0010a90 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010a7f:	8b 32                	mov    esi,DWORD PTR [edx]
c0010a81:	53                   	push   ebx
c0010a82:	50                   	push   eax
c0010a83:	51                   	push   ecx
c0010a84:	52                   	push   edx
c0010a85:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010a88:	83 c4 10             	add    esp,0x10
c0010a8b:	99                   	cdq    
c0010a8c:	59                   	pop    ecx
c0010a8d:	5b                   	pop    ebx
c0010a8e:	5e                   	pop    esi
c0010a8f:	c3                   	ret    
c0010a90:	59                   	pop    ecx
c0010a91:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010a96:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a9b:	5b                   	pop    ebx
c0010a9c:	5e                   	pop    esi
c0010a9d:	c3                   	ret    

c0010a9e <SysGetDiskVolumeLabel(regs*)>:
c0010a9e:	57                   	push   edi
c0010a9f:	56                   	push   esi
c0010aa0:	53                   	push   ebx
c0010aa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aa5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010aa8:	83 fa 19             	cmp    edx,0x19
c0010aab:	77 38                	ja     c0010ae5 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010aad:	8b 0c 95 20 64 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd9be0]
c0010ab4:	85 c9                	test   ecx,ecx
c0010ab6:	74 2d                	je     c0010ae5 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010ab8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010abb:	85 db                	test   ebx,ebx
c0010abd:	74 26                	je     c0010ae5 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010abf:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010ac2:	85 f6                	test   esi,esi
c0010ac4:	74 1f                	je     c0010ae5 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010ac6:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010acc:	85 c0                	test   eax,eax
c0010ace:	74 15                	je     c0010ae5 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010ad0:	83 ec 0c             	sub    esp,0xc
c0010ad3:	8b 38                	mov    edi,DWORD PTR [eax]
c0010ad5:	56                   	push   esi
c0010ad6:	53                   	push   ebx
c0010ad7:	52                   	push   edx
c0010ad8:	51                   	push   ecx
c0010ad9:	50                   	push   eax
c0010ada:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010add:	83 c4 20             	add    esp,0x20
c0010ae0:	99                   	cdq    
c0010ae1:	5b                   	pop    ebx
c0010ae2:	5e                   	pop    esi
c0010ae3:	5f                   	pop    edi
c0010ae4:	c3                   	ret    
c0010ae5:	5b                   	pop    ebx
c0010ae6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010aeb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010af0:	5e                   	pop    esi
c0010af1:	5f                   	pop    edi
c0010af2:	c3                   	ret    

c0010af3 <SysShutdown(regs*)>:
c0010af3:	83 ec 0c             	sub    esp,0xc
c0010af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010afa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010afd:	85 c0                	test   eax,eax
c0010aff:	74 18                	je     c0010b19 <SysShutdown(regs*)+0x26>
c0010b01:	83 f8 01             	cmp    eax,0x1
c0010b04:	74 38                	je     c0010b3e <SysShutdown(regs*)+0x4b>
c0010b06:	83 f8 02             	cmp    eax,0x2
c0010b09:	74 24                	je     c0010b2f <SysShutdown(regs*)+0x3c>
c0010b0b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b10:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b15:	83 c4 0c             	add    esp,0xc
c0010b18:	c3                   	ret    
c0010b19:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010b1e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b20:	6a 00                	push   0x0
c0010b22:	6a 00                	push   0x0
c0010b24:	6a 00                	push   0x0
c0010b26:	50                   	push   eax
c0010b27:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010b2a:	83 c4 10             	add    esp,0x10
c0010b2d:	eb dc                	jmp    c0010b0b <SysShutdown(regs*)+0x18>
c0010b2f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010b34:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b36:	6a 00                	push   0x0
c0010b38:	6a 00                	push   0x0
c0010b3a:	6a 01                	push   0x1
c0010b3c:	eb e8                	jmp    c0010b26 <SysShutdown(regs*)+0x33>
c0010b3e:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c0010b43:	85 c0                	test   eax,eax
c0010b45:	74 02                	je     c0010b49 <SysShutdown(regs*)+0x56>
c0010b47:	ff d0                	call   eax
c0010b49:	31 c0                	xor    eax,eax
c0010b4b:	31 d2                	xor    edx,edx
c0010b4d:	83 c4 0c             	add    esp,0xc
c0010b50:	c3                   	ret    

c0010b51 <SysRealpath(regs*)>:
c0010b51:	83 ec 0c             	sub    esp,0xc
c0010b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b58:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010b5b:	85 d2                	test   edx,edx
c0010b5d:	74 07                	je     c0010b66 <SysRealpath(regs*)+0x15>
c0010b5f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010b62:	85 c0                	test   eax,eax
c0010b64:	75 0b                	jne    c0010b71 <SysRealpath(regs*)+0x20>
c0010b66:	b8 01 00 00 00       	mov    eax,0x1
c0010b6b:	31 d2                	xor    edx,edx
c0010b6d:	83 c4 0c             	add    esp,0xc
c0010b70:	c3                   	ret    
c0010b71:	51                   	push   ecx
c0010b72:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010b78:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010b7b:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010b81:	51                   	push   ecx
c0010b82:	52                   	push   edx
c0010b83:	50                   	push   eax
c0010b84:	e8 49 9e ff ff       	call   c000a9d2 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010b89:	83 c4 10             	add    esp,0x10
c0010b8c:	31 c0                	xor    eax,eax
c0010b8e:	31 d2                	xor    edx,edx
c0010b90:	83 c4 0c             	add    esp,0xc
c0010b93:	c3                   	ret    

c0010b94 <SysReadDir(regs*)>:
c0010b94:	53                   	push   ebx
c0010b95:	83 ec 18             	sub    esp,0x18
c0010b98:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b9c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b9f:	83 f8 02             	cmp    eax,0x2
c0010ba2:	76 61                	jbe    c0010c05 <SysReadDir(regs*)+0x71>
c0010ba4:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010bab:	77 49                	ja     c0010bf6 <SysReadDir(regs*)+0x62>
c0010bad:	83 ec 0c             	sub    esp,0xc
c0010bb0:	50                   	push   eax
c0010bb1:	e8 3d 86 ff ff       	call   c00091f3 <getFromFileDescriptor(int)>
c0010bb6:	83 c4 10             	add    esp,0x10
c0010bb9:	85 c0                	test   eax,eax
c0010bbb:	74 39                	je     c0010bf6 <SysReadDir(regs*)+0x62>
c0010bbd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010bc5:	83 ec 0c             	sub    esp,0xc
c0010bc8:	8b 10                	mov    edx,DWORD PTR [eax]
c0010bca:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010bce:	51                   	push   ecx
c0010bcf:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010bd2:	51                   	push   ecx
c0010bd3:	6a 00                	push   0x0
c0010bd5:	68 10 01 00 00       	push   0x110
c0010bda:	50                   	push   eax
c0010bdb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010bde:	83 c4 20             	add    esp,0x20
c0010be1:	85 c0                	test   eax,eax
c0010be3:	74 29                	je     c0010c0e <SysReadDir(regs*)+0x7a>
c0010be5:	83 f8 07             	cmp    eax,0x7
c0010be8:	74 1b                	je     c0010c05 <SysReadDir(regs*)+0x71>
c0010bea:	b8 02 00 00 00       	mov    eax,0x2
c0010bef:	31 d2                	xor    edx,edx
c0010bf1:	83 c4 18             	add    esp,0x18
c0010bf4:	5b                   	pop    ebx
c0010bf5:	c3                   	ret    
c0010bf6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bfb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c00:	83 c4 18             	add    esp,0x18
c0010c03:	5b                   	pop    ebx
c0010c04:	c3                   	ret    
c0010c05:	b8 01 00 00 00       	mov    eax,0x1
c0010c0a:	31 d2                	xor    edx,edx
c0010c0c:	eb e3                	jmp    c0010bf1 <SysReadDir(regs*)+0x5d>
c0010c0e:	31 c0                	xor    eax,eax
c0010c10:	31 d2                	xor    edx,edx
c0010c12:	eb dd                	jmp    c0010bf1 <SysReadDir(regs*)+0x5d>

c0010c14 <SysIsATTY(regs*)>:
c0010c14:	83 ec 0c             	sub    esp,0xc
c0010c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c1b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010c1e:	83 f8 02             	cmp    eax,0x2
c0010c21:	76 07                	jbe    c0010c2a <SysIsATTY(regs*)+0x16>
c0010c23:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010c28:	75 28                	jne    c0010c52 <SysIsATTY(regs*)+0x3e>
c0010c2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c2f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c32:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010c38:	85 c0                	test   eax,eax
c0010c3a:	74 26                	je     c0010c62 <SysIsATTY(regs*)+0x4e>
c0010c3c:	83 ec 0c             	sub    esp,0xc
c0010c3f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c41:	50                   	push   eax
c0010c42:	ff 12                	call   DWORD PTR [edx]
c0010c44:	31 d2                	xor    edx,edx
c0010c46:	25 ff 00 00 00       	and    eax,0xff
c0010c4b:	83 c4 10             	add    esp,0x10
c0010c4e:	83 c4 0c             	add    esp,0xc
c0010c51:	c3                   	ret    
c0010c52:	83 ec 0c             	sub    esp,0xc
c0010c55:	50                   	push   eax
c0010c56:	e8 98 85 ff ff       	call   c00091f3 <getFromFileDescriptor(int)>
c0010c5b:	83 c4 10             	add    esp,0x10
c0010c5e:	85 c0                	test   eax,eax
c0010c60:	75 da                	jne    c0010c3c <SysIsATTY(regs*)+0x28>
c0010c62:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c67:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c6c:	83 c4 0c             	add    esp,0xc
c0010c6f:	c3                   	ret    

c0010c70 <SysSeek(regs*)>:
c0010c70:	53                   	push   ebx
c0010c71:	83 ec 08             	sub    esp,0x8
c0010c74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c78:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c7b:	8d 50 fd             	lea    edx,[eax-0x3]
c0010c7e:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010c84:	77 34                	ja     c0010cba <SysSeek(regs*)+0x4a>
c0010c86:	83 ec 0c             	sub    esp,0xc
c0010c89:	50                   	push   eax
c0010c8a:	e8 64 85 ff ff       	call   c00091f3 <getFromFileDescriptor(int)>
c0010c8f:	83 c4 0c             	add    esp,0xc
c0010c92:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010c95:	31 db                	xor    ebx,ebx
c0010c97:	53                   	push   ebx
c0010c98:	51                   	push   ecx
c0010c99:	50                   	push   eax
c0010c9a:	e8 5b a0 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0010c9f:	83 c4 10             	add    esp,0x10
c0010ca2:	85 c0                	test   eax,eax
c0010ca4:	0f 95 c0             	setne  al
c0010ca7:	31 d2                	xor    edx,edx
c0010ca9:	25 ff 00 00 00       	and    eax,0xff
c0010cae:	f7 d8                	neg    eax
c0010cb0:	83 d2 00             	adc    edx,0x0
c0010cb3:	83 c4 08             	add    esp,0x8
c0010cb6:	f7 da                	neg    edx
c0010cb8:	5b                   	pop    ebx
c0010cb9:	c3                   	ret    
c0010cba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010cbf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010cc4:	83 c4 08             	add    esp,0x8
c0010cc7:	5b                   	pop    ebx
c0010cc8:	c3                   	ret    

c0010cc9 <SysTell(regs*)>:
c0010cc9:	53                   	push   ebx
c0010cca:	83 ec 08             	sub    esp,0x8
c0010ccd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cd1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010cd4:	83 f8 02             	cmp    eax,0x2
c0010cd7:	76 50                	jbe    c0010d29 <SysTell(regs*)+0x60>
c0010cd9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010cde:	76 19                	jbe    c0010cf9 <SysTell(regs*)+0x30>
c0010ce0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010ce3:	31 d2                	xor    edx,edx
c0010ce5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010ceb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010cf2:	31 c0                	xor    eax,eax
c0010cf4:	83 c4 08             	add    esp,0x8
c0010cf7:	5b                   	pop    ebx
c0010cf8:	c3                   	ret    
c0010cf9:	83 ec 0c             	sub    esp,0xc
c0010cfc:	50                   	push   eax
c0010cfd:	e8 f1 84 ff ff       	call   c00091f3 <getFromFileDescriptor(int)>
c0010d02:	5a                   	pop    edx
c0010d03:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010d06:	59                   	pop    ecx
c0010d07:	53                   	push   ebx
c0010d08:	50                   	push   eax
c0010d09:	e8 42 a0 ff ff       	call   c000ad50 <File::tell(unsigned long long*)>
c0010d0e:	83 c4 10             	add    esp,0x10
c0010d11:	85 c0                	test   eax,eax
c0010d13:	0f 95 c0             	setne  al
c0010d16:	31 d2                	xor    edx,edx
c0010d18:	25 ff 00 00 00       	and    eax,0xff
c0010d1d:	f7 d8                	neg    eax
c0010d1f:	83 d2 00             	adc    edx,0x0
c0010d22:	83 c4 08             	add    esp,0x8
c0010d25:	f7 da                	neg    edx
c0010d27:	5b                   	pop    ebx
c0010d28:	c3                   	ret    
c0010d29:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d2e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d33:	83 c4 08             	add    esp,0x8
c0010d36:	5b                   	pop    ebx
c0010d37:	c3                   	ret    

c0010d38 <SysSize(regs*)>:
c0010d38:	53                   	push   ebx
c0010d39:	83 ec 18             	sub    esp,0x18
c0010d3c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010d40:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d43:	83 f8 02             	cmp    eax,0x2
c0010d46:	76 56                	jbe    c0010d9e <SysSize(regs*)+0x66>
c0010d48:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d4d:	76 19                	jbe    c0010d68 <SysSize(regs*)+0x30>
c0010d4f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010d52:	31 d2                	xor    edx,edx
c0010d54:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010d5a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010d61:	31 c0                	xor    eax,eax
c0010d63:	83 c4 18             	add    esp,0x18
c0010d66:	5b                   	pop    ebx
c0010d67:	c3                   	ret    
c0010d68:	83 ec 0c             	sub    esp,0xc
c0010d6b:	50                   	push   eax
c0010d6c:	e8 82 84 ff ff       	call   c00091f3 <getFromFileDescriptor(int)>
c0010d71:	83 c4 0c             	add    esp,0xc
c0010d74:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010d78:	52                   	push   edx
c0010d79:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010d7c:	52                   	push   edx
c0010d7d:	50                   	push   eax
c0010d7e:	e8 65 a1 ff ff       	call   c000aee8 <File::stat(unsigned long long*, bool*)>
c0010d83:	83 c4 10             	add    esp,0x10
c0010d86:	85 c0                	test   eax,eax
c0010d88:	0f 95 c0             	setne  al
c0010d8b:	31 d2                	xor    edx,edx
c0010d8d:	25 ff 00 00 00       	and    eax,0xff
c0010d92:	f7 d8                	neg    eax
c0010d94:	83 d2 00             	adc    edx,0x0
c0010d97:	83 c4 18             	add    esp,0x18
c0010d9a:	f7 da                	neg    edx
c0010d9c:	5b                   	pop    ebx
c0010d9d:	c3                   	ret    
c0010d9e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010da3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010da8:	83 c4 18             	add    esp,0x18
c0010dab:	5b                   	pop    ebx
c0010dac:	c3                   	ret    

c0010dad <SysSizeFromFilename(regs*)>:
c0010dad:	57                   	push   edi
c0010dae:	56                   	push   esi
c0010daf:	53                   	push   ebx
c0010db0:	83 ec 20             	sub    esp,0x20
c0010db3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010db7:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010dba:	83 fb 02             	cmp    ebx,0x2
c0010dbd:	0f 86 8c 00 00 00    	jbe    c0010e4f <SysSizeFromFilename(regs*)+0xa2>
c0010dc3:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010dc9:	76 1b                	jbe    c0010de6 <SysSizeFromFilename(regs*)+0x39>
c0010dcb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010dce:	31 d2                	xor    edx,edx
c0010dd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010dd6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ddd:	83 c4 20             	add    esp,0x20
c0010de0:	31 c0                	xor    eax,eax
c0010de2:	5b                   	pop    ebx
c0010de3:	5e                   	pop    esi
c0010de4:	5f                   	pop    edi
c0010de5:	c3                   	ret    
c0010de6:	83 ec 0c             	sub    esp,0xc
c0010de9:	68 14 01 00 00       	push   0x114
c0010dee:	e8 72 6a ff ff       	call   c0007865 <malloc>
c0010df3:	83 c4 0c             	add    esp,0xc
c0010df6:	89 c7                	mov    edi,eax
c0010df8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dfd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e00:	50                   	push   eax
c0010e01:	53                   	push   ebx
c0010e02:	57                   	push   edi
c0010e03:	e8 74 9d ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c0010e08:	83 c4 0c             	add    esp,0xc
c0010e0b:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010e0f:	50                   	push   eax
c0010e10:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010e13:	52                   	push   edx
c0010e14:	57                   	push   edi
c0010e15:	e8 ce a0 ff ff       	call   c000aee8 <File::stat(unsigned long long*, bool*)>
c0010e1a:	83 c4 10             	add    esp,0x10
c0010e1d:	85 ff                	test   edi,edi
c0010e1f:	74 14                	je     c0010e35 <SysSizeFromFilename(regs*)+0x88>
c0010e21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e25:	8b 17                	mov    edx,DWORD PTR [edi]
c0010e27:	83 ec 0c             	sub    esp,0xc
c0010e2a:	57                   	push   edi
c0010e2b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010e2e:	83 c4 10             	add    esp,0x10
c0010e31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e35:	85 c0                	test   eax,eax
c0010e37:	0f 95 c0             	setne  al
c0010e3a:	31 d2                	xor    edx,edx
c0010e3c:	25 ff 00 00 00       	and    eax,0xff
c0010e41:	f7 d8                	neg    eax
c0010e43:	83 d2 00             	adc    edx,0x0
c0010e46:	83 c4 20             	add    esp,0x20
c0010e49:	f7 da                	neg    edx
c0010e4b:	5b                   	pop    ebx
c0010e4c:	5e                   	pop    esi
c0010e4d:	5f                   	pop    edi
c0010e4e:	c3                   	ret    
c0010e4f:	83 c4 20             	add    esp,0x20
c0010e52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e57:	5b                   	pop    ebx
c0010e58:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e5d:	5e                   	pop    esi
c0010e5e:	5f                   	pop    edi
c0010e5f:	c3                   	ret    

c0010e60 <SysClose(regs*)>:
c0010e60:	53                   	push   ebx
c0010e61:	83 ec 08             	sub    esp,0x8
c0010e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e68:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e6b:	83 f8 02             	cmp    eax,0x2
c0010e6e:	76 41                	jbe    c0010eb1 <SysClose(regs*)+0x51>
c0010e70:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010e76:	83 fa 01             	cmp    edx,0x1
c0010e79:	76 2d                	jbe    c0010ea8 <SysClose(regs*)+0x48>
c0010e7b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010e80:	77 2f                	ja     c0010eb1 <SysClose(regs*)+0x51>
c0010e82:	83 ec 0c             	sub    esp,0xc
c0010e85:	50                   	push   eax
c0010e86:	e8 68 83 ff ff       	call   c00091f3 <getFromFileDescriptor(int)>
c0010e8b:	89 c3                	mov    ebx,eax
c0010e8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e90:	e8 05 9e ff ff       	call   c000ac9a <File::close()>
c0010e95:	83 c4 10             	add    esp,0x10
c0010e98:	85 db                	test   ebx,ebx
c0010e9a:	74 0c                	je     c0010ea8 <SysClose(regs*)+0x48>
c0010e9c:	83 ec 0c             	sub    esp,0xc
c0010e9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ea1:	53                   	push   ebx
c0010ea2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010ea5:	83 c4 10             	add    esp,0x10
c0010ea8:	31 c0                	xor    eax,eax
c0010eaa:	31 d2                	xor    edx,edx
c0010eac:	83 c4 08             	add    esp,0x8
c0010eaf:	5b                   	pop    ebx
c0010eb0:	c3                   	ret    
c0010eb1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010eb6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ebb:	83 c4 08             	add    esp,0x8
c0010ebe:	5b                   	pop    ebx
c0010ebf:	c3                   	ret    

c0010ec0 <SysOpenDir(regs*)>:
c0010ec0:	56                   	push   esi
c0010ec1:	53                   	push   ebx
c0010ec2:	50                   	push   eax
c0010ec3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ec7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010eca:	85 c0                	test   eax,eax
c0010ecc:	74 5b                	je     c0010f29 <SysOpenDir(regs*)+0x69>
c0010ece:	83 ec 0c             	sub    esp,0xc
c0010ed1:	68 14 01 00 00       	push   0x114
c0010ed6:	e8 8a 69 ff ff       	call   c0007865 <malloc>
c0010edb:	83 c4 0c             	add    esp,0xc
c0010ede:	89 c6                	mov    esi,eax
c0010ee0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ee5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ee8:	50                   	push   eax
c0010ee9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010eec:	50                   	push   eax
c0010eed:	56                   	push   esi
c0010eee:	e8 b3 a1 ff ff       	call   c000b0a6 <Directory::Directory(char const*, Process*)>
c0010ef3:	83 c4 10             	add    esp,0x10
c0010ef6:	85 f6                	test   esi,esi
c0010ef8:	74 2f                	je     c0010f29 <SysOpenDir(regs*)+0x69>
c0010efa:	83 ec 0c             	sub    esp,0xc
c0010efd:	56                   	push   esi
c0010efe:	e8 63 a2 ff ff       	call   c000b166 <Directory::open()>
c0010f03:	83 c4 10             	add    esp,0x10
c0010f06:	85 c0                	test   eax,eax
c0010f08:	75 1f                	jne    c0010f29 <SysOpenDir(regs*)+0x69>
c0010f0a:	83 ec 0c             	sub    esp,0xc
c0010f0d:	56                   	push   esi
c0010f0e:	e8 eb 7f ff ff       	call   c0008efe <UnixFile::getFileDescriptor()>
c0010f13:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010f16:	83 c4 10             	add    esp,0x10
c0010f19:	89 02                	mov    DWORD PTR [edx],eax
c0010f1b:	c1 f8 1f             	sar    eax,0x1f
c0010f1e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010f21:	31 c0                	xor    eax,eax
c0010f23:	59                   	pop    ecx
c0010f24:	31 d2                	xor    edx,edx
c0010f26:	5b                   	pop    ebx
c0010f27:	5e                   	pop    esi
c0010f28:	c3                   	ret    
c0010f29:	59                   	pop    ecx
c0010f2a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f2f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f34:	5b                   	pop    ebx
c0010f35:	5e                   	pop    esi
c0010f36:	c3                   	ret    

c0010f37 <SysMakeDir(regs*)>:
c0010f37:	56                   	push   esi
c0010f38:	53                   	push   ebx
c0010f39:	83 ec 10             	sub    esp,0x10
c0010f3c:	68 14 01 00 00       	push   0x114
c0010f41:	e8 1f 69 ff ff       	call   c0007865 <malloc>
c0010f46:	83 c4 0c             	add    esp,0xc
c0010f49:	89 c3                	mov    ebx,eax
c0010f4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f50:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010f53:	56                   	push   esi
c0010f54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010f58:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010f5b:	50                   	push   eax
c0010f5c:	53                   	push   ebx
c0010f5d:	e8 44 a1 ff ff       	call   c000b0a6 <Directory::Directory(char const*, Process*)>
c0010f62:	83 c4 10             	add    esp,0x10
c0010f65:	85 db                	test   ebx,ebx
c0010f67:	74 2a                	je     c0010f93 <SysMakeDir(regs*)+0x5c>
c0010f69:	83 ec 0c             	sub    esp,0xc
c0010f6c:	53                   	push   ebx
c0010f6d:	e8 d4 a3 ff ff       	call   c000b346 <Directory::create()>
c0010f72:	89 c6                	mov    esi,eax
c0010f74:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f79:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f7c:	83 c4 10             	add    esp,0x10
c0010f7f:	31 c0                	xor    eax,eax
c0010f81:	59                   	pop    ecx
c0010f82:	85 f6                	test   esi,esi
c0010f84:	5b                   	pop    ebx
c0010f85:	0f 95 c0             	setne  al
c0010f88:	5e                   	pop    esi
c0010f89:	31 d2                	xor    edx,edx
c0010f8b:	f7 d8                	neg    eax
c0010f8d:	83 d2 00             	adc    edx,0x0
c0010f90:	f7 da                	neg    edx
c0010f92:	c3                   	ret    
c0010f93:	59                   	pop    ecx
c0010f94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f99:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f9e:	5b                   	pop    ebx
c0010f9f:	5e                   	pop    esi
c0010fa0:	c3                   	ret    

c0010fa1 <SysCloseDir(regs*)>:
c0010fa1:	53                   	push   ebx
c0010fa2:	83 ec 08             	sub    esp,0x8
c0010fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010fac:	8d 50 fd             	lea    edx,[eax-0x3]
c0010faf:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010fb5:	77 2f                	ja     c0010fe6 <SysCloseDir(regs*)+0x45>
c0010fb7:	83 ec 0c             	sub    esp,0xc
c0010fba:	50                   	push   eax
c0010fbb:	e8 33 82 ff ff       	call   c00091f3 <getFromFileDescriptor(int)>
c0010fc0:	89 c3                	mov    ebx,eax
c0010fc2:	89 04 24             	mov    DWORD PTR [esp],eax
c0010fc5:	e8 f8 a1 ff ff       	call   c000b1c2 <Directory::close()>
c0010fca:	83 c4 10             	add    esp,0x10
c0010fcd:	85 db                	test   ebx,ebx
c0010fcf:	74 0c                	je     c0010fdd <SysCloseDir(regs*)+0x3c>
c0010fd1:	83 ec 0c             	sub    esp,0xc
c0010fd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010fd6:	53                   	push   ebx
c0010fd7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010fda:	83 c4 10             	add    esp,0x10
c0010fdd:	31 c0                	xor    eax,eax
c0010fdf:	31 d2                	xor    edx,edx
c0010fe1:	83 c4 08             	add    esp,0x8
c0010fe4:	5b                   	pop    ebx
c0010fe5:	c3                   	ret    
c0010fe6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010feb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ff0:	83 c4 08             	add    esp,0x8
c0010ff3:	5b                   	pop    ebx
c0010ff4:	c3                   	ret    

c0010ff5 <SysWait(regs*)>:
c0010ff5:	83 ec 10             	sub    esp,0x10
c0010ff8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ffc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010fff:	52                   	push   edx
c0011000:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011003:	51                   	push   ecx
c0011004:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011007:	50                   	push   eax
c0011008:	e8 fb 3b 00 00       	call   c0014c08 <waitTask(int, int*, int)>
c001100d:	83 c4 1c             	add    esp,0x1c
c0011010:	99                   	cdq    
c0011011:	c3                   	ret    

c0011012 <SysNotImpl(regs*)>:
c0011012:	83 ec 18             	sub    esp,0x18
c0011015:	68 3e 04 02 c0       	push   0xc002043e
c001101a:	e8 a8 f3 ff ff       	call   c00103c7 <KePanic(char const*)>
c001101f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011024:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011029:	83 c4 1c             	add    esp,0x1c
c001102c:	c3                   	ret    

c001102d <SysPanic(regs*)>:
c001102d:	83 ec 18             	sub    esp,0x18
c0011030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011034:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011037:	50                   	push   eax
c0011038:	e8 8a f3 ff ff       	call   c00103c7 <KePanic(char const*)>
c001103d:	b8 01 00 00 00       	mov    eax,0x1
c0011042:	31 d2                	xor    edx,edx
c0011044:	83 c4 1c             	add    esp,0x1c
c0011047:	c3                   	ret    

c0011048 <SysRmdir(regs*)>:
c0011048:	56                   	push   esi
c0011049:	53                   	push   ebx
c001104a:	83 ec 20             	sub    esp,0x20
c001104d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011051:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011054:	68 14 01 00 00       	push   0x114
c0011059:	e8 07 68 ff ff       	call   c0007865 <malloc>
c001105e:	83 c4 0c             	add    esp,0xc
c0011061:	89 c3                	mov    ebx,eax
c0011063:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011068:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001106b:	50                   	push   eax
c001106c:	56                   	push   esi
c001106d:	53                   	push   ebx
c001106e:	e8 09 9b ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c0011073:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011076:	e8 39 9d ff ff       	call   c000adb4 <File::unlink()>
c001107b:	83 c4 10             	add    esp,0x10
c001107e:	85 db                	test   ebx,ebx
c0011080:	74 14                	je     c0011096 <SysRmdir(regs*)+0x4e>
c0011082:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011086:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011088:	83 ec 0c             	sub    esp,0xc
c001108b:	53                   	push   ebx
c001108c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001108f:	83 c4 10             	add    esp,0x10
c0011092:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011096:	85 c0                	test   eax,eax
c0011098:	0f 95 c0             	setne  al
c001109b:	31 d2                	xor    edx,edx
c001109d:	25 ff 00 00 00       	and    eax,0xff
c00110a2:	f7 d8                	neg    eax
c00110a4:	83 d2 00             	adc    edx,0x0
c00110a7:	83 c4 14             	add    esp,0x14
c00110aa:	f7 da                	neg    edx
c00110ac:	5b                   	pop    ebx
c00110ad:	5e                   	pop    esi
c00110ae:	c3                   	ret    

c00110af <SysUnlink(regs*)>:
c00110af:	56                   	push   esi
c00110b0:	53                   	push   ebx
c00110b1:	83 ec 20             	sub    esp,0x20
c00110b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00110b8:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00110bb:	68 14 01 00 00       	push   0x114
c00110c0:	e8 a0 67 ff ff       	call   c0007865 <malloc>
c00110c5:	83 c4 0c             	add    esp,0xc
c00110c8:	89 c3                	mov    ebx,eax
c00110ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110d2:	50                   	push   eax
c00110d3:	56                   	push   esi
c00110d4:	53                   	push   ebx
c00110d5:	e8 a2 9a ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c00110da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110dd:	e8 d2 9c ff ff       	call   c000adb4 <File::unlink()>
c00110e2:	83 c4 10             	add    esp,0x10
c00110e5:	85 db                	test   ebx,ebx
c00110e7:	74 14                	je     c00110fd <SysUnlink(regs*)+0x4e>
c00110e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110ed:	8b 13                	mov    edx,DWORD PTR [ebx]
c00110ef:	83 ec 0c             	sub    esp,0xc
c00110f2:	53                   	push   ebx
c00110f3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00110f6:	83 c4 10             	add    esp,0x10
c00110f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110fd:	85 c0                	test   eax,eax
c00110ff:	0f 95 c0             	setne  al
c0011102:	31 d2                	xor    edx,edx
c0011104:	25 ff 00 00 00       	and    eax,0xff
c0011109:	f7 d8                	neg    eax
c001110b:	83 d2 00             	adc    edx,0x0
c001110e:	83 c4 14             	add    esp,0x14
c0011111:	f7 da                	neg    edx
c0011113:	5b                   	pop    ebx
c0011114:	5e                   	pop    esi
c0011115:	c3                   	ret    

c0011116 <SysGetArgv(regs*)>:
c0011116:	83 ec 0c             	sub    esp,0xc
c0011119:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001111d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011120:	85 c0                	test   eax,eax
c0011122:	78 2c                	js     c0011150 <SysGetArgv(regs*)+0x3a>
c0011124:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001112a:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001112d:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011133:	7d 1b                	jge    c0011150 <SysGetArgv(regs*)+0x3a>
c0011135:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001113c:	85 c0                	test   eax,eax
c001113e:	74 18                	je     c0011158 <SysGetArgv(regs*)+0x42>
c0011140:	83 ec 08             	sub    esp,0x8
c0011143:	50                   	push   eax
c0011144:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011147:	50                   	push   eax
c0011148:	e8 a3 f4 fe ff       	call   c00005f0 <strcpy>
c001114d:	83 c4 10             	add    esp,0x10
c0011150:	31 c0                	xor    eax,eax
c0011152:	31 d2                	xor    edx,edx
c0011154:	83 c4 0c             	add    esp,0xc
c0011157:	c3                   	ret    
c0011158:	b8 01 00 00 00       	mov    eax,0x1
c001115d:	31 d2                	xor    edx,edx
c001115f:	83 c4 0c             	add    esp,0xc
c0011162:	c3                   	ret    

c0011163 <SysUSleep(regs*)>:
c0011163:	83 ec 1c             	sub    esp,0x1c
c0011166:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001116a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001116d:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011170:	6a 00                	push   0x0
c0011172:	6a 64                	push   0x64
c0011174:	52                   	push   edx
c0011175:	50                   	push   eax
c0011176:	e8 65 cb 00 00       	call   c001dce0 <__udivdi3>
c001117b:	83 c4 14             	add    esp,0x14
c001117e:	50                   	push   eax
c001117f:	e8 58 3b 00 00       	call   c0014cdc <milliTenthSleep(unsigned int)>
c0011184:	31 c0                	xor    eax,eax
c0011186:	31 d2                	xor    edx,edx
c0011188:	83 c4 1c             	add    esp,0x1c
c001118b:	c3                   	ret    

c001118c <SysSpawn(regs*)>:
c001118c:	56                   	push   esi
c001118d:	53                   	push   ebx
c001118e:	50                   	push   eax
c001118f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011193:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011196:	85 c0                	test   eax,eax
c0011198:	75 08                	jne    c00111a2 <SysSpawn(regs*)+0x16>
c001119a:	59                   	pop    ecx
c001119b:	31 c0                	xor    eax,eax
c001119d:	31 d2                	xor    edx,edx
c001119f:	5b                   	pop    ebx
c00111a0:	5e                   	pop    esi
c00111a1:	c3                   	ret    
c00111a2:	83 ec 0c             	sub    esp,0xc
c00111a5:	68 24 07 00 00       	push   0x724
c00111aa:	e8 b6 66 ff ff       	call   c0007865 <malloc>
c00111af:	83 c4 10             	add    esp,0x10
c00111b2:	89 c6                	mov    esi,eax
c00111b4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00111b7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00111ba:	85 c0                	test   eax,eax
c00111bc:	75 33                	jne    c00111f1 <SysSpawn(regs*)+0x65>
c00111be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111c6:	52                   	push   edx
c00111c7:	50                   	push   eax
c00111c8:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c00111cb:	53                   	push   ebx
c00111cc:	56                   	push   esi
c00111cd:	e8 8e 31 00 00       	call   c0014360 <Process::Process(char const*, Process*, char**)>
c00111d2:	83 c4 10             	add    esp,0x10
c00111d5:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00111dc:	75 bc                	jne    c001119a <SysSpawn(regs*)+0xe>
c00111de:	83 ec 0c             	sub    esp,0xc
c00111e1:	56                   	push   esi
c00111e2:	e8 b9 36 00 00       	call   c00148a0 <Process::createUserThread()>
c00111e7:	8b 06                	mov    eax,DWORD PTR [esi]
c00111e9:	83 c4 10             	add    esp,0x10
c00111ec:	99                   	cdq    
c00111ed:	59                   	pop    ecx
c00111ee:	5b                   	pop    ebx
c00111ef:	5e                   	pop    esi
c00111f0:	c3                   	ret    
c00111f1:	31 c0                	xor    eax,eax
c00111f3:	eb d1                	jmp    c00111c6 <SysSpawn(regs*)+0x3a>

c00111f5 <SysGetEnv(regs*)>:
c00111f5:	57                   	push   edi
c00111f6:	56                   	push   esi
c00111f7:	53                   	push   ebx
c00111f8:	83 ec 1c             	sub    esp,0x1c
c00111fb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00111ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011204:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011207:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001120a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001120d:	50                   	push   eax
c001120e:	e8 6c f0 ff ff       	call   c001027f <Krnl::getProcessTotalEnvCount(Process*)>
c0011213:	83 c4 10             	add    esp,0x10
c0011216:	39 c7                	cmp    edi,eax
c0011218:	7c 14                	jl     c001122e <SysGetEnv(regs*)+0x39>
c001121a:	85 f6                	test   esi,esi
c001121c:	75 0b                	jne    c0011229 <SysGetEnv(regs*)+0x34>
c001121e:	83 c4 10             	add    esp,0x10
c0011221:	31 c0                	xor    eax,eax
c0011223:	5b                   	pop    ebx
c0011224:	31 d2                	xor    edx,edx
c0011226:	5e                   	pop    esi
c0011227:	5f                   	pop    edi
c0011228:	c3                   	ret    
c0011229:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001122c:	eb f0                	jmp    c001121e <SysGetEnv(regs*)+0x29>
c001122e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011232:	52                   	push   edx
c0011233:	57                   	push   edi
c0011234:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001123a:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001123d:	51                   	push   ecx
c001123e:	50                   	push   eax
c001123f:	e8 5b f0 ff ff       	call   c001029f <Krnl::getProcessEnvPair(Process*, int)>
c0011244:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011247:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001124b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001124f:	83 c4 0c             	add    esp,0xc
c0011252:	85 db                	test   ebx,ebx
c0011254:	75 23                	jne    c0011279 <SysGetEnv(regs*)+0x84>
c0011256:	83 ec 0c             	sub    esp,0xc
c0011259:	50                   	push   eax
c001125a:	e8 d1 f2 fe ff       	call   c0000530 <strlen>
c001125f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011262:	89 c3                	mov    ebx,eax
c0011264:	e8 c7 f2 fe ff       	call   c0000530 <strlen>
c0011269:	31 d2                	xor    edx,edx
c001126b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001126f:	83 c4 10             	add    esp,0x10
c0011272:	83 c4 10             	add    esp,0x10
c0011275:	5b                   	pop    ebx
c0011276:	5e                   	pop    esi
c0011277:	5f                   	pop    edi
c0011278:	c3                   	ret    
c0011279:	83 ec 08             	sub    esp,0x8
c001127c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001127f:	50                   	push   eax
c0011280:	56                   	push   esi
c0011281:	e8 6a f3 fe ff       	call   c00005f0 <strcpy>
c0011286:	58                   	pop    eax
c0011287:	5a                   	pop    edx
c0011288:	68 58 04 02 c0       	push   0xc0020458
c001128d:	56                   	push   esi
c001128e:	e8 1d f5 fe ff       	call   c00007b0 <strcat>
c0011293:	59                   	pop    ecx
c0011294:	5b                   	pop    ebx
c0011295:	57                   	push   edi
c0011296:	56                   	push   esi
c0011297:	e8 14 f5 fe ff       	call   c00007b0 <strcat>
c001129c:	83 c4 10             	add    esp,0x10
c001129f:	e9 7a ff ff ff       	jmp    c001121e <SysGetEnv(regs*)+0x29>

c00112a4 <SysSetFatAttrib(regs*)>:
c00112a4:	57                   	push   edi
c00112a5:	56                   	push   esi
c00112a6:	53                   	push   ebx
c00112a7:	83 ec 1c             	sub    esp,0x1c
c00112aa:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00112ae:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00112b1:	68 14 01 00 00       	push   0x114
c00112b6:	e8 aa 65 ff ff       	call   c0007865 <malloc>
c00112bb:	83 c4 0c             	add    esp,0xc
c00112be:	89 c3                	mov    ebx,eax
c00112c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112c8:	50                   	push   eax
c00112c9:	57                   	push   edi
c00112ca:	53                   	push   ebx
c00112cb:	e8 ac 98 ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c00112d0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00112d3:	83 c4 0c             	add    esp,0xc
c00112d6:	0f b6 d4             	movzx  edx,ah
c00112d9:	25 ff 00 00 00       	and    eax,0xff
c00112de:	52                   	push   edx
c00112df:	50                   	push   eax
c00112e0:	53                   	push   ebx
c00112e1:	e8 68 9b ff ff       	call   c000ae4e <File::chfatattr(unsigned char, unsigned char)>
c00112e6:	83 c4 10             	add    esp,0x10
c00112e9:	85 db                	test   ebx,ebx
c00112eb:	74 14                	je     c0011301 <SysSetFatAttrib(regs*)+0x5d>
c00112ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00112f1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00112f3:	83 ec 0c             	sub    esp,0xc
c00112f6:	53                   	push   ebx
c00112f7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00112fa:	83 c4 10             	add    esp,0x10
c00112fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011301:	85 c0                	test   eax,eax
c0011303:	0f 95 c0             	setne  al
c0011306:	31 d2                	xor    edx,edx
c0011308:	25 ff 00 00 00       	and    eax,0xff
c001130d:	f7 d8                	neg    eax
c001130f:	83 d2 00             	adc    edx,0x0
c0011312:	83 c4 10             	add    esp,0x10
c0011315:	f7 da                	neg    edx
c0011317:	5b                   	pop    ebx
c0011318:	5e                   	pop    esi
c0011319:	5f                   	pop    edi
c001131a:	c3                   	ret    

c001131b <SysPipe(regs*)>:
c001131b:	57                   	push   edi
c001131c:	56                   	push   esi
c001131d:	53                   	push   ebx
c001131e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011322:	83 ec 0c             	sub    esp,0xc
c0011325:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011328:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001132b:	6a 20                	push   0x20
c001132d:	e8 33 65 ff ff       	call   c0007865 <malloc>
c0011332:	89 c3                	mov    ebx,eax
c0011334:	58                   	pop    eax
c0011335:	5a                   	pop    edx
c0011336:	68 00 50 00 00       	push   0x5000
c001133b:	53                   	push   ebx
c001133c:	e8 29 6e ff ff       	call   c000816a <Pipe::Pipe(int)>
c0011341:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011344:	e8 b5 7b ff ff       	call   c0008efe <UnixFile::getFileDescriptor()>
c0011349:	89 07                	mov    DWORD PTR [edi],eax
c001134b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001134e:	e8 ab 7b ff ff       	call   c0008efe <UnixFile::getFileDescriptor()>
c0011353:	83 c4 10             	add    esp,0x10
c0011356:	89 06                	mov    DWORD PTR [esi],eax
c0011358:	31 d2                	xor    edx,edx
c001135a:	5b                   	pop    ebx
c001135b:	31 c0                	xor    eax,eax
c001135d:	5e                   	pop    esi
c001135e:	5f                   	pop    edi
c001135f:	c3                   	ret    

c0011360 <SysGetUnixTime(regs*)>:
c0011360:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0011365:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001136b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001136f:	e9 16 a2 ff ff       	jmp    c000b58a <Clock::timeInSecondsLocal()>

c0011374 <string_ends_with(char const*, char const*)>:
c0011374:	57                   	push   edi
c0011375:	56                   	push   esi
c0011376:	53                   	push   ebx
c0011377:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001137b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001137f:	83 ec 0c             	sub    esp,0xc
c0011382:	53                   	push   ebx
c0011383:	e8 a8 f1 fe ff       	call   c0000530 <strlen>
c0011388:	89 3c 24             	mov    DWORD PTR [esp],edi
c001138b:	89 c6                	mov    esi,eax
c001138d:	e8 9e f1 fe ff       	call   c0000530 <strlen>
c0011392:	83 c4 10             	add    esp,0x10
c0011395:	39 c6                	cmp    esi,eax
c0011397:	7d 06                	jge    c001139f <string_ends_with(char const*, char const*)+0x2b>
c0011399:	5b                   	pop    ebx
c001139a:	31 c0                	xor    eax,eax
c001139c:	5e                   	pop    esi
c001139d:	5f                   	pop    edi
c001139e:	c3                   	ret    
c001139f:	83 ec 08             	sub    esp,0x8
c00113a2:	29 c6                	sub    esi,eax
c00113a4:	57                   	push   edi
c00113a5:	01 f3                	add    ebx,esi
c00113a7:	53                   	push   ebx
c00113a8:	e8 23 f3 fe ff       	call   c00006d0 <strcmp>
c00113ad:	83 c4 10             	add    esp,0x10
c00113b0:	85 c0                	test   eax,eax
c00113b2:	5b                   	pop    ebx
c00113b3:	0f 94 c0             	sete   al
c00113b6:	5e                   	pop    esi
c00113b7:	25 ff 00 00 00       	and    eax,0xff
c00113bc:	5f                   	pop    edi
c00113bd:	c3                   	ret    

c00113be <SysOpen(regs*)>:
c00113be:	56                   	push   esi
c00113bf:	53                   	push   ebx
c00113c0:	81 ec 04 01 00 00    	sub    esp,0x104
c00113c6:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00113cd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00113d0:	85 c9                	test   ecx,ecx
c00113d2:	0f 84 b9 01 00 00    	je     c0011591 <SysOpen(regs*)+0x1d3>
c00113d8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113db:	85 c0                	test   eax,eax
c00113dd:	0f 84 ae 01 00 00    	je     c0011591 <SysOpen(regs*)+0x1d3>
c00113e3:	52                   	push   edx
c00113e4:	68 5a 04 02 c0       	push   0xc002045a
c00113e9:	50                   	push   eax
c00113ea:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00113ee:	56                   	push   esi
c00113ef:	e8 de 95 ff ff       	call   c000a9d2 <Fs::standardiseFiles(char*, char const*, char const*)>
c00113f4:	89 34 24             	mov    DWORD PTR [esp],esi
c00113f7:	e8 34 f1 fe ff       	call   c0000530 <strlen>
c00113fc:	83 c4 10             	add    esp,0x10
c00113ff:	48                   	dec    eax
c0011400:	74 1d                	je     c001141f <SysOpen(regs*)+0x61>
c0011402:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011405:	eb 0f                	jmp    c0011416 <SysOpen(regs*)+0x58>
c0011407:	80 fa 3a             	cmp    dl,0x3a
c001140a:	74 0f                	je     c001141b <SysOpen(regs*)+0x5d>
c001140c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011410:	48                   	dec    eax
c0011411:	74 0c                	je     c001141f <SysOpen(regs*)+0x61>
c0011413:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011416:	80 fa 2e             	cmp    dl,0x2e
c0011419:	75 ec                	jne    c0011407 <SysOpen(regs*)+0x49>
c001141b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001141f:	83 ec 08             	sub    esp,0x8
c0011422:	68 5e 04 02 c0       	push   0xc002045e
c0011427:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001142a:	50                   	push   eax
c001142b:	e8 44 ff ff ff       	call   c0011374 <string_ends_with(char const*, char const*)>
c0011430:	83 c4 10             	add    esp,0x10
c0011433:	85 c0                	test   eax,eax
c0011435:	74 1d                	je     c0011454 <SysOpen(regs*)+0x96>
c0011437:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001143a:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011440:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011447:	81 c4 04 01 00 00    	add    esp,0x104
c001144d:	31 c0                	xor    eax,eax
c001144f:	31 d2                	xor    edx,edx
c0011451:	5b                   	pop    ebx
c0011452:	5e                   	pop    esi
c0011453:	c3                   	ret    
c0011454:	83 ec 08             	sub    esp,0x8
c0011457:	68 63 04 02 c0       	push   0xc0020463
c001145c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001145f:	50                   	push   eax
c0011460:	e8 0f ff ff ff       	call   c0011374 <string_ends_with(char const*, char const*)>
c0011465:	83 c4 10             	add    esp,0x10
c0011468:	85 c0                	test   eax,eax
c001146a:	75 cb                	jne    c0011437 <SysOpen(regs*)+0x79>
c001146c:	83 ec 08             	sub    esp,0x8
c001146f:	68 5f 04 02 c0       	push   0xc002045f
c0011474:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011477:	50                   	push   eax
c0011478:	e8 53 f2 fe ff       	call   c00006d0 <strcmp>
c001147d:	83 c4 10             	add    esp,0x10
c0011480:	85 c0                	test   eax,eax
c0011482:	74 b3                	je     c0011437 <SysOpen(regs*)+0x79>
c0011484:	83 ec 08             	sub    esp,0x8
c0011487:	68 5e 04 02 c0       	push   0xc002045e
c001148c:	56                   	push   esi
c001148d:	e8 e2 fe ff ff       	call   c0011374 <string_ends_with(char const*, char const*)>
c0011492:	83 c4 10             	add    esp,0x10
c0011495:	85 c0                	test   eax,eax
c0011497:	75 9e                	jne    c0011437 <SysOpen(regs*)+0x79>
c0011499:	83 ec 08             	sub    esp,0x8
c001149c:	68 68 04 02 c0       	push   0xc0020468
c00114a1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00114a4:	50                   	push   eax
c00114a5:	e8 ca fe ff ff       	call   c0011374 <string_ends_with(char const*, char const*)>
c00114aa:	83 c4 10             	add    esp,0x10
c00114ad:	85 c0                	test   eax,eax
c00114af:	0f 85 ef 00 00 00    	jne    c00115a4 <SysOpen(regs*)+0x1e6>
c00114b5:	83 ec 08             	sub    esp,0x8
c00114b8:	68 6d 04 02 c0       	push   0xc002046d
c00114bd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00114c0:	50                   	push   eax
c00114c1:	e8 ae fe ff ff       	call   c0011374 <string_ends_with(char const*, char const*)>
c00114c6:	83 c4 10             	add    esp,0x10
c00114c9:	85 c0                	test   eax,eax
c00114cb:	0f 85 d3 00 00 00    	jne    c00115a4 <SysOpen(regs*)+0x1e6>
c00114d1:	83 ec 08             	sub    esp,0x8
c00114d4:	68 69 04 02 c0       	push   0xc0020469
c00114d9:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00114dc:	51                   	push   ecx
c00114dd:	e8 ee f1 fe ff       	call   c00006d0 <strcmp>
c00114e2:	83 c4 10             	add    esp,0x10
c00114e5:	85 c0                	test   eax,eax
c00114e7:	0f 84 b7 00 00 00    	je     c00115a4 <SysOpen(regs*)+0x1e6>
c00114ed:	83 ec 08             	sub    esp,0x8
c00114f0:	68 68 04 02 c0       	push   0xc0020468
c00114f5:	56                   	push   esi
c00114f6:	e8 79 fe ff ff       	call   c0011374 <string_ends_with(char const*, char const*)>
c00114fb:	83 c4 10             	add    esp,0x10
c00114fe:	85 c0                	test   eax,eax
c0011500:	0f 85 9e 00 00 00    	jne    c00115a4 <SysOpen(regs*)+0x1e6>
c0011506:	83 ec 0c             	sub    esp,0xc
c0011509:	68 14 01 00 00       	push   0x114
c001150e:	e8 52 63 ff ff       	call   c0007865 <malloc>
c0011513:	83 c4 0c             	add    esp,0xc
c0011516:	89 c6                	mov    esi,eax
c0011518:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001151d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011520:	50                   	push   eax
c0011521:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011524:	52                   	push   edx
c0011525:	56                   	push   esi
c0011526:	e8 51 96 ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c001152b:	83 c4 10             	add    esp,0x10
c001152e:	85 f6                	test   esi,esi
c0011530:	74 5f                	je     c0011591 <SysOpen(regs*)+0x1d3>
c0011532:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011535:	89 d0                	mov    eax,edx
c0011537:	25 ff 00 00 00       	and    eax,0xff
c001153c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001153f:	89 d0                	mov    eax,edx
c0011541:	83 e0 01             	and    eax,0x1
c0011544:	f6 c2 02             	test   dl,0x2
c0011547:	74 03                	je     c001154c <SysOpen(regs*)+0x18e>
c0011549:	83 c8 02             	or     eax,0x2
c001154c:	f6 c2 04             	test   dl,0x4
c001154f:	74 03                	je     c0011554 <SysOpen(regs*)+0x196>
c0011551:	83 c8 04             	or     eax,0x4
c0011554:	f6 c2 08             	test   dl,0x8
c0011557:	74 03                	je     c001155c <SysOpen(regs*)+0x19e>
c0011559:	83 c8 0a             	or     eax,0xa
c001155c:	83 e2 10             	and    edx,0x10
c001155f:	74 03                	je     c0011564 <SysOpen(regs*)+0x1a6>
c0011561:	83 c8 12             	or     eax,0x12
c0011564:	83 ec 08             	sub    esp,0x8
c0011567:	50                   	push   eax
c0011568:	56                   	push   esi
c0011569:	e8 ce 96 ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c001156e:	83 c4 10             	add    esp,0x10
c0011571:	85 c0                	test   eax,eax
c0011573:	75 1c                	jne    c0011591 <SysOpen(regs*)+0x1d3>
c0011575:	83 ec 0c             	sub    esp,0xc
c0011578:	56                   	push   esi
c0011579:	e8 80 79 ff ff       	call   c0008efe <UnixFile::getFileDescriptor()>
c001157e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011581:	83 c4 10             	add    esp,0x10
c0011584:	89 02                	mov    DWORD PTR [edx],eax
c0011586:	c1 f8 1f             	sar    eax,0x1f
c0011589:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001158c:	e9 b6 fe ff ff       	jmp    c0011447 <SysOpen(regs*)+0x89>
c0011591:	81 c4 04 01 00 00    	add    esp,0x104
c0011597:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001159c:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115a1:	5b                   	pop    ebx
c00115a2:	5e                   	pop    esi
c00115a3:	c3                   	ret    
c00115a4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115a7:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00115ad:	e9 8e fe ff ff       	jmp    c0011440 <SysOpen(regs*)+0x82>

c00115b2 <KeSystemCall(regs*, void*)>:
c00115b2:	53                   	push   ebx
c00115b3:	83 ec 08             	sub    esp,0x8
c00115b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115ba:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00115bd:	83 f8 3b             	cmp    eax,0x3b
c00115c0:	77 16                	ja     c00115d8 <KeSystemCall(regs*, void*)+0x26>
c00115c2:	8b 14 85 40 18 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde7c0]
c00115c9:	85 d2                	test   edx,edx
c00115cb:	74 0b                	je     c00115d8 <KeSystemCall(regs*, void*)+0x26>
c00115cd:	83 ec 0c             	sub    esp,0xc
c00115d0:	53                   	push   ebx
c00115d1:	ff d2                	call   edx
c00115d3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00115d6:	eb 0d                	jmp    c00115e5 <KeSystemCall(regs*, void*)+0x33>
c00115d8:	52                   	push   edx
c00115d9:	52                   	push   edx
c00115da:	50                   	push   eax
c00115db:	68 72 04 02 c0       	push   0xc0020472
c00115e0:	e8 21 90 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00115e5:	83 c4 10             	add    esp,0x10
c00115e8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00115ed:	31 d2                	xor    edx,edx
c00115ef:	83 c4 08             	add    esp,0x8
c00115f2:	5b                   	pop    ebx
c00115f3:	c3                   	ret    

c00115f4 <KeSwitchEndian16(unsigned short)>:
c00115f4:	83 ec 04             	sub    esp,0x4
c00115f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00115fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00115ff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011602:	25 ff ff 00 00       	and    eax,0xffff
c0011607:	c1 f8 08             	sar    eax,0x8
c001160a:	89 c2                	mov    edx,eax
c001160c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001160f:	25 ff ff 00 00       	and    eax,0xffff
c0011614:	c1 e0 08             	shl    eax,0x8
c0011617:	09 d0                	or     eax,edx
c0011619:	83 c4 04             	add    esp,0x4
c001161c:	c3                   	ret    
c001161d:	8d 76 00             	lea    esi,[esi+0x0]

c0011620 <KeSwitchEndian32(unsigned int)>:
c0011620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011624:	c1 e8 18             	shr    eax,0x18
c0011627:	89 c2                	mov    edx,eax
c0011629:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001162d:	c1 e0 08             	shl    eax,0x8
c0011630:	25 00 00 ff 00       	and    eax,0xff0000
c0011635:	09 c2                	or     edx,eax
c0011637:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001163b:	c1 e8 08             	shr    eax,0x8
c001163e:	25 00 ff 00 00       	and    eax,0xff00
c0011643:	09 c2                	or     edx,eax
c0011645:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011649:	c1 e0 18             	shl    eax,0x18
c001164c:	09 d0                	or     eax,edx
c001164e:	c3                   	ret    
c001164f:	90                   	nop

c0011650 <EthernetCRC32(unsigned char*, int)>:
c0011650:	83 ec 10             	sub    esp,0x10
c0011653:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011658:	75 0a                	jne    c0011664 <EthernetCRC32(unsigned char*, int)+0x14>
c001165a:	b8 00 00 00 00       	mov    eax,0x0
c001165f:	e9 8c 00 00 00       	jmp    c00116f0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011664:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011669:	7f 09                	jg     c0011674 <EthernetCRC32(unsigned char*, int)+0x24>
c001166b:	b8 00 00 00 00       	mov    eax,0x0
c0011670:	eb 7e                	jmp    c00116f0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011672:	66 90                	xchg   ax,ax
c0011674:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001167c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011684:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011688:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001168c:	7d 5a                	jge    c00116e8 <EthernetCRC32(unsigned char*, int)+0x98>
c001168e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011692:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011696:	01 d0                	add    eax,edx
c0011698:	8a 00                	mov    al,BYTE PTR [eax]
c001169a:	25 ff 00 00 00       	and    eax,0xff
c001169f:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00116a3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00116ab:	90                   	nop
c00116ac:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00116b1:	7f 2d                	jg     c00116e0 <EthernetCRC32(unsigned char*, int)+0x90>
c00116b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116b7:	83 e0 01             	and    eax,0x1
c00116ba:	74 10                	je     c00116cc <EthernetCRC32(unsigned char*, int)+0x7c>
c00116bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116c0:	d1 e8                	shr    eax,1
c00116c2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00116c7:	eb 0b                	jmp    c00116d4 <EthernetCRC32(unsigned char*, int)+0x84>
c00116c9:	8d 76 00             	lea    esi,[esi+0x0]
c00116cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116d0:	d1 e8                	shr    eax,1
c00116d2:	66 90                	xchg   ax,ax
c00116d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116d8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00116dc:	eb ce                	jmp    c00116ac <EthernetCRC32(unsigned char*, int)+0x5c>
c00116de:	66 90                	xchg   ax,ax
c00116e0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00116e4:	eb 9e                	jmp    c0011684 <EthernetCRC32(unsigned char*, int)+0x34>
c00116e6:	66 90                	xchg   ax,ax
c00116e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116ec:	f7 d0                	not    eax
c00116ee:	66 90                	xchg   ax,ax
c00116f0:	83 c4 10             	add    esp,0x10
c00116f3:	c3                   	ret    

c00116f4 <EthernetReceivedPacket(unsigned char*, unsigned short)>:
c00116f4:	83 ec 04             	sub    esp,0x4
c00116f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00116ff:	90                   	nop
c0011700:	83 c4 04             	add    esp,0x4
c0011703:	c3                   	ret    

c0011704 <CmOpen(char const*)>:
c0011704:	57                   	push   edi
c0011705:	56                   	push   esi
c0011706:	53                   	push   ebx
c0011707:	83 ec 1c             	sub    esp,0x1c
c001170a:	6a 30                	push   0x30
c001170c:	e8 54 61 ff ff       	call   c0007865 <malloc>
c0011711:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011718:	89 c3                	mov    ebx,eax
c001171a:	e8 46 61 ff ff       	call   c0007865 <malloc>
c001171f:	83 c4 0c             	add    esp,0xc
c0011722:	89 c6                	mov    esi,eax
c0011724:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c001172a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001172e:	50                   	push   eax
c001172f:	e8 48 94 ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c0011734:	83 c4 0c             	add    esp,0xc
c0011737:	89 33                	mov    DWORD PTR [ebx],esi
c0011739:	8d 44 24 07          	lea    eax,[esp+0x7]
c001173d:	50                   	push   eax
c001173e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011742:	50                   	push   eax
c0011743:	56                   	push   esi
c0011744:	e8 9f 97 ff ff       	call   c000aee8 <File::stat(unsigned long long*, bool*)>
c0011749:	5a                   	pop    edx
c001174a:	59                   	pop    ecx
c001174b:	6a 01                	push   0x1
c001174d:	ff 33                	push   DWORD PTR [ebx]
c001174f:	e8 e8 94 ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c0011754:	5e                   	pop    esi
c0011755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011759:	e8 07 61 ff ff       	call   c0007865 <malloc>
c001175e:	5a                   	pop    edx
c001175f:	89 c7                	mov    edi,eax
c0011761:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011765:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011767:	8b 10                	mov    edx,DWORD PTR [eax]
c0011769:	56                   	push   esi
c001176a:	57                   	push   edi
c001176b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001176f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011773:	50                   	push   eax
c0011774:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011777:	83 c4 14             	add    esp,0x14
c001177a:	ff 33                	push   DWORD PTR [ebx]
c001177c:	e8 19 95 ff ff       	call   c000ac9a <File::close()>
c0011781:	59                   	pop    ecx
c0011782:	58                   	pop    eax
c0011783:	6a 13                	push   0x13
c0011785:	ff 33                	push   DWORD PTR [ebx]
c0011787:	e8 b0 94 ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c001178c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001178e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011790:	89 34 24             	mov    DWORD PTR [esp],esi
c0011793:	57                   	push   edi
c0011794:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011798:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001179c:	50                   	push   eax
c001179d:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00117a0:	83 c4 14             	add    esp,0x14
c00117a3:	57                   	push   edi
c00117a4:	e8 cc 60 ff ff       	call   c0007875 <free>
c00117a9:	83 c4 10             	add    esp,0x10
c00117ac:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00117af:	75 10                	jne    c00117c1 <CmOpen(char const*)+0xbd>
c00117b1:	83 ec 0c             	sub    esp,0xc
c00117b4:	68 86 04 02 c0       	push   0xc0020486
c00117b9:	e8 09 ec ff ff       	call   c00103c7 <KePanic(char const*)>
c00117be:	83 c4 10             	add    esp,0x10
c00117c1:	8d 7b 05             	lea    edi,[ebx+0x5]
c00117c4:	50                   	push   eax
c00117c5:	6a 00                	push   0x0
c00117c7:	6a 00                	push   0x0
c00117c9:	ff 33                	push   DWORD PTR [ebx]
c00117cb:	e8 2a 95 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c00117d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117d2:	8b 10                	mov    edx,DWORD PTR [eax]
c00117d4:	89 34 24             	mov    DWORD PTR [esp],esi
c00117d7:	57                   	push   edi
c00117d8:	6a 00                	push   0x0
c00117da:	6a 2b                	push   0x2b
c00117dc:	50                   	push   eax
c00117dd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00117e0:	83 c4 1c             	add    esp,0x1c
c00117e3:	6a 00                	push   0x0
c00117e5:	6a 00                	push   0x0
c00117e7:	ff 33                	push   DWORD PTR [ebx]
c00117e9:	e8 0c 95 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c00117ee:	83 c4 0c             	add    esp,0xc
c00117f1:	6a 08                	push   0x8
c00117f3:	68 97 04 02 c0       	push   0xc0020497
c00117f8:	57                   	push   edi
c00117f9:	e8 82 eb fe ff       	call   c0000380 <memcmp>
c00117fe:	83 c4 10             	add    esp,0x10
c0011801:	85 c0                	test   eax,eax
c0011803:	74 10                	je     c0011815 <CmOpen(char const*)+0x111>
c0011805:	83 ec 0c             	sub    esp,0xc
c0011808:	68 a0 04 02 c0       	push   0xc00204a0
c001180d:	e8 b5 eb ff ff       	call   c00103c7 <KePanic(char const*)>
c0011812:	83 c4 10             	add    esp,0x10
c0011815:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011819:	89 d8                	mov    eax,ebx
c001181b:	83 c4 10             	add    esp,0x10
c001181e:	5b                   	pop    ebx
c001181f:	5e                   	pop    esi
c0011820:	5f                   	pop    edi
c0011821:	c3                   	ret    

c0011822 <CmClose(Reghive_Tag*)>:
c0011822:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011826:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001182a:	74 0b                	je     c0011837 <CmClose(Reghive_Tag*)+0x15>
c001182c:	8b 00                	mov    eax,DWORD PTR [eax]
c001182e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011832:	e9 63 94 ff ff       	jmp    c000ac9a <File::close()>
c0011837:	c3                   	ret    

c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011838:	57                   	push   edi
c0011839:	56                   	push   esi
c001183a:	53                   	push   ebx
c001183b:	83 ec 10             	sub    esp,0x10
c001183e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011842:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0011846:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001184a:	80 7f 04 00          	cmp    BYTE PTR [edi+0x4],0x0
c001184e:	74 4f                	je     c001189f <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x67>
c0011850:	50                   	push   eax
c0011851:	6b c3 2b             	imul   eax,ebx,0x2b
c0011854:	99                   	cdq    
c0011855:	52                   	push   edx
c0011856:	50                   	push   eax
c0011857:	ff 37                	push   DWORD PTR [edi]
c0011859:	e8 9c 94 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c001185e:	5a                   	pop    edx
c001185f:	8b 07                	mov    eax,DWORD PTR [edi]
c0011861:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011865:	8b 10                	mov    edx,DWORD PTR [eax]
c0011867:	51                   	push   ecx
c0011868:	56                   	push   esi
c0011869:	6a 00                	push   0x0
c001186b:	6a 2b                	push   0x2b
c001186d:	50                   	push   eax
c001186e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011871:	83 c4 20             	add    esp,0x20
c0011874:	85 db                	test   ebx,ebx
c0011876:	74 27                	je     c001189f <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x67>
c0011878:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001187a:	89 c8                	mov    eax,ecx
c001187c:	85 c9                	test   ecx,ecx
c001187e:	74 1d                	je     c001189d <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x65>
c0011880:	6a 00                	push   0x0
c0011882:	b8 49 91 17 17       	mov    eax,0x17179149
c0011887:	68 00 28 6b ee       	push   0xee6b2800
c001188c:	f7 e1                	mul    ecx
c001188e:	52                   	push   edx
c001188f:	50                   	push   eax
c0011890:	e8 4b c5 00 00       	call   c001dde0 <__umoddi3>
c0011895:	83 c4 10             	add    esp,0x10
c0011898:	6b cb 13             	imul   ecx,ebx,0x13
c001189b:	29 c8                	sub    eax,ecx
c001189d:	89 06                	mov    DWORD PTR [esi],eax
c001189f:	83 c4 10             	add    esp,0x10
c00118a2:	5b                   	pop    ebx
c00118a3:	5e                   	pop    esi
c00118a4:	5f                   	pop    edi
c00118a5:	c3                   	ret    

c00118a6 <CmGetString(Reghive_Tag*, int, char*)>:
c00118a6:	55                   	push   ebp
c00118a7:	57                   	push   edi
c00118a8:	56                   	push   esi
c00118a9:	53                   	push   ebx
c00118aa:	31 db                	xor    ebx,ebx
c00118ac:	83 ec 70             	sub    esp,0x70
c00118af:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00118b6:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00118ba:	50                   	push   eax
c00118bb:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00118c2:	55                   	push   ebp
c00118c3:	e8 70 ff ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00118c8:	83 c4 10             	add    esp,0x10
c00118cb:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00118d0:	c1 e0 08             	shl    eax,0x8
c00118d3:	89 c2                	mov    edx,eax
c00118d5:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c00118da:	09 d0                	or     eax,edx
c00118dc:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00118e1:	c1 e0 08             	shl    eax,0x8
c00118e4:	09 d0                	or     eax,edx
c00118e6:	74 25                	je     c001190d <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00118e8:	6b fb 0d             	imul   edi,ebx,0xd
c00118eb:	52                   	push   edx
c00118ec:	8d 54 24 39          	lea    edx,[esp+0x39]
c00118f0:	52                   	push   edx
c00118f1:	50                   	push   eax
c00118f2:	55                   	push   ebp
c00118f3:	e8 40 ff ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00118f8:	8d 74 24 49          	lea    esi,[esp+0x49]
c00118fc:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011903:	b9 27 00 00 00       	mov    ecx,0x27
c0011908:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001190a:	83 c4 10             	add    esp,0x10
c001190d:	83 c3 03             	add    ebx,0x3
c0011910:	83 fb 15             	cmp    ebx,0x15
c0011913:	75 b6                	jne    c00118cb <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011915:	83 c4 6c             	add    esp,0x6c
c0011918:	5b                   	pop    ebx
c0011919:	5e                   	pop    esi
c001191a:	5f                   	pop    edi
c001191b:	5d                   	pop    ebp
c001191c:	c3                   	ret    

c001191d <CmEnterDirectory(Reghive_Tag*, int)>:
c001191d:	83 ec 40             	sub    esp,0x40
c0011920:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011924:	50                   	push   eax
c0011925:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011929:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001192d:	e8 06 ff ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011932:	83 c4 10             	add    esp,0x10
c0011935:	83 c8 ff             	or     eax,0xffffffff
c0011938:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c001193d:	75 19                	jne    c0011958 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c001193f:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011944:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011949:	c1 e0 08             	shl    eax,0x8
c001194c:	09 c2                	or     edx,eax
c001194e:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011953:	c1 e0 10             	shl    eax,0x10
c0011956:	09 d0                	or     eax,edx
c0011958:	83 c4 3c             	add    esp,0x3c
c001195b:	c3                   	ret    

c001195c <CmGetNext(Reghive_Tag*, int)>:
c001195c:	83 ec 40             	sub    esp,0x40
c001195f:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011963:	50                   	push   eax
c0011964:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011968:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001196c:	e8 c7 fe ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011971:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011976:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001197b:	c1 e0 08             	shl    eax,0x8
c001197e:	09 c2                	or     edx,eax
c0011980:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011985:	83 c4 4c             	add    esp,0x4c
c0011988:	c1 e0 10             	shl    eax,0x10
c001198b:	09 d0                	or     eax,edx
c001198d:	c3                   	ret    

c001198e <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c001198e:	55                   	push   ebp
c001198f:	57                   	push   edi
c0011990:	56                   	push   esi
c0011991:	53                   	push   ebx
c0011992:	83 ec 1c             	sub    esp,0x1c
c0011995:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011999:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001199d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00119a1:	74 69                	je     c0011a0c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x7e>
c00119a3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00119a8:	74 3c                	je     c00119e6 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x58>
c00119aa:	31 d2                	xor    edx,edx
c00119ac:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00119af:	89 d7                	mov    edi,edx
c00119b1:	09 c7                	or     edi,eax
c00119b3:	74 2e                	je     c00119e3 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x55>
c00119b5:	6b 74 24 34 13       	imul   esi,DWORD PTR [esp+0x34],0x13
c00119ba:	6a 00                	push   0x0
c00119bc:	89 f7                	mov    edi,esi
c00119be:	68 00 28 6b ee       	push   0xee6b2800
c00119c3:	c1 ff 1f             	sar    edi,0x1f
c00119c6:	01 f0                	add    eax,esi
c00119c8:	be f9 e0 66 d1       	mov    esi,0xd166e0f9
c00119cd:	11 fa                	adc    edx,edi
c00119cf:	69 ca f9 e0 66 d1    	imul   ecx,edx,0xd166e0f9
c00119d5:	f7 e6                	mul    esi
c00119d7:	01 ca                	add    edx,ecx
c00119d9:	52                   	push   edx
c00119da:	50                   	push   eax
c00119db:	e8 00 c4 00 00       	call   c001dde0 <__umoddi3>
c00119e0:	83 c4 10             	add    esp,0x10
c00119e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00119e6:	50                   	push   eax
c00119e7:	6b 44 24 38 2b       	imul   eax,DWORD PTR [esp+0x38],0x2b
c00119ec:	99                   	cdq    
c00119ed:	52                   	push   edx
c00119ee:	50                   	push   eax
c00119ef:	ff 33                	push   DWORD PTR [ebx]
c00119f1:	e8 04 93 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c00119f6:	5a                   	pop    edx
c00119f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00119f9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00119fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00119ff:	51                   	push   ecx
c0011a00:	55                   	push   ebp
c0011a01:	6a 00                	push   0x0
c0011a03:	6a 2b                	push   0x2b
c0011a05:	50                   	push   eax
c0011a06:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011a09:	83 c4 20             	add    esp,0x20
c0011a0c:	83 c4 1c             	add    esp,0x1c
c0011a0f:	5b                   	pop    ebx
c0011a10:	5e                   	pop    esi
c0011a11:	5f                   	pop    edi
c0011a12:	5d                   	pop    ebp
c0011a13:	c3                   	ret    

c0011a14 <CmFreeExtent(Reghive_Tag*, int)>:
c0011a14:	53                   	push   ebx
c0011a15:	83 ec 3c             	sub    esp,0x3c
c0011a18:	6a 2b                	push   0x2b
c0011a1a:	6a 00                	push   0x0
c0011a1c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011a20:	53                   	push   ebx
c0011a21:	e8 9a ea fe ff       	call   c00004c0 <memset>
c0011a26:	83 c4 0c             	add    esp,0xc
c0011a29:	53                   	push   ebx
c0011a2a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011a2e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011a32:	e8 57 ff ff ff       	call   c001198e <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011a37:	83 c4 48             	add    esp,0x48
c0011a3a:	5b                   	pop    ebx
c0011a3b:	c3                   	ret    

c0011a3c <CmUpdateHeader(Reghive_Tag*)>:
c0011a3c:	83 ec 0c             	sub    esp,0xc
c0011a3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a43:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011a47:	74 10                	je     c0011a59 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011a49:	52                   	push   edx
c0011a4a:	8d 50 05             	lea    edx,[eax+0x5]
c0011a4d:	52                   	push   edx
c0011a4e:	6a 00                	push   0x0
c0011a50:	50                   	push   eax
c0011a51:	e8 38 ff ff ff       	call   c001198e <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011a56:	83 c4 10             	add    esp,0x10
c0011a59:	83 c4 0c             	add    esp,0xc
c0011a5c:	c3                   	ret    

c0011a5d <CmExpand(Reghive_Tag*, int)>:
c0011a5d:	57                   	push   edi
c0011a5e:	56                   	push   esi
c0011a5f:	83 ce ff             	or     esi,0xffffffff
c0011a62:	53                   	push   ebx
c0011a63:	83 ec 30             	sub    esp,0x30
c0011a66:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011a6a:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011a6e:	74 5f                	je     c0011acf <CmExpand(Reghive_Tag*, int)+0x72>
c0011a70:	31 d2                	xor    edx,edx
c0011a72:	31 f6                	xor    esi,esi
c0011a74:	50                   	push   eax
c0011a75:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011a79:	52                   	push   edx
c0011a7a:	50                   	push   eax
c0011a7b:	ff 33                	push   DWORD PTR [ebx]
c0011a7d:	e8 78 92 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0011a82:	83 c4 0c             	add    esp,0xc
c0011a85:	6a 2b                	push   0x2b
c0011a87:	6a 00                	push   0x0
c0011a89:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0011a8d:	57                   	push   edi
c0011a8e:	e8 2d ea fe ff       	call   c00004c0 <memset>
c0011a93:	83 c4 10             	add    esp,0x10
c0011a96:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0011a9a:	7d 1b                	jge    c0011ab7 <CmExpand(Reghive_Tag*, int)+0x5a>
c0011a9c:	83 ec 0c             	sub    esp,0xc
c0011a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011aa1:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0011aa5:	8b 10                	mov    edx,DWORD PTR [eax]
c0011aa7:	46                   	inc    esi
c0011aa8:	51                   	push   ecx
c0011aa9:	57                   	push   edi
c0011aaa:	6a 00                	push   0x0
c0011aac:	6a 2b                	push   0x2b
c0011aae:	50                   	push   eax
c0011aaf:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011ab2:	83 c4 20             	add    esp,0x20
c0011ab5:	eb df                	jmp    c0011a96 <CmExpand(Reghive_Tag*, int)+0x39>
c0011ab7:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011abb:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0011abe:	83 ec 0c             	sub    esp,0xc
c0011ac1:	01 f2                	add    edx,esi
c0011ac3:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0011ac6:	53                   	push   ebx
c0011ac7:	e8 70 ff ff ff       	call   c0011a3c <CmUpdateHeader(Reghive_Tag*)>
c0011acc:	83 c4 10             	add    esp,0x10
c0011acf:	83 c4 30             	add    esp,0x30
c0011ad2:	89 f0                	mov    eax,esi
c0011ad4:	5b                   	pop    ebx
c0011ad5:	5e                   	pop    esi
c0011ad6:	5f                   	pop    edi
c0011ad7:	c3                   	ret    

c0011ad8 <CmFindUnusedExtent(Reghive_Tag*)>:
c0011ad8:	55                   	push   ebp
c0011ad9:	57                   	push   edi
c0011ada:	56                   	push   esi
c0011adb:	53                   	push   ebx
c0011adc:	83 cb ff             	or     ebx,0xffffffff
c0011adf:	83 ec 1c             	sub    esp,0x1c
c0011ae2:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011ae6:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0011aea:	74 68                	je     c0011b54 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011aec:	be 2b 00 00 00       	mov    esi,0x2b
c0011af1:	51                   	push   ecx
c0011af2:	31 ff                	xor    edi,edi
c0011af4:	6a 00                	push   0x0
c0011af6:	31 db                	xor    ebx,ebx
c0011af8:	6a 00                	push   0x0
c0011afa:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011afd:	e8 f8 91 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0011b02:	83 c4 10             	add    esp,0x10
c0011b05:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0011b08:	76 3b                	jbe    c0011b45 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0011b0a:	83 ec 0c             	sub    esp,0xc
c0011b0d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011b10:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011b14:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b16:	51                   	push   ecx
c0011b17:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0011b1b:	51                   	push   ecx
c0011b1c:	6a 00                	push   0x0
c0011b1e:	6a 01                	push   0x1
c0011b20:	50                   	push   eax
c0011b21:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b24:	83 c4 20             	add    esp,0x20
c0011b27:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b2c:	74 26                	je     c0011b54 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011b2e:	43                   	inc    ebx
c0011b2f:	52                   	push   edx
c0011b30:	57                   	push   edi
c0011b31:	56                   	push   esi
c0011b32:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011b35:	e8 c0 91 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0011b3a:	83 c6 2b             	add    esi,0x2b
c0011b3d:	83 d7 00             	adc    edi,0x0
c0011b40:	83 c4 10             	add    esp,0x10
c0011b43:	eb c0                	jmp    c0011b05 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0011b45:	50                   	push   eax
c0011b46:	50                   	push   eax
c0011b47:	6a 40                	push   0x40
c0011b49:	55                   	push   ebp
c0011b4a:	e8 0e ff ff ff       	call   c0011a5d <CmExpand(Reghive_Tag*, int)>
c0011b4f:	83 c4 10             	add    esp,0x10
c0011b52:	89 c3                	mov    ebx,eax
c0011b54:	83 c4 1c             	add    esp,0x1c
c0011b57:	89 d8                	mov    eax,ebx
c0011b59:	5b                   	pop    ebx
c0011b5a:	5e                   	pop    esi
c0011b5b:	5f                   	pop    edi
c0011b5c:	5d                   	pop    ebp
c0011b5d:	c3                   	ret    

c0011b5e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0011b5e:	55                   	push   ebp
c0011b5f:	57                   	push   edi
c0011b60:	56                   	push   esi
c0011b61:	53                   	push   ebx
c0011b62:	81 ec 88 00 00 00    	sub    esp,0x88
c0011b68:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0011b6f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011b76:	e8 5d ff ff ff       	call   c0011ad8 <CmFindUnusedExtent(Reghive_Tag*)>
c0011b7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b7f:	83 c4 0c             	add    esp,0xc
c0011b82:	6a 2b                	push   0x2b
c0011b84:	6a 00                	push   0x0
c0011b86:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0011b8a:	55                   	push   ebp
c0011b8b:	e8 30 e9 fe ff       	call   c00004c0 <memset>
c0011b90:	83 c4 10             	add    esp,0x10
c0011b93:	85 db                	test   ebx,ebx
c0011b95:	74 12                	je     c0011ba9 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0011b97:	51                   	push   ecx
c0011b98:	55                   	push   ebp
c0011b99:	53                   	push   ebx
c0011b9a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011ba1:	e8 92 fc ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ba6:	83 c4 10             	add    esp,0x10
c0011ba9:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0011bad:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0011bb4:	b9 2b 00 00 00       	mov    ecx,0x2b
c0011bb9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011bbb:	85 db                	test   ebx,ebx
c0011bbd:	74 49                	je     c0011c08 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0011bbf:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0011bc4:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0011bc9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bcd:	c1 e0 08             	shl    eax,0x8
c0011bd0:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0011bd6:	09 c8                	or     eax,ecx
c0011bd8:	74 11                	je     c0011beb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0011bda:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0011bde:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0011be2:	c1 e8 10             	shr    eax,0x10
c0011be5:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0011be9:	eb 0f                	jmp    c0011bfa <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0011beb:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0011bf0:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0011bf5:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0011bfa:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0011bfe:	c1 ea 08             	shr    edx,0x8
c0011c01:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0011c06:	eb 0f                	jmp    c0011c17 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0011c08:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0011c0d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0011c12:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0011c17:	52                   	push   edx
c0011c18:	8d 44 24 49          	lea    eax,[esp+0x49]
c0011c1c:	50                   	push   eax
c0011c1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011c21:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011c28:	e8 61 fd ff ff       	call   c001198e <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011c2d:	83 c4 10             	add    esp,0x10
c0011c30:	85 db                	test   ebx,ebx
c0011c32:	74 12                	je     c0011c46 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0011c34:	50                   	push   eax
c0011c35:	55                   	push   ebp
c0011c36:	53                   	push   ebx
c0011c37:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011c3e:	e8 4b fd ff ff       	call   c001198e <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011c43:	83 c4 10             	add    esp,0x10
c0011c46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c4a:	83 c4 7c             	add    esp,0x7c
c0011c4d:	5b                   	pop    ebx
c0011c4e:	5e                   	pop    esi
c0011c4f:	5f                   	pop    edi
c0011c50:	5d                   	pop    ebp
c0011c51:	c3                   	ret    

c0011c52 <CmSetString(Reghive_Tag*, int, char const*)>:
c0011c52:	55                   	push   ebp
c0011c53:	57                   	push   edi
c0011c54:	56                   	push   esi
c0011c55:	53                   	push   ebx
c0011c56:	bb 27 00 00 00       	mov    ebx,0x27
c0011c5b:	81 ec 88 00 00 00    	sub    esp,0x88
c0011c61:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0011c68:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0011c6f:	e8 bc e8 fe ff       	call   c0000530 <strlen>
c0011c74:	8d 48 26             	lea    ecx,[eax+0x26]
c0011c77:	89 c8                	mov    eax,ecx
c0011c79:	99                   	cdq    
c0011c7a:	f7 fb                	idiv   ebx
c0011c7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011c80:	83 c4 10             	add    esp,0x10
c0011c83:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0011c89:	7e 10                	jle    c0011c9b <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0011c8b:	83 ec 0c             	sub    esp,0xc
c0011c8e:	68 b1 04 02 c0       	push   0xc00204b1
c0011c93:	e8 2f e7 ff ff       	call   c00103c7 <KePanic(char const*)>
c0011c98:	83 c4 10             	add    esp,0x10
c0011c9b:	31 ff                	xor    edi,edi
c0011c9d:	50                   	push   eax
c0011c9e:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0011ca2:	53                   	push   ebx
c0011ca3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011caa:	56                   	push   esi
c0011cab:	e8 88 fb ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011cb0:	83 c4 10             	add    esp,0x10
c0011cb3:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0011cb7:	89 d0                	mov    eax,edx
c0011cb9:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0011cbd:	c1 e0 08             	shl    eax,0x8
c0011cc0:	09 c2                	or     edx,eax
c0011cc2:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0011cc6:	c1 e2 08             	shl    edx,0x8
c0011cc9:	09 c2                	or     edx,eax
c0011ccb:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0011ccf:	7e 76                	jle    c0011d47 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0011cd1:	85 d2                	test   edx,edx
c0011cd3:	75 25                	jne    c0011cfa <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0011cd5:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0011cda:	8d 44 24 45          	lea    eax,[esp+0x45]
c0011cde:	50                   	push   eax
c0011cdf:	6a 00                	push   0x0
c0011ce1:	6a 00                	push   0x0
c0011ce3:	56                   	push   esi
c0011ce4:	e8 75 fe ff ff       	call   c0011b5e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0011ce9:	83 c4 10             	add    esp,0x10
c0011cec:	89 c2                	mov    edx,eax
c0011cee:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0011cf1:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0011cf4:	c1 f8 10             	sar    eax,0x10
c0011cf7:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0011cfa:	55                   	push   ebp
c0011cfb:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0011cff:	55                   	push   ebp
c0011d00:	52                   	push   edx
c0011d01:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0011d05:	56                   	push   esi
c0011d06:	e8 2d fb ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011d0b:	83 c4 0c             	add    esp,0xc
c0011d0e:	6a 27                	push   0x27
c0011d10:	6a 00                	push   0x0
c0011d12:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0011d16:	51                   	push   ecx
c0011d17:	e8 a4 e7 fe ff       	call   c00004c0 <memset>
c0011d1c:	83 c4 0c             	add    esp,0xc
c0011d1f:	6b c7 27             	imul   eax,edi,0x27
c0011d22:	6a 27                	push   0x27
c0011d24:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0011d2b:	50                   	push   eax
c0011d2c:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0011d30:	51                   	push   ecx
c0011d31:	e8 ea e8 fe ff       	call   c0000620 <strncpy>
c0011d36:	83 c4 0c             	add    esp,0xc
c0011d39:	55                   	push   ebp
c0011d3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011d3e:	52                   	push   edx
c0011d3f:	56                   	push   esi
c0011d40:	e8 49 fc ff ff       	call   c001198e <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011d45:	eb 19                	jmp    c0011d60 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0011d47:	85 d2                	test   edx,edx
c0011d49:	74 18                	je     c0011d63 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0011d4b:	51                   	push   ecx
c0011d4c:	51                   	push   ecx
c0011d4d:	52                   	push   edx
c0011d4e:	56                   	push   esi
c0011d4f:	e8 c0 fc ff ff       	call   c0011a14 <CmFreeExtent(Reghive_Tag*, int)>
c0011d54:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0011d58:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0011d5c:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0011d60:	83 c4 10             	add    esp,0x10
c0011d63:	47                   	inc    edi
c0011d64:	83 c3 03             	add    ebx,0x3
c0011d67:	83 ff 07             	cmp    edi,0x7
c0011d6a:	0f 85 43 ff ff ff    	jne    c0011cb3 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0011d70:	50                   	push   eax
c0011d71:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0011d75:	50                   	push   eax
c0011d76:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011d7d:	56                   	push   esi
c0011d7e:	e8 0b fc ff ff       	call   c001198e <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011d83:	81 c4 8c 00 00 00    	add    esp,0x8c
c0011d89:	5b                   	pop    ebx
c0011d8a:	5e                   	pop    esi
c0011d8b:	5f                   	pop    edi
c0011d8c:	5d                   	pop    ebp
c0011d8d:	c3                   	ret    

c0011d8e <CmGetMatch(char*, char*, bool, bool*)>:
c0011d8e:	56                   	push   esi
c0011d8f:	53                   	push   ebx
c0011d90:	50                   	push   eax
c0011d91:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011d95:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0011d9a:	74 25                	je     c0011dc1 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0011d9c:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0011d9f:	31 db                	xor    ebx,ebx
c0011da1:	50                   	push   eax
c0011da2:	50                   	push   eax
c0011da3:	8d 04 9d 40 19 02 c0 	lea    eax,[ebx*4-0x3ffde6c0]
c0011daa:	50                   	push   eax
c0011dab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011daf:	e8 1c e9 fe ff       	call   c00006d0 <strcmp>
c0011db4:	83 c4 10             	add    esp,0x10
c0011db7:	85 c0                	test   eax,eax
c0011db9:	74 2e                	je     c0011de9 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0011dbb:	43                   	inc    ebx
c0011dbc:	83 fb 3f             	cmp    ebx,0x3f
c0011dbf:	75 e0                	jne    c0011da1 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0011dc1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011dc4:	31 db                	xor    ebx,ebx
c0011dc6:	8d 04 9d 40 19 02 c0 	lea    eax,[ebx*4-0x3ffde6c0]
c0011dcd:	51                   	push   ecx
c0011dce:	51                   	push   ecx
c0011dcf:	50                   	push   eax
c0011dd0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011dd4:	e8 f7 e8 fe ff       	call   c00006d0 <strcmp>
c0011dd9:	83 c4 10             	add    esp,0x10
c0011ddc:	85 c0                	test   eax,eax
c0011dde:	74 09                	je     c0011de9 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0011de0:	43                   	inc    ebx
c0011de1:	83 fb 3f             	cmp    ebx,0x3f
c0011de4:	75 e0                	jne    c0011dc6 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0011de6:	83 cb ff             	or     ebx,0xffffffff
c0011de9:	89 d8                	mov    eax,ebx
c0011deb:	5a                   	pop    edx
c0011dec:	5b                   	pop    ebx
c0011ded:	5e                   	pop    esi
c0011dee:	c3                   	ret    

c0011def <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0011def:	55                   	push   ebp
c0011df0:	31 c0                	xor    eax,eax
c0011df2:	57                   	push   edi
c0011df3:	56                   	push   esi
c0011df4:	53                   	push   ebx
c0011df5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011df9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011dfd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011dff:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011e03:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0011e06:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e0a:	83 fd 1f             	cmp    ebp,0x1f
c0011e0d:	7f 0b                	jg     c0011e1a <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0011e0f:	0f b6 c2             	movzx  eax,dl
c0011e12:	d3 e0                	shl    eax,cl
c0011e14:	09 07                	or     DWORD PTR [edi],eax
c0011e16:	b0 01                	mov    al,0x1
c0011e18:	01 33                	add    DWORD PTR [ebx],esi
c0011e1a:	5b                   	pop    ebx
c0011e1b:	5e                   	pop    esi
c0011e1c:	5f                   	pop    edi
c0011e1d:	5d                   	pop    ebp
c0011e1e:	c3                   	ret    

c0011e1f <CmGetShift(unsigned int*, int*, int, bool*)>:
c0011e1f:	57                   	push   edi
c0011e20:	56                   	push   esi
c0011e21:	53                   	push   ebx
c0011e22:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011e26:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e2a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0011e2e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011e32:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0011e34:	7c 17                	jl     c0011e4d <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0011e36:	8b 17                	mov    edx,DWORD PTR [edi]
c0011e38:	b8 01 00 00 00       	mov    eax,0x1
c0011e3d:	d3 e0                	shl    eax,cl
c0011e3f:	48                   	dec    eax
c0011e40:	21 d0                	and    eax,edx
c0011e42:	d3 ea                	shr    edx,cl
c0011e44:	89 17                	mov    DWORD PTR [edi],edx
c0011e46:	29 0b                	sub    DWORD PTR [ebx],ecx
c0011e48:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0011e4b:	eb 05                	jmp    c0011e52 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0011e4d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011e50:	31 c0                	xor    eax,eax
c0011e52:	5b                   	pop    ebx
c0011e53:	5e                   	pop    esi
c0011e54:	5f                   	pop    edi
c0011e55:	c3                   	ret    

c0011e56 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0011e56:	83 ec 40             	sub    esp,0x40
c0011e59:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011e5d:	50                   	push   eax
c0011e5e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e62:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e66:	e8 cd f9 ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e6b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011e6f:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0011e73:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0011e77:	89 10                	mov    DWORD PTR [eax],edx
c0011e79:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0011e7c:	83 c4 4c             	add    esp,0x4c
c0011e7f:	c3                   	ret    

c0011e80 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0011e80:	55                   	push   ebp
c0011e81:	57                   	push   edi
c0011e82:	56                   	push   esi
c0011e83:	53                   	push   ebx
c0011e84:	83 ec 40             	sub    esp,0x40
c0011e87:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0011e8b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0011e8f:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0011e93:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0011e97:	53                   	push   ebx
c0011e98:	56                   	push   esi
c0011e99:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011e9d:	e8 96 f9 ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ea2:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0011ea6:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0011eaa:	83 c4 0c             	add    esp,0xc
c0011ead:	53                   	push   ebx
c0011eae:	56                   	push   esi
c0011eaf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011eb3:	e8 d6 fa ff ff       	call   c001198e <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011eb8:	83 c4 4c             	add    esp,0x4c
c0011ebb:	5b                   	pop    ebx
c0011ebc:	5e                   	pop    esi
c0011ebd:	5f                   	pop    edi
c0011ebe:	5d                   	pop    ebp
c0011ebf:	c3                   	ret    

c0011ec0 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0011ec0:	55                   	push   ebp
c0011ec1:	57                   	push   edi
c0011ec2:	56                   	push   esi
c0011ec3:	31 f6                	xor    esi,esi
c0011ec5:	53                   	push   ebx
c0011ec6:	31 db                	xor    ebx,ebx
c0011ec8:	83 ec 40             	sub    esp,0x40
c0011ecb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011ed3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011edb:	6a 12                	push   0x12
c0011edd:	68 ee 00 00 00       	push   0xee
c0011ee2:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0011ee6:	e8 d5 e5 fe ff       	call   c00004c0 <memset>
c0011eeb:	83 c4 10             	add    esp,0x10
c0011eee:	6a 08                	push   0x8
c0011ef0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011ef4:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0011ef8:	50                   	push   eax
c0011ef9:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011efd:	57                   	push   edi
c0011efe:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0011f02:	55                   	push   ebp
c0011f03:	e8 e7 fe ff ff       	call   c0011def <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0011f08:	83 c4 10             	add    esp,0x10
c0011f0b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0011f0f:	50                   	push   eax
c0011f10:	6a 06                	push   0x6
c0011f12:	57                   	push   edi
c0011f13:	55                   	push   ebp
c0011f14:	e8 06 ff ff ff       	call   c0011e1f <CmGetShift(unsigned int*, int*, int, bool*)>
c0011f19:	83 c4 10             	add    esp,0x10
c0011f1c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011f21:	74 07                	je     c0011f2a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0011f23:	46                   	inc    esi
c0011f24:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0011f28:	eb e1                	jmp    c0011f0b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0011f2a:	43                   	inc    ebx
c0011f2b:	83 fb 12             	cmp    ebx,0x12
c0011f2e:	75 be                	jne    c0011eee <CmConvertFromInternalFilename(unsigned char const*, char*)+0x2e>
c0011f30:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011f34:	31 db                	xor    ebx,ebx
c0011f36:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011f39:	50                   	push   eax
c0011f3a:	50                   	push   eax
c0011f3b:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0011f40:	43                   	inc    ebx
c0011f41:	8d 04 85 40 19 02 c0 	lea    eax,[eax*4-0x3ffde6c0]
c0011f48:	50                   	push   eax
c0011f49:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0011f4d:	e8 5e e8 fe ff       	call   c00007b0 <strcat>
c0011f52:	83 c4 10             	add    esp,0x10
c0011f55:	83 fb 18             	cmp    ebx,0x18
c0011f58:	75 df                	jne    c0011f39 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0011f5a:	83 c4 3c             	add    esp,0x3c
c0011f5d:	31 c0                	xor    eax,eax
c0011f5f:	5b                   	pop    ebx
c0011f60:	5e                   	pop    esi
c0011f61:	5f                   	pop    edi
c0011f62:	5d                   	pop    ebp
c0011f63:	c3                   	ret    

c0011f64 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0011f64:	83 ec 40             	sub    esp,0x40
c0011f67:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011f6b:	50                   	push   eax
c0011f6c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f70:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f74:	e8 bf f8 ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f79:	58                   	pop    eax
c0011f7a:	5a                   	pop    edx
c0011f7b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0011f7f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0011f83:	50                   	push   eax
c0011f84:	e8 37 ff ff ff       	call   c0011ec0 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0011f89:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0011f8e:	83 c4 4c             	add    esp,0x4c
c0011f91:	c3                   	ret    

c0011f92 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0011f92:	55                   	push   ebp
c0011f93:	57                   	push   edi
c0011f94:	56                   	push   esi
c0011f95:	53                   	push   ebx
c0011f96:	31 db                	xor    ebx,ebx
c0011f98:	83 ec 70             	sub    esp,0x70
c0011f9b:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0011fa2:	6a 30                	push   0x30
c0011fa4:	6a 00                	push   0x0
c0011fa6:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0011faa:	56                   	push   esi
c0011fab:	e8 10 e5 fe ff       	call   c00004c0 <memset>
c0011fb0:	83 c4 10             	add    esp,0x10
c0011fb3:	83 ec 0c             	sub    esp,0xc
c0011fb6:	57                   	push   edi
c0011fb7:	e8 74 e5 fe ff       	call   c0000530 <strlen>
c0011fbc:	83 c4 10             	add    esp,0x10
c0011fbf:	39 d8                	cmp    eax,ebx
c0011fc1:	76 16                	jbe    c0011fd9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0011fc3:	83 ec 0c             	sub    esp,0xc
c0011fc6:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0011fca:	50                   	push   eax
c0011fcb:	e8 d0 e8 fe ff       	call   c00008a0 <toupper>
c0011fd0:	83 c4 10             	add    esp,0x10
c0011fd3:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0011fd6:	43                   	inc    ebx
c0011fd7:	eb da                	jmp    c0011fb3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0011fd9:	31 f6                	xor    esi,esi
c0011fdb:	52                   	push   edx
c0011fdc:	31 ff                	xor    edi,edi
c0011fde:	6a 18                	push   0x18
c0011fe0:	6a 3f                	push   0x3f
c0011fe2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011fe6:	50                   	push   eax
c0011fe7:	e8 d4 e4 fe ff       	call   c00004c0 <memset>
c0011fec:	83 c4 10             	add    esp,0x10
c0011fef:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0011ff3:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0011ff7:	84 c0                	test   al,al
c0011ff9:	0f 84 b0 00 00 00    	je     c00120af <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0011fff:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012003:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0012008:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001200c:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0012011:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012014:	83 ec 0c             	sub    esp,0xc
c0012017:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c001201b:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c001201f:	53                   	push   ebx
c0012020:	e8 0b e5 fe ff       	call   c0000530 <strlen>
c0012025:	83 c4 10             	add    esp,0x10
c0012028:	85 c0                	test   eax,eax
c001202a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001202e:	74 0b                	je     c001203b <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012030:	50                   	push   eax
c0012031:	6a 01                	push   0x1
c0012033:	53                   	push   ebx
c0012034:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012038:	50                   	push   eax
c0012039:	eb 0a                	jmp    c0012045 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c001203b:	50                   	push   eax
c001203c:	6a 00                	push   0x0
c001203e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012042:	50                   	push   eax
c0012043:	6a 00                	push   0x0
c0012045:	e8 44 fd ff ff       	call   c0011d8e <CmGetMatch(char*, char*, bool, bool*)>
c001204a:	83 c4 10             	add    esp,0x10
c001204d:	83 f8 ff             	cmp    eax,0xffffffff
c0012050:	75 1a                	jne    c001206c <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012052:	83 ec 0c             	sub    esp,0xc
c0012055:	68 c6 04 02 c0       	push   0xc00204c6
c001205a:	e8 68 e3 ff ff       	call   c00103c7 <KePanic(char const*)>
c001205f:	83 c4 10             	add    esp,0x10
c0012062:	b8 02 00 00 00       	mov    eax,0x2
c0012067:	e9 bc 00 00 00       	jmp    c0012128 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001206c:	83 ff 18             	cmp    edi,0x18
c001206f:	75 1a                	jne    c001208b <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012071:	83 ec 0c             	sub    esp,0xc
c0012074:	68 db 04 02 c0       	push   0xc00204db
c0012079:	e8 49 e3 ff ff       	call   c00103c7 <KePanic(char const*)>
c001207e:	83 c4 10             	add    esp,0x10
c0012081:	b8 01 00 00 00       	mov    eax,0x1
c0012086:	e9 9d 00 00 00       	jmp    c0012128 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001208b:	47                   	inc    edi
c001208c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012091:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012095:	74 02                	je     c0012099 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0012097:	89 ee                	mov    esi,ebp
c0012099:	83 ec 0c             	sub    esp,0xc
c001209c:	53                   	push   ebx
c001209d:	e8 8e e4 fe ff       	call   c0000530 <strlen>
c00120a2:	83 c4 10             	add    esp,0x10
c00120a5:	85 c0                	test   eax,eax
c00120a7:	74 06                	je     c00120af <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00120a9:	46                   	inc    esi
c00120aa:	e9 40 ff ff ff       	jmp    c0011fef <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00120af:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00120b7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00120bf:	31 f6                	xor    esi,esi
c00120c1:	50                   	push   eax
c00120c2:	31 ff                	xor    edi,edi
c00120c4:	6a 12                	push   0x12
c00120c6:	68 ee 00 00 00       	push   0xee
c00120cb:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00120d2:	e8 e9 e3 fe ff       	call   c00004c0 <memset>
c00120d7:	83 c4 10             	add    esp,0x10
c00120da:	83 fe 17             	cmp    esi,0x17
c00120dd:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00120e1:	7e 26                	jle    c0012109 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00120e3:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00120e7:	50                   	push   eax
c00120e8:	6a 08                	push   0x8
c00120ea:	55                   	push   ebp
c00120eb:	53                   	push   ebx
c00120ec:	e8 2e fd ff ff       	call   c0011e1f <CmGetShift(unsigned int*, int*, int, bool*)>
c00120f1:	83 c4 10             	add    esp,0x10
c00120f4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00120f9:	74 26                	je     c0012121 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c00120fb:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012102:	4e                   	dec    esi
c0012103:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012106:	47                   	inc    edi
c0012107:	eb 1c                	jmp    c0012125 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0012109:	6a 06                	push   0x6
c001210b:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0012110:	50                   	push   eax
c0012111:	55                   	push   ebp
c0012112:	53                   	push   ebx
c0012113:	e8 d7 fc ff ff       	call   c0011def <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012118:	83 c4 10             	add    esp,0x10
c001211b:	84 c0                	test   al,al
c001211d:	75 06                	jne    c0012125 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c001211f:	eb c2                	jmp    c00120e3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0012121:	31 c0                	xor    eax,eax
c0012123:	eb 03                	jmp    c0012128 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012125:	46                   	inc    esi
c0012126:	eb b2                	jmp    c00120da <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0012128:	83 c4 6c             	add    esp,0x6c
c001212b:	5b                   	pop    ebx
c001212c:	5e                   	pop    esi
c001212d:	5f                   	pop    edi
c001212e:	5d                   	pop    ebp
c001212f:	c3                   	ret    

c0012130 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012130:	53                   	push   ebx
c0012131:	83 ec 3c             	sub    esp,0x3c
c0012134:	6a 2b                	push   0x2b
c0012136:	6a 00                	push   0x0
c0012138:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001213c:	53                   	push   ebx
c001213d:	e8 7e e3 fe ff       	call   c00004c0 <memset>
c0012142:	58                   	pop    eax
c0012143:	5a                   	pop    edx
c0012144:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012148:	50                   	push   eax
c0012149:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001214d:	e8 40 fe ff ff       	call   c0011f92 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012152:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012157:	83 c4 0c             	add    esp,0xc
c001215a:	6a 15                	push   0x15
c001215c:	6a 00                	push   0x0
c001215e:	8d 44 24 27          	lea    eax,[esp+0x27]
c0012162:	50                   	push   eax
c0012163:	e8 58 e3 fe ff       	call   c00004c0 <memset>
c0012168:	53                   	push   ebx
c0012169:	6a 00                	push   0x0
c001216b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001216f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012173:	e8 e6 f9 ff ff       	call   c0011b5e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012178:	83 c4 58             	add    esp,0x58
c001217b:	5b                   	pop    ebx
c001217c:	c3                   	ret    

c001217d <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c001217d:	56                   	push   esi
c001217e:	53                   	push   ebx
c001217f:	83 ec 48             	sub    esp,0x48
c0012182:	6a 12                	push   0x12
c0012184:	68 ff 00 00 00       	push   0xff
c0012189:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001218d:	56                   	push   esi
c001218e:	e8 2d e3 fe ff       	call   c00004c0 <memset>
c0012193:	5a                   	pop    edx
c0012194:	59                   	pop    ecx
c0012195:	56                   	push   esi
c0012196:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001219a:	e8 f3 fd ff ff       	call   c0011f92 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001219f:	83 c4 10             	add    esp,0x10
c00121a2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00121a6:	85 db                	test   ebx,ebx
c00121a8:	74 42                	je     c00121ec <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00121aa:	50                   	push   eax
c00121ab:	8d 44 24 19          	lea    eax,[esp+0x19]
c00121af:	50                   	push   eax
c00121b0:	53                   	push   ebx
c00121b1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00121b5:	e8 7e f6 ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121ba:	83 c4 0c             	add    esp,0xc
c00121bd:	6a 12                	push   0x12
c00121bf:	8d 44 24 21          	lea    eax,[esp+0x21]
c00121c3:	50                   	push   eax
c00121c4:	56                   	push   esi
c00121c5:	e8 b6 e1 fe ff       	call   c0000380 <memcmp>
c00121ca:	83 c4 10             	add    esp,0x10
c00121cd:	85 c0                	test   eax,eax
c00121cf:	74 1e                	je     c00121ef <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00121d1:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00121d6:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00121db:	c1 e3 08             	shl    ebx,0x8
c00121de:	09 d8                	or     eax,ebx
c00121e0:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00121e5:	c1 e3 10             	shl    ebx,0x10
c00121e8:	09 c3                	or     ebx,eax
c00121ea:	eb ba                	jmp    c00121a6 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00121ec:	83 cb ff             	or     ebx,0xffffffff
c00121ef:	89 d8                	mov    eax,ebx
c00121f1:	83 c4 44             	add    esp,0x44
c00121f4:	5b                   	pop    ebx
c00121f5:	5e                   	pop    esi
c00121f6:	c3                   	ret    

c00121f7 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00121f7:	57                   	push   edi
c00121f8:	56                   	push   esi
c00121f9:	53                   	push   ebx
c00121fa:	83 ec 34             	sub    esp,0x34
c00121fd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012201:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012205:	6a 2b                	push   0x2b
c0012207:	6a 00                	push   0x0
c0012209:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001220d:	53                   	push   ebx
c001220e:	e8 ad e2 fe ff       	call   c00004c0 <memset>
c0012213:	58                   	pop    eax
c0012214:	5a                   	pop    edx
c0012215:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012219:	50                   	push   eax
c001221a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001221e:	e8 6f fd ff ff       	call   c0011f92 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012223:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0012227:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001222b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001222f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012233:	53                   	push   ebx
c0012234:	6a 00                	push   0x0
c0012236:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001223a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001223e:	e8 1b f9 ff ff       	call   c0011b5e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012243:	83 c4 50             	add    esp,0x50
c0012246:	5b                   	pop    ebx
c0012247:	5e                   	pop    esi
c0012248:	5f                   	pop    edi
c0012249:	c3                   	ret    

c001224a <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001224a:	57                   	push   edi
c001224b:	56                   	push   esi
c001224c:	53                   	push   ebx
c001224d:	83 ec 34             	sub    esp,0x34
c0012250:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0012254:	6a 2b                	push   0x2b
c0012256:	6a 00                	push   0x0
c0012258:	8d 74 24 11          	lea    esi,[esp+0x11]
c001225c:	56                   	push   esi
c001225d:	e8 5e e2 fe ff       	call   c00004c0 <memset>
c0012262:	58                   	pop    eax
c0012263:	5a                   	pop    edx
c0012264:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012268:	50                   	push   eax
c0012269:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001226d:	e8 20 fd ff ff       	call   c0011f92 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012272:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0012277:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c001227c:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0012281:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0012286:	56                   	push   esi
c0012287:	6a 00                	push   0x0
c0012289:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001228d:	53                   	push   ebx
c001228e:	e8 cb f8 ff ff       	call   c0011b5e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012293:	83 c4 1c             	add    esp,0x1c
c0012296:	89 c7                	mov    edi,eax
c0012298:	56                   	push   esi
c0012299:	50                   	push   eax
c001229a:	53                   	push   ebx
c001229b:	e8 98 f5 ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00122a0:	59                   	pop    ecx
c00122a1:	58                   	pop    eax
c00122a2:	6a 6c                	push   0x6c
c00122a4:	6a 00                	push   0x0
c00122a6:	6a 00                	push   0x0
c00122a8:	68 ec 04 02 c0       	push   0xc00204ec
c00122ad:	57                   	push   edi
c00122ae:	53                   	push   ebx
c00122af:	e8 43 ff ff ff       	call   c00121f7 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00122b4:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00122b8:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00122bc:	c1 e8 10             	shr    eax,0x10
c00122bf:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00122c3:	83 c4 1c             	add    esp,0x1c
c00122c6:	56                   	push   esi
c00122c7:	57                   	push   edi
c00122c8:	53                   	push   ebx
c00122c9:	e8 c0 f6 ff ff       	call   c001198e <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122ce:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00122d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00122d8:	c1 e0 08             	shl    eax,0x8
c00122db:	09 c2                	or     edx,eax
c00122dd:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00122e2:	83 c4 40             	add    esp,0x40
c00122e5:	c1 e0 10             	shl    eax,0x10
c00122e8:	5b                   	pop    ebx
c00122e9:	09 d0                	or     eax,edx
c00122eb:	5e                   	pop    esi
c00122ec:	5f                   	pop    edi
c00122ed:	c3                   	ret    

c00122ee <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00122ee:	57                   	push   edi
c00122ef:	56                   	push   esi
c00122f0:	53                   	push   ebx
c00122f1:	81 ec 08 01 00 00    	sub    esp,0x108
c00122f7:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00122fe:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0012305:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0012309:	53                   	push   ebx
c001230a:	e8 e1 e2 fe ff       	call   c00005f0 <strcpy>
c001230f:	59                   	pop    ecx
c0012310:	5e                   	pop    esi
c0012311:	68 a2 08 02 c0       	push   0xc00208a2
c0012316:	53                   	push   ebx
c0012317:	bb 01 00 00 00       	mov    ebx,0x1
c001231c:	e8 7f e2 fe ff       	call   c00005a0 <strtok>
c0012321:	83 c4 10             	add    esp,0x10
c0012324:	85 c0                	test   eax,eax
c0012326:	74 3b                	je     c0012363 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012328:	52                   	push   edx
c0012329:	50                   	push   eax
c001232a:	6a 01                	push   0x1
c001232c:	57                   	push   edi
c001232d:	e8 4b fe ff ff       	call   c001217d <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0012332:	59                   	pop    ecx
c0012333:	89 c3                	mov    ebx,eax
c0012335:	5e                   	pop    esi
c0012336:	68 a2 08 02 c0       	push   0xc00208a2
c001233b:	6a 00                	push   0x0
c001233d:	e8 5e e2 fe ff       	call   c00005a0 <strtok>
c0012342:	83 c4 10             	add    esp,0x10
c0012345:	89 c6                	mov    esi,eax
c0012347:	85 c0                	test   eax,eax
c0012349:	74 18                	je     c0012363 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001234b:	52                   	push   edx
c001234c:	52                   	push   edx
c001234d:	53                   	push   ebx
c001234e:	57                   	push   edi
c001234f:	e8 c9 f5 ff ff       	call   c001191d <CmEnterDirectory(Reghive_Tag*, int)>
c0012354:	83 c4 10             	add    esp,0x10
c0012357:	89 c3                	mov    ebx,eax
c0012359:	83 f8 ff             	cmp    eax,0xffffffff
c001235c:	74 05                	je     c0012363 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001235e:	50                   	push   eax
c001235f:	56                   	push   esi
c0012360:	53                   	push   ebx
c0012361:	eb c9                	jmp    c001232c <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012363:	81 c4 00 01 00 00    	add    esp,0x100
c0012369:	89 d8                	mov    eax,ebx
c001236b:	5b                   	pop    ebx
c001236c:	5e                   	pop    esi
c001236d:	5f                   	pop    edi
c001236e:	c3                   	ret    

c001236f <CmDisplayTree(Reghive_Tag*, int, int)>:
c001236f:	55                   	push   ebp
c0012370:	57                   	push   edi
c0012371:	56                   	push   esi
c0012372:	53                   	push   ebx
c0012373:	83 ec 5c             	sub    esp,0x5c
c0012376:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c001237a:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c001237e:	85 db                	test   ebx,ebx
c0012380:	0f 8e 84 00 00 00    	jle    c001240a <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012386:	31 ed                	xor    ebp,ebp
c0012388:	57                   	push   edi
c0012389:	6a 32                	push   0x32
c001238b:	6a 00                	push   0x0
c001238d:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012391:	57                   	push   edi
c0012392:	e8 29 e1 fe ff       	call   c00004c0 <memset>
c0012397:	83 c4 0c             	add    esp,0xc
c001239a:	57                   	push   edi
c001239b:	53                   	push   ebx
c001239c:	56                   	push   esi
c001239d:	e8 c2 fb ff ff       	call   c0011f64 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00123a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123a6:	83 c4 10             	add    esp,0x10
c00123a9:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00123ad:	7d 13                	jge    c00123c2 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00123af:	83 ec 0c             	sub    esp,0xc
c00123b2:	45                   	inc    ebp
c00123b3:	68 10 0c 02 c0       	push   0xc0020c10
c00123b8:	e8 49 82 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00123bd:	83 c4 10             	add    esp,0x10
c00123c0:	eb e7                	jmp    c00123a9 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00123c2:	51                   	push   ecx
c00123c3:	57                   	push   edi
c00123c4:	53                   	push   ebx
c00123c5:	68 f2 04 02 c0       	push   0xc00204f2
c00123ca:	e8 37 82 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00123cf:	83 c4 10             	add    esp,0x10
c00123d2:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00123d7:	75 1e                	jne    c00123f7 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00123d9:	52                   	push   edx
c00123da:	52                   	push   edx
c00123db:	53                   	push   ebx
c00123dc:	56                   	push   esi
c00123dd:	e8 3b f5 ff ff       	call   c001191d <CmEnterDirectory(Reghive_Tag*, int)>
c00123e2:	83 c4 0c             	add    esp,0xc
c00123e5:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00123e9:	8d 51 04             	lea    edx,[ecx+0x4]
c00123ec:	52                   	push   edx
c00123ed:	50                   	push   eax
c00123ee:	56                   	push   esi
c00123ef:	e8 7b ff ff ff       	call   c001236f <CmDisplayTree(Reghive_Tag*, int, int)>
c00123f4:	83 c4 10             	add    esp,0x10
c00123f7:	50                   	push   eax
c00123f8:	50                   	push   eax
c00123f9:	53                   	push   ebx
c00123fa:	56                   	push   esi
c00123fb:	e8 5c f5 ff ff       	call   c001195c <CmGetNext(Reghive_Tag*, int)>
c0012400:	83 c4 10             	add    esp,0x10
c0012403:	89 c3                	mov    ebx,eax
c0012405:	e9 74 ff ff ff       	jmp    c001237e <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c001240a:	83 c4 5c             	add    esp,0x5c
c001240d:	5b                   	pop    ebx
c001240e:	5e                   	pop    esi
c001240f:	5f                   	pop    edi
c0012410:	5d                   	pop    ebp
c0012411:	c3                   	ret    

c0012412 <CmSplitFinalSlashInPlace(char*)>:
c0012412:	53                   	push   ebx
c0012413:	83 ec 14             	sub    esp,0x14
c0012416:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001241a:	53                   	push   ebx
c001241b:	e8 10 e1 fe ff       	call   c0000530 <strlen>
c0012420:	83 c4 10             	add    esp,0x10
c0012423:	48                   	dec    eax
c0012424:	85 c0                	test   eax,eax
c0012426:	74 15                	je     c001243d <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012428:	8d 14 03             	lea    edx,[ebx+eax*1]
c001242b:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001242f:	75 09                	jne    c001243a <CmSplitFinalSlashInPlace(char*)+0x28>
c0012431:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012434:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012438:	eb 05                	jmp    c001243f <CmSplitFinalSlashInPlace(char*)+0x2d>
c001243a:	48                   	dec    eax
c001243b:	eb e7                	jmp    c0012424 <CmSplitFinalSlashInPlace(char*)+0x12>
c001243d:	31 c0                	xor    eax,eax
c001243f:	83 c4 08             	add    esp,0x8
c0012442:	5b                   	pop    ebx
c0012443:	c3                   	ret    

c0012444 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012444:	55                   	push   ebp
c0012445:	57                   	push   edi
c0012446:	56                   	push   esi
c0012447:	53                   	push   ebx
c0012448:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001244e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0012455:	8a 1e                	mov    bl,BYTE PTR [esi]
c0012457:	8d 6e 01             	lea    ebp,[esi+0x1]
c001245a:	80 fb 40             	cmp    bl,0x40
c001245d:	75 1b                	jne    c001247a <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001245f:	8a 16                	mov    dl,BYTE PTR [esi]
c0012461:	84 d2                	test   dl,dl
c0012463:	0f 84 f1 00 00 00    	je     c001255a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012469:	8d 46 01             	lea    eax,[esi+0x1]
c001246c:	80 fa 3a             	cmp    dl,0x3a
c001246f:	74 04                	je     c0012475 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0012471:	89 c6                	mov    esi,eax
c0012473:	eb ea                	jmp    c001245f <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012475:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012478:	89 c6                	mov    esi,eax
c001247a:	50                   	push   eax
c001247b:	6a 40                	push   0x40
c001247d:	6a 00                	push   0x0
c001247f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012483:	50                   	push   eax
c0012484:	e8 37 e0 fe ff       	call   c00004c0 <memset>
c0012489:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012490:	31 c0                	xor    eax,eax
c0012492:	83 c4 10             	add    esp,0x10
c0012495:	8a 0f                	mov    cl,BYTE PTR [edi]
c0012497:	84 c9                	test   cl,cl
c0012499:	0f 84 bb 00 00 00    	je     c001255a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001249f:	3d c7 00 00 00       	cmp    eax,0xc7
c00124a4:	0f 8f b0 00 00 00    	jg     c001255a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00124aa:	80 f9 0a             	cmp    cl,0xa
c00124ad:	0f 85 98 00 00 00    	jne    c001254b <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00124b3:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00124b8:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00124bc:	a8 df                	test   al,0xdf
c00124be:	0f 94 c1             	sete   cl
c00124c1:	3c 23                	cmp    al,0x23
c00124c3:	0f 94 c2             	sete   dl
c00124c6:	08 d1                	or     cl,dl
c00124c8:	75 4a                	jne    c0012514 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00124ca:	8d 50 f7             	lea    edx,[eax-0x9]
c00124cd:	80 fa 01             	cmp    dl,0x1
c00124d0:	76 42                	jbe    c0012514 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00124d2:	3c 5b                	cmp    al,0x5b
c00124d4:	75 42                	jne    c0012518 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00124d6:	80 fb 40             	cmp    bl,0x40
c00124d9:	75 39                	jne    c0012514 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00124db:	83 ec 0c             	sub    esp,0xc
c00124de:	8d 54 24 65          	lea    edx,[esp+0x65]
c00124e2:	52                   	push   edx
c00124e3:	e8 48 e0 fe ff       	call   c0000530 <strlen>
c00124e8:	83 c4 10             	add    esp,0x10
c00124eb:	83 f8 3f             	cmp    eax,0x3f
c00124ee:	77 6a                	ja     c001255a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00124f0:	50                   	push   eax
c00124f1:	50                   	push   eax
c00124f2:	8d 54 24 61          	lea    edx,[esp+0x61]
c00124f6:	52                   	push   edx
c00124f7:	8d 54 24 24          	lea    edx,[esp+0x24]
c00124fb:	52                   	push   edx
c00124fc:	e8 ef e0 fe ff       	call   c00005f0 <strcpy>
c0012501:	58                   	pop    eax
c0012502:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012506:	52                   	push   edx
c0012507:	e8 24 e0 fe ff       	call   c0000530 <strlen>
c001250c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012511:	83 c4 10             	add    esp,0x10
c0012514:	31 d2                	xor    edx,edx
c0012516:	eb 3a                	jmp    c0012552 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0012518:	80 fb 40             	cmp    bl,0x40
c001251b:	74 06                	je     c0012523 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001251d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012521:	eb 20                	jmp    c0012543 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0012523:	50                   	push   eax
c0012524:	50                   	push   eax
c0012525:	55                   	push   ebp
c0012526:	8d 44 24 24          	lea    eax,[esp+0x24]
c001252a:	50                   	push   eax
c001252b:	e8 a0 e1 fe ff       	call   c00006d0 <strcmp>
c0012530:	83 c4 10             	add    esp,0x10
c0012533:	85 c0                	test   eax,eax
c0012535:	75 dd                	jne    c0012514 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012537:	eb e4                	jmp    c001251d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0012539:	8d 50 01             	lea    edx,[eax+0x1]
c001253c:	80 f9 3d             	cmp    cl,0x3d
c001253f:	74 1d                	je     c001255e <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0012541:	89 d0                	mov    eax,edx
c0012543:	8a 08                	mov    cl,BYTE PTR [eax]
c0012545:	84 c9                	test   cl,cl
c0012547:	75 f0                	jne    c0012539 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0012549:	eb 0f                	jmp    c001255a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001254b:	8d 50 01             	lea    edx,[eax+0x1]
c001254e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012552:	47                   	inc    edi
c0012553:	89 d0                	mov    eax,edx
c0012555:	e9 3b ff ff ff       	jmp    c0012495 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001255a:	31 c0                	xor    eax,eax
c001255c:	eb 33                	jmp    c0012591 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001255e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012562:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012565:	50                   	push   eax
c0012566:	50                   	push   eax
c0012567:	8d 44 24 60          	lea    eax,[esp+0x60]
c001256b:	50                   	push   eax
c001256c:	56                   	push   esi
c001256d:	e8 5e e1 fe ff       	call   c00006d0 <strcmp>
c0012572:	83 c4 10             	add    esp,0x10
c0012575:	85 c0                	test   eax,eax
c0012577:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001257b:	75 97                	jne    c0012514 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001257d:	51                   	push   ecx
c001257e:	51                   	push   ecx
c001257f:	52                   	push   edx
c0012580:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012587:	e8 64 e0 fe ff       	call   c00005f0 <strcpy>
c001258c:	83 c4 10             	add    esp,0x10
c001258f:	b0 01                	mov    al,0x1
c0012591:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012597:	5b                   	pop    ebx
c0012598:	5e                   	pop    esi
c0012599:	5f                   	pop    edi
c001259a:	5d                   	pop    ebp
c001259b:	c3                   	ret    

c001259c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001259c:	57                   	push   edi
c001259d:	56                   	push   esi
c001259e:	53                   	push   ebx
c001259f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00125a5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00125ac:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00125b3:	53                   	push   ebx
c00125b4:	e8 77 df fe ff       	call   c0000530 <strlen>
c00125b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00125bc:	89 c7                	mov    edi,eax
c00125be:	e8 6d df fe ff       	call   c0000530 <strlen>
c00125c3:	83 c4 10             	add    esp,0x10
c00125c6:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00125ca:	3d ff 00 00 00       	cmp    eax,0xff
c00125cf:	0f 87 d3 00 00 00    	ja     c00126a8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00125d5:	57                   	push   edi
c00125d6:	57                   	push   edi
c00125d7:	56                   	push   esi
c00125d8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00125dc:	56                   	push   esi
c00125dd:	e8 0e e0 fe ff       	call   c00005f0 <strcpy>
c00125e2:	58                   	pop    eax
c00125e3:	5a                   	pop    edx
c00125e4:	68 a2 08 02 c0       	push   0xc00208a2
c00125e9:	56                   	push   esi
c00125ea:	e8 c1 e1 fe ff       	call   c00007b0 <strcat>
c00125ef:	59                   	pop    ecx
c00125f0:	5f                   	pop    edi
c00125f1:	53                   	push   ebx
c00125f2:	56                   	push   esi
c00125f3:	e8 b8 e1 fe ff       	call   c00007b0 <strcat>
c00125f8:	58                   	pop    eax
c00125f9:	5a                   	pop    edx
c00125fa:	68 fc 04 02 c0       	push   0xc00204fc
c00125ff:	56                   	push   esi
c0012600:	e8 ab e1 fe ff       	call   c00007b0 <strcat>
c0012605:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001260c:	e8 54 52 ff ff       	call   c0007865 <malloc>
c0012611:	83 c4 0c             	add    esp,0xc
c0012614:	89 c3                	mov    ebx,eax
c0012616:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c001261c:	56                   	push   esi
c001261d:	50                   	push   eax
c001261e:	e8 59 85 ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c0012623:	83 c4 10             	add    esp,0x10
c0012626:	85 db                	test   ebx,ebx
c0012628:	74 7e                	je     c00126a8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001262a:	51                   	push   ecx
c001262b:	51                   	push   ecx
c001262c:	6a 01                	push   0x1
c001262e:	53                   	push   ebx
c001262f:	e8 08 86 ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c0012634:	83 c4 10             	add    esp,0x10
c0012637:	85 c0                	test   eax,eax
c0012639:	74 08                	je     c0012643 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001263b:	83 ec 0c             	sub    esp,0xc
c001263e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012640:	53                   	push   ebx
c0012641:	eb 5f                	jmp    c00126a2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012643:	52                   	push   edx
c0012644:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012648:	50                   	push   eax
c0012649:	8d 44 24 20          	lea    eax,[esp+0x20]
c001264d:	50                   	push   eax
c001264e:	53                   	push   ebx
c001264f:	e8 94 88 ff ff       	call   c000aee8 <File::stat(unsigned long long*, bool*)>
c0012654:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012658:	83 c4 10             	add    esp,0x10
c001265b:	89 c1                	mov    ecx,eax
c001265d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012661:	74 31                	je     c0012694 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012663:	83 ec 0c             	sub    esp,0xc
c0012666:	50                   	push   eax
c0012667:	e8 f9 51 ff ff       	call   c0007865 <malloc>
c001266c:	89 c6                	mov    esi,eax
c001266e:	58                   	pop    eax
c001266f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012671:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012675:	52                   	push   edx
c0012676:	56                   	push   esi
c0012677:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001267b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001267f:	53                   	push   ebx
c0012680:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012683:	83 c4 20             	add    esp,0x20
c0012686:	85 c0                	test   eax,eax
c0012688:	75 0a                	jne    c0012694 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001268a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001268e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012692:	74 18                	je     c00126ac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012694:	83 ec 0c             	sub    esp,0xc
c0012697:	53                   	push   ebx
c0012698:	e8 fd 85 ff ff       	call   c000ac9a <File::close()>
c001269d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001269f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00126a5:	83 c4 10             	add    esp,0x10
c00126a8:	31 c0                	xor    eax,eax
c00126aa:	eb 3b                	jmp    c00126e7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00126ac:	83 ec 0c             	sub    esp,0xc
c00126af:	53                   	push   ebx
c00126b0:	e8 e5 85 ff ff       	call   c000ac9a <File::close()>
c00126b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00126bd:	83 c4 0c             	add    esp,0xc
c00126c0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00126c7:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00126ce:	56                   	push   esi
c00126cf:	e8 70 fd ff ff       	call   c0012444 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00126d4:	89 34 24             	mov    DWORD PTR [esp],esi
c00126d7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00126db:	e8 95 51 ff ff       	call   c0007875 <free>
c00126e0:	83 c4 10             	add    esp,0x10
c00126e3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00126e7:	81 c4 20 01 00 00    	add    esp,0x120
c00126ed:	5b                   	pop    ebx
c00126ee:	5e                   	pop    esi
c00126ef:	5f                   	pop    edi
c00126f0:	c3                   	ret    

c00126f1 <Reg::getLine(char*, char*, char*)>:
c00126f1:	57                   	push   edi
c00126f2:	56                   	push   esi
c00126f3:	53                   	push   ebx
c00126f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00126f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00126fc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012700:	57                   	push   edi
c0012701:	56                   	push   esi
c0012702:	53                   	push   ebx
c0012703:	68 01 05 02 c0       	push   0xc0020501
c0012708:	e8 8f fe ff ff       	call   c001259c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001270d:	83 c4 10             	add    esp,0x10
c0012710:	84 c0                	test   al,al
c0012712:	75 10                	jne    c0012724 <Reg::getLine(char*, char*, char*)+0x33>
c0012714:	57                   	push   edi
c0012715:	56                   	push   esi
c0012716:	53                   	push   ebx
c0012717:	68 26 05 02 c0       	push   0xc0020526
c001271c:	e8 7b fe ff ff       	call   c001259c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012721:	83 c4 10             	add    esp,0x10
c0012724:	5b                   	pop    ebx
c0012725:	5e                   	pop    esi
c0012726:	5f                   	pop    edi
c0012727:	c3                   	ret    

c0012728 <Reg::readInt(char*, char*, int*)>:
c0012728:	55                   	push   ebp
c0012729:	57                   	push   edi
c001272a:	56                   	push   esi
c001272b:	53                   	push   ebx
c001272c:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012732:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0012736:	57                   	push   edi
c0012737:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001273e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012745:	e8 a7 ff ff ff       	call   c00126f1 <Reg::getLine(char*, char*, char*)>
c001274a:	83 c4 10             	add    esp,0x10
c001274d:	84 c0                	test   al,al
c001274f:	0f 84 b3 00 00 00    	je     c0012808 <Reg::readInt(char*, char*, int*)+0xe0>
c0012755:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0012759:	80 fa 2b             	cmp    dl,0x2b
c001275c:	74 0c                	je     c001276a <Reg::readInt(char*, char*, int*)+0x42>
c001275e:	80 fa 2d             	cmp    dl,0x2d
c0012761:	75 0e                	jne    c0012771 <Reg::readInt(char*, char*, int*)+0x49>
c0012763:	ba 01 00 00 00       	mov    edx,0x1
c0012768:	eb 0b                	jmp    c0012775 <Reg::readInt(char*, char*, int*)+0x4d>
c001276a:	ba 01 00 00 00       	mov    edx,0x1
c001276f:	eb 02                	jmp    c0012773 <Reg::readInt(char*, char*, int*)+0x4b>
c0012771:	31 d2                	xor    edx,edx
c0012773:	31 c0                	xor    eax,eax
c0012775:	be 0a 00 00 00       	mov    esi,0xa
c001277a:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001277f:	75 20                	jne    c00127a1 <Reg::readInt(char*, char*, int*)+0x79>
c0012781:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0012785:	80 f9 78             	cmp    cl,0x78
c0012788:	75 0a                	jne    c0012794 <Reg::readInt(char*, char*, int*)+0x6c>
c001278a:	83 c2 02             	add    edx,0x2
c001278d:	be 10 00 00 00       	mov    esi,0x10
c0012792:	eb 0d                	jmp    c00127a1 <Reg::readInt(char*, char*, int*)+0x79>
c0012794:	80 f9 62             	cmp    cl,0x62
c0012797:	75 08                	jne    c00127a1 <Reg::readInt(char*, char*, int*)+0x79>
c0012799:	83 c2 02             	add    edx,0x2
c001279c:	be 02 00 00 00       	mov    esi,0x2
c00127a1:	01 d7                	add    edi,edx
c00127a3:	31 d2                	xor    edx,edx
c00127a5:	8a 1f                	mov    bl,BYTE PTR [edi]
c00127a7:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00127ab:	80 fb 0d             	cmp    bl,0xd
c00127ae:	0f 94 c3             	sete   bl
c00127b1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00127b6:	0f 94 c1             	sete   cl
c00127b9:	08 cb                	or     bl,cl
c00127bb:	75 3a                	jne    c00127f7 <Reg::readInt(char*, char*, int*)+0xcf>
c00127bd:	0f af d6             	imul   edx,esi
c00127c0:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00127c5:	83 fe 10             	cmp    esi,0x10
c00127c8:	75 26                	jne    c00127f0 <Reg::readInt(char*, char*, int*)+0xc8>
c00127ca:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00127ce:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00127d1:	89 e9                	mov    ecx,ebp
c00127d3:	80 f9 05             	cmp    cl,0x5
c00127d6:	77 06                	ja     c00127de <Reg::readInt(char*, char*, int*)+0xb6>
c00127d8:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00127dc:	eb 16                	jmp    c00127f4 <Reg::readInt(char*, char*, int*)+0xcc>
c00127de:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00127e2:	83 e9 61             	sub    ecx,0x61
c00127e5:	80 f9 05             	cmp    cl,0x5
c00127e8:	77 06                	ja     c00127f0 <Reg::readInt(char*, char*, int*)+0xc8>
c00127ea:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00127ee:	eb 04                	jmp    c00127f4 <Reg::readInt(char*, char*, int*)+0xcc>
c00127f0:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00127f4:	47                   	inc    edi
c00127f5:	eb ae                	jmp    c00127a5 <Reg::readInt(char*, char*, int*)+0x7d>
c00127f7:	84 c0                	test   al,al
c00127f9:	74 02                	je     c00127fd <Reg::readInt(char*, char*, int*)+0xd5>
c00127fb:	f7 da                	neg    edx
c00127fd:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012804:	89 10                	mov    DWORD PTR [eax],edx
c0012806:	88 d8                	mov    al,bl
c0012808:	81 c4 ec 00 00 00    	add    esp,0xec
c001280e:	5b                   	pop    ebx
c001280f:	5e                   	pop    esi
c0012810:	5f                   	pop    edi
c0012811:	5d                   	pop    ebp
c0012812:	c3                   	ret    

c0012813 <Reg::readString(char*, char*, char*, int)>:
c0012813:	57                   	push   edi
c0012814:	56                   	push   esi
c0012815:	53                   	push   ebx
c0012816:	81 ec d4 00 00 00    	sub    esp,0xd4
c001281c:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012823:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012827:	57                   	push   edi
c0012828:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001282f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012836:	e8 b6 fe ff ff       	call   c00126f1 <Reg::getLine(char*, char*, char*)>
c001283b:	83 c4 10             	add    esp,0x10
c001283e:	89 c6                	mov    esi,eax
c0012840:	84 c0                	test   al,al
c0012842:	74 44                	je     c0012888 <Reg::readString(char*, char*, char*, int)+0x75>
c0012844:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001284b:	31 c0                	xor    eax,eax
c001284d:	4a                   	dec    edx
c001284e:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012851:	84 c9                	test   cl,cl
c0012853:	74 0f                	je     c0012864 <Reg::readString(char*, char*, char*, int)+0x51>
c0012855:	39 c2                	cmp    edx,eax
c0012857:	7e 0b                	jle    c0012864 <Reg::readString(char*, char*, char*, int)+0x51>
c0012859:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001285c:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012861:	40                   	inc    eax
c0012862:	eb ea                	jmp    c001284e <Reg::readString(char*, char*, char*, int)+0x3b>
c0012864:	83 ec 0c             	sub    esp,0xc
c0012867:	53                   	push   ebx
c0012868:	e8 c3 dc fe ff       	call   c0000530 <strlen>
c001286d:	83 c4 10             	add    esp,0x10
c0012870:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012875:	75 11                	jne    c0012888 <Reg::readString(char*, char*, char*, int)+0x75>
c0012877:	83 ec 0c             	sub    esp,0xc
c001287a:	53                   	push   ebx
c001287b:	e8 b0 dc fe ff       	call   c0000530 <strlen>
c0012880:	83 c4 10             	add    esp,0x10
c0012883:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012888:	81 c4 d0 00 00 00    	add    esp,0xd0
c001288e:	89 f0                	mov    eax,esi
c0012890:	5b                   	pop    ebx
c0012891:	5e                   	pop    esi
c0012892:	5f                   	pop    edi
c0012893:	c3                   	ret    

c0012894 <Reg::readBool(char*, char*, bool*)>:
c0012894:	83 ec 20             	sub    esp,0x20
c0012897:	8d 44 24 10          	lea    eax,[esp+0x10]
c001289b:	50                   	push   eax
c001289c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128a4:	e8 7f fe ff ff       	call   c0012728 <Reg::readInt(char*, char*, int*)>
c00128a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00128ae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00128b2:	0f 95 02             	setne  BYTE PTR [edx]
c00128b5:	83 c4 2c             	add    esp,0x2c
c00128b8:	c3                   	ret    

c00128b9 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00128b9:	53                   	push   ebx
c00128ba:	83 ec 1c             	sub    esp,0x1c
c00128bd:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00128c1:	8d 44 24 13          	lea    eax,[esp+0x13]
c00128c5:	50                   	push   eax
c00128c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128ce:	e8 c1 ff ff ff       	call   c0012894 <Reg::readBool(char*, char*, bool*)>
c00128d3:	83 c4 10             	add    esp,0x10
c00128d6:	84 c0                	test   al,al
c00128d8:	74 04                	je     c00128de <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00128da:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00128de:	88 d8                	mov    al,bl
c00128e0:	83 c4 18             	add    esp,0x18
c00128e3:	5b                   	pop    ebx
c00128e4:	c3                   	ret    

c00128e5 <Reg::readIntWithDefault(char*, char*, int)>:
c00128e5:	53                   	push   ebx
c00128e6:	83 ec 1c             	sub    esp,0x1c
c00128e9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00128ed:	8d 44 24 10          	lea    eax,[esp+0x10]
c00128f1:	50                   	push   eax
c00128f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128fa:	e8 29 fe ff ff       	call   c0012728 <Reg::readInt(char*, char*, int*)>
c00128ff:	83 c4 10             	add    esp,0x10
c0012902:	84 c0                	test   al,al
c0012904:	74 04                	je     c001290a <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012906:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001290a:	89 d8                	mov    eax,ebx
c001290c:	83 c4 18             	add    esp,0x18
c001290f:	5b                   	pop    ebx
c0012910:	c3                   	ret    

c0012911 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012911:	57                   	push   edi
c0012912:	56                   	push   esi
c0012913:	56                   	push   esi
c0012914:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012918:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001291c:	56                   	push   esi
c001291d:	57                   	push   edi
c001291e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012926:	e8 e8 fe ff ff       	call   c0012813 <Reg::readString(char*, char*, char*, int)>
c001292b:	83 c4 10             	add    esp,0x10
c001292e:	84 c0                	test   al,al
c0012930:	75 1a                	jne    c001294c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012932:	51                   	push   ecx
c0012933:	56                   	push   esi
c0012934:	6a 00                	push   0x0
c0012936:	57                   	push   edi
c0012937:	e8 84 db fe ff       	call   c00004c0 <memset>
c001293c:	8d 4e ff             	lea    ecx,[esi-0x1]
c001293f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012943:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012945:	83 c4 10             	add    esp,0x10
c0012948:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001294c:	89 f8                	mov    eax,edi
c001294e:	5a                   	pop    edx
c001294f:	5e                   	pop    esi
c0012950:	5f                   	pop    edi
c0012951:	c3                   	ret    

c0012952 <SysEject(regs*)>:
c0012952:	83 ec 0c             	sub    esp,0xc
c0012955:	83 ca ff             	or     edx,0xffffffff
c0012958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001295c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001295f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012964:	83 e9 41             	sub    ecx,0x41
c0012967:	83 f9 19             	cmp    ecx,0x19
c001296a:	77 18                	ja     c0012984 <SysEject(regs*)+0x32>
c001296c:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c0012973:	85 c9                	test   ecx,ecx
c0012975:	74 0d                	je     c0012984 <SysEject(regs*)+0x32>
c0012977:	83 ec 0c             	sub    esp,0xc
c001297a:	51                   	push   ecx
c001297b:	e8 6c a3 ff ff       	call   c000ccec <LogicalDisk::eject()>
c0012980:	83 c4 10             	add    esp,0x10
c0012983:	99                   	cdq    
c0012984:	83 c4 0c             	add    esp,0xc
c0012987:	c3                   	ret    

c0012988 <SysExit(regs*)>:
c0012988:	83 ec 18             	sub    esp,0x18
c001298b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001298f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012992:	e8 69 29 00 00       	call   c0015300 <terminateTask(int)>
c0012997:	83 c8 ff             	or     eax,0xffffffff
c001299a:	83 c4 1c             	add    esp,0x1c
c001299d:	89 c2                	mov    edx,eax
c001299f:	c3                   	ret    

c00129a0 <SysGetCwd(regs*)>:
c00129a0:	83 ec 10             	sub    esp,0x10
c00129a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00129a7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00129aa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00129ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129b2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00129b5:	e8 c4 7f ff ff       	call   c000a97e <Fs::getcwd(Process*, char*, int)>
c00129ba:	83 c4 1c             	add    esp,0x1c
c00129bd:	99                   	cdq    
c00129be:	c3                   	ret    

c00129bf <SysGetPID(regs*)>:
c00129bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00129c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00129c9:	99                   	cdq    
c00129ca:	c3                   	ret    

c00129cb <SysGetRAMData(regs*)>:
c00129cb:	8b 0d e8 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ee8
c00129d1:	69 05 e4 3e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0023ee4,0xc8
c00129db:	99                   	cdq    
c00129dc:	f7 f9                	idiv   ecx
c00129de:	c1 e0 18             	shl    eax,0x18
c00129e1:	09 c8                	or     eax,ecx
c00129e3:	99                   	cdq    
c00129e4:	c3                   	ret    

c00129e5 <SysGetVGAPtr(regs*)>:
c00129e5:	55                   	push   ebp
c00129e6:	57                   	push   edi
c00129e7:	56                   	push   esi
c00129e8:	53                   	push   ebx
c00129e9:	83 ec 18             	sub    esp,0x18
c00129ec:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00129f0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00129f3:	e8 08 24 00 00       	call   c0014e00 <Thr::processFromPID(int)>
c00129f8:	83 c4 10             	add    esp,0x10
c00129fb:	89 c1                	mov    ecx,eax
c00129fd:	b8 01 00 00 00       	mov    eax,0x1
c0012a02:	85 c9                	test   ecx,ecx
c0012a04:	74 57                	je     c0012a5d <SysGetVGAPtr(regs*)+0x78>
c0012a06:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0012a0c:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0012a10:	74 0c                	je     c0012a1e <SysGetVGAPtr(regs*)+0x39>
c0012a12:	83 ec 0c             	sub    esp,0xc
c0012a15:	55                   	push   ebp
c0012a16:	e8 82 5a ff ff       	call   c000849d <setActiveTerminal(VgaText*)>
c0012a1b:	83 c4 10             	add    esp,0x10
c0012a1e:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0012a21:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012a24:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0012a29:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a2b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0012a2e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a31:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0012a37:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a3a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0012a3d:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0012a43:	50                   	push   eax
c0012a44:	50                   	push   eax
c0012a45:	68 41 05 02 c0       	push   0xc0020541
c0012a4a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a4d:	05 a8 0f 00 00       	add    eax,0xfa8
c0012a52:	50                   	push   eax
c0012a53:	e8 98 db fe ff       	call   c00005f0 <strcpy>
c0012a58:	83 c4 10             	add    esp,0x10
c0012a5b:	31 c0                	xor    eax,eax
c0012a5d:	83 c4 0c             	add    esp,0xc
c0012a60:	31 d2                	xor    edx,edx
c0012a62:	5b                   	pop    ebx
c0012a63:	5e                   	pop    esi
c0012a64:	5f                   	pop    edi
c0012a65:	5d                   	pop    ebp
c0012a66:	c3                   	ret    
c0012a67:	90                   	nop

c0012a68 <SysKill(regs*)>:
c0012a68:	53                   	push   ebx
c0012a69:	83 ec 08             	sub    esp,0x8
c0012a6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012a70:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0012a74:	75 16                	jne    c0012a8c <SysKill(regs*)+0x24>
c0012a76:	83 ec 0c             	sub    esp,0xc
c0012a79:	68 4b 05 02 c0       	push   0xc002054b
c0012a7e:	e8 44 d9 ff ff       	call   c00103c7 <KePanic(char const*)>
c0012a83:	83 c4 10             	add    esp,0x10
c0012a86:	e9 89 00 00 00       	jmp    c0012b14 <SysKill(regs*)+0xac>
c0012a8b:	90                   	nop
c0012a8c:	83 ec 0c             	sub    esp,0xc
c0012a8f:	68 84 71 02 c0       	push   0xc0027184
c0012a94:	e8 33 b8 00 00       	call   c001e2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012a99:	8d 76 00             	lea    esi,[esi+0x0]
c0012a9c:	83 c4 10             	add    esp,0x10
c0012a9f:	85 c0                	test   eax,eax
c0012aa1:	74 19                	je     c0012abc <SysKill(regs*)+0x54>
c0012aa3:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0012aa6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0012aa9:	39 0a                	cmp    DWORD PTR [edx],ecx
c0012aab:	74 33                	je     c0012ae0 <SysKill(regs*)+0x78>
c0012aad:	52                   	push   edx
c0012aae:	52                   	push   edx
c0012aaf:	50                   	push   eax
c0012ab0:	68 84 71 02 c0       	push   0xc0027184
c0012ab5:	e8 2e bb 00 00       	call   c001e5e8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0012aba:	eb e0                	jmp    c0012a9c <SysKill(regs*)+0x34>
c0012abc:	83 ec 0c             	sub    esp,0xc
c0012abf:	68 78 71 02 c0       	push   0xc0027178
c0012ac4:	e8 03 b8 00 00       	call   c001e2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0012acc:	83 c4 10             	add    esp,0x10
c0012acf:	85 c0                	test   eax,eax
c0012ad1:	74 41                	je     c0012b14 <SysKill(regs*)+0xac>
c0012ad3:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0012ad6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0012ad9:	39 0a                	cmp    DWORD PTR [edx],ecx
c0012adb:	75 27                	jne    c0012b04 <SysKill(regs*)+0x9c>
c0012add:	8d 76 00             	lea    esi,[esi+0x0]
c0012ae0:	51                   	push   ecx
c0012ae1:	51                   	push   ecx
c0012ae2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012ae5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012aea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012aed:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0012af3:	e8 a3 dc ff ff       	call   c001079b <KeRaiseSignal(SigHandlerBlock*, int)>
c0012af8:	83 c4 10             	add    esp,0x10
c0012afb:	31 c0                	xor    eax,eax
c0012afd:	31 d2                	xor    edx,edx
c0012aff:	eb 1b                	jmp    c0012b1c <SysKill(regs*)+0xb4>
c0012b01:	8d 76 00             	lea    esi,[esi+0x0]
c0012b04:	52                   	push   edx
c0012b05:	52                   	push   edx
c0012b06:	50                   	push   eax
c0012b07:	68 78 71 02 c0       	push   0xc0027178
c0012b0c:	e8 d7 ba 00 00       	call   c001e5e8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0012b11:	eb b9                	jmp    c0012acc <SysKill(regs*)+0x64>
c0012b13:	90                   	nop
c0012b14:	83 c8 ff             	or     eax,0xffffffff
c0012b17:	89 c2                	mov    edx,eax
c0012b19:	8d 76 00             	lea    esi,[esi+0x0]
c0012b1c:	83 c4 08             	add    esp,0x8
c0012b1f:	5b                   	pop    ebx
c0012b20:	c3                   	ret    

c0012b21 <SysLoadDLL(regs*)>:
c0012b21:	56                   	push   esi
c0012b22:	53                   	push   ebx
c0012b23:	31 d2                	xor    edx,edx
c0012b25:	51                   	push   ecx
c0012b26:	b8 01 00 00 00       	mov    eax,0x1
c0012b2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012b2f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0012b33:	0f 84 8c 00 00 00    	je     c0012bc5 <SysLoadDLL(regs*)+0xa4>
c0012b39:	83 ec 0c             	sub    esp,0xc
c0012b3c:	68 14 01 00 00       	push   0x114
c0012b41:	e8 1f 4d ff ff       	call   c0007865 <malloc>
c0012b46:	83 c4 0c             	add    esp,0xc
c0012b49:	89 c3                	mov    ebx,eax
c0012b4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b50:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012b53:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012b56:	53                   	push   ebx
c0012b57:	e8 20 80 ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c0012b5c:	83 c4 10             	add    esp,0x10
c0012b5f:	31 d2                	xor    edx,edx
c0012b61:	b8 02 00 00 00       	mov    eax,0x2
c0012b66:	85 db                	test   ebx,ebx
c0012b68:	74 5b                	je     c0012bc5 <SysLoadDLL(regs*)+0xa4>
c0012b6a:	83 ec 0c             	sub    esp,0xc
c0012b6d:	53                   	push   ebx
c0012b6e:	e8 37 83 ff ff       	call   c000aeaa <File::exists()>
c0012b73:	83 c4 10             	add    esp,0x10
c0012b76:	84 c0                	test   al,al
c0012b78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b7a:	75 11                	jne    c0012b8d <SysLoadDLL(regs*)+0x6c>
c0012b7c:	83 ec 0c             	sub    esp,0xc
c0012b7f:	53                   	push   ebx
c0012b80:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012b83:	83 c4 10             	add    esp,0x10
c0012b86:	b8 03 00 00 00       	mov    eax,0x3
c0012b8b:	eb 36                	jmp    c0012bc3 <SysLoadDLL(regs*)+0xa2>
c0012b8d:	83 ec 0c             	sub    esp,0xc
c0012b90:	53                   	push   ebx
c0012b91:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012b94:	58                   	pop    eax
c0012b95:	5a                   	pop    edx
c0012b96:	6a 00                	push   0x0
c0012b98:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012b9b:	e8 ea 13 00 00       	call   c0013f8a <Thr::loadDLL(char const*, bool)>
c0012ba0:	83 c4 10             	add    esp,0x10
c0012ba3:	89 c1                	mov    ecx,eax
c0012ba5:	31 d2                	xor    edx,edx
c0012ba7:	b8 04 00 00 00       	mov    eax,0x4
c0012bac:	85 c9                	test   ecx,ecx
c0012bae:	74 15                	je     c0012bc5 <SysLoadDLL(regs*)+0xa4>
c0012bb0:	53                   	push   ebx
c0012bb1:	53                   	push   ebx
c0012bb2:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0012bb8:	51                   	push   ecx
c0012bb9:	e8 fd 15 00 00       	call   c00141bb <Thr::executeDLL(unsigned long, void*)>
c0012bbe:	83 c4 10             	add    esp,0x10
c0012bc1:	31 c0                	xor    eax,eax
c0012bc3:	31 d2                	xor    edx,edx
c0012bc5:	59                   	pop    ecx
c0012bc6:	5b                   	pop    ebx
c0012bc7:	5e                   	pop    esi
c0012bc8:	c3                   	ret    

c0012bc9 <SysRead(regs*)>:
c0012bc9:	57                   	push   edi
c0012bca:	56                   	push   esi
c0012bcb:	53                   	push   ebx
c0012bcc:	83 ec 10             	sub    esp,0x10
c0012bcf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012bd3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012bd6:	83 f8 02             	cmp    eax,0x2
c0012bd9:	77 10                	ja     c0012beb <SysRead(regs*)+0x22>
c0012bdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012be0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012be3:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0012be9:	eb 0e                	jmp    c0012bf9 <SysRead(regs*)+0x30>
c0012beb:	83 ec 0c             	sub    esp,0xc
c0012bee:	50                   	push   eax
c0012bef:	e8 ff 65 ff ff       	call   c00091f3 <getFromFileDescriptor(int)>
c0012bf4:	83 c4 10             	add    esp,0x10
c0012bf7:	89 c1                	mov    ecx,eax
c0012bf9:	83 c8 ff             	or     eax,0xffffffff
c0012bfc:	85 c9                	test   ecx,ecx
c0012bfe:	89 c2                	mov    edx,eax
c0012c00:	74 28                	je     c0012c2a <SysRead(regs*)+0x61>
c0012c02:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012c0a:	31 ff                	xor    edi,edi
c0012c0c:	83 ec 0c             	sub    esp,0xc
c0012c0f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012c11:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012c15:	52                   	push   edx
c0012c16:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012c19:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0012c1c:	57                   	push   edi
c0012c1d:	56                   	push   esi
c0012c1e:	51                   	push   ecx
c0012c1f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012c22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012c26:	83 c4 20             	add    esp,0x20
c0012c29:	99                   	cdq    
c0012c2a:	83 c4 10             	add    esp,0x10
c0012c2d:	5b                   	pop    ebx
c0012c2e:	5e                   	pop    esi
c0012c2f:	5f                   	pop    edi
c0012c30:	c3                   	ret    

c0012c31 <SysRegisterSignal(regs*)>:
c0012c31:	83 ec 18             	sub    esp,0x18
c0012c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c38:	6a 00                	push   0x0
c0012c3a:	6a 00                	push   0x0
c0012c3c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0012c3f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012c42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c47:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012c4a:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0012c50:	e8 10 db ff ff       	call   c0010765 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0012c55:	83 c4 2c             	add    esp,0x2c
c0012c58:	99                   	cdq    
c0012c59:	c3                   	ret    

c0012c5a <SysRegistryGetTypeFromPath(regs*)>:
c0012c5a:	57                   	push   edi
c0012c5b:	56                   	push   esi
c0012c5c:	53                   	push   ebx
c0012c5d:	81 ec 38 01 00 00    	sub    esp,0x138
c0012c63:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0012c6a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012c6d:	68 6c 05 02 c0       	push   0xc002056c
c0012c72:	e8 8f 79 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0012c77:	5a                   	pop    edx
c0012c78:	59                   	pop    ecx
c0012c79:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012c7c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012c7f:	e8 6a f6 ff ff       	call   c00122ee <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0012c84:	5f                   	pop    edi
c0012c85:	89 c6                	mov    esi,eax
c0012c87:	5a                   	pop    edx
c0012c88:	50                   	push   eax
c0012c89:	68 8c 05 02 c0       	push   0xc002058c
c0012c8e:	e8 73 79 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0012c93:	83 c4 10             	add    esp,0x10
c0012c96:	85 f6                	test   esi,esi
c0012c98:	74 28                	je     c0012cc2 <SysRegistryGetTypeFromPath(regs*)+0x68>
c0012c9a:	50                   	push   eax
c0012c9b:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0012c9f:	57                   	push   edi
c0012ca0:	56                   	push   esi
c0012ca1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012ca4:	e8 bb f2 ff ff       	call   c0011f64 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012ca9:	83 c4 0c             	add    esp,0xc
c0012cac:	89 c3                	mov    ebx,eax
c0012cae:	57                   	push   edi
c0012caf:	50                   	push   eax
c0012cb0:	68 94 05 02 c0       	push   0xc0020594
c0012cb5:	e8 4c 79 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0012cba:	89 d8                	mov    eax,ebx
c0012cbc:	83 c4 10             	add    esp,0x10
c0012cbf:	99                   	cdq    
c0012cc0:	eb 05                	jmp    c0012cc7 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0012cc2:	83 c8 ff             	or     eax,0xffffffff
c0012cc5:	89 c2                	mov    edx,eax
c0012cc7:	81 c4 30 01 00 00    	add    esp,0x130
c0012ccd:	5b                   	pop    ebx
c0012cce:	5e                   	pop    esi
c0012ccf:	5f                   	pop    edi
c0012cd0:	c3                   	ret    

c0012cd1 <SysRegistryReadExtent(regs*)>:
c0012cd1:	31 c0                	xor    eax,eax
c0012cd3:	31 d2                	xor    edx,edx
c0012cd5:	c3                   	ret    

c0012cd6 <SysRegistryPathToExtentLookup(regs*)>:
c0012cd6:	53                   	push   ebx
c0012cd7:	83 ec 10             	sub    esp,0x10
c0012cda:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012cde:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012ce1:	68 aa 05 02 c0       	push   0xc00205aa
c0012ce6:	e8 1b 79 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0012ceb:	58                   	pop    eax
c0012cec:	5a                   	pop    edx
c0012ced:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012cf0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012cf3:	e8 f6 f5 ff ff       	call   c00122ee <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0012cf8:	83 c4 18             	add    esp,0x18
c0012cfb:	99                   	cdq    
c0012cfc:	5b                   	pop    ebx
c0012cfd:	c3                   	ret    

c0012cfe <SysRegistryEnterDirectory(regs*)>:
c0012cfe:	53                   	push   ebx
c0012cff:	83 ec 10             	sub    esp,0x10
c0012d02:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d06:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012d09:	68 cd 05 02 c0       	push   0xc00205cd
c0012d0e:	e8 f3 78 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0012d13:	58                   	pop    eax
c0012d14:	5a                   	pop    edx
c0012d15:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012d18:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012d1b:	e8 fd eb ff ff       	call   c001191d <CmEnterDirectory(Reghive_Tag*, int)>
c0012d20:	83 c4 18             	add    esp,0x18
c0012d23:	99                   	cdq    
c0012d24:	5b                   	pop    ebx
c0012d25:	c3                   	ret    

c0012d26 <SysRegistryGetNext(regs*)>:
c0012d26:	53                   	push   ebx
c0012d27:	83 ec 10             	sub    esp,0x10
c0012d2a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d2e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012d31:	68 eb 05 02 c0       	push   0xc00205eb
c0012d36:	e8 cb 78 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0012d3b:	58                   	pop    eax
c0012d3c:	5a                   	pop    edx
c0012d3d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012d40:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012d43:	e8 14 ec ff ff       	call   c001195c <CmGetNext(Reghive_Tag*, int)>
c0012d48:	83 c4 18             	add    esp,0x18
c0012d4b:	99                   	cdq    
c0012d4c:	5b                   	pop    ebx
c0012d4d:	c3                   	ret    

c0012d4e <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0012d4e:	57                   	push   edi
c0012d4f:	56                   	push   esi
c0012d50:	53                   	push   ebx
c0012d51:	81 ec 38 01 00 00    	sub    esp,0x138
c0012d57:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012d5e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0012d61:	68 02 06 02 c0       	push   0xc0020602
c0012d66:	e8 9b 78 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0012d6b:	83 c4 0c             	add    esp,0xc
c0012d6e:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0012d72:	57                   	push   edi
c0012d73:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0012d76:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012d79:	e8 e6 f1 ff ff       	call   c0011f64 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012d7e:	89 c3                	mov    ebx,eax
c0012d80:	58                   	pop    eax
c0012d81:	5a                   	pop    edx
c0012d82:	57                   	push   edi
c0012d83:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0012d86:	e8 65 d8 fe ff       	call   c00005f0 <strcpy>
c0012d8b:	83 c4 0c             	add    esp,0xc
c0012d8e:	53                   	push   ebx
c0012d8f:	57                   	push   edi
c0012d90:	68 2a 06 02 c0       	push   0xc002062a
c0012d95:	e8 6c 78 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0012d9a:	89 d8                	mov    eax,ebx
c0012d9c:	81 c4 40 01 00 00    	add    esp,0x140
c0012da2:	99                   	cdq    
c0012da3:	5b                   	pop    ebx
c0012da4:	5e                   	pop    esi
c0012da5:	5f                   	pop    edi
c0012da6:	c3                   	ret    

c0012da7 <SysRegistryOpen(regs*)>:
c0012da7:	53                   	push   ebx
c0012da8:	83 ec 10             	sub    esp,0x10
c0012dab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012daf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012db2:	68 40 06 02 c0       	push   0xc0020640
c0012db7:	e8 4a 78 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0012dbc:	58                   	pop    eax
c0012dbd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012dc0:	e8 3f e9 ff ff       	call   c0011704 <CmOpen(char const*)>
c0012dc5:	83 c4 18             	add    esp,0x18
c0012dc8:	99                   	cdq    
c0012dc9:	5b                   	pop    ebx
c0012dca:	c3                   	ret    

c0012dcb <SysRegistryClose(regs*)>:
c0012dcb:	31 c0                	xor    eax,eax
c0012dcd:	31 d2                	xor    edx,edx
c0012dcf:	c3                   	ret    

c0012dd0 <SysSbrk(regs*)>:
c0012dd0:	56                   	push   esi
c0012dd1:	53                   	push   ebx
c0012dd2:	50                   	push   eax
c0012dd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012dd8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ddc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012ddf:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0012de2:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0012de8:	85 db                	test   ebx,ebx
c0012dea:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0012ded:	74 02                	je     c0012df1 <SysSbrk(regs*)+0x21>
c0012def:	79 06                	jns    c0012df7 <SysSbrk(regs*)+0x27>
c0012df1:	89 f0                	mov    eax,esi
c0012df3:	31 d2                	xor    edx,edx
c0012df5:	eb 2a                	jmp    c0012e21 <SysSbrk(regs*)+0x51>
c0012df7:	83 c8 ff             	or     eax,0xffffffff
c0012dfa:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0012e00:	89 c2                	mov    edx,eax
c0012e02:	77 1d                	ja     c0012e21 <SysSbrk(regs*)+0x51>
c0012e04:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0012e0a:	50                   	push   eax
c0012e0b:	c1 ea 0c             	shr    edx,0xc
c0012e0e:	68 07 0c 00 00       	push   0xc07
c0012e13:	52                   	push   edx
c0012e14:	51                   	push   ecx
c0012e15:	e8 f6 6c ff ff       	call   c0009b10 <VAS::allocatePages(int, int)>
c0012e1a:	89 f0                	mov    eax,esi
c0012e1c:	31 d2                	xor    edx,edx
c0012e1e:	83 c4 10             	add    esp,0x10
c0012e21:	59                   	pop    ecx
c0012e22:	5b                   	pop    ebx
c0012e23:	5e                   	pop    esi
c0012e24:	c3                   	ret    

c0012e25 <SysSetCwd(regs*)>:
c0012e25:	83 ec 14             	sub    esp,0x14
c0012e28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e2c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012e2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e34:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012e37:	e8 0d 81 ff ff       	call   c000af49 <Fs::setcwd(Process*, char*)>
c0012e3c:	83 c4 1c             	add    esp,0x1c
c0012e3f:	99                   	cdq    
c0012e40:	c3                   	ret    

c0012e41 <SysSetTime(regs*)>:
c0012e41:	55                   	push   ebp
c0012e42:	31 c9                	xor    ecx,ecx
c0012e44:	57                   	push   edi
c0012e45:	bd 0c 00 00 00       	mov    ebp,0xc
c0012e4a:	56                   	push   esi
c0012e4b:	53                   	push   ebx
c0012e4c:	31 db                	xor    ebx,ebx
c0012e4e:	83 ec 10             	sub    esp,0x10
c0012e51:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012e55:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0012e58:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0012e5b:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0012e5e:	89 c2                	mov    edx,eax
c0012e60:	66 81 ef 6c 07       	sub    di,0x76c
c0012e65:	83 e2 1f             	and    edx,0x1f
c0012e68:	c1 e7 10             	shl    edi,0x10
c0012e6b:	42                   	inc    edx
c0012e6c:	c1 e8 05             	shr    eax,0x5
c0012e6f:	88 d1                	mov    cl,dl
c0012e71:	31 d2                	xor    edx,edx
c0012e73:	f7 f5                	div    ebp
c0012e75:	89 dd                	mov    ebp,ebx
c0012e77:	88 d5                	mov    ch,dl
c0012e79:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0012e7f:	0f b7 c1             	movzx  eax,cx
c0012e82:	31 d2                	xor    edx,edx
c0012e84:	09 f8                	or     eax,edi
c0012e86:	bf 3c 00 00 00       	mov    edi,0x3c
c0012e8b:	89 c1                	mov    ecx,eax
c0012e8d:	89 f0                	mov    eax,esi
c0012e8f:	f7 f7                	div    edi
c0012e91:	c1 e2 10             	shl    edx,0x10
c0012e94:	09 d5                	or     ebp,edx
c0012e96:	31 d2                	xor    edx,edx
c0012e98:	89 eb                	mov    ebx,ebp
c0012e9a:	f7 f7                	div    edi
c0012e9c:	bf 10 0e 00 00       	mov    edi,0xe10
c0012ea1:	88 d7                	mov    bh,dl
c0012ea3:	89 f0                	mov    eax,esi
c0012ea5:	31 d2                	xor    edx,edx
c0012ea7:	f7 f7                	div    edi
c0012ea9:	bf 18 00 00 00       	mov    edi,0x18
c0012eae:	31 d2                	xor    edx,edx
c0012eb0:	f7 f7                	div    edi
c0012eb2:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0012eb7:	88 d3                	mov    bl,dl
c0012eb9:	53                   	push   ebx
c0012eba:	51                   	push   ecx
c0012ebb:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0012ec1:	e8 92 88 ff ff       	call   c000b758 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0012ec6:	83 c4 1c             	add    esp,0x1c
c0012ec9:	83 f0 01             	xor    eax,0x1
c0012ecc:	5b                   	pop    ebx
c0012ecd:	0f b6 c0             	movzx  eax,al
c0012ed0:	5e                   	pop    esi
c0012ed1:	31 d2                	xor    edx,edx
c0012ed3:	5f                   	pop    edi
c0012ed4:	5d                   	pop    ebp
c0012ed5:	c3                   	ret    

c0012ed6 <SysTimezone(regs*)>:
c0012ed6:	53                   	push   ebx
c0012ed7:	83 ec 08             	sub    esp,0x8
c0012eda:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ede:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0012ee2:	75 17                	jne    c0012efb <SysTimezone(regs*)+0x25>
c0012ee4:	83 ec 0c             	sub    esp,0xc
c0012ee7:	68 54 06 02 c0       	push   0xc0020654
c0012eec:	e8 15 77 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0012ef1:	83 c8 ff             	or     eax,0xffffffff
c0012ef4:	83 c4 10             	add    esp,0x10
c0012ef7:	89 c2                	mov    edx,eax
c0012ef9:	eb 20                	jmp    c0012f1b <SysTimezone(regs*)+0x45>
c0012efb:	83 ec 0c             	sub    esp,0xc
c0012efe:	68 69 06 02 c0       	push   0xc0020669
c0012f03:	e8 fe 76 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0012f08:	58                   	pop    eax
c0012f09:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012f0c:	e8 a3 85 ff ff       	call   c000b4b4 <User::loadClockSettings(int)>
c0012f11:	83 c4 10             	add    esp,0x10
c0012f14:	b8 01 00 00 00       	mov    eax,0x1
c0012f19:	31 d2                	xor    edx,edx
c0012f1b:	83 c4 08             	add    esp,0x8
c0012f1e:	5b                   	pop    ebx
c0012f1f:	c3                   	ret    

c0012f20 <SysWrite(regs*)>:
c0012f20:	57                   	push   edi
c0012f21:	56                   	push   esi
c0012f22:	53                   	push   ebx
c0012f23:	83 ec 10             	sub    esp,0x10
c0012f26:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012f2a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012f2d:	83 f8 02             	cmp    eax,0x2
c0012f30:	77 10                	ja     c0012f42 <SysWrite(regs*)+0x22>
c0012f32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f37:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012f3a:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0012f40:	eb 0e                	jmp    c0012f50 <SysWrite(regs*)+0x30>
c0012f42:	83 ec 0c             	sub    esp,0xc
c0012f45:	50                   	push   eax
c0012f46:	e8 a8 62 ff ff       	call   c00091f3 <getFromFileDescriptor(int)>
c0012f4b:	83 c4 10             	add    esp,0x10
c0012f4e:	89 c1                	mov    ecx,eax
c0012f50:	83 c8 ff             	or     eax,0xffffffff
c0012f53:	85 c9                	test   ecx,ecx
c0012f55:	89 c2                	mov    edx,eax
c0012f57:	74 28                	je     c0012f81 <SysWrite(regs*)+0x61>
c0012f59:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012f61:	31 ff                	xor    edi,edi
c0012f63:	83 ec 0c             	sub    esp,0xc
c0012f66:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f68:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012f6c:	52                   	push   edx
c0012f6d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012f70:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0012f73:	57                   	push   edi
c0012f74:	56                   	push   esi
c0012f75:	51                   	push   ecx
c0012f76:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012f79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012f7d:	83 c4 20             	add    esp,0x20
c0012f80:	99                   	cdq    
c0012f81:	83 c4 10             	add    esp,0x10
c0012f84:	5b                   	pop    ebx
c0012f85:	5e                   	pop    esi
c0012f86:	5f                   	pop    edi
c0012f87:	c3                   	ret    

c0012f88 <SysWsbe(regs*)>:
c0012f88:	57                   	push   edi
c0012f89:	b9 0b 00 00 00       	mov    ecx,0xb
c0012f8e:	56                   	push   esi
c0012f8f:	be a8 06 02 c0       	mov    esi,0xc00206a8
c0012f94:	53                   	push   ebx
c0012f95:	83 ec 30             	sub    esp,0x30
c0012f98:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0012f9c:	fc                   	cld    
c0012f9d:	83 ec 0c             	sub    esp,0xc
c0012fa0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012fa2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012fa6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012fae:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0012fb4:	8b 06                	mov    eax,DWORD PTR [esi]
c0012fb6:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0012fb9:	57                   	push   edi
c0012fba:	e8 71 d5 fe ff       	call   c0000530 <strlen>
c0012fbf:	5a                   	pop    edx
c0012fc0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0012fc4:	52                   	push   edx
c0012fc5:	31 d2                	xor    edx,edx
c0012fc7:	57                   	push   edi
c0012fc8:	52                   	push   edx
c0012fc9:	50                   	push   eax
c0012fca:	56                   	push   esi
c0012fcb:	ff d3                	call   ebx
c0012fcd:	83 c4 14             	add    esp,0x14
c0012fd0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012fd4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0012fd7:	e8 24 23 00 00       	call   c0015300 <terminateTask(int)>
c0012fdc:	83 c4 40             	add    esp,0x40
c0012fdf:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012fe4:	5b                   	pop    ebx
c0012fe5:	31 d2                	xor    edx,edx
c0012fe7:	5e                   	pop    esi
c0012fe8:	5f                   	pop    edi
c0012fe9:	c3                   	ret    

c0012fea <SysYield(regs*)>:
c0012fea:	83 ec 0c             	sub    esp,0xc
c0012fed:	fa                   	cli    
c0012fee:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0012ff4:	e8 e3 19 00 00       	call   c00149dc <schedule()>
c0012ff9:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0012ffe:	48                   	dec    eax
c0012fff:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0013004:	75 01                	jne    c0013007 <SysYield(regs*)+0x1d>
c0013006:	fb                   	sti    
c0013007:	31 c0                	xor    eax,eax
c0013009:	31 d2                	xor    edx,edx
c001300b:	83 c4 0c             	add    esp,0xc
c001300e:	c3                   	ret    

c001300f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001300f:	55                   	push   ebp
c0013010:	57                   	push   edi
c0013011:	56                   	push   esi
c0013012:	53                   	push   ebx
c0013013:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013019:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013021:	0f 95 c2             	setne  dl
c0013024:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001302c:	0f 94 c0             	sete   al
c001302f:	84 c2                	test   dl,al
c0013031:	74 34                	je     c0013067 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0013033:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001303e:	74 27                	je     c0013067 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0013040:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013047:	05 00 10 00 00       	add    eax,0x1000
c001304c:	89 c1                	mov    ecx,eax
c001304e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013053:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0013059:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013060:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0013067:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001306e:	83 ec 0c             	sub    esp,0xc
c0013071:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013077:	6a 01                	push   0x1
c0013079:	e8 cb 62 ff ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c001307e:	83 c4 10             	add    esp,0x10
c0013081:	89 c3                	mov    ebx,eax
c0013083:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013089:	0f 86 25 01 00 00    	jbe    c00131b4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c001308f:	c1 ee 0c             	shr    esi,0xc
c0013092:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013099:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001309d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00130a5:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00130ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00130b0:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00130b7:	29 ef                	sub    edi,ebp
c00130b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00130bd:	0f 83 f8 00 00 00    	jae    c00131bb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c00130c3:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00130c9:	76 05                	jbe    c00130d0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c00130cb:	bf 00 10 00 00       	mov    edi,0x1000
c00130d0:	83 ec 0c             	sub    esp,0xc
c00130d3:	31 d2                	xor    edx,edx
c00130d5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00130dc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130de:	8d 44 24 28          	lea    eax,[esp+0x28]
c00130e2:	50                   	push   eax
c00130e3:	8d 74 24 30          	lea    esi,[esp+0x30]
c00130e7:	56                   	push   esi
c00130e8:	52                   	push   edx
c00130e9:	57                   	push   edi
c00130ea:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00130f1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00130f4:	83 c4 20             	add    esp,0x20
c00130f7:	85 c0                	test   eax,eax
c00130f9:	75 06                	jne    c0013101 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c00130fb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00130ff:	74 13                	je     c0013114 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0013101:	83 ec 0c             	sub    esp,0xc
c0013104:	53                   	push   ebx
c0013105:	e8 33 65 ff ff       	call   c000963d <Virt::freeKernelVirtualPages(unsigned long)>
c001310a:	83 c4 10             	add    esp,0x10
c001310d:	31 c0                	xor    eax,eax
c001310f:	e9 7c 01 00 00       	jmp    c0013290 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0013114:	fa                   	cli    
c0013115:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001311b:	e8 21 4a ff ff       	call   c0007b41 <Phys::allocatePage()>
c0013120:	6a 07                	push   0x7
c0013122:	89 c7                	mov    edi,eax
c0013124:	53                   	push   ebx
c0013125:	50                   	push   eax
c0013126:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001312b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001312e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013134:	e8 d3 68 ff ff       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c0013139:	83 c4 0c             	add    esp,0xc
c001313c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013143:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013149:	6a 00                	push   0x0
c001314b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013150:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013153:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013159:	e8 20 67 ff ff       	call   c000987e <VAS::mapOtherVASIn(bool, VAS*)>
c001315e:	58                   	pop    eax
c001315f:	5a                   	pop    edx
c0013160:	68 07 0c 00 00       	push   0xc07
c0013165:	55                   	push   ebp
c0013166:	57                   	push   edi
c0013167:	89 df                	mov    edi,ebx
c0013169:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013170:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013176:	6a 00                	push   0x0
c0013178:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001317d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013180:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013186:	e8 41 6c ff ff       	call   c0009dcc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001318b:	b9 00 10 00 00       	mov    ecx,0x1000
c0013190:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013192:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0013197:	83 c4 20             	add    esp,0x20
c001319a:	48                   	dec    eax
c001319b:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00131a0:	85 c0                	test   eax,eax
c00131a2:	75 01                	jne    c00131a5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c00131a4:	fb                   	sti    
c00131a5:	81 c5 00 10 00 00    	add    ebp,0x1000
c00131ab:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00131af:	e9 f1 fe ff ff       	jmp    c00130a5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c00131b4:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00131bb:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00131c2:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00131c8:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00131ce:	0f 86 ae 00 00 00    	jbe    c0013282 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00131d4:	fa                   	cli    
c00131d5:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00131db:	c1 ee 0c             	shr    esi,0xc
c00131de:	51                   	push   ecx
c00131df:	31 ff                	xor    edi,edi
c00131e1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00131e8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00131ee:	6a 00                	push   0x0
c00131f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131f8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00131fe:	e8 7b 66 ff ff       	call   c000987e <VAS::mapOtherVASIn(bool, VAS*)>
c0013203:	83 c4 10             	add    esp,0x10
c0013206:	e8 36 49 ff ff       	call   c0007b41 <Phys::allocatePage()>
c001320b:	47                   	inc    edi
c001320c:	6a 07                	push   0x7
c001320e:	53                   	push   ebx
c001320f:	50                   	push   eax
c0013210:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013214:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001321a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001321d:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013223:	e8 e4 67 ff ff       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c0013228:	58                   	pop    eax
c0013229:	5a                   	pop    edx
c001322a:	68 07 0c 00 00       	push   0xc07
c001322f:	55                   	push   ebp
c0013230:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013236:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001323a:	50                   	push   eax
c001323b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013242:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013248:	6a 00                	push   0x0
c001324a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001324f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013252:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013258:	e8 6f 6b ff ff       	call   c0009dcc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001325d:	83 c4 1c             	add    esp,0x1c
c0013260:	68 00 10 00 00       	push   0x1000
c0013265:	6a 00                	push   0x0
c0013267:	53                   	push   ebx
c0013268:	e8 53 d2 fe ff       	call   c00004c0 <memset>
c001326d:	83 c4 10             	add    esp,0x10
c0013270:	39 fe                	cmp    esi,edi
c0013272:	77 92                	ja     c0013206 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0013274:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0013279:	48                   	dec    eax
c001327a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001327f:	75 01                	jne    c0013282 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0013281:	fb                   	sti    
c0013282:	83 ec 0c             	sub    esp,0xc
c0013285:	53                   	push   ebx
c0013286:	e8 b2 63 ff ff       	call   c000963d <Virt::freeKernelVirtualPages(unsigned long)>
c001328b:	83 c4 10             	add    esp,0x10
c001328e:	b0 01                	mov    al,0x1
c0013290:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013296:	5b                   	pop    ebx
c0013297:	5e                   	pop    esi
c0013298:	5f                   	pop    edi
c0013299:	5d                   	pop    ebp
c001329a:	c3                   	ret    

c001329b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001329b:	55                   	push   ebp
c001329c:	57                   	push   edi
c001329d:	56                   	push   esi
c001329e:	53                   	push   ebx
c001329f:	83 ec 48             	sub    esp,0x48
c00132a2:	68 14 01 00 00       	push   0x114
c00132a7:	e8 b9 45 ff ff       	call   c0007865 <malloc>
c00132ac:	83 c4 0c             	add    esp,0xc
c00132af:	89 c6                	mov    esi,eax
c00132b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00132b5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132b9:	50                   	push   eax
c00132ba:	e8 bd 78 ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c00132bf:	58                   	pop    eax
c00132c0:	5a                   	pop    edx
c00132c1:	6a 01                	push   0x1
c00132c3:	56                   	push   esi
c00132c4:	e8 73 79 ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c00132c9:	83 c4 10             	add    esp,0x10
c00132cc:	85 c0                	test   eax,eax
c00132ce:	0f 85 47 01 00 00    	jne    c001341b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00132d4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00132dc:	83 ec 0c             	sub    esp,0xc
c00132df:	6a 34                	push   0x34
c00132e1:	e8 7f 45 ff ff       	call   c0007865 <malloc>
c00132e6:	89 c3                	mov    ebx,eax
c00132e8:	58                   	pop    eax
c00132e9:	8b 06                	mov    eax,DWORD PTR [esi]
c00132eb:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00132ef:	57                   	push   edi
c00132f0:	53                   	push   ebx
c00132f1:	6a 00                	push   0x0
c00132f3:	6a 34                	push   0x34
c00132f5:	56                   	push   esi
c00132f6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00132f9:	83 c4 20             	add    esp,0x20
c00132fc:	85 c0                	test   eax,eax
c00132fe:	0f 85 17 01 00 00    	jne    c001341b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013304:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001330a:	0f 85 0b 01 00 00    	jne    c001341b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013310:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013313:	85 c0                	test   eax,eax
c0013315:	0f 84 00 01 00 00    	je     c001341b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001331b:	31 d2                	xor    edx,edx
c001331d:	55                   	push   ebp
c001331e:	52                   	push   edx
c001331f:	50                   	push   eax
c0013320:	56                   	push   esi
c0013321:	e8 d4 79 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0013326:	83 c4 10             	add    esp,0x10
c0013329:	85 c0                	test   eax,eax
c001332b:	0f 85 ea 00 00 00    	jne    c001341b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013331:	83 ec 0c             	sub    esp,0xc
c0013334:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013337:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001333b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001333f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013343:	0f af c2             	imul   eax,edx
c0013346:	50                   	push   eax
c0013347:	e8 19 45 ff ff       	call   c0007865 <malloc>
c001334c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001334e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013352:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013355:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013359:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001335d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013361:	0f af c2             	imul   eax,edx
c0013364:	99                   	cdq    
c0013365:	52                   	push   edx
c0013366:	50                   	push   eax
c0013367:	56                   	push   esi
c0013368:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001336b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001336e:	83 c4 20             	add    esp,0x20
c0013371:	85 c0                	test   eax,eax
c0013373:	0f 84 a2 00 00 00    	je     c001341b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013379:	31 d2                	xor    edx,edx
c001337b:	51                   	push   ecx
c001337c:	52                   	push   edx
c001337d:	50                   	push   eax
c001337e:	56                   	push   esi
c001337f:	e8 76 79 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0013384:	83 c4 10             	add    esp,0x10
c0013387:	85 c0                	test   eax,eax
c0013389:	0f 85 8c 00 00 00    	jne    c001341b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001338f:	83 ec 0c             	sub    esp,0xc
c0013392:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013396:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001339a:	31 ed                	xor    ebp,ebp
c001339c:	0f af c2             	imul   eax,edx
c001339f:	50                   	push   eax
c00133a0:	e8 c0 44 ff ff       	call   c0007865 <malloc>
c00133a5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00133a7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133ab:	89 3c 24             	mov    DWORD PTR [esp],edi
c00133ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133b2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00133b6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00133ba:	0f af c2             	imul   eax,edx
c00133bd:	99                   	cdq    
c00133be:	52                   	push   edx
c00133bf:	50                   	push   eax
c00133c0:	56                   	push   esi
c00133c1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00133c4:	83 c4 20             	add    esp,0x20
c00133c7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00133cf:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00133d3:	0f 86 80 00 00 00    	jbe    c0013459 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00133d9:	0f b7 fd             	movzx  edi,bp
c00133dc:	c1 e7 05             	shl    edi,0x5
c00133df:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00133e3:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00133e6:	75 6b                	jne    c0013453 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00133e8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00133eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00133ef:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00133f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00133f6:	52                   	push   edx
c00133f7:	31 d2                	xor    edx,edx
c00133f9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00133fc:	52                   	push   edx
c00133fd:	50                   	push   eax
c00133fe:	56                   	push   esi
c00133ff:	e8 f6 78 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0013404:	83 c4 10             	add    esp,0x10
c0013407:	85 c0                	test   eax,eax
c0013409:	74 17                	je     c0013422 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001340b:	83 ec 0c             	sub    esp,0xc
c001340e:	68 d4 06 02 c0       	push   0xc00206d4
c0013413:	e8 ee 71 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0013418:	83 c4 10             	add    esp,0x10
c001341b:	31 c0                	xor    eax,eax
c001341d:	e9 87 00 00 00       	jmp    c00134a9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0013422:	83 ec 0c             	sub    esp,0xc
c0013425:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013428:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001342b:	50                   	push   eax
c001342c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013430:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013434:	56                   	push   esi
c0013435:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013439:	e8 d1 fb ff ff       	call   c001300f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001343e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013442:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0013446:	83 c4 20             	add    esp,0x20
c0013449:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001344d:	73 04                	jae    c0013453 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001344f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013453:	45                   	inc    ebp
c0013454:	e9 76 ff ff ff       	jmp    c00133cf <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013459:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001345d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013461:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013465:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001346b:	83 ec 0c             	sub    esp,0xc
c001346e:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0013474:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013479:	05 00 10 00 00       	add    eax,0x1000
c001347e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013481:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013485:	e8 eb 43 ff ff       	call   c0007875 <free>
c001348a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001348d:	e8 e3 43 ff ff       	call   c0007875 <free>
c0013492:	58                   	pop    eax
c0013493:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013497:	e8 d9 43 ff ff       	call   c0007875 <free>
c001349c:	89 34 24             	mov    DWORD PTR [esp],esi
c001349f:	e8 f6 77 ff ff       	call   c000ac9a <File::close()>
c00134a4:	83 c4 10             	add    esp,0x10
c00134a7:	b0 01                	mov    al,0x1
c00134a9:	83 c4 3c             	add    esp,0x3c
c00134ac:	5b                   	pop    ebx
c00134ad:	5e                   	pop    esi
c00134ae:	5f                   	pop    edi
c00134af:	5d                   	pop    ebp
c00134b0:	c3                   	ret    

c00134b1 <Thr::runtimeReferenceHelper()>:
c00134b1:	83 ec 18             	sub    esp,0x18
c00134b4:	68 dc 06 02 c0       	push   0xc00206dc
c00134b9:	e8 48 71 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00134be:	fa                   	cli    
c00134bf:	83 c4 10             	add    esp,0x10
c00134c2:	eb fe                	jmp    c00134c2 <Thr::runtimeReferenceHelper()+0x11>

c00134c4 <Thr::getAddressOfKernelSymbol(char const*)>:
c00134c4:	57                   	push   edi
c00134c5:	56                   	push   esi
c00134c6:	53                   	push   ebx
c00134c7:	31 db                	xor    ebx,ebx
c00134c9:	39 1d 40 71 02 c0    	cmp    DWORD PTR ds:0xc0027140,ebx
c00134cf:	7e 3c                	jle    c001350d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00134d1:	8b 34 9d c0 70 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd8f40]
c00134d8:	31 ff                	xor    edi,edi
c00134da:	39 3c 9d c0 6f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd9040],edi
c00134e1:	7e 27                	jle    c001350a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00134e3:	50                   	push   eax
c00134e4:	50                   	push   eax
c00134e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134e9:	8b 06                	mov    eax,DWORD PTR [esi]
c00134eb:	03 04 9d 40 70 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd8fc0]
c00134f2:	50                   	push   eax
c00134f3:	e8 d8 d1 fe ff       	call   c00006d0 <strcmp>
c00134f8:	83 c4 10             	add    esp,0x10
c00134fb:	85 c0                	test   eax,eax
c00134fd:	75 05                	jne    c0013504 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00134ff:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013502:	eb 0b                	jmp    c001350f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013504:	83 c6 10             	add    esi,0x10
c0013507:	47                   	inc    edi
c0013508:	eb d0                	jmp    c00134da <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001350a:	43                   	inc    ebx
c001350b:	eb bc                	jmp    c00134c9 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001350d:	31 c0                	xor    eax,eax
c001350f:	5b                   	pop    ebx
c0013510:	5e                   	pop    esi
c0013511:	5f                   	pop    edi
c0013512:	c3                   	ret    

c0013513 <Thr::loadKernelSymbolTable(char const*)>:
c0013513:	55                   	push   ebp
c0013514:	57                   	push   edi
c0013515:	56                   	push   esi
c0013516:	53                   	push   ebx
c0013517:	83 ec 68             	sub    esp,0x68
c001351a:	8b 35 90 71 02 c0    	mov    esi,DWORD PTR ds:0xc0027190
c0013520:	68 14 01 00 00       	push   0x114
c0013525:	e8 3b 43 ff ff       	call   c0007865 <malloc>
c001352a:	83 c4 0c             	add    esp,0xc
c001352d:	89 c3                	mov    ebx,eax
c001352f:	56                   	push   esi
c0013530:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013534:	50                   	push   eax
c0013535:	e8 42 76 ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c001353a:	5e                   	pop    esi
c001353b:	5f                   	pop    edi
c001353c:	6a 01                	push   0x1
c001353e:	53                   	push   ebx
c001353f:	e8 f8 76 ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c0013544:	83 c4 10             	add    esp,0x10
c0013547:	85 c0                	test   eax,eax
c0013549:	74 0a                	je     c0013555 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001354b:	83 ec 0c             	sub    esp,0xc
c001354e:	68 fe 06 02 c0       	push   0xc00206fe
c0013553:	eb 34                	jmp    c0013589 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013555:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001355d:	83 ec 0c             	sub    esp,0xc
c0013560:	6a 34                	push   0x34
c0013562:	e8 fe 42 ff ff       	call   c0007865 <malloc>
c0013567:	59                   	pop    ecx
c0013568:	89 c7                	mov    edi,eax
c001356a:	8d 74 24 34          	lea    esi,[esp+0x34]
c001356e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013570:	56                   	push   esi
c0013571:	57                   	push   edi
c0013572:	6a 00                	push   0x0
c0013574:	6a 34                	push   0x34
c0013576:	53                   	push   ebx
c0013577:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001357a:	83 c4 20             	add    esp,0x20
c001357d:	85 c0                	test   eax,eax
c001357f:	74 17                	je     c0013598 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013581:	83 ec 0c             	sub    esp,0xc
c0013584:	68 15 07 02 c0       	push   0xc0020715
c0013589:	e8 39 ce ff ff       	call   c00103c7 <KePanic(char const*)>
c001358e:	83 c4 10             	add    esp,0x10
c0013591:	31 c0                	xor    eax,eax
c0013593:	e9 31 02 00 00       	jmp    c00137c9 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013598:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001359e:	75 e1                	jne    c0013581 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00135a0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00135a3:	85 c0                	test   eax,eax
c00135a5:	74 da                	je     c0013581 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00135a7:	52                   	push   edx
c00135a8:	31 d2                	xor    edx,edx
c00135aa:	52                   	push   edx
c00135ab:	50                   	push   eax
c00135ac:	53                   	push   ebx
c00135ad:	e8 48 77 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c00135b2:	83 c4 10             	add    esp,0x10
c00135b5:	85 c0                	test   eax,eax
c00135b7:	75 c8                	jne    c0013581 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00135b9:	83 ec 0c             	sub    esp,0xc
c00135bc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00135c0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00135c4:	31 ed                	xor    ebp,ebp
c00135c6:	0f af c2             	imul   eax,edx
c00135c9:	50                   	push   eax
c00135ca:	e8 96 42 ff ff       	call   c0007865 <malloc>
c00135cf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00135d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00135d5:	89 34 24             	mov    DWORD PTR [esp],esi
c00135d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135dc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00135e0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00135e4:	0f af c2             	imul   eax,edx
c00135e7:	99                   	cdq    
c00135e8:	52                   	push   edx
c00135e9:	50                   	push   eax
c00135ea:	53                   	push   ebx
c00135eb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00135ee:	83 c4 20             	add    esp,0x20
c00135f1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00135f9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013601:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013609:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013611:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0013615:	0f 86 aa 00 00 00    	jbe    c00136c5 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001361b:	0f b7 f5             	movzx  esi,bp
c001361e:	6b f6 28             	imul   esi,esi,0x28
c0013621:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013625:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013628:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001362c:	50                   	push   eax
c001362d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013631:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013635:	8b 16                	mov    edx,DWORD PTR [esi]
c0013637:	6b c0 28             	imul   eax,eax,0x28
c001363a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001363e:	89 d0                	mov    eax,edx
c0013640:	31 d2                	xor    edx,edx
c0013642:	52                   	push   edx
c0013643:	50                   	push   eax
c0013644:	53                   	push   ebx
c0013645:	e8 b0 76 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c001364a:	83 c4 0c             	add    esp,0xc
c001364d:	6a 20                	push   0x20
c001364f:	6a 00                	push   0x0
c0013651:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013655:	52                   	push   edx
c0013656:	e8 65 ce fe ff       	call   c00004c0 <memset>
c001365b:	58                   	pop    eax
c001365c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001365e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013662:	51                   	push   ecx
c0013663:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013667:	52                   	push   edx
c0013668:	6a 00                	push   0x0
c001366a:	6a 1f                	push   0x1f
c001366c:	53                   	push   ebx
c001366d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013670:	83 c4 18             	add    esp,0x18
c0013673:	68 2c 07 02 c0       	push   0xc002072c
c0013678:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001367c:	52                   	push   edx
c001367d:	e8 4e d0 fe ff       	call   c00006d0 <strcmp>
c0013682:	83 c4 10             	add    esp,0x10
c0013685:	85 c0                	test   eax,eax
c0013687:	75 0f                	jne    c0013698 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013689:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001368c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013690:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013694:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013698:	50                   	push   eax
c0013699:	50                   	push   eax
c001369a:	68 34 07 02 c0       	push   0xc0020734
c001369f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00136a3:	50                   	push   eax
c00136a4:	e8 27 d0 fe ff       	call   c00006d0 <strcmp>
c00136a9:	83 c4 10             	add    esp,0x10
c00136ac:	85 c0                	test   eax,eax
c00136ae:	75 0f                	jne    c00136bf <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00136b0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00136b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00136b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136bf:	45                   	inc    ebp
c00136c0:	e9 4c ff ff ff       	jmp    c0013611 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00136c5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00136ca:	75 10                	jne    c00136dc <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00136cc:	83 ec 0c             	sub    esp,0xc
c00136cf:	68 3c 07 02 c0       	push   0xc002073c
c00136d4:	e8 ee cc ff ff       	call   c00103c7 <KePanic(char const*)>
c00136d9:	83 c4 10             	add    esp,0x10
c00136dc:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00136e1:	75 10                	jne    c00136f3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00136e3:	83 ec 0c             	sub    esp,0xc
c00136e6:	68 3c 07 02 c0       	push   0xc002073c
c00136eb:	e8 d7 cc ff ff       	call   c00103c7 <KePanic(char const*)>
c00136f0:	83 c4 10             	add    esp,0x10
c00136f3:	31 d2                	xor    edx,edx
c00136f5:	50                   	push   eax
c00136f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136fa:	52                   	push   edx
c00136fb:	50                   	push   eax
c00136fc:	53                   	push   ebx
c00136fd:	e8 f8 75 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0013702:	5a                   	pop    edx
c0013703:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013707:	e8 59 41 ff ff       	call   c0007865 <malloc>
c001370c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013710:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013714:	31 c9                	xor    ecx,ecx
c0013716:	5e                   	pop    esi
c0013717:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013719:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001371d:	55                   	push   ebp
c001371e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013722:	51                   	push   ecx
c0013723:	52                   	push   edx
c0013724:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013728:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001372c:	53                   	push   ebx
c001372d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013730:	83 c4 14             	add    esp,0x14
c0013733:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013737:	e8 29 41 ff ff       	call   c0007865 <malloc>
c001373c:	89 c6                	mov    esi,eax
c001373e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013740:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013743:	56                   	push   esi
c0013744:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013748:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001374c:	51                   	push   ecx
c001374d:	52                   	push   edx
c001374e:	53                   	push   ebx
c001374f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013752:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013756:	8b 15 40 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027140
c001375c:	83 c4 1c             	add    esp,0x1c
c001375f:	c1 e8 04             	shr    eax,0x4
c0013762:	89 04 95 c0 6f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9040],eax
c0013769:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001376d:	31 d2                	xor    edx,edx
c001376f:	52                   	push   edx
c0013770:	50                   	push   eax
c0013771:	53                   	push   ebx
c0013772:	e8 83 75 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0013777:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013779:	31 d2                	xor    edx,edx
c001377b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001377e:	56                   	push   esi
c001377f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013783:	52                   	push   edx
c0013784:	50                   	push   eax
c0013785:	53                   	push   ebx
c0013786:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013789:	83 c4 14             	add    esp,0x14
c001378c:	53                   	push   ebx
c001378d:	e8 08 75 ff ff       	call   c000ac9a <File::close()>
c0013792:	5d                   	pop    ebp
c0013793:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013797:	e8 d9 40 ff ff       	call   c0007875 <free>
c001379c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001379f:	e8 d1 40 ff ff       	call   c0007875 <free>
c00137a4:	a1 40 71 02 c0       	mov    eax,ds:0xc0027140
c00137a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00137ad:	8d 50 01             	lea    edx,[eax+0x1]
c00137b0:	89 0c 85 c0 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f40],ecx
c00137b7:	89 34 85 40 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8fc0],esi
c00137be:	89 15 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,edx
c00137c4:	83 c4 10             	add    esp,0x10
c00137c7:	b0 01                	mov    al,0x1
c00137c9:	83 c4 5c             	add    esp,0x5c
c00137cc:	5b                   	pop    ebx
c00137cd:	5e                   	pop    esi
c00137ce:	5f                   	pop    edi
c00137cf:	5d                   	pop    ebp
c00137d0:	c3                   	ret    

c00137d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00137d1:	55                   	push   ebp
c00137d2:	57                   	push   edi
c00137d3:	56                   	push   esi
c00137d4:	53                   	push   ebx
c00137d5:	81 ec 68 03 00 00    	sub    esp,0x368
c00137db:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00137e2:	8b 1d 90 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027190
c00137e8:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00137ec:	68 14 01 00 00       	push   0x114
c00137f1:	e8 6f 40 ff ff       	call   c0007865 <malloc>
c00137f6:	83 c4 0c             	add    esp,0xc
c00137f9:	89 c5                	mov    ebp,eax
c00137fb:	53                   	push   ebx
c00137fc:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013803:	50                   	push   eax
c0013804:	e8 73 73 ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c0013809:	5e                   	pop    esi
c001380a:	5f                   	pop    edi
c001380b:	6a 01                	push   0x1
c001380d:	55                   	push   ebp
c001380e:	e8 29 74 ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c0013813:	83 c4 10             	add    esp,0x10
c0013816:	85 c0                	test   eax,eax
c0013818:	0f 85 a7 06 00 00    	jne    c0013ec5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001381e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013826:	83 ec 0c             	sub    esp,0xc
c0013829:	6a 34                	push   0x34
c001382b:	e8 35 40 ff ff       	call   c0007865 <malloc>
c0013830:	5b                   	pop    ebx
c0013831:	89 c7                	mov    edi,eax
c0013833:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013837:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001383a:	53                   	push   ebx
c001383b:	57                   	push   edi
c001383c:	6a 00                	push   0x0
c001383e:	6a 34                	push   0x34
c0013840:	55                   	push   ebp
c0013841:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013844:	83 c4 20             	add    esp,0x20
c0013847:	85 c0                	test   eax,eax
c0013849:	0f 85 76 06 00 00    	jne    c0013ec5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001384f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013855:	0f 85 6a 06 00 00    	jne    c0013ec5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001385b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001385e:	85 c0                	test   eax,eax
c0013860:	0f 84 5f 06 00 00    	je     c0013ec5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013866:	31 d2                	xor    edx,edx
c0013868:	51                   	push   ecx
c0013869:	52                   	push   edx
c001386a:	50                   	push   eax
c001386b:	55                   	push   ebp
c001386c:	e8 89 74 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0013871:	83 c4 10             	add    esp,0x10
c0013874:	85 c0                	test   eax,eax
c0013876:	0f 85 49 06 00 00    	jne    c0013ec5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001387c:	83 ec 0c             	sub    esp,0xc
c001387f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0013882:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013886:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001388a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001388e:	0f af c2             	imul   eax,edx
c0013891:	50                   	push   eax
c0013892:	e8 ce 3f ff ff       	call   c0007865 <malloc>
c0013897:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001389a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001389e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00138a5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00138a9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00138ad:	0f af c2             	imul   eax,edx
c00138b0:	99                   	cdq    
c00138b1:	52                   	push   edx
c00138b2:	50                   	push   eax
c00138b3:	55                   	push   ebp
c00138b4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00138b7:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00138ba:	83 c4 20             	add    esp,0x20
c00138bd:	85 c0                	test   eax,eax
c00138bf:	0f 84 00 06 00 00    	je     c0013ec5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00138c5:	52                   	push   edx
c00138c6:	31 d2                	xor    edx,edx
c00138c8:	52                   	push   edx
c00138c9:	50                   	push   eax
c00138ca:	55                   	push   ebp
c00138cb:	e8 2a 74 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c00138d0:	83 c4 10             	add    esp,0x10
c00138d3:	85 c0                	test   eax,eax
c00138d5:	0f 85 ea 05 00 00    	jne    c0013ec5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00138db:	83 ec 0c             	sub    esp,0xc
c00138de:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00138e2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00138e6:	31 f6                	xor    esi,esi
c00138e8:	0f af c2             	imul   eax,edx
c00138eb:	50                   	push   eax
c00138ec:	e8 74 3f ff ff       	call   c0007865 <malloc>
c00138f1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00138f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00138f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00138ff:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013903:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013907:	0f af c2             	imul   eax,edx
c001390a:	99                   	cdq    
c001390b:	52                   	push   edx
c001390c:	50                   	push   eax
c001390d:	55                   	push   ebp
c001390e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013911:	83 c4 20             	add    esp,0x20
c0013914:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0013918:	0f 86 8a 00 00 00    	jbe    c00139a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001391e:	0f b7 de             	movzx  ebx,si
c0013921:	c1 e3 05             	shl    ebx,0x5
c0013924:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0013928:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001392b:	75 75                	jne    c00139a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001392d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013930:	31 d2                	xor    edx,edx
c0013932:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013936:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013939:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001393d:	50                   	push   eax
c001393e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013941:	52                   	push   edx
c0013942:	50                   	push   eax
c0013943:	55                   	push   ebp
c0013944:	e8 b1 73 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0013949:	83 c4 10             	add    esp,0x10
c001394c:	85 c0                	test   eax,eax
c001394e:	0f 85 71 05 00 00    	jne    c0013ec5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013954:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001395b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001395e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0013962:	31 d2                	xor    edx,edx
c0013964:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013968:	83 ec 0c             	sub    esp,0xc
c001396b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001396f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013976:	50                   	push   eax
c0013977:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001397b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001397f:	52                   	push   edx
c0013980:	50                   	push   eax
c0013981:	55                   	push   ebp
c0013982:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013985:	83 c4 1c             	add    esp,0x1c
c0013988:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001398b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001398e:	50                   	push   eax
c001398f:	6a 00                	push   0x0
c0013991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013995:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0013999:	50                   	push   eax
c001399a:	e8 21 cb fe ff       	call   c00004c0 <memset>
c001399f:	83 c4 10             	add    esp,0x10
c00139a2:	46                   	inc    esi
c00139a3:	e9 6c ff ff ff       	jmp    c0013914 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00139a8:	53                   	push   ebx
c00139a9:	31 db                	xor    ebx,ebx
c00139ab:	68 00 01 00 00       	push   0x100
c00139b0:	6a 00                	push   0x0
c00139b2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00139b6:	50                   	push   eax
c00139b7:	e8 04 cb fe ff       	call   c00004c0 <memset>
c00139bc:	83 c4 0c             	add    esp,0xc
c00139bf:	68 00 01 00 00       	push   0x100
c00139c4:	6a 00                	push   0x0
c00139c6:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00139cd:	50                   	push   eax
c00139ce:	e8 ed ca fe ff       	call   c00004c0 <memset>
c00139d3:	83 c4 10             	add    esp,0x10
c00139d6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00139de:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00139e6:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00139ee:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00139f6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00139fe:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0013a02:	0f 86 30 01 00 00    	jbe    c0013b38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0013a08:	0f b7 f3             	movzx  esi,bx
c0013a0b:	6b f6 28             	imul   esi,esi,0x28
c0013a0e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013a12:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013a15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013a19:	52                   	push   edx
c0013a1a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a1e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0013a22:	8b 06                	mov    eax,DWORD PTR [esi]
c0013a24:	6b d2 28             	imul   edx,edx,0x28
c0013a27:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0013a2b:	31 d2                	xor    edx,edx
c0013a2d:	52                   	push   edx
c0013a2e:	50                   	push   eax
c0013a2f:	55                   	push   ebp
c0013a30:	e8 c5 72 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0013a35:	83 c4 0c             	add    esp,0xc
c0013a38:	6a 20                	push   0x20
c0013a3a:	6a 00                	push   0x0
c0013a3c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0013a43:	51                   	push   ecx
c0013a44:	e8 77 ca fe ff       	call   c00004c0 <memset>
c0013a49:	59                   	pop    ecx
c0013a4a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013a4d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013a51:	52                   	push   edx
c0013a52:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0013a59:	51                   	push   ecx
c0013a5a:	6a 00                	push   0x0
c0013a5c:	6a 1f                	push   0x1f
c0013a5e:	55                   	push   ebp
c0013a5f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a62:	83 c4 1c             	add    esp,0x1c
c0013a65:	6a 09                	push   0x9
c0013a67:	68 56 07 02 c0       	push   0xc0020756
c0013a6c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0013a73:	51                   	push   ecx
c0013a74:	e8 07 c9 fe ff       	call   c0000380 <memcmp>
c0013a79:	83 c4 10             	add    esp,0x10
c0013a7c:	85 c0                	test   eax,eax
c0013a7e:	75 21                	jne    c0013aa1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0013a80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a88:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0013a8c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013a90:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013a93:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0013a9a:	89 d0                	mov    eax,edx
c0013a9c:	40                   	inc    eax
c0013a9d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013aa1:	50                   	push   eax
c0013aa2:	6a 09                	push   0x9
c0013aa4:	68 60 07 02 c0       	push   0xc0020760
c0013aa9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013ab0:	50                   	push   eax
c0013ab1:	e8 ca c8 fe ff       	call   c0000380 <memcmp>
c0013ab6:	83 c4 10             	add    esp,0x10
c0013ab9:	85 c0                	test   eax,eax
c0013abb:	75 21                	jne    c0013ade <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0013abd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ac1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013ac5:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0013ac9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013acd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013ad0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0013ad7:	89 d0                	mov    eax,edx
c0013ad9:	40                   	inc    eax
c0013ada:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ade:	50                   	push   eax
c0013adf:	50                   	push   eax
c0013ae0:	68 2c 07 02 c0       	push   0xc002072c
c0013ae5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013aec:	50                   	push   eax
c0013aed:	e8 de cb fe ff       	call   c00006d0 <strcmp>
c0013af2:	83 c4 10             	add    esp,0x10
c0013af5:	85 c0                	test   eax,eax
c0013af7:	75 0f                	jne    c0013b08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0013af9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013afc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b04:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013b08:	50                   	push   eax
c0013b09:	50                   	push   eax
c0013b0a:	68 34 07 02 c0       	push   0xc0020734
c0013b0f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013b16:	50                   	push   eax
c0013b17:	e8 b4 cb fe ff       	call   c00006d0 <strcmp>
c0013b1c:	83 c4 10             	add    esp,0x10
c0013b1f:	85 c0                	test   eax,eax
c0013b21:	75 0f                	jne    c0013b32 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0013b23:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013b26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013b2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b2e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013b32:	43                   	inc    ebx
c0013b33:	e9 c6 fe ff ff       	jmp    c00139fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0013b38:	31 d2                	xor    edx,edx
c0013b3a:	50                   	push   eax
c0013b3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b3f:	52                   	push   edx
c0013b40:	50                   	push   eax
c0013b41:	55                   	push   ebp
c0013b42:	e8 b3 71 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0013b47:	58                   	pop    eax
c0013b48:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013b4c:	e8 14 3d ff ff       	call   c0007865 <malloc>
c0013b51:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013b54:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0013b58:	31 d2                	xor    edx,edx
c0013b5a:	58                   	pop    eax
c0013b5b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013b5f:	53                   	push   ebx
c0013b60:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013b64:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013b68:	52                   	push   edx
c0013b69:	50                   	push   eax
c0013b6a:	55                   	push   ebp
c0013b6b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013b6e:	83 c4 14             	add    esp,0x14
c0013b71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b75:	e8 eb 3c ff ff       	call   c0007865 <malloc>
c0013b7a:	31 d2                	xor    edx,edx
c0013b7c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013b80:	83 c4 0c             	add    esp,0xc
c0013b83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013b87:	52                   	push   edx
c0013b88:	50                   	push   eax
c0013b89:	55                   	push   ebp
c0013b8a:	e8 6b 71 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0013b8f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013b92:	31 d2                	xor    edx,edx
c0013b94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b97:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013b9b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013b9f:	52                   	push   edx
c0013ba0:	50                   	push   eax
c0013ba1:	55                   	push   ebp
c0013ba2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ba5:	83 c4 20             	add    esp,0x20
c0013ba8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013bb0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013bb4:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0013bb8:	0f 84 0b 03 00 00    	je     c0013ec9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0013bbe:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0013bc5:	31 d2                	xor    edx,edx
c0013bc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013bcb:	c1 e8 03             	shr    eax,0x3
c0013bce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013bd2:	51                   	push   ecx
c0013bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bd7:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0013bdb:	52                   	push   edx
c0013bdc:	50                   	push   eax
c0013bdd:	55                   	push   ebp
c0013bde:	e8 17 71 ff ff       	call   c000acfa <File::seek(unsigned long long)>
c0013be3:	5b                   	pop    ebx
c0013be4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013be8:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0013bef:	e8 71 3c ff ff       	call   c0007865 <malloc>
c0013bf4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013bf7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013bfb:	31 d2                	xor    edx,edx
c0013bfd:	5e                   	pop    esi
c0013bfe:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013c02:	50                   	push   eax
c0013c03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c0b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0013c12:	52                   	push   edx
c0013c13:	50                   	push   eax
c0013c14:	55                   	push   ebp
c0013c15:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013c18:	83 c4 20             	add    esp,0x20
c0013c1b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0013c23:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0013c27:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0013c2b:	0f 8d 7c 02 00 00    	jge    c0013ead <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0013c31:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013c35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c39:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0013c3e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0013c41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013c45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c49:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0013c4d:	89 d8                	mov    eax,ebx
c0013c4f:	c1 e8 08             	shr    eax,0x8
c0013c52:	89 c6                	mov    esi,eax
c0013c54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013c58:	c1 e6 04             	shl    esi,0x4
c0013c5b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013c5f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0013c62:	85 d2                	test   edx,edx
c0013c64:	0f 85 bf 00 00 00    	jne    c0013d29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0013c6a:	83 ec 0c             	sub    esp,0xc
c0013c6d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013c71:	03 06                	add    eax,DWORD PTR [esi]
c0013c73:	50                   	push   eax
c0013c74:	e8 4b f8 ff ff       	call   c00134c4 <Thr::getAddressOfKernelSymbol(char const*)>
c0013c79:	83 c4 10             	add    esp,0x10
c0013c7c:	89 c2                	mov    edx,eax
c0013c7e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0013c83:	85 c0                	test   eax,eax
c0013c85:	0f 85 9e 00 00 00    	jne    c0013d29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0013c8b:	83 ec 0c             	sub    esp,0xc
c0013c8e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013c92:	03 06                	add    eax,DWORD PTR [esi]
c0013c94:	50                   	push   eax
c0013c95:	e8 7e c8 ff ff       	call   c0010518 <KeResolveCompatibilitySymbol(char*)>
c0013c9a:	83 c4 10             	add    esp,0x10
c0013c9d:	89 c2                	mov    edx,eax
c0013c9f:	85 c0                	test   eax,eax
c0013ca1:	0f 85 82 00 00 00    	jne    c0013d29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0013ca7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013cab:	50                   	push   eax
c0013cac:	50                   	push   eax
c0013cad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cb1:	03 06                	add    eax,DWORD PTR [esi]
c0013cb3:	50                   	push   eax
c0013cb4:	68 6a 07 02 c0       	push   0xc002076a
c0013cb9:	e8 48 69 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0013cbe:	58                   	pop    eax
c0013cbf:	5a                   	pop    edx
c0013cc0:	68 84 07 02 c0       	push   0xc0020784
c0013cc5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013ccc:	50                   	push   eax
c0013ccd:	e8 1e c9 fe ff       	call   c00005f0 <strcpy>
c0013cd2:	59                   	pop    ecx
c0013cd3:	58                   	pop    eax
c0013cd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cd8:	03 06                	add    eax,DWORD PTR [esi]
c0013cda:	50                   	push   eax
c0013cdb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013ce2:	50                   	push   eax
c0013ce3:	e8 c8 ca fe ff       	call   c00007b0 <strcat>
c0013ce8:	58                   	pop    eax
c0013ce9:	5a                   	pop    edx
c0013cea:	68 1a 08 02 c0       	push   0xc002081a
c0013cef:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013cf6:	50                   	push   eax
c0013cf7:	e8 b4 ca fe ff       	call   c00007b0 <strcat>
c0013cfc:	83 c4 10             	add    esp,0x10
c0013cff:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013d04:	0f 84 5d 01 00 00    	je     c0013e67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013d0a:	83 ec 0c             	sub    esp,0xc
c0013d0d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013d14:	50                   	push   eax
c0013d15:	e8 ad c6 ff ff       	call   c00103c7 <KePanic(char const*)>
c0013d1a:	83 c4 10             	add    esp,0x10
c0013d1d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0013d21:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013d25:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0013d29:	80 fb 01             	cmp    bl,0x1
c0013d2c:	0f 85 88 00 00 00    	jne    c0013dba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0013d32:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0013d39:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0013d3d:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0013d41:	01 ce                	add    esi,ecx
c0013d43:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0013d49:	0f 94 c0             	sete   al
c0013d4c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0013d52:	0f 94 c3             	sete   bl
c0013d55:	09 c3                	or     ebx,eax
c0013d57:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d59:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0013d5e:	74 41                	je     c0013da1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0013d60:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013d63:	84 db                	test   bl,bl
c0013d65:	75 15                	jne    c0013d7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0013d67:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013d6b:	66 83 f8 0c          	cmp    ax,0xc
c0013d6f:	76 05                	jbe    c0013d76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0013d71:	b8 0c 00 00 00       	mov    eax,0xc
c0013d76:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0013d7a:	76 37                	jbe    c0013db3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013d7c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0013d80:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013d85:	0f 84 dc 00 00 00    	je     c0013e67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013d8b:	83 ec 0c             	sub    esp,0xc
c0013d8e:	68 9b 07 02 c0       	push   0xc002079b
c0013d93:	e8 2f c6 ff ff       	call   c00103c7 <KePanic(char const*)>
c0013d98:	83 c4 10             	add    esp,0x10
c0013d9b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013d9f:	eb 12                	jmp    c0013db3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013da1:	01 c1                	add    ecx,eax
c0013da3:	84 db                	test   bl,bl
c0013da5:	75 0c                	jne    c0013db3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013da7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013dab:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0013daf:	77 02                	ja     c0013db3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013db1:	01 d1                	add    ecx,edx
c0013db3:	89 0e                	mov    DWORD PTR [esi],ecx
c0013db5:	e9 ea 00 00 00       	jmp    c0013ea4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013dba:	80 fb 02             	cmp    bl,0x2
c0013dbd:	75 7c                	jne    c0013e3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0013dbf:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0013dc6:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0013dca:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0013dce:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0013dd4:	74 20                	je     c0013df6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0013dd6:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0013ddc:	74 18                	je     c0013df6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0013dde:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013de2:	b9 0a 00 00 00       	mov    ecx,0xa
c0013de7:	66 83 f8 0e          	cmp    ax,0xe
c0013deb:	77 03                	ja     c0013df0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0013ded:	8d 48 fc             	lea    ecx,[eax-0x4]
c0013df0:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0013df4:	76 1f                	jbe    c0013e15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0013df6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0013dfa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013dff:	74 66                	je     c0013e67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013e01:	83 ec 0c             	sub    esp,0xc
c0013e04:	68 b7 07 02 c0       	push   0xc00207b7
c0013e09:	e8 b9 c5 ff ff       	call   c00103c7 <KePanic(char const*)>
c0013e0e:	83 c4 10             	add    esp,0x10
c0013e11:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013e15:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e17:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0013e1c:	74 13                	je     c0013e31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0013e1e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0013e22:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0013e29:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0013e2d:	01 c8                	add    eax,ecx
c0013e2f:	eb 04                	jmp    c0013e35 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0013e31:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0013e35:	01 c2                	add    edx,eax
c0013e37:	89 16                	mov    DWORD PTR [esi],edx
c0013e39:	eb 69                	jmp    c0013ea4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013e3b:	0f b6 db             	movzx  ebx,bl
c0013e3e:	50                   	push   eax
c0013e3f:	50                   	push   eax
c0013e40:	53                   	push   ebx
c0013e41:	68 d3 07 02 c0       	push   0xc00207d3
c0013e46:	e8 bb 67 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0013e4b:	83 c4 10             	add    esp,0x10
c0013e4e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013e53:	74 12                	je     c0013e67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013e55:	83 ec 0c             	sub    esp,0xc
c0013e58:	68 de 07 02 c0       	push   0xc00207de
c0013e5d:	e8 65 c5 ff ff       	call   c00103c7 <KePanic(char const*)>
c0013e62:	83 c4 10             	add    esp,0x10
c0013e65:	eb 3d                	jmp    c0013ea4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013e67:	83 ec 0c             	sub    esp,0xc
c0013e6a:	55                   	push   ebp
c0013e6b:	e8 2a 6e ff ff       	call   c000ac9a <File::close()>
c0013e70:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013e73:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013e76:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013e79:	59                   	pop    ecx
c0013e7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e7e:	e8 f2 39 ff ff       	call   c0007875 <free>
c0013e83:	5b                   	pop    ebx
c0013e84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013e88:	e8 e8 39 ff ff       	call   c0007875 <free>
c0013e8d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013e90:	e8 e0 39 ff ff       	call   c0007875 <free>
c0013e95:	5e                   	pop    esi
c0013e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e9a:	e8 d6 39 ff ff       	call   c0007875 <free>
c0013e9f:	83 c4 10             	add    esp,0x10
c0013ea2:	eb 21                	jmp    c0013ec5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013ea4:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0013ea8:	e9 76 fd ff ff       	jmp    c0013c23 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0013ead:	83 ec 0c             	sub    esp,0xc
c0013eb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013eb4:	e8 bc 39 ff ff       	call   c0007875 <free>
c0013eb9:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0013ebd:	83 c4 10             	add    esp,0x10
c0013ec0:	e9 eb fc ff ff       	jmp    c0013bb0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0013ec5:	31 c0                	xor    eax,eax
c0013ec7:	eb 33                	jmp    c0013efc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0013ec9:	83 ec 0c             	sub    esp,0xc
c0013ecc:	55                   	push   ebp
c0013ecd:	e8 c8 6d ff ff       	call   c000ac9a <File::close()>
c0013ed2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013ed5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013ed8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013edb:	58                   	pop    eax
c0013edc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013ee0:	e8 90 39 ff ff       	call   c0007875 <free>
c0013ee5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013ee8:	e8 88 39 ff ff       	call   c0007875 <free>
c0013eed:	5a                   	pop    edx
c0013eee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ef2:	e8 7e 39 ff ff       	call   c0007875 <free>
c0013ef7:	83 c4 10             	add    esp,0x10
c0013efa:	b0 01                	mov    al,0x1
c0013efc:	81 c4 5c 03 00 00    	add    esp,0x35c
c0013f02:	5b                   	pop    ebx
c0013f03:	5e                   	pop    esi
c0013f04:	5f                   	pop    edi
c0013f05:	5d                   	pop    ebp
c0013f06:	c3                   	ret    

c0013f07 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0013f07:	56                   	push   esi
c0013f08:	31 d2                	xor    edx,edx
c0013f0a:	53                   	push   ebx
c0013f0b:	8b 1d a0 69 02 c0    	mov    ebx,DWORD PTR ds:0xc00269a0
c0013f11:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f15:	39 d3                	cmp    ebx,edx
c0013f17:	7e 1b                	jle    c0013f34 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0013f19:	8b 04 95 c0 6b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9440]
c0013f20:	39 c8                	cmp    eax,ecx
c0013f22:	77 0d                	ja     c0013f31 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0013f24:	8b 34 95 c0 69 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd9640]
c0013f2b:	01 c6                	add    esi,eax
c0013f2d:	39 ce                	cmp    esi,ecx
c0013f2f:	77 05                	ja     c0013f36 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0013f31:	42                   	inc    edx
c0013f32:	eb e1                	jmp    c0013f15 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0013f34:	31 c0                	xor    eax,eax
c0013f36:	5b                   	pop    ebx
c0013f37:	5e                   	pop    esi
c0013f38:	c3                   	ret    

c0013f39 <Thr::getDriverNameFromAddress(unsigned long)>:
c0013f39:	53                   	push   ebx
c0013f3a:	31 c0                	xor    eax,eax
c0013f3c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013f40:	8b 1d a0 69 02 c0    	mov    ebx,DWORD PTR ds:0xc00269a0
c0013f46:	39 c3                	cmp    ebx,eax
c0013f48:	7e 22                	jle    c0013f6c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0013f4a:	8b 14 85 c0 6b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9440]
c0013f51:	39 ca                	cmp    edx,ecx
c0013f53:	77 14                	ja     c0013f69 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013f55:	03 14 85 c0 69 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd9640]
c0013f5c:	39 ca                	cmp    edx,ecx
c0013f5e:	76 09                	jbe    c0013f69 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013f60:	8b 04 85 c0 6d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9240]
c0013f67:	eb 05                	jmp    c0013f6e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0013f69:	40                   	inc    eax
c0013f6a:	eb da                	jmp    c0013f46 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0013f6c:	31 c0                	xor    eax,eax
c0013f6e:	5b                   	pop    ebx
c0013f6f:	c3                   	ret    

c0013f70 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0013f70:	53                   	push   ebx
c0013f71:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0013f75:	53                   	push   ebx
c0013f76:	e8 8c ff ff ff       	call   c0013f07 <Thr::getDriverBaseFromAddress(unsigned long)>
c0013f7b:	5a                   	pop    edx
c0013f7c:	31 d2                	xor    edx,edx
c0013f7e:	85 c0                	test   eax,eax
c0013f80:	74 04                	je     c0013f86 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0013f82:	89 da                	mov    edx,ebx
c0013f84:	29 c2                	sub    edx,eax
c0013f86:	89 d0                	mov    eax,edx
c0013f88:	5b                   	pop    ebx
c0013f89:	c3                   	ret    

c0013f8a <Thr::loadDLL(char const*, bool)>:
c0013f8a:	55                   	push   ebp
c0013f8b:	57                   	push   edi
c0013f8c:	56                   	push   esi
c0013f8d:	53                   	push   ebx
c0013f8e:	81 ec 34 01 00 00    	sub    esp,0x134
c0013f94:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0013f9b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0013fa2:	56                   	push   esi
c0013fa3:	68 f6 07 02 c0       	push   0xc00207f6
c0013fa8:	e8 59 66 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0013fad:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013fb4:	e8 ac 38 ff ff       	call   c0007865 <malloc>
c0013fb9:	83 c4 0c             	add    esp,0xc
c0013fbc:	89 c3                	mov    ebx,eax
c0013fbe:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0013fc4:	56                   	push   esi
c0013fc5:	50                   	push   eax
c0013fc6:	e8 b1 6b ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c0013fcb:	83 c4 10             	add    esp,0x10
c0013fce:	85 db                	test   ebx,ebx
c0013fd0:	75 3c                	jne    c001400e <Thr::loadDLL(char const*, bool)+0x84>
c0013fd2:	89 f8                	mov    eax,edi
c0013fd4:	84 c0                	test   al,al
c0013fd6:	0f 84 d2 01 00 00    	je     c00141ae <Thr::loadDLL(char const*, bool)+0x224>
c0013fdc:	55                   	push   ebp
c0013fdd:	55                   	push   ebp
c0013fde:	68 07 08 02 c0       	push   0xc0020807
c0013fe3:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0013fe7:	55                   	push   ebp
c0013fe8:	e8 03 c6 fe ff       	call   c00005f0 <strcpy>
c0013fed:	58                   	pop    eax
c0013fee:	5a                   	pop    edx
c0013fef:	56                   	push   esi
c0013ff0:	55                   	push   ebp
c0013ff1:	e8 ba c7 fe ff       	call   c00007b0 <strcat>
c0013ff6:	59                   	pop    ecx
c0013ff7:	58                   	pop    eax
c0013ff8:	68 1a 08 02 c0       	push   0xc002081a
c0013ffd:	55                   	push   ebp
c0013ffe:	e8 ad c7 fe ff       	call   c00007b0 <strcat>
c0014003:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014006:	e8 bc c3 ff ff       	call   c00103c7 <KePanic(char const*)>
c001400b:	83 c4 10             	add    esp,0x10
c001400e:	51                   	push   ecx
c001400f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014013:	50                   	push   eax
c0014014:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014018:	50                   	push   eax
c0014019:	53                   	push   ebx
c001401a:	e8 c9 6e ff ff       	call   c000aee8 <File::stat(unsigned long long*, bool*)>
c001401f:	83 c4 10             	add    esp,0x10
c0014022:	85 db                	test   ebx,ebx
c0014024:	74 0c                	je     c0014032 <Thr::loadDLL(char const*, bool)+0xa8>
c0014026:	83 ec 0c             	sub    esp,0xc
c0014029:	8b 03                	mov    eax,DWORD PTR [ebx]
c001402b:	53                   	push   ebx
c001402c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001402f:	83 c4 10             	add    esp,0x10
c0014032:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014037:	75 0a                	jne    c0014043 <Thr::loadDLL(char const*, bool)+0xb9>
c0014039:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001403d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014041:	75 3c                	jne    c001407f <Thr::loadDLL(char const*, bool)+0xf5>
c0014043:	89 f8                	mov    eax,edi
c0014045:	84 c0                	test   al,al
c0014047:	0f 84 49 01 00 00    	je     c0014196 <Thr::loadDLL(char const*, bool)+0x20c>
c001404d:	51                   	push   ecx
c001404e:	51                   	push   ecx
c001404f:	68 07 08 02 c0       	push   0xc0020807
c0014054:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014058:	53                   	push   ebx
c0014059:	e8 92 c5 fe ff       	call   c00005f0 <strcpy>
c001405e:	5d                   	pop    ebp
c001405f:	58                   	pop    eax
c0014060:	56                   	push   esi
c0014061:	53                   	push   ebx
c0014062:	e8 49 c7 fe ff       	call   c00007b0 <strcat>
c0014067:	58                   	pop    eax
c0014068:	5a                   	pop    edx
c0014069:	68 1a 08 02 c0       	push   0xc002081a
c001406e:	53                   	push   ebx
c001406f:	e8 3c c7 fe ff       	call   c00007b0 <strcat>
c0014074:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014077:	e8 4b c3 ff ff       	call   c00103c7 <KePanic(char const*)>
c001407c:	83 c4 10             	add    esp,0x10
c001407f:	52                   	push   edx
c0014080:	6a 03                	push   0x3
c0014082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014086:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001408a:	05 ff 0f 00 00       	add    eax,0xfff
c001408f:	83 d2 00             	adc    edx,0x0
c0014092:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014096:	50                   	push   eax
c0014097:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001409d:	e8 6e 5a ff ff       	call   c0009b10 <VAS::allocatePages(int, int)>
c00140a2:	59                   	pop    ecx
c00140a3:	89 c3                	mov    ebx,eax
c00140a5:	5d                   	pop    ebp
c00140a6:	50                   	push   eax
c00140a7:	68 72 f3 01 c0       	push   0xc001f372
c00140ac:	e8 55 65 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00140b1:	89 34 24             	mov    DWORD PTR [esp],esi
c00140b4:	e8 77 c4 fe ff       	call   c0000530 <strlen>
c00140b9:	8b 2d a0 69 02 c0    	mov    ebp,DWORD PTR ds:0xc00269a0
c00140bf:	40                   	inc    eax
c00140c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00140c3:	e8 9d 37 ff ff       	call   c0007865 <malloc>
c00140c8:	89 04 ad c0 6d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd9240],eax
c00140cf:	58                   	pop    eax
c00140d0:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c00140d5:	5a                   	pop    edx
c00140d6:	56                   	push   esi
c00140d7:	ff 34 85 c0 6d 02 c0 	push   DWORD PTR [eax*4-0x3ffd9240]
c00140de:	e8 0d c5 fe ff       	call   c00005f0 <strcpy>
c00140e3:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c00140e8:	8d 50 01             	lea    edx,[eax+0x1]
c00140eb:	89 1c 85 c0 6b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9440],ebx
c00140f2:	89 15 a0 69 02 c0    	mov    DWORD PTR ds:0xc00269a0,edx
c00140f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00140fc:	83 c4 0c             	add    esp,0xc
c00140ff:	89 14 85 c0 69 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9640],edx
c0014106:	6a 01                	push   0x1
c0014108:	53                   	push   ebx
c0014109:	56                   	push   esi
c001410a:	e8 c2 f6 ff ff       	call   c00137d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001410f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014113:	83 c4 10             	add    esp,0x10
c0014116:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001411b:	0f 85 89 00 00 00    	jne    c00141aa <Thr::loadDLL(char const*, bool)+0x220>
c0014121:	89 f8                	mov    eax,edi
c0014123:	84 c0                	test   al,al
c0014125:	74 73                	je     c001419a <Thr::loadDLL(char const*, bool)+0x210>
c0014127:	83 ec 0c             	sub    esp,0xc
c001412a:	68 1c 08 02 c0       	push   0xc002081c
c001412f:	e8 93 c2 ff ff       	call   c00103c7 <KePanic(char const*)>
c0014134:	83 c4 10             	add    esp,0x10
c0014137:	eb 61                	jmp    c001419a <Thr::loadDLL(char const*, bool)+0x210>
c0014139:	50                   	push   eax
c001413a:	50                   	push   eax
c001413b:	89 e8                	mov    eax,ebp
c001413d:	c1 e0 0c             	shl    eax,0xc
c0014140:	01 d8                	add    eax,ebx
c0014142:	50                   	push   eax
c0014143:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c0014149:	e8 d0 54 ff ff       	call   c000961e <VAS::getPageTableEntry(unsigned long)>
c001414e:	83 c4 10             	add    esp,0x10
c0014151:	8b 00                	mov    eax,DWORD PTR [eax]
c0014153:	a8 60                	test   al,0x60
c0014155:	75 11                	jne    c0014168 <Thr::loadDLL(char const*, bool)+0x1de>
c0014157:	83 ec 0c             	sub    esp,0xc
c001415a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001415f:	50                   	push   eax
c0014160:	e8 7a 39 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c0014165:	83 c4 10             	add    esp,0x10
c0014168:	45                   	inc    ebp
c0014169:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001416d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014171:	05 ff 0f 00 00       	add    eax,0xfff
c0014176:	bf 00 00 00 00       	mov    edi,0x0
c001417b:	83 d2 00             	adc    edx,0x0
c001417e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014182:	c1 ea 0c             	shr    edx,0xc
c0014185:	39 c5                	cmp    ebp,eax
c0014187:	89 d1                	mov    ecx,edx
c0014189:	89 f8                	mov    eax,edi
c001418b:	19 c8                	sbb    eax,ecx
c001418d:	72 aa                	jb     c0014139 <Thr::loadDLL(char const*, bool)+0x1af>
c001418f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014194:	75 18                	jne    c00141ae <Thr::loadDLL(char const*, bool)+0x224>
c0014196:	31 db                	xor    ebx,ebx
c0014198:	eb 14                	jmp    c00141ae <Thr::loadDLL(char const*, bool)+0x224>
c001419a:	83 ec 0c             	sub    esp,0xc
c001419d:	68 3b 08 02 c0       	push   0xc002083b
c00141a2:	e8 20 c2 ff ff       	call   c00103c7 <KePanic(char const*)>
c00141a7:	83 c4 10             	add    esp,0x10
c00141aa:	31 ed                	xor    ebp,ebp
c00141ac:	eb bb                	jmp    c0014169 <Thr::loadDLL(char const*, bool)+0x1df>
c00141ae:	81 c4 2c 01 00 00    	add    esp,0x12c
c00141b4:	89 d8                	mov    eax,ebx
c00141b6:	5b                   	pop    ebx
c00141b7:	5e                   	pop    esi
c00141b8:	5f                   	pop    edi
c00141b9:	5d                   	pop    ebp
c00141ba:	c3                   	ret    

c00141bb <Thr::executeDLL(unsigned long, void*)>:
c00141bb:	56                   	push   esi
c00141bc:	53                   	push   ebx
c00141bd:	52                   	push   edx
c00141be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00141c2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00141c6:	85 db                	test   ebx,ebx
c00141c8:	75 10                	jne    c00141da <Thr::executeDLL(unsigned long, void*)+0x1f>
c00141ca:	83 ec 0c             	sub    esp,0xc
c00141cd:	68 57 08 02 c0       	push   0xc0020857
c00141d2:	e8 f0 c1 ff ff       	call   c00103c7 <KePanic(char const*)>
c00141d7:	83 c4 10             	add    esp,0x10
c00141da:	50                   	push   eax
c00141db:	50                   	push   eax
c00141dc:	53                   	push   ebx
c00141dd:	68 81 08 02 c0       	push   0xc0020881
c00141e2:	e8 1f 64 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00141e7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00141eb:	89 d8                	mov    eax,ebx
c00141ed:	83 c4 14             	add    esp,0x14
c00141f0:	5b                   	pop    ebx
c00141f1:	5e                   	pop    esi
c00141f2:	ff e0                	jmp    eax

c00141f4 <userModeEntryPoint(void*)>:
c00141f4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00141f9:	48                   	dec    eax
c00141fa:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00141ff:	75 03                	jne    c0014204 <userModeEntryPoint(void*)+0x10>
c0014201:	fb                   	sti    
c0014202:	66 90                	xchg   ax,ax
c0014204:	fb                   	sti    
c0014205:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001420a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001420d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014213:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014217:	e9 23 c0 fe ff       	jmp    c000023f <goToUsermode>

c001421c <changeTSS>:
c001421c:	83 ec 14             	sub    esp,0x14
c001421f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014224:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014227:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001422c:	c1 e2 15             	shl    edx,0x15
c001422f:	29 d0                	sub    eax,edx
c0014231:	50                   	push   eax
c0014232:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0014237:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001423d:	05 7c 11 00 00       	add    eax,0x117c
c0014242:	50                   	push   eax
c0014243:	e8 54 4a ff ff       	call   c0008c9c <TSS::setESP(unsigned long)>
c0014248:	83 c4 1c             	add    esp,0x1c
c001424b:	c3                   	ret    

c001424c <switchToThread(ThreadControlBlock*)>:
c001424c:	57                   	push   edi
c001424d:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014252:	56                   	push   esi
c0014253:	85 c0                	test   eax,eax
c0014255:	53                   	push   ebx
c0014256:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001425a:	0f 85 90 00 00 00    	jne    c00142f0 <switchToThread(ThreadControlBlock*)+0xa4>
c0014260:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0014263:	80 fa ff             	cmp    dl,0xff
c0014266:	0f 84 80 00 00 00    	je     c00142ec <switchToThread(ThreadControlBlock*)+0xa0>
c001426c:	81 e2 ff 00 00 00    	and    edx,0xff
c0014272:	b8 00 04 00 00       	mov    eax,0x400
c0014277:	29 d0                	sub    eax,edx
c0014279:	d1 f8                	sar    eax,1
c001427b:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001427e:	66 90                	xchg   ax,ax
c0014280:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014283:	e8 80 26 00 00       	call   c0016908 <HalQueryPerformanceCounter()>
c0014288:	a3 a8 71 02 c0       	mov    ds:0xc00271a8,eax
c001428d:	89 15 ac 71 02 c0    	mov    DWORD PTR ds:0xc00271ac,edx
c0014293:	89 c6                	mov    esi,eax
c0014295:	89 d7                	mov    edi,edx
c0014297:	2b 35 98 71 02 c0    	sub    esi,DWORD PTR ds:0xc0027198
c001429d:	a3 98 71 02 c0       	mov    ds:0xc0027198,eax
c00142a2:	1b 3d 9c 71 02 c0    	sbb    edi,DWORD PTR ds:0xc002719c
c00142a8:	89 35 a0 71 02 c0    	mov    DWORD PTR ds:0xc00271a0,esi
c00142ae:	89 3d a4 71 02 c0    	mov    DWORD PTR ds:0xc00271a4,edi
c00142b4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00142ba:	89 15 9c 71 02 c0    	mov    DWORD PTR ds:0xc002719c,edx
c00142c0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00142c3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00142c6:	01 c6                	add    esi,eax
c00142c8:	11 d7                	adc    edi,edx
c00142ca:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00142cd:	83 ec 0c             	sub    esp,0xc
c00142d0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00142d3:	53                   	push   ebx
c00142d4:	e8 9e bf fe ff       	call   c0000277 <switchToThreadASM>
c00142d9:	0f 20 c0             	mov    eax,cr0
c00142dc:	83 c8 08             	or     eax,0x8
c00142df:	0f 22 c0             	mov    cr0,eax
c00142e2:	83 c4 10             	add    esp,0x10
c00142e5:	5b                   	pop    ebx
c00142e6:	5e                   	pop    esi
c00142e7:	5f                   	pop    edi
c00142e8:	c3                   	ret    
c00142e9:	8d 76 00             	lea    esi,[esi+0x0]
c00142ec:	31 c0                	xor    eax,eax
c00142ee:	eb 90                	jmp    c0014280 <switchToThread(ThreadControlBlock*)+0x34>
c00142f0:	5b                   	pop    ebx
c00142f1:	c7 05 60 71 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x1
c00142fb:	5e                   	pop    esi
c00142fc:	5f                   	pop    edi
c00142fd:	c3                   	ret    
c00142fe:	66 90                	xchg   ax,ax

c0014300 <Process::addArgs(char**)>:
c0014300:	57                   	push   edi
c0014301:	56                   	push   esi
c0014302:	53                   	push   ebx
c0014303:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014307:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001430b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0014315:	85 ff                	test   edi,edi
c0014317:	74 43                	je     c001435c <Process::addArgs(char**)+0x5c>
c0014319:	8b 07                	mov    eax,DWORD PTR [edi]
c001431b:	85 c0                	test   eax,eax
c001431d:	74 3d                	je     c001435c <Process::addArgs(char**)+0x5c>
c001431f:	31 db                	xor    ebx,ebx
c0014321:	8d 76 00             	lea    esi,[esi+0x0]
c0014324:	83 ec 0c             	sub    esp,0xc
c0014327:	50                   	push   eax
c0014328:	e8 03 c2 fe ff       	call   c0000530 <strlen>
c001432d:	40                   	inc    eax
c001432e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014331:	e8 2f 35 ff ff       	call   c0007865 <malloc>
c0014336:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001433d:	5a                   	pop    edx
c001433e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014341:	59                   	pop    ecx
c0014342:	43                   	inc    ebx
c0014343:	52                   	push   edx
c0014344:	50                   	push   eax
c0014345:	e8 a6 c2 fe ff       	call   c00005f0 <strcpy>
c001434a:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0014350:	83 c4 10             	add    esp,0x10
c0014353:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0014356:	85 c0                	test   eax,eax
c0014358:	75 ca                	jne    c0014324 <Process::addArgs(char**)+0x24>
c001435a:	66 90                	xchg   ax,ax
c001435c:	5b                   	pop    ebx
c001435d:	5e                   	pop    esi
c001435e:	5f                   	pop    edi
c001435f:	c3                   	ret    

c0014360 <Process::Process(char const*, Process*, char**)>:
c0014360:	56                   	push   esi
c0014361:	53                   	push   ebx
c0014362:	83 ec 14             	sub    esp,0x14
c0014365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014369:	05 0c 02 00 00       	add    eax,0x20c
c001436e:	bb 07 00 00 00       	mov    ebx,0x7
c0014373:	89 c6                	mov    esi,eax
c0014375:	8d 76 00             	lea    esi,[esi+0x0]
c0014378:	85 db                	test   ebx,ebx
c001437a:	78 14                	js     c0014390 <Process::Process(char const*, Process*, char**)+0x30>
c001437c:	83 ec 0c             	sub    esp,0xc
c001437f:	56                   	push   esi
c0014380:	e8 6f a2 00 00       	call   c001e5f4 <ThreadControlBlock::ThreadControlBlock()>
c0014385:	83 c4 10             	add    esp,0x10
c0014388:	83 c6 5f             	add    esi,0x5f
c001438b:	4b                   	dec    ebx
c001438c:	eb ea                	jmp    c0014378 <Process::Process(char const*, Process*, char**)+0x18>
c001438e:	66 90                	xchg   ax,ax
c0014390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014394:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001439b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001439f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00143a6:	83 ec 0c             	sub    esp,0xc
c00143a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00143ad:	e8 0a be ff ff       	call   c00101bc <Krnl::newProcessEnv(Process*)>
c00143b2:	83 c4 10             	add    esp,0x10
c00143b5:	89 c2                	mov    edx,eax
c00143b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143bb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00143c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143c5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00143ce:	a1 40 1a 02 c0       	mov    eax,ds:0xc0021a40
c00143d3:	8d 50 01             	lea    edx,[eax+0x1]
c00143d6:	89 15 40 1a 02 c0    	mov    DWORD PTR ds:0xc0021a40,edx
c00143dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00143e0:	89 02                	mov    DWORD PTR [edx],eax
c00143e2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00143ea:	83 ec 0c             	sub    esp,0xc
c00143ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00143f1:	e8 6f 34 ff ff       	call   c0007865 <malloc>
c00143f6:	83 c4 10             	add    esp,0x10
c00143f9:	89 c3                	mov    ebx,eax
c00143fb:	83 ec 08             	sub    esp,0x8
c00143fe:	6a 00                	push   0x0
c0014400:	53                   	push   ebx
c0014401:	e8 b4 5a ff ff       	call   c0009eba <VAS::VAS(bool)>
c0014406:	83 c4 10             	add    esp,0x10
c0014409:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001440d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014413:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014417:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014421:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014425:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014429:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001442f:	e8 e6 c2 ff ff       	call   c001071a <KeInitSignals()>
c0014434:	89 c2                	mov    edx,eax
c0014436:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001443a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014440:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014444:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001444a:	85 c0                	test   eax,eax
c001444c:	74 42                	je     c0014490 <Process::Process(char const*, Process*, char**)+0x130>
c001444e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014452:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014458:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001445e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014462:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014468:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001446c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014472:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014478:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001447c:	05 0c 01 00 00       	add    eax,0x10c
c0014481:	83 ec 08             	sub    esp,0x8
c0014484:	52                   	push   edx
c0014485:	50                   	push   eax
c0014486:	e8 65 c1 fe ff       	call   c00005f0 <strcpy>
c001448b:	83 c4 10             	add    esp,0x10
c001448e:	eb 64                	jmp    c00144f4 <Process::Process(char const*, Process*, char**)+0x194>
c0014490:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014498:	83 ec 0c             	sub    esp,0xc
c001449b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001449f:	e8 c1 33 ff ff       	call   c0007865 <malloc>
c00144a4:	83 c4 10             	add    esp,0x10
c00144a7:	89 c3                	mov    ebx,eax
c00144a9:	83 ec 08             	sub    esp,0x8
c00144ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144b0:	53                   	push   ebx
c00144b1:	e8 ea 44 ff ff       	call   c00089a0 <VgaText::VgaText(char const*)>
c00144b6:	83 c4 10             	add    esp,0x10
c00144b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144bd:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00144c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144c7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00144cd:	83 ec 0c             	sub    esp,0xc
c00144d0:	50                   	push   eax
c00144d1:	e8 70 3d ff ff       	call   c0008246 <addToTerminalCycle(VgaText*)>
c00144d6:	83 c4 10             	add    esp,0x10
c00144d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144dd:	05 0c 01 00 00       	add    eax,0x10c
c00144e2:	83 ec 08             	sub    esp,0x8
c00144e5:	68 a0 08 02 c0       	push   0xc00208a0
c00144ea:	50                   	push   eax
c00144eb:	e8 00 c1 fe ff       	call   c00005f0 <strcpy>
c00144f0:	83 c4 10             	add    esp,0x10
c00144f3:	90                   	nop
c00144f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144f8:	83 c0 0c             	add    eax,0xc
c00144fb:	83 ec 08             	sub    esp,0x8
c00144fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014502:	50                   	push   eax
c0014503:	e8 e8 c0 fe ff       	call   c00005f0 <strcpy>
c0014508:	83 c4 10             	add    esp,0x10
c001450b:	83 ec 08             	sub    esp,0x8
c001450e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014512:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014516:	e8 e5 fd ff ff       	call   c0014300 <Process::addArgs(char**)>
c001451b:	83 c4 10             	add    esp,0x10
c001451e:	83 ec 08             	sub    esp,0x8
c0014521:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014525:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014529:	e8 6d ed ff ff       	call   c001329b <Thr::loadProgramIntoMemory(Process*, char const*)>
c001452e:	83 c4 10             	add    esp,0x10
c0014531:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014535:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014539:	83 f0 01             	xor    eax,0x1
c001453c:	88 c2                	mov    dl,al
c001453e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014542:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014548:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001454c:	25 ff 00 00 00       	and    eax,0xff
c0014551:	83 ec 08             	sub    esp,0x8
c0014554:	50                   	push   eax
c0014555:	68 f8 08 02 c0       	push   0xc00208f8
c001455a:	e8 a7 60 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001455f:	83 c4 10             	add    esp,0x10
c0014562:	90                   	nop
c0014563:	83 c4 14             	add    esp,0x14
c0014566:	5b                   	pop    ebx
c0014567:	5e                   	pop    esi
c0014568:	c3                   	ret    
c0014569:	90                   	nop
c001456a:	66 90                	xchg   ax,ax

c001456c <Process::Process(bool, char const*, Process*, char**)>:
c001456c:	56                   	push   esi
c001456d:	53                   	push   ebx
c001456e:	83 ec 24             	sub    esp,0x24
c0014571:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014575:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014579:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001457d:	05 0c 02 00 00       	add    eax,0x20c
c0014582:	bb 07 00 00 00       	mov    ebx,0x7
c0014587:	89 c6                	mov    esi,eax
c0014589:	8d 76 00             	lea    esi,[esi+0x0]
c001458c:	85 db                	test   ebx,ebx
c001458e:	78 14                	js     c00145a4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014590:	83 ec 0c             	sub    esp,0xc
c0014593:	56                   	push   esi
c0014594:	e8 5b a0 00 00       	call   c001e5f4 <ThreadControlBlock::ThreadControlBlock()>
c0014599:	83 c4 10             	add    esp,0x10
c001459c:	83 c6 5f             	add    esi,0x5f
c001459f:	4b                   	dec    ebx
c00145a0:	eb ea                	jmp    c001458c <Process::Process(bool, char const*, Process*, char**)+0x20>
c00145a2:	66 90                	xchg   ax,ax
c00145a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00145a8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00145af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00145b3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00145ba:	83 ec 0c             	sub    esp,0xc
c00145bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00145c1:	e8 f6 bb ff ff       	call   c00101bc <Krnl::newProcessEnv(Process*)>
c00145c6:	83 c4 10             	add    esp,0x10
c00145c9:	89 c2                	mov    edx,eax
c00145cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00145cf:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00145d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00145d9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00145e2:	a1 40 1a 02 c0       	mov    eax,ds:0xc0021a40
c00145e7:	8d 50 01             	lea    edx,[eax+0x1]
c00145ea:	89 15 40 1a 02 c0    	mov    DWORD PTR ds:0xc0021a40,edx
c00145f0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00145f4:	89 02                	mov    DWORD PTR [edx],eax
c00145f6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00145fe:	83 ec 0c             	sub    esp,0xc
c0014601:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014605:	e8 5b 32 ff ff       	call   c0007865 <malloc>
c001460a:	83 c4 10             	add    esp,0x10
c001460d:	89 c3                	mov    ebx,eax
c001460f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014613:	25 ff 00 00 00       	and    eax,0xff
c0014618:	83 ec 08             	sub    esp,0x8
c001461b:	50                   	push   eax
c001461c:	53                   	push   ebx
c001461d:	e8 98 58 ff ff       	call   c0009eba <VAS::VAS(bool)>
c0014622:	83 c4 10             	add    esp,0x10
c0014625:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014629:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001462f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014633:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001463d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014641:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014645:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001464b:	e8 ca c0 ff ff       	call   c001071a <KeInitSignals()>
c0014650:	89 c2                	mov    edx,eax
c0014652:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014656:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001465c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014660:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014666:	85 c0                	test   eax,eax
c0014668:	74 42                	je     c00146ac <Process::Process(bool, char const*, Process*, char**)+0x140>
c001466a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001466e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014674:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001467a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001467e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014684:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014688:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001468e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014694:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014698:	05 0c 01 00 00       	add    eax,0x10c
c001469d:	83 ec 08             	sub    esp,0x8
c00146a0:	52                   	push   edx
c00146a1:	50                   	push   eax
c00146a2:	e8 49 bf fe ff       	call   c00005f0 <strcpy>
c00146a7:	83 c4 10             	add    esp,0x10
c00146aa:	eb 64                	jmp    c0014710 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c00146ac:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00146b4:	83 ec 0c             	sub    esp,0xc
c00146b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00146bb:	e8 a5 31 ff ff       	call   c0007865 <malloc>
c00146c0:	83 c4 10             	add    esp,0x10
c00146c3:	89 c3                	mov    ebx,eax
c00146c5:	83 ec 08             	sub    esp,0x8
c00146c8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00146cc:	53                   	push   ebx
c00146cd:	e8 ce 42 ff ff       	call   c00089a0 <VgaText::VgaText(char const*)>
c00146d2:	83 c4 10             	add    esp,0x10
c00146d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00146d9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00146df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00146e3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00146e9:	83 ec 0c             	sub    esp,0xc
c00146ec:	50                   	push   eax
c00146ed:	e8 54 3b ff ff       	call   c0008246 <addToTerminalCycle(VgaText*)>
c00146f2:	83 c4 10             	add    esp,0x10
c00146f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00146f9:	05 0c 01 00 00       	add    eax,0x10c
c00146fe:	83 ec 08             	sub    esp,0x8
c0014701:	68 a0 08 02 c0       	push   0xc00208a0
c0014706:	50                   	push   eax
c0014707:	e8 e4 be fe ff       	call   c00005f0 <strcpy>
c001470c:	83 c4 10             	add    esp,0x10
c001470f:	90                   	nop
c0014710:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014714:	83 c0 0c             	add    eax,0xc
c0014717:	83 ec 08             	sub    esp,0x8
c001471a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001471e:	50                   	push   eax
c001471f:	e8 cc be fe ff       	call   c00005f0 <strcpy>
c0014724:	83 c4 10             	add    esp,0x10
c0014727:	83 ec 08             	sub    esp,0x8
c001472a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001472e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014732:	e8 c9 fb ff ff       	call   c0014300 <Process::addArgs(char**)>
c0014737:	83 c4 10             	add    esp,0x10
c001473a:	90                   	nop
c001473b:	83 c4 24             	add    esp,0x24
c001473e:	5b                   	pop    ebx
c001473f:	5e                   	pop    esi
c0014740:	c3                   	ret    
c0014741:	8d 76 00             	lea    esi,[esi+0x0]

c0014744 <taskStartupFunction>:
c0014744:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014749:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001474c:	c3                   	ret    
c001474d:	90                   	nop
c001474e:	66 90                	xchg   ax,ax

c0014750 <Semaphore::Semaphore(int)>:
c0014750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014754:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014758:	89 10                	mov    DWORD PTR [eax],edx
c001475a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001475e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014765:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014769:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014774:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001477b:	90                   	nop
c001477c:	c3                   	ret    
c001477d:	90                   	nop
c001477e:	66 90                	xchg   ax,ax

c0014780 <Mutex::Mutex()>:
c0014780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014784:	6a 01                	push   0x1
c0014786:	50                   	push   eax
c0014787:	e8 c4 ff ff ff       	call   c0014750 <Semaphore::Semaphore(int)>
c001478c:	83 c4 08             	add    esp,0x8
c001478f:	90                   	nop
c0014790:	c3                   	ret    
c0014791:	90                   	nop
c0014792:	66 90                	xchg   ax,ax

c0014794 <Process::createThread(void (*)(void*), void*, int)>:
c0014794:	57                   	push   edi
c0014795:	31 c9                	xor    ecx,ecx
c0014797:	56                   	push   esi
c0014798:	53                   	push   ebx
c0014799:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001479d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00147a4:	89 f2                	mov    edx,esi
c00147a6:	66 90                	xchg   ax,ax
c00147a8:	31 c0                	xor    eax,eax
c00147aa:	66 89 d0             	mov    ax,dx
c00147ad:	83 e2 01             	and    edx,0x1
c00147b0:	74 12                	je     c00147c4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00147b2:	d1 f8                	sar    eax,1
c00147b4:	41                   	inc    ecx
c00147b5:	89 c2                	mov    edx,eax
c00147b7:	83 f9 10             	cmp    ecx,0x10
c00147ba:	75 ec                	jne    c00147a8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00147bc:	31 db                	xor    ebx,ebx
c00147be:	89 d8                	mov    eax,ebx
c00147c0:	5b                   	pop    ebx
c00147c1:	5e                   	pop    esi
c00147c2:	5f                   	pop    edi
c00147c3:	c3                   	ret    
c00147c4:	b8 01 00 00 00       	mov    eax,0x1
c00147c9:	d3 e0                	shl    eax,cl
c00147cb:	09 c6                	or     esi,eax
c00147cd:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00147d0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00147d7:	01 c0                	add    eax,eax
c00147d9:	01 c8                	add    eax,ecx
c00147db:	8d 04 80             	lea    eax,[eax+eax*4]
c00147de:	01 d8                	add    eax,ebx
c00147e0:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00147e7:	75 0b                	jne    c00147f4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00147e9:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00147f3:	90                   	nop
c00147f4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00147fa:	83 ec 0c             	sub    esp,0xc
c00147fd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014800:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0014803:	01 c0                	add    eax,eax
c0014805:	01 c8                	add    eax,ecx
c0014807:	8d 3c 80             	lea    edi,[eax+eax*4]
c001480a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c001480d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014813:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0014819:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001481d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014823:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014829:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c001482f:	89 ca                	mov    edx,ecx
c0014831:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0014838:	f7 da                	neg    edx
c001483a:	c1 e2 15             	shl    edx,0x15
c001483d:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014843:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014849:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001484d:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0014857:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001485d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014861:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014867:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0014871:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001487b:	68 00 01 00 00       	push   0x100
c0014880:	e8 e0 2f ff ff       	call   c0007865 <malloc>
c0014885:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0014888:	58                   	pop    eax
c0014889:	5a                   	pop    edx
c001488a:	53                   	push   ebx
c001488b:	68 84 71 02 c0       	push   0xc0027184
c0014890:	e8 f7 9a 00 00       	call   c001e38c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014895:	83 c4 10             	add    esp,0x10
c0014898:	89 d8                	mov    eax,ebx
c001489a:	5b                   	pop    ebx
c001489b:	5e                   	pop    esi
c001489c:	5f                   	pop    edi
c001489d:	c3                   	ret    
c001489e:	66 90                	xchg   ax,ax

c00148a0 <Process::createUserThread()>:
c00148a0:	83 ec 0c             	sub    esp,0xc
c00148a3:	68 80 00 00 00       	push   0x80
c00148a8:	6a 00                	push   0x0
c00148aa:	68 f4 41 01 c0       	push   0xc00141f4
c00148af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148b3:	50                   	push   eax
c00148b4:	e8 db fe ff ff       	call   c0014794 <Process::createThread(void (*)(void*), void*, int)>
c00148b9:	83 c4 1c             	add    esp,0x1c
c00148bc:	c3                   	ret    
c00148bd:	8d 76 00             	lea    esi,[esi+0x0]

c00148c0 <setupMultitasking(void (*)())>:
c00148c0:	56                   	push   esi
c00148c1:	53                   	push   ebx
c00148c2:	53                   	push   ebx
c00148c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00148c7:	eb 13                	jmp    c00148dc <setupMultitasking(void (*)())+0x1c>
c00148c9:	8d 76 00             	lea    esi,[esi+0x0]
c00148cc:	83 ec 0c             	sub    esp,0xc
c00148cf:	68 84 71 02 c0       	push   0xc0027184
c00148d4:	e8 fb 99 00 00       	call   c001e2d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00148d9:	83 c4 10             	add    esp,0x10
c00148dc:	83 ec 0c             	sub    esp,0xc
c00148df:	68 84 71 02 c0       	push   0xc0027184
c00148e4:	e8 c7 99 00 00       	call   c001e2b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00148e9:	83 c4 10             	add    esp,0x10
c00148ec:	84 c0                	test   al,al
c00148ee:	74 dc                	je     c00148cc <setupMultitasking(void (*)())+0xc>
c00148f0:	83 ec 0c             	sub    esp,0xc
c00148f3:	68 24 07 00 00       	push   0x724
c00148f8:	e8 68 2f ff ff       	call   c0007865 <malloc>
c00148fd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014904:	89 c3                	mov    ebx,eax
c0014906:	6a 00                	push   0x0
c0014908:	68 a4 08 02 c0       	push   0xc00208a4
c001490d:	6a 01                	push   0x1
c001490f:	50                   	push   eax
c0014910:	e8 57 fc ff ff       	call   c001456c <Process::Process(bool, char const*, Process*, char**)>
c0014915:	83 c4 14             	add    esp,0x14
c0014918:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001491e:	89 1d 90 71 02 c0    	mov    DWORD PTR ds:0xc0027190,ebx
c0014924:	50                   	push   eax
c0014925:	e8 73 3b ff ff       	call   c000849d <setActiveTerminal(VgaText*)>
c001492a:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0014932:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001493c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014942:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014945:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001494f:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014955:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001495b:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0014965:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001496f:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0014979:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001497f:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0014989:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001498f:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0014999:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00149a0:	e8 c0 2e ff ff       	call   c0007865 <malloc>
c00149a5:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00149ab:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00149b1:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00149b7:	5a                   	pop    edx
c00149b8:	59                   	pop    ecx
c00149b9:	68 a0 08 02 c0       	push   0xc00208a0
c00149be:	50                   	push   eax
c00149bf:	e8 2c bc fe ff       	call   c00005f0 <strcpy>
c00149c4:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00149cb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00149cf:	83 c4 14             	add    esp,0x14
c00149d2:	5b                   	pop    ebx
c00149d3:	5e                   	pop    esi
c00149d4:	e9 90 b8 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00149d9:	8d 76 00             	lea    esi,[esi+0x0]

c00149dc <schedule()>:
c00149dc:	8b 15 64 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027164
c00149e2:	85 d2                	test   edx,edx
c00149e4:	74 0e                	je     c00149f4 <schedule()+0x18>
c00149e6:	c7 05 60 71 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x1
c00149f0:	c3                   	ret    
c00149f1:	8d 76 00             	lea    esi,[esi+0x0]
c00149f4:	53                   	push   ebx
c00149f5:	83 ec 14             	sub    esp,0x14
c00149f8:	68 84 71 02 c0       	push   0xc0027184
c00149fd:	e8 ae 98 00 00       	call   c001e2b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014a02:	83 c4 10             	add    esp,0x10
c0014a05:	84 c0                	test   al,al
c0014a07:	75 3b                	jne    c0014a44 <schedule()+0x68>
c0014a09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a0e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014a11:	4a                   	dec    edx
c0014a12:	74 38                	je     c0014a4c <schedule()+0x70>
c0014a14:	83 ec 0c             	sub    esp,0xc
c0014a17:	68 84 71 02 c0       	push   0xc0027184
c0014a1c:	e8 ab 98 00 00       	call   c001e2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014a21:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014a28:	89 c3                	mov    ebx,eax
c0014a2a:	e8 a5 98 00 00       	call   c001e2d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014a2f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0014a36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a39:	e8 0e f8 ff ff       	call   c001424c <switchToThread(ThreadControlBlock*)>
c0014a3e:	83 c4 10             	add    esp,0x10
c0014a41:	8d 76 00             	lea    esi,[esi+0x0]
c0014a44:	83 c4 08             	add    esp,0x8
c0014a47:	5b                   	pop    ebx
c0014a48:	c3                   	ret    
c0014a49:	8d 76 00             	lea    esi,[esi+0x0]
c0014a4c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0014a53:	83 ec 08             	sub    esp,0x8
c0014a56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a5b:	50                   	push   eax
c0014a5c:	68 84 71 02 c0       	push   0xc0027184
c0014a61:	e8 26 99 00 00       	call   c001e38c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014a66:	83 c4 10             	add    esp,0x10
c0014a69:	eb a9                	jmp    c0014a14 <schedule()+0x38>
c0014a6b:	90                   	nop

c0014a6c <Semaphore::tryAcquire()>:
c0014a6c:	53                   	push   ebx
c0014a6d:	83 ec 08             	sub    esp,0x8
c0014a70:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014a74:	fa                   	cli    
c0014a75:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014a7a:	8d 50 01             	lea    edx,[eax+0x1]
c0014a7d:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0014a83:	8b 15 64 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027164
c0014a89:	8d 5a 01             	lea    ebx,[edx+0x1]
c0014a8c:	89 1d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ebx
c0014a92:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0014a95:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0014a97:	7c 33                	jl     c0014acc <Semaphore::tryAcquire()+0x60>
c0014a99:	89 15 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,edx
c0014a9f:	85 d2                	test   edx,edx
c0014aa1:	75 0d                	jne    c0014ab0 <Semaphore::tryAcquire()+0x44>
c0014aa3:	8b 15 60 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027160
c0014aa9:	85 d2                	test   edx,edx
c0014aab:	75 6b                	jne    c0014b18 <Semaphore::tryAcquire()+0xac>
c0014aad:	8d 76 00             	lea    esi,[esi+0x0]
c0014ab0:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014ab5:	85 c0                	test   eax,eax
c0014ab7:	74 0b                	je     c0014ac4 <Semaphore::tryAcquire()+0x58>
c0014ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0014abc:	31 c0                	xor    eax,eax
c0014abe:	83 c4 08             	add    esp,0x8
c0014ac1:	5b                   	pop    ebx
c0014ac2:	c3                   	ret    
c0014ac3:	90                   	nop
c0014ac4:	fb                   	sti    
c0014ac5:	83 c4 08             	add    esp,0x8
c0014ac8:	5b                   	pop    ebx
c0014ac9:	c3                   	ret    
c0014aca:	66 90                	xchg   ax,ax
c0014acc:	43                   	inc    ebx
c0014acd:	89 15 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,edx
c0014ad3:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0014ad6:	85 d2                	test   edx,edx
c0014ad8:	75 22                	jne    c0014afc <Semaphore::tryAcquire()+0x90>
c0014ada:	8b 0d 60 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027160
c0014ae0:	85 c9                	test   ecx,ecx
c0014ae2:	74 18                	je     c0014afc <Semaphore::tryAcquire()+0x90>
c0014ae4:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014aee:	e8 e9 fe ff ff       	call   c00149dc <schedule()>
c0014af3:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014af8:	48                   	dec    eax
c0014af9:	8d 76 00             	lea    esi,[esi+0x0]
c0014afc:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014b01:	85 c0                	test   eax,eax
c0014b03:	75 0b                	jne    c0014b10 <Semaphore::tryAcquire()+0xa4>
c0014b05:	fb                   	sti    
c0014b06:	b0 01                	mov    al,0x1
c0014b08:	83 c4 08             	add    esp,0x8
c0014b0b:	5b                   	pop    ebx
c0014b0c:	c3                   	ret    
c0014b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0014b10:	b0 01                	mov    al,0x1
c0014b12:	83 c4 08             	add    esp,0x8
c0014b15:	5b                   	pop    ebx
c0014b16:	c3                   	ret    
c0014b17:	90                   	nop
c0014b18:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014b22:	e8 b5 fe ff ff       	call   c00149dc <schedule()>
c0014b27:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014b2c:	48                   	dec    eax
c0014b2d:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014b32:	85 c0                	test   eax,eax
c0014b34:	75 86                	jne    c0014abc <Semaphore::tryAcquire()+0x50>
c0014b36:	eb 8c                	jmp    c0014ac4 <Semaphore::tryAcquire()+0x58>

c0014b38 <Semaphore::assertLocked(char const*)>:
c0014b38:	83 ec 0c             	sub    esp,0xc
c0014b3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014b3f:	fa                   	cli    
c0014b40:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014b46:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014b4b:	8d 48 01             	lea    ecx,[eax+0x1]
c0014b4e:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0014b54:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014b56:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0014b59:	7c 29                	jl     c0014b84 <Semaphore::assertLocked(char const*)+0x4c>
c0014b5b:	90                   	nop
c0014b5c:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014b61:	85 c0                	test   eax,eax
c0014b63:	75 0b                	jne    c0014b70 <Semaphore::assertLocked(char const*)+0x38>
c0014b65:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014b6a:	85 c0                	test   eax,eax
c0014b6c:	75 2e                	jne    c0014b9c <Semaphore::assertLocked(char const*)+0x64>
c0014b6e:	66 90                	xchg   ax,ax
c0014b70:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014b75:	48                   	dec    eax
c0014b76:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014b7b:	75 03                	jne    c0014b80 <Semaphore::assertLocked(char const*)+0x48>
c0014b7d:	fb                   	sti    
c0014b7e:	66 90                	xchg   ax,ax
c0014b80:	83 c4 0c             	add    esp,0xc
c0014b83:	c3                   	ret    
c0014b84:	83 ec 0c             	sub    esp,0xc
c0014b87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b8b:	52                   	push   edx
c0014b8c:	e8 36 b8 ff ff       	call   c00103c7 <KePanic(char const*)>
c0014b91:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014b96:	83 c4 10             	add    esp,0x10
c0014b99:	48                   	dec    eax
c0014b9a:	eb c0                	jmp    c0014b5c <Semaphore::assertLocked(char const*)+0x24>
c0014b9c:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014ba6:	e8 31 fe ff ff       	call   c00149dc <schedule()>
c0014bab:	eb c3                	jmp    c0014b70 <Semaphore::assertLocked(char const*)+0x38>
c0014bad:	8d 76 00             	lea    esi,[esi+0x0]

c0014bb0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0014bb0:	83 ec 0c             	sub    esp,0xc
c0014bb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014bbc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014bbf:	e8 18 fe ff ff       	call   c00149dc <schedule()>
c0014bc4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014bc9:	48                   	dec    eax
c0014bca:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014bcf:	75 03                	jne    c0014bd4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0014bd1:	fb                   	sti    
c0014bd2:	66 90                	xchg   ax,ax
c0014bd4:	83 c4 0c             	add    esp,0xc
c0014bd7:	c3                   	ret    

c0014bd8 <blockTask(TaskState)>:
c0014bd8:	83 ec 0c             	sub    esp,0xc
c0014bdb:	fa                   	cli    
c0014bdc:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014be2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014be6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014beb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014bee:	e8 e9 fd ff ff       	call   c00149dc <schedule()>
c0014bf3:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014bf8:	48                   	dec    eax
c0014bf9:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014bfe:	75 04                	jne    c0014c04 <blockTask(TaskState)+0x2c>
c0014c00:	fb                   	sti    
c0014c01:	8d 76 00             	lea    esi,[esi+0x0]
c0014c04:	83 c4 0c             	add    esp,0xc
c0014c07:	c3                   	ret    

c0014c08 <waitTask(int, int*, int)>:
c0014c08:	83 ec 18             	sub    esp,0x18
c0014c0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c10:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014c14:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0014c17:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c20:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0014c23:	6a 07                	push   0x7
c0014c25:	e8 ae ff ff ff       	call   c0014bd8 <blockTask(TaskState)>
c0014c2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c2f:	83 c4 10             	add    esp,0x10
c0014c32:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0014c35:	85 d2                	test   edx,edx
c0014c37:	74 0b                	je     c0014c44 <waitTask(int, int*, int)+0x3c>
c0014c39:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0014c3c:	89 02                	mov    DWORD PTR [edx],eax
c0014c3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c43:	90                   	nop
c0014c44:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0014c47:	83 c4 0c             	add    esp,0xc
c0014c4a:	c3                   	ret    
c0014c4b:	90                   	nop

c0014c4c <milliTenthSleepUntil(unsigned int)>:
c0014c4c:	83 ec 0c             	sub    esp,0xc
c0014c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c53:	39 05 8c 64 02 c0    	cmp    DWORD PTR ds:0xc002648c,eax
c0014c59:	76 05                	jbe    c0014c60 <milliTenthSleepUntil(unsigned int)+0x14>
c0014c5b:	90                   	nop
c0014c5c:	83 c4 0c             	add    esp,0xc
c0014c5f:	c3                   	ret    
c0014c60:	fa                   	cli    
c0014c61:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014c67:	83 ec 08             	sub    esp,0x8
c0014c6a:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0014c70:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014c76:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0014c79:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014c7f:	52                   	push   edx
c0014c80:	68 78 71 02 c0       	push   0xc0027178
c0014c85:	e8 02 97 00 00       	call   c001e38c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014c8a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0014c91:	e8 42 ff ff ff       	call   c0014bd8 <blockTask(TaskState)>
c0014c96:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014c9b:	83 c4 10             	add    esp,0x10
c0014c9e:	48                   	dec    eax
c0014c9f:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014ca4:	85 c0                	test   eax,eax
c0014ca6:	75 0c                	jne    c0014cb4 <milliTenthSleepUntil(unsigned int)+0x68>
c0014ca8:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014cad:	85 c0                	test   eax,eax
c0014caf:	75 17                	jne    c0014cc8 <milliTenthSleepUntil(unsigned int)+0x7c>
c0014cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0014cb4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014cb9:	48                   	dec    eax
c0014cba:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014cbf:	75 9b                	jne    c0014c5c <milliTenthSleepUntil(unsigned int)+0x10>
c0014cc1:	fb                   	sti    
c0014cc2:	83 c4 0c             	add    esp,0xc
c0014cc5:	c3                   	ret    
c0014cc6:	66 90                	xchg   ax,ax
c0014cc8:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014cd2:	e8 05 fd ff ff       	call   c00149dc <schedule()>
c0014cd7:	eb db                	jmp    c0014cb4 <milliTenthSleepUntil(unsigned int)+0x68>
c0014cd9:	8d 76 00             	lea    esi,[esi+0x0]

c0014cdc <milliTenthSleep(unsigned int)>:
c0014cdc:	a1 8c 64 02 c0       	mov    eax,ds:0xc002648c
c0014ce1:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0014ce5:	e9 62 ff ff ff       	jmp    c0014c4c <milliTenthSleepUntil(unsigned int)>
c0014cea:	66 90                	xchg   ax,ax

c0014cec <sleep(unsigned int)>:
c0014cec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014cf0:	8d 04 80             	lea    eax,[eax+eax*4]
c0014cf3:	8d 04 80             	lea    eax,[eax+eax*4]
c0014cf6:	8d 04 80             	lea    eax,[eax+eax*4]
c0014cf9:	8d 04 80             	lea    eax,[eax+eax*4]
c0014cfc:	c1 e0 04             	shl    eax,0x4
c0014cff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d03:	eb d7                	jmp    c0014cdc <milliTenthSleep(unsigned int)>
c0014d05:	90                   	nop
c0014d06:	66 90                	xchg   ax,ax

c0014d08 <Semaphore::acquire()>:
c0014d08:	83 ec 0c             	sub    esp,0xc
c0014d0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014d0f:	fa                   	cli    
c0014d10:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014d15:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014d1b:	8d 48 01             	lea    ecx,[eax+0x1]
c0014d1e:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0014d24:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0014d27:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0014d29:	7d 2d                	jge    c0014d58 <Semaphore::acquire()+0x50>
c0014d2b:	41                   	inc    ecx
c0014d2c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0014d2f:	90                   	nop
c0014d30:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014d35:	85 c0                	test   eax,eax
c0014d37:	75 0b                	jne    c0014d44 <Semaphore::acquire()+0x3c>
c0014d39:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014d3e:	85 c0                	test   eax,eax
c0014d40:	75 62                	jne    c0014da4 <Semaphore::acquire()+0x9c>
c0014d42:	66 90                	xchg   ax,ax
c0014d44:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014d49:	48                   	dec    eax
c0014d4a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014d4f:	75 03                	jne    c0014d54 <Semaphore::acquire()+0x4c>
c0014d51:	fb                   	sti    
c0014d52:	66 90                	xchg   ax,ax
c0014d54:	83 c4 0c             	add    esp,0xc
c0014d57:	c3                   	ret    
c0014d58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d5d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0014d64:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0014d67:	85 c9                	test   ecx,ecx
c0014d69:	74 4d                	je     c0014db8 <Semaphore::acquire()+0xb0>
c0014d6b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0014d6e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014d74:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0014d77:	90                   	nop
c0014d78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d7d:	83 ec 0c             	sub    esp,0xc
c0014d80:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0014d83:	68 20 09 02 c0       	push   0xc0020920
c0014d88:	e8 79 58 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0014d8d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0014d94:	e8 3f fe ff ff       	call   c0014bd8 <blockTask(TaskState)>
c0014d99:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014d9e:	83 c4 10             	add    esp,0x10
c0014da1:	48                   	dec    eax
c0014da2:	eb 8c                	jmp    c0014d30 <Semaphore::acquire()+0x28>
c0014da4:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014dae:	e8 29 fc ff ff       	call   c00149dc <schedule()>
c0014db3:	eb 8f                	jmp    c0014d44 <Semaphore::acquire()+0x3c>
c0014db5:	8d 76 00             	lea    esi,[esi+0x0]
c0014db8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dbd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014dc0:	eb b6                	jmp    c0014d78 <Semaphore::acquire()+0x70>
c0014dc2:	66 90                	xchg   ax,ax

c0014dc4 <taskReturned>:
c0014dc4:	83 ec 18             	sub    esp,0x18
c0014dc7:	68 40 09 02 c0       	push   0xc0020940
c0014dcc:	e8 f6 b5 ff ff       	call   c00103c7 <KePanic(char const*)>
c0014dd1:	83 c4 10             	add    esp,0x10
c0014dd4:	83 ec 0c             	sub    esp,0xc
c0014dd7:	6a 02                	push   0x2
c0014dd9:	e8 fa fd ff ff       	call   c0014bd8 <blockTask(TaskState)>
c0014dde:	fa                   	cli    
c0014ddf:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014de5:	e8 f2 fb ff ff       	call   c00149dc <schedule()>
c0014dea:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014def:	83 c4 10             	add    esp,0x10
c0014df2:	48                   	dec    eax
c0014df3:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014df8:	85 c0                	test   eax,eax
c0014dfa:	75 d8                	jne    c0014dd4 <taskReturned+0x10>
c0014dfc:	fb                   	sti    
c0014dfd:	eb d5                	jmp    c0014dd4 <taskReturned+0x10>
c0014dff:	90                   	nop

c0014e00 <Thr::processFromPID(int)>:
c0014e00:	57                   	push   edi
c0014e01:	56                   	push   esi
c0014e02:	53                   	push   ebx
c0014e03:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014e07:	fa                   	cli    
c0014e08:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014e0e:	83 ec 0c             	sub    esp,0xc
c0014e11:	68 84 71 02 c0       	push   0xc0027184
c0014e16:	e8 b1 94 00 00       	call   c001e2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014e1b:	83 c4 10             	add    esp,0x10
c0014e1e:	89 c7                	mov    edi,eax
c0014e20:	eb 16                	jmp    c0014e38 <Thr::processFromPID(int)+0x38>
c0014e22:	66 90                	xchg   ax,ax
c0014e24:	83 ec 0c             	sub    esp,0xc
c0014e27:	68 84 71 02 c0       	push   0xc0027184
c0014e2c:	e8 9b 94 00 00       	call   c001e2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014e31:	83 c4 10             	add    esp,0x10
c0014e34:	39 f8                	cmp    eax,edi
c0014e36:	74 4c                	je     c0014e84 <Thr::processFromPID(int)+0x84>
c0014e38:	83 ec 0c             	sub    esp,0xc
c0014e3b:	68 84 71 02 c0       	push   0xc0027184
c0014e40:	e8 87 94 00 00       	call   c001e2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014e45:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014e4c:	89 c3                	mov    ebx,eax
c0014e4e:	e8 81 94 00 00       	call   c001e2d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014e53:	58                   	pop    eax
c0014e54:	5a                   	pop    edx
c0014e55:	53                   	push   ebx
c0014e56:	68 84 71 02 c0       	push   0xc0027184
c0014e5b:	e8 2c 95 00 00       	call   c001e38c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014e60:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014e63:	83 c4 10             	add    esp,0x10
c0014e66:	39 30                	cmp    DWORD PTR [eax],esi
c0014e68:	75 ba                	jne    c0014e24 <Thr::processFromPID(int)+0x24>
c0014e6a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014e6f:	48                   	dec    eax
c0014e70:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014e75:	74 09                	je     c0014e80 <Thr::processFromPID(int)+0x80>
c0014e77:	90                   	nop
c0014e78:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014e7b:	5b                   	pop    ebx
c0014e7c:	5e                   	pop    esi
c0014e7d:	5f                   	pop    edi
c0014e7e:	c3                   	ret    
c0014e7f:	90                   	nop
c0014e80:	fb                   	sti    
c0014e81:	eb f5                	jmp    c0014e78 <Thr::processFromPID(int)+0x78>
c0014e83:	90                   	nop
c0014e84:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014e89:	48                   	dec    eax
c0014e8a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014e8f:	75 07                	jne    c0014e98 <Thr::processFromPID(int)+0x98>
c0014e91:	fb                   	sti    
c0014e92:	5b                   	pop    ebx
c0014e93:	5e                   	pop    esi
c0014e94:	5f                   	pop    edi
c0014e95:	c3                   	ret    
c0014e96:	66 90                	xchg   ax,ax
c0014e98:	5b                   	pop    ebx
c0014e99:	31 c0                	xor    eax,eax
c0014e9b:	5e                   	pop    esi
c0014e9c:	5f                   	pop    edi
c0014e9d:	c3                   	ret    
c0014e9e:	66 90                	xchg   ax,ax

c0014ea0 <unblockTask(ThreadControlBlock*)>:
c0014ea0:	53                   	push   ebx
c0014ea1:	83 ec 08             	sub    esp,0x8
c0014ea4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ea8:	fa                   	cli    
c0014ea9:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014eaf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014eb2:	85 c0                	test   eax,eax
c0014eb4:	74 66                	je     c0014f1c <unblockTask(ThreadControlBlock*)+0x7c>
c0014eb6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014eb9:	48                   	dec    eax
c0014eba:	74 38                	je     c0014ef4 <unblockTask(ThreadControlBlock*)+0x54>
c0014ebc:	83 ec 0c             	sub    esp,0xc
c0014ebf:	68 84 71 02 c0       	push   0xc0027184
c0014ec4:	e8 03 94 00 00       	call   c001e2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014ec9:	83 c4 10             	add    esp,0x10
c0014ecc:	85 c0                	test   eax,eax
c0014ece:	75 1c                	jne    c0014eec <unblockTask(ThreadControlBlock*)+0x4c>
c0014ed0:	eb 5e                	jmp    c0014f30 <unblockTask(ThreadControlBlock*)+0x90>
c0014ed2:	66 90                	xchg   ax,ax
c0014ed4:	83 ec 08             	sub    esp,0x8
c0014ed7:	50                   	push   eax
c0014ed8:	68 84 71 02 c0       	push   0xc0027184
c0014edd:	e8 06 97 00 00       	call   c001e5e8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014ee2:	83 c4 10             	add    esp,0x10
c0014ee5:	85 c0                	test   eax,eax
c0014ee7:	74 47                	je     c0014f30 <unblockTask(ThreadControlBlock*)+0x90>
c0014ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0014eec:	39 c3                	cmp    ebx,eax
c0014eee:	75 e4                	jne    c0014ed4 <unblockTask(ThreadControlBlock*)+0x34>
c0014ef0:	eb 12                	jmp    c0014f04 <unblockTask(ThreadControlBlock*)+0x64>
c0014ef2:	66 90                	xchg   ax,ax
c0014ef4:	83 ec 0c             	sub    esp,0xc
c0014ef7:	68 c2 08 02 c0       	push   0xc00208c2
c0014efc:	e8 05 57 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0014f01:	83 c4 10             	add    esp,0x10
c0014f04:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014f09:	48                   	dec    eax
c0014f0a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014f0f:	75 03                	jne    c0014f14 <unblockTask(ThreadControlBlock*)+0x74>
c0014f11:	fb                   	sti    
c0014f12:	66 90                	xchg   ax,ax
c0014f14:	83 c4 08             	add    esp,0x8
c0014f17:	5b                   	pop    ebx
c0014f18:	c3                   	ret    
c0014f19:	8d 76 00             	lea    esi,[esi+0x0]
c0014f1c:	83 ec 0c             	sub    esp,0xc
c0014f1f:	68 ab 08 02 c0       	push   0xc00208ab
c0014f24:	e8 dd 56 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0014f29:	83 c4 10             	add    esp,0x10
c0014f2c:	eb d6                	jmp    c0014f04 <unblockTask(ThreadControlBlock*)+0x64>
c0014f2e:	66 90                	xchg   ax,ax
c0014f30:	83 ec 08             	sub    esp,0x8
c0014f33:	53                   	push   ebx
c0014f34:	68 84 71 02 c0       	push   0xc0027184
c0014f39:	e8 4e 94 00 00       	call   c001e38c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014f3e:	83 c4 10             	add    esp,0x10
c0014f41:	eb c1                	jmp    c0014f04 <unblockTask(ThreadControlBlock*)+0x64>
c0014f43:	90                   	nop

c0014f44 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0014f44:	55                   	push   ebp
c0014f45:	57                   	push   edi
c0014f46:	56                   	push   esi
c0014f47:	53                   	push   ebx
c0014f48:	83 ec 1c             	sub    esp,0x1c
c0014f4b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014f4f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014f52:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0014f58:	85 ed                	test   ebp,ebp
c0014f5a:	7e 24                	jle    c0014f80 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0014f5c:	31 f6                	xor    esi,esi
c0014f5e:	66 90                	xchg   ax,ax
c0014f60:	83 ec 0c             	sub    esp,0xc
c0014f63:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0014f6a:	46                   	inc    esi
c0014f6b:	57                   	push   edi
c0014f6c:	e8 04 29 ff ff       	call   c0007875 <free>
c0014f71:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014f74:	83 c4 10             	add    esp,0x10
c0014f77:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0014f7d:	7f e1                	jg     c0014f60 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0014f7f:	90                   	nop
c0014f80:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014f8a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014f8f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0014f92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0014f95:	d3 c0                	rol    eax,cl
c0014f97:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0014f9e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014fa1:	89 f7                	mov    edi,esi
c0014fa3:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0014fab:	0f 85 77 01 00 00    	jne    c0015128 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014fb1:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0014fb7:	85 ed                	test   ebp,ebp
c0014fb9:	74 1d                	je     c0014fd8 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0014fbb:	83 ec 0c             	sub    esp,0xc
c0014fbe:	55                   	push   ebp
c0014fbf:	e8 14 b1 ff ff       	call   c00100d8 <EnvVarContainer::~EnvVarContainer()>
c0014fc4:	59                   	pop    ecx
c0014fc5:	5e                   	pop    esi
c0014fc6:	6a 0c                	push   0xc
c0014fc8:	55                   	push   ebp
c0014fc9:	e8 42 55 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c0014fce:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014fd1:	83 c4 10             	add    esp,0x10
c0014fd4:	89 f7                	mov    edi,esi
c0014fd6:	66 90                	xchg   ax,ax
c0014fd8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014fde:	85 c0                	test   eax,eax
c0014fe0:	0f 84 b6 00 00 00    	je     c001509c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0014fe6:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0014fe9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0014fed:	31 c9                	xor    ecx,ecx
c0014fef:	eb 17                	jmp    c0015008 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0014ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0014ff4:	41                   	inc    ecx
c0014ff5:	83 f9 10             	cmp    ecx,0x10
c0014ff8:	0f 84 9e 00 00 00    	je     c001509c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0014ffe:	66 90                	xchg   ax,ax
c0015000:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015006:	66 90                	xchg   ax,ax
c0015008:	31 d2                	xor    edx,edx
c001500a:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0015011:	d3 fa                	sar    edx,cl
c0015013:	83 e2 01             	and    edx,0x1
c0015016:	74 dc                	je     c0014ff4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0015018:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c001501b:	01 d2                	add    edx,edx
c001501d:	01 ca                	add    edx,ecx
c001501f:	8d 14 92             	lea    edx,[edx+edx*4]
c0015022:	01 d0                	add    eax,edx
c0015024:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001502a:	83 fd 07             	cmp    ebp,0x7
c001502d:	75 c5                	jne    c0014ff4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001502f:	05 40 02 00 00       	add    eax,0x240
c0015034:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015037:	83 fd ff             	cmp    ebp,0xffffffff
c001503a:	0f 8c f0 00 00 00    	jl     c0015130 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015040:	0f 84 ae 01 00 00    	je     c00151f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0015046:	85 ed                	test   ebp,ebp
c0015048:	0f 84 92 01 00 00    	je     c00151e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c001504e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015050:	75 a2                	jne    c0014ff4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0015052:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015058:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001505c:	01 d0                	add    eax,edx
c001505e:	66 90                	xchg   ax,ax
c0015060:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015064:	83 ec 0c             	sub    esp,0xc
c0015067:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c001506d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015070:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015076:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001507d:	50                   	push   eax
c001507e:	e8 1d fe ff ff       	call   c0014ea0 <unblockTask(ThreadControlBlock*)>
c0015083:	83 c4 10             	add    esp,0x10
c0015086:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015089:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001508d:	89 f7                	mov    edi,esi
c001508f:	41                   	inc    ecx
c0015090:	83 f9 10             	cmp    ecx,0x10
c0015093:	0f 85 67 ff ff ff    	jne    c0015000 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015099:	8d 76 00             	lea    esi,[esi+0x0]
c001509c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00150a2:	85 c0                	test   eax,eax
c00150a4:	74 62                	je     c0015108 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c00150a6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00150ac:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00150b2:	74 54                	je     c0015108 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c00150b4:	83 ec 0c             	sub    esp,0xc
c00150b7:	68 84 71 02 c0       	push   0xc0027184
c00150bc:	e8 0b 92 00 00       	call   c001e2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00150c1:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c00150c8:	89 c7                	mov    edi,eax
c00150ca:	e8 e1 91 00 00       	call   c001e2b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00150cf:	83 c4 10             	add    esp,0x10
c00150d2:	84 c0                	test   al,al
c00150d4:	0f 84 ce 00 00 00    	je     c00151a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c00150da:	66 90                	xchg   ax,ax
c00150dc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00150df:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00150e5:	85 d2                	test   edx,edx
c00150e7:	74 0f                	je     c00150f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c00150e9:	83 ec 0c             	sub    esp,0xc
c00150ec:	8b 02                	mov    eax,DWORD PTR [edx]
c00150ee:	52                   	push   edx
c00150ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00150f2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00150f5:	83 c4 10             	add    esp,0x10
c00150f8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015102:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015105:	8d 76 00             	lea    esi,[esi+0x0]
c0015108:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001510e:	85 db                	test   ebx,ebx
c0015110:	74 16                	je     c0015128 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0015112:	83 ec 0c             	sub    esp,0xc
c0015115:	53                   	push   ebx
c0015116:	e8 8d 47 ff ff       	call   c00098a8 <VAS::~VAS()>
c001511b:	58                   	pop    eax
c001511c:	5a                   	pop    edx
c001511d:	6a 14                	push   0x14
c001511f:	53                   	push   ebx
c0015120:	e8 eb 53 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c0015125:	83 c4 10             	add    esp,0x10
c0015128:	83 c4 1c             	add    esp,0x1c
c001512b:	5b                   	pop    ebx
c001512c:	5e                   	pop    esi
c001512d:	5f                   	pop    edi
c001512e:	5d                   	pop    ebp
c001512f:	c3                   	ret    
c0015130:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015134:	83 ec 0c             	sub    esp,0xc
c0015137:	68 74 09 02 c0       	push   0xc0020974
c001513c:	e8 86 b2 ff ff       	call   c00103c7 <KePanic(char const*)>
c0015141:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015144:	83 c4 10             	add    esp,0x10
c0015147:	89 f7                	mov    edi,esi
c0015149:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001514d:	e9 a2 fe ff ff       	jmp    c0014ff4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0015152:	66 90                	xchg   ax,ax
c0015154:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001515a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015160:	75 1e                	jne    c0015180 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0015162:	83 ec 0c             	sub    esp,0xc
c0015165:	68 dc 09 02 c0       	push   0xc00209dc
c001516a:	e8 97 54 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001516f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015176:	e8 5d fa ff ff       	call   c0014bd8 <blockTask(TaskState)>
c001517b:	83 c4 10             	add    esp,0x10
c001517e:	66 90                	xchg   ax,ax
c0015180:	83 ec 08             	sub    esp,0x8
c0015183:	56                   	push   esi
c0015184:	68 84 71 02 c0       	push   0xc0027184
c0015189:	e8 fe 91 00 00       	call   c001e38c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001518e:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0015195:	e8 32 91 00 00       	call   c001e2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001519a:	83 c4 10             	add    esp,0x10
c001519d:	39 f8                	cmp    eax,edi
c001519f:	0f 84 37 ff ff ff    	je     c00150dc <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c00151a5:	8d 76 00             	lea    esi,[esi+0x0]
c00151a8:	83 ec 0c             	sub    esp,0xc
c00151ab:	68 84 71 02 c0       	push   0xc0027184
c00151b0:	e8 17 91 00 00       	call   c001e2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00151b5:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c00151bc:	89 c6                	mov    esi,eax
c00151be:	e8 11 91 00 00       	call   c001e2d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00151c3:	83 c4 10             	add    esp,0x10
c00151c6:	39 f3                	cmp    ebx,esi
c00151c8:	74 b6                	je     c0015180 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00151ca:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00151cd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00151d0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00151d6:	75 a8                	jne    c0015180 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00151d8:	e9 77 ff ff ff       	jmp    c0015154 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c00151dd:	8d 76 00             	lea    esi,[esi+0x0]
c00151e0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00151e4:	83 ec 0c             	sub    esp,0xc
c00151e7:	68 a8 09 02 c0       	push   0xc00209a8
c00151ec:	e9 4b ff ff ff       	jmp    c001513c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c00151f1:	8d 76 00             	lea    esi,[esi+0x0]
c00151f4:	8b 36                	mov    esi,DWORD PTR [esi]
c00151f6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00151fa:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00151fd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015200:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015206:	01 d7                	add    edi,edx
c0015208:	89 f8                	mov    eax,edi
c001520a:	e9 51 fe ff ff       	jmp    c0015060 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c001520f:	90                   	nop

c0015210 <cleanerTaskFunction(void*)>:
c0015210:	53                   	push   ebx
c0015211:	83 ec 08             	sub    esp,0x8
c0015214:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015219:	48                   	dec    eax
c001521a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001521f:	75 03                	jne    c0015224 <cleanerTaskFunction(void*)+0x14>
c0015221:	fb                   	sti    
c0015222:	66 90                	xchg   ax,ax
c0015224:	fa                   	cli    
c0015225:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001522a:	80 3d 4c 71 02 c0 00 	cmp    BYTE PTR ds:0xc002714c,0x0
c0015231:	8d 50 01             	lea    edx,[eax+0x1]
c0015234:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c001523a:	0f 84 ac 00 00 00    	je     c00152ec <cleanerTaskFunction(void*)+0xdc>
c0015240:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015245:	85 c0                	test   eax,eax
c0015247:	75 03                	jne    c001524c <cleanerTaskFunction(void*)+0x3c>
c0015249:	fb                   	sti    
c001524a:	66 90                	xchg   ax,ax
c001524c:	c6 05 4c 71 02 c0 00 	mov    BYTE PTR ds:0xc002714c,0x0
c0015253:	fa                   	cli    
c0015254:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001525a:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0015260:	fa                   	cli    
c0015261:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015267:	eb 2b                	jmp    c0015294 <cleanerTaskFunction(void*)+0x84>
c0015269:	8d 76 00             	lea    esi,[esi+0x0]
c001526c:	83 ec 0c             	sub    esp,0xc
c001526f:	68 6c 71 02 c0       	push   0xc002716c
c0015274:	e8 53 90 00 00       	call   c001e2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015279:	c7 04 24 6c 71 02 c0 	mov    DWORD PTR [esp],0xc002716c
c0015280:	89 c3                	mov    ebx,eax
c0015282:	e8 4d 90 00 00       	call   c001e2d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015287:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001528a:	e8 b5 fc ff ff       	call   c0014f44 <cleanupTerminatedTask(ThreadControlBlock*)>
c001528f:	83 c4 10             	add    esp,0x10
c0015292:	66 90                	xchg   ax,ax
c0015294:	83 ec 0c             	sub    esp,0xc
c0015297:	68 6c 71 02 c0       	push   0xc002716c
c001529c:	e8 0f 90 00 00       	call   c001e2b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00152a1:	83 c4 10             	add    esp,0x10
c00152a4:	84 c0                	test   al,al
c00152a6:	74 c4                	je     c001526c <cleanerTaskFunction(void*)+0x5c>
c00152a8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00152ad:	48                   	dec    eax
c00152ae:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00152b3:	75 03                	jne    c00152b8 <cleanerTaskFunction(void*)+0xa8>
c00152b5:	fb                   	sti    
c00152b6:	66 90                	xchg   ax,ax
c00152b8:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00152bd:	48                   	dec    eax
c00152be:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c00152c3:	0f 85 4b ff ff ff    	jne    c0015214 <cleanerTaskFunction(void*)+0x4>
c00152c9:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c00152ce:	85 c0                	test   eax,eax
c00152d0:	0f 84 3e ff ff ff    	je     c0015214 <cleanerTaskFunction(void*)+0x4>
c00152d6:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c00152e0:	e8 f7 f6 ff ff       	call   c00149dc <schedule()>
c00152e5:	e9 2a ff ff ff       	jmp    c0015214 <cleanerTaskFunction(void*)+0x4>
c00152ea:	66 90                	xchg   ax,ax
c00152ec:	83 ec 0c             	sub    esp,0xc
c00152ef:	6a 02                	push   0x2
c00152f1:	e8 ba f8 ff ff       	call   c0014bb0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00152f6:	83 c4 10             	add    esp,0x10
c00152f9:	e9 4e ff ff ff       	jmp    c001524c <cleanerTaskFunction(void*)+0x3c>
c00152fe:	66 90                	xchg   ax,ax

c0015300 <terminateTask(int)>:
c0015300:	83 ec 14             	sub    esp,0x14
c0015303:	fa                   	cli    
c0015304:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001530a:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0015310:	fa                   	cli    
c0015311:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015317:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001531b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015320:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015323:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015328:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001532b:	50                   	push   eax
c001532c:	68 6c 71 02 c0       	push   0xc002716c
c0015331:	e8 56 90 00 00       	call   c001e38c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015336:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001533b:	83 c4 10             	add    esp,0x10
c001533e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015345:	a1 48 71 02 c0       	mov    eax,ds:0xc0027148
c001534a:	85 c0                	test   eax,eax
c001534c:	74 5e                	je     c00153ac <terminateTask(int)+0xac>
c001534e:	83 ec 0c             	sub    esp,0xc
c0015351:	c6 05 4c 71 02 c0 01 	mov    BYTE PTR ds:0xc002714c,0x1
c0015358:	50                   	push   eax
c0015359:	e8 42 fb ff ff       	call   c0014ea0 <unblockTask(ThreadControlBlock*)>
c001535e:	83 c4 10             	add    esp,0x10
c0015361:	8d 76 00             	lea    esi,[esi+0x0]
c0015364:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015369:	48                   	dec    eax
c001536a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001536f:	75 03                	jne    c0015374 <terminateTask(int)+0x74>
c0015371:	fb                   	sti    
c0015372:	66 90                	xchg   ax,ax
c0015374:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0015379:	48                   	dec    eax
c001537a:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c001537f:	75 0b                	jne    c001538c <terminateTask(int)+0x8c>
c0015381:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c0015388:	75 36                	jne    c00153c0 <terminateTask(int)+0xc0>
c001538a:	66 90                	xchg   ax,ax
c001538c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015391:	48                   	dec    eax
c0015392:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015397:	75 03                	jne    c001539c <terminateTask(int)+0x9c>
c0015399:	fb                   	sti    
c001539a:	66 90                	xchg   ax,ax
c001539c:	fa                   	cli    
c001539d:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00153a3:	90                   	nop
c00153a4:	e8 33 f6 ff ff       	call   c00149dc <schedule()>
c00153a9:	eb e1                	jmp    c001538c <terminateTask(int)+0x8c>
c00153ab:	90                   	nop
c00153ac:	83 ec 0c             	sub    esp,0xc
c00153af:	68 d9 08 02 c0       	push   0xc00208d9
c00153b4:	e8 4d 52 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00153b9:	83 c4 10             	add    esp,0x10
c00153bc:	eb a6                	jmp    c0015364 <terminateTask(int)+0x64>
c00153be:	66 90                	xchg   ax,ax
c00153c0:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c00153ca:	eb d8                	jmp    c00153a4 <terminateTask(int)+0xa4>

c00153cc <Thr::terminateFromIRQ(int)>:
c00153cc:	83 ec 18             	sub    esp,0x18
c00153cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00153d3:	50                   	push   eax
c00153d4:	e8 27 ff ff ff       	call   c0015300 <terminateTask(int)>
c00153d9:	90                   	nop
c00153da:	66 90                	xchg   ax,ax

c00153dc <Semaphore::release()>:
c00153dc:	83 ec 0c             	sub    esp,0xc
c00153df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00153e3:	fa                   	cli    
c00153e4:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00153e9:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00153ef:	8d 48 01             	lea    ecx,[eax+0x1]
c00153f2:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c00153f8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00153fb:	85 c9                	test   ecx,ecx
c00153fd:	74 41                	je     c0015440 <Semaphore::release()+0x64>
c00153ff:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015402:	83 ec 0c             	sub    esp,0xc
c0015405:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015408:	51                   	push   ecx
c0015409:	e8 92 fa ff ff       	call   c0014ea0 <unblockTask(ThreadControlBlock*)>
c001540e:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0015413:	83 c4 10             	add    esp,0x10
c0015416:	48                   	dec    eax
c0015417:	90                   	nop
c0015418:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c001541d:	85 c0                	test   eax,eax
c001541f:	75 0b                	jne    c001542c <Semaphore::release()+0x50>
c0015421:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0015426:	85 c0                	test   eax,eax
c0015428:	75 1e                	jne    c0015448 <Semaphore::release()+0x6c>
c001542a:	66 90                	xchg   ax,ax
c001542c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015431:	48                   	dec    eax
c0015432:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015437:	75 03                	jne    c001543c <Semaphore::release()+0x60>
c0015439:	fb                   	sti    
c001543a:	66 90                	xchg   ax,ax
c001543c:	83 c4 0c             	add    esp,0xc
c001543f:	c3                   	ret    
c0015440:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0015443:	eb d3                	jmp    c0015418 <Semaphore::release()+0x3c>
c0015445:	8d 76 00             	lea    esi,[esi+0x0]
c0015448:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0015452:	e8 85 f5 ff ff       	call   c00149dc <schedule()>
c0015457:	eb d3                	jmp    c001542c <Semaphore::release()+0x50>
c0015459:	8d 76 00             	lea    esi,[esi+0x0]

c001545c <__static_initialization_and_destruction_0(int, int)>:
c001545c:	83 ec 0c             	sub    esp,0xc
c001545f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015464:	0f 85 8e 00 00 00    	jne    c00154f8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001546a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015472:	0f 85 80 00 00 00    	jne    c00154f8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015478:	83 ec 0c             	sub    esp,0xc
c001547b:	68 84 71 02 c0       	push   0xc0027184
c0015480:	e8 bb 91 00 00       	call   c001e640 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015485:	83 c4 10             	add    esp,0x10
c0015488:	83 ec 04             	sub    esp,0x4
c001548b:	68 70 15 02 c0       	push   0xc0021570
c0015490:	68 84 71 02 c0       	push   0xc0027184
c0015495:	68 f0 e5 01 c0       	push   0xc001e5f0
c001549a:	e8 21 50 ff ff       	call   c000a4c0 <__cxa_atexit>
c001549f:	83 c4 10             	add    esp,0x10
c00154a2:	83 ec 0c             	sub    esp,0xc
c00154a5:	68 78 71 02 c0       	push   0xc0027178
c00154aa:	e8 91 91 00 00       	call   c001e640 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00154af:	83 c4 10             	add    esp,0x10
c00154b2:	83 ec 04             	sub    esp,0x4
c00154b5:	68 70 15 02 c0       	push   0xc0021570
c00154ba:	68 78 71 02 c0       	push   0xc0027178
c00154bf:	68 f0 e5 01 c0       	push   0xc001e5f0
c00154c4:	e8 f7 4f ff ff       	call   c000a4c0 <__cxa_atexit>
c00154c9:	83 c4 10             	add    esp,0x10
c00154cc:	83 ec 0c             	sub    esp,0xc
c00154cf:	68 6c 71 02 c0       	push   0xc002716c
c00154d4:	e8 67 91 00 00       	call   c001e640 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00154d9:	83 c4 10             	add    esp,0x10
c00154dc:	83 ec 04             	sub    esp,0x4
c00154df:	68 70 15 02 c0       	push   0xc0021570
c00154e4:	68 6c 71 02 c0       	push   0xc002716c
c00154e9:	68 f0 e5 01 c0       	push   0xc001e5f0
c00154ee:	e8 cd 4f ff ff       	call   c000a4c0 <__cxa_atexit>
c00154f3:	83 c4 10             	add    esp,0x10
c00154f6:	66 90                	xchg   ax,ax
c00154f8:	90                   	nop
c00154f9:	83 c4 0c             	add    esp,0xc
c00154fc:	c3                   	ret    
c00154fd:	8d 76 00             	lea    esi,[esi+0x0]

c0015500 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015500:	83 ec 0c             	sub    esp,0xc
c0015503:	83 ec 08             	sub    esp,0x8
c0015506:	68 ff ff 00 00       	push   0xffff
c001550b:	6a 01                	push   0x1
c001550d:	e8 4a ff ff ff       	call   c001545c <__static_initialization_and_destruction_0(int, int)>
c0015512:	83 c4 10             	add    esp,0x10
c0015515:	83 c4 0c             	add    esp,0xc
c0015518:	c3                   	ret    

c0015519 <Vm::inbv(unsigned short)>:
c0015519:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001551d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015522:	75 06                	jne    c001552a <Vm::inbv(unsigned short)+0x11>
c0015524:	a0 cc 71 02 c0       	mov    al,ds:0xc00271cc
c0015529:	c3                   	ret    
c001552a:	ec                   	in     al,dx
c001552b:	c3                   	ret    

c001552c <Vm::outbv(unsigned short, unsigned char)>:
c001552c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015534:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015539:	75 25                	jne    c0015560 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001553b:	8b 0d cc 71 02 c0    	mov    ecx,DWORD PTR ds:0xc00271cc
c0015541:	8d 51 01             	lea    edx,[ecx+0x1]
c0015544:	88 81 e0 71 02 c0    	mov    BYTE PTR [ecx-0x3ffd8e20],al
c001554a:	89 15 cc 71 02 c0    	mov    DWORD PTR ds:0xc00271cc,edx
c0015550:	83 fa 20             	cmp    edx,0x20
c0015553:	75 0c                	jne    c0015561 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015555:	c7 05 cc 71 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x1f
c001555f:	c3                   	ret    
c0015560:	ee                   	out    dx,al
c0015561:	c3                   	ret    

c0015562 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015562:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015567:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001556c:	c1 e0 04             	shl    eax,0x4
c001556f:	01 d0                	add    eax,edx
c0015571:	c3                   	ret    

c0015572 <Vm::getSegment(unsigned int)>:
c0015572:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015576:	c1 e8 10             	shr    eax,0x10
c0015579:	c3                   	ret    

c001557a <Vm::getOffset(unsigned int)>:
c001557a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001557e:	c3                   	ret    

c001557f <Vm::mainloop2()>:
c001557f:	83 ec 18             	sub    esp,0x18
c0015582:	fa                   	cli    
c0015583:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015589:	6a 02                	push   0x2
c001558b:	c6 05 c5 71 02 c0 01 	mov    BYTE PTR ds:0xc00271c5,0x1
c0015592:	e8 19 f6 ff ff       	call   c0014bb0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015597:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001559c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00155a0:	52                   	push   edx
c00155a1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00155a5:	52                   	push   edx
c00155a6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00155aa:	52                   	push   edx
c00155ab:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00155af:	50                   	push   eax
c00155b0:	e8 5a ac fe ff       	call   c000020f <goToVM86>
c00155b5:	83 c4 2c             	add    esp,0x2c
c00155b8:	c3                   	ret    

c00155b9 <Vm::mainVm8086Loop(void*)>:
c00155b9:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00155be:	48                   	dec    eax
c00155bf:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00155c4:	75 01                	jne    c00155c7 <Vm::mainVm8086Loop(void*)+0xe>
c00155c6:	fb                   	sti    
c00155c7:	eb b6                	jmp    c001557f <Vm::mainloop2()>

c00155c9 <Vm::mainloop3(unsigned long)>:
c00155c9:	83 ec 18             	sub    esp,0x18
c00155cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00155d0:	fa                   	cli    
c00155d1:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00155d7:	6a 02                	push   0x2
c00155d9:	c6 05 c4 71 02 c0 01 	mov    BYTE PTR ds:0xc00271c4,0x1
c00155e0:	a3 c0 71 02 c0       	mov    ds:0xc00271c0,eax
c00155e5:	e8 c6 f5 ff ff       	call   c0014bb0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00155ea:	83 c4 1c             	add    esp,0x1c
c00155ed:	eb 90                	jmp    c001557f <Vm::mainloop2()>

c00155ef <Vm::initialise8086()>:
c00155ef:	83 ec 0c             	sub    esp,0xc
c00155f2:	68 80 00 00 00       	push   0x80
c00155f7:	6a 00                	push   0x0
c00155f9:	68 b9 55 01 c0       	push   0xc00155b9
c00155fe:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0015604:	e8 8b f1 ff ff       	call   c0014794 <Process::createThread(void (*)(void*), void*, int)>
c0015609:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015610:	a3 c8 71 02 c0       	mov    ds:0xc00271c8,eax
c0015615:	68 00 01 00 00       	push   0x100
c001561a:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001561f:	6a 00                	push   0x0
c0015621:	6a 00                	push   0x0
c0015623:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015629:	e8 d8 46 ff ff       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001562e:	83 c4 2c             	add    esp,0x2c
c0015631:	c3                   	ret    

c0015632 <Vm::finish8086()>:
c0015632:	53                   	push   ebx
c0015633:	83 ec 08             	sub    esp,0x8
c0015636:	fa                   	cli    
c0015637:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001563d:	80 3d c4 71 02 c0 00 	cmp    BYTE PTR ds:0xc00271c4,0x0
c0015644:	75 15                	jne    c001565b <Vm::finish8086()+0x29>
c0015646:	e8 91 f3 ff ff       	call   c00149dc <schedule()>
c001564b:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015650:	48                   	dec    eax
c0015651:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015656:	75 de                	jne    c0015636 <Vm::finish8086()+0x4>
c0015658:	fb                   	sti    
c0015659:	eb db                	jmp    c0015636 <Vm::finish8086()+0x4>
c001565b:	83 ec 0c             	sub    esp,0xc
c001565e:	8b 1d c0 71 02 c0    	mov    ebx,DWORD PTR ds:0xc00271c0
c0015664:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c001566a:	c6 05 c4 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c4,0x0
c0015671:	e8 2a f8 ff ff       	call   c0014ea0 <unblockTask(ThreadControlBlock*)>
c0015676:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001567b:	83 c4 10             	add    esp,0x10
c001567e:	8d 50 ff             	lea    edx,[eax-0x1]
c0015681:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0015687:	85 d2                	test   edx,edx
c0015689:	75 01                	jne    c001568c <Vm::finish8086()+0x5a>
c001568b:	fb                   	sti    
c001568c:	89 d8                	mov    eax,ebx
c001568e:	83 c4 08             	add    esp,0x8
c0015691:	5b                   	pop    ebx
c0015692:	c3                   	ret    

c0015693 <Vm::getOutput8086(unsigned char*)>:
c0015693:	57                   	push   edi
c0015694:	8b 0d cc 71 02 c0    	mov    ecx,DWORD PTR ds:0xc00271cc
c001569a:	56                   	push   esi
c001569b:	be e0 71 02 c0       	mov    esi,0xc00271e0
c00156a0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00156a4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00156a6:	a1 cc 71 02 c0       	mov    eax,ds:0xc00271cc
c00156ab:	5e                   	pop    esi
c00156ac:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c00156b6:	5f                   	pop    edi
c00156b7:	c3                   	ret    

c00156b8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00156b8:	55                   	push   ebp
c00156b9:	57                   	push   edi
c00156ba:	56                   	push   esi
c00156bb:	53                   	push   ebx
c00156bc:	83 ec 0c             	sub    esp,0xc
c00156bf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00156c3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00156c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00156cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00156cf:	fa                   	cli    
c00156d0:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00156d6:	80 3d c5 71 02 c0 00 	cmp    BYTE PTR ds:0xc00271c5,0x0
c00156dd:	75 15                	jne    c00156f4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00156df:	e8 f8 f2 ff ff       	call   c00149dc <schedule()>
c00156e4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00156e9:	48                   	dec    eax
c00156ea:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00156ef:	75 de                	jne    c00156cf <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00156f1:	fb                   	sti    
c00156f2:	eb db                	jmp    c00156cf <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00156f4:	a1 c8 71 02 c0       	mov    eax,ds:0xc00271c8
c00156f9:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c0015703:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015707:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001570b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001570f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015713:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015717:	0f b7 ff             	movzx  edi,di
c001571a:	0f b7 f6             	movzx  esi,si
c001571d:	50                   	push   eax
c001571e:	6a 20                	push   0x20
c0015720:	6a 00                	push   0x0
c0015722:	68 e0 71 02 c0       	push   0xc00271e0
c0015727:	e8 94 ad fe ff       	call   c00004c0 <memset>
c001572c:	5a                   	pop    edx
c001572d:	59                   	pop    ecx
c001572e:	57                   	push   edi
c001572f:	56                   	push   esi
c0015730:	e8 2d fe ff ff       	call   c0015562 <Vm::realToLinear(unsigned short, unsigned short)>
c0015735:	83 c4 10             	add    esp,0x10
c0015738:	89 c7                	mov    edi,eax
c001573a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001573e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015742:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015744:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015749:	c6 05 c5 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c5,0x0
c0015750:	48                   	dec    eax
c0015751:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015756:	75 01                	jne    c0015759 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015758:	fb                   	sti    
c0015759:	83 ec 0c             	sub    esp,0xc
c001575c:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c0015762:	e8 39 f7 ff ff       	call   c0014ea0 <unblockTask(ThreadControlBlock*)>
c0015767:	83 c4 1c             	add    esp,0x1c
c001576a:	b0 01                	mov    al,0x1
c001576c:	5b                   	pop    ebx
c001576d:	5e                   	pop    esi
c001576e:	5f                   	pop    edi
c001576f:	5d                   	pop    ebp
c0015770:	c3                   	ret    

c0015771 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015771:	55                   	push   ebp
c0015772:	57                   	push   edi
c0015773:	56                   	push   esi
c0015774:	53                   	push   ebx
c0015775:	83 ec 2c             	sub    esp,0x2c
c0015778:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001577c:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0015780:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015784:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015788:	fa                   	cli    
c0015789:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001578f:	0f b6 35 c5 71 02 c0 	movzx  esi,BYTE PTR ds:0xc00271c5
c0015796:	89 f0                	mov    eax,esi
c0015798:	84 c0                	test   al,al
c001579a:	75 1d                	jne    c00157b9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001579c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00157a0:	e8 37 f2 ff ff       	call   c00149dc <schedule()>
c00157a5:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00157aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00157ae:	48                   	dec    eax
c00157af:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00157b4:	75 d2                	jne    c0015788 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00157b6:	fb                   	sti    
c00157b7:	eb cf                	jmp    c0015788 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00157b9:	a1 c8 71 02 c0       	mov    eax,ds:0xc00271c8
c00157be:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c00157c8:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00157cc:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00157d0:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00157d4:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00157d8:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00157dc:	50                   	push   eax
c00157dd:	6a 20                	push   0x20
c00157df:	6a 00                	push   0x0
c00157e1:	68 e0 71 02 c0       	push   0xc00271e0
c00157e6:	e8 d5 ac fe ff       	call   c00004c0 <memset>
c00157eb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00157f2:	e8 6e 20 ff ff       	call   c0007865 <malloc>
c00157f7:	83 c4 0c             	add    esp,0xc
c00157fa:	89 c3                	mov    ebx,eax
c00157fc:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0015802:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015806:	50                   	push   eax
c0015807:	e8 70 53 ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c001580c:	83 c4 10             	add    esp,0x10
c001580f:	85 db                	test   ebx,ebx
c0015811:	75 0a                	jne    c001581d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0015813:	83 ec 0c             	sub    esp,0xc
c0015816:	68 04 0a 02 c0       	push   0xc0020a04
c001581b:	eb 3e                	jmp    c001585b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001581d:	50                   	push   eax
c001581e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015822:	50                   	push   eax
c0015823:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015827:	50                   	push   eax
c0015828:	53                   	push   ebx
c0015829:	e8 ba 56 ff ff       	call   c000aee8 <File::stat(unsigned long long*, bool*)>
c001582e:	83 c4 10             	add    esp,0x10
c0015831:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0015836:	74 0a                	je     c0015842 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0015838:	83 ec 0c             	sub    esp,0xc
c001583b:	68 18 0a 02 c0       	push   0xc0020a18
c0015840:	eb 19                	jmp    c001585b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0015842:	51                   	push   ecx
c0015843:	51                   	push   ecx
c0015844:	6a 01                	push   0x1
c0015846:	53                   	push   ebx
c0015847:	e8 f0 53 ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c001584c:	83 c4 10             	add    esp,0x10
c001584f:	85 c0                	test   eax,eax
c0015851:	74 24                	je     c0015877 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0015853:	83 ec 0c             	sub    esp,0xc
c0015856:	68 31 0a 02 c0       	push   0xc0020a31
c001585b:	e8 67 ab ff ff       	call   c00103c7 <KePanic(char const*)>
c0015860:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015865:	83 c4 10             	add    esp,0x10
c0015868:	48                   	dec    eax
c0015869:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001586e:	85 c0                	test   eax,eax
c0015870:	75 01                	jne    c0015873 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0015872:	fb                   	sti    
c0015873:	31 f6                	xor    esi,esi
c0015875:	eb 58                	jmp    c00158cf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0015877:	0f b7 ed             	movzx  ebp,bp
c001587a:	50                   	push   eax
c001587b:	0f b7 ff             	movzx  edi,di
c001587e:	50                   	push   eax
c001587f:	55                   	push   ebp
c0015880:	57                   	push   edi
c0015881:	e8 dc fc ff ff       	call   c0015562 <Vm::realToLinear(unsigned short, unsigned short)>
c0015886:	5a                   	pop    edx
c0015887:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015889:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001588d:	51                   	push   ecx
c001588e:	50                   	push   eax
c001588f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015893:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015897:	53                   	push   ebx
c0015898:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001589b:	83 c4 14             	add    esp,0x14
c001589e:	53                   	push   ebx
c001589f:	e8 f6 53 ff ff       	call   c000ac9a <File::close()>
c00158a4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00158a9:	83 c4 10             	add    esp,0x10
c00158ac:	48                   	dec    eax
c00158ad:	c6 05 c5 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c5,0x0
c00158b4:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00158b9:	85 c0                	test   eax,eax
c00158bb:	75 01                	jne    c00158be <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00158bd:	fb                   	sti    
c00158be:	83 ec 0c             	sub    esp,0xc
c00158c1:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c00158c7:	e8 d4 f5 ff ff       	call   c0014ea0 <unblockTask(ThreadControlBlock*)>
c00158cc:	83 c4 10             	add    esp,0x10
c00158cf:	83 c4 2c             	add    esp,0x2c
c00158d2:	89 f0                	mov    eax,esi
c00158d4:	5b                   	pop    ebx
c00158d5:	5e                   	pop    esi
c00158d6:	5f                   	pop    edi
c00158d7:	5d                   	pop    ebp
c00158d8:	c3                   	ret    

c00158d9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00158d9:	57                   	push   edi
c00158da:	56                   	push   esi
c00158db:	53                   	push   ebx
c00158dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00158e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00158e4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00158e8:	83 e8 06             	sub    eax,0x6
c00158eb:	0f b7 c0             	movzx  eax,ax
c00158ee:	50                   	push   eax
c00158ef:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00158f4:	50                   	push   eax
c00158f5:	e8 68 fc ff ff       	call   c0015562 <Vm::realToLinear(unsigned short, unsigned short)>
c00158fa:	5a                   	pop    edx
c00158fb:	5e                   	pop    esi
c00158fc:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00158ff:	8d 56 fa             	lea    edx,[esi-0x6]
c0015902:	81 e2 ff ff 00 00    	and    edx,0xffff
c0015908:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001590b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001590e:	83 c2 02             	add    edx,0x2
c0015911:	66 89 10             	mov    WORD PTR [eax],dx
c0015914:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0015917:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001591b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001591e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0015922:	89 d6                	mov    esi,edx
c0015924:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001592a:	66 81 e6 ff fd       	and    si,0xfdff
c001592f:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0015933:	74 07                	je     c001593c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0015935:	89 d6                	mov    esi,edx
c0015937:	66 81 ce 00 02       	or     si,0x200
c001593c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0015940:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015945:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015949:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0015951:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0015954:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001595c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001595f:	5b                   	pop    ebx
c0015960:	5e                   	pop    esi
c0015961:	5f                   	pop    edi
c0015962:	c3                   	ret    

c0015963 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0015963:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015968:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001596d:	c1 e0 04             	shl    eax,0x4
c0015970:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0015973:	c3                   	ret    

c0015974 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0015974:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015979:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001597e:	c1 e0 04             	shl    eax,0x4
c0015981:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0015985:	c3                   	ret    

c0015986 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0015986:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001598b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015990:	c1 e0 04             	shl    eax,0x4
c0015993:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0015996:	c3                   	ret    

c0015997 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0015997:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001599c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00159a1:	c1 e0 04             	shl    eax,0x4
c00159a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00159a8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00159ab:	c3                   	ret    

c00159ac <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00159ac:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00159b1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00159b6:	c1 e0 04             	shl    eax,0x4
c00159b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00159bd:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00159c1:	c3                   	ret    

c00159c2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00159c2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00159c7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00159cc:	c1 e0 04             	shl    eax,0x4
c00159cf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00159d3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00159d6:	c3                   	ret    

c00159d7 <Vm::faultHandler(regs*)>:
c00159d7:	55                   	push   ebp
c00159d8:	57                   	push   edi
c00159d9:	56                   	push   esi
c00159da:	53                   	push   ebx
c00159db:	83 ec 1c             	sub    esp,0x1c
c00159de:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00159e2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00159e5:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00159e9:	0f b7 f8             	movzx  edi,ax
c00159ec:	52                   	push   edx
c00159ed:	0f b7 c0             	movzx  eax,ax
c00159f0:	50                   	push   eax
c00159f1:	e8 6c fb ff ff       	call   c0015562 <Vm::realToLinear(unsigned short, unsigned short)>
c00159f6:	5a                   	pop    edx
c00159f7:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00159fa:	59                   	pop    ecx
c00159fb:	89 c1                	mov    ecx,eax
c00159fd:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015a00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a04:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015a09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015a0d:	0f b7 c5             	movzx  eax,bp
c0015a10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a14:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015a18:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015a1c:	e8 41 fb ff ff       	call   c0015562 <Vm::realToLinear(unsigned short, unsigned short)>
c0015a21:	5e                   	pop    esi
c0015a22:	be 06 00 00 00       	mov    esi,0x6
c0015a27:	5a                   	pop    edx
c0015a28:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0015a2d:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0015a32:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0015a35:	80 fa 9d             	cmp    dl,0x9d
c0015a38:	0f 84 2c 02 00 00    	je     c0015c6a <Vm::faultHandler(regs*)+0x293>
c0015a3e:	0f 87 91 00 00 00    	ja     c0015ad5 <Vm::faultHandler(regs*)+0xfe>
c0015a44:	80 fa 66             	cmp    dl,0x66
c0015a47:	0f 84 98 01 00 00    	je     c0015be5 <Vm::faultHandler(regs*)+0x20e>
c0015a4d:	77 47                	ja     c0015a96 <Vm::faultHandler(regs*)+0xbf>
c0015a4f:	80 fa 36             	cmp    dl,0x36
c0015a52:	0f 84 80 01 00 00    	je     c0015bd8 <Vm::faultHandler(regs*)+0x201>
c0015a58:	77 1a                	ja     c0015a74 <Vm::faultHandler(regs*)+0x9d>
c0015a5a:	80 fa 26             	cmp    dl,0x26
c0015a5d:	0f 84 4e 01 00 00    	je     c0015bb1 <Vm::faultHandler(regs*)+0x1da>
c0015a63:	80 fa 2e             	cmp    dl,0x2e
c0015a66:	0f 85 e2 05 00 00    	jne    c001604e <Vm::faultHandler(regs*)+0x677>
c0015a6c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015a6f:	31 f6                	xor    esi,esi
c0015a71:	41                   	inc    ecx
c0015a72:	eb be                	jmp    c0015a32 <Vm::faultHandler(regs*)+0x5b>
c0015a74:	80 fa 64             	cmp    dl,0x64
c0015a77:	0f 84 41 01 00 00    	je     c0015bbe <Vm::faultHandler(regs*)+0x1e7>
c0015a7d:	0f 87 48 01 00 00    	ja     c0015bcb <Vm::faultHandler(regs*)+0x1f4>
c0015a83:	80 fa 3e             	cmp    dl,0x3e
c0015a86:	0f 85 c2 05 00 00    	jne    c001604e <Vm::faultHandler(regs*)+0x677>
c0015a8c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015a8f:	be 01 00 00 00       	mov    esi,0x1
c0015a94:	eb db                	jmp    c0015a71 <Vm::faultHandler(regs*)+0x9a>
c0015a96:	80 fa 6d             	cmp    dl,0x6d
c0015a99:	0f 84 ec 02 00 00    	je     c0015d8b <Vm::faultHandler(regs*)+0x3b4>
c0015a9f:	77 17                	ja     c0015ab8 <Vm::faultHandler(regs*)+0xe1>
c0015aa1:	80 fa 67             	cmp    dl,0x67
c0015aa4:	0f 84 48 01 00 00    	je     c0015bf2 <Vm::faultHandler(regs*)+0x21b>
c0015aaa:	80 fa 6c             	cmp    dl,0x6c
c0015aad:	0f 84 69 02 00 00    	je     c0015d1c <Vm::faultHandler(regs*)+0x345>
c0015ab3:	e9 96 05 00 00       	jmp    c001604e <Vm::faultHandler(regs*)+0x677>
c0015ab8:	80 fa 6f             	cmp    dl,0x6f
c0015abb:	0f 84 f4 03 00 00    	je     c0015eb5 <Vm::faultHandler(regs*)+0x4de>
c0015ac1:	0f 82 59 03 00 00    	jb     c0015e20 <Vm::faultHandler(regs*)+0x449>
c0015ac7:	80 fa 9c             	cmp    dl,0x9c
c0015aca:	0f 84 2f 01 00 00    	je     c0015bff <Vm::faultHandler(regs*)+0x228>
c0015ad0:	e9 79 05 00 00       	jmp    c001604e <Vm::faultHandler(regs*)+0x677>
c0015ad5:	80 fa ec             	cmp    dl,0xec
c0015ad8:	0f 84 14 05 00 00    	je     c0015ff2 <Vm::faultHandler(regs*)+0x61b>
c0015ade:	77 7b                	ja     c0015b5b <Vm::faultHandler(regs*)+0x184>
c0015ae0:	80 fa e4             	cmp    dl,0xe4
c0015ae3:	0f 84 93 04 00 00    	je     c0015f7c <Vm::faultHandler(regs*)+0x5a5>
c0015ae9:	77 53                	ja     c0015b3e <Vm::faultHandler(regs*)+0x167>
c0015aeb:	80 fa cd             	cmp    dl,0xcd
c0015aee:	0f 84 d9 01 00 00    	je     c0015ccd <Vm::faultHandler(regs*)+0x2f6>
c0015af4:	80 fa cf             	cmp    dl,0xcf
c0015af7:	0f 85 51 05 00 00    	jne    c001604e <Vm::faultHandler(regs*)+0x677>
c0015afd:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0015b00:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0015b03:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0015b07:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0015b0a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0015b0e:	81 ca 00 02 02 00    	or     edx,0x20200
c0015b14:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015b17:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0015b1b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015b21:	66 c1 e8 09          	shr    ax,0x9
c0015b25:	83 e0 01             	and    eax,0x1
c0015b28:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015b2b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015b2e:	83 c0 06             	add    eax,0x6
c0015b31:	25 ff ff 00 00       	and    eax,0xffff
c0015b36:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0015b39:	e9 0c 05 00 00       	jmp    c001604a <Vm::faultHandler(regs*)+0x673>
c0015b3e:	80 fa e6             	cmp    dl,0xe6
c0015b41:	0f 84 7f 04 00 00    	je     c0015fc6 <Vm::faultHandler(regs*)+0x5ef>
c0015b47:	0f 82 4b 04 00 00    	jb     c0015f98 <Vm::faultHandler(regs*)+0x5c1>
c0015b4d:	80 fa e7             	cmp    dl,0xe7
c0015b50:	0f 84 87 04 00 00    	je     c0015fdd <Vm::faultHandler(regs*)+0x606>
c0015b56:	e9 f3 04 00 00       	jmp    c001604e <Vm::faultHandler(regs*)+0x677>
c0015b5b:	80 fa ef             	cmp    dl,0xef
c0015b5e:	0f 84 d1 04 00 00    	je     c0016035 <Vm::faultHandler(regs*)+0x65e>
c0015b64:	77 28                	ja     c0015b8e <Vm::faultHandler(regs*)+0x1b7>
c0015b66:	80 fa ed             	cmp    dl,0xed
c0015b69:	0f 84 9f 04 00 00    	je     c001600e <Vm::faultHandler(regs*)+0x637>
c0015b6f:	80 fa ee             	cmp    dl,0xee
c0015b72:	0f 85 d6 04 00 00    	jne    c001604e <Vm::faultHandler(regs*)+0x677>
c0015b78:	50                   	push   eax
c0015b79:	50                   	push   eax
c0015b7a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0015b7e:	50                   	push   eax
c0015b7f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015b83:	50                   	push   eax
c0015b84:	e8 a3 f9 ff ff       	call   c001552c <Vm::outbv(unsigned short, unsigned char)>
c0015b89:	e9 9f 04 00 00       	jmp    c001602d <Vm::faultHandler(regs*)+0x656>
c0015b8e:	80 fa fa             	cmp    dl,0xfa
c0015b91:	0f 84 69 01 00 00    	je     c0015d00 <Vm::faultHandler(regs*)+0x329>
c0015b97:	80 fa fb             	cmp    dl,0xfb
c0015b9a:	0f 84 6e 01 00 00    	je     c0015d0e <Vm::faultHandler(regs*)+0x337>
c0015ba0:	80 fa f3             	cmp    dl,0xf3
c0015ba3:	0f 85 a5 04 00 00    	jne    c001604e <Vm::faultHandler(regs*)+0x677>
c0015ba9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015bac:	e9 c0 fe ff ff       	jmp    c0015a71 <Vm::faultHandler(regs*)+0x9a>
c0015bb1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015bb4:	be 02 00 00 00       	mov    esi,0x2
c0015bb9:	e9 b3 fe ff ff       	jmp    c0015a71 <Vm::faultHandler(regs*)+0x9a>
c0015bbe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015bc1:	be 03 00 00 00       	mov    esi,0x3
c0015bc6:	e9 a6 fe ff ff       	jmp    c0015a71 <Vm::faultHandler(regs*)+0x9a>
c0015bcb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015bce:	be 04 00 00 00       	mov    esi,0x4
c0015bd3:	e9 99 fe ff ff       	jmp    c0015a71 <Vm::faultHandler(regs*)+0x9a>
c0015bd8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015bdb:	be 05 00 00 00       	mov    esi,0x5
c0015be0:	e9 8c fe ff ff       	jmp    c0015a71 <Vm::faultHandler(regs*)+0x9a>
c0015be5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015be8:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0015bed:	e9 7f fe ff ff       	jmp    c0015a71 <Vm::faultHandler(regs*)+0x9a>
c0015bf2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015bf5:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0015bfa:	e9 72 fe ff ff       	jmp    c0015a71 <Vm::faultHandler(regs*)+0x9a>
c0015bff:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0015c02:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015c06:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015c0b:	74 30                	je     c0015c3d <Vm::faultHandler(regs*)+0x266>
c0015c0d:	83 e9 04             	sub    ecx,0x4
c0015c10:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0015c16:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0015c1c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0015c1f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0015c22:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015c28:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0015c2c:	0f 84 15 04 00 00    	je     c0016047 <Vm::faultHandler(regs*)+0x670>
c0015c32:	80 ce 02             	or     dh,0x2
c0015c35:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0015c38:	e9 0a 04 00 00       	jmp    c0016047 <Vm::faultHandler(regs*)+0x670>
c0015c3d:	83 e9 02             	sub    ecx,0x2
c0015c40:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0015c46:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0015c49:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0015c4d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015c53:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0015c57:	74 05                	je     c0015c5e <Vm::faultHandler(regs*)+0x287>
c0015c59:	80 ce 02             	or     dh,0x2
c0015c5c:	eb 03                	jmp    c0015c61 <Vm::faultHandler(regs*)+0x28a>
c0015c5e:	80 e6 fd             	and    dh,0xfd
c0015c61:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0015c65:	e9 dd 03 00 00       	jmp    c0016047 <Vm::faultHandler(regs*)+0x670>
c0015c6a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015c6f:	74 2a                	je     c0015c9b <Vm::faultHandler(regs*)+0x2c4>
c0015c71:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c73:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0015c79:	81 ca 00 02 02 00    	or     edx,0x20200
c0015c7f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015c82:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c84:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015c8a:	c1 e8 09             	shr    eax,0x9
c0015c8d:	83 e0 01             	and    eax,0x1
c0015c90:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015c93:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015c96:	83 c0 04             	add    eax,0x4
c0015c99:	eb 25                	jmp    c0015cc0 <Vm::faultHandler(regs*)+0x2e9>
c0015c9b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0015c9e:	81 ca 00 02 02 00    	or     edx,0x20200
c0015ca4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015ca7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0015caa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015cb0:	66 c1 e8 09          	shr    ax,0x9
c0015cb4:	83 e0 01             	and    eax,0x1
c0015cb7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015cba:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015cbd:	83 c0 02             	add    eax,0x2
c0015cc0:	25 ff ff 00 00       	and    eax,0xffff
c0015cc5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0015cc8:	e9 7a 03 00 00       	jmp    c0016047 <Vm::faultHandler(regs*)+0x670>
c0015ccd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015cd1:	3c ee                	cmp    al,0xee
c0015cd3:	75 10                	jne    c0015ce5 <Vm::faultHandler(regs*)+0x30e>
c0015cd5:	83 ec 0c             	sub    esp,0xc
c0015cd8:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0015cdb:	e8 e9 f8 ff ff       	call   c00155c9 <Vm::mainloop3(unsigned long)>
c0015ce0:	e9 4b 03 00 00       	jmp    c0016030 <Vm::faultHandler(regs*)+0x659>
c0015ce5:	83 ec 0c             	sub    esp,0xc
c0015ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cf0:	51                   	push   ecx
c0015cf1:	50                   	push   eax
c0015cf2:	53                   	push   ebx
c0015cf3:	e8 e1 fb ff ff       	call   c00158d9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0015cf8:	83 c4 20             	add    esp,0x20
c0015cfb:	e9 4a 03 00 00       	jmp    c001604a <Vm::faultHandler(regs*)+0x673>
c0015d00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d05:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015d09:	e9 39 03 00 00       	jmp    c0016047 <Vm::faultHandler(regs*)+0x670>
c0015d0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d13:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0015d17:	e9 2b 03 00 00       	jmp    c0016047 <Vm::faultHandler(regs*)+0x670>
c0015d1c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0015d1f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015d24:	74 2b                	je     c0015d51 <Vm::faultHandler(regs*)+0x37a>
c0015d26:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0015d2d:	76 22                	jbe    c0015d51 <Vm::faultHandler(regs*)+0x37a>
c0015d2f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015d33:	50                   	push   eax
c0015d34:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015d38:	50                   	push   eax
c0015d39:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015d3d:	50                   	push   eax
c0015d3e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015d42:	50                   	push   eax
c0015d43:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015d47:	50                   	push   eax
c0015d48:	6a 6c                	push   0x6c
c0015d4a:	6a 6c                	push   0x6c
c0015d4c:	e9 b9 01 00 00       	jmp    c0015f0a <Vm::faultHandler(regs*)+0x533>
c0015d51:	83 ec 0c             	sub    esp,0xc
c0015d54:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015d58:	0f b7 f6             	movzx  esi,si
c0015d5b:	50                   	push   eax
c0015d5c:	e8 b8 f7 ff ff       	call   c0015519 <Vm::inbv(unsigned short)>
c0015d61:	83 c4 0c             	add    esp,0xc
c0015d64:	0f b6 c0             	movzx  eax,al
c0015d67:	50                   	push   eax
c0015d68:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0015d6c:	50                   	push   eax
c0015d6d:	56                   	push   esi
c0015d6e:	e8 24 fc ff ff       	call   c0015997 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0015d73:	83 c4 10             	add    esp,0x10
c0015d76:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015d79:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015d7d:	74 03                	je     c0015d82 <Vm::faultHandler(regs*)+0x3ab>
c0015d7f:	48                   	dec    eax
c0015d80:	eb 01                	jmp    c0015d83 <Vm::faultHandler(regs*)+0x3ac>
c0015d82:	40                   	inc    eax
c0015d83:	0f b7 c0             	movzx  eax,ax
c0015d86:	e9 8d 00 00 00       	jmp    c0015e18 <Vm::faultHandler(regs*)+0x441>
c0015d8b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0015d8e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015d91:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015d96:	74 29                	je     c0015dc1 <Vm::faultHandler(regs*)+0x3ea>
c0015d98:	3d ff ff 00 00       	cmp    eax,0xffff
c0015d9d:	76 22                	jbe    c0015dc1 <Vm::faultHandler(regs*)+0x3ea>
c0015d9f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015da3:	50                   	push   eax
c0015da4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015da8:	50                   	push   eax
c0015da9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015dad:	50                   	push   eax
c0015dae:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015db2:	50                   	push   eax
c0015db3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015db7:	50                   	push   eax
c0015db8:	6a 6d                	push   0x6d
c0015dba:	6a 6d                	push   0x6d
c0015dbc:	e9 49 01 00 00       	jmp    c0015f0a <Vm::faultHandler(regs*)+0x533>
c0015dc1:	0f b7 c8             	movzx  ecx,ax
c0015dc4:	0f b7 f6             	movzx  esi,si
c0015dc7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015dca:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015dcf:	74 20                	je     c0015df1 <Vm::faultHandler(regs*)+0x41a>
c0015dd1:	ed                   	in     eax,dx
c0015dd2:	55                   	push   ebp
c0015dd3:	50                   	push   eax
c0015dd4:	51                   	push   ecx
c0015dd5:	56                   	push   esi
c0015dd6:	e8 e7 fb ff ff       	call   c00159c2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0015ddb:	83 c4 10             	add    esp,0x10
c0015dde:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015de1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015de5:	74 05                	je     c0015dec <Vm::faultHandler(regs*)+0x415>
c0015de7:	83 e8 04             	sub    eax,0x4
c0015dea:	eb 27                	jmp    c0015e13 <Vm::faultHandler(regs*)+0x43c>
c0015dec:	83 c0 04             	add    eax,0x4
c0015def:	eb 22                	jmp    c0015e13 <Vm::faultHandler(regs*)+0x43c>
c0015df1:	66 ed                	in     ax,dx
c0015df3:	0f b7 c0             	movzx  eax,ax
c0015df6:	57                   	push   edi
c0015df7:	50                   	push   eax
c0015df8:	51                   	push   ecx
c0015df9:	56                   	push   esi
c0015dfa:	e8 ad fb ff ff       	call   c00159ac <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0015dff:	83 c4 10             	add    esp,0x10
c0015e02:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015e05:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015e09:	74 05                	je     c0015e10 <Vm::faultHandler(regs*)+0x439>
c0015e0b:	83 e8 02             	sub    eax,0x2
c0015e0e:	eb 03                	jmp    c0015e13 <Vm::faultHandler(regs*)+0x43c>
c0015e10:	83 c0 02             	add    eax,0x2
c0015e13:	25 ff ff 00 00       	and    eax,0xffff
c0015e18:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0015e1b:	e9 27 02 00 00       	jmp    c0016047 <Vm::faultHandler(regs*)+0x670>
c0015e20:	8d 46 ff             	lea    eax,[esi-0x1]
c0015e23:	3c 05                	cmp    al,0x5
c0015e25:	77 24                	ja     c0015e4b <Vm::faultHandler(regs*)+0x474>
c0015e27:	0f b6 c0             	movzx  eax,al
c0015e2a:	ff 24 85 a4 0a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf55c]
c0015e31:	0f b7 fd             	movzx  edi,bp
c0015e34:	eb 15                	jmp    c0015e4b <Vm::faultHandler(regs*)+0x474>
c0015e36:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0015e3a:	eb 0f                	jmp    c0015e4b <Vm::faultHandler(regs*)+0x474>
c0015e3c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0015e40:	eb 09                	jmp    c0015e4b <Vm::faultHandler(regs*)+0x474>
c0015e42:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0015e46:	eb 03                	jmp    c0015e4b <Vm::faultHandler(regs*)+0x474>
c0015e48:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0015e4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015e4e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015e53:	74 29                	je     c0015e7e <Vm::faultHandler(regs*)+0x4a7>
c0015e55:	3d ff ff 00 00       	cmp    eax,0xffff
c0015e5a:	76 22                	jbe    c0015e7e <Vm::faultHandler(regs*)+0x4a7>
c0015e5c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015e60:	50                   	push   eax
c0015e61:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015e65:	50                   	push   eax
c0015e66:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015e6a:	50                   	push   eax
c0015e6b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015e6f:	50                   	push   eax
c0015e70:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015e74:	50                   	push   eax
c0015e75:	6a 6e                	push   0x6e
c0015e77:	6a 6e                	push   0x6e
c0015e79:	e9 8c 00 00 00       	jmp    c0015f0a <Vm::faultHandler(regs*)+0x533>
c0015e7e:	0f b7 c0             	movzx  eax,ax
c0015e81:	52                   	push   edx
c0015e82:	52                   	push   edx
c0015e83:	50                   	push   eax
c0015e84:	57                   	push   edi
c0015e85:	e8 d9 fa ff ff       	call   c0015963 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0015e8a:	59                   	pop    ecx
c0015e8b:	0f b6 c0             	movzx  eax,al
c0015e8e:	5e                   	pop    esi
c0015e8f:	50                   	push   eax
c0015e90:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015e94:	50                   	push   eax
c0015e95:	e8 92 f6 ff ff       	call   c001552c <Vm::outbv(unsigned short, unsigned char)>
c0015e9a:	83 c4 10             	add    esp,0x10
c0015e9d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015ea0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015ea4:	74 03                	je     c0015ea9 <Vm::faultHandler(regs*)+0x4d2>
c0015ea6:	48                   	dec    eax
c0015ea7:	eb 01                	jmp    c0015eaa <Vm::faultHandler(regs*)+0x4d3>
c0015ea9:	40                   	inc    eax
c0015eaa:	0f b7 c0             	movzx  eax,ax
c0015ead:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0015eb0:	e9 92 01 00 00       	jmp    c0016047 <Vm::faultHandler(regs*)+0x670>
c0015eb5:	8d 46 ff             	lea    eax,[esi-0x1]
c0015eb8:	3c 05                	cmp    al,0x5
c0015eba:	77 1f                	ja     c0015edb <Vm::faultHandler(regs*)+0x504>
c0015ebc:	0f b6 c0             	movzx  eax,al
c0015ebf:	ff 24 85 bc 0a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf544]
c0015ec6:	89 ef                	mov    edi,ebp
c0015ec8:	eb 11                	jmp    c0015edb <Vm::faultHandler(regs*)+0x504>
c0015eca:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0015ecd:	eb 0c                	jmp    c0015edb <Vm::faultHandler(regs*)+0x504>
c0015ecf:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0015ed2:	eb 07                	jmp    c0015edb <Vm::faultHandler(regs*)+0x504>
c0015ed4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0015ed7:	eb 02                	jmp    c0015edb <Vm::faultHandler(regs*)+0x504>
c0015ed9:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0015edb:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0015ede:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015ee3:	74 37                	je     c0015f1c <Vm::faultHandler(regs*)+0x545>
c0015ee5:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0015eeb:	76 2f                	jbe    c0015f1c <Vm::faultHandler(regs*)+0x545>
c0015eed:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015ef1:	50                   	push   eax
c0015ef2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015ef6:	50                   	push   eax
c0015ef7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015efb:	50                   	push   eax
c0015efc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015f00:	50                   	push   eax
c0015f01:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015f05:	50                   	push   eax
c0015f06:	6a 6f                	push   0x6f
c0015f08:	6a 6f                	push   0x6f
c0015f0a:	68 4a 0a 02 c0       	push   0xc0020a4a
c0015f0f:	e8 f2 46 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0015f14:	83 c4 20             	add    esp,0x20
c0015f17:	e9 86 01 00 00       	jmp    c00160a2 <Vm::faultHandler(regs*)+0x6cb>
c0015f1c:	0f b7 d7             	movzx  edx,di
c0015f1f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0015f22:	0f b7 c6             	movzx  eax,si
c0015f25:	81 e1 00 04 00 00    	and    ecx,0x400
c0015f2b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0015f2e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015f33:	74 1d                	je     c0015f52 <Vm::faultHandler(regs*)+0x57b>
c0015f35:	55                   	push   ebp
c0015f36:	55                   	push   ebp
c0015f37:	50                   	push   eax
c0015f38:	52                   	push   edx
c0015f39:	e8 48 fa ff ff       	call   c0015986 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0015f3e:	83 c4 10             	add    esp,0x10
c0015f41:	89 fa                	mov    edx,edi
c0015f43:	ef                   	out    dx,eax
c0015f44:	85 c9                	test   ecx,ecx
c0015f46:	74 05                	je     c0015f4d <Vm::faultHandler(regs*)+0x576>
c0015f48:	83 ee 04             	sub    esi,0x4
c0015f4b:	eb 21                	jmp    c0015f6e <Vm::faultHandler(regs*)+0x597>
c0015f4d:	83 c6 04             	add    esi,0x4
c0015f50:	eb 1c                	jmp    c0015f6e <Vm::faultHandler(regs*)+0x597>
c0015f52:	55                   	push   ebp
c0015f53:	55                   	push   ebp
c0015f54:	50                   	push   eax
c0015f55:	52                   	push   edx
c0015f56:	e8 19 fa ff ff       	call   c0015974 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0015f5b:	83 c4 10             	add    esp,0x10
c0015f5e:	89 fa                	mov    edx,edi
c0015f60:	66 ef                	out    dx,ax
c0015f62:	85 c9                	test   ecx,ecx
c0015f64:	74 05                	je     c0015f6b <Vm::faultHandler(regs*)+0x594>
c0015f66:	83 ee 02             	sub    esi,0x2
c0015f69:	eb 03                	jmp    c0015f6e <Vm::faultHandler(regs*)+0x597>
c0015f6b:	83 c6 02             	add    esi,0x2
c0015f6e:	81 e6 ff ff 00 00    	and    esi,0xffff
c0015f74:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0015f77:	e9 cb 00 00 00       	jmp    c0016047 <Vm::faultHandler(regs*)+0x670>
c0015f7c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0015f83:	83 ec 0c             	sub    esp,0xc
c0015f86:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015f8a:	50                   	push   eax
c0015f8b:	e8 89 f5 ff ff       	call   c0015519 <Vm::inbv(unsigned short)>
c0015f90:	0f b6 c0             	movzx  eax,al
c0015f93:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0015f96:	eb 3f                	jmp    c0015fd7 <Vm::faultHandler(regs*)+0x600>
c0015f98:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015f9d:	74 07                	je     c0015fa6 <Vm::faultHandler(regs*)+0x5cf>
c0015f9f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015fa3:	ed                   	in     eax,dx
c0015fa4:	eb 14                	jmp    c0015fba <Vm::faultHandler(regs*)+0x5e3>
c0015fa6:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0015fa9:	66 31 f6             	xor    si,si
c0015fac:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0015faf:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015fb3:	66 ed                	in     ax,dx
c0015fb5:	0f b7 c0             	movzx  eax,ax
c0015fb8:	09 f0                	or     eax,esi
c0015fba:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0015fbd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015fc1:	e9 84 00 00 00       	jmp    c001604a <Vm::faultHandler(regs*)+0x673>
c0015fc6:	52                   	push   edx
c0015fc7:	52                   	push   edx
c0015fc8:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0015fcc:	50                   	push   eax
c0015fcd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015fd1:	50                   	push   eax
c0015fd2:	e8 55 f5 ff ff       	call   c001552c <Vm::outbv(unsigned short, unsigned char)>
c0015fd7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015fdb:	eb 53                	jmp    c0016030 <Vm::faultHandler(regs*)+0x659>
c0015fdd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015fe0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015fe4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015fe9:	74 03                	je     c0015fee <Vm::faultHandler(regs*)+0x617>
c0015feb:	ef                   	out    dx,eax
c0015fec:	eb cf                	jmp    c0015fbd <Vm::faultHandler(regs*)+0x5e6>
c0015fee:	66 ef                	out    dx,ax
c0015ff0:	eb cb                	jmp    c0015fbd <Vm::faultHandler(regs*)+0x5e6>
c0015ff2:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0015ff9:	83 ec 0c             	sub    esp,0xc
c0015ffc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016000:	50                   	push   eax
c0016001:	e8 13 f5 ff ff       	call   c0015519 <Vm::inbv(unsigned short)>
c0016006:	0f b6 c0             	movzx  eax,al
c0016009:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001600c:	eb 1f                	jmp    c001602d <Vm::faultHandler(regs*)+0x656>
c001600e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016011:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0016016:	74 03                	je     c001601b <Vm::faultHandler(regs*)+0x644>
c0016018:	ed                   	in     eax,dx
c0016019:	eb 0d                	jmp    c0016028 <Vm::faultHandler(regs*)+0x651>
c001601b:	66 ed                	in     ax,dx
c001601d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016020:	0f b7 c0             	movzx  eax,ax
c0016023:	66 31 d2             	xor    dx,dx
c0016026:	09 d0                	or     eax,edx
c0016028:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001602b:	eb 1a                	jmp    c0016047 <Vm::faultHandler(regs*)+0x670>
c001602d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016030:	83 c4 10             	add    esp,0x10
c0016033:	eb 15                	jmp    c001604a <Vm::faultHandler(regs*)+0x673>
c0016035:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016038:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001603b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0016040:	74 03                	je     c0016045 <Vm::faultHandler(regs*)+0x66e>
c0016042:	ef                   	out    dx,eax
c0016043:	eb 02                	jmp    c0016047 <Vm::faultHandler(regs*)+0x670>
c0016045:	66 ef                	out    dx,ax
c0016047:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001604a:	b0 01                	mov    al,0x1
c001604c:	eb 56                	jmp    c00160a4 <Vm::faultHandler(regs*)+0x6cd>
c001604e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016052:	50                   	push   eax
c0016053:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016057:	50                   	push   eax
c0016058:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001605c:	50                   	push   eax
c001605d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016061:	50                   	push   eax
c0016062:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016066:	50                   	push   eax
c0016067:	52                   	push   edx
c0016068:	52                   	push   edx
c0016069:	68 77 0a 02 c0       	push   0xc0020a77
c001606e:	e8 93 45 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0016073:	83 c4 20             	add    esp,0x20
c0016076:	83 ec 0c             	sub    esp,0xc
c0016079:	6a 60                	push   0x60
c001607b:	e8 99 f4 ff ff       	call   c0015519 <Vm::inbv(unsigned short)>
c0016080:	83 c4 10             	add    esp,0x10
c0016083:	3c 1c                	cmp    al,0x1c
c0016085:	74 04                	je     c001608b <Vm::faultHandler(regs*)+0x6b4>
c0016087:	3c 5a                	cmp    al,0x5a
c0016089:	75 eb                	jne    c0016076 <Vm::faultHandler(regs*)+0x69f>
c001608b:	3c 1c                	cmp    al,0x1c
c001608d:	74 04                	je     c0016093 <Vm::faultHandler(regs*)+0x6bc>
c001608f:	3c 5a                	cmp    al,0x5a
c0016091:	75 0f                	jne    c00160a2 <Vm::faultHandler(regs*)+0x6cb>
c0016093:	83 ec 0c             	sub    esp,0xc
c0016096:	6a 60                	push   0x60
c0016098:	e8 7c f4 ff ff       	call   c0015519 <Vm::inbv(unsigned short)>
c001609d:	83 c4 10             	add    esp,0x10
c00160a0:	eb e9                	jmp    c001608b <Vm::faultHandler(regs*)+0x6b4>
c00160a2:	31 c0                	xor    eax,eax
c00160a4:	83 c4 1c             	add    esp,0x1c
c00160a7:	5b                   	pop    ebx
c00160a8:	5e                   	pop    esi
c00160a9:	5f                   	pop    edi
c00160aa:	5d                   	pop    ebp
c00160ab:	c3                   	ret    

c00160ac <noCopro(unsigned long)>:
c00160ac:	c3                   	ret    

c00160ad <nmiHandler(regs*, void*)>:
c00160ad:	83 ec 0c             	sub    esp,0xc
c00160b0:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00160b5:	83 ec 0c             	sub    esp,0xc
c00160b8:	50                   	push   eax
c00160b9:	e8 c6 0f ff ff       	call   c0007084 <Computer::handleNMI()>
c00160be:	83 c4 10             	add    esp,0x10
c00160c1:	90                   	nop
c00160c2:	83 c4 0c             	add    esp,0xc
c00160c5:	c3                   	ret    

c00160c6 <doubleFault(regs*, void*)>:
c00160c6:	55                   	push   ebp
c00160c7:	89 e5                	mov    ebp,esp
c00160c9:	83 ec 08             	sub    esp,0x8
c00160cc:	83 ec 0c             	sub    esp,0xc
c00160cf:	68 d4 0a 02 c0       	push   0xc0020ad4
c00160d4:	e8 ee a2 ff ff       	call   c00103c7 <KePanic(char const*)>
c00160d9:	83 c4 10             	add    esp,0x10
c00160dc:	90                   	nop
c00160dd:	c9                   	leave  
c00160de:	c3                   	ret    

c00160df <displayDebugInfo(regs*)>:
c00160df:	83 ec 1c             	sub    esp,0x1c
c00160e2:	0f 20 c0             	mov    eax,cr0
c00160e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00160e9:	0f 20 d0             	mov    eax,cr2
c00160ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00160f0:	0f 20 d8             	mov    eax,cr3
c00160f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00160f7:	0f 20 e0             	mov    eax,cr4
c00160fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00160fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016101:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016104:	83 ec 08             	sub    esp,0x8
c0016107:	50                   	push   eax
c0016108:	68 f0 0a 02 c0       	push   0xc0020af0
c001610d:	e8 f4 44 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0016112:	83 c4 10             	add    esp,0x10
c0016115:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016119:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001611c:	83 ec 08             	sub    esp,0x8
c001611f:	50                   	push   eax
c0016120:	68 e1 0a 02 c0       	push   0xc0020ae1
c0016125:	e8 dc 44 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001612a:	83 c4 10             	add    esp,0x10
c001612d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016131:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0016134:	83 ec 08             	sub    esp,0x8
c0016137:	50                   	push   eax
c0016138:	68 ec 0a 02 c0       	push   0xc0020aec
c001613d:	e8 c4 44 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0016142:	83 c4 10             	add    esp,0x10
c0016145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016149:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001614c:	83 ec 08             	sub    esp,0x8
c001614f:	50                   	push   eax
c0016150:	68 fb 0a 02 c0       	push   0xc0020afb
c0016155:	e8 ac 44 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001615a:	83 c4 10             	add    esp,0x10
c001615d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016161:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016164:	83 ec 08             	sub    esp,0x8
c0016167:	50                   	push   eax
c0016168:	68 06 0b 02 c0       	push   0xc0020b06
c001616d:	e8 94 44 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0016172:	83 c4 10             	add    esp,0x10
c0016175:	83 ec 08             	sub    esp,0x8
c0016178:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001617c:	68 11 0b 02 c0       	push   0xc0020b11
c0016181:	e8 80 44 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0016186:	83 c4 10             	add    esp,0x10
c0016189:	83 ec 08             	sub    esp,0x8
c001618c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016190:	68 1c 0b 02 c0       	push   0xc0020b1c
c0016195:	e8 6c 44 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001619a:	83 c4 10             	add    esp,0x10
c001619d:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00161a2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00161a8:	83 ec 0c             	sub    esp,0xc
c00161ab:	50                   	push   eax
c00161ac:	e8 ec 22 ff ff       	call   c000849d <setActiveTerminal(VgaText*)>
c00161b1:	83 c4 10             	add    esp,0x10
c00161b4:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00161b9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00161bf:	83 ec 08             	sub    esp,0x8
c00161c2:	68 27 0b 02 c0       	push   0xc0020b27
c00161c7:	50                   	push   eax
c00161c8:	e8 0f 26 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00161cd:	83 c4 10             	add    esp,0x10
c00161d0:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00161d5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00161db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00161df:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00161e2:	83 ec 08             	sub    esp,0x8
c00161e5:	52                   	push   edx
c00161e6:	50                   	push   eax
c00161e7:	e8 aa 25 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c00161ec:	83 c4 10             	add    esp,0x10
c00161ef:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00161f4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00161fa:	83 ec 08             	sub    esp,0x8
c00161fd:	68 35 0b 02 c0       	push   0xc0020b35
c0016202:	50                   	push   eax
c0016203:	e8 d4 25 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016208:	83 c4 10             	add    esp,0x10
c001620b:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016210:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016216:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001621b:	8b 12                	mov    edx,DWORD PTR [edx]
c001621d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016220:	83 c2 0c             	add    edx,0xc
c0016223:	83 ec 08             	sub    esp,0x8
c0016226:	52                   	push   edx
c0016227:	50                   	push   eax
c0016228:	e8 af 25 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c001622d:	83 c4 10             	add    esp,0x10
c0016230:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016235:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001623b:	83 ec 08             	sub    esp,0x8
c001623e:	68 3e 0b 02 c0       	push   0xc0020b3e
c0016243:	50                   	push   eax
c0016244:	e8 93 25 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016249:	83 c4 10             	add    esp,0x10
c001624c:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016251:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016257:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001625b:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001625e:	83 ec 08             	sub    esp,0x8
c0016261:	52                   	push   edx
c0016262:	50                   	push   eax
c0016263:	e8 2e 25 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c0016268:	83 c4 10             	add    esp,0x10
c001626b:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016270:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016276:	83 ec 08             	sub    esp,0x8
c0016279:	68 46 0b 02 c0       	push   0xc0020b46
c001627e:	50                   	push   eax
c001627f:	e8 58 25 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016284:	83 c4 10             	add    esp,0x10
c0016287:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001628c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016292:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016296:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016299:	83 ec 08             	sub    esp,0x8
c001629c:	52                   	push   edx
c001629d:	50                   	push   eax
c001629e:	e8 f3 24 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c00162a3:	83 c4 10             	add    esp,0x10
c00162a6:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00162ab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00162b1:	83 ec 08             	sub    esp,0x8
c00162b4:	68 4e 0b 02 c0       	push   0xc0020b4e
c00162b9:	50                   	push   eax
c00162ba:	e8 1d 25 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00162bf:	83 c4 10             	add    esp,0x10
c00162c2:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00162c7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00162cd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00162d1:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00162d4:	83 ec 08             	sub    esp,0x8
c00162d7:	52                   	push   edx
c00162d8:	50                   	push   eax
c00162d9:	e8 b8 24 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c00162de:	83 c4 10             	add    esp,0x10
c00162e1:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00162e6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00162ec:	83 ec 08             	sub    esp,0x8
c00162ef:	68 56 0b 02 c0       	push   0xc0020b56
c00162f4:	50                   	push   eax
c00162f5:	e8 e2 24 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00162fa:	83 c4 10             	add    esp,0x10
c00162fd:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016302:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016308:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001630c:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001630f:	83 ec 08             	sub    esp,0x8
c0016312:	52                   	push   edx
c0016313:	50                   	push   eax
c0016314:	e8 7d 24 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c0016319:	83 c4 10             	add    esp,0x10
c001631c:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016321:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016327:	83 ec 08             	sub    esp,0x8
c001632a:	68 5e 0b 02 c0       	push   0xc0020b5e
c001632f:	50                   	push   eax
c0016330:	e8 a7 24 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016335:	83 c4 10             	add    esp,0x10
c0016338:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001633d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016343:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016347:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001634a:	83 ec 08             	sub    esp,0x8
c001634d:	52                   	push   edx
c001634e:	50                   	push   eax
c001634f:	e8 42 24 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c0016354:	83 c4 10             	add    esp,0x10
c0016357:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001635c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016362:	83 ec 08             	sub    esp,0x8
c0016365:	68 66 0b 02 c0       	push   0xc0020b66
c001636a:	50                   	push   eax
c001636b:	e8 6c 24 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016370:	83 c4 10             	add    esp,0x10
c0016373:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016378:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001637e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016382:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016385:	83 ec 08             	sub    esp,0x8
c0016388:	52                   	push   edx
c0016389:	50                   	push   eax
c001638a:	e8 07 24 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c001638f:	83 c4 10             	add    esp,0x10
c0016392:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016397:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001639d:	83 ec 08             	sub    esp,0x8
c00163a0:	68 6e 0b 02 c0       	push   0xc0020b6e
c00163a5:	50                   	push   eax
c00163a6:	e8 31 24 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00163ab:	83 c4 10             	add    esp,0x10
c00163ae:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00163b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00163b9:	83 ec 08             	sub    esp,0x8
c00163bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00163c0:	50                   	push   eax
c00163c1:	e8 d0 23 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c00163c6:	83 c4 10             	add    esp,0x10
c00163c9:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00163ce:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00163d4:	83 ec 08             	sub    esp,0x8
c00163d7:	68 77 0b 02 c0       	push   0xc0020b77
c00163dc:	50                   	push   eax
c00163dd:	e8 fa 23 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00163e2:	83 c4 10             	add    esp,0x10
c00163e5:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00163ea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00163f0:	83 ec 08             	sub    esp,0x8
c00163f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00163f7:	50                   	push   eax
c00163f8:	e8 99 23 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c00163fd:	83 c4 10             	add    esp,0x10
c0016400:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016405:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001640b:	83 ec 08             	sub    esp,0x8
c001640e:	68 7f 0b 02 c0       	push   0xc0020b7f
c0016413:	50                   	push   eax
c0016414:	e8 c3 23 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016419:	83 c4 10             	add    esp,0x10
c001641c:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016421:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016427:	83 ec 08             	sub    esp,0x8
c001642a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001642e:	50                   	push   eax
c001642f:	e8 62 23 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c0016434:	83 c4 10             	add    esp,0x10
c0016437:	fa                   	cli    
c0016438:	f4                   	hlt    
c0016439:	eb fe                	jmp    c0016439 <displayDebugInfo(regs*)+0x35a>

c001643b <HalSystemIdle()>:
c001643b:	56                   	push   esi
c001643c:	53                   	push   ebx
c001643d:	83 ec 14             	sub    esp,0x14
c0016440:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016445:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001644b:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016451:	83 e0 04             	and    eax,0x4
c0016454:	84 c0                	test   al,al
c0016456:	0f 95 c0             	setne  al
c0016459:	84 c0                	test   al,al
c001645b:	74 4c                	je     c00164a9 <HalSystemIdle()+0x6e>
c001645d:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016462:	83 ec 08             	sub    esp,0x8
c0016465:	68 e1 00 00 00       	push   0xe1
c001646a:	50                   	push   eax
c001646b:	e8 2c 0a ff ff       	call   c0006e9c <Computer::rdmsr(unsigned int)>
c0016470:	83 c4 10             	add    esp,0x10
c0016473:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016477:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001647b:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016480:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016484:	83 e2 02             	and    edx,0x2
c0016487:	89 d3                	mov    ebx,edx
c0016489:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001648d:	83 e2 00             	and    edx,0x0
c0016490:	89 d6                	mov    esi,edx
c0016492:	56                   	push   esi
c0016493:	53                   	push   ebx
c0016494:	68 e1 00 00 00       	push   0xe1
c0016499:	50                   	push   eax
c001649a:	e8 29 0a ff ff       	call   c0006ec8 <Computer::wrmsr(unsigned int, unsigned long long)>
c001649f:	83 c4 10             	add    esp,0x10
c00164a2:	e8 ed 9c fe ff       	call   c0000194 <doTPAUSE>
c00164a7:	eb 01                	jmp    c00164aa <HalSystemIdle()+0x6f>
c00164a9:	f4                   	hlt    
c00164aa:	90                   	nop
c00164ab:	83 c4 14             	add    esp,0x14
c00164ae:	5b                   	pop    ebx
c00164af:	5e                   	pop    esi
c00164b0:	c3                   	ret    

c00164b1 <displayProgramFault(char const*)>:
c00164b1:	83 ec 0c             	sub    esp,0xc
c00164b4:	83 ec 0c             	sub    esp,0xc
c00164b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164bb:	e8 46 41 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c00164c0:	83 c4 10             	add    esp,0x10
c00164c3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00164c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00164ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00164cd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00164d3:	85 c0                	test   eax,eax
c00164d5:	74 21                	je     c00164f8 <displayProgramFault(char const*)+0x47>
c00164d7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00164dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00164de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00164e1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00164e7:	6a 04                	push   0x4
c00164e9:	6a 0f                	push   0xf
c00164eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00164ef:	50                   	push   eax
c00164f0:	e8 59 23 ff ff       	call   c000884e <VgaText::puts(char const*, VgaColour, VgaColour)>
c00164f5:	83 c4 10             	add    esp,0x10
c00164f8:	90                   	nop
c00164f9:	83 c4 0c             	add    esp,0xc
c00164fc:	c3                   	ret    

c00164fd <gpFault(regs*, void*)>:
c00164fd:	83 ec 1c             	sub    esp,0x1c
c0016500:	c7 05 10 72 02 c0 d7 59 01 c0 	mov    DWORD PTR ds:0xc0027210,0xc00159d7
c001650a:	a1 10 72 02 c0       	mov    eax,ds:0xc0027210
c001650f:	85 c0                	test   eax,eax
c0016511:	74 1c                	je     c001652f <gpFault(regs*, void*)+0x32>
c0016513:	a1 10 72 02 c0       	mov    eax,ds:0xc0027210
c0016518:	83 ec 0c             	sub    esp,0xc
c001651b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001651f:	ff d0                	call   eax
c0016521:	83 c4 10             	add    esp,0x10
c0016524:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016528:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001652d:	75 2e                	jne    c001655d <gpFault(regs*, void*)+0x60>
c001652f:	83 ec 0c             	sub    esp,0xc
c0016532:	68 87 0b 02 c0       	push   0xc0020b87
c0016537:	e8 75 ff ff ff       	call   c00164b1 <displayProgramFault(char const*)>
c001653c:	83 c4 10             	add    esp,0x10
c001653f:	83 ec 0c             	sub    esp,0xc
c0016542:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016546:	e8 94 fb ff ff       	call   c00160df <displayDebugInfo(regs*)>
c001654b:	83 c4 10             	add    esp,0x10
c001654e:	83 ec 0c             	sub    esp,0xc
c0016551:	6a 00                	push   0x0
c0016553:	e8 74 ee ff ff       	call   c00153cc <Thr::terminateFromIRQ(int)>
c0016558:	83 c4 10             	add    esp,0x10
c001655b:	eb 01                	jmp    c001655e <gpFault(regs*, void*)+0x61>
c001655d:	90                   	nop
c001655e:	83 c4 1c             	add    esp,0x1c
c0016561:	c3                   	ret    

c0016562 <pgFault(regs*, void*)>:
c0016562:	83 ec 1c             	sub    esp,0x1c
c0016565:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016569:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001656c:	0f 20 d0             	mov    eax,cr2
c001656f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016577:	83 ec 04             	sub    esp,0x4
c001657a:	52                   	push   edx
c001657b:	50                   	push   eax
c001657c:	68 64 0c 02 c0       	push   0xc0020c64
c0016581:	e8 80 40 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0016586:	83 c4 10             	add    esp,0x10
c0016589:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001658e:	8b 00                	mov    eax,DWORD PTR [eax]
c0016590:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016593:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016599:	0f 20 d2             	mov    edx,cr2
c001659c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00165a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165a4:	83 ec 08             	sub    esp,0x8
c00165a7:	52                   	push   edx
c00165a8:	50                   	push   eax
c00165a9:	e8 4e 3c ff ff       	call   c000a1fc <VAS::tryLoadBackOffDisk(unsigned long)>
c00165ae:	83 c4 10             	add    esp,0x10
c00165b1:	84 c0                	test   al,al
c00165b3:	75 2e                	jne    c00165e3 <pgFault(regs*, void*)+0x81>
c00165b5:	83 ec 0c             	sub    esp,0xc
c00165b8:	68 a0 0b 02 c0       	push   0xc0020ba0
c00165bd:	e8 ef fe ff ff       	call   c00164b1 <displayProgramFault(char const*)>
c00165c2:	83 c4 10             	add    esp,0x10
c00165c5:	83 ec 0c             	sub    esp,0xc
c00165c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165cc:	e8 0e fb ff ff       	call   c00160df <displayDebugInfo(regs*)>
c00165d1:	83 c4 10             	add    esp,0x10
c00165d4:	83 ec 0c             	sub    esp,0xc
c00165d7:	6a 00                	push   0x0
c00165d9:	e8 ee ed ff ff       	call   c00153cc <Thr::terminateFromIRQ(int)>
c00165de:	83 c4 10             	add    esp,0x10
c00165e1:	eb 01                	jmp    c00165e4 <pgFault(regs*, void*)+0x82>
c00165e3:	90                   	nop
c00165e4:	83 c4 1c             	add    esp,0x1c
c00165e7:	c3                   	ret    

c00165e8 <otherISRHandler(regs*, void*)>:
c00165e8:	83 ec 0c             	sub    esp,0xc
c00165eb:	83 ec 0c             	sub    esp,0xc
c00165ee:	68 8c 0c 02 c0       	push   0xc0020c8c
c00165f3:	e8 b9 fe ff ff       	call   c00164b1 <displayProgramFault(char const*)>
c00165f8:	83 c4 10             	add    esp,0x10
c00165fb:	83 ec 0c             	sub    esp,0xc
c00165fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016602:	e8 d8 fa ff ff       	call   c00160df <displayDebugInfo(regs*)>
c0016607:	83 c4 10             	add    esp,0x10
c001660a:	83 ec 0c             	sub    esp,0xc
c001660d:	6a 00                	push   0x0
c001660f:	e8 b8 ed ff ff       	call   c00153cc <Thr::terminateFromIRQ(int)>
c0016614:	83 c4 10             	add    esp,0x10
c0016617:	90                   	nop
c0016618:	83 c4 0c             	add    esp,0xc
c001661b:	c3                   	ret    

c001661c <opcodeFault(regs*, void*)>:
c001661c:	55                   	push   ebp
c001661d:	89 e5                	mov    ebp,esp
c001661f:	83 ec 08             	sub    esp,0x8
c0016622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016625:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016628:	83 ec 08             	sub    esp,0x8
c001662b:	50                   	push   eax
c001662c:	68 ab 0b 02 c0       	push   0xc0020bab
c0016631:	e8 d0 3f ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0016636:	83 c4 10             	add    esp,0x10
c0016639:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001663e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016644:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001664a:	84 c0                	test   al,al
c001664c:	74 21                	je     c001666f <opcodeFault(regs*, void*)+0x53>
c001664e:	83 ec 0c             	sub    esp,0xc
c0016651:	68 b4 0c 02 c0       	push   0xc0020cb4
c0016656:	e8 ab 3f ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001665b:	83 c4 10             	add    esp,0x10
c001665e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016661:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016664:	8d 50 19             	lea    edx,[eax+0x19]
c0016667:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001666a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001666d:	eb 2b                	jmp    c001669a <opcodeFault(regs*, void*)+0x7e>
c001666f:	83 ec 0c             	sub    esp,0xc
c0016672:	68 b9 0b 02 c0       	push   0xc0020bb9
c0016677:	e8 35 fe ff ff       	call   c00164b1 <displayProgramFault(char const*)>
c001667c:	83 c4 10             	add    esp,0x10
c001667f:	83 ec 0c             	sub    esp,0xc
c0016682:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016685:	e8 55 fa ff ff       	call   c00160df <displayDebugInfo(regs*)>
c001668a:	83 c4 10             	add    esp,0x10
c001668d:	83 ec 0c             	sub    esp,0xc
c0016690:	6a 00                	push   0x0
c0016692:	e8 35 ed ff ff       	call   c00153cc <Thr::terminateFromIRQ(int)>
c0016697:	83 c4 10             	add    esp,0x10
c001669a:	c9                   	leave  
c001669b:	c3                   	ret    

c001669c <i386SaveCoprocessor(void*)>:
c001669c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166a0:	83 c0 3f             	add    eax,0x3f
c00166a3:	83 e0 c0             	and    eax,0xffffffc0
c00166a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00166aa:	ff 25 0c 72 02 c0    	jmp    DWORD PTR ds:0xc002720c

c00166b0 <i386LoadCoprocessor(void*)>:
c00166b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166b4:	83 c0 3f             	add    eax,0x3f
c00166b7:	83 e0 c0             	and    eax,0xffffffc0
c00166ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00166be:	ff 25 08 72 02 c0    	jmp    DWORD PTR ds:0xc0027208

c00166c4 <x87EmulHandler(regs*, void*)>:
c00166c4:	53                   	push   ebx
c00166c5:	83 ec 08             	sub    esp,0x8
c00166c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166cd:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00166d1:	74 10                	je     c00166e3 <x87EmulHandler(regs*, void*)+0x1f>
c00166d3:	83 ec 0c             	sub    esp,0xc
c00166d6:	68 c6 0b 02 c0       	push   0xc0020bc6
c00166db:	e8 e7 9c ff ff       	call   c00103c7 <KePanic(char const*)>
c00166e0:	83 c4 10             	add    esp,0x10
c00166e3:	0f 20 c0             	mov    eax,cr0
c00166e6:	a8 08                	test   al,0x8
c00166e8:	74 59                	je     c0016743 <x87EmulHandler(regs*, void*)+0x7f>
c00166ea:	0f 06                	clts   
c00166ec:	a1 04 72 02 c0       	mov    eax,ds:0xc0027204
c00166f1:	85 c0                	test   eax,eax
c00166f3:	74 0e                	je     c0016703 <x87EmulHandler(regs*, void*)+0x3f>
c00166f5:	83 ec 0c             	sub    esp,0xc
c00166f8:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00166fb:	e8 9c ff ff ff       	call   c001669c <i386SaveCoprocessor(void*)>
c0016700:	83 c4 10             	add    esp,0x10
c0016703:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016709:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001670d:	75 12                	jne    c0016721 <x87EmulHandler(regs*, void*)+0x5d>
c001670f:	83 ec 0c             	sub    esp,0xc
c0016712:	68 40 02 00 00       	push   0x240
c0016717:	e8 49 11 ff ff       	call   c0007865 <malloc>
c001671c:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001671f:	eb 10                	jmp    c0016731 <x87EmulHandler(regs*, void*)+0x6d>
c0016721:	83 ec 0c             	sub    esp,0xc
c0016724:	a1 04 72 02 c0       	mov    eax,ds:0xc0027204
c0016729:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001672c:	e8 7f ff ff ff       	call   c00166b0 <i386LoadCoprocessor(void*)>
c0016731:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016736:	83 c4 10             	add    esp,0x10
c0016739:	a3 04 72 02 c0       	mov    ds:0xc0027204,eax
c001673e:	83 c4 08             	add    esp,0x8
c0016741:	5b                   	pop    ebx
c0016742:	c3                   	ret    
c0016743:	83 ec 0c             	sub    esp,0xc
c0016746:	68 da 0b 02 c0       	push   0xc0020bda
c001674b:	e8 b6 3e ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0016750:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016758:	83 c4 18             	add    esp,0x18
c001675b:	5b                   	pop    ebx
c001675c:	e9 6b ec ff ff       	jmp    c00153cc <Thr::terminateFromIRQ(int)>

c0016761 <HalInitialiseCoprocessor()>:
c0016761:	83 ec 10             	sub    esp,0x10
c0016764:	c7 05 04 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027204,0x0
c001676e:	6a 00                	push   0x0
c0016770:	68 c4 66 01 c0       	push   0xc00166c4
c0016775:	6a 07                	push   0x7
c0016777:	e8 fc 57 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001677c:	e8 4f 6e 00 00       	call   c001d5d0 <avxDetect>
c0016781:	83 c4 10             	add    esp,0x10
c0016784:	85 c0                	test   eax,eax
c0016786:	74 1c                	je     c00167a4 <HalInitialiseCoprocessor()+0x43>
c0016788:	c7 05 0c 72 02 c0 fa d5 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001d5fa
c0016792:	c7 05 08 72 02 c0 0b d6 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001d60b
c001679c:	83 c4 0c             	add    esp,0xc
c001679f:	e9 78 6e 00 00       	jmp    c001d61c <avxInit>
c00167a4:	e8 b7 71 00 00       	call   c001d960 <absolutelyNoChanceInHell>
c00167a9:	85 c0                	test   eax,eax
c00167ab:	74 1c                	je     c00167c9 <HalInitialiseCoprocessor()+0x68>
c00167ad:	c7 05 0c 72 02 c0 78 d9 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001d978
c00167b7:	c7 05 08 72 02 c0 80 d9 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001d980
c00167c1:	83 c4 0c             	add    esp,0xc
c00167c4:	e9 bf 71 00 00       	jmp    c001d988 <sseInit>
c00167c9:	e8 d8 71 00 00       	call   c001d9a6 <x87Detect>
c00167ce:	85 c0                	test   eax,eax
c00167d0:	74 1c                	je     c00167ee <HalInitialiseCoprocessor()+0x8d>
c00167d2:	c7 05 0c 72 02 c0 c1 d9 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001d9c1
c00167dc:	c7 05 08 72 02 c0 c8 d9 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001d9c8
c00167e6:	83 c4 0c             	add    esp,0xc
c00167e9:	e9 e1 71 00 00       	jmp    c001d9cf <x87Init>
c00167ee:	c7 05 0c 72 02 c0 ac 60 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc00160ac
c00167f8:	c7 05 08 72 02 c0 ac 60 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc00160ac
c0016802:	0f 20 c0             	mov    eax,cr0
c0016805:	83 c8 04             	or     eax,0x4
c0016808:	0f 22 c0             	mov    cr0,eax
c001680b:	83 c4 0c             	add    esp,0xc
c001680e:	c3                   	ret    

c001680f <HalPanic(char const*)>:
c001680f:	53                   	push   ebx
c0016810:	83 ec 10             	sub    esp,0x10
c0016813:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016817:	fa                   	cli    
c0016818:	53                   	push   ebx
c0016819:	68 f0 0b 02 c0       	push   0xc0020bf0
c001681e:	e8 e3 3d ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0016823:	83 c4 0c             	add    esp,0xc
c0016826:	6a 01                	push   0x1
c0016828:	6a 0f                	push   0xf
c001682a:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016830:	e8 c1 1a ff ff       	call   c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016835:	58                   	pop    eax
c0016836:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001683c:	e8 a7 1c ff ff       	call   c00084e8 <VgaText::clearScreen()>
c0016841:	5a                   	pop    edx
c0016842:	59                   	pop    ecx
c0016843:	68 24 f4 01 c0       	push   0xc001f424
c0016848:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001684e:	e8 db 1a ff ff       	call   c000832e <VgaText::setTitle(char*)>
c0016853:	83 c4 0c             	add    esp,0xc
c0016856:	6a 01                	push   0x1
c0016858:	6a 0f                	push   0xf
c001685a:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016860:	e8 91 1a ff ff       	call   c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016865:	58                   	pop    eax
c0016866:	5a                   	pop    edx
c0016867:	68 09 0c 02 c0       	push   0xc0020c09
c001686c:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016872:	e8 65 1f ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016877:	83 c4 0c             	add    esp,0xc
c001687a:	6a 0f                	push   0xf
c001687c:	6a 01                	push   0x1
c001687e:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016884:	e8 6d 1a ff ff       	call   c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016889:	59                   	pop    ecx
c001688a:	58                   	pop    eax
c001688b:	68 12 0c 02 c0       	push   0xc0020c12
c0016890:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016896:	e8 41 1f ff ff       	call   c00087dc <VgaText::puts(char const*)>
c001689b:	83 c4 0c             	add    esp,0xc
c001689e:	6a 01                	push   0x1
c00168a0:	6a 0f                	push   0xf
c00168a2:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00168a8:	e8 49 1a ff ff       	call   c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00168ad:	58                   	pop    eax
c00168ae:	5a                   	pop    edx
c00168af:	68 56 0c 02 c0       	push   0xc0020c56
c00168b4:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00168ba:	e8 1d 1f ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00168bf:	59                   	pop    ecx
c00168c0:	58                   	pop    eax
c00168c1:	68 1f 0c 02 c0       	push   0xc0020c1f
c00168c6:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00168cc:	e8 0b 1f ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00168d1:	58                   	pop    eax
c00168d2:	5a                   	pop    edx
c00168d3:	68 59 0c 02 c0       	push   0xc0020c59
c00168d8:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00168de:	e8 f9 1e ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00168e3:	59                   	pop    ecx
c00168e4:	58                   	pop    eax
c00168e5:	53                   	push   ebx
c00168e6:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00168ec:	e8 eb 1e ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00168f1:	58                   	pop    eax
c00168f2:	5a                   	pop    edx
c00168f3:	68 56 0c 02 c0       	push   0xc0020c56
c00168f8:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00168fe:	e8 d9 1e ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016903:	83 c4 10             	add    esp,0x10
c0016906:	eb fe                	jmp    c0016906 <HalPanic(char const*)+0xf7>

c0016908 <HalQueryPerformanceCounter()>:
c0016908:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001690d:	31 d2                	xor    edx,edx
c001690f:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016915:	31 c0                	xor    eax,eax
c0016917:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001691e:	74 02                	je     c0016922 <HalQueryPerformanceCounter()+0x1a>
c0016920:	0f 31                	rdtsc  
c0016922:	c3                   	ret    

c0016923 <HalInitialise()>:
c0016923:	53                   	push   ebx
c0016924:	83 ec 08             	sub    esp,0x8
c0016927:	e8 7f 58 ff ff       	call   c000c1ab <setupINTS()>
c001692c:	80 3d 80 67 02 c0 00 	cmp    BYTE PTR ds:0xc0026780,0x0
c0016933:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016938:	75 07                	jne    c0016941 <HalInitialise()+0x1e>
c001693a:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016941:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016948:	c6 05 00 72 02 c0 00 	mov    BYTE PTR ds:0xc0027200,0x0
c001694f:	e8 a8 02 00 00       	call   c0016bfc <picOpen()>
c0016954:	80 3d 00 72 02 c0 00 	cmp    BYTE PTR ds:0xc0027200,0x0
c001695b:	74 0a                	je     c0016967 <HalInitialise()+0x44>
c001695d:	e8 e2 01 00 00       	call   c0016b44 <picDisable()>
c0016962:	e8 e3 65 00 00       	call   c001cf4a <apicOpen()>
c0016967:	bb 0f 00 00 00       	mov    ebx,0xf
c001696c:	50                   	push   eax
c001696d:	6a 00                	push   0x0
c001696f:	68 e8 65 01 c0       	push   0xc00165e8
c0016974:	6a 00                	push   0x0
c0016976:	e8 fd 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001697b:	83 c4 0c             	add    esp,0xc
c001697e:	6a 00                	push   0x0
c0016980:	68 e8 65 01 c0       	push   0xc00165e8
c0016985:	6a 01                	push   0x1
c0016987:	e8 ec 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001698c:	83 c4 0c             	add    esp,0xc
c001698f:	6a 00                	push   0x0
c0016991:	68 ad 60 01 c0       	push   0xc00160ad
c0016996:	6a 02                	push   0x2
c0016998:	e8 db 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001699d:	83 c4 0c             	add    esp,0xc
c00169a0:	6a 00                	push   0x0
c00169a2:	68 e8 65 01 c0       	push   0xc00165e8
c00169a7:	6a 03                	push   0x3
c00169a9:	e8 ca 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00169ae:	83 c4 0c             	add    esp,0xc
c00169b1:	6a 00                	push   0x0
c00169b3:	68 e8 65 01 c0       	push   0xc00165e8
c00169b8:	6a 04                	push   0x4
c00169ba:	e8 b9 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00169bf:	83 c4 0c             	add    esp,0xc
c00169c2:	6a 00                	push   0x0
c00169c4:	68 e8 65 01 c0       	push   0xc00165e8
c00169c9:	6a 05                	push   0x5
c00169cb:	e8 a8 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00169d0:	83 c4 0c             	add    esp,0xc
c00169d3:	6a 00                	push   0x0
c00169d5:	68 1c 66 01 c0       	push   0xc001661c
c00169da:	6a 06                	push   0x6
c00169dc:	e8 97 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00169e1:	83 c4 0c             	add    esp,0xc
c00169e4:	6a 00                	push   0x0
c00169e6:	68 c6 60 01 c0       	push   0xc00160c6
c00169eb:	6a 08                	push   0x8
c00169ed:	e8 86 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00169f2:	83 c4 0c             	add    esp,0xc
c00169f5:	6a 00                	push   0x0
c00169f7:	68 e8 65 01 c0       	push   0xc00165e8
c00169fc:	6a 09                	push   0x9
c00169fe:	e8 75 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016a03:	83 c4 0c             	add    esp,0xc
c0016a06:	6a 00                	push   0x0
c0016a08:	68 e8 65 01 c0       	push   0xc00165e8
c0016a0d:	6a 0a                	push   0xa
c0016a0f:	e8 64 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016a14:	83 c4 0c             	add    esp,0xc
c0016a17:	6a 00                	push   0x0
c0016a19:	68 e8 65 01 c0       	push   0xc00165e8
c0016a1e:	6a 0b                	push   0xb
c0016a20:	e8 53 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016a25:	83 c4 0c             	add    esp,0xc
c0016a28:	6a 00                	push   0x0
c0016a2a:	68 fd 64 01 c0       	push   0xc00164fd
c0016a2f:	6a 0d                	push   0xd
c0016a31:	e8 42 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016a36:	83 c4 0c             	add    esp,0xc
c0016a39:	6a 00                	push   0x0
c0016a3b:	68 62 65 01 c0       	push   0xc0016562
c0016a40:	6a 0e                	push   0xe
c0016a42:	e8 31 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016a47:	83 c4 10             	add    esp,0x10
c0016a4a:	50                   	push   eax
c0016a4b:	6a 00                	push   0x0
c0016a4d:	68 e8 65 01 c0       	push   0xc00165e8
c0016a52:	53                   	push   ebx
c0016a53:	43                   	inc    ebx
c0016a54:	e8 1f 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016a59:	83 c4 10             	add    esp,0x10
c0016a5c:	83 fb 1e             	cmp    ebx,0x1e
c0016a5f:	75 e9                	jne    c0016a4a <HalInitialise()+0x127>
c0016a61:	50                   	push   eax
c0016a62:	6a 00                	push   0x0
c0016a64:	68 b2 15 01 c0       	push   0xc00115b2
c0016a69:	6a 60                	push   0x60
c0016a6b:	e8 08 55 ff ff       	call   c000bf78 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016a70:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016a75:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0016a7f:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0016a86:	e8 da 0d ff ff       	call   c0007865 <malloc>
c0016a8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a8e:	89 c3                	mov    ebx,eax
c0016a90:	e8 2f 09 00 00       	call   c00173c4 <RTC::RTC()>
c0016a95:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0016a9f:	5a                   	pop    edx
c0016aa0:	59                   	pop    ecx
c0016aa1:	53                   	push   ebx
c0016aa2:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016aa8:	e8 97 4f ff ff       	call   c000ba44 <Device::addChild(Device*)>
c0016aad:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016aaf:	6a 00                	push   0x0
c0016ab1:	6a 00                	push   0x0
c0016ab3:	6a 00                	push   0x0
c0016ab5:	53                   	push   ebx
c0016ab6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ab9:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016abe:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0016ac4:	83 c4 28             	add    esp,0x28
c0016ac7:	5b                   	pop    ebx
c0016ac8:	c3                   	ret    

c0016ac9 <HalMakeBeep(int)>:
c0016ac9:	53                   	push   ebx
c0016aca:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016ace:	85 db                	test   ebx,ebx
c0016ad0:	75 07                	jne    c0016ad9 <HalMakeBeep(int)+0x10>
c0016ad2:	e4 61                	in     al,0x61
c0016ad4:	83 e0 fc             	and    eax,0xfffffffc
c0016ad7:	eb 26                	jmp    c0016aff <HalMakeBeep(int)+0x36>
c0016ad9:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0016ade:	99                   	cdq    
c0016adf:	f7 fb                	idiv   ebx
c0016ae1:	89 c1                	mov    ecx,eax
c0016ae3:	b0 b6                	mov    al,0xb6
c0016ae5:	e6 43                	out    0x43,al
c0016ae7:	88 c8                	mov    al,cl
c0016ae9:	e6 42                	out    0x42,al
c0016aeb:	89 c8                	mov    eax,ecx
c0016aed:	c1 e8 08             	shr    eax,0x8
c0016af0:	e6 42                	out    0x42,al
c0016af2:	e4 61                	in     al,0x61
c0016af4:	88 c2                	mov    dl,al
c0016af6:	83 ca 03             	or     edx,0x3
c0016af9:	38 c2                	cmp    dl,al
c0016afb:	74 04                	je     c0016b01 <HalMakeBeep(int)+0x38>
c0016afd:	88 d0                	mov    al,dl
c0016aff:	e6 61                	out    0x61,al
c0016b01:	5b                   	pop    ebx
c0016b02:	c3                   	ret    

c0016b03 <HalGetRand()>:
c0016b03:	31 c0                	xor    eax,eax
c0016b05:	c3                   	ret    

c0016b06 <HalEndOfInterrupt(int)>:
c0016b06:	80 3d 00 72 02 c0 00 	cmp    BYTE PTR ds:0xc0027200,0x0
c0016b0d:	74 23                	je     c0016b32 <HalEndOfInterrupt(int)+0x2c>
c0016b0f:	83 ec 14             	sub    esp,0x14
c0016b12:	6a 1b                	push   0x1b
c0016b14:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016b1a:	e8 7d 03 ff ff       	call   c0006e9c <Computer::rdmsr(unsigned int)>
c0016b1f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016b24:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0016b2e:	83 c4 1c             	add    esp,0x1c
c0016b31:	c3                   	ret    
c0016b32:	e9 55 02 00 00       	jmp    c0016d8c <picEOI(int)>

c0016b37 <HalRestart()>:
c0016b37:	c3                   	ret    

c0016b38 <HalShutdown()>:
c0016b38:	c3                   	ret    

c0016b39 <HalSleep()>:
c0016b39:	c3                   	ret    
c0016b3a:	66 90                	xchg   ax,ax

c0016b3c <picIoWait()>:
c0016b3c:	eb 00                	jmp    c0016b3e <picIoWait()+0x2>
c0016b3e:	eb 00                	jmp    c0016b40 <picIoWait()+0x4>
c0016b40:	90                   	nop
c0016b41:	c3                   	ret    
c0016b42:	66 90                	xchg   ax,ax

c0016b44 <picDisable()>:
c0016b44:	83 ec 10             	sub    esp,0x10
c0016b47:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0016b4e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0016b53:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016b57:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0016b5c:	ee                   	out    dx,al
c0016b5d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0016b64:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0016b69:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016b6d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0016b72:	ee                   	out    dx,al
c0016b73:	90                   	nop
c0016b74:	83 c4 10             	add    esp,0x10
c0016b77:	c3                   	ret    

c0016b78 <picGetIRQReg(int)>:
c0016b78:	83 ec 10             	sub    esp,0x10
c0016b7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016b7f:	25 ff 00 00 00       	and    eax,0xff
c0016b84:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0016b8b:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0016b8f:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0016b93:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0016b98:	ee                   	out    dx,al
c0016b99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016b9d:	25 ff 00 00 00       	and    eax,0xff
c0016ba2:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0016ba9:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0016bad:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0016bb1:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0016bb6:	ee                   	out    dx,al
c0016bb7:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0016bbe:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0016bc3:	89 c2                	mov    edx,eax
c0016bc5:	ec                   	in     al,dx
c0016bc6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016bca:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016bce:	25 ff 00 00 00       	and    eax,0xff
c0016bd3:	c1 e0 08             	shl    eax,0x8
c0016bd6:	89 c1                	mov    ecx,eax
c0016bd8:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0016bdf:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0016be4:	89 c2                	mov    edx,eax
c0016be6:	ec                   	in     al,dx
c0016be7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0016beb:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016bef:	25 ff 00 00 00       	and    eax,0xff
c0016bf4:	09 c8                	or     eax,ecx
c0016bf6:	83 c4 10             	add    esp,0x10
c0016bf9:	c3                   	ret    
c0016bfa:	66 90                	xchg   ax,ax

c0016bfc <picOpen()>:
c0016bfc:	83 ec 50             	sub    esp,0x50
c0016bff:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0016c06:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016c0b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016c0f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c13:	ee                   	out    dx,al
c0016c14:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0016c1b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016c20:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016c24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c28:	ee                   	out    dx,al
c0016c29:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0016c31:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0016c39:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0016c40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c44:	89 c2                	mov    edx,eax
c0016c46:	ec                   	in     al,dx
c0016c47:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0016c4b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016c4f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0016c53:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0016c5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c5e:	89 c2                	mov    edx,eax
c0016c60:	ec                   	in     al,dx
c0016c61:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016c65:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016c69:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0016c6d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0016c74:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0016c79:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0016c7d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016c81:	ee                   	out    dx,al
c0016c82:	e8 b5 fe ff ff       	call   c0016b3c <picIoWait()>
c0016c87:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0016c8e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0016c93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016c97:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016c9b:	ee                   	out    dx,al
c0016c9c:	e8 9b fe ff ff       	call   c0016b3c <picIoWait()>
c0016ca1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016ca5:	25 ff 00 00 00       	and    eax,0xff
c0016caa:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0016cb1:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0016cb5:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0016cb9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016cbd:	ee                   	out    dx,al
c0016cbe:	e8 79 fe ff ff       	call   c0016b3c <picIoWait()>
c0016cc3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016cc7:	25 ff 00 00 00       	and    eax,0xff
c0016ccc:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0016cd3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016cd7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0016cdb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016cdf:	ee                   	out    dx,al
c0016ce0:	e8 57 fe ff ff       	call   c0016b3c <picIoWait()>
c0016ce5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0016cec:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0016cf1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0016cf5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016cf9:	ee                   	out    dx,al
c0016cfa:	e8 3d fe ff ff       	call   c0016b3c <picIoWait()>
c0016cff:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0016d06:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0016d0b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0016d0f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016d13:	ee                   	out    dx,al
c0016d14:	e8 23 fe ff ff       	call   c0016b3c <picIoWait()>
c0016d19:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0016d20:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0016d25:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0016d29:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016d2d:	ee                   	out    dx,al
c0016d2e:	e8 09 fe ff ff       	call   c0016b3c <picIoWait()>
c0016d33:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0016d3a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0016d3f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0016d43:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016d47:	ee                   	out    dx,al
c0016d48:	e8 ef fd ff ff       	call   c0016b3c <picIoWait()>
c0016d4d:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0016d51:	25 ff 00 00 00       	and    eax,0xff
c0016d56:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0016d5d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0016d61:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0016d65:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016d69:	ee                   	out    dx,al
c0016d6a:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0016d6e:	25 ff 00 00 00       	and    eax,0xff
c0016d73:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0016d7a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0016d7e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0016d82:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016d86:	ee                   	out    dx,al
c0016d87:	90                   	nop
c0016d88:	83 c4 50             	add    esp,0x50
c0016d8b:	c3                   	ret    

c0016d8c <picEOI(int)>:
c0016d8c:	83 ec 10             	sub    esp,0x10
c0016d8f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0016d94:	75 22                	jne    c0016db8 <picEOI(int)+0x2c>
c0016d96:	6a 0b                	push   0xb
c0016d98:	e8 db fd ff ff       	call   c0016b78 <picGetIRQReg(int)>
c0016d9d:	83 c4 04             	add    esp,0x4
c0016da0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0016da5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0016daa:	25 ff ff 00 00       	and    eax,0xffff
c0016daf:	25 80 00 00 00       	and    eax,0x80
c0016db4:	74 72                	je     c0016e28 <picEOI(int)+0x9c>
c0016db6:	66 90                	xchg   ax,ax
c0016db8:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0016dbd:	75 31                	jne    c0016df0 <picEOI(int)+0x64>
c0016dbf:	6a 0b                	push   0xb
c0016dc1:	e8 b2 fd ff ff       	call   c0016b78 <picGetIRQReg(int)>
c0016dc6:	83 c4 04             	add    esp,0x4
c0016dc9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016dce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016dd2:	66 85 c0             	test   ax,ax
c0016dd5:	78 19                	js     c0016df0 <picEOI(int)+0x64>
c0016dd7:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0016dde:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0016de3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016de7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0016dec:	ee                   	out    dx,al
c0016ded:	eb 3d                	jmp    c0016e2c <picEOI(int)+0xa0>
c0016def:	90                   	nop
c0016df0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0016df5:	7e 19                	jle    c0016e10 <picEOI(int)+0x84>
c0016df7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0016dfe:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0016e03:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0016e07:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0016e0c:	ee                   	out    dx,al
c0016e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e10:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0016e17:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0016e1c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0016e20:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0016e25:	ee                   	out    dx,al
c0016e26:	eb 04                	jmp    c0016e2c <picEOI(int)+0xa0>
c0016e28:	90                   	nop
c0016e29:	8d 76 00             	lea    esi,[esi+0x0]
c0016e2c:	83 c4 10             	add    esp,0x10
c0016e2f:	c3                   	ret    

c0016e30 <RTC::open(int, int, void*)>:
c0016e30:	31 c0                	xor    eax,eax
c0016e32:	c3                   	ret    
c0016e33:	90                   	nop

c0016e34 <RTC::close(int, int, void*)>:
c0016e34:	31 c0                	xor    eax,eax
c0016e36:	c3                   	ret    
c0016e37:	90                   	nop

c0016e38 <RTC::timeInSecondsUTC()>:
c0016e38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e3c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016e42:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016e48:	c3                   	ret    
c0016e49:	90                   	nop

c0016e4a <RTC::timeInDatetimeUTC()>:
c0016e4a:	53                   	push   ebx
c0016e4b:	83 ec 14             	sub    esp,0x14
c0016e4e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016e52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e56:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e58:	50                   	push   eax
c0016e59:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016e5c:	83 c4 0c             	add    esp,0xc
c0016e5f:	52                   	push   edx
c0016e60:	50                   	push   eax
c0016e61:	53                   	push   ebx
c0016e62:	e8 51 49 ff ff       	call   c000b7b8 <secondsToDatetime(unsigned long long)>
c0016e67:	89 d8                	mov    eax,ebx
c0016e69:	83 c4 14             	add    esp,0x14
c0016e6c:	5b                   	pop    ebx
c0016e6d:	c2 04 00             	ret    0x4

c0016e70 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0016e70:	56                   	push   esi
c0016e71:	53                   	push   ebx
c0016e72:	83 ec 14             	sub    esp,0x14
c0016e75:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016e79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e7b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0016e7e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e82:	52                   	push   edx
c0016e83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e8b:	50                   	push   eax
c0016e8c:	e8 27 49 ff ff       	call   c000b7b8 <secondsToDatetime(unsigned long long)>
c0016e91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016e95:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016e99:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016e9d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0016ea1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016ea5:	89 f0                	mov    eax,esi
c0016ea7:	83 c4 20             	add    esp,0x20
c0016eaa:	5b                   	pop    ebx
c0016eab:	5e                   	pop    esi
c0016eac:	ff e0                	jmp    eax

c0016eae <RTC::~RTC()>:
c0016eae:	83 ec 0c             	sub    esp,0xc
c0016eb1:	ba f4 0c 02 c0       	mov    edx,0xc0020cf4
c0016eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016eba:	89 10                	mov    DWORD PTR [eax],edx
c0016ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ec0:	83 ec 0c             	sub    esp,0xc
c0016ec3:	50                   	push   eax
c0016ec4:	e8 73 46 ff ff       	call   c000b53c <Clock::~Clock()>
c0016ec9:	83 c4 10             	add    esp,0x10
c0016ecc:	90                   	nop
c0016ecd:	83 c4 0c             	add    esp,0xc
c0016ed0:	c3                   	ret    
c0016ed1:	90                   	nop

c0016ed2 <RTC::~RTC()>:
c0016ed2:	83 ec 0c             	sub    esp,0xc
c0016ed5:	83 ec 0c             	sub    esp,0xc
c0016ed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016edc:	e8 cd ff ff ff       	call   c0016eae <RTC::~RTC()>
c0016ee1:	83 c4 10             	add    esp,0x10
c0016ee4:	83 ec 08             	sub    esp,0x8
c0016ee7:	68 60 01 00 00       	push   0x160
c0016eec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ef0:	e8 1b 36 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c0016ef5:	83 c4 10             	add    esp,0x10
c0016ef8:	83 c4 0c             	add    esp,0xc
c0016efb:	c3                   	ret    

c0016efc <RTC::get_update_in_progress_flag()>:
c0016efc:	83 ec 14             	sub    esp,0x14
c0016eff:	6a 0a                	push   0xa
c0016f01:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016f07:	e8 44 00 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016f0c:	83 c4 1c             	add    esp,0x1c
c0016f0f:	c0 e8 07             	shr    al,0x7
c0016f12:	c3                   	ret    
c0016f13:	90                   	nop

c0016f14 <RTC::completeRTCRefresh()>:
c0016f14:	55                   	push   ebp
c0016f15:	57                   	push   edi
c0016f16:	56                   	push   esi
c0016f17:	53                   	push   ebx
c0016f18:	83 ec 2c             	sub    esp,0x2c
c0016f1b:	8b 1d 8c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002648c
c0016f21:	83 ec 0c             	sub    esp,0xc
c0016f24:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016f28:	e8 cf ff ff ff       	call   c0016efc <RTC::get_update_in_progress_flag()>
c0016f2d:	83 c4 10             	add    esp,0x10
c0016f30:	84 c0                	test   al,al
c0016f32:	74 0e                	je     c0016f42 <RTC::completeRTCRefresh()+0x2e>
c0016f34:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0016f3a:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c0016f40:	73 df                	jae    c0016f21 <RTC::completeRTCRefresh()+0xd>
c0016f42:	55                   	push   ebp
c0016f43:	55                   	push   ebp
c0016f44:	6a 00                	push   0x0
c0016f46:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016f4c:	e8 ff ff fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016f51:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016f55:	58                   	pop    eax
c0016f56:	5a                   	pop    edx
c0016f57:	6a 02                	push   0x2
c0016f59:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016f5f:	e8 ec ff fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016f64:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0016f68:	59                   	pop    ecx
c0016f69:	5b                   	pop    ebx
c0016f6a:	6a 04                	push   0x4
c0016f6c:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016f72:	e8 d9 ff fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016f77:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0016f7b:	5e                   	pop    esi
c0016f7c:	5f                   	pop    edi
c0016f7d:	6a 07                	push   0x7
c0016f7f:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016f85:	e8 c6 ff fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016f8a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0016f8e:	5d                   	pop    ebp
c0016f8f:	58                   	pop    eax
c0016f90:	6a 08                	push   0x8
c0016f92:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016f98:	e8 b3 ff fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016f9d:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0016fa1:	58                   	pop    eax
c0016fa2:	5a                   	pop    edx
c0016fa3:	6a 09                	push   0x9
c0016fa5:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016fab:	e8 a0 ff fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016fb0:	83 c4 10             	add    esp,0x10
c0016fb3:	0f b6 e8             	movzx  ebp,al
c0016fb6:	8b 1d 8c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002648c
c0016fbc:	83 ec 0c             	sub    esp,0xc
c0016fbf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016fc3:	e8 34 ff ff ff       	call   c0016efc <RTC::get_update_in_progress_flag()>
c0016fc8:	83 c4 10             	add    esp,0x10
c0016fcb:	84 c0                	test   al,al
c0016fcd:	74 0e                	je     c0016fdd <RTC::completeRTCRefresh()+0xc9>
c0016fcf:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0016fd5:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c0016fdb:	73 df                	jae    c0016fbc <RTC::completeRTCRefresh()+0xa8>
c0016fdd:	50                   	push   eax
c0016fde:	50                   	push   eax
c0016fdf:	6a 00                	push   0x0
c0016fe1:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016fe7:	e8 64 ff fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016fec:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0016ff0:	58                   	pop    eax
c0016ff1:	5a                   	pop    edx
c0016ff2:	6a 02                	push   0x2
c0016ff4:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016ffa:	e8 51 ff fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016fff:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017003:	59                   	pop    ecx
c0017004:	5b                   	pop    ebx
c0017005:	6a 04                	push   0x4
c0017007:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001700d:	e8 3e ff fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0017012:	5e                   	pop    esi
c0017013:	88 c3                	mov    bl,al
c0017015:	5f                   	pop    edi
c0017016:	6a 07                	push   0x7
c0017018:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001701e:	e8 2d ff fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0017023:	89 c6                	mov    esi,eax
c0017025:	58                   	pop    eax
c0017026:	5a                   	pop    edx
c0017027:	6a 08                	push   0x8
c0017029:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001702f:	e8 1c ff fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0017034:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017038:	59                   	pop    ecx
c0017039:	5f                   	pop    edi
c001703a:	6a 09                	push   0x9
c001703c:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017042:	e8 09 ff fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0017047:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001704b:	0f b6 f8             	movzx  edi,al
c001704e:	83 c4 10             	add    esp,0x10
c0017051:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0017055:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0017059:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c001705d:	89 f1                	mov    ecx,esi
c001705f:	0f 94 c0             	sete   al
c0017062:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0017066:	0f 94 c2             	sete   dl
c0017069:	21 d0                	and    eax,edx
c001706b:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c001706f:	0f 94 c2             	sete   dl
c0017072:	21 c2                	and    edx,eax
c0017074:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0017078:	0f 94 c0             	sete   al
c001707b:	21 d0                	and    eax,edx
c001707d:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0017081:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0017085:	0f 94 c1             	sete   cl
c0017088:	84 c8                	test   al,cl
c001708a:	75 29                	jne    c00170b5 <RTC::completeRTCRefresh()+0x1a1>
c001708c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017090:	89 fd                	mov    ebp,edi
c0017092:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017096:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c001709a:	89 f0                	mov    eax,esi
c001709c:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00170a0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170a4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00170a8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00170ac:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00170b0:	e9 01 ff ff ff       	jmp    c0016fb6 <RTC::completeRTCRefresh()+0xa2>
c00170b5:	39 fd                	cmp    ebp,edi
c00170b7:	75 d3                	jne    c001708c <RTC::completeRTCRefresh()+0x178>
c00170b9:	55                   	push   ebp
c00170ba:	55                   	push   ebp
c00170bb:	6a 0b                	push   0xb
c00170bd:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00170c3:	e8 88 fe fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c00170c8:	83 c4 10             	add    esp,0x10
c00170cb:	89 c5                	mov    ebp,eax
c00170cd:	a8 04                	test   al,0x4
c00170cf:	75 78                	jne    c0017149 <RTC::completeRTCRefresh()+0x235>
c00170d1:	b1 0a                	mov    cl,0xa
c00170d3:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c00170d7:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00170db:	83 e2 0f             	and    edx,0xf
c00170de:	c0 e8 04             	shr    al,0x4
c00170e1:	c1 ef 04             	shr    edi,0x4
c00170e4:	f6 e1                	mul    cl
c00170e6:	6b ff 0a             	imul   edi,edi,0xa
c00170e9:	01 d0                	add    eax,edx
c00170eb:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00170ef:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00170f3:	83 e2 0f             	and    edx,0xf
c00170f6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170fa:	c0 e8 04             	shr    al,0x4
c00170fd:	f6 e1                	mul    cl
c00170ff:	01 d0                	add    eax,edx
c0017101:	88 da                	mov    dl,bl
c0017103:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017107:	83 e2 0f             	and    edx,0xf
c001710a:	88 d8                	mov    al,bl
c001710c:	83 e3 80             	and    ebx,0xffffff80
c001710f:	c0 e8 04             	shr    al,0x4
c0017112:	83 e0 07             	and    eax,0x7
c0017115:	f6 e1                	mul    cl
c0017117:	01 d0                	add    eax,edx
c0017119:	89 f2                	mov    edx,esi
c001711b:	09 c3                	or     ebx,eax
c001711d:	83 e2 0f             	and    edx,0xf
c0017120:	89 f0                	mov    eax,esi
c0017122:	c0 e8 04             	shr    al,0x4
c0017125:	f6 e1                	mul    cl
c0017127:	8d 34 02             	lea    esi,[edx+eax*1]
c001712a:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001712e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017132:	83 e2 0f             	and    edx,0xf
c0017135:	c0 e8 04             	shr    al,0x4
c0017138:	f6 e1                	mul    cl
c001713a:	01 d0                	add    eax,edx
c001713c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0017140:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017144:	83 e0 0f             	and    eax,0xf
c0017147:	01 c7                	add    edi,eax
c0017149:	83 e5 02             	and    ebp,0x2
c001714c:	75 14                	jne    c0017162 <RTC::completeRTCRefresh()+0x24e>
c001714e:	84 db                	test   bl,bl
c0017150:	79 10                	jns    c0017162 <RTC::completeRTCRefresh()+0x24e>
c0017152:	83 e3 7f             	and    ebx,0x7f
c0017155:	b9 18 00 00 00       	mov    ecx,0x18
c001715a:	8d 43 0c             	lea    eax,[ebx+0xc]
c001715d:	99                   	cdq    
c001715e:	f7 f9                	idiv   ecx
c0017160:	88 d3                	mov    bl,dl
c0017162:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0017168:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001716e:	77 06                	ja     c0017176 <RTC::completeRTCRefresh()+0x262>
c0017170:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0017176:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c001717b:	31 d2                	xor    edx,edx
c001717d:	c1 e1 10             	shl    ecx,0x10
c0017180:	89 d7                	mov    edi,edx
c0017182:	c1 e5 10             	shl    ebp,0x10
c0017185:	31 c0                	xor    eax,eax
c0017187:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001718d:	09 cf                	or     edi,ecx
c001718f:	89 fa                	mov    edx,edi
c0017191:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0017195:	88 da                	mov    dl,bl
c0017197:	89 f3                	mov    ebx,esi
c0017199:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c001719d:	88 d8                	mov    al,bl
c001719f:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c00171a3:	0f b7 c8             	movzx  ecx,ax
c00171a6:	09 e9                	or     ecx,ebp
c00171a8:	89 c8                	mov    eax,ecx
c00171aa:	51                   	push   ecx
c00171ab:	51                   	push   ecx
c00171ac:	52                   	push   edx
c00171ad:	50                   	push   eax
c00171ae:	e8 78 44 ff ff       	call   c000b62b <datetimeToSeconds(datetime_t)>
c00171b3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00171b7:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00171bd:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00171c3:	83 c4 3c             	add    esp,0x3c
c00171c6:	5b                   	pop    ebx
c00171c7:	5e                   	pop    esi
c00171c8:	5f                   	pop    edi
c00171c9:	5d                   	pop    ebp
c00171ca:	c3                   	ret    
c00171cb:	90                   	nop

c00171cc <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00171cc:	55                   	push   ebp
c00171cd:	57                   	push   edi
c00171ce:	56                   	push   esi
c00171cf:	53                   	push   ebx
c00171d0:	83 ec 30             	sub    esp,0x30
c00171d3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00171d7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00171db:	6a 00                	push   0x0
c00171dd:	6a 00                	push   0x0
c00171df:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00171e5:	e8 7c fe fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c00171ea:	83 c4 0c             	add    esp,0xc
c00171ed:	6a 00                	push   0x0
c00171ef:	6a 02                	push   0x2
c00171f1:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00171f7:	e8 6a fe fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c00171fc:	31 d2                	xor    edx,edx
c00171fe:	89 f9                	mov    ecx,edi
c0017200:	89 f8                	mov    eax,edi
c0017202:	c1 e9 10             	shr    ecx,0x10
c0017205:	0f b6 c4             	movzx  eax,ah
c0017208:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c001720c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0017210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017214:	b9 64 00 00 00       	mov    ecx,0x64
c0017219:	89 f0                	mov    eax,esi
c001721b:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001721f:	89 f0                	mov    eax,esi
c0017221:	0f b6 c4             	movzx  eax,ah
c0017224:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017228:	89 f0                	mov    eax,esi
c001722a:	c1 e8 10             	shr    eax,0x10
c001722d:	66 f7 f1             	div    cx
c0017230:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0017235:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c001723a:	59                   	pop    ecx
c001723b:	5b                   	pop    ebx
c001723c:	89 fb                	mov    ebx,edi
c001723e:	6a 0b                	push   0xb
c0017240:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017246:	e8 05 fd fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c001724b:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001724f:	83 c4 10             	add    esp,0x10
c0017252:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0017257:	75 74                	jne    c00172cd <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0017259:	b2 0a                	mov    dl,0xa
c001725b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001725f:	0f b6 c1             	movzx  eax,cl
c0017262:	f6 f2                	div    dl
c0017264:	88 c3                	mov    bl,al
c0017266:	88 e0                	mov    al,ah
c0017268:	c1 e3 04             	shl    ebx,0x4
c001726b:	09 c3                	or     ebx,eax
c001726d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017272:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0017276:	f6 f2                	div    dl
c0017278:	88 c1                	mov    cl,al
c001727a:	88 e0                	mov    al,ah
c001727c:	c1 e1 04             	shl    ecx,0x4
c001727f:	09 c1                	or     ecx,eax
c0017281:	89 f8                	mov    eax,edi
c0017283:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017287:	0f b6 c0             	movzx  eax,al
c001728a:	f6 f2                	div    dl
c001728c:	88 c3                	mov    bl,al
c001728e:	88 e0                	mov    al,ah
c0017290:	c1 e3 04             	shl    ebx,0x4
c0017293:	09 c3                	or     ebx,eax
c0017295:	89 f0                	mov    eax,esi
c0017297:	0f b6 c0             	movzx  eax,al
c001729a:	f6 f2                	div    dl
c001729c:	88 c1                	mov    cl,al
c001729e:	88 e0                	mov    al,ah
c00172a0:	c1 e1 04             	shl    ecx,0x4
c00172a3:	09 c1                	or     ecx,eax
c00172a5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00172aa:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c00172ae:	f6 f2                	div    dl
c00172b0:	88 c1                	mov    cl,al
c00172b2:	88 e0                	mov    al,ah
c00172b4:	c1 e1 04             	shl    ecx,0x4
c00172b7:	09 c1                	or     ecx,eax
c00172b9:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c00172be:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00172c2:	f6 f2                	div    dl
c00172c4:	89 c5                	mov    ebp,eax
c00172c6:	88 e0                	mov    al,ah
c00172c8:	c1 e5 04             	shl    ebp,0x4
c00172cb:	09 c5                	or     ebp,eax
c00172cd:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00172d2:	75 17                	jne    c00172eb <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00172d4:	80 fb 0b             	cmp    bl,0xb
c00172d7:	76 0c                	jbe    c00172e5 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00172d9:	80 eb 0c             	sub    bl,0xc
c00172dc:	75 02                	jne    c00172e0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00172de:	b3 0c                	mov    bl,0xc
c00172e0:	83 cb 80             	or     ebx,0xffffff80
c00172e3:	eb 06                	jmp    c00172eb <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00172e5:	84 db                	test   bl,bl
c00172e7:	75 02                	jne    c00172eb <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00172e9:	b3 0c                	mov    bl,0xc
c00172eb:	0f b6 db             	movzx  ebx,bl
c00172ee:	50                   	push   eax
c00172ef:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00172f4:	50                   	push   eax
c00172f5:	6a 00                	push   0x0
c00172f7:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00172fd:	e8 64 fd fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017302:	83 c4 0c             	add    esp,0xc
c0017305:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001730a:	50                   	push   eax
c001730b:	6a 02                	push   0x2
c001730d:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017313:	e8 4e fd fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017318:	83 c4 0c             	add    esp,0xc
c001731b:	53                   	push   ebx
c001731c:	6a 04                	push   0x4
c001731e:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017324:	e8 3d fd fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017329:	83 c4 0c             	add    esp,0xc
c001732c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0017331:	50                   	push   eax
c0017332:	6a 07                	push   0x7
c0017334:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001733a:	e8 27 fd fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c001733f:	83 c4 0c             	add    esp,0xc
c0017342:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0017347:	50                   	push   eax
c0017348:	6a 08                	push   0x8
c001734a:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017350:	e8 11 fd fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017355:	83 c4 0c             	add    esp,0xc
c0017358:	89 e8                	mov    eax,ebp
c001735a:	0f b6 e8             	movzx  ebp,al
c001735d:	55                   	push   ebp
c001735e:	6a 09                	push   0x9
c0017360:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017366:	e8 fb fc fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c001736b:	5a                   	pop    edx
c001736c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017370:	e8 9f fb ff ff       	call   c0016f14 <RTC::completeRTCRefresh()>
c0017375:	83 c4 3c             	add    esp,0x3c
c0017378:	b0 01                	mov    al,0x1
c001737a:	5b                   	pop    ebx
c001737b:	5e                   	pop    esi
c001737c:	5f                   	pop    edi
c001737d:	5d                   	pop    ebp
c001737e:	c3                   	ret    

c001737f <rtcIRQHandler(regs*, void*)>:
c001737f:	53                   	push   ebx
c0017380:	83 ec 10             	sub    esp,0x10
c0017383:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017387:	6a 0c                	push   0xc
c0017389:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001738f:	e8 bc fb fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0017394:	83 c4 10             	add    esp,0x10
c0017397:	84 c0                	test   al,al
c0017399:	79 24                	jns    c00173bf <rtcIRQHandler(regs*, void*)+0x40>
c001739b:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00173a2:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00173a9:	66 ff 05 14 72 02 c0 	inc    WORD PTR ds:0xc0027214
c00173b0:	75 0d                	jne    c00173bf <rtcIRQHandler(regs*, void*)+0x40>
c00173b2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00173b6:	83 c4 08             	add    esp,0x8
c00173b9:	5b                   	pop    ebx
c00173ba:	e9 55 fb ff ff       	jmp    c0016f14 <RTC::completeRTCRefresh()>
c00173bf:	83 c4 08             	add    esp,0x8
c00173c2:	5b                   	pop    ebx
c00173c3:	c3                   	ret    

c00173c4 <RTC::RTC()>:
c00173c4:	83 ec 1c             	sub    esp,0x1c
c00173c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173cb:	83 ec 08             	sub    esp,0x8
c00173ce:	68 d7 0c 02 c0       	push   0xc0020cd7
c00173d3:	50                   	push   eax
c00173d4:	e8 2d 41 ff ff       	call   c000b506 <Clock::Clock(char const*)>
c00173d9:	83 c4 10             	add    esp,0x10
c00173dc:	ba f4 0c 02 c0       	mov    edx,0xc0020cf4
c00173e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173e5:	89 10                	mov    DWORD PTR [eax],edx
c00173e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173eb:	83 ec 0c             	sub    esp,0xc
c00173ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00173f2:	6a 01                	push   0x1
c00173f4:	68 7f 73 01 c0       	push   0xc001737f
c00173f9:	6a 08                	push   0x8
c00173fb:	50                   	push   eax
c00173fc:	e8 ef 45 ff ff       	call   c000b9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017401:	83 c4 20             	add    esp,0x20
c0017404:	89 c2                	mov    edx,eax
c0017406:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001740a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017410:	fa                   	cli    
c0017411:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0017416:	40                   	inc    eax
c0017417:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001741c:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0017421:	83 ec 08             	sub    esp,0x8
c0017424:	6a 0b                	push   0xb
c0017426:	50                   	push   eax
c0017427:	e8 24 fb fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c001742c:	83 c4 10             	add    esp,0x10
c001742f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017433:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0017438:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001743c:	83 ca 10             	or     edx,0x10
c001743f:	81 e2 ff 00 00 00    	and    edx,0xff
c0017445:	83 ec 04             	sub    esp,0x4
c0017448:	52                   	push   edx
c0017449:	6a 0b                	push   0xb
c001744b:	50                   	push   eax
c001744c:	e8 15 fc fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017451:	83 c4 10             	add    esp,0x10
c0017454:	83 ec 0c             	sub    esp,0xc
c0017457:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001745b:	e8 b4 fa ff ff       	call   c0016f14 <RTC::completeRTCRefresh()>
c0017460:	83 c4 10             	add    esp,0x10
c0017463:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0017468:	48                   	dec    eax
c0017469:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001746e:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0017473:	85 c0                	test   eax,eax
c0017475:	75 01                	jne    c0017478 <RTC::RTC()+0xb4>
c0017477:	fb                   	sti    
c0017478:	90                   	nop
c0017479:	83 c4 1c             	add    esp,0x1c
c001747c:	c3                   	ret    
c001747d:	66 90                	xchg   ax,ax
c001747f:	90                   	nop

c0017480 <HalConsoleScroll(int, int)>:
c0017480:	83 ec 10             	sub    esp,0x10
c0017483:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001748b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017493:	90                   	nop
c0017494:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017499:	0f 8f e1 00 00 00    	jg     c0017580 <HalConsoleScroll(int, int)+0x100>
c001749f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00174a7:	90                   	nop
c00174a8:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00174b0:	0f 8f be 00 00 00    	jg     c0017574 <HalConsoleScroll(int, int)+0xf4>
c00174b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00174ba:	89 d0                	mov    eax,edx
c00174bc:	c1 e0 02             	shl    eax,0x2
c00174bf:	01 d0                	add    eax,edx
c00174c1:	c1 e0 05             	shl    eax,0x5
c00174c4:	89 c2                	mov    edx,eax
c00174c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00174ca:	01 d0                	add    eax,edx
c00174cc:	89 c2                	mov    edx,eax
c00174ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174d2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00174d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00174d9:	89 d0                	mov    eax,edx
c00174db:	c1 e0 02             	shl    eax,0x2
c00174de:	01 d0                	add    eax,edx
c00174e0:	c1 e0 05             	shl    eax,0x5
c00174e3:	89 c2                	mov    edx,eax
c00174e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00174e9:	01 d0                	add    eax,edx
c00174eb:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00174f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174f5:	01 c2                	add    edx,eax
c00174f7:	8a 01                	mov    al,BYTE PTR [ecx]
c00174f9:	88 02                	mov    BYTE PTR [edx],al
c00174fb:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017500:	75 66                	jne    c0017568 <HalConsoleScroll(int, int)+0xe8>
c0017502:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017506:	83 e0 01             	and    eax,0x1
c0017509:	74 39                	je     c0017544 <HalConsoleScroll(int, int)+0xc4>
c001750b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001750f:	83 e0 0f             	and    eax,0xf
c0017512:	88 c2                	mov    dl,al
c0017514:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017518:	c1 e0 04             	shl    eax,0x4
c001751b:	88 d1                	mov    cl,dl
c001751d:	09 c1                	or     ecx,eax
c001751f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017523:	89 d0                	mov    eax,edx
c0017525:	c1 e0 02             	shl    eax,0x2
c0017528:	01 d0                	add    eax,edx
c001752a:	c1 e0 05             	shl    eax,0x5
c001752d:	89 c2                	mov    edx,eax
c001752f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017533:	01 d0                	add    eax,edx
c0017535:	89 c2                	mov    edx,eax
c0017537:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001753b:	01 d0                	add    eax,edx
c001753d:	88 ca                	mov    dl,cl
c001753f:	88 10                	mov    BYTE PTR [eax],dl
c0017541:	eb 25                	jmp    c0017568 <HalConsoleScroll(int, int)+0xe8>
c0017543:	90                   	nop
c0017544:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017548:	89 d0                	mov    eax,edx
c001754a:	c1 e0 02             	shl    eax,0x2
c001754d:	01 d0                	add    eax,edx
c001754f:	c1 e0 05             	shl    eax,0x5
c0017552:	89 c2                	mov    edx,eax
c0017554:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017558:	01 d0                	add    eax,edx
c001755a:	89 c2                	mov    edx,eax
c001755c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017560:	01 d0                	add    eax,edx
c0017562:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017565:	8d 76 00             	lea    esi,[esi+0x0]
c0017568:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001756c:	e9 37 ff ff ff       	jmp    c00174a8 <HalConsoleScroll(int, int)+0x28>
c0017571:	8d 76 00             	lea    esi,[esi+0x0]
c0017574:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017578:	e9 17 ff ff ff       	jmp    c0017494 <HalConsoleScroll(int, int)+0x14>
c001757d:	8d 76 00             	lea    esi,[esi+0x0]
c0017580:	90                   	nop
c0017581:	83 c4 10             	add    esp,0x10
c0017584:	c3                   	ret    
c0017585:	8d 76 00             	lea    esi,[esi+0x0]

c0017588 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017588:	83 ec 14             	sub    esp,0x14
c001758b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001758f:	88 04 24             	mov    BYTE PTR [esp],al
c0017592:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017595:	25 ff 00 00 00       	and    eax,0xff
c001759a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001759e:	89 d1                	mov    ecx,edx
c00175a0:	83 e1 0f             	and    ecx,0xf
c00175a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175a7:	c1 e2 04             	shl    edx,0x4
c00175aa:	81 e2 ff 00 00 00    	and    edx,0xff
c00175b0:	09 ca                	or     edx,ecx
c00175b2:	c1 e2 08             	shl    edx,0x8
c00175b5:	09 d0                	or     eax,edx
c00175b7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00175bc:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00175c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175c8:	89 d0                	mov    eax,edx
c00175ca:	c1 e0 02             	shl    eax,0x2
c00175cd:	01 d0                	add    eax,edx
c00175cf:	c1 e0 04             	shl    eax,0x4
c00175d2:	89 c2                	mov    edx,eax
c00175d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00175d8:	01 d0                	add    eax,edx
c00175da:	01 c0                	add    eax,eax
c00175dc:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00175e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00175e4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00175e9:	66 89 02             	mov    WORD PTR [edx],ax
c00175ec:	90                   	nop
c00175ed:	83 c4 14             	add    esp,0x14
c00175f0:	c3                   	ret    
c00175f1:	8d 76 00             	lea    esi,[esi+0x0]

c00175f4 <HalConsoleCursorUpdate(int, int)>:
c00175f4:	83 ec 20             	sub    esp,0x20
c00175f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175fb:	89 c2                	mov    edx,eax
c00175fd:	89 d0                	mov    eax,edx
c00175ff:	c1 e0 02             	shl    eax,0x2
c0017602:	01 d0                	add    eax,edx
c0017604:	c1 e0 04             	shl    eax,0x4
c0017607:	89 c2                	mov    edx,eax
c0017609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001760d:	01 d0                	add    eax,edx
c001760f:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017614:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001761b:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017620:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017628:	ee                   	out    dx,al
c0017629:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001762e:	25 ff 00 00 00       	and    eax,0xff
c0017633:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001763a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001763e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017642:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017646:	ee                   	out    dx,al
c0017647:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001764e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017653:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017657:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001765b:	ee                   	out    dx,al
c001765c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017661:	66 c1 e8 08          	shr    ax,0x8
c0017665:	25 ff 00 00 00       	and    eax,0xff
c001766a:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017671:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017675:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017679:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001767d:	ee                   	out    dx,al
c001767e:	90                   	nop
c001767f:	83 c4 20             	add    esp,0x20
c0017682:	c3                   	ret    
c0017683:	90                   	nop

c0017684 <FAT::getName()>:
c0017684:	b8 28 0d 02 c0       	mov    eax,0xc0020d28
c0017689:	c3                   	ret    
c001768a:	66 90                	xchg   ax,ax

c001768c <FAT::tell(void*, unsigned long long*)>:
c001768c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017691:	75 09                	jne    c001769c <FAT::tell(void*, unsigned long long*)+0x10>
c0017693:	b8 04 00 00 00       	mov    eax,0x4
c0017698:	c3                   	ret    
c0017699:	8d 76 00             	lea    esi,[esi+0x0]
c001769c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00176a1:	75 09                	jne    c00176ac <FAT::tell(void*, unsigned long long*)+0x20>
c00176a3:	b8 04 00 00 00       	mov    eax,0x4
c00176a8:	c3                   	ret    
c00176a9:	8d 76 00             	lea    esi,[esi+0x0]
c00176ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00176b0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00176b3:	ba 00 00 00 00       	mov    edx,0x0
c00176b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00176bc:	89 01                	mov    DWORD PTR [ecx],eax
c00176be:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00176c1:	b8 00 00 00 00       	mov    eax,0x0
c00176c6:	c3                   	ret    
c00176c7:	90                   	nop

c00176c8 <FAT::stat(void*, unsigned long long*)>:
c00176c8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00176cd:	75 09                	jne    c00176d8 <FAT::stat(void*, unsigned long long*)+0x10>
c00176cf:	b8 04 00 00 00       	mov    eax,0x4
c00176d4:	c3                   	ret    
c00176d5:	8d 76 00             	lea    esi,[esi+0x0]
c00176d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00176dd:	75 09                	jne    c00176e8 <FAT::stat(void*, unsigned long long*)+0x20>
c00176df:	b8 04 00 00 00       	mov    eax,0x4
c00176e4:	c3                   	ret    
c00176e5:	8d 76 00             	lea    esi,[esi+0x0]
c00176e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00176ec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00176ef:	ba 00 00 00 00       	mov    edx,0x0
c00176f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00176f8:	89 01                	mov    DWORD PTR [ecx],eax
c00176fa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00176fd:	b8 00 00 00 00       	mov    eax,0x0
c0017702:	c3                   	ret    
c0017703:	90                   	nop

c0017704 <FAT::~FAT()>:
c0017704:	83 ec 0c             	sub    esp,0xc
c0017707:	ba 74 0d 02 c0       	mov    edx,0xc0020d74
c001770c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017710:	89 10                	mov    DWORD PTR [eax],edx
c0017712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017716:	83 ec 0c             	sub    esp,0xc
c0017719:	50                   	push   eax
c001771a:	e8 2d 32 ff ff       	call   c000a94c <Filesystem::~Filesystem()>
c001771f:	83 c4 10             	add    esp,0x10
c0017722:	90                   	nop
c0017723:	83 c4 0c             	add    esp,0xc
c0017726:	c3                   	ret    
c0017727:	90                   	nop

c0017728 <FAT::~FAT()>:
c0017728:	83 ec 0c             	sub    esp,0xc
c001772b:	83 ec 0c             	sub    esp,0xc
c001772e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017732:	e8 cd ff ff ff       	call   c0017704 <FAT::~FAT()>
c0017737:	83 c4 10             	add    esp,0x10
c001773a:	83 ec 08             	sub    esp,0x8
c001773d:	6a 08                	push   0x8
c001773f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017743:	e8 c8 2d ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c0017748:	83 c4 10             	add    esp,0x10
c001774b:	83 c4 0c             	add    esp,0xc
c001774e:	c3                   	ret    
c001774f:	90                   	nop

c0017750 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017750:	83 ec 1c             	sub    esp,0x1c
c0017753:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001775a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001775f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017763:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c001776a:	83 f8 ff             	cmp    eax,0xffffffff
c001776d:	75 35                	jne    c00177a4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001776f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017773:	88 c2                	mov    dl,al
c0017775:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c001777a:	01 d0                	add    eax,edx
c001777c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017780:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017786:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001778a:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017791:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017796:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001779a:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c00177a1:	eb 19                	jmp    c00177bc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00177a3:	90                   	nop
c00177a4:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00177a8:	88 c2                	mov    dl,al
c00177aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177ae:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c00177b5:	01 d0                	add    eax,edx
c00177b7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00177bb:	90                   	nop
c00177bc:	83 ec 04             	sub    esp,0x4
c00177bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00177c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00177c7:	8d 44 24 15          	lea    eax,[esp+0x15]
c00177cb:	50                   	push   eax
c00177cc:	e8 73 d6 fe ff       	call   c0004e44 <f_getlabel>
c00177d1:	83 c4 10             	add    esp,0x10
c00177d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00177d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00177dd:	75 09                	jne    c00177e8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00177df:	b8 00 00 00 00       	mov    eax,0x0
c00177e4:	eb 0a                	jmp    c00177f0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00177e6:	66 90                	xchg   ax,ax
c00177e8:	b8 01 00 00 00       	mov    eax,0x1
c00177ed:	8d 76 00             	lea    esi,[esi+0x0]
c00177f0:	83 c4 1c             	add    esp,0x1c
c00177f3:	c3                   	ret    

c00177f4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00177f4:	57                   	push   edi
c00177f5:	83 ec 58             	sub    esp,0x58
c00177f8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0017800:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017804:	b8 00 00 00 00       	mov    eax,0x0
c0017809:	b9 0f 00 00 00       	mov    ecx,0xf
c001780e:	fc                   	cld    
c001780f:	89 d7                	mov    edi,edx
c0017811:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0017813:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017817:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c001781e:	83 f8 ff             	cmp    eax,0xffffffff
c0017821:	75 35                	jne    c0017858 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0017823:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017827:	88 c2                	mov    dl,al
c0017829:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c001782e:	01 d0                	add    eax,edx
c0017830:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017834:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c001783a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001783e:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017845:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c001784a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001784e:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017855:	eb 19                	jmp    c0017870 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0017857:	90                   	nop
c0017858:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001785c:	88 c2                	mov    dl,al
c001785e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017862:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017869:	01 d0                	add    eax,edx
c001786b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001786f:	90                   	nop
c0017870:	83 ec 08             	sub    esp,0x8
c0017873:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0017877:	8d 44 24 18          	lea    eax,[esp+0x18]
c001787b:	50                   	push   eax
c001787c:	e8 2f 8f fe ff       	call   c00007b0 <strcat>
c0017881:	83 c4 10             	add    esp,0x10
c0017884:	83 ec 0c             	sub    esp,0xc
c0017887:	8d 44 24 18          	lea    eax,[esp+0x18]
c001788b:	50                   	push   eax
c001788c:	e8 04 d7 fe ff       	call   c0004f95 <f_setlabel>
c0017891:	83 c4 10             	add    esp,0x10
c0017894:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017898:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001789d:	75 09                	jne    c00178a8 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001789f:	b8 00 00 00 00       	mov    eax,0x0
c00178a4:	eb 0a                	jmp    c00178b0 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00178a6:	66 90                	xchg   ax,ax
c00178a8:	b8 01 00 00 00       	mov    eax,0x1
c00178ad:	8d 76 00             	lea    esi,[esi+0x0]
c00178b0:	83 c4 58             	add    esp,0x58
c00178b3:	5f                   	pop    edi
c00178b4:	c3                   	ret    
c00178b5:	90                   	nop
c00178b6:	66 90                	xchg   ax,ax

c00178b8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00178b8:	83 ec 2c             	sub    esp,0x2c
c00178bb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00178c3:	83 ec 08             	sub    esp,0x8
c00178c6:	68 4c 0d 02 c0       	push   0xc0020d4c
c00178cb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00178cf:	e8 fc 8d fe ff       	call   c00006d0 <strcmp>
c00178d4:	83 c4 10             	add    esp,0x10
c00178d7:	85 c0                	test   eax,eax
c00178d9:	0f 94 c0             	sete   al
c00178dc:	84 c0                	test   al,al
c00178de:	74 10                	je     c00178f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00178e0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00178e8:	e9 b3 00 00 00       	jmp    c00179a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00178ed:	8d 76 00             	lea    esi,[esi+0x0]
c00178f0:	83 ec 08             	sub    esp,0x8
c00178f3:	68 3e 0d 02 c0       	push   0xc0020d3e
c00178f8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00178fc:	e8 cf 8d fe ff       	call   c00006d0 <strcmp>
c0017901:	83 c4 10             	add    esp,0x10
c0017904:	85 c0                	test   eax,eax
c0017906:	0f 94 c0             	sete   al
c0017909:	84 c0                	test   al,al
c001790b:	74 0f                	je     c001791c <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001790d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017915:	e9 86 00 00 00       	jmp    c00179a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001791a:	66 90                	xchg   ax,ax
c001791c:	83 ec 08             	sub    esp,0x8
c001791f:	68 44 0d 02 c0       	push   0xc0020d44
c0017924:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017928:	e8 a3 8d fe ff       	call   c00006d0 <strcmp>
c001792d:	83 c4 10             	add    esp,0x10
c0017930:	85 c0                	test   eax,eax
c0017932:	0f 94 c0             	sete   al
c0017935:	84 c0                	test   al,al
c0017937:	74 0b                	je     c0017944 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0017939:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017941:	eb 5d                	jmp    c00179a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017943:	90                   	nop
c0017944:	83 ec 08             	sub    esp,0x8
c0017947:	68 dc ea 01 c0       	push   0xc001eadc
c001794c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017950:	e8 7b 8d fe ff       	call   c00006d0 <strcmp>
c0017955:	83 c4 10             	add    esp,0x10
c0017958:	85 c0                	test   eax,eax
c001795a:	0f 94 c0             	sete   al
c001795d:	84 c0                	test   al,al
c001795f:	74 0b                	je     c001796c <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0017961:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0017969:	eb 35                	jmp    c00179a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001796b:	90                   	nop
c001796c:	83 ec 08             	sub    esp,0x8
c001796f:	68 4a 0d 02 c0       	push   0xc0020d4a
c0017974:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017978:	e8 53 8d fe ff       	call   c00006d0 <strcmp>
c001797d:	83 c4 10             	add    esp,0x10
c0017980:	85 c0                	test   eax,eax
c0017982:	0f 94 c0             	sete   al
c0017985:	84 c0                	test   al,al
c0017987:	74 0b                	je     c0017994 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0017989:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0017991:	eb 0d                	jmp    c00179a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017993:	90                   	nop
c0017994:	b8 08 00 00 00       	mov    eax,0x8
c0017999:	e9 ea 00 00 00       	jmp    c0017a88 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001799e:	66 90                	xchg   ax,ax
c00179a0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00179a7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00179ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179b0:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c00179b7:	83 f8 ff             	cmp    eax,0xffffffff
c00179ba:	75 34                	jne    c00179f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00179bc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00179c0:	88 c2                	mov    dl,al
c00179c2:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00179c7:	01 d0                	add    eax,edx
c00179c9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00179cd:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c00179d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179d7:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c00179de:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00179e3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00179e7:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c00179ee:	eb 18                	jmp    c0017a08 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00179f0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00179f4:	88 c2                	mov    dl,al
c00179f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179fa:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017a01:	01 d0                	add    eax,edx
c0017a03:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0017a07:	90                   	nop
c0017a08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a0c:	88 04 24             	mov    BYTE PTR [esp],al
c0017a0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017a13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a17:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017a1f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0017a24:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017a2c:	83 ec 0c             	sub    esp,0xc
c0017a2f:	68 00 20 00 00       	push   0x2000
c0017a34:	e8 2c fe fe ff       	call   c0007865 <malloc>
c0017a39:	83 c4 10             	add    esp,0x10
c0017a3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a40:	68 00 20 00 00       	push   0x2000
c0017a45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a49:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017a4d:	50                   	push   eax
c0017a4e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0017a52:	50                   	push   eax
c0017a53:	e8 2d d8 fe ff       	call   c0005285 <f_mkfs>
c0017a58:	83 c4 10             	add    esp,0x10
c0017a5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a5f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017a64:	75 0a                	jne    c0017a70 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0017a66:	b8 00 00 00 00       	mov    eax,0x0
c0017a6b:	eb 1b                	jmp    c0017a88 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0017a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0017a70:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0017a75:	75 09                	jne    c0017a80 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0017a77:	b8 09 00 00 00       	mov    eax,0x9
c0017a7c:	eb 0a                	jmp    c0017a88 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0017a7e:	66 90                	xchg   ax,ax
c0017a80:	b8 01 00 00 00       	mov    eax,0x1
c0017a85:	8d 76 00             	lea    esi,[esi+0x0]
c0017a88:	83 c4 2c             	add    esp,0x2c
c0017a8b:	c3                   	ret    

c0017a8c <FAT::tryMount(LogicalDisk*, int)>:
c0017a8c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0017a92:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017a97:	83 f8 14             	cmp    eax,0x14
c0017a9a:	75 18                	jne    c0017ab4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0017a9c:	83 ec 0c             	sub    esp,0xc
c0017a9f:	68 50 0d 02 c0       	push   0xc0020d50
c0017aa4:	e8 1e 89 ff ff       	call   c00103c7 <KePanic(char const*)>
c0017aa9:	83 c4 10             	add    esp,0x10
c0017aac:	b0 00                	mov    al,0x0
c0017aae:	e9 e9 01 00 00       	jmp    c0017c9c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017ab3:	90                   	nop
c0017ab4:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0017abb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017ac1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017ac7:	3d 00 02 00 00       	cmp    eax,0x200
c0017acc:	74 0a                	je     c0017ad8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0017ace:	b0 00                	mov    al,0x0
c0017ad0:	e9 c7 01 00 00       	jmp    c0017c9c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ad8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0017ae0:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0017ae7:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017aee:	83 f8 ff             	cmp    eax,0xffffffff
c0017af1:	74 09                	je     c0017afc <FAT::tryMount(LogicalDisk*, int)+0x70>
c0017af3:	b0 01                	mov    al,0x1
c0017af5:	e9 a2 01 00 00       	jmp    c0017c9c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017afa:	66 90                	xchg   ax,ax
c0017afc:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0017b06:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0017b0e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0017b15:	88 c2                	mov    dl,al
c0017b17:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017b1c:	01 d0                	add    eax,edx
c0017b1e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0017b25:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017b2b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0017b32:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017b39:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017b3e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0017b45:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017b4c:	83 ec 0c             	sub    esp,0xc
c0017b4f:	68 34 02 00 00       	push   0x234
c0017b54:	e8 0c fd fe ff       	call   c0007865 <malloc>
c0017b59:	83 c4 10             	add    esp,0x10
c0017b5c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0017b63:	83 ec 04             	sub    esp,0x4
c0017b66:	6a 00                	push   0x0
c0017b68:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017b6f:	50                   	push   eax
c0017b70:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017b77:	e8 2f bf fe ff       	call   c0003aab <f_mount>
c0017b7c:	83 c4 10             	add    esp,0x10
c0017b7f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0017b86:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0017b8e:	74 1c                	je     c0017bac <FAT::tryMount(LogicalDisk*, int)+0x120>
c0017b90:	83 ec 0c             	sub    esp,0xc
c0017b93:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017b9a:	e8 e6 fc fe ff       	call   c0007885 <rfree>
c0017b9f:	83 c4 10             	add    esp,0x10
c0017ba2:	b0 00                	mov    al,0x0
c0017ba4:	e9 f3 00 00 00       	jmp    c0017c9c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0017bac:	83 ec 04             	sub    esp,0x4
c0017baf:	68 00 01 00 00       	push   0x100
c0017bb4:	6a 00                	push   0x0
c0017bb6:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017bbd:	50                   	push   eax
c0017bbe:	e8 fd 88 fe ff       	call   c00004c0 <memset>
c0017bc3:	83 c4 10             	add    esp,0x10
c0017bc6:	83 ec 08             	sub    esp,0x8
c0017bc9:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017bd0:	50                   	push   eax
c0017bd1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017bd8:	50                   	push   eax
c0017bd9:	e8 d2 8b fe ff       	call   c00007b0 <strcat>
c0017bde:	83 c4 10             	add    esp,0x10
c0017be1:	83 ec 08             	sub    esp,0x8
c0017be4:	68 5e 0d 02 c0       	push   0xc0020d5e
c0017be9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017bf0:	50                   	push   eax
c0017bf1:	e8 ba 8b fe ff       	call   c00007b0 <strcat>
c0017bf6:	83 c4 10             	add    esp,0x10
c0017bf9:	83 ec 04             	sub    esp,0x4
c0017bfc:	6a 01                	push   0x1
c0017bfe:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0017c05:	50                   	push   eax
c0017c06:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017c0a:	50                   	push   eax
c0017c0b:	e8 fd be fe ff       	call   c0003b0d <f_open>
c0017c10:	83 c4 10             	add    esp,0x10
c0017c13:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0017c1a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0017c21:	85 c0                	test   eax,eax
c0017c23:	74 0b                	je     c0017c30 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0017c25:	78 31                	js     c0017c58 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0017c27:	83 e8 04             	sub    eax,0x4
c0017c2a:	83 f8 01             	cmp    eax,0x1
c0017c2d:	77 29                	ja     c0017c58 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0017c2f:	90                   	nop
c0017c30:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0017c38:	83 ec 0c             	sub    esp,0xc
c0017c3b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017c3f:	50                   	push   eax
c0017c40:	e8 7b c6 fe ff       	call   c00042c0 <f_close>
c0017c45:	83 c4 10             	add    esp,0x10
c0017c48:	90                   	nop
c0017c49:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0017c51:	74 41                	je     c0017c94 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0017c53:	eb 33                	jmp    c0017c88 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0017c55:	8d 76 00             	lea    esi,[esi+0x0]
c0017c58:	83 ec 0c             	sub    esp,0xc
c0017c5b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017c62:	e8 1e fc fe ff       	call   c0007885 <rfree>
c0017c67:	83 c4 10             	add    esp,0x10
c0017c6a:	83 ec 04             	sub    esp,0x4
c0017c6d:	6a 00                	push   0x0
c0017c6f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017c76:	50                   	push   eax
c0017c77:	6a 00                	push   0x0
c0017c79:	e8 2d be fe ff       	call   c0003aab <f_mount>
c0017c7e:	83 c4 10             	add    esp,0x10
c0017c81:	b0 00                	mov    al,0x0
c0017c83:	eb 17                	jmp    c0017c9c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017c85:	8d 76 00             	lea    esi,[esi+0x0]
c0017c88:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017c8d:	40                   	inc    eax
c0017c8e:	a3 20 72 02 c0       	mov    ds:0xc0027220,eax
c0017c93:	90                   	nop
c0017c94:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0017c9b:	90                   	nop
c0017c9c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0017ca2:	c3                   	ret    
c0017ca3:	90                   	nop

c0017ca4 <FAT::allocateSwapfile(char const*, int)>:
c0017ca4:	55                   	push   ebp
c0017ca5:	57                   	push   edi
c0017ca6:	56                   	push   esi
c0017ca7:	53                   	push   ebx
c0017ca8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0017cae:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0017cb9:	83 ec 0c             	sub    esp,0xc
c0017cbc:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0017cc3:	e8 9d fb fe ff       	call   c0007865 <malloc>
c0017cc8:	83 c4 10             	add    esp,0x10
c0017ccb:	89 c7                	mov    edi,eax
c0017ccd:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0017cd2:	83 ec 04             	sub    esp,0x4
c0017cd5:	50                   	push   eax
c0017cd6:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0017cdd:	57                   	push   edi
c0017cde:	e8 99 2e ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c0017ce3:	83 c4 10             	add    esp,0x10
c0017ce6:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0017ced:	83 ec 04             	sub    esp,0x4
c0017cf0:	8d 44 24 13          	lea    eax,[esp+0x13]
c0017cf4:	50                   	push   eax
c0017cf5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017cf9:	50                   	push   eax
c0017cfa:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017d01:	e8 e2 31 ff ff       	call   c000aee8 <File::stat(unsigned long long*, bool*)>
c0017d06:	83 c4 10             	add    esp,0x10
c0017d09:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0017d10:	c1 e0 14             	shl    eax,0x14
c0017d13:	89 c7                	mov    edi,eax
c0017d15:	89 c5                	mov    ebp,eax
c0017d17:	c1 fd 1f             	sar    ebp,0x1f
c0017d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d1e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d22:	89 f9                	mov    ecx,edi
c0017d24:	31 c1                	xor    ecx,eax
c0017d26:	89 cb                	mov    ebx,ecx
c0017d28:	89 e9                	mov    ecx,ebp
c0017d2a:	31 d1                	xor    ecx,edx
c0017d2c:	89 ce                	mov    esi,ecx
c0017d2e:	89 f0                	mov    eax,esi
c0017d30:	09 d8                	or     eax,ebx
c0017d32:	0f 84 9c 00 00 00    	je     c0017dd4 <FAT::allocateSwapfile(char const*, int)+0x130>
c0017d38:	83 ec 0c             	sub    esp,0xc
c0017d3b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017d42:	e8 6d 30 ff ff       	call   c000adb4 <File::unlink()>
c0017d47:	83 c4 10             	add    esp,0x10
c0017d4a:	83 ec 08             	sub    esp,0x8
c0017d4d:	6a 12                	push   0x12
c0017d4f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017d56:	e8 e1 2e ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c0017d5b:	83 c4 10             	add    esp,0x10
c0017d5e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017d65:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0017d6b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0017d72:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0017d79:	c1 e0 14             	shl    eax,0x14
c0017d7c:	83 ec 04             	sub    esp,0x4
c0017d7f:	6a 01                	push   0x1
c0017d81:	50                   	push   eax
c0017d82:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0017d89:	e8 97 d3 fe ff       	call   c0005125 <f_expand>
c0017d8e:	83 c4 10             	add    esp,0x10
c0017d91:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017d98:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d9a:	83 c0 10             	add    eax,0x10
c0017d9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d9f:	83 ec 0c             	sub    esp,0xc
c0017da2:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017da6:	52                   	push   edx
c0017da7:	8d 54 24 30          	lea    edx,[esp+0x30]
c0017dab:	52                   	push   edx
c0017dac:	6a 00                	push   0x0
c0017dae:	68 00 04 00 00       	push   0x400
c0017db3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0017dba:	ff d0                	call   eax
c0017dbc:	83 c4 20             	add    esp,0x20
c0017dbf:	83 ec 0c             	sub    esp,0xc
c0017dc2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017dc9:	e8 cc 2e ff ff       	call   c000ac9a <File::close()>
c0017dce:	83 c4 10             	add    esp,0x10
c0017dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0017dd4:	83 ec 08             	sub    esp,0x8
c0017dd7:	6a 01                	push   0x1
c0017dd9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017de0:	e8 57 2e ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c0017de5:	83 c4 10             	add    esp,0x10
c0017de8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017def:	8b 00                	mov    eax,DWORD PTR [eax]
c0017df1:	83 c0 0c             	add    eax,0xc
c0017df4:	8b 00                	mov    eax,DWORD PTR [eax]
c0017df6:	83 ec 0c             	sub    esp,0xc
c0017df9:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017dfd:	52                   	push   edx
c0017dfe:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0017e02:	52                   	push   edx
c0017e03:	6a 00                	push   0x0
c0017e05:	6a 04                	push   0x4
c0017e07:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0017e0e:	ff d0                	call   eax
c0017e10:	83 c4 20             	add    esp,0x20
c0017e13:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017e1a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0017e20:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0017e27:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0017e2e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017e31:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0017e38:	83 ec 0c             	sub    esp,0xc
c0017e3b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017e42:	e8 53 2e ff ff       	call   c000ac9a <File::close()>
c0017e47:	83 c4 10             	add    esp,0x10
c0017e4a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0017e51:	ba 00 00 00 00       	mov    edx,0x0
c0017e56:	81 c4 3c 04 00 00    	add    esp,0x43c
c0017e5c:	5b                   	pop    ebx
c0017e5d:	5e                   	pop    esi
c0017e5e:	5f                   	pop    edi
c0017e5f:	5d                   	pop    ebp
c0017e60:	c3                   	ret    
c0017e61:	90                   	nop
c0017e62:	66 90                	xchg   ax,ax

c0017e64 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0017e64:	57                   	push   edi
c0017e65:	56                   	push   esi
c0017e66:	53                   	push   ebx
c0017e67:	81 ec 50 02 00 00    	sub    esp,0x250
c0017e6d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0017e75:	74 0d                	je     c0017e84 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0017e77:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0017e7f:	75 0f                	jne    c0017e90 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0017e81:	8d 76 00             	lea    esi,[esi+0x0]
c0017e84:	b8 04 00 00 00       	mov    eax,0x4
c0017e89:	e9 36 01 00 00       	jmp    c0017fc4 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0017e8e:	66 90                	xchg   ax,ax
c0017e90:	83 ec 08             	sub    esp,0x8
c0017e93:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0017e9a:	50                   	push   eax
c0017e9b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0017ea2:	e8 dc c6 fe ff       	call   c0004583 <f_readdir>
c0017ea7:	83 c4 10             	add    esp,0x10
c0017eaa:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0017eb1:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0017eb8:	83 ec 0c             	sub    esp,0xc
c0017ebb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017ec2:	83 c0 16             	add    eax,0x16
c0017ec5:	50                   	push   eax
c0017ec6:	e8 65 86 fe ff       	call   c0000530 <strlen>
c0017ecb:	83 c4 10             	add    esp,0x10
c0017ece:	ba 00 00 00 00       	mov    edx,0x0
c0017ed3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ed7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017edb:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0017ee2:	25 ff 00 00 00       	and    eax,0xff
c0017ee7:	83 e0 10             	and    eax,0x10
c0017eea:	74 08                	je     c0017ef4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0017eec:	b8 02 00 00 00       	mov    eax,0x2
c0017ef1:	eb 09                	jmp    c0017efc <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0017ef3:	90                   	nop
c0017ef4:	b8 01 00 00 00       	mov    eax,0x1
c0017ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0017efc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017f00:	83 ec 08             	sub    esp,0x8
c0017f03:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0017f0a:	83 c0 16             	add    eax,0x16
c0017f0d:	50                   	push   eax
c0017f0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017f12:	83 c0 10             	add    eax,0x10
c0017f15:	50                   	push   eax
c0017f16:	e8 d5 86 fe ff       	call   c00005f0 <strcpy>
c0017f1b:	83 c4 10             	add    esp,0x10
c0017f1e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0017f25:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0017f2c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017f30:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0017f37:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0017f3e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0017f45:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0017f4c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0017f53:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0017f5a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0017f61:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0017f68:	89 c6                	mov    esi,eax
c0017f6a:	89 d7                	mov    edi,edx
c0017f6c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017f6e:	89 c8                	mov    eax,ecx
c0017f70:	89 fa                	mov    edx,edi
c0017f72:	89 f3                	mov    ebx,esi
c0017f74:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0017f7b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0017f82:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0017f89:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0017f90:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0017f96:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0017f9d:	84 c0                	test   al,al
c0017f9f:	75 07                	jne    c0017fa8 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0017fa1:	b8 07 00 00 00       	mov    eax,0x7
c0017fa6:	eb 1c                	jmp    c0017fc4 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0017fa8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0017faf:	85 c0                	test   eax,eax
c0017fb1:	75 09                	jne    c0017fbc <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0017fb3:	b8 00 00 00 00       	mov    eax,0x0
c0017fb8:	eb 0a                	jmp    c0017fc4 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0017fba:	66 90                	xchg   ax,ax
c0017fbc:	b8 01 00 00 00       	mov    eax,0x1
c0017fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0017fc4:	81 c4 50 02 00 00    	add    esp,0x250
c0017fca:	5b                   	pop    ebx
c0017fcb:	5e                   	pop    esi
c0017fcc:	5f                   	pop    edi
c0017fcd:	c3                   	ret    
c0017fce:	66 90                	xchg   ax,ax

c0017fd0 <FAT::read(void*, unsigned long, void*, int*)>:
c0017fd0:	83 ec 1c             	sub    esp,0x1c
c0017fd3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017fd8:	74 0a                	je     c0017fe4 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0017fda:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0017fdf:	75 0b                	jne    c0017fec <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0017fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0017fe4:	b8 04 00 00 00       	mov    eax,0x4
c0017fe9:	eb 41                	jmp    c001802c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0017feb:	90                   	nop
c0017fec:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017ff0:	50                   	push   eax
c0017ff1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017ff9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017ffd:	e8 d6 bd fe ff       	call   c0003dd8 <f_read>
c0018002:	83 c4 10             	add    esp,0x10
c0018005:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018009:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001800d:	89 c2                	mov    edx,eax
c001800f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018013:	89 10                	mov    DWORD PTR [eax],edx
c0018015:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018019:	85 c0                	test   eax,eax
c001801b:	75 07                	jne    c0018024 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001801d:	b8 00 00 00 00       	mov    eax,0x0
c0018022:	eb 08                	jmp    c001802c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018024:	b8 01 00 00 00       	mov    eax,0x1
c0018029:	8d 76 00             	lea    esi,[esi+0x0]
c001802c:	83 c4 1c             	add    esp,0x1c
c001802f:	c3                   	ret    

c0018030 <FAT::write(void*, unsigned long, void*, int*)>:
c0018030:	83 ec 1c             	sub    esp,0x1c
c0018033:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018038:	74 0a                	je     c0018044 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001803a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001803f:	75 0b                	jne    c001804c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018041:	8d 76 00             	lea    esi,[esi+0x0]
c0018044:	b8 04 00 00 00       	mov    eax,0x4
c0018049:	eb 41                	jmp    c001808c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001804b:	90                   	nop
c001804c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018050:	50                   	push   eax
c0018051:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018055:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018059:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001805d:	e8 75 bf fe ff       	call   c0003fd7 <f_write>
c0018062:	83 c4 10             	add    esp,0x10
c0018065:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018069:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001806d:	89 c2                	mov    edx,eax
c001806f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018073:	89 10                	mov    DWORD PTR [eax],edx
c0018075:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018079:	85 c0                	test   eax,eax
c001807b:	75 07                	jne    c0018084 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001807d:	b8 00 00 00 00       	mov    eax,0x0
c0018082:	eb 08                	jmp    c001808c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018084:	b8 01 00 00 00       	mov    eax,0x1
c0018089:	8d 76 00             	lea    esi,[esi+0x0]
c001808c:	83 c4 1c             	add    esp,0x1c
c001808f:	c3                   	ret    

c0018090 <FAT::close(void*)>:
c0018090:	83 ec 1c             	sub    esp,0x1c
c0018093:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018098:	75 0a                	jne    c00180a4 <FAT::close(void*)+0x14>
c001809a:	b8 04 00 00 00       	mov    eax,0x4
c001809f:	eb 3f                	jmp    c00180e0 <FAT::close(void*)+0x50>
c00180a1:	8d 76 00             	lea    esi,[esi+0x0]
c00180a4:	83 ec 0c             	sub    esp,0xc
c00180a7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00180ab:	e8 10 c2 fe ff       	call   c00042c0 <f_close>
c00180b0:	83 c4 10             	add    esp,0x10
c00180b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00180b7:	83 ec 0c             	sub    esp,0xc
c00180ba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00180be:	e8 b2 f7 fe ff       	call   c0007875 <free>
c00180c3:	83 c4 10             	add    esp,0x10
c00180c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180ca:	85 c0                	test   eax,eax
c00180cc:	75 0a                	jne    c00180d8 <FAT::close(void*)+0x48>
c00180ce:	b8 00 00 00 00       	mov    eax,0x0
c00180d3:	eb 0b                	jmp    c00180e0 <FAT::close(void*)+0x50>
c00180d5:	8d 76 00             	lea    esi,[esi+0x0]
c00180d8:	b8 01 00 00 00       	mov    eax,0x1
c00180dd:	8d 76 00             	lea    esi,[esi+0x0]
c00180e0:	83 c4 1c             	add    esp,0x1c
c00180e3:	c3                   	ret    

c00180e4 <FAT::closeDir(void*)>:
c00180e4:	83 ec 1c             	sub    esp,0x1c
c00180e7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00180ec:	75 0a                	jne    c00180f8 <FAT::closeDir(void*)+0x14>
c00180ee:	b8 04 00 00 00       	mov    eax,0x4
c00180f3:	eb 3f                	jmp    c0018134 <FAT::closeDir(void*)+0x50>
c00180f5:	8d 76 00             	lea    esi,[esi+0x0]
c00180f8:	83 ec 0c             	sub    esp,0xc
c00180fb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00180ff:	e8 5d c4 fe ff       	call   c0004561 <f_closedir>
c0018104:	83 c4 10             	add    esp,0x10
c0018107:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001810b:	83 ec 0c             	sub    esp,0xc
c001810e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018112:	e8 5e f7 fe ff       	call   c0007875 <free>
c0018117:	83 c4 10             	add    esp,0x10
c001811a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001811e:	85 c0                	test   eax,eax
c0018120:	75 0a                	jne    c001812c <FAT::closeDir(void*)+0x48>
c0018122:	b8 00 00 00 00       	mov    eax,0x0
c0018127:	eb 0b                	jmp    c0018134 <FAT::closeDir(void*)+0x50>
c0018129:	8d 76 00             	lea    esi,[esi+0x0]
c001812c:	b8 01 00 00 00       	mov    eax,0x1
c0018131:	8d 76 00             	lea    esi,[esi+0x0]
c0018134:	83 c4 1c             	add    esp,0x1c
c0018137:	c3                   	ret    

c0018138 <FAT::seek(void*, unsigned long long)>:
c0018138:	83 ec 2c             	sub    esp,0x2c
c001813b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001813f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018143:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018147:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001814b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018150:	75 0a                	jne    c001815c <FAT::seek(void*, unsigned long long)+0x24>
c0018152:	b8 04 00 00 00       	mov    eax,0x4
c0018157:	eb 33                	jmp    c001818c <FAT::seek(void*, unsigned long long)+0x54>
c0018159:	8d 76 00             	lea    esi,[esi+0x0]
c001815c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018160:	83 ec 08             	sub    esp,0x8
c0018163:	50                   	push   eax
c0018164:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018168:	e8 82 c1 fe ff       	call   c00042ef <f_lseek>
c001816d:	83 c4 10             	add    esp,0x10
c0018170:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018174:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018178:	85 c0                	test   eax,eax
c001817a:	75 08                	jne    c0018184 <FAT::seek(void*, unsigned long long)+0x4c>
c001817c:	b8 00 00 00 00       	mov    eax,0x0
c0018181:	eb 09                	jmp    c001818c <FAT::seek(void*, unsigned long long)+0x54>
c0018183:	90                   	nop
c0018184:	b8 01 00 00 00       	mov    eax,0x1
c0018189:	8d 76 00             	lea    esi,[esi+0x0]
c001818c:	83 c4 2c             	add    esp,0x2c
c001818f:	c3                   	ret    

c0018190 <fatWrapperReadDisk>:
c0018190:	53                   	push   ebx
c0018191:	83 ec 18             	sub    esp,0x18
c0018194:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018198:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001819c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00181a0:	25 ff 00 00 00       	and    eax,0xff
c00181a5:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c00181ac:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00181b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181b4:	ba 00 00 00 00       	mov    edx,0x0
c00181b9:	83 ec 0c             	sub    esp,0xc
c00181bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00181c0:	53                   	push   ebx
c00181c1:	52                   	push   edx
c00181c2:	50                   	push   eax
c00181c3:	51                   	push   ecx
c00181c4:	e8 8d 4b ff ff       	call   c000cd56 <LogicalDisk::read(unsigned long long, int, void*)>
c00181c9:	83 c4 20             	add    esp,0x20
c00181cc:	83 c4 18             	add    esp,0x18
c00181cf:	5b                   	pop    ebx
c00181d0:	c3                   	ret    
c00181d1:	8d 76 00             	lea    esi,[esi+0x0]

c00181d4 <fatWrapperWriteDisk>:
c00181d4:	53                   	push   ebx
c00181d5:	83 ec 18             	sub    esp,0x18
c00181d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181dc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00181e0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00181e4:	25 ff 00 00 00       	and    eax,0xff
c00181e9:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c00181f0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00181f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181f8:	ba 00 00 00 00       	mov    edx,0x0
c00181fd:	83 ec 0c             	sub    esp,0xc
c0018200:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018204:	53                   	push   ebx
c0018205:	52                   	push   edx
c0018206:	50                   	push   eax
c0018207:	51                   	push   ecx
c0018208:	e8 b5 4b ff ff       	call   c000cdc2 <LogicalDisk::write(unsigned long long, int, void*)>
c001820d:	83 c4 20             	add    esp,0x20
c0018210:	83 c4 18             	add    esp,0x18
c0018213:	5b                   	pop    ebx
c0018214:	c3                   	ret    
c0018215:	8d 76 00             	lea    esi,[esi+0x0]

c0018218 <fatWrapperIoctl>:
c0018218:	53                   	push   ebx
c0018219:	83 ec 28             	sub    esp,0x28
c001821c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018220:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018224:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018228:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001822c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0018231:	75 35                	jne    c0018268 <fatWrapperIoctl+0x50>
c0018233:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018237:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001823b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001823f:	25 ff 00 00 00       	and    eax,0xff
c0018244:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c001824b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018251:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018257:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001825b:	66 89 02             	mov    WORD PTR [edx],ax
c001825e:	b8 00 00 00 00       	mov    eax,0x0
c0018263:	e9 c4 00 00 00       	jmp    c001832c <fatWrapperIoctl+0x114>
c0018268:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001826d:	75 75                	jne    c00182e4 <fatWrapperIoctl+0xcc>
c001826f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018273:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018277:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001827b:	25 ff 00 00 00       	and    eax,0xff
c0018280:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0018287:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001828d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018293:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018299:	89 c8                	mov    eax,ecx
c001829b:	89 da                	mov    edx,ebx
c001829d:	0f a4 c2 0a          	shld   edx,eax,0xa
c00182a1:	c1 e0 0a             	shl    eax,0xa
c00182a4:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00182a8:	81 e1 ff 00 00 00    	and    ecx,0xff
c00182ae:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c00182b5:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00182bb:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00182c1:	89 cb                	mov    ebx,ecx
c00182c3:	c1 fb 1f             	sar    ebx,0x1f
c00182c6:	53                   	push   ebx
c00182c7:	51                   	push   ecx
c00182c8:	52                   	push   edx
c00182c9:	50                   	push   eax
c00182ca:	e8 11 5a 00 00       	call   c001dce0 <__udivdi3>
c00182cf:	83 c4 10             	add    esp,0x10
c00182d2:	89 c2                	mov    edx,eax
c00182d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00182d8:	89 10                	mov    DWORD PTR [eax],edx
c00182da:	b8 00 00 00 00       	mov    eax,0x0
c00182df:	eb 4b                	jmp    c001832c <fatWrapperIoctl+0x114>
c00182e1:	8d 76 00             	lea    esi,[esi+0x0]
c00182e4:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00182e9:	75 09                	jne    c00182f4 <fatWrapperIoctl+0xdc>
c00182eb:	b8 00 00 00 00       	mov    eax,0x0
c00182f0:	eb 3a                	jmp    c001832c <fatWrapperIoctl+0x114>
c00182f2:	66 90                	xchg   ax,ax
c00182f4:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00182f9:	75 19                	jne    c0018314 <fatWrapperIoctl+0xfc>
c00182fb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00182ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018303:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018307:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001830d:	b8 00 00 00 00       	mov    eax,0x0
c0018312:	eb 18                	jmp    c001832c <fatWrapperIoctl+0x114>
c0018314:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0018319:	75 09                	jne    c0018324 <fatWrapperIoctl+0x10c>
c001831b:	b8 00 00 00 00       	mov    eax,0x0
c0018320:	eb 0a                	jmp    c001832c <fatWrapperIoctl+0x114>
c0018322:	66 90                	xchg   ax,ax
c0018324:	b8 04 00 00 00       	mov    eax,0x4
c0018329:	8d 76 00             	lea    esi,[esi+0x0]
c001832c:	83 c4 28             	add    esp,0x28
c001832f:	5b                   	pop    ebx
c0018330:	c3                   	ret    
c0018331:	90                   	nop
c0018332:	66 90                	xchg   ax,ax

c0018334 <FAT::FAT()>:
c0018334:	83 ec 1c             	sub    esp,0x1c
c0018337:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001833b:	83 ec 0c             	sub    esp,0xc
c001833e:	50                   	push   eax
c001833f:	e8 e4 25 ff ff       	call   c000a928 <Filesystem::Filesystem()>
c0018344:	83 c4 10             	add    esp,0x10
c0018347:	ba 74 0d 02 c0       	mov    edx,0xc0020d74
c001834c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018350:	89 10                	mov    DWORD PTR [eax],edx
c0018352:	c7 05 20 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027220,0x0
c001835c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018364:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018369:	7f 15                	jg     c0018380 <FAT::FAT()+0x4c>
c001836b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001836f:	c7 04 85 40 72 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd8dc0],0xffffffff
c001837a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001837e:	eb e4                	jmp    c0018364 <FAT::FAT()+0x30>
c0018380:	90                   	nop
c0018381:	83 c4 1c             	add    esp,0x1c
c0018384:	c3                   	ret    
c0018385:	90                   	nop
c0018386:	66 90                	xchg   ax,ax

c0018388 <FAT::fixFilepath(char*)>:
c0018388:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001838c:	8a 00                	mov    al,BYTE PTR [eax]
c001838e:	3c 40                	cmp    al,0x40
c0018390:	7e 2e                	jle    c00183c0 <FAT::fixFilepath(char*)+0x38>
c0018392:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018396:	8a 00                	mov    al,BYTE PTR [eax]
c0018398:	83 e8 41             	sub    eax,0x41
c001839b:	88 c2                	mov    dl,al
c001839d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00183a1:	88 10                	mov    BYTE PTR [eax],dl
c00183a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00183a7:	8a 00                	mov    al,BYTE PTR [eax]
c00183a9:	0f be c0             	movsx  eax,al
c00183ac:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c00183b3:	83 c0 30             	add    eax,0x30
c00183b6:	88 c2                	mov    dl,al
c00183b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00183bc:	88 10                	mov    BYTE PTR [eax],dl
c00183be:	66 90                	xchg   ax,ax
c00183c0:	90                   	nop
c00183c1:	c3                   	ret    
c00183c2:	66 90                	xchg   ax,ax

c00183c4 <FAT::open(char const*, void**, FileOpenMode)>:
c00183c4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00183ca:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00183d2:	74 0c                	je     c00183e0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00183d4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00183dc:	75 0e                	jne    c00183ec <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00183de:	66 90                	xchg   ax,ax
c00183e0:	b8 04 00 00 00       	mov    eax,0x4
c00183e5:	e9 0a 01 00 00       	jmp    c00184f4 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00183ea:	66 90                	xchg   ax,ax
c00183ec:	83 ec 08             	sub    esp,0x8
c00183ef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00183f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00183fa:	50                   	push   eax
c00183fb:	e8 f0 81 fe ff       	call   c00005f0 <strcpy>
c0018400:	83 c4 10             	add    esp,0x10
c0018403:	83 ec 08             	sub    esp,0x8
c0018406:	8d 44 24 10          	lea    eax,[esp+0x10]
c001840a:	50                   	push   eax
c001840b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018412:	e8 71 ff ff ff       	call   c0018388 <FAT::fixFilepath(char*)>
c0018417:	83 c4 10             	add    esp,0x10
c001841a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018422:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018429:	83 e0 01             	and    eax,0x1
c001842c:	74 0a                	je     c0018438 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001842e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0018436:	66 90                	xchg   ax,ax
c0018438:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001843f:	83 e0 04             	and    eax,0x4
c0018442:	74 10                	je     c0018454 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0018444:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001844c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0018454:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001845b:	83 e0 02             	and    eax,0x2
c001845e:	74 08                	je     c0018468 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0018460:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0018468:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001846f:	83 e0 08             	and    eax,0x8
c0018472:	74 08                	je     c001847c <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0018474:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001847c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018483:	83 e0 10             	and    eax,0x10
c0018486:	74 08                	je     c0018490 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018488:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0018490:	83 ec 0c             	sub    esp,0xc
c0018493:	68 28 02 00 00       	push   0x228
c0018498:	e8 c8 f3 fe ff       	call   c0007865 <malloc>
c001849d:	83 c4 10             	add    esp,0x10
c00184a0:	89 c2                	mov    edx,eax
c00184a2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00184a9:	89 10                	mov    DWORD PTR [eax],edx
c00184ab:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00184b2:	31 d2                	xor    edx,edx
c00184b4:	88 c2                	mov    dl,al
c00184b6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00184bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00184bf:	83 ec 04             	sub    esp,0x4
c00184c2:	52                   	push   edx
c00184c3:	8d 54 24 10          	lea    edx,[esp+0x10]
c00184c7:	52                   	push   edx
c00184c8:	50                   	push   eax
c00184c9:	e8 3f b6 fe ff       	call   c0003b0d <f_open>
c00184ce:	83 c4 10             	add    esp,0x10
c00184d1:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00184d8:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00184e0:	74 0a                	je     c00184ec <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00184e2:	b8 01 00 00 00       	mov    eax,0x1
c00184e7:	eb 0b                	jmp    c00184f4 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00184e9:	8d 76 00             	lea    esi,[esi+0x0]
c00184ec:	b8 00 00 00 00       	mov    eax,0x0
c00184f1:	8d 76 00             	lea    esi,[esi+0x0]
c00184f4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00184fa:	c3                   	ret    
c00184fb:	90                   	nop

c00184fc <FAT::openDir(char const*, void**)>:
c00184fc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018502:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001850a:	74 0c                	je     c0018518 <FAT::openDir(char const*, void**)+0x1c>
c001850c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018514:	75 0e                	jne    c0018524 <FAT::openDir(char const*, void**)+0x28>
c0018516:	66 90                	xchg   ax,ax
c0018518:	b8 04 00 00 00       	mov    eax,0x4
c001851d:	e9 82 00 00 00       	jmp    c00185a4 <FAT::openDir(char const*, void**)+0xa8>
c0018522:	66 90                	xchg   ax,ax
c0018524:	83 ec 08             	sub    esp,0x8
c0018527:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001852e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018532:	50                   	push   eax
c0018533:	e8 b8 80 fe ff       	call   c00005f0 <strcpy>
c0018538:	83 c4 10             	add    esp,0x10
c001853b:	83 ec 08             	sub    esp,0x8
c001853e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018542:	50                   	push   eax
c0018543:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001854a:	e8 39 fe ff ff       	call   c0018388 <FAT::fixFilepath(char*)>
c001854f:	83 c4 10             	add    esp,0x10
c0018552:	83 ec 0c             	sub    esp,0xc
c0018555:	6a 30                	push   0x30
c0018557:	e8 09 f3 fe ff       	call   c0007865 <malloc>
c001855c:	83 c4 10             	add    esp,0x10
c001855f:	89 c2                	mov    edx,eax
c0018561:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018568:	89 10                	mov    DWORD PTR [eax],edx
c001856a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018571:	8b 00                	mov    eax,DWORD PTR [eax]
c0018573:	83 ec 08             	sub    esp,0x8
c0018576:	8d 54 24 14          	lea    edx,[esp+0x14]
c001857a:	52                   	push   edx
c001857b:	50                   	push   eax
c001857c:	e8 15 bf fe ff       	call   c0004496 <f_opendir>
c0018581:	83 c4 10             	add    esp,0x10
c0018584:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001858b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0018593:	74 07                	je     c001859c <FAT::openDir(char const*, void**)+0xa0>
c0018595:	b8 01 00 00 00       	mov    eax,0x1
c001859a:	eb 08                	jmp    c00185a4 <FAT::openDir(char const*, void**)+0xa8>
c001859c:	b8 00 00 00 00       	mov    eax,0x0
c00185a1:	8d 76 00             	lea    esi,[esi+0x0]
c00185a4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00185aa:	c3                   	ret    
c00185ab:	90                   	nop

c00185ac <FAT::stat(char const*, unsigned long long*, bool*)>:
c00185ac:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00185b2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00185ba:	75 0c                	jne    c00185c8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00185bc:	b8 04 00 00 00       	mov    eax,0x4
c00185c1:	e9 d6 00 00 00       	jmp    c001869c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00185c6:	66 90                	xchg   ax,ax
c00185c8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00185d0:	75 0a                	jne    c00185dc <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00185d2:	b8 04 00 00 00       	mov    eax,0x4
c00185d7:	e9 c0 00 00 00       	jmp    c001869c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00185dc:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00185e4:	75 0a                	jne    c00185f0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00185e6:	b8 04 00 00 00       	mov    eax,0x4
c00185eb:	e9 ac 00 00 00       	jmp    c001869c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00185f0:	83 ec 08             	sub    esp,0x8
c00185f3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00185fa:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018601:	50                   	push   eax
c0018602:	e8 e9 7f fe ff       	call   c00005f0 <strcpy>
c0018607:	83 c4 10             	add    esp,0x10
c001860a:	83 ec 08             	sub    esp,0x8
c001860d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018614:	50                   	push   eax
c0018615:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001861c:	e8 67 fd ff ff       	call   c0018388 <FAT::fixFilepath(char*)>
c0018621:	83 c4 10             	add    esp,0x10
c0018624:	83 ec 08             	sub    esp,0x8
c0018627:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001862b:	50                   	push   eax
c001862c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018633:	50                   	push   eax
c0018634:	e8 dc bf fe ff       	call   c0004615 <f_stat>
c0018639:	83 c4 10             	add    esp,0x10
c001863c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018643:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001864a:	85 c0                	test   eax,eax
c001864c:	74 0a                	je     c0018658 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001864e:	83 f8 04             	cmp    eax,0x4
c0018651:	74 39                	je     c001868c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0018653:	eb 3f                	jmp    c0018694 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018655:	8d 76 00             	lea    esi,[esi+0x0]
c0018658:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001865c:	25 ff 00 00 00       	and    eax,0xff
c0018661:	83 e0 10             	and    eax,0x10
c0018664:	0f 95 c2             	setne  dl
c0018667:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001866e:	88 10                	mov    BYTE PTR [eax],dl
c0018670:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018674:	ba 00 00 00 00       	mov    edx,0x0
c0018679:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0018680:	89 01                	mov    DWORD PTR [ecx],eax
c0018682:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018685:	b8 00 00 00 00       	mov    eax,0x0
c001868a:	eb 10                	jmp    c001869c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001868c:	b8 02 00 00 00       	mov    eax,0x2
c0018691:	eb 09                	jmp    c001869c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018693:	90                   	nop
c0018694:	b8 01 00 00 00       	mov    eax,0x1
c0018699:	8d 76 00             	lea    esi,[esi+0x0]
c001869c:	81 c4 2c 02 00 00    	add    esp,0x22c
c00186a2:	c3                   	ret    
c00186a3:	90                   	nop

c00186a4 <FAT::unlink(char const*)>:
c00186a4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00186aa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00186b2:	75 08                	jne    c00186bc <FAT::unlink(char const*)+0x18>
c00186b4:	b8 04 00 00 00       	mov    eax,0x4
c00186b9:	eb 61                	jmp    c001871c <FAT::unlink(char const*)+0x78>
c00186bb:	90                   	nop
c00186bc:	83 ec 08             	sub    esp,0x8
c00186bf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00186c6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00186ca:	50                   	push   eax
c00186cb:	e8 20 7f fe ff       	call   c00005f0 <strcpy>
c00186d0:	83 c4 10             	add    esp,0x10
c00186d3:	83 ec 08             	sub    esp,0x8
c00186d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00186da:	50                   	push   eax
c00186db:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00186e2:	e8 a1 fc ff ff       	call   c0018388 <FAT::fixFilepath(char*)>
c00186e7:	83 c4 10             	add    esp,0x10
c00186ea:	83 ec 0c             	sub    esp,0xc
c00186ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c00186f1:	50                   	push   eax
c00186f2:	e8 83 c1 fe ff       	call   c000487a <f_unlink>
c00186f7:	83 c4 10             	add    esp,0x10
c00186fa:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018701:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018708:	85 c0                	test   eax,eax
c001870a:	75 08                	jne    c0018714 <FAT::unlink(char const*)+0x70>
c001870c:	b8 00 00 00 00       	mov    eax,0x0
c0018711:	eb 09                	jmp    c001871c <FAT::unlink(char const*)+0x78>
c0018713:	90                   	nop
c0018714:	b8 01 00 00 00       	mov    eax,0x1
c0018719:	8d 76 00             	lea    esi,[esi+0x0]
c001871c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018722:	c3                   	ret    
c0018723:	90                   	nop

c0018724 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018724:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001872a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0018731:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018738:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001873c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018740:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018748:	75 0a                	jne    c0018754 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001874a:	b8 04 00 00 00       	mov    eax,0x4
c001874f:	e9 54 01 00 00       	jmp    c00188a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0018754:	83 ec 08             	sub    esp,0x8
c0018757:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001875e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018762:	50                   	push   eax
c0018763:	e8 88 7e fe ff       	call   c00005f0 <strcpy>
c0018768:	83 c4 10             	add    esp,0x10
c001876b:	83 ec 08             	sub    esp,0x8
c001876e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018772:	50                   	push   eax
c0018773:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001877a:	e8 09 fc ff ff       	call   c0018388 <FAT::fixFilepath(char*)>
c001877f:	83 c4 10             	add    esp,0x10
c0018782:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001878a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0018792:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018796:	25 ff 00 00 00       	and    eax,0xff
c001879b:	83 e0 01             	and    eax,0x1
c001879e:	74 08                	je     c00187a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00187a0:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00187a8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00187ac:	25 ff 00 00 00       	and    eax,0xff
c00187b1:	83 e0 02             	and    eax,0x2
c00187b4:	74 0a                	je     c00187c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00187b6:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00187be:	66 90                	xchg   ax,ax
c00187c0:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00187c4:	25 ff 00 00 00       	and    eax,0xff
c00187c9:	83 e0 04             	and    eax,0x4
c00187cc:	74 0a                	je     c00187d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00187ce:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00187d6:	66 90                	xchg   ax,ax
c00187d8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00187dc:	25 ff 00 00 00       	and    eax,0xff
c00187e1:	83 e0 08             	and    eax,0x8
c00187e4:	74 0a                	je     c00187f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00187e6:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00187ee:	66 90                	xchg   ax,ax
c00187f0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00187f4:	25 ff 00 00 00       	and    eax,0xff
c00187f9:	83 e0 01             	and    eax,0x1
c00187fc:	74 0a                	je     c0018808 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00187fe:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0018806:	66 90                	xchg   ax,ax
c0018808:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001880c:	25 ff 00 00 00       	and    eax,0xff
c0018811:	83 e0 02             	and    eax,0x2
c0018814:	74 0a                	je     c0018820 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0018816:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001881e:	66 90                	xchg   ax,ax
c0018820:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018824:	25 ff 00 00 00       	and    eax,0xff
c0018829:	83 e0 04             	and    eax,0x4
c001882c:	74 0a                	je     c0018838 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c001882e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0018836:	66 90                	xchg   ax,ax
c0018838:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001883c:	25 ff 00 00 00       	and    eax,0xff
c0018841:	83 e0 08             	and    eax,0x8
c0018844:	74 0a                	je     c0018850 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c0018846:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001884e:	66 90                	xchg   ax,ax
c0018850:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018857:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001885e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018865:	31 d2                	xor    edx,edx
c0018867:	88 c2                	mov    dl,al
c0018869:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018870:	25 ff 00 00 00       	and    eax,0xff
c0018875:	83 ec 04             	sub    esp,0x4
c0018878:	52                   	push   edx
c0018879:	50                   	push   eax
c001887a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001887e:	50                   	push   eax
c001887f:	e8 69 c4 fe ff       	call   c0004ced <f_chmod>
c0018884:	83 c4 10             	add    esp,0x10
c0018887:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001888e:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0018895:	85 c0                	test   eax,eax
c0018897:	75 07                	jne    c00188a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0018899:	b8 00 00 00 00       	mov    eax,0x0
c001889e:	eb 08                	jmp    c00188a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00188a0:	b8 01 00 00 00       	mov    eax,0x1
c00188a5:	8d 76 00             	lea    esi,[esi+0x0]
c00188a8:	81 c4 2c 01 00 00    	add    esp,0x12c
c00188ae:	c3                   	ret    
c00188af:	90                   	nop

c00188b0 <FAT::rename(char const*, char const*)>:
c00188b0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00188b6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00188be:	74 0c                	je     c00188cc <FAT::rename(char const*, char const*)+0x1c>
c00188c0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00188c8:	75 0e                	jne    c00188d8 <FAT::rename(char const*, char const*)+0x28>
c00188ca:	66 90                	xchg   ax,ax
c00188cc:	b8 04 00 00 00       	mov    eax,0x4
c00188d1:	e9 9e 00 00 00       	jmp    c0018974 <FAT::rename(char const*, char const*)+0xc4>
c00188d6:	66 90                	xchg   ax,ax
c00188d8:	83 ec 08             	sub    esp,0x8
c00188db:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00188e2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00188e9:	50                   	push   eax
c00188ea:	e8 01 7d fe ff       	call   c00005f0 <strcpy>
c00188ef:	83 c4 10             	add    esp,0x10
c00188f2:	83 ec 08             	sub    esp,0x8
c00188f5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00188fc:	50                   	push   eax
c00188fd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0018904:	e8 7f fa ff ff       	call   c0018388 <FAT::fixFilepath(char*)>
c0018909:	83 c4 10             	add    esp,0x10
c001890c:	83 ec 08             	sub    esp,0x8
c001890f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0018916:	8d 44 24 18          	lea    eax,[esp+0x18]
c001891a:	50                   	push   eax
c001891b:	e8 d0 7c fe ff       	call   c00005f0 <strcpy>
c0018920:	83 c4 10             	add    esp,0x10
c0018923:	83 ec 08             	sub    esp,0x8
c0018926:	8d 44 24 14          	lea    eax,[esp+0x14]
c001892a:	50                   	push   eax
c001892b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0018932:	e8 51 fa ff ff       	call   c0018388 <FAT::fixFilepath(char*)>
c0018937:	83 c4 10             	add    esp,0x10
c001893a:	83 ec 08             	sub    esp,0x8
c001893d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018941:	50                   	push   eax
c0018942:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0018949:	50                   	push   eax
c001894a:	e8 e8 c1 fe ff       	call   c0004b37 <f_rename>
c001894f:	83 c4 10             	add    esp,0x10
c0018952:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0018959:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0018960:	85 c0                	test   eax,eax
c0018962:	75 08                	jne    c001896c <FAT::rename(char const*, char const*)+0xbc>
c0018964:	b8 00 00 00 00       	mov    eax,0x0
c0018969:	eb 09                	jmp    c0018974 <FAT::rename(char const*, char const*)+0xc4>
c001896b:	90                   	nop
c001896c:	b8 01 00 00 00       	mov    eax,0x1
c0018971:	8d 76 00             	lea    esi,[esi+0x0]
c0018974:	81 c4 1c 02 00 00    	add    esp,0x21c
c001897a:	c3                   	ret    
c001897b:	90                   	nop

c001897c <FAT::mkdir(char const*)>:
c001897c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018982:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001898a:	75 08                	jne    c0018994 <FAT::mkdir(char const*)+0x18>
c001898c:	b8 04 00 00 00       	mov    eax,0x4
c0018991:	eb 61                	jmp    c00189f4 <FAT::mkdir(char const*)+0x78>
c0018993:	90                   	nop
c0018994:	83 ec 08             	sub    esp,0x8
c0018997:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001899e:	8d 44 24 18          	lea    eax,[esp+0x18]
c00189a2:	50                   	push   eax
c00189a3:	e8 48 7c fe ff       	call   c00005f0 <strcpy>
c00189a8:	83 c4 10             	add    esp,0x10
c00189ab:	83 ec 08             	sub    esp,0x8
c00189ae:	8d 44 24 14          	lea    eax,[esp+0x14]
c00189b2:	50                   	push   eax
c00189b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00189ba:	e8 c9 f9 ff ff       	call   c0018388 <FAT::fixFilepath(char*)>
c00189bf:	83 c4 10             	add    esp,0x10
c00189c2:	83 ec 0c             	sub    esp,0xc
c00189c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00189c9:	50                   	push   eax
c00189ca:	e8 cd bf fe ff       	call   c000499c <f_mkdir>
c00189cf:	83 c4 10             	add    esp,0x10
c00189d2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00189d9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00189e0:	85 c0                	test   eax,eax
c00189e2:	75 08                	jne    c00189ec <FAT::mkdir(char const*)+0x70>
c00189e4:	b8 00 00 00 00       	mov    eax,0x0
c00189e9:	eb 09                	jmp    c00189f4 <FAT::mkdir(char const*)+0x78>
c00189eb:	90                   	nop
c00189ec:	b8 01 00 00 00       	mov    eax,0x1
c00189f1:	8d 76 00             	lea    esi,[esi+0x0]
c00189f4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00189fa:	c3                   	ret    
c00189fb:	90                   	nop

c00189fc <FAT::exists(char const*)>:
c00189fc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018a02:	83 ec 08             	sub    esp,0x8
c0018a05:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018a0c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018a10:	50                   	push   eax
c0018a11:	e8 da 7b fe ff       	call   c00005f0 <strcpy>
c0018a16:	83 c4 10             	add    esp,0x10
c0018a19:	83 ec 08             	sub    esp,0x8
c0018a1c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a20:	50                   	push   eax
c0018a21:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018a28:	e8 5b f9 ff ff       	call   c0018388 <FAT::fixFilepath(char*)>
c0018a2d:	83 c4 10             	add    esp,0x10
c0018a30:	83 ec 08             	sub    esp,0x8
c0018a33:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0018a3a:	50                   	push   eax
c0018a3b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018a3f:	50                   	push   eax
c0018a40:	e8 d0 bb fe ff       	call   c0004615 <f_stat>
c0018a45:	83 c4 10             	add    esp,0x10
c0018a48:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018a4f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018a56:	85 c0                	test   eax,eax
c0018a58:	75 06                	jne    c0018a60 <FAT::exists(char const*)+0x64>
c0018a5a:	b0 01                	mov    al,0x1
c0018a5c:	eb 06                	jmp    c0018a64 <FAT::exists(char const*)+0x68>
c0018a5e:	66 90                	xchg   ax,ax
c0018a60:	b0 00                	mov    al,0x0
c0018a62:	66 90                	xchg   ax,ax
c0018a64:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018a6a:	c3                   	ret    
c0018a6b:	90                   	nop

c0018a6c <isoReadDiscSectorHelper>:
c0018a6c:	83 ec 2c             	sub    esp,0x2c
c0018a6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018a73:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a77:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0018a7c:	83 e8 41             	sub    eax,0x41
c0018a7f:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0018a86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018a8a:	ba 00 00 00 00       	mov    edx,0x0
c0018a8f:	83 ec 0c             	sub    esp,0xc
c0018a92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018a96:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018a9a:	52                   	push   edx
c0018a9b:	50                   	push   eax
c0018a9c:	51                   	push   ecx
c0018a9d:	e8 b4 42 ff ff       	call   c000cd56 <LogicalDisk::read(unsigned long long, int, void*)>
c0018aa2:	83 c4 20             	add    esp,0x20
c0018aa5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018aa9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018aae:	74 0c                	je     c0018abc <isoReadDiscSectorHelper+0x50>
c0018ab0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018ab4:	c1 e0 0b             	shl    eax,0xb
c0018ab7:	eb 0b                	jmp    c0018ac4 <isoReadDiscSectorHelper+0x58>
c0018ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0018abc:	b8 00 00 00 00       	mov    eax,0x0
c0018ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ac4:	83 c4 2c             	add    esp,0x2c
c0018ac7:	c3                   	ret    

c0018ac8 <iso_kprintf>:
c0018ac8:	83 ec 0c             	sub    esp,0xc
c0018acb:	83 ec 08             	sub    esp,0x8
c0018ace:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018ad2:	68 80 07 02 c0       	push   0xc0020780
c0018ad7:	e8 2a 1b ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0018adc:	83 c4 10             	add    esp,0x10
c0018adf:	90                   	nop
c0018ae0:	83 c4 0c             	add    esp,0xc
c0018ae3:	c3                   	ret    

c0018ae4 <iso_kprintfd>:
c0018ae4:	83 ec 0c             	sub    esp,0xc
c0018ae7:	83 ec 08             	sub    esp,0x8
c0018aea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018aee:	68 7b f7 01 c0       	push   0xc001f77b
c0018af3:	e8 0e 1b ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0018af8:	83 c4 10             	add    esp,0x10
c0018afb:	90                   	nop
c0018afc:	83 c4 0c             	add    esp,0xc
c0018aff:	c3                   	ret    

c0018b00 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0018b00:	b8 08 00 00 00       	mov    eax,0x8
c0018b05:	c3                   	ret    

c0018b06 <ISO9660::getName()>:
c0018b06:	b8 d4 0d 02 c0       	mov    eax,0xc0020dd4
c0018b0b:	c3                   	ret    

c0018b0c <ISO9660::closeDir(void*)>:
c0018b0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b10:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b12:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0018b15:	90                   	nop

c0018b16 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0018b16:	b8 01 00 00 00       	mov    eax,0x1
c0018b1b:	c3                   	ret    

c0018b1c <ISO9660::unlink(char const*)>:
c0018b1c:	b8 01 00 00 00       	mov    eax,0x1
c0018b21:	c3                   	ret    

c0018b22 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0018b22:	b8 03 00 00 00       	mov    eax,0x3
c0018b27:	c3                   	ret    

c0018b28 <ISO9660::rename(char const*, char const*)>:
c0018b28:	b8 01 00 00 00       	mov    eax,0x1
c0018b2d:	c3                   	ret    

c0018b2e <ISO9660::mkdir(char const*)>:
c0018b2e:	b8 01 00 00 00       	mov    eax,0x1
c0018b33:	c3                   	ret    

c0018b34 <ISO9660::~ISO9660()>:
c0018b34:	83 ec 0c             	sub    esp,0xc
c0018b37:	ba 14 0f 02 c0       	mov    edx,0xc0020f14
c0018b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b40:	89 10                	mov    DWORD PTR [eax],edx
c0018b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b46:	83 ec 0c             	sub    esp,0xc
c0018b49:	50                   	push   eax
c0018b4a:	e8 fd 1d ff ff       	call   c000a94c <Filesystem::~Filesystem()>
c0018b4f:	83 c4 10             	add    esp,0x10
c0018b52:	90                   	nop
c0018b53:	83 c4 0c             	add    esp,0xc
c0018b56:	c3                   	ret    
c0018b57:	90                   	nop

c0018b58 <ISO9660::~ISO9660()>:
c0018b58:	83 ec 0c             	sub    esp,0xc
c0018b5b:	83 ec 0c             	sub    esp,0xc
c0018b5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b62:	e8 cd ff ff ff       	call   c0018b34 <ISO9660::~ISO9660()>
c0018b67:	83 c4 10             	add    esp,0x10
c0018b6a:	83 ec 08             	sub    esp,0x8
c0018b6d:	6a 08                	push   0x8
c0018b6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b73:	e8 98 19 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c0018b78:	83 c4 10             	add    esp,0x10
c0018b7b:	83 c4 0c             	add    esp,0xc
c0018b7e:	c3                   	ret    
c0018b7f:	90                   	nop

c0018b80 <ISO9660::exists(char const*)>:
c0018b80:	83 ec 18             	sub    esp,0x18
c0018b83:	68 ef 0d 02 c0       	push   0xc0020def
c0018b88:	e8 3a 78 ff ff       	call   c00103c7 <KePanic(char const*)>
c0018b8d:	31 c0                	xor    eax,eax
c0018b8f:	83 c4 1c             	add    esp,0x1c
c0018b92:	c3                   	ret    
c0018b93:	90                   	nop

c0018b94 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0018b94:	56                   	push   esi
c0018b95:	53                   	push   ebx
c0018b96:	53                   	push   ebx
c0018b97:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018b9b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018b9f:	85 db                	test   ebx,ebx
c0018ba1:	0f 84 c2 00 00 00    	je     c0018c69 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c0018ba7:	85 f6                	test   esi,esi
c0018ba9:	0f 84 ba 00 00 00    	je     c0018c69 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c0018baf:	b8 03 00 00 00       	mov    eax,0x3
c0018bb4:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0018bb9:	0f 85 af 00 00 00    	jne    c0018c6e <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018bbf:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018bc4:	38 03                	cmp    BYTE PTR [ebx],al
c0018bc6:	74 1b                	je     c0018be3 <ISO9660::open(char const*, void**, FileOpenMode)+0x4f>
c0018bc8:	84 c0                	test   al,al
c0018bca:	74 10                	je     c0018bdc <ISO9660::open(char const*, void**, FileOpenMode)+0x48>
c0018bcc:	83 ec 0c             	sub    esp,0xc
c0018bcf:	68 0d 0e 02 c0       	push   0xc0020e0d
c0018bd4:	e8 ee 77 ff ff       	call   c00103c7 <KePanic(char const*)>
c0018bd9:	83 c4 10             	add    esp,0x10
c0018bdc:	8a 03                	mov    al,BYTE PTR [ebx]
c0018bde:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0018be3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018be6:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018bed:	85 c0                	test   eax,eax
c0018bef:	74 09                	je     c0018bfa <ISO9660::open(char const*, void**, FileOpenMode)+0x66>
c0018bf1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018bf8:	74 48                	je     c0018c42 <ISO9660::open(char const*, void**, FileOpenMode)+0xae>
c0018bfa:	83 ec 0c             	sub    esp,0xc
c0018bfd:	68 1d 0e 02 c0       	push   0xc0020e1d
c0018c02:	e8 ff 19 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0018c07:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018c0a:	83 c4 10             	add    esp,0x10
c0018c0d:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018c14:	85 c0                	test   eax,eax
c0018c16:	74 17                	je     c0018c2f <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c0018c18:	83 ec 0c             	sub    esp,0xc
c0018c1b:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0018c22:	68 3d 0e 02 c0       	push   0xc0020e3d
c0018c27:	e8 da 19 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0018c2c:	83 c4 10             	add    esp,0x10
c0018c2f:	83 ec 0c             	sub    esp,0xc
c0018c32:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018c39:	50                   	push   eax
c0018c3a:	e8 0c dc fe ff       	call   c000684b <init_percd>
c0018c3f:	83 c4 10             	add    esp,0x10
c0018c42:	83 c3 03             	add    ebx,0x3
c0018c45:	51                   	push   ecx
c0018c46:	51                   	push   ecx
c0018c47:	6a 00                	push   0x0
c0018c49:	53                   	push   ebx
c0018c4a:	e8 c4 d6 fe ff       	call   c0006313 <iso_open>
c0018c4f:	83 c4 10             	add    esp,0x10
c0018c52:	89 c2                	mov    edx,eax
c0018c54:	b8 01 00 00 00       	mov    eax,0x1
c0018c59:	83 fa ff             	cmp    edx,0xffffffff
c0018c5c:	74 10                	je     c0018c6e <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018c5e:	83 c2 32             	add    edx,0x32
c0018c61:	31 c0                	xor    eax,eax
c0018c63:	01 d2                	add    edx,edx
c0018c65:	89 16                	mov    DWORD PTR [esi],edx
c0018c67:	eb 05                	jmp    c0018c6e <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018c69:	b8 04 00 00 00       	mov    eax,0x4
c0018c6e:	5a                   	pop    edx
c0018c6f:	5b                   	pop    ebx
c0018c70:	5e                   	pop    esi
c0018c71:	c3                   	ret    

c0018c72 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0018c72:	53                   	push   ebx
c0018c73:	83 ec 08             	sub    esp,0x8
c0018c76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c7a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018c7e:	85 c0                	test   eax,eax
c0018c80:	74 2d                	je     c0018caf <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0018c82:	85 db                	test   ebx,ebx
c0018c84:	74 29                	je     c0018caf <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0018c86:	b9 02 00 00 00       	mov    ecx,0x2
c0018c8b:	52                   	push   edx
c0018c8c:	99                   	cdq    
c0018c8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c91:	f7 f9                	idiv   ecx
c0018c93:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018c97:	83 e8 32             	sub    eax,0x32
c0018c9a:	50                   	push   eax
c0018c9b:	e8 1b d7 fe ff       	call   c00063bb <iso_read>
c0018ca0:	83 c4 10             	add    esp,0x10
c0018ca3:	89 03                	mov    DWORD PTR [ebx],eax
c0018ca5:	09 d0                	or     eax,edx
c0018ca7:	0f 94 c0             	sete   al
c0018caa:	0f b6 c0             	movzx  eax,al
c0018cad:	eb 05                	jmp    c0018cb4 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0018caf:	b8 04 00 00 00       	mov    eax,0x4
c0018cb4:	83 c4 08             	add    esp,0x8
c0018cb7:	5b                   	pop    ebx
c0018cb8:	c3                   	ret    
c0018cb9:	90                   	nop

c0018cba <ISO9660::seek(void*, unsigned long long)>:
c0018cba:	57                   	push   edi
c0018cbb:	56                   	push   esi
c0018cbc:	b8 04 00 00 00       	mov    eax,0x4
c0018cc1:	51                   	push   ecx
c0018cc2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018cc6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018cca:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018cce:	85 d2                	test   edx,edx
c0018cd0:	74 26                	je     c0018cf8 <ISO9660::seek(void*, unsigned long long)+0x3e>
c0018cd2:	6a 00                	push   0x0
c0018cd4:	b9 02 00 00 00       	mov    ecx,0x2
c0018cd9:	57                   	push   edi
c0018cda:	89 d0                	mov    eax,edx
c0018cdc:	56                   	push   esi
c0018cdd:	99                   	cdq    
c0018cde:	f7 f9                	idiv   ecx
c0018ce0:	83 e8 32             	sub    eax,0x32
c0018ce3:	50                   	push   eax
c0018ce4:	e8 e8 d7 fe ff       	call   c00064d1 <iso_seek>
c0018ce9:	83 c4 10             	add    esp,0x10
c0018cec:	31 f0                	xor    eax,esi
c0018cee:	31 fa                	xor    edx,edi
c0018cf0:	09 d0                	or     eax,edx
c0018cf2:	0f 95 c0             	setne  al
c0018cf5:	0f b6 c0             	movzx  eax,al
c0018cf8:	5a                   	pop    edx
c0018cf9:	5e                   	pop    esi
c0018cfa:	5f                   	pop    edi
c0018cfb:	c3                   	ret    

c0018cfc <ISO9660::tell(void*, unsigned long long*)>:
c0018cfc:	53                   	push   ebx
c0018cfd:	83 ec 08             	sub    esp,0x8
c0018d00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d04:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018d08:	85 c0                	test   eax,eax
c0018d0a:	74 24                	je     c0018d30 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0018d0c:	85 db                	test   ebx,ebx
c0018d0e:	74 20                	je     c0018d30 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0018d10:	83 ec 0c             	sub    esp,0xc
c0018d13:	b9 02 00 00 00       	mov    ecx,0x2
c0018d18:	99                   	cdq    
c0018d19:	f7 f9                	idiv   ecx
c0018d1b:	83 e8 32             	sub    eax,0x32
c0018d1e:	50                   	push   eax
c0018d1f:	e8 31 d8 fe ff       	call   c0006555 <iso_tell>
c0018d24:	83 c4 10             	add    esp,0x10
c0018d27:	89 03                	mov    DWORD PTR [ebx],eax
c0018d29:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0018d2c:	31 c0                	xor    eax,eax
c0018d2e:	eb 05                	jmp    c0018d35 <ISO9660::tell(void*, unsigned long long*)+0x39>
c0018d30:	b8 04 00 00 00       	mov    eax,0x4
c0018d35:	83 c4 08             	add    esp,0x8
c0018d38:	5b                   	pop    ebx
c0018d39:	c3                   	ret    

c0018d3a <ISO9660::stat(void*, unsigned long long*)>:
c0018d3a:	53                   	push   ebx
c0018d3b:	83 ec 14             	sub    esp,0x14
c0018d3e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018d42:	68 61 0e 02 c0       	push   0xc0020e61
c0018d47:	e8 ba 18 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0018d4c:	83 c4 10             	add    esp,0x10
c0018d4f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018d54:	74 2c                	je     c0018d82 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0018d56:	85 db                	test   ebx,ebx
c0018d58:	74 28                	je     c0018d82 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0018d5a:	83 ec 0c             	sub    esp,0xc
c0018d5d:	b9 02 00 00 00       	mov    ecx,0x2
c0018d62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d66:	99                   	cdq    
c0018d67:	f7 f9                	idiv   ecx
c0018d69:	83 e8 32             	sub    eax,0x32
c0018d6c:	50                   	push   eax
c0018d6d:	e8 14 d8 fe ff       	call   c0006586 <iso_total>
c0018d72:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0018d79:	89 03                	mov    DWORD PTR [ebx],eax
c0018d7b:	83 c4 10             	add    esp,0x10
c0018d7e:	31 c0                	xor    eax,eax
c0018d80:	eb 05                	jmp    c0018d87 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0018d82:	b8 04 00 00 00       	mov    eax,0x4
c0018d87:	83 c4 08             	add    esp,0x8
c0018d8a:	5b                   	pop    ebx
c0018d8b:	c3                   	ret    

c0018d8c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0018d8c:	55                   	push   ebp
c0018d8d:	57                   	push   edi
c0018d8e:	56                   	push   esi
c0018d8f:	53                   	push   ebx
c0018d90:	83 ec 18             	sub    esp,0x18
c0018d93:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0018d97:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018d9b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018d9f:	68 69 0e 02 c0       	push   0xc0020e69
c0018da4:	e8 5d 18 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0018da9:	83 c4 10             	add    esp,0x10
c0018dac:	85 ff                	test   edi,edi
c0018dae:	0f 94 c2             	sete   dl
c0018db1:	85 f6                	test   esi,esi
c0018db3:	0f 94 c0             	sete   al
c0018db6:	08 c2                	or     dl,al
c0018db8:	0f 85 d5 00 00 00    	jne    c0018e93 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c0018dbe:	85 db                	test   ebx,ebx
c0018dc0:	0f 84 cd 00 00 00    	je     c0018e93 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c0018dc6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0018dc9:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0018dcf:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0018dd6:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018ddb:	38 03                	cmp    BYTE PTR [ebx],al
c0018ddd:	74 1b                	je     c0018dfa <ISO9660::stat(char const*, unsigned long long*, bool*)+0x6e>
c0018ddf:	84 c0                	test   al,al
c0018de1:	74 10                	je     c0018df3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x67>
c0018de3:	83 ec 0c             	sub    esp,0xc
c0018de6:	68 0d 0e 02 c0       	push   0xc0020e0d
c0018deb:	e8 d7 75 ff ff       	call   c00103c7 <KePanic(char const*)>
c0018df0:	83 c4 10             	add    esp,0x10
c0018df3:	8a 03                	mov    al,BYTE PTR [ebx]
c0018df5:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0018dfa:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018dfd:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018e04:	85 c0                	test   eax,eax
c0018e06:	74 09                	je     c0018e11 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x85>
c0018e08:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018e0f:	74 51                	je     c0018e62 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd6>
c0018e11:	83 ec 0c             	sub    esp,0xc
c0018e14:	68 71 0e 02 c0       	push   0xc0020e71
c0018e19:	e8 e8 17 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0018e1e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018e21:	83 c4 10             	add    esp,0x10
c0018e24:	83 3c 85 1c 63 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd9ce4],0x0
c0018e2c:	74 21                	je     c0018e4f <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0018e2e:	83 ec 0c             	sub    esp,0xc
c0018e31:	68 91 0e 02 c0       	push   0xc0020e91
c0018e36:	e8 cb 17 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0018e3b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018e3e:	83 c4 10             	add    esp,0x10
c0018e41:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018e48:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0018e4f:	83 ec 0c             	sub    esp,0xc
c0018e52:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018e59:	50                   	push   eax
c0018e5a:	e8 ec d9 fe ff       	call   c000684b <init_percd>
c0018e5f:	83 c4 10             	add    esp,0x10
c0018e62:	83 c3 03             	add    ebx,0x3
c0018e65:	52                   	push   edx
c0018e66:	52                   	push   edx
c0018e67:	6a 00                	push   0x0
c0018e69:	53                   	push   ebx
c0018e6a:	e8 a4 d4 fe ff       	call   c0006313 <iso_open>
c0018e6f:	83 c4 10             	add    esp,0x10
c0018e72:	89 c5                	mov    ebp,eax
c0018e74:	83 f8 ff             	cmp    eax,0xffffffff
c0018e77:	75 21                	jne    c0018e9a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x10e>
c0018e79:	50                   	push   eax
c0018e7a:	50                   	push   eax
c0018e7b:	6a 01                	push   0x1
c0018e7d:	53                   	push   ebx
c0018e7e:	e8 90 d4 fe ff       	call   c0006313 <iso_open>
c0018e83:	83 c4 10             	add    esp,0x10
c0018e86:	ba 02 00 00 00       	mov    edx,0x2
c0018e8b:	40                   	inc    eax
c0018e8c:	74 2b                	je     c0018eb9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0018e8e:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0018e91:	eb 24                	jmp    c0018eb7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12b>
c0018e93:	ba 04 00 00 00       	mov    edx,0x4
c0018e98:	eb 1f                	jmp    c0018eb9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0018e9a:	83 ec 0c             	sub    esp,0xc
c0018e9d:	50                   	push   eax
c0018e9e:	e8 e3 d6 fe ff       	call   c0006586 <iso_total>
c0018ea3:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0018eaa:	89 07                	mov    DWORD PTR [edi],eax
c0018eac:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018eaf:	e8 e9 d4 fe ff       	call   c000639d <iso_close>
c0018eb4:	83 c4 10             	add    esp,0x10
c0018eb7:	31 d2                	xor    edx,edx
c0018eb9:	83 c4 0c             	add    esp,0xc
c0018ebc:	89 d0                	mov    eax,edx
c0018ebe:	5b                   	pop    ebx
c0018ebf:	5e                   	pop    esi
c0018ec0:	5f                   	pop    edi
c0018ec1:	5d                   	pop    ebp
c0018ec2:	c3                   	ret    
c0018ec3:	90                   	nop

c0018ec4 <ISO9660::close(void*)>:
c0018ec4:	83 ec 0c             	sub    esp,0xc
c0018ec7:	b8 04 00 00 00       	mov    eax,0x4
c0018ecc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018ed0:	85 d2                	test   edx,edx
c0018ed2:	74 1b                	je     c0018eef <ISO9660::close(void*)+0x2b>
c0018ed4:	83 ec 0c             	sub    esp,0xc
c0018ed7:	b9 02 00 00 00       	mov    ecx,0x2
c0018edc:	89 d0                	mov    eax,edx
c0018ede:	99                   	cdq    
c0018edf:	f7 f9                	idiv   ecx
c0018ee1:	83 e8 32             	sub    eax,0x32
c0018ee4:	50                   	push   eax
c0018ee5:	e8 b3 d4 fe ff       	call   c000639d <iso_close>
c0018eea:	83 c4 10             	add    esp,0x10
c0018eed:	31 c0                	xor    eax,eax
c0018eef:	83 c4 0c             	add    esp,0xc
c0018ef2:	c3                   	ret    
c0018ef3:	90                   	nop

c0018ef4 <ISO9660::openDir(char const*, void**)>:
c0018ef4:	56                   	push   esi
c0018ef5:	53                   	push   ebx
c0018ef6:	50                   	push   eax
c0018ef7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018efb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018eff:	85 db                	test   ebx,ebx
c0018f01:	0f 84 b5 00 00 00    	je     c0018fbc <ISO9660::openDir(char const*, void**)+0xc8>
c0018f07:	85 f6                	test   esi,esi
c0018f09:	0f 84 ad 00 00 00    	je     c0018fbc <ISO9660::openDir(char const*, void**)+0xc8>
c0018f0f:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018f14:	38 03                	cmp    BYTE PTR [ebx],al
c0018f16:	74 1b                	je     c0018f33 <ISO9660::openDir(char const*, void**)+0x3f>
c0018f18:	84 c0                	test   al,al
c0018f1a:	74 10                	je     c0018f2c <ISO9660::openDir(char const*, void**)+0x38>
c0018f1c:	83 ec 0c             	sub    esp,0xc
c0018f1f:	68 0d 0e 02 c0       	push   0xc0020e0d
c0018f24:	e8 9e 74 ff ff       	call   c00103c7 <KePanic(char const*)>
c0018f29:	83 c4 10             	add    esp,0x10
c0018f2c:	8a 03                	mov    al,BYTE PTR [ebx]
c0018f2e:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0018f33:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018f36:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018f3d:	85 c0                	test   eax,eax
c0018f3f:	74 10                	je     c0018f51 <ISO9660::openDir(char const*, void**)+0x5d>
c0018f41:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018f48:	74 1a                	je     c0018f64 <ISO9660::openDir(char const*, void**)+0x70>
c0018f4a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0018f51:	83 ec 0c             	sub    esp,0xc
c0018f54:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018f5b:	50                   	push   eax
c0018f5c:	e8 ea d8 fe ff       	call   c000684b <init_percd>
c0018f61:	83 c4 10             	add    esp,0x10
c0018f64:	83 c3 03             	add    ebx,0x3
c0018f67:	50                   	push   eax
c0018f68:	50                   	push   eax
c0018f69:	6a 01                	push   0x1
c0018f6b:	53                   	push   ebx
c0018f6c:	e8 a2 d3 fe ff       	call   c0006313 <iso_open>
c0018f71:	83 c4 10             	add    esp,0x10
c0018f74:	89 c3                	mov    ebx,eax
c0018f76:	83 f8 ff             	cmp    eax,0xffffffff
c0018f79:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0018f7e:	75 1c                	jne    c0018f9c <ISO9660::openDir(char const*, void**)+0xa8>
c0018f80:	53                   	push   ebx
c0018f81:	53                   	push   ebx
c0018f82:	68 b5 0e 02 c0       	push   0xc0020eb5
c0018f87:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0018f8d:	e8 4a f8 fe ff       	call   c00087dc <VgaText::puts(char const*)>
c0018f92:	83 c4 10             	add    esp,0x10
c0018f95:	b8 01 00 00 00       	mov    eax,0x1
c0018f9a:	eb 25                	jmp    c0018fc1 <ISO9660::openDir(char const*, void**)+0xcd>
c0018f9c:	01 db                	add    ebx,ebx
c0018f9e:	51                   	push   ecx
c0018f9f:	83 c3 65             	add    ebx,0x65
c0018fa2:	51                   	push   ecx
c0018fa3:	68 c8 0e 02 c0       	push   0xc0020ec8
c0018fa8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0018fae:	e8 29 f8 fe ff       	call   c00087dc <VgaText::puts(char const*)>
c0018fb3:	89 1e                	mov    DWORD PTR [esi],ebx
c0018fb5:	83 c4 10             	add    esp,0x10
c0018fb8:	31 c0                	xor    eax,eax
c0018fba:	eb 05                	jmp    c0018fc1 <ISO9660::openDir(char const*, void**)+0xcd>
c0018fbc:	b8 04 00 00 00       	mov    eax,0x4
c0018fc1:	5a                   	pop    edx
c0018fc2:	5b                   	pop    ebx
c0018fc3:	5e                   	pop    esi
c0018fc4:	c3                   	ret    
c0018fc5:	90                   	nop

c0018fc6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0018fc6:	55                   	push   ebp
c0018fc7:	57                   	push   edi
c0018fc8:	56                   	push   esi
c0018fc9:	53                   	push   ebx
c0018fca:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018fd0:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0018fd7:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0018fde:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018fe6:	0f 84 e7 00 00 00    	je     c00190d3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0018fec:	85 db                	test   ebx,ebx
c0018fee:	0f 84 df 00 00 00    	je     c00190d3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0018ff4:	83 ec 0c             	sub    esp,0xc
c0018ff7:	68 db 0e 02 c0       	push   0xc0020edb
c0018ffc:	e8 05 16 ff ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c0019001:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0019008:	b9 02 00 00 00       	mov    ecx,0x2
c001900d:	99                   	cdq    
c001900e:	f7 f9                	idiv   ecx
c0019010:	83 e8 32             	sub    eax,0x32
c0019013:	89 04 24             	mov    DWORD PTR [esp],eax
c0019016:	e8 bc d5 fe ff       	call   c00065d7 <iso_readdir>
c001901b:	83 c4 10             	add    esp,0x10
c001901e:	89 c6                	mov    esi,eax
c0019020:	85 c0                	test   eax,eax
c0019022:	75 37                	jne    c001905b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0019024:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0019029:	56                   	push   esi
c001902a:	56                   	push   esi
c001902b:	68 e6 0e 02 c0       	push   0xc0020ee6
c0019030:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019036:	e8 a1 f7 fe ff       	call   c00087dc <VgaText::puts(char const*)>
c001903b:	83 c4 0c             	add    esp,0xc
c001903e:	68 10 01 00 00       	push   0x110
c0019043:	6a 00                	push   0x0
c0019045:	57                   	push   edi
c0019046:	e8 75 74 fe ff       	call   c00004c0 <memset>
c001904b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019051:	83 c4 10             	add    esp,0x10
c0019054:	b8 01 00 00 00       	mov    eax,0x1
c0019059:	eb 7d                	jmp    c00190d8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001905b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019061:	8d 68 08             	lea    ebp,[eax+0x8]
c0019064:	83 ec 0c             	sub    esp,0xc
c0019067:	55                   	push   ebp
c0019068:	e8 c3 74 fe ff       	call   c0000530 <strlen>
c001906d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019075:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019079:	83 c4 10             	add    esp,0x10
c001907c:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0019080:	75 0a                	jne    c001908c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0019082:	b8 02 00 00 00       	mov    eax,0x2
c0019087:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001908a:	74 05                	je     c0019091 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001908c:	b8 01 00 00 00       	mov    eax,0x1
c0019091:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019095:	50                   	push   eax
c0019096:	50                   	push   eax
c0019097:	55                   	push   ebp
c0019098:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001909c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00190a0:	50                   	push   eax
c00190a1:	e8 4a 75 fe ff       	call   c00005f0 <strcpy>
c00190a6:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00190ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00190af:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c00190b5:	5a                   	pop    edx
c00190b6:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00190bb:	59                   	pop    ecx
c00190bc:	68 f9 0e 02 c0       	push   0xc0020ef9
c00190c1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00190c7:	e8 10 f7 fe ff       	call   c00087dc <VgaText::puts(char const*)>
c00190cc:	83 c4 10             	add    esp,0x10
c00190cf:	31 c0                	xor    eax,eax
c00190d1:	eb 05                	jmp    c00190d8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c00190d3:	b8 04 00 00 00       	mov    eax,0x4
c00190d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00190de:	5b                   	pop    ebx
c00190df:	5e                   	pop    esi
c00190e0:	5f                   	pop    edi
c00190e1:	5d                   	pop    ebp
c00190e2:	c3                   	ret    

c00190e3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00190e3:	57                   	push   edi
c00190e4:	56                   	push   esi
c00190e5:	53                   	push   ebx
c00190e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00190ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00190ee:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00190f2:	39 35 24 73 02 c0    	cmp    DWORD PTR ds:0xc0027324,esi
c00190f8:	75 08                	jne    c0019102 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00190fa:	38 1d 44 1a 02 c0    	cmp    BYTE PTR ds:0xc0021a44,bl
c0019100:	74 4a                	je     c001914c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0019102:	83 ec 0c             	sub    esp,0xc
c0019105:	31 d2                	xor    edx,edx
c0019107:	68 40 73 02 c0       	push   0xc0027340
c001910c:	0f be c3             	movsx  eax,bl
c001910f:	6a 01                	push   0x1
c0019111:	52                   	push   edx
c0019112:	56                   	push   esi
c0019113:	ff 34 85 1c 63 02 c0 	push   DWORD PTR [eax*4-0x3ffd9ce4]
c001911a:	e8 37 3c ff ff       	call   c000cd56 <LogicalDisk::read(unsigned long long, int, void*)>
c001911f:	83 c4 20             	add    esp,0x20
c0019122:	85 c0                	test   eax,eax
c0019124:	75 0e                	jne    c0019134 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0019126:	89 35 24 73 02 c0    	mov    DWORD PTR ds:0xc0027324,esi
c001912c:	88 1d 44 1a 02 c0    	mov    BYTE PTR ds:0xc0021a44,bl
c0019132:	eb 18                	jmp    c001914c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0019134:	50                   	push   eax
c0019135:	68 00 08 00 00       	push   0x800
c001913a:	6a 00                	push   0x0
c001913c:	57                   	push   edi
c001913d:	e8 7e 73 fe ff       	call   c00004c0 <memset>
c0019142:	83 c4 10             	add    esp,0x10
c0019145:	b8 01 00 00 00       	mov    eax,0x1
c001914a:	eb 0e                	jmp    c001915a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001914c:	be 40 73 02 c0       	mov    esi,0xc0027340
c0019151:	b9 00 08 00 00       	mov    ecx,0x800
c0019156:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019158:	31 c0                	xor    eax,eax
c001915a:	5b                   	pop    ebx
c001915b:	5e                   	pop    esi
c001915c:	5f                   	pop    edi
c001915d:	c3                   	ret    

c001915e <ISO9660::tryMount(LogicalDisk*, int)>:
c001915e:	53                   	push   ebx
c001915f:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019165:	c7 05 24 73 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0027324,0xdeadbeef
c001916f:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0019176:	8d 58 41             	lea    ebx,[eax+0x41]
c0019179:	0f be db             	movsx  ebx,bl
c001917c:	53                   	push   ebx
c001917d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019181:	50                   	push   eax
c0019182:	6a 10                	push   0x10
c0019184:	e8 5a ff ff ff       	call   c00190e3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019189:	83 c4 10             	add    esp,0x10
c001918c:	31 d2                	xor    edx,edx
c001918e:	85 c0                	test   eax,eax
c0019190:	75 33                	jne    c00191c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019192:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019197:	75 2c                	jne    c00191c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019199:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001919e:	75 25                	jne    c00191c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00191a0:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00191a5:	75 1e                	jne    c00191c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00191a7:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00191ac:	75 17                	jne    c00191c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00191ae:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00191b3:	75 10                	jne    c00191c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00191b5:	83 ec 0c             	sub    esp,0xc
c00191b8:	53                   	push   ebx
c00191b9:	e8 8d d6 fe ff       	call   c000684b <init_percd>
c00191be:	83 c4 10             	add    esp,0x10
c00191c1:	40                   	inc    eax
c00191c2:	0f 95 c2             	setne  dl
c00191c5:	88 d0                	mov    al,dl
c00191c7:	81 c4 08 08 00 00    	add    esp,0x808
c00191cd:	5b                   	pop    ebx
c00191ce:	c3                   	ret    
c00191cf:	90                   	nop

c00191d0 <ISO9660::ISO9660()>:
c00191d0:	83 ec 0c             	sub    esp,0xc
c00191d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191d7:	83 ec 0c             	sub    esp,0xc
c00191da:	50                   	push   eax
c00191db:	e8 48 17 ff ff       	call   c000a928 <Filesystem::Filesystem()>
c00191e0:	83 c4 10             	add    esp,0x10
c00191e3:	ba 14 0f 02 c0       	mov    edx,0xc0020f14
c00191e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191ec:	89 10                	mov    DWORD PTR [eax],edx
c00191ee:	e8 6a d7 fe ff       	call   c000695d <fs_iso9660_init>
c00191f3:	90                   	nop
c00191f4:	83 c4 0c             	add    esp,0xc
c00191f7:	c3                   	ret    

c00191f8 <SoundCard::beginPlayback()>:
c00191f8:	c7 44 24 04 74 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020f74
c0019200:	e9 c2 71 ff ff       	jmp    c00103c7 <KePanic(char const*)>
c0019205:	90                   	nop

c0019206 <SoundCard::stopPlayback()>:
c0019206:	c7 44 24 04 74 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020f74
c001920e:	e9 b4 71 ff ff       	jmp    c00103c7 <KePanic(char const*)>
c0019213:	90                   	nop

c0019214 <SoundCard::SoundCard(char const*)>:
c0019214:	83 ec 1c             	sub    esp,0x1c
c0019217:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001921b:	83 ec 08             	sub    esp,0x8
c001921e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019222:	50                   	push   eax
c0019223:	e8 b4 29 ff ff       	call   c000bbdc <Device::Device(char const*)>
c0019228:	83 c4 10             	add    esp,0x10
c001922b:	ba c0 0f 02 c0       	mov    edx,0xc0020fc0
c0019230:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019234:	89 10                	mov    DWORD PTR [eax],edx
c0019236:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001923a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019245:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001924f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019253:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001925d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019261:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001926b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001926f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019279:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019281:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019286:	7f 19                	jg     c00192a1 <SoundCard::SoundCard(char const*)+0x8d>
c0019288:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001928c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019290:	83 c2 54             	add    edx,0x54
c0019293:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001929b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001929f:	eb e0                	jmp    c0019281 <SoundCard::SoundCard(char const*)+0x6d>
c00192a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00192a5:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00192ac:	90                   	nop
c00192ad:	83 c4 1c             	add    esp,0x1c
c00192b0:	c3                   	ret    
c00192b1:	90                   	nop

c00192b2 <SoundCard::~SoundCard()>:
c00192b2:	83 ec 0c             	sub    esp,0xc
c00192b5:	ba c0 0f 02 c0       	mov    edx,0xc0020fc0
c00192ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192be:	89 10                	mov    DWORD PTR [eax],edx
c00192c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192c4:	83 ec 0c             	sub    esp,0xc
c00192c7:	50                   	push   eax
c00192c8:	e8 79 26 ff ff       	call   c000b946 <Device::~Device()>
c00192cd:	83 c4 10             	add    esp,0x10
c00192d0:	90                   	nop
c00192d1:	83 c4 0c             	add    esp,0xc
c00192d4:	c3                   	ret    
c00192d5:	90                   	nop

c00192d6 <SoundCard::~SoundCard()>:
c00192d6:	83 ec 0c             	sub    esp,0xc
c00192d9:	83 ec 0c             	sub    esp,0xc
c00192dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192e0:	e8 cd ff ff ff       	call   c00192b2 <SoundCard::~SoundCard()>
c00192e5:	83 c4 10             	add    esp,0x10
c00192e8:	83 ec 08             	sub    esp,0x8
c00192eb:	68 e8 01 00 00       	push   0x1e8
c00192f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192f4:	e8 17 12 ff ff       	call   c000a510 <operator delete(void*, unsigned long)>
c00192f9:	83 c4 10             	add    esp,0x10
c00192fc:	83 c4 0c             	add    esp,0xc
c00192ff:	c3                   	ret    

c0019300 <SoundCard::configureRates(int, int, int)>:
c0019300:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019304:	31 c0                	xor    eax,eax
c0019306:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001930d:	75 20                	jne    c001932f <SoundCard::configureRates(int, int, int)+0x2f>
c001930f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019313:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019319:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001931d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019327:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001932d:	b0 01                	mov    al,0x1
c001932f:	c3                   	ret    

c0019330 <SoundCard::getSamples16(int, short*)>:
c0019330:	55                   	push   ebp
c0019331:	57                   	push   edi
c0019332:	31 ff                	xor    edi,edi
c0019334:	56                   	push   esi
c0019335:	53                   	push   ebx
c0019336:	31 db                	xor    ebx,ebx
c0019338:	83 ec 10             	sub    esp,0x10
c001933b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001933f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019343:	8d 04 36             	lea    eax,[esi+esi*1]
c0019346:	50                   	push   eax
c0019347:	6a 00                	push   0x0
c0019349:	55                   	push   ebp
c001934a:	e8 71 71 fe ff       	call   c00004c0 <memset>
c001934f:	83 c4 10             	add    esp,0x10
c0019352:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019356:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001935d:	85 c0                	test   eax,eax
c001935f:	74 1b                	je     c001937c <SoundCard::getSamples16(int, short*)+0x4c>
c0019361:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019365:	75 15                	jne    c001937c <SoundCard::getSamples16(int, short*)+0x4c>
c0019367:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001936b:	55                   	push   ebp
c001936c:	56                   	push   esi
c001936d:	50                   	push   eax
c001936e:	e8 ed 02 00 00       	call   c0019660 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019373:	83 c4 10             	add    esp,0x10
c0019376:	39 c7                	cmp    edi,eax
c0019378:	7d 02                	jge    c001937c <SoundCard::getSamples16(int, short*)+0x4c>
c001937a:	89 c7                	mov    edi,eax
c001937c:	43                   	inc    ebx
c001937d:	83 fb 20             	cmp    ebx,0x20
c0019380:	75 d0                	jne    c0019352 <SoundCard::getSamples16(int, short*)+0x22>
c0019382:	83 c4 0c             	add    esp,0xc
c0019385:	89 f8                	mov    eax,edi
c0019387:	5b                   	pop    ebx
c0019388:	5e                   	pop    esi
c0019389:	5f                   	pop    edi
c001938a:	5d                   	pop    ebp
c001938b:	c3                   	ret    

c001938c <SoundCard::getSamples32(int, int*)>:
c001938c:	55                   	push   ebp
c001938d:	57                   	push   edi
c001938e:	31 ff                	xor    edi,edi
c0019390:	56                   	push   esi
c0019391:	31 f6                	xor    esi,esi
c0019393:	53                   	push   ebx
c0019394:	83 ec 10             	sub    esp,0x10
c0019397:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001939b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001939f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00193a3:	c1 e0 02             	shl    eax,0x2
c00193a6:	50                   	push   eax
c00193a7:	6a 00                	push   0x0
c00193a9:	55                   	push   ebp
c00193aa:	e8 11 71 fe ff       	call   c00004c0 <memset>
c00193af:	83 c4 10             	add    esp,0x10
c00193b2:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c00193b9:	85 c0                	test   eax,eax
c00193bb:	74 1b                	je     c00193d8 <SoundCard::getSamples32(int, int*)+0x4c>
c00193bd:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00193c1:	75 15                	jne    c00193d8 <SoundCard::getSamples32(int, int*)+0x4c>
c00193c3:	53                   	push   ebx
c00193c4:	55                   	push   ebp
c00193c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00193c9:	50                   	push   eax
c00193ca:	e8 55 03 00 00       	call   c0019724 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c00193cf:	83 c4 10             	add    esp,0x10
c00193d2:	39 c6                	cmp    esi,eax
c00193d4:	7d 02                	jge    c00193d8 <SoundCard::getSamples32(int, int*)+0x4c>
c00193d6:	89 c6                	mov    esi,eax
c00193d8:	47                   	inc    edi
c00193d9:	83 ff 20             	cmp    edi,0x20
c00193dc:	75 d4                	jne    c00193b2 <SoundCard::getSamples32(int, int*)+0x26>
c00193de:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c00193e4:	85 f6                	test   esi,esi
c00193e6:	75 0f                	jne    c00193f7 <SoundCard::getSamples32(int, int*)+0x6b>
c00193e8:	84 c0                	test   al,al
c00193ea:	74 1b                	je     c0019407 <SoundCard::getSamples32(int, int*)+0x7b>
c00193ec:	83 ec 0c             	sub    esp,0xc
c00193ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00193f1:	53                   	push   ebx
c00193f2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00193f5:	eb 0d                	jmp    c0019404 <SoundCard::getSamples32(int, int*)+0x78>
c00193f7:	84 c0                	test   al,al
c00193f9:	75 0c                	jne    c0019407 <SoundCard::getSamples32(int, int*)+0x7b>
c00193fb:	83 ec 0c             	sub    esp,0xc
c00193fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019400:	53                   	push   ebx
c0019401:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019404:	83 c4 10             	add    esp,0x10
c0019407:	83 c4 0c             	add    esp,0xc
c001940a:	89 f0                	mov    eax,esi
c001940c:	5b                   	pop    ebx
c001940d:	5e                   	pop    esi
c001940e:	5f                   	pop    edi
c001940f:	5d                   	pop    ebp
c0019410:	c3                   	ret    
c0019411:	90                   	nop

c0019412 <SoundCard::addChannel(SoundPort*)>:
c0019412:	83 ec 0c             	sub    esp,0xc
c0019415:	31 c0                	xor    eax,eax
c0019417:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001941b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019423:	74 1b                	je     c0019440 <SoundCard::addChannel(SoundPort*)+0x2e>
c0019425:	40                   	inc    eax
c0019426:	83 f8 20             	cmp    eax,0x20
c0019429:	75 f0                	jne    c001941b <SoundCard::addChannel(SoundPort*)+0x9>
c001942b:	83 ec 0c             	sub    esp,0xc
c001942e:	68 99 0f 02 c0       	push   0xc0020f99
c0019433:	e8 8f 6f ff ff       	call   c00103c7 <KePanic(char const*)>
c0019438:	83 c4 10             	add    esp,0x10
c001943b:	83 c8 ff             	or     eax,0xffffffff
c001943e:	eb 0b                	jmp    c001944b <SoundCard::addChannel(SoundPort*)+0x39>
c0019440:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019444:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001944b:	83 c4 0c             	add    esp,0xc
c001944e:	c3                   	ret    
c001944f:	90                   	nop

c0019450 <SoundCard::removeChannel(int)>:
c0019450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019454:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019458:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019463:	c3                   	ret    

c0019464 <SoundPort::SoundPort(int, int, int, int)>:
c0019464:	83 ec 0c             	sub    esp,0xc
c0019467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001946b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019476:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001947a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001947e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019482:	89 10                	mov    DWORD PTR [eax],edx
c0019484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019488:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001948c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001948f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019493:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019497:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001949a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001949f:	75 13                	jne    c00194b4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00194a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00194a7:	05 a0 0f 00 00       	add    eax,0xfa0
c00194ac:	01 c0                	add    eax,eax
c00194ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00194b2:	66 90                	xchg   ax,ax
c00194b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194b8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00194bc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00194bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194c3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00194ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00194d1:	c1 e0 02             	shl    eax,0x2
c00194d4:	83 ec 0c             	sub    esp,0xc
c00194d7:	50                   	push   eax
c00194d8:	e8 88 e3 fe ff       	call   c0007865 <malloc>
c00194dd:	83 c4 10             	add    esp,0x10
c00194e0:	89 c2                	mov    edx,eax
c00194e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194e6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00194e9:	90                   	nop
c00194ea:	83 c4 0c             	add    esp,0xc
c00194ed:	c3                   	ret    
c00194ee:	66 90                	xchg   ax,ax

c00194f0 <SoundPort::~SoundPort()>:
c00194f0:	83 ec 0c             	sub    esp,0xc
c00194f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00194fa:	85 c0                	test   eax,eax
c00194fc:	74 1e                	je     c001951c <SoundPort::~SoundPort()+0x2c>
c00194fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019502:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019505:	83 ec 0c             	sub    esp,0xc
c0019508:	50                   	push   eax
c0019509:	e8 67 e3 fe ff       	call   c0007875 <free>
c001950e:	83 c4 10             	add    esp,0x10
c0019511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019515:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001951c:	90                   	nop
c001951d:	83 c4 0c             	add    esp,0xc
c0019520:	c3                   	ret    
c0019521:	90                   	nop
c0019522:	66 90                	xchg   ax,ax

c0019524 <SoundPort::unpause()>:
c0019524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019528:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001952c:	c3                   	ret    
c001952d:	90                   	nop
c001952e:	66 90                	xchg   ax,ax

c0019530 <SoundPort::pause()>:
c0019530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019534:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019538:	c3                   	ret    
c0019539:	90                   	nop
c001953a:	66 90                	xchg   ax,ax

c001953c <SoundPort::getBufferUsed()>:
c001953c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019540:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019543:	c3                   	ret    

c0019544 <SoundPort::getBufferSize()>:
c0019544:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019548:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001954b:	c3                   	ret    

c001954c <SoundPort::buffer16(short*, int)>:
c001954c:	55                   	push   ebp
c001954d:	57                   	push   edi
c001954e:	56                   	push   esi
c001954f:	53                   	push   ebx
c0019550:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019554:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019558:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001955b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001955e:	74 68                	je     c00195c8 <SoundPort::buffer16(short*, int)+0x7c>
c0019560:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019564:	85 c9                	test   ecx,ecx
c0019566:	7e 60                	jle    c00195c8 <SoundPort::buffer16(short*, int)+0x7c>
c0019568:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001956c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001956f:	c1 e1 0f             	shl    ecx,0xf
c0019572:	8d 70 01             	lea    esi,[eax+0x1]
c0019575:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019578:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001957b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001957e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019581:	74 4d                	je     c00195d0 <SoundPort::buffer16(short*, int)+0x84>
c0019583:	31 f6                	xor    esi,esi
c0019585:	eb 21                	jmp    c00195a8 <SoundPort::buffer16(short*, int)+0x5c>
c0019587:	90                   	nop
c0019588:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001958d:	8d 79 01             	lea    edi,[ecx+0x1]
c0019590:	c1 e3 0f             	shl    ebx,0xf
c0019593:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019596:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019599:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001959c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001959f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00195a2:	74 1c                	je     c00195c0 <SoundPort::buffer16(short*, int)+0x74>
c00195a4:	89 c6                	mov    esi,eax
c00195a6:	66 90                	xchg   ax,ax
c00195a8:	8d 46 01             	lea    eax,[esi+0x1]
c00195ab:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00195af:	75 d7                	jne    c0019588 <SoundPort::buffer16(short*, int)+0x3c>
c00195b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00195b5:	8d 76 00             	lea    esi,[esi+0x0]
c00195b8:	5b                   	pop    ebx
c00195b9:	5e                   	pop    esi
c00195ba:	5f                   	pop    edi
c00195bb:	5d                   	pop    ebp
c00195bc:	c3                   	ret    
c00195bd:	8d 76 00             	lea    esi,[esi+0x0]
c00195c0:	5b                   	pop    ebx
c00195c1:	8d 46 02             	lea    eax,[esi+0x2]
c00195c4:	5e                   	pop    esi
c00195c5:	5f                   	pop    edi
c00195c6:	5d                   	pop    ebp
c00195c7:	c3                   	ret    
c00195c8:	5b                   	pop    ebx
c00195c9:	31 c0                	xor    eax,eax
c00195cb:	5e                   	pop    esi
c00195cc:	5f                   	pop    edi
c00195cd:	5d                   	pop    ebp
c00195ce:	c3                   	ret    
c00195cf:	90                   	nop
c00195d0:	b8 01 00 00 00       	mov    eax,0x1
c00195d5:	eb e1                	jmp    c00195b8 <SoundPort::buffer16(short*, int)+0x6c>
c00195d7:	90                   	nop

c00195d8 <SoundPort::buffer32(int*, int)>:
c00195d8:	55                   	push   ebp
c00195d9:	57                   	push   edi
c00195da:	56                   	push   esi
c00195db:	53                   	push   ebx
c00195dc:	51                   	push   ecx
c00195dd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00195e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195e5:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00195e8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00195ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00195ef:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00195f2:	74 5c                	je     c0019650 <SoundPort::buffer32(int*, int)+0x78>
c00195f4:	85 c0                	test   eax,eax
c00195f6:	7e 58                	jle    c0019650 <SoundPort::buffer32(int*, int)+0x78>
c00195f8:	8d 71 01             	lea    esi,[ecx+0x1]
c00195fb:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00195fe:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019601:	8b 37                	mov    esi,DWORD PTR [edi]
c0019603:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019606:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019609:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001960c:	74 4a                	je     c0019658 <SoundPort::buffer32(int*, int)+0x80>
c001960e:	31 f6                	xor    esi,esi
c0019610:	eb 1e                	jmp    c0019630 <SoundPort::buffer32(int*, int)+0x58>
c0019612:	66 90                	xchg   ax,ax
c0019614:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019617:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001961a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001961d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019620:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019624:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019627:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001962a:	74 18                	je     c0019644 <SoundPort::buffer32(int*, int)+0x6c>
c001962c:	89 de                	mov    esi,ebx
c001962e:	66 90                	xchg   ax,ax
c0019630:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019633:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019636:	75 dc                	jne    c0019614 <SoundPort::buffer32(int*, int)+0x3c>
c0019638:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001963b:	90                   	nop
c001963c:	5a                   	pop    edx
c001963d:	5b                   	pop    ebx
c001963e:	5e                   	pop    esi
c001963f:	5f                   	pop    edi
c0019640:	5d                   	pop    ebp
c0019641:	c3                   	ret    
c0019642:	66 90                	xchg   ax,ax
c0019644:	5a                   	pop    edx
c0019645:	8d 46 02             	lea    eax,[esi+0x2]
c0019648:	5b                   	pop    ebx
c0019649:	5e                   	pop    esi
c001964a:	5f                   	pop    edi
c001964b:	5d                   	pop    ebp
c001964c:	c3                   	ret    
c001964d:	8d 76 00             	lea    esi,[esi+0x0]
c0019650:	5a                   	pop    edx
c0019651:	31 c0                	xor    eax,eax
c0019653:	5b                   	pop    ebx
c0019654:	5e                   	pop    esi
c0019655:	5f                   	pop    edi
c0019656:	5d                   	pop    ebp
c0019657:	c3                   	ret    
c0019658:	b8 01 00 00 00       	mov    eax,0x1
c001965d:	eb dd                	jmp    c001963c <SoundPort::buffer32(int*, int)+0x64>
c001965f:	90                   	nop

c0019660 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019660:	57                   	push   edi
c0019661:	56                   	push   esi
c0019662:	53                   	push   ebx
c0019663:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019667:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001966b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0019671:	39 03                	cmp    DWORD PTR [ebx],eax
c0019673:	74 13                	je     c0019688 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0019675:	83 ec 0c             	sub    esp,0xc
c0019678:	68 ec 0f 02 c0       	push   0xc0020fec
c001967d:	e8 45 6d ff ff       	call   c00103c7 <KePanic(char const*)>
c0019682:	83 c4 10             	add    esp,0x10
c0019685:	8d 76 00             	lea    esi,[esi+0x0]
c0019688:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001968e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019691:	74 11                	je     c00196a4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0019693:	83 ec 0c             	sub    esp,0xc
c0019696:	68 2b 10 02 c0       	push   0xc002102b
c001969b:	e8 27 6d ff ff       	call   c00103c7 <KePanic(char const*)>
c00196a0:	83 c4 10             	add    esp,0x10
c00196a3:	90                   	nop
c00196a4:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00196aa:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00196ad:	74 11                	je     c00196c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00196af:	83 ec 0c             	sub    esp,0xc
c00196b2:	68 2b 10 02 c0       	push   0xc002102b
c00196b7:	e8 0b 6d ff ff       	call   c00103c7 <KePanic(char const*)>
c00196bc:	83 c4 10             	add    esp,0x10
c00196bf:	90                   	nop
c00196c0:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00196c3:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c00196c7:	7e 07                	jle    c00196d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c00196c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00196cd:	8d 76 00             	lea    esi,[esi+0x0]
c00196d0:	85 f6                	test   esi,esi
c00196d2:	7e 2c                	jle    c0019700 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00196d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00196d8:	8d 3c 36             	lea    edi,[esi+esi*1]
c00196db:	31 c9                	xor    ecx,ecx
c00196dd:	01 d7                	add    edi,edx
c00196df:	90                   	nop
c00196e0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00196e3:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c00196e6:	85 c0                	test   eax,eax
c00196e8:	79 06                	jns    c00196f0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c00196ea:	05 ff 7f 00 00       	add    eax,0x7fff
c00196ef:	90                   	nop
c00196f0:	c1 f8 0f             	sar    eax,0xf
c00196f3:	83 c1 04             	add    ecx,0x4
c00196f6:	66 01 02             	add    WORD PTR [edx],ax
c00196f9:	83 c2 02             	add    edx,0x2
c00196fc:	39 d7                	cmp    edi,edx
c00196fe:	75 e0                	jne    c00196e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0019700:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019703:	50                   	push   eax
c0019704:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019707:	29 f0                	sub    eax,esi
c0019709:	c1 e0 02             	shl    eax,0x2
c001970c:	50                   	push   eax
c001970d:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019710:	50                   	push   eax
c0019711:	52                   	push   edx
c0019712:	e8 b9 6c fe ff       	call   c00003d0 <memmove>
c0019717:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001971a:	83 c4 10             	add    esp,0x10
c001971d:	89 f0                	mov    eax,esi
c001971f:	5b                   	pop    ebx
c0019720:	5e                   	pop    esi
c0019721:	5f                   	pop    edi
c0019722:	c3                   	ret    
c0019723:	90                   	nop

c0019724 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019724:	57                   	push   edi
c0019725:	56                   	push   esi
c0019726:	53                   	push   ebx
c0019727:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001972b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001972f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019733:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0019739:	39 06                	cmp    DWORD PTR [esi],eax
c001973b:	74 13                	je     c0019750 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001973d:	83 ec 0c             	sub    esp,0xc
c0019740:	68 0c 10 02 c0       	push   0xc002100c
c0019745:	e8 7d 6c ff ff       	call   c00103c7 <KePanic(char const*)>
c001974a:	83 c4 10             	add    esp,0x10
c001974d:	8d 76 00             	lea    esi,[esi+0x0]
c0019750:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0019756:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0019759:	74 11                	je     c001976c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001975b:	83 ec 0c             	sub    esp,0xc
c001975e:	68 47 10 02 c0       	push   0xc0021047
c0019763:	e8 5f 6c ff ff       	call   c00103c7 <KePanic(char const*)>
c0019768:	83 c4 10             	add    esp,0x10
c001976b:	90                   	nop
c001976c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0019772:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0019775:	74 11                	je     c0019788 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0019777:	83 ec 0c             	sub    esp,0xc
c001977a:	68 47 10 02 c0       	push   0xc0021047
c001977f:	e8 43 6c ff ff       	call   c00103c7 <KePanic(char const*)>
c0019784:	83 c4 10             	add    esp,0x10
c0019787:	90                   	nop
c0019788:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001978b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001978f:	7e 07                	jle    c0019798 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0019791:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019795:	8d 76 00             	lea    esi,[esi+0x0]
c0019798:	85 ff                	test   edi,edi
c001979a:	7e 1c                	jle    c00197b8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001979c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00197a3:	31 c0                	xor    eax,eax
c00197a5:	8d 76 00             	lea    esi,[esi+0x0]
c00197a8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00197ab:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00197ae:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00197b1:	83 c0 04             	add    eax,0x4
c00197b4:	39 c1                	cmp    ecx,eax
c00197b6:	75 f0                	jne    c00197a8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c00197b8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00197bb:	50                   	push   eax
c00197bc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00197bf:	29 f8                	sub    eax,edi
c00197c1:	c1 e0 02             	shl    eax,0x2
c00197c4:	50                   	push   eax
c00197c5:	8d 04 ba             	lea    eax,[edx+edi*4]
c00197c8:	50                   	push   eax
c00197c9:	52                   	push   edx
c00197ca:	e8 01 6c fe ff       	call   c00003d0 <memmove>
c00197cf:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c00197d2:	83 c4 10             	add    esp,0x10
c00197d5:	89 f8                	mov    eax,edi
c00197d7:	5b                   	pop    ebx
c00197d8:	5e                   	pop    esi
c00197d9:	5f                   	pop    edi
c00197da:	c3                   	ret    
c00197db:	90                   	nop

c00197dc <PCI::open(int, int, void*)>:
c00197dc:	83 ec 18             	sub    esp,0x18
c00197df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00197e3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00197e7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00197ed:	8b 10                	mov    edx,DWORD PTR [eax]
c00197ef:	50                   	push   eax
c00197f0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00197f3:	31 c0                	xor    eax,eax
c00197f5:	83 c4 1c             	add    esp,0x1c
c00197f8:	c3                   	ret    
c00197f9:	90                   	nop

c00197fa <PCI::close(int, int, void*)>:
c00197fa:	31 c0                	xor    eax,eax
c00197fc:	c3                   	ret    
c00197fd:	90                   	nop

c00197fe <PCI::PCI()>:
c00197fe:	83 ec 0c             	sub    esp,0xc
c0019801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019805:	83 ec 08             	sub    esp,0x8
c0019808:	68 63 10 02 c0       	push   0xc0021063
c001980d:	50                   	push   eax
c001980e:	e8 85 1b ff ff       	call   c000b398 <Bus::Bus(char const*)>
c0019813:	83 c4 10             	add    esp,0x10
c0019816:	ba 0c 11 02 c0       	mov    edx,0xc002110c
c001981b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001981f:	89 10                	mov    DWORD PTR [eax],edx
c0019821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019825:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001982f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019833:	a3 40 7b 02 c0       	mov    ds:0xc0027b40,eax
c0019838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001983c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019842:	31 d2                	xor    edx,edx
c0019844:	88 c2                	mov    dl,al
c0019846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001984a:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0019851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019855:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001985b:	31 d2                	xor    edx,edx
c001985d:	88 c2                	mov    dl,al
c001985f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019863:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0019868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001986c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019872:	8d 50 01             	lea    edx,[eax+0x1]
c0019875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001987f:	31 d2                	xor    edx,edx
c0019881:	88 c2                	mov    dl,al
c0019883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019887:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001988b:	83 c9 c0             	or     ecx,0xffffffc0
c001988e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0019892:	90                   	nop
c0019893:	83 c4 0c             	add    esp,0xc
c0019896:	c3                   	ret    
c0019897:	90                   	nop

c0019898 <PCI::readBAR8(unsigned int, int)>:
c0019898:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001989c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198a0:	f6 c2 01             	test   dl,0x1
c00198a3:	74 07                	je     c00198ac <PCI::readBAR8(unsigned int, int)+0x14>
c00198a5:	83 e2 fc             	and    edx,0xfffffffc
c00198a8:	01 c2                	add    edx,eax
c00198aa:	ec                   	in     al,dx
c00198ab:	c3                   	ret    
c00198ac:	83 e2 f0             	and    edx,0xfffffff0
c00198af:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00198b2:	c3                   	ret    
c00198b3:	90                   	nop

c00198b4 <PCI::readBAR16(unsigned int, int)>:
c00198b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00198b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198bc:	f6 c2 01             	test   dl,0x1
c00198bf:	74 08                	je     c00198c9 <PCI::readBAR16(unsigned int, int)+0x15>
c00198c1:	83 e2 fc             	and    edx,0xfffffffc
c00198c4:	01 c2                	add    edx,eax
c00198c6:	66 ed                	in     ax,dx
c00198c8:	c3                   	ret    
c00198c9:	83 e2 f0             	and    edx,0xfffffff0
c00198cc:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00198d0:	c3                   	ret    
c00198d1:	90                   	nop

c00198d2 <PCI::readBAR32(unsigned int, int)>:
c00198d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00198d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198da:	f6 c2 01             	test   dl,0x1
c00198dd:	74 07                	je     c00198e6 <PCI::readBAR32(unsigned int, int)+0x14>
c00198df:	83 e2 fc             	and    edx,0xfffffffc
c00198e2:	01 c2                	add    edx,eax
c00198e4:	ed                   	in     eax,dx
c00198e5:	c3                   	ret    
c00198e6:	83 e2 f0             	and    edx,0xfffffff0
c00198e9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00198ec:	c3                   	ret    
c00198ed:	90                   	nop

c00198ee <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00198ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00198f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00198fa:	f6 c2 01             	test   dl,0x1
c00198fd:	74 07                	je     c0019906 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00198ff:	83 e2 fc             	and    edx,0xfffffffc
c0019902:	01 ca                	add    edx,ecx
c0019904:	ee                   	out    dx,al
c0019905:	c3                   	ret    
c0019906:	83 e2 f0             	and    edx,0xfffffff0
c0019909:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001990c:	c3                   	ret    
c001990d:	90                   	nop

c001990e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001990e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019912:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019916:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001991a:	f6 c2 01             	test   dl,0x1
c001991d:	74 08                	je     c0019927 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001991f:	83 e2 fc             	and    edx,0xfffffffc
c0019922:	01 ca                	add    edx,ecx
c0019924:	66 ef                	out    dx,ax
c0019926:	c3                   	ret    
c0019927:	83 e2 f0             	and    edx,0xfffffff0
c001992a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001992e:	c3                   	ret    
c001992f:	90                   	nop

c0019930 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0019930:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019934:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019938:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001993c:	f6 c2 01             	test   dl,0x1
c001993f:	74 07                	je     c0019948 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0019941:	83 e2 fc             	and    edx,0xfffffffc
c0019944:	01 ca                	add    edx,ecx
c0019946:	ef                   	out    dx,eax
c0019947:	c3                   	ret    
c0019948:	83 e2 f0             	and    edx,0xfffffff0
c001994b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001994e:	c3                   	ret    
c001994f:	90                   	nop

c0019950 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019950:	55                   	push   ebp
c0019951:	57                   	push   edi
c0019952:	56                   	push   esi
c0019953:	53                   	push   ebx
c0019954:	83 ec 0c             	sub    esp,0xc
c0019957:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001995b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001995f:	89 f0                	mov    eax,esi
c0019961:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0019965:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019969:	3c 07                	cmp    al,0x7
c001996b:	76 10                	jbe    c001997d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001996d:	83 ec 0c             	sub    esp,0xc
c0019970:	68 6b 10 02 c0       	push   0xc002106b
c0019975:	e8 4d 6a ff ff       	call   c00103c7 <KePanic(char const*)>
c001997a:	83 c4 10             	add    esp,0x10
c001997d:	80 fb 0f             	cmp    bl,0xf
c0019980:	76 10                	jbe    c0019992 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0019982:	83 ec 0c             	sub    esp,0xc
c0019985:	68 9b 10 02 c0       	push   0xc002109b
c001998a:	e8 38 6a ff ff       	call   c00103c7 <KePanic(char const*)>
c001998f:	83 c4 10             	add    esp,0x10
c0019992:	8d 04 36             	lea    eax,[esi+esi*1]
c0019995:	ba f8 0c 00 00       	mov    edx,0xcf8
c001999a:	83 c8 f0             	or     eax,0xfffffff0
c001999d:	ee                   	out    dx,al
c001999e:	ba fa 0c 00 00       	mov    edx,0xcfa
c00199a3:	89 e8                	mov    eax,ebp
c00199a5:	ee                   	out    dx,al
c00199a6:	83 c4 0c             	add    esp,0xc
c00199a9:	89 d8                	mov    eax,ebx
c00199ab:	66 81 e7 fc 00       	and    di,0xfc
c00199b0:	5b                   	pop    ebx
c00199b1:	c1 e0 08             	shl    eax,0x8
c00199b4:	5e                   	pop    esi
c00199b5:	09 f8                	or     eax,edi
c00199b7:	5f                   	pop    edi
c00199b8:	66 0d 00 c0          	or     ax,0xc000
c00199bc:	5d                   	pop    ebp
c00199bd:	c3                   	ret    

c00199be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00199be:	57                   	push   edi
c00199bf:	56                   	push   esi
c00199c0:	53                   	push   ebx
c00199c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00199c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00199c9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00199cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00199d3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00199d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00199db:	83 ff 01             	cmp    edi,0x1
c00199de:	75 3e                	jne    c0019a1e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00199e0:	89 de                	mov    esi,ebx
c00199e2:	0f b6 c0             	movzx  eax,al
c00199e5:	81 e6 fc 00 00 00    	and    esi,0xfc
c00199eb:	c1 e0 10             	shl    eax,0x10
c00199ee:	0f b6 c9             	movzx  ecx,cl
c00199f1:	09 f0                	or     eax,esi
c00199f3:	c1 e1 08             	shl    ecx,0x8
c00199f6:	0f b6 d2             	movzx  edx,dl
c00199f9:	09 c8                	or     eax,ecx
c00199fb:	c1 e2 0b             	shl    edx,0xb
c00199fe:	09 d0                	or     eax,edx
c0019a00:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019a05:	0d 00 00 00 80       	or     eax,0x80000000
c0019a0a:	ef                   	out    dx,eax
c0019a0b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019a10:	ed                   	in     eax,dx
c0019a11:	83 e3 02             	and    ebx,0x2
c0019a14:	0f b6 cb             	movzx  ecx,bl
c0019a17:	c1 e1 03             	shl    ecx,0x3
c0019a1a:	d3 e8                	shr    eax,cl
c0019a1c:	eb 43                	jmp    c0019a61 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0019a1e:	83 ff 02             	cmp    edi,0x2
c0019a21:	75 2c                	jne    c0019a4f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0019a23:	83 ec 0c             	sub    esp,0xc
c0019a26:	0f b6 c9             	movzx  ecx,cl
c0019a29:	0f b6 d2             	movzx  edx,dl
c0019a2c:	0f b6 fb             	movzx  edi,bl
c0019a2f:	0f b6 c0             	movzx  eax,al
c0019a32:	57                   	push   edi
c0019a33:	51                   	push   ecx
c0019a34:	52                   	push   edx
c0019a35:	50                   	push   eax
c0019a36:	56                   	push   esi
c0019a37:	e8 14 ff ff ff       	call   c0019950 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019a3c:	89 c2                	mov    edx,eax
c0019a3e:	ed                   	in     eax,dx
c0019a3f:	83 e3 02             	and    ebx,0x2
c0019a42:	83 c4 20             	add    esp,0x20
c0019a45:	0f b6 cb             	movzx  ecx,bl
c0019a48:	c1 e1 03             	shl    ecx,0x3
c0019a4b:	d3 e8                	shr    eax,cl
c0019a4d:	eb 12                	jmp    c0019a61 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0019a4f:	83 ec 0c             	sub    esp,0xc
c0019a52:	68 cb 10 02 c0       	push   0xc00210cb
c0019a57:	e8 6b 69 ff ff       	call   c00103c7 <KePanic(char const*)>
c0019a5c:	83 c4 10             	add    esp,0x10
c0019a5f:	31 c0                	xor    eax,eax
c0019a61:	5b                   	pop    ebx
c0019a62:	5e                   	pop    esi
c0019a63:	5f                   	pop    edi
c0019a64:	c3                   	ret    
c0019a65:	90                   	nop

c0019a66 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0019a66:	83 ec 18             	sub    esp,0x18
c0019a69:	6a 00                	push   0x0
c0019a6b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019a70:	50                   	push   eax
c0019a71:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019a76:	50                   	push   eax
c0019a77:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019a7c:	50                   	push   eax
c0019a7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019a81:	e8 38 ff ff ff       	call   c00199be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019a86:	83 c4 2c             	add    esp,0x2c
c0019a89:	c3                   	ret    

c0019a8a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0019a8a:	83 ec 18             	sub    esp,0x18
c0019a8d:	6a 0e                	push   0xe
c0019a8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019a94:	50                   	push   eax
c0019a95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019a9a:	50                   	push   eax
c0019a9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019aa0:	50                   	push   eax
c0019aa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019aa5:	e8 14 ff ff ff       	call   c00199be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019aaa:	83 c4 2c             	add    esp,0x2c
c0019aad:	0f b6 c0             	movzx  eax,al
c0019ab0:	c3                   	ret    
c0019ab1:	90                   	nop

c0019ab2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0019ab2:	55                   	push   ebp
c0019ab3:	57                   	push   edi
c0019ab4:	56                   	push   esi
c0019ab5:	53                   	push   ebx
c0019ab6:	83 ec 18             	sub    esp,0x18
c0019ab9:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0019abe:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0019ac3:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0019ac8:	6a 0a                	push   0xa
c0019aca:	56                   	push   esi
c0019acb:	55                   	push   ebp
c0019acc:	57                   	push   edi
c0019acd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019ad1:	e8 e8 fe ff ff       	call   c00199be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019ad6:	83 c4 14             	add    esp,0x14
c0019ad9:	89 c3                	mov    ebx,eax
c0019adb:	6a 0a                	push   0xa
c0019add:	0f b6 db             	movzx  ebx,bl
c0019ae0:	56                   	push   esi
c0019ae1:	55                   	push   ebp
c0019ae2:	57                   	push   edi
c0019ae3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019ae7:	e8 d2 fe ff ff       	call   c00199be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019aec:	83 c4 2c             	add    esp,0x2c
c0019aef:	25 00 ff 00 00       	and    eax,0xff00
c0019af4:	09 d8                	or     eax,ebx
c0019af6:	5b                   	pop    ebx
c0019af7:	5e                   	pop    esi
c0019af8:	5f                   	pop    edi
c0019af9:	5d                   	pop    ebp
c0019afa:	c3                   	ret    
c0019afb:	90                   	nop

c0019afc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0019afc:	83 ec 18             	sub    esp,0x18
c0019aff:	6a 08                	push   0x8
c0019b01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b06:	50                   	push   eax
c0019b07:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b0c:	50                   	push   eax
c0019b0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b12:	50                   	push   eax
c0019b13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019b17:	e8 a2 fe ff ff       	call   c00199be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019b1c:	83 c4 2c             	add    esp,0x2c
c0019b1f:	0f b6 c4             	movzx  eax,ah
c0019b22:	c3                   	ret    
c0019b23:	90                   	nop

c0019b24 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0019b24:	83 ec 18             	sub    esp,0x18
c0019b27:	6a 08                	push   0x8
c0019b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b2e:	50                   	push   eax
c0019b2f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b34:	50                   	push   eax
c0019b35:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b3a:	50                   	push   eax
c0019b3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019b3f:	e8 7a fe ff ff       	call   c00199be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019b44:	83 c4 2c             	add    esp,0x2c
c0019b47:	c3                   	ret    

c0019b48 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0019b48:	83 ec 18             	sub    esp,0x18
c0019b4b:	6a 3c                	push   0x3c
c0019b4d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b52:	50                   	push   eax
c0019b53:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b58:	50                   	push   eax
c0019b59:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b5e:	50                   	push   eax
c0019b5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019b63:	e8 56 fe ff ff       	call   c00199be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019b68:	83 c4 2c             	add    esp,0x2c
c0019b6b:	c3                   	ret    

c0019b6c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0019b6c:	83 ec 18             	sub    esp,0x18
c0019b6f:	6a 18                	push   0x18
c0019b71:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b76:	50                   	push   eax
c0019b77:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b7c:	50                   	push   eax
c0019b7d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b82:	50                   	push   eax
c0019b83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019b87:	e8 32 fe ff ff       	call   c00199be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019b8c:	83 c4 2c             	add    esp,0x2c
c0019b8f:	0f b6 c4             	movzx  eax,ah
c0019b92:	c3                   	ret    
c0019b93:	90                   	nop

c0019b94 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019b94:	55                   	push   ebp
c0019b95:	57                   	push   edi
c0019b96:	56                   	push   esi
c0019b97:	53                   	push   ebx
c0019b98:	83 ec 28             	sub    esp,0x28
c0019b9b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0019b9f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0019ba4:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0019ba9:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0019bae:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0019bb5:	8d 43 12             	lea    eax,[ebx+0x12]
c0019bb8:	83 c3 10             	add    ebx,0x10
c0019bbb:	0f b6 c0             	movzx  eax,al
c0019bbe:	0f b6 db             	movzx  ebx,bl
c0019bc1:	50                   	push   eax
c0019bc2:	51                   	push   ecx
c0019bc3:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0019bc7:	57                   	push   edi
c0019bc8:	55                   	push   ebp
c0019bc9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019bcd:	e8 ec fd ff ff       	call   c00199be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019bd2:	83 c4 14             	add    esp,0x14
c0019bd5:	89 c6                	mov    esi,eax
c0019bd7:	53                   	push   ebx
c0019bd8:	c1 e6 10             	shl    esi,0x10
c0019bdb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019bdf:	51                   	push   ecx
c0019be0:	57                   	push   edi
c0019be1:	55                   	push   ebp
c0019be2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019be6:	e8 d3 fd ff ff       	call   c00199be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019beb:	83 c4 3c             	add    esp,0x3c
c0019bee:	0f b7 c0             	movzx  eax,ax
c0019bf1:	5b                   	pop    ebx
c0019bf2:	09 f0                	or     eax,esi
c0019bf4:	5e                   	pop    esi
c0019bf5:	5f                   	pop    edi
c0019bf6:	5d                   	pop    ebp
c0019bf7:	c3                   	ret    

c0019bf8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0019bf8:	55                   	push   ebp
c0019bf9:	57                   	push   edi
c0019bfa:	56                   	push   esi
c0019bfb:	53                   	push   ebx
c0019bfc:	83 ec 0c             	sub    esp,0xc
c0019bff:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019c03:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019c07:	89 f5                	mov    ebp,esi
c0019c09:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0019c0f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019c13:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019c17:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019c1b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019c1f:	83 f9 01             	cmp    ecx,0x1
c0019c22:	75 5d                	jne    c0019c81 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0019c24:	0f b6 c8             	movzx  ecx,al
c0019c27:	0f b6 d2             	movzx  edx,dl
c0019c2a:	c1 e1 10             	shl    ecx,0x10
c0019c2d:	c1 e2 0b             	shl    edx,0xb
c0019c30:	89 f0                	mov    eax,esi
c0019c32:	25 fc 00 00 00       	and    eax,0xfc
c0019c37:	09 c1                	or     ecx,eax
c0019c39:	89 e8                	mov    eax,ebp
c0019c3b:	0f b6 c0             	movzx  eax,al
c0019c3e:	c1 e0 08             	shl    eax,0x8
c0019c41:	09 c1                	or     ecx,eax
c0019c43:	09 d1                	or     ecx,edx
c0019c45:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019c4a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0019c50:	89 c8                	mov    eax,ecx
c0019c52:	ef                   	out    dx,eax
c0019c53:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019c58:	ed                   	in     eax,dx
c0019c59:	0f b7 db             	movzx  ebx,bx
c0019c5c:	83 e6 02             	and    esi,0x2
c0019c5f:	74 0a                	je     c0019c6b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0019c61:	0f b7 d0             	movzx  edx,ax
c0019c64:	c1 e3 10             	shl    ebx,0x10
c0019c67:	09 d3                	or     ebx,edx
c0019c69:	eb 05                	jmp    c0019c70 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0019c6b:	66 31 c0             	xor    ax,ax
c0019c6e:	09 c3                	or     ebx,eax
c0019c70:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019c75:	89 c8                	mov    eax,ecx
c0019c77:	ef                   	out    dx,eax
c0019c78:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019c7d:	89 d8                	mov    eax,ebx
c0019c7f:	eb 41                	jmp    c0019cc2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0019c81:	83 f9 02             	cmp    ecx,0x2
c0019c84:	75 45                	jne    c0019ccb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0019c86:	83 ec 0c             	sub    esp,0xc
c0019c89:	0f b6 d2             	movzx  edx,dl
c0019c8c:	89 f1                	mov    ecx,esi
c0019c8e:	0f b6 c0             	movzx  eax,al
c0019c91:	0f b6 f1             	movzx  esi,cl
c0019c94:	89 e9                	mov    ecx,ebp
c0019c96:	56                   	push   esi
c0019c97:	0f b6 c9             	movzx  ecx,cl
c0019c9a:	51                   	push   ecx
c0019c9b:	52                   	push   edx
c0019c9c:	50                   	push   eax
c0019c9d:	57                   	push   edi
c0019c9e:	e8 ad fc ff ff       	call   c0019950 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019ca3:	89 c2                	mov    edx,eax
c0019ca5:	ed                   	in     eax,dx
c0019ca6:	83 c4 20             	add    esp,0x20
c0019ca9:	0f b7 db             	movzx  ebx,bx
c0019cac:	f6 c2 02             	test   dl,0x2
c0019caf:	74 0c                	je     c0019cbd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0019cb1:	0f b7 c8             	movzx  ecx,ax
c0019cb4:	89 d8                	mov    eax,ebx
c0019cb6:	c1 e0 10             	shl    eax,0x10
c0019cb9:	09 c8                	or     eax,ecx
c0019cbb:	eb 05                	jmp    c0019cc2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0019cbd:	66 31 c0             	xor    ax,ax
c0019cc0:	09 d8                	or     eax,ebx
c0019cc2:	ef                   	out    dx,eax
c0019cc3:	83 c4 0c             	add    esp,0xc
c0019cc6:	5b                   	pop    ebx
c0019cc7:	5e                   	pop    esi
c0019cc8:	5f                   	pop    edi
c0019cc9:	5d                   	pop    ebp
c0019cca:	c3                   	ret    
c0019ccb:	c7 44 24 20 cb 10 02 c0 	mov    DWORD PTR [esp+0x20],0xc00210cb
c0019cd3:	83 c4 0c             	add    esp,0xc
c0019cd6:	5b                   	pop    ebx
c0019cd7:	5e                   	pop    esi
c0019cd8:	5f                   	pop    edi
c0019cd9:	5d                   	pop    ebp
c0019cda:	e9 e8 66 ff ff       	jmp    c00103c7 <KePanic(char const*)>
c0019cdf:	90                   	nop

c0019ce0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0019ce0:	55                   	push   ebp
c0019ce1:	57                   	push   edi
c0019ce2:	56                   	push   esi
c0019ce3:	53                   	push   ebx
c0019ce4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019cea:	80 3d 4c 7b 02 c0 00 	cmp    BYTE PTR ds:0xc0027b4c,0x0
c0019cf1:	0f 85 bd 00 00 00    	jne    c0019db4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xd4>
c0019cf7:	83 ec 0c             	sub    esp,0xc
c0019cfa:	68 14 01 00 00       	push   0x114
c0019cff:	e8 61 db fe ff       	call   c0007865 <malloc>
c0019d04:	83 c4 0c             	add    esp,0xc
c0019d07:	89 c3                	mov    ebx,eax
c0019d09:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0019d0f:	68 d1 10 02 c0       	push   0xc00210d1
c0019d14:	50                   	push   eax
c0019d15:	e8 62 0e ff ff       	call   c000ab7c <File::File(char const*, Process*)>
c0019d1a:	83 c4 10             	add    esp,0x10
c0019d1d:	85 db                	test   ebx,ebx
c0019d1f:	0f 84 47 02 00 00    	je     c0019f6c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019d25:	56                   	push   esi
c0019d26:	56                   	push   esi
c0019d27:	6a 01                	push   0x1
c0019d29:	53                   	push   ebx
c0019d2a:	e8 0d 0f ff ff       	call   c000ac3c <File::open(FileOpenMode)>
c0019d2f:	83 c4 10             	add    esp,0x10
c0019d32:	85 c0                	test   eax,eax
c0019d34:	0f 85 32 02 00 00    	jne    c0019f6c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019d3a:	52                   	push   edx
c0019d3b:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0019d3f:	50                   	push   eax
c0019d40:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019d44:	50                   	push   eax
c0019d45:	53                   	push   ebx
c0019d46:	e8 9d 11 ff ff       	call   c000aee8 <File::stat(unsigned long long*, bool*)>
c0019d4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019d4f:	40                   	inc    eax
c0019d50:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d53:	e8 0d db fe ff       	call   c0007865 <malloc>
c0019d58:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019d5c:	a3 48 7b 02 c0       	mov    ds:0xc0027b48,eax
c0019d61:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0019d65:	59                   	pop    ecx
c0019d66:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019d68:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0019d6c:	51                   	push   ecx
c0019d6d:	50                   	push   eax
c0019d6e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019d72:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019d76:	53                   	push   ebx
c0019d77:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019d7a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0019d7e:	83 c4 20             	add    esp,0x20
c0019d81:	89 c8                	mov    eax,ecx
c0019d83:	99                   	cdq    
c0019d84:	3b 54 24 24          	cmp    edx,DWORD PTR [esp+0x24]
c0019d88:	0f 85 de 01 00 00    	jne    c0019f6c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019d8e:	3b 4c 24 20          	cmp    ecx,DWORD PTR [esp+0x20]
c0019d92:	0f 85 d4 01 00 00    	jne    c0019f6c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019d98:	83 ec 0c             	sub    esp,0xc
c0019d9b:	53                   	push   ebx
c0019d9c:	e8 f9 0e ff ff       	call   c000ac9a <File::close()>
c0019da1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019da5:	c6 05 4c 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027b4c,0x1
c0019dac:	a3 44 7b 02 c0       	mov    ds:0xc0027b44,eax
c0019db1:	83 c4 10             	add    esp,0x10
c0019db4:	a1 44 7b 02 c0       	mov    eax,ds:0xc0027b44
c0019db9:	8b 15 48 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b48
c0019dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0019dc2:	31 ff                	xor    edi,edi
c0019dc4:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0019dcc:	31 f6                	xor    esi,esi
c0019dce:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0019dd3:	31 db                	xor    ebx,ebx
c0019dd5:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0019ddd:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0019de2:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0019de9:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0019ded:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0019df4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0019df8:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0019dfb:	0f 8e 6b 01 00 00    	jle    c0019f6c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019e01:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0019e04:	d4 40                	aam    0x40
c0019e06:	d5 39                	aad    0x39
c0019e08:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019e0c:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0019e10:	d4 40                	aam    0x40
c0019e12:	d5 39                	aad    0x39
c0019e14:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019e18:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0019e1c:	d4 40                	aam    0x40
c0019e1e:	d5 39                	aad    0x39
c0019e20:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019e24:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0019e28:	d4 40                	aam    0x40
c0019e2a:	d5 39                	aad    0x39
c0019e2c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019e30:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0019e34:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0019e38:	3c 56                	cmp    al,0x56
c0019e3a:	74 45                	je     c0019e81 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a1>
c0019e3c:	d4 40                	aam    0x40
c0019e3e:	d5 39                	aad    0x39
c0019e40:	8d 48 d0             	lea    ecx,[eax-0x30]
c0019e43:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0019e47:	0f b6 c9             	movzx  ecx,cl
c0019e4a:	c1 e1 04             	shl    ecx,0x4
c0019e4d:	d4 40                	aam    0x40
c0019e4f:	d5 39                	aad    0x39
c0019e51:	8d 58 d0             	lea    ebx,[eax-0x30]
c0019e54:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0019e58:	0f b6 db             	movzx  ebx,bl
c0019e5b:	09 cb                	or     ebx,ecx
c0019e5d:	c1 e3 04             	shl    ebx,0x4
c0019e60:	d4 40                	aam    0x40
c0019e62:	d5 39                	aad    0x39
c0019e64:	8d 48 d0             	lea    ecx,[eax-0x30]
c0019e67:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0019e6b:	0f b6 c9             	movzx  ecx,cl
c0019e6e:	09 cb                	or     ebx,ecx
c0019e70:	c1 e3 04             	shl    ebx,0x4
c0019e73:	89 d9                	mov    ecx,ebx
c0019e75:	d4 40                	aam    0x40
c0019e77:	d5 39                	aad    0x39
c0019e79:	8d 58 d0             	lea    ebx,[eax-0x30]
c0019e7c:	0f b6 db             	movzx  ebx,bl
c0019e7f:	09 cb                	or     ebx,ecx
c0019e81:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0019e85:	80 f9 58             	cmp    cl,0x58
c0019e88:	74 47                	je     c0019ed1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f1>
c0019e8a:	88 c8                	mov    al,cl
c0019e8c:	d4 40                	aam    0x40
c0019e8e:	d5 39                	aad    0x39
c0019e90:	83 e8 30             	sub    eax,0x30
c0019e93:	0f b6 e8             	movzx  ebp,al
c0019e96:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0019e9a:	c1 e5 04             	shl    ebp,0x4
c0019e9d:	d4 40                	aam    0x40
c0019e9f:	d5 39                	aad    0x39
c0019ea1:	83 e8 30             	sub    eax,0x30
c0019ea4:	0f b6 f0             	movzx  esi,al
c0019ea7:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0019eab:	09 ee                	or     esi,ebp
c0019ead:	c1 e6 04             	shl    esi,0x4
c0019eb0:	d4 40                	aam    0x40
c0019eb2:	d5 39                	aad    0x39
c0019eb4:	83 e8 30             	sub    eax,0x30
c0019eb7:	0f b6 e8             	movzx  ebp,al
c0019eba:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0019ebe:	09 ee                	or     esi,ebp
c0019ec0:	c1 e6 04             	shl    esi,0x4
c0019ec3:	89 f5                	mov    ebp,esi
c0019ec5:	d4 40                	aam    0x40
c0019ec7:	d5 39                	aad    0x39
c0019ec9:	83 e8 30             	sub    eax,0x30
c0019ecc:	0f b6 f0             	movzx  esi,al
c0019ecf:	09 ee                	or     esi,ebp
c0019ed1:	83 c7 10             	add    edi,0x10
c0019ed4:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0019ed8:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0019edb:	3c 0a                	cmp    al,0xa
c0019edd:	74 09                	je     c0019ee8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x208>
c0019edf:	45                   	inc    ebp
c0019ee0:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0019ee3:	75 16                	jne    c0019efb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x21b>
c0019ee5:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0019ee8:	3c 0a                	cmp    al,0xa
c0019eea:	0f 94 c0             	sete   al
c0019eed:	0f b6 c0             	movzx  eax,al
c0019ef0:	01 c7                	add    edi,eax
c0019ef2:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0019ef7:	75 0c                	jne    c0019f05 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x225>
c0019ef9:	eb 15                	jmp    c0019f10 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x230>
c0019efb:	47                   	inc    edi
c0019efc:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0019eff:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0019f03:	eb d3                	jmp    c0019ed8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f8>
c0019f05:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0019f0a:	0f 85 e8 fe ff ff    	jne    c0019df8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c0019f10:	80 f9 58             	cmp    cl,0x58
c0019f13:	74 0b                	je     c0019f20 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x240>
c0019f15:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0019f1a:	0f 85 d8 fe ff ff    	jne    c0019df8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c0019f20:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0019f24:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019f28:	c1 e1 04             	shl    ecx,0x4
c0019f2b:	83 e8 30             	sub    eax,0x30
c0019f2e:	09 c8                	or     eax,ecx
c0019f30:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0019f34:	0f 85 be fe ff ff    	jne    c0019df8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c0019f3a:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0019f3e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019f42:	c1 e1 04             	shl    ecx,0x4
c0019f45:	83 e8 30             	sub    eax,0x30
c0019f48:	09 c8                	or     eax,ecx
c0019f4a:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0019f4e:	0f 85 a4 fe ff ff    	jne    c0019df8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c0019f54:	50                   	push   eax
c0019f55:	50                   	push   eax
c0019f56:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019f5a:	50                   	push   eax
c0019f5b:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0019f62:	e8 89 66 fe ff       	call   c00005f0 <strcpy>
c0019f67:	83 c4 10             	add    esp,0x10
c0019f6a:	eb 15                	jmp    c0019f81 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a1>
c0019f6c:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0019f73:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0019f7e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019f81:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0019f88:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019f8e:	5b                   	pop    ebx
c0019f8f:	5e                   	pop    esi
c0019f90:	5f                   	pop    edi
c0019f91:	5d                   	pop    ebp
c0019f92:	c3                   	ret    
c0019f93:	90                   	nop

c0019f94 <PCI::checkBus(unsigned char)>:
c0019f94:	56                   	push   esi
c0019f95:	53                   	push   ebx
c0019f96:	31 f6                	xor    esi,esi
c0019f98:	51                   	push   ecx
c0019f99:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0019f9d:	0f b6 c3             	movzx  eax,bl
c0019fa0:	52                   	push   edx
c0019fa1:	56                   	push   esi
c0019fa2:	46                   	inc    esi
c0019fa3:	50                   	push   eax
c0019fa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fa8:	e8 f3 02 00 00       	call   c001a2a0 <PCI::checkDevice(unsigned char, unsigned char)>
c0019fad:	83 c4 10             	add    esp,0x10
c0019fb0:	83 fe 20             	cmp    esi,0x20
c0019fb3:	75 e8                	jne    c0019f9d <PCI::checkBus(unsigned char)+0x9>
c0019fb5:	58                   	pop    eax
c0019fb6:	5b                   	pop    ebx
c0019fb7:	5e                   	pop    esi
c0019fb8:	c3                   	ret    
c0019fb9:	90                   	nop

c0019fba <PCI::foundDevice(PCIDeviceInfo)>:
c0019fba:	55                   	push   ebp
c0019fbb:	57                   	push   edi
c0019fbc:	56                   	push   esi
c0019fbd:	53                   	push   ebx
c0019fbe:	83 ec 1c             	sub    esp,0x1c
c0019fc1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019fc5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0019fcb:	0f 84 52 01 00 00    	je     c001a123 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0019fd1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0019fd5:	66 81 f9 06 04       	cmp    cx,0x406
c0019fda:	75 2c                	jne    c001a008 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0019fdc:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0019fe1:	50                   	push   eax
c0019fe2:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0019fe7:	50                   	push   eax
c0019fe8:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0019fed:	50                   	push   eax
c0019fee:	56                   	push   esi
c0019fef:	e8 78 fb ff ff       	call   c0019b6c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0019ff4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0019ff8:	0f b6 c0             	movzx  eax,al
c0019ffb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0019fff:	83 c4 2c             	add    esp,0x2c
c001a002:	5b                   	pop    ebx
c001a003:	5e                   	pop    esi
c001a004:	5f                   	pop    edi
c001a005:	5d                   	pop    ebp
c001a006:	eb 8c                	jmp    c0019f94 <PCI::checkBus(unsigned char)>
c001a008:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001a00c:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001a012:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a016:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001a01a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001a01e:	88 d3                	mov    bl,dl
c001a020:	85 c0                	test   eax,eax
c001a022:	74 33                	je     c001a057 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a024:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a027:	85 d2                	test   edx,edx
c001a029:	74 28                	je     c001a053 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001a02b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001a031:	31 ef                	xor    edi,ebp
c001a033:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001a039:	75 18                	jne    c001a053 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001a03b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001a03f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001a045:	75 0c                	jne    c001a053 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001a047:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001a04d:	0f 84 d0 00 00 00    	je     c001a123 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001a053:	8b 00                	mov    eax,DWORD PTR [eax]
c001a055:	eb c9                	jmp    c001a020 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001a057:	66 81 f9 01 06       	cmp    cx,0x601
c001a05c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001a060:	75 19                	jne    c001a07b <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001a062:	83 ec 0c             	sub    esp,0xc
c001a065:	68 64 01 00 00       	push   0x164
c001a06a:	e8 f6 d7 fe ff       	call   c0007865 <malloc>
c001a06f:	89 c5                	mov    ebp,eax
c001a071:	89 04 24             	mov    DWORD PTR [esp],eax
c001a074:	e8 47 0e 00 00       	call   c001aec0 <SATABus::SATABus()>
c001a079:	eb 1e                	jmp    c001a099 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001a07b:	66 81 f9 01 01       	cmp    cx,0x101
c001a080:	75 60                	jne    c001a0e2 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001a082:	83 ec 0c             	sub    esp,0xc
c001a085:	68 70 02 00 00       	push   0x270
c001a08a:	e8 d6 d7 fe ff       	call   c0007865 <malloc>
c001a08f:	89 c5                	mov    ebp,eax
c001a091:	89 04 24             	mov    DWORD PTR [esp],eax
c001a094:	e8 cb 02 00 00       	call   c001a364 <IDE::IDE()>
c001a099:	58                   	pop    eax
c001a09a:	5a                   	pop    edx
c001a09b:	55                   	push   ebp
c001a09c:	56                   	push   esi
c001a09d:	e8 a2 19 ff ff       	call   c000ba44 <Device::addChild(Device*)>
c001a0a2:	83 ec 1c             	sub    esp,0x1c
c001a0a5:	b9 09 00 00 00       	mov    ecx,0x9
c001a0aa:	fc                   	cld    
c001a0ab:	89 e7                	mov    edi,esp
c001a0ad:	89 de                	mov    esi,ebx
c001a0af:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a0b1:	55                   	push   ebp
c001a0b2:	e8 d3 18 ff ff       	call   c000b98a <Device::preOpenPCI(PCIDeviceInfo)>
c001a0b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a0ba:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a0be:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a0c6:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a0ce:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a0d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001a0d9:	83 c4 4c             	add    esp,0x4c
c001a0dc:	5b                   	pop    ebx
c001a0dd:	5e                   	pop    esi
c001a0de:	5f                   	pop    edi
c001a0df:	5d                   	pop    ebp
c001a0e0:	ff e0                	jmp    eax
c001a0e2:	83 ec 0c             	sub    esp,0xc
c001a0e5:	68 58 01 00 00       	push   0x158
c001a0ea:	e8 76 d7 fe ff       	call   c0007865 <malloc>
c001a0ef:	89 c5                	mov    ebp,eax
c001a0f1:	58                   	pop    eax
c001a0f2:	5a                   	pop    edx
c001a0f3:	68 ea 10 02 c0       	push   0xc00210ea
c001a0f8:	55                   	push   ebp
c001a0f9:	e8 e4 1b ff ff       	call   c000bce2 <DriverlessDevice::DriverlessDevice(char const*)>
c001a0fe:	59                   	pop    ecx
c001a0ff:	5f                   	pop    edi
c001a100:	55                   	push   ebp
c001a101:	56                   	push   esi
c001a102:	e8 3d 19 ff ff       	call   c000ba44 <Device::addChild(Device*)>
c001a107:	b9 09 00 00 00       	mov    ecx,0x9
c001a10c:	fc                   	cld    
c001a10d:	89 df                	mov    edi,ebx
c001a10f:	89 de                	mov    esi,ebx
c001a111:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a113:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001a117:	83 c4 2c             	add    esp,0x2c
c001a11a:	5b                   	pop    ebx
c001a11b:	5e                   	pop    esi
c001a11c:	5f                   	pop    edi
c001a11d:	5d                   	pop    ebp
c001a11e:	e9 67 18 ff ff       	jmp    c000b98a <Device::preOpenPCI(PCIDeviceInfo)>
c001a123:	83 c4 1c             	add    esp,0x1c
c001a126:	5b                   	pop    ebx
c001a127:	5e                   	pop    esi
c001a128:	5f                   	pop    edi
c001a129:	5d                   	pop    ebp
c001a12a:	c3                   	ret    
c001a12b:	90                   	nop

c001a12c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a12c:	55                   	push   ebp
c001a12d:	57                   	push   edi
c001a12e:	56                   	push   esi
c001a12f:	53                   	push   ebx
c001a130:	83 ec 68             	sub    esp,0x68
c001a133:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001a137:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a13e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a142:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a149:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001a14e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a152:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a159:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c001a15e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a162:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001a167:	6a 0c                	push   0xc
c001a169:	57                   	push   edi
c001a16a:	53                   	push   ebx
c001a16b:	56                   	push   esi
c001a16c:	55                   	push   ebp
c001a16d:	e8 4c f8 ff ff       	call   c00199be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a172:	83 c4 20             	add    esp,0x20
c001a175:	57                   	push   edi
c001a176:	53                   	push   ebx
c001a177:	56                   	push   esi
c001a178:	55                   	push   ebp
c001a179:	e8 34 f9 ff ff       	call   c0019ab2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a17e:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001a183:	57                   	push   edi
c001a184:	53                   	push   ebx
c001a185:	56                   	push   esi
c001a186:	55                   	push   ebp
c001a187:	e8 bc f9 ff ff       	call   c0019b48 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001a18c:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001a190:	83 c4 14             	add    esp,0x14
c001a193:	6a 3c                	push   0x3c
c001a195:	57                   	push   edi
c001a196:	53                   	push   ebx
c001a197:	56                   	push   esi
c001a198:	55                   	push   ebp
c001a199:	e8 20 f8 ff ff       	call   c00199be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a19e:	0f b6 c4             	movzx  eax,ah
c001a1a1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a1a5:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001a1a9:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001a1ad:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001a1b2:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001a1b8:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001a1be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a1c2:	83 c4 20             	add    esp,0x20
c001a1c5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a1ca:	74 30                	je     c001a1fc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001a1cc:	31 c0                	xor    eax,eax
c001a1ce:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001a1d2:	7e 28                	jle    c001a1fc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001a1d4:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001a1dc:	39 cb                	cmp    ebx,ecx
c001a1de:	75 19                	jne    c001a1f9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001a1e0:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001a1e8:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001a1ec:	75 0b                	jne    c001a1f9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001a1ee:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001a1f5:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c001a1f9:	40                   	inc    eax
c001a1fa:	eb d2                	jmp    c001a1ce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001a1fc:	31 d2                	xor    edx,edx
c001a1fe:	83 ec 0c             	sub    esp,0xc
c001a201:	57                   	push   edi
c001a202:	53                   	push   ebx
c001a203:	56                   	push   esi
c001a204:	52                   	push   edx
c001a205:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001a209:	55                   	push   ebp
c001a20a:	e8 85 f9 ff ff       	call   c0019b94 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a20f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a213:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001a217:	42                   	inc    edx
c001a218:	83 c4 20             	add    esp,0x20
c001a21b:	83 fa 06             	cmp    edx,0x6
c001a21e:	75 de                	jne    c001a1fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001a220:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001a225:	83 ec 0c             	sub    esp,0xc
c001a228:	86 e0                	xchg   al,ah
c001a22a:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001a22f:	6a 02                	push   0x2
c001a231:	57                   	push   edi
c001a232:	53                   	push   ebx
c001a233:	56                   	push   esi
c001a234:	55                   	push   ebp
c001a235:	e8 84 f7 ff ff       	call   c00199be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a23a:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001a23f:	83 c4 20             	add    esp,0x20
c001a242:	57                   	push   edi
c001a243:	53                   	push   ebx
c001a244:	56                   	push   esi
c001a245:	55                   	push   ebp
c001a246:	e8 b1 f8 ff ff       	call   c0019afc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001a24b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001a24f:	57                   	push   edi
c001a250:	53                   	push   ebx
c001a251:	56                   	push   esi
c001a252:	55                   	push   ebp
c001a253:	e8 0e f8 ff ff       	call   c0019a66 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a258:	b9 09 00 00 00       	mov    ecx,0x9
c001a25d:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001a262:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c001a266:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001a26a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001a26e:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001a272:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001a276:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001a27a:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001a27e:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001a282:	83 ec 0c             	sub    esp,0xc
c001a285:	fc                   	cld    
c001a286:	89 e7                	mov    edi,esp
c001a288:	8d 74 24 58          	lea    esi,[esp+0x58]
c001a28c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a28e:	55                   	push   ebp
c001a28f:	e8 26 fd ff ff       	call   c0019fba <PCI::foundDevice(PCIDeviceInfo)>
c001a294:	81 c4 8c 00 00 00    	add    esp,0x8c
c001a29a:	5b                   	pop    ebx
c001a29b:	5e                   	pop    esi
c001a29c:	5f                   	pop    edi
c001a29d:	5d                   	pop    ebp
c001a29e:	c3                   	ret    
c001a29f:	90                   	nop

c001a2a0 <PCI::checkDevice(unsigned char, unsigned char)>:
c001a2a0:	55                   	push   ebp
c001a2a1:	57                   	push   edi
c001a2a2:	56                   	push   esi
c001a2a3:	53                   	push   ebx
c001a2a4:	83 ec 0c             	sub    esp,0xc
c001a2a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a2ab:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001a2b0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001a2b5:	6a 00                	push   0x0
c001a2b7:	56                   	push   esi
c001a2b8:	57                   	push   edi
c001a2b9:	55                   	push   ebp
c001a2ba:	e8 a7 f7 ff ff       	call   c0019a66 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a2bf:	6a 00                	push   0x0
c001a2c1:	56                   	push   esi
c001a2c2:	57                   	push   edi
c001a2c3:	55                   	push   ebp
c001a2c4:	e8 63 fe ff ff       	call   c001a12c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a2c9:	83 c4 20             	add    esp,0x20
c001a2cc:	6a 00                	push   0x0
c001a2ce:	56                   	push   esi
c001a2cf:	57                   	push   edi
c001a2d0:	55                   	push   ebp
c001a2d1:	e8 b4 f7 ff ff       	call   c0019a8a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a2d6:	83 c4 10             	add    esp,0x10
c001a2d9:	84 c0                	test   al,al
c001a2db:	79 27                	jns    c001a304 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001a2dd:	bb 01 00 00 00       	mov    ebx,0x1
c001a2e2:	53                   	push   ebx
c001a2e3:	56                   	push   esi
c001a2e4:	57                   	push   edi
c001a2e5:	55                   	push   ebp
c001a2e6:	e8 7b f7 ff ff       	call   c0019a66 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a2eb:	83 c4 10             	add    esp,0x10
c001a2ee:	66 40                	inc    ax
c001a2f0:	74 0c                	je     c001a2fe <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001a2f2:	53                   	push   ebx
c001a2f3:	56                   	push   esi
c001a2f4:	57                   	push   edi
c001a2f5:	55                   	push   ebp
c001a2f6:	e8 31 fe ff ff       	call   c001a12c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a2fb:	83 c4 10             	add    esp,0x10
c001a2fe:	43                   	inc    ebx
c001a2ff:	83 fb 08             	cmp    ebx,0x8
c001a302:	75 de                	jne    c001a2e2 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001a304:	83 c4 0c             	add    esp,0xc
c001a307:	5b                   	pop    ebx
c001a308:	5e                   	pop    esi
c001a309:	5f                   	pop    edi
c001a30a:	5d                   	pop    ebp
c001a30b:	c3                   	ret    

c001a30c <PCI::detect()>:
c001a30c:	56                   	push   esi
c001a30d:	53                   	push   ebx
c001a30e:	53                   	push   ebx
c001a30f:	31 db                	xor    ebx,ebx
c001a311:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a315:	6a 00                	push   0x0
c001a317:	6a 00                	push   0x0
c001a319:	6a 00                	push   0x0
c001a31b:	56                   	push   esi
c001a31c:	e8 69 f7 ff ff       	call   c0019a8a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a321:	83 c4 10             	add    esp,0x10
c001a324:	a8 80                	test   al,0x80
c001a326:	75 21                	jne    c001a349 <PCI::detect()+0x3d>
c001a328:	51                   	push   ecx
c001a329:	51                   	push   ecx
c001a32a:	6a 00                	push   0x0
c001a32c:	56                   	push   esi
c001a32d:	e8 62 fc ff ff       	call   c0019f94 <PCI::checkBus(unsigned char)>
c001a332:	83 c4 10             	add    esp,0x10
c001a335:	eb 24                	jmp    c001a35b <PCI::detect()+0x4f>
c001a337:	52                   	push   edx
c001a338:	52                   	push   edx
c001a339:	53                   	push   ebx
c001a33a:	43                   	inc    ebx
c001a33b:	56                   	push   esi
c001a33c:	e8 53 fc ff ff       	call   c0019f94 <PCI::checkBus(unsigned char)>
c001a341:	83 c4 10             	add    esp,0x10
c001a344:	83 fb 08             	cmp    ebx,0x8
c001a347:	74 12                	je     c001a35b <PCI::detect()+0x4f>
c001a349:	53                   	push   ebx
c001a34a:	6a 00                	push   0x0
c001a34c:	6a 00                	push   0x0
c001a34e:	56                   	push   esi
c001a34f:	e8 12 f7 ff ff       	call   c0019a66 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a354:	83 c4 10             	add    esp,0x10
c001a357:	66 40                	inc    ax
c001a359:	74 dc                	je     c001a337 <PCI::detect()+0x2b>
c001a35b:	58                   	pop    eax
c001a35c:	5b                   	pop    ebx
c001a35d:	5e                   	pop    esi
c001a35e:	c3                   	ret    
c001a35f:	90                   	nop

c001a360 <IDE::close(int, int, void*)>:
c001a360:	83 c8 ff             	or     eax,0xffffffff
c001a363:	c3                   	ret    

c001a364 <IDE::IDE()>:
c001a364:	83 ec 0c             	sub    esp,0xc
c001a367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a36b:	83 ec 08             	sub    esp,0x8
c001a36e:	68 30 11 02 c0       	push   0xc0021130
c001a373:	50                   	push   eax
c001a374:	e8 0f 1a ff ff       	call   c000bd88 <HardDiskController::HardDiskController(char const*)>
c001a379:	83 c4 10             	add    esp,0x10
c001a37c:	ba c0 11 02 c0       	mov    edx,0xc00211c0
c001a381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a385:	89 10                	mov    DWORD PTR [eax],edx
c001a387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a38b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001a392:	90                   	nop
c001a393:	83 c4 0c             	add    esp,0xc
c001a396:	c3                   	ret    
c001a397:	90                   	nop

c001a398 <IDE::prepareInterrupt(unsigned char)>:
c001a398:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a3a1:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001a3a9:	c3                   	ret    

c001a3aa <selectDrive(unsigned char, unsigned char)>:
c001a3aa:	c3                   	ret    
c001a3ab:	90                   	nop

c001a3ac <IDE::getBase(unsigned char)>:
c001a3ac:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001a3b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3b5:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001a3bd:	c3                   	ret    

c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001a3be:	55                   	push   ebp
c001a3bf:	57                   	push   edi
c001a3c0:	56                   	push   esi
c001a3c1:	53                   	push   ebx
c001a3c2:	83 ec 1c             	sub    esp,0x1c
c001a3c5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a3c9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a3cd:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001a3d0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a3d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a3d8:	80 f9 03             	cmp    cl,0x3
c001a3db:	77 51                	ja     c001a42e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001a3dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a3e1:	0f b6 f2             	movzx  esi,dl
c001a3e4:	0f b6 db             	movzx  ebx,bl
c001a3e7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001a3ea:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001a3ee:	83 ca 80             	or     edx,0xffffff80
c001a3f1:	0f b6 d2             	movzx  edx,dl
c001a3f4:	52                   	push   edx
c001a3f5:	6a 0c                	push   0xc
c001a3f7:	56                   	push   esi
c001a3f8:	57                   	push   edi
c001a3f9:	e8 c0 ff ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3fe:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001a403:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a407:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001a40b:	ee                   	out    dx,al
c001a40c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001a411:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001a415:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001a419:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a41d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001a425:	83 c4 2c             	add    esp,0x2c
c001a428:	5b                   	pop    ebx
c001a429:	5e                   	pop    esi
c001a42a:	5f                   	pop    edi
c001a42b:	5d                   	pop    ebp
c001a42c:	eb 90                	jmp    c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a42e:	80 fb 07             	cmp    bl,0x7
c001a431:	77 12                	ja     c001a445 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001a433:	0f b6 d2             	movzx  edx,dl
c001a436:	0f b6 db             	movzx  ebx,bl
c001a439:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001a441:	89 da                	mov    edx,ebx
c001a443:	eb 2f                	jmp    c001a474 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001a445:	80 fb 0d             	cmp    bl,0xd
c001a448:	77 13                	ja     c001a45d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001a44a:	0f b6 d2             	movzx  edx,dl
c001a44d:	0f b6 db             	movzx  ebx,bl
c001a450:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001a457:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001a45b:	eb 17                	jmp    c001a474 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001a45d:	80 fb 15             	cmp    bl,0x15
c001a460:	77 13                	ja     c001a475 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001a462:	0f b6 d2             	movzx  edx,dl
c001a465:	0f b6 db             	movzx  ebx,bl
c001a468:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001a470:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001a474:	ee                   	out    dx,al
c001a475:	83 c4 1c             	add    esp,0x1c
c001a478:	5b                   	pop    ebx
c001a479:	5e                   	pop    esi
c001a47a:	5f                   	pop    edi
c001a47b:	5d                   	pop    ebp
c001a47c:	c3                   	ret    
c001a47d:	90                   	nop

c001a47e <IDE::read(unsigned char, unsigned char)>:
c001a47e:	55                   	push   ebp
c001a47f:	57                   	push   edi
c001a480:	56                   	push   esi
c001a481:	53                   	push   ebx
c001a482:	83 ec 1c             	sub    esp,0x1c
c001a485:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a489:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a48d:	8d 43 f8             	lea    eax,[ebx-0x8]
c001a490:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a494:	3c 03                	cmp    al,0x3
c001a496:	77 43                	ja     c001a4db <IDE::read(unsigned char, unsigned char)+0x5d>
c001a498:	0f b6 f2             	movzx  esi,dl
c001a49b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001a49e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001a4a2:	83 c8 80             	or     eax,0xffffff80
c001a4a5:	0f b6 c0             	movzx  eax,al
c001a4a8:	50                   	push   eax
c001a4a9:	6a 0c                	push   0xc
c001a4ab:	56                   	push   esi
c001a4ac:	57                   	push   edi
c001a4ad:	e8 0c ff ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4b2:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001a4b7:	0f b6 c3             	movzx  eax,bl
c001a4ba:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001a4be:	ec                   	in     al,dx
c001a4bf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a4c3:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001a4c8:	52                   	push   edx
c001a4c9:	6a 0c                	push   0xc
c001a4cb:	56                   	push   esi
c001a4cc:	57                   	push   edi
c001a4cd:	e8 ec fe ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4d2:	83 c4 20             	add    esp,0x20
c001a4d5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a4d9:	eb 49                	jmp    c001a524 <IDE::read(unsigned char, unsigned char)+0xa6>
c001a4db:	80 fb 07             	cmp    bl,0x7
c001a4de:	77 12                	ja     c001a4f2 <IDE::read(unsigned char, unsigned char)+0x74>
c001a4e0:	0f b6 d2             	movzx  edx,dl
c001a4e3:	0f b6 c3             	movzx  eax,bl
c001a4e6:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001a4ee:	89 c2                	mov    edx,eax
c001a4f0:	eb 31                	jmp    c001a523 <IDE::read(unsigned char, unsigned char)+0xa5>
c001a4f2:	80 fb 0d             	cmp    bl,0xd
c001a4f5:	77 13                	ja     c001a50a <IDE::read(unsigned char, unsigned char)+0x8c>
c001a4f7:	0f b6 d2             	movzx  edx,dl
c001a4fa:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001a501:	0f b6 d3             	movzx  edx,bl
c001a504:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001a508:	eb 19                	jmp    c001a523 <IDE::read(unsigned char, unsigned char)+0xa5>
c001a50a:	31 c0                	xor    eax,eax
c001a50c:	80 fb 15             	cmp    bl,0x15
c001a50f:	77 13                	ja     c001a524 <IDE::read(unsigned char, unsigned char)+0xa6>
c001a511:	0f b6 d2             	movzx  edx,dl
c001a514:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001a51c:	0f b6 d3             	movzx  edx,bl
c001a51f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001a523:	ec                   	in     al,dx
c001a524:	83 c4 1c             	add    esp,0x1c
c001a527:	5b                   	pop    ebx
c001a528:	5e                   	pop    esi
c001a529:	5f                   	pop    edi
c001a52a:	5d                   	pop    ebp
c001a52b:	c3                   	ret    

c001a52c <IDE::waitInterrupt(unsigned char)>:
c001a52c:	57                   	push   edi
c001a52d:	56                   	push   esi
c001a52e:	31 f6                	xor    esi,esi
c001a530:	53                   	push   ebx
c001a531:	83 ec 10             	sub    esp,0x10
c001a534:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001a538:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a53c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a540:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a545:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001a54c:	84 db                	test   bl,bl
c001a54e:	75 33                	jne    c001a583 <IDE::waitInterrupt(unsigned char)+0x57>
c001a550:	52                   	push   edx
c001a551:	6a 0c                	push   0xc
c001a553:	50                   	push   eax
c001a554:	57                   	push   edi
c001a555:	e8 24 ff ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001a55a:	83 c4 10             	add    esp,0x10
c001a55d:	a8 01                	test   al,0x1
c001a55f:	75 2a                	jne    c001a58b <IDE::waitInterrupt(unsigned char)+0x5f>
c001a561:	f7 c6 04 00 00 00    	test   esi,0x4
c001a567:	75 12                	jne    c001a57b <IDE::waitInterrupt(unsigned char)+0x4f>
c001a569:	83 fe 32             	cmp    esi,0x32
c001a56c:	7e 0d                	jle    c001a57b <IDE::waitInterrupt(unsigned char)+0x4f>
c001a56e:	83 ec 0c             	sub    esp,0xc
c001a571:	6a 64                	push   0x64
c001a573:	e8 64 a7 ff ff       	call   c0014cdc <milliTenthSleep(unsigned int)>
c001a578:	83 c4 10             	add    esp,0x10
c001a57b:	83 fe 3c             	cmp    esi,0x3c
c001a57e:	74 0b                	je     c001a58b <IDE::waitInterrupt(unsigned char)+0x5f>
c001a580:	46                   	inc    esi
c001a581:	eb bd                	jmp    c001a540 <IDE::waitInterrupt(unsigned char)+0x14>
c001a583:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001a58b:	83 c4 10             	add    esp,0x10
c001a58e:	88 d8                	mov    al,bl
c001a590:	5b                   	pop    ebx
c001a591:	5e                   	pop    esi
c001a592:	5f                   	pop    edi
c001a593:	c3                   	ret    

c001a594 <ideChannel0IRQHandler(regs*, void*)>:
c001a594:	83 ec 10             	sub    esp,0x10
c001a597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a59b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001a5a2:	6a 07                	push   0x7
c001a5a4:	6a 00                	push   0x0
c001a5a6:	50                   	push   eax
c001a5a7:	e8 d2 fe ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001a5ac:	83 c4 1c             	add    esp,0x1c
c001a5af:	c3                   	ret    

c001a5b0 <ideChannel1IRQHandler(regs*, void*)>:
c001a5b0:	83 ec 10             	sub    esp,0x10
c001a5b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a5b7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001a5be:	6a 07                	push   0x7
c001a5c0:	6a 01                	push   0x1
c001a5c2:	50                   	push   eax
c001a5c3:	e8 b6 fe ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001a5c8:	83 c4 1c             	add    esp,0x1c
c001a5cb:	c3                   	ret    

c001a5cc <IDE::enableIRQs(unsigned char, bool)>:
c001a5cc:	57                   	push   edi
c001a5cd:	56                   	push   esi
c001a5ce:	be 04 00 00 00       	mov    esi,0x4
c001a5d3:	53                   	push   ebx
c001a5d4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001a5d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a5dd:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001a5e2:	0f 94 c0             	sete   al
c001a5e5:	01 c0                	add    eax,eax
c001a5e7:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001a5ee:	0f b6 c0             	movzx  eax,al
c001a5f1:	50                   	push   eax
c001a5f2:	6a 0c                	push   0xc
c001a5f4:	57                   	push   edi
c001a5f5:	53                   	push   ebx
c001a5f6:	e8 c3 fd ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5fb:	83 c4 10             	add    esp,0x10
c001a5fe:	50                   	push   eax
c001a5ff:	6a 0c                	push   0xc
c001a601:	57                   	push   edi
c001a602:	53                   	push   ebx
c001a603:	e8 76 fe ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001a608:	83 c4 10             	add    esp,0x10
c001a60b:	4e                   	dec    esi
c001a60c:	75 f0                	jne    c001a5fe <IDE::enableIRQs(unsigned char, bool)+0x32>
c001a60e:	5b                   	pop    ebx
c001a60f:	5e                   	pop    esi
c001a610:	5f                   	pop    edi
c001a611:	c3                   	ret    

c001a612 <IDE::open(int, int, void*)>:
c001a612:	55                   	push   ebp
c001a613:	57                   	push   edi
c001a614:	56                   	push   esi
c001a615:	53                   	push   ebx
c001a616:	83 ec 1c             	sub    esp,0x1c
c001a619:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a61d:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001a626:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001a62f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001a636:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001a63d:	0f 85 b0 02 00 00    	jne    c001a8f3 <IDE::open(int, int, void*)+0x2e1>
c001a643:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001a649:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001a64d:	83 e0 7f             	and    eax,0x7f
c001a650:	3c 05                	cmp    al,0x5
c001a652:	74 04                	je     c001a658 <IDE::open(int, int, void*)+0x46>
c001a654:	3c 0f                	cmp    al,0xf
c001a656:	75 32                	jne    c001a68a <IDE::open(int, int, void*)+0x78>
c001a658:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001a65e:	83 e0 fc             	and    eax,0xfffffffc
c001a661:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001a668:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001a66e:	83 e0 fc             	and    eax,0xfffffffc
c001a671:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001a678:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001a67e:	83 e0 fc             	and    eax,0xfffffffc
c001a681:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a688:	eb 14                	jmp    c001a69e <IDE::open(int, int, void*)+0x8c>
c001a68a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001a694:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001a69e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001a6a5:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001a6ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a6b0:	89 c6                	mov    esi,eax
c001a6b2:	bf f8 0c 00 00       	mov    edi,0xcf8
c001a6b7:	c1 e6 10             	shl    esi,0x10
c001a6ba:	89 e8                	mov    eax,ebp
c001a6bc:	89 fa                	mov    edx,edi
c001a6be:	c1 e0 0b             	shl    eax,0xb
c001a6c1:	09 f0                	or     eax,esi
c001a6c3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001a6ca:	c1 e6 08             	shl    esi,0x8
c001a6cd:	09 c6                	or     esi,eax
c001a6cf:	89 f0                	mov    eax,esi
c001a6d1:	0d 08 00 00 80       	or     eax,0x80000008
c001a6d6:	ef                   	out    dx,eax
c001a6d7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001a6dc:	89 ca                	mov    edx,ecx
c001a6de:	ed                   	in     eax,dx
c001a6df:	c1 e8 10             	shr    eax,0x10
c001a6e2:	3d ff ff 00 00       	cmp    eax,0xffff
c001a6e7:	0f 84 f5 00 00 00    	je     c001a7e2 <IDE::open(int, int, void*)+0x1d0>
c001a6ed:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001a6f3:	89 fa                	mov    edx,edi
c001a6f5:	89 f0                	mov    eax,esi
c001a6f7:	ef                   	out    dx,eax
c001a6f8:	b0 fe                	mov    al,0xfe
c001a6fa:	89 ca                	mov    edx,ecx
c001a6fc:	ee                   	out    dx,al
c001a6fd:	89 f0                	mov    eax,esi
c001a6ff:	89 fa                	mov    edx,edi
c001a701:	ef                   	out    dx,eax
c001a702:	89 ca                	mov    edx,ecx
c001a704:	ed                   	in     eax,dx
c001a705:	3c fe                	cmp    al,0xfe
c001a707:	0f 85 a9 00 00 00    	jne    c001a7b6 <IDE::open(int, int, void*)+0x1a4>
c001a70d:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c001a713:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001a71a:	74 33                	je     c001a74f <IDE::open(int, int, void*)+0x13d>
c001a71c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001a722:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001a726:	40                   	inc    eax
c001a727:	83 ec 0c             	sub    esp,0xc
c001a72a:	0f b6 c0             	movzx  eax,al
c001a72d:	50                   	push   eax
c001a72e:	55                   	push   ebp
c001a72f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a733:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001a739:	51                   	push   ecx
c001a73a:	e8 a1 41 ff ff       	call   c000e8e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001a73f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001a744:	83 c4 1c             	add    esp,0x1c
c001a747:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001a74d:	eb 0a                	jmp    c001a759 <IDE::open(int, int, void*)+0x147>
c001a74f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001a759:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001a760:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001a767:	c1 e1 10             	shl    ecx,0x10
c001a76a:	c1 e0 08             	shl    eax,0x8
c001a76d:	bf f8 0c 00 00       	mov    edi,0xcf8
c001a772:	09 c1                	or     ecx,eax
c001a774:	89 fa                	mov    edx,edi
c001a776:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001a77d:	c1 e0 0b             	shl    eax,0xb
c001a780:	09 c1                	or     ecx,eax
c001a782:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001a788:	89 c8                	mov    eax,ecx
c001a78a:	ef                   	out    dx,eax
c001a78b:	be fc 0c 00 00       	mov    esi,0xcfc
c001a790:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001a796:	89 f2                	mov    edx,esi
c001a798:	ee                   	out    dx,al
c001a799:	89 c8                	mov    eax,ecx
c001a79b:	89 fa                	mov    edx,edi
c001a79d:	ef                   	out    dx,eax
c001a79e:	89 f2                	mov    edx,esi
c001a7a0:	ed                   	in     eax,dx
c001a7a1:	0f b6 c0             	movzx  eax,al
c001a7a4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001a7aa:	74 46                	je     c001a7f2 <IDE::open(int, int, void*)+0x1e0>
c001a7ac:	83 ec 0c             	sub    esp,0xc
c001a7af:	68 48 11 02 c0       	push   0xc0021148
c001a7b4:	eb 34                	jmp    c001a7ea <IDE::open(int, int, void*)+0x1d8>
c001a7b6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001a7bf:	75 17                	jne    c001a7d8 <IDE::open(int, int, void*)+0x1c6>
c001a7c1:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001a7c6:	74 07                	je     c001a7cf <IDE::open(int, int, void*)+0x1bd>
c001a7c8:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001a7cd:	75 09                	jne    c001a7d8 <IDE::open(int, int, void*)+0x1c6>
c001a7cf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001a7d6:	eb 1a                	jmp    c001a7f2 <IDE::open(int, int, void*)+0x1e0>
c001a7d8:	83 ec 0c             	sub    esp,0xc
c001a7db:	68 50 11 02 c0       	push   0xc0021150
c001a7e0:	eb 08                	jmp    c001a7ea <IDE::open(int, int, void*)+0x1d8>
c001a7e2:	83 ec 0c             	sub    esp,0xc
c001a7e5:	68 81 11 02 c0       	push   0xc0021181
c001a7ea:	e8 d8 5b ff ff       	call   c00103c7 <KePanic(char const*)>
c001a7ef:	83 c4 10             	add    esp,0x10
c001a7f2:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001a7f9:	79 1a                	jns    c001a815 <IDE::open(int, int, void*)+0x203>
c001a7fb:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001a801:	83 e0 fc             	and    eax,0xfffffffc
c001a804:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001a80b:	83 c0 08             	add    eax,0x8
c001a80e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001a815:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001a81b:	89 c2                	mov    edx,eax
c001a81d:	83 e2 0f             	and    edx,0xf
c001a820:	66 83 fa 08          	cmp    dx,0x8
c001a824:	75 0a                	jne    c001a830 <IDE::open(int, int, void*)+0x21e>
c001a826:	83 e8 02             	sub    eax,0x2
c001a829:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a830:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001a836:	89 c2                	mov    edx,eax
c001a838:	83 e2 0f             	and    edx,0xf
c001a83b:	66 83 fa 08          	cmp    dx,0x8
c001a83f:	75 0a                	jne    c001a84b <IDE::open(int, int, void*)+0x239>
c001a841:	83 e8 02             	sub    eax,0x2
c001a844:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001a84b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001a852:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001a859:	89 d0                	mov    eax,edx
c001a85b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a85e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a862:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001a866:	8d 4a 01             	lea    ecx,[edx+0x1]
c001a869:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a86e:	0f b6 c9             	movzx  ecx,cl
c001a871:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001a878:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001a87b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001a87f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001a883:	8d 50 02             	lea    edx,[eax+0x2]
c001a886:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001a88b:	0f b6 d2             	movzx  edx,dl
c001a88e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001a894:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a897:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a89b:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001a89f:	8d 48 03             	lea    ecx,[eax+0x3]
c001a8a2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a8a7:	0f b6 c9             	movzx  ecx,cl
c001a8aa:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001a8b0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001a8b3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001a8b7:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001a8bb:	8d 50 04             	lea    edx,[eax+0x4]
c001a8be:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001a8c4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001a8c9:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001a8d0:	66 85 f6             	test   si,si
c001a8d3:	74 5b                	je     c001a930 <IDE::open(int, int, void*)+0x31e>
c001a8d5:	0f b6 d2             	movzx  edx,dl
c001a8d8:	83 c0 05             	add    eax,0x5
c001a8db:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a8de:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a8e2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001a8e6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001a8ec:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a8f1:	eb 3d                	jmp    c001a930 <IDE::open(int, int, void*)+0x31e>
c001a8f3:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001a8f9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001a900:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001a907:	66 05 06 02          	add    ax,0x206
c001a90b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a912:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001a919:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001a920:	66 05 06 02          	add    ax,0x206
c001a924:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001a92b:	e9 e5 fe ff ff       	jmp    c001a815 <IDE::open(int, int, void*)+0x203>
c001a930:	50                   	push   eax
c001a931:	50                   	push   eax
c001a932:	6a 00                	push   0x0
c001a934:	53                   	push   ebx
c001a935:	e8 5e fa ff ff       	call   c001a398 <IDE::prepareInterrupt(unsigned char)>
c001a93a:	5a                   	pop    edx
c001a93b:	59                   	pop    ecx
c001a93c:	6a 01                	push   0x1
c001a93e:	53                   	push   ebx
c001a93f:	e8 54 fa ff ff       	call   c001a398 <IDE::prepareInterrupt(unsigned char)>
c001a944:	83 c4 0c             	add    esp,0xc
c001a947:	6a 00                	push   0x0
c001a949:	6a 00                	push   0x0
c001a94b:	53                   	push   ebx
c001a94c:	e8 7b fc ff ff       	call   c001a5cc <IDE::enableIRQs(unsigned char, bool)>
c001a951:	83 c4 0c             	add    esp,0xc
c001a954:	6a 00                	push   0x0
c001a956:	6a 01                	push   0x1
c001a958:	53                   	push   ebx
c001a959:	e8 6e fc ff ff       	call   c001a5cc <IDE::enableIRQs(unsigned char, bool)>
c001a95e:	83 c4 10             	add    esp,0x10
c001a961:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001a968:	74 34                	je     c001a99e <IDE::open(int, int, void*)+0x38c>
c001a96a:	83 ec 0c             	sub    esp,0xc
c001a96d:	53                   	push   ebx
c001a96e:	6a 01                	push   0x1
c001a970:	68 94 a5 01 c0       	push   0xc001a594
c001a975:	6a 0e                	push   0xe
c001a977:	53                   	push   ebx
c001a978:	e8 73 10 ff ff       	call   c000b9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a97d:	83 c4 14             	add    esp,0x14
c001a980:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001a986:	53                   	push   ebx
c001a987:	6a 01                	push   0x1
c001a989:	68 b0 a5 01 c0       	push   0xc001a5b0
c001a98e:	6a 0f                	push   0xf
c001a990:	53                   	push   ebx
c001a991:	e8 5a 10 ff ff       	call   c000b9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a996:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001a99c:	eb 38                	jmp    c001a9d6 <IDE::open(int, int, void*)+0x3c4>
c001a99e:	83 ec 0c             	sub    esp,0xc
c001a9a1:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001a9ab:	53                   	push   ebx
c001a9ac:	6a 00                	push   0x0
c001a9ae:	68 94 a5 01 c0       	push   0xc001a594
c001a9b3:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001a9b9:	53                   	push   ebx
c001a9ba:	e8 31 10 ff ff       	call   c000b9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a9bf:	83 c4 14             	add    esp,0x14
c001a9c2:	53                   	push   ebx
c001a9c3:	6a 00                	push   0x0
c001a9c5:	68 b0 a5 01 c0       	push   0xc001a5b0
c001a9ca:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001a9d0:	53                   	push   ebx
c001a9d1:	e8 1a 10 ff ff       	call   c000b9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a9d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9d8:	83 c4 20             	add    esp,0x20
c001a9db:	83 ec 0c             	sub    esp,0xc
c001a9de:	53                   	push   ebx
c001a9df:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001a9e2:	83 c4 0c             	add    esp,0xc
c001a9e5:	6a 07                	push   0x7
c001a9e7:	6a 00                	push   0x0
c001a9e9:	53                   	push   ebx
c001a9ea:	e8 8f fa ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001a9ef:	83 c4 0c             	add    esp,0xc
c001a9f2:	6a 07                	push   0x7
c001a9f4:	6a 01                	push   0x1
c001a9f6:	53                   	push   ebx
c001a9f7:	e8 82 fa ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001a9fc:	83 c4 0c             	add    esp,0xc
c001a9ff:	6a 01                	push   0x1
c001aa01:	6a 00                	push   0x0
c001aa03:	53                   	push   ebx
c001aa04:	e8 c3 fb ff ff       	call   c001a5cc <IDE::enableIRQs(unsigned char, bool)>
c001aa09:	83 c4 0c             	add    esp,0xc
c001aa0c:	6a 01                	push   0x1
c001aa0e:	6a 01                	push   0x1
c001aa10:	53                   	push   ebx
c001aa11:	e8 b6 fb ff ff       	call   c001a5cc <IDE::enableIRQs(unsigned char, bool)>
c001aa16:	83 c4 2c             	add    esp,0x2c
c001aa19:	31 c0                	xor    eax,eax
c001aa1b:	5b                   	pop    ebx
c001aa1c:	5e                   	pop    esi
c001aa1d:	5f                   	pop    edi
c001aa1e:	5d                   	pop    ebp
c001aa1f:	c3                   	ret    

c001aa20 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001aa20:	55                   	push   ebp
c001aa21:	57                   	push   edi
c001aa22:	56                   	push   esi
c001aa23:	53                   	push   ebx
c001aa24:	83 ec 1c             	sub    esp,0x1c
c001aa27:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001aa2f:	8d 50 f8             	lea    edx,[eax-0x8]
c001aa32:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001aa36:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001aa3a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001aa3e:	80 fa 03             	cmp    dl,0x3
c001aa41:	77 5d                	ja     c001aaa0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001aa43:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001aa47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa4b:	0f b6 db             	movzx  ebx,bl
c001aa4e:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001aa51:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001aa55:	83 ca 80             	or     edx,0xffffff80
c001aa58:	0f b6 d2             	movzx  edx,dl
c001aa5b:	52                   	push   edx
c001aa5c:	6a 0c                	push   0xc
c001aa5e:	53                   	push   ebx
c001aa5f:	56                   	push   esi
c001aa60:	e8 59 f9 ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa65:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001aa6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aa6e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aa72:	0f b6 c0             	movzx  eax,al
c001aa75:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001aa79:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001aa7b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001aa80:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001aa84:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001aa88:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001aa8c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001aa94:	83 c4 2c             	add    esp,0x2c
c001aa97:	5b                   	pop    ebx
c001aa98:	5e                   	pop    esi
c001aa99:	5f                   	pop    edi
c001aa9a:	5d                   	pop    ebp
c001aa9b:	e9 1e f9 ff ff       	jmp    c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aaa0:	3c 07                	cmp    al,0x7
c001aaa2:	77 10                	ja     c001aab4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001aaa4:	0f b6 db             	movzx  ebx,bl
c001aaa7:	0f b6 d0             	movzx  edx,al
c001aaaa:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001aab2:	eb 2d                	jmp    c001aae1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001aab4:	3c 0d                	cmp    al,0xd
c001aab6:	77 13                	ja     c001aacb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001aab8:	0f b6 db             	movzx  ebx,bl
c001aabb:	0f b6 c0             	movzx  eax,al
c001aabe:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001aac5:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001aac9:	eb 16                	jmp    c001aae1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001aacb:	3c 15                	cmp    al,0x15
c001aacd:	77 14                	ja     c001aae3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001aacf:	0f b6 db             	movzx  ebx,bl
c001aad2:	0f b6 c0             	movzx  eax,al
c001aad5:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001aadd:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001aae1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001aae3:	83 c4 1c             	add    esp,0x1c
c001aae6:	5b                   	pop    ebx
c001aae7:	5e                   	pop    esi
c001aae8:	5f                   	pop    edi
c001aae9:	5d                   	pop    ebp
c001aaea:	c3                   	ret    
c001aaeb:	90                   	nop

c001aaec <IDE::detect()>:
c001aaec:	55                   	push   ebp
c001aaed:	57                   	push   edi
c001aaee:	56                   	push   esi
c001aaef:	53                   	push   ebx
c001aaf0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001aaf6:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001aafd:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001ab04:	0f 85 97 02 00 00    	jne    c001ada1 <IDE::detect()+0x2b5>
c001ab0a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ab11:	31 f6                	xor    esi,esi
c001ab13:	31 ed                	xor    ebp,ebp
c001ab15:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ab1d:	89 e8                	mov    eax,ebp
c001ab1f:	c1 e0 06             	shl    eax,0x6
c001ab22:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ab2a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ab2e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ab32:	c1 e0 04             	shl    eax,0x4
c001ab35:	83 c8 a0             	or     eax,0xffffffa0
c001ab38:	0f b6 c0             	movzx  eax,al
c001ab3b:	50                   	push   eax
c001ab3c:	6a 06                	push   0x6
c001ab3e:	56                   	push   esi
c001ab3f:	53                   	push   ebx
c001ab40:	e8 79 f8 ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ab45:	83 c4 0c             	add    esp,0xc
c001ab48:	6a 0c                	push   0xc
c001ab4a:	56                   	push   esi
c001ab4b:	53                   	push   ebx
c001ab4c:	e8 2d f9 ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001ab51:	83 c4 0c             	add    esp,0xc
c001ab54:	6a 0c                	push   0xc
c001ab56:	56                   	push   esi
c001ab57:	53                   	push   ebx
c001ab58:	e8 21 f9 ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001ab5d:	83 c4 0c             	add    esp,0xc
c001ab60:	6a 0c                	push   0xc
c001ab62:	56                   	push   esi
c001ab63:	53                   	push   ebx
c001ab64:	e8 15 f9 ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001ab69:	83 c4 0c             	add    esp,0xc
c001ab6c:	6a 0c                	push   0xc
c001ab6e:	56                   	push   esi
c001ab6f:	53                   	push   ebx
c001ab70:	e8 09 f9 ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001ab75:	68 ec 00 00 00       	push   0xec
c001ab7a:	6a 07                	push   0x7
c001ab7c:	56                   	push   esi
c001ab7d:	53                   	push   ebx
c001ab7e:	e8 3b f8 ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ab83:	83 c4 1c             	add    esp,0x1c
c001ab86:	6a 0c                	push   0xc
c001ab88:	56                   	push   esi
c001ab89:	53                   	push   ebx
c001ab8a:	e8 ef f8 ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001ab8f:	83 c4 0c             	add    esp,0xc
c001ab92:	6a 0c                	push   0xc
c001ab94:	56                   	push   esi
c001ab95:	53                   	push   ebx
c001ab96:	e8 e3 f8 ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001ab9b:	83 c4 0c             	add    esp,0xc
c001ab9e:	6a 0c                	push   0xc
c001aba0:	56                   	push   esi
c001aba1:	53                   	push   ebx
c001aba2:	e8 d7 f8 ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001aba7:	83 c4 0c             	add    esp,0xc
c001abaa:	6a 0c                	push   0xc
c001abac:	56                   	push   esi
c001abad:	53                   	push   ebx
c001abae:	e8 cb f8 ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001abb3:	83 c4 0c             	add    esp,0xc
c001abb6:	6a 0c                	push   0xc
c001abb8:	56                   	push   esi
c001abb9:	53                   	push   ebx
c001abba:	e8 bf f8 ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001abbf:	83 c4 10             	add    esp,0x10
c001abc2:	84 c0                	test   al,al
c001abc4:	0f 84 5f 01 00 00    	je     c001ad29 <IDE::detect()+0x23d>
c001abca:	31 ff                	xor    edi,edi
c001abcc:	50                   	push   eax
c001abcd:	6a 0c                	push   0xc
c001abcf:	56                   	push   esi
c001abd0:	53                   	push   ebx
c001abd1:	e8 a8 f8 ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001abd6:	83 c4 10             	add    esp,0x10
c001abd9:	a8 01                	test   al,0x1
c001abdb:	0f 85 69 01 00 00    	jne    c001ad4a <IDE::detect()+0x25e>
c001abe1:	84 c0                	test   al,al
c001abe3:	78 04                	js     c001abe9 <IDE::detect()+0xfd>
c001abe5:	a8 08                	test   al,0x8
c001abe7:	75 23                	jne    c001ac0c <IDE::detect()+0x120>
c001abe9:	47                   	inc    edi
c001abea:	81 ff 17 01 00 00    	cmp    edi,0x117
c001abf0:	7e da                	jle    c001abcc <IDE::detect()+0xe0>
c001abf2:	83 ec 0c             	sub    esp,0xc
c001abf5:	6a 32                	push   0x32
c001abf7:	e8 e0 a0 ff ff       	call   c0014cdc <milliTenthSleep(unsigned int)>
c001abfc:	83 c4 10             	add    esp,0x10
c001abff:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ac05:	75 c5                	jne    c001abcc <IDE::detect()+0xe0>
c001ac07:	e9 3e 01 00 00       	jmp    c001ad4a <IDE::detect()+0x25e>
c001ac0c:	31 c9                	xor    ecx,ecx
c001ac0e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ac12:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ac16:	83 ec 0c             	sub    esp,0xc
c001ac19:	68 80 00 00 00       	push   0x80
c001ac1e:	57                   	push   edi
c001ac1f:	6a 00                	push   0x0
c001ac21:	56                   	push   esi
c001ac22:	53                   	push   ebx
c001ac23:	e8 f8 fd ff ff       	call   c001aa20 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ac28:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ac2d:	89 e8                	mov    eax,ebp
c001ac2f:	89 d1                	mov    ecx,edx
c001ac31:	c1 e0 06             	shl    eax,0x6
c001ac34:	01 d8                	add    eax,ebx
c001ac36:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ac3d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ac44:	89 f2                	mov    edx,esi
c001ac46:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ac4c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ac50:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ac56:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ac5a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ac61:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ac69:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001ac70:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001ac78:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001ac7e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001ac85:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001ac8b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ac8f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ac93:	83 c4 20             	add    esp,0x20
c001ac96:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001ac99:	83 c0 02             	add    eax,0x2
c001ac9c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001aca2:	83 c7 02             	add    edi,0x2
c001aca5:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001aca8:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001acae:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001acb2:	75 e2                	jne    c001ac96 <IDE::detect()+0x1aa>
c001acb4:	89 e8                	mov    eax,ebp
c001acb6:	c1 e0 06             	shl    eax,0x6
c001acb9:	01 d8                	add    eax,ebx
c001acbb:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001acc1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001acc8:	66 c1 ea 09          	shr    dx,0x9
c001accc:	83 e2 01             	and    edx,0x1
c001accf:	84 c9                	test   cl,cl
c001acd1:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001acd7:	75 22                	jne    c001acfb <IDE::detect()+0x20f>
c001acd9:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001ace0:	74 46                	je     c001ad28 <IDE::detect()+0x23c>
c001ace2:	83 ec 0c             	sub    esp,0xc
c001ace5:	68 7c 01 00 00       	push   0x17c
c001acea:	e8 76 cb fe ff       	call   c0007865 <malloc>
c001acef:	89 c7                	mov    edi,eax
c001acf1:	89 04 24             	mov    DWORD PTR [esp],eax
c001acf4:	e8 11 05 00 00       	call   c001b20a <ATA::ATA()>
c001acf9:	eb 17                	jmp    c001ad12 <IDE::detect()+0x226>
c001acfb:	83 ec 0c             	sub    esp,0xc
c001acfe:	68 84 01 00 00       	push   0x184
c001ad03:	e8 5d cb fe ff       	call   c0007865 <malloc>
c001ad08:	89 c7                	mov    edi,eax
c001ad0a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad0d:	e8 1e 0e 00 00       	call   c001bb30 <ATAPI::ATAPI()>
c001ad12:	5a                   	pop    edx
c001ad13:	59                   	pop    ecx
c001ad14:	57                   	push   edi
c001ad15:	53                   	push   ebx
c001ad16:	e8 29 0d ff ff       	call   c000ba44 <Device::addChild(Device*)>
c001ad1b:	8b 07                	mov    eax,DWORD PTR [edi]
c001ad1d:	53                   	push   ebx
c001ad1e:	55                   	push   ebp
c001ad1f:	6a 00                	push   0x0
c001ad21:	57                   	push   edi
c001ad22:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad25:	83 c4 20             	add    esp,0x20
c001ad28:	45                   	inc    ebp
c001ad29:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001ad2e:	74 0d                	je     c001ad3d <IDE::detect()+0x251>
c001ad30:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001ad38:	e9 e0 fd ff ff       	jmp    c001ab1d <IDE::detect()+0x31>
c001ad3d:	4e                   	dec    esi
c001ad3e:	74 61                	je     c001ada1 <IDE::detect()+0x2b5>
c001ad40:	be 01 00 00 00       	mov    esi,0x1
c001ad45:	e9 cb fd ff ff       	jmp    c001ab15 <IDE::detect()+0x29>
c001ad4a:	50                   	push   eax
c001ad4b:	6a 04                	push   0x4
c001ad4d:	56                   	push   esi
c001ad4e:	53                   	push   ebx
c001ad4f:	e8 2a f7 ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001ad54:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ad58:	83 c4 0c             	add    esp,0xc
c001ad5b:	6a 05                	push   0x5
c001ad5d:	56                   	push   esi
c001ad5e:	53                   	push   ebx
c001ad5f:	e8 1a f7 ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001ad64:	83 c4 10             	add    esp,0x10
c001ad67:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001ad6b:	80 fa 14             	cmp    dl,0x14
c001ad6e:	75 04                	jne    c001ad74 <IDE::detect()+0x288>
c001ad70:	3c eb                	cmp    al,0xeb
c001ad72:	eb 07                	jmp    c001ad7b <IDE::detect()+0x28f>
c001ad74:	3c 96                	cmp    al,0x96
c001ad76:	75 b1                	jne    c001ad29 <IDE::detect()+0x23d>
c001ad78:	80 fa 69             	cmp    dl,0x69
c001ad7b:	75 ac                	jne    c001ad29 <IDE::detect()+0x23d>
c001ad7d:	68 a1 00 00 00       	push   0xa1
c001ad82:	6a 07                	push   0x7
c001ad84:	56                   	push   esi
c001ad85:	53                   	push   ebx
c001ad86:	e8 33 f6 ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad8b:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001ad92:	e8 45 9f ff ff       	call   c0014cdc <milliTenthSleep(unsigned int)>
c001ad97:	83 c4 10             	add    esp,0x10
c001ad9a:	b1 01                	mov    cl,0x1
c001ad9c:	e9 6d fe ff ff       	jmp    c001ac0e <IDE::detect()+0x122>
c001ada1:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ada7:	5b                   	pop    ebx
c001ada8:	5e                   	pop    esi
c001ada9:	5f                   	pop    edi
c001adaa:	5d                   	pop    ebp
c001adab:	c3                   	ret    

c001adac <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001adac:	55                   	push   ebp
c001adad:	57                   	push   edi
c001adae:	56                   	push   esi
c001adaf:	53                   	push   ebx
c001adb0:	83 ec 1c             	sub    esp,0x1c
c001adb3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001adb7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001adbb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001adbf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001adc3:	88 c3                	mov    bl,al
c001adc5:	84 c0                	test   al,al
c001adc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001adcb:	0f 84 81 00 00 00    	je     c001ae52 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001add1:	83 ec 0c             	sub    esp,0xc
c001add4:	68 ab 11 02 c0       	push   0xc00211ab
c001add9:	e8 28 f8 fe ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001adde:	83 c4 10             	add    esp,0x10
c001ade1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ade5:	3c 01                	cmp    al,0x1
c001ade7:	74 63                	je     c001ae4c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001ade9:	3c 02                	cmp    al,0x2
c001adeb:	75 53                	jne    c001ae40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001aded:	01 f6                	add    esi,esi
c001adef:	09 ee                	or     esi,ebp
c001adf1:	50                   	push   eax
c001adf2:	89 f0                	mov    eax,esi
c001adf4:	6a 01                	push   0x1
c001adf6:	0f b6 f0             	movzx  esi,al
c001adf9:	c1 e6 06             	shl    esi,0x6
c001adfc:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001ae04:	50                   	push   eax
c001ae05:	57                   	push   edi
c001ae06:	e8 73 f6 ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001ae0b:	83 c4 10             	add    esp,0x10
c001ae0e:	a8 01                	test   al,0x1
c001ae10:	74 02                	je     c001ae14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001ae12:	b3 07                	mov    bl,0x7
c001ae14:	a8 02                	test   al,0x2
c001ae16:	74 02                	je     c001ae1a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001ae18:	b3 03                	mov    bl,0x3
c001ae1a:	a8 04                	test   al,0x4
c001ae1c:	74 02                	je     c001ae20 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001ae1e:	b3 14                	mov    bl,0x14
c001ae20:	a8 08                	test   al,0x8
c001ae22:	74 02                	je     c001ae26 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001ae24:	b3 03                	mov    bl,0x3
c001ae26:	a8 10                	test   al,0x10
c001ae28:	74 02                	je     c001ae2c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001ae2a:	b3 15                	mov    bl,0x15
c001ae2c:	a8 20                	test   al,0x20
c001ae2e:	74 02                	je     c001ae32 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001ae30:	b3 03                	mov    bl,0x3
c001ae32:	a8 40                	test   al,0x40
c001ae34:	74 02                	je     c001ae38 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001ae36:	b3 16                	mov    bl,0x16
c001ae38:	84 c0                	test   al,al
c001ae3a:	79 16                	jns    c001ae52 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ae3c:	b3 0d                	mov    bl,0xd
c001ae3e:	eb 12                	jmp    c001ae52 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ae40:	3c 03                	cmp    al,0x3
c001ae42:	74 0c                	je     c001ae50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001ae44:	3c 04                	cmp    al,0x4
c001ae46:	75 0a                	jne    c001ae52 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ae48:	b3 08                	mov    bl,0x8
c001ae4a:	eb 06                	jmp    c001ae52 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ae4c:	b3 13                	mov    bl,0x13
c001ae4e:	eb 02                	jmp    c001ae52 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ae50:	b3 17                	mov    bl,0x17
c001ae52:	83 c4 1c             	add    esp,0x1c
c001ae55:	88 d8                	mov    al,bl
c001ae57:	5b                   	pop    ebx
c001ae58:	5e                   	pop    esi
c001ae59:	5f                   	pop    edi
c001ae5a:	5d                   	pop    ebp
c001ae5b:	c3                   	ret    

c001ae5c <IDE::polling(unsigned char, unsigned int)>:
c001ae5c:	55                   	push   ebp
c001ae5d:	bd 04 00 00 00       	mov    ebp,0x4
c001ae62:	57                   	push   edi
c001ae63:	56                   	push   esi
c001ae64:	53                   	push   ebx
c001ae65:	83 ec 0c             	sub    esp,0xc
c001ae68:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ae6c:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001ae70:	0f b6 f3             	movzx  esi,bl
c001ae73:	52                   	push   edx
c001ae74:	6a 0c                	push   0xc
c001ae76:	56                   	push   esi
c001ae77:	57                   	push   edi
c001ae78:	e8 01 f6 ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001ae7d:	83 c4 10             	add    esp,0x10
c001ae80:	4d                   	dec    ebp
c001ae81:	75 ed                	jne    c001ae70 <IDE::polling(unsigned char, unsigned int)+0x14>
c001ae83:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ae88:	50                   	push   eax
c001ae89:	6a 0c                	push   0xc
c001ae8b:	56                   	push   esi
c001ae8c:	57                   	push   edi
c001ae8d:	e8 ec f5 ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001ae92:	83 c4 10             	add    esp,0x10
c001ae95:	a8 01                	test   al,0x1
c001ae97:	75 17                	jne    c001aeb0 <IDE::polling(unsigned char, unsigned int)+0x54>
c001ae99:	a8 20                	test   al,0x20
c001ae9b:	75 0f                	jne    c001aeac <IDE::polling(unsigned char, unsigned int)+0x50>
c001ae9d:	4b                   	dec    ebx
c001ae9e:	74 10                	je     c001aeb0 <IDE::polling(unsigned char, unsigned int)+0x54>
c001aea0:	84 c0                	test   al,al
c001aea2:	78 e4                	js     c001ae88 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001aea4:	a8 08                	test   al,0x8
c001aea6:	74 e0                	je     c001ae88 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001aea8:	31 c0                	xor    eax,eax
c001aeaa:	eb 06                	jmp    c001aeb2 <IDE::polling(unsigned char, unsigned int)+0x56>
c001aeac:	b0 01                	mov    al,0x1
c001aeae:	eb 02                	jmp    c001aeb2 <IDE::polling(unsigned char, unsigned int)+0x56>
c001aeb0:	b0 02                	mov    al,0x2
c001aeb2:	83 c4 0c             	add    esp,0xc
c001aeb5:	5b                   	pop    ebx
c001aeb6:	5e                   	pop    esi
c001aeb7:	5f                   	pop    edi
c001aeb8:	5d                   	pop    ebp
c001aeb9:	c3                   	ret    

c001aeba <SATABus::close(int, int, void*)>:
c001aeba:	31 c0                	xor    eax,eax
c001aebc:	c3                   	ret    
c001aebd:	90                   	nop

c001aebe <SATABus::detect()>:
c001aebe:	c3                   	ret    
c001aebf:	90                   	nop

c001aec0 <SATABus::SATABus()>:
c001aec0:	83 ec 0c             	sub    esp,0xc
c001aec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aec7:	83 ec 08             	sub    esp,0x8
c001aeca:	68 e4 11 02 c0       	push   0xc00211e4
c001aecf:	50                   	push   eax
c001aed0:	e8 b3 0e ff ff       	call   c000bd88 <HardDiskController::HardDiskController(char const*)>
c001aed5:	83 c4 10             	add    esp,0x10
c001aed8:	ba 10 12 02 c0       	mov    edx,0xc0021210
c001aedd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aee1:	89 10                	mov    DWORD PTR [eax],edx
c001aee3:	83 ec 0c             	sub    esp,0xc
c001aee6:	6a 50                	push   0x50
c001aee8:	e8 12 cd fe ff       	call   c0007bff <Phys::allocateContiguousPages(int)>
c001aeed:	83 c4 10             	add    esp,0x10
c001aef0:	89 c2                	mov    edx,eax
c001aef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aef6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001aefc:	83 ec 0c             	sub    esp,0xc
c001aeff:	6a 50                	push   0x50
c001af01:	e8 43 e4 fe ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c001af06:	83 c4 10             	add    esp,0x10
c001af09:	89 c2                	mov    edx,eax
c001af0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af0f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001af15:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c001af1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af1e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001af24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af28:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001af2e:	83 ec 0c             	sub    esp,0xc
c001af31:	6a 03                	push   0x3
c001af33:	6a 50                	push   0x50
c001af35:	51                   	push   ecx
c001af36:	52                   	push   edx
c001af37:	50                   	push   eax
c001af38:	e8 c9 ed fe ff       	call   c0009d06 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001af3d:	83 c4 20             	add    esp,0x20
c001af40:	90                   	nop
c001af41:	83 c4 0c             	add    esp,0xc
c001af44:	c3                   	ret    
c001af45:	90                   	nop

c001af46 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001af46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af4a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001af4d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001af50:	09 c2                	or     edx,eax
c001af52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af56:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001af5c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001af5e:	31 c0                	xor    eax,eax
c001af60:	c1 e9 08             	shr    ecx,0x8
c001af63:	83 e1 0f             	and    ecx,0xf
c001af66:	39 c8                	cmp    eax,ecx
c001af68:	74 0a                	je     c001af74 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001af6a:	f6 c2 01             	test   dl,0x1
c001af6d:	74 08                	je     c001af77 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001af6f:	d1 ea                	shr    edx,1
c001af71:	40                   	inc    eax
c001af72:	eb f2                	jmp    c001af66 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001af74:	83 c8 ff             	or     eax,0xffffffff
c001af77:	c3                   	ret    

c001af78 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001af78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001af7c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001af7f:	89 c2                	mov    edx,eax
c001af81:	c1 ea 08             	shr    edx,0x8
c001af84:	83 e2 0f             	and    edx,0xf
c001af87:	fe ca                	dec    dl
c001af89:	75 31                	jne    c001afbc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001af8b:	83 e0 0f             	and    eax,0xf
c001af8e:	3c 03                	cmp    al,0x3
c001af90:	75 2a                	jne    c001afbc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001af92:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001af95:	b8 02 00 00 00       	mov    eax,0x2
c001af9a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001afa0:	74 1c                	je     c001afbe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001afa2:	b8 04 00 00 00       	mov    eax,0x4
c001afa7:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001afad:	74 0f                	je     c001afbe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001afaf:	31 c0                	xor    eax,eax
c001afb1:	83 fa 03             	cmp    edx,0x3
c001afb4:	0f 94 c0             	sete   al
c001afb7:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001afbb:	c3                   	ret    
c001afbc:	31 c0                	xor    eax,eax
c001afbe:	c3                   	ret    
c001afbf:	90                   	nop

c001afc0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001afc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001afc4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001afc7:	0f ba e2 0f          	bt     edx,0xf
c001afcb:	72 f7                	jb     c001afc4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001afcd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001afd0:	83 ca 10             	or     edx,0x10
c001afd3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001afd6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001afd9:	83 ca 01             	or     edx,0x1
c001afdc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001afdf:	c3                   	ret    

c001afe0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001afe0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001afe4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001afe7:	83 e2 fe             	and    edx,0xfffffffe
c001afea:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001afed:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001aff0:	83 e2 ef             	and    edx,0xffffffef
c001aff3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001aff6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001aff9:	0f ba e2 0e          	bt     edx,0xe
c001affd:	72 f7                	jb     c001aff6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001afff:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b002:	0f ba e2 0f          	bt     edx,0xf
c001b006:	72 ee                	jb     c001aff6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b008:	c3                   	ret    
c001b009:	90                   	nop

c001b00a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b00a:	55                   	push   ebp
c001b00b:	57                   	push   edi
c001b00c:	56                   	push   esi
c001b00d:	53                   	push   ebx
c001b00e:	83 ec 1c             	sub    esp,0x1c
c001b011:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b015:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b019:	53                   	push   ebx
c001b01a:	56                   	push   esi
c001b01b:	e8 c0 ff ff ff       	call   c001afe0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b020:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b024:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b02a:	83 ec 0c             	sub    esp,0xc
c001b02d:	c1 e5 0a             	shl    ebp,0xa
c001b030:	01 e8                	add    eax,ebp
c001b032:	89 03                	mov    DWORD PTR [ebx],eax
c001b034:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b036:	68 00 04 00 00       	push   0x400
c001b03b:	6a 00                	push   0x0
c001b03d:	50                   	push   eax
c001b03e:	e8 7d 54 fe ff       	call   c00004c0 <memset>
c001b043:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001b049:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b04d:	01 e8                	add    eax,ebp
c001b04f:	83 c4 1c             	add    esp,0x1c
c001b052:	89 03                	mov    DWORD PTR [ebx],eax
c001b054:	c1 e2 08             	shl    edx,0x8
c001b057:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b05e:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001b064:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b06a:	01 f8                	add    eax,edi
c001b06c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b06f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b072:	68 00 01 00 00       	push   0x100
c001b077:	6a 00                	push   0x0
c001b079:	50                   	push   eax
c001b07a:	e8 41 54 fe ff       	call   c00004c0 <memset>
c001b07f:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001b085:	01 fa                	add    edx,edi
c001b087:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001b08b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001b08e:	c1 e7 0d             	shl    edi,0xd
c001b091:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b098:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001b09e:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001b0a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b0a8:	31 ff                	xor    edi,edi
c001b0aa:	83 c4 10             	add    esp,0x10
c001b0ad:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001b0b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b0b7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001b0bd:	83 c5 20             	add    ebp,0x20
c001b0c0:	01 f8                	add    eax,edi
c001b0c2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b0c5:	52                   	push   edx
c001b0c6:	68 00 01 00 00       	push   0x100
c001b0cb:	6a 00                	push   0x0
c001b0cd:	50                   	push   eax
c001b0ce:	e8 ed 53 fe ff       	call   c00004c0 <memset>
c001b0d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0d7:	83 c4 10             	add    esp,0x10
c001b0da:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001b0e0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001b0e7:	01 f8                	add    eax,edi
c001b0e9:	81 c7 00 01 00 00    	add    edi,0x100
c001b0ef:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b0f2:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001b0f8:	75 b3                	jne    c001b0ad <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001b0fa:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b101:	50                   	push   eax
c001b102:	50                   	push   eax
c001b103:	53                   	push   ebx
c001b104:	56                   	push   esi
c001b105:	e8 b6 fe ff ff       	call   c001afc0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b10a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b111:	83 c4 2c             	add    esp,0x2c
c001b114:	5b                   	pop    ebx
c001b115:	5e                   	pop    esi
c001b116:	5f                   	pop    edi
c001b117:	5d                   	pop    ebp
c001b118:	c3                   	ret    
c001b119:	90                   	nop

c001b11a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b11a:	55                   	push   ebp
c001b11b:	57                   	push   edi
c001b11c:	56                   	push   esi
c001b11d:	53                   	push   ebx
c001b11e:	31 db                	xor    ebx,ebx
c001b120:	83 ec 0c             	sub    esp,0xc
c001b123:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b127:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b12b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b12e:	f7 c7 01 00 00 00    	test   edi,0x1
c001b134:	74 7a                	je     c001b1b0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b136:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b13a:	89 d8                	mov    eax,ebx
c001b13c:	c1 e0 07             	shl    eax,0x7
c001b13f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001b146:	55                   	push   ebp
c001b147:	56                   	push   esi
c001b148:	e8 2b fe ff ff       	call   c001af78 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001b14d:	5a                   	pop    edx
c001b14e:	83 f8 01             	cmp    eax,0x1
c001b151:	59                   	pop    ecx
c001b152:	75 21                	jne    c001b175 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001b154:	50                   	push   eax
c001b155:	53                   	push   ebx
c001b156:	55                   	push   ebp
c001b157:	56                   	push   esi
c001b158:	e8 ad fe ff ff       	call   c001b00a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b15d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001b164:	e8 fc c6 fe ff       	call   c0007865 <malloc>
c001b169:	89 c5                	mov    ebp,eax
c001b16b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b16e:	e8 71 10 00 00       	call   c001c1e4 <SATA::SATA()>
c001b173:	eb 24                	jmp    c001b199 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001b175:	83 f8 04             	cmp    eax,0x4
c001b178:	75 36                	jne    c001b1b0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b17a:	51                   	push   ecx
c001b17b:	53                   	push   ebx
c001b17c:	55                   	push   ebp
c001b17d:	56                   	push   esi
c001b17e:	e8 87 fe ff ff       	call   c001b00a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b183:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001b18a:	e8 d6 c6 fe ff       	call   c0007865 <malloc>
c001b18f:	89 c5                	mov    ebp,eax
c001b191:	89 04 24             	mov    DWORD PTR [esp],eax
c001b194:	e8 a5 17 00 00       	call   c001c93e <SATAPI::SATAPI()>
c001b199:	58                   	pop    eax
c001b19a:	5a                   	pop    edx
c001b19b:	55                   	push   ebp
c001b19c:	56                   	push   esi
c001b19d:	e8 a2 08 ff ff       	call   c000ba44 <Device::addChild(Device*)>
c001b1a2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b1a5:	56                   	push   esi
c001b1a6:	6a 00                	push   0x0
c001b1a8:	53                   	push   ebx
c001b1a9:	55                   	push   ebp
c001b1aa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b1ad:	83 c4 20             	add    esp,0x20
c001b1b0:	d1 ef                	shr    edi,1
c001b1b2:	43                   	inc    ebx
c001b1b3:	83 fb 20             	cmp    ebx,0x20
c001b1b6:	0f 85 72 ff ff ff    	jne    c001b12e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001b1bc:	83 c4 0c             	add    esp,0xc
c001b1bf:	5b                   	pop    ebx
c001b1c0:	5e                   	pop    esi
c001b1c1:	5f                   	pop    edi
c001b1c2:	5d                   	pop    ebp
c001b1c3:	c3                   	ret    

c001b1c4 <SATABus::open(int, int, void*)>:
c001b1c4:	83 ec 14             	sub    esp,0x14
c001b1c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1cb:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001b1d1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b1d7:	52                   	push   edx
c001b1d8:	50                   	push   eax
c001b1d9:	e8 3c ff ff ff       	call   c001b11a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001b1de:	31 c0                	xor    eax,eax
c001b1e0:	83 c4 1c             	add    esp,0x1c
c001b1e3:	c3                   	ret    

c001b1e4 <ATA::close(int, int, void*)>:
c001b1e4:	83 ec 0c             	sub    esp,0xc
c001b1e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1eb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b1f1:	85 c0                	test   eax,eax
c001b1f3:	74 0c                	je     c001b201 <ATA::close(int, int, void*)+0x1d>
c001b1f5:	83 ec 0c             	sub    esp,0xc
c001b1f8:	8b 10                	mov    edx,DWORD PTR [eax]
c001b1fa:	50                   	push   eax
c001b1fb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b1fe:	83 c4 10             	add    esp,0x10
c001b201:	31 c0                	xor    eax,eax
c001b203:	83 c4 0c             	add    esp,0xc
c001b206:	c3                   	ret    
c001b207:	90                   	nop

c001b208 <ATA::powerSaving(PowerSavingLevel)>:
c001b208:	c3                   	ret    
c001b209:	90                   	nop

c001b20a <ATA::ATA()>:
c001b20a:	83 ec 0c             	sub    esp,0xc
c001b20d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b211:	83 ec 04             	sub    esp,0x4
c001b214:	68 00 02 00 00       	push   0x200
c001b219:	68 dd 12 02 c0       	push   0xc00212dd
c001b21e:	50                   	push   eax
c001b21f:	e8 ee 0b ff ff       	call   c000be12 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b224:	83 c4 10             	add    esp,0x10
c001b227:	ba 50 12 02 c0       	mov    edx,0xc0021250
c001b22c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b230:	89 10                	mov    DWORD PTR [eax],edx
c001b232:	90                   	nop
c001b233:	83 c4 0c             	add    esp,0xc
c001b236:	c3                   	ret    
c001b237:	90                   	nop

c001b238 <ATA::flush(bool)>:
c001b238:	53                   	push   ebx
c001b239:	83 ec 08             	sub    esp,0x8
c001b23c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001b241:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b245:	19 c0                	sbb    eax,eax
c001b247:	83 e0 fd             	and    eax,0xfffffffd
c001b24a:	05 ea 00 00 00       	add    eax,0xea
c001b24f:	50                   	push   eax
c001b250:	6a 07                	push   0x7
c001b252:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b259:	50                   	push   eax
c001b25a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b260:	e8 59 f1 ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b265:	83 c4 0c             	add    esp,0xc
c001b268:	6a 00                	push   0x0
c001b26a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b271:	50                   	push   eax
c001b272:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b278:	e8 df fb ff ff       	call   c001ae5c <IDE::polling(unsigned char, unsigned int)>
c001b27d:	83 c4 18             	add    esp,0x18
c001b280:	5b                   	pop    ebx
c001b281:	c3                   	ret    

c001b282 <ATA::readyForCommand()>:
c001b282:	56                   	push   esi
c001b283:	53                   	push   ebx
c001b284:	53                   	push   ebx
c001b285:	31 db                	xor    ebx,ebx
c001b287:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b28b:	51                   	push   ecx
c001b28c:	6a 0c                	push   0xc
c001b28e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b295:	50                   	push   eax
c001b296:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b29c:	e8 dd f1 ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001b2a1:	83 c4 10             	add    esp,0x10
c001b2a4:	a8 88                	test   al,0x88
c001b2a6:	74 1f                	je     c001b2c7 <ATA::readyForCommand()+0x45>
c001b2a8:	43                   	inc    ebx
c001b2a9:	83 fb 63             	cmp    ebx,0x63
c001b2ac:	7e dd                	jle    c001b28b <ATA::readyForCommand()+0x9>
c001b2ae:	83 ec 0c             	sub    esp,0xc
c001b2b1:	6a 0a                	push   0xa
c001b2b3:	e8 24 9a ff ff       	call   c0014cdc <milliTenthSleep(unsigned int)>
c001b2b8:	83 c4 10             	add    esp,0x10
c001b2bb:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001b2c1:	75 c8                	jne    c001b28b <ATA::readyForCommand()+0x9>
c001b2c3:	31 c0                	xor    eax,eax
c001b2c5:	eb 02                	jmp    c001b2c9 <ATA::readyForCommand()+0x47>
c001b2c7:	b0 01                	mov    al,0x1
c001b2c9:	5a                   	pop    edx
c001b2ca:	5b                   	pop    ebx
c001b2cb:	5e                   	pop    esi
c001b2cc:	c3                   	ret    
c001b2cd:	90                   	nop

c001b2ce <ATA::access(unsigned long long, int, void*, bool)>:
c001b2ce:	55                   	push   ebp
c001b2cf:	57                   	push   edi
c001b2d0:	56                   	push   esi
c001b2d1:	53                   	push   ebx
c001b2d2:	83 ec 2c             	sub    esp,0x2c
c001b2d5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001b2d9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001b2dd:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001b2e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2e5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001b2e9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b2ed:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b2f1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b2f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b2fb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001b301:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b305:	c1 e0 06             	shl    eax,0x6
c001b308:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001b310:	74 5d                	je     c001b36f <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001b312:	89 fa                	mov    edx,edi
c001b314:	89 f0                	mov    eax,esi
c001b316:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001b31a:	c1 ea 1c             	shr    edx,0x1c
c001b31d:	89 d1                	mov    ecx,edx
c001b31f:	09 c1                	or     ecx,eax
c001b321:	74 25                	je     c001b348 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001b323:	31 ed                	xor    ebp,ebp
c001b325:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001b32c:	89 fa                	mov    edx,edi
c001b32e:	89 f0                	mov    eax,esi
c001b330:	0f ad d0             	shrd   eax,edx,cl
c001b333:	d3 ea                	shr    edx,cl
c001b335:	f6 c1 20             	test   cl,0x20
c001b338:	74 02                	je     c001b33c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001b33a:	89 d0                	mov    eax,edx
c001b33c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001b340:	45                   	inc    ebp
c001b341:	83 fd 06             	cmp    ebp,0x6
c001b344:	75 df                	jne    c001b325 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001b346:	eb 76                	jmp    c001b3be <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001b348:	89 f0                	mov    eax,esi
c001b34a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001b34f:	89 fa                	mov    edx,edi
c001b351:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b358:	0f ac d0 10          	shrd   eax,edx,0x10
c001b35c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b361:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b365:	c1 ee 18             	shr    esi,0x18
c001b368:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001b36d:	eb 56                	jmp    c001b3c5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001b36f:	6a 00                	push   0x0
c001b371:	6a 3f                	push   0x3f
c001b373:	57                   	push   edi
c001b374:	56                   	push   esi
c001b375:	e8 66 2a 00 00       	call   c001dde0 <__umoddi3>
c001b37a:	83 c4 10             	add    esp,0x10
c001b37d:	40                   	inc    eax
c001b37e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001b382:	6a 00                	push   0x0
c001b384:	68 f0 03 00 00       	push   0x3f0
c001b389:	57                   	push   edi
c001b38a:	56                   	push   esi
c001b38b:	e8 50 29 00 00       	call   c001dce0 <__udivdi3>
c001b390:	83 c4 10             	add    esp,0x10
c001b393:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001b398:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b39f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b3a4:	6a 00                	push   0x0
c001b3a6:	6a 3f                	push   0x3f
c001b3a8:	57                   	push   edi
c001b3a9:	56                   	push   esi
c001b3aa:	e8 31 29 00 00       	call   c001dce0 <__udivdi3>
c001b3af:	83 c4 10             	add    esp,0x10
c001b3b2:	89 c6                	mov    esi,eax
c001b3b4:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001b3b9:	83 e6 0f             	and    esi,0xf
c001b3bc:	eb 07                	jmp    c001b3c5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001b3be:	31 f6                	xor    esi,esi
c001b3c0:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001b3c5:	bf 01 00 00 00       	mov    edi,0x1
c001b3ca:	50                   	push   eax
c001b3cb:	6a 00                	push   0x0
c001b3cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b3d4:	50                   	push   eax
c001b3d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b3d9:	e8 ee f1 ff ff       	call   c001a5cc <IDE::enableIRQs(unsigned char, bool)>
c001b3de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3e1:	e8 9c fe ff ff       	call   c001b282 <ATA::readyForCommand()>
c001b3e6:	83 c4 10             	add    esp,0x10
c001b3e9:	84 c0                	test   al,al
c001b3eb:	0f 84 4e 02 00 00    	je     c001b63f <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001b3f1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001b3f7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001b3fd:	c1 e0 04             	shl    eax,0x4
c001b400:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001b407:	09 c6                	or     esi,eax
c001b409:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001b40e:	75 05                	jne    c001b415 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001b410:	83 ce a0             	or     esi,0xffffffa0
c001b413:	eb 03                	jmp    c001b418 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001b415:	83 ce e0             	or     esi,0xffffffe0
c001b418:	89 f0                	mov    eax,esi
c001b41a:	0f b6 f0             	movzx  esi,al
c001b41d:	56                   	push   esi
c001b41e:	6a 06                	push   0x6
c001b420:	51                   	push   ecx
c001b421:	52                   	push   edx
c001b422:	e8 97 ef ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b427:	83 c4 10             	add    esp,0x10
c001b42a:	6a 00                	push   0x0
c001b42c:	6a 01                	push   0x1
c001b42e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b435:	50                   	push   eax
c001b436:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b43c:	e8 7d ef ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b441:	83 c4 10             	add    esp,0x10
c001b444:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001b449:	75 6e                	jne    c001b4b9 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001b44b:	6a 00                	push   0x0
c001b44d:	6a 08                	push   0x8
c001b44f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b456:	50                   	push   eax
c001b457:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b45d:	e8 5c ef ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b462:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001b467:	50                   	push   eax
c001b468:	6a 09                	push   0x9
c001b46a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b471:	50                   	push   eax
c001b472:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b478:	e8 41 ef ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b47d:	83 c4 20             	add    esp,0x20
c001b480:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001b485:	50                   	push   eax
c001b486:	6a 0a                	push   0xa
c001b488:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b48f:	50                   	push   eax
c001b490:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b496:	e8 23 ef ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b49b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001b4a0:	50                   	push   eax
c001b4a1:	6a 0b                	push   0xb
c001b4a3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b4aa:	50                   	push   eax
c001b4ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b4b1:	e8 08 ef ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b4b6:	83 c4 20             	add    esp,0x20
c001b4b9:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001b4be:	50                   	push   eax
c001b4bf:	6a 02                	push   0x2
c001b4c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b4c8:	50                   	push   eax
c001b4c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b4cf:	e8 ea ee ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b4d4:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001b4d9:	50                   	push   eax
c001b4da:	6a 03                	push   0x3
c001b4dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b4e3:	50                   	push   eax
c001b4e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b4ea:	e8 cf ee ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b4ef:	83 c4 20             	add    esp,0x20
c001b4f2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001b4f7:	50                   	push   eax
c001b4f8:	6a 04                	push   0x4
c001b4fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b501:	50                   	push   eax
c001b502:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b508:	e8 b1 ee ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b50d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b512:	50                   	push   eax
c001b513:	6a 05                	push   0x5
c001b515:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b51c:	50                   	push   eax
c001b51d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b523:	e8 96 ee ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b528:	83 c4 20             	add    esp,0x20
c001b52b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001b530:	0f 94 c0             	sete   al
c001b533:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001b538:	74 09                	je     c001b543 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001b53a:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001b541:	eb 07                	jmp    c001b54a <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001b543:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001b54a:	0f b6 c0             	movzx  eax,al
c001b54d:	50                   	push   eax
c001b54e:	6a 07                	push   0x7
c001b550:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b557:	50                   	push   eax
c001b558:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b55e:	e8 5b ee ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b563:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001b567:	83 c4 10             	add    esp,0x10
c001b56a:	85 f6                	test   esi,esi
c001b56c:	0f 84 ae 00 00 00    	je     c001b620 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001b572:	50                   	push   eax
c001b573:	6a 01                	push   0x1
c001b575:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b57c:	50                   	push   eax
c001b57d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b583:	e8 d4 f8 ff ff       	call   c001ae5c <IDE::polling(unsigned char, unsigned int)>
c001b588:	83 c4 10             	add    esp,0x10
c001b58b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b591:	84 c0                	test   al,al
c001b593:	74 20                	je     c001b5b5 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001b595:	0f b6 f8             	movzx  edi,al
c001b598:	0f b6 d2             	movzx  edx,dl
c001b59b:	57                   	push   edi
c001b59c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001b5a3:	50                   	push   eax
c001b5a4:	52                   	push   edx
c001b5a5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b5ab:	e8 fc f7 ff ff       	call   c001adac <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001b5b0:	e9 87 00 00 00       	jmp    c001b63c <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001b5b5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b5ba:	74 33                	je     c001b5ef <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001b5bc:	31 ed                	xor    ebp,ebp
c001b5be:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b5c2:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001b5c6:	50                   	push   eax
c001b5c7:	50                   	push   eax
c001b5c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b5cf:	50                   	push   eax
c001b5d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b5d6:	e8 d1 ed ff ff       	call   c001a3ac <IDE::getBase(unsigned char)>
c001b5db:	89 c2                	mov    edx,eax
c001b5dd:	89 f8                	mov    eax,edi
c001b5df:	66 ef                	out    dx,ax
c001b5e1:	45                   	inc    ebp
c001b5e2:	83 c4 10             	add    esp,0x10
c001b5e5:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001b5eb:	75 d1                	jne    c001b5be <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001b5ed:	eb 23                	jmp    c001b612 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001b5ef:	0f b6 d2             	movzx  edx,dl
c001b5f2:	51                   	push   ecx
c001b5f3:	51                   	push   ecx
c001b5f4:	52                   	push   edx
c001b5f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b5fb:	e8 ac ed ff ff       	call   c001a3ac <IDE::getBase(unsigned char)>
c001b600:	b9 00 01 00 00       	mov    ecx,0x100
c001b605:	89 c2                	mov    edx,eax
c001b607:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001b60b:	fc                   	cld    
c001b60c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001b60f:	83 c4 10             	add    esp,0x10
c001b612:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001b61a:	4e                   	dec    esi
c001b61b:	e9 4a ff ff ff       	jmp    c001b56a <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001b620:	31 ff                	xor    edi,edi
c001b622:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001b627:	74 16                	je     c001b63f <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001b629:	50                   	push   eax
c001b62a:	50                   	push   eax
c001b62b:	31 c0                	xor    eax,eax
c001b62d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001b632:	0f 94 c0             	sete   al
c001b635:	50                   	push   eax
c001b636:	53                   	push   ebx
c001b637:	e8 fc fb ff ff       	call   c001b238 <ATA::flush(bool)>
c001b63c:	83 c4 10             	add    esp,0x10
c001b63f:	83 c4 2c             	add    esp,0x2c
c001b642:	89 f8                	mov    eax,edi
c001b644:	5b                   	pop    ebx
c001b645:	5e                   	pop    esi
c001b646:	5f                   	pop    edi
c001b647:	5d                   	pop    ebp
c001b648:	c3                   	ret    
c001b649:	90                   	nop

c001b64a <ATA::detectCHS()>:
c001b64a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b64e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001b654:	c1 e0 06             	shl    eax,0x6
c001b657:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001b65d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001b667:	c7 44 24 04 34 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021234
c001b66f:	e9 53 4d ff ff       	jmp    c00103c7 <KePanic(char const*)>

c001b674 <ATA::open(int, int, void*)>:
c001b674:	53                   	push   ebx
c001b675:	83 ec 08             	sub    esp,0x8
c001b678:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b67c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b680:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b684:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001b68a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001b690:	c1 e0 06             	shl    eax,0x6
c001b693:	01 d0                	add    eax,edx
c001b695:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001b69c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001b6a2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001b6a9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001b6b3:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001b6b9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001b6c0:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001b6c7:	75 0c                	jne    c001b6d5 <ATA::open(int, int, void*)+0x61>
c001b6c9:	83 ec 0c             	sub    esp,0xc
c001b6cc:	53                   	push   ebx
c001b6cd:	e8 78 ff ff ff       	call   c001b64a <ATA::detectCHS()>
c001b6d2:	83 c4 10             	add    esp,0x10
c001b6d5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001b6db:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001b6e1:	c1 e0 06             	shl    eax,0x6
c001b6e4:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001b6eb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b6f5:	d1 e8                	shr    eax,1
c001b6f7:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001b6fd:	6a 04                	push   0x4
c001b6ff:	6a 0c                	push   0xc
c001b701:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b708:	50                   	push   eax
c001b709:	52                   	push   edx
c001b70a:	e8 af ec ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b70f:	90                   	nop
c001b710:	90                   	nop
c001b711:	6a 00                	push   0x0
c001b713:	6a 0c                	push   0xc
c001b715:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b71c:	50                   	push   eax
c001b71d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b723:	e8 96 ec ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b728:	83 c4 14             	add    esp,0x14
c001b72b:	53                   	push   ebx
c001b72c:	e8 49 07 ff ff       	call   c000be7a <PhysicalDisk::startCache()>
c001b731:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b734:	e8 b5 18 ff ff       	call   c000cfee <createPartitionsForDisk(PhysicalDisk*)>
c001b739:	31 c0                	xor    eax,eax
c001b73b:	83 c4 18             	add    esp,0x18
c001b73e:	5b                   	pop    ebx
c001b73f:	c3                   	ret    

c001b740 <combineCharAndColour(char, unsigned char)>:
c001b740:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b745:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001b74b:	c1 e0 08             	shl    eax,0x8
c001b74e:	09 d0                	or     eax,edx
c001b750:	c3                   	ret    

c001b751 <combineColours(unsigned char, unsigned char)>:
c001b751:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b756:	c1 e0 04             	shl    eax,0x4
c001b759:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001b75d:	c3                   	ret    

c001b75e <ATA::read(unsigned long long, int, void*)>:
c001b75e:	55                   	push   ebp
c001b75f:	57                   	push   edi
c001b760:	56                   	push   esi
c001b761:	be 04 00 00 00       	mov    esi,0x4
c001b766:	53                   	push   ebx
c001b767:	83 ec 0c             	sub    esp,0xc
c001b76a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b76e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b772:	8d 7b ff             	lea    edi,[ebx-0x1]
c001b775:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b779:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b77d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b783:	0f 87 a1 01 00 00    	ja     c001b92a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b789:	be 06 00 00 00       	mov    esi,0x6
c001b78e:	85 c9                	test   ecx,ecx
c001b790:	0f 84 94 01 00 00    	je     c001b92a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b796:	55                   	push   ebp
c001b797:	55                   	push   ebp
c001b798:	6a 00                	push   0x0
c001b79a:	51                   	push   ecx
c001b79b:	53                   	push   ebx
c001b79c:	52                   	push   edx
c001b79d:	50                   	push   eax
c001b79e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b7a2:	e8 27 fb ff ff       	call   c001b2ce <ATA::access(unsigned long long, int, void*, bool)>
c001b7a7:	83 c4 20             	add    esp,0x20
c001b7aa:	89 c6                	mov    esi,eax
c001b7ac:	85 c0                	test   eax,eax
c001b7ae:	0f 85 71 01 00 00    	jne    c001b925 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001b7b4:	03 1d 54 7b 02 c0    	add    ebx,DWORD PTR ds:0xc0027b54
c001b7ba:	89 da                	mov    edx,ebx
c001b7bc:	50                   	push   eax
c001b7bd:	bd 10 27 00 00       	mov    ebp,0x2710
c001b7c2:	50                   	push   eax
c001b7c3:	89 1d 54 7b 02 c0    	mov    DWORD PTR ds:0xc0027b54,ebx
c001b7c9:	6a 0f                	push   0xf
c001b7cb:	6a 00                	push   0x0
c001b7cd:	e8 7f ff ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001b7d2:	59                   	pop    ecx
c001b7d3:	b9 0a 00 00 00       	mov    ecx,0xa
c001b7d8:	5b                   	pop    ebx
c001b7d9:	0f b6 d8             	movzx  ebx,al
c001b7dc:	89 d0                	mov    eax,edx
c001b7de:	53                   	push   ebx
c001b7df:	99                   	cdq    
c001b7e0:	f7 fd                	idiv   ebp
c001b7e2:	99                   	cdq    
c001b7e3:	f7 f9                	idiv   ecx
c001b7e5:	83 c2 30             	add    edx,0x30
c001b7e8:	0f b6 d2             	movzx  edx,dl
c001b7eb:	52                   	push   edx
c001b7ec:	e8 4f ff ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001b7f1:	5f                   	pop    edi
c001b7f2:	bf e8 03 00 00       	mov    edi,0x3e8
c001b7f7:	5a                   	pop    edx
c001b7f8:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b7fe:	53                   	push   ebx
c001b7ff:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b804:	99                   	cdq    
c001b805:	f7 ff                	idiv   edi
c001b807:	99                   	cdq    
c001b808:	f7 f9                	idiv   ecx
c001b80a:	8d 42 30             	lea    eax,[edx+0x30]
c001b80d:	0f b6 c0             	movzx  eax,al
c001b810:	50                   	push   eax
c001b811:	e8 2a ff ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001b816:	5f                   	pop    edi
c001b817:	bf 64 00 00 00       	mov    edi,0x64
c001b81c:	5a                   	pop    edx
c001b81d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b823:	53                   	push   ebx
c001b824:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b829:	99                   	cdq    
c001b82a:	f7 ff                	idiv   edi
c001b82c:	99                   	cdq    
c001b82d:	f7 f9                	idiv   ecx
c001b82f:	8d 42 30             	lea    eax,[edx+0x30]
c001b832:	0f b6 c0             	movzx  eax,al
c001b835:	50                   	push   eax
c001b836:	e8 05 ff ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001b83b:	5a                   	pop    edx
c001b83c:	5a                   	pop    edx
c001b83d:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001b843:	53                   	push   ebx
c001b844:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b849:	99                   	cdq    
c001b84a:	f7 f9                	idiv   ecx
c001b84c:	99                   	cdq    
c001b84d:	f7 f9                	idiv   ecx
c001b84f:	8d 42 30             	lea    eax,[edx+0x30]
c001b852:	0f b6 c0             	movzx  eax,al
c001b855:	50                   	push   eax
c001b856:	e8 e5 fe ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001b85b:	5a                   	pop    edx
c001b85c:	5a                   	pop    edx
c001b85d:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001b863:	53                   	push   ebx
c001b864:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b869:	99                   	cdq    
c001b86a:	f7 f9                	idiv   ecx
c001b86c:	83 c2 30             	add    edx,0x30
c001b86f:	0f b6 d2             	movzx  edx,dl
c001b872:	52                   	push   edx
c001b873:	e8 c8 fe ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001b878:	5a                   	pop    edx
c001b879:	5a                   	pop    edx
c001b87a:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001b880:	53                   	push   ebx
c001b881:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b886:	99                   	cdq    
c001b887:	f7 fd                	idiv   ebp
c001b889:	99                   	cdq    
c001b88a:	f7 f9                	idiv   ecx
c001b88c:	8d 42 30             	lea    eax,[edx+0x30]
c001b88f:	0f b6 c0             	movzx  eax,al
c001b892:	50                   	push   eax
c001b893:	e8 a8 fe ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001b898:	5d                   	pop    ebp
c001b899:	bd e8 03 00 00       	mov    ebp,0x3e8
c001b89e:	5a                   	pop    edx
c001b89f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001b8a5:	53                   	push   ebx
c001b8a6:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b8ab:	99                   	cdq    
c001b8ac:	f7 fd                	idiv   ebp
c001b8ae:	99                   	cdq    
c001b8af:	f7 f9                	idiv   ecx
c001b8b1:	8d 42 30             	lea    eax,[edx+0x30]
c001b8b4:	0f b6 c0             	movzx  eax,al
c001b8b7:	50                   	push   eax
c001b8b8:	e8 83 fe ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001b8bd:	5d                   	pop    ebp
c001b8be:	5a                   	pop    edx
c001b8bf:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001b8c5:	53                   	push   ebx
c001b8c6:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b8cb:	99                   	cdq    
c001b8cc:	f7 ff                	idiv   edi
c001b8ce:	99                   	cdq    
c001b8cf:	f7 f9                	idiv   ecx
c001b8d1:	8d 42 30             	lea    eax,[edx+0x30]
c001b8d4:	0f b6 c0             	movzx  eax,al
c001b8d7:	50                   	push   eax
c001b8d8:	e8 63 fe ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001b8dd:	5f                   	pop    edi
c001b8de:	5d                   	pop    ebp
c001b8df:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001b8e5:	53                   	push   ebx
c001b8e6:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b8eb:	99                   	cdq    
c001b8ec:	f7 f9                	idiv   ecx
c001b8ee:	99                   	cdq    
c001b8ef:	f7 f9                	idiv   ecx
c001b8f1:	8d 42 30             	lea    eax,[edx+0x30]
c001b8f4:	0f b6 c0             	movzx  eax,al
c001b8f7:	50                   	push   eax
c001b8f8:	e8 43 fe ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001b8fd:	5a                   	pop    edx
c001b8fe:	5f                   	pop    edi
c001b8ff:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001b905:	53                   	push   ebx
c001b906:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b90b:	99                   	cdq    
c001b90c:	f7 f9                	idiv   ecx
c001b90e:	83 c2 30             	add    edx,0x30
c001b911:	0f b6 d2             	movzx  edx,dl
c001b914:	52                   	push   edx
c001b915:	e8 26 fe ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001b91a:	83 c4 10             	add    esp,0x10
c001b91d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001b923:	eb 05                	jmp    c001b92a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b925:	be 01 00 00 00       	mov    esi,0x1
c001b92a:	83 c4 0c             	add    esp,0xc
c001b92d:	89 f0                	mov    eax,esi
c001b92f:	5b                   	pop    ebx
c001b930:	5e                   	pop    esi
c001b931:	5f                   	pop    edi
c001b932:	5d                   	pop    ebp
c001b933:	c3                   	ret    

c001b934 <ATA::write(unsigned long long, int, void*)>:
c001b934:	55                   	push   ebp
c001b935:	57                   	push   edi
c001b936:	56                   	push   esi
c001b937:	be 04 00 00 00       	mov    esi,0x4
c001b93c:	53                   	push   ebx
c001b93d:	83 ec 0c             	sub    esp,0xc
c001b940:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b944:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b948:	8d 7b ff             	lea    edi,[ebx-0x1]
c001b94b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b94f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b953:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b959:	0f 87 9c 01 00 00    	ja     c001bafb <ATA::write(unsigned long long, int, void*)+0x1c7>
c001b95f:	be 06 00 00 00       	mov    esi,0x6
c001b964:	85 c9                	test   ecx,ecx
c001b966:	0f 84 8f 01 00 00    	je     c001bafb <ATA::write(unsigned long long, int, void*)+0x1c7>
c001b96c:	55                   	push   ebp
c001b96d:	55                   	push   ebp
c001b96e:	6a 01                	push   0x1
c001b970:	51                   	push   ecx
c001b971:	53                   	push   ebx
c001b972:	52                   	push   edx
c001b973:	50                   	push   eax
c001b974:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b978:	e8 51 f9 ff ff       	call   c001b2ce <ATA::access(unsigned long long, int, void*, bool)>
c001b97d:	83 c4 20             	add    esp,0x20
c001b980:	89 c6                	mov    esi,eax
c001b982:	85 c0                	test   eax,eax
c001b984:	0f 85 6c 01 00 00    	jne    c001baf6 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001b98a:	01 1d 50 7b 02 c0    	add    DWORD PTR ds:0xc0027b50,ebx
c001b990:	bd 10 27 00 00       	mov    ebp,0x2710
c001b995:	50                   	push   eax
c001b996:	50                   	push   eax
c001b997:	6a 0f                	push   0xf
c001b999:	6a 00                	push   0x0
c001b99b:	e8 b1 fd ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001b9a0:	5a                   	pop    edx
c001b9a1:	0f b6 d8             	movzx  ebx,al
c001b9a4:	59                   	pop    ecx
c001b9a5:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b9aa:	53                   	push   ebx
c001b9ab:	b9 0a 00 00 00       	mov    ecx,0xa
c001b9b0:	99                   	cdq    
c001b9b1:	f7 fd                	idiv   ebp
c001b9b3:	99                   	cdq    
c001b9b4:	f7 f9                	idiv   ecx
c001b9b6:	8d 42 30             	lea    eax,[edx+0x30]
c001b9b9:	0f b6 c0             	movzx  eax,al
c001b9bc:	50                   	push   eax
c001b9bd:	e8 7e fd ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001b9c2:	5f                   	pop    edi
c001b9c3:	bf e8 03 00 00       	mov    edi,0x3e8
c001b9c8:	5a                   	pop    edx
c001b9c9:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b9cf:	53                   	push   ebx
c001b9d0:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b9d5:	99                   	cdq    
c001b9d6:	f7 ff                	idiv   edi
c001b9d8:	99                   	cdq    
c001b9d9:	f7 f9                	idiv   ecx
c001b9db:	8d 42 30             	lea    eax,[edx+0x30]
c001b9de:	0f b6 c0             	movzx  eax,al
c001b9e1:	50                   	push   eax
c001b9e2:	e8 59 fd ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001b9e7:	5f                   	pop    edi
c001b9e8:	bf 64 00 00 00       	mov    edi,0x64
c001b9ed:	5a                   	pop    edx
c001b9ee:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b9f4:	53                   	push   ebx
c001b9f5:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b9fa:	99                   	cdq    
c001b9fb:	f7 ff                	idiv   edi
c001b9fd:	99                   	cdq    
c001b9fe:	f7 f9                	idiv   ecx
c001ba00:	8d 42 30             	lea    eax,[edx+0x30]
c001ba03:	0f b6 c0             	movzx  eax,al
c001ba06:	50                   	push   eax
c001ba07:	e8 34 fd ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001ba0c:	5a                   	pop    edx
c001ba0d:	5a                   	pop    edx
c001ba0e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ba14:	53                   	push   ebx
c001ba15:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001ba1a:	99                   	cdq    
c001ba1b:	f7 f9                	idiv   ecx
c001ba1d:	99                   	cdq    
c001ba1e:	f7 f9                	idiv   ecx
c001ba20:	8d 42 30             	lea    eax,[edx+0x30]
c001ba23:	0f b6 c0             	movzx  eax,al
c001ba26:	50                   	push   eax
c001ba27:	e8 14 fd ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001ba2c:	5a                   	pop    edx
c001ba2d:	5a                   	pop    edx
c001ba2e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ba34:	53                   	push   ebx
c001ba35:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001ba3a:	99                   	cdq    
c001ba3b:	f7 f9                	idiv   ecx
c001ba3d:	8d 42 30             	lea    eax,[edx+0x30]
c001ba40:	0f b6 c0             	movzx  eax,al
c001ba43:	50                   	push   eax
c001ba44:	e8 f7 fc ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001ba49:	5a                   	pop    edx
c001ba4a:	5a                   	pop    edx
c001ba4b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ba51:	53                   	push   ebx
c001ba52:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001ba57:	99                   	cdq    
c001ba58:	f7 fd                	idiv   ebp
c001ba5a:	99                   	cdq    
c001ba5b:	f7 f9                	idiv   ecx
c001ba5d:	8d 42 30             	lea    eax,[edx+0x30]
c001ba60:	0f b6 c0             	movzx  eax,al
c001ba63:	50                   	push   eax
c001ba64:	e8 d7 fc ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001ba69:	5d                   	pop    ebp
c001ba6a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ba6f:	5a                   	pop    edx
c001ba70:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ba76:	53                   	push   ebx
c001ba77:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001ba7c:	99                   	cdq    
c001ba7d:	f7 fd                	idiv   ebp
c001ba7f:	99                   	cdq    
c001ba80:	f7 f9                	idiv   ecx
c001ba82:	8d 42 30             	lea    eax,[edx+0x30]
c001ba85:	0f b6 c0             	movzx  eax,al
c001ba88:	50                   	push   eax
c001ba89:	e8 b2 fc ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001ba8e:	5d                   	pop    ebp
c001ba8f:	5a                   	pop    edx
c001ba90:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ba96:	53                   	push   ebx
c001ba97:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001ba9c:	99                   	cdq    
c001ba9d:	f7 ff                	idiv   edi
c001ba9f:	99                   	cdq    
c001baa0:	f7 f9                	idiv   ecx
c001baa2:	8d 42 30             	lea    eax,[edx+0x30]
c001baa5:	0f b6 c0             	movzx  eax,al
c001baa8:	50                   	push   eax
c001baa9:	e8 92 fc ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001baae:	5f                   	pop    edi
c001baaf:	5d                   	pop    ebp
c001bab0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001bab6:	53                   	push   ebx
c001bab7:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001babc:	99                   	cdq    
c001babd:	f7 f9                	idiv   ecx
c001babf:	99                   	cdq    
c001bac0:	f7 f9                	idiv   ecx
c001bac2:	8d 42 30             	lea    eax,[edx+0x30]
c001bac5:	0f b6 c0             	movzx  eax,al
c001bac8:	50                   	push   eax
c001bac9:	e8 72 fc ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001bace:	5a                   	pop    edx
c001bacf:	5f                   	pop    edi
c001bad0:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001bad6:	53                   	push   ebx
c001bad7:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001badc:	99                   	cdq    
c001badd:	f7 f9                	idiv   ecx
c001badf:	83 c2 30             	add    edx,0x30
c001bae2:	0f b6 d2             	movzx  edx,dl
c001bae5:	52                   	push   edx
c001bae6:	e8 55 fc ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001baeb:	83 c4 10             	add    esp,0x10
c001baee:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001baf4:	eb 05                	jmp    c001bafb <ATA::write(unsigned long long, int, void*)+0x1c7>
c001baf6:	be 01 00 00 00       	mov    esi,0x1
c001bafb:	83 c4 0c             	add    esp,0xc
c001bafe:	89 f0                	mov    eax,esi
c001bb00:	5b                   	pop    ebx
c001bb01:	5e                   	pop    esi
c001bb02:	5f                   	pop    edi
c001bb03:	5d                   	pop    ebp
c001bb04:	c3                   	ret    
c001bb05:	90                   	nop

c001bb06 <ATAPI::write(unsigned long long, int, void*)>:
c001bb06:	b8 03 00 00 00       	mov    eax,0x3
c001bb0b:	c3                   	ret    

c001bb0c <ATAPI::close(int, int, void*)>:
c001bb0c:	83 ec 0c             	sub    esp,0xc
c001bb0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb13:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bb19:	85 c0                	test   eax,eax
c001bb1b:	74 0c                	je     c001bb29 <ATAPI::close(int, int, void*)+0x1d>
c001bb1d:	83 ec 0c             	sub    esp,0xc
c001bb20:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb22:	50                   	push   eax
c001bb23:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001bb26:	83 c4 10             	add    esp,0x10
c001bb29:	31 c0                	xor    eax,eax
c001bb2b:	83 c4 0c             	add    esp,0xc
c001bb2e:	c3                   	ret    
c001bb2f:	90                   	nop

c001bb30 <ATAPI::ATAPI()>:
c001bb30:	83 ec 0c             	sub    esp,0xc
c001bb33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb37:	83 ec 04             	sub    esp,0x4
c001bb3a:	68 00 08 00 00       	push   0x800
c001bb3f:	68 7d 13 02 c0       	push   0xc002137d
c001bb44:	50                   	push   eax
c001bb45:	e8 c8 02 ff ff       	call   c000be12 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001bb4a:	83 c4 10             	add    esp,0x10
c001bb4d:	ba 98 12 02 c0       	mov    edx,0xc0021298
c001bb52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb56:	89 10                	mov    DWORD PTR [eax],edx
c001bb58:	90                   	nop
c001bb59:	83 c4 0c             	add    esp,0xc
c001bb5c:	c3                   	ret    
c001bb5d:	90                   	nop

c001bb5e <ATAPI::readyForCommand()>:
c001bb5e:	56                   	push   esi
c001bb5f:	53                   	push   ebx
c001bb60:	53                   	push   ebx
c001bb61:	31 db                	xor    ebx,ebx
c001bb63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb67:	51                   	push   ecx
c001bb68:	6a 0c                	push   0xc
c001bb6a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb71:	50                   	push   eax
c001bb72:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb78:	e8 01 e9 ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001bb7d:	83 c4 10             	add    esp,0x10
c001bb80:	a8 88                	test   al,0x88
c001bb82:	74 25                	je     c001bba9 <ATAPI::readyForCommand()+0x4b>
c001bb84:	43                   	inc    ebx
c001bb85:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001bb8b:	7e da                	jle    c001bb67 <ATAPI::readyForCommand()+0x9>
c001bb8d:	83 ec 0c             	sub    esp,0xc
c001bb90:	68 5e 01 00 00       	push   0x15e
c001bb95:	e8 42 91 ff ff       	call   c0014cdc <milliTenthSleep(unsigned int)>
c001bb9a:	83 c4 10             	add    esp,0x10
c001bb9d:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001bba3:	75 c2                	jne    c001bb67 <ATAPI::readyForCommand()+0x9>
c001bba5:	31 c0                	xor    eax,eax
c001bba7:	eb 02                	jmp    c001bbab <ATAPI::readyForCommand()+0x4d>
c001bba9:	b0 01                	mov    al,0x1
c001bbab:	5a                   	pop    edx
c001bbac:	5b                   	pop    ebx
c001bbad:	5e                   	pop    esi
c001bbae:	c3                   	ret    
c001bbaf:	90                   	nop

c001bbb0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001bbb0:	55                   	push   ebp
c001bbb1:	57                   	push   edi
c001bbb2:	56                   	push   esi
c001bbb3:	53                   	push   ebx
c001bbb4:	83 ec 20             	sub    esp,0x20
c001bbb7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001bbbb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001bbbf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001bbc3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bbc7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001bbcb:	6a 01                	push   0x1
c001bbcd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bbd4:	50                   	push   eax
c001bbd5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bbdb:	e8 ec e9 ff ff       	call   c001a5cc <IDE::enableIRQs(unsigned char, bool)>
c001bbe0:	5e                   	pop    esi
c001bbe1:	58                   	pop    eax
c001bbe2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bbe9:	50                   	push   eax
c001bbea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bbf0:	e8 a3 e7 ff ff       	call   c001a398 <IDE::prepareInterrupt(unsigned char)>
c001bbf5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bbf8:	e8 61 ff ff ff       	call   c001bb5e <ATAPI::readyForCommand()>
c001bbfd:	83 c4 10             	add    esp,0x10
c001bc00:	84 c0                	test   al,al
c001bc02:	75 0a                	jne    c001bc0e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001bc04:	bb 01 00 00 00       	mov    ebx,0x1
c001bc09:	e9 57 02 00 00       	jmp    c001be65 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001bc0e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001bc14:	c1 e0 04             	shl    eax,0x4
c001bc17:	0f b6 c0             	movzx  eax,al
c001bc1a:	50                   	push   eax
c001bc1b:	6a 06                	push   0x6
c001bc1d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bc24:	50                   	push   eax
c001bc25:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bc2b:	e8 8e e7 ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc30:	6a 00                	push   0x0
c001bc32:	6a 01                	push   0x1
c001bc34:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bc3b:	50                   	push   eax
c001bc3c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bc42:	e8 77 e7 ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc47:	83 c4 20             	add    esp,0x20
c001bc4a:	0f b6 c3             	movzx  eax,bl
c001bc4d:	0f b6 df             	movzx  ebx,bh
c001bc50:	50                   	push   eax
c001bc51:	6a 04                	push   0x4
c001bc53:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bc5a:	50                   	push   eax
c001bc5b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bc61:	e8 58 e7 ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc66:	53                   	push   ebx
c001bc67:	6a 05                	push   0x5
c001bc69:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bc70:	50                   	push   eax
c001bc71:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bc77:	e8 42 e7 ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc7c:	83 c4 20             	add    esp,0x20
c001bc7f:	68 a0 00 00 00       	push   0xa0
c001bc84:	6a 07                	push   0x7
c001bc86:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bc8d:	50                   	push   eax
c001bc8e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bc94:	e8 25 e7 ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc99:	83 c4 0c             	add    esp,0xc
c001bc9c:	6a 01                	push   0x1
c001bc9e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bca5:	50                   	push   eax
c001bca6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bcac:	e8 ab f1 ff ff       	call   c001ae5c <IDE::polling(unsigned char, unsigned int)>
c001bcb1:	83 c4 10             	add    esp,0x10
c001bcb4:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001bcba:	84 c0                	test   al,al
c001bcbc:	74 23                	je     c001bce1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001bcbe:	0f b6 d8             	movzx  ebx,al
c001bcc1:	0f b6 d2             	movzx  edx,dl
c001bcc4:	53                   	push   ebx
c001bcc5:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001bccc:	50                   	push   eax
c001bccd:	52                   	push   edx
c001bcce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bcd4:	e8 d3 f0 ff ff       	call   c001adac <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001bcd9:	83 c4 10             	add    esp,0x10
c001bcdc:	e9 84 01 00 00       	jmp    c001be65 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001bce1:	0f b6 d2             	movzx  edx,dl
c001bce4:	53                   	push   ebx
c001bce5:	53                   	push   ebx
c001bce6:	52                   	push   edx
c001bce7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bced:	e8 ba e6 ff ff       	call   c001a3ac <IDE::getBase(unsigned char)>
c001bcf2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bcf6:	b9 06 00 00 00       	mov    ecx,0x6
c001bcfb:	89 c2                	mov    edx,eax
c001bcfd:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001bd00:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001bd04:	83 c4 10             	add    esp,0x10
c001bd07:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001bd0d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001bd14:	85 db                	test   ebx,ebx
c001bd16:	0f 84 ec 00 00 00    	je     c001be08 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001bd1c:	51                   	push   ecx
c001bd1d:	51                   	push   ecx
c001bd1e:	52                   	push   edx
c001bd1f:	50                   	push   eax
c001bd20:	e8 07 e8 ff ff       	call   c001a52c <IDE::waitInterrupt(unsigned char)>
c001bd25:	83 c4 10             	add    esp,0x10
c001bd28:	84 c0                	test   al,al
c001bd2a:	0f 84 d4 fe ff ff    	je     c001bc04 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001bd30:	56                   	push   esi
c001bd31:	56                   	push   esi
c001bd32:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bd39:	50                   	push   eax
c001bd3a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bd40:	e8 53 e6 ff ff       	call   c001a398 <IDE::prepareInterrupt(unsigned char)>
c001bd45:	83 c4 0c             	add    esp,0xc
c001bd48:	6a 04                	push   0x4
c001bd4a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bd51:	50                   	push   eax
c001bd52:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bd58:	e8 21 e7 ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001bd5d:	83 c4 0c             	add    esp,0xc
c001bd60:	89 c6                	mov    esi,eax
c001bd62:	6a 05                	push   0x5
c001bd64:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bd6b:	50                   	push   eax
c001bd6c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bd72:	e8 07 e7 ff ff       	call   c001a47e <IDE::read(unsigned char, unsigned char)>
c001bd77:	89 f1                	mov    ecx,esi
c001bd79:	0f b6 c0             	movzx  eax,al
c001bd7c:	0f b6 f1             	movzx  esi,cl
c001bd7f:	c1 e0 08             	shl    eax,0x8
c001bd82:	09 c6                	or     esi,eax
c001bd84:	d1 fe                	sar    esi,1
c001bd86:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001bd8a:	83 c4 10             	add    esp,0x10
c001bd8d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001bd92:	74 41                	je     c001bdd5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001bd94:	31 c9                	xor    ecx,ecx
c001bd96:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001bd9c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001bda3:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001bda7:	75 0a                	jne    c001bdb3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001bda9:	01 c9                	add    ecx,ecx
c001bdab:	01 cd                	add    ebp,ecx
c001bdad:	4b                   	dec    ebx
c001bdae:	e9 54 ff ff ff       	jmp    c001bd07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001bdb3:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001bdb8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bdbc:	51                   	push   ecx
c001bdbd:	51                   	push   ecx
c001bdbe:	52                   	push   edx
c001bdbf:	50                   	push   eax
c001bdc0:	e8 e7 e5 ff ff       	call   c001a3ac <IDE::getBase(unsigned char)>
c001bdc5:	89 c2                	mov    edx,eax
c001bdc7:	89 f0                	mov    eax,esi
c001bdc9:	66 ef                	out    dx,ax
c001bdcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bdcf:	83 c4 10             	add    esp,0x10
c001bdd2:	41                   	inc    ecx
c001bdd3:	eb c1                	jmp    c001bd96 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001bdd5:	31 f6                	xor    esi,esi
c001bdd7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001bddd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001bde4:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001bde8:	75 06                	jne    c001bdf0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001bdea:	01 f6                	add    esi,esi
c001bdec:	01 f5                	add    ebp,esi
c001bdee:	eb bd                	jmp    c001bdad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001bdf0:	51                   	push   ecx
c001bdf1:	51                   	push   ecx
c001bdf2:	52                   	push   edx
c001bdf3:	50                   	push   eax
c001bdf4:	e8 b3 e5 ff ff       	call   c001a3ac <IDE::getBase(unsigned char)>
c001bdf9:	89 c2                	mov    edx,eax
c001bdfb:	66 ed                	in     ax,dx
c001bdfd:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001be02:	83 c4 10             	add    esp,0x10
c001be05:	46                   	inc    esi
c001be06:	eb cf                	jmp    c001bdd7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001be08:	51                   	push   ecx
c001be09:	51                   	push   ecx
c001be0a:	52                   	push   edx
c001be0b:	50                   	push   eax
c001be0c:	e8 1b e7 ff ff       	call   c001a52c <IDE::waitInterrupt(unsigned char)>
c001be11:	83 c4 10             	add    esp,0x10
c001be14:	84 c0                	test   al,al
c001be16:	0f 84 e8 fd ff ff    	je     c001bc04 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001be1c:	bb a0 86 01 00       	mov    ebx,0x186a0
c001be21:	52                   	push   edx
c001be22:	52                   	push   edx
c001be23:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001be2a:	50                   	push   eax
c001be2b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001be31:	e8 62 e5 ff ff       	call   c001a398 <IDE::prepareInterrupt(unsigned char)>
c001be36:	83 c4 10             	add    esp,0x10
c001be39:	50                   	push   eax
c001be3a:	50                   	push   eax
c001be3b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001be42:	50                   	push   eax
c001be43:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001be49:	e8 5e e5 ff ff       	call   c001a3ac <IDE::getBase(unsigned char)>
c001be4e:	8d 50 07             	lea    edx,[eax+0x7]
c001be51:	ec                   	in     al,dx
c001be52:	83 c4 10             	add    esp,0x10
c001be55:	a8 88                	test   al,0x88
c001be57:	74 0a                	je     c001be63 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001be59:	4b                   	dec    ebx
c001be5a:	75 dd                	jne    c001be39 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001be5c:	bb 02 00 00 00       	mov    ebx,0x2
c001be61:	eb 02                	jmp    c001be65 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001be63:	31 db                	xor    ebx,ebx
c001be65:	83 c4 1c             	add    esp,0x1c
c001be68:	89 d8                	mov    eax,ebx
c001be6a:	5b                   	pop    ebx
c001be6b:	5e                   	pop    esi
c001be6c:	5f                   	pop    edi
c001be6d:	5d                   	pop    ebp
c001be6e:	c3                   	ret    
c001be6f:	90                   	nop

c001be70 <ATAPI::diskRemoved()>:
c001be70:	53                   	push   ebx
c001be71:	83 ec 14             	sub    esp,0x14
c001be74:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001be78:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001be7f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001be85:	e8 52 0e ff ff       	call   c000ccdc <LogicalDisk::unmount()>
c001be8a:	58                   	pop    eax
c001be8b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001be91:	e8 26 18 ff ff       	call   c000d6bc <VCache::writeWriteBuffer()>
c001be96:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001be9c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bea0:	83 c4 18             	add    esp,0x18
c001bea3:	5b                   	pop    ebx
c001bea4:	e9 03 18 ff ff       	jmp    c000d6ac <VCache::invalidateReadBuffer()>
c001bea9:	90                   	nop

c001beaa <ATAPI::eject()>:
c001beaa:	57                   	push   edi
c001beab:	b9 03 00 00 00       	mov    ecx,0x3
c001beb0:	53                   	push   ebx
c001beb1:	83 ec 14             	sub    esp,0x14
c001beb4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001beb8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001bebc:	fc                   	cld    
c001bebd:	31 c0                	xor    eax,eax
c001bebf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bec1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001bec6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001becb:	50                   	push   eax
c001becc:	50                   	push   eax
c001becd:	6a 00                	push   0x0
c001becf:	6a 00                	push   0x0
c001bed1:	6a 00                	push   0x0
c001bed3:	6a 02                	push   0x2
c001bed5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bed9:	50                   	push   eax
c001beda:	53                   	push   ebx
c001bedb:	e8 d0 fc ff ff       	call   c001bbb0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bee0:	83 c4 14             	add    esp,0x14
c001bee3:	53                   	push   ebx
c001bee4:	e8 87 ff ff ff       	call   c001be70 <ATAPI::diskRemoved()>
c001bee9:	83 c4 24             	add    esp,0x24
c001beec:	31 c0                	xor    eax,eax
c001beee:	5b                   	pop    ebx
c001beef:	5f                   	pop    edi
c001bef0:	c3                   	ret    
c001bef1:	90                   	nop

c001bef2 <ATAPI::diskInserted()>:
c001bef2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bef6:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001befd:	c3                   	ret    

c001befe <ATAPI::detectMedia()>:
c001befe:	56                   	push   esi
c001beff:	53                   	push   ebx
c001bf00:	83 ec 28             	sub    esp,0x28
c001bf03:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf07:	6a 0c                	push   0xc
c001bf09:	6a 00                	push   0x0
c001bf0b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001bf0f:	56                   	push   esi
c001bf10:	e8 ab 45 fe ff       	call   c00004c0 <memset>
c001bf15:	58                   	pop    eax
c001bf16:	5a                   	pop    edx
c001bf17:	6a 00                	push   0x0
c001bf19:	6a 00                	push   0x0
c001bf1b:	6a 00                	push   0x0
c001bf1d:	6a 00                	push   0x0
c001bf1f:	56                   	push   esi
c001bf20:	53                   	push   ebx
c001bf21:	e8 8a fc ff ff       	call   c001bbb0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bf26:	83 c4 1c             	add    esp,0x1c
c001bf29:	6a 0c                	push   0xc
c001bf2b:	6a 00                	push   0x0
c001bf2d:	56                   	push   esi
c001bf2e:	e8 8d 45 fe ff       	call   c00004c0 <memset>
c001bf33:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001bf38:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001bf3d:	59                   	pop    ecx
c001bf3e:	58                   	pop    eax
c001bf3f:	6a 01                	push   0x1
c001bf41:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001bf45:	50                   	push   eax
c001bf46:	6a 00                	push   0x0
c001bf48:	6a 12                	push   0x12
c001bf4a:	56                   	push   esi
c001bf4b:	53                   	push   ebx
c001bf4c:	e8 5f fc ff ff       	call   c001bbb0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bf51:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001bf55:	83 c4 20             	add    esp,0x20
c001bf58:	83 e0 7f             	and    eax,0x7f
c001bf5b:	3c 70                	cmp    al,0x70
c001bf5d:	74 15                	je     c001bf74 <ATAPI::detectMedia()+0x76>
c001bf5f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bf66:	75 0c                	jne    c001bf74 <ATAPI::detectMedia()+0x76>
c001bf68:	83 ec 0c             	sub    esp,0xc
c001bf6b:	53                   	push   ebx
c001bf6c:	e8 81 ff ff ff       	call   c001bef2 <ATAPI::diskInserted()>
c001bf71:	83 c4 10             	add    esp,0x10
c001bf74:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001bf78:	83 e0 0f             	and    eax,0xf
c001bf7b:	3c 02                	cmp    al,0x2
c001bf7d:	75 1b                	jne    c001bf9a <ATAPI::detectMedia()+0x9c>
c001bf7f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001bf84:	75 2d                	jne    c001bfb3 <ATAPI::detectMedia()+0xb5>
c001bf86:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bf8d:	74 24                	je     c001bfb3 <ATAPI::detectMedia()+0xb5>
c001bf8f:	83 ec 0c             	sub    esp,0xc
c001bf92:	53                   	push   ebx
c001bf93:	e8 d8 fe ff ff       	call   c001be70 <ATAPI::diskRemoved()>
c001bf98:	eb 16                	jmp    c001bfb0 <ATAPI::detectMedia()+0xb2>
c001bf9a:	84 c0                	test   al,al
c001bf9c:	75 15                	jne    c001bfb3 <ATAPI::detectMedia()+0xb5>
c001bf9e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bfa5:	75 0c                	jne    c001bfb3 <ATAPI::detectMedia()+0xb5>
c001bfa7:	83 ec 0c             	sub    esp,0xc
c001bfaa:	53                   	push   ebx
c001bfab:	e8 42 ff ff ff       	call   c001bef2 <ATAPI::diskInserted()>
c001bfb0:	83 c4 10             	add    esp,0x10
c001bfb3:	83 c4 24             	add    esp,0x24
c001bfb6:	5b                   	pop    ebx
c001bfb7:	5e                   	pop    esi
c001bfb8:	c3                   	ret    
c001bfb9:	90                   	nop

c001bfba <ATAPI::open(int, int, void*)>:
c001bfba:	56                   	push   esi
c001bfbb:	53                   	push   ebx
c001bfbc:	50                   	push   eax
c001bfbd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bfc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bfc9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bfcf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bfd5:	c1 e0 06             	shl    eax,0x6
c001bfd8:	01 d0                	add    eax,edx
c001bfda:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001bfe1:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001bfe7:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001bfee:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001bff8:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001bffe:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c005:	6a 04                	push   0x4
c001c007:	6a 0c                	push   0xc
c001c009:	51                   	push   ecx
c001c00a:	52                   	push   edx
c001c00b:	e8 ae e3 ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c010:	90                   	nop
c001c011:	90                   	nop
c001c012:	6a 00                	push   0x0
c001c014:	6a 0c                	push   0xc
c001c016:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c01d:	50                   	push   eax
c001c01e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c024:	e8 95 e3 ff ff       	call   c001a3be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c029:	83 c4 14             	add    esp,0x14
c001c02c:	68 78 01 00 00       	push   0x178
c001c031:	e8 2f b8 fe ff       	call   c0007865 <malloc>
c001c036:	83 c4 0c             	add    esp,0xc
c001c039:	89 c6                	mov    esi,eax
c001c03b:	6a 00                	push   0x0
c001c03d:	68 ff ff ff 7f       	push   0x7fffffff
c001c042:	6a 00                	push   0x0
c001c044:	6a 00                	push   0x0
c001c046:	53                   	push   ebx
c001c047:	68 2f 14 02 c0       	push   0xc002142f
c001c04c:	50                   	push   eax
c001c04d:	e8 cc 0a ff ff       	call   c000cb1e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c052:	83 c4 14             	add    esp,0x14
c001c055:	56                   	push   esi
c001c056:	e8 83 0b ff ff       	call   c000cbde <LogicalDisk::assignDriveLetter()>
c001c05b:	5a                   	pop    edx
c001c05c:	0f be c0             	movsx  eax,al
c001c05f:	59                   	pop    ecx
c001c060:	50                   	push   eax
c001c061:	68 80 12 02 c0       	push   0xc0021280
c001c066:	e8 9b e5 fe ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001c06b:	58                   	pop    eax
c001c06c:	5a                   	pop    edx
c001c06d:	56                   	push   esi
c001c06e:	53                   	push   ebx
c001c06f:	e8 d0 f9 fe ff       	call   c000ba44 <Device::addChild(Device*)>
c001c074:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c07a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c07d:	e8 f8 fd fe ff       	call   c000be7a <PhysicalDisk::startCache()>
c001c082:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c089:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c08c:	e8 6d fe ff ff       	call   c001befe <ATAPI::detectMedia()>
c001c091:	83 c4 14             	add    esp,0x14
c001c094:	31 c0                	xor    eax,eax
c001c096:	5b                   	pop    ebx
c001c097:	5e                   	pop    esi
c001c098:	c3                   	ret    
c001c099:	90                   	nop

c001c09a <ATAPI::read(unsigned long long, int, void*)>:
c001c09a:	55                   	push   ebp
c001c09b:	57                   	push   edi
c001c09c:	56                   	push   esi
c001c09d:	53                   	push   ebx
c001c09e:	83 ec 1c             	sub    esp,0x1c
c001c0a1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c0a5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c0a9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c0ad:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c0b4:	74 3c                	je     c001c0f2 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001c0b6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c0ba:	b9 03 00 00 00       	mov    ecx,0x3
c001c0bf:	fc                   	cld    
c001c0c0:	31 c0                	xor    eax,eax
c001c0c2:	0f ce                	bswap  esi
c001c0c4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c0c6:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001c0cb:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001c0cf:	89 e8                	mov    eax,ebp
c001c0d1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001c0d5:	50                   	push   eax
c001c0d6:	50                   	push   eax
c001c0d7:	55                   	push   ebp
c001c0d8:	c1 e5 0b             	shl    ebp,0xb
c001c0db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c0df:	6a 00                	push   0x0
c001c0e1:	55                   	push   ebp
c001c0e2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c0e6:	50                   	push   eax
c001c0e7:	53                   	push   ebx
c001c0e8:	e8 c3 fa ff ff       	call   c001bbb0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c0ed:	83 c4 20             	add    esp,0x20
c001c0f0:	eb 1a                	jmp    c001c10c <ATAPI::read(unsigned long long, int, void*)+0x72>
c001c0f2:	83 ec 0c             	sub    esp,0xc
c001c0f5:	53                   	push   ebx
c001c0f6:	e8 03 fe ff ff       	call   c001befe <ATAPI::detectMedia()>
c001c0fb:	83 c4 10             	add    esp,0x10
c001c0fe:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c105:	75 af                	jne    c001c0b6 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001c107:	b8 02 00 00 00       	mov    eax,0x2
c001c10c:	83 c4 1c             	add    esp,0x1c
c001c10f:	5b                   	pop    ebx
c001c110:	5e                   	pop    esi
c001c111:	5f                   	pop    edi
c001c112:	5d                   	pop    ebp
c001c113:	c3                   	ret    

c001c114 <SATA::close(int, int, void*)>:
c001c114:	83 ec 0c             	sub    esp,0xc
c001c117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c11b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c121:	85 c0                	test   eax,eax
c001c123:	74 0c                	je     c001c131 <SATA::close(int, int, void*)+0x1d>
c001c125:	83 ec 0c             	sub    esp,0xc
c001c128:	8b 10                	mov    edx,DWORD PTR [eax]
c001c12a:	50                   	push   eax
c001c12b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c12e:	83 c4 10             	add    esp,0x10
c001c131:	31 c0                	xor    eax,eax
c001c133:	83 c4 0c             	add    esp,0xc
c001c136:	c3                   	ret    
c001c137:	90                   	nop

c001c138 <SATA::powerSaving(PowerSavingLevel)>:
c001c138:	c3                   	ret    
c001c139:	90                   	nop

c001c13a <SATA::open(int, int, void*)>:
c001c13a:	56                   	push   esi
c001c13b:	53                   	push   ebx
c001c13c:	50                   	push   eax
c001c13d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c141:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c145:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c14f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001c155:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001c15f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c163:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c16d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001c173:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c17a:	e8 c2 b9 fe ff       	call   c0007b41 <Phys::allocatePage()>
c001c17f:	89 c6                	mov    esi,eax
c001c181:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c187:	81 c6 00 10 00 00    	add    esi,0x1000
c001c18d:	e8 af b9 fe ff       	call   c0007b41 <Phys::allocatePage()>
c001c192:	39 c6                	cmp    esi,eax
c001c194:	74 10                	je     c001c1a6 <SATA::open(int, int, void*)+0x6c>
c001c196:	83 ec 0c             	sub    esp,0xc
c001c199:	68 c8 12 02 c0       	push   0xc00212c8
c001c19e:	e8 24 42 ff ff       	call   c00103c7 <KePanic(char const*)>
c001c1a3:	83 c4 10             	add    esp,0x10
c001c1a6:	83 ec 0c             	sub    esp,0xc
c001c1a9:	6a 02                	push   0x2
c001c1ab:	e8 99 d1 fe ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c001c1b0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c1b6:	6a 03                	push   0x3
c001c1b8:	50                   	push   eax
c001c1b9:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001c1bf:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001c1c5:	e8 42 d8 fe ff       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c001c1ca:	83 c4 14             	add    esp,0x14
c001c1cd:	53                   	push   ebx
c001c1ce:	e8 a7 fc fe ff       	call   c000be7a <PhysicalDisk::startCache()>
c001c1d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1d6:	e8 13 0e ff ff       	call   c000cfee <createPartitionsForDisk(PhysicalDisk*)>
c001c1db:	83 c4 14             	add    esp,0x14
c001c1de:	31 c0                	xor    eax,eax
c001c1e0:	5b                   	pop    ebx
c001c1e1:	5e                   	pop    esi
c001c1e2:	c3                   	ret    
c001c1e3:	90                   	nop

c001c1e4 <SATA::SATA()>:
c001c1e4:	83 ec 0c             	sub    esp,0xc
c001c1e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1eb:	83 ec 04             	sub    esp,0x4
c001c1ee:	68 00 02 00 00       	push   0x200
c001c1f3:	68 dc 12 02 c0       	push   0xc00212dc
c001c1f8:	50                   	push   eax
c001c1f9:	e8 14 fc fe ff       	call   c000be12 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c1fe:	83 c4 10             	add    esp,0x10
c001c201:	ba 4c 13 02 c0       	mov    edx,0xc002134c
c001c206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c20a:	89 10                	mov    DWORD PTR [eax],edx
c001c20c:	90                   	nop
c001c20d:	83 c4 0c             	add    esp,0xc
c001c210:	c3                   	ret    
c001c211:	90                   	nop

c001c212 <SATA::access(unsigned long long, int, void*, bool)>:
c001c212:	55                   	push   ebp
c001c213:	57                   	push   edi
c001c214:	56                   	push   esi
c001c215:	53                   	push   ebx
c001c216:	83 ec 2c             	sub    esp,0x2c
c001c219:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c21d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c221:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c225:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c229:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c22d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001c232:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c236:	7e 10                	jle    c001c248 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001c238:	83 ec 0c             	sub    esp,0xc
c001c23b:	68 ec 12 02 c0       	push   0xc00212ec
c001c240:	e8 82 41 ff ff       	call   c00103c7 <KePanic(char const*)>
c001c245:	83 c4 10             	add    esp,0x10
c001c248:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c24e:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001c254:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c25a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c25e:	89 d0                	mov    eax,edx
c001c260:	c1 e0 07             	shl    eax,0x7
c001c263:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c267:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001c271:	51                   	push   ecx
c001c272:	8d 42 02             	lea    eax,[edx+0x2]
c001c275:	51                   	push   ecx
c001c276:	c1 e0 07             	shl    eax,0x7
c001c279:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c27d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001c281:	50                   	push   eax
c001c282:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001c288:	e8 b9 ec ff ff       	call   c001af46 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001c28d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c291:	83 c4 10             	add    esp,0x10
c001c294:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001c299:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c29d:	0f 84 4f 01 00 00    	je     c001c3f2 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001c2a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c2a7:	c1 e0 09             	shl    eax,0x9
c001c2aa:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001c2af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c2b3:	74 0e                	je     c001c2c3 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001c2b5:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001c2bb:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001c2bf:	89 c1                	mov    ecx,eax
c001c2c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c2c3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c2c7:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001c2cd:	8d 42 02             	lea    eax,[edx+0x2]
c001c2d0:	c1 e0 07             	shl    eax,0x7
c001c2d3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c2d7:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2d9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001c2df:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001c2e5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c2e9:	c1 e1 05             	shl    ecx,0x5
c001c2ec:	01 c8                	add    eax,ecx
c001c2ee:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001c2f2:	83 e1 01             	and    ecx,0x1
c001c2f5:	89 ce                	mov    esi,ecx
c001c2f7:	8a 08                	mov    cl,BYTE PTR [eax]
c001c2f9:	c1 e6 06             	shl    esi,0x6
c001c2fc:	83 e1 bf             	and    ecx,0xffffffbf
c001c2ff:	09 f1                	or     ecx,esi
c001c301:	88 08                	mov    BYTE PTR [eax],cl
c001c303:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c305:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001c30b:	81 c9 05 00 01 00    	or     ecx,0x10005
c001c311:	89 08                	mov    DWORD PTR [eax],ecx
c001c313:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001c319:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001c31f:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001c325:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001c328:	50                   	push   eax
c001c329:	68 90 00 00 00       	push   0x90
c001c32e:	6a 00                	push   0x0
c001c330:	56                   	push   esi
c001c331:	e8 8a 41 fe ff       	call   c00004c0 <memset>
c001c336:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c33c:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001c340:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001c346:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001c34a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c34e:	83 c4 10             	add    esp,0x10
c001c351:	48                   	dec    eax
c001c352:	25 ff ff 3f 00       	and    eax,0x3fffff
c001c357:	89 c1                	mov    ecx,eax
c001c359:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001c35f:	25 00 00 c0 ff       	and    eax,0xffc00000
c001c364:	09 c8                	or     eax,ecx
c001c366:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001c36c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001c36f:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001c376:	66 25 00 7f          	and    ax,0x7f00
c001c37a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c37e:	66 0d 27 80          	or     ax,0x8027
c001c382:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001c387:	66 89 06             	mov    WORD PTR [esi],ax
c001c38a:	19 c0                	sbb    eax,eax
c001c38c:	83 e0 f0             	and    eax,0xfffffff0
c001c38f:	83 c0 35             	add    eax,0x35
c001c392:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001c395:	89 e8                	mov    eax,ebp
c001c397:	c1 e8 10             	shr    eax,0x10
c001c39a:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001c39d:	89 e8                	mov    eax,ebp
c001c39f:	c1 e8 18             	shr    eax,0x18
c001c3a2:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001c3a5:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c3a9:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001c3ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3b0:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001c3b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c3b7:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001c3bb:	89 d6                	mov    esi,edx
c001c3bd:	31 c0                	xor    eax,eax
c001c3bf:	c1 e6 07             	shl    esi,0x7
c001c3c2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c3c6:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001c3cc:	80 e1 88             	and    cl,0x88
c001c3cf:	74 0a                	je     c001c3db <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001c3d1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c3d6:	74 0a                	je     c001c3e2 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001c3d8:	40                   	inc    eax
c001c3d9:	eb eb                	jmp    c001c3c6 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001c3db:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c3e0:	75 17                	jne    c001c3f9 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001c3e2:	83 ec 0c             	sub    esp,0xc
c001c3e5:	68 25 13 02 c0       	push   0xc0021325
c001c3ea:	e8 17 e2 fe ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001c3ef:	83 c4 10             	add    esp,0x10
c001c3f2:	b8 01 00 00 00       	mov    eax,0x1
c001c3f7:	eb 5d                	jmp    c001c456 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001c3f9:	b8 01 00 00 00       	mov    eax,0x1
c001c3fe:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001c402:	c1 e2 07             	shl    edx,0x7
c001c405:	d3 e0                	shl    eax,cl
c001c407:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001c40b:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001c411:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001c417:	85 c8                	test   eax,ecx
c001c419:	74 16                	je     c001c431 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001c41b:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001c421:	0f ba e1 1e          	bt     ecx,0x1e
c001c425:	73 ea                	jae    c001c411 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001c427:	83 ec 0c             	sub    esp,0xc
c001c42a:	68 33 13 02 c0       	push   0xc0021333
c001c42f:	eb b9                	jmp    c001c3ea <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001c431:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001c437:	0f ba e0 1e          	bt     eax,0x1e
c001c43b:	72 b5                	jb     c001c3f2 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001c43d:	31 c0                	xor    eax,eax
c001c43f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001c444:	75 10                	jne    c001c456 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001c446:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001c44c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001c450:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c454:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c456:	83 c4 2c             	add    esp,0x2c
c001c459:	5b                   	pop    ebx
c001c45a:	5e                   	pop    esi
c001c45b:	5f                   	pop    edi
c001c45c:	5d                   	pop    ebp
c001c45d:	c3                   	ret    

c001c45e <SATA::read(unsigned long long, int, void*)>:
c001c45e:	55                   	push   ebp
c001c45f:	57                   	push   edi
c001c460:	56                   	push   esi
c001c461:	be 04 00 00 00       	mov    esi,0x4
c001c466:	53                   	push   ebx
c001c467:	83 ec 0c             	sub    esp,0xc
c001c46a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c46e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c472:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c475:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c479:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c47d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c483:	0f 87 1a 02 00 00    	ja     c001c6a3 <SATA::read(unsigned long long, int, void*)+0x245>
c001c489:	be 06 00 00 00       	mov    esi,0x6
c001c48e:	85 c9                	test   ecx,ecx
c001c490:	0f 84 0d 02 00 00    	je     c001c6a3 <SATA::read(unsigned long long, int, void*)+0x245>
c001c496:	56                   	push   esi
c001c497:	56                   	push   esi
c001c498:	6a 00                	push   0x0
c001c49a:	51                   	push   ecx
c001c49b:	53                   	push   ebx
c001c49c:	52                   	push   edx
c001c49d:	50                   	push   eax
c001c49e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c4a2:	e8 6b fd ff ff       	call   c001c212 <SATA::access(unsigned long long, int, void*, bool)>
c001c4a7:	83 c4 20             	add    esp,0x20
c001c4aa:	89 c6                	mov    esi,eax
c001c4ac:	85 c0                	test   eax,eax
c001c4ae:	0f 85 ea 01 00 00    	jne    c001c69e <SATA::read(unsigned long long, int, void*)+0x240>
c001c4b4:	01 1d 54 7b 02 c0    	add    DWORD PTR ds:0xc0027b54,ebx
c001c4ba:	bb 0a 00 00 00       	mov    ebx,0xa
c001c4bf:	50                   	push   eax
c001c4c0:	50                   	push   eax
c001c4c1:	6a 0f                	push   0xf
c001c4c3:	6a 00                	push   0x0
c001c4c5:	e8 87 f2 ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001c4ca:	5a                   	pop    edx
c001c4cb:	0f b6 c0             	movzx  eax,al
c001c4ce:	59                   	pop    ecx
c001c4cf:	b9 10 27 00 00       	mov    ecx,0x2710
c001c4d4:	50                   	push   eax
c001c4d5:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c4da:	99                   	cdq    
c001c4db:	f7 f9                	idiv   ecx
c001c4dd:	99                   	cdq    
c001c4de:	f7 fb                	idiv   ebx
c001c4e0:	8d 42 30             	lea    eax,[edx+0x30]
c001c4e3:	0f b6 c0             	movzx  eax,al
c001c4e6:	50                   	push   eax
c001c4e7:	e8 54 f2 ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001c4ec:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c4f2:	5f                   	pop    edi
c001c4f3:	5d                   	pop    ebp
c001c4f4:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c4f9:	6a 0f                	push   0xf
c001c4fb:	6a 00                	push   0x0
c001c4fd:	e8 4f f2 ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001c502:	5a                   	pop    edx
c001c503:	0f b6 c0             	movzx  eax,al
c001c506:	59                   	pop    ecx
c001c507:	50                   	push   eax
c001c508:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c50d:	99                   	cdq    
c001c50e:	f7 fd                	idiv   ebp
c001c510:	99                   	cdq    
c001c511:	f7 fb                	idiv   ebx
c001c513:	8d 42 30             	lea    eax,[edx+0x30]
c001c516:	0f b6 c0             	movzx  eax,al
c001c519:	50                   	push   eax
c001c51a:	e8 21 f2 ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001c51f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c525:	5f                   	pop    edi
c001c526:	bf 64 00 00 00       	mov    edi,0x64
c001c52b:	58                   	pop    eax
c001c52c:	6a 0f                	push   0xf
c001c52e:	6a 00                	push   0x0
c001c530:	e8 1c f2 ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001c535:	5a                   	pop    edx
c001c536:	0f b6 c0             	movzx  eax,al
c001c539:	59                   	pop    ecx
c001c53a:	50                   	push   eax
c001c53b:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c540:	99                   	cdq    
c001c541:	f7 ff                	idiv   edi
c001c543:	99                   	cdq    
c001c544:	f7 fb                	idiv   ebx
c001c546:	8d 42 30             	lea    eax,[edx+0x30]
c001c549:	0f b6 c0             	movzx  eax,al
c001c54c:	50                   	push   eax
c001c54d:	e8 ee f1 ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001c552:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c558:	58                   	pop    eax
c001c559:	5a                   	pop    edx
c001c55a:	6a 0f                	push   0xf
c001c55c:	6a 00                	push   0x0
c001c55e:	e8 ee f1 ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001c563:	59                   	pop    ecx
c001c564:	0f b6 c0             	movzx  eax,al
c001c567:	5a                   	pop    edx
c001c568:	50                   	push   eax
c001c569:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c56e:	99                   	cdq    
c001c56f:	f7 fb                	idiv   ebx
c001c571:	99                   	cdq    
c001c572:	f7 fb                	idiv   ebx
c001c574:	8d 42 30             	lea    eax,[edx+0x30]
c001c577:	0f b6 c0             	movzx  eax,al
c001c57a:	50                   	push   eax
c001c57b:	e8 c0 f1 ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001c580:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c586:	59                   	pop    ecx
c001c587:	58                   	pop    eax
c001c588:	6a 0f                	push   0xf
c001c58a:	6a 00                	push   0x0
c001c58c:	e8 c0 f1 ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001c591:	5a                   	pop    edx
c001c592:	0f b6 c0             	movzx  eax,al
c001c595:	59                   	pop    ecx
c001c596:	50                   	push   eax
c001c597:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c59c:	99                   	cdq    
c001c59d:	f7 fb                	idiv   ebx
c001c59f:	8d 42 30             	lea    eax,[edx+0x30]
c001c5a2:	0f b6 c0             	movzx  eax,al
c001c5a5:	50                   	push   eax
c001c5a6:	e8 95 f1 ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001c5ab:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c5b1:	58                   	pop    eax
c001c5b2:	5a                   	pop    edx
c001c5b3:	6a 0f                	push   0xf
c001c5b5:	6a 00                	push   0x0
c001c5b7:	e8 95 f1 ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001c5bc:	59                   	pop    ecx
c001c5bd:	0f b6 c0             	movzx  eax,al
c001c5c0:	5a                   	pop    edx
c001c5c1:	b9 10 27 00 00       	mov    ecx,0x2710
c001c5c6:	50                   	push   eax
c001c5c7:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c5cc:	99                   	cdq    
c001c5cd:	f7 f9                	idiv   ecx
c001c5cf:	99                   	cdq    
c001c5d0:	f7 fb                	idiv   ebx
c001c5d2:	8d 42 30             	lea    eax,[edx+0x30]
c001c5d5:	0f b6 c0             	movzx  eax,al
c001c5d8:	50                   	push   eax
c001c5d9:	e8 62 f1 ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001c5de:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c5e4:	59                   	pop    ecx
c001c5e5:	58                   	pop    eax
c001c5e6:	6a 0f                	push   0xf
c001c5e8:	6a 00                	push   0x0
c001c5ea:	e8 62 f1 ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001c5ef:	5a                   	pop    edx
c001c5f0:	0f b6 c0             	movzx  eax,al
c001c5f3:	59                   	pop    ecx
c001c5f4:	50                   	push   eax
c001c5f5:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c5fa:	99                   	cdq    
c001c5fb:	f7 fd                	idiv   ebp
c001c5fd:	99                   	cdq    
c001c5fe:	f7 fb                	idiv   ebx
c001c600:	8d 42 30             	lea    eax,[edx+0x30]
c001c603:	0f b6 c0             	movzx  eax,al
c001c606:	50                   	push   eax
c001c607:	e8 34 f1 ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001c60c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c612:	5d                   	pop    ebp
c001c613:	58                   	pop    eax
c001c614:	6a 0f                	push   0xf
c001c616:	6a 00                	push   0x0
c001c618:	e8 34 f1 ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001c61d:	5a                   	pop    edx
c001c61e:	0f b6 c0             	movzx  eax,al
c001c621:	59                   	pop    ecx
c001c622:	50                   	push   eax
c001c623:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c628:	99                   	cdq    
c001c629:	f7 ff                	idiv   edi
c001c62b:	99                   	cdq    
c001c62c:	f7 fb                	idiv   ebx
c001c62e:	8d 42 30             	lea    eax,[edx+0x30]
c001c631:	0f b6 c0             	movzx  eax,al
c001c634:	50                   	push   eax
c001c635:	e8 06 f1 ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001c63a:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c640:	5f                   	pop    edi
c001c641:	5d                   	pop    ebp
c001c642:	6a 0f                	push   0xf
c001c644:	6a 00                	push   0x0
c001c646:	e8 06 f1 ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001c64b:	5a                   	pop    edx
c001c64c:	0f b6 c0             	movzx  eax,al
c001c64f:	59                   	pop    ecx
c001c650:	50                   	push   eax
c001c651:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c656:	99                   	cdq    
c001c657:	f7 fb                	idiv   ebx
c001c659:	99                   	cdq    
c001c65a:	f7 fb                	idiv   ebx
c001c65c:	8d 42 30             	lea    eax,[edx+0x30]
c001c65f:	0f b6 c0             	movzx  eax,al
c001c662:	50                   	push   eax
c001c663:	e8 d8 f0 ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001c668:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c66e:	5f                   	pop    edi
c001c66f:	5d                   	pop    ebp
c001c670:	6a 0f                	push   0xf
c001c672:	6a 00                	push   0x0
c001c674:	e8 d8 f0 ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001c679:	5a                   	pop    edx
c001c67a:	0f b6 c0             	movzx  eax,al
c001c67d:	59                   	pop    ecx
c001c67e:	50                   	push   eax
c001c67f:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c684:	99                   	cdq    
c001c685:	f7 fb                	idiv   ebx
c001c687:	83 c2 30             	add    edx,0x30
c001c68a:	0f b6 d2             	movzx  edx,dl
c001c68d:	52                   	push   edx
c001c68e:	e8 ad f0 ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001c693:	83 c4 10             	add    esp,0x10
c001c696:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c69c:	eb 05                	jmp    c001c6a3 <SATA::read(unsigned long long, int, void*)+0x245>
c001c69e:	be 01 00 00 00       	mov    esi,0x1
c001c6a3:	83 c4 0c             	add    esp,0xc
c001c6a6:	89 f0                	mov    eax,esi
c001c6a8:	5b                   	pop    ebx
c001c6a9:	5e                   	pop    esi
c001c6aa:	5f                   	pop    edi
c001c6ab:	5d                   	pop    ebp
c001c6ac:	c3                   	ret    
c001c6ad:	90                   	nop

c001c6ae <SATA::write(unsigned long long, int, void*)>:
c001c6ae:	55                   	push   ebp
c001c6af:	b8 04 00 00 00       	mov    eax,0x4
c001c6b4:	57                   	push   edi
c001c6b5:	56                   	push   esi
c001c6b6:	53                   	push   ebx
c001c6b7:	83 ec 1c             	sub    esp,0x1c
c001c6ba:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c6be:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c6c2:	8d 75 ff             	lea    esi,[ebp-0x1]
c001c6c5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c6c9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001c6cd:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001c6d3:	0f 87 32 02 00 00    	ja     c001c90b <SATA::write(unsigned long long, int, void*)+0x25d>
c001c6d9:	b8 06 00 00 00       	mov    eax,0x6
c001c6de:	85 ff                	test   edi,edi
c001c6e0:	0f 84 25 02 00 00    	je     c001c90b <SATA::write(unsigned long long, int, void*)+0x25d>
c001c6e6:	89 ee                	mov    esi,ebp
c001c6e8:	c1 e6 09             	shl    esi,0x9
c001c6eb:	01 fe                	add    esi,edi
c001c6ed:	89 c8                	mov    eax,ecx
c001c6ef:	89 da                	mov    edx,ebx
c001c6f1:	83 c0 01             	add    eax,0x1
c001c6f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c6f8:	83 d2 00             	adc    edx,0x0
c001c6fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c6ff:	50                   	push   eax
c001c700:	50                   	push   eax
c001c701:	6a 01                	push   0x1
c001c703:	57                   	push   edi
c001c704:	81 c7 00 02 00 00    	add    edi,0x200
c001c70a:	6a 01                	push   0x1
c001c70c:	53                   	push   ebx
c001c70d:	51                   	push   ecx
c001c70e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c712:	e8 fb fa ff ff       	call   c001c212 <SATA::access(unsigned long long, int, void*, bool)>
c001c717:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001c71b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c71f:	83 c4 20             	add    esp,0x20
c001c722:	39 f7                	cmp    edi,esi
c001c724:	75 c7                	jne    c001c6ed <SATA::write(unsigned long long, int, void*)+0x3f>
c001c726:	bb 0a 00 00 00       	mov    ebx,0xa
c001c72b:	01 2d 50 7b 02 c0    	add    DWORD PTR ds:0xc0027b50,ebp
c001c731:	bd 10 27 00 00       	mov    ebp,0x2710
c001c736:	50                   	push   eax
c001c737:	50                   	push   eax
c001c738:	6a 0f                	push   0xf
c001c73a:	6a 00                	push   0x0
c001c73c:	e8 10 f0 ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001c741:	5a                   	pop    edx
c001c742:	0f b6 c0             	movzx  eax,al
c001c745:	59                   	pop    ecx
c001c746:	50                   	push   eax
c001c747:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c74c:	99                   	cdq    
c001c74d:	f7 fd                	idiv   ebp
c001c74f:	99                   	cdq    
c001c750:	f7 fb                	idiv   ebx
c001c752:	8d 42 30             	lea    eax,[edx+0x30]
c001c755:	0f b6 c0             	movzx  eax,al
c001c758:	50                   	push   eax
c001c759:	e8 e2 ef ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001c75e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c764:	5e                   	pop    esi
c001c765:	5f                   	pop    edi
c001c766:	bf e8 03 00 00       	mov    edi,0x3e8
c001c76b:	6a 0f                	push   0xf
c001c76d:	6a 00                	push   0x0
c001c76f:	e8 dd ef ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001c774:	5a                   	pop    edx
c001c775:	0f b6 c0             	movzx  eax,al
c001c778:	59                   	pop    ecx
c001c779:	50                   	push   eax
c001c77a:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c77f:	99                   	cdq    
c001c780:	f7 ff                	idiv   edi
c001c782:	99                   	cdq    
c001c783:	f7 fb                	idiv   ebx
c001c785:	8d 42 30             	lea    eax,[edx+0x30]
c001c788:	0f b6 c0             	movzx  eax,al
c001c78b:	50                   	push   eax
c001c78c:	e8 af ef ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001c791:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c797:	5e                   	pop    esi
c001c798:	be 64 00 00 00       	mov    esi,0x64
c001c79d:	58                   	pop    eax
c001c79e:	6a 0f                	push   0xf
c001c7a0:	6a 00                	push   0x0
c001c7a2:	e8 aa ef ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001c7a7:	5a                   	pop    edx
c001c7a8:	0f b6 c0             	movzx  eax,al
c001c7ab:	59                   	pop    ecx
c001c7ac:	50                   	push   eax
c001c7ad:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c7b2:	99                   	cdq    
c001c7b3:	f7 fe                	idiv   esi
c001c7b5:	99                   	cdq    
c001c7b6:	f7 fb                	idiv   ebx
c001c7b8:	8d 42 30             	lea    eax,[edx+0x30]
c001c7bb:	0f b6 c0             	movzx  eax,al
c001c7be:	50                   	push   eax
c001c7bf:	e8 7c ef ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001c7c4:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c7ca:	58                   	pop    eax
c001c7cb:	5a                   	pop    edx
c001c7cc:	6a 0f                	push   0xf
c001c7ce:	6a 00                	push   0x0
c001c7d0:	e8 7c ef ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001c7d5:	59                   	pop    ecx
c001c7d6:	0f b6 c0             	movzx  eax,al
c001c7d9:	5a                   	pop    edx
c001c7da:	50                   	push   eax
c001c7db:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c7e0:	99                   	cdq    
c001c7e1:	f7 fb                	idiv   ebx
c001c7e3:	99                   	cdq    
c001c7e4:	f7 fb                	idiv   ebx
c001c7e6:	8d 42 30             	lea    eax,[edx+0x30]
c001c7e9:	0f b6 c0             	movzx  eax,al
c001c7ec:	50                   	push   eax
c001c7ed:	e8 4e ef ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001c7f2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c7f8:	59                   	pop    ecx
c001c7f9:	58                   	pop    eax
c001c7fa:	6a 0f                	push   0xf
c001c7fc:	6a 00                	push   0x0
c001c7fe:	e8 4e ef ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001c803:	5a                   	pop    edx
c001c804:	0f b6 c0             	movzx  eax,al
c001c807:	59                   	pop    ecx
c001c808:	50                   	push   eax
c001c809:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c80e:	99                   	cdq    
c001c80f:	f7 fb                	idiv   ebx
c001c811:	83 c2 30             	add    edx,0x30
c001c814:	0f b6 d2             	movzx  edx,dl
c001c817:	52                   	push   edx
c001c818:	e8 23 ef ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001c81d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c823:	58                   	pop    eax
c001c824:	5a                   	pop    edx
c001c825:	6a 0f                	push   0xf
c001c827:	6a 00                	push   0x0
c001c829:	e8 23 ef ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001c82e:	59                   	pop    ecx
c001c82f:	0f b6 c0             	movzx  eax,al
c001c832:	5a                   	pop    edx
c001c833:	50                   	push   eax
c001c834:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c839:	99                   	cdq    
c001c83a:	f7 fd                	idiv   ebp
c001c83c:	99                   	cdq    
c001c83d:	f7 fb                	idiv   ebx
c001c83f:	8d 42 30             	lea    eax,[edx+0x30]
c001c842:	0f b6 c0             	movzx  eax,al
c001c845:	50                   	push   eax
c001c846:	e8 f5 ee ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001c84b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c851:	59                   	pop    ecx
c001c852:	5d                   	pop    ebp
c001c853:	6a 0f                	push   0xf
c001c855:	6a 00                	push   0x0
c001c857:	e8 f5 ee ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001c85c:	5a                   	pop    edx
c001c85d:	0f b6 c0             	movzx  eax,al
c001c860:	59                   	pop    ecx
c001c861:	50                   	push   eax
c001c862:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c867:	99                   	cdq    
c001c868:	f7 ff                	idiv   edi
c001c86a:	99                   	cdq    
c001c86b:	f7 fb                	idiv   ebx
c001c86d:	8d 42 30             	lea    eax,[edx+0x30]
c001c870:	0f b6 c0             	movzx  eax,al
c001c873:	50                   	push   eax
c001c874:	e8 c7 ee ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001c879:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c87f:	5f                   	pop    edi
c001c880:	5d                   	pop    ebp
c001c881:	6a 0f                	push   0xf
c001c883:	6a 00                	push   0x0
c001c885:	e8 c7 ee ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001c88a:	5a                   	pop    edx
c001c88b:	0f b6 c0             	movzx  eax,al
c001c88e:	59                   	pop    ecx
c001c88f:	50                   	push   eax
c001c890:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c895:	99                   	cdq    
c001c896:	f7 fe                	idiv   esi
c001c898:	99                   	cdq    
c001c899:	f7 fb                	idiv   ebx
c001c89b:	8d 42 30             	lea    eax,[edx+0x30]
c001c89e:	0f b6 c0             	movzx  eax,al
c001c8a1:	50                   	push   eax
c001c8a2:	e8 99 ee ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001c8a7:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c8ad:	5e                   	pop    esi
c001c8ae:	5f                   	pop    edi
c001c8af:	6a 0f                	push   0xf
c001c8b1:	6a 00                	push   0x0
c001c8b3:	e8 99 ee ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001c8b8:	5d                   	pop    ebp
c001c8b9:	0f b6 c0             	movzx  eax,al
c001c8bc:	5a                   	pop    edx
c001c8bd:	50                   	push   eax
c001c8be:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c8c3:	99                   	cdq    
c001c8c4:	f7 fb                	idiv   ebx
c001c8c6:	99                   	cdq    
c001c8c7:	f7 fb                	idiv   ebx
c001c8c9:	8d 42 30             	lea    eax,[edx+0x30]
c001c8cc:	0f b6 c0             	movzx  eax,al
c001c8cf:	50                   	push   eax
c001c8d0:	e8 6b ee ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001c8d5:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c8db:	59                   	pop    ecx
c001c8dc:	5e                   	pop    esi
c001c8dd:	6a 0f                	push   0xf
c001c8df:	6a 00                	push   0x0
c001c8e1:	e8 6b ee ff ff       	call   c001b751 <combineColours(unsigned char, unsigned char)>
c001c8e6:	5f                   	pop    edi
c001c8e7:	0f b6 c0             	movzx  eax,al
c001c8ea:	5d                   	pop    ebp
c001c8eb:	50                   	push   eax
c001c8ec:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c8f1:	99                   	cdq    
c001c8f2:	f7 fb                	idiv   ebx
c001c8f4:	83 c2 30             	add    edx,0x30
c001c8f7:	0f b6 d2             	movzx  edx,dl
c001c8fa:	52                   	push   edx
c001c8fb:	e8 40 ee ff ff       	call   c001b740 <combineCharAndColour(char, unsigned char)>
c001c900:	83 c4 10             	add    esp,0x10
c001c903:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c909:	31 c0                	xor    eax,eax
c001c90b:	83 c4 1c             	add    esp,0x1c
c001c90e:	5b                   	pop    ebx
c001c90f:	5e                   	pop    esi
c001c910:	5f                   	pop    edi
c001c911:	5d                   	pop    ebp
c001c912:	c3                   	ret    
c001c913:	90                   	nop

c001c914 <SATAPI::write(unsigned long long, int, void*)>:
c001c914:	b8 03 00 00 00       	mov    eax,0x3
c001c919:	c3                   	ret    

c001c91a <SATAPI::close(int, int, void*)>:
c001c91a:	83 ec 0c             	sub    esp,0xc
c001c91d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c921:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c927:	85 c0                	test   eax,eax
c001c929:	74 0c                	je     c001c937 <SATAPI::close(int, int, void*)+0x1d>
c001c92b:	83 ec 0c             	sub    esp,0xc
c001c92e:	8b 10                	mov    edx,DWORD PTR [eax]
c001c930:	50                   	push   eax
c001c931:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c934:	83 c4 10             	add    esp,0x10
c001c937:	31 c0                	xor    eax,eax
c001c939:	83 c4 0c             	add    esp,0xc
c001c93c:	c3                   	ret    
c001c93d:	90                   	nop

c001c93e <SATAPI::SATAPI()>:
c001c93e:	83 ec 0c             	sub    esp,0xc
c001c941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c945:	83 ec 04             	sub    esp,0x4
c001c948:	68 00 08 00 00       	push   0x800
c001c94d:	68 7c 13 02 c0       	push   0xc002137c
c001c952:	50                   	push   eax
c001c953:	e8 ba f4 fe ff       	call   c000be12 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c958:	83 c4 10             	add    esp,0x10
c001c95b:	ba 70 14 02 c0       	mov    edx,0xc0021470
c001c960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c964:	89 10                	mov    DWORD PTR [eax],edx
c001c966:	90                   	nop
c001c967:	83 c4 0c             	add    esp,0xc
c001c96a:	c3                   	ret    
c001c96b:	90                   	nop

c001c96c <SATAPI::diskRemoved()>:
c001c96c:	c3                   	ret    
c001c96d:	90                   	nop

c001c96e <SATAPI::diskInserted()>:
c001c96e:	83 ec 18             	sub    esp,0x18
c001c971:	68 88 13 02 c0       	push   0xc0021388
c001c976:	e8 8b dc fe ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001c97b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c97f:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001c986:	83 c4 1c             	add    esp,0x1c
c001c989:	c3                   	ret    

c001c98a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001c98a:	55                   	push   ebp
c001c98b:	57                   	push   edi
c001c98c:	56                   	push   esi
c001c98d:	53                   	push   ebx
c001c98e:	83 ec 34             	sub    esp,0x34
c001c991:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001c995:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001c999:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001c99d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c9a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001c9a5:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001c9ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c9b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c9b5:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001c9bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c9bf:	83 c0 02             	add    eax,0x2
c001c9c2:	c1 e0 07             	shl    eax,0x7
c001c9c5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001c9c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c9cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c9d1:	c1 e0 07             	shl    eax,0x7
c001c9d4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001c9d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c9dc:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001c9e6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c9ea:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001c9f0:	e8 51 e5 ff ff       	call   c001af46 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001c9f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c9f9:	83 c4 10             	add    esp,0x10
c001c9fc:	b8 01 00 00 00       	mov    eax,0x1
c001ca01:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ca06:	0f 84 49 02 00 00    	je     c001cc55 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001ca0c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001ca12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca16:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca18:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ca1e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ca24:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ca28:	c1 e1 05             	shl    ecx,0x5
c001ca2b:	01 c8                	add    eax,ecx
c001ca2d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ca2f:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001ca35:	81 c9 25 00 01 00    	or     ecx,0x10025
c001ca3b:	89 08                	mov    DWORD PTR [eax],ecx
c001ca3d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001ca43:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001ca49:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001ca4f:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001ca52:	8d 7b 40             	lea    edi,[ebx+0x40]
c001ca55:	50                   	push   eax
c001ca56:	68 90 00 00 00       	push   0x90
c001ca5b:	6a 00                	push   0x0
c001ca5d:	53                   	push   ebx
c001ca5e:	e8 5d 3a fe ff       	call   c00004c0 <memset>
c001ca63:	b9 0c 00 00 00       	mov    ecx,0xc
c001ca68:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001ca6c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ca6e:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001ca74:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001ca78:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001ca7e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001ca82:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ca86:	48                   	dec    eax
c001ca87:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ca8c:	89 c1                	mov    ecx,eax
c001ca8e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001ca94:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ca99:	09 c8                	or     eax,ecx
c001ca9b:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001caa1:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001caa4:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001caab:	66 25 00 7f          	and    ax,0x7f00
c001caaf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cab3:	66 0d 27 80          	or     ax,0x8027
c001cab7:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001cabb:	66 89 03             	mov    WORD PTR [ebx],ax
c001cabe:	89 d0                	mov    eax,edx
c001cac0:	c1 ea 18             	shr    edx,0x18
c001cac3:	c1 e8 10             	shr    eax,0x10
c001cac6:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001cac9:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001cacc:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001cad0:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001cad3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cad7:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001cada:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001cade:	83 c4 10             	add    esp,0x10
c001cae1:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001cae5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cae9:	31 c0                	xor    eax,eax
c001caeb:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001caf1:	80 e1 88             	and    cl,0x88
c001caf4:	74 0a                	je     c001cb00 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x176>
c001caf6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cafb:	74 0a                	je     c001cb07 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17d>
c001cafd:	40                   	inc    eax
c001cafe:	eb eb                	jmp    c001caeb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x161>
c001cb00:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cb05:	75 43                	jne    c001cb4a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001cb07:	83 ec 0c             	sub    esp,0xc
c001cb0a:	68 a0 13 02 c0       	push   0xc00213a0
c001cb0f:	e8 f2 da fe ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001cb14:	58                   	pop    eax
c001cb15:	5a                   	pop    edx
c001cb16:	68 b5 13 02 c0       	push   0xc00213b5
c001cb1b:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001cb21:	e8 b6 bc fe ff       	call   c00087dc <VgaText::puts(char const*)>
c001cb26:	59                   	pop    ecx
c001cb27:	5b                   	pop    ebx
c001cb28:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cb2c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001cb32:	e8 a9 e4 ff ff       	call   c001afe0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001cb37:	5e                   	pop    esi
c001cb38:	5f                   	pop    edi
c001cb39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cb3d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001cb43:	e8 78 e4 ff ff       	call   c001afc0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cb48:	eb 48                	jmp    c001cb92 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x208>
c001cb4a:	be 01 00 00 00       	mov    esi,0x1
c001cb4f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001cb53:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001cb57:	d3 e6                	shl    esi,cl
c001cb59:	c1 e7 07             	shl    edi,0x7
c001cb5c:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001cb62:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001cb67:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001cb6b:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001cb71:	85 c6                	test   esi,eax
c001cb73:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001cb79:	0f 84 a3 00 00 00    	je     c001cc22 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x298>
c001cb7f:	0f ba e0 1e          	bt     eax,0x1e
c001cb83:	73 1a                	jae    c001cb9f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001cb85:	83 ec 0c             	sub    esp,0xc
c001cb88:	68 c7 13 02 c0       	push   0xc00213c7
c001cb8d:	e8 74 da fe ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001cb92:	83 c4 10             	add    esp,0x10
c001cb95:	b8 01 00 00 00       	mov    eax,0x1
c001cb9a:	e9 b6 00 00 00       	jmp    c001cc55 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001cb9f:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001cba5:	83 f8 0d             	cmp    eax,0xd
c001cba8:	77 0a                	ja     c001cbb4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x22a>
c001cbaa:	83 ec 0c             	sub    esp,0xc
c001cbad:	68 c8 00 00 00       	push   0xc8
c001cbb2:	eb 28                	jmp    c001cbdc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001cbb4:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001cbba:	83 f8 0d             	cmp    eax,0xd
c001cbbd:	77 0a                	ja     c001cbc9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23f>
c001cbbf:	83 ec 0c             	sub    esp,0xc
c001cbc2:	68 58 02 00 00       	push   0x258
c001cbc7:	eb 13                	jmp    c001cbdc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001cbc9:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001cbcf:	83 f8 06             	cmp    eax,0x6
c001cbd2:	77 10                	ja     c001cbe4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001cbd4:	83 ec 0c             	sub    esp,0xc
c001cbd7:	68 dc 05 00 00       	push   0x5dc
c001cbdc:	e8 fb 80 ff ff       	call   c0014cdc <milliTenthSleep(unsigned int)>
c001cbe1:	83 c4 10             	add    esp,0x10
c001cbe4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001cbe8:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001cbeb:	75 06                	jne    c001cbf3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x269>
c001cbed:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001cbf1:	74 15                	je     c001cc08 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001cbf3:	83 fb 06             	cmp    ebx,0x6
c001cbf6:	77 10                	ja     c001cc08 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001cbf8:	83 ec 0c             	sub    esp,0xc
c001cbfb:	68 c4 09 00 00       	push   0x9c4
c001cc00:	e8 d7 80 ff ff       	call   c0014cdc <milliTenthSleep(unsigned int)>
c001cc05:	83 c4 10             	add    esp,0x10
c001cc08:	43                   	inc    ebx
c001cc09:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001cc0f:	0f 85 56 ff ff ff    	jne    c001cb6b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e1>
c001cc15:	83 ec 0c             	sub    esp,0xc
c001cc18:	68 da 13 02 c0       	push   0xc00213da
c001cc1d:	e9 6b ff ff ff       	jmp    c001cb8d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001cc22:	0f ba e0 1e          	bt     eax,0x1e
c001cc26:	73 0d                	jae    c001cc35 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ab>
c001cc28:	83 ec 0c             	sub    esp,0xc
c001cc2b:	68 ee 13 02 c0       	push   0xc00213ee
c001cc30:	e9 58 ff ff ff       	jmp    c001cb8d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001cc35:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001cc3a:	74 17                	je     c001cc53 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001cc3c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001cc41:	74 10                	je     c001cc53 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001cc43:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001cc49:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001cc4d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001cc51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cc53:	31 c0                	xor    eax,eax
c001cc55:	83 c4 2c             	add    esp,0x2c
c001cc58:	5b                   	pop    ebx
c001cc59:	5e                   	pop    esi
c001cc5a:	5f                   	pop    edi
c001cc5b:	5d                   	pop    ebp
c001cc5c:	c3                   	ret    
c001cc5d:	90                   	nop

c001cc5e <SATAPI::eject()>:
c001cc5e:	57                   	push   edi
c001cc5f:	b9 03 00 00 00       	mov    ecx,0x3
c001cc64:	83 ec 18             	sub    esp,0x18
c001cc67:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cc6b:	fc                   	cld    
c001cc6c:	31 c0                	xor    eax,eax
c001cc6e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cc70:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001cc75:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001cc7a:	50                   	push   eax
c001cc7b:	6a 00                	push   0x0
c001cc7d:	6a 00                	push   0x0
c001cc7f:	6a 00                	push   0x0
c001cc81:	6a 00                	push   0x0
c001cc83:	6a 02                	push   0x2
c001cc85:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cc89:	50                   	push   eax
c001cc8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc8e:	e8 f7 fc ff ff       	call   c001c98a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001cc93:	31 c0                	xor    eax,eax
c001cc95:	83 c4 38             	add    esp,0x38
c001cc98:	5f                   	pop    edi
c001cc99:	c3                   	ret    

c001cc9a <SATAPI::detectMedia()>:
c001cc9a:	53                   	push   ebx
c001cc9b:	83 ec 14             	sub    esp,0x14
c001cc9e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cca2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001cca8:	e8 0f 0a ff ff       	call   c000d6bc <VCache::writeWriteBuffer()>
c001ccad:	59                   	pop    ecx
c001ccae:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ccb4:	e8 f3 09 ff ff       	call   c000d6ac <VCache::invalidateReadBuffer()>
c001ccb9:	c7 04 24 03 14 02 c0 	mov    DWORD PTR [esp],0xc0021403
c001ccc0:	e8 41 d9 fe ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001ccc5:	83 c4 10             	add    esp,0x10
c001ccc8:	31 c0                	xor    eax,eax
c001ccca:	8b 14 85 20 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9be0]
c001ccd1:	85 d2                	test   edx,edx
c001ccd3:	74 0f                	je     c001cce4 <SATAPI::detectMedia()+0x4a>
c001ccd5:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001ccdb:	75 07                	jne    c001cce4 <SATAPI::detectMedia()+0x4a>
c001ccdd:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001cce4:	40                   	inc    eax
c001cce5:	83 f8 1a             	cmp    eax,0x1a
c001cce8:	75 e0                	jne    c001ccca <SATAPI::detectMedia()+0x30>
c001ccea:	83 c4 08             	add    esp,0x8
c001cced:	5b                   	pop    ebx
c001ccee:	c3                   	ret    
c001ccef:	90                   	nop

c001ccf0 <SATAPI::open(int, int, void*)>:
c001ccf0:	56                   	push   esi
c001ccf1:	53                   	push   ebx
c001ccf2:	51                   	push   ecx
c001ccf3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ccf7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ccfb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001cd05:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001cd0b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cd15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd19:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001cd23:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001cd29:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001cd30:	e8 0c ae fe ff       	call   c0007b41 <Phys::allocatePage()>
c001cd35:	89 c6                	mov    esi,eax
c001cd37:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001cd3d:	81 c6 00 10 00 00    	add    esi,0x1000
c001cd43:	e8 f9 ad fe ff       	call   c0007b41 <Phys::allocatePage()>
c001cd48:	39 c6                	cmp    esi,eax
c001cd4a:	74 10                	je     c001cd5c <SATAPI::open(int, int, void*)+0x6c>
c001cd4c:	83 ec 0c             	sub    esp,0xc
c001cd4f:	68 18 14 02 c0       	push   0xc0021418
c001cd54:	e8 6e 36 ff ff       	call   c00103c7 <KePanic(char const*)>
c001cd59:	83 c4 10             	add    esp,0x10
c001cd5c:	83 ec 0c             	sub    esp,0xc
c001cd5f:	6a 02                	push   0x2
c001cd61:	e8 e3 c5 fe ff       	call   c0009349 <Virt::allocateKernelVirtualPages(int)>
c001cd66:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001cd6c:	6a 03                	push   0x3
c001cd6e:	50                   	push   eax
c001cd6f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001cd75:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001cd7b:	e8 8c cc fe ff       	call   c0009a0c <VAS::mapPage(unsigned long, unsigned long, int)>
c001cd80:	83 c4 14             	add    esp,0x14
c001cd83:	68 78 01 00 00       	push   0x178
c001cd88:	e8 d8 aa fe ff       	call   c0007865 <malloc>
c001cd8d:	83 c4 0c             	add    esp,0xc
c001cd90:	89 c6                	mov    esi,eax
c001cd92:	6a 00                	push   0x0
c001cd94:	68 ff ff ff 7f       	push   0x7fffffff
c001cd99:	6a 00                	push   0x0
c001cd9b:	6a 00                	push   0x0
c001cd9d:	53                   	push   ebx
c001cd9e:	68 2e 14 02 c0       	push   0xc002142e
c001cda3:	50                   	push   eax
c001cda4:	e8 75 fd fe ff       	call   c000cb1e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001cda9:	83 c4 14             	add    esp,0x14
c001cdac:	56                   	push   esi
c001cdad:	e8 2c fe fe ff       	call   c000cbde <LogicalDisk::assignDriveLetter()>
c001cdb2:	5a                   	pop    edx
c001cdb3:	0f be c0             	movsx  eax,al
c001cdb6:	59                   	pop    ecx
c001cdb7:	50                   	push   eax
c001cdb8:	68 80 12 02 c0       	push   0xc0021280
c001cdbd:	e8 44 d8 fe ff       	call   c000a606 <Dbg::kprintf(char const*, ...)>
c001cdc2:	58                   	pop    eax
c001cdc3:	5a                   	pop    edx
c001cdc4:	56                   	push   esi
c001cdc5:	53                   	push   ebx
c001cdc6:	e8 79 ec fe ff       	call   c000ba44 <Device::addChild(Device*)>
c001cdcb:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001cdd1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdd4:	e8 a1 f0 fe ff       	call   c000be7a <PhysicalDisk::startCache()>
c001cdd9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001cde0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cde3:	e8 b2 fe ff ff       	call   c001cc9a <SATAPI::detectMedia()>
c001cde8:	83 c4 14             	add    esp,0x14
c001cdeb:	31 c0                	xor    eax,eax
c001cded:	5b                   	pop    ebx
c001cdee:	5e                   	pop    esi
c001cdef:	c3                   	ret    

c001cdf0 <SATAPI::read(unsigned long long, int, void*)>:
c001cdf0:	57                   	push   edi
c001cdf1:	56                   	push   esi
c001cdf2:	53                   	push   ebx
c001cdf3:	83 ec 30             	sub    esp,0x30
c001cdf6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001cdfa:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001cdfe:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001ce02:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ce06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ce0a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ce0e:	83 fe 04             	cmp    esi,0x4
c001ce11:	7e 10                	jle    c001ce23 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001ce13:	83 ec 0c             	sub    esp,0xc
c001ce16:	68 3c 14 02 c0       	push   0xc002143c
c001ce1b:	e8 a7 35 ff ff       	call   c00103c7 <KePanic(char const*)>
c001ce20:	83 c4 10             	add    esp,0x10
c001ce23:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ce29:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ce2f:	51                   	push   ecx
c001ce30:	50                   	push   eax
c001ce31:	83 c0 02             	add    eax,0x2
c001ce34:	c1 e0 07             	shl    eax,0x7
c001ce37:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001ce3d:	50                   	push   eax
c001ce3e:	52                   	push   edx
c001ce3f:	e8 c6 e1 ff ff       	call   c001b00a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ce44:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001ce48:	b9 03 00 00 00       	mov    ecx,0x3
c001ce4d:	fc                   	cld    
c001ce4e:	31 c0                	xor    eax,eax
c001ce50:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ce52:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001ce57:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001ce5c:	83 c4 0c             	add    esp,0xc
c001ce5f:	6a 00                	push   0x0
c001ce61:	6a 00                	push   0x0
c001ce63:	6a 00                	push   0x0
c001ce65:	6a 00                	push   0x0
c001ce67:	6a 02                	push   0x2
c001ce69:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ce6d:	50                   	push   eax
c001ce6e:	53                   	push   ebx
c001ce6f:	e8 16 fb ff ff       	call   c001c98a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ce74:	83 c4 20             	add    esp,0x20
c001ce77:	85 c0                	test   eax,eax
c001ce79:	75 44                	jne    c001cebf <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001ce7b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001ce7f:	b9 03 00 00 00       	mov    ecx,0x3
c001ce84:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ce86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ce8a:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001ce8f:	0f c8                	bswap  eax
c001ce91:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001ce95:	89 f0                	mov    eax,esi
c001ce97:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001ce9b:	50                   	push   eax
c001ce9c:	56                   	push   esi
c001ce9d:	c1 e6 0b             	shl    esi,0xb
c001cea0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001cea4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cea8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ceac:	56                   	push   esi
c001cead:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ceb1:	50                   	push   eax
c001ceb2:	53                   	push   ebx
c001ceb3:	e8 d2 fa ff ff       	call   c001c98a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ceb8:	83 c4 20             	add    esp,0x20
c001cebb:	85 c0                	test   eax,eax
c001cebd:	74 14                	je     c001ced3 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001cebf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cec3:	83 ec 0c             	sub    esp,0xc
c001cec6:	53                   	push   ebx
c001cec7:	e8 ce fd ff ff       	call   c001cc9a <SATAPI::detectMedia()>
c001cecc:	83 c4 10             	add    esp,0x10
c001cecf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ced3:	83 c4 30             	add    esp,0x30
c001ced6:	5b                   	pop    ebx
c001ced7:	5e                   	pop    esi
c001ced8:	5f                   	pop    edi
c001ced9:	c3                   	ret    

c001ceda <IOAPIC::close(int, int, void*)>:
c001ceda:	b8 00 00 00 00       	mov    eax,0x0
c001cedf:	c3                   	ret    

c001cee0 <apicGetBase()>:
c001cee0:	55                   	push   ebp
c001cee1:	89 e5                	mov    ebp,esp
c001cee3:	83 ec 18             	sub    esp,0x18
c001cee6:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001ceeb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001cef1:	83 e0 08             	and    eax,0x8
c001cef4:	84 c0                	test   al,al
c001cef6:	75 07                	jne    c001ceff <apicGetBase()+0x1f>
c001cef8:	b8 00 00 00 00       	mov    eax,0x0
c001cefd:	eb 21                	jmp    c001cf20 <apicGetBase()+0x40>
c001ceff:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001cf04:	83 ec 08             	sub    esp,0x8
c001cf07:	6a 1b                	push   0x1b
c001cf09:	50                   	push   eax
c001cf0a:	e8 8d 9f fe ff       	call   c0006e9c <Computer::rdmsr(unsigned int)>
c001cf0f:	83 c4 10             	add    esp,0x10
c001cf12:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001cf15:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001cf18:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001cf1b:	25 00 00 ff ff       	and    eax,0xffff0000
c001cf20:	c9                   	leave  
c001cf21:	c3                   	ret    

c001cf22 <IOAPIC::IOAPIC()>:
c001cf22:	83 ec 0c             	sub    esp,0xc
c001cf25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf29:	83 ec 08             	sub    esp,0x8
c001cf2c:	68 a0 14 02 c0       	push   0xc00214a0
c001cf31:	50                   	push   eax
c001cf32:	e8 a5 ec fe ff       	call   c000bbdc <Device::Device(char const*)>
c001cf37:	83 c4 10             	add    esp,0x10
c001cf3a:	ba b0 14 02 c0       	mov    edx,0xc00214b0
c001cf3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf43:	89 10                	mov    DWORD PTR [eax],edx
c001cf45:	90                   	nop
c001cf46:	83 c4 0c             	add    esp,0xc
c001cf49:	c3                   	ret    

c001cf4a <apicOpen()>:
c001cf4a:	55                   	push   ebp
c001cf4b:	89 e5                	mov    ebp,esp
c001cf4d:	53                   	push   ebx
c001cf4e:	83 ec 34             	sub    esp,0x34
c001cf51:	a0 a0 7b 02 c0       	mov    al,ds:0xc0027ba0
c001cf56:	83 f0 01             	xor    eax,0x1
c001cf59:	84 c0                	test   al,al
c001cf5b:	0f 84 9d 00 00 00    	je     c001cffe <apicOpen()+0xb4>
c001cf61:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001cf65:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c001cf6a:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001cf6d:	0f 83 84 00 00 00    	jae    c001cff7 <apicOpen()+0xad>
c001cf73:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001cf7a:	83 ec 0c             	sub    esp,0xc
c001cf7d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001cf80:	e8 e0 a8 fe ff       	call   c0007865 <malloc>
c001cf85:	83 c4 10             	add    esp,0x10
c001cf88:	89 c3                	mov    ebx,eax
c001cf8a:	83 ec 0c             	sub    esp,0xc
c001cf8d:	53                   	push   ebx
c001cf8e:	e8 8f ff ff ff       	call   c001cf22 <IOAPIC::IOAPIC()>
c001cf93:	83 c4 10             	add    esp,0x10
c001cf96:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001cf99:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001cf9c:	25 ff 00 00 00       	and    eax,0xff
c001cfa1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001cfa4:	89 14 85 80 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8480],edx
c001cfab:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c001cfb0:	40                   	inc    eax
c001cfb1:	a3 60 7b 02 c0       	mov    ds:0xc0027b60,eax
c001cfb6:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001cfbb:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001cfc1:	83 ec 08             	sub    esp,0x8
c001cfc4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001cfc7:	50                   	push   eax
c001cfc8:	e8 77 ea fe ff       	call   c000ba44 <Device::addChild(Device*)>
c001cfcd:	83 c4 10             	add    esp,0x10
c001cfd0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001cfd3:	8b 00                	mov    eax,DWORD PTR [eax]
c001cfd5:	83 c0 08             	add    eax,0x8
c001cfd8:	8b 10                	mov    edx,DWORD PTR [eax]
c001cfda:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001cfdd:	25 ff 00 00 00       	and    eax,0xff
c001cfe2:	6a 00                	push   0x0
c001cfe4:	6a 00                	push   0x0
c001cfe6:	50                   	push   eax
c001cfe7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001cfea:	ff d2                	call   edx
c001cfec:	83 c4 10             	add    esp,0x10
c001cfef:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001cff2:	e9 6e ff ff ff       	jmp    c001cf65 <apicOpen()+0x1b>
c001cff7:	c6 05 a0 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027ba0,0x1
c001cffe:	e8 dd fe ff ff       	call   c001cee0 <apicGetBase()>
c001d003:	05 f0 00 00 00       	add    eax,0xf0
c001d008:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d00b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d00e:	8b 00                	mov    eax,DWORD PTR [eax]
c001d010:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d013:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d01a:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d021:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d024:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d027:	89 10                	mov    DWORD PTR [eax],edx
c001d029:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d030:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c001d035:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d038:	7d 70                	jge    c001d0aa <apicOpen()+0x160>
c001d03a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d03d:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001d044:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d047:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d04a:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001d051:	c1 e8 08             	shr    eax,0x8
c001d054:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d058:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d05b:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001d062:	c1 e8 18             	shr    eax,0x18
c001d065:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d068:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001d06c:	75 37                	jne    c001d0a5 <apicOpen()+0x15b>
c001d06e:	e8 6d fe ff ff       	call   c001cee0 <apicGetBase()>
c001d073:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001d077:	75 07                	jne    c001d080 <apicOpen()+0x136>
c001d079:	ba 60 03 00 00       	mov    edx,0x360
c001d07e:	eb 05                	jmp    c001d085 <apicOpen()+0x13b>
c001d080:	ba 50 03 00 00       	mov    edx,0x350
c001d085:	01 d0                	add    eax,edx
c001d087:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d08a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d08d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d08f:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d092:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d099:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d09d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d0a0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d0a3:	89 10                	mov    DWORD PTR [eax],edx
c001d0a5:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d0a8:	eb 86                	jmp    c001d030 <apicOpen()+0xe6>
c001d0aa:	90                   	nop
c001d0ab:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d0ae:	c9                   	leave  
c001d0af:	c3                   	ret    

c001d0b0 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d0b0:	55                   	push   ebp
c001d0b1:	89 e5                	mov    ebp,esp
c001d0b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d0b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d0bc:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d0bf:	72 1d                	jb     c001d0de <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d0c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d0c4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d0ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d0cd:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d0d3:	01 d0                	add    eax,edx
c001d0d5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d0d8:	73 04                	jae    c001d0de <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d0da:	b0 01                	mov    al,0x1
c001d0dc:	eb 02                	jmp    c001d0e0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d0de:	b0 00                	mov    al,0x0
c001d0e0:	5d                   	pop    ebp
c001d0e1:	c3                   	ret    

c001d0e2 <IOAPIC::read(int)>:
c001d0e2:	55                   	push   ebp
c001d0e3:	89 e5                	mov    ebp,esp
c001d0e5:	83 ec 10             	sub    esp,0x10
c001d0e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d0eb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d0f1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d0f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d0f7:	31 d2                	xor    edx,edx
c001d0f9:	88 c2                	mov    dl,al
c001d0fb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d0fe:	89 10                	mov    DWORD PTR [eax],edx
c001d100:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d103:	83 c0 10             	add    eax,0x10
c001d106:	8b 00                	mov    eax,DWORD PTR [eax]
c001d108:	c9                   	leave  
c001d109:	c3                   	ret    

c001d10a <IOAPIC::open(int, int, void*)>:
c001d10a:	55                   	push   ebp
c001d10b:	89 e5                	mov    ebp,esp
c001d10d:	57                   	push   edi
c001d10e:	56                   	push   esi
c001d10f:	53                   	push   ebx
c001d110:	83 ec 04             	sub    esp,0x4
c001d113:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d116:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d119:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d11f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d122:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d128:	8b 14 85 c0 67 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9840]
c001d12f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d132:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d138:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d13b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d141:	8b 14 85 40 68 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd97c0]
c001d148:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d14b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d154:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d15a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d15d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d163:	89 c6                	mov    esi,eax
c001d165:	81 e6 ff 00 00 00    	and    esi,0xff
c001d16b:	89 d0                	mov    eax,edx
c001d16d:	ba 00 00 00 00       	mov    edx,0x0
c001d172:	89 c7                	mov    edi,eax
c001d174:	83 e7 ff             	and    edi,0xffffffff
c001d177:	89 f9                	mov    ecx,edi
c001d179:	89 d0                	mov    eax,edx
c001d17b:	25 ff 00 00 00       	and    eax,0xff
c001d180:	89 c3                	mov    ebx,eax
c001d182:	89 c8                	mov    eax,ecx
c001d184:	89 da                	mov    edx,ebx
c001d186:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d189:	8d 5e 08             	lea    ebx,[esi+0x8]
c001d18c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d190:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d194:	83 e0 00             	and    eax,0x0
c001d197:	09 d0                	or     eax,edx
c001d199:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d19d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1a0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d1a6:	8d 50 01             	lea    edx,[eax+0x1]
c001d1a9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d1ac:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d1b2:	31 d2                	xor    edx,edx
c001d1b4:	88 c2                	mov    dl,al
c001d1b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1b9:	83 c2 08             	add    edx,0x8
c001d1bc:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d1c0:	81 e1 ff 00 00 00    	and    ecx,0xff
c001d1c6:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d1cc:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d1d0:	6a 01                	push   0x1
c001d1d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d1d5:	e8 08 ff ff ff       	call   c001d0e2 <IOAPIC::read(int)>
c001d1da:	83 c4 08             	add    esp,0x8
c001d1dd:	c1 f8 10             	sar    eax,0x10
c001d1e0:	25 ff 00 00 00       	and    eax,0xff
c001d1e5:	8d 50 01             	lea    edx,[eax+0x1]
c001d1e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1eb:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d1f1:	b8 00 00 00 00       	mov    eax,0x0
c001d1f6:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d1f9:	5b                   	pop    ebx
c001d1fa:	5e                   	pop    esi
c001d1fb:	5f                   	pop    edi
c001d1fc:	5d                   	pop    ebp
c001d1fd:	c3                   	ret    

c001d1fe <IOAPIC::write(int, int)>:
c001d1fe:	55                   	push   ebp
c001d1ff:	89 e5                	mov    ebp,esp
c001d201:	83 ec 10             	sub    esp,0x10
c001d204:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d207:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d20d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d210:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d213:	31 d2                	xor    edx,edx
c001d215:	88 c2                	mov    dl,al
c001d217:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d21a:	89 10                	mov    DWORD PTR [eax],edx
c001d21c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d21f:	8d 50 10             	lea    edx,[eax+0x10]
c001d222:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d225:	89 02                	mov    DWORD PTR [edx],eax
c001d227:	90                   	nop
c001d228:	c9                   	leave  
c001d229:	c3                   	ret    

c001d22a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001d22a:	55                   	push   ebp
c001d22b:	89 e5                	mov    ebp,esp
c001d22d:	53                   	push   ebx
c001d22e:	83 ec 2c             	sub    esp,0x2c
c001d231:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d234:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001d237:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001d23a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001d23d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d240:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d243:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d246:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d249:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001d24c:	88 d8                	mov    al,bl
c001d24e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001d251:	88 c8                	mov    al,cl
c001d253:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001d256:	88 d0                	mov    al,dl
c001d258:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001d25b:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001d25e:	25 ff 00 00 00       	and    eax,0xff
c001d263:	83 c0 08             	add    eax,0x8
c001d266:	01 c0                	add    eax,eax
c001d268:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d26b:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001d26e:	25 ff 00 00 00       	and    eax,0xff
c001d273:	83 c0 08             	add    eax,0x8
c001d276:	01 c0                	add    eax,eax
c001d278:	40                   	inc    eax
c001d279:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001d27c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d27f:	50                   	push   eax
c001d280:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d283:	e8 5a fe ff ff       	call   c001d0e2 <IOAPIC::read(int)>
c001d288:	83 c4 08             	add    esp,0x8
c001d28b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d28e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001d295:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d298:	c1 e0 18             	shl    eax,0x18
c001d29b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001d29e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001d2a1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d2a4:	52                   	push   edx
c001d2a5:	50                   	push   eax
c001d2a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d2a9:	e8 50 ff ff ff       	call   c001d1fe <IOAPIC::write(int, int)>
c001d2ae:	83 c4 0c             	add    esp,0xc
c001d2b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d2b4:	50                   	push   eax
c001d2b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d2b8:	e8 25 fe ff ff       	call   c001d0e2 <IOAPIC::read(int)>
c001d2bd:	83 c4 08             	add    esp,0x8
c001d2c0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d2c3:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001d2ca:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001d2d1:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001d2d8:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001d2dc:	74 09                	je     c001d2e7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001d2de:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001d2e5:	eb 07                	jmp    c001d2ee <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001d2e7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001d2ee:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001d2f2:	74 09                	je     c001d2fd <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001d2f4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001d2fb:	eb 07                	jmp    c001d304 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001d2fd:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001d304:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001d30b:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001d30e:	25 ff 00 00 00       	and    eax,0xff
c001d313:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d316:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d319:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d31c:	52                   	push   edx
c001d31d:	50                   	push   eax
c001d31e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d321:	e8 d8 fe ff ff       	call   c001d1fe <IOAPIC::write(int, int)>
c001d326:	83 c4 0c             	add    esp,0xc
c001d329:	90                   	nop
c001d32a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d32d:	c9                   	leave  
c001d32e:	c3                   	ret    
c001d32f:	90                   	nop

c001d330 <APICTimer::close(int, int, void*)>:
c001d330:	b8 00 00 00 00       	mov    eax,0x0
c001d335:	c3                   	ret    
c001d336:	66 90                	xchg   ax,ax

c001d338 <apicTimerHandler(regs*, void*)>:
c001d338:	83 ec 0c             	sub    esp,0xc
c001d33b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d33f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d341:	b8 10 27 00 00       	mov    eax,0x2710
c001d346:	ba 00 00 00 00       	mov    edx,0x0
c001d34b:	f7 f1                	div    ecx
c001d34d:	83 ec 0c             	sub    esp,0xc
c001d350:	50                   	push   eax
c001d351:	e8 7e 00 ff ff       	call   c000d3d4 <timerHandler(unsigned int)>
c001d356:	83 c4 10             	add    esp,0x10
c001d359:	90                   	nop
c001d35a:	83 c4 0c             	add    esp,0xc
c001d35d:	c3                   	ret    
c001d35e:	66 90                	xchg   ax,ax

c001d360 <APICTimer::open(int, int, void*)>:
c001d360:	83 ec 0c             	sub    esp,0xc
c001d363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d367:	8b 00                	mov    eax,DWORD PTR [eax]
c001d369:	83 c0 24             	add    eax,0x24
c001d36c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d36e:	83 ec 08             	sub    esp,0x8
c001d371:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d375:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d379:	ff d0                	call   eax
c001d37b:	83 c4 10             	add    esp,0x10
c001d37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d382:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d386:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d390:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d394:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001d39a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d39e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d3a4:	83 ec 0c             	sub    esp,0xc
c001d3a7:	51                   	push   ecx
c001d3a8:	6a 01                	push   0x1
c001d3aa:	68 38 d3 01 c0       	push   0xc001d338
c001d3af:	52                   	push   edx
c001d3b0:	50                   	push   eax
c001d3b1:	e8 3a e6 fe ff       	call   c000b9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d3b6:	83 c4 20             	add    esp,0x20
c001d3b9:	89 c2                	mov    edx,eax
c001d3bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3bf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001d3c5:	b8 00 00 00 00       	mov    eax,0x0
c001d3ca:	83 c4 0c             	add    esp,0xc
c001d3cd:	c3                   	ret    
c001d3ce:	66 90                	xchg   ax,ax

c001d3d0 <APICTimer::write(int)>:
c001d3d0:	83 ec 0c             	sub    esp,0xc
c001d3d3:	83 ec 0c             	sub    esp,0xc
c001d3d6:	68 d4 14 02 c0       	push   0xc00214d4
c001d3db:	e8 e7 2f ff ff       	call   c00103c7 <KePanic(char const*)>
c001d3e0:	83 c4 10             	add    esp,0x10
c001d3e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d3eb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d3f1:	90                   	nop
c001d3f2:	83 c4 0c             	add    esp,0xc
c001d3f5:	c3                   	ret    
c001d3f6:	66 90                	xchg   ax,ax

c001d3f8 <APICTimer::APICTimer()>:
c001d3f8:	83 ec 0c             	sub    esp,0xc
c001d3fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3ff:	83 ec 08             	sub    esp,0x8
c001d402:	68 e4 14 02 c0       	push   0xc00214e4
c001d407:	50                   	push   eax
c001d408:	e8 fb fe fe ff       	call   c000d308 <Timer::Timer(char const*)>
c001d40d:	83 c4 10             	add    esp,0x10
c001d410:	ba f8 14 02 c0       	mov    edx,0xc00214f8
c001d415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d419:	89 10                	mov    DWORD PTR [eax],edx
c001d41b:	90                   	nop
c001d41c:	83 c4 0c             	add    esp,0xc
c001d41f:	c3                   	ret    

c001d420 <PIT::write(int)>:
c001d420:	83 ec 10             	sub    esp,0x10
c001d423:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d427:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d42b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d431:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d435:	a3 a4 7b 02 c0       	mov    ds:0xc0027ba4,eax
c001d43a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001d43f:	99                   	cdq    
c001d440:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001d444:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d448:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001d44f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001d454:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001d458:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001d45d:	ee                   	out    dx,al
c001d45e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d462:	25 ff 00 00 00       	and    eax,0xff
c001d467:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001d46e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d472:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001d476:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001d47b:	ee                   	out    dx,al
c001d47c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d480:	c1 f8 08             	sar    eax,0x8
c001d483:	25 ff 00 00 00       	and    eax,0xff
c001d488:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001d48f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001d493:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001d497:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001d49c:	ee                   	out    dx,al
c001d49d:	90                   	nop
c001d49e:	83 c4 10             	add    esp,0x10
c001d4a1:	c3                   	ret    
c001d4a2:	66 90                	xchg   ax,ax

c001d4a4 <pitHandler(regs*, void*)>:
c001d4a4:	83 ec 0c             	sub    esp,0xc
c001d4a7:	8b 0d a4 7b 02 c0    	mov    ecx,DWORD PTR ds:0xc0027ba4
c001d4ad:	b8 10 27 00 00       	mov    eax,0x2710
c001d4b2:	99                   	cdq    
c001d4b3:	f7 f9                	idiv   ecx
c001d4b5:	83 ec 0c             	sub    esp,0xc
c001d4b8:	50                   	push   eax
c001d4b9:	e8 16 ff fe ff       	call   c000d3d4 <timerHandler(unsigned int)>
c001d4be:	83 c4 10             	add    esp,0x10
c001d4c1:	90                   	nop
c001d4c2:	83 c4 0c             	add    esp,0xc
c001d4c5:	c3                   	ret    
c001d4c6:	66 90                	xchg   ax,ax

c001d4c8 <PIT::open(int, int, void*)>:
c001d4c8:	83 ec 0c             	sub    esp,0xc
c001d4cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4cf:	8b 00                	mov    eax,DWORD PTR [eax]
c001d4d1:	83 c0 24             	add    eax,0x24
c001d4d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001d4d6:	83 ec 08             	sub    esp,0x8
c001d4d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4e1:	ff d0                	call   eax
c001d4e3:	83 c4 10             	add    esp,0x10
c001d4e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4ea:	83 ec 0c             	sub    esp,0xc
c001d4ed:	6a 00                	push   0x0
c001d4ef:	6a 01                	push   0x1
c001d4f1:	68 a4 d4 01 c0       	push   0xc001d4a4
c001d4f6:	6a 00                	push   0x0
c001d4f8:	50                   	push   eax
c001d4f9:	e8 f2 e4 fe ff       	call   c000b9f0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d4fe:	83 c4 20             	add    esp,0x20
c001d501:	89 c2                	mov    edx,eax
c001d503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d507:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001d50d:	b8 00 00 00 00       	mov    eax,0x0
c001d512:	83 c4 0c             	add    esp,0xc
c001d515:	c3                   	ret    
c001d516:	66 90                	xchg   ax,ax

c001d518 <PIT::close(int, int, void*)>:
c001d518:	83 ec 0c             	sub    esp,0xc
c001d51b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d51f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001d529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d52d:	6a 01                	push   0x1
c001d52f:	68 a4 d4 01 c0       	push   0xc001d4a4
c001d534:	6a 00                	push   0x0
c001d536:	50                   	push   eax
c001d537:	e8 ea e4 fe ff       	call   c000ba26 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001d53c:	83 c4 10             	add    esp,0x10
c001d53f:	b8 00 00 00 00       	mov    eax,0x0
c001d544:	83 c4 0c             	add    esp,0xc
c001d547:	c3                   	ret    

c001d548 <PIT::PIT()>:
c001d548:	83 ec 0c             	sub    esp,0xc
c001d54b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d54f:	83 ec 08             	sub    esp,0x8
c001d552:	68 20 15 02 c0       	push   0xc0021520
c001d557:	50                   	push   eax
c001d558:	e8 ab fd fe ff       	call   c000d308 <Timer::Timer(char const*)>
c001d55d:	83 c4 10             	add    esp,0x10
c001d560:	ba 48 15 02 c0       	mov    edx,0xc0021548
c001d565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d569:	89 10                	mov    DWORD PTR [eax],edx
c001d56b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d56f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d575:	31 d2                	xor    edx,edx
c001d577:	88 c2                	mov    dl,al
c001d579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d57d:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001d584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d588:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d58e:	31 d2                	xor    edx,edx
c001d590:	88 c2                	mov    dl,al
c001d592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d596:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001d59b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d59f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d5a5:	8d 50 01             	lea    edx,[eax+0x1]
c001d5a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d5ac:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d5b2:	31 d2                	xor    edx,edx
c001d5b4:	88 c2                	mov    dl,al
c001d5b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ba:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d5be:	83 e1 3f             	and    ecx,0x3f
c001d5c1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d5c5:	90                   	nop
c001d5c6:	83 c4 0c             	add    esp,0xc
c001d5c9:	c3                   	ret    
c001d5ca:	66 90                	xchg   ax,ax
c001d5cc:	66 90                	xchg   ax,ax
c001d5ce:	66 90                	xchg   ax,ax

c001d5d0 <avxDetect>:
c001d5d0:	b8 01 00 00 00       	mov    eax,0x1
c001d5d5:	0f a2                	cpuid  
c001d5d7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001d5dd:	74 15                	je     c001d5f4 <avxDetect.noAVX>
c001d5df:	b8 01 00 00 00       	mov    eax,0x1
c001d5e4:	0f a2                	cpuid  
c001d5e6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001d5ec:	74 06                	je     c001d5f4 <avxDetect.noAVX>
c001d5ee:	b8 01 00 00 00       	mov    eax,0x1
c001d5f3:	c3                   	ret    

c001d5f4 <avxDetect.noAVX>:
c001d5f4:	b8 00 00 00 00       	mov    eax,0x0
c001d5f9:	c3                   	ret    

c001d5fa <avxSave>:
c001d5fa:	53                   	push   ebx
c001d5fb:	52                   	push   edx
c001d5fc:	31 c0                	xor    eax,eax
c001d5fe:	48                   	dec    eax
c001d5ff:	89 c2                	mov    edx,eax
c001d601:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d605:	0f ae 23             	xsave  [ebx]
c001d608:	5a                   	pop    edx
c001d609:	5b                   	pop    ebx
c001d60a:	c3                   	ret    

c001d60b <avxLoad>:
c001d60b:	53                   	push   ebx
c001d60c:	52                   	push   edx
c001d60d:	31 c0                	xor    eax,eax
c001d60f:	48                   	dec    eax
c001d610:	89 c2                	mov    edx,eax
c001d612:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d616:	0f ae 2b             	xrstor [ebx]
c001d619:	5a                   	pop    edx
c001d61a:	5b                   	pop    ebx
c001d61b:	c3                   	ret    

c001d61c <avxInit>:
c001d61c:	e8 67 03 00 00       	call   c001d988 <sseInit>
c001d621:	50                   	push   eax
c001d622:	51                   	push   ecx
c001d623:	0f 20 e0             	mov    eax,cr4
c001d626:	0d 00 00 04 00       	or     eax,0x40000
c001d62b:	0f 22 e0             	mov    cr4,eax
c001d62e:	31 c9                	xor    ecx,ecx
c001d630:	0f 01 d0             	xgetbv 
c001d633:	0d 07 00 00 00       	or     eax,0x7
c001d638:	0f 01 d1             	xsetbv 
c001d63b:	59                   	pop    ecx
c001d63c:	58                   	pop    eax
c001d63d:	c3                   	ret    

c001d63e <avxClose>:
c001d63e:	c3                   	ret    

c001d63f <wouldSheSayYes>:
c001d63f:	c3                   	ret    
c001d640:	49                   	dec    ecx
c001d641:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001d645:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001d649:	75 20                	jne    c001d66b <isr0+0xb>
c001d64b:	4e                   	dec    esi
c001d64c:	79 61                	jns    c001d6af <isr7+0x3>
c001d64e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001d653:	66 90                	xchg   ax,ax
c001d655:	66 90                	xchg   ax,ax
c001d657:	66 90                	xchg   ax,ax
c001d659:	66 90                	xchg   ax,ax
c001d65b:	66 90                	xchg   ax,ax
c001d65d:	66 90                	xchg   ax,ax
c001d65f:	90                   	nop

c001d660 <isr0>:
c001d660:	fa                   	cli    
c001d661:	68 00 00 00 00       	push   0x0
c001d666:	68 00 00 00 00       	push   0x0
c001d66b:	e9 56 01 00 00       	jmp    c001d7c6 <int_common_stub>

c001d670 <isr1>:
c001d670:	fa                   	cli    
c001d671:	6a 00                	push   0x0
c001d673:	6a 01                	push   0x1
c001d675:	e9 4c 01 00 00       	jmp    c001d7c6 <int_common_stub>

c001d67a <isr2>:
c001d67a:	fa                   	cli    
c001d67b:	6a 00                	push   0x0
c001d67d:	6a 02                	push   0x2
c001d67f:	e9 42 01 00 00       	jmp    c001d7c6 <int_common_stub>

c001d684 <isr3>:
c001d684:	fa                   	cli    
c001d685:	6a 00                	push   0x0
c001d687:	6a 03                	push   0x3
c001d689:	e9 38 01 00 00       	jmp    c001d7c6 <int_common_stub>

c001d68e <isr4>:
c001d68e:	fa                   	cli    
c001d68f:	6a 00                	push   0x0
c001d691:	6a 04                	push   0x4
c001d693:	e9 2e 01 00 00       	jmp    c001d7c6 <int_common_stub>

c001d698 <isr5>:
c001d698:	fa                   	cli    
c001d699:	6a 00                	push   0x0
c001d69b:	6a 05                	push   0x5
c001d69d:	e9 24 01 00 00       	jmp    c001d7c6 <int_common_stub>

c001d6a2 <isr6>:
c001d6a2:	fa                   	cli    
c001d6a3:	6a 00                	push   0x0
c001d6a5:	6a 06                	push   0x6
c001d6a7:	e9 1a 01 00 00       	jmp    c001d7c6 <int_common_stub>

c001d6ac <isr7>:
c001d6ac:	fa                   	cli    
c001d6ad:	6a 00                	push   0x0
c001d6af:	6a 07                	push   0x7
c001d6b1:	e9 10 01 00 00       	jmp    c001d7c6 <int_common_stub>

c001d6b6 <isr8>:
c001d6b6:	fa                   	cli    
c001d6b7:	6a 08                	push   0x8
c001d6b9:	e9 08 01 00 00       	jmp    c001d7c6 <int_common_stub>

c001d6be <isr9>:
c001d6be:	fa                   	cli    
c001d6bf:	6a 00                	push   0x0
c001d6c1:	6a 09                	push   0x9
c001d6c3:	e9 fe 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d6c8 <isr10>:
c001d6c8:	fa                   	cli    
c001d6c9:	6a 0a                	push   0xa
c001d6cb:	e9 f6 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d6d0 <isr11>:
c001d6d0:	fa                   	cli    
c001d6d1:	6a 0b                	push   0xb
c001d6d3:	e9 ee 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d6d8 <isr12>:
c001d6d8:	fa                   	cli    
c001d6d9:	6a 0c                	push   0xc
c001d6db:	e9 e6 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d6e0 <isr13>:
c001d6e0:	fa                   	cli    
c001d6e1:	6a 0d                	push   0xd
c001d6e3:	53                   	push   ebx
c001d6e4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d6e8:	81 fb b6 d8 01 c0    	cmp    ebx,0xc001d8b6
c001d6ee:	5b                   	pop    ebx
c001d6ef:	0f 84 c3 01 00 00    	je     c001d8b8 <finishSignal2>
c001d6f5:	e9 cc 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d6fa <isr14>:
c001d6fa:	fa                   	cli    
c001d6fb:	6a 0e                	push   0xe
c001d6fd:	e9 c4 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d702 <isr15>:
c001d702:	fa                   	cli    
c001d703:	6a 00                	push   0x0
c001d705:	6a 0f                	push   0xf
c001d707:	e9 ba 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d70c <isr16>:
c001d70c:	fa                   	cli    
c001d70d:	6a 00                	push   0x0
c001d70f:	6a 10                	push   0x10
c001d711:	e9 b0 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d716 <isr17>:
c001d716:	fa                   	cli    
c001d717:	6a 00                	push   0x0
c001d719:	6a 11                	push   0x11
c001d71b:	e9 a6 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d720 <isr18>:
c001d720:	fa                   	cli    
c001d721:	6a 00                	push   0x0
c001d723:	6a 12                	push   0x12
c001d725:	e9 9c 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d72a <irq3>:
c001d72a:	fa                   	cli    
c001d72b:	6a 00                	push   0x0
c001d72d:	6a 23                	push   0x23
c001d72f:	e9 92 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d734 <irq4>:
c001d734:	fa                   	cli    
c001d735:	6a 00                	push   0x0
c001d737:	6a 24                	push   0x24
c001d739:	e9 88 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d73e <irq5>:
c001d73e:	fa                   	cli    
c001d73f:	6a 00                	push   0x0
c001d741:	6a 25                	push   0x25
c001d743:	e9 7e 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d748 <irq6>:
c001d748:	fa                   	cli    
c001d749:	6a 00                	push   0x0
c001d74b:	6a 26                	push   0x26
c001d74d:	e9 74 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d752 <irq7>:
c001d752:	fa                   	cli    
c001d753:	6a 00                	push   0x0
c001d755:	6a 27                	push   0x27
c001d757:	e9 6a 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d75c <irq8>:
c001d75c:	fa                   	cli    
c001d75d:	6a 00                	push   0x0
c001d75f:	6a 28                	push   0x28
c001d761:	e9 60 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d766 <irq9>:
c001d766:	fa                   	cli    
c001d767:	6a 00                	push   0x0
c001d769:	6a 29                	push   0x29
c001d76b:	e9 56 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d770 <irq10>:
c001d770:	fa                   	cli    
c001d771:	6a 00                	push   0x0
c001d773:	6a 2a                	push   0x2a
c001d775:	e9 4c 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d77a <irq11>:
c001d77a:	fa                   	cli    
c001d77b:	6a 00                	push   0x0
c001d77d:	6a 2b                	push   0x2b
c001d77f:	e9 42 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d784 <irq12>:
c001d784:	fa                   	cli    
c001d785:	6a 00                	push   0x0
c001d787:	6a 2c                	push   0x2c
c001d789:	e9 38 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d78e <irq13>:
c001d78e:	fa                   	cli    
c001d78f:	6a 00                	push   0x0
c001d791:	6a 2d                	push   0x2d
c001d793:	e9 2e 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d798 <irq14>:
c001d798:	fa                   	cli    
c001d799:	6a 00                	push   0x0
c001d79b:	6a 2e                	push   0x2e
c001d79d:	e9 24 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d7a2 <irq15>:
c001d7a2:	fa                   	cli    
c001d7a3:	6a 00                	push   0x0
c001d7a5:	6a 2f                	push   0x2f
c001d7a7:	e9 1a 00 00 00       	jmp    c001d7c6 <int_common_stub>

c001d7ac <irq1>:
c001d7ac:	fa                   	cli    
c001d7ad:	6a 00                	push   0x0
c001d7af:	6a 21                	push   0x21
c001d7b1:	eb 13                	jmp    c001d7c6 <int_common_stub>

c001d7b3 <irq2>:
c001d7b3:	fa                   	cli    
c001d7b4:	6a 00                	push   0x0
c001d7b6:	6a 22                	push   0x22
c001d7b8:	eb 0c                	jmp    c001d7c6 <int_common_stub>

c001d7ba <isr96>:
c001d7ba:	6a 00                	push   0x0
c001d7bc:	6a 60                	push   0x60
c001d7be:	fb                   	sti    
c001d7bf:	eb 37                	jmp    c001d7f8 <syscall_common_stub>

c001d7c1 <irq0>:
c001d7c1:	fa                   	cli    
c001d7c2:	6a 00                	push   0x0
c001d7c4:	6a 20                	push   0x20

c001d7c6 <int_common_stub>:
c001d7c6:	60                   	pusha  
c001d7c7:	1e                   	push   ds
c001d7c8:	06                   	push   es
c001d7c9:	0f a0                	push   fs
c001d7cb:	0f a8                	push   gs
c001d7cd:	66 b8 10 00          	mov    ax,0x10
c001d7d1:	66 8e d8             	mov    ds,ax
c001d7d4:	66 8e c0             	mov    es,ax
c001d7d7:	66 8e e0             	mov    fs,ax
c001d7da:	66 8e e8             	mov    gs,ax
c001d7dd:	54                   	push   esp
c001d7de:	fc                   	cld    
c001d7df:	e8 0c e7 fe ff       	call   c000bef0 <int_handler>
c001d7e4:	81 c4 04 00 00 00    	add    esp,0x4
c001d7ea:	0f a9                	pop    gs
c001d7ec:	0f a1                	pop    fs
c001d7ee:	07                   	pop    es
c001d7ef:	1f                   	pop    ds
c001d7f0:	61                   	popa   
c001d7f1:	81 c4 08 00 00 00    	add    esp,0x8
c001d7f7:	cf                   	iret   

c001d7f8 <syscall_common_stub>:
c001d7f8:	60                   	pusha  
c001d7f9:	1e                   	push   ds
c001d7fa:	06                   	push   es
c001d7fb:	0f a0                	push   fs
c001d7fd:	0f a8                	push   gs
c001d7ff:	66 b8 10 00          	mov    ax,0x10
c001d803:	66 8e d8             	mov    ds,ax
c001d806:	66 8e c0             	mov    es,ax
c001d809:	66 8e e0             	mov    fs,ax
c001d80c:	66 8e e8             	mov    gs,ax
c001d80f:	54                   	push   esp
c001d810:	fc                   	cld    
c001d811:	e8 da e6 fe ff       	call   c000bef0 <int_handler>
c001d816:	81 c4 04 00 00 00    	add    esp,0x4
c001d81c:	0f a9                	pop    gs
c001d81e:	0f a1                	pop    fs
c001d820:	07                   	pop    es
c001d821:	1f                   	pop    ds
c001d822:	e8 e0 30 ff ff       	call   c0010907 <KiCheckSignalZ>
c001d827:	3d 00 00 00 00       	cmp    eax,0x0
c001d82c:	0f 84 c0 00 00 00    	je     c001d8f2 <skipSignals>
c001d832:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001d837:	61                   	popa   
c001d838:	53                   	push   ebx
c001d839:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001d83f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001d842:	5b                   	pop    ebx
c001d843:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001d848:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001d84b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001d84e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d851:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001d854:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001d857:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001d85a:	81 c4 08 00 00 00    	add    esp,0x8
c001d860:	5e                   	pop    esi
c001d861:	5b                   	pop    ebx
c001d862:	59                   	pop    ecx
c001d863:	5a                   	pop    edx
c001d864:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001d867:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001d86a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001d86d:	52                   	push   edx
c001d86e:	51                   	push   ecx
c001d86f:	53                   	push   ebx
c001d870:	56                   	push   esi
c001d871:	81 ec 08 00 00 00    	sub    esp,0x8
c001d877:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001d87a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001d87d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001d880:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d883:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d886:	60                   	pusha  
c001d887:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001d88d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001d890:	89 e3                	mov    ebx,esp
c001d892:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001d895:	52                   	push   edx
c001d896:	68 b6 d8 01 c0       	push   0xc001d8b6
c001d89b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001d89e:	89 dc                	mov    esp,ebx
c001d8a0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001d8a3:	68 23 00 00 00       	push   0x23
c001d8a8:	51                   	push   ecx
c001d8a9:	68 02 02 00 00       	push   0x202
c001d8ae:	68 1b 00 00 00       	push   0x1b
c001d8b3:	ff 36                	push   DWORD PTR [esi]
c001d8b5:	cf                   	iret   

c001d8b6 <finishSignal>:
c001d8b6:	cd 0f                	int    0xf

c001d8b8 <finishSignal2>:
c001d8b8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001d8be:	e8 c1 30 ff ff       	call   c0010984 <KiFinishSignalZ>
c001d8c3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001d8c9:	68 23 00 00 00       	push   0x23
c001d8ce:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001d8d1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001d8d4:	68 1b 00 00 00       	push   0x1b
c001d8d9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001d8dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d8df:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001d8e2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001d8e5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d8e8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001d8eb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001d8ee:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001d8f1:	cf                   	iret   

c001d8f2 <skipSignals>:
c001d8f2:	61                   	popa   
c001d8f3:	81 c4 08 00 00 00    	add    esp,0x8
c001d8f9:	cf                   	iret   
c001d8fa:	90                   	nop
c001d8fb:	90                   	nop

c001d8fc <irq16>:
c001d8fc:	fa                   	cli    
c001d8fd:	6a 00                	push   0x0
c001d8ff:	6a 30                	push   0x30
c001d901:	e9 c0 fe ff ff       	jmp    c001d7c6 <int_common_stub>

c001d906 <irq17>:
c001d906:	fa                   	cli    
c001d907:	6a 00                	push   0x0
c001d909:	6a 31                	push   0x31
c001d90b:	e9 b6 fe ff ff       	jmp    c001d7c6 <int_common_stub>

c001d910 <irq18>:
c001d910:	fa                   	cli    
c001d911:	6a 00                	push   0x0
c001d913:	6a 32                	push   0x32
c001d915:	e9 ac fe ff ff       	jmp    c001d7c6 <int_common_stub>

c001d91a <irq19>:
c001d91a:	fa                   	cli    
c001d91b:	6a 00                	push   0x0
c001d91d:	6a 33                	push   0x33
c001d91f:	e9 a2 fe ff ff       	jmp    c001d7c6 <int_common_stub>

c001d924 <irq20>:
c001d924:	fa                   	cli    
c001d925:	6a 00                	push   0x0
c001d927:	6a 34                	push   0x34
c001d929:	e9 98 fe ff ff       	jmp    c001d7c6 <int_common_stub>

c001d92e <irq21>:
c001d92e:	fa                   	cli    
c001d92f:	6a 00                	push   0x0
c001d931:	6a 35                	push   0x35
c001d933:	e9 8e fe ff ff       	jmp    c001d7c6 <int_common_stub>

c001d938 <irq22>:
c001d938:	fa                   	cli    
c001d939:	6a 00                	push   0x0
c001d93b:	6a 36                	push   0x36
c001d93d:	e9 84 fe ff ff       	jmp    c001d7c6 <int_common_stub>

c001d942 <irq23>:
c001d942:	fa                   	cli    
c001d943:	6a 00                	push   0x0
c001d945:	6a 37                	push   0x37
c001d947:	e9 7a fe ff ff       	jmp    c001d7c6 <int_common_stub>
c001d94c:	66 90                	xchg   ax,ax
c001d94e:	66 90                	xchg   ax,ax

c001d950 <i386GetRDRAND>:
c001d950:	b9 64 00 00 00       	mov    ecx,0x64

c001d955 <retry>:
c001d955:	0f c7 f0             	rdrand eax
c001d958:	72 05                	jb     c001d95f <retry.done>
c001d95a:	e2 f9                	loop   c001d955 <retry>

c001d95c <retry.fail>:
c001d95c:	31 c0                	xor    eax,eax
c001d95e:	c3                   	ret    

c001d95f <retry.done>:
c001d95f:	c3                   	ret    

c001d960 <absolutelyNoChanceInHell>:
c001d960:	b8 01 00 00 00       	mov    eax,0x1
c001d965:	0f a2                	cpuid  
c001d967:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001d96d:	74 06                	je     c001d975 <sseDetect.noSSE>
c001d96f:	b8 01 00 00 00       	mov    eax,0x1
c001d974:	c3                   	ret    

c001d975 <sseDetect.noSSE>:
c001d975:	31 c0                	xor    eax,eax
c001d977:	c3                   	ret    

c001d978 <sseSave>:
c001d978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d97c:	0f ae 00             	fxsave [eax]
c001d97f:	c3                   	ret    

c001d980 <sseLoad>:
c001d980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d984:	0f ae 08             	fxrstor [eax]
c001d987:	c3                   	ret    

c001d988 <sseInit>:
c001d988:	e8 42 00 00 00       	call   c001d9cf <x87Init>
c001d98d:	0f 20 e0             	mov    eax,cr4
c001d990:	66 0d 00 06          	or     ax,0x600
c001d994:	0f 22 e0             	mov    cr4,eax
c001d997:	c3                   	ret    

c001d998 <sseClose>:
c001d998:	c3                   	ret    
c001d999:	66 90                	xchg   ax,ax
c001d99b:	66 90                	xchg   ax,ax
c001d99d:	66 90                	xchg   ax,ax
c001d99f:	90                   	nop

c001d9a0 <value_37F>:
c001d9a0:	7f 03                	jg     c001d9a5 <value_37A+0x1>

c001d9a2 <value_37E>:
c001d9a2:	7e 03                	jle    c001d9a7 <x87Detect+0x1>

c001d9a4 <value_37A>:
c001d9a4:	7a 03                	jp     c001d9a9 <x87Detect+0x3>

c001d9a6 <x87Detect>:
c001d9a6:	b8 01 00 00 00       	mov    eax,0x1
c001d9ab:	0f a2                	cpuid  
c001d9ad:	f7 c2 01 00 00 00    	test   edx,0x1
c001d9b3:	74 06                	je     c001d9bb <x87Detect.nox87>
c001d9b5:	b8 01 00 00 00       	mov    eax,0x1
c001d9ba:	c3                   	ret    

c001d9bb <x87Detect.nox87>:
c001d9bb:	b8 00 00 00 00       	mov    eax,0x0
c001d9c0:	c3                   	ret    

c001d9c1 <x87Save>:
c001d9c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9c5:	dd 30                	fnsave [eax]
c001d9c7:	c3                   	ret    

c001d9c8 <x87Load>:
c001d9c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9cc:	dd 20                	frstor [eax]
c001d9ce:	c3                   	ret    

c001d9cf <x87Init>:
c001d9cf:	0f 20 c0             	mov    eax,cr0
c001d9d2:	66 25 fb ff          	and    ax,0xfffb
c001d9d6:	66 0d 22 00          	or     ax,0x22
c001d9da:	0f 22 c0             	mov    cr0,eax
c001d9dd:	db e3                	fninit 
c001d9df:	0f 06                	clts   
c001d9e1:	d9 2d a4 d9 01 c0    	fldcw  WORD PTR ds:0xc001d9a4
c001d9e7:	c3                   	ret    

c001d9e8 <x87Close>:
c001d9e8:	c3                   	ret    
c001d9e9:	66 90                	xchg   ax,ax
c001d9eb:	90                   	nop

c001d9ec <__do_global_ctors_aux>:
c001d9ec:	a1 9c e9 01 c0       	mov    eax,ds:0xc001e99c
c001d9f1:	83 f8 ff             	cmp    eax,0xffffffff
c001d9f4:	74 1a                	je     c001da10 <__do_global_ctors_aux+0x24>
c001d9f6:	55                   	push   ebp
c001d9f7:	89 e5                	mov    ebp,esp
c001d9f9:	53                   	push   ebx
c001d9fa:	52                   	push   edx
c001d9fb:	bb 9c e9 01 c0       	mov    ebx,0xc001e99c
c001da00:	ff d0                	call   eax
c001da02:	83 eb 04             	sub    ebx,0x4
c001da05:	8b 03                	mov    eax,DWORD PTR [ebx]
c001da07:	83 f8 ff             	cmp    eax,0xffffffff
c001da0a:	75 f4                	jne    c001da00 <__do_global_ctors_aux+0x14>
c001da0c:	58                   	pop    eax
c001da0d:	5b                   	pop    ebx
c001da0e:	5d                   	pop    ebp
c001da0f:	c3                   	ret    
c001da10:	c3                   	ret    
c001da11:	66 90                	xchg   ax,ax
c001da13:	90                   	nop

c001da14 <__divdi3>:
c001da14:	55                   	push   ebp
c001da15:	57                   	push   edi
c001da16:	56                   	push   esi
c001da17:	53                   	push   ebx
c001da18:	83 ec 1c             	sub    esp,0x1c
c001da1b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001da1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001da23:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001da26:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001da2a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001da2e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001da32:	85 db                	test   ebx,ebx
c001da34:	0f 88 8e 00 00 00    	js     c001dac8 <__divdi3+0xb4>
c001da3a:	89 dd                	mov    ebp,ebx
c001da3c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001da44:	89 d3                	mov    ebx,edx
c001da46:	85 d2                	test   edx,edx
c001da48:	79 0d                	jns    c001da57 <__divdi3+0x43>
c001da4a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001da4e:	f7 d8                	neg    eax
c001da50:	83 d2 00             	adc    edx,0x0
c001da53:	f7 da                	neg    edx
c001da55:	89 d3                	mov    ebx,edx
c001da57:	89 c7                	mov    edi,eax
c001da59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001da5c:	85 db                	test   ebx,ebx
c001da5e:	75 48                	jne    c001daa8 <__divdi3+0x94>
c001da60:	39 ef                	cmp    edi,ebp
c001da62:	76 24                	jbe    c001da88 <__divdi3+0x74>
c001da64:	89 ea                	mov    edx,ebp
c001da66:	f7 f7                	div    edi
c001da68:	89 c1                	mov    ecx,eax
c001da6a:	31 f6                	xor    esi,esi
c001da6c:	89 c8                	mov    eax,ecx
c001da6e:	89 f2                	mov    edx,esi
c001da70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001da74:	85 c9                	test   ecx,ecx
c001da76:	74 07                	je     c001da7f <__divdi3+0x6b>
c001da78:	f7 d8                	neg    eax
c001da7a:	83 d2 00             	adc    edx,0x0
c001da7d:	f7 da                	neg    edx
c001da7f:	83 c4 1c             	add    esp,0x1c
c001da82:	5b                   	pop    ebx
c001da83:	5e                   	pop    esi
c001da84:	5f                   	pop    edi
c001da85:	5d                   	pop    ebp
c001da86:	c3                   	ret    
c001da87:	90                   	nop
c001da88:	85 ff                	test   edi,edi
c001da8a:	75 0b                	jne    c001da97 <__divdi3+0x83>
c001da8c:	b8 01 00 00 00       	mov    eax,0x1
c001da91:	31 d2                	xor    edx,edx
c001da93:	f7 f3                	div    ebx
c001da95:	89 c7                	mov    edi,eax
c001da97:	31 d2                	xor    edx,edx
c001da99:	89 e8                	mov    eax,ebp
c001da9b:	f7 f7                	div    edi
c001da9d:	89 c6                	mov    esi,eax
c001da9f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001daa2:	f7 f7                	div    edi
c001daa4:	89 c1                	mov    ecx,eax
c001daa6:	eb c4                	jmp    c001da6c <__divdi3+0x58>
c001daa8:	39 eb                	cmp    ebx,ebp
c001daaa:	77 3c                	ja     c001dae8 <__divdi3+0xd4>
c001daac:	0f bd f3             	bsr    esi,ebx
c001daaf:	83 f6 1f             	xor    esi,0x1f
c001dab2:	75 40                	jne    c001daf4 <__divdi3+0xe0>
c001dab4:	39 eb                	cmp    ebx,ebp
c001dab6:	72 09                	jb     c001dac1 <__divdi3+0xad>
c001dab8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001dabb:	0f 87 97 00 00 00    	ja     c001db58 <__divdi3+0x144>
c001dac1:	b9 01 00 00 00       	mov    ecx,0x1
c001dac6:	eb a4                	jmp    c001da6c <__divdi3+0x58>
c001dac8:	f7 d9                	neg    ecx
c001daca:	83 d3 00             	adc    ebx,0x0
c001dacd:	f7 db                	neg    ebx
c001dacf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001dad2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001dad6:	89 dd                	mov    ebp,ebx
c001dad8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001dae0:	e9 5f ff ff ff       	jmp    c001da44 <__divdi3+0x30>
c001dae5:	8d 76 00             	lea    esi,[esi+0x0]
c001dae8:	31 f6                	xor    esi,esi
c001daea:	31 c9                	xor    ecx,ecx
c001daec:	e9 7b ff ff ff       	jmp    c001da6c <__divdi3+0x58>
c001daf1:	8d 76 00             	lea    esi,[esi+0x0]
c001daf4:	b8 20 00 00 00       	mov    eax,0x20
c001daf9:	29 f0                	sub    eax,esi
c001dafb:	89 f1                	mov    ecx,esi
c001dafd:	d3 e3                	shl    ebx,cl
c001daff:	89 fa                	mov    edx,edi
c001db01:	88 c1                	mov    cl,al
c001db03:	d3 ea                	shr    edx,cl
c001db05:	09 da                	or     edx,ebx
c001db07:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001db0b:	89 f1                	mov    ecx,esi
c001db0d:	d3 e7                	shl    edi,cl
c001db0f:	89 eb                	mov    ebx,ebp
c001db11:	88 c1                	mov    cl,al
c001db13:	d3 eb                	shr    ebx,cl
c001db15:	89 f1                	mov    ecx,esi
c001db17:	d3 e5                	shl    ebp,cl
c001db19:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001db1c:	88 c1                	mov    cl,al
c001db1e:	d3 ea                	shr    edx,cl
c001db20:	09 d5                	or     ebp,edx
c001db22:	89 e8                	mov    eax,ebp
c001db24:	89 da                	mov    edx,ebx
c001db26:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001db2a:	89 d3                	mov    ebx,edx
c001db2c:	89 c5                	mov    ebp,eax
c001db2e:	f7 e7                	mul    edi
c001db30:	39 d3                	cmp    ebx,edx
c001db32:	72 18                	jb     c001db4c <__divdi3+0x138>
c001db34:	74 0a                	je     c001db40 <__divdi3+0x12c>
c001db36:	89 e9                	mov    ecx,ebp
c001db38:	31 f6                	xor    esi,esi
c001db3a:	e9 2d ff ff ff       	jmp    c001da6c <__divdi3+0x58>
c001db3f:	90                   	nop
c001db40:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001db43:	89 f1                	mov    ecx,esi
c001db45:	d3 e7                	shl    edi,cl
c001db47:	39 c7                	cmp    edi,eax
c001db49:	73 eb                	jae    c001db36 <__divdi3+0x122>
c001db4b:	90                   	nop
c001db4c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001db4f:	31 f6                	xor    esi,esi
c001db51:	e9 16 ff ff ff       	jmp    c001da6c <__divdi3+0x58>
c001db56:	66 90                	xchg   ax,ax
c001db58:	31 c9                	xor    ecx,ecx
c001db5a:	e9 0d ff ff ff       	jmp    c001da6c <__divdi3+0x58>
c001db5f:	90                   	nop

c001db60 <__moddi3>:
c001db60:	55                   	push   ebp
c001db61:	57                   	push   edi
c001db62:	56                   	push   esi
c001db63:	53                   	push   ebx
c001db64:	83 ec 2c             	sub    esp,0x2c
c001db67:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001db6b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001db6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001db73:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001db77:	85 db                	test   ebx,ebx
c001db79:	0f 88 85 00 00 00    	js     c001dc04 <__moddi3+0xa4>
c001db7f:	89 de                	mov    esi,ebx
c001db81:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001db89:	89 d7                	mov    edi,edx
c001db8b:	85 d2                	test   edx,edx
c001db8d:	79 09                	jns    c001db98 <__moddi3+0x38>
c001db8f:	f7 d8                	neg    eax
c001db91:	83 d2 00             	adc    edx,0x0
c001db94:	f7 da                	neg    edx
c001db96:	89 d7                	mov    edi,edx
c001db98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001db9c:	89 cd                	mov    ebp,ecx
c001db9e:	85 ff                	test   edi,edi
c001dba0:	75 52                	jne    c001dbf4 <__moddi3+0x94>
c001dba2:	89 c3                	mov    ebx,eax
c001dba4:	39 f0                	cmp    eax,esi
c001dba6:	76 24                	jbe    c001dbcc <__moddi3+0x6c>
c001dba8:	89 c8                	mov    eax,ecx
c001dbaa:	89 f2                	mov    edx,esi
c001dbac:	f7 f3                	div    ebx
c001dbae:	89 d6                	mov    esi,edx
c001dbb0:	89 f0                	mov    eax,esi
c001dbb2:	31 d2                	xor    edx,edx
c001dbb4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dbb8:	85 c9                	test   ecx,ecx
c001dbba:	74 07                	je     c001dbc3 <__moddi3+0x63>
c001dbbc:	f7 d8                	neg    eax
c001dbbe:	83 d2 00             	adc    edx,0x0
c001dbc1:	f7 da                	neg    edx
c001dbc3:	83 c4 2c             	add    esp,0x2c
c001dbc6:	5b                   	pop    ebx
c001dbc7:	5e                   	pop    esi
c001dbc8:	5f                   	pop    edi
c001dbc9:	5d                   	pop    ebp
c001dbca:	c3                   	ret    
c001dbcb:	90                   	nop
c001dbcc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dbd0:	85 db                	test   ebx,ebx
c001dbd2:	75 0d                	jne    c001dbe1 <__moddi3+0x81>
c001dbd4:	b8 01 00 00 00       	mov    eax,0x1
c001dbd9:	31 d2                	xor    edx,edx
c001dbdb:	f7 f7                	div    edi
c001dbdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dbe1:	89 f0                	mov    eax,esi
c001dbe3:	31 d2                	xor    edx,edx
c001dbe5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001dbe9:	f7 f7                	div    edi
c001dbeb:	89 e8                	mov    eax,ebp
c001dbed:	f7 f7                	div    edi
c001dbef:	89 d6                	mov    esi,edx
c001dbf1:	eb bd                	jmp    c001dbb0 <__moddi3+0x50>
c001dbf3:	90                   	nop
c001dbf4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001dbf8:	39 f7                	cmp    edi,esi
c001dbfa:	76 20                	jbe    c001dc1c <__moddi3+0xbc>
c001dbfc:	89 c8                	mov    eax,ecx
c001dbfe:	89 f2                	mov    edx,esi
c001dc00:	eb b2                	jmp    c001dbb4 <__moddi3+0x54>
c001dc02:	66 90                	xchg   ax,ax
c001dc04:	f7 d9                	neg    ecx
c001dc06:	83 d3 00             	adc    ebx,0x0
c001dc09:	f7 db                	neg    ebx
c001dc0b:	89 de                	mov    esi,ebx
c001dc0d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001dc15:	e9 6f ff ff ff       	jmp    c001db89 <__moddi3+0x29>
c001dc1a:	66 90                	xchg   ax,ax
c001dc1c:	0f bd c7             	bsr    eax,edi
c001dc1f:	83 f0 1f             	xor    eax,0x1f
c001dc22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dc26:	75 24                	jne    c001dc4c <__moddi3+0xec>
c001dc28:	39 f7                	cmp    edi,esi
c001dc2a:	72 06                	jb     c001dc32 <__moddi3+0xd2>
c001dc2c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001dc30:	77 0c                	ja     c001dc3e <__moddi3+0xde>
c001dc32:	89 e9                	mov    ecx,ebp
c001dc34:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001dc38:	19 fe                	sbb    esi,edi
c001dc3a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001dc3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc42:	89 f2                	mov    edx,esi
c001dc44:	e9 6b ff ff ff       	jmp    c001dbb4 <__moddi3+0x54>
c001dc49:	8d 76 00             	lea    esi,[esi+0x0]
c001dc4c:	b8 20 00 00 00       	mov    eax,0x20
c001dc51:	89 c2                	mov    edx,eax
c001dc53:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dc57:	29 da                	sub    edx,ebx
c001dc59:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dc5d:	88 d9                	mov    cl,bl
c001dc5f:	d3 e7                	shl    edi,cl
c001dc61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc65:	88 d1                	mov    cl,dl
c001dc67:	d3 e8                	shr    eax,cl
c001dc69:	09 c7                	or     edi,eax
c001dc6b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001dc6f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001dc73:	89 d8                	mov    eax,ebx
c001dc75:	88 d9                	mov    cl,bl
c001dc77:	d3 e7                	shl    edi,cl
c001dc79:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001dc7d:	89 f3                	mov    ebx,esi
c001dc7f:	88 d1                	mov    cl,dl
c001dc81:	d3 eb                	shr    ebx,cl
c001dc83:	89 c7                	mov    edi,eax
c001dc85:	88 c1                	mov    cl,al
c001dc87:	d3 e6                	shl    esi,cl
c001dc89:	89 e8                	mov    eax,ebp
c001dc8b:	88 d1                	mov    cl,dl
c001dc8d:	d3 e8                	shr    eax,cl
c001dc8f:	09 f0                	or     eax,esi
c001dc91:	89 f9                	mov    ecx,edi
c001dc93:	d3 e5                	shl    ebp,cl
c001dc95:	89 da                	mov    edx,ebx
c001dc97:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001dc9b:	89 d3                	mov    ebx,edx
c001dc9d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001dca1:	89 c6                	mov    esi,eax
c001dca3:	89 d1                	mov    ecx,edx
c001dca5:	39 d3                	cmp    ebx,edx
c001dca7:	72 27                	jb     c001dcd0 <__moddi3+0x170>
c001dca9:	74 21                	je     c001dccc <__moddi3+0x16c>
c001dcab:	29 f5                	sub    ebp,esi
c001dcad:	19 cb                	sbb    ebx,ecx
c001dcaf:	89 de                	mov    esi,ebx
c001dcb1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001dcb5:	d3 e6                	shl    esi,cl
c001dcb7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001dcbb:	89 f9                	mov    ecx,edi
c001dcbd:	d3 ed                	shr    ebp,cl
c001dcbf:	09 ee                	or     esi,ebp
c001dcc1:	89 f0                	mov    eax,esi
c001dcc3:	d3 eb                	shr    ebx,cl
c001dcc5:	89 da                	mov    edx,ebx
c001dcc7:	e9 e8 fe ff ff       	jmp    c001dbb4 <__moddi3+0x54>
c001dccc:	39 c5                	cmp    ebp,eax
c001dcce:	73 db                	jae    c001dcab <__moddi3+0x14b>
c001dcd0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001dcd4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001dcd8:	89 d1                	mov    ecx,edx
c001dcda:	89 c6                	mov    esi,eax
c001dcdc:	eb cd                	jmp    c001dcab <__moddi3+0x14b>
c001dcde:	66 90                	xchg   ax,ax

c001dce0 <__udivdi3>:
c001dce0:	55                   	push   ebp
c001dce1:	57                   	push   edi
c001dce2:	56                   	push   esi
c001dce3:	53                   	push   ebx
c001dce4:	83 ec 1c             	sub    esp,0x1c
c001dce7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001dceb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001dcef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001dcf3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dcf7:	85 d2                	test   edx,edx
c001dcf9:	75 41                	jne    c001dd3c <__udivdi3+0x5c>
c001dcfb:	39 f7                	cmp    edi,esi
c001dcfd:	76 15                	jbe    c001dd14 <__udivdi3+0x34>
c001dcff:	89 e8                	mov    eax,ebp
c001dd01:	89 f2                	mov    edx,esi
c001dd03:	f7 f7                	div    edi
c001dd05:	31 db                	xor    ebx,ebx
c001dd07:	89 da                	mov    edx,ebx
c001dd09:	83 c4 1c             	add    esp,0x1c
c001dd0c:	5b                   	pop    ebx
c001dd0d:	5e                   	pop    esi
c001dd0e:	5f                   	pop    edi
c001dd0f:	5d                   	pop    ebp
c001dd10:	c3                   	ret    
c001dd11:	8d 76 00             	lea    esi,[esi+0x0]
c001dd14:	89 f9                	mov    ecx,edi
c001dd16:	85 ff                	test   edi,edi
c001dd18:	75 0b                	jne    c001dd25 <__udivdi3+0x45>
c001dd1a:	b8 01 00 00 00       	mov    eax,0x1
c001dd1f:	31 d2                	xor    edx,edx
c001dd21:	f7 f7                	div    edi
c001dd23:	89 c1                	mov    ecx,eax
c001dd25:	31 d2                	xor    edx,edx
c001dd27:	89 f0                	mov    eax,esi
c001dd29:	f7 f1                	div    ecx
c001dd2b:	89 c3                	mov    ebx,eax
c001dd2d:	89 e8                	mov    eax,ebp
c001dd2f:	f7 f1                	div    ecx
c001dd31:	89 da                	mov    edx,ebx
c001dd33:	83 c4 1c             	add    esp,0x1c
c001dd36:	5b                   	pop    ebx
c001dd37:	5e                   	pop    esi
c001dd38:	5f                   	pop    edi
c001dd39:	5d                   	pop    ebp
c001dd3a:	c3                   	ret    
c001dd3b:	90                   	nop
c001dd3c:	39 f2                	cmp    edx,esi
c001dd3e:	77 1c                	ja     c001dd5c <__udivdi3+0x7c>
c001dd40:	0f bd da             	bsr    ebx,edx
c001dd43:	83 f3 1f             	xor    ebx,0x1f
c001dd46:	75 24                	jne    c001dd6c <__udivdi3+0x8c>
c001dd48:	39 f2                	cmp    edx,esi
c001dd4a:	72 08                	jb     c001dd54 <__udivdi3+0x74>
c001dd4c:	39 ef                	cmp    edi,ebp
c001dd4e:	0f 87 84 00 00 00    	ja     c001ddd8 <__udivdi3+0xf8>
c001dd54:	b8 01 00 00 00       	mov    eax,0x1
c001dd59:	eb ac                	jmp    c001dd07 <__udivdi3+0x27>
c001dd5b:	90                   	nop
c001dd5c:	31 db                	xor    ebx,ebx
c001dd5e:	31 c0                	xor    eax,eax
c001dd60:	89 da                	mov    edx,ebx
c001dd62:	83 c4 1c             	add    esp,0x1c
c001dd65:	5b                   	pop    ebx
c001dd66:	5e                   	pop    esi
c001dd67:	5f                   	pop    edi
c001dd68:	5d                   	pop    ebp
c001dd69:	c3                   	ret    
c001dd6a:	66 90                	xchg   ax,ax
c001dd6c:	b8 20 00 00 00       	mov    eax,0x20
c001dd71:	29 d8                	sub    eax,ebx
c001dd73:	88 d9                	mov    cl,bl
c001dd75:	d3 e2                	shl    edx,cl
c001dd77:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dd7b:	89 fa                	mov    edx,edi
c001dd7d:	88 c1                	mov    cl,al
c001dd7f:	d3 ea                	shr    edx,cl
c001dd81:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dd85:	09 d1                	or     ecx,edx
c001dd87:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001dd8b:	88 d9                	mov    cl,bl
c001dd8d:	d3 e7                	shl    edi,cl
c001dd8f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001dd93:	89 f7                	mov    edi,esi
c001dd95:	88 c1                	mov    cl,al
c001dd97:	d3 ef                	shr    edi,cl
c001dd99:	88 d9                	mov    cl,bl
c001dd9b:	d3 e6                	shl    esi,cl
c001dd9d:	89 ea                	mov    edx,ebp
c001dd9f:	88 c1                	mov    cl,al
c001dda1:	d3 ea                	shr    edx,cl
c001dda3:	09 d6                	or     esi,edx
c001dda5:	89 f0                	mov    eax,esi
c001dda7:	89 fa                	mov    edx,edi
c001dda9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001ddad:	89 d7                	mov    edi,edx
c001ddaf:	89 c6                	mov    esi,eax
c001ddb1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ddb5:	39 d7                	cmp    edi,edx
c001ddb7:	72 13                	jb     c001ddcc <__udivdi3+0xec>
c001ddb9:	74 09                	je     c001ddc4 <__udivdi3+0xe4>
c001ddbb:	89 f0                	mov    eax,esi
c001ddbd:	31 db                	xor    ebx,ebx
c001ddbf:	e9 43 ff ff ff       	jmp    c001dd07 <__udivdi3+0x27>
c001ddc4:	88 d9                	mov    cl,bl
c001ddc6:	d3 e5                	shl    ebp,cl
c001ddc8:	39 c5                	cmp    ebp,eax
c001ddca:	73 ef                	jae    c001ddbb <__udivdi3+0xdb>
c001ddcc:	8d 46 ff             	lea    eax,[esi-0x1]
c001ddcf:	31 db                	xor    ebx,ebx
c001ddd1:	e9 31 ff ff ff       	jmp    c001dd07 <__udivdi3+0x27>
c001ddd6:	66 90                	xchg   ax,ax
c001ddd8:	31 c0                	xor    eax,eax
c001ddda:	e9 28 ff ff ff       	jmp    c001dd07 <__udivdi3+0x27>
c001dddf:	90                   	nop

c001dde0 <__umoddi3>:
c001dde0:	55                   	push   ebp
c001dde1:	57                   	push   edi
c001dde2:	56                   	push   esi
c001dde3:	53                   	push   ebx
c001dde4:	83 ec 1c             	sub    esp,0x1c
c001dde7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ddeb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ddef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001ddf3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ddf7:	89 da                	mov    edx,ebx
c001ddf9:	85 c0                	test   eax,eax
c001ddfb:	75 37                	jne    c001de34 <__umoddi3+0x54>
c001ddfd:	39 df                	cmp    edi,ebx
c001ddff:	76 13                	jbe    c001de14 <__umoddi3+0x34>
c001de01:	89 f0                	mov    eax,esi
c001de03:	f7 f7                	div    edi
c001de05:	89 d0                	mov    eax,edx
c001de07:	31 d2                	xor    edx,edx
c001de09:	83 c4 1c             	add    esp,0x1c
c001de0c:	5b                   	pop    ebx
c001de0d:	5e                   	pop    esi
c001de0e:	5f                   	pop    edi
c001de0f:	5d                   	pop    ebp
c001de10:	c3                   	ret    
c001de11:	8d 76 00             	lea    esi,[esi+0x0]
c001de14:	89 fd                	mov    ebp,edi
c001de16:	85 ff                	test   edi,edi
c001de18:	75 0b                	jne    c001de25 <__umoddi3+0x45>
c001de1a:	b8 01 00 00 00       	mov    eax,0x1
c001de1f:	31 d2                	xor    edx,edx
c001de21:	f7 f7                	div    edi
c001de23:	89 c5                	mov    ebp,eax
c001de25:	89 d8                	mov    eax,ebx
c001de27:	31 d2                	xor    edx,edx
c001de29:	f7 f5                	div    ebp
c001de2b:	89 f0                	mov    eax,esi
c001de2d:	f7 f5                	div    ebp
c001de2f:	89 d0                	mov    eax,edx
c001de31:	eb d4                	jmp    c001de07 <__umoddi3+0x27>
c001de33:	90                   	nop
c001de34:	89 f1                	mov    ecx,esi
c001de36:	39 d8                	cmp    eax,ebx
c001de38:	76 0a                	jbe    c001de44 <__umoddi3+0x64>
c001de3a:	89 f0                	mov    eax,esi
c001de3c:	83 c4 1c             	add    esp,0x1c
c001de3f:	5b                   	pop    ebx
c001de40:	5e                   	pop    esi
c001de41:	5f                   	pop    edi
c001de42:	5d                   	pop    ebp
c001de43:	c3                   	ret    
c001de44:	0f bd e8             	bsr    ebp,eax
c001de47:	83 f5 1f             	xor    ebp,0x1f
c001de4a:	75 1c                	jne    c001de68 <__umoddi3+0x88>
c001de4c:	39 d8                	cmp    eax,ebx
c001de4e:	72 04                	jb     c001de54 <__umoddi3+0x74>
c001de50:	39 f7                	cmp    edi,esi
c001de52:	77 08                	ja     c001de5c <__umoddi3+0x7c>
c001de54:	89 da                	mov    edx,ebx
c001de56:	29 fe                	sub    esi,edi
c001de58:	19 c2                	sbb    edx,eax
c001de5a:	89 f1                	mov    ecx,esi
c001de5c:	89 c8                	mov    eax,ecx
c001de5e:	83 c4 1c             	add    esp,0x1c
c001de61:	5b                   	pop    ebx
c001de62:	5e                   	pop    esi
c001de63:	5f                   	pop    edi
c001de64:	5d                   	pop    ebp
c001de65:	c3                   	ret    
c001de66:	66 90                	xchg   ax,ax
c001de68:	ba 20 00 00 00       	mov    edx,0x20
c001de6d:	29 ea                	sub    edx,ebp
c001de6f:	89 e9                	mov    ecx,ebp
c001de71:	d3 e0                	shl    eax,cl
c001de73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001de77:	89 f8                	mov    eax,edi
c001de79:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001de7d:	88 d1                	mov    cl,dl
c001de7f:	d3 e8                	shr    eax,cl
c001de81:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001de85:	09 c1                	or     ecx,eax
c001de87:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001de8b:	89 e9                	mov    ecx,ebp
c001de8d:	d3 e7                	shl    edi,cl
c001de8f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001de93:	89 d8                	mov    eax,ebx
c001de95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001de99:	88 d1                	mov    cl,dl
c001de9b:	d3 e8                	shr    eax,cl
c001de9d:	89 c7                	mov    edi,eax
c001de9f:	89 e9                	mov    ecx,ebp
c001dea1:	d3 e3                	shl    ebx,cl
c001dea3:	89 f0                	mov    eax,esi
c001dea5:	88 d1                	mov    cl,dl
c001dea7:	d3 e8                	shr    eax,cl
c001dea9:	09 d8                	or     eax,ebx
c001deab:	89 e9                	mov    ecx,ebp
c001dead:	d3 e6                	shl    esi,cl
c001deaf:	89 f3                	mov    ebx,esi
c001deb1:	89 fa                	mov    edx,edi
c001deb3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001deb7:	89 d1                	mov    ecx,edx
c001deb9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001debd:	89 c6                	mov    esi,eax
c001debf:	89 d7                	mov    edi,edx
c001dec1:	39 d1                	cmp    ecx,edx
c001dec3:	72 27                	jb     c001deec <__umoddi3+0x10c>
c001dec5:	74 21                	je     c001dee8 <__umoddi3+0x108>
c001dec7:	89 ca                	mov    edx,ecx
c001dec9:	29 f3                	sub    ebx,esi
c001decb:	19 fa                	sbb    edx,edi
c001decd:	89 d0                	mov    eax,edx
c001decf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001ded3:	d3 e0                	shl    eax,cl
c001ded5:	89 e9                	mov    ecx,ebp
c001ded7:	d3 eb                	shr    ebx,cl
c001ded9:	09 d8                	or     eax,ebx
c001dedb:	d3 ea                	shr    edx,cl
c001dedd:	83 c4 1c             	add    esp,0x1c
c001dee0:	5b                   	pop    ebx
c001dee1:	5e                   	pop    esi
c001dee2:	5f                   	pop    edi
c001dee3:	5d                   	pop    ebp
c001dee4:	c3                   	ret    
c001dee5:	8d 76 00             	lea    esi,[esi+0x0]
c001dee8:	39 c3                	cmp    ebx,eax
c001deea:	73 db                	jae    c001dec7 <__umoddi3+0xe7>
c001deec:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001def0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001def4:	89 d7                	mov    edi,edx
c001def6:	89 c6                	mov    esi,eax
c001def8:	eb cd                	jmp    c001dec7 <__umoddi3+0xe7>

Disassembly of section .init:

c001defa <_init>:
c001defa:	55                   	push   ebp
c001defb:	89 e5                	mov    ebp,esp
c001defd:	e8 f2 21 fe ff       	call   c00000f4 <frame_dummy>
c001df02:	e8 e5 fa ff ff       	call   c001d9ec <__do_global_ctors_aux>
c001df07:	5d                   	pop    ebp
c001df08:	c3                   	ret    

Disassembly of section .fini:

c001df09 <_fini>:
c001df09:	55                   	push   ebp
c001df0a:	89 e5                	mov    ebp,esp
c001df0c:	e8 73 21 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001df11:	5d                   	pop    ebp
c001df12:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001df14 <Computer::~Computer()>:
c001df14:	83 ec 0c             	sub    esp,0xc
c001df17:	ba 34 f2 01 c0       	mov    edx,0xc001f234
c001df1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df20:	89 10                	mov    DWORD PTR [eax],edx
c001df22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df26:	83 ec 0c             	sub    esp,0xc
c001df29:	50                   	push   eax
c001df2a:	e8 17 da fe ff       	call   c000b946 <Device::~Device()>
c001df2f:	83 c4 10             	add    esp,0x10
c001df32:	90                   	nop
c001df33:	83 c4 0c             	add    esp,0xc
c001df36:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001df38 <Computer::~Computer()>:
c001df38:	83 ec 0c             	sub    esp,0xc
c001df3b:	83 ec 0c             	sub    esp,0xc
c001df3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df42:	e8 cd ff ff ff       	call   c001df14 <Computer::~Computer()>
c001df47:	83 c4 10             	add    esp,0x10
c001df4a:	83 ec 08             	sub    esp,0x8
c001df4d:	68 70 01 00 00       	push   0x170
c001df52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df56:	e8 b5 c5 fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001df5b:	83 c4 10             	add    esp,0x10
c001df5e:	83 c4 0c             	add    esp,0xc
c001df61:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001df62 <idleCommon()>:
c001df62:	83 ec 0c             	sub    esp,0xc
c001df65:	fa                   	cli    
c001df66:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001df6c:	e8 6b 6a ff ff       	call   c00149dc <schedule()>
c001df71:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001df76:	48                   	dec    eax
c001df77:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001df7c:	75 01                	jne    c001df7f <idleCommon()+0x1d>
c001df7e:	fb                   	sti    
c001df7f:	83 c4 0c             	add    esp,0xc
c001df82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001df84 <LinkedList<UnixFile>::~LinkedList()>:
c001df84:	90                   	nop
c001df85:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001df86 <LinkedList<UnixFile>::LinkedList()>:
c001df86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df8a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001df90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001df9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df9f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dfa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfaa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001dfb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfb4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dfbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfbf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dfc6:	90                   	nop
c001dfc7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001dfc8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001dfc8:	83 ec 0c             	sub    esp,0xc
c001dfcb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001dfd0:	75 10                	jne    c001dfe2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001dfd2:	83 ec 0c             	sub    esp,0xc
c001dfd5:	68 48 f4 01 c0       	push   0xc001f448
c001dfda:	e8 e8 23 ff ff       	call   c00103c7 <KePanic(char const*)>
c001dfdf:	83 c4 10             	add    esp,0x10
c001dfe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfe6:	8b 00                	mov    eax,DWORD PTR [eax]
c001dfe8:	85 c0                	test   eax,eax
c001dfea:	74 34                	je     c001e020 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001dfec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dff0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dff3:	85 c0                	test   eax,eax
c001dff5:	74 29                	je     c001e020 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001dff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dffb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dffe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e002:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e009:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e00d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e017:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e01e:	eb 65                	jmp    c001e085 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e024:	8b 00                	mov    eax,DWORD PTR [eax]
c001e026:	85 c0                	test   eax,eax
c001e028:	75 4b                	jne    c001e075 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e02a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e02e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e031:	85 c0                	test   eax,eax
c001e033:	75 40                	jne    c001e075 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e039:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e03d:	89 10                	mov    DWORD PTR [eax],edx
c001e03f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e043:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e047:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e04e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e051:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e05c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e05f:	85 c0                	test   eax,eax
c001e061:	74 22                	je     c001e085 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e063:	83 ec 0c             	sub    esp,0xc
c001e066:	68 6a f4 01 c0       	push   0xc001f46a
c001e06b:	e8 57 23 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e070:	83 c4 10             	add    esp,0x10
c001e073:	eb 10                	jmp    c001e085 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e075:	83 ec 0c             	sub    esp,0xc
c001e078:	68 74 f4 01 c0       	push   0xc001f474
c001e07d:	e8 45 23 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e082:	83 c4 10             	add    esp,0x10
c001e085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e089:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e08c:	8d 50 01             	lea    edx,[eax+0x1]
c001e08f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e093:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e096:	90                   	nop
c001e097:	83 c4 0c             	add    esp,0xc
c001e09a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e09c <LinkedList<UnixFile>::getFirstElement()>:
c001e09c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e0a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e0a4 <LinkedList<UnixFile>::removeFirst()>:
c001e0a4:	83 ec 0c             	sub    esp,0xc
c001e0a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0ad:	85 c0                	test   eax,eax
c001e0af:	75 12                	jne    c001e0c3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e0b1:	83 ec 0c             	sub    esp,0xc
c001e0b4:	68 80 f4 01 c0       	push   0xc001f480
c001e0b9:	e8 09 23 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e0be:	83 c4 10             	add    esp,0x10
c001e0c1:	eb 7e                	jmp    c001e141 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e0c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e0ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e0cd:	85 c0                	test   eax,eax
c001e0cf:	74 10                	je     c001e0e1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e0d1:	83 ec 0c             	sub    esp,0xc
c001e0d4:	68 cb f4 01 c0       	push   0xc001f4cb
c001e0d9:	e8 e9 22 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e0de:	83 c4 10             	add    esp,0x10
c001e0e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0e5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e0ea:	85 c0                	test   eax,eax
c001e0ec:	75 33                	jne    c001e121 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e0f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e107:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e10a:	83 f8 01             	cmp    eax,0x1
c001e10d:	74 21                	je     c001e130 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e10f:	83 ec 0c             	sub    esp,0xc
c001e112:	68 a4 f4 01 c0       	push   0xc001f4a4
c001e117:	e8 ab 22 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e11c:	83 c4 10             	add    esp,0x10
c001e11f:	eb 0f                	jmp    c001e130 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e125:	8b 00                	mov    eax,DWORD PTR [eax]
c001e127:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e12a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e12e:	89 10                	mov    DWORD PTR [eax],edx
c001e130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e134:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e137:	8d 50 ff             	lea    edx,[eax-0x1]
c001e13a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e13e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e141:	83 c4 0c             	add    esp,0xc
c001e144:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e146 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e146:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e14a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e14d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e14e <DriverlessDevice::~DriverlessDevice()>:
c001e14e:	ba 1c fb 01 c0       	mov    edx,0xc001fb1c
c001e153:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e157:	89 10                	mov    DWORD PTR [eax],edx
c001e159:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e15d:	50                   	push   eax
c001e15e:	e8 e3 d7 fe ff       	call   c000b946 <Device::~Device()>
c001e163:	83 c4 04             	add    esp,0x4
c001e166:	90                   	nop
c001e167:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001e168 <DriverlessDevice::~DriverlessDevice()>:
c001e168:	83 ec 0c             	sub    esp,0xc
c001e16b:	83 ec 0c             	sub    esp,0xc
c001e16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e172:	e8 d7 ff ff ff       	call   c001e14e <DriverlessDevice::~DriverlessDevice()>
c001e177:	83 c4 10             	add    esp,0x10
c001e17a:	83 ec 08             	sub    esp,0x8
c001e17d:	68 58 01 00 00       	push   0x158
c001e182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e186:	e8 85 c3 fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e18b:	83 c4 10             	add    esp,0x10
c001e18e:	83 c4 0c             	add    esp,0xc
c001e191:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001e192 <LinkedList<Device>::addElement(Device*)>:
c001e192:	83 ec 0c             	sub    esp,0xc
c001e195:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e19a:	75 10                	jne    c001e1ac <LinkedList<Device>::addElement(Device*)+0x1a>
c001e19c:	83 ec 0c             	sub    esp,0xc
c001e19f:	68 48 f4 01 c0       	push   0xc001f448
c001e1a4:	e8 1e 22 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e1a9:	83 c4 10             	add    esp,0x10
c001e1ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1b2:	85 c0                	test   eax,eax
c001e1b4:	74 3a                	je     c001e1f0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e1b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e1bd:	85 c0                	test   eax,eax
c001e1bf:	74 2f                	je     c001e1f0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e1c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e1c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1cc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001e1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1da:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e1dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e1e4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e1ee:	eb 68                	jmp    c001e258 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1f6:	85 c0                	test   eax,eax
c001e1f8:	75 4e                	jne    c001e248 <LinkedList<Device>::addElement(Device*)+0xb6>
c001e1fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e201:	85 c0                	test   eax,eax
c001e203:	75 43                	jne    c001e248 <LinkedList<Device>::addElement(Device*)+0xb6>
c001e205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e209:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e20d:	89 10                	mov    DWORD PTR [eax],edx
c001e20f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e213:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e217:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e21a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e21e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e221:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e22b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e22f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e232:	85 c0                	test   eax,eax
c001e234:	74 22                	je     c001e258 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e236:	83 ec 0c             	sub    esp,0xc
c001e239:	68 6a f4 01 c0       	push   0xc001f46a
c001e23e:	e8 84 21 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e243:	83 c4 10             	add    esp,0x10
c001e246:	eb 10                	jmp    c001e258 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e248:	83 ec 0c             	sub    esp,0xc
c001e24b:	68 74 f4 01 c0       	push   0xc001f474
c001e250:	e8 72 21 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e255:	83 c4 10             	add    esp,0x10
c001e258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e25c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e25f:	8d 50 01             	lea    edx,[eax+0x1]
c001e262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e266:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e269:	90                   	nop
c001e26a:	83 c4 0c             	add    esp,0xc
c001e26d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001e26e <LinkedList<Device>::LinkedList()>:
c001e26e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e272:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e278:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e27c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e283:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e287:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e28e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e292:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e29c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e2a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e2ae:	90                   	nop
c001e2af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001e2b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001e2b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2b6:	85 c0                	test   eax,eax
c001e2b8:	75 0e                	jne    c001e2c8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e2ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e2c1:	85 c0                	test   eax,eax
c001e2c3:	75 03                	jne    c001e2c8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e2c5:	b0 01                	mov    al,0x1
c001e2c7:	c3                   	ret    
c001e2c8:	b0 00                	mov    al,0x0
c001e2ca:	90                   	nop
c001e2cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001e2cc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001e2cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001e2d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001e2d4:	83 ec 0c             	sub    esp,0xc
c001e2d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2db:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2dd:	85 c0                	test   eax,eax
c001e2df:	75 17                	jne    c001e2f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001e2e1:	83 ec 0c             	sub    esp,0xc
c001e2e4:	68 80 f4 01 c0       	push   0xc001f480
c001e2e9:	e8 d9 20 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e2ee:	83 c4 10             	add    esp,0x10
c001e2f1:	e9 92 00 00 00       	jmp    c001e388 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001e2f6:	66 90                	xchg   ax,ax
c001e2f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e2ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e302:	85 c0                	test   eax,eax
c001e304:	0f 95 c0             	setne  al
c001e307:	84 c0                	test   al,al
c001e309:	74 11                	je     c001e31c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001e30b:	83 ec 0c             	sub    esp,0xc
c001e30e:	68 cb f4 01 c0       	push   0xc001f4cb
c001e313:	e8 af 20 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e318:	83 c4 10             	add    esp,0x10
c001e31b:	90                   	nop
c001e31c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e320:	8b 00                	mov    eax,DWORD PTR [eax]
c001e322:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e325:	85 c0                	test   eax,eax
c001e327:	0f 94 c0             	sete   al
c001e32a:	84 c0                	test   al,al
c001e32c:	74 36                	je     c001e364 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001e32e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e332:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e33c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e347:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e34a:	83 f8 01             	cmp    eax,0x1
c001e34d:	74 25                	je     c001e374 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001e34f:	83 ec 0c             	sub    esp,0xc
c001e352:	68 a4 f4 01 c0       	push   0xc001f4a4
c001e357:	e8 6b 20 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e35c:	83 c4 10             	add    esp,0x10
c001e35f:	eb 13                	jmp    c001e374 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001e361:	8d 76 00             	lea    esi,[esi+0x0]
c001e364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e368:	8b 00                	mov    eax,DWORD PTR [eax]
c001e36a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e36d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e371:	89 10                	mov    DWORD PTR [eax],edx
c001e373:	90                   	nop
c001e374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e378:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e37b:	8d 50 ff             	lea    edx,[eax-0x1]
c001e37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e382:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e385:	8d 76 00             	lea    esi,[esi+0x0]
c001e388:	83 c4 0c             	add    esp,0xc
c001e38b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001e38c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001e38c:	83 ec 0c             	sub    esp,0xc
c001e38f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e394:	75 12                	jne    c001e3a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001e396:	83 ec 0c             	sub    esp,0xc
c001e399:	68 48 f4 01 c0       	push   0xc001f448
c001e39e:	e8 24 20 ff ff       	call   c00103c7 <KePanic(char const*)>
c001e3a3:	83 c4 10             	add    esp,0x10
c001e3a6:	66 90                	xchg   ax,ax
c001e3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3ae:	85 c0                	test   eax,eax
c001e3b0:	74 36                	je     c001e3e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001e3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e3b9:	85 c0                	test   eax,eax
c001e3bb:	74 2b                	je     c001e3e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001e3bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e3c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e3c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001e3cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e3d3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e3d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e3dd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e3e4:	eb 6a                	jmp    c001e450 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e3e6:	66 90                	xchg   ax,ax
c001e3e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3ee:	85 c0                	test   eax,eax
c001e3f0:	75 4e                	jne    c001e440 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001e3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e3f9:	85 c0                	test   eax,eax
c001e3fb:	75 43                	jne    c001e440 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001e3fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e401:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e405:	89 10                	mov    DWORD PTR [eax],edx
c001e407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e40b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e40f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e416:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e419:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e424:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e427:	85 c0                	test   eax,eax
c001e429:	74 25                	je     c001e450 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e42b:	83 ec 0c             	sub    esp,0xc
c001e42e:	68 6a f4 01 c0       	push   0xc001f46a
c001e433:	e8 8f 1f ff ff       	call   c00103c7 <KePanic(char const*)>
c001e438:	83 c4 10             	add    esp,0x10
c001e43b:	eb 13                	jmp    c001e450 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e43d:	8d 76 00             	lea    esi,[esi+0x0]
c001e440:	83 ec 0c             	sub    esp,0xc
c001e443:	68 74 f4 01 c0       	push   0xc001f474
c001e448:	e8 7a 1f ff ff       	call   c00103c7 <KePanic(char const*)>
c001e44d:	83 c4 10             	add    esp,0x10
c001e450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e454:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e457:	8d 50 01             	lea    edx,[eax+0x1]
c001e45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e45e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e461:	90                   	nop
c001e462:	83 c4 0c             	add    esp,0xc
c001e465:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001e468 <ACPI::~ACPI()>:
c001e468:	83 ec 0c             	sub    esp,0xc
c001e46b:	ba e8 00 02 c0       	mov    edx,0xc00200e8
c001e470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e474:	89 10                	mov    DWORD PTR [eax],edx
c001e476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e47a:	83 ec 0c             	sub    esp,0xc
c001e47d:	50                   	push   eax
c001e47e:	e8 c3 d4 fe ff       	call   c000b946 <Device::~Device()>
c001e483:	83 c4 10             	add    esp,0x10
c001e486:	90                   	nop
c001e487:	83 c4 0c             	add    esp,0xc
c001e48a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001e48c <ACPI::~ACPI()>:
c001e48c:	83 ec 0c             	sub    esp,0xc
c001e48f:	83 ec 0c             	sub    esp,0xc
c001e492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e496:	e8 cd ff ff ff       	call   c001e468 <ACPI::~ACPI()>
c001e49b:	83 c4 10             	add    esp,0x10
c001e49e:	83 ec 08             	sub    esp,0x8
c001e4a1:	68 64 12 00 00       	push   0x1264
c001e4a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e4aa:	e8 61 c0 fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e4af:	83 c4 10             	add    esp,0x10
c001e4b2:	83 c4 0c             	add    esp,0xc
c001e4b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001e4b8 <LinkedList<Device>::~LinkedList()>:
c001e4b8:	90                   	nop
c001e4b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001e4bc <LinkedList<Device>::isEmpty()>:
c001e4bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4c2:	85 c0                	test   eax,eax
c001e4c4:	75 0e                	jne    c001e4d4 <LinkedList<Device>::isEmpty()+0x18>
c001e4c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e4cd:	85 c0                	test   eax,eax
c001e4cf:	75 03                	jne    c001e4d4 <LinkedList<Device>::isEmpty()+0x18>
c001e4d1:	b0 01                	mov    al,0x1
c001e4d3:	c3                   	ret    
c001e4d4:	b0 00                	mov    al,0x0
c001e4d6:	90                   	nop
c001e4d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001e4d8 <LinkedList<Device>::getFirstElement()>:
c001e4d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4de:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001e4e0 <LinkedList<Device>::removeFirst()>:
c001e4e0:	83 ec 0c             	sub    esp,0xc
c001e4e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4e9:	85 c0                	test   eax,eax
c001e4eb:	75 17                	jne    c001e504 <LinkedList<Device>::removeFirst()+0x24>
c001e4ed:	83 ec 0c             	sub    esp,0xc
c001e4f0:	68 80 f4 01 c0       	push   0xc001f480
c001e4f5:	e8 cd 1e ff ff       	call   c00103c7 <KePanic(char const*)>
c001e4fa:	83 c4 10             	add    esp,0x10
c001e4fd:	e9 92 00 00 00       	jmp    c001e594 <LinkedList<Device>::removeFirst()+0xb4>
c001e502:	66 90                	xchg   ax,ax
c001e504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e508:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e50b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001e511:	85 c0                	test   eax,eax
c001e513:	74 13                	je     c001e528 <LinkedList<Device>::removeFirst()+0x48>
c001e515:	83 ec 0c             	sub    esp,0xc
c001e518:	68 cb f4 01 c0       	push   0xc001f4cb
c001e51d:	e8 a5 1e ff ff       	call   c00103c7 <KePanic(char const*)>
c001e522:	83 c4 10             	add    esp,0x10
c001e525:	8d 76 00             	lea    esi,[esi+0x0]
c001e528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e52c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e52e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001e534:	85 c0                	test   eax,eax
c001e536:	75 34                	jne    c001e56c <LinkedList<Device>::removeFirst()+0x8c>
c001e538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e53c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e546:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e54d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e551:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e554:	83 f8 01             	cmp    eax,0x1
c001e557:	74 27                	je     c001e580 <LinkedList<Device>::removeFirst()+0xa0>
c001e559:	83 ec 0c             	sub    esp,0xc
c001e55c:	68 a4 f4 01 c0       	push   0xc001f4a4
c001e561:	e8 61 1e ff ff       	call   c00103c7 <KePanic(char const*)>
c001e566:	83 c4 10             	add    esp,0x10
c001e569:	eb 15                	jmp    c001e580 <LinkedList<Device>::removeFirst()+0xa0>
c001e56b:	90                   	nop
c001e56c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e570:	8b 00                	mov    eax,DWORD PTR [eax]
c001e572:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001e578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e57c:	89 10                	mov    DWORD PTR [eax],edx
c001e57e:	66 90                	xchg   ax,ax
c001e580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e584:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e587:	8d 50 ff             	lea    edx,[eax-0x1]
c001e58a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e58e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e591:	8d 76 00             	lea    esi,[esi+0x0]
c001e594:	83 c4 0c             	add    esp,0xc
c001e597:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001e598 <CPU::~CPU()>:
c001e598:	83 ec 0c             	sub    esp,0xc
c001e59b:	ba 84 02 02 c0       	mov    edx,0xc0020284
c001e5a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5a4:	89 10                	mov    DWORD PTR [eax],edx
c001e5a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5aa:	83 ec 0c             	sub    esp,0xc
c001e5ad:	50                   	push   eax
c001e5ae:	e8 93 d3 fe ff       	call   c000b946 <Device::~Device()>
c001e5b3:	83 c4 10             	add    esp,0x10
c001e5b6:	90                   	nop
c001e5b7:	83 c4 0c             	add    esp,0xc
c001e5ba:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001e5bc <CPU::~CPU()>:
c001e5bc:	83 ec 0c             	sub    esp,0xc
c001e5bf:	83 ec 0c             	sub    esp,0xc
c001e5c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e5c6:	e8 cd ff ff ff       	call   c001e598 <CPU::~CPU()>
c001e5cb:	83 c4 10             	add    esp,0x10
c001e5ce:	83 ec 08             	sub    esp,0x8
c001e5d1:	68 94 11 00 00       	push   0x1194
c001e5d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e5da:	e8 31 bf fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e5df:	83 c4 10             	add    esp,0x10
c001e5e2:	83 c4 0c             	add    esp,0xc
c001e5e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001e5e8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001e5e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e5ec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e5ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001e5f0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001e5f0:	90                   	nop
c001e5f1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001e5f4 <ThreadControlBlock::ThreadControlBlock()>:
c001e5f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5f8:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e5ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e603:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001e60a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e60e:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001e615:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e619:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001e620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e624:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001e62b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e62f:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001e633:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e637:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001e63b:	90                   	nop
c001e63c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001e640 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001e640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e644:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e64a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e64e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e655:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e659:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e664:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e66a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e66e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e675:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e679:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e680:	90                   	nop
c001e681:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001e682 <PCI::~PCI()>:
c001e682:	83 ec 0c             	sub    esp,0xc
c001e685:	ba 0c 11 02 c0       	mov    edx,0xc002110c
c001e68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e68e:	89 10                	mov    DWORD PTR [eax],edx
c001e690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e694:	83 ec 0c             	sub    esp,0xc
c001e697:	50                   	push   eax
c001e698:	e8 33 cd fe ff       	call   c000b3d0 <Bus::~Bus()>
c001e69d:	83 c4 10             	add    esp,0x10
c001e6a0:	90                   	nop
c001e6a1:	83 c4 0c             	add    esp,0xc
c001e6a4:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001e6a6 <PCI::~PCI()>:
c001e6a6:	83 ec 0c             	sub    esp,0xc
c001e6a9:	83 ec 0c             	sub    esp,0xc
c001e6ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e6b0:	e8 cd ff ff ff       	call   c001e682 <PCI::~PCI()>
c001e6b5:	83 c4 10             	add    esp,0x10
c001e6b8:	83 ec 08             	sub    esp,0x8
c001e6bb:	68 5c 01 00 00       	push   0x15c
c001e6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e6c4:	e8 47 be fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e6c9:	83 c4 10             	add    esp,0x10
c001e6cc:	83 c4 0c             	add    esp,0xc
c001e6cf:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001e6d0 <IDE::~IDE()>:
c001e6d0:	83 ec 0c             	sub    esp,0xc
c001e6d3:	ba c0 11 02 c0       	mov    edx,0xc00211c0
c001e6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6dc:	89 10                	mov    DWORD PTR [eax],edx
c001e6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6e2:	83 ec 0c             	sub    esp,0xc
c001e6e5:	50                   	push   eax
c001e6e6:	e8 d5 d6 fe ff       	call   c000bdc0 <HardDiskController::~HardDiskController()>
c001e6eb:	83 c4 10             	add    esp,0x10
c001e6ee:	90                   	nop
c001e6ef:	83 c4 0c             	add    esp,0xc
c001e6f2:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001e6f4 <IDE::~IDE()>:
c001e6f4:	83 ec 0c             	sub    esp,0xc
c001e6f7:	83 ec 0c             	sub    esp,0xc
c001e6fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e6fe:	e8 cd ff ff ff       	call   c001e6d0 <IDE::~IDE()>
c001e703:	83 c4 10             	add    esp,0x10
c001e706:	83 ec 08             	sub    esp,0x8
c001e709:	68 70 02 00 00       	push   0x270
c001e70e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e712:	e8 f9 bd fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e717:	83 c4 10             	add    esp,0x10
c001e71a:	83 c4 0c             	add    esp,0xc
c001e71d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001e71e <SATABus::~SATABus()>:
c001e71e:	83 ec 0c             	sub    esp,0xc
c001e721:	ba 10 12 02 c0       	mov    edx,0xc0021210
c001e726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e72a:	89 10                	mov    DWORD PTR [eax],edx
c001e72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e730:	83 ec 0c             	sub    esp,0xc
c001e733:	50                   	push   eax
c001e734:	e8 87 d6 fe ff       	call   c000bdc0 <HardDiskController::~HardDiskController()>
c001e739:	83 c4 10             	add    esp,0x10
c001e73c:	90                   	nop
c001e73d:	83 c4 0c             	add    esp,0xc
c001e740:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001e742 <SATABus::~SATABus()>:
c001e742:	83 ec 0c             	sub    esp,0xc
c001e745:	83 ec 0c             	sub    esp,0xc
c001e748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e74c:	e8 cd ff ff ff       	call   c001e71e <SATABus::~SATABus()>
c001e751:	83 c4 10             	add    esp,0x10
c001e754:	83 ec 08             	sub    esp,0x8
c001e757:	68 64 01 00 00       	push   0x164
c001e75c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e760:	e8 ab bd fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e765:	83 c4 10             	add    esp,0x10
c001e768:	83 c4 0c             	add    esp,0xc
c001e76b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001e76c <ATA::~ATA()>:
c001e76c:	83 ec 0c             	sub    esp,0xc
c001e76f:	ba 50 12 02 c0       	mov    edx,0xc0021250
c001e774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e778:	89 10                	mov    DWORD PTR [eax],edx
c001e77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e77e:	83 ec 0c             	sub    esp,0xc
c001e781:	50                   	push   eax
c001e782:	e8 1b d7 fe ff       	call   c000bea2 <PhysicalDisk::~PhysicalDisk()>
c001e787:	83 c4 10             	add    esp,0x10
c001e78a:	90                   	nop
c001e78b:	83 c4 0c             	add    esp,0xc
c001e78e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001e790 <ATA::~ATA()>:
c001e790:	83 ec 0c             	sub    esp,0xc
c001e793:	83 ec 0c             	sub    esp,0xc
c001e796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e79a:	e8 cd ff ff ff       	call   c001e76c <ATA::~ATA()>
c001e79f:	83 c4 10             	add    esp,0x10
c001e7a2:	83 ec 08             	sub    esp,0x8
c001e7a5:	68 7c 01 00 00       	push   0x17c
c001e7aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7ae:	e8 5d bd fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e7b3:	83 c4 10             	add    esp,0x10
c001e7b6:	83 c4 0c             	add    esp,0xc
c001e7b9:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001e7ba <ATAPI::~ATAPI()>:
c001e7ba:	83 ec 0c             	sub    esp,0xc
c001e7bd:	ba 98 12 02 c0       	mov    edx,0xc0021298
c001e7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7c6:	89 10                	mov    DWORD PTR [eax],edx
c001e7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7cc:	83 ec 0c             	sub    esp,0xc
c001e7cf:	50                   	push   eax
c001e7d0:	e8 cd d6 fe ff       	call   c000bea2 <PhysicalDisk::~PhysicalDisk()>
c001e7d5:	83 c4 10             	add    esp,0x10
c001e7d8:	90                   	nop
c001e7d9:	83 c4 0c             	add    esp,0xc
c001e7dc:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001e7de <ATAPI::~ATAPI()>:
c001e7de:	83 ec 0c             	sub    esp,0xc
c001e7e1:	83 ec 0c             	sub    esp,0xc
c001e7e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7e8:	e8 cd ff ff ff       	call   c001e7ba <ATAPI::~ATAPI()>
c001e7ed:	83 c4 10             	add    esp,0x10
c001e7f0:	83 ec 08             	sub    esp,0x8
c001e7f3:	68 84 01 00 00       	push   0x184
c001e7f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7fc:	e8 0f bd fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e801:	83 c4 10             	add    esp,0x10
c001e804:	83 c4 0c             	add    esp,0xc
c001e807:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001e808 <SATA::~SATA()>:
c001e808:	83 ec 0c             	sub    esp,0xc
c001e80b:	ba 4c 13 02 c0       	mov    edx,0xc002134c
c001e810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e814:	89 10                	mov    DWORD PTR [eax],edx
c001e816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e81a:	83 ec 0c             	sub    esp,0xc
c001e81d:	50                   	push   eax
c001e81e:	e8 7f d6 fe ff       	call   c000bea2 <PhysicalDisk::~PhysicalDisk()>
c001e823:	83 c4 10             	add    esp,0x10
c001e826:	90                   	nop
c001e827:	83 c4 0c             	add    esp,0xc
c001e82a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001e82c <SATA::~SATA()>:
c001e82c:	83 ec 0c             	sub    esp,0xc
c001e82f:	83 ec 0c             	sub    esp,0xc
c001e832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e836:	e8 cd ff ff ff       	call   c001e808 <SATA::~SATA()>
c001e83b:	83 c4 10             	add    esp,0x10
c001e83e:	83 ec 08             	sub    esp,0x8
c001e841:	68 7c 01 00 00       	push   0x17c
c001e846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e84a:	e8 c1 bc fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e84f:	83 c4 10             	add    esp,0x10
c001e852:	83 c4 0c             	add    esp,0xc
c001e855:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001e856 <SATAPI::~SATAPI()>:
c001e856:	83 ec 0c             	sub    esp,0xc
c001e859:	ba 70 14 02 c0       	mov    edx,0xc0021470
c001e85e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e862:	89 10                	mov    DWORD PTR [eax],edx
c001e864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e868:	83 ec 0c             	sub    esp,0xc
c001e86b:	50                   	push   eax
c001e86c:	e8 31 d6 fe ff       	call   c000bea2 <PhysicalDisk::~PhysicalDisk()>
c001e871:	83 c4 10             	add    esp,0x10
c001e874:	90                   	nop
c001e875:	83 c4 0c             	add    esp,0xc
c001e878:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001e87a <SATAPI::~SATAPI()>:
c001e87a:	83 ec 0c             	sub    esp,0xc
c001e87d:	83 ec 0c             	sub    esp,0xc
c001e880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e884:	e8 cd ff ff ff       	call   c001e856 <SATAPI::~SATAPI()>
c001e889:	83 c4 10             	add    esp,0x10
c001e88c:	83 ec 08             	sub    esp,0x8
c001e88f:	68 84 01 00 00       	push   0x184
c001e894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e898:	e8 73 bc fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e89d:	83 c4 10             	add    esp,0x10
c001e8a0:	83 c4 0c             	add    esp,0xc
c001e8a3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001e8a4 <IOAPIC::~IOAPIC()>:
c001e8a4:	83 ec 0c             	sub    esp,0xc
c001e8a7:	ba b0 14 02 c0       	mov    edx,0xc00214b0
c001e8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b0:	89 10                	mov    DWORD PTR [eax],edx
c001e8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b6:	83 ec 0c             	sub    esp,0xc
c001e8b9:	50                   	push   eax
c001e8ba:	e8 87 d0 fe ff       	call   c000b946 <Device::~Device()>
c001e8bf:	83 c4 10             	add    esp,0x10
c001e8c2:	90                   	nop
c001e8c3:	83 c4 0c             	add    esp,0xc
c001e8c6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001e8c8 <IOAPIC::~IOAPIC()>:
c001e8c8:	83 ec 0c             	sub    esp,0xc
c001e8cb:	83 ec 0c             	sub    esp,0xc
c001e8ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8d2:	e8 cd ff ff ff       	call   c001e8a4 <IOAPIC::~IOAPIC()>
c001e8d7:	83 c4 10             	add    esp,0x10
c001e8da:	83 ec 08             	sub    esp,0x8
c001e8dd:	68 68 01 00 00       	push   0x168
c001e8e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8e6:	e8 25 bc fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e8eb:	83 c4 10             	add    esp,0x10
c001e8ee:	83 c4 0c             	add    esp,0xc
c001e8f1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001e8f4 <APICTimer::~APICTimer()>:
c001e8f4:	83 ec 0c             	sub    esp,0xc
c001e8f7:	ba f8 14 02 c0       	mov    edx,0xc00214f8
c001e8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e900:	89 10                	mov    DWORD PTR [eax],edx
c001e902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e906:	83 ec 0c             	sub    esp,0xc
c001e909:	50                   	push   eax
c001e90a:	e8 31 ea fe ff       	call   c000d340 <Timer::~Timer()>
c001e90f:	83 c4 10             	add    esp,0x10
c001e912:	90                   	nop
c001e913:	83 c4 0c             	add    esp,0xc
c001e916:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001e918 <APICTimer::~APICTimer()>:
c001e918:	83 ec 0c             	sub    esp,0xc
c001e91b:	83 ec 0c             	sub    esp,0xc
c001e91e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e922:	e8 cd ff ff ff       	call   c001e8f4 <APICTimer::~APICTimer()>
c001e927:	83 c4 10             	add    esp,0x10
c001e92a:	83 ec 08             	sub    esp,0x8
c001e92d:	68 60 01 00 00       	push   0x160
c001e932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e936:	e8 d5 bb fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e93b:	83 c4 10             	add    esp,0x10
c001e93e:	83 c4 0c             	add    esp,0xc
c001e941:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001e944 <PIT::~PIT()>:
c001e944:	83 ec 0c             	sub    esp,0xc
c001e947:	ba 48 15 02 c0       	mov    edx,0xc0021548
c001e94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e950:	89 10                	mov    DWORD PTR [eax],edx
c001e952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e956:	83 ec 0c             	sub    esp,0xc
c001e959:	50                   	push   eax
c001e95a:	e8 e1 e9 fe ff       	call   c000d340 <Timer::~Timer()>
c001e95f:	83 c4 10             	add    esp,0x10
c001e962:	90                   	nop
c001e963:	83 c4 0c             	add    esp,0xc
c001e966:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001e968 <PIT::~PIT()>:
c001e968:	83 ec 0c             	sub    esp,0xc
c001e96b:	83 ec 0c             	sub    esp,0xc
c001e96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e972:	e8 cd ff ff ff       	call   c001e944 <PIT::~PIT()>
c001e977:	83 c4 10             	add    esp,0x10
c001e97a:	83 ec 08             	sub    esp,0x8
c001e97d:	68 5c 01 00 00       	push   0x15c
c001e982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e986:	e8 85 bb fe ff       	call   c000a510 <operator delete(void*, unsigned long)>
c001e98b:	83 c4 10             	add    esp,0x10
c001e98e:	83 c4 0c             	add    esp,0xc
c001e991:	c3                   	ret    

Disassembly of section userkernel:

c0022000 <KiDefaultSignalHandlerAbort(int)>:
c0022000:	57                   	push   edi
c0022001:	b9 07 00 00 00       	mov    ecx,0x7
c0022006:	56                   	push   esi
c0022007:	be 75 03 02 c0       	mov    esi,0xc0020375
c002200c:	83 ec 24             	sub    esp,0x24
c002200f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022013:	fc                   	cld    
c0022014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002201a:	50                   	push   eax
c002201b:	6a 00                	push   0x0
c002201d:	6a 38                	push   0x38
c002201f:	6a 01                	push   0x1
c0022021:	e8 2c 00 00 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0022026:	83 c4 34             	add    esp,0x34
c0022029:	5e                   	pop    esi
c002202a:	5f                   	pop    edi
c002202b:	c3                   	ret    

c002202c <KiDefaultSignalHandlerTerminate(int)>:
c002202c:	57                   	push   edi
c002202d:	b9 08 00 00 00       	mov    ecx,0x8
c0022032:	56                   	push   esi
c0022033:	be 91 03 02 c0       	mov    esi,0xc0020391
c0022038:	83 ec 24             	sub    esp,0x24
c002203b:	89 e7                	mov    edi,esp
c002203d:	fc                   	cld    
c002203e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022040:	54                   	push   esp
c0022041:	6a 00                	push   0x0
c0022043:	6a 37                	push   0x37
c0022045:	6a 01                	push   0x1
c0022047:	e8 06 00 00 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002204c:	83 c4 34             	add    esp,0x34
c002204f:	5e                   	pop    esi
c0022050:	5f                   	pop    edi
c0022051:	c3                   	ret    

c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0022052:	53                   	push   ebx
c0022053:	83 ec 10             	sub    esp,0x10
c0022056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002205a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002205e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022066:	cd 60                	int    0x60
c0022068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002206c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022078:	83 c4 10             	add    esp,0x10
c002207b:	5b                   	pop    ebx
c002207c:	c3                   	ret    

Disassembly of section align_previous:

c0023000 <DO_NOT_DELETE()>:
c0023000:	c3                   	ret    
